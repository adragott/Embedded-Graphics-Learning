
e54_gfx_learning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00029a28  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00029a28  00029a28  00039a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000074  20000000  00029a30  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  00040074  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  00040074  2**0
                  CONTENTS
  5 .bss          0000c788  20000078  00029aa8  00040074  2**3
                  ALLOC
  6 .stack        00010000  2000c800  00036230  00040074  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00040074  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  000400a2  2**0
                  CONTENTS, READONLY
  9 .debug_info   0009e53f  00000000  00000000  000400fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000caa1  00000000  00000000  000de63a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0004d8e1  00000000  00000000  000eb0db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002028  00000000  00000000  001389bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00003f30  00000000  00000000  0013a9e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00040960  00000000  00000000  0013e914  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003cb3d  00000000  00000000  0017f274  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0012b03c  00000000  00000000  001bbdb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00006518  00000000  00000000  002e6df0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_gc_clear_roots(void)
{
       0:	00 c8 01 20 31 10 00 00 2d 10 00 00 2d 10 00 00     ... 1...-...-...
#define LV_CLEAR_ROOT(root_type, root_name) _lv_memset_00(&LV_GC_ROOT(root_name), sizeof(LV_GC_ROOT(root_name)));
    LV_ITERATE_ROOTS(LV_CLEAR_ROOT)
      10:	2d 10 00 00 2d 10 00 00 2d 10 00 00 00 00 00 00     -...-...-.......
	...
      2c:	2d 10 00 00 2d 10 00 00 00 00 00 00 2d 10 00 00     -...-.......-...
      3c:	2d 10 00 00 2d 10 00 00 2d 10 00 00 2d 10 00 00     -...-...-...-...
      4c:	2d 10 00 00 2d 10 00 00 2d 10 00 00 2d 10 00 00     -...-...-...-...
      5c:	2d 10 00 00 2d 10 00 00 2d 10 00 00 2d 10 00 00     -...-...-...-...
      6c:	2d 10 00 00 2d 10 00 00 2d 10 00 00 2d 10 00 00     -...-...-...-...
      7c:	2d 10 00 00 2d 10 00 00 2d 10 00 00 2d 10 00 00     -...-...-...-...
      8c:	2d 10 00 00 2d 10 00 00 2d 10 00 00 2d 10 00 00     -...-...-...-...
      9c:	2d 10 00 00 2d 10 00 00 2d 10 00 00 2d 10 00 00     -...-...-...-...
      ac:	2d 10 00 00 2d 10 00 00 2d 10 00 00 2d 10 00 00     -...-...-...-...
      bc:	2d 10 00 00 2d 10 00 00 2d 10 00 00 2d 10 00 00     -...-...-...-...
      cc:	2d 10 00 00 2d 10 00 00 2d 10 00 00 2d 10 00 00     -...-...-...-...
      dc:	2d 10 00 00 2d 10 00 00 2d 10 00 00 00 00 00 00     -...-...-.......
	...
      f4:	11 1d 00 00 2d 10 00 00 2d 10 00 00 2d 10 00 00     ....-...-...-...
     104:	2d 10 00 00 2d 10 00 00 2d 10 00 00 2d 10 00 00     -...-...-...-...
     114:	2d 10 00 00 6d 1f 00 00 81 1f 00 00 95 1f 00 00     -...m...........
     124:	a9 1f 00 00 2d 10 00 00 2d 10 00 00 2d 10 00 00     ....-...-...-...
     134:	2d 10 00 00 2d 10 00 00 2d 10 00 00 2d 10 00 00     -...-...-...-...
     144:	2d 10 00 00 2d 10 00 00 2d 10 00 00 2d 10 00 00     -...-...-...-...
     154:	2d 10 00 00 2d 10 00 00 2d 10 00 00 2d 10 00 00     -...-...-...-...
     164:	2d 10 00 00 2d 10 00 00 2d 10 00 00 2d 10 00 00     -...-...-...-...
     174:	2d 10 00 00 2d 10 00 00 2d 10 00 00 2d 10 00 00     -...-...-...-...
     184:	2d 10 00 00 2d 10 00 00 2d 10 00 00 2d 10 00 00     -...-...-...-...
     194:	2d 10 00 00 2d 10 00 00 2d 10 00 00 2d 10 00 00     -...-...-...-...
     1a4:	2d 10 00 00 2d 10 00 00 2d 10 00 00 2d 10 00 00     -...-...-...-...
     1b4:	2d 10 00 00 2d 10 00 00 2d 10 00 00 2d 10 00 00     -...-...-...-...
     1c4:	2d 10 00 00 2d 10 00 00 2d 10 00 00 2d 10 00 00     -...-...-...-...
     1d4:	2d 10 00 00 2d 10 00 00 2d 10 00 00 2d 10 00 00     -...-...-...-...
     1e4:	2d 10 00 00 2d 10 00 00 31 22 00 00 2d 10 00 00     -...-...1"..-...
     1f4:	2d 10 00 00 2d 10 00 00 2d 10 00 00 2d 10 00 00     -...-...-...-...
     204:	2d 10 00 00 2d 10 00 00 2d 10 00 00 2d 10 00 00     -...-...-...-...
     214:	2d 10 00 00 2d 10 00 00 2d 10 00 00 2d 10 00 00     -...-...-...-...
     224:	2d 10 00 00 2d 10 00 00 2d 10 00 00 2d 10 00 00     -...-...-...-...
     234:	2d 10 00 00 2d 10 00 00 2d 10 00 00 2d 10 00 00     -...-...-...-...
     244:	2d 10 00 00 2d 10 00 00 2d 10 00 00 2d 10 00 00     -...-...-...-...
     254:	2d 10 00 00 2d 10 00 00 2d 10 00 00 2d 10 00 00     -...-...-...-...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000078 	.word	0x20000078
     280:	00000000 	.word	0x00000000
     284:	00029a30 	.word	0x00029a30

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00029a30 	.word	0x00029a30
     2c4:	2000007c 	.word	0x2000007c
     2c8:	00029a30 	.word	0x00029a30
     2cc:	00000000 	.word	0x00000000

000002d0 <ssd1963_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void ssd1963_init(void)
{
     2d0:	b570      	push	{r4, r5, r6, lr}
}

static void ssd1963_reset(void)
{
    /*Hardware reset*/
	asm volatile("nop");
     2d2:	bf00      	nop
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     2d4:	4c8c      	ldr	r4, [pc, #560]	; (508 <ssd1963_init+0x238>)
     2d6:	2610      	movs	r6, #16
     2d8:	61a6      	str	r6, [r4, #24]
    LV_DRV_DISP_RST(1);
    LV_DRV_DELAY_MS(50);
     2da:	2032      	movs	r0, #50	; 0x32
     2dc:	4d8b      	ldr	r5, [pc, #556]	; (50c <ssd1963_init+0x23c>)
     2de:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2e0:	6166      	str	r6, [r4, #20]
    LV_DRV_DISP_RST(0);
	asm volatile("nop");
     2e2:	bf00      	nop
    LV_DRV_DELAY_MS(50);
     2e4:	2032      	movs	r0, #50	; 0x32
     2e6:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     2e8:	61a6      	str	r6, [r4, #24]
    LV_DRV_DISP_RST(1);
    LV_DRV_DELAY_MS(50);
     2ea:	2032      	movs	r0, #50	; 0x32
     2ec:	47a8      	blx	r5

	asm volatile("nop");
     2ee:	bf00      	nop
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2f0:	2640      	movs	r6, #64	; 0x40
     2f2:	6166      	str	r6, [r4, #20]
    /*Chip enable*/
    LV_DRV_DISP_PAR_CS(0);
    LV_DRV_DELAY_MS(10);
     2f4:	200a      	movs	r0, #10
     2f6:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     2f8:	61a6      	str	r6, [r4, #24]
    LV_DRV_DISP_PAR_CS(1);
    LV_DRV_DELAY_MS(5);
     2fa:	2005      	movs	r0, #5
     2fc:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2fe:	6166      	str	r6, [r4, #20]
/**
 * Command mode
 */
static inline void ssd1963_cmd_mode(void)
{
    if(cmd_mode == false) {
     300:	4b83      	ldr	r3, [pc, #524]	; (510 <ssd1963_init+0x240>)
     302:	781b      	ldrb	r3, [r3, #0]
     304:	b923      	cbnz	r3, 310 <ssd1963_init+0x40>
     306:	2220      	movs	r2, #32
     308:	6162      	str	r2, [r4, #20]
        LV_DRV_DISP_CMD_DATA(SSD1963_CMD_MODE);
        cmd_mode = true;
     30a:	2201      	movs	r2, #1
     30c:	4b80      	ldr	r3, [pc, #512]	; (510 <ssd1963_init+0x240>)
     30e:	701a      	strb	r2, [r3, #0]
static inline void ssd1963_cmd(uint8_t cmd)
{

    LV_DRV_DISP_PAR_CS(0);
    ssd1963_cmd_mode();
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     310:	2201      	movs	r2, #1
     312:	4980      	ldr	r1, [pc, #512]	; (514 <ssd1963_init+0x244>)
     314:	4880      	ldr	r0, [pc, #512]	; (518 <ssd1963_init+0x248>)
     316:	4b81      	ldr	r3, [pc, #516]	; (51c <ssd1963_init+0x24c>)
     318:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     31a:	4c7b      	ldr	r4, [pc, #492]	; (508 <ssd1963_init+0x238>)
     31c:	2540      	movs	r5, #64	; 0x40
     31e:	61a5      	str	r5, [r4, #24]
    LV_DRV_DELAY_MS(20);
     320:	2014      	movs	r0, #20
     322:	4b7a      	ldr	r3, [pc, #488]	; (50c <ssd1963_init+0x23c>)
     324:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     326:	6165      	str	r5, [r4, #20]
    if(cmd_mode == false) {
     328:	4b79      	ldr	r3, [pc, #484]	; (510 <ssd1963_init+0x240>)
     32a:	781b      	ldrb	r3, [r3, #0]
     32c:	b923      	cbnz	r3, 338 <ssd1963_init+0x68>
     32e:	2220      	movs	r2, #32
     330:	6162      	str	r2, [r4, #20]
        cmd_mode = true;
     332:	2201      	movs	r2, #1
     334:	4b76      	ldr	r3, [pc, #472]	; (510 <ssd1963_init+0x240>)
     336:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     338:	2201      	movs	r2, #1
     33a:	4976      	ldr	r1, [pc, #472]	; (514 <ssd1963_init+0x244>)
     33c:	4876      	ldr	r0, [pc, #472]	; (518 <ssd1963_init+0x248>)
     33e:	4b77      	ldr	r3, [pc, #476]	; (51c <ssd1963_init+0x24c>)
     340:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     342:	4c71      	ldr	r4, [pc, #452]	; (508 <ssd1963_init+0x238>)
     344:	2540      	movs	r5, #64	; 0x40
     346:	61a5      	str	r5, [r4, #24]
    LV_DRV_DELAY_MS(20);
     348:	2014      	movs	r0, #20
     34a:	4b70      	ldr	r3, [pc, #448]	; (50c <ssd1963_init+0x23c>)
     34c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     34e:	6165      	str	r5, [r4, #20]
    if(cmd_mode == false) {
     350:	4b6f      	ldr	r3, [pc, #444]	; (510 <ssd1963_init+0x240>)
     352:	781b      	ldrb	r3, [r3, #0]
     354:	b923      	cbnz	r3, 360 <ssd1963_init+0x90>
     356:	2220      	movs	r2, #32
     358:	6162      	str	r2, [r4, #20]
        cmd_mode = true;
     35a:	2201      	movs	r2, #1
     35c:	4b6c      	ldr	r3, [pc, #432]	; (510 <ssd1963_init+0x240>)
     35e:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     360:	2201      	movs	r2, #1
     362:	496c      	ldr	r1, [pc, #432]	; (514 <ssd1963_init+0x244>)
     364:	486c      	ldr	r0, [pc, #432]	; (518 <ssd1963_init+0x248>)
     366:	4b6d      	ldr	r3, [pc, #436]	; (51c <ssd1963_init+0x24c>)
     368:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     36a:	4c67      	ldr	r4, [pc, #412]	; (508 <ssd1963_init+0x238>)
     36c:	2540      	movs	r5, #64	; 0x40
     36e:	61a5      	str	r5, [r4, #24]
    LV_DRV_DELAY_MS(20);
     370:	2014      	movs	r0, #20
     372:	4b66      	ldr	r3, [pc, #408]	; (50c <ssd1963_init+0x23c>)
     374:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     376:	6165      	str	r5, [r4, #20]
     378:	6165      	str	r5, [r4, #20]
    if(cmd_mode == false) {
     37a:	4b65      	ldr	r3, [pc, #404]	; (510 <ssd1963_init+0x240>)
     37c:	781b      	ldrb	r3, [r3, #0]
     37e:	b923      	cbnz	r3, 38a <ssd1963_init+0xba>
     380:	2220      	movs	r2, #32
     382:	6162      	str	r2, [r4, #20]
        cmd_mode = true;
     384:	2201      	movs	r2, #1
     386:	4b62      	ldr	r3, [pc, #392]	; (510 <ssd1963_init+0x240>)
     388:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     38a:	22e2      	movs	r2, #226	; 0xe2
     38c:	4961      	ldr	r1, [pc, #388]	; (514 <ssd1963_init+0x244>)
     38e:	4862      	ldr	r0, [pc, #392]	; (518 <ssd1963_init+0x248>)
     390:	4b62      	ldr	r3, [pc, #392]	; (51c <ssd1963_init+0x24c>)
     392:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     394:	4b5c      	ldr	r3, [pc, #368]	; (508 <ssd1963_init+0x238>)
     396:	2240      	movs	r2, #64	; 0x40
     398:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     39a:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     39c:	4b5c      	ldr	r3, [pc, #368]	; (510 <ssd1963_init+0x240>)
     39e:	781b      	ldrb	r3, [r3, #0]
     3a0:	b12b      	cbz	r3, 3ae <ssd1963_init+0xde>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3a2:	2220      	movs	r2, #32
     3a4:	4b58      	ldr	r3, [pc, #352]	; (508 <ssd1963_init+0x238>)
     3a6:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     3a8:	2200      	movs	r2, #0
     3aa:	4b59      	ldr	r3, [pc, #356]	; (510 <ssd1963_init+0x240>)
     3ac:	701a      	strb	r2, [r3, #0]
static inline void ssd1963_data(uint8_t data)
{

    LV_DRV_DISP_PAR_CS(0);
    ssd1963_data_mode();
    LV_DRV_DISP_PAR_WR_WORD(data);
     3ae:	222f      	movs	r2, #47	; 0x2f
     3b0:	4958      	ldr	r1, [pc, #352]	; (514 <ssd1963_init+0x244>)
     3b2:	4859      	ldr	r0, [pc, #356]	; (518 <ssd1963_init+0x248>)
     3b4:	4b59      	ldr	r3, [pc, #356]	; (51c <ssd1963_init+0x24c>)
     3b6:	4798      	blx	r3
     3b8:	4b53      	ldr	r3, [pc, #332]	; (508 <ssd1963_init+0x238>)
     3ba:	2240      	movs	r2, #64	; 0x40
     3bc:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3be:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     3c0:	4b53      	ldr	r3, [pc, #332]	; (510 <ssd1963_init+0x240>)
     3c2:	781b      	ldrb	r3, [r3, #0]
     3c4:	b12b      	cbz	r3, 3d2 <ssd1963_init+0x102>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3c6:	2220      	movs	r2, #32
     3c8:	4b4f      	ldr	r3, [pc, #316]	; (508 <ssd1963_init+0x238>)
     3ca:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     3cc:	2200      	movs	r2, #0
     3ce:	4b50      	ldr	r3, [pc, #320]	; (510 <ssd1963_init+0x240>)
     3d0:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     3d2:	2203      	movs	r2, #3
     3d4:	494f      	ldr	r1, [pc, #316]	; (514 <ssd1963_init+0x244>)
     3d6:	4850      	ldr	r0, [pc, #320]	; (518 <ssd1963_init+0x248>)
     3d8:	4b50      	ldr	r3, [pc, #320]	; (51c <ssd1963_init+0x24c>)
     3da:	4798      	blx	r3
     3dc:	4b4a      	ldr	r3, [pc, #296]	; (508 <ssd1963_init+0x238>)
     3de:	2240      	movs	r2, #64	; 0x40
     3e0:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3e2:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     3e4:	4b4a      	ldr	r3, [pc, #296]	; (510 <ssd1963_init+0x240>)
     3e6:	781b      	ldrb	r3, [r3, #0]
     3e8:	b12b      	cbz	r3, 3f6 <ssd1963_init+0x126>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3ea:	2220      	movs	r2, #32
     3ec:	4b46      	ldr	r3, [pc, #280]	; (508 <ssd1963_init+0x238>)
     3ee:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     3f0:	2200      	movs	r2, #0
     3f2:	4b47      	ldr	r3, [pc, #284]	; (510 <ssd1963_init+0x240>)
     3f4:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     3f6:	2254      	movs	r2, #84	; 0x54
     3f8:	4946      	ldr	r1, [pc, #280]	; (514 <ssd1963_init+0x244>)
     3fa:	4847      	ldr	r0, [pc, #284]	; (518 <ssd1963_init+0x248>)
     3fc:	4b47      	ldr	r3, [pc, #284]	; (51c <ssd1963_init+0x24c>)
     3fe:	4798      	blx	r3
     400:	4b41      	ldr	r3, [pc, #260]	; (508 <ssd1963_init+0x238>)
     402:	2240      	movs	r2, #64	; 0x40
     404:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     406:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     408:	4b41      	ldr	r3, [pc, #260]	; (510 <ssd1963_init+0x240>)
     40a:	781b      	ldrb	r3, [r3, #0]
     40c:	b92b      	cbnz	r3, 41a <ssd1963_init+0x14a>
     40e:	2220      	movs	r2, #32
     410:	4b3d      	ldr	r3, [pc, #244]	; (508 <ssd1963_init+0x238>)
     412:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     414:	2201      	movs	r2, #1
     416:	4b3e      	ldr	r3, [pc, #248]	; (510 <ssd1963_init+0x240>)
     418:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     41a:	22e0      	movs	r2, #224	; 0xe0
     41c:	493d      	ldr	r1, [pc, #244]	; (514 <ssd1963_init+0x244>)
     41e:	483e      	ldr	r0, [pc, #248]	; (518 <ssd1963_init+0x248>)
     420:	4b3e      	ldr	r3, [pc, #248]	; (51c <ssd1963_init+0x24c>)
     422:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     424:	4b38      	ldr	r3, [pc, #224]	; (508 <ssd1963_init+0x238>)
     426:	2240      	movs	r2, #64	; 0x40
     428:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     42a:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     42c:	4b38      	ldr	r3, [pc, #224]	; (510 <ssd1963_init+0x240>)
     42e:	781b      	ldrb	r3, [r3, #0]
     430:	b12b      	cbz	r3, 43e <ssd1963_init+0x16e>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     432:	2220      	movs	r2, #32
     434:	4b34      	ldr	r3, [pc, #208]	; (508 <ssd1963_init+0x238>)
     436:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     438:	2200      	movs	r2, #0
     43a:	4b35      	ldr	r3, [pc, #212]	; (510 <ssd1963_init+0x240>)
     43c:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     43e:	2201      	movs	r2, #1
     440:	4934      	ldr	r1, [pc, #208]	; (514 <ssd1963_init+0x244>)
     442:	4835      	ldr	r0, [pc, #212]	; (518 <ssd1963_init+0x248>)
     444:	4b35      	ldr	r3, [pc, #212]	; (51c <ssd1963_init+0x24c>)
     446:	4798      	blx	r3
     448:	4c2f      	ldr	r4, [pc, #188]	; (508 <ssd1963_init+0x238>)
     44a:	2540      	movs	r5, #64	; 0x40
     44c:	61a5      	str	r5, [r4, #24]
	delay_us(100);
     44e:	2064      	movs	r0, #100	; 0x64
     450:	4b33      	ldr	r3, [pc, #204]	; (520 <ssd1963_init+0x250>)
     452:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     454:	6165      	str	r5, [r4, #20]
    if(cmd_mode == false) {
     456:	4b2e      	ldr	r3, [pc, #184]	; (510 <ssd1963_init+0x240>)
     458:	781b      	ldrb	r3, [r3, #0]
     45a:	b923      	cbnz	r3, 466 <ssd1963_init+0x196>
     45c:	2220      	movs	r2, #32
     45e:	6162      	str	r2, [r4, #20]
        cmd_mode = true;
     460:	2201      	movs	r2, #1
     462:	4b2b      	ldr	r3, [pc, #172]	; (510 <ssd1963_init+0x240>)
     464:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     466:	22e0      	movs	r2, #224	; 0xe0
     468:	492a      	ldr	r1, [pc, #168]	; (514 <ssd1963_init+0x244>)
     46a:	482b      	ldr	r0, [pc, #172]	; (518 <ssd1963_init+0x248>)
     46c:	4b2b      	ldr	r3, [pc, #172]	; (51c <ssd1963_init+0x24c>)
     46e:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     470:	4b25      	ldr	r3, [pc, #148]	; (508 <ssd1963_init+0x238>)
     472:	2240      	movs	r2, #64	; 0x40
     474:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     476:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     478:	4b25      	ldr	r3, [pc, #148]	; (510 <ssd1963_init+0x240>)
     47a:	781b      	ldrb	r3, [r3, #0]
     47c:	b12b      	cbz	r3, 48a <ssd1963_init+0x1ba>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     47e:	2220      	movs	r2, #32
     480:	4b21      	ldr	r3, [pc, #132]	; (508 <ssd1963_init+0x238>)
     482:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     484:	2200      	movs	r2, #0
     486:	4b22      	ldr	r3, [pc, #136]	; (510 <ssd1963_init+0x240>)
     488:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     48a:	2203      	movs	r2, #3
     48c:	4921      	ldr	r1, [pc, #132]	; (514 <ssd1963_init+0x244>)
     48e:	4822      	ldr	r0, [pc, #136]	; (518 <ssd1963_init+0x248>)
     490:	4b22      	ldr	r3, [pc, #136]	; (51c <ssd1963_init+0x24c>)
     492:	4798      	blx	r3
     494:	4c1c      	ldr	r4, [pc, #112]	; (508 <ssd1963_init+0x238>)
     496:	2540      	movs	r5, #64	; 0x40
     498:	61a5      	str	r5, [r4, #24]
	delay_ms(1);
     49a:	2001      	movs	r0, #1
     49c:	4b1b      	ldr	r3, [pc, #108]	; (50c <ssd1963_init+0x23c>)
     49e:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4a0:	6165      	str	r5, [r4, #20]
    if(cmd_mode == false) {
     4a2:	4b1b      	ldr	r3, [pc, #108]	; (510 <ssd1963_init+0x240>)
     4a4:	781b      	ldrb	r3, [r3, #0]
     4a6:	b923      	cbnz	r3, 4b2 <ssd1963_init+0x1e2>
     4a8:	2220      	movs	r2, #32
     4aa:	6162      	str	r2, [r4, #20]
        cmd_mode = true;
     4ac:	2201      	movs	r2, #1
     4ae:	4b18      	ldr	r3, [pc, #96]	; (510 <ssd1963_init+0x240>)
     4b0:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     4b2:	2201      	movs	r2, #1
     4b4:	4917      	ldr	r1, [pc, #92]	; (514 <ssd1963_init+0x244>)
     4b6:	4818      	ldr	r0, [pc, #96]	; (518 <ssd1963_init+0x248>)
     4b8:	4b18      	ldr	r3, [pc, #96]	; (51c <ssd1963_init+0x24c>)
     4ba:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     4bc:	4c12      	ldr	r4, [pc, #72]	; (508 <ssd1963_init+0x238>)
     4be:	2540      	movs	r5, #64	; 0x40
     4c0:	61a5      	str	r5, [r4, #24]
	delay_ms(1);
     4c2:	2001      	movs	r0, #1
     4c4:	4b11      	ldr	r3, [pc, #68]	; (50c <ssd1963_init+0x23c>)
     4c6:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4c8:	6165      	str	r5, [r4, #20]
    if(cmd_mode == false) {
     4ca:	4b11      	ldr	r3, [pc, #68]	; (510 <ssd1963_init+0x240>)
     4cc:	781b      	ldrb	r3, [r3, #0]
     4ce:	b923      	cbnz	r3, 4da <ssd1963_init+0x20a>
     4d0:	2220      	movs	r2, #32
     4d2:	6162      	str	r2, [r4, #20]
        cmd_mode = true;
     4d4:	2201      	movs	r2, #1
     4d6:	4b0e      	ldr	r3, [pc, #56]	; (510 <ssd1963_init+0x240>)
     4d8:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     4da:	22e6      	movs	r2, #230	; 0xe6
     4dc:	490d      	ldr	r1, [pc, #52]	; (514 <ssd1963_init+0x244>)
     4de:	480e      	ldr	r0, [pc, #56]	; (518 <ssd1963_init+0x248>)
     4e0:	4b0e      	ldr	r3, [pc, #56]	; (51c <ssd1963_init+0x24c>)
     4e2:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     4e4:	4b08      	ldr	r3, [pc, #32]	; (508 <ssd1963_init+0x238>)
     4e6:	2240      	movs	r2, #64	; 0x40
     4e8:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4ea:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     4ec:	4b08      	ldr	r3, [pc, #32]	; (510 <ssd1963_init+0x240>)
     4ee:	781b      	ldrb	r3, [r3, #0]
     4f0:	b12b      	cbz	r3, 4fe <ssd1963_init+0x22e>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     4f2:	2220      	movs	r2, #32
     4f4:	4b04      	ldr	r3, [pc, #16]	; (508 <ssd1963_init+0x238>)
     4f6:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     4f8:	2200      	movs	r2, #0
     4fa:	4b05      	ldr	r3, [pc, #20]	; (510 <ssd1963_init+0x240>)
     4fc:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     4fe:	2201      	movs	r2, #1
     500:	4904      	ldr	r1, [pc, #16]	; (514 <ssd1963_init+0x244>)
     502:	4805      	ldr	r0, [pc, #20]	; (518 <ssd1963_init+0x248>)
     504:	e00e      	b.n	524 <ssd1963_init+0x254>
     506:	bf00      	nop
     508:	41008000 	.word	0x41008000
     50c:	000015c1 	.word	0x000015c1
     510:	20000000 	.word	0x20000000
     514:	1c03c3f7 	.word	0x1c03c3f7
     518:	41008080 	.word	0x41008080
     51c:	000010f9 	.word	0x000010f9
     520:	000015a1 	.word	0x000015a1
     524:	4b8a      	ldr	r3, [pc, #552]	; (750 <ssd1963_init+0x480>)
     526:	4798      	blx	r3
     528:	4b8a      	ldr	r3, [pc, #552]	; (754 <ssd1963_init+0x484>)
     52a:	2240      	movs	r2, #64	; 0x40
     52c:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     52e:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     530:	4b89      	ldr	r3, [pc, #548]	; (758 <ssd1963_init+0x488>)
     532:	781b      	ldrb	r3, [r3, #0]
     534:	b12b      	cbz	r3, 542 <ssd1963_init+0x272>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     536:	2220      	movs	r2, #32
     538:	4b86      	ldr	r3, [pc, #536]	; (754 <ssd1963_init+0x484>)
     53a:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     53c:	2200      	movs	r2, #0
     53e:	4b86      	ldr	r3, [pc, #536]	; (758 <ssd1963_init+0x488>)
     540:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     542:	22cc      	movs	r2, #204	; 0xcc
     544:	4985      	ldr	r1, [pc, #532]	; (75c <ssd1963_init+0x48c>)
     546:	4886      	ldr	r0, [pc, #536]	; (760 <ssd1963_init+0x490>)
     548:	4b81      	ldr	r3, [pc, #516]	; (750 <ssd1963_init+0x480>)
     54a:	4798      	blx	r3
     54c:	4b81      	ldr	r3, [pc, #516]	; (754 <ssd1963_init+0x484>)
     54e:	2240      	movs	r2, #64	; 0x40
     550:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     552:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     554:	4b80      	ldr	r3, [pc, #512]	; (758 <ssd1963_init+0x488>)
     556:	781b      	ldrb	r3, [r3, #0]
     558:	b12b      	cbz	r3, 566 <ssd1963_init+0x296>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     55a:	2220      	movs	r2, #32
     55c:	4b7d      	ldr	r3, [pc, #500]	; (754 <ssd1963_init+0x484>)
     55e:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     560:	2200      	movs	r2, #0
     562:	4b7d      	ldr	r3, [pc, #500]	; (758 <ssd1963_init+0x488>)
     564:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     566:	22cc      	movs	r2, #204	; 0xcc
     568:	497c      	ldr	r1, [pc, #496]	; (75c <ssd1963_init+0x48c>)
     56a:	487d      	ldr	r0, [pc, #500]	; (760 <ssd1963_init+0x490>)
     56c:	4b78      	ldr	r3, [pc, #480]	; (750 <ssd1963_init+0x480>)
     56e:	4798      	blx	r3
     570:	4b78      	ldr	r3, [pc, #480]	; (754 <ssd1963_init+0x484>)
     572:	2240      	movs	r2, #64	; 0x40
     574:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     576:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     578:	4b77      	ldr	r3, [pc, #476]	; (758 <ssd1963_init+0x488>)
     57a:	781b      	ldrb	r3, [r3, #0]
     57c:	b92b      	cbnz	r3, 58a <ssd1963_init+0x2ba>
     57e:	2220      	movs	r2, #32
     580:	4b74      	ldr	r3, [pc, #464]	; (754 <ssd1963_init+0x484>)
     582:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     584:	2201      	movs	r2, #1
     586:	4b74      	ldr	r3, [pc, #464]	; (758 <ssd1963_init+0x488>)
     588:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     58a:	22b0      	movs	r2, #176	; 0xb0
     58c:	4973      	ldr	r1, [pc, #460]	; (75c <ssd1963_init+0x48c>)
     58e:	4874      	ldr	r0, [pc, #464]	; (760 <ssd1963_init+0x490>)
     590:	4b6f      	ldr	r3, [pc, #444]	; (750 <ssd1963_init+0x480>)
     592:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     594:	4b6f      	ldr	r3, [pc, #444]	; (754 <ssd1963_init+0x484>)
     596:	2240      	movs	r2, #64	; 0x40
     598:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     59a:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     59c:	4b6e      	ldr	r3, [pc, #440]	; (758 <ssd1963_init+0x488>)
     59e:	781b      	ldrb	r3, [r3, #0]
     5a0:	b12b      	cbz	r3, 5ae <ssd1963_init+0x2de>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     5a2:	2220      	movs	r2, #32
     5a4:	4b6b      	ldr	r3, [pc, #428]	; (754 <ssd1963_init+0x484>)
     5a6:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     5a8:	2200      	movs	r2, #0
     5aa:	4b6b      	ldr	r3, [pc, #428]	; (758 <ssd1963_init+0x488>)
     5ac:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     5ae:	2228      	movs	r2, #40	; 0x28
     5b0:	496a      	ldr	r1, [pc, #424]	; (75c <ssd1963_init+0x48c>)
     5b2:	486b      	ldr	r0, [pc, #428]	; (760 <ssd1963_init+0x490>)
     5b4:	4b66      	ldr	r3, [pc, #408]	; (750 <ssd1963_init+0x480>)
     5b6:	4798      	blx	r3
     5b8:	4b66      	ldr	r3, [pc, #408]	; (754 <ssd1963_init+0x484>)
     5ba:	2240      	movs	r2, #64	; 0x40
     5bc:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5be:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     5c0:	4b65      	ldr	r3, [pc, #404]	; (758 <ssd1963_init+0x488>)
     5c2:	781b      	ldrb	r3, [r3, #0]
     5c4:	b12b      	cbz	r3, 5d2 <ssd1963_init+0x302>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     5c6:	2220      	movs	r2, #32
     5c8:	4b62      	ldr	r3, [pc, #392]	; (754 <ssd1963_init+0x484>)
     5ca:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     5cc:	2200      	movs	r2, #0
     5ce:	4b62      	ldr	r3, [pc, #392]	; (758 <ssd1963_init+0x488>)
     5d0:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     5d2:	2280      	movs	r2, #128	; 0x80
     5d4:	4961      	ldr	r1, [pc, #388]	; (75c <ssd1963_init+0x48c>)
     5d6:	4862      	ldr	r0, [pc, #392]	; (760 <ssd1963_init+0x490>)
     5d8:	4b5d      	ldr	r3, [pc, #372]	; (750 <ssd1963_init+0x480>)
     5da:	4798      	blx	r3
     5dc:	4c5d      	ldr	r4, [pc, #372]	; (754 <ssd1963_init+0x484>)
     5de:	2540      	movs	r5, #64	; 0x40
     5e0:	61a5      	str	r5, [r4, #24]
	ssd1963_data((SSD1963_HOR_RES-1)>>8); //Set panel size
     5e2:	4b60      	ldr	r3, [pc, #384]	; (764 <ssd1963_init+0x494>)
     5e4:	4798      	blx	r3
     5e6:	4b60      	ldr	r3, [pc, #384]	; (768 <ssd1963_init+0x498>)
     5e8:	4798      	blx	r3
     5ea:	1e42      	subs	r2, r0, #1
     5ec:	f3c2 2207 	ubfx	r2, r2, #8, #8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5f0:	6165      	str	r5, [r4, #20]
    if(cmd_mode != false) {
     5f2:	4b59      	ldr	r3, [pc, #356]	; (758 <ssd1963_init+0x488>)
     5f4:	781b      	ldrb	r3, [r3, #0]
     5f6:	b123      	cbz	r3, 602 <ssd1963_init+0x332>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     5f8:	2120      	movs	r1, #32
     5fa:	61a1      	str	r1, [r4, #24]
        cmd_mode = false;
     5fc:	2100      	movs	r1, #0
     5fe:	4b56      	ldr	r3, [pc, #344]	; (758 <ssd1963_init+0x488>)
     600:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     602:	4956      	ldr	r1, [pc, #344]	; (75c <ssd1963_init+0x48c>)
     604:	4856      	ldr	r0, [pc, #344]	; (760 <ssd1963_init+0x490>)
     606:	4b52      	ldr	r3, [pc, #328]	; (750 <ssd1963_init+0x480>)
     608:	4798      	blx	r3
     60a:	4c52      	ldr	r4, [pc, #328]	; (754 <ssd1963_init+0x484>)
     60c:	2540      	movs	r5, #64	; 0x40
     60e:	61a5      	str	r5, [r4, #24]
	ssd1963_data(SSD1963_HOR_RES-1);
     610:	4b54      	ldr	r3, [pc, #336]	; (764 <ssd1963_init+0x494>)
     612:	4798      	blx	r3
     614:	4b54      	ldr	r3, [pc, #336]	; (768 <ssd1963_init+0x498>)
     616:	4798      	blx	r3
     618:	1e42      	subs	r2, r0, #1
     61a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     61c:	6165      	str	r5, [r4, #20]
    if(cmd_mode != false) {
     61e:	4b4e      	ldr	r3, [pc, #312]	; (758 <ssd1963_init+0x488>)
     620:	781b      	ldrb	r3, [r3, #0]
     622:	b123      	cbz	r3, 62e <ssd1963_init+0x35e>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     624:	2120      	movs	r1, #32
     626:	61a1      	str	r1, [r4, #24]
        cmd_mode = false;
     628:	2100      	movs	r1, #0
     62a:	4b4b      	ldr	r3, [pc, #300]	; (758 <ssd1963_init+0x488>)
     62c:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     62e:	494b      	ldr	r1, [pc, #300]	; (75c <ssd1963_init+0x48c>)
     630:	484b      	ldr	r0, [pc, #300]	; (760 <ssd1963_init+0x490>)
     632:	4b47      	ldr	r3, [pc, #284]	; (750 <ssd1963_init+0x480>)
     634:	4798      	blx	r3
     636:	4c47      	ldr	r4, [pc, #284]	; (754 <ssd1963_init+0x484>)
     638:	2540      	movs	r5, #64	; 0x40
     63a:	61a5      	str	r5, [r4, #24]
	ssd1963_data((SSD1963_VER_RES-1)>>8);
     63c:	4b49      	ldr	r3, [pc, #292]	; (764 <ssd1963_init+0x494>)
     63e:	4798      	blx	r3
     640:	4b4a      	ldr	r3, [pc, #296]	; (76c <ssd1963_init+0x49c>)
     642:	4798      	blx	r3
     644:	1e42      	subs	r2, r0, #1
     646:	f3c2 2207 	ubfx	r2, r2, #8, #8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     64a:	6165      	str	r5, [r4, #20]
    if(cmd_mode != false) {
     64c:	4b42      	ldr	r3, [pc, #264]	; (758 <ssd1963_init+0x488>)
     64e:	781b      	ldrb	r3, [r3, #0]
     650:	b123      	cbz	r3, 65c <ssd1963_init+0x38c>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     652:	2120      	movs	r1, #32
     654:	61a1      	str	r1, [r4, #24]
        cmd_mode = false;
     656:	2100      	movs	r1, #0
     658:	4b3f      	ldr	r3, [pc, #252]	; (758 <ssd1963_init+0x488>)
     65a:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     65c:	493f      	ldr	r1, [pc, #252]	; (75c <ssd1963_init+0x48c>)
     65e:	4840      	ldr	r0, [pc, #256]	; (760 <ssd1963_init+0x490>)
     660:	4b3b      	ldr	r3, [pc, #236]	; (750 <ssd1963_init+0x480>)
     662:	4798      	blx	r3
     664:	4c3b      	ldr	r4, [pc, #236]	; (754 <ssd1963_init+0x484>)
     666:	2540      	movs	r5, #64	; 0x40
     668:	61a5      	str	r5, [r4, #24]
	ssd1963_data(SSD1963_VER_RES-1);
     66a:	4b3e      	ldr	r3, [pc, #248]	; (764 <ssd1963_init+0x494>)
     66c:	4798      	blx	r3
     66e:	4b3f      	ldr	r3, [pc, #252]	; (76c <ssd1963_init+0x49c>)
     670:	4798      	blx	r3
     672:	1e42      	subs	r2, r0, #1
     674:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     676:	6165      	str	r5, [r4, #20]
    if(cmd_mode != false) {
     678:	4b37      	ldr	r3, [pc, #220]	; (758 <ssd1963_init+0x488>)
     67a:	781b      	ldrb	r3, [r3, #0]
     67c:	b123      	cbz	r3, 688 <ssd1963_init+0x3b8>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     67e:	2120      	movs	r1, #32
     680:	61a1      	str	r1, [r4, #24]
        cmd_mode = false;
     682:	2100      	movs	r1, #0
     684:	4b34      	ldr	r3, [pc, #208]	; (758 <ssd1963_init+0x488>)
     686:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     688:	4934      	ldr	r1, [pc, #208]	; (75c <ssd1963_init+0x48c>)
     68a:	4835      	ldr	r0, [pc, #212]	; (760 <ssd1963_init+0x490>)
     68c:	4b30      	ldr	r3, [pc, #192]	; (750 <ssd1963_init+0x480>)
     68e:	4798      	blx	r3
     690:	4b30      	ldr	r3, [pc, #192]	; (754 <ssd1963_init+0x484>)
     692:	2240      	movs	r2, #64	; 0x40
     694:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     696:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     698:	4b2f      	ldr	r3, [pc, #188]	; (758 <ssd1963_init+0x488>)
     69a:	781b      	ldrb	r3, [r3, #0]
     69c:	b12b      	cbz	r3, 6aa <ssd1963_init+0x3da>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     69e:	2220      	movs	r2, #32
     6a0:	4b2c      	ldr	r3, [pc, #176]	; (754 <ssd1963_init+0x484>)
     6a2:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     6a4:	2200      	movs	r2, #0
     6a6:	4b2c      	ldr	r3, [pc, #176]	; (758 <ssd1963_init+0x488>)
     6a8:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     6aa:	2200      	movs	r2, #0
     6ac:	492b      	ldr	r1, [pc, #172]	; (75c <ssd1963_init+0x48c>)
     6ae:	482c      	ldr	r0, [pc, #176]	; (760 <ssd1963_init+0x490>)
     6b0:	4b27      	ldr	r3, [pc, #156]	; (750 <ssd1963_init+0x480>)
     6b2:	4798      	blx	r3
     6b4:	4b27      	ldr	r3, [pc, #156]	; (754 <ssd1963_init+0x484>)
     6b6:	2240      	movs	r2, #64	; 0x40
     6b8:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     6ba:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     6bc:	4b26      	ldr	r3, [pc, #152]	; (758 <ssd1963_init+0x488>)
     6be:	781b      	ldrb	r3, [r3, #0]
     6c0:	b92b      	cbnz	r3, 6ce <ssd1963_init+0x3fe>
     6c2:	2220      	movs	r2, #32
     6c4:	4b23      	ldr	r3, [pc, #140]	; (754 <ssd1963_init+0x484>)
     6c6:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     6c8:	2201      	movs	r2, #1
     6ca:	4b23      	ldr	r3, [pc, #140]	; (758 <ssd1963_init+0x488>)
     6cc:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     6ce:	22f0      	movs	r2, #240	; 0xf0
     6d0:	4922      	ldr	r1, [pc, #136]	; (75c <ssd1963_init+0x48c>)
     6d2:	4823      	ldr	r0, [pc, #140]	; (760 <ssd1963_init+0x490>)
     6d4:	4b1e      	ldr	r3, [pc, #120]	; (750 <ssd1963_init+0x480>)
     6d6:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     6d8:	4b1e      	ldr	r3, [pc, #120]	; (754 <ssd1963_init+0x484>)
     6da:	2240      	movs	r2, #64	; 0x40
     6dc:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     6de:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     6e0:	4b1d      	ldr	r3, [pc, #116]	; (758 <ssd1963_init+0x488>)
     6e2:	781b      	ldrb	r3, [r3, #0]
     6e4:	b12b      	cbz	r3, 6f2 <ssd1963_init+0x422>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     6e6:	2220      	movs	r2, #32
     6e8:	4b1a      	ldr	r3, [pc, #104]	; (754 <ssd1963_init+0x484>)
     6ea:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     6ec:	2200      	movs	r2, #0
     6ee:	4b1a      	ldr	r3, [pc, #104]	; (758 <ssd1963_init+0x488>)
     6f0:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     6f2:	2203      	movs	r2, #3
     6f4:	4919      	ldr	r1, [pc, #100]	; (75c <ssd1963_init+0x48c>)
     6f6:	481a      	ldr	r0, [pc, #104]	; (760 <ssd1963_init+0x490>)
     6f8:	4b15      	ldr	r3, [pc, #84]	; (750 <ssd1963_init+0x480>)
     6fa:	4798      	blx	r3
     6fc:	4b15      	ldr	r3, [pc, #84]	; (754 <ssd1963_init+0x484>)
     6fe:	2240      	movs	r2, #64	; 0x40
     700:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     702:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     704:	4b14      	ldr	r3, [pc, #80]	; (758 <ssd1963_init+0x488>)
     706:	781b      	ldrb	r3, [r3, #0]
     708:	b92b      	cbnz	r3, 716 <ssd1963_init+0x446>
     70a:	2220      	movs	r2, #32
     70c:	4b11      	ldr	r3, [pc, #68]	; (754 <ssd1963_init+0x484>)
     70e:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     710:	2201      	movs	r2, #1
     712:	4b11      	ldr	r3, [pc, #68]	; (758 <ssd1963_init+0x488>)
     714:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     716:	223a      	movs	r2, #58	; 0x3a
     718:	4910      	ldr	r1, [pc, #64]	; (75c <ssd1963_init+0x48c>)
     71a:	4811      	ldr	r0, [pc, #68]	; (760 <ssd1963_init+0x490>)
     71c:	4b0c      	ldr	r3, [pc, #48]	; (750 <ssd1963_init+0x480>)
     71e:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     720:	4b0c      	ldr	r3, [pc, #48]	; (754 <ssd1963_init+0x484>)
     722:	2240      	movs	r2, #64	; 0x40
     724:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     726:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     728:	4b0b      	ldr	r3, [pc, #44]	; (758 <ssd1963_init+0x488>)
     72a:	781b      	ldrb	r3, [r3, #0]
     72c:	b12b      	cbz	r3, 73a <ssd1963_init+0x46a>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     72e:	2220      	movs	r2, #32
     730:	4b08      	ldr	r3, [pc, #32]	; (754 <ssd1963_init+0x484>)
     732:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     734:	2200      	movs	r2, #0
     736:	4b08      	ldr	r3, [pc, #32]	; (758 <ssd1963_init+0x488>)
     738:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     73a:	2255      	movs	r2, #85	; 0x55
     73c:	4907      	ldr	r1, [pc, #28]	; (75c <ssd1963_init+0x48c>)
     73e:	4808      	ldr	r0, [pc, #32]	; (760 <ssd1963_init+0x490>)
     740:	4b03      	ldr	r3, [pc, #12]	; (750 <ssd1963_init+0x480>)
     742:	4798      	blx	r3
     744:	4b03      	ldr	r3, [pc, #12]	; (754 <ssd1963_init+0x484>)
     746:	2240      	movs	r2, #64	; 0x40
     748:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     74a:	615a      	str	r2, [r3, #20]
     74c:	e010      	b.n	770 <ssd1963_init+0x4a0>
     74e:	bf00      	nop
     750:	000010f9 	.word	0x000010f9
     754:	41008000 	.word	0x41008000
     758:	20000000 	.word	0x20000000
     75c:	1c03c3f7 	.word	0x1c03c3f7
     760:	41008080 	.word	0x41008080
     764:	00010ed5 	.word	0x00010ed5
     768:	00010ee1 	.word	0x00010ee1
     76c:	00010f09 	.word	0x00010f09
    if(cmd_mode == false) {
     770:	4b8a      	ldr	r3, [pc, #552]	; (99c <ssd1963_init+0x6cc>)
     772:	781b      	ldrb	r3, [r3, #0]
     774:	b92b      	cbnz	r3, 782 <ssd1963_init+0x4b2>
     776:	2220      	movs	r2, #32
     778:	4b89      	ldr	r3, [pc, #548]	; (9a0 <ssd1963_init+0x6d0>)
     77a:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     77c:	2201      	movs	r2, #1
     77e:	4b87      	ldr	r3, [pc, #540]	; (99c <ssd1963_init+0x6cc>)
     780:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     782:	22b4      	movs	r2, #180	; 0xb4
     784:	4987      	ldr	r1, [pc, #540]	; (9a4 <ssd1963_init+0x6d4>)
     786:	4888      	ldr	r0, [pc, #544]	; (9a8 <ssd1963_init+0x6d8>)
     788:	4b88      	ldr	r3, [pc, #544]	; (9ac <ssd1963_init+0x6dc>)
     78a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     78c:	4b84      	ldr	r3, [pc, #528]	; (9a0 <ssd1963_init+0x6d0>)
     78e:	2240      	movs	r2, #64	; 0x40
     790:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     792:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     794:	4b81      	ldr	r3, [pc, #516]	; (99c <ssd1963_init+0x6cc>)
     796:	781b      	ldrb	r3, [r3, #0]
     798:	b12b      	cbz	r3, 7a6 <ssd1963_init+0x4d6>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     79a:	2220      	movs	r2, #32
     79c:	4b80      	ldr	r3, [pc, #512]	; (9a0 <ssd1963_init+0x6d0>)
     79e:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     7a0:	2200      	movs	r2, #0
     7a2:	4b7e      	ldr	r3, [pc, #504]	; (99c <ssd1963_init+0x6cc>)
     7a4:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     7a6:	2202      	movs	r2, #2
     7a8:	497e      	ldr	r1, [pc, #504]	; (9a4 <ssd1963_init+0x6d4>)
     7aa:	487f      	ldr	r0, [pc, #508]	; (9a8 <ssd1963_init+0x6d8>)
     7ac:	4b7f      	ldr	r3, [pc, #508]	; (9ac <ssd1963_init+0x6dc>)
     7ae:	4798      	blx	r3
     7b0:	4b7b      	ldr	r3, [pc, #492]	; (9a0 <ssd1963_init+0x6d0>)
     7b2:	2240      	movs	r2, #64	; 0x40
     7b4:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7b6:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     7b8:	4b78      	ldr	r3, [pc, #480]	; (99c <ssd1963_init+0x6cc>)
     7ba:	781b      	ldrb	r3, [r3, #0]
     7bc:	b12b      	cbz	r3, 7ca <ssd1963_init+0x4fa>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     7be:	2220      	movs	r2, #32
     7c0:	4b77      	ldr	r3, [pc, #476]	; (9a0 <ssd1963_init+0x6d0>)
     7c2:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     7c4:	2200      	movs	r2, #0
     7c6:	4b75      	ldr	r3, [pc, #468]	; (99c <ssd1963_init+0x6cc>)
     7c8:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     7ca:	220d      	movs	r2, #13
     7cc:	4975      	ldr	r1, [pc, #468]	; (9a4 <ssd1963_init+0x6d4>)
     7ce:	4876      	ldr	r0, [pc, #472]	; (9a8 <ssd1963_init+0x6d8>)
     7d0:	4b76      	ldr	r3, [pc, #472]	; (9ac <ssd1963_init+0x6dc>)
     7d2:	4798      	blx	r3
     7d4:	4b72      	ldr	r3, [pc, #456]	; (9a0 <ssd1963_init+0x6d0>)
     7d6:	2240      	movs	r2, #64	; 0x40
     7d8:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7da:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     7dc:	4b6f      	ldr	r3, [pc, #444]	; (99c <ssd1963_init+0x6cc>)
     7de:	781b      	ldrb	r3, [r3, #0]
     7e0:	b12b      	cbz	r3, 7ee <ssd1963_init+0x51e>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     7e2:	2220      	movs	r2, #32
     7e4:	4b6e      	ldr	r3, [pc, #440]	; (9a0 <ssd1963_init+0x6d0>)
     7e6:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     7e8:	2200      	movs	r2, #0
     7ea:	4b6c      	ldr	r3, [pc, #432]	; (99c <ssd1963_init+0x6cc>)
     7ec:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     7ee:	2200      	movs	r2, #0
     7f0:	496c      	ldr	r1, [pc, #432]	; (9a4 <ssd1963_init+0x6d4>)
     7f2:	486d      	ldr	r0, [pc, #436]	; (9a8 <ssd1963_init+0x6d8>)
     7f4:	4b6d      	ldr	r3, [pc, #436]	; (9ac <ssd1963_init+0x6dc>)
     7f6:	4798      	blx	r3
     7f8:	4b69      	ldr	r3, [pc, #420]	; (9a0 <ssd1963_init+0x6d0>)
     7fa:	2240      	movs	r2, #64	; 0x40
     7fc:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7fe:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     800:	4b66      	ldr	r3, [pc, #408]	; (99c <ssd1963_init+0x6cc>)
     802:	781b      	ldrb	r3, [r3, #0]
     804:	b12b      	cbz	r3, 812 <ssd1963_init+0x542>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     806:	2220      	movs	r2, #32
     808:	4b65      	ldr	r3, [pc, #404]	; (9a0 <ssd1963_init+0x6d0>)
     80a:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     80c:	2200      	movs	r2, #0
     80e:	4b63      	ldr	r3, [pc, #396]	; (99c <ssd1963_init+0x6cc>)
     810:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     812:	222b      	movs	r2, #43	; 0x2b
     814:	4963      	ldr	r1, [pc, #396]	; (9a4 <ssd1963_init+0x6d4>)
     816:	4864      	ldr	r0, [pc, #400]	; (9a8 <ssd1963_init+0x6d8>)
     818:	4b64      	ldr	r3, [pc, #400]	; (9ac <ssd1963_init+0x6dc>)
     81a:	4798      	blx	r3
     81c:	4b60      	ldr	r3, [pc, #384]	; (9a0 <ssd1963_init+0x6d0>)
     81e:	2240      	movs	r2, #64	; 0x40
     820:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     822:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     824:	4b5d      	ldr	r3, [pc, #372]	; (99c <ssd1963_init+0x6cc>)
     826:	781b      	ldrb	r3, [r3, #0]
     828:	b12b      	cbz	r3, 836 <ssd1963_init+0x566>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     82a:	2220      	movs	r2, #32
     82c:	4b5c      	ldr	r3, [pc, #368]	; (9a0 <ssd1963_init+0x6d0>)
     82e:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     830:	2200      	movs	r2, #0
     832:	4b5a      	ldr	r3, [pc, #360]	; (99c <ssd1963_init+0x6cc>)
     834:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     836:	2228      	movs	r2, #40	; 0x28
     838:	495a      	ldr	r1, [pc, #360]	; (9a4 <ssd1963_init+0x6d4>)
     83a:	485b      	ldr	r0, [pc, #364]	; (9a8 <ssd1963_init+0x6d8>)
     83c:	4b5b      	ldr	r3, [pc, #364]	; (9ac <ssd1963_init+0x6dc>)
     83e:	4798      	blx	r3
     840:	4b57      	ldr	r3, [pc, #348]	; (9a0 <ssd1963_init+0x6d0>)
     842:	2240      	movs	r2, #64	; 0x40
     844:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     846:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     848:	4b54      	ldr	r3, [pc, #336]	; (99c <ssd1963_init+0x6cc>)
     84a:	781b      	ldrb	r3, [r3, #0]
     84c:	b12b      	cbz	r3, 85a <ssd1963_init+0x58a>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     84e:	2220      	movs	r2, #32
     850:	4b53      	ldr	r3, [pc, #332]	; (9a0 <ssd1963_init+0x6d0>)
     852:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     854:	2200      	movs	r2, #0
     856:	4b51      	ldr	r3, [pc, #324]	; (99c <ssd1963_init+0x6cc>)
     858:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     85a:	2200      	movs	r2, #0
     85c:	4951      	ldr	r1, [pc, #324]	; (9a4 <ssd1963_init+0x6d4>)
     85e:	4852      	ldr	r0, [pc, #328]	; (9a8 <ssd1963_init+0x6d8>)
     860:	4b52      	ldr	r3, [pc, #328]	; (9ac <ssd1963_init+0x6dc>)
     862:	4798      	blx	r3
     864:	4b4e      	ldr	r3, [pc, #312]	; (9a0 <ssd1963_init+0x6d0>)
     866:	2240      	movs	r2, #64	; 0x40
     868:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     86a:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     86c:	4b4b      	ldr	r3, [pc, #300]	; (99c <ssd1963_init+0x6cc>)
     86e:	781b      	ldrb	r3, [r3, #0]
     870:	b12b      	cbz	r3, 87e <ssd1963_init+0x5ae>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     872:	2220      	movs	r2, #32
     874:	4b4a      	ldr	r3, [pc, #296]	; (9a0 <ssd1963_init+0x6d0>)
     876:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     878:	2200      	movs	r2, #0
     87a:	4b48      	ldr	r3, [pc, #288]	; (99c <ssd1963_init+0x6cc>)
     87c:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     87e:	2200      	movs	r2, #0
     880:	4948      	ldr	r1, [pc, #288]	; (9a4 <ssd1963_init+0x6d4>)
     882:	4849      	ldr	r0, [pc, #292]	; (9a8 <ssd1963_init+0x6d8>)
     884:	4b49      	ldr	r3, [pc, #292]	; (9ac <ssd1963_init+0x6dc>)
     886:	4798      	blx	r3
     888:	4b45      	ldr	r3, [pc, #276]	; (9a0 <ssd1963_init+0x6d0>)
     88a:	2240      	movs	r2, #64	; 0x40
     88c:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     88e:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     890:	4b42      	ldr	r3, [pc, #264]	; (99c <ssd1963_init+0x6cc>)
     892:	781b      	ldrb	r3, [r3, #0]
     894:	b12b      	cbz	r3, 8a2 <ssd1963_init+0x5d2>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     896:	2220      	movs	r2, #32
     898:	4b41      	ldr	r3, [pc, #260]	; (9a0 <ssd1963_init+0x6d0>)
     89a:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     89c:	2200      	movs	r2, #0
     89e:	4b3f      	ldr	r3, [pc, #252]	; (99c <ssd1963_init+0x6cc>)
     8a0:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     8a2:	2200      	movs	r2, #0
     8a4:	493f      	ldr	r1, [pc, #252]	; (9a4 <ssd1963_init+0x6d4>)
     8a6:	4840      	ldr	r0, [pc, #256]	; (9a8 <ssd1963_init+0x6d8>)
     8a8:	4b40      	ldr	r3, [pc, #256]	; (9ac <ssd1963_init+0x6dc>)
     8aa:	4798      	blx	r3
     8ac:	4b3c      	ldr	r3, [pc, #240]	; (9a0 <ssd1963_init+0x6d0>)
     8ae:	2240      	movs	r2, #64	; 0x40
     8b0:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8b2:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     8b4:	4b39      	ldr	r3, [pc, #228]	; (99c <ssd1963_init+0x6cc>)
     8b6:	781b      	ldrb	r3, [r3, #0]
     8b8:	b92b      	cbnz	r3, 8c6 <ssd1963_init+0x5f6>
     8ba:	2220      	movs	r2, #32
     8bc:	4b38      	ldr	r3, [pc, #224]	; (9a0 <ssd1963_init+0x6d0>)
     8be:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     8c0:	2201      	movs	r2, #1
     8c2:	4b36      	ldr	r3, [pc, #216]	; (99c <ssd1963_init+0x6cc>)
     8c4:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     8c6:	22b6      	movs	r2, #182	; 0xb6
     8c8:	4936      	ldr	r1, [pc, #216]	; (9a4 <ssd1963_init+0x6d4>)
     8ca:	4837      	ldr	r0, [pc, #220]	; (9a8 <ssd1963_init+0x6d8>)
     8cc:	4b37      	ldr	r3, [pc, #220]	; (9ac <ssd1963_init+0x6dc>)
     8ce:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     8d0:	4b33      	ldr	r3, [pc, #204]	; (9a0 <ssd1963_init+0x6d0>)
     8d2:	2240      	movs	r2, #64	; 0x40
     8d4:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8d6:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     8d8:	4b30      	ldr	r3, [pc, #192]	; (99c <ssd1963_init+0x6cc>)
     8da:	781b      	ldrb	r3, [r3, #0]
     8dc:	b12b      	cbz	r3, 8ea <ssd1963_init+0x61a>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     8de:	2220      	movs	r2, #32
     8e0:	4b2f      	ldr	r3, [pc, #188]	; (9a0 <ssd1963_init+0x6d0>)
     8e2:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     8e4:	2200      	movs	r2, #0
     8e6:	4b2d      	ldr	r3, [pc, #180]	; (99c <ssd1963_init+0x6cc>)
     8e8:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     8ea:	2201      	movs	r2, #1
     8ec:	492d      	ldr	r1, [pc, #180]	; (9a4 <ssd1963_init+0x6d4>)
     8ee:	482e      	ldr	r0, [pc, #184]	; (9a8 <ssd1963_init+0x6d8>)
     8f0:	4b2e      	ldr	r3, [pc, #184]	; (9ac <ssd1963_init+0x6dc>)
     8f2:	4798      	blx	r3
     8f4:	4b2a      	ldr	r3, [pc, #168]	; (9a0 <ssd1963_init+0x6d0>)
     8f6:	2240      	movs	r2, #64	; 0x40
     8f8:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8fa:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     8fc:	4b27      	ldr	r3, [pc, #156]	; (99c <ssd1963_init+0x6cc>)
     8fe:	781b      	ldrb	r3, [r3, #0]
     900:	b12b      	cbz	r3, 90e <ssd1963_init+0x63e>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     902:	2220      	movs	r2, #32
     904:	4b26      	ldr	r3, [pc, #152]	; (9a0 <ssd1963_init+0x6d0>)
     906:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     908:	2200      	movs	r2, #0
     90a:	4b24      	ldr	r3, [pc, #144]	; (99c <ssd1963_init+0x6cc>)
     90c:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     90e:	221d      	movs	r2, #29
     910:	4924      	ldr	r1, [pc, #144]	; (9a4 <ssd1963_init+0x6d4>)
     912:	4825      	ldr	r0, [pc, #148]	; (9a8 <ssd1963_init+0x6d8>)
     914:	4b25      	ldr	r3, [pc, #148]	; (9ac <ssd1963_init+0x6dc>)
     916:	4798      	blx	r3
     918:	4b21      	ldr	r3, [pc, #132]	; (9a0 <ssd1963_init+0x6d0>)
     91a:	2240      	movs	r2, #64	; 0x40
     91c:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     91e:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     920:	4b1e      	ldr	r3, [pc, #120]	; (99c <ssd1963_init+0x6cc>)
     922:	781b      	ldrb	r3, [r3, #0]
     924:	b12b      	cbz	r3, 932 <ssd1963_init+0x662>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     926:	2220      	movs	r2, #32
     928:	4b1d      	ldr	r3, [pc, #116]	; (9a0 <ssd1963_init+0x6d0>)
     92a:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     92c:	2200      	movs	r2, #0
     92e:	4b1b      	ldr	r3, [pc, #108]	; (99c <ssd1963_init+0x6cc>)
     930:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     932:	2200      	movs	r2, #0
     934:	491b      	ldr	r1, [pc, #108]	; (9a4 <ssd1963_init+0x6d4>)
     936:	481c      	ldr	r0, [pc, #112]	; (9a8 <ssd1963_init+0x6d8>)
     938:	4b1c      	ldr	r3, [pc, #112]	; (9ac <ssd1963_init+0x6dc>)
     93a:	4798      	blx	r3
     93c:	4b18      	ldr	r3, [pc, #96]	; (9a0 <ssd1963_init+0x6d0>)
     93e:	2240      	movs	r2, #64	; 0x40
     940:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     942:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     944:	4b15      	ldr	r3, [pc, #84]	; (99c <ssd1963_init+0x6cc>)
     946:	781b      	ldrb	r3, [r3, #0]
     948:	b12b      	cbz	r3, 956 <ssd1963_init+0x686>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     94a:	2220      	movs	r2, #32
     94c:	4b14      	ldr	r3, [pc, #80]	; (9a0 <ssd1963_init+0x6d0>)
     94e:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     950:	2200      	movs	r2, #0
     952:	4b12      	ldr	r3, [pc, #72]	; (99c <ssd1963_init+0x6cc>)
     954:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     956:	220c      	movs	r2, #12
     958:	4912      	ldr	r1, [pc, #72]	; (9a4 <ssd1963_init+0x6d4>)
     95a:	4813      	ldr	r0, [pc, #76]	; (9a8 <ssd1963_init+0x6d8>)
     95c:	4b13      	ldr	r3, [pc, #76]	; (9ac <ssd1963_init+0x6dc>)
     95e:	4798      	blx	r3
     960:	4b0f      	ldr	r3, [pc, #60]	; (9a0 <ssd1963_init+0x6d0>)
     962:	2240      	movs	r2, #64	; 0x40
     964:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     966:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     968:	4b0c      	ldr	r3, [pc, #48]	; (99c <ssd1963_init+0x6cc>)
     96a:	781b      	ldrb	r3, [r3, #0]
     96c:	b12b      	cbz	r3, 97a <ssd1963_init+0x6aa>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     96e:	2220      	movs	r2, #32
     970:	4b0b      	ldr	r3, [pc, #44]	; (9a0 <ssd1963_init+0x6d0>)
     972:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     974:	2200      	movs	r2, #0
     976:	4b09      	ldr	r3, [pc, #36]	; (99c <ssd1963_init+0x6cc>)
     978:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     97a:	2209      	movs	r2, #9
     97c:	4909      	ldr	r1, [pc, #36]	; (9a4 <ssd1963_init+0x6d4>)
     97e:	480a      	ldr	r0, [pc, #40]	; (9a8 <ssd1963_init+0x6d8>)
     980:	4b0a      	ldr	r3, [pc, #40]	; (9ac <ssd1963_init+0x6dc>)
     982:	4798      	blx	r3
     984:	4b06      	ldr	r3, [pc, #24]	; (9a0 <ssd1963_init+0x6d0>)
     986:	2240      	movs	r2, #64	; 0x40
     988:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     98a:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     98c:	4b03      	ldr	r3, [pc, #12]	; (99c <ssd1963_init+0x6cc>)
     98e:	781b      	ldrb	r3, [r3, #0]
     990:	b18b      	cbz	r3, 9b6 <ssd1963_init+0x6e6>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     992:	2220      	movs	r2, #32
     994:	4b02      	ldr	r3, [pc, #8]	; (9a0 <ssd1963_init+0x6d0>)
     996:	619a      	str	r2, [r3, #24]
     998:	e00a      	b.n	9b0 <ssd1963_init+0x6e0>
     99a:	bf00      	nop
     99c:	20000000 	.word	0x20000000
     9a0:	41008000 	.word	0x41008000
     9a4:	1c03c3f7 	.word	0x1c03c3f7
     9a8:	41008080 	.word	0x41008080
     9ac:	000010f9 	.word	0x000010f9
        cmd_mode = false;
     9b0:	2200      	movs	r2, #0
     9b2:	4b8b      	ldr	r3, [pc, #556]	; (be0 <ssd1963_init+0x910>)
     9b4:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     9b6:	2200      	movs	r2, #0
     9b8:	498a      	ldr	r1, [pc, #552]	; (be4 <ssd1963_init+0x914>)
     9ba:	488b      	ldr	r0, [pc, #556]	; (be8 <ssd1963_init+0x918>)
     9bc:	4b8b      	ldr	r3, [pc, #556]	; (bec <ssd1963_init+0x91c>)
     9be:	4798      	blx	r3
     9c0:	4b8b      	ldr	r3, [pc, #556]	; (bf0 <ssd1963_init+0x920>)
     9c2:	2240      	movs	r2, #64	; 0x40
     9c4:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9c6:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     9c8:	4b85      	ldr	r3, [pc, #532]	; (be0 <ssd1963_init+0x910>)
     9ca:	781b      	ldrb	r3, [r3, #0]
     9cc:	b12b      	cbz	r3, 9da <ssd1963_init+0x70a>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     9ce:	2220      	movs	r2, #32
     9d0:	4b87      	ldr	r3, [pc, #540]	; (bf0 <ssd1963_init+0x920>)
     9d2:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     9d4:	2200      	movs	r2, #0
     9d6:	4b82      	ldr	r3, [pc, #520]	; (be0 <ssd1963_init+0x910>)
     9d8:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     9da:	2200      	movs	r2, #0
     9dc:	4981      	ldr	r1, [pc, #516]	; (be4 <ssd1963_init+0x914>)
     9de:	4882      	ldr	r0, [pc, #520]	; (be8 <ssd1963_init+0x918>)
     9e0:	4b82      	ldr	r3, [pc, #520]	; (bec <ssd1963_init+0x91c>)
     9e2:	4798      	blx	r3
     9e4:	4b82      	ldr	r3, [pc, #520]	; (bf0 <ssd1963_init+0x920>)
     9e6:	2240      	movs	r2, #64	; 0x40
     9e8:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9ea:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     9ec:	4b7c      	ldr	r3, [pc, #496]	; (be0 <ssd1963_init+0x910>)
     9ee:	781b      	ldrb	r3, [r3, #0]
     9f0:	b92b      	cbnz	r3, 9fe <ssd1963_init+0x72e>
     9f2:	2220      	movs	r2, #32
     9f4:	4b7e      	ldr	r3, [pc, #504]	; (bf0 <ssd1963_init+0x920>)
     9f6:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     9f8:	2201      	movs	r2, #1
     9fa:	4b79      	ldr	r3, [pc, #484]	; (be0 <ssd1963_init+0x910>)
     9fc:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     9fe:	222a      	movs	r2, #42	; 0x2a
     a00:	4978      	ldr	r1, [pc, #480]	; (be4 <ssd1963_init+0x914>)
     a02:	4879      	ldr	r0, [pc, #484]	; (be8 <ssd1963_init+0x918>)
     a04:	4b79      	ldr	r3, [pc, #484]	; (bec <ssd1963_init+0x91c>)
     a06:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a08:	4b79      	ldr	r3, [pc, #484]	; (bf0 <ssd1963_init+0x920>)
     a0a:	2240      	movs	r2, #64	; 0x40
     a0c:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a0e:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     a10:	4b73      	ldr	r3, [pc, #460]	; (be0 <ssd1963_init+0x910>)
     a12:	781b      	ldrb	r3, [r3, #0]
     a14:	b12b      	cbz	r3, a22 <ssd1963_init+0x752>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a16:	2220      	movs	r2, #32
     a18:	4b75      	ldr	r3, [pc, #468]	; (bf0 <ssd1963_init+0x920>)
     a1a:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     a1c:	2200      	movs	r2, #0
     a1e:	4b70      	ldr	r3, [pc, #448]	; (be0 <ssd1963_init+0x910>)
     a20:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     a22:	2200      	movs	r2, #0
     a24:	496f      	ldr	r1, [pc, #444]	; (be4 <ssd1963_init+0x914>)
     a26:	4870      	ldr	r0, [pc, #448]	; (be8 <ssd1963_init+0x918>)
     a28:	4b70      	ldr	r3, [pc, #448]	; (bec <ssd1963_init+0x91c>)
     a2a:	4798      	blx	r3
     a2c:	4b70      	ldr	r3, [pc, #448]	; (bf0 <ssd1963_init+0x920>)
     a2e:	2240      	movs	r2, #64	; 0x40
     a30:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a32:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     a34:	4b6a      	ldr	r3, [pc, #424]	; (be0 <ssd1963_init+0x910>)
     a36:	781b      	ldrb	r3, [r3, #0]
     a38:	b12b      	cbz	r3, a46 <ssd1963_init+0x776>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a3a:	2220      	movs	r2, #32
     a3c:	4b6c      	ldr	r3, [pc, #432]	; (bf0 <ssd1963_init+0x920>)
     a3e:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     a40:	2200      	movs	r2, #0
     a42:	4b67      	ldr	r3, [pc, #412]	; (be0 <ssd1963_init+0x910>)
     a44:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     a46:	2200      	movs	r2, #0
     a48:	4966      	ldr	r1, [pc, #408]	; (be4 <ssd1963_init+0x914>)
     a4a:	4867      	ldr	r0, [pc, #412]	; (be8 <ssd1963_init+0x918>)
     a4c:	4b67      	ldr	r3, [pc, #412]	; (bec <ssd1963_init+0x91c>)
     a4e:	4798      	blx	r3
     a50:	4b67      	ldr	r3, [pc, #412]	; (bf0 <ssd1963_init+0x920>)
     a52:	2240      	movs	r2, #64	; 0x40
     a54:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a56:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     a58:	4b61      	ldr	r3, [pc, #388]	; (be0 <ssd1963_init+0x910>)
     a5a:	781b      	ldrb	r3, [r3, #0]
     a5c:	b12b      	cbz	r3, a6a <ssd1963_init+0x79a>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a5e:	2220      	movs	r2, #32
     a60:	4b63      	ldr	r3, [pc, #396]	; (bf0 <ssd1963_init+0x920>)
     a62:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     a64:	2200      	movs	r2, #0
     a66:	4b5e      	ldr	r3, [pc, #376]	; (be0 <ssd1963_init+0x910>)
     a68:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     a6a:	2201      	movs	r2, #1
     a6c:	495d      	ldr	r1, [pc, #372]	; (be4 <ssd1963_init+0x914>)
     a6e:	485e      	ldr	r0, [pc, #376]	; (be8 <ssd1963_init+0x918>)
     a70:	4b5e      	ldr	r3, [pc, #376]	; (bec <ssd1963_init+0x91c>)
     a72:	4798      	blx	r3
     a74:	4b5e      	ldr	r3, [pc, #376]	; (bf0 <ssd1963_init+0x920>)
     a76:	2240      	movs	r2, #64	; 0x40
     a78:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a7a:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     a7c:	4b58      	ldr	r3, [pc, #352]	; (be0 <ssd1963_init+0x910>)
     a7e:	781b      	ldrb	r3, [r3, #0]
     a80:	b12b      	cbz	r3, a8e <ssd1963_init+0x7be>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a82:	2220      	movs	r2, #32
     a84:	4b5a      	ldr	r3, [pc, #360]	; (bf0 <ssd1963_init+0x920>)
     a86:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     a88:	2200      	movs	r2, #0
     a8a:	4b55      	ldr	r3, [pc, #340]	; (be0 <ssd1963_init+0x910>)
     a8c:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     a8e:	22df      	movs	r2, #223	; 0xdf
     a90:	4954      	ldr	r1, [pc, #336]	; (be4 <ssd1963_init+0x914>)
     a92:	4855      	ldr	r0, [pc, #340]	; (be8 <ssd1963_init+0x918>)
     a94:	4b55      	ldr	r3, [pc, #340]	; (bec <ssd1963_init+0x91c>)
     a96:	4798      	blx	r3
     a98:	4b55      	ldr	r3, [pc, #340]	; (bf0 <ssd1963_init+0x920>)
     a9a:	2240      	movs	r2, #64	; 0x40
     a9c:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a9e:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     aa0:	4b4f      	ldr	r3, [pc, #316]	; (be0 <ssd1963_init+0x910>)
     aa2:	781b      	ldrb	r3, [r3, #0]
     aa4:	b92b      	cbnz	r3, ab2 <ssd1963_init+0x7e2>
     aa6:	2220      	movs	r2, #32
     aa8:	4b51      	ldr	r3, [pc, #324]	; (bf0 <ssd1963_init+0x920>)
     aaa:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     aac:	2201      	movs	r2, #1
     aae:	4b4c      	ldr	r3, [pc, #304]	; (be0 <ssd1963_init+0x910>)
     ab0:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     ab2:	222b      	movs	r2, #43	; 0x2b
     ab4:	494b      	ldr	r1, [pc, #300]	; (be4 <ssd1963_init+0x914>)
     ab6:	484c      	ldr	r0, [pc, #304]	; (be8 <ssd1963_init+0x918>)
     ab8:	4b4c      	ldr	r3, [pc, #304]	; (bec <ssd1963_init+0x91c>)
     aba:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     abc:	4b4c      	ldr	r3, [pc, #304]	; (bf0 <ssd1963_init+0x920>)
     abe:	2240      	movs	r2, #64	; 0x40
     ac0:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ac2:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     ac4:	4b46      	ldr	r3, [pc, #280]	; (be0 <ssd1963_init+0x910>)
     ac6:	781b      	ldrb	r3, [r3, #0]
     ac8:	b12b      	cbz	r3, ad6 <ssd1963_init+0x806>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     aca:	2220      	movs	r2, #32
     acc:	4b48      	ldr	r3, [pc, #288]	; (bf0 <ssd1963_init+0x920>)
     ace:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     ad0:	2200      	movs	r2, #0
     ad2:	4b43      	ldr	r3, [pc, #268]	; (be0 <ssd1963_init+0x910>)
     ad4:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     ad6:	2200      	movs	r2, #0
     ad8:	4942      	ldr	r1, [pc, #264]	; (be4 <ssd1963_init+0x914>)
     ada:	4843      	ldr	r0, [pc, #268]	; (be8 <ssd1963_init+0x918>)
     adc:	4b43      	ldr	r3, [pc, #268]	; (bec <ssd1963_init+0x91c>)
     ade:	4798      	blx	r3
     ae0:	4b43      	ldr	r3, [pc, #268]	; (bf0 <ssd1963_init+0x920>)
     ae2:	2240      	movs	r2, #64	; 0x40
     ae4:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ae6:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     ae8:	4b3d      	ldr	r3, [pc, #244]	; (be0 <ssd1963_init+0x910>)
     aea:	781b      	ldrb	r3, [r3, #0]
     aec:	b12b      	cbz	r3, afa <ssd1963_init+0x82a>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     aee:	2220      	movs	r2, #32
     af0:	4b3f      	ldr	r3, [pc, #252]	; (bf0 <ssd1963_init+0x920>)
     af2:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     af4:	2200      	movs	r2, #0
     af6:	4b3a      	ldr	r3, [pc, #232]	; (be0 <ssd1963_init+0x910>)
     af8:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     afa:	2200      	movs	r2, #0
     afc:	4939      	ldr	r1, [pc, #228]	; (be4 <ssd1963_init+0x914>)
     afe:	483a      	ldr	r0, [pc, #232]	; (be8 <ssd1963_init+0x918>)
     b00:	4b3a      	ldr	r3, [pc, #232]	; (bec <ssd1963_init+0x91c>)
     b02:	4798      	blx	r3
     b04:	4b3a      	ldr	r3, [pc, #232]	; (bf0 <ssd1963_init+0x920>)
     b06:	2240      	movs	r2, #64	; 0x40
     b08:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b0a:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     b0c:	4b34      	ldr	r3, [pc, #208]	; (be0 <ssd1963_init+0x910>)
     b0e:	781b      	ldrb	r3, [r3, #0]
     b10:	b12b      	cbz	r3, b1e <ssd1963_init+0x84e>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b12:	2220      	movs	r2, #32
     b14:	4b36      	ldr	r3, [pc, #216]	; (bf0 <ssd1963_init+0x920>)
     b16:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     b18:	2200      	movs	r2, #0
     b1a:	4b31      	ldr	r3, [pc, #196]	; (be0 <ssd1963_init+0x910>)
     b1c:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     b1e:	2201      	movs	r2, #1
     b20:	4930      	ldr	r1, [pc, #192]	; (be4 <ssd1963_init+0x914>)
     b22:	4831      	ldr	r0, [pc, #196]	; (be8 <ssd1963_init+0x918>)
     b24:	4b31      	ldr	r3, [pc, #196]	; (bec <ssd1963_init+0x91c>)
     b26:	4798      	blx	r3
     b28:	4b31      	ldr	r3, [pc, #196]	; (bf0 <ssd1963_init+0x920>)
     b2a:	2240      	movs	r2, #64	; 0x40
     b2c:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b2e:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     b30:	4b2b      	ldr	r3, [pc, #172]	; (be0 <ssd1963_init+0x910>)
     b32:	781b      	ldrb	r3, [r3, #0]
     b34:	b12b      	cbz	r3, b42 <ssd1963_init+0x872>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b36:	2220      	movs	r2, #32
     b38:	4b2d      	ldr	r3, [pc, #180]	; (bf0 <ssd1963_init+0x920>)
     b3a:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     b3c:	2200      	movs	r2, #0
     b3e:	4b28      	ldr	r3, [pc, #160]	; (be0 <ssd1963_init+0x910>)
     b40:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     b42:	220f      	movs	r2, #15
     b44:	4927      	ldr	r1, [pc, #156]	; (be4 <ssd1963_init+0x914>)
     b46:	4828      	ldr	r0, [pc, #160]	; (be8 <ssd1963_init+0x918>)
     b48:	4b28      	ldr	r3, [pc, #160]	; (bec <ssd1963_init+0x91c>)
     b4a:	4798      	blx	r3
     b4c:	4b28      	ldr	r3, [pc, #160]	; (bf0 <ssd1963_init+0x920>)
     b4e:	2240      	movs	r2, #64	; 0x40
     b50:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b52:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     b54:	4b22      	ldr	r3, [pc, #136]	; (be0 <ssd1963_init+0x910>)
     b56:	781b      	ldrb	r3, [r3, #0]
     b58:	b92b      	cbnz	r3, b66 <ssd1963_init+0x896>
     b5a:	2220      	movs	r2, #32
     b5c:	4b24      	ldr	r3, [pc, #144]	; (bf0 <ssd1963_init+0x920>)
     b5e:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     b60:	2201      	movs	r2, #1
     b62:	4b1f      	ldr	r3, [pc, #124]	; (be0 <ssd1963_init+0x910>)
     b64:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     b66:	2229      	movs	r2, #41	; 0x29
     b68:	491e      	ldr	r1, [pc, #120]	; (be4 <ssd1963_init+0x914>)
     b6a:	481f      	ldr	r0, [pc, #124]	; (be8 <ssd1963_init+0x918>)
     b6c:	4b1f      	ldr	r3, [pc, #124]	; (bec <ssd1963_init+0x91c>)
     b6e:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b70:	4b1f      	ldr	r3, [pc, #124]	; (bf0 <ssd1963_init+0x920>)
     b72:	2240      	movs	r2, #64	; 0x40
     b74:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b76:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     b78:	4b19      	ldr	r3, [pc, #100]	; (be0 <ssd1963_init+0x910>)
     b7a:	781b      	ldrb	r3, [r3, #0]
     b7c:	b92b      	cbnz	r3, b8a <ssd1963_init+0x8ba>
     b7e:	2220      	movs	r2, #32
     b80:	4b1b      	ldr	r3, [pc, #108]	; (bf0 <ssd1963_init+0x920>)
     b82:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     b84:	2201      	movs	r2, #1
     b86:	4b16      	ldr	r3, [pc, #88]	; (be0 <ssd1963_init+0x910>)
     b88:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     b8a:	22be      	movs	r2, #190	; 0xbe
     b8c:	4915      	ldr	r1, [pc, #84]	; (be4 <ssd1963_init+0x914>)
     b8e:	4816      	ldr	r0, [pc, #88]	; (be8 <ssd1963_init+0x918>)
     b90:	4b16      	ldr	r3, [pc, #88]	; (bec <ssd1963_init+0x91c>)
     b92:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b94:	4b16      	ldr	r3, [pc, #88]	; (bf0 <ssd1963_init+0x920>)
     b96:	2240      	movs	r2, #64	; 0x40
     b98:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b9a:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     b9c:	4b10      	ldr	r3, [pc, #64]	; (be0 <ssd1963_init+0x910>)
     b9e:	781b      	ldrb	r3, [r3, #0]
     ba0:	b12b      	cbz	r3, bae <ssd1963_init+0x8de>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     ba2:	2220      	movs	r2, #32
     ba4:	4b12      	ldr	r3, [pc, #72]	; (bf0 <ssd1963_init+0x920>)
     ba6:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     ba8:	2200      	movs	r2, #0
     baa:	4b0d      	ldr	r3, [pc, #52]	; (be0 <ssd1963_init+0x910>)
     bac:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     bae:	2206      	movs	r2, #6
     bb0:	490c      	ldr	r1, [pc, #48]	; (be4 <ssd1963_init+0x914>)
     bb2:	480d      	ldr	r0, [pc, #52]	; (be8 <ssd1963_init+0x918>)
     bb4:	4b0d      	ldr	r3, [pc, #52]	; (bec <ssd1963_init+0x91c>)
     bb6:	4798      	blx	r3
     bb8:	4b0d      	ldr	r3, [pc, #52]	; (bf0 <ssd1963_init+0x920>)
     bba:	2240      	movs	r2, #64	; 0x40
     bbc:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     bbe:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     bc0:	4b07      	ldr	r3, [pc, #28]	; (be0 <ssd1963_init+0x910>)
     bc2:	781b      	ldrb	r3, [r3, #0]
     bc4:	b12b      	cbz	r3, bd2 <ssd1963_init+0x902>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     bc6:	2220      	movs	r2, #32
     bc8:	4b09      	ldr	r3, [pc, #36]	; (bf0 <ssd1963_init+0x920>)
     bca:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     bcc:	2200      	movs	r2, #0
     bce:	4b04      	ldr	r3, [pc, #16]	; (be0 <ssd1963_init+0x910>)
     bd0:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     bd2:	22ff      	movs	r2, #255	; 0xff
     bd4:	4903      	ldr	r1, [pc, #12]	; (be4 <ssd1963_init+0x914>)
     bd6:	4804      	ldr	r0, [pc, #16]	; (be8 <ssd1963_init+0x918>)
     bd8:	4b04      	ldr	r3, [pc, #16]	; (bec <ssd1963_init+0x91c>)
     bda:	4798      	blx	r3
     bdc:	e00a      	b.n	bf4 <ssd1963_init+0x924>
     bde:	bf00      	nop
     be0:	20000000 	.word	0x20000000
     be4:	1c03c3f7 	.word	0x1c03c3f7
     be8:	41008080 	.word	0x41008080
     bec:	000010f9 	.word	0x000010f9
     bf0:	41008000 	.word	0x41008000
     bf4:	4b26      	ldr	r3, [pc, #152]	; (c90 <ssd1963_init+0x9c0>)
     bf6:	2240      	movs	r2, #64	; 0x40
     bf8:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     bfa:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     bfc:	4b25      	ldr	r3, [pc, #148]	; (c94 <ssd1963_init+0x9c4>)
     bfe:	781b      	ldrb	r3, [r3, #0]
     c00:	b12b      	cbz	r3, c0e <ssd1963_init+0x93e>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     c02:	2220      	movs	r2, #32
     c04:	4b22      	ldr	r3, [pc, #136]	; (c90 <ssd1963_init+0x9c0>)
     c06:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     c08:	2200      	movs	r2, #0
     c0a:	4b22      	ldr	r3, [pc, #136]	; (c94 <ssd1963_init+0x9c4>)
     c0c:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     c0e:	2201      	movs	r2, #1
     c10:	4921      	ldr	r1, [pc, #132]	; (c98 <ssd1963_init+0x9c8>)
     c12:	4822      	ldr	r0, [pc, #136]	; (c9c <ssd1963_init+0x9cc>)
     c14:	4b22      	ldr	r3, [pc, #136]	; (ca0 <ssd1963_init+0x9d0>)
     c16:	4798      	blx	r3
     c18:	4b1d      	ldr	r3, [pc, #116]	; (c90 <ssd1963_init+0x9c0>)
     c1a:	2240      	movs	r2, #64	; 0x40
     c1c:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c1e:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     c20:	4b1c      	ldr	r3, [pc, #112]	; (c94 <ssd1963_init+0x9c4>)
     c22:	781b      	ldrb	r3, [r3, #0]
     c24:	b12b      	cbz	r3, c32 <ssd1963_init+0x962>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     c26:	2220      	movs	r2, #32
     c28:	4b19      	ldr	r3, [pc, #100]	; (c90 <ssd1963_init+0x9c0>)
     c2a:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     c2c:	2200      	movs	r2, #0
     c2e:	4b19      	ldr	r3, [pc, #100]	; (c94 <ssd1963_init+0x9c4>)
     c30:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     c32:	22ff      	movs	r2, #255	; 0xff
     c34:	4918      	ldr	r1, [pc, #96]	; (c98 <ssd1963_init+0x9c8>)
     c36:	4819      	ldr	r0, [pc, #100]	; (c9c <ssd1963_init+0x9cc>)
     c38:	4b19      	ldr	r3, [pc, #100]	; (ca0 <ssd1963_init+0x9d0>)
     c3a:	4798      	blx	r3
     c3c:	4b14      	ldr	r3, [pc, #80]	; (c90 <ssd1963_init+0x9c0>)
     c3e:	2240      	movs	r2, #64	; 0x40
     c40:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c42:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     c44:	4b13      	ldr	r3, [pc, #76]	; (c94 <ssd1963_init+0x9c4>)
     c46:	781b      	ldrb	r3, [r3, #0]
     c48:	b12b      	cbz	r3, c56 <ssd1963_init+0x986>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     c4a:	2220      	movs	r2, #32
     c4c:	4b10      	ldr	r3, [pc, #64]	; (c90 <ssd1963_init+0x9c0>)
     c4e:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     c50:	2200      	movs	r2, #0
     c52:	4b10      	ldr	r3, [pc, #64]	; (c94 <ssd1963_init+0x9c4>)
     c54:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     c56:	2200      	movs	r2, #0
     c58:	490f      	ldr	r1, [pc, #60]	; (c98 <ssd1963_init+0x9c8>)
     c5a:	4810      	ldr	r0, [pc, #64]	; (c9c <ssd1963_init+0x9cc>)
     c5c:	4b10      	ldr	r3, [pc, #64]	; (ca0 <ssd1963_init+0x9d0>)
     c5e:	4798      	blx	r3
     c60:	4b0b      	ldr	r3, [pc, #44]	; (c90 <ssd1963_init+0x9c0>)
     c62:	2240      	movs	r2, #64	; 0x40
     c64:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c66:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     c68:	4b0a      	ldr	r3, [pc, #40]	; (c94 <ssd1963_init+0x9c4>)
     c6a:	781b      	ldrb	r3, [r3, #0]
     c6c:	b12b      	cbz	r3, c7a <ssd1963_init+0x9aa>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     c6e:	2220      	movs	r2, #32
     c70:	4b07      	ldr	r3, [pc, #28]	; (c90 <ssd1963_init+0x9c0>)
     c72:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     c74:	2200      	movs	r2, #0
     c76:	4b07      	ldr	r3, [pc, #28]	; (c94 <ssd1963_init+0x9c4>)
     c78:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     c7a:	2201      	movs	r2, #1
     c7c:	4906      	ldr	r1, [pc, #24]	; (c98 <ssd1963_init+0x9c8>)
     c7e:	4807      	ldr	r0, [pc, #28]	; (c9c <ssd1963_init+0x9cc>)
     c80:	4b07      	ldr	r3, [pc, #28]	; (ca0 <ssd1963_init+0x9d0>)
     c82:	4798      	blx	r3
     c84:	4b02      	ldr	r3, [pc, #8]	; (c90 <ssd1963_init+0x9c0>)
     c86:	2240      	movs	r2, #64	; 0x40
     c88:	619a      	str	r2, [r3, #24]
     c8a:	619a      	str	r2, [r3, #24]
     c8c:	bd70      	pop	{r4, r5, r6, pc}
     c8e:	bf00      	nop
     c90:	41008000 	.word	0x41008000
     c94:	20000000 	.word	0x20000000
     c98:	1c03c3f7 	.word	0x1c03c3f7
     c9c:	41008080 	.word	0x41008080
     ca0:	000010f9 	.word	0x000010f9

00000ca4 <ssd1963_flush>:
{
     ca4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(area->x2 < 0) return;
     ca8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
     cac:	2b00      	cmp	r3, #0
     cae:	db0f      	blt.n	cd0 <ssd1963_flush+0x2c>
     cb0:	4681      	mov	r9, r0
     cb2:	468a      	mov	sl, r1
     cb4:	4615      	mov	r5, r2
    if(area->y2 < 0) return;
     cb6:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
     cba:	2b00      	cmp	r3, #0
     cbc:	db08      	blt.n	cd0 <ssd1963_flush+0x2c>
    if(area->x1 > SSD1963_HOR_RES - 1) return;
     cbe:	f9b1 4000 	ldrsh.w	r4, [r1]
     cc2:	4b04      	ldr	r3, [pc, #16]	; (cd4 <ssd1963_flush+0x30>)
     cc4:	4798      	blx	r3
     cc6:	4b04      	ldr	r3, [pc, #16]	; (cd8 <ssd1963_flush+0x34>)
     cc8:	4798      	blx	r3
     cca:	3801      	subs	r0, #1
     ccc:	4284      	cmp	r4, r0
     cce:	dd05      	ble.n	cdc <ssd1963_flush+0x38>
     cd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     cd4:	00010ed5 	.word	0x00010ed5
     cd8:	00010ee1 	.word	0x00010ee1
    if(area->y1 > SSD1963_VER_RES - 1) return;
     cdc:	f9ba 4002 	ldrsh.w	r4, [sl, #2]
     ce0:	4b94      	ldr	r3, [pc, #592]	; (f34 <ssd1963_flush+0x290>)
     ce2:	4798      	blx	r3
     ce4:	4b94      	ldr	r3, [pc, #592]	; (f38 <ssd1963_flush+0x294>)
     ce6:	4798      	blx	r3
     ce8:	3801      	subs	r0, #1
     cea:	4284      	cmp	r4, r0
     cec:	dcf0      	bgt.n	cd0 <ssd1963_flush+0x2c>
    int32_t act_x1 = area->x1 < 0 ? 0 : area->x1;
     cee:	f9ba 6000 	ldrsh.w	r6, [sl]
     cf2:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    int32_t act_y1 = area->y1 < 0 ? 0 : area->y1;
     cf6:	f9ba 4002 	ldrsh.w	r4, [sl, #2]
     cfa:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
     cfe:	46a3      	mov	fp, r4
    int32_t act_x2 = area->x2 > SSD1963_HOR_RES - 1 ? SSD1963_HOR_RES - 1 : area->x2;
     d00:	f9ba 7004 	ldrsh.w	r7, [sl, #4]
     d04:	4b8b      	ldr	r3, [pc, #556]	; (f34 <ssd1963_flush+0x290>)
     d06:	4798      	blx	r3
     d08:	4b8c      	ldr	r3, [pc, #560]	; (f3c <ssd1963_flush+0x298>)
     d0a:	4798      	blx	r3
     d0c:	3801      	subs	r0, #1
     d0e:	4287      	cmp	r7, r0
     d10:	f300 810a 	bgt.w	f28 <ssd1963_flush+0x284>
     d14:	f9ba 7004 	ldrsh.w	r7, [sl, #4]
    int32_t act_y2 = area->y2 > SSD1963_VER_RES - 1 ? SSD1963_VER_RES - 1 : area->y2;
     d18:	f9ba 8006 	ldrsh.w	r8, [sl, #6]
     d1c:	4b85      	ldr	r3, [pc, #532]	; (f34 <ssd1963_flush+0x290>)
     d1e:	4798      	blx	r3
     d20:	4b85      	ldr	r3, [pc, #532]	; (f38 <ssd1963_flush+0x294>)
     d22:	4798      	blx	r3
     d24:	3801      	subs	r0, #1
     d26:	4580      	cmp	r8, r0
     d28:	f300 8118 	bgt.w	f5c <ssd1963_flush+0x2b8>
     d2c:	f9ba 8006 	ldrsh.w	r8, [sl, #6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d30:	2240      	movs	r2, #64	; 0x40
     d32:	4b83      	ldr	r3, [pc, #524]	; (f40 <ssd1963_flush+0x29c>)
     d34:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     d36:	4b83      	ldr	r3, [pc, #524]	; (f44 <ssd1963_flush+0x2a0>)
     d38:	781b      	ldrb	r3, [r3, #0]
     d3a:	b92b      	cbnz	r3, d48 <ssd1963_flush+0xa4>
     d3c:	2220      	movs	r2, #32
     d3e:	4b80      	ldr	r3, [pc, #512]	; (f40 <ssd1963_flush+0x29c>)
     d40:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     d42:	2201      	movs	r2, #1
     d44:	4b7f      	ldr	r3, [pc, #508]	; (f44 <ssd1963_flush+0x2a0>)
     d46:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     d48:	222a      	movs	r2, #42	; 0x2a
     d4a:	497f      	ldr	r1, [pc, #508]	; (f48 <ssd1963_flush+0x2a4>)
     d4c:	487f      	ldr	r0, [pc, #508]	; (f4c <ssd1963_flush+0x2a8>)
     d4e:	4b80      	ldr	r3, [pc, #512]	; (f50 <ssd1963_flush+0x2ac>)
     d50:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d52:	4b7b      	ldr	r3, [pc, #492]	; (f40 <ssd1963_flush+0x29c>)
     d54:	2140      	movs	r1, #64	; 0x40
     d56:	6199      	str	r1, [r3, #24]
    ssd1963_data(act_x1 >> 8);
     d58:	f3c6 2207 	ubfx	r2, r6, #8, #8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d5c:	6159      	str	r1, [r3, #20]
    if(cmd_mode != false) {
     d5e:	4b79      	ldr	r3, [pc, #484]	; (f44 <ssd1963_flush+0x2a0>)
     d60:	781b      	ldrb	r3, [r3, #0]
     d62:	b12b      	cbz	r3, d70 <ssd1963_flush+0xcc>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d64:	2120      	movs	r1, #32
     d66:	4b76      	ldr	r3, [pc, #472]	; (f40 <ssd1963_flush+0x29c>)
     d68:	6199      	str	r1, [r3, #24]
        cmd_mode = false;
     d6a:	2100      	movs	r1, #0
     d6c:	4b75      	ldr	r3, [pc, #468]	; (f44 <ssd1963_flush+0x2a0>)
     d6e:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     d70:	4975      	ldr	r1, [pc, #468]	; (f48 <ssd1963_flush+0x2a4>)
     d72:	4876      	ldr	r0, [pc, #472]	; (f4c <ssd1963_flush+0x2a8>)
     d74:	4b76      	ldr	r3, [pc, #472]	; (f50 <ssd1963_flush+0x2ac>)
     d76:	4798      	blx	r3
     d78:	4b71      	ldr	r3, [pc, #452]	; (f40 <ssd1963_flush+0x29c>)
     d7a:	2240      	movs	r2, #64	; 0x40
     d7c:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d7e:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     d80:	4b70      	ldr	r3, [pc, #448]	; (f44 <ssd1963_flush+0x2a0>)
     d82:	781b      	ldrb	r3, [r3, #0]
     d84:	b12b      	cbz	r3, d92 <ssd1963_flush+0xee>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d86:	2220      	movs	r2, #32
     d88:	4b6d      	ldr	r3, [pc, #436]	; (f40 <ssd1963_flush+0x29c>)
     d8a:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     d8c:	2200      	movs	r2, #0
     d8e:	4b6d      	ldr	r3, [pc, #436]	; (f44 <ssd1963_flush+0x2a0>)
     d90:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     d92:	b2f2      	uxtb	r2, r6
     d94:	496c      	ldr	r1, [pc, #432]	; (f48 <ssd1963_flush+0x2a4>)
     d96:	486d      	ldr	r0, [pc, #436]	; (f4c <ssd1963_flush+0x2a8>)
     d98:	4b6d      	ldr	r3, [pc, #436]	; (f50 <ssd1963_flush+0x2ac>)
     d9a:	4798      	blx	r3
     d9c:	4b68      	ldr	r3, [pc, #416]	; (f40 <ssd1963_flush+0x29c>)
     d9e:	2140      	movs	r1, #64	; 0x40
     da0:	6199      	str	r1, [r3, #24]
    ssd1963_data(act_x2 >> 8);
     da2:	f3c7 2207 	ubfx	r2, r7, #8, #8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     da6:	6159      	str	r1, [r3, #20]
    if(cmd_mode != false) {
     da8:	4b66      	ldr	r3, [pc, #408]	; (f44 <ssd1963_flush+0x2a0>)
     daa:	781b      	ldrb	r3, [r3, #0]
     dac:	b12b      	cbz	r3, dba <ssd1963_flush+0x116>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     dae:	2120      	movs	r1, #32
     db0:	4b63      	ldr	r3, [pc, #396]	; (f40 <ssd1963_flush+0x29c>)
     db2:	6199      	str	r1, [r3, #24]
        cmd_mode = false;
     db4:	2100      	movs	r1, #0
     db6:	4b63      	ldr	r3, [pc, #396]	; (f44 <ssd1963_flush+0x2a0>)
     db8:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     dba:	4963      	ldr	r1, [pc, #396]	; (f48 <ssd1963_flush+0x2a4>)
     dbc:	4863      	ldr	r0, [pc, #396]	; (f4c <ssd1963_flush+0x2a8>)
     dbe:	4b64      	ldr	r3, [pc, #400]	; (f50 <ssd1963_flush+0x2ac>)
     dc0:	4798      	blx	r3
     dc2:	4b5f      	ldr	r3, [pc, #380]	; (f40 <ssd1963_flush+0x29c>)
     dc4:	2140      	movs	r1, #64	; 0x40
     dc6:	6199      	str	r1, [r3, #24]
    ssd1963_data(0x00FF & act_x2);
     dc8:	b2fa      	uxtb	r2, r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     dca:	6159      	str	r1, [r3, #20]
    if(cmd_mode != false) {
     dcc:	4b5d      	ldr	r3, [pc, #372]	; (f44 <ssd1963_flush+0x2a0>)
     dce:	781b      	ldrb	r3, [r3, #0]
     dd0:	b12b      	cbz	r3, dde <ssd1963_flush+0x13a>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     dd2:	2120      	movs	r1, #32
     dd4:	4b5a      	ldr	r3, [pc, #360]	; (f40 <ssd1963_flush+0x29c>)
     dd6:	6199      	str	r1, [r3, #24]
        cmd_mode = false;
     dd8:	2100      	movs	r1, #0
     dda:	4b5a      	ldr	r3, [pc, #360]	; (f44 <ssd1963_flush+0x2a0>)
     ddc:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     dde:	495a      	ldr	r1, [pc, #360]	; (f48 <ssd1963_flush+0x2a4>)
     de0:	485a      	ldr	r0, [pc, #360]	; (f4c <ssd1963_flush+0x2a8>)
     de2:	4b5b      	ldr	r3, [pc, #364]	; (f50 <ssd1963_flush+0x2ac>)
     de4:	4798      	blx	r3
     de6:	4b56      	ldr	r3, [pc, #344]	; (f40 <ssd1963_flush+0x29c>)
     de8:	2240      	movs	r2, #64	; 0x40
     dea:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     dec:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     dee:	4b55      	ldr	r3, [pc, #340]	; (f44 <ssd1963_flush+0x2a0>)
     df0:	781b      	ldrb	r3, [r3, #0]
     df2:	b92b      	cbnz	r3, e00 <ssd1963_flush+0x15c>
     df4:	2220      	movs	r2, #32
     df6:	4b52      	ldr	r3, [pc, #328]	; (f40 <ssd1963_flush+0x29c>)
     df8:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     dfa:	2201      	movs	r2, #1
     dfc:	4b51      	ldr	r3, [pc, #324]	; (f44 <ssd1963_flush+0x2a0>)
     dfe:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     e00:	222b      	movs	r2, #43	; 0x2b
     e02:	4951      	ldr	r1, [pc, #324]	; (f48 <ssd1963_flush+0x2a4>)
     e04:	4851      	ldr	r0, [pc, #324]	; (f4c <ssd1963_flush+0x2a8>)
     e06:	4b52      	ldr	r3, [pc, #328]	; (f50 <ssd1963_flush+0x2ac>)
     e08:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     e0a:	4b4d      	ldr	r3, [pc, #308]	; (f40 <ssd1963_flush+0x29c>)
     e0c:	2140      	movs	r1, #64	; 0x40
     e0e:	6199      	str	r1, [r3, #24]
    ssd1963_data(act_y1 >> 8);
     e10:	f3cb 2207 	ubfx	r2, fp, #8, #8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e14:	6159      	str	r1, [r3, #20]
    if(cmd_mode != false) {
     e16:	4b4b      	ldr	r3, [pc, #300]	; (f44 <ssd1963_flush+0x2a0>)
     e18:	781b      	ldrb	r3, [r3, #0]
     e1a:	b12b      	cbz	r3, e28 <ssd1963_flush+0x184>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     e1c:	2120      	movs	r1, #32
     e1e:	4b48      	ldr	r3, [pc, #288]	; (f40 <ssd1963_flush+0x29c>)
     e20:	6199      	str	r1, [r3, #24]
        cmd_mode = false;
     e22:	2100      	movs	r1, #0
     e24:	4b47      	ldr	r3, [pc, #284]	; (f44 <ssd1963_flush+0x2a0>)
     e26:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     e28:	4947      	ldr	r1, [pc, #284]	; (f48 <ssd1963_flush+0x2a4>)
     e2a:	4848      	ldr	r0, [pc, #288]	; (f4c <ssd1963_flush+0x2a8>)
     e2c:	4b48      	ldr	r3, [pc, #288]	; (f50 <ssd1963_flush+0x2ac>)
     e2e:	4798      	blx	r3
     e30:	4b43      	ldr	r3, [pc, #268]	; (f40 <ssd1963_flush+0x29c>)
     e32:	2240      	movs	r2, #64	; 0x40
     e34:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e36:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     e38:	4b42      	ldr	r3, [pc, #264]	; (f44 <ssd1963_flush+0x2a0>)
     e3a:	781b      	ldrb	r3, [r3, #0]
     e3c:	b12b      	cbz	r3, e4a <ssd1963_flush+0x1a6>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     e3e:	2220      	movs	r2, #32
     e40:	4b3f      	ldr	r3, [pc, #252]	; (f40 <ssd1963_flush+0x29c>)
     e42:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     e44:	2200      	movs	r2, #0
     e46:	4b3f      	ldr	r3, [pc, #252]	; (f44 <ssd1963_flush+0x2a0>)
     e48:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     e4a:	b2e2      	uxtb	r2, r4
     e4c:	493e      	ldr	r1, [pc, #248]	; (f48 <ssd1963_flush+0x2a4>)
     e4e:	483f      	ldr	r0, [pc, #252]	; (f4c <ssd1963_flush+0x2a8>)
     e50:	4b3f      	ldr	r3, [pc, #252]	; (f50 <ssd1963_flush+0x2ac>)
     e52:	4798      	blx	r3
     e54:	4b3a      	ldr	r3, [pc, #232]	; (f40 <ssd1963_flush+0x29c>)
     e56:	2140      	movs	r1, #64	; 0x40
     e58:	6199      	str	r1, [r3, #24]
    ssd1963_data(act_y2 >> 8);
     e5a:	f3c8 2207 	ubfx	r2, r8, #8, #8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e5e:	6159      	str	r1, [r3, #20]
    if(cmd_mode != false) {
     e60:	4b38      	ldr	r3, [pc, #224]	; (f44 <ssd1963_flush+0x2a0>)
     e62:	781b      	ldrb	r3, [r3, #0]
     e64:	b12b      	cbz	r3, e72 <ssd1963_flush+0x1ce>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     e66:	2120      	movs	r1, #32
     e68:	4b35      	ldr	r3, [pc, #212]	; (f40 <ssd1963_flush+0x29c>)
     e6a:	6199      	str	r1, [r3, #24]
        cmd_mode = false;
     e6c:	2100      	movs	r1, #0
     e6e:	4b35      	ldr	r3, [pc, #212]	; (f44 <ssd1963_flush+0x2a0>)
     e70:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     e72:	4935      	ldr	r1, [pc, #212]	; (f48 <ssd1963_flush+0x2a4>)
     e74:	4835      	ldr	r0, [pc, #212]	; (f4c <ssd1963_flush+0x2a8>)
     e76:	4b36      	ldr	r3, [pc, #216]	; (f50 <ssd1963_flush+0x2ac>)
     e78:	4798      	blx	r3
     e7a:	4b31      	ldr	r3, [pc, #196]	; (f40 <ssd1963_flush+0x29c>)
     e7c:	2140      	movs	r1, #64	; 0x40
     e7e:	6199      	str	r1, [r3, #24]
    ssd1963_data(0x00FF & act_y2);
     e80:	fa5f f288 	uxtb.w	r2, r8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e84:	6159      	str	r1, [r3, #20]
    if(cmd_mode != false) {
     e86:	4b2f      	ldr	r3, [pc, #188]	; (f44 <ssd1963_flush+0x2a0>)
     e88:	781b      	ldrb	r3, [r3, #0]
     e8a:	b12b      	cbz	r3, e98 <ssd1963_flush+0x1f4>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     e8c:	2120      	movs	r1, #32
     e8e:	4b2c      	ldr	r3, [pc, #176]	; (f40 <ssd1963_flush+0x29c>)
     e90:	6199      	str	r1, [r3, #24]
        cmd_mode = false;
     e92:	2100      	movs	r1, #0
     e94:	4b2b      	ldr	r3, [pc, #172]	; (f44 <ssd1963_flush+0x2a0>)
     e96:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     e98:	492b      	ldr	r1, [pc, #172]	; (f48 <ssd1963_flush+0x2a4>)
     e9a:	482c      	ldr	r0, [pc, #176]	; (f4c <ssd1963_flush+0x2a8>)
     e9c:	4b2c      	ldr	r3, [pc, #176]	; (f50 <ssd1963_flush+0x2ac>)
     e9e:	4798      	blx	r3
     ea0:	4b27      	ldr	r3, [pc, #156]	; (f40 <ssd1963_flush+0x29c>)
     ea2:	2240      	movs	r2, #64	; 0x40
     ea4:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ea6:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     ea8:	4b26      	ldr	r3, [pc, #152]	; (f44 <ssd1963_flush+0x2a0>)
     eaa:	781b      	ldrb	r3, [r3, #0]
     eac:	b92b      	cbnz	r3, eba <ssd1963_flush+0x216>
     eae:	2220      	movs	r2, #32
     eb0:	4b23      	ldr	r3, [pc, #140]	; (f40 <ssd1963_flush+0x29c>)
     eb2:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     eb4:	2201      	movs	r2, #1
     eb6:	4b23      	ldr	r3, [pc, #140]	; (f44 <ssd1963_flush+0x2a0>)
     eb8:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     eba:	222c      	movs	r2, #44	; 0x2c
     ebc:	4922      	ldr	r1, [pc, #136]	; (f48 <ssd1963_flush+0x2a4>)
     ebe:	4823      	ldr	r0, [pc, #140]	; (f4c <ssd1963_flush+0x2a8>)
     ec0:	4b23      	ldr	r3, [pc, #140]	; (f50 <ssd1963_flush+0x2ac>)
     ec2:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     ec4:	2240      	movs	r2, #64	; 0x40
     ec6:	4b1e      	ldr	r3, [pc, #120]	; (f40 <ssd1963_flush+0x29c>)
     ec8:	619a      	str	r2, [r3, #24]
    uint16_t full_w = area->x2 - area->x1 + 1;
     eca:	f8ba 3004 	ldrh.w	r3, [sl, #4]
     ece:	3301      	adds	r3, #1
     ed0:	f8ba 2000 	ldrh.w	r2, [sl]
     ed4:	1a9b      	subs	r3, r3, r2
     ed6:	b29b      	uxth	r3, r3
    if(cmd_mode != false) {
     ed8:	4a1a      	ldr	r2, [pc, #104]	; (f44 <ssd1963_flush+0x2a0>)
     eda:	7812      	ldrb	r2, [r2, #0]
     edc:	b12a      	cbz	r2, eea <ssd1963_flush+0x246>
     ede:	2120      	movs	r1, #32
     ee0:	4a17      	ldr	r2, [pc, #92]	; (f40 <ssd1963_flush+0x29c>)
     ee2:	6191      	str	r1, [r2, #24]
        cmd_mode = false;
     ee4:	2100      	movs	r1, #0
     ee6:	4a17      	ldr	r2, [pc, #92]	; (f44 <ssd1963_flush+0x2a0>)
     ee8:	7011      	strb	r1, [r2, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     eea:	2140      	movs	r1, #64	; 0x40
     eec:	4a14      	ldr	r2, [pc, #80]	; (f40 <ssd1963_flush+0x29c>)
     eee:	6151      	str	r1, [r2, #20]
    uint16_t act_w = act_x2 - act_x1 + 1;
     ef0:	f1c6 0601 	rsb	r6, r6, #1
     ef4:	443e      	add	r6, r7
     ef6:	b2b6      	uxth	r6, r6
    for(i = act_y1; i <= act_y2; i++) {
     ef8:	45d8      	cmp	r8, fp
     efa:	db0e      	blt.n	f1a <ssd1963_flush+0x276>
        color_p += full_w;
     efc:	005f      	lsls	r7, r3, #1
        LV_DRV_DISP_PAR_WR_ARRAY((uint16_t *)color_p, act_w);
     efe:	f8df b048 	ldr.w	fp, [pc, #72]	; f48 <ssd1963_flush+0x2a4>
     f02:	f8df a054 	ldr.w	sl, [pc, #84]	; f58 <ssd1963_flush+0x2b4>
     f06:	4633      	mov	r3, r6
     f08:	462a      	mov	r2, r5
     f0a:	4659      	mov	r1, fp
     f0c:	480f      	ldr	r0, [pc, #60]	; (f4c <ssd1963_flush+0x2a8>)
     f0e:	47d0      	blx	sl
        color_p += full_w;
     f10:	443d      	add	r5, r7
     f12:	3401      	adds	r4, #1
     f14:	b224      	sxth	r4, r4
    for(i = act_y1; i <= act_y2; i++) {
     f16:	45a0      	cmp	r8, r4
     f18:	daf5      	bge.n	f06 <ssd1963_flush+0x262>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     f1a:	2240      	movs	r2, #64	; 0x40
     f1c:	4b08      	ldr	r3, [pc, #32]	; (f40 <ssd1963_flush+0x29c>)
     f1e:	619a      	str	r2, [r3, #24]
    lv_disp_flush_ready(disp_drv);
     f20:	4648      	mov	r0, r9
     f22:	4b0c      	ldr	r3, [pc, #48]	; (f54 <ssd1963_flush+0x2b0>)
     f24:	4798      	blx	r3
     f26:	e6d3      	b.n	cd0 <ssd1963_flush+0x2c>
    int32_t act_x2 = area->x2 > SSD1963_HOR_RES - 1 ? SSD1963_HOR_RES - 1 : area->x2;
     f28:	4b02      	ldr	r3, [pc, #8]	; (f34 <ssd1963_flush+0x290>)
     f2a:	4798      	blx	r3
     f2c:	4b03      	ldr	r3, [pc, #12]	; (f3c <ssd1963_flush+0x298>)
     f2e:	4798      	blx	r3
     f30:	1e47      	subs	r7, r0, #1
     f32:	e6f1      	b.n	d18 <ssd1963_flush+0x74>
     f34:	00010ed5 	.word	0x00010ed5
     f38:	00010f09 	.word	0x00010f09
     f3c:	00010ee1 	.word	0x00010ee1
     f40:	41008000 	.word	0x41008000
     f44:	20000000 	.word	0x20000000
     f48:	1c03c3f7 	.word	0x1c03c3f7
     f4c:	41008080 	.word	0x41008080
     f50:	000010f9 	.word	0x000010f9
     f54:	00010fa1 	.word	0x00010fa1
     f58:	00001119 	.word	0x00001119
    int32_t act_y2 = area->y2 > SSD1963_VER_RES - 1 ? SSD1963_VER_RES - 1 : area->y2;
     f5c:	4b03      	ldr	r3, [pc, #12]	; (f6c <ssd1963_flush+0x2c8>)
     f5e:	4798      	blx	r3
     f60:	4b03      	ldr	r3, [pc, #12]	; (f70 <ssd1963_flush+0x2cc>)
     f62:	4798      	blx	r3
     f64:	f100 38ff 	add.w	r8, r0, #4294967295
     f68:	e6e2      	b.n	d30 <ssd1963_flush+0x8c>
     f6a:	bf00      	nop
     f6c:	00010ed5 	.word	0x00010ed5
     f70:	00010f09 	.word	0x00010f09

00000f74 <p_screen_init>:

static lv_disp_buf_t disp_buf;
static lv_color_t buf[LV_HOR_RES_MAX * 34];                     /*Declare a buffer for 10 lines*/

void p_screen_init(void)
{
     f74:	b530      	push	{r4, r5, lr}
     f76:	b08d      	sub	sp, #52	; 0x34
	// devices init
	lv_init();
     f78:	4b19      	ldr	r3, [pc, #100]	; (fe0 <p_screen_init+0x6c>)
     f7a:	4798      	blx	r3
		
	ssd1963_init();
     f7c:	4b19      	ldr	r3, [pc, #100]	; (fe4 <p_screen_init+0x70>)
     f7e:	4798      	blx	r3
		
		
	lv_disp_buf_init(&disp_buf, buf, NULL, LV_HOR_RES_MAX * 34);    /*Initialize the display buffer*/
     f80:	4c19      	ldr	r4, [pc, #100]	; (fe8 <p_screen_init+0x74>)
     f82:	f44f 537f 	mov.w	r3, #16320	; 0x3fc0
     f86:	2200      	movs	r2, #0
     f88:	4918      	ldr	r1, [pc, #96]	; (fec <p_screen_init+0x78>)
     f8a:	4620      	mov	r0, r4
     f8c:	4d18      	ldr	r5, [pc, #96]	; (ff0 <p_screen_init+0x7c>)
     f8e:	47a8      	blx	r5
	lv_disp_drv_t disp_drv;               /*Descriptor of a display driver*/
	lv_disp_drv_init(&disp_drv);          /*Basic initialization*/
     f90:	a801      	add	r0, sp, #4
     f92:	4b18      	ldr	r3, [pc, #96]	; (ff4 <p_screen_init+0x80>)
     f94:	4798      	blx	r3
	disp_drv.flush_cb = ssd1963_flush;    /*Set your driver function*/
     f96:	4b18      	ldr	r3, [pc, #96]	; (ff8 <p_screen_init+0x84>)
     f98:	9304      	str	r3, [sp, #16]
	disp_drv.buffer = &disp_buf;          /*Assign the buffer to the display*/
     f9a:	9402      	str	r4, [sp, #8]
	lv_disp_drv_register(&disp_drv);      /*Finally register the driver*/
     f9c:	a801      	add	r0, sp, #4
     f9e:	4b17      	ldr	r3, [pc, #92]	; (ffc <p_screen_init+0x88>)
     fa0:	4798      	blx	r3
	
	lv_obj_t* scr = lv_disp_get_scr_act(NULL);
     fa2:	2000      	movs	r0, #0
     fa4:	4b16      	ldr	r3, [pc, #88]	; (1000 <p_screen_init+0x8c>)
     fa6:	4798      	blx	r3
     fa8:	4605      	mov	r5, r0
		
	lv_obj_t* hornet_image = lv_img_create(scr, NULL);
     faa:	2100      	movs	r1, #0
     fac:	4b15      	ldr	r3, [pc, #84]	; (1004 <p_screen_init+0x90>)
     fae:	4798      	blx	r3
     fb0:	4604      	mov	r4, r0
	lv_img_set_src(hornet_image, &hornet);
     fb2:	4915      	ldr	r1, [pc, #84]	; (1008 <p_screen_init+0x94>)
     fb4:	4b15      	ldr	r3, [pc, #84]	; (100c <p_screen_init+0x98>)
     fb6:	4798      	blx	r3
	lv_obj_set_pos(hornet_image, 0, 0);
     fb8:	2200      	movs	r2, #0
     fba:	4611      	mov	r1, r2
     fbc:	4620      	mov	r0, r4
     fbe:	4c14      	ldr	r4, [pc, #80]	; (1010 <p_screen_init+0x9c>)
     fc0:	47a0      	blx	r4
		
	lv_obj_t* random_text = lv_label_create(scr, NULL);
     fc2:	2100      	movs	r1, #0
     fc4:	4628      	mov	r0, r5
     fc6:	4b13      	ldr	r3, [pc, #76]	; (1014 <p_screen_init+0xa0>)
     fc8:	4798      	blx	r3
     fca:	4605      	mov	r5, r0
	lv_obj_set_pos(random_text, 90, 35);
     fcc:	2223      	movs	r2, #35	; 0x23
     fce:	215a      	movs	r1, #90	; 0x5a
     fd0:	47a0      	blx	r4
	lv_label_set_text(random_text, "Hello World");
     fd2:	4911      	ldr	r1, [pc, #68]	; (1018 <p_screen_init+0xa4>)
     fd4:	4628      	mov	r0, r5
     fd6:	4b11      	ldr	r3, [pc, #68]	; (101c <p_screen_init+0xa8>)
     fd8:	4798      	blx	r3
}
     fda:	b00d      	add	sp, #52	; 0x34
     fdc:	bd30      	pop	{r4, r5, pc}
     fde:	bf00      	nop
     fe0:	0000285d 	.word	0x0000285d
     fe4:	000002d1 	.word	0x000002d1
     fe8:	20008014 	.word	0x20008014
     fec:	20000094 	.word	0x20000094
     ff0:	00010d65 	.word	0x00010d65
     ff4:	00010d05 	.word	0x00010d05
     ff8:	00000ca5 	.word	0x00000ca5
     ffc:	00010d85 	.word	0x00010d85
    1000:	00002341 	.word	0x00002341
    1004:	00019861 	.word	0x00019861
    1008:	0001b524 	.word	0x0001b524
    100c:	00019605 	.word	0x00019605
    1010:	00003431 	.word	0x00003431
    1014:	0001aaf9 	.word	0x0001aaf9
    1018:	00023a8c 	.word	0x00023a8c
    101c:	0001a7f9 	.word	0x0001a7f9

00001020 <p_screen_service>:

void p_screen_service(void)
{
    1020:	b508      	push	{r3, lr}
	lv_task_handler();
    1022:	4b01      	ldr	r3, [pc, #4]	; (1028 <p_screen_service+0x8>)
    1024:	4798      	blx	r3
    1026:	bd08      	pop	{r3, pc}
    1028:	000137c1 	.word	0x000137c1

0000102c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    102c:	e7fe      	b.n	102c <Dummy_Handler>
	...

00001030 <Reset_Handler>:
{
    1030:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
    1032:	4b1c      	ldr	r3, [pc, #112]	; (10a4 <Reset_Handler+0x74>)
    1034:	4a1c      	ldr	r2, [pc, #112]	; (10a8 <Reset_Handler+0x78>)
    1036:	429a      	cmp	r2, r3
    1038:	d010      	beq.n	105c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
    103a:	4b1c      	ldr	r3, [pc, #112]	; (10ac <Reset_Handler+0x7c>)
    103c:	4a19      	ldr	r2, [pc, #100]	; (10a4 <Reset_Handler+0x74>)
    103e:	429a      	cmp	r2, r3
    1040:	d20c      	bcs.n	105c <Reset_Handler+0x2c>
    1042:	3b01      	subs	r3, #1
    1044:	1a9b      	subs	r3, r3, r2
    1046:	f023 0303 	bic.w	r3, r3, #3
    104a:	3304      	adds	r3, #4
    104c:	4413      	add	r3, r2
    104e:	4916      	ldr	r1, [pc, #88]	; (10a8 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
    1050:	f851 0b04 	ldr.w	r0, [r1], #4
    1054:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
    1058:	429a      	cmp	r2, r3
    105a:	d1f9      	bne.n	1050 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
    105c:	4b14      	ldr	r3, [pc, #80]	; (10b0 <Reset_Handler+0x80>)
    105e:	4a15      	ldr	r2, [pc, #84]	; (10b4 <Reset_Handler+0x84>)
    1060:	429a      	cmp	r2, r3
    1062:	d20a      	bcs.n	107a <Reset_Handler+0x4a>
    1064:	3b01      	subs	r3, #1
    1066:	1a9b      	subs	r3, r3, r2
    1068:	f023 0303 	bic.w	r3, r3, #3
    106c:	3304      	adds	r3, #4
    106e:	4413      	add	r3, r2
                *pDest++ = 0;
    1070:	2100      	movs	r1, #0
    1072:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
    1076:	4293      	cmp	r3, r2
    1078:	d1fb      	bne.n	1072 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    107a:	4b0f      	ldr	r3, [pc, #60]	; (10b8 <Reset_Handler+0x88>)
    107c:	4a0f      	ldr	r2, [pc, #60]	; (10bc <Reset_Handler+0x8c>)
    107e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1082:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
    1084:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1088:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    108c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1090:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1094:	f3bf 8f6f 	isb	sy
        __libc_init_array();
    1098:	4b09      	ldr	r3, [pc, #36]	; (10c0 <Reset_Handler+0x90>)
    109a:	4798      	blx	r3
        main();
    109c:	4b09      	ldr	r3, [pc, #36]	; (10c4 <Reset_Handler+0x94>)
    109e:	4798      	blx	r3
    10a0:	e7fe      	b.n	10a0 <Reset_Handler+0x70>
    10a2:	bf00      	nop
    10a4:	20000000 	.word	0x20000000
    10a8:	00029a30 	.word	0x00029a30
    10ac:	20000074 	.word	0x20000074
    10b0:	2000c800 	.word	0x2000c800
    10b4:	20000078 	.word	0x20000078
    10b8:	e000ed00 	.word	0xe000ed00
    10bc:	00000000 	.word	0x00000000
    10c0:	0001b489 	.word	0x0001b489
    10c4:	00002251 	.word	0x00002251

000010c8 <p_gpio_set_port_data>:
		p_gpio_parallel_write(group, mask, data[ind]);
	}
}

void p_gpio_set_port_data(PortGroup* const port, const uint32_t mask, const uint32_t data)
{
    10c8:	b410      	push	{r4}
	uint32_t dword = (uint32_t)(SSD1963_TFT_DATA_FIX(data));
    10ca:	0053      	lsls	r3, r2, #1
    10cc:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
    10d0:	0154      	lsls	r4, r2, #5
    10d2:	f404 3470 	and.w	r4, r4, #245760	; 0x3c000
    10d6:	4323      	orrs	r3, r4
    10d8:	f002 0407 	and.w	r4, r2, #7
    10dc:	4323      	orrs	r3, r4
    10de:	0352      	lsls	r2, r2, #13
    10e0:	f002 52e0 	and.w	r2, r2, #469762048	; 0x1c000000
    10e4:	431a      	orrs	r2, r3
	port->OUTSET.reg = (mask & dword);
    10e6:	ea02 0301 	and.w	r3, r2, r1
    10ea:	6183      	str	r3, [r0, #24]
	port->OUTCLR.reg = (mask & ~dword);
    10ec:	ea21 0102 	bic.w	r1, r1, r2
    10f0:	6141      	str	r1, [r0, #20]
}
    10f2:	f85d 4b04 	ldr.w	r4, [sp], #4
    10f6:	4770      	bx	lr

000010f8 <p_gpio_parallel_write>:
{
    10f8:	b538      	push	{r3, r4, r5, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    10fa:	4c05      	ldr	r4, [pc, #20]	; (1110 <p_gpio_parallel_write+0x18>)
    10fc:	2540      	movs	r5, #64	; 0x40
    10fe:	6165      	str	r5, [r4, #20]
	p_gpio_set_port_data(group, mask, (uint32_t)data);
    1100:	4b04      	ldr	r3, [pc, #16]	; (1114 <p_gpio_parallel_write+0x1c>)
    1102:	4798      	blx	r3
    1104:	2380      	movs	r3, #128	; 0x80
    1106:	6163      	str	r3, [r4, #20]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1108:	61a3      	str	r3, [r4, #24]
    110a:	61a5      	str	r5, [r4, #24]
    110c:	bd38      	pop	{r3, r4, r5, pc}
    110e:	bf00      	nop
    1110:	41008000 	.word	0x41008000
    1114:	000010c9 	.word	0x000010c9

00001118 <p_gpio_parallel_write_arr>:
	for(int ind = 0; ind < len; ind++)
    1118:	b18b      	cbz	r3, 113e <p_gpio_parallel_write_arr+0x26>
{
    111a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    111e:	460f      	mov	r7, r1
    1120:	4606      	mov	r6, r0
    1122:	4614      	mov	r4, r2
    1124:	eb02 0543 	add.w	r5, r2, r3, lsl #1
		p_gpio_parallel_write(group, mask, data[ind]);
    1128:	f8df 8014 	ldr.w	r8, [pc, #20]	; 1140 <p_gpio_parallel_write_arr+0x28>
    112c:	f834 2b02 	ldrh.w	r2, [r4], #2
    1130:	4639      	mov	r1, r7
    1132:	4630      	mov	r0, r6
    1134:	47c0      	blx	r8
	for(int ind = 0; ind < len; ind++)
    1136:	42ac      	cmp	r4, r5
    1138:	d1f8      	bne.n	112c <p_gpio_parallel_write_arr+0x14>
    113a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    113e:	4770      	bx	lr
    1140:	000010f9 	.word	0x000010f9

00001144 <p_gpio_set_port_group_config>:

void p_gpio_set_port_group_config(enum gpio_port port, const uint32_t mask, p_port_config* config)
{
    1144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1148:	b083      	sub	sp, #12
    114a:	468b      	mov	fp, r1
    114c:	9200      	str	r2, [sp, #0]
	for(uint8_t i = 0; i < 32; i++)
	{
		if(mask & (1UL << i))
		{
			uint32_t _gpio_pin = GPIO(port, i);
    114e:	0140      	lsls	r0, r0, #5
    1150:	b2c3      	uxtb	r3, r0
    1152:	9301      	str	r3, [sp, #4]
    1154:	2600      	movs	r6, #0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1156:	f8df 9194 	ldr.w	r9, [pc, #404]	; 12ec <p_gpio_set_port_group_config+0x1a8>
    115a:	e065      	b.n	1228 <p_gpio_set_port_group_config+0xe4>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    115c:	eb09 13c7 	add.w	r3, r9, r7, lsl #7
    1160:	605d      	str	r5, [r3, #4]
                                       const enum gpio_direction direction)
{
	switch (direction) {
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    1162:	b2aa      	uxth	r2, r5
    1164:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1168:	629a      	str	r2, [r3, #40]	; 0x28
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    116a:	0c2a      	lsrs	r2, r5, #16
		hri_port_write_WRCONFIG_reg(
    116c:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    1170:	629a      	str	r2, [r3, #40]	; 0x28
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
	switch (pull_mode) {
    1172:	9b00      	ldr	r3, [sp, #0]
    1174:	781b      	ldrb	r3, [r3, #0]
    1176:	2b01      	cmp	r3, #1
    1178:	d077      	beq.n	126a <p_gpio_set_port_group_config+0x126>
    117a:	b323      	cbz	r3, 11c6 <p_gpio_set_port_group_config+0x82>
    117c:	2b02      	cmp	r3, #2
    117e:	f000 8084 	beq.w	128a <p_gpio_set_port_group_config+0x146>
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
		break;

	default:
		ASSERT(false);
    1182:	2289      	movs	r2, #137	; 0x89
    1184:	4957      	ldr	r1, [pc, #348]	; (12e4 <p_gpio_set_port_group_config+0x1a0>)
    1186:	2000      	movs	r0, #0
    1188:	4b57      	ldr	r3, [pc, #348]	; (12e8 <p_gpio_set_port_group_config+0x1a4>)
    118a:	4798      	blx	r3
    118c:	e024      	b.n	11d8 <p_gpio_set_port_group_config+0x94>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    118e:	eb09 12c7 	add.w	r2, r9, r7, lsl #7
    1192:	6055      	str	r5, [r2, #4]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    1194:	b2ab      	uxth	r3, r5
    1196:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    119a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    119e:	6293      	str	r3, [r2, #40]	; 0x28
		                                | ((mask & 0xffff0000) >> 16));
    11a0:	0c2b      	lsrs	r3, r5, #16
		hri_port_write_WRCONFIG_reg(PORT,
    11a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    11a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    11aa:	6293      	str	r3, [r2, #40]	; 0x28
    11ac:	e7e1      	b.n	1172 <p_gpio_set_port_group_config+0x2e>
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    11ae:	eb09 13c7 	add.w	r3, r9, r7, lsl #7
    11b2:	609d      	str	r5, [r3, #8]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    11b4:	b2aa      	uxth	r2, r5
    11b6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    11ba:	629a      	str	r2, [r3, #40]	; 0x28
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    11bc:	0c2a      	lsrs	r2, r5, #16
		hri_port_write_WRCONFIG_reg(
    11be:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    11c2:	629a      	str	r2, [r3, #40]	; 0x28
    11c4:	e7d5      	b.n	1172 <p_gpio_set_port_group_config+0x2e>
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    11c6:	eb09 13c7 	add.w	r3, r9, r7, lsl #7
    11ca:	4443      	add	r3, r8
    11cc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    11d0:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    11d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			gpio_set_pin_direction(_gpio_pin, config->direction);
			gpio_set_pin_pull_mode(_gpio_pin, config->pull_mode);
			gpio_set_pin_function(_gpio_pin, config->function);
    11d8:	9b00      	ldr	r3, [sp, #0]
    11da:	685a      	ldr	r2, [r3, #4]
/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
	uint8_t port = GPIO_PORT(gpio);
    11dc:	0964      	lsrs	r4, r4, #5
	uint8_t pin  = GPIO_PIN(gpio);

	if (function == GPIO_PIN_FUNCTION_OFF) {
    11de:	f1b2 3fff 	cmp.w	r2, #4294967295
    11e2:	d062      	beq.n	12aa <p_gpio_set_port_group_config+0x166>
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    11e4:	b2e4      	uxtb	r4, r4
    11e6:	eb09 11c4 	add.w	r1, r9, r4, lsl #7
    11ea:	4441      	add	r1, r8
    11ec:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
	tmp &= ~PORT_PINCFG_PMUXEN;
    11f0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    11f4:	f043 0301 	orr.w	r3, r3, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    11f8:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);

	} else {
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);

		if (pin & 1) {
    11fc:	f01a 0f01 	tst.w	sl, #1
    1200:	d15e      	bne.n	12c0 <p_gpio_set_port_group_config+0x17c>
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1202:	eb09 14c4 	add.w	r4, r9, r4, lsl #7
    1206:	eb04 0858 	add.w	r8, r4, r8, lsr #1
    120a:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    120e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    1212:	f002 020f 	and.w	r2, r2, #15
    1216:	431a      	orrs	r2, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1218:	f888 2030 	strb.w	r2, [r8, #48]	; 0x30
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    121c:	eb09 17c7 	add.w	r7, r9, r7, lsl #7
    1220:	617d      	str	r5, [r7, #20]
    1222:	3601      	adds	r6, #1
	for(uint8_t i = 0; i < 32; i++)
    1224:	2e20      	cmp	r6, #32
    1226:	d059      	beq.n	12dc <p_gpio_set_port_group_config+0x198>
    1228:	b2f4      	uxtb	r4, r6
		if(mask & (1UL << i))
    122a:	fa2b f306 	lsr.w	r3, fp, r6
    122e:	f013 0f01 	tst.w	r3, #1
    1232:	d0f6      	beq.n	1222 <p_gpio_set_port_group_config+0xde>
			uint32_t _gpio_pin = GPIO(port, i);
    1234:	f004 041f 	and.w	r4, r4, #31
    1238:	9b01      	ldr	r3, [sp, #4]
    123a:	441c      	add	r4, r3
			gpio_set_pin_direction(_gpio_pin, config->direction);
    123c:	fa5f fa84 	uxtb.w	sl, r4
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    1240:	ea4f 175a 	mov.w	r7, sl, lsr #5
    1244:	f00a 081f 	and.w	r8, sl, #31
    1248:	2501      	movs	r5, #1
    124a:	fa05 f508 	lsl.w	r5, r5, r8
	switch (direction) {
    124e:	9b00      	ldr	r3, [sp, #0]
    1250:	785b      	ldrb	r3, [r3, #1]
    1252:	2b01      	cmp	r3, #1
    1254:	d09b      	beq.n	118e <p_gpio_set_port_group_config+0x4a>
    1256:	2b00      	cmp	r3, #0
    1258:	d080      	beq.n	115c <p_gpio_set_port_group_config+0x18>
    125a:	2b02      	cmp	r3, #2
    125c:	d0a7      	beq.n	11ae <p_gpio_set_port_group_config+0x6a>
		ASSERT(false);
    125e:	2246      	movs	r2, #70	; 0x46
    1260:	4920      	ldr	r1, [pc, #128]	; (12e4 <p_gpio_set_port_group_config+0x1a0>)
    1262:	2000      	movs	r0, #0
    1264:	4b20      	ldr	r3, [pc, #128]	; (12e8 <p_gpio_set_port_group_config+0x1a4>)
    1266:	4798      	blx	r3
    1268:	e783      	b.n	1172 <p_gpio_set_port_group_config+0x2e>
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    126a:	2301      	movs	r3, #1
    126c:	fa03 f308 	lsl.w	r3, r3, r8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1270:	eb09 12c7 	add.w	r2, r9, r7, lsl #7
    1274:	6053      	str	r3, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1276:	eb02 0008 	add.w	r0, r2, r8
    127a:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    127e:	f041 0104 	orr.w	r1, r1, #4
    1282:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1286:	6193      	str	r3, [r2, #24]
    1288:	e7a6      	b.n	11d8 <p_gpio_set_port_group_config+0x94>
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    128a:	2301      	movs	r3, #1
    128c:	fa03 f308 	lsl.w	r3, r3, r8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1290:	eb09 12c7 	add.w	r2, r9, r7, lsl #7
    1294:	6053      	str	r3, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1296:	eb02 0008 	add.w	r0, r2, r8
    129a:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    129e:	f041 0104 	orr.w	r1, r1, #4
    12a2:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    12a6:	6153      	str	r3, [r2, #20]
    12a8:	e796      	b.n	11d8 <p_gpio_set_port_group_config+0x94>
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    12aa:	b2e4      	uxtb	r4, r4
    12ac:	eb09 14c4 	add.w	r4, r9, r4, lsl #7
    12b0:	44a0      	add	r8, r4
    12b2:	f898 3040 	ldrb.w	r3, [r8, #64]	; 0x40
	tmp &= ~PORT_PINCFG_PMUXEN;
    12b6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    12ba:	f888 3040 	strb.w	r3, [r8, #64]	; 0x40
    12be:	e7ad      	b.n	121c <p_gpio_set_port_group_config+0xd8>
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    12c0:	eb09 14c4 	add.w	r4, r9, r4, lsl #7
    12c4:	eb04 0858 	add.w	r8, r4, r8, lsr #1
    12c8:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    12cc:	f003 030f 	and.w	r3, r3, #15
	tmp |= PORT_PMUX_PMUXO(data);
    12d0:	ea43 1202 	orr.w	r2, r3, r2, lsl #4
    12d4:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    12d6:	f888 2030 	strb.w	r2, [r8, #48]	; 0x30
    12da:	e79f      	b.n	121c <p_gpio_set_port_group_config+0xd8>
			gpio_set_pin_level(_gpio_pin, 0);
		}
		
	}
}
    12dc:	b003      	add	sp, #12
    12de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12e2:	bf00      	nop
    12e4:	00023a98 	.word	0x00023a98
    12e8:	00001a75 	.word	0x00001a75
    12ec:	41008000 	.word	0x41008000

000012f0 <p_gpio_init>:
{
    12f0:	b570      	push	{r4, r5, r6, lr}
    12f2:	b082      	sub	sp, #8
	memset(&data_config, 0, sizeof(data_config));
    12f4:	2300      	movs	r3, #0
    12f6:	9300      	str	r3, [sp, #0]
	data_config.direction = GPIO_DIRECTION_OUT;
    12f8:	2302      	movs	r3, #2
    12fa:	f88d 3001 	strb.w	r3, [sp, #1]
	data_config.function = GPIO_PIN_FUNCTION_OFF;
    12fe:	f04f 33ff 	mov.w	r3, #4294967295
    1302:	9301      	str	r3, [sp, #4]
	p_gpio_set_port_group_config(SSD1963_TFT_DATA_PORT, SSD1963_TFT_DATA_MASK, &data_config);
    1304:	466a      	mov	r2, sp
    1306:	493f      	ldr	r1, [pc, #252]	; (1404 <p_gpio_init+0x114>)
    1308:	2001      	movs	r0, #1
    130a:	4b3f      	ldr	r3, [pc, #252]	; (1408 <p_gpio_init+0x118>)
    130c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    130e:	4b3f      	ldr	r3, [pc, #252]	; (140c <p_gpio_init+0x11c>)
    1310:	2640      	movs	r6, #64	; 0x40
    1312:	609e      	str	r6, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1314:	4a3e      	ldr	r2, [pc, #248]	; (1410 <p_gpio_init+0x120>)
    1316:	629a      	str	r2, [r3, #40]	; 0x28
    1318:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    131c:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    131e:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
    1322:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    1326:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    132a:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
    132e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1332:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1336:	2510      	movs	r5, #16
    1338:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    133a:	4936      	ldr	r1, [pc, #216]	; (1414 <p_gpio_init+0x124>)
    133c:	6299      	str	r1, [r3, #40]	; 0x28
    133e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1340:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
    1344:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    1348:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    134c:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
    1350:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1354:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1358:	2408      	movs	r4, #8
    135a:	609c      	str	r4, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    135c:	492e      	ldr	r1, [pc, #184]	; (1418 <p_gpio_init+0x128>)
    135e:	6299      	str	r1, [r3, #40]	; 0x28
    1360:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1362:	f893 1043 	ldrb.w	r1, [r3, #67]	; 0x43
    1366:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    136a:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    136e:	f893 1043 	ldrb.w	r1, [r3, #67]	; 0x43
	tmp &= ~PORT_PINCFG_PMUXEN;
    1372:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1376:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    137a:	2120      	movs	r1, #32
    137c:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    137e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    1382:	6299      	str	r1, [r3, #40]	; 0x28
    1384:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1386:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
    138a:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    138e:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1392:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
    1396:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    139a:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    139e:	2080      	movs	r0, #128	; 0x80
    13a0:	6098      	str	r0, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    13a2:	491e      	ldr	r1, [pc, #120]	; (141c <p_gpio_init+0x12c>)
    13a4:	6299      	str	r1, [r3, #40]	; 0x28
    13a6:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    13a8:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
    13ac:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    13b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    13b4:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
    13b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    13bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    13c0:	f44f 7280 	mov.w	r2, #256	; 0x100
    13c4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    13c8:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
    13cc:	3180      	adds	r1, #128	; 0x80
    13ce:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
    13d2:	4913      	ldr	r1, [pc, #76]	; (1420 <p_gpio_init+0x130>)
    13d4:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    13d8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    13dc:	f893 11c8 	ldrb.w	r1, [r3, #456]	; 0x1c8
    13e0:	f041 0104 	orr.w	r1, r1, #4
    13e4:	f883 11c8 	strb.w	r1, [r3, #456]	; 0x1c8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    13e8:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    13ec:	f893 21c8 	ldrb.w	r2, [r3, #456]	; 0x1c8
	tmp &= ~PORT_PINCFG_PMUXEN;
    13f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    13f4:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    13f8:	619e      	str	r6, [r3, #24]
    13fa:	619d      	str	r5, [r3, #24]
    13fc:	619c      	str	r4, [r3, #24]
    13fe:	6198      	str	r0, [r3, #24]
}
    1400:	b002      	add	sp, #8
    1402:	bd70      	pop	{r4, r5, r6, pc}
    1404:	1c03c3f7 	.word	0x1c03c3f7
    1408:	00001145 	.word	0x00001145
    140c:	41008000 	.word	0x41008000
    1410:	40000040 	.word	0x40000040
    1414:	40000010 	.word	0x40000010
    1418:	40000008 	.word	0x40000008
    141c:	40000080 	.word	0x40000080
    1420:	c0020000 	.word	0xc0020000

00001424 <p_i2c_init>:
#include "p_i2c.h"

struct i2c_m_sync_desc p_i2c_master;

void p_i2c_init(void)
{
    1424:	4770      	bx	lr
	...

00001428 <TIMER_0_task1_cb>:
static volatile uint64_t sys_time = 0;
/**
 * Example of using TIMER_0.
 */
static void TIMER_0_task1_cb(const struct timer_task *const timer_task)
{
    1428:	b508      	push	{r3, lr}
	sys_time++;
    142a:	4906      	ldr	r1, [pc, #24]	; (1444 <TIMER_0_task1_cb+0x1c>)
    142c:	e9d1 2300 	ldrd	r2, r3, [r1]
    1430:	3201      	adds	r2, #1
    1432:	f143 0300 	adc.w	r3, r3, #0
    1436:	e9c1 2300 	strd	r2, r3, [r1]
	lv_tick_inc(1);
    143a:	2001      	movs	r0, #1
    143c:	4b02      	ldr	r3, [pc, #8]	; (1448 <TIMER_0_task1_cb+0x20>)
    143e:	4798      	blx	r3
    1440:	bd08      	pop	{r3, pc}
    1442:	bf00      	nop
    1444:	20008038 	.word	0x20008038
    1448:	00011039 	.word	0x00011039

0000144c <p_tcc_init>:
	//timer_add_task(&p_tcc_inst, &TIMER_0_task2);
	timer_start(&p_tcc_inst);
}

void p_tcc_init(void)
{
    144c:	b510      	push	{r4, lr}
	delay_init(SysTick);
    144e:	4811      	ldr	r0, [pc, #68]	; (1494 <p_tcc_init+0x48>)
    1450:	4b11      	ldr	r3, [pc, #68]	; (1498 <p_tcc_init+0x4c>)
    1452:	4798      	blx	r3
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    1454:	4a11      	ldr	r2, [pc, #68]	; (149c <p_tcc_init+0x50>)
    1456:	6953      	ldr	r3, [r2, #20]
    1458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    145c:	6153      	str	r3, [r2, #20]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    145e:	2240      	movs	r2, #64	; 0x40
    1460:	4b0f      	ldr	r3, [pc, #60]	; (14a0 <p_tcc_init+0x54>)
    1462:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	timer_init(&p_tcc_inst, TC0, _tc_get_timer());
    1466:	4b0f      	ldr	r3, [pc, #60]	; (14a4 <p_tcc_init+0x58>)
    1468:	4798      	blx	r3
    146a:	4c0f      	ldr	r4, [pc, #60]	; (14a8 <p_tcc_init+0x5c>)
    146c:	4602      	mov	r2, r0
    146e:	490f      	ldr	r1, [pc, #60]	; (14ac <p_tcc_init+0x60>)
    1470:	4620      	mov	r0, r4
    1472:	4b0f      	ldr	r3, [pc, #60]	; (14b0 <p_tcc_init+0x64>)
    1474:	4798      	blx	r3
	
	TIMER_0_task1.interval = 1;
    1476:	490f      	ldr	r1, [pc, #60]	; (14b4 <p_tcc_init+0x68>)
    1478:	2301      	movs	r3, #1
    147a:	610b      	str	r3, [r1, #16]
	TIMER_0_task1.cb       = TIMER_0_task1_cb;
    147c:	4a0e      	ldr	r2, [pc, #56]	; (14b8 <p_tcc_init+0x6c>)
    147e:	614a      	str	r2, [r1, #20]
	TIMER_0_task1.mode     = TIMER_TASK_REPEAT;
    1480:	760b      	strb	r3, [r1, #24]
	//TIMER_0_task2.interval = 200;
	//TIMER_0_task2.cb       = TIMER_0_task2_cb;
	//TIMER_0_task2.mode     = TIMER_TASK_REPEAT;
	
	timer_add_task(&p_tcc_inst, &TIMER_0_task1);
    1482:	3108      	adds	r1, #8
    1484:	4620      	mov	r0, r4
    1486:	4b0d      	ldr	r3, [pc, #52]	; (14bc <p_tcc_init+0x70>)
    1488:	4798      	blx	r3
	//timer_add_task(&p_tcc_inst, &TIMER_0_task2);
	timer_start(&p_tcc_inst);
    148a:	4620      	mov	r0, r4
    148c:	4b0c      	ldr	r3, [pc, #48]	; (14c0 <p_tcc_init+0x74>)
    148e:	4798      	blx	r3
    1490:	bd10      	pop	{r4, pc}
    1492:	bf00      	nop
    1494:	e000e010 	.word	0xe000e010
    1498:	0000158d 	.word	0x0000158d
    149c:	40000800 	.word	0x40000800
    14a0:	40001c00 	.word	0x40001c00
    14a4:	000021eb 	.word	0x000021eb
    14a8:	2000c600 	.word	0x2000c600
    14ac:	40003800 	.word	0x40003800
    14b0:	000016e9 	.word	0x000016e9
    14b4:	20008038 	.word	0x20008038
    14b8:	00001429 	.word	0x00001429
    14bc:	00001761 	.word	0x00001761
    14c0:	00001725 	.word	0x00001725

000014c4 <p_usart_init>:
static uint8_t example_USART_0[12] = "Hello World!";

static uint8_t debug_buffer[DEBUG_MAX_BUFFER_SIZE];
static uint8_t debug_rx_buff[DEBUG_USART_EX_BUFF_SIZE];
void p_usart_init(void)
{
    14c4:	b530      	push	{r4, r5, lr}
    14c6:	b083      	sub	sp, #12
    14c8:	4b1f      	ldr	r3, [pc, #124]	; (1548 <p_usart_init+0x84>)
    14ca:	2240      	movs	r2, #64	; 0x40
    14cc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    14d0:	2243      	movs	r2, #67	; 0x43
    14d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBBMASK_SERCOM2_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
    14d6:	4a1d      	ldr	r2, [pc, #116]	; (154c <p_usart_init+0x88>)
    14d8:	6993      	ldr	r3, [r2, #24]
    14da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    14de:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_SLOW, CONF_GCLK_SERCOM2_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
	
	usart_async_init(&p_usart_debug_inst, USART_DEBUG_SERCOM, debug_rx_buff, DEBUG_USART_EX_BUFF_SIZE, (void*)NULL);
    14e0:	4c1b      	ldr	r4, [pc, #108]	; (1550 <p_usart_init+0x8c>)
    14e2:	2300      	movs	r3, #0
    14e4:	9300      	str	r3, [sp, #0]
    14e6:	2310      	movs	r3, #16
    14e8:	4a1a      	ldr	r2, [pc, #104]	; (1554 <p_usart_init+0x90>)
    14ea:	491b      	ldr	r1, [pc, #108]	; (1558 <p_usart_init+0x94>)
    14ec:	4620      	mov	r0, r4
    14ee:	4d1b      	ldr	r5, [pc, #108]	; (155c <p_usart_init+0x98>)
    14f0:	47a8      	blx	r5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    14f2:	4b1b      	ldr	r3, [pc, #108]	; (1560 <p_usart_init+0x9c>)
    14f4:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
    14f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    14fc:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1500:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1504:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1508:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    150c:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1510:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1514:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
    1518:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    151c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1520:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1524:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1528:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    152c:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1530:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	
	// port init
	gpio_set_pin_function(USART_DEBUG_RX, USART_DEBUG_RX_MUX);
	gpio_set_pin_function(USART_DEBUG_TX, USART_DEBUG_TX_MUX);
	
	usart_async_enable(&p_usart_debug_inst);
    1534:	4620      	mov	r0, r4
    1536:	4b0b      	ldr	r3, [pc, #44]	; (1564 <p_usart_init+0xa0>)
    1538:	4798      	blx	r3
	
	io_write(&p_usart_debug_inst.io, example_USART_0, 12);
    153a:	220c      	movs	r2, #12
    153c:	490a      	ldr	r1, [pc, #40]	; (1568 <p_usart_init+0xa4>)
    153e:	4620      	mov	r0, r4
    1540:	4b0a      	ldr	r3, [pc, #40]	; (156c <p_usart_init+0xa8>)
    1542:	4798      	blx	r3
	
	
}
    1544:	b003      	add	sp, #12
    1546:	bd30      	pop	{r4, r5, pc}
    1548:	40001c00 	.word	0x40001c00
    154c:	40000800 	.word	0x40000800
    1550:	2000c61c 	.word	0x2000c61c
    1554:	20008054 	.word	0x20008054
    1558:	41012000 	.word	0x41012000
    155c:	000019b9 	.word	0x000019b9
    1560:	41008000 	.word	0x41008000
    1564:	00001a49 	.word	0x00001a49
    1568:	20000004 	.word	0x20000004
    156c:	000015e1 	.word	0x000015e1

00001570 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1570:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    1574:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    1576:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1578:	f3bf 8f5f 	dmb	sy
    157c:	4770      	bx	lr

0000157e <atomic_leave_critical>:
    157e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    1582:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1584:	f383 8810 	msr	PRIMASK, r3
    1588:	4770      	bx	lr
	...

0000158c <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    158c:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    158e:	4b02      	ldr	r3, [pc, #8]	; (1598 <delay_init+0xc>)
    1590:	6018      	str	r0, [r3, #0]
    1592:	4b02      	ldr	r3, [pc, #8]	; (159c <delay_init+0x10>)
    1594:	4798      	blx	r3
    1596:	bd08      	pop	{r3, pc}
    1598:	20008064 	.word	0x20008064
    159c:	00001c29 	.word	0x00001c29

000015a0 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    15a0:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    15a2:	4b04      	ldr	r3, [pc, #16]	; (15b4 <delay_us+0x14>)
    15a4:	681c      	ldr	r4, [r3, #0]
    15a6:	4b04      	ldr	r3, [pc, #16]	; (15b8 <delay_us+0x18>)
    15a8:	4798      	blx	r3
    15aa:	4601      	mov	r1, r0
    15ac:	4620      	mov	r0, r4
    15ae:	4b03      	ldr	r3, [pc, #12]	; (15bc <delay_us+0x1c>)
    15b0:	4798      	blx	r3
    15b2:	bd10      	pop	{r4, pc}
    15b4:	20008064 	.word	0x20008064
    15b8:	00001bf1 	.word	0x00001bf1
    15bc:	00001c31 	.word	0x00001c31

000015c0 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    15c0:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    15c2:	4b04      	ldr	r3, [pc, #16]	; (15d4 <delay_ms+0x14>)
    15c4:	681c      	ldr	r4, [r3, #0]
    15c6:	4b04      	ldr	r3, [pc, #16]	; (15d8 <delay_ms+0x18>)
    15c8:	4798      	blx	r3
    15ca:	4601      	mov	r1, r0
    15cc:	4620      	mov	r0, r4
    15ce:	4b03      	ldr	r3, [pc, #12]	; (15dc <delay_ms+0x1c>)
    15d0:	4798      	blx	r3
    15d2:	bd10      	pop	{r4, pc}
    15d4:	20008064 	.word	0x20008064
    15d8:	00001c09 	.word	0x00001c09
    15dc:	00001c31 	.word	0x00001c31

000015e0 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    15e0:	b570      	push	{r4, r5, r6, lr}
    15e2:	460d      	mov	r5, r1
    15e4:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    15e6:	4604      	mov	r4, r0
    15e8:	b160      	cbz	r0, 1604 <io_write+0x24>
    15ea:	1c08      	adds	r0, r1, #0
    15ec:	bf18      	it	ne
    15ee:	2001      	movne	r0, #1
    15f0:	2234      	movs	r2, #52	; 0x34
    15f2:	4905      	ldr	r1, [pc, #20]	; (1608 <io_write+0x28>)
    15f4:	4b05      	ldr	r3, [pc, #20]	; (160c <io_write+0x2c>)
    15f6:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    15f8:	6823      	ldr	r3, [r4, #0]
    15fa:	4632      	mov	r2, r6
    15fc:	4629      	mov	r1, r5
    15fe:	4620      	mov	r0, r4
    1600:	4798      	blx	r3
}
    1602:	bd70      	pop	{r4, r5, r6, pc}
    1604:	2000      	movs	r0, #0
    1606:	e7f3      	b.n	15f0 <io_write+0x10>
    1608:	00023ab4 	.word	0x00023ab4
    160c:	00001a75 	.word	0x00001a75

00001610 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    1610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1612:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    1614:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    1616:	b12f      	cbz	r7, 1624 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    1618:	688d      	ldr	r5, [r1, #8]
    161a:	463c      	mov	r4, r7
    161c:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    161e:	f1c2 0e01 	rsb	lr, r2, #1
    1622:	e00b      	b.n	163c <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    1624:	4b0e      	ldr	r3, [pc, #56]	; (1660 <timer_add_timer_task+0x50>)
    1626:	4798      	blx	r3
		return;
    1628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    162a:	4473      	add	r3, lr
    162c:	68a0      	ldr	r0, [r4, #8]
    162e:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    1630:	42ab      	cmp	r3, r5
    1632:	d20a      	bcs.n	164a <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    1634:	6823      	ldr	r3, [r4, #0]
    1636:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1638:	b153      	cbz	r3, 1650 <timer_add_timer_task+0x40>
    163a:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    163c:	6863      	ldr	r3, [r4, #4]
    163e:	4293      	cmp	r3, r2
    1640:	d8f3      	bhi.n	162a <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    1642:	68a0      	ldr	r0, [r4, #8]
    1644:	4403      	add	r3, r0
    1646:	1a9b      	subs	r3, r3, r2
    1648:	e7f2      	b.n	1630 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    164a:	42a7      	cmp	r7, r4
    164c:	d004      	beq.n	1658 <timer_add_timer_task+0x48>
    164e:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    1650:	4620      	mov	r0, r4
    1652:	4b04      	ldr	r3, [pc, #16]	; (1664 <timer_add_timer_task+0x54>)
    1654:	4798      	blx	r3
    1656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    1658:	4660      	mov	r0, ip
    165a:	4b01      	ldr	r3, [pc, #4]	; (1660 <timer_add_timer_task+0x50>)
    165c:	4798      	blx	r3
    165e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1660:	00001a9d 	.word	0x00001a9d
    1664:	00001ac9 	.word	0x00001ac9

00001668 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    166c:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    166e:	6907      	ldr	r7, [r0, #16]
    1670:	3701      	adds	r7, #1
    1672:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1674:	7e03      	ldrb	r3, [r0, #24]
    1676:	f013 0f01 	tst.w	r3, #1
    167a:	d113      	bne.n	16a4 <timer_process_counted+0x3c>
    167c:	7e03      	ldrb	r3, [r0, #24]
    167e:	f013 0f02 	tst.w	r3, #2
    1682:	d10f      	bne.n	16a4 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    1684:	b354      	cbz	r4, 16dc <timer_process_counted+0x74>
    1686:	6863      	ldr	r3, [r4, #4]
    1688:	1afb      	subs	r3, r7, r3
    168a:	68a2      	ldr	r2, [r4, #8]
    168c:	4293      	cmp	r3, r2
    168e:	d307      	bcc.n	16a0 <timer_process_counted+0x38>
    1690:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    1692:	f100 0814 	add.w	r8, r0, #20
    1696:	f8df 9048 	ldr.w	r9, [pc, #72]	; 16e0 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    169a:	f8df a048 	ldr.w	sl, [pc, #72]	; 16e4 <timer_process_counted+0x7c>
    169e:	e012      	b.n	16c6 <timer_process_counted+0x5e>
    16a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    16a4:	7e03      	ldrb	r3, [r0, #24]
    16a6:	f043 0302 	orr.w	r3, r3, #2
    16aa:	7603      	strb	r3, [r0, #24]
		return;
    16ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    16b0:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    16b2:	68e3      	ldr	r3, [r4, #12]
    16b4:	4620      	mov	r0, r4
    16b6:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    16b8:	b185      	cbz	r5, 16dc <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    16ba:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    16bc:	686b      	ldr	r3, [r5, #4]
    16be:	1afb      	subs	r3, r7, r3
    16c0:	68aa      	ldr	r2, [r5, #8]
    16c2:	4293      	cmp	r3, r2
    16c4:	d30a      	bcc.n	16dc <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    16c6:	4640      	mov	r0, r8
    16c8:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    16ca:	7c23      	ldrb	r3, [r4, #16]
    16cc:	2b01      	cmp	r3, #1
    16ce:	d1ef      	bne.n	16b0 <timer_process_counted+0x48>
			tmp->time_label = time;
    16d0:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    16d2:	463a      	mov	r2, r7
    16d4:	4621      	mov	r1, r4
    16d6:	4640      	mov	r0, r8
    16d8:	47d0      	blx	sl
    16da:	e7e9      	b.n	16b0 <timer_process_counted+0x48>
    16dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    16e0:	00001ad1 	.word	0x00001ad1
    16e4:	00001611 	.word	0x00001611

000016e8 <timer_init>:
{
    16e8:	b538      	push	{r3, r4, r5, lr}
    16ea:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    16ec:	4604      	mov	r4, r0
    16ee:	b178      	cbz	r0, 1710 <timer_init+0x28>
    16f0:	1c08      	adds	r0, r1, #0
    16f2:	bf18      	it	ne
    16f4:	2001      	movne	r0, #1
    16f6:	223b      	movs	r2, #59	; 0x3b
    16f8:	4906      	ldr	r1, [pc, #24]	; (1714 <timer_init+0x2c>)
    16fa:	4b07      	ldr	r3, [pc, #28]	; (1718 <timer_init+0x30>)
    16fc:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    16fe:	4629      	mov	r1, r5
    1700:	4620      	mov	r0, r4
    1702:	4b06      	ldr	r3, [pc, #24]	; (171c <timer_init+0x34>)
    1704:	4798      	blx	r3
	descr->time                           = 0;
    1706:	2000      	movs	r0, #0
    1708:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    170a:	4b05      	ldr	r3, [pc, #20]	; (1720 <timer_init+0x38>)
    170c:	6023      	str	r3, [r4, #0]
}
    170e:	bd38      	pop	{r3, r4, r5, pc}
    1710:	2000      	movs	r0, #0
    1712:	e7f0      	b.n	16f6 <timer_init+0xe>
    1714:	00023ac8 	.word	0x00023ac8
    1718:	00001a75 	.word	0x00001a75
    171c:	0000201d 	.word	0x0000201d
    1720:	00001669 	.word	0x00001669

00001724 <timer_start>:
{
    1724:	b510      	push	{r4, lr}
	ASSERT(descr);
    1726:	4604      	mov	r4, r0
    1728:	2253      	movs	r2, #83	; 0x53
    172a:	4909      	ldr	r1, [pc, #36]	; (1750 <timer_start+0x2c>)
    172c:	3000      	adds	r0, #0
    172e:	bf18      	it	ne
    1730:	2001      	movne	r0, #1
    1732:	4b08      	ldr	r3, [pc, #32]	; (1754 <timer_start+0x30>)
    1734:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    1736:	4620      	mov	r0, r4
    1738:	4b07      	ldr	r3, [pc, #28]	; (1758 <timer_start+0x34>)
    173a:	4798      	blx	r3
    173c:	b920      	cbnz	r0, 1748 <timer_start+0x24>
	_timer_start(&descr->device);
    173e:	4620      	mov	r0, r4
    1740:	4b06      	ldr	r3, [pc, #24]	; (175c <timer_start+0x38>)
    1742:	4798      	blx	r3
	return ERR_NONE;
    1744:	2000      	movs	r0, #0
    1746:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    1748:	f06f 0010 	mvn.w	r0, #16
}
    174c:	bd10      	pop	{r4, pc}
    174e:	bf00      	nop
    1750:	00023ac8 	.word	0x00023ac8
    1754:	00001a75 	.word	0x00001a75
    1758:	000021d9 	.word	0x000021d9
    175c:	000021c5 	.word	0x000021c5

00001760 <timer_add_task>:
{
    1760:	b570      	push	{r4, r5, r6, lr}
    1762:	b082      	sub	sp, #8
    1764:	460d      	mov	r5, r1
	ASSERT(descr && task);
    1766:	4604      	mov	r4, r0
    1768:	b318      	cbz	r0, 17b2 <timer_add_task+0x52>
    176a:	1c08      	adds	r0, r1, #0
    176c:	bf18      	it	ne
    176e:	2001      	movne	r0, #1
    1770:	227a      	movs	r2, #122	; 0x7a
    1772:	491e      	ldr	r1, [pc, #120]	; (17ec <timer_add_task+0x8c>)
    1774:	4b1e      	ldr	r3, [pc, #120]	; (17f0 <timer_add_task+0x90>)
    1776:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    1778:	7e23      	ldrb	r3, [r4, #24]
    177a:	f043 0301 	orr.w	r3, r3, #1
    177e:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
    1780:	f104 0614 	add.w	r6, r4, #20
    1784:	4629      	mov	r1, r5
    1786:	4630      	mov	r0, r6
    1788:	4b1a      	ldr	r3, [pc, #104]	; (17f4 <timer_add_task+0x94>)
    178a:	4798      	blx	r3
    178c:	b998      	cbnz	r0, 17b6 <timer_add_task+0x56>
	task->time_label = descr->time;
    178e:	6923      	ldr	r3, [r4, #16]
    1790:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    1792:	6922      	ldr	r2, [r4, #16]
    1794:	4629      	mov	r1, r5
    1796:	4630      	mov	r0, r6
    1798:	4b17      	ldr	r3, [pc, #92]	; (17f8 <timer_add_task+0x98>)
    179a:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    179c:	7e23      	ldrb	r3, [r4, #24]
    179e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    17a2:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    17a4:	7e23      	ldrb	r3, [r4, #24]
    17a6:	f013 0f02 	tst.w	r3, #2
    17aa:	d110      	bne.n	17ce <timer_add_task+0x6e>
	return ERR_NONE;
    17ac:	2000      	movs	r0, #0
}
    17ae:	b002      	add	sp, #8
    17b0:	bd70      	pop	{r4, r5, r6, pc}
    17b2:	2000      	movs	r0, #0
    17b4:	e7dc      	b.n	1770 <timer_add_task+0x10>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    17b6:	7e23      	ldrb	r3, [r4, #24]
    17b8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    17bc:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    17be:	227f      	movs	r2, #127	; 0x7f
    17c0:	490a      	ldr	r1, [pc, #40]	; (17ec <timer_add_task+0x8c>)
    17c2:	2000      	movs	r0, #0
    17c4:	4b0a      	ldr	r3, [pc, #40]	; (17f0 <timer_add_task+0x90>)
    17c6:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    17c8:	f06f 0011 	mvn.w	r0, #17
    17cc:	e7ef      	b.n	17ae <timer_add_task+0x4e>
		CRITICAL_SECTION_ENTER()
    17ce:	a801      	add	r0, sp, #4
    17d0:	4b0a      	ldr	r3, [pc, #40]	; (17fc <timer_add_task+0x9c>)
    17d2:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    17d4:	7e23      	ldrb	r3, [r4, #24]
    17d6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    17da:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    17dc:	4620      	mov	r0, r4
    17de:	4b08      	ldr	r3, [pc, #32]	; (1800 <timer_add_task+0xa0>)
    17e0:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    17e2:	a801      	add	r0, sp, #4
    17e4:	4b07      	ldr	r3, [pc, #28]	; (1804 <timer_add_task+0xa4>)
    17e6:	4798      	blx	r3
	return ERR_NONE;
    17e8:	2000      	movs	r0, #0
    17ea:	e7e0      	b.n	17ae <timer_add_task+0x4e>
    17ec:	00023ac8 	.word	0x00023ac8
    17f0:	00001a75 	.word	0x00001a75
    17f4:	00001a7b 	.word	0x00001a7b
    17f8:	00001611 	.word	0x00001611
    17fc:	00001571 	.word	0x00001571
    1800:	000021f1 	.word	0x000021f1
    1804:	0000157f 	.word	0x0000157f

00001808 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    1808:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    180a:	2300      	movs	r3, #0
    180c:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    180e:	69c3      	ldr	r3, [r0, #28]
    1810:	b11b      	cbz	r3, 181a <usart_transmission_complete+0x12>
    1812:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
    1816:	4610      	mov	r0, r2
    1818:	4798      	blx	r3
    181a:	bd08      	pop	{r3, pc}

0000181c <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    181c:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    181e:	2300      	movs	r3, #0
    1820:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    1822:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1824:	b11b      	cbz	r3, 182e <usart_error+0x12>
    1826:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
    182a:	4610      	mov	r0, r2
    182c:	4798      	blx	r3
    182e:	bd08      	pop	{r3, pc}

00001830 <usart_fill_rx_buffer>:
{
    1830:	b538      	push	{r3, r4, r5, lr}
    1832:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1834:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    1838:	302c      	adds	r0, #44	; 0x2c
    183a:	4b03      	ldr	r3, [pc, #12]	; (1848 <usart_fill_rx_buffer+0x18>)
    183c:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    183e:	6a23      	ldr	r3, [r4, #32]
    1840:	b10b      	cbz	r3, 1846 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    1842:	4628      	mov	r0, r5
    1844:	4798      	blx	r3
    1846:	bd38      	pop	{r3, r4, r5, pc}
    1848:	00001b71 	.word	0x00001b71

0000184c <usart_async_write>:
{
    184c:	b570      	push	{r4, r5, r6, lr}
    184e:	460e      	mov	r6, r1
    1850:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
    1852:	4604      	mov	r4, r0
    1854:	b1e0      	cbz	r0, 1890 <usart_async_write+0x44>
    1856:	b1e9      	cbz	r1, 1894 <usart_async_write+0x48>
    1858:	1c10      	adds	r0, r2, #0
    185a:	bf18      	it	ne
    185c:	2001      	movne	r0, #1
    185e:	f240 123b 	movw	r2, #315	; 0x13b
    1862:	490f      	ldr	r1, [pc, #60]	; (18a0 <usart_async_write+0x54>)
    1864:	4b0f      	ldr	r3, [pc, #60]	; (18a4 <usart_async_write+0x58>)
    1866:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    1868:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    186c:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    1870:	429a      	cmp	r2, r3
    1872:	d111      	bne.n	1898 <usart_async_write+0x4c>
	descr->tx_buffer        = (uint8_t *)buf;
    1874:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    1876:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
    187a:	2300      	movs	r3, #0
    187c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    1880:	2301      	movs	r3, #1
    1882:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    1884:	f104 0008 	add.w	r0, r4, #8
    1888:	4b07      	ldr	r3, [pc, #28]	; (18a8 <usart_async_write+0x5c>)
    188a:	4798      	blx	r3
	return (int32_t)length;
    188c:	4628      	mov	r0, r5
    188e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    1890:	2000      	movs	r0, #0
    1892:	e7e4      	b.n	185e <usart_async_write+0x12>
    1894:	2000      	movs	r0, #0
    1896:	e7e2      	b.n	185e <usart_async_write+0x12>
		return ERR_NO_RESOURCE;
    1898:	f06f 001b 	mvn.w	r0, #27
}
    189c:	bd70      	pop	{r4, r5, r6, pc}
    189e:	bf00      	nop
    18a0:	00023ae0 	.word	0x00023ae0
    18a4:	00001a75 	.word	0x00001a75
    18a8:	00001f5b 	.word	0x00001f5b

000018ac <usart_process_byte_sent>:
{
    18ac:	b510      	push	{r4, lr}
    18ae:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    18b0:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    18b2:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    18b6:	429a      	cmp	r2, r3
    18b8:	d009      	beq.n	18ce <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    18ba:	6c02      	ldr	r2, [r0, #64]	; 0x40
    18bc:	1c59      	adds	r1, r3, #1
    18be:	8781      	strh	r1, [r0, #60]	; 0x3c
    18c0:	5cd1      	ldrb	r1, [r2, r3]
    18c2:	4b04      	ldr	r3, [pc, #16]	; (18d4 <usart_process_byte_sent+0x28>)
    18c4:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    18c6:	4620      	mov	r0, r4
    18c8:	4b03      	ldr	r3, [pc, #12]	; (18d8 <usart_process_byte_sent+0x2c>)
    18ca:	4798      	blx	r3
    18cc:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    18ce:	4b03      	ldr	r3, [pc, #12]	; (18dc <usart_process_byte_sent+0x30>)
    18d0:	4798      	blx	r3
    18d2:	bd10      	pop	{r4, pc}
    18d4:	00001f55 	.word	0x00001f55
    18d8:	00001f5b 	.word	0x00001f5b
    18dc:	00001f63 	.word	0x00001f63

000018e0 <usart_async_read>:
{
    18e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    18e4:	b082      	sub	sp, #8
    18e6:	460f      	mov	r7, r1
    18e8:	4690      	mov	r8, r2
	ASSERT(descr && buf && length);
    18ea:	4606      	mov	r6, r0
    18ec:	b1a0      	cbz	r0, 1918 <usart_async_read+0x38>
    18ee:	b199      	cbz	r1, 1918 <usart_async_read+0x38>
    18f0:	2a00      	cmp	r2, #0
    18f2:	d12d      	bne.n	1950 <usart_async_read+0x70>
    18f4:	f44f 72ac 	mov.w	r2, #344	; 0x158
    18f8:	4929      	ldr	r1, [pc, #164]	; (19a0 <usart_async_read+0xc0>)
    18fa:	2000      	movs	r0, #0
    18fc:	4b29      	ldr	r3, [pc, #164]	; (19a4 <usart_async_read+0xc4>)
    18fe:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1900:	a801      	add	r0, sp, #4
    1902:	4b29      	ldr	r3, [pc, #164]	; (19a8 <usart_async_read+0xc8>)
    1904:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1906:	f106 0034 	add.w	r0, r6, #52	; 0x34
    190a:	4b28      	ldr	r3, [pc, #160]	; (19ac <usart_async_read+0xcc>)
    190c:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    190e:	a801      	add	r0, sp, #4
    1910:	4b27      	ldr	r3, [pc, #156]	; (19b0 <usart_async_read+0xd0>)
    1912:	4798      	blx	r3
	uint16_t                       was_read = 0;
    1914:	2500      	movs	r5, #0
	return (int32_t)was_read;
    1916:	e03e      	b.n	1996 <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    1918:	f44f 72ac 	mov.w	r2, #344	; 0x158
    191c:	4920      	ldr	r1, [pc, #128]	; (19a0 <usart_async_read+0xc0>)
    191e:	2000      	movs	r0, #0
    1920:	4b20      	ldr	r3, [pc, #128]	; (19a4 <usart_async_read+0xc4>)
    1922:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1924:	a801      	add	r0, sp, #4
    1926:	4b20      	ldr	r3, [pc, #128]	; (19a8 <usart_async_read+0xc8>)
    1928:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    192a:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    192e:	4650      	mov	r0, sl
    1930:	4b1e      	ldr	r3, [pc, #120]	; (19ac <usart_async_read+0xcc>)
    1932:	4798      	blx	r3
    1934:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    1936:	a801      	add	r0, sp, #4
    1938:	4b1d      	ldr	r3, [pc, #116]	; (19b0 <usart_async_read+0xd0>)
    193a:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    193c:	f1b9 0f00 	cmp.w	r9, #0
    1940:	d004      	beq.n	194c <usart_async_read+0x6c>
    1942:	f1b8 0f00 	cmp.w	r8, #0
    1946:	d119      	bne.n	197c <usart_async_read+0x9c>
	uint16_t                       was_read = 0;
    1948:	2500      	movs	r5, #0
    194a:	e024      	b.n	1996 <usart_async_read+0xb6>
    194c:	2500      	movs	r5, #0
    194e:	e022      	b.n	1996 <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    1950:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1954:	4912      	ldr	r1, [pc, #72]	; (19a0 <usart_async_read+0xc0>)
    1956:	2001      	movs	r0, #1
    1958:	4b12      	ldr	r3, [pc, #72]	; (19a4 <usart_async_read+0xc4>)
    195a:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    195c:	a801      	add	r0, sp, #4
    195e:	4b12      	ldr	r3, [pc, #72]	; (19a8 <usart_async_read+0xc8>)
    1960:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1962:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    1966:	4650      	mov	r0, sl
    1968:	4b10      	ldr	r3, [pc, #64]	; (19ac <usart_async_read+0xcc>)
    196a:	4798      	blx	r3
    196c:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    196e:	a801      	add	r0, sp, #4
    1970:	4b0f      	ldr	r3, [pc, #60]	; (19b0 <usart_async_read+0xd0>)
    1972:	4798      	blx	r3
	uint16_t                       was_read = 0;
    1974:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
    1976:	f1b9 0f00 	cmp.w	r9, #0
    197a:	d00c      	beq.n	1996 <usart_async_read+0xb6>
{
    197c:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    197e:	4e0d      	ldr	r6, [pc, #52]	; (19b4 <usart_async_read+0xd4>)
    1980:	1c60      	adds	r0, r4, #1
    1982:	b285      	uxth	r5, r0
    1984:	1939      	adds	r1, r7, r4
    1986:	4650      	mov	r0, sl
    1988:	47b0      	blx	r6
    198a:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
    198c:	454c      	cmp	r4, r9
    198e:	d202      	bcs.n	1996 <usart_async_read+0xb6>
    1990:	b2a3      	uxth	r3, r4
    1992:	4598      	cmp	r8, r3
    1994:	d8f4      	bhi.n	1980 <usart_async_read+0xa0>
}
    1996:	4628      	mov	r0, r5
    1998:	b002      	add	sp, #8
    199a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    199e:	bf00      	nop
    19a0:	00023ae0 	.word	0x00023ae0
    19a4:	00001a75 	.word	0x00001a75
    19a8:	00001571 	.word	0x00001571
    19ac:	00001bb1 	.word	0x00001bb1
    19b0:	0000157f 	.word	0x0000157f
    19b4:	00001b2d 	.word	0x00001b2d

000019b8 <usart_async_init>:
{
    19b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    19ba:	460d      	mov	r5, r1
    19bc:	4616      	mov	r6, r2
    19be:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    19c0:	4604      	mov	r4, r0
    19c2:	b320      	cbz	r0, 1a0e <usart_async_init+0x56>
    19c4:	b329      	cbz	r1, 1a12 <usart_async_init+0x5a>
    19c6:	b332      	cbz	r2, 1a16 <usart_async_init+0x5e>
    19c8:	1c18      	adds	r0, r3, #0
    19ca:	bf18      	it	ne
    19cc:	2001      	movne	r0, #1
    19ce:	223a      	movs	r2, #58	; 0x3a
    19d0:	4913      	ldr	r1, [pc, #76]	; (1a20 <usart_async_init+0x68>)
    19d2:	4b14      	ldr	r3, [pc, #80]	; (1a24 <usart_async_init+0x6c>)
    19d4:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    19d6:	463a      	mov	r2, r7
    19d8:	4631      	mov	r1, r6
    19da:	f104 0034 	add.w	r0, r4, #52	; 0x34
    19de:	4b12      	ldr	r3, [pc, #72]	; (1a28 <usart_async_init+0x70>)
    19e0:	4798      	blx	r3
    19e2:	b9d0      	cbnz	r0, 1a1a <usart_async_init+0x62>
	init_status = _usart_async_init(&descr->device, hw);
    19e4:	4629      	mov	r1, r5
    19e6:	f104 0008 	add.w	r0, r4, #8
    19ea:	4b10      	ldr	r3, [pc, #64]	; (1a2c <usart_async_init+0x74>)
    19ec:	4798      	blx	r3
	if (init_status) {
    19ee:	4603      	mov	r3, r0
    19f0:	b958      	cbnz	r0, 1a0a <usart_async_init+0x52>
	descr->io.read  = usart_async_read;
    19f2:	4a0f      	ldr	r2, [pc, #60]	; (1a30 <usart_async_init+0x78>)
    19f4:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    19f6:	4a0f      	ldr	r2, [pc, #60]	; (1a34 <usart_async_init+0x7c>)
    19f8:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    19fa:	4a0f      	ldr	r2, [pc, #60]	; (1a38 <usart_async_init+0x80>)
    19fc:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    19fe:	4a0f      	ldr	r2, [pc, #60]	; (1a3c <usart_async_init+0x84>)
    1a00:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    1a02:	4a0f      	ldr	r2, [pc, #60]	; (1a40 <usart_async_init+0x88>)
    1a04:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    1a06:	4a0f      	ldr	r2, [pc, #60]	; (1a44 <usart_async_init+0x8c>)
    1a08:	6162      	str	r2, [r4, #20]
}
    1a0a:	4618      	mov	r0, r3
    1a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1a0e:	2000      	movs	r0, #0
    1a10:	e7dd      	b.n	19ce <usart_async_init+0x16>
    1a12:	2000      	movs	r0, #0
    1a14:	e7db      	b.n	19ce <usart_async_init+0x16>
    1a16:	2000      	movs	r0, #0
    1a18:	e7d9      	b.n	19ce <usart_async_init+0x16>
		return ERR_INVALID_ARG;
    1a1a:	f06f 030c 	mvn.w	r3, #12
    1a1e:	e7f4      	b.n	1a0a <usart_async_init+0x52>
    1a20:	00023ae0 	.word	0x00023ae0
    1a24:	00001a75 	.word	0x00001a75
    1a28:	00001add 	.word	0x00001add
    1a2c:	00001ebd 	.word	0x00001ebd
    1a30:	000018e1 	.word	0x000018e1
    1a34:	0000184d 	.word	0x0000184d
    1a38:	000018ad 	.word	0x000018ad
    1a3c:	00001831 	.word	0x00001831
    1a40:	00001809 	.word	0x00001809
    1a44:	0000181d 	.word	0x0000181d

00001a48 <usart_async_enable>:
{
    1a48:	b510      	push	{r4, lr}
	ASSERT(descr);
    1a4a:	4604      	mov	r4, r0
    1a4c:	2261      	movs	r2, #97	; 0x61
    1a4e:	4906      	ldr	r1, [pc, #24]	; (1a68 <usart_async_enable+0x20>)
    1a50:	3000      	adds	r0, #0
    1a52:	bf18      	it	ne
    1a54:	2001      	movne	r0, #1
    1a56:	4b05      	ldr	r3, [pc, #20]	; (1a6c <usart_async_enable+0x24>)
    1a58:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    1a5a:	f104 0008 	add.w	r0, r4, #8
    1a5e:	4b04      	ldr	r3, [pc, #16]	; (1a70 <usart_async_enable+0x28>)
    1a60:	4798      	blx	r3
}
    1a62:	2000      	movs	r0, #0
    1a64:	bd10      	pop	{r4, pc}
    1a66:	bf00      	nop
    1a68:	00023ae0 	.word	0x00023ae0
    1a6c:	00001a75 	.word	0x00001a75
    1a70:	00001f41 	.word	0x00001f41

00001a74 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1a74:	b900      	cbnz	r0, 1a78 <assert+0x4>
		__asm("BKPT #0");
    1a76:	be00      	bkpt	0x0000
    1a78:	4770      	bx	lr

00001a7a <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1a7a:	6803      	ldr	r3, [r0, #0]
    1a7c:	b14b      	cbz	r3, 1a92 <is_list_element+0x18>
		if (it == element) {
    1a7e:	428b      	cmp	r3, r1
    1a80:	d009      	beq.n	1a96 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    1a82:	681b      	ldr	r3, [r3, #0]
    1a84:	b11b      	cbz	r3, 1a8e <is_list_element+0x14>
		if (it == element) {
    1a86:	4299      	cmp	r1, r3
    1a88:	d1fb      	bne.n	1a82 <is_list_element+0x8>
			return true;
    1a8a:	2001      	movs	r0, #1
		}
	}

	return false;
}
    1a8c:	4770      	bx	lr
	return false;
    1a8e:	2000      	movs	r0, #0
    1a90:	4770      	bx	lr
    1a92:	2000      	movs	r0, #0
    1a94:	4770      	bx	lr
			return true;
    1a96:	2001      	movs	r0, #1
    1a98:	4770      	bx	lr
	...

00001a9c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1a9c:	b538      	push	{r3, r4, r5, lr}
    1a9e:	4604      	mov	r4, r0
    1aa0:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    1aa2:	4b06      	ldr	r3, [pc, #24]	; (1abc <list_insert_as_head+0x20>)
    1aa4:	4798      	blx	r3
    1aa6:	f080 0001 	eor.w	r0, r0, #1
    1aaa:	2239      	movs	r2, #57	; 0x39
    1aac:	4904      	ldr	r1, [pc, #16]	; (1ac0 <list_insert_as_head+0x24>)
    1aae:	b2c0      	uxtb	r0, r0
    1ab0:	4b04      	ldr	r3, [pc, #16]	; (1ac4 <list_insert_as_head+0x28>)
    1ab2:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1ab4:	6823      	ldr	r3, [r4, #0]
    1ab6:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    1ab8:	6025      	str	r5, [r4, #0]
    1aba:	bd38      	pop	{r3, r4, r5, pc}
    1abc:	00001a7b 	.word	0x00001a7b
    1ac0:	00023b00 	.word	0x00023b00
    1ac4:	00001a75 	.word	0x00001a75

00001ac8 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1ac8:	6803      	ldr	r3, [r0, #0]
    1aca:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    1acc:	6001      	str	r1, [r0, #0]
    1ace:	4770      	bx	lr

00001ad0 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    1ad0:	6803      	ldr	r3, [r0, #0]
    1ad2:	b10b      	cbz	r3, 1ad8 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    1ad4:	681a      	ldr	r2, [r3, #0]
    1ad6:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    1ad8:	4618      	mov	r0, r3
    1ada:	4770      	bx	lr

00001adc <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    1adc:	b570      	push	{r4, r5, r6, lr}
    1ade:	460e      	mov	r6, r1
    1ae0:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    1ae2:	4604      	mov	r4, r0
    1ae4:	b178      	cbz	r0, 1b06 <ringbuffer_init+0x2a>
    1ae6:	b181      	cbz	r1, 1b0a <ringbuffer_init+0x2e>
    1ae8:	b1a2      	cbz	r2, 1b14 <ringbuffer_init+0x38>
    1aea:	2001      	movs	r0, #1
    1aec:	2228      	movs	r2, #40	; 0x28
    1aee:	490d      	ldr	r1, [pc, #52]	; (1b24 <ringbuffer_init+0x48>)
    1af0:	4b0d      	ldr	r3, [pc, #52]	; (1b28 <ringbuffer_init+0x4c>)
    1af2:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    1af4:	1e6b      	subs	r3, r5, #1
    1af6:	421d      	tst	r5, r3
    1af8:	d109      	bne.n	1b0e <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    1afa:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    1afc:	2000      	movs	r0, #0
    1afe:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    1b00:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    1b02:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    1b04:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    1b06:	2000      	movs	r0, #0
    1b08:	e7f0      	b.n	1aec <ringbuffer_init+0x10>
    1b0a:	2000      	movs	r0, #0
    1b0c:	e7ee      	b.n	1aec <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    1b0e:	f06f 000c 	mvn.w	r0, #12
    1b12:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    1b14:	2228      	movs	r2, #40	; 0x28
    1b16:	4903      	ldr	r1, [pc, #12]	; (1b24 <ringbuffer_init+0x48>)
    1b18:	2000      	movs	r0, #0
    1b1a:	4b03      	ldr	r3, [pc, #12]	; (1b28 <ringbuffer_init+0x4c>)
    1b1c:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    1b1e:	1e6b      	subs	r3, r5, #1
    1b20:	e7eb      	b.n	1afa <ringbuffer_init+0x1e>
    1b22:	bf00      	nop
    1b24:	00023b20 	.word	0x00023b20
    1b28:	00001a75 	.word	0x00001a75

00001b2c <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    1b2c:	b538      	push	{r3, r4, r5, lr}
    1b2e:	460d      	mov	r5, r1
	ASSERT(rb && data);
    1b30:	4604      	mov	r4, r0
    1b32:	b1a0      	cbz	r0, 1b5e <ringbuffer_get+0x32>
    1b34:	1c08      	adds	r0, r1, #0
    1b36:	bf18      	it	ne
    1b38:	2001      	movne	r0, #1
    1b3a:	2240      	movs	r2, #64	; 0x40
    1b3c:	490a      	ldr	r1, [pc, #40]	; (1b68 <ringbuffer_get+0x3c>)
    1b3e:	4b0b      	ldr	r3, [pc, #44]	; (1b6c <ringbuffer_get+0x40>)
    1b40:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    1b42:	68a3      	ldr	r3, [r4, #8]
    1b44:	68e2      	ldr	r2, [r4, #12]
    1b46:	429a      	cmp	r2, r3
    1b48:	d00b      	beq.n	1b62 <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    1b4a:	6862      	ldr	r2, [r4, #4]
    1b4c:	4013      	ands	r3, r2
    1b4e:	6822      	ldr	r2, [r4, #0]
    1b50:	5cd3      	ldrb	r3, [r2, r3]
    1b52:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    1b54:	68a3      	ldr	r3, [r4, #8]
    1b56:	3301      	adds	r3, #1
    1b58:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    1b5a:	2000      	movs	r0, #0
    1b5c:	bd38      	pop	{r3, r4, r5, pc}
    1b5e:	2000      	movs	r0, #0
    1b60:	e7eb      	b.n	1b3a <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    1b62:	f06f 0009 	mvn.w	r0, #9
}
    1b66:	bd38      	pop	{r3, r4, r5, pc}
    1b68:	00023b20 	.word	0x00023b20
    1b6c:	00001a75 	.word	0x00001a75

00001b70 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    1b70:	b538      	push	{r3, r4, r5, lr}
    1b72:	460d      	mov	r5, r1
	ASSERT(rb);
    1b74:	4604      	mov	r4, r0
    1b76:	2251      	movs	r2, #81	; 0x51
    1b78:	490b      	ldr	r1, [pc, #44]	; (1ba8 <ringbuffer_put+0x38>)
    1b7a:	3000      	adds	r0, #0
    1b7c:	bf18      	it	ne
    1b7e:	2001      	movne	r0, #1
    1b80:	4b0a      	ldr	r3, [pc, #40]	; (1bac <ringbuffer_put+0x3c>)
    1b82:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    1b84:	68e3      	ldr	r3, [r4, #12]
    1b86:	6862      	ldr	r2, [r4, #4]
    1b88:	4013      	ands	r3, r2
    1b8a:	6822      	ldr	r2, [r4, #0]
    1b8c:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    1b8e:	68e3      	ldr	r3, [r4, #12]
    1b90:	6861      	ldr	r1, [r4, #4]
    1b92:	68a2      	ldr	r2, [r4, #8]
    1b94:	1a9a      	subs	r2, r3, r2
    1b96:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    1b98:	bf84      	itt	hi
    1b9a:	1a59      	subhi	r1, r3, r1
    1b9c:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    1b9e:	3301      	adds	r3, #1
    1ba0:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    1ba2:	2000      	movs	r0, #0
    1ba4:	bd38      	pop	{r3, r4, r5, pc}
    1ba6:	bf00      	nop
    1ba8:	00023b20 	.word	0x00023b20
    1bac:	00001a75 	.word	0x00001a75

00001bb0 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    1bb0:	b510      	push	{r4, lr}
	ASSERT(rb);
    1bb2:	4604      	mov	r4, r0
    1bb4:	2267      	movs	r2, #103	; 0x67
    1bb6:	4905      	ldr	r1, [pc, #20]	; (1bcc <ringbuffer_num+0x1c>)
    1bb8:	3000      	adds	r0, #0
    1bba:	bf18      	it	ne
    1bbc:	2001      	movne	r0, #1
    1bbe:	4b04      	ldr	r3, [pc, #16]	; (1bd0 <ringbuffer_num+0x20>)
    1bc0:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    1bc2:	68e0      	ldr	r0, [r4, #12]
    1bc4:	68a3      	ldr	r3, [r4, #8]
}
    1bc6:	1ac0      	subs	r0, r0, r3
    1bc8:	bd10      	pop	{r4, pc}
    1bca:	bf00      	nop
    1bcc:	00023b20 	.word	0x00023b20
    1bd0:	00001a75 	.word	0x00001a75

00001bd4 <_irq_set>:
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1bd4:	0943      	lsrs	r3, r0, #5
    1bd6:	f000 001f 	and.w	r0, r0, #31
    1bda:	2201      	movs	r2, #1
    1bdc:	fa02 f000 	lsl.w	r0, r2, r0
    1be0:	3340      	adds	r3, #64	; 0x40
    1be2:	4a02      	ldr	r2, [pc, #8]	; (1bec <_irq_set+0x18>)
    1be4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1be8:	4770      	bx	lr
    1bea:	bf00      	nop
    1bec:	e000e100 	.word	0xe000e100

00001bf0 <_get_cycles_for_us>:
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    1bf0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1bf4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    1bf8:	3002      	adds	r0, #2
    1bfa:	4b02      	ldr	r3, [pc, #8]	; (1c04 <_get_cycles_for_us+0x14>)
    1bfc:	fba3 3000 	umull	r3, r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1c00:	0840      	lsrs	r0, r0, #1
    1c02:	4770      	bx	lr
    1c04:	aaaaaaab 	.word	0xaaaaaaab

00001c08 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    1c08:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1c0c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    1c10:	3002      	adds	r0, #2
    1c12:	4b04      	ldr	r3, [pc, #16]	; (1c24 <_get_cycles_for_ms+0x1c>)
    1c14:	fba3 3000 	umull	r3, r0, r3, r0
    1c18:	0840      	lsrs	r0, r0, #1
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    1c1e:	fb03 f000 	mul.w	r0, r3, r0
    1c22:	4770      	bx	lr
    1c24:	aaaaaaab 	.word	0xaaaaaaab

00001c28 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    1c28:	4770      	bx	lr
    1c2a:	0000      	movs	r0, r0
    1c2c:	0000      	movs	r0, r0
	...

00001c30 <_delay_cycles>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    1c30:	3901      	subs	r1, #1
    1c32:	d8fd      	bhi.n	1c30 <_delay_cycles>
    1c34:	4770      	bx	lr
    1c36:	bf00      	nop

00001c38 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1c38:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    1c3a:	4a09      	ldr	r2, [pc, #36]	; (1c60 <_init_chip+0x28>)
    1c3c:	8813      	ldrh	r3, [r2, #0]
    1c3e:	b29b      	uxth	r3, r3
    1c40:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    1c44:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    1c46:	4b07      	ldr	r3, [pc, #28]	; (1c64 <_init_chip+0x2c>)
    1c48:	4798      	blx	r3
	_oscctrl_init_sources();
    1c4a:	4b07      	ldr	r3, [pc, #28]	; (1c68 <_init_chip+0x30>)
    1c4c:	4798      	blx	r3
	_mclk_init();
    1c4e:	4b07      	ldr	r3, [pc, #28]	; (1c6c <_init_chip+0x34>)
    1c50:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    1c52:	4b07      	ldr	r3, [pc, #28]	; (1c70 <_init_chip+0x38>)
    1c54:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1c56:	f640 70ff 	movw	r0, #4095	; 0xfff
    1c5a:	4b06      	ldr	r3, [pc, #24]	; (1c74 <_init_chip+0x3c>)
    1c5c:	4798      	blx	r3
    1c5e:	bd08      	pop	{r3, pc}
    1c60:	41004000 	.word	0x41004000
    1c64:	00001ca9 	.word	0x00001ca9
    1c68:	00001cc9 	.word	0x00001cc9
    1c6c:	00001c9d 	.word	0x00001c9d
    1c70:	00001ccd 	.word	0x00001ccd
    1c74:	00001c79 	.word	0x00001c79

00001c78 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1c78:	f010 0f01 	tst.w	r0, #1
    1c7c:	d008      	beq.n	1c90 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1c7e:	4a05      	ldr	r2, [pc, #20]	; (1c94 <_gclk_init_generators_by_fref+0x1c>)
    1c80:	4b05      	ldr	r3, [pc, #20]	; (1c98 <_gclk_init_generators_by_fref+0x20>)
    1c82:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1c84:	4619      	mov	r1, r3
    1c86:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1c8a:	684b      	ldr	r3, [r1, #4]
    1c8c:	4213      	tst	r3, r2
    1c8e:	d1fc      	bne.n	1c8a <_gclk_init_generators_by_fref+0x12>
    1c90:	4770      	bx	lr
    1c92:	bf00      	nop
    1c94:	00010107 	.word	0x00010107
    1c98:	40001c00 	.word	0x40001c00

00001c9c <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1c9c:	2201      	movs	r2, #1
    1c9e:	4b01      	ldr	r3, [pc, #4]	; (1ca4 <_mclk_init+0x8>)
    1ca0:	715a      	strb	r2, [r3, #5]
    1ca2:	4770      	bx	lr
    1ca4:	40000800 	.word	0x40000800

00001ca8 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    1ca8:	4b06      	ldr	r3, [pc, #24]	; (1cc4 <_osc32kctrl_init_sources+0x1c>)
    1caa:	f242 328e 	movw	r2, #9102	; 0x238e
    1cae:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    1cb0:	2200      	movs	r2, #0
    1cb2:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    1cb4:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1cb6:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1cb8:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1cbc:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1cbe:	2201      	movs	r2, #1
    1cc0:	741a      	strb	r2, [r3, #16]
    1cc2:	4770      	bx	lr
    1cc4:	40001400 	.word	0x40001400

00001cc8 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    1cc8:	4770      	bx	lr
	...

00001ccc <_oscctrl_init_referenced_generators>:

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    1ccc:	4a0e      	ldr	r2, [pc, #56]	; (1d08 <_oscctrl_init_referenced_generators+0x3c>)
    1cce:	4b0f      	ldr	r3, [pc, #60]	; (1d0c <_oscctrl_init_referenced_generators+0x40>)
    1cd0:	635a      	str	r2, [r3, #52]	; 0x34
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1cd2:	461a      	mov	r2, r3
    1cd4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    1cd6:	f013 0f06 	tst.w	r3, #6
    1cda:	d1fb      	bne.n	1cd4 <_oscctrl_init_referenced_generators+0x8>

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    1cdc:	4b0b      	ldr	r3, [pc, #44]	; (1d0c <_oscctrl_init_referenced_generators+0x40>)
    1cde:	f44f 6202 	mov.w	r2, #2080	; 0x820
    1ce2:	639a      	str	r2, [r3, #56]	; 0x38
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    1ce4:	2202      	movs	r2, #2
    1ce6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1cea:	461a      	mov	r2, r3
    1cec:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    1cee:	f013 0f02 	tst.w	r3, #2
    1cf2:	d1fb      	bne.n	1cec <_oscctrl_init_referenced_generators+0x20>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    1cf4:	4b05      	ldr	r3, [pc, #20]	; (1d0c <_oscctrl_init_referenced_generators+0x40>)
    1cf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    1cf8:	f012 0f01 	tst.w	r2, #1
    1cfc:	d103      	bne.n	1d06 <_oscctrl_init_referenced_generators+0x3a>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    1cfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    1d00:	f012 0f02 	tst.w	r2, #2
    1d04:	d0f7      	beq.n	1cf6 <_oscctrl_init_referenced_generators+0x2a>
    1d06:	4770      	bx	lr
    1d08:	00010e4d 	.word	0x00010e4d
    1d0c:	40001000 	.word	0x40001000

00001d10 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    1d10:	b500      	push	{lr}
    1d12:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    1d14:	4b0d      	ldr	r3, [pc, #52]	; (1d4c <RAMECC_Handler+0x3c>)
    1d16:	789b      	ldrb	r3, [r3, #2]
    1d18:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    1d1a:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    1d1c:	9b01      	ldr	r3, [sp, #4]
    1d1e:	f013 0f02 	tst.w	r3, #2
    1d22:	d006      	beq.n	1d32 <RAMECC_Handler+0x22>
    1d24:	4b0a      	ldr	r3, [pc, #40]	; (1d50 <RAMECC_Handler+0x40>)
    1d26:	681b      	ldr	r3, [r3, #0]
    1d28:	b11b      	cbz	r3, 1d32 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    1d2a:	4a08      	ldr	r2, [pc, #32]	; (1d4c <RAMECC_Handler+0x3c>)
    1d2c:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1d2e:	4798      	blx	r3
    1d30:	e009      	b.n	1d46 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    1d32:	9b01      	ldr	r3, [sp, #4]
    1d34:	f013 0f01 	tst.w	r3, #1
    1d38:	d005      	beq.n	1d46 <RAMECC_Handler+0x36>
    1d3a:	4b05      	ldr	r3, [pc, #20]	; (1d50 <RAMECC_Handler+0x40>)
    1d3c:	685b      	ldr	r3, [r3, #4]
    1d3e:	b113      	cbz	r3, 1d46 <RAMECC_Handler+0x36>
    1d40:	4a02      	ldr	r2, [pc, #8]	; (1d4c <RAMECC_Handler+0x3c>)
    1d42:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1d44:	4798      	blx	r3
	} else {
		return;
	}
}
    1d46:	b003      	add	sp, #12
    1d48:	f85d fb04 	ldr.w	pc, [sp], #4
    1d4c:	41020000 	.word	0x41020000
    1d50:	2000c66c 	.word	0x2000c66c

00001d54 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1d54:	b470      	push	{r4, r5, r6}
    1d56:	b089      	sub	sp, #36	; 0x24
    1d58:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1d5a:	466c      	mov	r4, sp
    1d5c:	4d0d      	ldr	r5, [pc, #52]	; (1d94 <_sercom_get_hardware_index+0x40>)
    1d5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1d60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1d62:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1d66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1d6a:	9b00      	ldr	r3, [sp, #0]
    1d6c:	42b3      	cmp	r3, r6
    1d6e:	d00d      	beq.n	1d8c <_sercom_get_hardware_index+0x38>
    1d70:	4631      	mov	r1, r6
    1d72:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1d74:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1d76:	f853 2b04 	ldr.w	r2, [r3], #4
    1d7a:	428a      	cmp	r2, r1
    1d7c:	d007      	beq.n	1d8e <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1d7e:	3001      	adds	r0, #1
    1d80:	2808      	cmp	r0, #8
    1d82:	d1f8      	bne.n	1d76 <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    1d84:	2000      	movs	r0, #0
}
    1d86:	b009      	add	sp, #36	; 0x24
    1d88:	bc70      	pop	{r4, r5, r6}
    1d8a:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1d8c:	2000      	movs	r0, #0
			return i;
    1d8e:	b2c0      	uxtb	r0, r0
    1d90:	e7f9      	b.n	1d86 <_sercom_get_hardware_index+0x32>
    1d92:	bf00      	nop
    1d94:	00023b44 	.word	0x00023b44

00001d98 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    1d98:	b510      	push	{r4, lr}
	void *hw = device->hw;
    1d9a:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1d9c:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    1d9e:	f013 0f01 	tst.w	r3, #1
    1da2:	d003      	beq.n	1dac <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    1da4:	7da3      	ldrb	r3, [r4, #22]
    1da6:	f013 0f01 	tst.w	r3, #1
    1daa:	d112      	bne.n	1dd2 <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1dac:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    1dae:	f013 0f02 	tst.w	r3, #2
    1db2:	d003      	beq.n	1dbc <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    1db4:	7da3      	ldrb	r3, [r4, #22]
    1db6:	f013 0f02 	tst.w	r3, #2
    1dba:	d10f      	bne.n	1ddc <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1dbc:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    1dbe:	f013 0f04 	tst.w	r3, #4
    1dc2:	d015      	beq.n	1df0 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    1dc4:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    1dc6:	f003 0337 	and.w	r3, r3, #55	; 0x37
    1dca:	b163      	cbz	r3, 1de6 <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1dcc:	23ff      	movs	r3, #255	; 0xff
    1dce:	8363      	strh	r3, [r4, #26]
    1dd0:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    1dd2:	2301      	movs	r3, #1
    1dd4:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    1dd6:	6803      	ldr	r3, [r0, #0]
    1dd8:	4798      	blx	r3
    1dda:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    1ddc:	2302      	movs	r3, #2
    1dde:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    1de0:	6883      	ldr	r3, [r0, #8]
    1de2:	4798      	blx	r3
    1de4:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    1de6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    1de8:	6843      	ldr	r3, [r0, #4]
    1dea:	b2c9      	uxtb	r1, r1
    1dec:	4798      	blx	r3
    1dee:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    1df0:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    1df2:	09db      	lsrs	r3, r3, #7
    1df4:	d100      	bne.n	1df8 <_sercom_usart_interrupt_handler+0x60>
    1df6:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    1df8:	2380      	movs	r3, #128	; 0x80
    1dfa:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    1dfc:	68c3      	ldr	r3, [r0, #12]
    1dfe:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    1e00:	8b63      	ldrh	r3, [r4, #26]
    1e02:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1e04:	8363      	strh	r3, [r4, #26]
    1e06:	e7f6      	b.n	1df6 <_sercom_usart_interrupt_handler+0x5e>

00001e08 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    1e08:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    1e0a:	4b03      	ldr	r3, [pc, #12]	; (1e18 <_sercom_get_irq_num+0x10>)
    1e0c:	4798      	blx	r3
    1e0e:	0080      	lsls	r0, r0, #2
    1e10:	302e      	adds	r0, #46	; 0x2e
}
    1e12:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    1e16:	bd08      	pop	{r3, pc}
    1e18:	00001d55 	.word	0x00001d55

00001e1c <_usart_init>:
{
    1e1c:	b510      	push	{r4, lr}
    1e1e:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1e20:	4b21      	ldr	r3, [pc, #132]	; (1ea8 <_usart_init+0x8c>)
    1e22:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    1e24:	2802      	cmp	r0, #2
    1e26:	d005      	beq.n	1e34 <_usart_init+0x18>
	ASSERT(false);
    1e28:	f240 226b 	movw	r2, #619	; 0x26b
    1e2c:	491f      	ldr	r1, [pc, #124]	; (1eac <_usart_init+0x90>)
    1e2e:	2000      	movs	r0, #0
    1e30:	4b1f      	ldr	r3, [pc, #124]	; (1eb0 <_usart_init+0x94>)
    1e32:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1e34:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1e36:	f013 0f01 	tst.w	r3, #1
    1e3a:	d119      	bne.n	1e70 <_usart_init+0x54>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1e3c:	69e3      	ldr	r3, [r4, #28]
    1e3e:	f013 0f03 	tst.w	r3, #3
    1e42:	d1fb      	bne.n	1e3c <_usart_init+0x20>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1e44:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    1e46:	f013 0f02 	tst.w	r3, #2
    1e4a:	d00b      	beq.n	1e64 <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1e4c:	6823      	ldr	r3, [r4, #0]
    1e4e:	f023 0302 	bic.w	r3, r3, #2
    1e52:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1e54:	69e3      	ldr	r3, [r4, #28]
    1e56:	f013 0f03 	tst.w	r3, #3
    1e5a:	d1fb      	bne.n	1e54 <_usart_init+0x38>
    1e5c:	69e3      	ldr	r3, [r4, #28]
    1e5e:	f013 0f02 	tst.w	r3, #2
    1e62:	d1fb      	bne.n	1e5c <_usart_init+0x40>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1e64:	2305      	movs	r3, #5
    1e66:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1e68:	69e3      	ldr	r3, [r4, #28]
    1e6a:	f013 0f03 	tst.w	r3, #3
    1e6e:	d1fb      	bne.n	1e68 <_usart_init+0x4c>
    1e70:	69e3      	ldr	r3, [r4, #28]
    1e72:	f013 0f01 	tst.w	r3, #1
    1e76:	d1fb      	bne.n	1e70 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1e78:	4b0e      	ldr	r3, [pc, #56]	; (1eb4 <_usart_init+0x98>)
    1e7a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1e7c:	69e3      	ldr	r3, [r4, #28]
    1e7e:	f013 0f03 	tst.w	r3, #3
    1e82:	d1fb      	bne.n	1e7c <_usart_init+0x60>
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1e84:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    1e88:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1e8a:	69e3      	ldr	r3, [r4, #28]
    1e8c:	f013 0f1f 	tst.w	r3, #31
    1e90:	d1fb      	bne.n	1e8a <_usart_init+0x6e>
	((Sercom *)hw)->USART.CTRLC.reg = data;
    1e92:	4b09      	ldr	r3, [pc, #36]	; (1eb8 <_usart_init+0x9c>)
    1e94:	60a3      	str	r3, [r4, #8]
	((Sercom *)hw)->USART.BAUD.reg = data;
    1e96:	f64f 4311 	movw	r3, #64529	; 0xfc11
    1e9a:	81a3      	strh	r3, [r4, #12]
	((Sercom *)hw)->USART.RXPL.reg = data;
    1e9c:	2000      	movs	r0, #0
    1e9e:	73a0      	strb	r0, [r4, #14]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1ea0:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
    1ea4:	bd10      	pop	{r4, pc}
    1ea6:	bf00      	nop
    1ea8:	00001d55 	.word	0x00001d55
    1eac:	00023b7c 	.word	0x00023b7c
    1eb0:	00001a75 	.word	0x00001a75
    1eb4:	40100004 	.word	0x40100004
    1eb8:	00700002 	.word	0x00700002

00001ebc <_usart_async_init>:
{
    1ebc:	b570      	push	{r4, r5, r6, lr}
    1ebe:	460d      	mov	r5, r1
	ASSERT(device);
    1ec0:	4606      	mov	r6, r0
    1ec2:	22cb      	movs	r2, #203	; 0xcb
    1ec4:	4918      	ldr	r1, [pc, #96]	; (1f28 <_usart_async_init+0x6c>)
    1ec6:	3000      	adds	r0, #0
    1ec8:	bf18      	it	ne
    1eca:	2001      	movne	r0, #1
    1ecc:	4b17      	ldr	r3, [pc, #92]	; (1f2c <_usart_async_init+0x70>)
    1ece:	4798      	blx	r3
	init_status = _usart_init(hw);
    1ed0:	4628      	mov	r0, r5
    1ed2:	4b17      	ldr	r3, [pc, #92]	; (1f30 <_usart_async_init+0x74>)
    1ed4:	4798      	blx	r3
	if (init_status) {
    1ed6:	4604      	mov	r4, r0
    1ed8:	b108      	cbz	r0, 1ede <_usart_async_init+0x22>
}
    1eda:	4620      	mov	r0, r4
    1edc:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    1ede:	61b5      	str	r5, [r6, #24]
	if (hw == SERCOM2) {
    1ee0:	4b14      	ldr	r3, [pc, #80]	; (1f34 <_usart_async_init+0x78>)
    1ee2:	429d      	cmp	r5, r3
		_sercom2_dev = (struct _usart_async_device *)dev;
    1ee4:	bf04      	itt	eq
    1ee6:	4b14      	ldreq	r3, [pc, #80]	; (1f38 <_usart_async_init+0x7c>)
    1ee8:	601e      	streq	r6, [r3, #0]
	uint8_t irq = _sercom_get_irq_num(hw);
    1eea:	4628      	mov	r0, r5
    1eec:	4b13      	ldr	r3, [pc, #76]	; (1f3c <_usart_async_init+0x80>)
    1eee:	4798      	blx	r3
    1ef0:	1d01      	adds	r1, r0, #4
    1ef2:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ef4:	2501      	movs	r5, #1
    1ef6:	f000 021f 	and.w	r2, r0, #31
    1efa:	fa05 f202 	lsl.w	r2, r5, r2
    1efe:	0943      	lsrs	r3, r0, #5
    1f00:	009b      	lsls	r3, r3, #2
    1f02:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1f06:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    1f0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1f0e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1f12:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1f16:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1f1a:	601a      	str	r2, [r3, #0]
		irq++;
    1f1c:	3001      	adds	r0, #1
    1f1e:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    1f20:	4281      	cmp	r1, r0
    1f22:	d1e8      	bne.n	1ef6 <_usart_async_init+0x3a>
    1f24:	e7d9      	b.n	1eda <_usart_async_init+0x1e>
    1f26:	bf00      	nop
    1f28:	00023b7c 	.word	0x00023b7c
    1f2c:	00001a75 	.word	0x00001a75
    1f30:	00001e1d 	.word	0x00001e1d
    1f34:	41012000 	.word	0x41012000
    1f38:	20008068 	.word	0x20008068
    1f3c:	00001e09 	.word	0x00001e09

00001f40 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1f40:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1f42:	6813      	ldr	r3, [r2, #0]
    1f44:	f043 0302 	orr.w	r3, r3, #2
    1f48:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1f4a:	69d3      	ldr	r3, [r2, #28]
    1f4c:	f013 0f03 	tst.w	r3, #3
    1f50:	d1fb      	bne.n	1f4a <_usart_async_enable+0xa>
}
    1f52:	4770      	bx	lr

00001f54 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1f54:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    1f56:	6299      	str	r1, [r3, #40]	; 0x28
    1f58:	4770      	bx	lr

00001f5a <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    1f5a:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    1f5c:	2201      	movs	r2, #1
    1f5e:	759a      	strb	r2, [r3, #22]
    1f60:	4770      	bx	lr

00001f62 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    1f62:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    1f64:	2202      	movs	r2, #2
    1f66:	759a      	strb	r2, [r3, #22]
    1f68:	4770      	bx	lr
	...

00001f6c <SERCOM2_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_0_Handler(void)
{
    1f6c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    1f6e:	4b02      	ldr	r3, [pc, #8]	; (1f78 <SERCOM2_0_Handler+0xc>)
    1f70:	6818      	ldr	r0, [r3, #0]
    1f72:	4b02      	ldr	r3, [pc, #8]	; (1f7c <SERCOM2_0_Handler+0x10>)
    1f74:	4798      	blx	r3
    1f76:	bd08      	pop	{r3, pc}
    1f78:	20008068 	.word	0x20008068
    1f7c:	00001d99 	.word	0x00001d99

00001f80 <SERCOM2_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_1_Handler(void)
{
    1f80:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    1f82:	4b02      	ldr	r3, [pc, #8]	; (1f8c <SERCOM2_1_Handler+0xc>)
    1f84:	6818      	ldr	r0, [r3, #0]
    1f86:	4b02      	ldr	r3, [pc, #8]	; (1f90 <SERCOM2_1_Handler+0x10>)
    1f88:	4798      	blx	r3
    1f8a:	bd08      	pop	{r3, pc}
    1f8c:	20008068 	.word	0x20008068
    1f90:	00001d99 	.word	0x00001d99

00001f94 <SERCOM2_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_2_Handler(void)
{
    1f94:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    1f96:	4b02      	ldr	r3, [pc, #8]	; (1fa0 <SERCOM2_2_Handler+0xc>)
    1f98:	6818      	ldr	r0, [r3, #0]
    1f9a:	4b02      	ldr	r3, [pc, #8]	; (1fa4 <SERCOM2_2_Handler+0x10>)
    1f9c:	4798      	blx	r3
    1f9e:	bd08      	pop	{r3, pc}
    1fa0:	20008068 	.word	0x20008068
    1fa4:	00001d99 	.word	0x00001d99

00001fa8 <SERCOM2_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_3_Handler(void)
{
    1fa8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    1faa:	4b02      	ldr	r3, [pc, #8]	; (1fb4 <SERCOM2_3_Handler+0xc>)
    1fac:	6818      	ldr	r0, [r3, #0]
    1fae:	4b02      	ldr	r3, [pc, #8]	; (1fb8 <SERCOM2_3_Handler+0x10>)
    1fb0:	4798      	blx	r3
    1fb2:	bd08      	pop	{r3, pc}
    1fb4:	20008068 	.word	0x20008068
    1fb8:	00001d99 	.word	0x00001d99

00001fbc <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    1fbc:	b570      	push	{r4, r5, r6, lr}
    1fbe:	b088      	sub	sp, #32
    1fc0:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    1fc2:	466c      	mov	r4, sp
    1fc4:	4d12      	ldr	r5, [pc, #72]	; (2010 <get_tc_index+0x54>)
    1fc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1fc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1fca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1fce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    1fd2:	9b00      	ldr	r3, [sp, #0]
    1fd4:	42b3      	cmp	r3, r6
    1fd6:	d00b      	beq.n	1ff0 <get_tc_index+0x34>
    1fd8:	4630      	mov	r0, r6
    1fda:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1fdc:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    1fde:	f852 1b04 	ldr.w	r1, [r2], #4
    1fe2:	4281      	cmp	r1, r0
    1fe4:	d005      	beq.n	1ff2 <get_tc_index+0x36>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1fe6:	3301      	adds	r3, #1
    1fe8:	2b08      	cmp	r3, #8
    1fea:	d1f8      	bne.n	1fde <get_tc_index+0x22>
			return i;
    1fec:	2000      	movs	r0, #0
    1fee:	e00b      	b.n	2008 <get_tc_index+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1ff0:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    1ff2:	f013 0fff 	tst.w	r3, #255	; 0xff
    1ff6:	d009      	beq.n	200c <get_tc_index+0x50>
	ASSERT(false);
    1ff8:	f44f 729e 	mov.w	r2, #316	; 0x13c
    1ffc:	4905      	ldr	r1, [pc, #20]	; (2014 <get_tc_index+0x58>)
    1ffe:	2000      	movs	r0, #0
    2000:	4b05      	ldr	r3, [pc, #20]	; (2018 <get_tc_index+0x5c>)
    2002:	4798      	blx	r3
	return -1;
    2004:	f04f 30ff 	mov.w	r0, #4294967295
}
    2008:	b008      	add	sp, #32
    200a:	bd70      	pop	{r4, r5, r6, pc}
			return i;
    200c:	2000      	movs	r0, #0
    200e:	e7fb      	b.n	2008 <get_tc_index+0x4c>
    2010:	00023b98 	.word	0x00023b98
    2014:	00023bcc 	.word	0x00023bcc
    2018:	00001a75 	.word	0x00001a75

0000201c <_timer_init>:
{
    201c:	b570      	push	{r4, r5, r6, lr}
    201e:	4606      	mov	r6, r0
    2020:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    2022:	4608      	mov	r0, r1
    2024:	4b60      	ldr	r3, [pc, #384]	; (21a8 <_timer_init+0x18c>)
    2026:	4798      	blx	r3
    2028:	4605      	mov	r5, r0
	device->hw = hw;
    202a:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    202c:	228d      	movs	r2, #141	; 0x8d
    202e:	495f      	ldr	r1, [pc, #380]	; (21ac <_timer_init+0x190>)
    2030:	2001      	movs	r0, #1
    2032:	4b5f      	ldr	r3, [pc, #380]	; (21b0 <_timer_init+0x194>)
    2034:	4798      	blx	r3
	};
}

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    2036:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    2038:	f013 0f01 	tst.w	r3, #1
    203c:	d119      	bne.n	2072 <_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    203e:	6923      	ldr	r3, [r4, #16]
    2040:	f013 0f03 	tst.w	r3, #3
    2044:	d1fb      	bne.n	203e <_timer_init+0x22>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2046:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    2048:	f013 0f02 	tst.w	r3, #2
    204c:	d00b      	beq.n	2066 <_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    204e:	6823      	ldr	r3, [r4, #0]
    2050:	f023 0302 	bic.w	r3, r3, #2
    2054:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2056:	6923      	ldr	r3, [r4, #16]
    2058:	f013 0f03 	tst.w	r3, #3
    205c:	d1fb      	bne.n	2056 <_timer_init+0x3a>
    205e:	6923      	ldr	r3, [r4, #16]
    2060:	f013 0f02 	tst.w	r3, #2
    2064:	d1fb      	bne.n	205e <_timer_init+0x42>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2066:	2301      	movs	r3, #1
    2068:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    206a:	6923      	ldr	r3, [r4, #16]
    206c:	f013 0f03 	tst.w	r3, #3
    2070:	d1fb      	bne.n	206a <_timer_init+0x4e>
    2072:	6923      	ldr	r3, [r4, #16]
    2074:	f013 0f01 	tst.w	r3, #1
    2078:	d1fb      	bne.n	2072 <_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    207a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    207e:	4a4d      	ldr	r2, [pc, #308]	; (21b4 <_timer_init+0x198>)
    2080:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2084:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2086:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2088:	6923      	ldr	r3, [r4, #16]
    208a:	f013 0f03 	tst.w	r3, #3
    208e:	d1fb      	bne.n	2088 <_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2090:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2094:	4947      	ldr	r1, [pc, #284]	; (21b4 <_timer_init+0x198>)
    2096:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    209a:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    209e:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    20a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    20a2:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    20a4:	2301      	movs	r3, #1
    20a6:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    20a8:	f002 020c 	and.w	r2, r2, #12
    20ac:	2a08      	cmp	r2, #8
    20ae:	d048      	beq.n	2142 <_timer_init+0x126>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    20b0:	2a00      	cmp	r2, #0
    20b2:	d158      	bne.n	2166 <_timer_init+0x14a>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    20b4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    20b8:	4a3e      	ldr	r2, [pc, #248]	; (21b4 <_timer_init+0x198>)
    20ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    20be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    20c0:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    20c2:	6923      	ldr	r3, [r4, #16]
    20c4:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    20c8:	d1fb      	bne.n	20c2 <_timer_init+0xa6>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    20ca:	2300      	movs	r3, #0
    20cc:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    20ce:	6923      	ldr	r3, [r4, #16]
    20d0:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    20d4:	d1fb      	bne.n	20ce <_timer_init+0xb2>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    20d6:	2301      	movs	r3, #1
    20d8:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    20da:	4b37      	ldr	r3, [pc, #220]	; (21b8 <_timer_init+0x19c>)
    20dc:	429c      	cmp	r4, r3
		_tc0_dev = (struct _timer_device *)dev;
    20de:	bf04      	itt	eq
    20e0:	4b36      	ldreq	r3, [pc, #216]	; (21bc <_timer_init+0x1a0>)
    20e2:	601e      	streq	r6, [r3, #0]
	NVIC_DisableIRQ(_tcs[i].irq);
    20e4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    20e8:	4a32      	ldr	r2, [pc, #200]	; (21b4 <_timer_init+0x198>)
    20ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    20ee:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    20f2:	2b00      	cmp	r3, #0
    20f4:	db23      	blt.n	213e <_timer_init+0x122>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    20f6:	095a      	lsrs	r2, r3, #5
    20f8:	f003 031f 	and.w	r3, r3, #31
    20fc:	2101      	movs	r1, #1
    20fe:	fa01 f303 	lsl.w	r3, r1, r3
    2102:	3220      	adds	r2, #32
    2104:	492e      	ldr	r1, [pc, #184]	; (21c0 <_timer_init+0x1a4>)
    2106:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    210a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    210e:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    2112:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2116:	4b27      	ldr	r3, [pc, #156]	; (21b4 <_timer_init+0x198>)
    2118:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    211c:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    2120:	2b00      	cmp	r3, #0
    2122:	db0c      	blt.n	213e <_timer_init+0x122>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2124:	0959      	lsrs	r1, r3, #5
    2126:	f003 031f 	and.w	r3, r3, #31
    212a:	2201      	movs	r2, #1
    212c:	fa02 f303 	lsl.w	r3, r2, r3
    2130:	4a23      	ldr	r2, [pc, #140]	; (21c0 <_timer_init+0x1a4>)
    2132:	f101 0060 	add.w	r0, r1, #96	; 0x60
    2136:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    213a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    213e:	2000      	movs	r0, #0
    2140:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    2142:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2146:	4a1b      	ldr	r2, [pc, #108]	; (21b4 <_timer_init+0x198>)
    2148:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    214c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    214e:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2150:	6923      	ldr	r3, [r4, #16]
    2152:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2156:	d1fb      	bne.n	2150 <_timer_init+0x134>
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2158:	2300      	movs	r3, #0
    215a:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    215c:	6923      	ldr	r3, [r4, #16]
    215e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2162:	d1fb      	bne.n	215c <_timer_init+0x140>
    2164:	e7b7      	b.n	20d6 <_timer_init+0xba>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    2166:	2a04      	cmp	r2, #4
    2168:	d1b5      	bne.n	20d6 <_timer_init+0xba>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    216a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    216e:	4a11      	ldr	r2, [pc, #68]	; (21b4 <_timer_init+0x198>)
    2170:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2174:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    2178:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    217a:	6923      	ldr	r3, [r4, #16]
    217c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2180:	d1fb      	bne.n	217a <_timer_init+0x15e>
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    2182:	2300      	movs	r3, #0
    2184:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2186:	6923      	ldr	r3, [r4, #16]
    2188:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    218c:	d1fb      	bne.n	2186 <_timer_init+0x16a>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    218e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2192:	4a08      	ldr	r2, [pc, #32]	; (21b4 <_timer_init+0x198>)
    2194:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2198:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
    219c:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    219e:	6923      	ldr	r3, [r4, #16]
    21a0:	f013 0f20 	tst.w	r3, #32
    21a4:	d1fb      	bne.n	219e <_timer_init+0x182>
    21a6:	e796      	b.n	20d6 <_timer_init+0xba>
    21a8:	00001fbd 	.word	0x00001fbd
    21ac:	00023bcc 	.word	0x00023bcc
    21b0:	00001a75 	.word	0x00001a75
    21b4:	00023b98 	.word	0x00023b98
    21b8:	40003800 	.word	0x40003800
    21bc:	2000806c 	.word	0x2000806c
    21c0:	e000e100 	.word	0xe000e100

000021c4 <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    21c4:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    21c6:	6813      	ldr	r3, [r2, #0]
    21c8:	f043 0302 	orr.w	r3, r3, #2
    21cc:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    21ce:	6913      	ldr	r3, [r2, #16]
    21d0:	f013 0f03 	tst.w	r3, #3
    21d4:	d1fb      	bne.n	21ce <_timer_start+0xa>
}
    21d6:	4770      	bx	lr

000021d8 <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    21d8:	68c2      	ldr	r2, [r0, #12]
    21da:	6913      	ldr	r3, [r2, #16]
    21dc:	f013 0f03 	tst.w	r3, #3
    21e0:	d1fb      	bne.n	21da <_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    21e2:	6810      	ldr	r0, [r2, #0]
}
    21e4:	f3c0 0040 	ubfx	r0, r0, #1, #1
    21e8:	4770      	bx	lr

000021ea <_tc_get_timer>:
}
    21ea:	2000      	movs	r0, #0
    21ec:	4770      	bx	lr
	...

000021f0 <_timer_set_irq>:
{
    21f0:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    21f2:	68c0      	ldr	r0, [r0, #12]
    21f4:	4b09      	ldr	r3, [pc, #36]	; (221c <_timer_set_irq+0x2c>)
    21f6:	4798      	blx	r3
    21f8:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    21fa:	f240 120f 	movw	r2, #271	; 0x10f
    21fe:	4908      	ldr	r1, [pc, #32]	; (2220 <_timer_set_irq+0x30>)
    2200:	2001      	movs	r0, #1
    2202:	4b08      	ldr	r3, [pc, #32]	; (2224 <_timer_set_irq+0x34>)
    2204:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    2206:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    220a:	4b07      	ldr	r3, [pc, #28]	; (2228 <_timer_set_irq+0x38>)
    220c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    2210:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    2214:	4b05      	ldr	r3, [pc, #20]	; (222c <_timer_set_irq+0x3c>)
    2216:	4798      	blx	r3
    2218:	bd10      	pop	{r4, pc}
    221a:	bf00      	nop
    221c:	00001fbd 	.word	0x00001fbd
    2220:	00023bcc 	.word	0x00023bcc
    2224:	00001a75 	.word	0x00001a75
    2228:	00023b98 	.word	0x00023b98
    222c:	00001bd5 	.word	0x00001bd5

00002230 <TC0_Handler>:
{
    2230:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
    2232:	4b06      	ldr	r3, [pc, #24]	; (224c <TC0_Handler+0x1c>)
    2234:	6818      	ldr	r0, [r3, #0]
	void *const hw = device->hw;
    2236:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2238:	7a9a      	ldrb	r2, [r3, #10]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    223a:	f012 0f01 	tst.w	r2, #1
    223e:	d100      	bne.n	2242 <TC0_Handler+0x12>
    2240:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    2242:	2201      	movs	r2, #1
    2244:	729a      	strb	r2, [r3, #10]
		device->timer_cb.period_expired(device);
    2246:	6803      	ldr	r3, [r0, #0]
    2248:	4798      	blx	r3
}
    224a:	e7f9      	b.n	2240 <TC0_Handler+0x10>
    224c:	2000806c 	.word	0x2000806c

00002250 <main>:
#include "oracle.h"


int main(void)
{
    2250:	b508      	push	{r3, lr}
	oracle_init();
    2252:	4b02      	ldr	r3, [pc, #8]	; (225c <main+0xc>)
    2254:	4798      	blx	r3
	
	for(;;)
	{
		oracle_service();
    2256:	4c02      	ldr	r4, [pc, #8]	; (2260 <main+0x10>)
    2258:	47a0      	blx	r4
    225a:	e7fd      	b.n	2258 <main+0x8>
    225c:	00002265 	.word	0x00002265
    2260:	00002299 	.word	0x00002299

00002264 <oracle_init>:
#include "p_ssd1963.h"
#include "p_screen.h"

	
void oracle_init(void)
{
    2264:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    2266:	4b06      	ldr	r3, [pc, #24]	; (2280 <oracle_init+0x1c>)
    2268:	4798      	blx	r3
	// init mcu
	init_mcu();
	// uart init
	p_usart_init();
    226a:	4b06      	ldr	r3, [pc, #24]	; (2284 <oracle_init+0x20>)
    226c:	4798      	blx	r3
	// i2c init
	p_i2c_init();
    226e:	4b06      	ldr	r3, [pc, #24]	; (2288 <oracle_init+0x24>)
    2270:	4798      	blx	r3
	// gpio init
	p_gpio_init();
    2272:	4b06      	ldr	r3, [pc, #24]	; (228c <oracle_init+0x28>)
    2274:	4798      	blx	r3
	// time init
	p_tcc_init();
    2276:	4b06      	ldr	r3, [pc, #24]	; (2290 <oracle_init+0x2c>)
    2278:	4798      	blx	r3

	p_screen_init();
    227a:	4b06      	ldr	r3, [pc, #24]	; (2294 <oracle_init+0x30>)
    227c:	4798      	blx	r3
    227e:	bd08      	pop	{r3, pc}
    2280:	00001c39 	.word	0x00001c39
    2284:	000014c5 	.word	0x000014c5
    2288:	00001425 	.word	0x00001425
    228c:	000012f1 	.word	0x000012f1
    2290:	0000144d 	.word	0x0000144d
    2294:	00000f75 	.word	0x00000f75

00002298 <oracle_service>:
}

void oracle_service(void)
{
    2298:	b508      	push	{r3, lr}
	p_screen_service();
    229a:	4b01      	ldr	r3, [pc, #4]	; (22a0 <oracle_service+0x8>)
    229c:	4798      	blx	r3
    229e:	bd08      	pop	{r3, pc}
    22a0:	00001021 	.word	0x00001021

000022a4 <lv_debug_check_null>:
bool lv_debug_check_null(const void * p)
{
    if(p) return true;

    return false;
}
    22a4:	3000      	adds	r0, #0
    22a6:	bf18      	it	ne
    22a8:	2001      	movne	r0, #1
    22aa:	4770      	bx	lr

000022ac <lv_debug_log_error>:
    LV_LOG_WARN("lv_debug_check_str: string is longer than LV_DEBUG_STR_MAX_LENGTH");
    return false;
}

void lv_debug_log_error(const char * msg, uint64_t value)
{
    22ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    22ae:	b0c3      	sub	sp, #268	; 0x10c
    22b0:	4605      	mov	r5, r0
    22b2:	4614      	mov	r4, r2
    static const char hex[] = "0123456789ABCDEF";

    size_t msg_len = strlen(msg);
    22b4:	4b1c      	ldr	r3, [pc, #112]	; (2328 <lv_debug_log_error+0x7c>)
    22b6:	4798      	blx	r3
    uint32_t value_len = sizeof(unsigned long int);

    if(msg_len < 230) {
    22b8:	28e5      	cmp	r0, #229	; 0xe5
    22ba:	d82c      	bhi.n	2316 <lv_debug_log_error+0x6a>
    22bc:	4606      	mov	r6, r0
        char buf[255];
        char * bufp = buf;

        /*Add the function name*/
        _lv_memcpy(bufp, msg, msg_len);
    22be:	af02      	add	r7, sp, #8
    22c0:	4602      	mov	r2, r0
    22c2:	4629      	mov	r1, r5
    22c4:	4638      	mov	r0, r7
    22c6:	4b19      	ldr	r3, [pc, #100]	; (232c <lv_debug_log_error+0x80>)
    22c8:	4798      	blx	r3
        bufp += msg_len;
    22ca:	19bd      	adds	r5, r7, r6

        /*Add value in hey*/
        *bufp = ' ';
    22cc:	2320      	movs	r3, #32
    22ce:	55bb      	strb	r3, [r7, r6]
        bufp ++;
        *bufp = '(';
    22d0:	2328      	movs	r3, #40	; 0x28
    22d2:	706b      	strb	r3, [r5, #1]
        bufp ++;
        *bufp = '0';
    22d4:	2330      	movs	r3, #48	; 0x30
    22d6:	70ab      	strb	r3, [r5, #2]
        bufp ++;
        *bufp = 'x';
    22d8:	2378      	movs	r3, #120	; 0x78
    22da:	70eb      	strb	r3, [r5, #3]
        bufp ++;
    22dc:	1d29      	adds	r1, r5, #4
    22de:	221c      	movs	r2, #28

        int8_t i;
        for(i = value_len * 2 - 1; i >= 0; i--) {
            uint8_t x = (unsigned long int)((unsigned long int)value >> (i * 4)) & 0xF;

            *bufp = hex[x];
    22e0:	4813      	ldr	r0, [pc, #76]	; (2330 <lv_debug_log_error+0x84>)
            uint8_t x = (unsigned long int)((unsigned long int)value >> (i * 4)) & 0xF;
    22e2:	fa24 f302 	lsr.w	r3, r4, r2
            *bufp = hex[x];
    22e6:	f003 030f 	and.w	r3, r3, #15
    22ea:	4403      	add	r3, r0
    22ec:	7d1b      	ldrb	r3, [r3, #20]
    22ee:	f801 3b01 	strb.w	r3, [r1], #1
    22f2:	3a04      	subs	r2, #4
        for(i = value_len * 2 - 1; i >= 0; i--) {
    22f4:	f112 0f04 	cmn.w	r2, #4
    22f8:	d1f3      	bne.n	22e2 <lv_debug_log_error+0x36>
            bufp++;
        }

        *bufp = ')';
    22fa:	2329      	movs	r3, #41	; 0x29
    22fc:	732b      	strb	r3, [r5, #12]
        bufp ++;

        *bufp = '\0';
    22fe:	2300      	movs	r3, #0
    2300:	736b      	strb	r3, [r5, #13]
        LV_LOG_ERROR(buf);
    2302:	ab02      	add	r3, sp, #8
    2304:	9300      	str	r3, [sp, #0]
    2306:	4b0b      	ldr	r3, [pc, #44]	; (2334 <lv_debug_log_error+0x88>)
    2308:	22bc      	movs	r2, #188	; 0xbc
    230a:	490b      	ldr	r1, [pc, #44]	; (2338 <lv_debug_log_error+0x8c>)
    230c:	2003      	movs	r0, #3
    230e:	4c0b      	ldr	r4, [pc, #44]	; (233c <lv_debug_log_error+0x90>)
    2310:	47a0      	blx	r4
    }
    else {
        LV_LOG_ERROR(msg);
    }
}
    2312:	b043      	add	sp, #268	; 0x10c
    2314:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LV_LOG_ERROR(msg);
    2316:	9500      	str	r5, [sp, #0]
    2318:	4b06      	ldr	r3, [pc, #24]	; (2334 <lv_debug_log_error+0x88>)
    231a:	22bf      	movs	r2, #191	; 0xbf
    231c:	4906      	ldr	r1, [pc, #24]	; (2338 <lv_debug_log_error+0x8c>)
    231e:	2003      	movs	r0, #3
    2320:	4c06      	ldr	r4, [pc, #24]	; (233c <lv_debug_log_error+0x90>)
    2322:	47a0      	blx	r4
}
    2324:	e7f5      	b.n	2312 <lv_debug_log_error+0x66>
    2326:	bf00      	nop
    2328:	0001b513 	.word	0x0001b513
    232c:	00012649 	.word	0x00012649
    2330:	00023be0 	.word	0x00023be0
    2334:	00023c08 	.word	0x00023c08
    2338:	00023c1c 	.word	0x00023c1c
    233c:	00012251 	.word	0x00012251

00002340 <lv_disp_get_scr_act>:
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
    if(!disp) disp = lv_disp_get_default();
    2340:	b108      	cbz	r0, 2346 <lv_disp_get_scr_act+0x6>
    if(!disp) {
        LV_LOG_WARN("lv_scr_act: no display registered to get its act. screen");
        return NULL;
    }

    return disp->act_scr;
    2342:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    2344:	4770      	bx	lr
{
    2346:	b510      	push	{r4, lr}
    2348:	b082      	sub	sp, #8
    if(!disp) disp = lv_disp_get_default();
    234a:	4b08      	ldr	r3, [pc, #32]	; (236c <lv_disp_get_scr_act+0x2c>)
    234c:	4798      	blx	r3
    if(!disp) {
    234e:	b110      	cbz	r0, 2356 <lv_disp_get_scr_act+0x16>
    return disp->act_scr;
    2350:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
    2352:	b002      	add	sp, #8
    2354:	bd10      	pop	{r4, pc}
        LV_LOG_WARN("lv_scr_act: no display registered to get its act. screen");
    2356:	4b06      	ldr	r3, [pc, #24]	; (2370 <lv_disp_get_scr_act+0x30>)
    2358:	9300      	str	r3, [sp, #0]
    235a:	4b06      	ldr	r3, [pc, #24]	; (2374 <lv_disp_get_scr_act+0x34>)
    235c:	222e      	movs	r2, #46	; 0x2e
    235e:	4906      	ldr	r1, [pc, #24]	; (2378 <lv_disp_get_scr_act+0x38>)
    2360:	2002      	movs	r0, #2
    2362:	4c06      	ldr	r4, [pc, #24]	; (237c <lv_disp_get_scr_act+0x3c>)
    2364:	47a0      	blx	r4
        return NULL;
    2366:	2000      	movs	r0, #0
    2368:	e7f3      	b.n	2352 <lv_disp_get_scr_act+0x12>
    236a:	bf00      	nop
    236c:	00010ed5 	.word	0x00010ed5
    2370:	00023df8 	.word	0x00023df8
    2374:	00023d24 	.word	0x00023d24
    2378:	00023dcc 	.word	0x00023dcc
    237c:	00012251 	.word	0x00012251

00002380 <lv_disp_get_layer_top>:
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
    if(!disp) disp = lv_disp_get_default();
    2380:	b108      	cbz	r0, 2386 <lv_disp_get_layer_top+0x6>
    if(!disp) {
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
    }

    return disp->top_layer;
    2382:	6c00      	ldr	r0, [r0, #64]	; 0x40
    2384:	4770      	bx	lr
{
    2386:	b510      	push	{r4, lr}
    2388:	b082      	sub	sp, #8
    if(!disp) disp = lv_disp_get_default();
    238a:	4b08      	ldr	r3, [pc, #32]	; (23ac <lv_disp_get_layer_top+0x2c>)
    238c:	4798      	blx	r3
    if(!disp) {
    238e:	b110      	cbz	r0, 2396 <lv_disp_get_layer_top+0x16>
    return disp->top_layer;
    2390:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
    2392:	b002      	add	sp, #8
    2394:	bd10      	pop	{r4, pc}
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
    2396:	4b06      	ldr	r3, [pc, #24]	; (23b0 <lv_disp_get_layer_top+0x30>)
    2398:	9300      	str	r3, [sp, #0]
    239a:	4b06      	ldr	r3, [pc, #24]	; (23b4 <lv_disp_get_layer_top+0x34>)
    239c:	224b      	movs	r2, #75	; 0x4b
    239e:	4906      	ldr	r1, [pc, #24]	; (23b8 <lv_disp_get_layer_top+0x38>)
    23a0:	2002      	movs	r0, #2
    23a2:	4c06      	ldr	r4, [pc, #24]	; (23bc <lv_disp_get_layer_top+0x3c>)
    23a4:	47a0      	blx	r4
        return NULL;
    23a6:	2000      	movs	r0, #0
    23a8:	e7f3      	b.n	2392 <lv_disp_get_layer_top+0x12>
    23aa:	bf00      	nop
    23ac:	00010ed5 	.word	0x00010ed5
    23b0:	00023e34 	.word	0x00023e34
    23b4:	00023d38 	.word	0x00023d38
    23b8:	00023dcc 	.word	0x00023dcc
    23bc:	00012251 	.word	0x00012251

000023c0 <lv_disp_get_layer_sys>:
 * @param disp pointer to display which sys. layer  should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
    if(!disp) disp = lv_disp_get_default();
    23c0:	b108      	cbz	r0, 23c6 <lv_disp_get_layer_sys+0x6>
    if(!disp) {
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
    }

    return disp->sys_layer;
    23c2:	6c40      	ldr	r0, [r0, #68]	; 0x44
    23c4:	4770      	bx	lr
{
    23c6:	b510      	push	{r4, lr}
    23c8:	b082      	sub	sp, #8
    if(!disp) disp = lv_disp_get_default();
    23ca:	4b08      	ldr	r3, [pc, #32]	; (23ec <lv_disp_get_layer_sys+0x2c>)
    23cc:	4798      	blx	r3
    if(!disp) {
    23ce:	b110      	cbz	r0, 23d6 <lv_disp_get_layer_sys+0x16>
    return disp->sys_layer;
    23d0:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
    23d2:	b002      	add	sp, #8
    23d4:	bd10      	pop	{r4, pc}
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
    23d6:	4b06      	ldr	r3, [pc, #24]	; (23f0 <lv_disp_get_layer_sys+0x30>)
    23d8:	9300      	str	r3, [sp, #0]
    23da:	4b06      	ldr	r3, [pc, #24]	; (23f4 <lv_disp_get_layer_sys+0x34>)
    23dc:	225c      	movs	r2, #92	; 0x5c
    23de:	4906      	ldr	r1, [pc, #24]	; (23f8 <lv_disp_get_layer_sys+0x38>)
    23e0:	2002      	movs	r0, #2
    23e2:	4c06      	ldr	r4, [pc, #24]	; (23fc <lv_disp_get_layer_sys+0x3c>)
    23e4:	47a0      	blx	r4
        return NULL;
    23e6:	2000      	movs	r0, #0
    23e8:	e7f3      	b.n	23d2 <lv_disp_get_layer_sys+0x12>
    23ea:	bf00      	nop
    23ec:	00010ed5 	.word	0x00010ed5
    23f0:	00023e70 	.word	0x00023e70
    23f4:	00023d50 	.word	0x00023d50
    23f8:	00023dcc 	.word	0x00023dcc
    23fc:	00012251 	.word	0x00012251

00002400 <obj_to_foreground>:
static void obj_to_foreground(lv_obj_t * obj)
{
    /*Search for 'top' attribute*/
    lv_obj_t * i        = obj;
    lv_obj_t * last_top = NULL;
    while(i != NULL) {
    2400:	b1a0      	cbz	r0, 242c <obj_to_foreground+0x2c>
{
    2402:	b538      	push	{r3, r4, r5, lr}
    2404:	4603      	mov	r3, r0
    while(i != NULL) {
    2406:	2400      	movs	r4, #0
        if(i->top != 0) last_top = i;
        i = lv_obj_get_parent(i);
    2408:	4d09      	ldr	r5, [pc, #36]	; (2430 <obj_to_foreground+0x30>)
        if(i->top != 0) last_top = i;
    240a:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
    240e:	f002 0220 	and.w	r2, r2, #32
    2412:	2a00      	cmp	r2, #0
    2414:	bf18      	it	ne
    2416:	461c      	movne	r4, r3
        i = lv_obj_get_parent(i);
    2418:	4618      	mov	r0, r3
    241a:	47a8      	blx	r5
    while(i != NULL) {
    241c:	4603      	mov	r3, r0
    241e:	2800      	cmp	r0, #0
    2420:	d1f3      	bne.n	240a <obj_to_foreground+0xa>
    }

    if(last_top != NULL) {
    2422:	b114      	cbz	r4, 242a <obj_to_foreground+0x2a>
        /*Move the last_top object to the foreground*/
        lv_obj_move_foreground(last_top);
    2424:	4620      	mov	r0, r4
    2426:	4b03      	ldr	r3, [pc, #12]	; (2434 <obj_to_foreground+0x34>)
    2428:	4798      	blx	r3
    242a:	bd38      	pop	{r3, r4, r5, pc}
    242c:	4770      	bx	lr
    242e:	bf00      	nop
    2430:	00002c71 	.word	0x00002c71
    2434:	000033a9 	.word	0x000033a9

00002438 <focus_next_core>:
{
    2438:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(group->frozen) return;
    243c:	7d03      	ldrb	r3, [r0, #20]
    243e:	f013 0f01 	tst.w	r3, #1
    2442:	d12a      	bne.n	249a <focus_next_core+0x62>
    2444:	4617      	mov	r7, r2
    2446:	468a      	mov	sl, r1
    2448:	4606      	mov	r6, r0
    lv_obj_t ** obj_next     = group->obj_focus;
    244a:	68c4      	ldr	r4, [r0, #12]
    bool can_begin           = true;
    244c:	f04f 0901 	mov.w	r9, #1
    lv_obj_t ** obj_sentinel = NULL;
    2450:	2500      	movs	r5, #0
        if(!lv_obj_get_hidden(*obj_next)) break;
    2452:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 2518 <focus_next_core+0xe0>
                can_begin = false;
    2456:	46ab      	mov	fp, r5
    2458:	e04a      	b.n	24f0 <focus_next_core+0xb8>
            if(group->wrap || obj_sentinel == NULL) {
    245a:	7d33      	ldrb	r3, [r6, #20]
    245c:	f013 0f10 	tst.w	r3, #16
    2460:	d100      	bne.n	2464 <focus_next_core+0x2c>
    2462:	b9d5      	cbnz	r5, 249a <focus_next_core+0x62>
                if(!can_begin) return;
    2464:	f1b9 0f00 	cmp.w	r9, #0
    2468:	d017      	beq.n	249a <focus_next_core+0x62>
                obj_next  = begin(&group->obj_ll);
    246a:	4630      	mov	r0, r6
    246c:	47d0      	blx	sl
    246e:	4604      	mov	r4, r0
        if(obj_sentinel == NULL) {
    2470:	2d00      	cmp	r5, #0
    2472:	d035      	beq.n	24e0 <focus_next_core+0xa8>
                can_begin = false;
    2474:	46d9      	mov	r9, fp
    2476:	e046      	b.n	2506 <focus_next_core+0xce>
    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
    2478:	68f3      	ldr	r3, [r6, #12]
    247a:	42a3      	cmp	r3, r4
    247c:	d00d      	beq.n	249a <focus_next_core+0x62>
    if(group->obj_focus) {
    247e:	b193      	cbz	r3, 24a6 <focus_next_core+0x6e>
        (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
    2480:	6818      	ldr	r0, [r3, #0]
    2482:	69c3      	ldr	r3, [r0, #28]
    2484:	2200      	movs	r2, #0
    2486:	2117      	movs	r1, #23
    2488:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, NULL);
    248a:	68f3      	ldr	r3, [r6, #12]
    248c:	2200      	movs	r2, #0
    248e:	210e      	movs	r1, #14
    2490:	6818      	ldr	r0, [r3, #0]
    2492:	4b1e      	ldr	r3, [pc, #120]	; (250c <focus_next_core+0xd4>)
    2494:	4798      	blx	r3
        if(res != LV_RES_OK) return;
    2496:	2801      	cmp	r0, #1
    2498:	d001      	beq.n	249e <focus_next_core+0x66>
    249a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_obj_invalidate(*group->obj_focus);
    249e:	68f3      	ldr	r3, [r6, #12]
    24a0:	6818      	ldr	r0, [r3, #0]
    24a2:	4b1b      	ldr	r3, [pc, #108]	; (2510 <focus_next_core+0xd8>)
    24a4:	4798      	blx	r3
    group->obj_focus = obj_next;
    24a6:	60f4      	str	r4, [r6, #12]
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
    24a8:	6820      	ldr	r0, [r4, #0]
    24aa:	69c3      	ldr	r3, [r0, #28]
    24ac:	2200      	movs	r2, #0
    24ae:	2116      	movs	r1, #22
    24b0:	4798      	blx	r3
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
    24b2:	68f3      	ldr	r3, [r6, #12]
    24b4:	2200      	movs	r2, #0
    24b6:	210d      	movs	r1, #13
    24b8:	6818      	ldr	r0, [r3, #0]
    24ba:	4b14      	ldr	r3, [pc, #80]	; (250c <focus_next_core+0xd4>)
    24bc:	4798      	blx	r3
    if(res != LV_RES_OK) return;
    24be:	2801      	cmp	r0, #1
    24c0:	d1eb      	bne.n	249a <focus_next_core+0x62>
    obj_to_foreground(*group->obj_focus);
    24c2:	68f3      	ldr	r3, [r6, #12]
    24c4:	6818      	ldr	r0, [r3, #0]
    24c6:	4b13      	ldr	r3, [pc, #76]	; (2514 <focus_next_core+0xdc>)
    24c8:	4798      	blx	r3
    lv_obj_invalidate(*group->obj_focus);
    24ca:	68f3      	ldr	r3, [r6, #12]
    24cc:	6818      	ldr	r0, [r3, #0]
    24ce:	4b10      	ldr	r3, [pc, #64]	; (2510 <focus_next_core+0xd8>)
    24d0:	4798      	blx	r3
    if(group->focus_cb) group->focus_cb(group);
    24d2:	6933      	ldr	r3, [r6, #16]
    24d4:	2b00      	cmp	r3, #0
    24d6:	d0e0      	beq.n	249a <focus_next_core+0x62>
    24d8:	4630      	mov	r0, r6
    24da:	4798      	blx	r3
    24dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(obj_sentinel == NULL) return; /*Group is empty*/
    24e0:	2800      	cmp	r0, #0
    24e2:	d0da      	beq.n	249a <focus_next_core+0x62>
                obj_next  = begin(&group->obj_ll);
    24e4:	4605      	mov	r5, r0
                can_begin = false;
    24e6:	46d9      	mov	r9, fp
        if(!lv_obj_get_hidden(*obj_next)) break;
    24e8:	6820      	ldr	r0, [r4, #0]
    24ea:	47c0      	blx	r8
    24ec:	2800      	cmp	r0, #0
    24ee:	d0c3      	beq.n	2478 <focus_next_core+0x40>
        if(obj_next == NULL) {
    24f0:	2c00      	cmp	r4, #0
    24f2:	d0b2      	beq.n	245a <focus_next_core+0x22>
    24f4:	2d00      	cmp	r5, #0
    24f6:	bf08      	it	eq
    24f8:	4625      	moveq	r5, r4
            obj_next = move(&group->obj_ll, obj_next);
    24fa:	4621      	mov	r1, r4
    24fc:	4630      	mov	r0, r6
    24fe:	47b8      	blx	r7
    2500:	4604      	mov	r4, r0
            if(obj_next == obj_sentinel) return;
    2502:	42a8      	cmp	r0, r5
    2504:	d0c9      	beq.n	249a <focus_next_core+0x62>
        if(obj_next == NULL) continue;
    2506:	2c00      	cmp	r4, #0
    2508:	d1ee      	bne.n	24e8 <focus_next_core+0xb0>
    250a:	e7f1      	b.n	24f0 <focus_next_core+0xb8>
    250c:	00002ac1 	.word	0x00002ac1
    2510:	00003315 	.word	0x00003315
    2514:	00002401 	.word	0x00002401
    2518:	00003199 	.word	0x00003199

0000251c <_lv_group_init>:
{
    251c:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
    251e:	2118      	movs	r1, #24
    2520:	4801      	ldr	r0, [pc, #4]	; (2528 <_lv_group_init+0xc>)
    2522:	4b02      	ldr	r3, [pc, #8]	; (252c <_lv_group_init+0x10>)
    2524:	4798      	blx	r3
    2526:	bd08      	pop	{r3, pc}
    2528:	2000c7e8 	.word	0x2000c7e8
    252c:	00011eed 	.word	0x00011eed

00002530 <lv_group_focus_next>:
{
    2530:	b508      	push	{r3, lr}
    focus_next_core(group, _lv_ll_get_head, _lv_ll_get_next);
    2532:	4a02      	ldr	r2, [pc, #8]	; (253c <lv_group_focus_next+0xc>)
    2534:	4902      	ldr	r1, [pc, #8]	; (2540 <lv_group_focus_next+0x10>)
    2536:	4b03      	ldr	r3, [pc, #12]	; (2544 <lv_group_focus_next+0x14>)
    2538:	4798      	blx	r3
    253a:	bd08      	pop	{r3, pc}
    253c:	00011fb1 	.word	0x00011fb1
    2540:	00011f9d 	.word	0x00011f9d
    2544:	00002439 	.word	0x00002439

00002548 <lv_group_focus_prev>:
{
    2548:	b508      	push	{r3, lr}
    focus_next_core(group, _lv_ll_get_tail, _lv_ll_get_prev);
    254a:	4a02      	ldr	r2, [pc, #8]	; (2554 <lv_group_focus_prev+0xc>)
    254c:	4902      	ldr	r1, [pc, #8]	; (2558 <lv_group_focus_prev+0x10>)
    254e:	4b03      	ldr	r3, [pc, #12]	; (255c <lv_group_focus_prev+0x14>)
    2550:	4798      	blx	r3
    2552:	bd08      	pop	{r3, pc}
    2554:	00011fdd 	.word	0x00011fdd
    2558:	00011fa7 	.word	0x00011fa7
    255c:	00002439 	.word	0x00002439

00002560 <lv_group_refocus>:
{
    2560:	b538      	push	{r3, r4, r5, lr}
    2562:	4604      	mov	r4, r0
    uint8_t temp_wrap = g->wrap;
    2564:	7d03      	ldrb	r3, [r0, #20]
    2566:	f3c3 1500 	ubfx	r5, r3, #4, #1
    g->wrap           = 1;
    256a:	f043 0310 	orr.w	r3, r3, #16
    256e:	7503      	strb	r3, [r0, #20]
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
    2570:	f013 0f08 	tst.w	r3, #8
        lv_group_focus_next(g);
    2574:	bf0c      	ite	eq
    2576:	4b04      	ldreq	r3, [pc, #16]	; (2588 <lv_group_refocus+0x28>)
        lv_group_focus_prev(g);
    2578:	4b04      	ldrne	r3, [pc, #16]	; (258c <lv_group_refocus+0x2c>)
    257a:	4798      	blx	r3
    g->wrap = temp_wrap;
    257c:	7d23      	ldrb	r3, [r4, #20]
    257e:	f365 1304 	bfi	r3, r5, #4, #1
    2582:	7523      	strb	r3, [r4, #20]
    2584:	bd38      	pop	{r3, r4, r5, pc}
    2586:	bf00      	nop
    2588:	00002531 	.word	0x00002531
    258c:	00002549 	.word	0x00002549

00002590 <lv_group_add_obj>:
    if(group == NULL) return;
    2590:	2800      	cmp	r0, #0
    2592:	d04f      	beq.n	2634 <lv_group_add_obj+0xa4>
{
    2594:	b5f0      	push	{r4, r5, r6, r7, lr}
    2596:	b083      	sub	sp, #12
    2598:	4605      	mov	r5, r0
    259a:	460c      	mov	r4, r1
    _LV_LL_READ(group->obj_ll, obj_i) {
    259c:	4607      	mov	r7, r0
    259e:	4b26      	ldr	r3, [pc, #152]	; (2638 <lv_group_add_obj+0xa8>)
    25a0:	4798      	blx	r3
    25a2:	4601      	mov	r1, r0
    25a4:	b1a0      	cbz	r0, 25d0 <lv_group_add_obj+0x40>
        if((*obj_i) == obj) {
    25a6:	6803      	ldr	r3, [r0, #0]
    25a8:	429c      	cmp	r4, r3
    25aa:	d007      	beq.n	25bc <lv_group_add_obj+0x2c>
    _LV_LL_READ(group->obj_ll, obj_i) {
    25ac:	4e23      	ldr	r6, [pc, #140]	; (263c <lv_group_add_obj+0xac>)
    25ae:	4638      	mov	r0, r7
    25b0:	47b0      	blx	r6
    25b2:	4601      	mov	r1, r0
    25b4:	b160      	cbz	r0, 25d0 <lv_group_add_obj+0x40>
        if((*obj_i) == obj) {
    25b6:	680b      	ldr	r3, [r1, #0]
    25b8:	42a3      	cmp	r3, r4
    25ba:	d1f8      	bne.n	25ae <lv_group_add_obj+0x1e>
            LV_LOG_INFO("lv_group_add_obj: the object is already added to this group");
    25bc:	4b20      	ldr	r3, [pc, #128]	; (2640 <lv_group_add_obj+0xb0>)
    25be:	9300      	str	r3, [sp, #0]
    25c0:	4b20      	ldr	r3, [pc, #128]	; (2644 <lv_group_add_obj+0xb4>)
    25c2:	2275      	movs	r2, #117	; 0x75
    25c4:	4920      	ldr	r1, [pc, #128]	; (2648 <lv_group_add_obj+0xb8>)
    25c6:	2001      	movs	r0, #1
    25c8:	4c20      	ldr	r4, [pc, #128]	; (264c <lv_group_add_obj+0xbc>)
    25ca:	47a0      	blx	r4
}
    25cc:	b003      	add	sp, #12
    25ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(obj->group_p) {
    25d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    25d2:	b173      	cbz	r3, 25f2 <lv_group_add_obj+0x62>
        if(lv_obj_is_focused(obj)) {
    25d4:	4620      	mov	r0, r4
    25d6:	4b1e      	ldr	r3, [pc, #120]	; (2650 <lv_group_add_obj+0xc0>)
    25d8:	4798      	blx	r3
    25da:	b150      	cbz	r0, 25f2 <lv_group_add_obj+0x62>
            lv_group_refocus(obj->group_p);
    25dc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    25de:	4b1d      	ldr	r3, [pc, #116]	; (2654 <lv_group_add_obj+0xc4>)
    25e0:	4798      	blx	r3
            LV_LOG_INFO("lv_group_add_obj: assign object to an other group");
    25e2:	4b1d      	ldr	r3, [pc, #116]	; (2658 <lv_group_add_obj+0xc8>)
    25e4:	9300      	str	r3, [sp, #0]
    25e6:	4b17      	ldr	r3, [pc, #92]	; (2644 <lv_group_add_obj+0xb4>)
    25e8:	227f      	movs	r2, #127	; 0x7f
    25ea:	4917      	ldr	r1, [pc, #92]	; (2648 <lv_group_add_obj+0xb8>)
    25ec:	2001      	movs	r0, #1
    25ee:	4e17      	ldr	r6, [pc, #92]	; (264c <lv_group_add_obj+0xbc>)
    25f0:	47b0      	blx	r6
    obj->group_p     = group;
    25f2:	63a5      	str	r5, [r4, #56]	; 0x38
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
    25f4:	4628      	mov	r0, r5
    25f6:	4b19      	ldr	r3, [pc, #100]	; (265c <lv_group_add_obj+0xcc>)
    25f8:	4798      	blx	r3
    25fa:	4606      	mov	r6, r0
    LV_ASSERT_MEM(next);
    25fc:	4b18      	ldr	r3, [pc, #96]	; (2660 <lv_group_add_obj+0xd0>)
    25fe:	4798      	blx	r3
    2600:	b158      	cbz	r0, 261a <lv_group_add_obj+0x8a>
    if(next == NULL) return;
    2602:	2e00      	cmp	r6, #0
    2604:	d0e2      	beq.n	25cc <lv_group_add_obj+0x3c>
    *next = obj;
    2606:	6034      	str	r4, [r6, #0]
    if(_lv_ll_get_head(&group->obj_ll) == next) {
    2608:	4628      	mov	r0, r5
    260a:	4b0b      	ldr	r3, [pc, #44]	; (2638 <lv_group_add_obj+0xa8>)
    260c:	4798      	blx	r3
    260e:	4286      	cmp	r6, r0
    2610:	d1dc      	bne.n	25cc <lv_group_add_obj+0x3c>
        lv_group_refocus(group);
    2612:	4628      	mov	r0, r5
    2614:	4b0f      	ldr	r3, [pc, #60]	; (2654 <lv_group_add_obj+0xc4>)
    2616:	4798      	blx	r3
    2618:	e7d8      	b.n	25cc <lv_group_add_obj+0x3c>
    LV_ASSERT_MEM(next);
    261a:	4b0a      	ldr	r3, [pc, #40]	; (2644 <lv_group_add_obj+0xb4>)
    261c:	9300      	str	r3, [sp, #0]
    261e:	2285      	movs	r2, #133	; 0x85
    2620:	4909      	ldr	r1, [pc, #36]	; (2648 <lv_group_add_obj+0xb8>)
    2622:	2003      	movs	r0, #3
    2624:	4c09      	ldr	r4, [pc, #36]	; (264c <lv_group_add_obj+0xbc>)
    2626:	47a0      	blx	r4
    2628:	4632      	mov	r2, r6
    262a:	2300      	movs	r3, #0
    262c:	480d      	ldr	r0, [pc, #52]	; (2664 <lv_group_add_obj+0xd4>)
    262e:	490e      	ldr	r1, [pc, #56]	; (2668 <lv_group_add_obj+0xd8>)
    2630:	4788      	blx	r1
    2632:	e7fe      	b.n	2632 <lv_group_add_obj+0xa2>
    2634:	4770      	bx	lr
    2636:	bf00      	nop
    2638:	00011f9d 	.word	0x00011f9d
    263c:	00011fb1 	.word	0x00011fb1
    2640:	00023fdc 	.word	0x00023fdc
    2644:	00023f8c 	.word	0x00023f8c
    2648:	00023fa0 	.word	0x00023fa0
    264c:	00012251 	.word	0x00012251
    2650:	00004fed 	.word	0x00004fed
    2654:	00002561 	.word	0x00002561
    2658:	00024018 	.word	0x00024018
    265c:	00011f51 	.word	0x00011f51
    2660:	000022a5 	.word	0x000022a5
    2664:	00023fcc 	.word	0x00023fcc
    2668:	000022ad 	.word	0x000022ad

0000266c <lv_group_remove_obj>:
{
    266c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    lv_group_t * g = obj->group_p;
    2670:	f8d0 8038 	ldr.w	r8, [r0, #56]	; 0x38
    if(g == NULL) return;
    2674:	f1b8 0f00 	cmp.w	r8, #0
    2678:	d051      	beq.n	271e <lv_group_remove_obj+0xb2>
    if(g->obj_focus == NULL) return; /*Just to be sure (Not possible if there is at least one object in the group)*/
    267a:	f8d8 300c 	ldr.w	r3, [r8, #12]
    267e:	2b00      	cmp	r3, #0
    2680:	d04d      	beq.n	271e <lv_group_remove_obj+0xb2>
    2682:	4605      	mov	r5, r0
    if(*g->obj_focus == obj) {
    2684:	681b      	ldr	r3, [r3, #0]
    2686:	4298      	cmp	r0, r3
    2688:	d01e      	beq.n	26c8 <lv_group_remove_obj+0x5c>
    _LV_LL_READ(g->obj_ll, i) {
    268a:	4646      	mov	r6, r8
    268c:	4640      	mov	r0, r8
    268e:	4b25      	ldr	r3, [pc, #148]	; (2724 <lv_group_remove_obj+0xb8>)
    2690:	4798      	blx	r3
    2692:	4604      	mov	r4, r0
    2694:	2800      	cmp	r0, #0
    2696:	d042      	beq.n	271e <lv_group_remove_obj+0xb2>
        if(*i == obj) {
    2698:	6803      	ldr	r3, [r0, #0]
    269a:	429d      	cmp	r5, r3
    269c:	d009      	beq.n	26b2 <lv_group_remove_obj+0x46>
    _LV_LL_READ(g->obj_ll, i) {
    269e:	4f22      	ldr	r7, [pc, #136]	; (2728 <lv_group_remove_obj+0xbc>)
    26a0:	4621      	mov	r1, r4
    26a2:	4630      	mov	r0, r6
    26a4:	47b8      	blx	r7
    26a6:	4604      	mov	r4, r0
    26a8:	2800      	cmp	r0, #0
    26aa:	d038      	beq.n	271e <lv_group_remove_obj+0xb2>
        if(*i == obj) {
    26ac:	6823      	ldr	r3, [r4, #0]
    26ae:	429d      	cmp	r5, r3
    26b0:	d1f6      	bne.n	26a0 <lv_group_remove_obj+0x34>
            _lv_ll_remove(&g->obj_ll, i);
    26b2:	4621      	mov	r1, r4
    26b4:	4640      	mov	r0, r8
    26b6:	4b1d      	ldr	r3, [pc, #116]	; (272c <lv_group_remove_obj+0xc0>)
    26b8:	4798      	blx	r3
            lv_mem_free(i);
    26ba:	4620      	mov	r0, r4
    26bc:	4b1c      	ldr	r3, [pc, #112]	; (2730 <lv_group_remove_obj+0xc4>)
    26be:	4798      	blx	r3
            obj->group_p = NULL;
    26c0:	2300      	movs	r3, #0
    26c2:	63ab      	str	r3, [r5, #56]	; 0x38
            break;
    26c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(g->frozen) g->frozen = 0;
    26c8:	f898 3014 	ldrb.w	r3, [r8, #20]
    26cc:	f013 0f01 	tst.w	r3, #1
    26d0:	d005      	beq.n	26de <lv_group_remove_obj+0x72>
    26d2:	f898 3014 	ldrb.w	r3, [r8, #20]
    26d6:	f36f 0300 	bfc	r3, #0, #1
    26da:	f888 3014 	strb.w	r3, [r8, #20]
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
    26de:	4640      	mov	r0, r8
    26e0:	4b10      	ldr	r3, [pc, #64]	; (2724 <lv_group_remove_obj+0xb8>)
    26e2:	4798      	blx	r3
    26e4:	f8d8 300c 	ldr.w	r3, [r8, #12]
    26e8:	4283      	cmp	r3, r0
    26ea:	d00b      	beq.n	2704 <lv_group_remove_obj+0x98>
            lv_group_refocus(g);
    26ec:	4640      	mov	r0, r8
    26ee:	4b11      	ldr	r3, [pc, #68]	; (2734 <lv_group_remove_obj+0xc8>)
    26f0:	4798      	blx	r3
    if(*g->obj_focus == obj) {
    26f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
    26f6:	681b      	ldr	r3, [r3, #0]
    26f8:	429d      	cmp	r5, r3
        g->obj_focus = NULL;
    26fa:	bf04      	itt	eq
    26fc:	2300      	moveq	r3, #0
    26fe:	f8c8 300c 	streq.w	r3, [r8, #12]
    2702:	e7c2      	b.n	268a <lv_group_remove_obj+0x1e>
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
    2704:	4640      	mov	r0, r8
    2706:	4b0c      	ldr	r3, [pc, #48]	; (2738 <lv_group_remove_obj+0xcc>)
    2708:	4798      	blx	r3
    270a:	f8d8 300c 	ldr.w	r3, [r8, #12]
    270e:	4298      	cmp	r0, r3
    2710:	d1ec      	bne.n	26ec <lv_group_remove_obj+0x80>
            (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
    2712:	6800      	ldr	r0, [r0, #0]
    2714:	69c3      	ldr	r3, [r0, #28]
    2716:	2200      	movs	r2, #0
    2718:	2117      	movs	r1, #23
    271a:	4798      	blx	r3
    271c:	e7e9      	b.n	26f2 <lv_group_remove_obj+0x86>
    271e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2722:	bf00      	nop
    2724:	00011f9d 	.word	0x00011f9d
    2728:	00011fb1 	.word	0x00011fb1
    272c:	00012089 	.word	0x00012089
    2730:	000124b9 	.word	0x000124b9
    2734:	00002561 	.word	0x00002561
    2738:	00011fa7 	.word	0x00011fa7

0000273c <lv_group_get_focused>:
    if(!group) return NULL;
    273c:	b118      	cbz	r0, 2746 <lv_group_get_focused+0xa>
    if(group->obj_focus == NULL) return NULL;
    273e:	68c3      	ldr	r3, [r0, #12]
    2740:	b11b      	cbz	r3, 274a <lv_group_get_focused+0xe>
    return *group->obj_focus;
    2742:	6818      	ldr	r0, [r3, #0]
    2744:	4770      	bx	lr
    if(!group) return NULL;
    2746:	2000      	movs	r0, #0
    2748:	4770      	bx	lr
    if(group->obj_focus == NULL) return NULL;
    274a:	2000      	movs	r0, #0
}
    274c:	4770      	bx	lr

0000274e <lv_group_get_editing>:
    if(!group) return false;
    274e:	b118      	cbz	r0, 2758 <lv_group_get_editing+0xa>
    return group->editing ? true : false;
    2750:	7d00      	ldrb	r0, [r0, #20]
    2752:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2756:	4770      	bx	lr
    if(!group) return false;
    2758:	2000      	movs	r0, #0
}
    275a:	4770      	bx	lr

0000275c <lv_indev_get_act>:
 * right now
 */
lv_indev_t * lv_indev_get_act(void)
{
    return indev_act;
}
    275c:	4b01      	ldr	r3, [pc, #4]	; (2764 <lv_indev_get_act+0x8>)
    275e:	6858      	ldr	r0, [r3, #4]
    2760:	4770      	bx	lr
    2762:	bf00      	nop
    2764:	20008070 	.word	0x20008070

00002768 <lv_indev_reset>:
 * Reset one or all input devices
 * @param indev pointer to an input device to reset or NULL to reset all of them
 * @param obj pointer to an object which triggers the reset.
 */
void lv_indev_reset(lv_indev_t * indev, lv_obj_t * obj)
{
    2768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(indev) {
    276a:	b1b0      	cbz	r0, 279a <lv_indev_reset+0x32>
    276c:	4603      	mov	r3, r0
        indev->proc.reset_query = 1;
    276e:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
    2772:	f042 0202 	orr.w	r2, r2, #2
    2776:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
        if(indev_act == indev) indev_obj_act = NULL;
    277a:	4a18      	ldr	r2, [pc, #96]	; (27dc <lv_indev_reset+0x74>)
    277c:	6852      	ldr	r2, [r2, #4]
    277e:	4290      	cmp	r0, r2
    2780:	d004      	beq.n	278c <lv_indev_reset+0x24>
        if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
    2782:	b139      	cbz	r1, 2794 <lv_indev_reset+0x2c>
    2784:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    2786:	4291      	cmp	r1, r2
    2788:	d004      	beq.n	2794 <lv_indev_reset+0x2c>
    278a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(indev_act == indev) indev_obj_act = NULL;
    278c:	2000      	movs	r0, #0
    278e:	4a13      	ldr	r2, [pc, #76]	; (27dc <lv_indev_reset+0x74>)
    2790:	6010      	str	r0, [r2, #0]
    2792:	e7f6      	b.n	2782 <lv_indev_reset+0x1a>
            indev->proc.types.pointer.last_pressed = NULL;
    2794:	2200      	movs	r2, #0
    2796:	63da      	str	r2, [r3, #60]	; 0x3c
    2798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    279a:	460c      	mov	r4, r1
        }
    }
    else {
        lv_indev_t * i = lv_indev_get_next(NULL);
    279c:	2000      	movs	r0, #0
    279e:	4b10      	ldr	r3, [pc, #64]	; (27e0 <lv_indev_reset+0x78>)
    27a0:	4798      	blx	r3
        while(i) {
    27a2:	4603      	mov	r3, r0
    27a4:	2800      	cmp	r0, #0
    27a6:	d0f0      	beq.n	278a <lv_indev_reset+0x22>
            i->proc.reset_query = 1;
            if(indev_act == i) indev_obj_act = NULL;
    27a8:	4d0c      	ldr	r5, [pc, #48]	; (27dc <lv_indev_reset+0x74>)
    27aa:	2700      	movs	r7, #0
            if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
                i->proc.types.pointer.last_pressed = NULL;
            }
            i = lv_indev_get_next(i);
    27ac:	4e0c      	ldr	r6, [pc, #48]	; (27e0 <lv_indev_reset+0x78>)
    27ae:	e005      	b.n	27bc <lv_indev_reset+0x54>
                i->proc.types.pointer.last_pressed = NULL;
    27b0:	63df      	str	r7, [r3, #60]	; 0x3c
            i = lv_indev_get_next(i);
    27b2:	4618      	mov	r0, r3
    27b4:	47b0      	blx	r6
        while(i) {
    27b6:	4603      	mov	r3, r0
    27b8:	2800      	cmp	r0, #0
    27ba:	d0e6      	beq.n	278a <lv_indev_reset+0x22>
            i->proc.reset_query = 1;
    27bc:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
    27c0:	f042 0202 	orr.w	r2, r2, #2
    27c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            if(indev_act == i) indev_obj_act = NULL;
    27c8:	686a      	ldr	r2, [r5, #4]
    27ca:	429a      	cmp	r2, r3
    27cc:	bf08      	it	eq
    27ce:	602f      	streq	r7, [r5, #0]
            if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
    27d0:	2c00      	cmp	r4, #0
    27d2:	d0ed      	beq.n	27b0 <lv_indev_reset+0x48>
    27d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    27d6:	4294      	cmp	r4, r2
    27d8:	d1eb      	bne.n	27b2 <lv_indev_reset+0x4a>
    27da:	e7e9      	b.n	27b0 <lv_indev_reset+0x48>
    27dc:	20008070 	.word	0x20008070
    27e0:	00011015 	.word	0x00011015

000027e4 <_lv_indev_init>:
{
    27e4:	b508      	push	{r3, lr}
    lv_indev_reset(NULL, NULL); /*Reset all input devices*/
    27e6:	2100      	movs	r1, #0
    27e8:	4608      	mov	r0, r1
    27ea:	4b01      	ldr	r3, [pc, #4]	; (27f0 <_lv_indev_init+0xc>)
    27ec:	4798      	blx	r3
    27ee:	bd08      	pop	{r3, pc}
    27f0:	00002769 	.word	0x00002769

000027f4 <lv_indev_get_obj_act>:
 * @return pointer to currently active object or NULL if no active object
 */
lv_obj_t * lv_indev_get_obj_act(void)
{
    return indev_obj_act;
}
    27f4:	4b01      	ldr	r3, [pc, #4]	; (27fc <lv_indev_get_obj_act+0x8>)
    27f6:	6818      	ldr	r0, [r3, #0]
    27f8:	4770      	bx	lr
    27fa:	bf00      	nop
    27fc:	20008070 	.word	0x20008070

00002800 <refresh_children_position>:
 * @param obj pointer to an object which children will be repositioned
 * @param x_diff x coordinate shift
 * @param y_diff y coordinate shift
 */
static void refresh_children_position(lv_obj_t * obj, lv_coord_t x_diff, lv_coord_t y_diff)
{
    2800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2804:	4689      	mov	r9, r1
    2806:	4690      	mov	r8, r2
    lv_obj_t * i;
    _LV_LL_READ(obj->child_ll, i) {
    2808:	f100 0a04 	add.w	sl, r0, #4
    280c:	4650      	mov	r0, sl
    280e:	4b11      	ldr	r3, [pc, #68]	; (2854 <refresh_children_position+0x54>)
    2810:	4798      	blx	r3
    2812:	b1e0      	cbz	r0, 284e <refresh_children_position+0x4e>
    2814:	4604      	mov	r4, r0
        i->coords.x1 += x_diff;
    2816:	fa1f f689 	uxth.w	r6, r9
        i->coords.y1 += y_diff;
    281a:	fa1f f588 	uxth.w	r5, r8
    _LV_LL_READ(obj->child_ll, i) {
    281e:	4f0e      	ldr	r7, [pc, #56]	; (2858 <refresh_children_position+0x58>)
        i->coords.x1 += x_diff;
    2820:	8a23      	ldrh	r3, [r4, #16]
    2822:	4433      	add	r3, r6
    2824:	8223      	strh	r3, [r4, #16]
        i->coords.y1 += y_diff;
    2826:	8a63      	ldrh	r3, [r4, #18]
    2828:	442b      	add	r3, r5
    282a:	8263      	strh	r3, [r4, #18]
        i->coords.x2 += x_diff;
    282c:	8aa3      	ldrh	r3, [r4, #20]
    282e:	4433      	add	r3, r6
    2830:	82a3      	strh	r3, [r4, #20]
        i->coords.y2 += y_diff;
    2832:	8ae3      	ldrh	r3, [r4, #22]
    2834:	442b      	add	r3, r5
    2836:	82e3      	strh	r3, [r4, #22]

        refresh_children_position(i, x_diff, y_diff);
    2838:	4642      	mov	r2, r8
    283a:	4649      	mov	r1, r9
    283c:	4620      	mov	r0, r4
    283e:	f7ff ffdf 	bl	2800 <refresh_children_position>
    _LV_LL_READ(obj->child_ll, i) {
    2842:	4621      	mov	r1, r4
    2844:	4650      	mov	r0, sl
    2846:	47b8      	blx	r7
    2848:	4604      	mov	r4, r0
    284a:	2800      	cmp	r0, #0
    284c:	d1e8      	bne.n	2820 <refresh_children_position+0x20>
    284e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2852:	bf00      	nop
    2854:	00011f9d 	.word	0x00011f9d
    2858:	00011fb1 	.word	0x00011fb1

0000285c <lv_init>:
{
    285c:	b530      	push	{r4, r5, lr}
    285e:	b085      	sub	sp, #20
    if(lv_initialized) {
    2860:	4b21      	ldr	r3, [pc, #132]	; (28e8 <lv_init+0x8c>)
    2862:	781b      	ldrb	r3, [r3, #0]
    2864:	2b00      	cmp	r3, #0
    2866:	d136      	bne.n	28d6 <lv_init+0x7a>
    _lv_mem_init();
    2868:	4b20      	ldr	r3, [pc, #128]	; (28ec <lv_init+0x90>)
    286a:	4798      	blx	r3
    _lv_task_core_init();
    286c:	4b20      	ldr	r3, [pc, #128]	; (28f0 <lv_init+0x94>)
    286e:	4798      	blx	r3
    _lv_fs_init();
    2870:	4b20      	ldr	r3, [pc, #128]	; (28f4 <lv_init+0x98>)
    2872:	4798      	blx	r3
    _lv_anim_core_init();
    2874:	4b20      	ldr	r3, [pc, #128]	; (28f8 <lv_init+0x9c>)
    2876:	4798      	blx	r3
    _lv_group_init();
    2878:	4b20      	ldr	r3, [pc, #128]	; (28fc <lv_init+0xa0>)
    287a:	4798      	blx	r3
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(lv_style_trans_t));
    287c:	2110      	movs	r1, #16
    287e:	4820      	ldr	r0, [pc, #128]	; (2900 <lv_init+0xa4>)
    2880:	4c20      	ldr	r4, [pc, #128]	; (2904 <lv_init+0xa8>)
    2882:	47a0      	blx	r4
    lv_theme_t * th = LV_THEME_DEFAULT_INIT(LV_THEME_DEFAULT_COLOR_PRIMARY, LV_THEME_DEFAULT_COLOR_SECONDARY,
    2884:	4b20      	ldr	r3, [pc, #128]	; (2908 <lv_init+0xac>)
    2886:	9302      	str	r3, [sp, #8]
    2888:	9301      	str	r3, [sp, #4]
    288a:	9300      	str	r3, [sp, #0]
    288c:	2202      	movs	r2, #2
    288e:	f04f 011f 	mov.w	r1, #31
    2892:	f64f 0000 	movw	r0, #63488	; 0xf800
    2896:	4d1d      	ldr	r5, [pc, #116]	; (290c <lv_init+0xb0>)
    2898:	47a8      	blx	r5
    lv_theme_set_act(th);
    289a:	4b1d      	ldr	r3, [pc, #116]	; (2910 <lv_init+0xb4>)
    289c:	4798      	blx	r3
    _lv_refr_init();
    289e:	4b1d      	ldr	r3, [pc, #116]	; (2914 <lv_init+0xb8>)
    28a0:	4798      	blx	r3
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
    28a2:	f44f 71b8 	mov.w	r1, #368	; 0x170
    28a6:	481c      	ldr	r0, [pc, #112]	; (2918 <lv_init+0xbc>)
    28a8:	47a0      	blx	r4
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
    28aa:	2160      	movs	r1, #96	; 0x60
    28ac:	481b      	ldr	r0, [pc, #108]	; (291c <lv_init+0xc0>)
    28ae:	47a0      	blx	r4
    _lv_indev_init();
    28b0:	4b1b      	ldr	r3, [pc, #108]	; (2920 <lv_init+0xc4>)
    28b2:	4798      	blx	r3
    _lv_img_decoder_init();
    28b4:	4b1b      	ldr	r3, [pc, #108]	; (2924 <lv_init+0xc8>)
    28b6:	4798      	blx	r3
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
    28b8:	2001      	movs	r0, #1
    28ba:	4b1b      	ldr	r3, [pc, #108]	; (2928 <lv_init+0xcc>)
    28bc:	4798      	blx	r3
    lv_initialized = true;
    28be:	2001      	movs	r0, #1
    28c0:	4b09      	ldr	r3, [pc, #36]	; (28e8 <lv_init+0x8c>)
    28c2:	7018      	strb	r0, [r3, #0]
    LV_LOG_INFO("lv_init ready");
    28c4:	4b19      	ldr	r3, [pc, #100]	; (292c <lv_init+0xd0>)
    28c6:	9300      	str	r3, [sp, #0]
    28c8:	4b19      	ldr	r3, [pc, #100]	; (2930 <lv_init+0xd4>)
    28ca:	22a2      	movs	r2, #162	; 0xa2
    28cc:	4919      	ldr	r1, [pc, #100]	; (2934 <lv_init+0xd8>)
    28ce:	4c1a      	ldr	r4, [pc, #104]	; (2938 <lv_init+0xdc>)
    28d0:	47a0      	blx	r4
}
    28d2:	b005      	add	sp, #20
    28d4:	bd30      	pop	{r4, r5, pc}
        LV_LOG_WARN("lv_init: already inited");
    28d6:	4b19      	ldr	r3, [pc, #100]	; (293c <lv_init+0xe0>)
    28d8:	9300      	str	r3, [sp, #0]
    28da:	4b15      	ldr	r3, [pc, #84]	; (2930 <lv_init+0xd4>)
    28dc:	2278      	movs	r2, #120	; 0x78
    28de:	4915      	ldr	r1, [pc, #84]	; (2934 <lv_init+0xd8>)
    28e0:	2002      	movs	r0, #2
    28e2:	4c15      	ldr	r4, [pc, #84]	; (2938 <lv_init+0xdc>)
    28e4:	47a0      	blx	r4
        return;
    28e6:	e7f4      	b.n	28d2 <lv_init+0x76>
    28e8:	20008078 	.word	0x20008078
    28ec:	000123b1 	.word	0x000123b1
    28f0:	000135e1 	.word	0x000135e1
    28f4:	00011c6d 	.word	0x00011c6d
    28f8:	00011291 	.word	0x00011291
    28fc:	0000251d 	.word	0x0000251d
    2900:	2000c738 	.word	0x2000c738
    2904:	00011eed 	.word	0x00011eed
    2908:	20000010 	.word	0x20000010
    290c:	00016b3d 	.word	0x00016b3d
    2910:	000141c5 	.word	0x000141c5
    2914:	00005e49 	.word	0x00005e49
    2918:	2000c694 	.word	0x2000c694
    291c:	2000c688 	.word	0x2000c688
    2920:	000027e5 	.word	0x000027e5
    2924:	0000ffb5 	.word	0x0000ffb5
    2928:	0000f421 	.word	0x0000f421
    292c:	00024810 	.word	0x00024810
    2930:	0002404c 	.word	0x0002404c
    2934:	000247d0 	.word	0x000247d0
    2938:	00012251 	.word	0x00012251
    293c:	000247f8 	.word	0x000247f8

00002940 <lv_obj_set_adv_hittest>:
{
    2940:	b530      	push	{r4, r5, lr}
    2942:	b083      	sub	sp, #12
    2944:	4604      	mov	r4, r0
    2946:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2948:	4b0c      	ldr	r3, [pc, #48]	; (297c <lv_obj_set_adv_hittest+0x3c>)
    294a:	4798      	blx	r3
    294c:	b138      	cbz	r0, 295e <lv_obj_set_adv_hittest+0x1e>
    obj->adv_hittest = en == false ? 0 : 1;
    294e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    2952:	f365 13c7 	bfi	r3, r5, #7, #1
    2956:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
    295a:	b003      	add	sp, #12
    295c:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    295e:	4b08      	ldr	r3, [pc, #32]	; (2980 <lv_obj_set_adv_hittest+0x40>)
    2960:	9300      	str	r3, [sp, #0]
    2962:	f240 5294 	movw	r2, #1428	; 0x594
    2966:	4907      	ldr	r1, [pc, #28]	; (2984 <lv_obj_set_adv_hittest+0x44>)
    2968:	2003      	movs	r0, #3
    296a:	4d07      	ldr	r5, [pc, #28]	; (2988 <lv_obj_set_adv_hittest+0x48>)
    296c:	47a8      	blx	r5
    296e:	4622      	mov	r2, r4
    2970:	2300      	movs	r3, #0
    2972:	4806      	ldr	r0, [pc, #24]	; (298c <lv_obj_set_adv_hittest+0x4c>)
    2974:	4906      	ldr	r1, [pc, #24]	; (2990 <lv_obj_set_adv_hittest+0x50>)
    2976:	4788      	blx	r1
    2978:	e7fe      	b.n	2978 <lv_obj_set_adv_hittest+0x38>
    297a:	bf00      	nop
    297c:	000022a5 	.word	0x000022a5
    2980:	000240a8 	.word	0x000240a8
    2984:	000247d0 	.word	0x000247d0
    2988:	00012251 	.word	0x00012251
    298c:	00024830 	.word	0x00024830
    2990:	000022ad 	.word	0x000022ad

00002994 <lv_obj_set_click>:
{
    2994:	b530      	push	{r4, r5, lr}
    2996:	b083      	sub	sp, #12
    2998:	4604      	mov	r4, r0
    299a:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    299c:	4b0c      	ldr	r3, [pc, #48]	; (29d0 <lv_obj_set_click+0x3c>)
    299e:	4798      	blx	r3
    29a0:	b138      	cbz	r0, 29b2 <lv_obj_set_click+0x1e>
    obj->click = (en == true ? 1 : 0);
    29a2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    29a6:	f365 0300 	bfi	r3, r5, #0, #1
    29aa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
    29ae:	b003      	add	sp, #12
    29b0:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    29b2:	4b08      	ldr	r3, [pc, #32]	; (29d4 <lv_obj_set_click+0x40>)
    29b4:	9300      	str	r3, [sp, #0]
    29b6:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
    29ba:	4907      	ldr	r1, [pc, #28]	; (29d8 <lv_obj_set_click+0x44>)
    29bc:	2003      	movs	r0, #3
    29be:	4d07      	ldr	r5, [pc, #28]	; (29dc <lv_obj_set_click+0x48>)
    29c0:	47a8      	blx	r5
    29c2:	4622      	mov	r2, r4
    29c4:	2300      	movs	r3, #0
    29c6:	4806      	ldr	r0, [pc, #24]	; (29e0 <lv_obj_set_click+0x4c>)
    29c8:	4906      	ldr	r1, [pc, #24]	; (29e4 <lv_obj_set_click+0x50>)
    29ca:	4788      	blx	r1
    29cc:	e7fe      	b.n	29cc <lv_obj_set_click+0x38>
    29ce:	bf00      	nop
    29d0:	000022a5 	.word	0x000022a5
    29d4:	000240c0 	.word	0x000240c0
    29d8:	000247d0 	.word	0x000247d0
    29dc:	00012251 	.word	0x00012251
    29e0:	00024830 	.word	0x00024830
    29e4:	000022ad 	.word	0x000022ad

000029e8 <lv_event_send_func>:
{
    29e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    29ec:	b086      	sub	sp, #24
    29ee:	4607      	mov	r7, r0
    29f0:	4615      	mov	r5, r2
    29f2:	461e      	mov	r6, r3
    if(obj != NULL) {
    29f4:	460c      	mov	r4, r1
    29f6:	b121      	cbz	r1, 2a02 <lv_event_send_func+0x1a>
        LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    29f8:	4608      	mov	r0, r1
    29fa:	4b28      	ldr	r3, [pc, #160]	; (2a9c <lv_event_send_func+0xb4>)
    29fc:	4798      	blx	r3
    29fe:	2800      	cmp	r0, #0
    2a00:	d033      	beq.n	2a6a <lv_event_send_func+0x82>
    event_temp_data.obj     = obj;
    2a02:	9403      	str	r4, [sp, #12]
    event_temp_data.deleted = false;
    2a04:	2300      	movs	r3, #0
    2a06:	f88d 3010 	strb.w	r3, [sp, #16]
    event_temp_data.prev    = NULL;
    2a0a:	9305      	str	r3, [sp, #20]
    if(event_temp_data_head) {
    2a0c:	4b24      	ldr	r3, [pc, #144]	; (2aa0 <lv_event_send_func+0xb8>)
    2a0e:	685b      	ldr	r3, [r3, #4]
    2a10:	b103      	cbz	r3, 2a14 <lv_event_send_func+0x2c>
        event_temp_data.prev = event_temp_data_head;
    2a12:	9305      	str	r3, [sp, #20]
    event_temp_data_head = &event_temp_data;
    2a14:	4b22      	ldr	r3, [pc, #136]	; (2aa0 <lv_event_send_func+0xb8>)
    2a16:	aa03      	add	r2, sp, #12
    2a18:	605a      	str	r2, [r3, #4]
    const void * event_act_data_save = event_act_data;
    2a1a:	f8d3 8008 	ldr.w	r8, [r3, #8]
    event_act_data                   = data;
    2a1e:	609e      	str	r6, [r3, #8]
    lv_indev_t * indev_act = lv_indev_get_act();
    2a20:	4b20      	ldr	r3, [pc, #128]	; (2aa4 <lv_event_send_func+0xbc>)
    2a22:	4798      	blx	r3
    if(indev_act) {
    2a24:	b118      	cbz	r0, 2a2e <lv_event_send_func+0x46>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
    2a26:	6883      	ldr	r3, [r0, #8]
    2a28:	b10b      	cbz	r3, 2a2e <lv_event_send_func+0x46>
    2a2a:	4629      	mov	r1, r5
    2a2c:	4798      	blx	r3
    if(event_xcb) event_xcb(obj, event);
    2a2e:	b117      	cbz	r7, 2a36 <lv_event_send_func+0x4e>
    2a30:	4629      	mov	r1, r5
    2a32:	4620      	mov	r0, r4
    2a34:	47b8      	blx	r7
    event_act_data = event_act_data_save;
    2a36:	4b1a      	ldr	r3, [pc, #104]	; (2aa0 <lv_event_send_func+0xb8>)
    2a38:	f8c3 8008 	str.w	r8, [r3, #8]
    event_temp_data_head = event_temp_data_head->prev;
    2a3c:	685a      	ldr	r2, [r3, #4]
    2a3e:	6892      	ldr	r2, [r2, #8]
    2a40:	605a      	str	r2, [r3, #4]
    if(event_temp_data.deleted) {
    2a42:	f89d 3010 	ldrb.w	r3, [sp, #16]
    2a46:	b9f3      	cbnz	r3, 2a86 <lv_event_send_func+0x9e>
    if(obj) {
    2a48:	b30c      	cbz	r4, 2a8e <lv_event_send_func+0xa6>
        if(obj->parent_event && obj->parent) {
    2a4a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    2a4e:	f013 0f40 	tst.w	r3, #64	; 0x40
    2a52:	d01e      	beq.n	2a92 <lv_event_send_func+0xaa>
    2a54:	6820      	ldr	r0, [r4, #0]
    2a56:	b1f0      	cbz	r0, 2a96 <lv_event_send_func+0xae>
            lv_res_t res = lv_event_send(obj->parent, event, data);
    2a58:	4632      	mov	r2, r6
    2a5a:	4629      	mov	r1, r5
    2a5c:	4b12      	ldr	r3, [pc, #72]	; (2aa8 <lv_event_send_func+0xc0>)
    2a5e:	4798      	blx	r3
        return LV_RES_INV;
    2a60:	2801      	cmp	r0, #1
    2a62:	bf14      	ite	ne
    2a64:	2000      	movne	r0, #0
    2a66:	2001      	moveq	r0, #1
    2a68:	e00e      	b.n	2a88 <lv_event_send_func+0xa0>
        LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2a6a:	4b10      	ldr	r3, [pc, #64]	; (2aac <lv_event_send_func+0xc4>)
    2a6c:	9300      	str	r3, [sp, #0]
    2a6e:	f44f 62db 	mov.w	r2, #1752	; 0x6d8
    2a72:	490f      	ldr	r1, [pc, #60]	; (2ab0 <lv_event_send_func+0xc8>)
    2a74:	2003      	movs	r0, #3
    2a76:	4d0f      	ldr	r5, [pc, #60]	; (2ab4 <lv_event_send_func+0xcc>)
    2a78:	47a8      	blx	r5
    2a7a:	4622      	mov	r2, r4
    2a7c:	2300      	movs	r3, #0
    2a7e:	480e      	ldr	r0, [pc, #56]	; (2ab8 <lv_event_send_func+0xd0>)
    2a80:	490e      	ldr	r1, [pc, #56]	; (2abc <lv_event_send_func+0xd4>)
    2a82:	4788      	blx	r1
    2a84:	e7fe      	b.n	2a84 <lv_event_send_func+0x9c>
        return LV_RES_INV;
    2a86:	2000      	movs	r0, #0
}
    2a88:	b006      	add	sp, #24
    2a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return LV_RES_OK;
    2a8e:	2001      	movs	r0, #1
    2a90:	e7fa      	b.n	2a88 <lv_event_send_func+0xa0>
    2a92:	2001      	movs	r0, #1
    2a94:	e7f8      	b.n	2a88 <lv_event_send_func+0xa0>
    2a96:	2001      	movs	r0, #1
    2a98:	e7f6      	b.n	2a88 <lv_event_send_func+0xa0>
    2a9a:	bf00      	nop
    2a9c:	000022a5 	.word	0x000022a5
    2aa0:	20008078 	.word	0x20008078
    2aa4:	0000275d 	.word	0x0000275d
    2aa8:	00002ac1 	.word	0x00002ac1
    2aac:	00024190 	.word	0x00024190
    2ab0:	000247d0 	.word	0x000247d0
    2ab4:	00012251 	.word	0x00012251
    2ab8:	00024830 	.word	0x00024830
    2abc:	000022ad 	.word	0x000022ad

00002ac0 <lv_event_send>:
    if(obj == NULL) return LV_RES_OK;
    2ac0:	b1e8      	cbz	r0, 2afe <lv_event_send+0x3e>
{
    2ac2:	b570      	push	{r4, r5, r6, lr}
    2ac4:	b082      	sub	sp, #8
    2ac6:	4604      	mov	r4, r0
    2ac8:	4616      	mov	r6, r2
    2aca:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2acc:	4b0d      	ldr	r3, [pc, #52]	; (2b04 <lv_event_send+0x44>)
    2ace:	4798      	blx	r3
    2ad0:	b968      	cbnz	r0, 2aee <lv_event_send+0x2e>
    2ad2:	4b0d      	ldr	r3, [pc, #52]	; (2b08 <lv_event_send+0x48>)
    2ad4:	9300      	str	r3, [sp, #0]
    2ad6:	f240 62c4 	movw	r2, #1732	; 0x6c4
    2ada:	490c      	ldr	r1, [pc, #48]	; (2b0c <lv_event_send+0x4c>)
    2adc:	2003      	movs	r0, #3
    2ade:	4d0c      	ldr	r5, [pc, #48]	; (2b10 <lv_event_send+0x50>)
    2ae0:	47a8      	blx	r5
    2ae2:	4622      	mov	r2, r4
    2ae4:	2300      	movs	r3, #0
    2ae6:	480b      	ldr	r0, [pc, #44]	; (2b14 <lv_event_send+0x54>)
    2ae8:	490b      	ldr	r1, [pc, #44]	; (2b18 <lv_event_send+0x58>)
    2aea:	4788      	blx	r1
    2aec:	e7fe      	b.n	2aec <lv_event_send+0x2c>
    res = lv_event_send_func(obj->event_cb, obj, event, data);
    2aee:	4633      	mov	r3, r6
    2af0:	462a      	mov	r2, r5
    2af2:	4621      	mov	r1, r4
    2af4:	69a0      	ldr	r0, [r4, #24]
    2af6:	4c09      	ldr	r4, [pc, #36]	; (2b1c <lv_event_send+0x5c>)
    2af8:	47a0      	blx	r4
}
    2afa:	b002      	add	sp, #8
    2afc:	bd70      	pop	{r4, r5, r6, pc}
    if(obj == NULL) return LV_RES_OK;
    2afe:	2001      	movs	r0, #1
    2b00:	4770      	bx	lr
    2b02:	bf00      	nop
    2b04:	000022a5 	.word	0x000022a5
    2b08:	000241a4 	.word	0x000241a4
    2b0c:	000247d0 	.word	0x000247d0
    2b10:	00012251 	.word	0x00012251
    2b14:	00024830 	.word	0x00024830
    2b18:	000022ad 	.word	0x000022ad
    2b1c:	000029e9 	.word	0x000029e9

00002b20 <lv_obj_set_signal_cb>:
{
    2b20:	b530      	push	{r4, r5, lr}
    2b22:	b083      	sub	sp, #12
    2b24:	4604      	mov	r4, r0
    2b26:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2b28:	4b09      	ldr	r3, [pc, #36]	; (2b50 <lv_obj_set_signal_cb+0x30>)
    2b2a:	4798      	blx	r3
    2b2c:	b110      	cbz	r0, 2b34 <lv_obj_set_signal_cb+0x14>
    obj->signal_cb = signal_cb;
    2b2e:	61e5      	str	r5, [r4, #28]
}
    2b30:	b003      	add	sp, #12
    2b32:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2b34:	4b07      	ldr	r3, [pc, #28]	; (2b54 <lv_obj_set_signal_cb+0x34>)
    2b36:	9300      	str	r3, [sp, #0]
    2b38:	f240 721b 	movw	r2, #1819	; 0x71b
    2b3c:	4906      	ldr	r1, [pc, #24]	; (2b58 <lv_obj_set_signal_cb+0x38>)
    2b3e:	2003      	movs	r0, #3
    2b40:	4d06      	ldr	r5, [pc, #24]	; (2b5c <lv_obj_set_signal_cb+0x3c>)
    2b42:	47a8      	blx	r5
    2b44:	4622      	mov	r2, r4
    2b46:	2300      	movs	r3, #0
    2b48:	4805      	ldr	r0, [pc, #20]	; (2b60 <lv_obj_set_signal_cb+0x40>)
    2b4a:	4906      	ldr	r1, [pc, #24]	; (2b64 <lv_obj_set_signal_cb+0x44>)
    2b4c:	4788      	blx	r1
    2b4e:	e7fe      	b.n	2b4e <lv_obj_set_signal_cb+0x2e>
    2b50:	000022a5 	.word	0x000022a5
    2b54:	000241b4 	.word	0x000241b4
    2b58:	000247d0 	.word	0x000247d0
    2b5c:	00012251 	.word	0x00012251
    2b60:	00024830 	.word	0x00024830
    2b64:	000022ad 	.word	0x000022ad

00002b68 <lv_signal_send>:
    if(obj == NULL) return LV_RES_OK;
    2b68:	b120      	cbz	r0, 2b74 <lv_signal_send+0xc>
{
    2b6a:	b510      	push	{r4, lr}
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
    2b6c:	69c4      	ldr	r4, [r0, #28]
    2b6e:	b11c      	cbz	r4, 2b78 <lv_signal_send+0x10>
    2b70:	47a0      	blx	r4
    2b72:	bd10      	pop	{r4, pc}
    if(obj == NULL) return LV_RES_OK;
    2b74:	2001      	movs	r0, #1
    2b76:	4770      	bx	lr
    lv_res_t res = LV_RES_OK;
    2b78:	2001      	movs	r0, #1
}
    2b7a:	bd10      	pop	{r4, pc}

00002b7c <lv_obj_set_design_cb>:
{
    2b7c:	b530      	push	{r4, r5, lr}
    2b7e:	b083      	sub	sp, #12
    2b80:	4604      	mov	r4, r0
    2b82:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2b84:	4b09      	ldr	r3, [pc, #36]	; (2bac <lv_obj_set_design_cb+0x30>)
    2b86:	4798      	blx	r3
    2b88:	b110      	cbz	r0, 2b90 <lv_obj_set_design_cb+0x14>
    obj->design_cb = design_cb;
    2b8a:	6225      	str	r5, [r4, #32]
}
    2b8c:	b003      	add	sp, #12
    2b8e:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2b90:	4b07      	ldr	r3, [pc, #28]	; (2bb0 <lv_obj_set_design_cb+0x34>)
    2b92:	9300      	str	r3, [sp, #0]
    2b94:	f240 7237 	movw	r2, #1847	; 0x737
    2b98:	4906      	ldr	r1, [pc, #24]	; (2bb4 <lv_obj_set_design_cb+0x38>)
    2b9a:	2003      	movs	r0, #3
    2b9c:	4d06      	ldr	r5, [pc, #24]	; (2bb8 <lv_obj_set_design_cb+0x3c>)
    2b9e:	47a8      	blx	r5
    2ba0:	4622      	mov	r2, r4
    2ba2:	2300      	movs	r3, #0
    2ba4:	4805      	ldr	r0, [pc, #20]	; (2bbc <lv_obj_set_design_cb+0x40>)
    2ba6:	4906      	ldr	r1, [pc, #24]	; (2bc0 <lv_obj_set_design_cb+0x44>)
    2ba8:	4788      	blx	r1
    2baa:	e7fe      	b.n	2baa <lv_obj_set_design_cb+0x2e>
    2bac:	000022a5 	.word	0x000022a5
    2bb0:	000241cc 	.word	0x000241cc
    2bb4:	000247d0 	.word	0x000247d0
    2bb8:	00012251 	.word	0x00012251
    2bbc:	00024830 	.word	0x00024830
    2bc0:	000022ad 	.word	0x000022ad

00002bc4 <lv_obj_allocate_ext_attr>:
{
    2bc4:	b530      	push	{r4, r5, lr}
    2bc6:	b083      	sub	sp, #12
    2bc8:	4604      	mov	r4, r0
    2bca:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2bcc:	4b0d      	ldr	r3, [pc, #52]	; (2c04 <lv_obj_allocate_ext_attr+0x40>)
    2bce:	4798      	blx	r3
    2bd0:	b968      	cbnz	r0, 2bee <lv_obj_allocate_ext_attr+0x2a>
    2bd2:	4b0d      	ldr	r3, [pc, #52]	; (2c08 <lv_obj_allocate_ext_attr+0x44>)
    2bd4:	9300      	str	r3, [sp, #0]
    2bd6:	f240 7249 	movw	r2, #1865	; 0x749
    2bda:	490c      	ldr	r1, [pc, #48]	; (2c0c <lv_obj_allocate_ext_attr+0x48>)
    2bdc:	2003      	movs	r0, #3
    2bde:	4d0c      	ldr	r5, [pc, #48]	; (2c10 <lv_obj_allocate_ext_attr+0x4c>)
    2be0:	47a8      	blx	r5
    2be2:	4622      	mov	r2, r4
    2be4:	2300      	movs	r3, #0
    2be6:	480b      	ldr	r0, [pc, #44]	; (2c14 <lv_obj_allocate_ext_attr+0x50>)
    2be8:	490b      	ldr	r1, [pc, #44]	; (2c18 <lv_obj_allocate_ext_attr+0x54>)
    2bea:	4788      	blx	r1
    2bec:	e7fe      	b.n	2bec <lv_obj_allocate_ext_attr+0x28>
    void * new_ext = lv_mem_realloc(obj->ext_attr, ext_size);
    2bee:	4629      	mov	r1, r5
    2bf0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2bf2:	4b0a      	ldr	r3, [pc, #40]	; (2c1c <lv_obj_allocate_ext_attr+0x58>)
    2bf4:	4798      	blx	r3
    if(new_ext == NULL) return NULL;
    2bf6:	4603      	mov	r3, r0
    2bf8:	b100      	cbz	r0, 2bfc <lv_obj_allocate_ext_attr+0x38>
    obj->ext_attr = new_ext;
    2bfa:	6260      	str	r0, [r4, #36]	; 0x24
}
    2bfc:	4618      	mov	r0, r3
    2bfe:	b003      	add	sp, #12
    2c00:	bd30      	pop	{r4, r5, pc}
    2c02:	bf00      	nop
    2c04:	000022a5 	.word	0x000022a5
    2c08:	000241e4 	.word	0x000241e4
    2c0c:	000247d0 	.word	0x000247d0
    2c10:	00012251 	.word	0x00012251
    2c14:	00024830 	.word	0x00024830
    2c18:	000022ad 	.word	0x000022ad
    2c1c:	0001288d 	.word	0x0001288d

00002c20 <lv_obj_refresh_ext_draw_pad>:
{
    2c20:	b530      	push	{r4, r5, lr}
    2c22:	b083      	sub	sp, #12
    2c24:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2c26:	4b0c      	ldr	r3, [pc, #48]	; (2c58 <lv_obj_refresh_ext_draw_pad+0x38>)
    2c28:	4798      	blx	r3
    2c2a:	b968      	cbnz	r0, 2c48 <lv_obj_refresh_ext_draw_pad+0x28>
    2c2c:	4b0b      	ldr	r3, [pc, #44]	; (2c5c <lv_obj_refresh_ext_draw_pad+0x3c>)
    2c2e:	9300      	str	r3, [sp, #0]
    2c30:	f240 7259 	movw	r2, #1881	; 0x759
    2c34:	490a      	ldr	r1, [pc, #40]	; (2c60 <lv_obj_refresh_ext_draw_pad+0x40>)
    2c36:	2003      	movs	r0, #3
    2c38:	4d0a      	ldr	r5, [pc, #40]	; (2c64 <lv_obj_refresh_ext_draw_pad+0x44>)
    2c3a:	47a8      	blx	r5
    2c3c:	4622      	mov	r2, r4
    2c3e:	2300      	movs	r3, #0
    2c40:	4809      	ldr	r0, [pc, #36]	; (2c68 <lv_obj_refresh_ext_draw_pad+0x48>)
    2c42:	490a      	ldr	r1, [pc, #40]	; (2c6c <lv_obj_refresh_ext_draw_pad+0x4c>)
    2c44:	4788      	blx	r1
    2c46:	e7fe      	b.n	2c46 <lv_obj_refresh_ext_draw_pad+0x26>
    obj->ext_draw_pad = 0;
    2c48:	2200      	movs	r2, #0
    2c4a:	8662      	strh	r2, [r4, #50]	; 0x32
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
    2c4c:	69e3      	ldr	r3, [r4, #28]
    2c4e:	2106      	movs	r1, #6
    2c50:	4620      	mov	r0, r4
    2c52:	4798      	blx	r3
}
    2c54:	b003      	add	sp, #12
    2c56:	bd30      	pop	{r4, r5, pc}
    2c58:	000022a5 	.word	0x000022a5
    2c5c:	00024200 	.word	0x00024200
    2c60:	000247d0 	.word	0x000247d0
    2c64:	00012251 	.word	0x00012251
    2c68:	00024830 	.word	0x00024830
    2c6c:	000022ad 	.word	0x000022ad

00002c70 <lv_obj_get_parent>:
{
    2c70:	b530      	push	{r4, r5, lr}
    2c72:	b083      	sub	sp, #12
    2c74:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2c76:	4b0a      	ldr	r3, [pc, #40]	; (2ca0 <lv_obj_get_parent+0x30>)
    2c78:	4798      	blx	r3
    2c7a:	b110      	cbz	r0, 2c82 <lv_obj_get_parent+0x12>
}
    2c7c:	6820      	ldr	r0, [r4, #0]
    2c7e:	b003      	add	sp, #12
    2c80:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2c82:	4b08      	ldr	r3, [pc, #32]	; (2ca4 <lv_obj_get_parent+0x34>)
    2c84:	9300      	str	r3, [sp, #0]
    2c86:	f240 729f 	movw	r2, #1951	; 0x79f
    2c8a:	4907      	ldr	r1, [pc, #28]	; (2ca8 <lv_obj_get_parent+0x38>)
    2c8c:	2003      	movs	r0, #3
    2c8e:	4d07      	ldr	r5, [pc, #28]	; (2cac <lv_obj_get_parent+0x3c>)
    2c90:	47a8      	blx	r5
    2c92:	4622      	mov	r2, r4
    2c94:	2300      	movs	r3, #0
    2c96:	4806      	ldr	r0, [pc, #24]	; (2cb0 <lv_obj_get_parent+0x40>)
    2c98:	4906      	ldr	r1, [pc, #24]	; (2cb4 <lv_obj_get_parent+0x44>)
    2c9a:	4788      	blx	r1
    2c9c:	e7fe      	b.n	2c9c <lv_obj_get_parent+0x2c>
    2c9e:	bf00      	nop
    2ca0:	000022a5 	.word	0x000022a5
    2ca4:	0002421c 	.word	0x0002421c
    2ca8:	000247d0 	.word	0x000247d0
    2cac:	00012251 	.word	0x00012251
    2cb0:	00024830 	.word	0x00024830
    2cb4:	000022ad 	.word	0x000022ad

00002cb8 <lv_obj_get_screen>:
{
    2cb8:	b530      	push	{r4, r5, lr}
    2cba:	b083      	sub	sp, #12
    2cbc:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2cbe:	4b0e      	ldr	r3, [pc, #56]	; (2cf8 <lv_obj_get_screen+0x40>)
    2cc0:	4798      	blx	r3
    2cc2:	b108      	cbz	r0, 2cc8 <lv_obj_get_screen+0x10>
        par   = lv_obj_get_parent(act_p);
    2cc4:	4d0d      	ldr	r5, [pc, #52]	; (2cfc <lv_obj_get_screen+0x44>)
    2cc6:	e00e      	b.n	2ce6 <lv_obj_get_screen+0x2e>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2cc8:	4b0d      	ldr	r3, [pc, #52]	; (2d00 <lv_obj_get_screen+0x48>)
    2cca:	9300      	str	r3, [sp, #0]
    2ccc:	f240 726b 	movw	r2, #1899	; 0x76b
    2cd0:	490c      	ldr	r1, [pc, #48]	; (2d04 <lv_obj_get_screen+0x4c>)
    2cd2:	2003      	movs	r0, #3
    2cd4:	4d0c      	ldr	r5, [pc, #48]	; (2d08 <lv_obj_get_screen+0x50>)
    2cd6:	47a8      	blx	r5
    2cd8:	4622      	mov	r2, r4
    2cda:	2300      	movs	r3, #0
    2cdc:	480b      	ldr	r0, [pc, #44]	; (2d0c <lv_obj_get_screen+0x54>)
    2cde:	490c      	ldr	r1, [pc, #48]	; (2d10 <lv_obj_get_screen+0x58>)
    2ce0:	4788      	blx	r1
    2ce2:	e7fe      	b.n	2ce2 <lv_obj_get_screen+0x2a>
        par   = lv_obj_get_parent(act_p);
    2ce4:	461c      	mov	r4, r3
    2ce6:	4620      	mov	r0, r4
    2ce8:	47a8      	blx	r5
    } while(par != NULL);
    2cea:	4603      	mov	r3, r0
    2cec:	2800      	cmp	r0, #0
    2cee:	d1f9      	bne.n	2ce4 <lv_obj_get_screen+0x2c>
}
    2cf0:	4620      	mov	r0, r4
    2cf2:	b003      	add	sp, #12
    2cf4:	bd30      	pop	{r4, r5, pc}
    2cf6:	bf00      	nop
    2cf8:	000022a5 	.word	0x000022a5
    2cfc:	00002c71 	.word	0x00002c71
    2d00:	00024230 	.word	0x00024230
    2d04:	000247d0 	.word	0x000247d0
    2d08:	00012251 	.word	0x00012251
    2d0c:	00024830 	.word	0x00024830
    2d10:	000022ad 	.word	0x000022ad

00002d14 <lv_obj_get_disp>:
{
    2d14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2d18:	b083      	sub	sp, #12
    2d1a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2d1c:	4b22      	ldr	r3, [pc, #136]	; (2da8 <lv_obj_get_disp+0x94>)
    2d1e:	4798      	blx	r3
    2d20:	b180      	cbz	r0, 2d44 <lv_obj_get_disp+0x30>
    if(obj->parent == NULL)
    2d22:	6823      	ldr	r3, [r4, #0]
    2d24:	b11b      	cbz	r3, 2d2e <lv_obj_get_disp+0x1a>
        scr = lv_obj_get_screen(obj); /*get the screen of `obj`*/
    2d26:	4620      	mov	r0, r4
    2d28:	4b20      	ldr	r3, [pc, #128]	; (2dac <lv_obj_get_disp+0x98>)
    2d2a:	4798      	blx	r3
    2d2c:	4604      	mov	r4, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
    2d2e:	4820      	ldr	r0, [pc, #128]	; (2db0 <lv_obj_get_disp+0x9c>)
    2d30:	4b20      	ldr	r3, [pc, #128]	; (2db4 <lv_obj_get_disp+0xa0>)
    2d32:	4798      	blx	r3
    2d34:	4605      	mov	r5, r0
    2d36:	b360      	cbz	r0, 2d92 <lv_obj_get_disp+0x7e>
        _LV_LL_READ(d->scr_ll, s) {
    2d38:	f8df 9078 	ldr.w	r9, [pc, #120]	; 2db4 <lv_obj_get_disp+0xa0>
    2d3c:	4e1e      	ldr	r6, [pc, #120]	; (2db8 <lv_obj_get_disp+0xa4>)
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
    2d3e:	f8df 8070 	ldr.w	r8, [pc, #112]	; 2db0 <lv_obj_get_disp+0x9c>
    2d42:	e012      	b.n	2d6a <lv_obj_get_disp+0x56>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2d44:	4b1d      	ldr	r3, [pc, #116]	; (2dbc <lv_obj_get_disp+0xa8>)
    2d46:	9300      	str	r3, [sp, #0]
    2d48:	f240 727f 	movw	r2, #1919	; 0x77f
    2d4c:	491c      	ldr	r1, [pc, #112]	; (2dc0 <lv_obj_get_disp+0xac>)
    2d4e:	2003      	movs	r0, #3
    2d50:	4d1c      	ldr	r5, [pc, #112]	; (2dc4 <lv_obj_get_disp+0xb0>)
    2d52:	47a8      	blx	r5
    2d54:	4622      	mov	r2, r4
    2d56:	2300      	movs	r3, #0
    2d58:	481b      	ldr	r0, [pc, #108]	; (2dc8 <lv_obj_get_disp+0xb4>)
    2d5a:	491c      	ldr	r1, [pc, #112]	; (2dcc <lv_obj_get_disp+0xb8>)
    2d5c:	4788      	blx	r1
    2d5e:	e7fe      	b.n	2d5e <lv_obj_get_disp+0x4a>
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
    2d60:	4629      	mov	r1, r5
    2d62:	4640      	mov	r0, r8
    2d64:	47b0      	blx	r6
    2d66:	4605      	mov	r5, r0
    2d68:	b198      	cbz	r0, 2d92 <lv_obj_get_disp+0x7e>
        _LV_LL_READ(d->scr_ll, s) {
    2d6a:	f105 0730 	add.w	r7, r5, #48	; 0x30
    2d6e:	4638      	mov	r0, r7
    2d70:	47c8      	blx	r9
    2d72:	4601      	mov	r1, r0
    2d74:	2800      	cmp	r0, #0
    2d76:	d0f3      	beq.n	2d60 <lv_obj_get_disp+0x4c>
            if(s == scr) return d;
    2d78:	4284      	cmp	r4, r0
    2d7a:	d006      	beq.n	2d8a <lv_obj_get_disp+0x76>
        _LV_LL_READ(d->scr_ll, s) {
    2d7c:	4638      	mov	r0, r7
    2d7e:	47b0      	blx	r6
    2d80:	4601      	mov	r1, r0
    2d82:	2800      	cmp	r0, #0
    2d84:	d0ec      	beq.n	2d60 <lv_obj_get_disp+0x4c>
            if(s == scr) return d;
    2d86:	428c      	cmp	r4, r1
    2d88:	d1f8      	bne.n	2d7c <lv_obj_get_disp+0x68>
}
    2d8a:	4628      	mov	r0, r5
    2d8c:	b003      	add	sp, #12
    2d8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LV_LOG_WARN("lv_scr_get_disp: screen not found")
    2d92:	4b0f      	ldr	r3, [pc, #60]	; (2dd0 <lv_obj_get_disp+0xbc>)
    2d94:	9300      	str	r3, [sp, #0]
    2d96:	4b09      	ldr	r3, [pc, #36]	; (2dbc <lv_obj_get_disp+0xa8>)
    2d98:	f44f 62f2 	mov.w	r2, #1936	; 0x790
    2d9c:	4908      	ldr	r1, [pc, #32]	; (2dc0 <lv_obj_get_disp+0xac>)
    2d9e:	2002      	movs	r0, #2
    2da0:	4c08      	ldr	r4, [pc, #32]	; (2dc4 <lv_obj_get_disp+0xb0>)
    2da2:	47a0      	blx	r4
    return NULL;
    2da4:	2500      	movs	r5, #0
    2da6:	e7f0      	b.n	2d8a <lv_obj_get_disp+0x76>
    2da8:	000022a5 	.word	0x000022a5
    2dac:	00002cb9 	.word	0x00002cb9
    2db0:	2000c694 	.word	0x2000c694
    2db4:	00011f9d 	.word	0x00011f9d
    2db8:	00011fb1 	.word	0x00011fb1
    2dbc:	00024244 	.word	0x00024244
    2dc0:	000247d0 	.word	0x000247d0
    2dc4:	00012251 	.word	0x00012251
    2dc8:	00024830 	.word	0x00024830
    2dcc:	000022ad 	.word	0x000022ad
    2dd0:	00024840 	.word	0x00024840

00002dd4 <lv_obj_get_child>:
{
    2dd4:	b530      	push	{r4, r5, lr}
    2dd6:	b083      	sub	sp, #12
    2dd8:	4604      	mov	r4, r0
    2dda:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2ddc:	4b0d      	ldr	r3, [pc, #52]	; (2e14 <lv_obj_get_child+0x40>)
    2dde:	4798      	blx	r3
    2de0:	b130      	cbz	r0, 2df0 <lv_obj_get_child+0x1c>
    if(child == NULL) {
    2de2:	b19d      	cbz	r5, 2e0c <lv_obj_get_child+0x38>
        result = _lv_ll_get_next(&obj->child_ll, child);
    2de4:	4629      	mov	r1, r5
    2de6:	1d20      	adds	r0, r4, #4
    2de8:	4b0b      	ldr	r3, [pc, #44]	; (2e18 <lv_obj_get_child+0x44>)
    2dea:	4798      	blx	r3
}
    2dec:	b003      	add	sp, #12
    2dee:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2df0:	4b0a      	ldr	r3, [pc, #40]	; (2e1c <lv_obj_get_child+0x48>)
    2df2:	9300      	str	r3, [sp, #0]
    2df4:	f240 72ad 	movw	r2, #1965	; 0x7ad
    2df8:	4909      	ldr	r1, [pc, #36]	; (2e20 <lv_obj_get_child+0x4c>)
    2dfa:	2003      	movs	r0, #3
    2dfc:	4d09      	ldr	r5, [pc, #36]	; (2e24 <lv_obj_get_child+0x50>)
    2dfe:	47a8      	blx	r5
    2e00:	4622      	mov	r2, r4
    2e02:	2300      	movs	r3, #0
    2e04:	4808      	ldr	r0, [pc, #32]	; (2e28 <lv_obj_get_child+0x54>)
    2e06:	4909      	ldr	r1, [pc, #36]	; (2e2c <lv_obj_get_child+0x58>)
    2e08:	4788      	blx	r1
    2e0a:	e7fe      	b.n	2e0a <lv_obj_get_child+0x36>
        result = _lv_ll_get_head(&obj->child_ll);
    2e0c:	1d20      	adds	r0, r4, #4
    2e0e:	4b08      	ldr	r3, [pc, #32]	; (2e30 <lv_obj_get_child+0x5c>)
    2e10:	4798      	blx	r3
    2e12:	e7eb      	b.n	2dec <lv_obj_get_child+0x18>
    2e14:	000022a5 	.word	0x000022a5
    2e18:	00011fb1 	.word	0x00011fb1
    2e1c:	00024254 	.word	0x00024254
    2e20:	000247d0 	.word	0x000247d0
    2e24:	00012251 	.word	0x00012251
    2e28:	00024830 	.word	0x00024830
    2e2c:	000022ad 	.word	0x000022ad
    2e30:	00011f9d 	.word	0x00011f9d

00002e34 <lv_obj_get_coords>:
{
    2e34:	b530      	push	{r4, r5, lr}
    2e36:	b083      	sub	sp, #12
    2e38:	4605      	mov	r5, r0
    2e3a:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2e3c:	4b0e      	ldr	r3, [pc, #56]	; (2e78 <lv_obj_get_coords+0x44>)
    2e3e:	4798      	blx	r3
    2e40:	b160      	cbz	r0, 2e5c <lv_obj_get_coords+0x28>
    2e42:	f105 020f 	add.w	r2, r5, #15
    2e46:	f104 0008 	add.w	r0, r4, #8
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    2e4a:	4623      	mov	r3, r4
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
    2e4c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    2e50:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    2e54:	4283      	cmp	r3, r0
    2e56:	d1f9      	bne.n	2e4c <lv_obj_get_coords+0x18>
}
    2e58:	b003      	add	sp, #12
    2e5a:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2e5c:	4b07      	ldr	r3, [pc, #28]	; (2e7c <lv_obj_get_coords+0x48>)
    2e5e:	9300      	str	r3, [sp, #0]
    2e60:	f640 0201 	movw	r2, #2049	; 0x801
    2e64:	4906      	ldr	r1, [pc, #24]	; (2e80 <lv_obj_get_coords+0x4c>)
    2e66:	2003      	movs	r0, #3
    2e68:	4c06      	ldr	r4, [pc, #24]	; (2e84 <lv_obj_get_coords+0x50>)
    2e6a:	47a0      	blx	r4
    2e6c:	462a      	mov	r2, r5
    2e6e:	2300      	movs	r3, #0
    2e70:	4805      	ldr	r0, [pc, #20]	; (2e88 <lv_obj_get_coords+0x54>)
    2e72:	4906      	ldr	r1, [pc, #24]	; (2e8c <lv_obj_get_coords+0x58>)
    2e74:	4788      	blx	r1
    2e76:	e7fe      	b.n	2e76 <lv_obj_get_coords+0x42>
    2e78:	000022a5 	.word	0x000022a5
    2e7c:	000242cc 	.word	0x000242cc
    2e80:	000247d0 	.word	0x000247d0
    2e84:	00012251 	.word	0x00012251
    2e88:	00024830 	.word	0x00024830
    2e8c:	000022ad 	.word	0x000022ad

00002e90 <lv_obj_get_x>:
{
    2e90:	b530      	push	{r4, r5, lr}
    2e92:	b083      	sub	sp, #12
    2e94:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2e96:	4b0f      	ldr	r3, [pc, #60]	; (2ed4 <lv_obj_get_x+0x44>)
    2e98:	4798      	blx	r3
    2e9a:	b968      	cbnz	r0, 2eb8 <lv_obj_get_x+0x28>
    2e9c:	4b0e      	ldr	r3, [pc, #56]	; (2ed8 <lv_obj_get_x+0x48>)
    2e9e:	9300      	str	r3, [sp, #0]
    2ea0:	f640 0222 	movw	r2, #2082	; 0x822
    2ea4:	490d      	ldr	r1, [pc, #52]	; (2edc <lv_obj_get_x+0x4c>)
    2ea6:	2003      	movs	r0, #3
    2ea8:	4d0d      	ldr	r5, [pc, #52]	; (2ee0 <lv_obj_get_x+0x50>)
    2eaa:	47a8      	blx	r5
    2eac:	4622      	mov	r2, r4
    2eae:	2300      	movs	r3, #0
    2eb0:	480c      	ldr	r0, [pc, #48]	; (2ee4 <lv_obj_get_x+0x54>)
    2eb2:	490d      	ldr	r1, [pc, #52]	; (2ee8 <lv_obj_get_x+0x58>)
    2eb4:	4788      	blx	r1
    2eb6:	e7fe      	b.n	2eb6 <lv_obj_get_x+0x26>
    lv_obj_t * parent = lv_obj_get_parent(obj);
    2eb8:	4620      	mov	r0, r4
    2eba:	4b0c      	ldr	r3, [pc, #48]	; (2eec <lv_obj_get_x+0x5c>)
    2ebc:	4798      	blx	r3
    if(parent) {
    2ebe:	4603      	mov	r3, r0
    2ec0:	b128      	cbz	r0, 2ece <lv_obj_get_x+0x3e>
        rel_x             = obj->coords.x1 - parent->coords.x1;
    2ec2:	8a20      	ldrh	r0, [r4, #16]
    2ec4:	8a1b      	ldrh	r3, [r3, #16]
    2ec6:	1ac0      	subs	r0, r0, r3
    2ec8:	b200      	sxth	r0, r0
}
    2eca:	b003      	add	sp, #12
    2ecc:	bd30      	pop	{r4, r5, pc}
        rel_x = obj->coords.x1;
    2ece:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
    2ed2:	e7fa      	b.n	2eca <lv_obj_get_x+0x3a>
    2ed4:	000022a5 	.word	0x000022a5
    2ed8:	000242e0 	.word	0x000242e0
    2edc:	000247d0 	.word	0x000247d0
    2ee0:	00012251 	.word	0x00012251
    2ee4:	00024830 	.word	0x00024830
    2ee8:	000022ad 	.word	0x000022ad
    2eec:	00002c71 	.word	0x00002c71

00002ef0 <lv_obj_get_y>:
{
    2ef0:	b530      	push	{r4, r5, lr}
    2ef2:	b083      	sub	sp, #12
    2ef4:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2ef6:	4b0f      	ldr	r3, [pc, #60]	; (2f34 <lv_obj_get_y+0x44>)
    2ef8:	4798      	blx	r3
    2efa:	b968      	cbnz	r0, 2f18 <lv_obj_get_y+0x28>
    2efc:	4b0e      	ldr	r3, [pc, #56]	; (2f38 <lv_obj_get_y+0x48>)
    2efe:	9300      	str	r3, [sp, #0]
    2f00:	f640 0236 	movw	r2, #2102	; 0x836
    2f04:	490d      	ldr	r1, [pc, #52]	; (2f3c <lv_obj_get_y+0x4c>)
    2f06:	2003      	movs	r0, #3
    2f08:	4d0d      	ldr	r5, [pc, #52]	; (2f40 <lv_obj_get_y+0x50>)
    2f0a:	47a8      	blx	r5
    2f0c:	4622      	mov	r2, r4
    2f0e:	2300      	movs	r3, #0
    2f10:	480c      	ldr	r0, [pc, #48]	; (2f44 <lv_obj_get_y+0x54>)
    2f12:	490d      	ldr	r1, [pc, #52]	; (2f48 <lv_obj_get_y+0x58>)
    2f14:	4788      	blx	r1
    2f16:	e7fe      	b.n	2f16 <lv_obj_get_y+0x26>
    lv_obj_t * parent = lv_obj_get_parent(obj);
    2f18:	4620      	mov	r0, r4
    2f1a:	4b0c      	ldr	r3, [pc, #48]	; (2f4c <lv_obj_get_y+0x5c>)
    2f1c:	4798      	blx	r3
    if(parent) {
    2f1e:	4603      	mov	r3, r0
    2f20:	b128      	cbz	r0, 2f2e <lv_obj_get_y+0x3e>
        rel_y             = obj->coords.y1 - parent->coords.y1;
    2f22:	8a60      	ldrh	r0, [r4, #18]
    2f24:	8a5b      	ldrh	r3, [r3, #18]
    2f26:	1ac0      	subs	r0, r0, r3
    2f28:	b200      	sxth	r0, r0
}
    2f2a:	b003      	add	sp, #12
    2f2c:	bd30      	pop	{r4, r5, pc}
        rel_y = obj->coords.y1;
    2f2e:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
    2f32:	e7fa      	b.n	2f2a <lv_obj_get_y+0x3a>
    2f34:	000022a5 	.word	0x000022a5
    2f38:	000242f0 	.word	0x000242f0
    2f3c:	000247d0 	.word	0x000247d0
    2f40:	00012251 	.word	0x00012251
    2f44:	00024830 	.word	0x00024830
    2f48:	000022ad 	.word	0x000022ad
    2f4c:	00002c71 	.word	0x00002c71

00002f50 <lv_obj_get_width>:
{
    2f50:	b530      	push	{r4, r5, lr}
    2f52:	b083      	sub	sp, #12
    2f54:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2f56:	4b0c      	ldr	r3, [pc, #48]	; (2f88 <lv_obj_get_width+0x38>)
    2f58:	4798      	blx	r3
    2f5a:	b130      	cbz	r0, 2f6a <lv_obj_get_width+0x1a>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    2f5c:	8aa0      	ldrh	r0, [r4, #20]
    2f5e:	3001      	adds	r0, #1
    2f60:	8a23      	ldrh	r3, [r4, #16]
    2f62:	1ac0      	subs	r0, r0, r3
}
    2f64:	b200      	sxth	r0, r0
    2f66:	b003      	add	sp, #12
    2f68:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2f6a:	4b08      	ldr	r3, [pc, #32]	; (2f8c <lv_obj_get_width+0x3c>)
    2f6c:	9300      	str	r3, [sp, #0]
    2f6e:	f640 024a 	movw	r2, #2122	; 0x84a
    2f72:	4907      	ldr	r1, [pc, #28]	; (2f90 <lv_obj_get_width+0x40>)
    2f74:	2003      	movs	r0, #3
    2f76:	4d07      	ldr	r5, [pc, #28]	; (2f94 <lv_obj_get_width+0x44>)
    2f78:	47a8      	blx	r5
    2f7a:	4622      	mov	r2, r4
    2f7c:	2300      	movs	r3, #0
    2f7e:	4806      	ldr	r0, [pc, #24]	; (2f98 <lv_obj_get_width+0x48>)
    2f80:	4906      	ldr	r1, [pc, #24]	; (2f9c <lv_obj_get_width+0x4c>)
    2f82:	4788      	blx	r1
    2f84:	e7fe      	b.n	2f84 <lv_obj_get_width+0x34>
    2f86:	bf00      	nop
    2f88:	000022a5 	.word	0x000022a5
    2f8c:	00024300 	.word	0x00024300
    2f90:	000247d0 	.word	0x000247d0
    2f94:	00012251 	.word	0x00012251
    2f98:	00024830 	.word	0x00024830
    2f9c:	000022ad 	.word	0x000022ad

00002fa0 <lv_obj_get_height>:
{
    2fa0:	b530      	push	{r4, r5, lr}
    2fa2:	b083      	sub	sp, #12
    2fa4:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2fa6:	4b0c      	ldr	r3, [pc, #48]	; (2fd8 <lv_obj_get_height+0x38>)
    2fa8:	4798      	blx	r3
    2faa:	b130      	cbz	r0, 2fba <lv_obj_get_height+0x1a>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    2fac:	8ae0      	ldrh	r0, [r4, #22]
    2fae:	3001      	adds	r0, #1
    2fb0:	8a63      	ldrh	r3, [r4, #18]
    2fb2:	1ac0      	subs	r0, r0, r3
}
    2fb4:	b200      	sxth	r0, r0
    2fb6:	b003      	add	sp, #12
    2fb8:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2fba:	4b08      	ldr	r3, [pc, #32]	; (2fdc <lv_obj_get_height+0x3c>)
    2fbc:	9300      	str	r3, [sp, #0]
    2fbe:	f640 0256 	movw	r2, #2134	; 0x856
    2fc2:	4907      	ldr	r1, [pc, #28]	; (2fe0 <lv_obj_get_height+0x40>)
    2fc4:	2003      	movs	r0, #3
    2fc6:	4d07      	ldr	r5, [pc, #28]	; (2fe4 <lv_obj_get_height+0x44>)
    2fc8:	47a8      	blx	r5
    2fca:	4622      	mov	r2, r4
    2fcc:	2300      	movs	r3, #0
    2fce:	4806      	ldr	r0, [pc, #24]	; (2fe8 <lv_obj_get_height+0x48>)
    2fd0:	4906      	ldr	r1, [pc, #24]	; (2fec <lv_obj_get_height+0x4c>)
    2fd2:	4788      	blx	r1
    2fd4:	e7fe      	b.n	2fd4 <lv_obj_get_height+0x34>
    2fd6:	bf00      	nop
    2fd8:	000022a5 	.word	0x000022a5
    2fdc:	00024314 	.word	0x00024314
    2fe0:	000247d0 	.word	0x000247d0
    2fe4:	00012251 	.word	0x00012251
    2fe8:	00024830 	.word	0x00024830
    2fec:	000022ad 	.word	0x000022ad

00002ff0 <lv_obj_get_style_list>:
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
    2ff0:	b909      	cbnz	r1, 2ff6 <lv_obj_get_style_list+0x6>
    2ff2:	3028      	adds	r0, #40	; 0x28
    2ff4:	4770      	bx	lr
{
    2ff6:	b500      	push	{lr}
    2ff8:	b083      	sub	sp, #12
    info.part = part;
    2ffa:	f88d 1000 	strb.w	r1, [sp]
    info.result = NULL;
    2ffe:	2300      	movs	r3, #0
    3000:	9301      	str	r3, [sp, #4]
    res = lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STYLE, &info);
    3002:	466a      	mov	r2, sp
    3004:	2108      	movs	r1, #8
    3006:	4b04      	ldr	r3, [pc, #16]	; (3018 <lv_obj_get_style_list+0x28>)
    3008:	4798      	blx	r3
    if(res != LV_RES_OK) return NULL;
    300a:	2801      	cmp	r0, #1
    return info.result;
    300c:	bf0c      	ite	eq
    300e:	9801      	ldreq	r0, [sp, #4]
    if(res != LV_RES_OK) return NULL;
    3010:	2000      	movne	r0, #0
}
    3012:	b003      	add	sp, #12
    3014:	f85d fb04 	ldr.w	pc, [sp], #4
    3018:	00002b69 	.word	0x00002b69

0000301c <trans_del>:
 * @param part a part of object or 0xFF to remove from all parts
 * @param prop a property or 0xFF to remove all porpeties
 * @param tr_limit delete transitions only "older" then this. `NULL` is not used
 */
static void trans_del(lv_obj_t * obj, uint8_t part, lv_style_property_t prop, lv_style_trans_t * tr_limit)
{
    301c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3020:	4680      	mov	r8, r0
    3022:	468a      	mov	sl, r1
    3024:	4693      	mov	fp, r2
    3026:	461e      	mov	r6, r3
    lv_style_trans_t * tr;
    lv_style_trans_t * tr_prev;
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
    3028:	481c      	ldr	r0, [pc, #112]	; (309c <trans_del+0x80>)
    302a:	4b1d      	ldr	r3, [pc, #116]	; (30a0 <trans_del+0x84>)
    302c:	4798      	blx	r3
    while(tr != NULL) {
    302e:	2800      	cmp	r0, #0
    3030:	d031      	beq.n	3096 <trans_del+0x7a>
    3032:	4605      	mov	r5, r0
        if(tr == tr_limit) break;
    3034:	42b0      	cmp	r0, r6
    3036:	d02e      	beq.n	3096 <trans_del+0x7a>

        /*'tr' might be deleted, so get the next object while 'tr' is valid*/
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
    3038:	f8df 9060 	ldr.w	r9, [pc, #96]	; 309c <trans_del+0x80>
    303c:	4f19      	ldr	r7, [pc, #100]	; (30a4 <trans_del+0x88>)
    303e:	e009      	b.n	3054 <trans_del+0x38>

        if(tr->obj == obj && (part == tr->part || part == 0xFF) && (prop == tr->prop || prop == 0xFF)) {
    3040:	88ab      	ldrh	r3, [r5, #4]
    3042:	455b      	cmp	r3, fp
    3044:	d014      	beq.n	3070 <trans_del+0x54>
    3046:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    304a:	d011      	beq.n	3070 <trans_del+0x54>
    while(tr != NULL) {
    304c:	b31c      	cbz	r4, 3096 <trans_del+0x7a>
    304e:	4625      	mov	r5, r4
        if(tr == tr_limit) break;
    3050:	42a6      	cmp	r6, r4
    3052:	d020      	beq.n	3096 <trans_del+0x7a>
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
    3054:	4629      	mov	r1, r5
    3056:	4648      	mov	r0, r9
    3058:	47b8      	blx	r7
    305a:	4604      	mov	r4, r0
        if(tr->obj == obj && (part == tr->part || part == 0xFF) && (prop == tr->prop || prop == 0xFF)) {
    305c:	6828      	ldr	r0, [r5, #0]
    305e:	4540      	cmp	r0, r8
    3060:	d1f4      	bne.n	304c <trans_del+0x30>
    3062:	79a9      	ldrb	r1, [r5, #6]
    3064:	4551      	cmp	r1, sl
    3066:	d0eb      	beq.n	3040 <trans_del+0x24>
    3068:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    306c:	d1ee      	bne.n	304c <trans_del+0x30>
    306e:	e7e7      	b.n	3040 <trans_del+0x24>
            /* Remove the transitioned property from trans. style
             * to allow changing it by normal styles*/
            lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
    3070:	4b0d      	ldr	r3, [pc, #52]	; (30a8 <trans_del+0x8c>)
    3072:	4798      	blx	r3
            lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
    3074:	4b0d      	ldr	r3, [pc, #52]	; (30ac <trans_del+0x90>)
    3076:	4798      	blx	r3
            lv_style_remove_prop(style_trans, tr->prop);
    3078:	88a9      	ldrh	r1, [r5, #4]
    307a:	4b0d      	ldr	r3, [pc, #52]	; (30b0 <trans_del+0x94>)
    307c:	4798      	blx	r3

            lv_anim_del(tr, NULL);
    307e:	2100      	movs	r1, #0
    3080:	4628      	mov	r0, r5
    3082:	4b0c      	ldr	r3, [pc, #48]	; (30b4 <trans_del+0x98>)
    3084:	4798      	blx	r3
            _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
    3086:	4629      	mov	r1, r5
    3088:	4648      	mov	r0, r9
    308a:	4b0b      	ldr	r3, [pc, #44]	; (30b8 <trans_del+0x9c>)
    308c:	4798      	blx	r3
            lv_mem_free(tr);
    308e:	4628      	mov	r0, r5
    3090:	4b0a      	ldr	r3, [pc, #40]	; (30bc <trans_del+0xa0>)
    3092:	4798      	blx	r3
    3094:	e7da      	b.n	304c <trans_del+0x30>
    3096:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    309a:	bf00      	nop
    309c:	2000c738 	.word	0x2000c738
    30a0:	00011fa7 	.word	0x00011fa7
    30a4:	00011fdd 	.word	0x00011fdd
    30a8:	00002ff1 	.word	0x00002ff1
    30ac:	000070db 	.word	0x000070db
    30b0:	000067e1 	.word	0x000067e1
    30b4:	0001131d 	.word	0x0001131d
    30b8:	00012089 	.word	0x00012089
    30bc:	000124b9 	.word	0x000124b9

000030c0 <lv_obj_clean_style_list>:
{
    30c0:	b530      	push	{r4, r5, lr}
    30c2:	b083      	sub	sp, #12
    30c4:	4604      	mov	r4, r0
    30c6:	460d      	mov	r5, r1
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
    30c8:	4b0b      	ldr	r3, [pc, #44]	; (30f8 <lv_obj_clean_style_list+0x38>)
    30ca:	4798      	blx	r3
    if(style_dsc == NULL) {
    30cc:	b148      	cbz	r0, 30e2 <lv_obj_clean_style_list+0x22>
    _lv_style_list_reset(style_dsc);
    30ce:	4b0b      	ldr	r3, [pc, #44]	; (30fc <lv_obj_clean_style_list+0x3c>)
    30d0:	4798      	blx	r3
    trans_del(obj, part, 0xFF, NULL);
    30d2:	2300      	movs	r3, #0
    30d4:	22ff      	movs	r2, #255	; 0xff
    30d6:	4629      	mov	r1, r5
    30d8:	4620      	mov	r0, r4
    30da:	4c09      	ldr	r4, [pc, #36]	; (3100 <lv_obj_clean_style_list+0x40>)
    30dc:	47a0      	blx	r4
}
    30de:	b003      	add	sp, #12
    30e0:	bd30      	pop	{r4, r5, pc}
        LV_LOG_WARN("lv_obj_clean_style_list: can't find style with `part`");
    30e2:	4b08      	ldr	r3, [pc, #32]	; (3104 <lv_obj_clean_style_list+0x44>)
    30e4:	9300      	str	r3, [sp, #0]
    30e6:	4b08      	ldr	r3, [pc, #32]	; (3108 <lv_obj_clean_style_list+0x48>)
    30e8:	f240 4292 	movw	r2, #1170	; 0x492
    30ec:	4907      	ldr	r1, [pc, #28]	; (310c <lv_obj_clean_style_list+0x4c>)
    30ee:	2002      	movs	r0, #2
    30f0:	4c07      	ldr	r4, [pc, #28]	; (3110 <lv_obj_clean_style_list+0x50>)
    30f2:	47a0      	blx	r4
        return;
    30f4:	e7f3      	b.n	30de <lv_obj_clean_style_list+0x1e>
    30f6:	bf00      	nop
    30f8:	00002ff1 	.word	0x00002ff1
    30fc:	000070ed 	.word	0x000070ed
    3100:	0000301d 	.word	0x0000301d
    3104:	0002488c 	.word	0x0002488c
    3108:	000243d8 	.word	0x000243d8
    310c:	000247d0 	.word	0x000247d0
    3110:	00012251 	.word	0x00012251

00003114 <trans_anim_ready_cb>:
    tr->prop = prop_tmp;

}

static void trans_anim_ready_cb(lv_anim_t * a)
{
    3114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_style_trans_t * tr = a->var;
    3116:	6804      	ldr	r4, [r0, #0]
     * if there no more transitions for this property
     * It allows changing it by normal styles*/

    bool running = false;
    lv_style_trans_t * tr_i;
    _LV_LL_READ(LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
    3118:	4817      	ldr	r0, [pc, #92]	; (3178 <trans_anim_ready_cb+0x64>)
    311a:	4b18      	ldr	r3, [pc, #96]	; (317c <trans_anim_ready_cb+0x68>)
    311c:	4798      	blx	r3
    311e:	b308      	cbz	r0, 3164 <trans_anim_ready_cb+0x50>
    3120:	4601      	mov	r1, r0
    3122:	2700      	movs	r7, #0
    3124:	4e14      	ldr	r6, [pc, #80]	; (3178 <trans_anim_ready_cb+0x64>)
    3126:	4d16      	ldr	r5, [pc, #88]	; (3180 <trans_anim_ready_cb+0x6c>)
    3128:	e003      	b.n	3132 <trans_anim_ready_cb+0x1e>
    312a:	4630      	mov	r0, r6
    312c:	47a8      	blx	r5
    312e:	4601      	mov	r1, r0
    3130:	b178      	cbz	r0, 3152 <trans_anim_ready_cb+0x3e>
        if(tr_i != tr && tr_i->obj == tr->obj && tr_i->part == tr->part && tr_i->prop == tr->prop) {
    3132:	428c      	cmp	r4, r1
    3134:	d0f9      	beq.n	312a <trans_anim_ready_cb+0x16>
    3136:	680a      	ldr	r2, [r1, #0]
    3138:	6823      	ldr	r3, [r4, #0]
    313a:	429a      	cmp	r2, r3
    313c:	d1f5      	bne.n	312a <trans_anim_ready_cb+0x16>
    313e:	684b      	ldr	r3, [r1, #4]
    3140:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    3144:	6863      	ldr	r3, [r4, #4]
    3146:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
            running = true;
    314a:	429a      	cmp	r2, r3
    314c:	bf08      	it	eq
    314e:	2701      	moveq	r7, #1
    3150:	e7eb      	b.n	312a <trans_anim_ready_cb+0x16>
        }
    }

    if(!running) {
    3152:	b13f      	cbz	r7, 3164 <trans_anim_ready_cb+0x50>
        lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
        lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
        lv_style_remove_prop(style_trans, tr->prop);
    }

    _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
    3154:	4621      	mov	r1, r4
    3156:	4808      	ldr	r0, [pc, #32]	; (3178 <trans_anim_ready_cb+0x64>)
    3158:	4b0a      	ldr	r3, [pc, #40]	; (3184 <trans_anim_ready_cb+0x70>)
    315a:	4798      	blx	r3
    lv_mem_free(tr);
    315c:	4620      	mov	r0, r4
    315e:	4b0a      	ldr	r3, [pc, #40]	; (3188 <trans_anim_ready_cb+0x74>)
    3160:	4798      	blx	r3
    3162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
    3164:	79a1      	ldrb	r1, [r4, #6]
    3166:	6820      	ldr	r0, [r4, #0]
    3168:	4b08      	ldr	r3, [pc, #32]	; (318c <trans_anim_ready_cb+0x78>)
    316a:	4798      	blx	r3
        lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
    316c:	4b08      	ldr	r3, [pc, #32]	; (3190 <trans_anim_ready_cb+0x7c>)
    316e:	4798      	blx	r3
        lv_style_remove_prop(style_trans, tr->prop);
    3170:	88a1      	ldrh	r1, [r4, #4]
    3172:	4b08      	ldr	r3, [pc, #32]	; (3194 <trans_anim_ready_cb+0x80>)
    3174:	4798      	blx	r3
    3176:	e7ed      	b.n	3154 <trans_anim_ready_cb+0x40>
    3178:	2000c738 	.word	0x2000c738
    317c:	00011f9d 	.word	0x00011f9d
    3180:	00011fb1 	.word	0x00011fb1
    3184:	00012089 	.word	0x00012089
    3188:	000124b9 	.word	0x000124b9
    318c:	00002ff1 	.word	0x00002ff1
    3190:	000070db 	.word	0x000070db
    3194:	000067e1 	.word	0x000067e1

00003198 <lv_obj_get_hidden>:
{
    3198:	b530      	push	{r4, r5, lr}
    319a:	b083      	sub	sp, #12
    319c:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    319e:	4b0b      	ldr	r3, [pc, #44]	; (31cc <lv_obj_get_hidden+0x34>)
    31a0:	4798      	blx	r3
    31a2:	b128      	cbz	r0, 31b0 <lv_obj_get_hidden+0x18>
    return obj->hidden == 0 ? false : true;
    31a4:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
    31a8:	f3c0 1000 	ubfx	r0, r0, #4, #1
    31ac:	b003      	add	sp, #12
    31ae:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    31b0:	4b07      	ldr	r3, [pc, #28]	; (31d0 <lv_obj_get_hidden+0x38>)
    31b2:	9300      	str	r3, [sp, #0]
    31b4:	f640 2241 	movw	r2, #2625	; 0xa41
    31b8:	4906      	ldr	r1, [pc, #24]	; (31d4 <lv_obj_get_hidden+0x3c>)
    31ba:	2003      	movs	r0, #3
    31bc:	4d06      	ldr	r5, [pc, #24]	; (31d8 <lv_obj_get_hidden+0x40>)
    31be:	47a8      	blx	r5
    31c0:	4622      	mov	r2, r4
    31c2:	2300      	movs	r3, #0
    31c4:	4805      	ldr	r0, [pc, #20]	; (31dc <lv_obj_get_hidden+0x44>)
    31c6:	4906      	ldr	r1, [pc, #24]	; (31e0 <lv_obj_get_hidden+0x48>)
    31c8:	4788      	blx	r1
    31ca:	e7fe      	b.n	31ca <lv_obj_get_hidden+0x32>
    31cc:	000022a5 	.word	0x000022a5
    31d0:	00024428 	.word	0x00024428
    31d4:	000247d0 	.word	0x000247d0
    31d8:	00012251 	.word	0x00012251
    31dc:	00024830 	.word	0x00024830
    31e0:	000022ad 	.word	0x000022ad

000031e4 <lv_obj_invalidate_area>:
{
    31e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    31e8:	b086      	sub	sp, #24
    31ea:	4604      	mov	r4, r0
    31ec:	460e      	mov	r6, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    31ee:	4b3a      	ldr	r3, [pc, #232]	; (32d8 <lv_obj_invalidate_area+0xf4>)
    31f0:	4798      	blx	r3
    31f2:	b968      	cbnz	r0, 3210 <lv_obj_invalidate_area+0x2c>
    31f4:	4b39      	ldr	r3, [pc, #228]	; (32dc <lv_obj_invalidate_area+0xf8>)
    31f6:	9300      	str	r3, [sp, #0]
    31f8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    31fc:	4938      	ldr	r1, [pc, #224]	; (32e0 <lv_obj_invalidate_area+0xfc>)
    31fe:	2003      	movs	r0, #3
    3200:	4d38      	ldr	r5, [pc, #224]	; (32e4 <lv_obj_invalidate_area+0x100>)
    3202:	47a8      	blx	r5
    3204:	4622      	mov	r2, r4
    3206:	2300      	movs	r3, #0
    3208:	4837      	ldr	r0, [pc, #220]	; (32e8 <lv_obj_invalidate_area+0x104>)
    320a:	4938      	ldr	r1, [pc, #224]	; (32ec <lv_obj_invalidate_area+0x108>)
    320c:	4788      	blx	r1
    320e:	e7fe      	b.n	320e <lv_obj_invalidate_area+0x2a>
    if(lv_obj_get_hidden(obj)) return;
    3210:	4620      	mov	r0, r4
    3212:	4b37      	ldr	r3, [pc, #220]	; (32f0 <lv_obj_invalidate_area+0x10c>)
    3214:	4798      	blx	r3
    3216:	b110      	cbz	r0, 321e <lv_obj_invalidate_area+0x3a>
}
    3218:	b006      	add	sp, #24
    321a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
    321e:	4620      	mov	r0, r4
    3220:	4b34      	ldr	r3, [pc, #208]	; (32f4 <lv_obj_invalidate_area+0x110>)
    3222:	4798      	blx	r3
    3224:	4607      	mov	r7, r0
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
    3226:	4b34      	ldr	r3, [pc, #208]	; (32f8 <lv_obj_invalidate_area+0x114>)
    3228:	4798      	blx	r3
    322a:	4605      	mov	r5, r0
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
    322c:	4b33      	ldr	r3, [pc, #204]	; (32fc <lv_obj_invalidate_area+0x118>)
    322e:	4798      	blx	r3
    3230:	4287      	cmp	r7, r0
    3232:	d009      	beq.n	3248 <lv_obj_invalidate_area+0x64>
    3234:	4628      	mov	r0, r5
    3236:	4b32      	ldr	r3, [pc, #200]	; (3300 <lv_obj_invalidate_area+0x11c>)
    3238:	4798      	blx	r3
    323a:	4287      	cmp	r7, r0
    323c:	d004      	beq.n	3248 <lv_obj_invalidate_area+0x64>
       obj_scr == lv_disp_get_layer_sys(disp)) {
    323e:	4628      	mov	r0, r5
    3240:	4b30      	ldr	r3, [pc, #192]	; (3304 <lv_obj_invalidate_area+0x120>)
    3242:	4798      	blx	r3
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
    3244:	4287      	cmp	r7, r0
    3246:	d1e7      	bne.n	3218 <lv_obj_invalidate_area+0x34>
        lv_coord_t ext_size = obj->ext_draw_pad;
    3248:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
    324c:	f104 020f 	add.w	r2, r4, #15
    3250:	f104 0017 	add.w	r0, r4, #23
    uint8_t * d8 = (uint8_t *)dst;
    3254:	a902      	add	r1, sp, #8
        *d8 = *s8;
    3256:	f812 7f01 	ldrb.w	r7, [r2, #1]!
    325a:	f801 7b01 	strb.w	r7, [r1], #1
    while(len) {
    325e:	4282      	cmp	r2, r0
    3260:	d1f9      	bne.n	3256 <lv_obj_invalidate_area+0x72>
        obj_coords.x1 -= ext_size;
    3262:	b29b      	uxth	r3, r3
    3264:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    3268:	1ad2      	subs	r2, r2, r3
    326a:	f8ad 2008 	strh.w	r2, [sp, #8]
        obj_coords.y1 -= ext_size;
    326e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    3272:	1ad2      	subs	r2, r2, r3
    3274:	f8ad 200a 	strh.w	r2, [sp, #10]
        obj_coords.x2 += ext_size;
    3278:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    327c:	441a      	add	r2, r3
    327e:	f8ad 200c 	strh.w	r2, [sp, #12]
        obj_coords.y2 += ext_size;
    3282:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    3286:	4413      	add	r3, r2
    3288:	f8ad 300e 	strh.w	r3, [sp, #14]
        is_common = _lv_area_intersect(&area_trunc, area, &obj_coords);
    328c:	aa02      	add	r2, sp, #8
    328e:	4631      	mov	r1, r6
    3290:	a804      	add	r0, sp, #16
    3292:	4b1d      	ldr	r3, [pc, #116]	; (3308 <lv_obj_invalidate_area+0x124>)
    3294:	4798      	blx	r3
        if(is_common == false) return;  /*The area is not on the object*/
    3296:	2800      	cmp	r0, #0
    3298:	d0be      	beq.n	3218 <lv_obj_invalidate_area+0x34>
        lv_obj_t * par = lv_obj_get_parent(obj);
    329a:	4620      	mov	r0, r4
    329c:	4b1b      	ldr	r3, [pc, #108]	; (330c <lv_obj_invalidate_area+0x128>)
    329e:	4798      	blx	r3
        while(par != NULL) {
    32a0:	4604      	mov	r4, r0
    32a2:	b198      	cbz	r0, 32cc <lv_obj_invalidate_area+0xe8>
            is_common = _lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
    32a4:	f8df 8060 	ldr.w	r8, [pc, #96]	; 3308 <lv_obj_invalidate_area+0x124>
            if(lv_obj_get_hidden(par)) return; /*If the parent is hidden then the child is hidden and won't be drawn*/
    32a8:	4f11      	ldr	r7, [pc, #68]	; (32f0 <lv_obj_invalidate_area+0x10c>)
            par = lv_obj_get_parent(par);
    32aa:	4e18      	ldr	r6, [pc, #96]	; (330c <lv_obj_invalidate_area+0x128>)
            is_common = _lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
    32ac:	f104 0210 	add.w	r2, r4, #16
    32b0:	a904      	add	r1, sp, #16
    32b2:	4608      	mov	r0, r1
    32b4:	47c0      	blx	r8
            if(is_common == false) break;       /*If no common parts with parent break;*/
    32b6:	2800      	cmp	r0, #0
    32b8:	d0ae      	beq.n	3218 <lv_obj_invalidate_area+0x34>
            if(lv_obj_get_hidden(par)) return; /*If the parent is hidden then the child is hidden and won't be drawn*/
    32ba:	4620      	mov	r0, r4
    32bc:	47b8      	blx	r7
    32be:	2800      	cmp	r0, #0
    32c0:	d1aa      	bne.n	3218 <lv_obj_invalidate_area+0x34>
            par = lv_obj_get_parent(par);
    32c2:	4620      	mov	r0, r4
    32c4:	47b0      	blx	r6
        while(par != NULL) {
    32c6:	4604      	mov	r4, r0
    32c8:	2800      	cmp	r0, #0
    32ca:	d1ef      	bne.n	32ac <lv_obj_invalidate_area+0xc8>
        if(is_common) _lv_inv_area(disp, &area_trunc);
    32cc:	a904      	add	r1, sp, #16
    32ce:	4628      	mov	r0, r5
    32d0:	4b0f      	ldr	r3, [pc, #60]	; (3310 <lv_obj_invalidate_area+0x12c>)
    32d2:	4798      	blx	r3
    32d4:	e7a0      	b.n	3218 <lv_obj_invalidate_area+0x34>
    32d6:	bf00      	nop
    32d8:	000022a5 	.word	0x000022a5
    32dc:	0002443c 	.word	0x0002443c
    32e0:	000247d0 	.word	0x000247d0
    32e4:	00012251 	.word	0x00012251
    32e8:	00024830 	.word	0x00024830
    32ec:	000022ad 	.word	0x000022ad
    32f0:	00003199 	.word	0x00003199
    32f4:	00002cb9 	.word	0x00002cb9
    32f8:	00002d15 	.word	0x00002d15
    32fc:	00002341 	.word	0x00002341
    3300:	00002381 	.word	0x00002381
    3304:	000023c1 	.word	0x000023c1
    3308:	0001150d 	.word	0x0001150d
    330c:	00002c71 	.word	0x00002c71
    3310:	00005e4d 	.word	0x00005e4d

00003314 <lv_obj_invalidate>:
{
    3314:	b530      	push	{r4, r5, lr}
    3316:	b085      	sub	sp, #20
    3318:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    331a:	4b1c      	ldr	r3, [pc, #112]	; (338c <lv_obj_invalidate+0x78>)
    331c:	4798      	blx	r3
    331e:	b338      	cbz	r0, 3370 <lv_obj_invalidate+0x5c>
    lv_coord_t ext_size = obj->ext_draw_pad;
    3320:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
    3324:	f104 020f 	add.w	r2, r4, #15
    3328:	f104 0517 	add.w	r5, r4, #23
    uint8_t * d8 = (uint8_t *)dst;
    332c:	a902      	add	r1, sp, #8
        *d8 = *s8;
    332e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    3332:	f801 0b01 	strb.w	r0, [r1], #1
    while(len) {
    3336:	42aa      	cmp	r2, r5
    3338:	d1f9      	bne.n	332e <lv_obj_invalidate+0x1a>
    obj_coords.x1 -= ext_size;
    333a:	b29b      	uxth	r3, r3
    333c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    3340:	1ad2      	subs	r2, r2, r3
    3342:	f8ad 2008 	strh.w	r2, [sp, #8]
    obj_coords.y1 -= ext_size;
    3346:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    334a:	1ad2      	subs	r2, r2, r3
    334c:	f8ad 200a 	strh.w	r2, [sp, #10]
    obj_coords.x2 += ext_size;
    3350:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    3354:	441a      	add	r2, r3
    3356:	f8ad 200c 	strh.w	r2, [sp, #12]
    obj_coords.y2 += ext_size;
    335a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    335e:	4413      	add	r3, r2
    3360:	f8ad 300e 	strh.w	r3, [sp, #14]
    lv_obj_invalidate_area(obj, &obj_coords);
    3364:	a902      	add	r1, sp, #8
    3366:	4620      	mov	r0, r4
    3368:	4b09      	ldr	r3, [pc, #36]	; (3390 <lv_obj_invalidate+0x7c>)
    336a:	4798      	blx	r3
}
    336c:	b005      	add	sp, #20
    336e:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3370:	4b08      	ldr	r3, [pc, #32]	; (3394 <lv_obj_invalidate+0x80>)
    3372:	9300      	str	r3, [sp, #0]
    3374:	f240 220d 	movw	r2, #525	; 0x20d
    3378:	4907      	ldr	r1, [pc, #28]	; (3398 <lv_obj_invalidate+0x84>)
    337a:	2003      	movs	r0, #3
    337c:	4d07      	ldr	r5, [pc, #28]	; (339c <lv_obj_invalidate+0x88>)
    337e:	47a8      	blx	r5
    3380:	4622      	mov	r2, r4
    3382:	2300      	movs	r3, #0
    3384:	4806      	ldr	r0, [pc, #24]	; (33a0 <lv_obj_invalidate+0x8c>)
    3386:	4907      	ldr	r1, [pc, #28]	; (33a4 <lv_obj_invalidate+0x90>)
    3388:	4788      	blx	r1
    338a:	e7fe      	b.n	338a <lv_obj_invalidate+0x76>
    338c:	000022a5 	.word	0x000022a5
    3390:	000031e5 	.word	0x000031e5
    3394:	00024454 	.word	0x00024454
    3398:	000247d0 	.word	0x000247d0
    339c:	00012251 	.word	0x00012251
    33a0:	00024830 	.word	0x00024830
    33a4:	000022ad 	.word	0x000022ad

000033a8 <lv_obj_move_foreground>:
{
    33a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    33aa:	b083      	sub	sp, #12
    33ac:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    33ae:	4b16      	ldr	r3, [pc, #88]	; (3408 <lv_obj_move_foreground+0x60>)
    33b0:	4798      	blx	r3
    33b2:	b968      	cbnz	r0, 33d0 <lv_obj_move_foreground+0x28>
    33b4:	4b15      	ldr	r3, [pc, #84]	; (340c <lv_obj_move_foreground+0x64>)
    33b6:	9300      	str	r3, [sp, #0]
    33b8:	f240 2262 	movw	r2, #610	; 0x262
    33bc:	4914      	ldr	r1, [pc, #80]	; (3410 <lv_obj_move_foreground+0x68>)
    33be:	2003      	movs	r0, #3
    33c0:	4c14      	ldr	r4, [pc, #80]	; (3414 <lv_obj_move_foreground+0x6c>)
    33c2:	47a0      	blx	r4
    33c4:	462a      	mov	r2, r5
    33c6:	2300      	movs	r3, #0
    33c8:	4813      	ldr	r0, [pc, #76]	; (3418 <lv_obj_move_foreground+0x70>)
    33ca:	4914      	ldr	r1, [pc, #80]	; (341c <lv_obj_move_foreground+0x74>)
    33cc:	4788      	blx	r1
    33ce:	e7fe      	b.n	33ce <lv_obj_move_foreground+0x26>
    lv_obj_t * parent = lv_obj_get_parent(obj);
    33d0:	4628      	mov	r0, r5
    33d2:	4b13      	ldr	r3, [pc, #76]	; (3420 <lv_obj_move_foreground+0x78>)
    33d4:	4798      	blx	r3
    33d6:	4604      	mov	r4, r0
    if(_lv_ll_get_head(&parent->child_ll) == obj) return;
    33d8:	1d06      	adds	r6, r0, #4
    33da:	4630      	mov	r0, r6
    33dc:	4b11      	ldr	r3, [pc, #68]	; (3424 <lv_obj_move_foreground+0x7c>)
    33de:	4798      	blx	r3
    33e0:	4285      	cmp	r5, r0
    33e2:	d00f      	beq.n	3404 <lv_obj_move_foreground+0x5c>
    lv_obj_invalidate(parent);
    33e4:	4620      	mov	r0, r4
    33e6:	4f10      	ldr	r7, [pc, #64]	; (3428 <lv_obj_move_foreground+0x80>)
    33e8:	47b8      	blx	r7
    _lv_ll_chg_list(&parent->child_ll, &parent->child_ll, obj, true);
    33ea:	2301      	movs	r3, #1
    33ec:	462a      	mov	r2, r5
    33ee:	4631      	mov	r1, r6
    33f0:	4630      	mov	r0, r6
    33f2:	4e0e      	ldr	r6, [pc, #56]	; (342c <lv_obj_move_foreground+0x84>)
    33f4:	47b0      	blx	r6
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
    33f6:	69e3      	ldr	r3, [r4, #28]
    33f8:	462a      	mov	r2, r5
    33fa:	2101      	movs	r1, #1
    33fc:	4620      	mov	r0, r4
    33fe:	4798      	blx	r3
    lv_obj_invalidate(parent);
    3400:	4620      	mov	r0, r4
    3402:	47b8      	blx	r7
}
    3404:	b003      	add	sp, #12
    3406:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3408:	000022a5 	.word	0x000022a5
    340c:	00024468 	.word	0x00024468
    3410:	000247d0 	.word	0x000247d0
    3414:	00012251 	.word	0x00012251
    3418:	00024830 	.word	0x00024830
    341c:	000022ad 	.word	0x000022ad
    3420:	00002c71 	.word	0x00002c71
    3424:	00011f9d 	.word	0x00011f9d
    3428:	00003315 	.word	0x00003315
    342c:	00012115 	.word	0x00012115

00003430 <lv_obj_set_pos>:
{
    3430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3434:	b084      	sub	sp, #16
    3436:	4604      	mov	r4, r0
    3438:	468a      	mov	sl, r1
    343a:	4617      	mov	r7, r2
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    343c:	4b2d      	ldr	r3, [pc, #180]	; (34f4 <lv_obj_set_pos+0xc4>)
    343e:	4798      	blx	r3
    3440:	2800      	cmp	r0, #0
    3442:	d03e      	beq.n	34c2 <lv_obj_set_pos+0x92>
    lv_obj_t * par = obj->parent;
    3444:	6826      	ldr	r6, [r4, #0]
    if(par == NULL) {
    3446:	2e00      	cmp	r6, #0
    3448:	d049      	beq.n	34de <lv_obj_set_pos+0xae>
    diff.x = x - obj->coords.x1;
    344a:	8a33      	ldrh	r3, [r6, #16]
    344c:	8a22      	ldrh	r2, [r4, #16]
    344e:	1a9b      	subs	r3, r3, r2
    3450:	4453      	add	r3, sl
    3452:	fa1f fa83 	uxth.w	sl, r3
    3456:	fa0f f88a 	sxth.w	r8, sl
    diff.y = y - obj->coords.y1;
    345a:	8a75      	ldrh	r5, [r6, #18]
    345c:	8a63      	ldrh	r3, [r4, #18]
    345e:	1aed      	subs	r5, r5, r3
    3460:	443d      	add	r5, r7
    3462:	b2ad      	uxth	r5, r5
    3464:	fa0f f985 	sxth.w	r9, r5
    if(diff.x == 0 && diff.y == 0) return;
    3468:	f1b8 0f00 	cmp.w	r8, #0
    346c:	d102      	bne.n	3474 <lv_obj_set_pos+0x44>
    346e:	f1b9 0f00 	cmp.w	r9, #0
    3472:	d023      	beq.n	34bc <lv_obj_set_pos+0x8c>
    lv_obj_invalidate(obj);
    3474:	4620      	mov	r0, r4
    3476:	4f20      	ldr	r7, [pc, #128]	; (34f8 <lv_obj_set_pos+0xc8>)
    3478:	47b8      	blx	r7
    lv_obj_get_coords(obj, &ori);
    347a:	a902      	add	r1, sp, #8
    347c:	4620      	mov	r0, r4
    347e:	4b1f      	ldr	r3, [pc, #124]	; (34fc <lv_obj_set_pos+0xcc>)
    3480:	4798      	blx	r3
    obj->coords.x1 += diff.x;
    3482:	8a23      	ldrh	r3, [r4, #16]
    3484:	4453      	add	r3, sl
    3486:	8223      	strh	r3, [r4, #16]
    obj->coords.y1 += diff.y;
    3488:	8a63      	ldrh	r3, [r4, #18]
    348a:	442b      	add	r3, r5
    348c:	8263      	strh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
    348e:	8aa3      	ldrh	r3, [r4, #20]
    3490:	4453      	add	r3, sl
    3492:	82a3      	strh	r3, [r4, #20]
    obj->coords.y2 += diff.y;
    3494:	8ae3      	ldrh	r3, [r4, #22]
    3496:	441d      	add	r5, r3
    3498:	82e5      	strh	r5, [r4, #22]
    refresh_children_position(obj, diff.x, diff.y);
    349a:	464a      	mov	r2, r9
    349c:	4641      	mov	r1, r8
    349e:	4620      	mov	r0, r4
    34a0:	4b17      	ldr	r3, [pc, #92]	; (3500 <lv_obj_set_pos+0xd0>)
    34a2:	4798      	blx	r3
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
    34a4:	69e3      	ldr	r3, [r4, #28]
    34a6:	aa02      	add	r2, sp, #8
    34a8:	2102      	movs	r1, #2
    34aa:	4620      	mov	r0, r4
    34ac:	4798      	blx	r3
    par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
    34ae:	69f3      	ldr	r3, [r6, #28]
    34b0:	4622      	mov	r2, r4
    34b2:	2101      	movs	r1, #1
    34b4:	4630      	mov	r0, r6
    34b6:	4798      	blx	r3
    lv_obj_invalidate(obj);
    34b8:	4620      	mov	r0, r4
    34ba:	47b8      	blx	r7
}
    34bc:	b004      	add	sp, #16
    34be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    34c2:	4b10      	ldr	r3, [pc, #64]	; (3504 <lv_obj_set_pos+0xd4>)
    34c4:	9300      	str	r3, [sp, #0]
    34c6:	f240 2296 	movw	r2, #662	; 0x296
    34ca:	490f      	ldr	r1, [pc, #60]	; (3508 <lv_obj_set_pos+0xd8>)
    34cc:	2003      	movs	r0, #3
    34ce:	4d0f      	ldr	r5, [pc, #60]	; (350c <lv_obj_set_pos+0xdc>)
    34d0:	47a8      	blx	r5
    34d2:	4622      	mov	r2, r4
    34d4:	2300      	movs	r3, #0
    34d6:	480e      	ldr	r0, [pc, #56]	; (3510 <lv_obj_set_pos+0xe0>)
    34d8:	490e      	ldr	r1, [pc, #56]	; (3514 <lv_obj_set_pos+0xe4>)
    34da:	4788      	blx	r1
    34dc:	e7fe      	b.n	34dc <lv_obj_set_pos+0xac>
        LV_LOG_WARN("lv_obj_set_pos: not changing position of screen object");
    34de:	4b0e      	ldr	r3, [pc, #56]	; (3518 <lv_obj_set_pos+0xe8>)
    34e0:	9300      	str	r3, [sp, #0]
    34e2:	4b08      	ldr	r3, [pc, #32]	; (3504 <lv_obj_set_pos+0xd4>)
    34e4:	f44f 7227 	mov.w	r2, #668	; 0x29c
    34e8:	4907      	ldr	r1, [pc, #28]	; (3508 <lv_obj_set_pos+0xd8>)
    34ea:	2002      	movs	r0, #2
    34ec:	4c07      	ldr	r4, [pc, #28]	; (350c <lv_obj_set_pos+0xdc>)
    34ee:	47a0      	blx	r4
        return;
    34f0:	e7e4      	b.n	34bc <lv_obj_set_pos+0x8c>
    34f2:	bf00      	nop
    34f4:	000022a5 	.word	0x000022a5
    34f8:	00003315 	.word	0x00003315
    34fc:	00002e35 	.word	0x00002e35
    3500:	00002801 	.word	0x00002801
    3504:	00024498 	.word	0x00024498
    3508:	000247d0 	.word	0x000247d0
    350c:	00012251 	.word	0x00012251
    3510:	00024830 	.word	0x00024830
    3514:	000022ad 	.word	0x000022ad
    3518:	000248c4 	.word	0x000248c4

0000351c <lv_obj_set_x>:
{
    351c:	b530      	push	{r4, r5, lr}
    351e:	b083      	sub	sp, #12
    3520:	4604      	mov	r4, r0
    3522:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3524:	4b0d      	ldr	r3, [pc, #52]	; (355c <lv_obj_set_x+0x40>)
    3526:	4798      	blx	r3
    3528:	b968      	cbnz	r0, 3546 <lv_obj_set_x+0x2a>
    352a:	4b0d      	ldr	r3, [pc, #52]	; (3560 <lv_obj_set_x+0x44>)
    352c:	9300      	str	r3, [sp, #0]
    352e:	f44f 7233 	mov.w	r2, #716	; 0x2cc
    3532:	490c      	ldr	r1, [pc, #48]	; (3564 <lv_obj_set_x+0x48>)
    3534:	2003      	movs	r0, #3
    3536:	4d0c      	ldr	r5, [pc, #48]	; (3568 <lv_obj_set_x+0x4c>)
    3538:	47a8      	blx	r5
    353a:	4622      	mov	r2, r4
    353c:	2300      	movs	r3, #0
    353e:	480b      	ldr	r0, [pc, #44]	; (356c <lv_obj_set_x+0x50>)
    3540:	490b      	ldr	r1, [pc, #44]	; (3570 <lv_obj_set_x+0x54>)
    3542:	4788      	blx	r1
    3544:	e7fe      	b.n	3544 <lv_obj_set_x+0x28>
    lv_obj_set_pos(obj, x, lv_obj_get_y(obj));
    3546:	4620      	mov	r0, r4
    3548:	4b0a      	ldr	r3, [pc, #40]	; (3574 <lv_obj_set_x+0x58>)
    354a:	4798      	blx	r3
    354c:	4602      	mov	r2, r0
    354e:	4629      	mov	r1, r5
    3550:	4620      	mov	r0, r4
    3552:	4b09      	ldr	r3, [pc, #36]	; (3578 <lv_obj_set_x+0x5c>)
    3554:	4798      	blx	r3
}
    3556:	b003      	add	sp, #12
    3558:	bd30      	pop	{r4, r5, pc}
    355a:	bf00      	nop
    355c:	000022a5 	.word	0x000022a5
    3560:	000244a8 	.word	0x000244a8
    3564:	000247d0 	.word	0x000247d0
    3568:	00012251 	.word	0x00012251
    356c:	00024830 	.word	0x00024830
    3570:	000022ad 	.word	0x000022ad
    3574:	00002ef1 	.word	0x00002ef1
    3578:	00003431 	.word	0x00003431

0000357c <lv_obj_set_y>:
{
    357c:	b530      	push	{r4, r5, lr}
    357e:	b083      	sub	sp, #12
    3580:	4604      	mov	r4, r0
    3582:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3584:	4b0d      	ldr	r3, [pc, #52]	; (35bc <lv_obj_set_y+0x40>)
    3586:	4798      	blx	r3
    3588:	b968      	cbnz	r0, 35a6 <lv_obj_set_y+0x2a>
    358a:	4b0d      	ldr	r3, [pc, #52]	; (35c0 <lv_obj_set_y+0x44>)
    358c:	9300      	str	r3, [sp, #0]
    358e:	f44f 7236 	mov.w	r2, #728	; 0x2d8
    3592:	490c      	ldr	r1, [pc, #48]	; (35c4 <lv_obj_set_y+0x48>)
    3594:	2003      	movs	r0, #3
    3596:	4d0c      	ldr	r5, [pc, #48]	; (35c8 <lv_obj_set_y+0x4c>)
    3598:	47a8      	blx	r5
    359a:	4622      	mov	r2, r4
    359c:	2300      	movs	r3, #0
    359e:	480b      	ldr	r0, [pc, #44]	; (35cc <lv_obj_set_y+0x50>)
    35a0:	490b      	ldr	r1, [pc, #44]	; (35d0 <lv_obj_set_y+0x54>)
    35a2:	4788      	blx	r1
    35a4:	e7fe      	b.n	35a4 <lv_obj_set_y+0x28>
    lv_obj_set_pos(obj, lv_obj_get_x(obj), y);
    35a6:	4620      	mov	r0, r4
    35a8:	4b0a      	ldr	r3, [pc, #40]	; (35d4 <lv_obj_set_y+0x58>)
    35aa:	4798      	blx	r3
    35ac:	462a      	mov	r2, r5
    35ae:	4601      	mov	r1, r0
    35b0:	4620      	mov	r0, r4
    35b2:	4b09      	ldr	r3, [pc, #36]	; (35d8 <lv_obj_set_y+0x5c>)
    35b4:	4798      	blx	r3
}
    35b6:	b003      	add	sp, #12
    35b8:	bd30      	pop	{r4, r5, pc}
    35ba:	bf00      	nop
    35bc:	000022a5 	.word	0x000022a5
    35c0:	000244b8 	.word	0x000244b8
    35c4:	000247d0 	.word	0x000247d0
    35c8:	00012251 	.word	0x00012251
    35cc:	00024830 	.word	0x00024830
    35d0:	000022ad 	.word	0x000022ad
    35d4:	00002e91 	.word	0x00002e91
    35d8:	00003431 	.word	0x00003431

000035dc <lv_obj_align>:
{
    35dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    35e0:	b085      	sub	sp, #20
    35e2:	4604      	mov	r4, r0
    35e4:	460d      	mov	r5, r1
    35e6:	4690      	mov	r8, r2
    35e8:	461f      	mov	r7, r3
    35ea:	f9bd 6030 	ldrsh.w	r6, [sp, #48]	; 0x30
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    35ee:	4b2c      	ldr	r3, [pc, #176]	; (36a0 <lv_obj_align+0xc4>)
    35f0:	4798      	blx	r3
    35f2:	b968      	cbnz	r0, 3610 <lv_obj_align+0x34>
    35f4:	4b2b      	ldr	r3, [pc, #172]	; (36a4 <lv_obj_align+0xc8>)
    35f6:	9300      	str	r3, [sp, #0]
    35f8:	f240 326d 	movw	r2, #877	; 0x36d
    35fc:	492a      	ldr	r1, [pc, #168]	; (36a8 <lv_obj_align+0xcc>)
    35fe:	2003      	movs	r0, #3
    3600:	4d2a      	ldr	r5, [pc, #168]	; (36ac <lv_obj_align+0xd0>)
    3602:	47a8      	blx	r5
    3604:	4622      	mov	r2, r4
    3606:	2300      	movs	r3, #0
    3608:	4829      	ldr	r0, [pc, #164]	; (36b0 <lv_obj_align+0xd4>)
    360a:	492a      	ldr	r1, [pc, #168]	; (36b4 <lv_obj_align+0xd8>)
    360c:	4788      	blx	r1
    360e:	e7fe      	b.n	360e <lv_obj_align+0x32>
    if(base == NULL) base = lv_obj_get_parent(obj);
    3610:	b18d      	cbz	r5, 3636 <lv_obj_align+0x5a>
    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
    3612:	4628      	mov	r0, r5
    3614:	4b22      	ldr	r3, [pc, #136]	; (36a0 <lv_obj_align+0xc4>)
    3616:	4798      	blx	r3
    3618:	b990      	cbnz	r0, 3640 <lv_obj_align+0x64>
    361a:	4b22      	ldr	r3, [pc, #136]	; (36a4 <lv_obj_align+0xc8>)
    361c:	9300      	str	r3, [sp, #0]
    361e:	f240 3271 	movw	r2, #881	; 0x371
    3622:	4921      	ldr	r1, [pc, #132]	; (36a8 <lv_obj_align+0xcc>)
    3624:	2003      	movs	r0, #3
    3626:	4c21      	ldr	r4, [pc, #132]	; (36ac <lv_obj_align+0xd0>)
    3628:	47a0      	blx	r4
    362a:	462a      	mov	r2, r5
    362c:	2300      	movs	r3, #0
    362e:	4820      	ldr	r0, [pc, #128]	; (36b0 <lv_obj_align+0xd4>)
    3630:	4920      	ldr	r1, [pc, #128]	; (36b4 <lv_obj_align+0xd8>)
    3632:	4788      	blx	r1
    3634:	e7fe      	b.n	3634 <lv_obj_align+0x58>
    if(base == NULL) base = lv_obj_get_parent(obj);
    3636:	4620      	mov	r0, r4
    3638:	4b1f      	ldr	r3, [pc, #124]	; (36b8 <lv_obj_align+0xdc>)
    363a:	4798      	blx	r3
    363c:	4605      	mov	r5, r0
    363e:	e7e8      	b.n	3612 <lv_obj_align+0x36>
    _lv_area_align(&base->coords, &obj->coords, align, &new_pos);
    3640:	ab03      	add	r3, sp, #12
    3642:	4642      	mov	r2, r8
    3644:	f104 0110 	add.w	r1, r4, #16
    3648:	f105 0010 	add.w	r0, r5, #16
    364c:	f8df 9070 	ldr.w	r9, [pc, #112]	; 36c0 <lv_obj_align+0xe4>
    3650:	47c8      	blx	r9
    lv_obj_t * par        = lv_obj_get_parent(obj);
    3652:	4620      	mov	r0, r4
    3654:	4b18      	ldr	r3, [pc, #96]	; (36b8 <lv_obj_align+0xdc>)
    3656:	4798      	blx	r3
    lv_coord_t par_abs_y  = par->coords.y1;
    3658:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
    new_pos.y += y_ofs;
    365c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    3660:	4432      	add	r2, r6
    new_pos.x += x_ofs;
    3662:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    3666:	4439      	add	r1, r7
    new_pos.x -= par_abs_x;
    3668:	8a00      	ldrh	r0, [r0, #16]
    366a:	1a09      	subs	r1, r1, r0
    366c:	b209      	sxth	r1, r1
    366e:	f8ad 100c 	strh.w	r1, [sp, #12]
    new_pos.y -= par_abs_y;
    3672:	1ad2      	subs	r2, r2, r3
    3674:	b212      	sxth	r2, r2
    3676:	f8ad 200e 	strh.w	r2, [sp, #14]
    lv_obj_set_pos(obj, new_pos.x, new_pos.y);
    367a:	4620      	mov	r0, r4
    367c:	4b0f      	ldr	r3, [pc, #60]	; (36bc <lv_obj_align+0xe0>)
    367e:	4798      	blx	r3
    obj->realign.align       = align;
    3680:	f884 8048 	strb.w	r8, [r4, #72]	; 0x48
    obj->realign.xofs        = x_ofs;
    3684:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
    obj->realign.yofs        = y_ofs;
    3688:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
    obj->realign.base        = base;
    368c:	6425      	str	r5, [r4, #64]	; 0x40
    obj->realign.origo_align = 0;
    368e:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
    3692:	f36f 0341 	bfc	r3, #1, #1
    3696:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
}
    369a:	b005      	add	sp, #20
    369c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    36a0:	000022a5 	.word	0x000022a5
    36a4:	000244c8 	.word	0x000244c8
    36a8:	000247d0 	.word	0x000247d0
    36ac:	00012251 	.word	0x00012251
    36b0:	00024830 	.word	0x00024830
    36b4:	000022ad 	.word	0x000022ad
    36b8:	00002c71 	.word	0x00002c71
    36bc:	00003431 	.word	0x00003431
    36c0:	00011819 	.word	0x00011819

000036c4 <lv_obj_align_origo>:
{
    36c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    36c8:	b085      	sub	sp, #20
    36ca:	4681      	mov	r9, r0
    36cc:	460e      	mov	r6, r1
    36ce:	4692      	mov	sl, r2
    36d0:	9303      	str	r3, [sp, #12]
    36d2:	f9bd b038 	ldrsh.w	fp, [sp, #56]	; 0x38
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    36d6:	4ba3      	ldr	r3, [pc, #652]	; (3964 <lv_obj_align_origo+0x2a0>)
    36d8:	4798      	blx	r3
    36da:	b968      	cbnz	r0, 36f8 <lv_obj_align_origo+0x34>
    36dc:	4ba2      	ldr	r3, [pc, #648]	; (3968 <lv_obj_align_origo+0x2a4>)
    36de:	9300      	str	r3, [sp, #0]
    36e0:	f240 3295 	movw	r2, #917	; 0x395
    36e4:	49a1      	ldr	r1, [pc, #644]	; (396c <lv_obj_align_origo+0x2a8>)
    36e6:	2003      	movs	r0, #3
    36e8:	4ca1      	ldr	r4, [pc, #644]	; (3970 <lv_obj_align_origo+0x2ac>)
    36ea:	47a0      	blx	r4
    36ec:	464a      	mov	r2, r9
    36ee:	2300      	movs	r3, #0
    36f0:	48a0      	ldr	r0, [pc, #640]	; (3974 <lv_obj_align_origo+0x2b0>)
    36f2:	49a1      	ldr	r1, [pc, #644]	; (3978 <lv_obj_align_origo+0x2b4>)
    36f4:	4788      	blx	r1
    36f6:	e7fe      	b.n	36f6 <lv_obj_align_origo+0x32>
    lv_coord_t new_x = lv_obj_get_x(obj);
    36f8:	4648      	mov	r0, r9
    36fa:	4ba0      	ldr	r3, [pc, #640]	; (397c <lv_obj_align_origo+0x2b8>)
    36fc:	4798      	blx	r3
    36fe:	4605      	mov	r5, r0
    lv_coord_t new_y = lv_obj_get_y(obj);
    3700:	4648      	mov	r0, r9
    3702:	4b9f      	ldr	r3, [pc, #636]	; (3980 <lv_obj_align_origo+0x2bc>)
    3704:	4798      	blx	r3
    3706:	4604      	mov	r4, r0
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
    3708:	4648      	mov	r0, r9
    370a:	4b9e      	ldr	r3, [pc, #632]	; (3984 <lv_obj_align_origo+0x2c0>)
    370c:	4798      	blx	r3
    370e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    3712:	f340 084f 	sbfx	r8, r0, #1, #16
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
    3716:	4648      	mov	r0, r9
    3718:	4b9b      	ldr	r3, [pc, #620]	; (3988 <lv_obj_align_origo+0x2c4>)
    371a:	4798      	blx	r3
    371c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    3720:	f340 074f 	sbfx	r7, r0, #1, #16
    if(base == NULL) {
    3724:	b1ee      	cbz	r6, 3762 <lv_obj_align_origo+0x9e>
    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
    3726:	4630      	mov	r0, r6
    3728:	4b8e      	ldr	r3, [pc, #568]	; (3964 <lv_obj_align_origo+0x2a0>)
    372a:	4798      	blx	r3
    372c:	b1f0      	cbz	r0, 376c <lv_obj_align_origo+0xa8>
    switch(align) {
    372e:	f1ba 0f14 	cmp.w	sl, #20
    3732:	d839      	bhi.n	37a8 <lv_obj_align_origo+0xe4>
    3734:	e8df f01a 	tbh	[pc, sl, lsl #1]
    3738:	005c0028 	.word	0x005c0028
    373c:	006d0062 	.word	0x006d0062
    3740:	007f0076 	.word	0x007f0076
    3744:	0099008d 	.word	0x0099008d
    3748:	00b400a5 	.word	0x00b400a5
    374c:	00c500ba 	.word	0x00c500ba
    3750:	00d700ce 	.word	0x00d700ce
    3754:	00f100e5 	.word	0x00f100e5
    3758:	010300f7 	.word	0x010300f7
    375c:	012e010c 	.word	0x012e010c
    3760:	013d      	.short	0x013d
        base = lv_obj_get_parent(obj);
    3762:	4648      	mov	r0, r9
    3764:	4b89      	ldr	r3, [pc, #548]	; (398c <lv_obj_align_origo+0x2c8>)
    3766:	4798      	blx	r3
    3768:	4606      	mov	r6, r0
    376a:	e7dc      	b.n	3726 <lv_obj_align_origo+0x62>
    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
    376c:	4b7e      	ldr	r3, [pc, #504]	; (3968 <lv_obj_align_origo+0x2a4>)
    376e:	9300      	str	r3, [sp, #0]
    3770:	f240 32a1 	movw	r2, #929	; 0x3a1
    3774:	497d      	ldr	r1, [pc, #500]	; (396c <lv_obj_align_origo+0x2a8>)
    3776:	2003      	movs	r0, #3
    3778:	4c7d      	ldr	r4, [pc, #500]	; (3970 <lv_obj_align_origo+0x2ac>)
    377a:	47a0      	blx	r4
    377c:	4632      	mov	r2, r6
    377e:	2300      	movs	r3, #0
    3780:	487c      	ldr	r0, [pc, #496]	; (3974 <lv_obj_align_origo+0x2b0>)
    3782:	497d      	ldr	r1, [pc, #500]	; (3978 <lv_obj_align_origo+0x2b4>)
    3784:	4788      	blx	r1
    3786:	e7fe      	b.n	3786 <lv_obj_align_origo+0xc2>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
    3788:	4630      	mov	r0, r6
    378a:	4b7e      	ldr	r3, [pc, #504]	; (3984 <lv_obj_align_origo+0x2c0>)
    378c:	4798      	blx	r3
    378e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    3792:	ebc8 0560 	rsb	r5, r8, r0, asr #1
    3796:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
    3798:	4630      	mov	r0, r6
    379a:	4b7b      	ldr	r3, [pc, #492]	; (3988 <lv_obj_align_origo+0x2c4>)
    379c:	4798      	blx	r3
    379e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    37a2:	ebc7 0460 	rsb	r4, r7, r0, asr #1
    37a6:	b224      	sxth	r4, r4
    lv_obj_t * par        = lv_obj_get_parent(obj);
    37a8:	4648      	mov	r0, r9
    37aa:	4b78      	ldr	r3, [pc, #480]	; (398c <lv_obj_align_origo+0x2c8>)
    37ac:	4798      	blx	r3
    new_x += x_ofs + base_abs_x;
    37ae:	8a31      	ldrh	r1, [r6, #16]
    37b0:	9f03      	ldr	r7, [sp, #12]
    37b2:	4439      	add	r1, r7
    37b4:	4429      	add	r1, r5
    new_x -= par_abs_x;
    37b6:	8a03      	ldrh	r3, [r0, #16]
    37b8:	1ac9      	subs	r1, r1, r3
    new_y += y_ofs + base_abs_y;
    37ba:	8a72      	ldrh	r2, [r6, #18]
    37bc:	445a      	add	r2, fp
    37be:	4422      	add	r2, r4
    new_y -= par_abs_y;
    37c0:	8a43      	ldrh	r3, [r0, #18]
    37c2:	1ad2      	subs	r2, r2, r3
    lv_obj_set_pos(obj, new_x, new_y);
    37c4:	b212      	sxth	r2, r2
    37c6:	b209      	sxth	r1, r1
    37c8:	4648      	mov	r0, r9
    37ca:	4b71      	ldr	r3, [pc, #452]	; (3990 <lv_obj_align_origo+0x2cc>)
    37cc:	4798      	blx	r3
    obj->realign.align       = align;
    37ce:	f889 a048 	strb.w	sl, [r9, #72]	; 0x48
    obj->realign.xofs        = x_ofs;
    37d2:	f8a9 7044 	strh.w	r7, [r9, #68]	; 0x44
    obj->realign.yofs        = y_ofs;
    37d6:	f8a9 b046 	strh.w	fp, [r9, #70]	; 0x46
    obj->realign.base        = base;
    37da:	f8c9 6040 	str.w	r6, [r9, #64]	; 0x40
    obj->realign.origo_align = 1;
    37de:	f899 3049 	ldrb.w	r3, [r9, #73]	; 0x49
    37e2:	f043 0302 	orr.w	r3, r3, #2
    37e6:	f889 3049 	strb.w	r3, [r9, #73]	; 0x49
}
    37ea:	b005      	add	sp, #20
    37ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            new_x = -obj_w_half;
    37f0:	f1c8 0500 	rsb	r5, r8, #0
    37f4:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
    37f6:	427c      	negs	r4, r7
    37f8:	b224      	sxth	r4, r4
            break;
    37fa:	e7d5      	b.n	37a8 <lv_obj_align_origo+0xe4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
    37fc:	4630      	mov	r0, r6
    37fe:	4b61      	ldr	r3, [pc, #388]	; (3984 <lv_obj_align_origo+0x2c0>)
    3800:	4798      	blx	r3
    3802:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    3806:	ebc8 0560 	rsb	r5, r8, r0, asr #1
    380a:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
    380c:	427c      	negs	r4, r7
    380e:	b224      	sxth	r4, r4
            break;
    3810:	e7ca      	b.n	37a8 <lv_obj_align_origo+0xe4>
            new_x = lv_obj_get_width(base) - obj_w_half;
    3812:	4630      	mov	r0, r6
    3814:	4b5b      	ldr	r3, [pc, #364]	; (3984 <lv_obj_align_origo+0x2c0>)
    3816:	4798      	blx	r3
    3818:	eba0 0008 	sub.w	r0, r0, r8
    381c:	b205      	sxth	r5, r0
            new_y = -obj_h_half;
    381e:	427c      	negs	r4, r7
    3820:	b224      	sxth	r4, r4
            break;
    3822:	e7c1      	b.n	37a8 <lv_obj_align_origo+0xe4>
            new_x = -obj_w_half;
    3824:	f1c8 0500 	rsb	r5, r8, #0
    3828:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
    382a:	4630      	mov	r0, r6
    382c:	4b56      	ldr	r3, [pc, #344]	; (3988 <lv_obj_align_origo+0x2c4>)
    382e:	4798      	blx	r3
    3830:	1bc0      	subs	r0, r0, r7
    3832:	b204      	sxth	r4, r0
            break;
    3834:	e7b8      	b.n	37a8 <lv_obj_align_origo+0xe4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
    3836:	4630      	mov	r0, r6
    3838:	4b52      	ldr	r3, [pc, #328]	; (3984 <lv_obj_align_origo+0x2c0>)
    383a:	4798      	blx	r3
    383c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    3840:	ebc8 0560 	rsb	r5, r8, r0, asr #1
    3844:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
    3846:	4630      	mov	r0, r6
    3848:	4b4f      	ldr	r3, [pc, #316]	; (3988 <lv_obj_align_origo+0x2c4>)
    384a:	4798      	blx	r3
    384c:	1bc0      	subs	r0, r0, r7
    384e:	b204      	sxth	r4, r0
            break;
    3850:	e7aa      	b.n	37a8 <lv_obj_align_origo+0xe4>
            new_x = lv_obj_get_width(base) - obj_w_half;
    3852:	4630      	mov	r0, r6
    3854:	4b4b      	ldr	r3, [pc, #300]	; (3984 <lv_obj_align_origo+0x2c0>)
    3856:	4798      	blx	r3
    3858:	eba0 0008 	sub.w	r0, r0, r8
    385c:	b205      	sxth	r5, r0
            new_y = lv_obj_get_height(base) - obj_h_half;
    385e:	4630      	mov	r0, r6
    3860:	4b49      	ldr	r3, [pc, #292]	; (3988 <lv_obj_align_origo+0x2c4>)
    3862:	4798      	blx	r3
    3864:	1bc0      	subs	r0, r0, r7
    3866:	b204      	sxth	r4, r0
            break;
    3868:	e79e      	b.n	37a8 <lv_obj_align_origo+0xe4>
            new_x = -obj_w_half;
    386a:	f1c8 0500 	rsb	r5, r8, #0
    386e:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
    3870:	4630      	mov	r0, r6
    3872:	4b45      	ldr	r3, [pc, #276]	; (3988 <lv_obj_align_origo+0x2c4>)
    3874:	4798      	blx	r3
    3876:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    387a:	ebc7 0460 	rsb	r4, r7, r0, asr #1
    387e:	b224      	sxth	r4, r4
            break;
    3880:	e792      	b.n	37a8 <lv_obj_align_origo+0xe4>
            new_x = lv_obj_get_width(base) - obj_w_half;
    3882:	4630      	mov	r0, r6
    3884:	4b3f      	ldr	r3, [pc, #252]	; (3984 <lv_obj_align_origo+0x2c0>)
    3886:	4798      	blx	r3
    3888:	eba0 0008 	sub.w	r0, r0, r8
    388c:	b205      	sxth	r5, r0
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
    388e:	4630      	mov	r0, r6
    3890:	4b3d      	ldr	r3, [pc, #244]	; (3988 <lv_obj_align_origo+0x2c4>)
    3892:	4798      	blx	r3
    3894:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    3898:	ebc7 0460 	rsb	r4, r7, r0, asr #1
    389c:	b224      	sxth	r4, r4
            break;
    389e:	e783      	b.n	37a8 <lv_obj_align_origo+0xe4>
            new_x = -obj_w_half;
    38a0:	f1c8 0500 	rsb	r5, r8, #0
    38a4:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
    38a6:	427c      	negs	r4, r7
    38a8:	b224      	sxth	r4, r4
            break;
    38aa:	e77d      	b.n	37a8 <lv_obj_align_origo+0xe4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
    38ac:	4630      	mov	r0, r6
    38ae:	4b35      	ldr	r3, [pc, #212]	; (3984 <lv_obj_align_origo+0x2c0>)
    38b0:	4798      	blx	r3
    38b2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    38b6:	ebc8 0560 	rsb	r5, r8, r0, asr #1
    38ba:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
    38bc:	427c      	negs	r4, r7
    38be:	b224      	sxth	r4, r4
            break;
    38c0:	e772      	b.n	37a8 <lv_obj_align_origo+0xe4>
            new_x = lv_obj_get_width(base) - obj_w_half;
    38c2:	4630      	mov	r0, r6
    38c4:	4b2f      	ldr	r3, [pc, #188]	; (3984 <lv_obj_align_origo+0x2c0>)
    38c6:	4798      	blx	r3
    38c8:	eba0 0008 	sub.w	r0, r0, r8
    38cc:	b205      	sxth	r5, r0
            new_y = -obj_h_half;
    38ce:	427c      	negs	r4, r7
    38d0:	b224      	sxth	r4, r4
            break;
    38d2:	e769      	b.n	37a8 <lv_obj_align_origo+0xe4>
            new_x = -obj_w_half;
    38d4:	f1c8 0500 	rsb	r5, r8, #0
    38d8:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
    38da:	4630      	mov	r0, r6
    38dc:	4b2a      	ldr	r3, [pc, #168]	; (3988 <lv_obj_align_origo+0x2c4>)
    38de:	4798      	blx	r3
    38e0:	1bc0      	subs	r0, r0, r7
    38e2:	b204      	sxth	r4, r0
            break;
    38e4:	e760      	b.n	37a8 <lv_obj_align_origo+0xe4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
    38e6:	4630      	mov	r0, r6
    38e8:	4b26      	ldr	r3, [pc, #152]	; (3984 <lv_obj_align_origo+0x2c0>)
    38ea:	4798      	blx	r3
    38ec:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    38f0:	ebc8 0560 	rsb	r5, r8, r0, asr #1
    38f4:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
    38f6:	4630      	mov	r0, r6
    38f8:	4b23      	ldr	r3, [pc, #140]	; (3988 <lv_obj_align_origo+0x2c4>)
    38fa:	4798      	blx	r3
    38fc:	1bc0      	subs	r0, r0, r7
    38fe:	b204      	sxth	r4, r0
            break;
    3900:	e752      	b.n	37a8 <lv_obj_align_origo+0xe4>
            new_x = lv_obj_get_width(base) - obj_w_half;
    3902:	4630      	mov	r0, r6
    3904:	4b1f      	ldr	r3, [pc, #124]	; (3984 <lv_obj_align_origo+0x2c0>)
    3906:	4798      	blx	r3
    3908:	eba0 0008 	sub.w	r0, r0, r8
    390c:	b205      	sxth	r5, r0
            new_y = lv_obj_get_height(base) - obj_h_half;
    390e:	4630      	mov	r0, r6
    3910:	4b1d      	ldr	r3, [pc, #116]	; (3988 <lv_obj_align_origo+0x2c4>)
    3912:	4798      	blx	r3
    3914:	1bc0      	subs	r0, r0, r7
    3916:	b204      	sxth	r4, r0
            break;
    3918:	e746      	b.n	37a8 <lv_obj_align_origo+0xe4>
            new_x = -obj_w_half;
    391a:	f1c8 0500 	rsb	r5, r8, #0
    391e:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
    3920:	427c      	negs	r4, r7
    3922:	b224      	sxth	r4, r4
            break;
    3924:	e740      	b.n	37a8 <lv_obj_align_origo+0xe4>
            new_x = -obj_w_half;
    3926:	f1c8 0500 	rsb	r5, r8, #0
    392a:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
    392c:	4630      	mov	r0, r6
    392e:	4b16      	ldr	r3, [pc, #88]	; (3988 <lv_obj_align_origo+0x2c4>)
    3930:	4798      	blx	r3
    3932:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    3936:	ebc7 0460 	rsb	r4, r7, r0, asr #1
    393a:	b224      	sxth	r4, r4
            break;
    393c:	e734      	b.n	37a8 <lv_obj_align_origo+0xe4>
            new_x = -obj_w_half;
    393e:	f1c8 0500 	rsb	r5, r8, #0
    3942:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
    3944:	4630      	mov	r0, r6
    3946:	4b10      	ldr	r3, [pc, #64]	; (3988 <lv_obj_align_origo+0x2c4>)
    3948:	4798      	blx	r3
    394a:	1bc0      	subs	r0, r0, r7
    394c:	b204      	sxth	r4, r0
            break;
    394e:	e72b      	b.n	37a8 <lv_obj_align_origo+0xe4>
            new_x = lv_obj_get_width(base) - obj_w_half;
    3950:	4630      	mov	r0, r6
    3952:	4b0c      	ldr	r3, [pc, #48]	; (3984 <lv_obj_align_origo+0x2c0>)
    3954:	4798      	blx	r3
    3956:	eba0 0008 	sub.w	r0, r0, r8
    395a:	b205      	sxth	r5, r0
            new_y = -obj_h_half;
    395c:	427c      	negs	r4, r7
    395e:	b224      	sxth	r4, r4
            break;
    3960:	e722      	b.n	37a8 <lv_obj_align_origo+0xe4>
    3962:	bf00      	nop
    3964:	000022a5 	.word	0x000022a5
    3968:	000244d8 	.word	0x000244d8
    396c:	000247d0 	.word	0x000247d0
    3970:	00012251 	.word	0x00012251
    3974:	00024830 	.word	0x00024830
    3978:	000022ad 	.word	0x000022ad
    397c:	00002e91 	.word	0x00002e91
    3980:	00002ef1 	.word	0x00002ef1
    3984:	00002f51 	.word	0x00002f51
    3988:	00002fa1 	.word	0x00002fa1
    398c:	00002c71 	.word	0x00002c71
    3990:	00003431 	.word	0x00003431
            new_x = lv_obj_get_width(base) - obj_w_half;
    3994:	4630      	mov	r0, r6
    3996:	4b0d      	ldr	r3, [pc, #52]	; (39cc <lv_obj_align_origo+0x308>)
    3998:	4798      	blx	r3
    399a:	eba0 0008 	sub.w	r0, r0, r8
    399e:	b205      	sxth	r5, r0
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
    39a0:	4630      	mov	r0, r6
    39a2:	4b0b      	ldr	r3, [pc, #44]	; (39d0 <lv_obj_align_origo+0x30c>)
    39a4:	4798      	blx	r3
    39a6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    39aa:	ebc7 0460 	rsb	r4, r7, r0, asr #1
    39ae:	b224      	sxth	r4, r4
            break;
    39b0:	e6fa      	b.n	37a8 <lv_obj_align_origo+0xe4>
            new_x = lv_obj_get_width(base) - obj_w_half;
    39b2:	4630      	mov	r0, r6
    39b4:	4b05      	ldr	r3, [pc, #20]	; (39cc <lv_obj_align_origo+0x308>)
    39b6:	4798      	blx	r3
    39b8:	eba0 0008 	sub.w	r0, r0, r8
    39bc:	b205      	sxth	r5, r0
            new_y = lv_obj_get_height(base) - obj_h_half;
    39be:	4630      	mov	r0, r6
    39c0:	4b03      	ldr	r3, [pc, #12]	; (39d0 <lv_obj_align_origo+0x30c>)
    39c2:	4798      	blx	r3
    39c4:	1bc0      	subs	r0, r0, r7
    39c6:	b204      	sxth	r4, r0
            break;
    39c8:	e6ee      	b.n	37a8 <lv_obj_align_origo+0xe4>
    39ca:	bf00      	nop
    39cc:	00002f51 	.word	0x00002f51
    39d0:	00002fa1 	.word	0x00002fa1

000039d4 <lv_obj_realign>:
{
    39d4:	b530      	push	{r4, r5, lr}
    39d6:	b083      	sub	sp, #12
    39d8:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    39da:	4b12      	ldr	r3, [pc, #72]	; (3a24 <lv_obj_realign+0x50>)
    39dc:	4798      	blx	r3
    39de:	b190      	cbz	r0, 3a06 <lv_obj_realign+0x32>
    if(obj->realign.origo_align)
    39e0:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
    39e4:	f013 0f02 	tst.w	r3, #2
        lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
    39e8:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
    39ec:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
    39f0:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
    39f4:	9100      	str	r1, [sp, #0]
    39f6:	6c21      	ldr	r1, [r4, #64]	; 0x40
    39f8:	4620      	mov	r0, r4
    39fa:	bf14      	ite	ne
    39fc:	4c0a      	ldrne	r4, [pc, #40]	; (3a28 <lv_obj_realign+0x54>)
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
    39fe:	4c0b      	ldreq	r4, [pc, #44]	; (3a2c <lv_obj_realign+0x58>)
    3a00:	47a0      	blx	r4
}
    3a02:	b003      	add	sp, #12
    3a04:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3a06:	4b0a      	ldr	r3, [pc, #40]	; (3a30 <lv_obj_realign+0x5c>)
    3a08:	9300      	str	r3, [sp, #0]
    3a0a:	f240 422a 	movw	r2, #1066	; 0x42a
    3a0e:	4909      	ldr	r1, [pc, #36]	; (3a34 <lv_obj_realign+0x60>)
    3a10:	2003      	movs	r0, #3
    3a12:	4d09      	ldr	r5, [pc, #36]	; (3a38 <lv_obj_realign+0x64>)
    3a14:	47a8      	blx	r5
    3a16:	4622      	mov	r2, r4
    3a18:	2300      	movs	r3, #0
    3a1a:	4808      	ldr	r0, [pc, #32]	; (3a3c <lv_obj_realign+0x68>)
    3a1c:	4908      	ldr	r1, [pc, #32]	; (3a40 <lv_obj_realign+0x6c>)
    3a1e:	4788      	blx	r1
    3a20:	e7fe      	b.n	3a20 <lv_obj_realign+0x4c>
    3a22:	bf00      	nop
    3a24:	000022a5 	.word	0x000022a5
    3a28:	000036c5 	.word	0x000036c5
    3a2c:	000035dd 	.word	0x000035dd
    3a30:	000244ec 	.word	0x000244ec
    3a34:	000247d0 	.word	0x000247d0
    3a38:	00012251 	.word	0x00012251
    3a3c:	00024830 	.word	0x00024830
    3a40:	000022ad 	.word	0x000022ad

00003a44 <refresh_children_style>:
{
    3a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3a48:	4606      	mov	r6, r0
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
    3a4a:	2100      	movs	r1, #0
    3a4c:	4b0d      	ldr	r3, [pc, #52]	; (3a84 <refresh_children_style+0x40>)
    3a4e:	4798      	blx	r3
    while(child != NULL) {
    3a50:	b1b0      	cbz	r0, 3a80 <refresh_children_style+0x3c>
    3a52:	4604      	mov	r4, r0
        lv_obj_invalidate(child);
    3a54:	4d0c      	ldr	r5, [pc, #48]	; (3a88 <refresh_children_style+0x44>)
        child->signal_cb(child, LV_SIGNAL_STYLE_CHG, NULL);
    3a56:	f04f 0800 	mov.w	r8, #0
        child = lv_obj_get_child(obj, child);
    3a5a:	4f0a      	ldr	r7, [pc, #40]	; (3a84 <refresh_children_style+0x40>)
        lv_obj_invalidate(child);
    3a5c:	4620      	mov	r0, r4
    3a5e:	47a8      	blx	r5
        child->signal_cb(child, LV_SIGNAL_STYLE_CHG, NULL);
    3a60:	69e3      	ldr	r3, [r4, #28]
    3a62:	4642      	mov	r2, r8
    3a64:	2104      	movs	r1, #4
    3a66:	4620      	mov	r0, r4
    3a68:	4798      	blx	r3
        lv_obj_invalidate(child);
    3a6a:	4620      	mov	r0, r4
    3a6c:	47a8      	blx	r5
        refresh_children_style(child); /*Check children too*/
    3a6e:	4620      	mov	r0, r4
    3a70:	f7ff ffe8 	bl	3a44 <refresh_children_style>
        child = lv_obj_get_child(obj, child);
    3a74:	4621      	mov	r1, r4
    3a76:	4630      	mov	r0, r6
    3a78:	47b8      	blx	r7
    while(child != NULL) {
    3a7a:	4604      	mov	r4, r0
    3a7c:	2800      	cmp	r0, #0
    3a7e:	d1ed      	bne.n	3a5c <refresh_children_style+0x18>
    3a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3a84:	00002dd5 	.word	0x00002dd5
    3a88:	00003315 	.word	0x00003315

00003a8c <lv_obj_refresh_style>:
{
    3a8c:	b530      	push	{r4, r5, lr}
    3a8e:	b083      	sub	sp, #12
    3a90:	4605      	mov	r5, r0
    3a92:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3a94:	4b36      	ldr	r3, [pc, #216]	; (3b70 <lv_obj_refresh_style+0xe4>)
    3a96:	4798      	blx	r3
    3a98:	b198      	cbz	r0, 3ac2 <lv_obj_refresh_style+0x36>
    switch(prop) {
    3a9a:	2c71      	cmp	r4, #113	; 0x71
    3a9c:	d846      	bhi.n	3b2c <lv_obj_refresh_style+0xa0>
    3a9e:	2c70      	cmp	r4, #112	; 0x70
    3aa0:	d223      	bcs.n	3aea <lv_obj_refresh_style+0x5e>
    3aa2:	2c41      	cmp	r4, #65	; 0x41
    3aa4:	d81b      	bhi.n	3ade <lv_obj_refresh_style+0x52>
    3aa6:	2c40      	cmp	r4, #64	; 0x40
    3aa8:	d21f      	bcs.n	3aea <lv_obj_refresh_style+0x5e>
    3aaa:	2c02      	cmp	r4, #2
    3aac:	d305      	bcc.n	3aba <lv_obj_refresh_style+0x2e>
    3aae:	2c07      	cmp	r4, #7
    3ab0:	d91b      	bls.n	3aea <lv_obj_refresh_style+0x5e>
    3ab2:	f1a4 0310 	sub.w	r3, r4, #16
    3ab6:	2b08      	cmp	r3, #8
    3ab8:	d917      	bls.n	3aea <lv_obj_refresh_style+0x5e>
        lv_obj_invalidate(obj);
    3aba:	4628      	mov	r0, r5
    3abc:	4b2d      	ldr	r3, [pc, #180]	; (3b74 <lv_obj_refresh_style+0xe8>)
    3abe:	4798      	blx	r3
}
    3ac0:	e02f      	b.n	3b22 <lv_obj_refresh_style+0x96>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3ac2:	4b2d      	ldr	r3, [pc, #180]	; (3b78 <lv_obj_refresh_style+0xec>)
    3ac4:	9300      	str	r3, [sp, #0]
    3ac6:	f240 521d 	movw	r2, #1309	; 0x51d
    3aca:	492c      	ldr	r1, [pc, #176]	; (3b7c <lv_obj_refresh_style+0xf0>)
    3acc:	2003      	movs	r0, #3
    3ace:	4c2c      	ldr	r4, [pc, #176]	; (3b80 <lv_obj_refresh_style+0xf4>)
    3ad0:	47a0      	blx	r4
    3ad2:	462a      	mov	r2, r5
    3ad4:	2300      	movs	r3, #0
    3ad6:	482b      	ldr	r0, [pc, #172]	; (3b84 <lv_obj_refresh_style+0xf8>)
    3ad8:	492b      	ldr	r1, [pc, #172]	; (3b88 <lv_obj_refresh_style+0xfc>)
    3ada:	4788      	blx	r1
    3adc:	e7fe      	b.n	3adc <lv_obj_refresh_style+0x50>
    switch(prop) {
    3ade:	2c53      	cmp	r4, #83	; 0x53
    3ae0:	d821      	bhi.n	3b26 <lv_obj_refresh_style+0x9a>
    3ae2:	2c50      	cmp	r4, #80	; 0x50
    3ae4:	d201      	bcs.n	3aea <lv_obj_refresh_style+0x5e>
    3ae6:	2c4c      	cmp	r4, #76	; 0x4c
    3ae8:	d1e7      	bne.n	3aba <lv_obj_refresh_style+0x2e>
        lv_obj_invalidate(obj);
    3aea:	4628      	mov	r0, r5
    3aec:	4b21      	ldr	r3, [pc, #132]	; (3b74 <lv_obj_refresh_style+0xe8>)
    3aee:	4798      	blx	r3
        obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
    3af0:	69eb      	ldr	r3, [r5, #28]
    3af2:	2200      	movs	r2, #0
    3af4:	2104      	movs	r1, #4
    3af6:	4628      	mov	r0, r5
    3af8:	4798      	blx	r3
        switch(prop) {
    3afa:	2c15      	cmp	r4, #21
    3afc:	d309      	bcc.n	3b12 <lv_obj_refresh_style+0x86>
    3afe:	2c18      	cmp	r4, #24
    3b00:	d901      	bls.n	3b06 <lv_obj_refresh_style+0x7a>
    3b02:	2cff      	cmp	r4, #255	; 0xff
    3b04:	d105      	bne.n	3b12 <lv_obj_refresh_style+0x86>
                if(obj->parent) obj->parent->signal_cb(obj->parent, LV_SIGNAL_CHILD_CHG, NULL);
    3b06:	6828      	ldr	r0, [r5, #0]
    3b08:	b118      	cbz	r0, 3b12 <lv_obj_refresh_style+0x86>
    3b0a:	69c3      	ldr	r3, [r0, #28]
    3b0c:	2200      	movs	r2, #0
    3b0e:	2101      	movs	r1, #1
    3b10:	4798      	blx	r3
        lv_obj_invalidate(obj);
    3b12:	4628      	mov	r0, r5
    3b14:	4b17      	ldr	r3, [pc, #92]	; (3b74 <lv_obj_refresh_style+0xe8>)
    3b16:	4798      	blx	r3
        if(prop == LV_STYLE_PROP_ALL || (prop & LV_STYLE_INHERIT_MASK)) refresh_children_style(obj);
    3b18:	2cff      	cmp	r4, #255	; 0xff
    3b1a:	d024      	beq.n	3b66 <lv_obj_refresh_style+0xda>
    3b1c:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    3b20:	d121      	bne.n	3b66 <lv_obj_refresh_style+0xda>
}
    3b22:	b003      	add	sp, #12
    3b24:	bd30      	pop	{r4, r5, pc}
    switch(prop) {
    3b26:	2c5c      	cmp	r4, #92	; 0x5c
    3b28:	d1c7      	bne.n	3aba <lv_obj_refresh_style+0x2e>
    3b2a:	e7de      	b.n	3aea <lv_obj_refresh_style+0x5e>
    3b2c:	2c7f      	cmp	r4, #127	; 0x7f
    3b2e:	d90c      	bls.n	3b4a <lv_obj_refresh_style+0xbe>
    3b30:	f248 0381 	movw	r3, #32897	; 0x8081
    3b34:	429c      	cmp	r4, r3
    3b36:	d811      	bhi.n	3b5c <lv_obj_refresh_style+0xd0>
    3b38:	f248 0380 	movw	r3, #32896	; 0x8080
    3b3c:	429c      	cmp	r4, r3
    3b3e:	d2d4      	bcs.n	3aea <lv_obj_refresh_style+0x5e>
    3b40:	2c90      	cmp	r4, #144	; 0x90
    3b42:	d0d2      	beq.n	3aea <lv_obj_refresh_style+0x5e>
    3b44:	2cff      	cmp	r4, #255	; 0xff
    3b46:	d1b8      	bne.n	3aba <lv_obj_refresh_style+0x2e>
    3b48:	e7cf      	b.n	3aea <lv_obj_refresh_style+0x5e>
    3b4a:	2c7e      	cmp	r4, #126	; 0x7e
    3b4c:	d2cd      	bcs.n	3aea <lv_obj_refresh_style+0x5e>
    3b4e:	2c73      	cmp	r4, #115	; 0x73
    3b50:	d3b3      	bcc.n	3aba <lv_obj_refresh_style+0x2e>
    3b52:	2c75      	cmp	r4, #117	; 0x75
    3b54:	d9c9      	bls.n	3aea <lv_obj_refresh_style+0x5e>
    3b56:	2c7c      	cmp	r4, #124	; 0x7c
    3b58:	d1af      	bne.n	3aba <lv_obj_refresh_style+0x2e>
    3b5a:	e7c6      	b.n	3aea <lv_obj_refresh_style+0x5e>
    3b5c:	f248 038e 	movw	r3, #32910	; 0x808e
    3b60:	429c      	cmp	r4, r3
    3b62:	d1aa      	bne.n	3aba <lv_obj_refresh_style+0x2e>
    3b64:	e7c1      	b.n	3aea <lv_obj_refresh_style+0x5e>
        if(prop == LV_STYLE_PROP_ALL || (prop & LV_STYLE_INHERIT_MASK)) refresh_children_style(obj);
    3b66:	4628      	mov	r0, r5
    3b68:	4b08      	ldr	r3, [pc, #32]	; (3b8c <lv_obj_refresh_style+0x100>)
    3b6a:	4798      	blx	r3
    3b6c:	e7d9      	b.n	3b22 <lv_obj_refresh_style+0x96>
    3b6e:	bf00      	nop
    3b70:	000022a5 	.word	0x000022a5
    3b74:	00003315 	.word	0x00003315
    3b78:	000244fc 	.word	0x000244fc
    3b7c:	000247d0 	.word	0x000247d0
    3b80:	00012251 	.word	0x00012251
    3b84:	00024830 	.word	0x00024830
    3b88:	000022ad 	.word	0x000022ad
    3b8c:	00003a45 	.word	0x00003a45

00003b90 <lv_obj_reset_style_list>:
{
    3b90:	b510      	push	{r4, lr}
    3b92:	4604      	mov	r4, r0
    lv_obj_clean_style_list(obj, part);
    3b94:	4b03      	ldr	r3, [pc, #12]	; (3ba4 <lv_obj_reset_style_list+0x14>)
    3b96:	4798      	blx	r3
    lv_obj_refresh_style(obj, LV_STYLE_PROP_ALL);
    3b98:	21ff      	movs	r1, #255	; 0xff
    3b9a:	4620      	mov	r0, r4
    3b9c:	4b02      	ldr	r3, [pc, #8]	; (3ba8 <lv_obj_reset_style_list+0x18>)
    3b9e:	4798      	blx	r3
    3ba0:	bd10      	pop	{r4, pc}
    3ba2:	bf00      	nop
    3ba4:	000030c1 	.word	0x000030c1
    3ba8:	00003a8d 	.word	0x00003a8d

00003bac <report_style_mod_core>:
{
    3bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3bb0:	4604      	mov	r4, r0
    3bb2:	460f      	mov	r7, r1
    3bb4:	2600      	movs	r6, #0
        lv_style_list_t * dsc = lv_obj_get_style_list(obj, part_sub);
    3bb6:	f8df 8088 	ldr.w	r8, [pc, #136]	; 3c40 <report_style_mod_core+0x94>
void _lv_style_list_reset(lv_style_list_t * style_list);

static inline lv_style_t * lv_style_list_get_style(lv_style_list_t * list, uint8_t id)
{
    if(list->has_trans && list->skip_trans) id++;
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    3bba:	4635      	mov	r5, r6
                lv_obj_refresh_style(obj, LV_STYLE_PROP_ALL);
    3bbc:	f8df 9084 	ldr.w	r9, [pc, #132]	; 3c44 <report_style_mod_core+0x98>
    3bc0:	e005      	b.n	3bce <report_style_mod_core+0x22>
    3bc2:	21ff      	movs	r1, #255	; 0xff
    3bc4:	4638      	mov	r0, r7
    3bc6:	47c8      	blx	r9
    3bc8:	3601      	adds	r6, #1
    for(part_sub = 0; part_sub != _LV_OBJ_PART_REAL_LAST; part_sub++) {
    3bca:	2e40      	cmp	r6, #64	; 0x40
    3bcc:	d022      	beq.n	3c14 <report_style_mod_core+0x68>
        lv_style_list_t * dsc = lv_obj_get_style_list(obj, part_sub);
    3bce:	b2f1      	uxtb	r1, r6
    3bd0:	4638      	mov	r0, r7
    3bd2:	47c0      	blx	r8
        if(dsc == NULL) break;
    3bd4:	4686      	mov	lr, r0
    3bd6:	b1e8      	cbz	r0, 3c14 <report_style_mod_core+0x68>
        for(ci = 0; ci < dsc->style_cnt; ci++) {
    3bd8:	7901      	ldrb	r1, [r0, #4]
    3bda:	2900      	cmp	r1, #0
    3bdc:	d0f4      	beq.n	3bc8 <report_style_mod_core+0x1c>
    if(list->has_trans && list->skip_trans) id++;
    3bde:	f890 c005 	ldrb.w	ip, [r0, #5]
    3be2:	f00c 0c06 	and.w	ip, ip, #6
    3be6:	2300      	movs	r3, #0
    3be8:	b2da      	uxtb	r2, r3
    3bea:	f1bc 0f06 	cmp.w	ip, #6
    3bee:	bf04      	itt	eq
    3bf0:	3201      	addeq	r2, #1
    3bf2:	b2d2      	uxtbeq	r2, r2
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    3bf4:	428a      	cmp	r2, r1
    return list->style_list[id];
    3bf6:	bf3a      	itte	cc
    3bf8:	f8de 0000 	ldrcc.w	r0, [lr]
    3bfc:	f850 2022 	ldrcc.w	r2, [r0, r2, lsl #2]
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    3c00:	462a      	movcs	r2, r5
            if(class == style || style == NULL) {
    3c02:	4294      	cmp	r4, r2
    3c04:	d0dd      	beq.n	3bc2 <report_style_mod_core+0x16>
    3c06:	2c00      	cmp	r4, #0
    3c08:	d0db      	beq.n	3bc2 <report_style_mod_core+0x16>
    3c0a:	3301      	adds	r3, #1
        for(ci = 0; ci < dsc->style_cnt; ci++) {
    3c0c:	b2da      	uxtb	r2, r3
    3c0e:	428a      	cmp	r2, r1
    3c10:	d3ea      	bcc.n	3be8 <report_style_mod_core+0x3c>
    3c12:	e7d9      	b.n	3bc8 <report_style_mod_core+0x1c>
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
    3c14:	2100      	movs	r1, #0
    3c16:	4638      	mov	r0, r7
    3c18:	4b08      	ldr	r3, [pc, #32]	; (3c3c <report_style_mod_core+0x90>)
    3c1a:	4798      	blx	r3
    while(child) {
    3c1c:	4605      	mov	r5, r0
    3c1e:	b150      	cbz	r0, 3c36 <report_style_mod_core+0x8a>
        child = lv_obj_get_child(obj, child);
    3c20:	4e06      	ldr	r6, [pc, #24]	; (3c3c <report_style_mod_core+0x90>)
        report_style_mod_core(style, child);
    3c22:	4629      	mov	r1, r5
    3c24:	4620      	mov	r0, r4
    3c26:	f7ff ffc1 	bl	3bac <report_style_mod_core>
        child = lv_obj_get_child(obj, child);
    3c2a:	4629      	mov	r1, r5
    3c2c:	4638      	mov	r0, r7
    3c2e:	47b0      	blx	r6
    while(child) {
    3c30:	4605      	mov	r5, r0
    3c32:	2800      	cmp	r0, #0
    3c34:	d1f5      	bne.n	3c22 <report_style_mod_core+0x76>
    3c36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3c3a:	bf00      	nop
    3c3c:	00002dd5 	.word	0x00002dd5
    3c40:	00002ff1 	.word	0x00002ff1
    3c44:	00003a8d 	.word	0x00003a8d

00003c48 <lv_obj_report_style_mod>:
{
    3c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3c4c:	4680      	mov	r8, r0
    lv_disp_t * d = lv_disp_get_next(NULL);
    3c4e:	2000      	movs	r0, #0
    3c50:	4b0f      	ldr	r3, [pc, #60]	; (3c90 <lv_obj_report_style_mod+0x48>)
    3c52:	4798      	blx	r3
    while(d) {
    3c54:	b1c8      	cbz	r0, 3c8a <lv_obj_report_style_mod+0x42>
    3c56:	4681      	mov	r9, r0
        _LV_LL_READ(d->scr_ll, i) {
    3c58:	f8df a040 	ldr.w	sl, [pc, #64]	; 3c9c <lv_obj_report_style_mod+0x54>
            report_style_mod_core(style, i);
    3c5c:	4f0d      	ldr	r7, [pc, #52]	; (3c94 <lv_obj_report_style_mod+0x4c>)
        _LV_LL_READ(d->scr_ll, i) {
    3c5e:	4e0e      	ldr	r6, [pc, #56]	; (3c98 <lv_obj_report_style_mod+0x50>)
    3c60:	f109 0530 	add.w	r5, r9, #48	; 0x30
    3c64:	4628      	mov	r0, r5
    3c66:	47d0      	blx	sl
    3c68:	4604      	mov	r4, r0
    3c6a:	b140      	cbz	r0, 3c7e <lv_obj_report_style_mod+0x36>
            report_style_mod_core(style, i);
    3c6c:	4621      	mov	r1, r4
    3c6e:	4640      	mov	r0, r8
    3c70:	47b8      	blx	r7
        _LV_LL_READ(d->scr_ll, i) {
    3c72:	4621      	mov	r1, r4
    3c74:	4628      	mov	r0, r5
    3c76:	47b0      	blx	r6
    3c78:	4604      	mov	r4, r0
    3c7a:	2800      	cmp	r0, #0
    3c7c:	d1f6      	bne.n	3c6c <lv_obj_report_style_mod+0x24>
        d = lv_disp_get_next(d);
    3c7e:	4648      	mov	r0, r9
    3c80:	4b03      	ldr	r3, [pc, #12]	; (3c90 <lv_obj_report_style_mod+0x48>)
    3c82:	4798      	blx	r3
    while(d) {
    3c84:	4681      	mov	r9, r0
    3c86:	2800      	cmp	r0, #0
    3c88:	d1ea      	bne.n	3c60 <lv_obj_report_style_mod+0x18>
    3c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3c8e:	bf00      	nop
    3c90:	00010fad 	.word	0x00010fad
    3c94:	00003bad 	.word	0x00003bad
    3c98:	00011fb1 	.word	0x00011fb1
    3c9c:	00011f9d 	.word	0x00011f9d

00003ca0 <trans_anim_cb>:
{
    3ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3ca2:	4604      	mov	r4, r0
    3ca4:	460d      	mov	r5, r1
    lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
    3ca6:	7981      	ldrb	r1, [r0, #6]
    3ca8:	6800      	ldr	r0, [r0, #0]
    3caa:	4b42      	ldr	r3, [pc, #264]	; (3db4 <trans_anim_cb+0x114>)
    3cac:	4798      	blx	r3
    lv_style_t * style = _lv_style_list_get_transition_style(list);
    3cae:	4b42      	ldr	r3, [pc, #264]	; (3db8 <trans_anim_cb+0x118>)
    3cb0:	4798      	blx	r3
    if((tr->prop & 0xF) < LV_STYLE_ID_COLOR) { /*Value*/
    3cb2:	88a1      	ldrh	r1, [r4, #4]
    3cb4:	f001 030f 	and.w	r3, r1, #15
    3cb8:	2b08      	cmp	r3, #8
    3cba:	dc19      	bgt.n	3cf0 <trans_anim_cb+0x50>
        if(v == 0) x = tr->start_value._int;
    3cbc:	b945      	cbnz	r5, 3cd0 <trans_anim_cb+0x30>
    3cbe:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
        _lv_style_set_int(style, tr->prop, x);
    3cc2:	4b3e      	ldr	r3, [pc, #248]	; (3dbc <trans_anim_cb+0x11c>)
    3cc4:	4798      	blx	r3
    lv_obj_refresh_style(tr->obj, tr->prop);
    3cc6:	88a1      	ldrh	r1, [r4, #4]
    3cc8:	6820      	ldr	r0, [r4, #0]
    3cca:	4b3d      	ldr	r3, [pc, #244]	; (3dc0 <trans_anim_cb+0x120>)
    3ccc:	4798      	blx	r3
    3cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        else if(v == 255) x = tr->end_value._int;
    3cd0:	2dff      	cmp	r5, #255	; 0xff
    3cd2:	d00a      	beq.n	3cea <trans_anim_cb+0x4a>
        else x = tr->start_value._int + ((int32_t)((int32_t)(tr->end_value._int - tr->start_value._int) * v) >> 8);
    3cd4:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
    3cd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    3cdc:	1a9b      	subs	r3, r3, r2
    3cde:	fb05 f503 	mul.w	r5, r5, r3
    3ce2:	eb02 2225 	add.w	r2, r2, r5, asr #8
    3ce6:	b212      	sxth	r2, r2
    3ce8:	e7eb      	b.n	3cc2 <trans_anim_cb+0x22>
        else if(v == 255) x = tr->end_value._int;
    3cea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    3cee:	e7e8      	b.n	3cc2 <trans_anim_cb+0x22>
    else if((tr->prop & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
    3cf0:	2b0b      	cmp	r3, #11
    3cf2:	dc43      	bgt.n	3d7c <trans_anim_cb+0xdc>
        if(v <= 0) x = tr->start_value._color;
    3cf4:	2d00      	cmp	r5, #0
    3cf6:	dd05      	ble.n	3d04 <trans_anim_cb+0x64>
        else if(v >= 255) x = tr->end_value._color;
    3cf8:	2dfe      	cmp	r5, #254	; 0xfe
    3cfa:	dd05      	ble.n	3d08 <trans_anim_cb+0x68>
    3cfc:	89a2      	ldrh	r2, [r4, #12]
        _lv_style_set_color(style, tr->prop, x);
    3cfe:	4b31      	ldr	r3, [pc, #196]	; (3dc4 <trans_anim_cb+0x124>)
    3d00:	4798      	blx	r3
    3d02:	e7e0      	b.n	3cc6 <trans_anim_cb+0x26>
        if(v <= 0) x = tr->start_value._color;
    3d04:	8922      	ldrh	r2, [r4, #8]
    3d06:	e7fa      	b.n	3cfe <trans_anim_cb+0x5e>
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    3d08:	b2ed      	uxtb	r5, r5
    3d0a:	f1c5 02ff 	rsb	r2, r5, #255	; 0xff
    3d0e:	7b63      	ldrb	r3, [r4, #13]
    3d10:	08db      	lsrs	r3, r3, #3
    3d12:	7a66      	ldrb	r6, [r4, #9]
    3d14:	08f6      	lsrs	r6, r6, #3
    3d16:	fb02 f606 	mul.w	r6, r2, r6
    3d1a:	fb05 6303 	mla	r3, r5, r3, r6
    3d1e:	eb03 2703 	add.w	r7, r3, r3, lsl #8
    3d22:	eb03 13c7 	add.w	r3, r3, r7, lsl #7
    3d26:	f3c3 57c4 	ubfx	r7, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    3d2a:	89a3      	ldrh	r3, [r4, #12]
    3d2c:	f3c3 1345 	ubfx	r3, r3, #5, #6
    3d30:	8926      	ldrh	r6, [r4, #8]
    3d32:	f3c6 1645 	ubfx	r6, r6, #5, #6
    3d36:	fb02 f606 	mul.w	r6, r2, r6
    3d3a:	fb05 6303 	mla	r3, r5, r3, r6
    3d3e:	eb03 2603 	add.w	r6, r3, r3, lsl #8
    3d42:	eb03 13c6 	add.w	r3, r3, r6, lsl #7
    3d46:	f3c3 56c5 	ubfx	r6, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    3d4a:	7b23      	ldrb	r3, [r4, #12]
    3d4c:	f003 031f 	and.w	r3, r3, #31
    3d50:	f894 e008 	ldrb.w	lr, [r4, #8]
    3d54:	f00e 0e1f 	and.w	lr, lr, #31
    3d58:	fb02 f20e 	mul.w	r2, r2, lr
    3d5c:	fb05 2503 	mla	r5, r5, r3, r2
    3d60:	eb05 2305 	add.w	r3, r5, r5, lsl #8
    3d64:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    3d68:	0ded      	lsrs	r5, r5, #23
    3d6a:	f04f 0200 	mov.w	r2, #0
    3d6e:	f365 0204 	bfi	r2, r5, #0, #5
    3d72:	f366 124a 	bfi	r2, r6, #5, #6
    3d76:	f367 22cf 	bfi	r2, r7, #11, #5
    3d7a:	e7c0      	b.n	3cfe <trans_anim_cb+0x5e>
    else if((tr->prop & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
    3d7c:	2b0d      	cmp	r3, #13
    3d7e:	dc12      	bgt.n	3da6 <trans_anim_cb+0x106>
        if(v <= 0) x = tr->start_value._opa;
    3d80:	2d00      	cmp	r5, #0
    3d82:	dd05      	ble.n	3d90 <trans_anim_cb+0xf0>
        else if(v >= 255) x = tr->end_value._opa;
    3d84:	2dfe      	cmp	r5, #254	; 0xfe
    3d86:	dd05      	ble.n	3d94 <trans_anim_cb+0xf4>
    3d88:	7b22      	ldrb	r2, [r4, #12]
        _lv_style_set_opa(style, tr->prop, x);
    3d8a:	4b0f      	ldr	r3, [pc, #60]	; (3dc8 <trans_anim_cb+0x128>)
    3d8c:	4798      	blx	r3
    3d8e:	e79a      	b.n	3cc6 <trans_anim_cb+0x26>
        if(v <= 0) x = tr->start_value._opa;
    3d90:	7a22      	ldrb	r2, [r4, #8]
    3d92:	e7fa      	b.n	3d8a <trans_anim_cb+0xea>
        else x = tr->start_value._opa + (((tr->end_value._opa - tr->start_value._opa) * v) >> 8);
    3d94:	7a22      	ldrb	r2, [r4, #8]
    3d96:	7b23      	ldrb	r3, [r4, #12]
    3d98:	1a9b      	subs	r3, r3, r2
    3d9a:	fb05 f503 	mul.w	r5, r5, r3
    3d9e:	eb02 2225 	add.w	r2, r2, r5, asr #8
    3da2:	b2d2      	uxtb	r2, r2
    3da4:	e7f1      	b.n	3d8a <trans_anim_cb+0xea>
        if(v < 128) x = tr->start_value._ptr;
    3da6:	2d7f      	cmp	r5, #127	; 0x7f
    3da8:	bfd4      	ite	le
    3daa:	68a2      	ldrle	r2, [r4, #8]
        else x = tr->end_value._ptr;
    3dac:	68e2      	ldrgt	r2, [r4, #12]
        _lv_style_set_ptr(style, tr->prop, x);
    3dae:	4b07      	ldr	r3, [pc, #28]	; (3dcc <trans_anim_cb+0x12c>)
    3db0:	4798      	blx	r3
    3db2:	e788      	b.n	3cc6 <trans_anim_cb+0x26>
    3db4:	00002ff1 	.word	0x00002ff1
    3db8:	000070db 	.word	0x000070db
    3dbc:	000068d5 	.word	0x000068d5
    3dc0:	00003a8d 	.word	0x00003a8d
    3dc4:	00006a19 	.word	0x00006a19
    3dc8:	00006b5d 	.word	0x00006b5d
    3dcc:	00006c8d 	.word	0x00006c8d

00003dd0 <lv_obj_get_base_dir>:
{
    3dd0:	b530      	push	{r4, r5, lr}
    3dd2:	b083      	sub	sp, #12
    3dd4:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3dd6:	4b0a      	ldr	r3, [pc, #40]	; (3e00 <lv_obj_get_base_dir+0x30>)
    3dd8:	4798      	blx	r3
    3dda:	b110      	cbz	r0, 3de2 <lv_obj_get_base_dir+0x12>
}
    3ddc:	2000      	movs	r0, #0
    3dde:	b003      	add	sp, #12
    3de0:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3de2:	4b08      	ldr	r3, [pc, #32]	; (3e04 <lv_obj_get_base_dir+0x34>)
    3de4:	9300      	str	r3, [sp, #0]
    3de6:	f640 22b1 	movw	r2, #2737	; 0xab1
    3dea:	4907      	ldr	r1, [pc, #28]	; (3e08 <lv_obj_get_base_dir+0x38>)
    3dec:	2003      	movs	r0, #3
    3dee:	4d07      	ldr	r5, [pc, #28]	; (3e0c <lv_obj_get_base_dir+0x3c>)
    3df0:	47a8      	blx	r5
    3df2:	4622      	mov	r2, r4
    3df4:	2300      	movs	r3, #0
    3df6:	4806      	ldr	r0, [pc, #24]	; (3e10 <lv_obj_get_base_dir+0x40>)
    3df8:	4906      	ldr	r1, [pc, #24]	; (3e14 <lv_obj_get_base_dir+0x44>)
    3dfa:	4788      	blx	r1
    3dfc:	e7fe      	b.n	3dfc <lv_obj_get_base_dir+0x2c>
    3dfe:	bf00      	nop
    3e00:	000022a5 	.word	0x000022a5
    3e04:	000245cc 	.word	0x000245cc
    3e08:	000247d0 	.word	0x000247d0
    3e0c:	00012251 	.word	0x00012251
    3e10:	00024830 	.word	0x00024830
    3e14:	000022ad 	.word	0x000022ad

00003e18 <lv_obj_create>:
{
    3e18:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e1a:	b083      	sub	sp, #12
    3e1c:	460d      	mov	r5, r1
    if(parent == NULL) {
    3e1e:	4606      	mov	r6, r0
    3e20:	b188      	cbz	r0, 3e46 <lv_obj_create+0x2e>
        LV_ASSERT_OBJ(parent, LV_OBJX_NAME);
    3e22:	4b9d      	ldr	r3, [pc, #628]	; (4098 <lv_obj_create+0x280>)
    3e24:	4798      	blx	r3
    3e26:	2800      	cmp	r0, #0
    3e28:	f040 8164 	bne.w	40f4 <lv_obj_create+0x2dc>
    3e2c:	4b9b      	ldr	r3, [pc, #620]	; (409c <lv_obj_create+0x284>)
    3e2e:	9300      	str	r3, [sp, #0]
    3e30:	22ed      	movs	r2, #237	; 0xed
    3e32:	499b      	ldr	r1, [pc, #620]	; (40a0 <lv_obj_create+0x288>)
    3e34:	2003      	movs	r0, #3
    3e36:	4c9b      	ldr	r4, [pc, #620]	; (40a4 <lv_obj_create+0x28c>)
    3e38:	47a0      	blx	r4
    3e3a:	4632      	mov	r2, r6
    3e3c:	2300      	movs	r3, #0
    3e3e:	489a      	ldr	r0, [pc, #616]	; (40a8 <lv_obj_create+0x290>)
    3e40:	499a      	ldr	r1, [pc, #616]	; (40ac <lv_obj_create+0x294>)
    3e42:	4788      	blx	r1
    3e44:	e7fe      	b.n	3e44 <lv_obj_create+0x2c>
        lv_disp_t * disp = lv_disp_get_default();
    3e46:	4b9a      	ldr	r3, [pc, #616]	; (40b0 <lv_obj_create+0x298>)
    3e48:	4798      	blx	r3
        if(!disp) {
    3e4a:	b948      	cbnz	r0, 3e60 <lv_obj_create+0x48>
            LV_LOG_WARN("lv_obj_create: not display created to so far. No place to assign the new screen");
    3e4c:	4b99      	ldr	r3, [pc, #612]	; (40b4 <lv_obj_create+0x29c>)
    3e4e:	9300      	str	r3, [sp, #0]
    3e50:	4b92      	ldr	r3, [pc, #584]	; (409c <lv_obj_create+0x284>)
    3e52:	22cf      	movs	r2, #207	; 0xcf
    3e54:	4992      	ldr	r1, [pc, #584]	; (40a0 <lv_obj_create+0x288>)
    3e56:	2002      	movs	r0, #2
    3e58:	4c92      	ldr	r4, [pc, #584]	; (40a4 <lv_obj_create+0x28c>)
    3e5a:	47a0      	blx	r4
            return NULL;
    3e5c:	4634      	mov	r4, r6
    3e5e:	e1f5      	b.n	424c <lv_obj_create+0x434>
        new_obj = _lv_ll_ins_head(&disp->scr_ll);
    3e60:	3030      	adds	r0, #48	; 0x30
    3e62:	4b95      	ldr	r3, [pc, #596]	; (40b8 <lv_obj_create+0x2a0>)
    3e64:	4798      	blx	r3
    3e66:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_obj);
    3e68:	4b8b      	ldr	r3, [pc, #556]	; (4098 <lv_obj_create+0x280>)
    3e6a:	4798      	blx	r3
    3e6c:	b960      	cbnz	r0, 3e88 <lv_obj_create+0x70>
    3e6e:	4b8b      	ldr	r3, [pc, #556]	; (409c <lv_obj_create+0x284>)
    3e70:	9300      	str	r3, [sp, #0]
    3e72:	22d4      	movs	r2, #212	; 0xd4
    3e74:	498a      	ldr	r1, [pc, #552]	; (40a0 <lv_obj_create+0x288>)
    3e76:	2003      	movs	r0, #3
    3e78:	4d8a      	ldr	r5, [pc, #552]	; (40a4 <lv_obj_create+0x28c>)
    3e7a:	47a8      	blx	r5
    3e7c:	4622      	mov	r2, r4
    3e7e:	2300      	movs	r3, #0
    3e80:	488e      	ldr	r0, [pc, #568]	; (40bc <lv_obj_create+0x2a4>)
    3e82:	498a      	ldr	r1, [pc, #552]	; (40ac <lv_obj_create+0x294>)
    3e84:	4788      	blx	r1
    3e86:	e7fe      	b.n	3e86 <lv_obj_create+0x6e>
        if(new_obj == NULL) return NULL;
    3e88:	2c00      	cmp	r4, #0
    3e8a:	f000 81df 	beq.w	424c <lv_obj_create+0x434>
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
    3e8e:	214c      	movs	r1, #76	; 0x4c
    3e90:	4620      	mov	r0, r4
    3e92:	4b8b      	ldr	r3, [pc, #556]	; (40c0 <lv_obj_create+0x2a8>)
    3e94:	4798      	blx	r3
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
    3e96:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    3e9a:	f36f 1305 	bfc	r3, #4, #2
    3e9e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->signal_cb = lv_obj_signal;
    3ea2:	4b88      	ldr	r3, [pc, #544]	; (40c4 <lv_obj_create+0x2ac>)
    3ea4:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
    3ea6:	4b88      	ldr	r3, [pc, #544]	; (40c8 <lv_obj_create+0x2b0>)
    3ea8:	6223      	str	r3, [r4, #32]
        new_obj->event_cb = NULL;
    3eaa:	2700      	movs	r7, #0
    3eac:	61a7      	str	r7, [r4, #24]
        new_obj->coords.x1    = 0;
    3eae:	8227      	strh	r7, [r4, #16]
        new_obj->coords.y1    = 0;
    3eb0:	8267      	strh	r7, [r4, #18]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
    3eb2:	4638      	mov	r0, r7
    3eb4:	4b85      	ldr	r3, [pc, #532]	; (40cc <lv_obj_create+0x2b4>)
    3eb6:	4798      	blx	r3
    3eb8:	3801      	subs	r0, #1
    3eba:	82a0      	strh	r0, [r4, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
    3ebc:	4638      	mov	r0, r7
    3ebe:	4b84      	ldr	r3, [pc, #528]	; (40d0 <lv_obj_create+0x2b8>)
    3ec0:	4798      	blx	r3
    3ec2:	3801      	subs	r0, #1
    3ec4:	82e0      	strh	r0, [r4, #22]
    _lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
    3ec6:	214c      	movs	r1, #76	; 0x4c
    3ec8:	1d20      	adds	r0, r4, #4
    3eca:	4b82      	ldr	r3, [pc, #520]	; (40d4 <lv_obj_create+0x2bc>)
    3ecc:	4798      	blx	r3
    new_obj->ext_draw_pad = 0;
    3ece:	2300      	movs	r3, #0
    3ed0:	8663      	strh	r3, [r4, #50]	; 0x32
    new_obj->ext_click_pad_hor = 0;
    3ed2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    new_obj->ext_click_pad_ver = 0;
    3ed6:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    new_obj->realign.align        = LV_ALIGN_CENTER;
    3eda:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    new_obj->realign.xofs         = 0;
    3ede:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    new_obj->realign.yofs         = 0;
    3ee2:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    new_obj->realign.base         = NULL;
    3ee6:	6423      	str	r3, [r4, #64]	; 0x40
    new_obj->realign.auto_realign = 0;
    3ee8:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
    3eec:	f363 0200 	bfi	r2, r3, #0, #1
    3ef0:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
    new_obj->group_p = NULL;
    3ef4:	63a3      	str	r3, [r4, #56]	; 0x38
    new_obj->adv_hittest  = 0;
    3ef6:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    new_obj->click        = 1;
    3efa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    new_obj->drag         = 0;
    3efe:	f042 0201 	orr.w	r2, r2, #1
    new_obj->drag_dir     = LV_DRAG_DIR_BOTH;
    3f02:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
    3f06:	2003      	movs	r0, #3
    3f08:	f360 0143 	bfi	r1, r0, #1, #3
    new_obj->protect      = LV_PROTECT_NONE;
    3f0c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    new_obj->parent_event = 0;
    3f10:	f002 02c1 	and.w	r2, r2, #193	; 0xc1
    3f14:	f363 1286 	bfi	r2, r3, #6, #1
    3f18:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    new_obj->gesture_parent = 1;
    3f1c:	f041 0101 	orr.w	r1, r1, #1
    3f20:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    new_obj->state = LV_STATE_DEFAULT;
    3f24:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    new_obj->ext_attr = NULL;
    3f28:	6263      	str	r3, [r4, #36]	; 0x24
    lv_style_list_init(&new_obj->style_list);
    3f2a:	f104 0728 	add.w	r7, r4, #40	; 0x28
    3f2e:	4638      	mov	r0, r7
    3f30:	4b69      	ldr	r3, [pc, #420]	; (40d8 <lv_obj_create+0x2c0>)
    3f32:	4798      	blx	r3
    if(copy == NULL) {
    3f34:	2d00      	cmp	r5, #0
    3f36:	f000 816c 	beq.w	4212 <lv_obj_create+0x3fa>
        lv_style_list_copy(&new_obj->style_list, &copy->style_list);
    3f3a:	f105 0128 	add.w	r1, r5, #40	; 0x28
    3f3e:	4638      	mov	r0, r7
    3f40:	4b66      	ldr	r3, [pc, #408]	; (40dc <lv_obj_create+0x2c4>)
    3f42:	4798      	blx	r3
    3f44:	f105 020f 	add.w	r2, r5, #15
    3f48:	f104 0118 	add.w	r1, r4, #24
    uint8_t * d8 = (uint8_t *)dst;
    3f4c:	f104 0310 	add.w	r3, r4, #16
        *d8 = *s8;
    3f50:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    3f54:	f803 0b01 	strb.w	r0, [r3], #1
    while(len) {
    3f58:	428b      	cmp	r3, r1
    3f5a:	d1f9      	bne.n	3f50 <lv_obj_create+0x138>
        new_obj->ext_draw_pad = copy->ext_draw_pad;
    3f5c:	f9b5 3032 	ldrsh.w	r3, [r5, #50]	; 0x32
    3f60:	8663      	strh	r3, [r4, #50]	; 0x32
        new_obj->ext_click_pad_hor = copy->ext_click_pad_hor;
    3f62:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    3f66:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        new_obj->ext_click_pad_ver = copy->ext_click_pad_ver;
    3f6a:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    3f6e:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
        new_obj->realign.align        = copy->realign.align;
    3f72:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
    3f76:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        new_obj->realign.xofs         = copy->realign.xofs;
    3f7a:	f9b5 3044 	ldrsh.w	r3, [r5, #68]	; 0x44
    3f7e:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
        new_obj->realign.yofs         = copy->realign.yofs;
    3f82:	f9b5 3046 	ldrsh.w	r3, [r5, #70]	; 0x46
    3f86:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        new_obj->realign.base         = copy->realign.base;
    3f8a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    3f8c:	6423      	str	r3, [r4, #64]	; 0x40
        new_obj->realign.auto_realign = copy->realign.auto_realign;
    3f8e:	f895 2049 	ldrb.w	r2, [r5, #73]	; 0x49
    3f92:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
    3f96:	f362 0300 	bfi	r3, r2, #0, #1
    3f9a:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
        new_obj->event_cb = copy->event_cb;
    3f9e:	69ab      	ldr	r3, [r5, #24]
    3fa0:	61a3      	str	r3, [r4, #24]
        new_obj->adv_hittest  = copy->adv_hittest;
    3fa2:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    3fa6:	09db      	lsrs	r3, r3, #7
    3fa8:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    3fac:	f363 12c7 	bfi	r2, r3, #7, #1
    3fb0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->click        = copy->click;
    3fb4:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
    3fb8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    3fbc:	f362 0300 	bfi	r3, r2, #0, #1
    3fc0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        new_obj->drag         = copy->drag;
    3fc4:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    3fc8:	f3c3 0340 	ubfx	r3, r3, #1, #1
    3fcc:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    3fd0:	f363 0241 	bfi	r2, r3, #1, #1
    3fd4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->drag_dir     = copy->drag_dir;
    3fd8:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
    3fdc:	f3c3 0342 	ubfx	r3, r3, #1, #3
    3fe0:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
    3fe4:	f363 0243 	bfi	r2, r3, #1, #3
    3fe8:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        new_obj->drag_throw   = copy->drag_throw;
    3fec:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    3ff0:	f3c3 0380 	ubfx	r3, r3, #2, #1
    3ff4:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    3ff8:	f363 0282 	bfi	r2, r3, #2, #1
    3ffc:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->drag_parent  = copy->drag_parent;
    4000:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    4004:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    4008:	b2d2      	uxtb	r2, r2
    400a:	f363 02c3 	bfi	r2, r3, #3, #1
    400e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->hidden       = copy->hidden;
    4012:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    4016:	f3c3 1300 	ubfx	r3, r3, #4, #1
    401a:	b2d2      	uxtb	r2, r2
    401c:	f363 1204 	bfi	r2, r3, #4, #1
    4020:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->top          = copy->top;
    4024:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    4028:	f3c3 1340 	ubfx	r3, r3, #5, #1
    402c:	b2d2      	uxtb	r2, r2
    402e:	f363 1245 	bfi	r2, r3, #5, #1
    4032:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->parent_event = copy->parent_event;
    4036:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    403a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    403e:	b2d2      	uxtb	r2, r2
    4040:	f363 1286 	bfi	r2, r3, #6, #1
    4044:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->protect      = copy->protect;
    4048:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
    404c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        new_obj->gesture_parent = copy->gesture_parent;
    4050:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
    4054:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    4058:	f362 0300 	bfi	r3, r2, #0, #1
    405c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(copy->group_p != NULL) {
    4060:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    4062:	b110      	cbz	r0, 406a <lv_obj_create+0x252>
            lv_group_add_obj(copy->group_p, new_obj);
    4064:	4621      	mov	r1, r4
    4066:	4b1e      	ldr	r3, [pc, #120]	; (40e0 <lv_obj_create+0x2c8>)
    4068:	4798      	blx	r3
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
    406a:	4628      	mov	r0, r5
    406c:	4b1d      	ldr	r3, [pc, #116]	; (40e4 <lv_obj_create+0x2cc>)
    406e:	4798      	blx	r3
    4070:	2800      	cmp	r0, #0
    4072:	f000 80d9 	beq.w	4228 <lv_obj_create+0x410>
    4076:	2e00      	cmp	r6, #0
    4078:	f000 80df 	beq.w	423a <lv_obj_create+0x422>
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
    407c:	4628      	mov	r0, r5
    407e:	4b1a      	ldr	r3, [pc, #104]	; (40e8 <lv_obj_create+0x2d0>)
    4080:	4798      	blx	r3
    4082:	4607      	mov	r7, r0
    4084:	4628      	mov	r0, r5
    4086:	4b19      	ldr	r3, [pc, #100]	; (40ec <lv_obj_create+0x2d4>)
    4088:	4798      	blx	r3
    408a:	4602      	mov	r2, r0
    408c:	4639      	mov	r1, r7
    408e:	4620      	mov	r0, r4
    4090:	4b17      	ldr	r3, [pc, #92]	; (40f0 <lv_obj_create+0x2d8>)
    4092:	4798      	blx	r3
    4094:	e0c9      	b.n	422a <lv_obj_create+0x412>
    4096:	bf00      	nop
    4098:	000022a5 	.word	0x000022a5
    409c:	000245e0 	.word	0x000245e0
    40a0:	000247d0 	.word	0x000247d0
    40a4:	00012251 	.word	0x00012251
    40a8:	00024830 	.word	0x00024830
    40ac:	000022ad 	.word	0x000022ad
    40b0:	00010ed5 	.word	0x00010ed5
    40b4:	0002492c 	.word	0x0002492c
    40b8:	00011f05 	.word	0x00011f05
    40bc:	00023fcc 	.word	0x00023fcc
    40c0:	00012b2b 	.word	0x00012b2b
    40c4:	000059f9 	.word	0x000059f9
    40c8:	0000541d 	.word	0x0000541d
    40cc:	00010ee1 	.word	0x00010ee1
    40d0:	00010f09 	.word	0x00010f09
    40d4:	00011eed 	.word	0x00011eed
    40d8:	000064dd 	.word	0x000064dd
    40dc:	0000715d 	.word	0x0000715d
    40e0:	00002591 	.word	0x00002591
    40e4:	00002c71 	.word	0x00002c71
    40e8:	00002e91 	.word	0x00002e91
    40ec:	00002ef1 	.word	0x00002ef1
    40f0:	00003431 	.word	0x00003431
        new_obj = _lv_ll_ins_head(&parent->child_ll);
    40f4:	1d30      	adds	r0, r6, #4
    40f6:	4b57      	ldr	r3, [pc, #348]	; (4254 <lv_obj_create+0x43c>)
    40f8:	4798      	blx	r3
    40fa:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_obj);
    40fc:	4b56      	ldr	r3, [pc, #344]	; (4258 <lv_obj_create+0x440>)
    40fe:	4798      	blx	r3
    4100:	2800      	cmp	r0, #0
    4102:	d047      	beq.n	4194 <lv_obj_create+0x37c>
        if(new_obj == NULL) return NULL;
    4104:	2c00      	cmp	r4, #0
    4106:	f000 80a1 	beq.w	424c <lv_obj_create+0x434>
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
    410a:	214c      	movs	r1, #76	; 0x4c
    410c:	4620      	mov	r0, r4
    410e:	4b53      	ldr	r3, [pc, #332]	; (425c <lv_obj_create+0x444>)
    4110:	4798      	blx	r3
        new_obj->parent = parent;
    4112:	6026      	str	r6, [r4, #0]
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
    4114:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    4118:	f36f 1305 	bfc	r3, #4, #2
    411c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->signal_cb = lv_obj_signal;
    4120:	4b4f      	ldr	r3, [pc, #316]	; (4260 <lv_obj_create+0x448>)
    4122:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
    4124:	4b4f      	ldr	r3, [pc, #316]	; (4264 <lv_obj_create+0x44c>)
    4126:	6223      	str	r3, [r4, #32]
        new_obj->event_cb = NULL;
    4128:	2000      	movs	r0, #0
    412a:	61a0      	str	r0, [r4, #24]
        new_obj->coords.y1    = parent->coords.y1;
    412c:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
    4130:	8263      	strh	r3, [r4, #18]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
    4132:	8a77      	ldrh	r7, [r6, #18]
    4134:	4b4c      	ldr	r3, [pc, #304]	; (4268 <lv_obj_create+0x450>)
    4136:	4798      	blx	r3
    4138:	2332      	movs	r3, #50	; 0x32
    413a:	fb03 f300 	mul.w	r3, r3, r0
    413e:	3350      	adds	r3, #80	; 0x50
    4140:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
    4144:	da33      	bge.n	41ae <lv_obj_create+0x396>
    4146:	2301      	movs	r3, #1
    4148:	443b      	add	r3, r7
    414a:	82e3      	strh	r3, [r4, #22]
        if(lv_obj_get_base_dir(new_obj) == LV_BIDI_DIR_RTL) {
    414c:	4620      	mov	r0, r4
    414e:	4b47      	ldr	r3, [pc, #284]	; (426c <lv_obj_create+0x454>)
    4150:	4798      	blx	r3
    4152:	2801      	cmp	r0, #1
    4154:	d03a      	beq.n	41cc <lv_obj_create+0x3b4>
            new_obj->coords.x1    = parent->coords.x1;
    4156:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
    415a:	8223      	strh	r3, [r4, #16]
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
    415c:	8a37      	ldrh	r7, [r6, #16]
    415e:	2000      	movs	r0, #0
    4160:	4b41      	ldr	r3, [pc, #260]	; (4268 <lv_obj_create+0x450>)
    4162:	4798      	blx	r3
    4164:	2364      	movs	r3, #100	; 0x64
    4166:	fb03 f300 	mul.w	r3, r3, r0
    416a:	3350      	adds	r3, #80	; 0x50
    416c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
    4170:	db4d      	blt.n	420e <lv_obj_create+0x3f6>
    4172:	2000      	movs	r0, #0
    4174:	4b3c      	ldr	r3, [pc, #240]	; (4268 <lv_obj_create+0x450>)
    4176:	4798      	blx	r3
    4178:	2364      	movs	r3, #100	; 0x64
    417a:	fb03 f300 	mul.w	r3, r3, r0
    417e:	3350      	adds	r3, #80	; 0x50
    4180:	4a3b      	ldr	r2, [pc, #236]	; (4270 <lv_obj_create+0x458>)
    4182:	fb82 1203 	smull	r1, r2, r2, r3
    4186:	17db      	asrs	r3, r3, #31
    4188:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
    418c:	b29b      	uxth	r3, r3
    418e:	443b      	add	r3, r7
    4190:	82a3      	strh	r3, [r4, #20]
    4192:	e698      	b.n	3ec6 <lv_obj_create+0xae>
        LV_ASSERT_MEM(new_obj);
    4194:	4b37      	ldr	r3, [pc, #220]	; (4274 <lv_obj_create+0x45c>)
    4196:	9300      	str	r3, [sp, #0]
    4198:	22f0      	movs	r2, #240	; 0xf0
    419a:	4937      	ldr	r1, [pc, #220]	; (4278 <lv_obj_create+0x460>)
    419c:	2003      	movs	r0, #3
    419e:	4d37      	ldr	r5, [pc, #220]	; (427c <lv_obj_create+0x464>)
    41a0:	47a8      	blx	r5
    41a2:	4622      	mov	r2, r4
    41a4:	2300      	movs	r3, #0
    41a6:	4836      	ldr	r0, [pc, #216]	; (4280 <lv_obj_create+0x468>)
    41a8:	4936      	ldr	r1, [pc, #216]	; (4284 <lv_obj_create+0x46c>)
    41aa:	4788      	blx	r1
    41ac:	e7fe      	b.n	41ac <lv_obj_create+0x394>
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
    41ae:	2000      	movs	r0, #0
    41b0:	4b2d      	ldr	r3, [pc, #180]	; (4268 <lv_obj_create+0x450>)
    41b2:	4798      	blx	r3
    41b4:	2332      	movs	r3, #50	; 0x32
    41b6:	fb03 f300 	mul.w	r3, r3, r0
    41ba:	3350      	adds	r3, #80	; 0x50
    41bc:	4a2c      	ldr	r2, [pc, #176]	; (4270 <lv_obj_create+0x458>)
    41be:	fb82 1203 	smull	r1, r2, r2, r3
    41c2:	17db      	asrs	r3, r3, #31
    41c4:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
    41c8:	b29b      	uxth	r3, r3
    41ca:	e7bd      	b.n	4148 <lv_obj_create+0x330>
            new_obj->coords.x2    = parent->coords.x2;
    41cc:	f9b6 3014 	ldrsh.w	r3, [r6, #20]
    41d0:	82a3      	strh	r3, [r4, #20]
            new_obj->coords.x1    = parent->coords.x2 - LV_OBJ_DEF_WIDTH;
    41d2:	8ab7      	ldrh	r7, [r6, #20]
    41d4:	2000      	movs	r0, #0
    41d6:	4b24      	ldr	r3, [pc, #144]	; (4268 <lv_obj_create+0x450>)
    41d8:	4798      	blx	r3
    41da:	2364      	movs	r3, #100	; 0x64
    41dc:	fb03 f300 	mul.w	r3, r3, r0
    41e0:	3350      	adds	r3, #80	; 0x50
    41e2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
    41e6:	db10      	blt.n	420a <lv_obj_create+0x3f2>
    41e8:	2000      	movs	r0, #0
    41ea:	4b1f      	ldr	r3, [pc, #124]	; (4268 <lv_obj_create+0x450>)
    41ec:	4798      	blx	r3
    41ee:	2364      	movs	r3, #100	; 0x64
    41f0:	fb03 f300 	mul.w	r3, r3, r0
    41f4:	3350      	adds	r3, #80	; 0x50
    41f6:	4a1e      	ldr	r2, [pc, #120]	; (4270 <lv_obj_create+0x458>)
    41f8:	fb82 1203 	smull	r1, r2, r2, r3
    41fc:	17db      	asrs	r3, r3, #31
    41fe:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
    4202:	b29b      	uxth	r3, r3
    4204:	1afb      	subs	r3, r7, r3
    4206:	8223      	strh	r3, [r4, #16]
    4208:	e65d      	b.n	3ec6 <lv_obj_create+0xae>
    420a:	2301      	movs	r3, #1
    420c:	e7fa      	b.n	4204 <lv_obj_create+0x3ec>
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
    420e:	2301      	movs	r3, #1
    4210:	e7bd      	b.n	418e <lv_obj_create+0x376>
        if(parent != NULL) lv_theme_apply(new_obj, LV_THEME_OBJ);
    4212:	b126      	cbz	r6, 421e <lv_obj_create+0x406>
    4214:	2102      	movs	r1, #2
    4216:	4620      	mov	r0, r4
    4218:	4b1b      	ldr	r3, [pc, #108]	; (4288 <lv_obj_create+0x470>)
    421a:	4798      	blx	r3
    421c:	e005      	b.n	422a <lv_obj_create+0x412>
        else  lv_theme_apply(new_obj, LV_THEME_SCR);
    421e:	2101      	movs	r1, #1
    4220:	4620      	mov	r0, r4
    4222:	4b19      	ldr	r3, [pc, #100]	; (4288 <lv_obj_create+0x470>)
    4224:	4798      	blx	r3
    4226:	e008      	b.n	423a <lv_obj_create+0x422>
    if(parent != NULL) {
    4228:	b13e      	cbz	r6, 423a <lv_obj_create+0x422>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
    422a:	69f3      	ldr	r3, [r6, #28]
    422c:	4622      	mov	r2, r4
    422e:	2101      	movs	r1, #1
    4230:	4630      	mov	r0, r6
    4232:	4798      	blx	r3
        lv_obj_invalidate(new_obj);
    4234:	4620      	mov	r0, r4
    4236:	4b15      	ldr	r3, [pc, #84]	; (428c <lv_obj_create+0x474>)
    4238:	4798      	blx	r3
    LV_LOG_INFO("Object create ready");
    423a:	4b15      	ldr	r3, [pc, #84]	; (4290 <lv_obj_create+0x478>)
    423c:	9300      	str	r3, [sp, #0]
    423e:	4b0d      	ldr	r3, [pc, #52]	; (4274 <lv_obj_create+0x45c>)
    4240:	f240 1287 	movw	r2, #391	; 0x187
    4244:	490c      	ldr	r1, [pc, #48]	; (4278 <lv_obj_create+0x460>)
    4246:	2001      	movs	r0, #1
    4248:	4d0c      	ldr	r5, [pc, #48]	; (427c <lv_obj_create+0x464>)
    424a:	47a8      	blx	r5
}
    424c:	4620      	mov	r0, r4
    424e:	b003      	add	sp, #12
    4250:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4252:	bf00      	nop
    4254:	00011f05 	.word	0x00011f05
    4258:	000022a5 	.word	0x000022a5
    425c:	00012b2b 	.word	0x00012b2b
    4260:	000059f9 	.word	0x000059f9
    4264:	0000541d 	.word	0x0000541d
    4268:	00010f31 	.word	0x00010f31
    426c:	00003dd1 	.word	0x00003dd1
    4270:	66666667 	.word	0x66666667
    4274:	000245e0 	.word	0x000245e0
    4278:	000247d0 	.word	0x000247d0
    427c:	00012251 	.word	0x00012251
    4280:	00023fcc 	.word	0x00023fcc
    4284:	000022ad 	.word	0x000022ad
    4288:	000141dd 	.word	0x000141dd
    428c:	00003315 	.word	0x00003315
    4290:	0002497c 	.word	0x0002497c

00004294 <lv_obj_set_size>:
{
    4294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4298:	b084      	sub	sp, #16
    429a:	4604      	mov	r4, r0
    429c:	460d      	mov	r5, r1
    429e:	4616      	mov	r6, r2
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    42a0:	4b32      	ldr	r3, [pc, #200]	; (436c <lv_obj_set_size+0xd8>)
    42a2:	4798      	blx	r3
    42a4:	b968      	cbnz	r0, 42c2 <lv_obj_set_size+0x2e>
    42a6:	4b32      	ldr	r3, [pc, #200]	; (4370 <lv_obj_set_size+0xdc>)
    42a8:	9300      	str	r3, [sp, #0]
    42aa:	f240 22e5 	movw	r2, #741	; 0x2e5
    42ae:	4931      	ldr	r1, [pc, #196]	; (4374 <lv_obj_set_size+0xe0>)
    42b0:	2003      	movs	r0, #3
    42b2:	4d31      	ldr	r5, [pc, #196]	; (4378 <lv_obj_set_size+0xe4>)
    42b4:	47a8      	blx	r5
    42b6:	4622      	mov	r2, r4
    42b8:	2300      	movs	r3, #0
    42ba:	4830      	ldr	r0, [pc, #192]	; (437c <lv_obj_set_size+0xe8>)
    42bc:	4930      	ldr	r1, [pc, #192]	; (4380 <lv_obj_set_size+0xec>)
    42be:	4788      	blx	r1
    42c0:	e7fe      	b.n	42c0 <lv_obj_set_size+0x2c>
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
    42c2:	4620      	mov	r0, r4
    42c4:	4b2f      	ldr	r3, [pc, #188]	; (4384 <lv_obj_set_size+0xf0>)
    42c6:	4798      	blx	r3
    42c8:	42a8      	cmp	r0, r5
    42ca:	d03f      	beq.n	434c <lv_obj_set_size+0xb8>
    lv_obj_invalidate(obj);
    42cc:	4620      	mov	r0, r4
    42ce:	4b2e      	ldr	r3, [pc, #184]	; (4388 <lv_obj_set_size+0xf4>)
    42d0:	4798      	blx	r3
    lv_obj_get_coords(obj, &ori);
    42d2:	a902      	add	r1, sp, #8
    42d4:	4620      	mov	r0, r4
    42d6:	4b2d      	ldr	r3, [pc, #180]	; (438c <lv_obj_set_size+0xf8>)
    42d8:	4798      	blx	r3
    obj->coords.y2 = obj->coords.y1 + h - 1;
    42da:	1e73      	subs	r3, r6, #1
    42dc:	8a62      	ldrh	r2, [r4, #18]
    42de:	4413      	add	r3, r2
    42e0:	82e3      	strh	r3, [r4, #22]
    if(lv_obj_get_base_dir(obj) == LV_BIDI_DIR_RTL) {
    42e2:	4620      	mov	r0, r4
    42e4:	4b2a      	ldr	r3, [pc, #168]	; (4390 <lv_obj_set_size+0xfc>)
    42e6:	4798      	blx	r3
    42e8:	2801      	cmp	r0, #1
    42ea:	d035      	beq.n	4358 <lv_obj_set_size+0xc4>
        obj->coords.x2 = obj->coords.x1 + w - 1;
    42ec:	1e6b      	subs	r3, r5, #1
    42ee:	8a22      	ldrh	r2, [r4, #16]
    42f0:	4413      	add	r3, r2
    42f2:	82a3      	strh	r3, [r4, #20]
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
    42f4:	69e3      	ldr	r3, [r4, #28]
    42f6:	aa02      	add	r2, sp, #8
    42f8:	2102      	movs	r1, #2
    42fa:	4620      	mov	r0, r4
    42fc:	4798      	blx	r3
    lv_obj_t * par = lv_obj_get_parent(obj);
    42fe:	4620      	mov	r0, r4
    4300:	4b24      	ldr	r3, [pc, #144]	; (4394 <lv_obj_set_size+0x100>)
    4302:	4798      	blx	r3
    if(par != NULL) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
    4304:	b118      	cbz	r0, 430e <lv_obj_set_size+0x7a>
    4306:	69c5      	ldr	r5, [r0, #28]
    4308:	4622      	mov	r2, r4
    430a:	2101      	movs	r1, #1
    430c:	47a8      	blx	r5
    _LV_LL_READ(obj->child_ll, i) {
    430e:	1d26      	adds	r6, r4, #4
    4310:	4630      	mov	r0, r6
    4312:	4b21      	ldr	r3, [pc, #132]	; (4398 <lv_obj_set_size+0x104>)
    4314:	4798      	blx	r3
    4316:	4605      	mov	r5, r0
    4318:	b168      	cbz	r0, 4336 <lv_obj_set_size+0xa2>
        i->signal_cb(i, LV_SIGNAL_PARENT_SIZE_CHG,  &ori);
    431a:	f04f 0803 	mov.w	r8, #3
    _LV_LL_READ(obj->child_ll, i) {
    431e:	4f1f      	ldr	r7, [pc, #124]	; (439c <lv_obj_set_size+0x108>)
        i->signal_cb(i, LV_SIGNAL_PARENT_SIZE_CHG,  &ori);
    4320:	69eb      	ldr	r3, [r5, #28]
    4322:	aa02      	add	r2, sp, #8
    4324:	4641      	mov	r1, r8
    4326:	4628      	mov	r0, r5
    4328:	4798      	blx	r3
    _LV_LL_READ(obj->child_ll, i) {
    432a:	4629      	mov	r1, r5
    432c:	4630      	mov	r0, r6
    432e:	47b8      	blx	r7
    4330:	4605      	mov	r5, r0
    4332:	2800      	cmp	r0, #0
    4334:	d1f4      	bne.n	4320 <lv_obj_set_size+0x8c>
    lv_obj_invalidate(obj);
    4336:	4620      	mov	r0, r4
    4338:	4b13      	ldr	r3, [pc, #76]	; (4388 <lv_obj_set_size+0xf4>)
    433a:	4798      	blx	r3
    if(obj->realign.auto_realign) lv_obj_realign(obj);
    433c:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
    4340:	f013 0f01 	tst.w	r3, #1
    4344:	d10e      	bne.n	4364 <lv_obj_set_size+0xd0>
}
    4346:	b004      	add	sp, #16
    4348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
    434c:	4620      	mov	r0, r4
    434e:	4b14      	ldr	r3, [pc, #80]	; (43a0 <lv_obj_set_size+0x10c>)
    4350:	4798      	blx	r3
    4352:	42b0      	cmp	r0, r6
    4354:	d1ba      	bne.n	42cc <lv_obj_set_size+0x38>
    4356:	e7f6      	b.n	4346 <lv_obj_set_size+0xb2>
        obj->coords.x1 = obj->coords.x2 - w + 1;
    4358:	f1c5 0301 	rsb	r3, r5, #1
    435c:	8aa2      	ldrh	r2, [r4, #20]
    435e:	4413      	add	r3, r2
    4360:	8223      	strh	r3, [r4, #16]
    4362:	e7c7      	b.n	42f4 <lv_obj_set_size+0x60>
    if(obj->realign.auto_realign) lv_obj_realign(obj);
    4364:	4620      	mov	r0, r4
    4366:	4b0f      	ldr	r3, [pc, #60]	; (43a4 <lv_obj_set_size+0x110>)
    4368:	4798      	blx	r3
    436a:	e7ec      	b.n	4346 <lv_obj_set_size+0xb2>
    436c:	000022a5 	.word	0x000022a5
    4370:	00024604 	.word	0x00024604
    4374:	000247d0 	.word	0x000247d0
    4378:	00012251 	.word	0x00012251
    437c:	00024830 	.word	0x00024830
    4380:	000022ad 	.word	0x000022ad
    4384:	00002f51 	.word	0x00002f51
    4388:	00003315 	.word	0x00003315
    438c:	00002e35 	.word	0x00002e35
    4390:	00003dd1 	.word	0x00003dd1
    4394:	00002c71 	.word	0x00002c71
    4398:	00011f9d 	.word	0x00011f9d
    439c:	00011fb1 	.word	0x00011fb1
    43a0:	00002fa1 	.word	0x00002fa1
    43a4:	000039d5 	.word	0x000039d5

000043a8 <lv_obj_set_height>:
{
    43a8:	b530      	push	{r4, r5, lr}
    43aa:	b083      	sub	sp, #12
    43ac:	4604      	mov	r4, r0
    43ae:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    43b0:	4b0d      	ldr	r3, [pc, #52]	; (43e8 <lv_obj_set_height+0x40>)
    43b2:	4798      	blx	r3
    43b4:	b968      	cbnz	r0, 43d2 <lv_obj_set_height+0x2a>
    43b6:	4b0d      	ldr	r3, [pc, #52]	; (43ec <lv_obj_set_height+0x44>)
    43b8:	9300      	str	r3, [sp, #0]
    43ba:	f240 3227 	movw	r2, #807	; 0x327
    43be:	490c      	ldr	r1, [pc, #48]	; (43f0 <lv_obj_set_height+0x48>)
    43c0:	2003      	movs	r0, #3
    43c2:	4d0c      	ldr	r5, [pc, #48]	; (43f4 <lv_obj_set_height+0x4c>)
    43c4:	47a8      	blx	r5
    43c6:	4622      	mov	r2, r4
    43c8:	2300      	movs	r3, #0
    43ca:	480b      	ldr	r0, [pc, #44]	; (43f8 <lv_obj_set_height+0x50>)
    43cc:	490b      	ldr	r1, [pc, #44]	; (43fc <lv_obj_set_height+0x54>)
    43ce:	4788      	blx	r1
    43d0:	e7fe      	b.n	43d0 <lv_obj_set_height+0x28>
    lv_obj_set_size(obj, lv_obj_get_width(obj), h);
    43d2:	4620      	mov	r0, r4
    43d4:	4b0a      	ldr	r3, [pc, #40]	; (4400 <lv_obj_set_height+0x58>)
    43d6:	4798      	blx	r3
    43d8:	462a      	mov	r2, r5
    43da:	4601      	mov	r1, r0
    43dc:	4620      	mov	r0, r4
    43de:	4b09      	ldr	r3, [pc, #36]	; (4404 <lv_obj_set_height+0x5c>)
    43e0:	4798      	blx	r3
}
    43e2:	b003      	add	sp, #12
    43e4:	bd30      	pop	{r4, r5, pc}
    43e6:	bf00      	nop
    43e8:	000022a5 	.word	0x000022a5
    43ec:	00024628 	.word	0x00024628
    43f0:	000247d0 	.word	0x000247d0
    43f4:	00012251 	.word	0x00012251
    43f8:	00024830 	.word	0x00024830
    43fc:	000022ad 	.word	0x000022ad
    4400:	00002f51 	.word	0x00002f51
    4404:	00004295 	.word	0x00004295

00004408 <lv_obj_is_protected>:
{
    4408:	b530      	push	{r4, r5, lr}
    440a:	b083      	sub	sp, #12
    440c:	4604      	mov	r4, r0
    440e:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    4410:	4b0c      	ldr	r3, [pc, #48]	; (4444 <lv_obj_is_protected+0x3c>)
    4412:	4798      	blx	r3
    4414:	b138      	cbz	r0, 4426 <lv_obj_is_protected+0x1e>
    return (obj->protect & prot) == 0 ? false : true;
    4416:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    441a:	421d      	tst	r5, r3
}
    441c:	bf14      	ite	ne
    441e:	2001      	movne	r0, #1
    4420:	2000      	moveq	r0, #0
    4422:	b003      	add	sp, #12
    4424:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    4426:	4b08      	ldr	r3, [pc, #32]	; (4448 <lv_obj_is_protected+0x40>)
    4428:	9300      	str	r3, [sp, #0]
    442a:	f640 22d7 	movw	r2, #2775	; 0xad7
    442e:	4907      	ldr	r1, [pc, #28]	; (444c <lv_obj_is_protected+0x44>)
    4430:	2003      	movs	r0, #3
    4432:	4d07      	ldr	r5, [pc, #28]	; (4450 <lv_obj_is_protected+0x48>)
    4434:	47a8      	blx	r5
    4436:	4622      	mov	r2, r4
    4438:	2300      	movs	r3, #0
    443a:	4806      	ldr	r0, [pc, #24]	; (4454 <lv_obj_is_protected+0x4c>)
    443c:	4906      	ldr	r1, [pc, #24]	; (4458 <lv_obj_is_protected+0x50>)
    443e:	4788      	blx	r1
    4440:	e7fe      	b.n	4440 <lv_obj_is_protected+0x38>
    4442:	bf00      	nop
    4444:	000022a5 	.word	0x000022a5
    4448:	00024650 	.word	0x00024650
    444c:	000247d0 	.word	0x000247d0
    4450:	00012251 	.word	0x00012251
    4454:	00024830 	.word	0x00024830
    4458:	000022ad 	.word	0x000022ad

0000445c <lv_obj_get_state>:
{
    445c:	b530      	push	{r4, r5, lr}
    445e:	b085      	sub	sp, #20
    4460:	4604      	mov	r4, r0
    4462:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    4464:	4b11      	ldr	r3, [pc, #68]	; (44ac <lv_obj_get_state+0x50>)
    4466:	4798      	blx	r3
    4468:	b128      	cbz	r0, 4476 <lv_obj_get_state+0x1a>
    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
    446a:	2d3f      	cmp	r5, #63	; 0x3f
    446c:	d811      	bhi.n	4492 <lv_obj_get_state+0x36>
    446e:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
}
    4472:	b005      	add	sp, #20
    4474:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    4476:	4b0e      	ldr	r3, [pc, #56]	; (44b0 <lv_obj_get_state+0x54>)
    4478:	9300      	str	r3, [sp, #0]
    447a:	f640 22de 	movw	r2, #2782	; 0xade
    447e:	490d      	ldr	r1, [pc, #52]	; (44b4 <lv_obj_get_state+0x58>)
    4480:	2003      	movs	r0, #3
    4482:	4d0d      	ldr	r5, [pc, #52]	; (44b8 <lv_obj_get_state+0x5c>)
    4484:	47a8      	blx	r5
    4486:	4622      	mov	r2, r4
    4488:	2300      	movs	r3, #0
    448a:	480c      	ldr	r0, [pc, #48]	; (44bc <lv_obj_get_state+0x60>)
    448c:	490c      	ldr	r1, [pc, #48]	; (44c0 <lv_obj_get_state+0x64>)
    448e:	4788      	blx	r1
    4490:	e7fe      	b.n	4490 <lv_obj_get_state+0x34>
    info.part = part;
    4492:	f88d 500c 	strb.w	r5, [sp, #12]
    info.result = LV_STATE_DEFAULT;
    4496:	2300      	movs	r3, #0
    4498:	f88d 300d 	strb.w	r3, [sp, #13]
    lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STATE_DSC, &info);
    449c:	aa03      	add	r2, sp, #12
    449e:	2109      	movs	r1, #9
    44a0:	4620      	mov	r0, r4
    44a2:	4b08      	ldr	r3, [pc, #32]	; (44c4 <lv_obj_get_state+0x68>)
    44a4:	4798      	blx	r3
    return info.result;
    44a6:	f89d 000d 	ldrb.w	r0, [sp, #13]
    44aa:	e7e2      	b.n	4472 <lv_obj_get_state+0x16>
    44ac:	000022a5 	.word	0x000022a5
    44b0:	00024664 	.word	0x00024664
    44b4:	000247d0 	.word	0x000247d0
    44b8:	00012251 	.word	0x00012251
    44bc:	00024830 	.word	0x00024830
    44c0:	000022ad 	.word	0x000022ad
    44c4:	00002b69 	.word	0x00002b69

000044c8 <_lv_obj_get_style_int>:
{
    44c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    44cc:	b085      	sub	sp, #20
    44ce:	4617      	mov	r7, r2
    while(parent) {
    44d0:	b360      	cbz	r0, 452c <_lv_obj_get_style_int+0x64>
    44d2:	460d      	mov	r5, r1
    44d4:	ea4f 2b12 	mov.w	fp, r2, lsr #8
    44d8:	4606      	mov	r6, r0
        lv_style_list_t * dsc = lv_obj_get_style_list(parent, part);
    44da:	f8df a08c 	ldr.w	sl, [pc, #140]	; 4568 <_lv_obj_get_style_int+0xa0>
        lv_state_t state = lv_obj_get_state(parent, part);
    44de:	f8df 908c 	ldr.w	r9, [pc, #140]	; 456c <_lv_obj_get_style_int+0xa4>
        res = _lv_style_list_get_int(dsc, prop, &value_act);
    44e2:	f8df 808c 	ldr.w	r8, [pc, #140]	; 4570 <_lv_obj_get_style_int+0xa8>
    44e6:	e006      	b.n	44f6 <_lv_obj_get_style_int+0x2e>
        if(res == LV_RES_OK) return value_act;
    44e8:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
}
    44ec:	b005      	add	sp, #20
    44ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    44f2:	2500      	movs	r5, #0
    while(parent) {
    44f4:	b1de      	cbz	r6, 452e <_lv_obj_get_style_int+0x66>
        lv_style_list_t * dsc = lv_obj_get_style_list(parent, part);
    44f6:	4629      	mov	r1, r5
    44f8:	4630      	mov	r0, r6
    44fa:	47d0      	blx	sl
    44fc:	9001      	str	r0, [sp, #4]
        lv_state_t state = lv_obj_get_state(parent, part);
    44fe:	4629      	mov	r1, r5
    4500:	4630      	mov	r0, r6
    4502:	47c8      	blx	r9
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
    4504:	eb07 2000 	add.w	r0, r7, r0, lsl #8
    4508:	b284      	uxth	r4, r0
        res = _lv_style_list_get_int(dsc, prop, &value_act);
    450a:	f10d 020e 	add.w	r2, sp, #14
    450e:	4621      	mov	r1, r4
    4510:	9801      	ldr	r0, [sp, #4]
    4512:	47c0      	blx	r8
        if(res == LV_RES_OK) return value_act;
    4514:	2801      	cmp	r0, #1
    4516:	d0e7      	beq.n	44e8 <_lv_obj_get_style_int+0x20>
        if(attr.bits.inherit == 0) break;
    4518:	f01b 0f80 	tst.w	fp, #128	; 0x80
    451c:	d007      	beq.n	452e <_lv_obj_get_style_int+0x66>
        if(part != LV_OBJ_PART_MAIN) {
    451e:	2d00      	cmp	r5, #0
    4520:	d1e7      	bne.n	44f2 <_lv_obj_get_style_int+0x2a>
        parent = lv_obj_get_parent(parent);
    4522:	4630      	mov	r0, r6
    4524:	4b0f      	ldr	r3, [pc, #60]	; (4564 <_lv_obj_get_style_int+0x9c>)
    4526:	4798      	blx	r3
    4528:	4606      	mov	r6, r0
    452a:	e7e2      	b.n	44f2 <_lv_obj_get_style_int+0x2a>
    while(parent) {
    452c:	4614      	mov	r4, r2
    prop = prop & (~LV_STYLE_STATE_MASK);
    452e:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
    4532:	b2a4      	uxth	r4, r4
    4534:	2c22      	cmp	r4, #34	; 0x22
    4536:	d00f      	beq.n	4558 <_lv_obj_get_style_int+0x90>
    4538:	d806      	bhi.n	4548 <_lv_obj_get_style_int+0x80>
    453a:	2c03      	cmp	r4, #3
    453c:	d00a      	beq.n	4554 <_lv_obj_get_style_int+0x8c>
    453e:	2c07      	cmp	r4, #7
    4540:	d10c      	bne.n	455c <_lv_obj_get_style_int+0x94>
            return LV_IMG_ZOOM_NONE;
    4542:	f44f 7080 	mov.w	r0, #256	; 0x100
    4546:	e7d1      	b.n	44ec <_lv_obj_get_style_int+0x24>
    switch(prop) {
    4548:	2c31      	cmp	r4, #49	; 0x31
    454a:	d009      	beq.n	4560 <_lv_obj_get_style_int+0x98>
    454c:	2cc0      	cmp	r4, #192	; 0xc0
    454e:	d105      	bne.n	455c <_lv_obj_get_style_int+0x94>
            return LV_DPI / 8;
    4550:	2010      	movs	r0, #16
    4552:	e7cb      	b.n	44ec <_lv_obj_get_style_int+0x24>
            return LV_DPI / 20;
    4554:	2006      	movs	r0, #6
    4556:	e7c9      	b.n	44ec <_lv_obj_get_style_int+0x24>
            return 255;
    4558:	20ff      	movs	r0, #255	; 0xff
    455a:	e7c7      	b.n	44ec <_lv_obj_get_style_int+0x24>
    return 0;
    455c:	2000      	movs	r0, #0
    455e:	e7c5      	b.n	44ec <_lv_obj_get_style_int+0x24>
            return LV_BORDER_SIDE_FULL;
    4560:	200f      	movs	r0, #15
    4562:	e7c3      	b.n	44ec <_lv_obj_get_style_int+0x24>
    4564:	00002c71 	.word	0x00002c71
    4568:	00002ff1 	.word	0x00002ff1
    456c:	0000445d 	.word	0x0000445d
    4570:	000072d9 	.word	0x000072d9

00004574 <_lv_obj_get_style_color>:
{
    4574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4578:	b085      	sub	sp, #20
    457a:	4617      	mov	r7, r2
    while(parent) {
    457c:	b348      	cbz	r0, 45d2 <_lv_obj_get_style_color+0x5e>
    457e:	460d      	mov	r5, r1
    4580:	ea4f 2b12 	mov.w	fp, r2, lsr #8
    4584:	4606      	mov	r6, r0
        lv_style_list_t * dsc = lv_obj_get_style_list(parent, part);
    4586:	f8df a06c 	ldr.w	sl, [pc, #108]	; 45f4 <_lv_obj_get_style_color+0x80>
        lv_state_t state = lv_obj_get_state(parent, part);
    458a:	f8df 906c 	ldr.w	r9, [pc, #108]	; 45f8 <_lv_obj_get_style_color+0x84>
        res = _lv_style_list_get_color(dsc, prop, &value_act);
    458e:	f8df 806c 	ldr.w	r8, [pc, #108]	; 45fc <_lv_obj_get_style_color+0x88>
    4592:	e004      	b.n	459e <_lv_obj_get_style_color+0x2a>
        if(res == LV_RES_OK) return value_act;
    4594:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    4598:	e025      	b.n	45e6 <_lv_obj_get_style_color+0x72>
    459a:	2500      	movs	r5, #0
    while(parent) {
    459c:	b1d6      	cbz	r6, 45d4 <_lv_obj_get_style_color+0x60>
        lv_style_list_t * dsc = lv_obj_get_style_list(parent, part);
    459e:	4629      	mov	r1, r5
    45a0:	4630      	mov	r0, r6
    45a2:	47d0      	blx	sl
    45a4:	9001      	str	r0, [sp, #4]
        lv_state_t state = lv_obj_get_state(parent, part);
    45a6:	4629      	mov	r1, r5
    45a8:	4630      	mov	r0, r6
    45aa:	47c8      	blx	r9
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
    45ac:	eb07 2000 	add.w	r0, r7, r0, lsl #8
    45b0:	b284      	uxth	r4, r0
        res = _lv_style_list_get_color(dsc, prop, &value_act);
    45b2:	aa03      	add	r2, sp, #12
    45b4:	4621      	mov	r1, r4
    45b6:	9801      	ldr	r0, [sp, #4]
    45b8:	47c0      	blx	r8
        if(res == LV_RES_OK) return value_act;
    45ba:	2801      	cmp	r0, #1
    45bc:	d0ea      	beq.n	4594 <_lv_obj_get_style_color+0x20>
        if(attr.bits.inherit == 0) break;
    45be:	f01b 0f80 	tst.w	fp, #128	; 0x80
    45c2:	d007      	beq.n	45d4 <_lv_obj_get_style_color+0x60>
        if(part != LV_OBJ_PART_MAIN) {
    45c4:	2d00      	cmp	r5, #0
    45c6:	d1e8      	bne.n	459a <_lv_obj_get_style_color+0x26>
        parent = lv_obj_get_parent(parent);
    45c8:	4630      	mov	r0, r6
    45ca:	4b08      	ldr	r3, [pc, #32]	; (45ec <_lv_obj_get_style_color+0x78>)
    45cc:	4798      	blx	r3
    45ce:	4606      	mov	r6, r0
    45d0:	e7e3      	b.n	459a <_lv_obj_get_style_color+0x26>
    while(parent) {
    45d2:	4614      	mov	r4, r2
    prop = prop & (~LV_STYLE_STATE_MASK);
    45d4:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
    45d8:	3c29      	subs	r4, #41	; 0x29
    45da:	2c01      	cmp	r4, #1
            return LV_COLOR_WHITE;
    45dc:	bf9a      	itte	ls
    45de:	4b04      	ldrls	r3, [pc, #16]	; (45f0 <_lv_obj_get_style_color+0x7c>)
    45e0:	f8b3 0674 	ldrhls.w	r0, [r3, #1652]	; 0x674
    return LV_COLOR_BLACK;
    45e4:	2000      	movhi	r0, #0
}
    45e6:	b005      	add	sp, #20
    45e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    45ec:	00002c71 	.word	0x00002c71
    45f0:	0002404c 	.word	0x0002404c
    45f4:	00002ff1 	.word	0x00002ff1
    45f8:	0000445d 	.word	0x0000445d
    45fc:	0000739d 	.word	0x0000739d

00004600 <_lv_obj_get_style_opa>:
{
    4600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4604:	b085      	sub	sp, #20
    4606:	4617      	mov	r7, r2
    while(parent) {
    4608:	b350      	cbz	r0, 4660 <_lv_obj_get_style_opa+0x60>
    460a:	460d      	mov	r5, r1
    460c:	ea4f 2b12 	mov.w	fp, r2, lsr #8
    4610:	4606      	mov	r6, r0
        lv_style_list_t * dsc = lv_obj_get_style_list(parent, part);
    4612:	f8df a074 	ldr.w	sl, [pc, #116]	; 4688 <_lv_obj_get_style_opa+0x88>
        lv_state_t state = lv_obj_get_state(parent, part);
    4616:	f8df 9074 	ldr.w	r9, [pc, #116]	; 468c <_lv_obj_get_style_opa+0x8c>
        res = _lv_style_list_get_opa(dsc, prop, &value_act);
    461a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 4690 <_lv_obj_get_style_opa+0x90>
    461e:	e004      	b.n	462a <_lv_obj_get_style_opa+0x2a>
        if(res == LV_RES_OK) return value_act;
    4620:	f89d 000f 	ldrb.w	r0, [sp, #15]
    4624:	e029      	b.n	467a <_lv_obj_get_style_opa+0x7a>
    4626:	2500      	movs	r5, #0
    while(parent) {
    4628:	b1de      	cbz	r6, 4662 <_lv_obj_get_style_opa+0x62>
        lv_style_list_t * dsc = lv_obj_get_style_list(parent, part);
    462a:	4629      	mov	r1, r5
    462c:	4630      	mov	r0, r6
    462e:	47d0      	blx	sl
    4630:	9001      	str	r0, [sp, #4]
        lv_state_t state = lv_obj_get_state(parent, part);
    4632:	4629      	mov	r1, r5
    4634:	4630      	mov	r0, r6
    4636:	47c8      	blx	r9
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
    4638:	eb07 2000 	add.w	r0, r7, r0, lsl #8
    463c:	b284      	uxth	r4, r0
        res = _lv_style_list_get_opa(dsc, prop, &value_act);
    463e:	f10d 020f 	add.w	r2, sp, #15
    4642:	4621      	mov	r1, r4
    4644:	9801      	ldr	r0, [sp, #4]
    4646:	47c0      	blx	r8
        if(res == LV_RES_OK) return value_act;
    4648:	2801      	cmp	r0, #1
    464a:	d0e9      	beq.n	4620 <_lv_obj_get_style_opa+0x20>
        if(attr.bits.inherit == 0) break;
    464c:	f01b 0f80 	tst.w	fp, #128	; 0x80
    4650:	d007      	beq.n	4662 <_lv_obj_get_style_opa+0x62>
        if(part != LV_OBJ_PART_MAIN) {
    4652:	2d00      	cmp	r5, #0
    4654:	d1e7      	bne.n	4626 <_lv_obj_get_style_opa+0x26>
        parent = lv_obj_get_parent(parent);
    4656:	4630      	mov	r0, r6
    4658:	4b0a      	ldr	r3, [pc, #40]	; (4684 <_lv_obj_get_style_opa+0x84>)
    465a:	4798      	blx	r3
    465c:	4606      	mov	r6, r0
    465e:	e7e2      	b.n	4626 <_lv_obj_get_style_opa+0x26>
    while(parent) {
    4660:	4614      	mov	r4, r2
    prop = prop & (~LV_STYLE_STATE_MASK);
    4662:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
    4666:	b2a4      	uxth	r4, r4
    4668:	2c6d      	cmp	r4, #109	; 0x6d
    466a:	d009      	beq.n	4680 <_lv_obj_get_style_opa+0x80>
    466c:	f248 03ad 	movw	r3, #32941	; 0x80ad
    4670:	429c      	cmp	r4, r3
    4672:	d005      	beq.n	4680 <_lv_obj_get_style_opa+0x80>
    4674:	2c2c      	cmp	r4, #44	; 0x2c
    4676:	d003      	beq.n	4680 <_lv_obj_get_style_opa+0x80>
    return LV_OPA_COVER;
    4678:	20ff      	movs	r0, #255	; 0xff
}
    467a:	b005      	add	sp, #20
    467c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LV_OPA_TRANSP;
    4680:	2000      	movs	r0, #0
    4682:	e7fa      	b.n	467a <_lv_obj_get_style_opa+0x7a>
    4684:	00002c71 	.word	0x00002c71
    4688:	00002ff1 	.word	0x00002ff1
    468c:	0000445d 	.word	0x0000445d
    4690:	00007461 	.word	0x00007461

00004694 <_lv_obj_get_style_ptr>:
{
    4694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4698:	b085      	sub	sp, #20
    469a:	4617      	mov	r7, r2
    while(parent) {
    469c:	b350      	cbz	r0, 46f4 <_lv_obj_get_style_ptr+0x60>
    469e:	460d      	mov	r5, r1
    46a0:	ea4f 2b12 	mov.w	fp, r2, lsr #8
    46a4:	4606      	mov	r6, r0
        lv_style_list_t * dsc = lv_obj_get_style_list(parent, part);
    46a6:	f8df a080 	ldr.w	sl, [pc, #128]	; 4728 <_lv_obj_get_style_ptr+0x94>
        lv_state_t state = lv_obj_get_state(parent, part);
    46aa:	f8df 9080 	ldr.w	r9, [pc, #128]	; 472c <_lv_obj_get_style_ptr+0x98>
        res = _lv_style_list_get_ptr(dsc, prop, &value_act);
    46ae:	f8df 8080 	ldr.w	r8, [pc, #128]	; 4730 <_lv_obj_get_style_ptr+0x9c>
    46b2:	e005      	b.n	46c0 <_lv_obj_get_style_ptr+0x2c>
        if(res == LV_RES_OK)  return value_act;
    46b4:	9803      	ldr	r0, [sp, #12]
}
    46b6:	b005      	add	sp, #20
    46b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    46bc:	2500      	movs	r5, #0
    while(parent) {
    46be:	b1d6      	cbz	r6, 46f6 <_lv_obj_get_style_ptr+0x62>
        lv_style_list_t * dsc = lv_obj_get_style_list(parent, part);
    46c0:	4629      	mov	r1, r5
    46c2:	4630      	mov	r0, r6
    46c4:	47d0      	blx	sl
    46c6:	9001      	str	r0, [sp, #4]
        lv_state_t state = lv_obj_get_state(parent, part);
    46c8:	4629      	mov	r1, r5
    46ca:	4630      	mov	r0, r6
    46cc:	47c8      	blx	r9
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
    46ce:	eb07 2000 	add.w	r0, r7, r0, lsl #8
    46d2:	b284      	uxth	r4, r0
        res = _lv_style_list_get_ptr(dsc, prop, &value_act);
    46d4:	aa03      	add	r2, sp, #12
    46d6:	4621      	mov	r1, r4
    46d8:	9801      	ldr	r0, [sp, #4]
    46da:	47c0      	blx	r8
        if(res == LV_RES_OK)  return value_act;
    46dc:	2801      	cmp	r0, #1
    46de:	d0e9      	beq.n	46b4 <_lv_obj_get_style_ptr+0x20>
        if(attr.bits.inherit == 0) break;
    46e0:	f01b 0f80 	tst.w	fp, #128	; 0x80
    46e4:	d007      	beq.n	46f6 <_lv_obj_get_style_ptr+0x62>
        if(part != LV_OBJ_PART_MAIN) {
    46e6:	2d00      	cmp	r5, #0
    46e8:	d1e8      	bne.n	46bc <_lv_obj_get_style_ptr+0x28>
        parent = lv_obj_get_parent(parent);
    46ea:	4630      	mov	r0, r6
    46ec:	4b0b      	ldr	r3, [pc, #44]	; (471c <_lv_obj_get_style_ptr+0x88>)
    46ee:	4798      	blx	r3
    46f0:	4606      	mov	r6, r0
    46f2:	e7e3      	b.n	46bc <_lv_obj_get_style_ptr+0x28>
    while(parent) {
    46f4:	4614      	mov	r4, r2
    prop = prop & (~LV_STYLE_STATE_MASK);
    46f6:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
    46fa:	b2a4      	uxth	r4, r4
    46fc:	2cbe      	cmp	r4, #190	; 0xbe
    46fe:	d00a      	beq.n	4716 <_lv_obj_get_style_ptr+0x82>
    4700:	f248 038e 	movw	r3, #32910	; 0x808e
    4704:	429c      	cmp	r4, r3
    4706:	d003      	beq.n	4710 <_lv_obj_get_style_ptr+0x7c>
    4708:	2c7e      	cmp	r4, #126	; 0x7e
    470a:	d001      	beq.n	4710 <_lv_obj_get_style_ptr+0x7c>
    return NULL;
    470c:	2000      	movs	r0, #0
    470e:	e7d2      	b.n	46b6 <_lv_obj_get_style_ptr+0x22>
            return lv_theme_get_font_normal();
    4710:	4b03      	ldr	r3, [pc, #12]	; (4720 <_lv_obj_get_style_ptr+0x8c>)
    4712:	4798      	blx	r3
    4714:	e7cf      	b.n	46b6 <_lv_obj_get_style_ptr+0x22>
            return &lv_anim_path_def;
    4716:	4803      	ldr	r0, [pc, #12]	; (4724 <_lv_obj_get_style_ptr+0x90>)
    4718:	e7cd      	b.n	46b6 <_lv_obj_get_style_ptr+0x22>
    471a:	bf00      	nop
    471c:	00002c71 	.word	0x00002c71
    4720:	000141d1 	.word	0x000141d1
    4724:	000291f4 	.word	0x000291f4
    4728:	00002ff1 	.word	0x00002ff1
    472c:	0000445d 	.word	0x0000445d
    4730:	00007525 	.word	0x00007525

00004734 <trans_anim_start_cb>:
{
    4734:	b570      	push	{r4, r5, r6, lr}
    lv_style_trans_t * tr = a->var;
    4736:	6804      	ldr	r4, [r0, #0]
    lv_style_property_t prop_tmp = tr->prop;
    4738:	88a5      	ldrh	r5, [r4, #4]
    if((prop_tmp & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
    473a:	f005 030f 	and.w	r3, r5, #15
    473e:	2b08      	cmp	r3, #8
    4740:	dd13      	ble.n	476a <trans_anim_start_cb+0x36>
    else if((prop_tmp & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
    4742:	2b0b      	cmp	r3, #11
    4744:	dd18      	ble.n	4778 <trans_anim_start_cb+0x44>
    else if((prop_tmp & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
    4746:	2b0d      	cmp	r3, #13
    4748:	dd1d      	ble.n	4786 <trans_anim_start_cb+0x52>
        tr->start_value._ptr = _lv_obj_get_style_ptr(tr->obj, tr->part, prop_tmp);
    474a:	462a      	mov	r2, r5
    474c:	79a1      	ldrb	r1, [r4, #6]
    474e:	6820      	ldr	r0, [r4, #0]
    4750:	4b10      	ldr	r3, [pc, #64]	; (4794 <trans_anim_start_cb+0x60>)
    4752:	4798      	blx	r3
    4754:	60a0      	str	r0, [r4, #8]
    tr->prop = 0;
    4756:	2300      	movs	r3, #0
    4758:	80a3      	strh	r3, [r4, #4]
    trans_del(tr->obj, tr->part, prop_tmp, tr);
    475a:	4623      	mov	r3, r4
    475c:	462a      	mov	r2, r5
    475e:	79a1      	ldrb	r1, [r4, #6]
    4760:	6820      	ldr	r0, [r4, #0]
    4762:	4e0d      	ldr	r6, [pc, #52]	; (4798 <trans_anim_start_cb+0x64>)
    4764:	47b0      	blx	r6
    tr->prop = prop_tmp;
    4766:	80a5      	strh	r5, [r4, #4]
    4768:	bd70      	pop	{r4, r5, r6, pc}
        tr->start_value._int = _lv_obj_get_style_int(tr->obj, tr->part, prop_tmp);
    476a:	462a      	mov	r2, r5
    476c:	79a1      	ldrb	r1, [r4, #6]
    476e:	6820      	ldr	r0, [r4, #0]
    4770:	4b0a      	ldr	r3, [pc, #40]	; (479c <trans_anim_start_cb+0x68>)
    4772:	4798      	blx	r3
    4774:	8120      	strh	r0, [r4, #8]
    4776:	e7ee      	b.n	4756 <trans_anim_start_cb+0x22>
        tr->start_value._color = _lv_obj_get_style_color(tr->obj, tr->part, prop_tmp);
    4778:	462a      	mov	r2, r5
    477a:	79a1      	ldrb	r1, [r4, #6]
    477c:	6820      	ldr	r0, [r4, #0]
    477e:	4b08      	ldr	r3, [pc, #32]	; (47a0 <trans_anim_start_cb+0x6c>)
    4780:	4798      	blx	r3
    4782:	8120      	strh	r0, [r4, #8]
    4784:	e7e7      	b.n	4756 <trans_anim_start_cb+0x22>
        tr->start_value._opa = _lv_obj_get_style_opa(tr->obj, tr->part, prop_tmp);
    4786:	462a      	mov	r2, r5
    4788:	79a1      	ldrb	r1, [r4, #6]
    478a:	6820      	ldr	r0, [r4, #0]
    478c:	4b05      	ldr	r3, [pc, #20]	; (47a4 <trans_anim_start_cb+0x70>)
    478e:	4798      	blx	r3
    4790:	7220      	strb	r0, [r4, #8]
    4792:	e7e0      	b.n	4756 <trans_anim_start_cb+0x22>
    4794:	00004695 	.word	0x00004695
    4798:	0000301d 	.word	0x0000301d
    479c:	000044c9 	.word	0x000044c9
    47a0:	00004575 	.word	0x00004575
    47a4:	00004601 	.word	0x00004601

000047a8 <lv_obj_set_state>:
    if(obj->state == new_state) return;
    47a8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    47ac:	428b      	cmp	r3, r1
    47ae:	f000 8252 	beq.w	4c56 <lv_obj_set_state+0x4ae>
{
    47b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    47b6:	b0a1      	sub	sp, #132	; 0x84
    47b8:	4689      	mov	r9, r1
    47ba:	4682      	mov	sl, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    47bc:	4bab      	ldr	r3, [pc, #684]	; (4a6c <lv_obj_set_state+0x2c4>)
    47be:	4798      	blx	r3
    47c0:	b140      	cbz	r0, 47d4 <lv_obj_set_state+0x2c>
    lv_state_t prev_state = obj->state;
    47c2:	f89a b03d 	ldrb.w	fp, [sl, #61]	; 0x3d
    obj->state = new_state;
    47c6:	f88a 903d 	strb.w	r9, [sl, #61]	; 0x3d
    47ca:	2300      	movs	r3, #0
    47cc:	9306      	str	r3, [sp, #24]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
    47ce:	4da8      	ldr	r5, [pc, #672]	; (4a70 <lv_obj_set_state+0x2c8>)
    lv_style_t * style_trans = _lv_style_list_get_transition_style(style_list);
    47d0:	46d8      	mov	r8, fp
    47d2:	e1d2      	b.n	4b7a <lv_obj_set_state+0x3d2>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    47d4:	4ba7      	ldr	r3, [pc, #668]	; (4a74 <lv_obj_set_state+0x2cc>)
    47d6:	9300      	str	r3, [sp, #0]
    47d8:	f240 6237 	movw	r2, #1591	; 0x637
    47dc:	49a6      	ldr	r1, [pc, #664]	; (4a78 <lv_obj_set_state+0x2d0>)
    47de:	2003      	movs	r0, #3
    47e0:	4ca6      	ldr	r4, [pc, #664]	; (4a7c <lv_obj_set_state+0x2d4>)
    47e2:	47a0      	blx	r4
    47e4:	4652      	mov	r2, sl
    47e6:	2300      	movs	r3, #0
    47e8:	48a5      	ldr	r0, [pc, #660]	; (4a80 <lv_obj_set_state+0x2d8>)
    47ea:	49a6      	ldr	r1, [pc, #664]	; (4a84 <lv_obj_set_state+0x2dc>)
    47ec:	4788      	blx	r1
    47ee:	e7fe      	b.n	47ee <lv_obj_set_state+0x46>
        style_list->skip_trans = 1;
    47f0:	7973      	ldrb	r3, [r6, #5]
    47f2:	f043 0304 	orr.w	r3, r3, #4
    47f6:	7173      	strb	r3, [r6, #5]
        obj->state = prev_state;
    47f8:	f88a 803d 	strb.w	r8, [sl, #61]	; 0x3d
        lv_style_int_t int1 = _lv_obj_get_style_int(obj, part, prop);
    47fc:	4622      	mov	r2, r4
    47fe:	f8dd b00c 	ldr.w	fp, [sp, #12]
    4802:	4659      	mov	r1, fp
    4804:	4650      	mov	r0, sl
    4806:	47a8      	blx	r5
    4808:	4607      	mov	r7, r0
        obj->state = new_state;
    480a:	f88a 903d 	strb.w	r9, [sl, #61]	; 0x3d
        lv_style_int_t int2 =  _lv_obj_get_style_int(obj, part, prop);
    480e:	4622      	mov	r2, r4
    4810:	f8cd b00c 	str.w	fp, [sp, #12]
    4814:	4659      	mov	r1, fp
    4816:	4650      	mov	r0, sl
    4818:	47a8      	blx	r5
    481a:	4683      	mov	fp, r0
        style_list->skip_trans = 0;
    481c:	7973      	ldrb	r3, [r6, #5]
    481e:	f36f 0382 	bfc	r3, #2, #1
    4822:	7173      	strb	r3, [r6, #5]
        if(int1 == int2)  return NULL;
    4824:	4287      	cmp	r7, r0
    4826:	d04a      	beq.n	48be <lv_obj_set_state+0x116>
        obj->state = prev_state;
    4828:	f88a 803d 	strb.w	r8, [sl, #61]	; 0x3d
        int1 = _lv_obj_get_style_int(obj, part, prop);
    482c:	4622      	mov	r2, r4
    482e:	9903      	ldr	r1, [sp, #12]
    4830:	4650      	mov	r0, sl
    4832:	47a8      	blx	r5
    4834:	4606      	mov	r6, r0
        obj->state = new_state;
    4836:	f88a 903d 	strb.w	r9, [sl, #61]	; 0x3d
        _lv_style_set_int(style_trans, prop, int1);   /*Be sure `trans_style` has a valid value */
    483a:	4602      	mov	r2, r0
    483c:	4621      	mov	r1, r4
    483e:	9804      	ldr	r0, [sp, #16]
    4840:	4b91      	ldr	r3, [pc, #580]	; (4a88 <lv_obj_set_state+0x2e0>)
    4842:	4798      	blx	r3
        if(prop == LV_STYLE_RADIUS) {
    4844:	2c01      	cmp	r4, #1
    4846:	f000 8094 	beq.w	4972 <lv_obj_set_state+0x1ca>
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
    484a:	4890      	ldr	r0, [pc, #576]	; (4a8c <lv_obj_set_state+0x2e4>)
    484c:	4b90      	ldr	r3, [pc, #576]	; (4a90 <lv_obj_set_state+0x2e8>)
    484e:	4798      	blx	r3
    4850:	4607      	mov	r7, r0
        LV_ASSERT_MEM(tr);
    4852:	4b86      	ldr	r3, [pc, #536]	; (4a6c <lv_obj_set_state+0x2c4>)
    4854:	4798      	blx	r3
    4856:	2800      	cmp	r0, #0
    4858:	f000 80a2 	beq.w	49a0 <lv_obj_set_state+0x1f8>
        if(tr == NULL) return NULL;
    485c:	2f00      	cmp	r7, #0
    485e:	d02e      	beq.n	48be <lv_obj_set_state+0x116>
        tr->start_value._int = int1;
    4860:	813e      	strh	r6, [r7, #8]
        tr->end_value._int = int2;
    4862:	f8a7 b00c 	strh.w	fp, [r7, #12]
                    tr->obj = obj;
    4866:	f8c7 a000 	str.w	sl, [r7]
                    tr->prop = props[i];
    486a:	80bc      	strh	r4, [r7, #4]
                    tr->part = part;
    486c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    4870:	71bb      	strb	r3, [r7, #6]
                    lv_anim_init(&a);
    4872:	a810      	add	r0, sp, #64	; 0x40
    4874:	4b87      	ldr	r3, [pc, #540]	; (4a94 <lv_obj_set_state+0x2ec>)
    4876:	4798      	blx	r3
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param var pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
    a->var     = var;
    4878:	9710      	str	r7, [sp, #64]	; 0x40
 *                LittelvGL's built-in functions can be used.
 *                E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
    a->exec_cb = exec_cb;
    487a:	4b87      	ldr	r3, [pc, #540]	; (4a98 <lv_obj_set_state+0x2f0>)
    487c:	9311      	str	r3, [sp, #68]	; 0x44
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param start_cb a function call when the animation starts
 */
static inline void lv_anim_set_start_cb(lv_anim_t * a, lv_anim_ready_cb_t start_cb)
{
    a->start_cb = start_cb;
    487e:	4b87      	ldr	r3, [pc, #540]	; (4a9c <lv_obj_set_state+0x2f4>)
    4880:	9312      	str	r3, [sp, #72]	; 0x48
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param ready_cb a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
    4882:	4b87      	ldr	r3, [pc, #540]	; (4aa0 <lv_obj_set_state+0x2f8>)
    4884:	9313      	str	r3, [sp, #76]	; 0x4c
    a->start = start;
    4886:	2300      	movs	r3, #0
    4888:	9316      	str	r3, [sp, #88]	; 0x58
    a->end   = end;
    488a:	23ff      	movs	r3, #255	; 0xff
    488c:	9317      	str	r3, [sp, #92]	; 0x5c
    a->time     = duration;
    488e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4890:	9318      	str	r3, [sp, #96]	; 0x60
    a->act_time = (int32_t)(-delay);
    4892:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4894:	425b      	negs	r3, r3
    4896:	9319      	str	r3, [sp, #100]	; 0x64
    4898:	9a08      	ldr	r2, [sp, #32]
    489a:	1e53      	subs	r3, r2, #1
    489c:	1dd0      	adds	r0, r2, #7
    uint8_t * d8 = (uint8_t *)dst;
    489e:	aa14      	add	r2, sp, #80	; 0x50
        *d8 = *s8;
    48a0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    48a4:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    48a8:	4283      	cmp	r3, r0
    48aa:	d1f9      	bne.n	48a0 <lv_obj_set_state+0xf8>
                    a.early_apply = 0;
    48ac:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
    48b0:	f36f 0300 	bfc	r3, #0, #1
    48b4:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
                    lv_anim_start(&a);
    48b8:	a810      	add	r0, sp, #64	; 0x40
    48ba:	4b7a      	ldr	r3, [pc, #488]	; (4aa4 <lv_obj_set_state+0x2fc>)
    48bc:	4798      	blx	r3
        for(i = 0; i < LV_STYLE_TRANS_NUM_MAX; i++) {
    48be:	9b05      	ldr	r3, [sp, #20]
    48c0:	aa10      	add	r2, sp, #64	; 0x40
    48c2:	4293      	cmp	r3, r2
    48c4:	f000 8154 	beq.w	4b70 <lv_obj_set_state+0x3c8>
            if(props[i] != 0) {
    48c8:	9b05      	ldr	r3, [sp, #20]
    48ca:	f833 4b02 	ldrh.w	r4, [r3], #2
    48ce:	9305      	str	r3, [sp, #20]
    48d0:	2c00      	cmp	r4, #0
    48d2:	d0f4      	beq.n	48be <lv_obj_set_state+0x116>
                _lv_style_list_add_trans_style(style_list);
    48d4:	9807      	ldr	r0, [sp, #28]
    48d6:	4b74      	ldr	r3, [pc, #464]	; (4aa8 <lv_obj_set_state+0x300>)
    48d8:	4798      	blx	r3
    lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
    48da:	9903      	ldr	r1, [sp, #12]
    48dc:	4650      	mov	r0, sl
    48de:	4b73      	ldr	r3, [pc, #460]	; (4aac <lv_obj_set_state+0x304>)
    48e0:	4798      	blx	r3
    48e2:	4606      	mov	r6, r0
    lv_style_t * style_trans = _lv_style_list_get_transition_style(style_list);
    48e4:	4b72      	ldr	r3, [pc, #456]	; (4ab0 <lv_obj_set_state+0x308>)
    48e6:	4798      	blx	r3
    48e8:	9004      	str	r0, [sp, #16]
    if((prop & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
    48ea:	f004 030f 	and.w	r3, r4, #15
    48ee:	2b08      	cmp	r3, #8
    48f0:	f77f af7e 	ble.w	47f0 <lv_obj_set_state+0x48>
    else if((prop & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
    48f4:	2b0b      	cmp	r3, #11
    48f6:	dd61      	ble.n	49bc <lv_obj_set_state+0x214>
    else if((prop & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
    48f8:	2b0d      	cmp	r3, #13
    48fa:	f300 80e9 	bgt.w	4ad0 <lv_obj_set_state+0x328>
        style_list->skip_trans = 1;
    48fe:	7973      	ldrb	r3, [r6, #5]
    4900:	f043 0304 	orr.w	r3, r3, #4
    4904:	7173      	strb	r3, [r6, #5]
        obj->state = prev_state;
    4906:	f88a 803d 	strb.w	r8, [sl, #61]	; 0x3d
        lv_opa_t o1 = _lv_obj_get_style_opa(obj, part, prop);
    490a:	4622      	mov	r2, r4
    490c:	f8dd b00c 	ldr.w	fp, [sp, #12]
    4910:	4659      	mov	r1, fp
    4912:	4650      	mov	r0, sl
    4914:	4f67      	ldr	r7, [pc, #412]	; (4ab4 <lv_obj_set_state+0x30c>)
    4916:	47b8      	blx	r7
    4918:	900b      	str	r0, [sp, #44]	; 0x2c
        obj->state = new_state;
    491a:	f88a 903d 	strb.w	r9, [sl, #61]	; 0x3d
        lv_opa_t o2 =  _lv_obj_get_style_opa(obj, part, prop);
    491e:	4622      	mov	r2, r4
    4920:	f8cd b00c 	str.w	fp, [sp, #12]
    4924:	4659      	mov	r1, fp
    4926:	4650      	mov	r0, sl
    4928:	47b8      	blx	r7
    492a:	4683      	mov	fp, r0
        style_list->skip_trans = 0;
    492c:	7973      	ldrb	r3, [r6, #5]
    492e:	f36f 0382 	bfc	r3, #2, #1
    4932:	7173      	strb	r3, [r6, #5]
        if(o1 == o2) return NULL;
    4934:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4936:	4283      	cmp	r3, r0
    4938:	d0c1      	beq.n	48be <lv_obj_set_state+0x116>
        obj->state = prev_state;
    493a:	f88a 803d 	strb.w	r8, [sl, #61]	; 0x3d
        o1 = _lv_obj_get_style_opa(obj, part, prop);
    493e:	4622      	mov	r2, r4
    4940:	9903      	ldr	r1, [sp, #12]
    4942:	4650      	mov	r0, sl
    4944:	47b8      	blx	r7
    4946:	4606      	mov	r6, r0
        obj->state = new_state;
    4948:	f88a 903d 	strb.w	r9, [sl, #61]	; 0x3d
        _lv_style_set_opa(style_trans, prop, o1);   /*Be sure `trans_style` has a valid value */
    494c:	4602      	mov	r2, r0
    494e:	4621      	mov	r1, r4
    4950:	9804      	ldr	r0, [sp, #16]
    4952:	4b59      	ldr	r3, [pc, #356]	; (4ab8 <lv_obj_set_state+0x310>)
    4954:	4798      	blx	r3
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
    4956:	484d      	ldr	r0, [pc, #308]	; (4a8c <lv_obj_set_state+0x2e4>)
    4958:	4b4d      	ldr	r3, [pc, #308]	; (4a90 <lv_obj_set_state+0x2e8>)
    495a:	4798      	blx	r3
    495c:	4607      	mov	r7, r0
        LV_ASSERT_MEM(tr);
    495e:	4b43      	ldr	r3, [pc, #268]	; (4a6c <lv_obj_set_state+0x2c4>)
    4960:	4798      	blx	r3
    4962:	2800      	cmp	r0, #0
    4964:	d074      	beq.n	4a50 <lv_obj_set_state+0x2a8>
        if(tr == NULL) return NULL;
    4966:	2f00      	cmp	r7, #0
    4968:	d0a9      	beq.n	48be <lv_obj_set_state+0x116>
        tr->start_value._opa = o1;
    496a:	723e      	strb	r6, [r7, #8]
        tr->end_value._opa = o2;
    496c:	f887 b00c 	strb.w	fp, [r7, #12]
    4970:	e779      	b.n	4866 <lv_obj_set_state+0xbe>
            if(int1 == LV_RADIUS_CIRCLE || int2 == LV_RADIUS_CIRCLE) {
    4972:	f647 73ff 	movw	r3, #32767	; 0x7fff
    4976:	429e      	cmp	r6, r3
    4978:	f000 814c 	beq.w	4c14 <lv_obj_set_state+0x46c>
    497c:	459b      	cmp	fp, r3
    497e:	f47f af64 	bne.w	484a <lv_obj_set_state+0xa2>
                lv_coord_t whalf = lv_obj_get_width(obj) / 2;
    4982:	4650      	mov	r0, sl
    4984:	f8df b144 	ldr.w	fp, [pc, #324]	; 4acc <lv_obj_set_state+0x324>
    4988:	47d8      	blx	fp
    498a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    498e:	f340 074f 	sbfx	r7, r0, #1, #16
                lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
    4992:	4650      	mov	r0, sl
    4994:	47d8      	blx	fp
    4996:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    499a:	f340 034f 	sbfx	r3, r0, #1, #16
    499e:	e151      	b.n	4c44 <lv_obj_set_state+0x49c>
        LV_ASSERT_MEM(tr);
    49a0:	4b46      	ldr	r3, [pc, #280]	; (4abc <lv_obj_set_state+0x314>)
    49a2:	9300      	str	r3, [sp, #0]
    49a4:	f640 62b2 	movw	r2, #3762	; 0xeb2
    49a8:	4933      	ldr	r1, [pc, #204]	; (4a78 <lv_obj_set_state+0x2d0>)
    49aa:	2003      	movs	r0, #3
    49ac:	4c33      	ldr	r4, [pc, #204]	; (4a7c <lv_obj_set_state+0x2d4>)
    49ae:	47a0      	blx	r4
    49b0:	463a      	mov	r2, r7
    49b2:	2300      	movs	r3, #0
    49b4:	4842      	ldr	r0, [pc, #264]	; (4ac0 <lv_obj_set_state+0x318>)
    49b6:	4933      	ldr	r1, [pc, #204]	; (4a84 <lv_obj_set_state+0x2dc>)
    49b8:	4788      	blx	r1
    49ba:	e7fe      	b.n	49ba <lv_obj_set_state+0x212>
        style_list->skip_trans = 1;
    49bc:	7973      	ldrb	r3, [r6, #5]
    49be:	f043 0304 	orr.w	r3, r3, #4
    49c2:	7173      	strb	r3, [r6, #5]
        obj->state = prev_state;
    49c4:	f88a 803d 	strb.w	r8, [sl, #61]	; 0x3d
        lv_color_t c1 = _lv_obj_get_style_color(obj, part, prop);
    49c8:	4622      	mov	r2, r4
    49ca:	9903      	ldr	r1, [sp, #12]
    49cc:	4650      	mov	r0, sl
    49ce:	4f3d      	ldr	r7, [pc, #244]	; (4ac4 <lv_obj_set_state+0x31c>)
    49d0:	47b8      	blx	r7
    49d2:	4683      	mov	fp, r0
        obj->state = new_state;
    49d4:	f88a 903d 	strb.w	r9, [sl, #61]	; 0x3d
        lv_color_t c2 =  _lv_obj_get_style_color(obj, part, prop);
    49d8:	4622      	mov	r2, r4
    49da:	9903      	ldr	r1, [sp, #12]
    49dc:	4650      	mov	r0, sl
    49de:	47b8      	blx	r7
    49e0:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
        style_list->skip_trans = 0;
    49e4:	7973      	ldrb	r3, [r6, #5]
    49e6:	f36f 0382 	bfc	r3, #2, #1
    49ea:	7173      	strb	r3, [r6, #5]
        if(c1.full == c2.full) return NULL;
    49ec:	fa1f fb8b 	uxth.w	fp, fp
    49f0:	b283      	uxth	r3, r0
    49f2:	459b      	cmp	fp, r3
    49f4:	f43f af63 	beq.w	48be <lv_obj_set_state+0x116>
        obj->state = prev_state;
    49f8:	f88a 803d 	strb.w	r8, [sl, #61]	; 0x3d
        c1 = _lv_obj_get_style_color(obj, part, prop);
    49fc:	4622      	mov	r2, r4
    49fe:	9903      	ldr	r1, [sp, #12]
    4a00:	4650      	mov	r0, sl
    4a02:	47b8      	blx	r7
    4a04:	4683      	mov	fp, r0
        obj->state = new_state;
    4a06:	f88a 903d 	strb.w	r9, [sl, #61]	; 0x3d
        _lv_style_set_color(style_trans, prop, c1);    /*Be sure `trans_style` has a valid value */
    4a0a:	4602      	mov	r2, r0
    4a0c:	4621      	mov	r1, r4
    4a0e:	9804      	ldr	r0, [sp, #16]
    4a10:	4b2d      	ldr	r3, [pc, #180]	; (4ac8 <lv_obj_set_state+0x320>)
    4a12:	4798      	blx	r3
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
    4a14:	481d      	ldr	r0, [pc, #116]	; (4a8c <lv_obj_set_state+0x2e4>)
    4a16:	4b1e      	ldr	r3, [pc, #120]	; (4a90 <lv_obj_set_state+0x2e8>)
    4a18:	4798      	blx	r3
    4a1a:	4607      	mov	r7, r0
        LV_ASSERT_MEM(tr);
    4a1c:	4b13      	ldr	r3, [pc, #76]	; (4a6c <lv_obj_set_state+0x2c4>)
    4a1e:	4798      	blx	r3
    4a20:	b140      	cbz	r0, 4a34 <lv_obj_set_state+0x28c>
        if(tr == NULL) return NULL;
    4a22:	2f00      	cmp	r7, #0
    4a24:	f43f af4b 	beq.w	48be <lv_obj_set_state+0x116>
        tr->start_value._color = c1;
    4a28:	f8a7 b008 	strh.w	fp, [r7, #8]
        tr->end_value._color = c2;
    4a2c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    4a30:	81bb      	strh	r3, [r7, #12]
    4a32:	e718      	b.n	4866 <lv_obj_set_state+0xbe>
        LV_ASSERT_MEM(tr);
    4a34:	4b21      	ldr	r3, [pc, #132]	; (4abc <lv_obj_set_state+0x314>)
    4a36:	9300      	str	r3, [sp, #0]
    4a38:	f640 62c6 	movw	r2, #3782	; 0xec6
    4a3c:	490e      	ldr	r1, [pc, #56]	; (4a78 <lv_obj_set_state+0x2d0>)
    4a3e:	2003      	movs	r0, #3
    4a40:	4c0e      	ldr	r4, [pc, #56]	; (4a7c <lv_obj_set_state+0x2d4>)
    4a42:	47a0      	blx	r4
    4a44:	463a      	mov	r2, r7
    4a46:	2300      	movs	r3, #0
    4a48:	481d      	ldr	r0, [pc, #116]	; (4ac0 <lv_obj_set_state+0x318>)
    4a4a:	490e      	ldr	r1, [pc, #56]	; (4a84 <lv_obj_set_state+0x2dc>)
    4a4c:	4788      	blx	r1
    4a4e:	e7fe      	b.n	4a4e <lv_obj_set_state+0x2a6>
        LV_ASSERT_MEM(tr);
    4a50:	4b1a      	ldr	r3, [pc, #104]	; (4abc <lv_obj_set_state+0x314>)
    4a52:	9300      	str	r3, [sp, #0]
    4a54:	f640 62db 	movw	r2, #3803	; 0xedb
    4a58:	4907      	ldr	r1, [pc, #28]	; (4a78 <lv_obj_set_state+0x2d0>)
    4a5a:	2003      	movs	r0, #3
    4a5c:	4c07      	ldr	r4, [pc, #28]	; (4a7c <lv_obj_set_state+0x2d4>)
    4a5e:	47a0      	blx	r4
    4a60:	463a      	mov	r2, r7
    4a62:	2300      	movs	r3, #0
    4a64:	4816      	ldr	r0, [pc, #88]	; (4ac0 <lv_obj_set_state+0x318>)
    4a66:	4907      	ldr	r1, [pc, #28]	; (4a84 <lv_obj_set_state+0x2dc>)
    4a68:	4788      	blx	r1
    4a6a:	e7fe      	b.n	4a6a <lv_obj_set_state+0x2c2>
    4a6c:	000022a5 	.word	0x000022a5
    4a70:	000044c9 	.word	0x000044c9
    4a74:	000246c4 	.word	0x000246c4
    4a78:	000247d0 	.word	0x000247d0
    4a7c:	00012251 	.word	0x00012251
    4a80:	00024830 	.word	0x00024830
    4a84:	000022ad 	.word	0x000022ad
    4a88:	000068d5 	.word	0x000068d5
    4a8c:	2000c738 	.word	0x2000c738
    4a90:	00011f05 	.word	0x00011f05
    4a94:	000112d9 	.word	0x000112d9
    4a98:	00003ca1 	.word	0x00003ca1
    4a9c:	00004735 	.word	0x00004735
    4aa0:	00003115 	.word	0x00003115
    4aa4:	00011395 	.word	0x00011395
    4aa8:	00007229 	.word	0x00007229
    4aac:	00002ff1 	.word	0x00002ff1
    4ab0:	000070db 	.word	0x000070db
    4ab4:	00004601 	.word	0x00004601
    4ab8:	00006b5d 	.word	0x00006b5d
    4abc:	000246d8 	.word	0x000246d8
    4ac0:	00023fcc 	.word	0x00023fcc
    4ac4:	00004575 	.word	0x00004575
    4ac8:	00006a19 	.word	0x00006a19
    4acc:	00002f51 	.word	0x00002f51
        obj->state = prev_state;
    4ad0:	f88a 803d 	strb.w	r8, [sl, #61]	; 0x3d
        style_list->skip_trans = 1;
    4ad4:	7973      	ldrb	r3, [r6, #5]
    4ad6:	f043 0304 	orr.w	r3, r3, #4
    4ada:	7173      	strb	r3, [r6, #5]
        const void * p1 = _lv_obj_get_style_ptr(obj, part, prop);
    4adc:	4622      	mov	r2, r4
    4ade:	f8dd b00c 	ldr.w	fp, [sp, #12]
    4ae2:	4659      	mov	r1, fp
    4ae4:	4650      	mov	r0, sl
    4ae6:	4f5c      	ldr	r7, [pc, #368]	; (4c58 <lv_obj_set_state+0x4b0>)
    4ae8:	47b8      	blx	r7
    4aea:	900c      	str	r0, [sp, #48]	; 0x30
        obj->state = new_state;
    4aec:	f88a 903d 	strb.w	r9, [sl, #61]	; 0x3d
        const void * p2 = _lv_obj_get_style_ptr(obj, part, prop);
    4af0:	4622      	mov	r2, r4
    4af2:	f8cd b00c 	str.w	fp, [sp, #12]
    4af6:	4659      	mov	r1, fp
    4af8:	4650      	mov	r0, sl
    4afa:	47b8      	blx	r7
    4afc:	4683      	mov	fp, r0
    4afe:	a920      	add	r1, sp, #128	; 0x80
    4b00:	f841 0d40 	str.w	r0, [r1, #-64]!
        style_list->skip_trans = 0;
    4b04:	7973      	ldrb	r3, [r6, #5]
    4b06:	f36f 0382 	bfc	r3, #2, #1
    4b0a:	7173      	strb	r3, [r6, #5]
        if(memcmp(&p1, &p2, sizeof(const void *)) == 0)  return NULL;
    4b0c:	2204      	movs	r2, #4
    4b0e:	a80c      	add	r0, sp, #48	; 0x30
    4b10:	4b52      	ldr	r3, [pc, #328]	; (4c5c <lv_obj_set_state+0x4b4>)
    4b12:	4798      	blx	r3
    4b14:	2800      	cmp	r0, #0
    4b16:	f43f aed2 	beq.w	48be <lv_obj_set_state+0x116>
        obj->state = prev_state;
    4b1a:	f88a 803d 	strb.w	r8, [sl, #61]	; 0x3d
        p1 = _lv_obj_get_style_ptr(obj, part, prop);
    4b1e:	4622      	mov	r2, r4
    4b20:	9903      	ldr	r1, [sp, #12]
    4b22:	4650      	mov	r0, sl
    4b24:	47b8      	blx	r7
    4b26:	4606      	mov	r6, r0
    4b28:	900c      	str	r0, [sp, #48]	; 0x30
        obj->state = new_state;
    4b2a:	f88a 903d 	strb.w	r9, [sl, #61]	; 0x3d
        _lv_style_set_ptr(style_trans, prop, p1);   /*Be sure `trans_style` has a valid value */
    4b2e:	4602      	mov	r2, r0
    4b30:	4621      	mov	r1, r4
    4b32:	9804      	ldr	r0, [sp, #16]
    4b34:	4b4a      	ldr	r3, [pc, #296]	; (4c60 <lv_obj_set_state+0x4b8>)
    4b36:	4798      	blx	r3
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
    4b38:	484a      	ldr	r0, [pc, #296]	; (4c64 <lv_obj_set_state+0x4bc>)
    4b3a:	4b4b      	ldr	r3, [pc, #300]	; (4c68 <lv_obj_set_state+0x4c0>)
    4b3c:	4798      	blx	r3
    4b3e:	4607      	mov	r7, r0
        LV_ASSERT_MEM(tr);
    4b40:	4b4a      	ldr	r3, [pc, #296]	; (4c6c <lv_obj_set_state+0x4c4>)
    4b42:	4798      	blx	r3
    4b44:	b130      	cbz	r0, 4b54 <lv_obj_set_state+0x3ac>
        if(tr == NULL) return NULL;
    4b46:	2f00      	cmp	r7, #0
    4b48:	f43f aeb9 	beq.w	48be <lv_obj_set_state+0x116>
        tr->start_value._ptr = p1;
    4b4c:	60be      	str	r6, [r7, #8]
        tr->end_value._ptr = p2;
    4b4e:	f8c7 b00c 	str.w	fp, [r7, #12]
    4b52:	e688      	b.n	4866 <lv_obj_set_state+0xbe>
        LV_ASSERT_MEM(tr);
    4b54:	4b46      	ldr	r3, [pc, #280]	; (4c70 <lv_obj_set_state+0x4c8>)
    4b56:	9300      	str	r3, [sp, #0]
    4b58:	f640 62ef 	movw	r2, #3823	; 0xeef
    4b5c:	4945      	ldr	r1, [pc, #276]	; (4c74 <lv_obj_set_state+0x4cc>)
    4b5e:	2003      	movs	r0, #3
    4b60:	4c45      	ldr	r4, [pc, #276]	; (4c78 <lv_obj_set_state+0x4d0>)
    4b62:	47a0      	blx	r4
    4b64:	463a      	mov	r2, r7
    4b66:	2300      	movs	r3, #0
    4b68:	4844      	ldr	r0, [pc, #272]	; (4c7c <lv_obj_set_state+0x4d4>)
    4b6a:	4945      	ldr	r1, [pc, #276]	; (4c80 <lv_obj_set_state+0x4d8>)
    4b6c:	4788      	blx	r1
    4b6e:	e7fe      	b.n	4b6e <lv_obj_set_state+0x3c6>
    4b70:	9b06      	ldr	r3, [sp, #24]
    4b72:	3301      	adds	r3, #1
    4b74:	9306      	str	r3, [sp, #24]
    for(part = 0; part < _LV_OBJ_PART_REAL_LAST; part++) {
    4b76:	2b40      	cmp	r3, #64	; 0x40
    4b78:	d045      	beq.n	4c06 <lv_obj_set_state+0x45e>
    4b7a:	f89d 3018 	ldrb.w	r3, [sp, #24]
    4b7e:	9303      	str	r3, [sp, #12]
        lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
    4b80:	4619      	mov	r1, r3
    4b82:	4650      	mov	r0, sl
    4b84:	4b3f      	ldr	r3, [pc, #252]	; (4c84 <lv_obj_set_state+0x4dc>)
    4b86:	4798      	blx	r3
        if(style_list == NULL) break;   /*No more style lists*/
    4b88:	9007      	str	r0, [sp, #28]
    4b8a:	2800      	cmp	r0, #0
    4b8c:	d03b      	beq.n	4c06 <lv_obj_set_state+0x45e>
        if(style_list->ignore_trans) continue;
    4b8e:	7943      	ldrb	r3, [r0, #5]
    4b90:	f013 0f08 	tst.w	r3, #8
    4b94:	d1ec      	bne.n	4b70 <lv_obj_set_state+0x3c8>
    4b96:	22b0      	movs	r2, #176	; 0xb0
    4b98:	9c03      	ldr	r4, [sp, #12]
    4b9a:	4621      	mov	r1, r4
    4b9c:	4650      	mov	r0, sl
    4b9e:	47a8      	blx	r5
    4ba0:	900a      	str	r0, [sp, #40]	; 0x28
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
    4ba2:	22b1      	movs	r2, #177	; 0xb1
    4ba4:	4621      	mov	r1, r4
    4ba6:	4650      	mov	r0, sl
    4ba8:	47a8      	blx	r5
    4baa:	9009      	str	r0, [sp, #36]	; 0x24
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
#if LV_USE_ANIMATION
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
    4bac:	22be      	movs	r2, #190	; 0xbe
    4bae:	4621      	mov	r1, r4
    4bb0:	4650      	mov	r0, sl
    4bb2:	4b29      	ldr	r3, [pc, #164]	; (4c58 <lv_obj_set_state+0x4b0>)
    4bb4:	4798      	blx	r3
    4bb6:	9008      	str	r0, [sp, #32]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int, scalar)
    4bb8:	22b2      	movs	r2, #178	; 0xb2
    4bba:	4621      	mov	r1, r4
    4bbc:	4650      	mov	r0, sl
    4bbe:	47a8      	blx	r5
        props[0] = lv_obj_get_style_transition_prop_1(obj, part);
    4bc0:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_2, transition_prop_2, lv_style_int_t, _int, scalar)
    4bc4:	22b3      	movs	r2, #179	; 0xb3
    4bc6:	4621      	mov	r1, r4
    4bc8:	4650      	mov	r0, sl
    4bca:	47a8      	blx	r5
        props[1] = lv_obj_get_style_transition_prop_2(obj, part);
    4bcc:	f8ad 0036 	strh.w	r0, [sp, #54]	; 0x36
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
    4bd0:	22b4      	movs	r2, #180	; 0xb4
    4bd2:	4621      	mov	r1, r4
    4bd4:	4650      	mov	r0, sl
    4bd6:	47a8      	blx	r5
        props[2] = lv_obj_get_style_transition_prop_3(obj, part);
    4bd8:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
    4bdc:	22b5      	movs	r2, #181	; 0xb5
    4bde:	4621      	mov	r1, r4
    4be0:	4650      	mov	r0, sl
    4be2:	47a8      	blx	r5
        props[3] = lv_obj_get_style_transition_prop_4(obj, part);
    4be4:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
    4be8:	22b6      	movs	r2, #182	; 0xb6
    4bea:	4621      	mov	r1, r4
    4bec:	4650      	mov	r0, sl
    4bee:	47a8      	blx	r5
        props[4] = lv_obj_get_style_transition_prop_5(obj, part);
    4bf0:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
    4bf4:	22b7      	movs	r2, #183	; 0xb7
    4bf6:	4621      	mov	r1, r4
    4bf8:	4650      	mov	r0, sl
    4bfa:	47a8      	blx	r5
        props[5] = lv_obj_get_style_transition_prop_6(obj, part);
    4bfc:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
    4c00:	ab0d      	add	r3, sp, #52	; 0x34
    4c02:	9305      	str	r3, [sp, #20]
    4c04:	e660      	b.n	48c8 <lv_obj_set_state+0x120>
    lv_obj_refresh_style(obj, LV_STYLE_PROP_ALL);
    4c06:	21ff      	movs	r1, #255	; 0xff
    4c08:	4650      	mov	r0, sl
    4c0a:	4b1f      	ldr	r3, [pc, #124]	; (4c88 <lv_obj_set_state+0x4e0>)
    4c0c:	4798      	blx	r3
}
    4c0e:	b021      	add	sp, #132	; 0x84
    4c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                lv_coord_t whalf = lv_obj_get_width(obj) / 2;
    4c14:	4650      	mov	r0, sl
    4c16:	4e1d      	ldr	r6, [pc, #116]	; (4c8c <lv_obj_set_state+0x4e4>)
    4c18:	47b0      	blx	r6
    4c1a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    4c1e:	f340 074f 	sbfx	r7, r0, #1, #16
                lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
    4c22:	4650      	mov	r0, sl
    4c24:	47b0      	blx	r6
    4c26:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    4c2a:	f340 034f 	sbfx	r3, r0, #1, #16
                if(int1 == LV_RADIUS_CIRCLE) int1 = LV_MATH_MIN(whalf + 1, hhalf + 1);
    4c2e:	1c5e      	adds	r6, r3, #1
    4c30:	1c7a      	adds	r2, r7, #1
    4c32:	4296      	cmp	r6, r2
    4c34:	bfa8      	it	ge
    4c36:	4616      	movge	r6, r2
    4c38:	b236      	sxth	r6, r6
                if(int2 == LV_RADIUS_CIRCLE) int2 = LV_MATH_MIN(whalf + 1, hhalf + 1);
    4c3a:	f647 72ff 	movw	r2, #32767	; 0x7fff
    4c3e:	4593      	cmp	fp, r2
    4c40:	f47f ae03 	bne.w	484a <lv_obj_set_state+0xa2>
    4c44:	f103 0b01 	add.w	fp, r3, #1
    4c48:	3701      	adds	r7, #1
    4c4a:	45bb      	cmp	fp, r7
    4c4c:	bfa8      	it	ge
    4c4e:	46bb      	movge	fp, r7
    4c50:	fa0f fb8b 	sxth.w	fp, fp
    4c54:	e5f9      	b.n	484a <lv_obj_set_state+0xa2>
    4c56:	4770      	bx	lr
    4c58:	00004695 	.word	0x00004695
    4c5c:	0001b4d1 	.word	0x0001b4d1
    4c60:	00006c8d 	.word	0x00006c8d
    4c64:	2000c738 	.word	0x2000c738
    4c68:	00011f05 	.word	0x00011f05
    4c6c:	000022a5 	.word	0x000022a5
    4c70:	000246d8 	.word	0x000246d8
    4c74:	000247d0 	.word	0x000247d0
    4c78:	00012251 	.word	0x00012251
    4c7c:	00023fcc 	.word	0x00023fcc
    4c80:	000022ad 	.word	0x000022ad
    4c84:	00002ff1 	.word	0x00002ff1
    4c88:	00003a8d 	.word	0x00003a8d
    4c8c:	00002f51 	.word	0x00002f51

00004c90 <lv_obj_add_state>:
{
    4c90:	b530      	push	{r4, r5, lr}
    4c92:	b083      	sub	sp, #12
    4c94:	4605      	mov	r5, r0
    4c96:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    4c98:	4b0d      	ldr	r3, [pc, #52]	; (4cd0 <lv_obj_add_state+0x40>)
    4c9a:	4798      	blx	r3
    4c9c:	b150      	cbz	r0, 4cb4 <lv_obj_add_state+0x24>
    lv_state_t new_state = obj->state | state;
    4c9e:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
    4ca2:	ea43 0104 	orr.w	r1, r3, r4
    if(obj->state != new_state) {
    4ca6:	428b      	cmp	r3, r1
    4ca8:	d002      	beq.n	4cb0 <lv_obj_add_state+0x20>
        lv_obj_set_state(obj, new_state);
    4caa:	4628      	mov	r0, r5
    4cac:	4b09      	ldr	r3, [pc, #36]	; (4cd4 <lv_obj_add_state+0x44>)
    4cae:	4798      	blx	r3
}
    4cb0:	b003      	add	sp, #12
    4cb2:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    4cb4:	4b08      	ldr	r3, [pc, #32]	; (4cd8 <lv_obj_add_state+0x48>)
    4cb6:	9300      	str	r3, [sp, #0]
    4cb8:	f240 627e 	movw	r2, #1662	; 0x67e
    4cbc:	4907      	ldr	r1, [pc, #28]	; (4cdc <lv_obj_add_state+0x4c>)
    4cbe:	2003      	movs	r0, #3
    4cc0:	4c07      	ldr	r4, [pc, #28]	; (4ce0 <lv_obj_add_state+0x50>)
    4cc2:	47a0      	blx	r4
    4cc4:	462a      	mov	r2, r5
    4cc6:	2300      	movs	r3, #0
    4cc8:	4806      	ldr	r0, [pc, #24]	; (4ce4 <lv_obj_add_state+0x54>)
    4cca:	4907      	ldr	r1, [pc, #28]	; (4ce8 <lv_obj_add_state+0x58>)
    4ccc:	4788      	blx	r1
    4cce:	e7fe      	b.n	4cce <lv_obj_add_state+0x3e>
    4cd0:	000022a5 	.word	0x000022a5
    4cd4:	000047a9 	.word	0x000047a9
    4cd8:	000246e8 	.word	0x000246e8
    4cdc:	000247d0 	.word	0x000247d0
    4ce0:	00012251 	.word	0x00012251
    4ce4:	00024830 	.word	0x00024830
    4ce8:	000022ad 	.word	0x000022ad

00004cec <lv_obj_clear_state>:
{
    4cec:	b530      	push	{r4, r5, lr}
    4cee:	b083      	sub	sp, #12
    4cf0:	4605      	mov	r5, r0
    4cf2:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    4cf4:	4b0d      	ldr	r3, [pc, #52]	; (4d2c <lv_obj_clear_state+0x40>)
    4cf6:	4798      	blx	r3
    4cf8:	b150      	cbz	r0, 4d10 <lv_obj_clear_state+0x24>
    lv_state_t new_state = obj->state & (~state);
    4cfa:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
    4cfe:	ea23 0104 	bic.w	r1, r3, r4
    if(obj->state != new_state) {
    4d02:	428b      	cmp	r3, r1
    4d04:	d002      	beq.n	4d0c <lv_obj_clear_state+0x20>
        lv_obj_set_state(obj, new_state);
    4d06:	4628      	mov	r0, r5
    4d08:	4b09      	ldr	r3, [pc, #36]	; (4d30 <lv_obj_clear_state+0x44>)
    4d0a:	4798      	blx	r3
}
    4d0c:	b003      	add	sp, #12
    4d0e:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    4d10:	4b08      	ldr	r3, [pc, #32]	; (4d34 <lv_obj_clear_state+0x48>)
    4d12:	9300      	str	r3, [sp, #0]
    4d14:	f240 628f 	movw	r2, #1679	; 0x68f
    4d18:	4907      	ldr	r1, [pc, #28]	; (4d38 <lv_obj_clear_state+0x4c>)
    4d1a:	2003      	movs	r0, #3
    4d1c:	4c07      	ldr	r4, [pc, #28]	; (4d3c <lv_obj_clear_state+0x50>)
    4d1e:	47a0      	blx	r4
    4d20:	462a      	mov	r2, r5
    4d22:	2300      	movs	r3, #0
    4d24:	4806      	ldr	r0, [pc, #24]	; (4d40 <lv_obj_clear_state+0x54>)
    4d26:	4907      	ldr	r1, [pc, #28]	; (4d44 <lv_obj_clear_state+0x58>)
    4d28:	4788      	blx	r1
    4d2a:	e7fe      	b.n	4d2a <lv_obj_clear_state+0x3e>
    4d2c:	000022a5 	.word	0x000022a5
    4d30:	000047a9 	.word	0x000047a9
    4d34:	000246fc 	.word	0x000246fc
    4d38:	000247d0 	.word	0x000247d0
    4d3c:	00012251 	.word	0x00012251
    4d40:	00024830 	.word	0x00024830
    4d44:	000022ad 	.word	0x000022ad

00004d48 <lv_obj_get_signal_cb>:
{
    4d48:	b530      	push	{r4, r5, lr}
    4d4a:	b083      	sub	sp, #12
    4d4c:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    4d4e:	4b0a      	ldr	r3, [pc, #40]	; (4d78 <lv_obj_get_signal_cb+0x30>)
    4d50:	4798      	blx	r3
    4d52:	b110      	cbz	r0, 4d5a <lv_obj_get_signal_cb+0x12>
}
    4d54:	69e0      	ldr	r0, [r4, #28]
    4d56:	b003      	add	sp, #12
    4d58:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    4d5a:	4b08      	ldr	r3, [pc, #32]	; (4d7c <lv_obj_get_signal_cb+0x34>)
    4d5c:	9300      	str	r3, [sp, #0]
    4d5e:	f640 22f5 	movw	r2, #2805	; 0xaf5
    4d62:	4907      	ldr	r1, [pc, #28]	; (4d80 <lv_obj_get_signal_cb+0x38>)
    4d64:	2003      	movs	r0, #3
    4d66:	4d07      	ldr	r5, [pc, #28]	; (4d84 <lv_obj_get_signal_cb+0x3c>)
    4d68:	47a8      	blx	r5
    4d6a:	4622      	mov	r2, r4
    4d6c:	2300      	movs	r3, #0
    4d6e:	4806      	ldr	r0, [pc, #24]	; (4d88 <lv_obj_get_signal_cb+0x40>)
    4d70:	4906      	ldr	r1, [pc, #24]	; (4d8c <lv_obj_get_signal_cb+0x44>)
    4d72:	4788      	blx	r1
    4d74:	e7fe      	b.n	4d74 <lv_obj_get_signal_cb+0x2c>
    4d76:	bf00      	nop
    4d78:	000022a5 	.word	0x000022a5
    4d7c:	00024710 	.word	0x00024710
    4d80:	000247d0 	.word	0x000247d0
    4d84:	00012251 	.word	0x00012251
    4d88:	00024830 	.word	0x00024830
    4d8c:	000022ad 	.word	0x000022ad

00004d90 <lv_obj_get_ext_attr>:
{
    4d90:	b530      	push	{r4, r5, lr}
    4d92:	b083      	sub	sp, #12
    4d94:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    4d96:	4b0a      	ldr	r3, [pc, #40]	; (4dc0 <lv_obj_get_ext_attr+0x30>)
    4d98:	4798      	blx	r3
    4d9a:	b110      	cbz	r0, 4da2 <lv_obj_get_ext_attr+0x12>
}
    4d9c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4d9e:	b003      	add	sp, #12
    4da0:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    4da2:	4b08      	ldr	r3, [pc, #32]	; (4dc4 <lv_obj_get_ext_attr+0x34>)
    4da4:	9300      	str	r3, [sp, #0]
    4da6:	f640 321e 	movw	r2, #2846	; 0xb1e
    4daa:	4907      	ldr	r1, [pc, #28]	; (4dc8 <lv_obj_get_ext_attr+0x38>)
    4dac:	2003      	movs	r0, #3
    4dae:	4d07      	ldr	r5, [pc, #28]	; (4dcc <lv_obj_get_ext_attr+0x3c>)
    4db0:	47a8      	blx	r5
    4db2:	4622      	mov	r2, r4
    4db4:	2300      	movs	r3, #0
    4db6:	4806      	ldr	r0, [pc, #24]	; (4dd0 <lv_obj_get_ext_attr+0x40>)
    4db8:	4906      	ldr	r1, [pc, #24]	; (4dd4 <lv_obj_get_ext_attr+0x44>)
    4dba:	4788      	blx	r1
    4dbc:	e7fe      	b.n	4dbc <lv_obj_get_ext_attr+0x2c>
    4dbe:	bf00      	nop
    4dc0:	000022a5 	.word	0x000022a5
    4dc4:	00024754 	.word	0x00024754
    4dc8:	000247d0 	.word	0x000247d0
    4dcc:	00012251 	.word	0x00012251
    4dd0:	00024830 	.word	0x00024830
    4dd4:	000022ad 	.word	0x000022ad

00004dd8 <lv_obj_get_group>:
{
    4dd8:	b530      	push	{r4, r5, lr}
    4dda:	b083      	sub	sp, #12
    4ddc:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    4dde:	4b0a      	ldr	r3, [pc, #40]	; (4e08 <lv_obj_get_group+0x30>)
    4de0:	4798      	blx	r3
    4de2:	b110      	cbz	r0, 4dea <lv_obj_get_group+0x12>
}
    4de4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    4de6:	b003      	add	sp, #12
    4de8:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    4dea:	4b08      	ldr	r3, [pc, #32]	; (4e0c <lv_obj_get_group+0x34>)
    4dec:	9300      	str	r3, [sp, #0]
    4dee:	f640 326f 	movw	r2, #2927	; 0xb6f
    4df2:	4907      	ldr	r1, [pc, #28]	; (4e10 <lv_obj_get_group+0x38>)
    4df4:	2003      	movs	r0, #3
    4df6:	4d07      	ldr	r5, [pc, #28]	; (4e14 <lv_obj_get_group+0x3c>)
    4df8:	47a8      	blx	r5
    4dfa:	4622      	mov	r2, r4
    4dfc:	2300      	movs	r3, #0
    4dfe:	4806      	ldr	r0, [pc, #24]	; (4e18 <lv_obj_get_group+0x40>)
    4e00:	4906      	ldr	r1, [pc, #24]	; (4e1c <lv_obj_get_group+0x44>)
    4e02:	4788      	blx	r1
    4e04:	e7fe      	b.n	4e04 <lv_obj_get_group+0x2c>
    4e06:	bf00      	nop
    4e08:	000022a5 	.word	0x000022a5
    4e0c:	00024778 	.word	0x00024778
    4e10:	000247d0 	.word	0x000247d0
    4e14:	00012251 	.word	0x00012251
    4e18:	00024830 	.word	0x00024830
    4e1c:	000022ad 	.word	0x000022ad

00004e20 <obj_del_core>:
{
    4e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4e24:	4605      	mov	r5, r0
    lv_event_send(obj, LV_EVENT_DELETE, NULL);
    4e26:	2200      	movs	r2, #0
    4e28:	2115      	movs	r1, #21
    4e2a:	4b3c      	ldr	r3, [pc, #240]	; (4f1c <obj_del_core+0xfc>)
    4e2c:	4798      	blx	r3
    lv_group_t * group = lv_obj_get_group(obj);
    4e2e:	4628      	mov	r0, r5
    4e30:	4b3b      	ldr	r3, [pc, #236]	; (4f20 <obj_del_core+0x100>)
    4e32:	4798      	blx	r3
    if(group) lv_group_remove_obj(obj);
    4e34:	4607      	mov	r7, r0
    4e36:	b110      	cbz	r0, 4e3e <obj_del_core+0x1e>
    4e38:	4628      	mov	r0, r5
    4e3a:	4b3a      	ldr	r3, [pc, #232]	; (4f24 <obj_del_core+0x104>)
    4e3c:	4798      	blx	r3
    lv_anim_del(obj, NULL);
    4e3e:	2100      	movs	r1, #0
    4e40:	4628      	mov	r0, r5
    4e42:	4b39      	ldr	r3, [pc, #228]	; (4f28 <obj_del_core+0x108>)
    4e44:	4798      	blx	r3
    trans_del(obj, 0xFF, 0xFF, NULL);
    4e46:	2300      	movs	r3, #0
    4e48:	22ff      	movs	r2, #255	; 0xff
    4e4a:	4611      	mov	r1, r2
    4e4c:	4628      	mov	r0, r5
    4e4e:	4c37      	ldr	r4, [pc, #220]	; (4f2c <obj_del_core+0x10c>)
    4e50:	47a0      	blx	r4
    i = _lv_ll_get_head(&(obj->child_ll));
    4e52:	f105 0804 	add.w	r8, r5, #4
    4e56:	4640      	mov	r0, r8
    4e58:	4b35      	ldr	r3, [pc, #212]	; (4f30 <obj_del_core+0x110>)
    4e5a:	4798      	blx	r3
    while(i != NULL) {
    4e5c:	4604      	mov	r4, r0
    4e5e:	b158      	cbz	r0, 4e78 <obj_del_core+0x58>
        i_next = _lv_ll_get_next(&(obj->child_ll), i);
    4e60:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 4f4c <obj_del_core+0x12c>
    4e64:	4621      	mov	r1, r4
    4e66:	4640      	mov	r0, r8
    4e68:	47c8      	blx	r9
    4e6a:	4606      	mov	r6, r0
        obj_del_core(i);
    4e6c:	4620      	mov	r0, r4
    4e6e:	f7ff ffd7 	bl	4e20 <obj_del_core>
        i = i_next;
    4e72:	4634      	mov	r4, r6
    while(i != NULL) {
    4e74:	2e00      	cmp	r6, #0
    4e76:	d1f5      	bne.n	4e64 <obj_del_core+0x44>

#endif

static void lv_event_mark_deleted(lv_obj_t * obj)
{
    lv_event_temp_data_t * t = event_temp_data_head;
    4e78:	4b2e      	ldr	r3, [pc, #184]	; (4f34 <obj_del_core+0x114>)
    4e7a:	685b      	ldr	r3, [r3, #4]

    while(t) {
    4e7c:	b13b      	cbz	r3, 4e8e <obj_del_core+0x6e>
        if(t->obj == obj) t->deleted = true;
    4e7e:	2101      	movs	r1, #1
    4e80:	681a      	ldr	r2, [r3, #0]
    4e82:	4295      	cmp	r5, r2
    4e84:	bf08      	it	eq
    4e86:	7119      	strbeq	r1, [r3, #4]
        t = t->prev;
    4e88:	689b      	ldr	r3, [r3, #8]
    while(t) {
    4e8a:	2b00      	cmp	r3, #0
    4e8c:	d1f8      	bne.n	4e80 <obj_del_core+0x60>
    lv_indev_t * indev = lv_indev_get_next(NULL);
    4e8e:	2000      	movs	r0, #0
    4e90:	4b29      	ldr	r3, [pc, #164]	; (4f38 <obj_del_core+0x118>)
    4e92:	4798      	blx	r3
    while(indev) {
    4e94:	4604      	mov	r4, r0
    4e96:	b310      	cbz	r0, 4ede <obj_del_core+0xbe>
            lv_indev_reset(indev, obj);
    4e98:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 4f50 <obj_del_core+0x130>
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
    4e9c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 4f54 <obj_del_core+0x134>
        indev = lv_indev_get_next(indev);
    4ea0:	4e25      	ldr	r6, [pc, #148]	; (4f38 <obj_del_core+0x118>)
    4ea2:	e00e      	b.n	4ec2 <obj_del_core+0xa2>
            lv_indev_reset(indev, obj);
    4ea4:	4629      	mov	r1, r5
    4ea6:	4620      	mov	r0, r4
    4ea8:	47c0      	blx	r8
        if(indev->proc.types.pointer.last_pressed == obj) {
    4eaa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4eac:	429d      	cmp	r5, r3
            indev->proc.types.pointer.last_pressed = NULL;
    4eae:	bf04      	itt	eq
    4eb0:	2300      	moveq	r3, #0
    4eb2:	63e3      	streq	r3, [r4, #60]	; 0x3c
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
    4eb4:	6da3      	ldr	r3, [r4, #88]	; 0x58
    4eb6:	429f      	cmp	r7, r3
    4eb8:	d00a      	beq.n	4ed0 <obj_del_core+0xb0>
        indev = lv_indev_get_next(indev);
    4eba:	4620      	mov	r0, r4
    4ebc:	47b0      	blx	r6
    while(indev) {
    4ebe:	4604      	mov	r4, r0
    4ec0:	b168      	cbz	r0, 4ede <obj_del_core+0xbe>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
    4ec2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4ec4:	429d      	cmp	r5, r3
    4ec6:	d0ed      	beq.n	4ea4 <obj_del_core+0x84>
    4ec8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4eca:	429d      	cmp	r5, r3
    4ecc:	d1ed      	bne.n	4eaa <obj_del_core+0x8a>
    4ece:	e7e9      	b.n	4ea4 <obj_del_core+0x84>
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
    4ed0:	47c8      	blx	r9
    4ed2:	4285      	cmp	r5, r0
    4ed4:	d1f1      	bne.n	4eba <obj_del_core+0x9a>
            lv_indev_reset(indev, obj);
    4ed6:	4629      	mov	r1, r5
    4ed8:	4620      	mov	r0, r4
    4eda:	47c0      	blx	r8
    4edc:	e7ed      	b.n	4eba <obj_del_core+0x9a>
    obj->signal_cb(obj, LV_SIGNAL_CLEANUP, NULL);
    4ede:	69eb      	ldr	r3, [r5, #28]
    4ee0:	2200      	movs	r2, #0
    4ee2:	4611      	mov	r1, r2
    4ee4:	4628      	mov	r0, r5
    4ee6:	4798      	blx	r3
    lv_obj_t * par = lv_obj_get_parent(obj);
    4ee8:	4628      	mov	r0, r5
    4eea:	4b14      	ldr	r3, [pc, #80]	; (4f3c <obj_del_core+0x11c>)
    4eec:	4798      	blx	r3
    if(par == NULL) { /*It is a screen*/
    4eee:	b160      	cbz	r0, 4f0a <obj_del_core+0xea>
        _lv_ll_remove(&(par->child_ll), obj);
    4ef0:	4629      	mov	r1, r5
    4ef2:	3004      	adds	r0, #4
    4ef4:	4b12      	ldr	r3, [pc, #72]	; (4f40 <obj_del_core+0x120>)
    4ef6:	4798      	blx	r3
    if(obj->ext_attr != NULL) lv_mem_free(obj->ext_attr);
    4ef8:	6a68      	ldr	r0, [r5, #36]	; 0x24
    4efa:	b108      	cbz	r0, 4f00 <obj_del_core+0xe0>
    4efc:	4b11      	ldr	r3, [pc, #68]	; (4f44 <obj_del_core+0x124>)
    4efe:	4798      	blx	r3
    lv_mem_free(obj); /*Free the object itself*/
    4f00:	4628      	mov	r0, r5
    4f02:	4b10      	ldr	r3, [pc, #64]	; (4f44 <obj_del_core+0x124>)
    4f04:	4798      	blx	r3
    4f06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        lv_disp_t * d = lv_obj_get_disp(obj);
    4f0a:	4628      	mov	r0, r5
    4f0c:	4b0e      	ldr	r3, [pc, #56]	; (4f48 <obj_del_core+0x128>)
    4f0e:	4798      	blx	r3
        _lv_ll_remove(&d->scr_ll, obj);
    4f10:	4629      	mov	r1, r5
    4f12:	3030      	adds	r0, #48	; 0x30
    4f14:	4b0a      	ldr	r3, [pc, #40]	; (4f40 <obj_del_core+0x120>)
    4f16:	4798      	blx	r3
    4f18:	e7ee      	b.n	4ef8 <obj_del_core+0xd8>
    4f1a:	bf00      	nop
    4f1c:	00002ac1 	.word	0x00002ac1
    4f20:	00004dd9 	.word	0x00004dd9
    4f24:	0000266d 	.word	0x0000266d
    4f28:	0001131d 	.word	0x0001131d
    4f2c:	0000301d 	.word	0x0000301d
    4f30:	00011f9d 	.word	0x00011f9d
    4f34:	20008078 	.word	0x20008078
    4f38:	00011015 	.word	0x00011015
    4f3c:	00002c71 	.word	0x00002c71
    4f40:	00012089 	.word	0x00012089
    4f44:	000124b9 	.word	0x000124b9
    4f48:	00002d15 	.word	0x00002d15
    4f4c:	00011fb1 	.word	0x00011fb1
    4f50:	00002769 	.word	0x00002769
    4f54:	000027f5 	.word	0x000027f5

00004f58 <lv_obj_del>:
{
    4f58:	b570      	push	{r4, r5, r6, lr}
    4f5a:	b082      	sub	sp, #8
    4f5c:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    4f5e:	4b19      	ldr	r3, [pc, #100]	; (4fc4 <lv_obj_del+0x6c>)
    4f60:	4798      	blx	r3
    4f62:	b968      	cbnz	r0, 4f80 <lv_obj_del+0x28>
    4f64:	4b18      	ldr	r3, [pc, #96]	; (4fc8 <lv_obj_del+0x70>)
    4f66:	9300      	str	r3, [sp, #0]
    4f68:	f240 1293 	movw	r2, #403	; 0x193
    4f6c:	4917      	ldr	r1, [pc, #92]	; (4fcc <lv_obj_del+0x74>)
    4f6e:	2003      	movs	r0, #3
    4f70:	4d17      	ldr	r5, [pc, #92]	; (4fd0 <lv_obj_del+0x78>)
    4f72:	47a8      	blx	r5
    4f74:	4622      	mov	r2, r4
    4f76:	2300      	movs	r3, #0
    4f78:	4816      	ldr	r0, [pc, #88]	; (4fd4 <lv_obj_del+0x7c>)
    4f7a:	4917      	ldr	r1, [pc, #92]	; (4fd8 <lv_obj_del+0x80>)
    4f7c:	4788      	blx	r1
    4f7e:	e7fe      	b.n	4f7e <lv_obj_del+0x26>
    lv_obj_invalidate(obj);
    4f80:	4620      	mov	r0, r4
    4f82:	4b16      	ldr	r3, [pc, #88]	; (4fdc <lv_obj_del+0x84>)
    4f84:	4798      	blx	r3
    lv_obj_t * par = lv_obj_get_parent(obj);
    4f86:	4620      	mov	r0, r4
    4f88:	4b15      	ldr	r3, [pc, #84]	; (4fe0 <lv_obj_del+0x88>)
    4f8a:	4798      	blx	r3
    if(par == NULL) {
    4f8c:	4605      	mov	r5, r0
    4f8e:	b140      	cbz	r0, 4fa2 <lv_obj_del+0x4a>
    obj_del_core(obj);
    4f90:	4620      	mov	r0, r4
    4f92:	4b14      	ldr	r3, [pc, #80]	; (4fe4 <lv_obj_del+0x8c>)
    4f94:	4798      	blx	r3
        par->signal_cb(par, LV_SIGNAL_CHILD_CHG, NULL);
    4f96:	69eb      	ldr	r3, [r5, #28]
    4f98:	2200      	movs	r2, #0
    4f9a:	2101      	movs	r1, #1
    4f9c:	4628      	mov	r0, r5
    4f9e:	4798      	blx	r3
    4fa0:	e00c      	b.n	4fbc <lv_obj_del+0x64>
        disp = lv_obj_get_disp(obj);
    4fa2:	4620      	mov	r0, r4
    4fa4:	4b10      	ldr	r3, [pc, #64]	; (4fe8 <lv_obj_del+0x90>)
    4fa6:	4798      	blx	r3
        if(!disp) return LV_RES_INV;   /*Shouldn't happen*/
    4fa8:	4605      	mov	r5, r0
    4faa:	b138      	cbz	r0, 4fbc <lv_obj_del+0x64>
        if(disp->act_scr == obj) act_scr_del = true;
    4fac:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
    obj_del_core(obj);
    4fae:	4620      	mov	r0, r4
    4fb0:	4b0c      	ldr	r3, [pc, #48]	; (4fe4 <lv_obj_del+0x8c>)
    4fb2:	4798      	blx	r3
    if(act_scr_del)  {
    4fb4:	42b4      	cmp	r4, r6
    4fb6:	d101      	bne.n	4fbc <lv_obj_del+0x64>
        disp->act_scr = NULL;
    4fb8:	2300      	movs	r3, #0
    4fba:	63eb      	str	r3, [r5, #60]	; 0x3c
}
    4fbc:	2000      	movs	r0, #0
    4fbe:	b002      	add	sp, #8
    4fc0:	bd70      	pop	{r4, r5, r6, pc}
    4fc2:	bf00      	nop
    4fc4:	000022a5 	.word	0x000022a5
    4fc8:	0002478c 	.word	0x0002478c
    4fcc:	000247d0 	.word	0x000247d0
    4fd0:	00012251 	.word	0x00012251
    4fd4:	00024830 	.word	0x00024830
    4fd8:	000022ad 	.word	0x000022ad
    4fdc:	00003315 	.word	0x00003315
    4fe0:	00002c71 	.word	0x00002c71
    4fe4:	00004e21 	.word	0x00004e21
    4fe8:	00002d15 	.word	0x00002d15

00004fec <lv_obj_is_focused>:
{
    4fec:	b530      	push	{r4, r5, lr}
    4fee:	b083      	sub	sp, #12
    4ff0:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    4ff2:	4b0e      	ldr	r3, [pc, #56]	; (502c <lv_obj_is_focused+0x40>)
    4ff4:	4798      	blx	r3
    4ff6:	b148      	cbz	r0, 500c <lv_obj_is_focused+0x20>
    if(obj->group_p) {
    4ff8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    4ffa:	b1a8      	cbz	r0, 5028 <lv_obj_is_focused+0x3c>
        if(lv_group_get_focused(obj->group_p) == obj) return true;
    4ffc:	4b0c      	ldr	r3, [pc, #48]	; (5030 <lv_obj_is_focused+0x44>)
    4ffe:	4798      	blx	r3
    5000:	4284      	cmp	r4, r0
    5002:	bf14      	ite	ne
    5004:	2000      	movne	r0, #0
    5006:	2001      	moveq	r0, #1
}
    5008:	b003      	add	sp, #12
    500a:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    500c:	4b09      	ldr	r3, [pc, #36]	; (5034 <lv_obj_is_focused+0x48>)
    500e:	9300      	str	r3, [sp, #0]
    5010:	f44f 6238 	mov.w	r2, #2944	; 0xb80
    5014:	4908      	ldr	r1, [pc, #32]	; (5038 <lv_obj_is_focused+0x4c>)
    5016:	2003      	movs	r0, #3
    5018:	4d08      	ldr	r5, [pc, #32]	; (503c <lv_obj_is_focused+0x50>)
    501a:	47a8      	blx	r5
    501c:	4622      	mov	r2, r4
    501e:	2300      	movs	r3, #0
    5020:	4807      	ldr	r0, [pc, #28]	; (5040 <lv_obj_is_focused+0x54>)
    5022:	4908      	ldr	r1, [pc, #32]	; (5044 <lv_obj_is_focused+0x58>)
    5024:	4788      	blx	r1
    5026:	e7fe      	b.n	5026 <lv_obj_is_focused+0x3a>
    return false;
    5028:	2000      	movs	r0, #0
    502a:	e7ed      	b.n	5008 <lv_obj_is_focused+0x1c>
    502c:	000022a5 	.word	0x000022a5
    5030:	0000273d 	.word	0x0000273d
    5034:	000247bc 	.word	0x000247bc
    5038:	000247d0 	.word	0x000247d0
    503c:	00012251 	.word	0x00012251
    5040:	00024830 	.word	0x00024830
    5044:	000022ad 	.word	0x000022ad

00005048 <lv_obj_is_point_on_coords>:
{
    5048:	b500      	push	{lr}
    504a:	b083      	sub	sp, #12
    ext_area.x1 = obj->coords.x1 - obj->ext_click_pad_hor;
    504c:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    5050:	8a02      	ldrh	r2, [r0, #16]
    5052:	1ad2      	subs	r2, r2, r3
    5054:	f8ad 2000 	strh.w	r2, [sp]
    ext_area.x2 = obj->coords.x2 + obj->ext_click_pad_hor;
    5058:	8a82      	ldrh	r2, [r0, #20]
    505a:	4413      	add	r3, r2
    505c:	f8ad 3004 	strh.w	r3, [sp, #4]
    ext_area.y1 = obj->coords.y1 - obj->ext_click_pad_ver;
    5060:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    5064:	8a42      	ldrh	r2, [r0, #18]
    5066:	1ad2      	subs	r2, r2, r3
    5068:	f8ad 2002 	strh.w	r2, [sp, #2]
    ext_area.y2 = obj->coords.y2 + obj->ext_click_pad_ver;
    506c:	8ac2      	ldrh	r2, [r0, #22]
    506e:	4413      	add	r3, r2
    5070:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(!_lv_area_is_point_on(&ext_area, point, 0)) {
    5074:	2200      	movs	r2, #0
    5076:	4668      	mov	r0, sp
    5078:	4b02      	ldr	r3, [pc, #8]	; (5084 <lv_obj_is_point_on_coords+0x3c>)
    507a:	4798      	blx	r3
}
    507c:	b003      	add	sp, #12
    507e:	f85d fb04 	ldr.w	pc, [sp], #4
    5082:	bf00      	nop
    5084:	000115ad 	.word	0x000115ad

00005088 <lv_obj_handle_get_type_signal>:
        if(buf->type[i] == NULL) break;
    5088:	6803      	ldr	r3, [r0, #0]
    508a:	b17b      	cbz	r3, 50ac <lv_obj_handle_get_type_signal+0x24>
{
    508c:	b410      	push	{r4}
    508e:	1d02      	adds	r2, r0, #4
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
    5090:	2301      	movs	r3, #1
        if(buf->type[i] == NULL) break;
    5092:	f852 4b04 	ldr.w	r4, [r2], #4
    5096:	b11c      	cbz	r4, 50a0 <lv_obj_handle_get_type_signal+0x18>
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
    5098:	3301      	adds	r3, #1
    509a:	b2db      	uxtb	r3, r3
    509c:	2b07      	cmp	r3, #7
    509e:	d1f8      	bne.n	5092 <lv_obj_handle_get_type_signal+0xa>
    buf->type[i] = name;
    50a0:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
    50a4:	2001      	movs	r0, #1
    50a6:	f85d 4b04 	ldr.w	r4, [sp], #4
    50aa:	4770      	bx	lr
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
    50ac:	2300      	movs	r3, #0
    buf->type[i] = name;
    50ae:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
    50b2:	2001      	movs	r0, #1
    50b4:	4770      	bx	lr
	...

000050b8 <lv_obj_init_draw_rect_dsc>:
{
    50b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    50bc:	4605      	mov	r5, r0
    50be:	460e      	mov	r6, r1
    50c0:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
    50c2:	2201      	movs	r2, #1
    50c4:	4ba8      	ldr	r3, [pc, #672]	; (5368 <lv_obj_init_draw_rect_dsc+0x2b0>)
    50c6:	4798      	blx	r3
    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
    50c8:	8020      	strh	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
    50ca:	f248 020c 	movw	r2, #32780	; 0x800c
    50ce:	4631      	mov	r1, r6
    50d0:	4628      	mov	r0, r5
    50d2:	4ba6      	ldr	r3, [pc, #664]	; (536c <lv_obj_init_draw_rect_dsc+0x2b4>)
    50d4:	4798      	blx	r3
    if(opa_scale <= LV_OPA_MIN) {
    50d6:	2805      	cmp	r0, #5
    50d8:	d942      	bls.n	5160 <lv_obj_init_draw_rect_dsc+0xa8>
    50da:	4607      	mov	r7, r0
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
    50dc:	7b23      	ldrb	r3, [r4, #12]
    50de:	2b00      	cmp	r3, #0
    50e0:	d149      	bne.n	5176 <lv_obj_init_draw_rect_dsc+0xbe>
    if(draw_dsc->border_opa != LV_OPA_TRANSP) {
    50e2:	7d23      	ldrb	r3, [r4, #20]
    50e4:	2b00      	cmp	r3, #0
    50e6:	d176      	bne.n	51d6 <lv_obj_init_draw_rect_dsc+0x11e>
    if(draw_dsc->outline_opa != LV_OPA_TRANSP) {
    50e8:	7f23      	ldrb	r3, [r4, #28]
    50ea:	2b00      	cmp	r3, #0
    50ec:	f040 8098 	bne.w	5220 <lv_obj_init_draw_rect_dsc+0x168>
    if(draw_dsc->pattern_opa != LV_OPA_TRANSP) {
    50f0:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
    50f4:	2b00      	cmp	r3, #0
    50f6:	f040 80b8 	bne.w	526a <lv_obj_init_draw_rect_dsc+0x1b2>
    if(draw_dsc->shadow_opa > LV_OPA_MIN) {
    50fa:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    50fe:	2b05      	cmp	r3, #5
    5100:	f200 8101 	bhi.w	5306 <lv_obj_init_draw_rect_dsc+0x24e>
    if(draw_dsc->value_opa > LV_OPA_MIN) {
    5104:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    5108:	2b05      	cmp	r3, #5
    510a:	f200 8137 	bhi.w	537c <lv_obj_init_draw_rect_dsc+0x2c4>
    if(opa_scale < LV_OPA_MAX) {
    510e:	2ff9      	cmp	r7, #249	; 0xf9
    5110:	d824      	bhi.n	515c <lv_obj_init_draw_rect_dsc+0xa4>
        draw_dsc->bg_opa = (uint16_t)((uint16_t)draw_dsc->bg_opa * opa_scale) >> 8;
    5112:	b2bf      	uxth	r7, r7
    5114:	7b23      	ldrb	r3, [r4, #12]
    5116:	fb13 f307 	smulbb	r3, r3, r7
    511a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    511e:	7323      	strb	r3, [r4, #12]
        draw_dsc->border_opa = (uint16_t)((uint16_t)draw_dsc->border_opa * opa_scale) >> 8;
    5120:	7d23      	ldrb	r3, [r4, #20]
    5122:	fb13 f307 	smulbb	r3, r3, r7
    5126:	f3c3 2307 	ubfx	r3, r3, #8, #8
    512a:	7523      	strb	r3, [r4, #20]
        draw_dsc->shadow_opa = (uint16_t)((uint16_t)draw_dsc->shadow_opa * opa_scale) >> 8;
    512c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    5130:	fb13 f307 	smulbb	r3, r3, r7
    5134:	f3c3 2307 	ubfx	r3, r3, #8, #8
    5138:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        draw_dsc->pattern_opa = (uint16_t)((uint16_t)draw_dsc->pattern_opa * opa_scale) >> 8;
    513c:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
    5140:	fb13 f307 	smulbb	r3, r3, r7
    5144:	f3c3 2307 	ubfx	r3, r3, #8, #8
    5148:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        draw_dsc->value_opa = (uint16_t)((uint16_t)draw_dsc->value_opa * opa_scale) >> 8;
    514c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    5150:	fb13 f707 	smulbb	r7, r3, r7
    5154:	f3c7 2707 	ubfx	r7, r7, #8, #8
    5158:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
    515c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        draw_dsc->bg_opa = LV_OPA_TRANSP;
    5160:	2300      	movs	r3, #0
    5162:	7323      	strb	r3, [r4, #12]
        draw_dsc->border_opa = LV_OPA_TRANSP;
    5164:	7523      	strb	r3, [r4, #20]
        draw_dsc->shadow_opa = LV_OPA_TRANSP;
    5166:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        draw_dsc->pattern_opa = LV_OPA_TRANSP;
    516a:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        draw_dsc->value_opa = LV_OPA_TRANSP;
    516e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        return;
    5172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
    5176:	222c      	movs	r2, #44	; 0x2c
    5178:	4631      	mov	r1, r6
    517a:	4628      	mov	r0, r5
    517c:	4b7b      	ldr	r3, [pc, #492]	; (536c <lv_obj_init_draw_rect_dsc+0x2b4>)
    517e:	4798      	blx	r3
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
    5180:	7320      	strb	r0, [r4, #12]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
    5182:	2805      	cmp	r0, #5
    5184:	d9ad      	bls.n	50e2 <lv_obj_init_draw_rect_dsc+0x2a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
    5186:	2229      	movs	r2, #41	; 0x29
    5188:	4631      	mov	r1, r6
    518a:	4628      	mov	r0, r5
    518c:	4b78      	ldr	r3, [pc, #480]	; (5370 <lv_obj_init_draw_rect_dsc+0x2b8>)
    518e:	4798      	blx	r3
            draw_dsc->bg_color = lv_obj_get_style_bg_color(obj, part);
    5190:	8060      	strh	r0, [r4, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
    5192:	2223      	movs	r2, #35	; 0x23
    5194:	4631      	mov	r1, r6
    5196:	4628      	mov	r0, r5
    5198:	4b73      	ldr	r3, [pc, #460]	; (5368 <lv_obj_init_draw_rect_dsc+0x2b0>)
    519a:	4798      	blx	r3
    519c:	b2c0      	uxtb	r0, r0
            draw_dsc->bg_grad_dir =  lv_obj_get_style_bg_grad_dir(obj, part);
    519e:	71a0      	strb	r0, [r4, #6]
            if(draw_dsc->bg_grad_dir != LV_GRAD_DIR_NONE) {
    51a0:	b930      	cbnz	r0, 51b0 <lv_obj_init_draw_rect_dsc+0xf8>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
    51a2:	2220      	movs	r2, #32
    51a4:	4631      	mov	r1, r6
    51a6:	4628      	mov	r0, r5
    51a8:	4b6f      	ldr	r3, [pc, #444]	; (5368 <lv_obj_init_draw_rect_dsc+0x2b0>)
    51aa:	4798      	blx	r3
    51ac:	7360      	strb	r0, [r4, #13]
    51ae:	e798      	b.n	50e2 <lv_obj_init_draw_rect_dsc+0x2a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
    51b0:	222a      	movs	r2, #42	; 0x2a
    51b2:	4631      	mov	r1, r6
    51b4:	4628      	mov	r0, r5
    51b6:	4b6e      	ldr	r3, [pc, #440]	; (5370 <lv_obj_init_draw_rect_dsc+0x2b8>)
    51b8:	4798      	blx	r3
                draw_dsc->bg_grad_color = lv_obj_get_style_bg_grad_color(obj, part);
    51ba:	80a0      	strh	r0, [r4, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
    51bc:	2221      	movs	r2, #33	; 0x21
    51be:	4631      	mov	r1, r6
    51c0:	4628      	mov	r0, r5
    51c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 5368 <lv_obj_init_draw_rect_dsc+0x2b0>
    51c6:	47c0      	blx	r8
                draw_dsc->bg_main_color_stop =  lv_obj_get_style_bg_main_stop(obj, part);
    51c8:	8120      	strh	r0, [r4, #8]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
    51ca:	2222      	movs	r2, #34	; 0x22
    51cc:	4631      	mov	r1, r6
    51ce:	4628      	mov	r0, r5
    51d0:	47c0      	blx	r8
                draw_dsc->bg_grad_color_stop =  lv_obj_get_style_bg_grad_stop(obj, part);
    51d2:	8160      	strh	r0, [r4, #10]
    51d4:	e7e5      	b.n	51a2 <lv_obj_init_draw_rect_dsc+0xea>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
    51d6:	2230      	movs	r2, #48	; 0x30
    51d8:	4631      	mov	r1, r6
    51da:	4628      	mov	r0, r5
    51dc:	4b62      	ldr	r3, [pc, #392]	; (5368 <lv_obj_init_draw_rect_dsc+0x2b0>)
    51de:	4798      	blx	r3
        draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
    51e0:	8220      	strh	r0, [r4, #16]
        if(draw_dsc->border_width) {
    51e2:	2800      	cmp	r0, #0
    51e4:	d080      	beq.n	50e8 <lv_obj_init_draw_rect_dsc+0x30>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
    51e6:	223c      	movs	r2, #60	; 0x3c
    51e8:	4631      	mov	r1, r6
    51ea:	4628      	mov	r0, r5
    51ec:	4b5f      	ldr	r3, [pc, #380]	; (536c <lv_obj_init_draw_rect_dsc+0x2b4>)
    51ee:	4798      	blx	r3
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
    51f0:	7520      	strb	r0, [r4, #20]
            if(draw_dsc->border_opa > LV_OPA_MIN) {
    51f2:	2805      	cmp	r0, #5
    51f4:	d806      	bhi.n	5204 <lv_obj_init_draw_rect_dsc+0x14c>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
    51f6:	2232      	movs	r2, #50	; 0x32
    51f8:	4631      	mov	r1, r6
    51fa:	4628      	mov	r0, r5
    51fc:	4b5a      	ldr	r3, [pc, #360]	; (5368 <lv_obj_init_draw_rect_dsc+0x2b0>)
    51fe:	4798      	blx	r3
    5200:	7560      	strb	r0, [r4, #21]
    5202:	e771      	b.n	50e8 <lv_obj_init_draw_rect_dsc+0x30>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
    5204:	2231      	movs	r2, #49	; 0x31
    5206:	4631      	mov	r1, r6
    5208:	4628      	mov	r0, r5
    520a:	4b57      	ldr	r3, [pc, #348]	; (5368 <lv_obj_init_draw_rect_dsc+0x2b0>)
    520c:	4798      	blx	r3
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
    520e:	b2c0      	uxtb	r0, r0
    5210:	8260      	strh	r0, [r4, #18]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
    5212:	2239      	movs	r2, #57	; 0x39
    5214:	4631      	mov	r1, r6
    5216:	4628      	mov	r0, r5
    5218:	4b55      	ldr	r3, [pc, #340]	; (5370 <lv_obj_init_draw_rect_dsc+0x2b8>)
    521a:	4798      	blx	r3
                draw_dsc->border_color = lv_obj_get_style_border_color(obj, part);
    521c:	81e0      	strh	r0, [r4, #14]
    521e:	e7ea      	b.n	51f6 <lv_obj_init_draw_rect_dsc+0x13e>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
    5220:	2240      	movs	r2, #64	; 0x40
    5222:	4631      	mov	r1, r6
    5224:	4628      	mov	r0, r5
    5226:	4b50      	ldr	r3, [pc, #320]	; (5368 <lv_obj_init_draw_rect_dsc+0x2b0>)
    5228:	4798      	blx	r3
        draw_dsc->outline_width = lv_obj_get_style_outline_width(obj, part);
    522a:	8320      	strh	r0, [r4, #24]
        if(draw_dsc->outline_width) {
    522c:	2800      	cmp	r0, #0
    522e:	f43f af5f 	beq.w	50f0 <lv_obj_init_draw_rect_dsc+0x38>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
    5232:	224c      	movs	r2, #76	; 0x4c
    5234:	4631      	mov	r1, r6
    5236:	4628      	mov	r0, r5
    5238:	4b4c      	ldr	r3, [pc, #304]	; (536c <lv_obj_init_draw_rect_dsc+0x2b4>)
    523a:	4798      	blx	r3
            draw_dsc->outline_opa = lv_obj_get_style_outline_opa(obj, part);
    523c:	7720      	strb	r0, [r4, #28]
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
    523e:	2805      	cmp	r0, #5
    5240:	d806      	bhi.n	5250 <lv_obj_init_draw_rect_dsc+0x198>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_BLEND_MODE, outline_blend_mode, lv_blend_mode_t, _int, scalar)
    5242:	2242      	movs	r2, #66	; 0x42
    5244:	4631      	mov	r1, r6
    5246:	4628      	mov	r0, r5
    5248:	4b47      	ldr	r3, [pc, #284]	; (5368 <lv_obj_init_draw_rect_dsc+0x2b0>)
    524a:	4798      	blx	r3
    524c:	7760      	strb	r0, [r4, #29]
    524e:	e74f      	b.n	50f0 <lv_obj_init_draw_rect_dsc+0x38>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
    5250:	2241      	movs	r2, #65	; 0x41
    5252:	4631      	mov	r1, r6
    5254:	4628      	mov	r0, r5
    5256:	4b44      	ldr	r3, [pc, #272]	; (5368 <lv_obj_init_draw_rect_dsc+0x2b0>)
    5258:	4798      	blx	r3
                draw_dsc->outline_pad = lv_obj_get_style_outline_pad(obj, part);
    525a:	8360      	strh	r0, [r4, #26]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
    525c:	2249      	movs	r2, #73	; 0x49
    525e:	4631      	mov	r1, r6
    5260:	4628      	mov	r0, r5
    5262:	4b43      	ldr	r3, [pc, #268]	; (5370 <lv_obj_init_draw_rect_dsc+0x2b8>)
    5264:	4798      	blx	r3
                draw_dsc->outline_color = lv_obj_get_style_outline_color(obj, part);
    5266:	82e0      	strh	r0, [r4, #22]
    5268:	e7eb      	b.n	5242 <lv_obj_init_draw_rect_dsc+0x18a>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
    526a:	226e      	movs	r2, #110	; 0x6e
    526c:	4631      	mov	r1, r6
    526e:	4628      	mov	r0, r5
    5270:	4b40      	ldr	r3, [pc, #256]	; (5374 <lv_obj_init_draw_rect_dsc+0x2bc>)
    5272:	4798      	blx	r3
        draw_dsc->pattern_image = lv_obj_get_style_pattern_image(obj, part);
    5274:	62e0      	str	r0, [r4, #44]	; 0x2c
        if(draw_dsc->pattern_image) {
    5276:	2800      	cmp	r0, #0
    5278:	f43f af3f 	beq.w	50fa <lv_obj_init_draw_rect_dsc+0x42>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_OPA, pattern_opa, lv_opa_t, _opa, scalar)
    527c:	226c      	movs	r2, #108	; 0x6c
    527e:	4631      	mov	r1, r6
    5280:	4628      	mov	r0, r5
    5282:	4b3a      	ldr	r3, [pc, #232]	; (536c <lv_obj_init_draw_rect_dsc+0x2b4>)
    5284:	4798      	blx	r3
            draw_dsc->pattern_opa = lv_obj_get_style_pattern_opa(obj, part);
    5286:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
            if(draw_dsc->pattern_opa > LV_OPA_MIN) {
    528a:	2805      	cmp	r0, #5
    528c:	f67f af35 	bls.w	50fa <lv_obj_init_draw_rect_dsc+0x42>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR_OPA, pattern_recolor_opa, lv_opa_t, _opa, scalar)
    5290:	226d      	movs	r2, #109	; 0x6d
    5292:	4631      	mov	r1, r6
    5294:	4628      	mov	r0, r5
    5296:	4b35      	ldr	r3, [pc, #212]	; (536c <lv_obj_init_draw_rect_dsc+0x2b4>)
    5298:	4798      	blx	r3
                draw_dsc->pattern_recolor_opa = lv_obj_get_style_pattern_recolor_opa(obj, part);
    529a:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_REPEAT, pattern_repeat, bool, _int, scalar)
    529e:	2261      	movs	r2, #97	; 0x61
    52a0:	4631      	mov	r1, r6
    52a2:	4628      	mov	r0, r5
    52a4:	4b30      	ldr	r3, [pc, #192]	; (5368 <lv_obj_init_draw_rect_dsc+0x2b0>)
    52a6:	4798      	blx	r3
    52a8:	3000      	adds	r0, #0
    52aa:	bf18      	it	ne
    52ac:	2001      	movne	r0, #1
                draw_dsc->pattern_repeat = lv_obj_get_style_pattern_repeat(obj, part);
    52ae:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    52b2:	f360 0300 	bfi	r3, r0, #0, #1
    52b6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
                if(lv_img_src_get_type(draw_dsc->pattern_image) == LV_IMG_SRC_SYMBOL) {
    52ba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    52bc:	4b2e      	ldr	r3, [pc, #184]	; (5378 <lv_obj_init_draw_rect_dsc+0x2c0>)
    52be:	4798      	blx	r3
    52c0:	2802      	cmp	r0, #2
    52c2:	d00b      	beq.n	52dc <lv_obj_init_draw_rect_dsc+0x224>
                else if(draw_dsc->pattern_recolor_opa > LV_OPA_MIN) {
    52c4:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
    52c8:	2b05      	cmp	r3, #5
    52ca:	d815      	bhi.n	52f8 <lv_obj_init_draw_rect_dsc+0x240>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_BLEND_MODE, pattern_blend_mode, lv_blend_mode_t, _int, scalar)
    52cc:	2260      	movs	r2, #96	; 0x60
    52ce:	4631      	mov	r1, r6
    52d0:	4628      	mov	r0, r5
    52d2:	4b25      	ldr	r3, [pc, #148]	; (5368 <lv_obj_init_draw_rect_dsc+0x2b0>)
    52d4:	4798      	blx	r3
    52d6:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
    52da:	e70e      	b.n	50fa <lv_obj_init_draw_rect_dsc+0x42>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
    52dc:	2269      	movs	r2, #105	; 0x69
    52de:	4631      	mov	r1, r6
    52e0:	4628      	mov	r0, r5
    52e2:	4b23      	ldr	r3, [pc, #140]	; (5370 <lv_obj_init_draw_rect_dsc+0x2b8>)
    52e4:	4798      	blx	r3
                    draw_dsc->pattern_recolor = lv_obj_get_style_pattern_recolor(obj, part);
    52e6:	86a0      	strh	r0, [r4, #52]	; 0x34
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
    52e8:	f248 028e 	movw	r2, #32910	; 0x808e
    52ec:	4631      	mov	r1, r6
    52ee:	4628      	mov	r0, r5
    52f0:	4b20      	ldr	r3, [pc, #128]	; (5374 <lv_obj_init_draw_rect_dsc+0x2bc>)
    52f2:	4798      	blx	r3
                    draw_dsc->pattern_font = lv_obj_get_style_text_font(obj, part);
    52f4:	6320      	str	r0, [r4, #48]	; 0x30
    52f6:	e7e9      	b.n	52cc <lv_obj_init_draw_rect_dsc+0x214>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
    52f8:	2269      	movs	r2, #105	; 0x69
    52fa:	4631      	mov	r1, r6
    52fc:	4628      	mov	r0, r5
    52fe:	4b1c      	ldr	r3, [pc, #112]	; (5370 <lv_obj_init_draw_rect_dsc+0x2b8>)
    5300:	4798      	blx	r3
                    draw_dsc->pattern_recolor = lv_obj_get_style_pattern_recolor(obj, part);
    5302:	86a0      	strh	r0, [r4, #52]	; 0x34
    5304:	e7e2      	b.n	52cc <lv_obj_init_draw_rect_dsc+0x214>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
    5306:	2250      	movs	r2, #80	; 0x50
    5308:	4631      	mov	r1, r6
    530a:	4628      	mov	r0, r5
    530c:	4b16      	ldr	r3, [pc, #88]	; (5368 <lv_obj_init_draw_rect_dsc+0x2b0>)
    530e:	4798      	blx	r3
        draw_dsc->shadow_width = lv_obj_get_style_shadow_width(obj, part);
    5310:	8420      	strh	r0, [r4, #32]
        if(draw_dsc->shadow_width) {
    5312:	2800      	cmp	r0, #0
    5314:	f43f aef6 	beq.w	5104 <lv_obj_init_draw_rect_dsc+0x4c>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa, scalar)
    5318:	225c      	movs	r2, #92	; 0x5c
    531a:	4631      	mov	r1, r6
    531c:	4628      	mov	r0, r5
    531e:	4b13      	ldr	r3, [pc, #76]	; (536c <lv_obj_init_draw_rect_dsc+0x2b4>)
    5320:	4798      	blx	r3
            draw_dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, part);
    5322:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
            if(draw_dsc->shadow_opa > LV_OPA_MIN) {
    5326:	2805      	cmp	r0, #5
    5328:	f67f aeec 	bls.w	5104 <lv_obj_init_draw_rect_dsc+0x4c>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
    532c:	2251      	movs	r2, #81	; 0x51
    532e:	4631      	mov	r1, r6
    5330:	4628      	mov	r0, r5
    5332:	f8df 8034 	ldr.w	r8, [pc, #52]	; 5368 <lv_obj_init_draw_rect_dsc+0x2b0>
    5336:	47c0      	blx	r8
                draw_dsc->shadow_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
    5338:	8460      	strh	r0, [r4, #34]	; 0x22
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
    533a:	2252      	movs	r2, #82	; 0x52
    533c:	4631      	mov	r1, r6
    533e:	4628      	mov	r0, r5
    5340:	47c0      	blx	r8
                draw_dsc->shadow_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
    5342:	84a0      	strh	r0, [r4, #36]	; 0x24
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
    5344:	2253      	movs	r2, #83	; 0x53
    5346:	4631      	mov	r1, r6
    5348:	4628      	mov	r0, r5
    534a:	47c0      	blx	r8
                draw_dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, part);
    534c:	84e0      	strh	r0, [r4, #38]	; 0x26
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
    534e:	2259      	movs	r2, #89	; 0x59
    5350:	4631      	mov	r1, r6
    5352:	4628      	mov	r0, r5
    5354:	4b06      	ldr	r3, [pc, #24]	; (5370 <lv_obj_init_draw_rect_dsc+0x2b8>)
    5356:	4798      	blx	r3
                draw_dsc->shadow_color = lv_obj_get_style_shadow_color(obj, part);
    5358:	83e0      	strh	r0, [r4, #30]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_BLEND_MODE, shadow_blend_mode, lv_blend_mode_t, _int, scalar)
    535a:	2254      	movs	r2, #84	; 0x54
    535c:	4631      	mov	r1, r6
    535e:	4628      	mov	r0, r5
    5360:	47c0      	blx	r8
    5362:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    5366:	e6cd      	b.n	5104 <lv_obj_init_draw_rect_dsc+0x4c>
    5368:	000044c9 	.word	0x000044c9
    536c:	00004601 	.word	0x00004601
    5370:	00004575 	.word	0x00004575
    5374:	00004695 	.word	0x00004695
    5378:	0000995d 	.word	0x0000995d
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
    537c:	227f      	movs	r2, #127	; 0x7f
    537e:	4631      	mov	r1, r6
    5380:	4628      	mov	r0, r5
    5382:	4b22      	ldr	r3, [pc, #136]	; (540c <lv_obj_init_draw_rect_dsc+0x354>)
    5384:	4798      	blx	r3
        draw_dsc->value_str = lv_obj_get_style_value_str(obj, part);
    5386:	63e0      	str	r0, [r4, #60]	; 0x3c
        if(draw_dsc->value_str) {
    5388:	2800      	cmp	r0, #0
    538a:	f43f aec0 	beq.w	510e <lv_obj_init_draw_rect_dsc+0x56>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
    538e:	227c      	movs	r2, #124	; 0x7c
    5390:	4631      	mov	r1, r6
    5392:	4628      	mov	r0, r5
    5394:	4b1e      	ldr	r3, [pc, #120]	; (5410 <lv_obj_init_draw_rect_dsc+0x358>)
    5396:	4798      	blx	r3
            draw_dsc->value_opa = lv_obj_get_style_value_opa(obj, part);
    5398:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
            if(draw_dsc->value_opa > LV_OPA_MIN) {
    539c:	2805      	cmp	r0, #5
    539e:	f67f aeb6 	bls.w	510e <lv_obj_init_draw_rect_dsc+0x56>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
    53a2:	2273      	movs	r2, #115	; 0x73
    53a4:	4631      	mov	r1, r6
    53a6:	4628      	mov	r0, r5
    53a8:	f8df 806c 	ldr.w	r8, [pc, #108]	; 5418 <lv_obj_init_draw_rect_dsc+0x360>
    53ac:	47c0      	blx	r8
                draw_dsc->value_ofs_x = lv_obj_get_style_value_ofs_x(obj, part);
    53ae:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
    53b2:	2274      	movs	r2, #116	; 0x74
    53b4:	4631      	mov	r1, r6
    53b6:	4628      	mov	r0, r5
    53b8:	47c0      	blx	r8
                draw_dsc->value_ofs_y = lv_obj_get_style_value_ofs_y(obj, part);
    53ba:	f8a4 004a 	strh.w	r0, [r4, #74]	; 0x4a
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
    53be:	2279      	movs	r2, #121	; 0x79
    53c0:	4631      	mov	r1, r6
    53c2:	4628      	mov	r0, r5
    53c4:	4b13      	ldr	r3, [pc, #76]	; (5414 <lv_obj_init_draw_rect_dsc+0x35c>)
    53c6:	4798      	blx	r3
                draw_dsc->value_color = lv_obj_get_style_value_color(obj, part);
    53c8:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
    53cc:	227e      	movs	r2, #126	; 0x7e
    53ce:	4631      	mov	r1, r6
    53d0:	4628      	mov	r0, r5
    53d2:	4b0e      	ldr	r3, [pc, #56]	; (540c <lv_obj_init_draw_rect_dsc+0x354>)
    53d4:	4798      	blx	r3
                draw_dsc->value_font = lv_obj_get_style_value_font(obj, part);
    53d6:	6420      	str	r0, [r4, #64]	; 0x40
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
    53d8:	2270      	movs	r2, #112	; 0x70
    53da:	4631      	mov	r1, r6
    53dc:	4628      	mov	r0, r5
    53de:	47c0      	blx	r8
                draw_dsc->value_letter_space = lv_obj_get_style_value_letter_space(obj, part);
    53e0:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LINE_SPACE, value_line_space, lv_style_int_t, _int, scalar)
    53e4:	2271      	movs	r2, #113	; 0x71
    53e6:	4631      	mov	r1, r6
    53e8:	4628      	mov	r0, r5
    53ea:	47c0      	blx	r8
                draw_dsc->value_line_space = lv_obj_get_style_value_line_space(obj, part);
    53ec:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
    53f0:	2275      	movs	r2, #117	; 0x75
    53f2:	4631      	mov	r1, r6
    53f4:	4628      	mov	r0, r5
    53f6:	47c0      	blx	r8
    53f8:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int, scalar)
    53fc:	2272      	movs	r2, #114	; 0x72
    53fe:	4631      	mov	r1, r6
    5400:	4628      	mov	r0, r5
    5402:	47c0      	blx	r8
    5404:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
    5408:	e681      	b.n	510e <lv_obj_init_draw_rect_dsc+0x56>
    540a:	bf00      	nop
    540c:	00004695 	.word	0x00004695
    5410:	00004601 	.word	0x00004601
    5414:	00004575 	.word	0x00004575
    5418:	000044c9 	.word	0x000044c9

0000541c <lv_obj_design>:
{
    541c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5420:	b098      	sub	sp, #96	; 0x60
    5422:	4604      	mov	r4, r0
    5424:	460e      	mov	r6, r1
    if(mode == LV_DESIGN_COVER_CHK) {
    5426:	2a02      	cmp	r2, #2
    5428:	d008      	beq.n	543c <lv_obj_design+0x20>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
    542a:	2a00      	cmp	r2, #0
    542c:	d06c      	beq.n	5508 <lv_obj_design+0xec>
    else if(mode == LV_DESIGN_DRAW_POST) {
    542e:	2a01      	cmp	r2, #1
    5430:	f000 80cc 	beq.w	55cc <lv_obj_design+0x1b0>
    return LV_DESIGN_RES_OK;
    5434:	2000      	movs	r0, #0
}
    5436:	b018      	add	sp, #96	; 0x60
    5438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
    543c:	2100      	movs	r1, #0
    543e:	4b8e      	ldr	r3, [pc, #568]	; (5678 <lv_obj_design+0x25c>)
    5440:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) return LV_DESIGN_RES_MASKED;
    5442:	b108      	cbz	r0, 5448 <lv_obj_design+0x2c>
    5444:	2003      	movs	r0, #3
    5446:	e7f6      	b.n	5436 <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
    5448:	2201      	movs	r2, #1
    544a:	2100      	movs	r1, #0
    544c:	4620      	mov	r0, r4
    544e:	4d8a      	ldr	r5, [pc, #552]	; (5678 <lv_obj_design+0x25c>)
    5450:	47a8      	blx	r5
    5452:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
    5454:	2204      	movs	r2, #4
    5456:	2100      	movs	r1, #0
    5458:	4620      	mov	r0, r4
    545a:	47a8      	blx	r5
    545c:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
    545e:	2205      	movs	r2, #5
    5460:	2100      	movs	r1, #0
    5462:	4620      	mov	r0, r4
    5464:	47a8      	blx	r5
    5466:	f104 030f 	add.w	r3, r4, #15
    546a:	f104 0517 	add.w	r5, r4, #23
    uint8_t * d8 = (uint8_t *)dst;
    546e:	aa03      	add	r2, sp, #12
        *d8 = *s8;
    5470:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    5474:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    5478:	429d      	cmp	r5, r3
    547a:	d1f9      	bne.n	5470 <lv_obj_design+0x54>
        coords.x1 -= w;
    547c:	fa1f f888 	uxth.w	r8, r8
    5480:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    5484:	eba3 0308 	sub.w	r3, r3, r8
    5488:	f8ad 300c 	strh.w	r3, [sp, #12]
        coords.x2 += w;
    548c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    5490:	4498      	add	r8, r3
    5492:	f8ad 8010 	strh.w	r8, [sp, #16]
        coords.y1 -= h;
    5496:	b280      	uxth	r0, r0
    5498:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    549c:	1a1b      	subs	r3, r3, r0
    549e:	f8ad 300e 	strh.w	r3, [sp, #14]
        coords.y2 += h;
    54a2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    54a6:	4418      	add	r0, r3
    54a8:	f8ad 0012 	strh.w	r0, [sp, #18]
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
    54ac:	463a      	mov	r2, r7
    54ae:	a903      	add	r1, sp, #12
    54b0:	4630      	mov	r0, r6
    54b2:	4b72      	ldr	r3, [pc, #456]	; (567c <lv_obj_design+0x260>)
    54b4:	4798      	blx	r3
    54b6:	b908      	cbnz	r0, 54bc <lv_obj_design+0xa0>
    54b8:	2002      	movs	r0, #2
    54ba:	e7bc      	b.n	5436 <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
    54bc:	222c      	movs	r2, #44	; 0x2c
    54be:	2100      	movs	r1, #0
    54c0:	4620      	mov	r0, r4
    54c2:	4b6f      	ldr	r3, [pc, #444]	; (5680 <lv_obj_design+0x264>)
    54c4:	4798      	blx	r3
        if(lv_obj_get_style_bg_opa(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
    54c6:	28f9      	cmp	r0, #249	; 0xf9
    54c8:	d801      	bhi.n	54ce <lv_obj_design+0xb2>
    54ca:	2002      	movs	r0, #2
    54cc:	e7b3      	b.n	5436 <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
    54ce:	2220      	movs	r2, #32
    54d0:	2100      	movs	r1, #0
    54d2:	4620      	mov	r0, r4
    54d4:	4b68      	ldr	r3, [pc, #416]	; (5678 <lv_obj_design+0x25c>)
    54d6:	4798      	blx	r3
        if(lv_obj_get_style_bg_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
    54d8:	b2c0      	uxtb	r0, r0
    54da:	b108      	cbz	r0, 54e0 <lv_obj_design+0xc4>
    54dc:	2002      	movs	r0, #2
    54de:	e7aa      	b.n	5436 <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
    54e0:	2232      	movs	r2, #50	; 0x32
    54e2:	2100      	movs	r1, #0
    54e4:	4620      	mov	r0, r4
    54e6:	4b64      	ldr	r3, [pc, #400]	; (5678 <lv_obj_design+0x25c>)
    54e8:	4798      	blx	r3
        if(lv_obj_get_style_border_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
    54ea:	b2c0      	uxtb	r0, r0
    54ec:	b108      	cbz	r0, 54f2 <lv_obj_design+0xd6>
    54ee:	2002      	movs	r0, #2
    54f0:	e7a1      	b.n	5436 <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
    54f2:	f248 020c 	movw	r2, #32780	; 0x800c
    54f6:	2100      	movs	r1, #0
    54f8:	4620      	mov	r0, r4
    54fa:	4b61      	ldr	r3, [pc, #388]	; (5680 <lv_obj_design+0x264>)
    54fc:	4798      	blx	r3
        return  LV_DESIGN_RES_COVER;
    54fe:	28fa      	cmp	r0, #250	; 0xfa
    5500:	bf34      	ite	cc
    5502:	2002      	movcc	r0, #2
    5504:	2001      	movcs	r0, #1
    5506:	e796      	b.n	5436 <lv_obj_design+0x1a>
        lv_draw_rect_dsc_init(&draw_dsc);
    5508:	a803      	add	r0, sp, #12
    550a:	4b5e      	ldr	r3, [pc, #376]	; (5684 <lv_obj_design+0x268>)
    550c:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
    550e:	2233      	movs	r2, #51	; 0x33
    5510:	2100      	movs	r1, #0
    5512:	4620      	mov	r0, r4
    5514:	4b58      	ldr	r3, [pc, #352]	; (5678 <lv_obj_design+0x25c>)
    5516:	4798      	blx	r3
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
    5518:	b110      	cbz	r0, 5520 <lv_obj_design+0x104>
            draw_dsc.border_opa = LV_OPA_TRANSP;
    551a:	2300      	movs	r3, #0
    551c:	f88d 3020 	strb.w	r3, [sp, #32]
        lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
    5520:	aa03      	add	r2, sp, #12
    5522:	2100      	movs	r1, #0
    5524:	4620      	mov	r0, r4
    5526:	4b58      	ldr	r3, [pc, #352]	; (5688 <lv_obj_design+0x26c>)
    5528:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
    552a:	2204      	movs	r2, #4
    552c:	2100      	movs	r1, #0
    552e:	4620      	mov	r0, r4
    5530:	4d51      	ldr	r5, [pc, #324]	; (5678 <lv_obj_design+0x25c>)
    5532:	47a8      	blx	r5
    5534:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
    5536:	2205      	movs	r2, #5
    5538:	2100      	movs	r1, #0
    553a:	4620      	mov	r0, r4
    553c:	47a8      	blx	r5
        lv_area_copy(&coords, &obj->coords);
    553e:	f104 0710 	add.w	r7, r4, #16
    5542:	f104 030f 	add.w	r3, r4, #15
    5546:	f104 0517 	add.w	r5, r4, #23
    uint8_t * d8 = (uint8_t *)dst;
    554a:	aa01      	add	r2, sp, #4
        *d8 = *s8;
    554c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    5550:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    5554:	42ab      	cmp	r3, r5
    5556:	d1f9      	bne.n	554c <lv_obj_design+0x130>
        coords.x1 -= w;
    5558:	fa1f f888 	uxth.w	r8, r8
    555c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    5560:	eba3 0308 	sub.w	r3, r3, r8
    5564:	f8ad 3004 	strh.w	r3, [sp, #4]
        coords.x2 += w;
    5568:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    556c:	4498      	add	r8, r3
    556e:	f8ad 8008 	strh.w	r8, [sp, #8]
        coords.y1 -= h;
    5572:	b280      	uxth	r0, r0
    5574:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5578:	1a1b      	subs	r3, r3, r0
    557a:	f8ad 3006 	strh.w	r3, [sp, #6]
        coords.y2 += h;
    557e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5582:	4418      	add	r0, r3
    5584:	f8ad 000a 	strh.w	r0, [sp, #10]
        lv_draw_rect(&coords, clip_area, &draw_dsc);
    5588:	aa03      	add	r2, sp, #12
    558a:	4631      	mov	r1, r6
    558c:	a801      	add	r0, sp, #4
    558e:	4b3f      	ldr	r3, [pc, #252]	; (568c <lv_obj_design+0x270>)
    5590:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
    5592:	2202      	movs	r2, #2
    5594:	2100      	movs	r1, #0
    5596:	4620      	mov	r0, r4
    5598:	4b37      	ldr	r3, [pc, #220]	; (5678 <lv_obj_design+0x25c>)
    559a:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
    559c:	b908      	cbnz	r0, 55a2 <lv_obj_design+0x186>
    return LV_DESIGN_RES_OK;
    559e:	2000      	movs	r0, #0
    55a0:	e749      	b.n	5436 <lv_obj_design+0x1a>
            lv_draw_mask_radius_param_t * mp = _lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
    55a2:	201c      	movs	r0, #28
    55a4:	4b3a      	ldr	r3, [pc, #232]	; (5690 <lv_obj_design+0x274>)
    55a6:	4798      	blx	r3
    55a8:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
    55aa:	2201      	movs	r2, #1
    55ac:	2100      	movs	r1, #0
    55ae:	4620      	mov	r0, r4
    55b0:	4b31      	ldr	r3, [pc, #196]	; (5678 <lv_obj_design+0x25c>)
    55b2:	4798      	blx	r3
            lv_draw_mask_radius_init(mp, &obj->coords, r, false);
    55b4:	2300      	movs	r3, #0
    55b6:	4602      	mov	r2, r0
    55b8:	4639      	mov	r1, r7
    55ba:	4628      	mov	r0, r5
    55bc:	4e35      	ldr	r6, [pc, #212]	; (5694 <lv_obj_design+0x278>)
    55be:	47b0      	blx	r6
            lv_draw_mask_add(mp, obj + 8);
    55c0:	f504 7118 	add.w	r1, r4, #608	; 0x260
    55c4:	4628      	mov	r0, r5
    55c6:	4b34      	ldr	r3, [pc, #208]	; (5698 <lv_obj_design+0x27c>)
    55c8:	4798      	blx	r3
    55ca:	e7e8      	b.n	559e <lv_obj_design+0x182>
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
    55cc:	2202      	movs	r2, #2
    55ce:	2100      	movs	r1, #0
    55d0:	4b29      	ldr	r3, [pc, #164]	; (5678 <lv_obj_design+0x25c>)
    55d2:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
    55d4:	b938      	cbnz	r0, 55e6 <lv_obj_design+0x1ca>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
    55d6:	2233      	movs	r2, #51	; 0x33
    55d8:	2100      	movs	r1, #0
    55da:	4620      	mov	r0, r4
    55dc:	4b26      	ldr	r3, [pc, #152]	; (5678 <lv_obj_design+0x25c>)
    55de:	4798      	blx	r3
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
    55e0:	b940      	cbnz	r0, 55f4 <lv_obj_design+0x1d8>
    return LV_DESIGN_RES_OK;
    55e2:	2000      	movs	r0, #0
    55e4:	e727      	b.n	5436 <lv_obj_design+0x1a>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
    55e6:	f504 7018 	add.w	r0, r4, #608	; 0x260
    55ea:	4b2c      	ldr	r3, [pc, #176]	; (569c <lv_obj_design+0x280>)
    55ec:	4798      	blx	r3
            _lv_mem_buf_release(param);
    55ee:	4b2c      	ldr	r3, [pc, #176]	; (56a0 <lv_obj_design+0x284>)
    55f0:	4798      	blx	r3
    55f2:	e7f0      	b.n	55d6 <lv_obj_design+0x1ba>
            lv_draw_rect_dsc_init(&draw_dsc);
    55f4:	a803      	add	r0, sp, #12
    55f6:	4b23      	ldr	r3, [pc, #140]	; (5684 <lv_obj_design+0x268>)
    55f8:	4798      	blx	r3
            draw_dsc.bg_opa = LV_OPA_TRANSP;
    55fa:	2700      	movs	r7, #0
    55fc:	f88d 7018 	strb.w	r7, [sp, #24]
            draw_dsc.pattern_opa = LV_OPA_TRANSP;
    5600:	f88d 7042 	strb.w	r7, [sp, #66]	; 0x42
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
    5604:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
            lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
    5608:	aa03      	add	r2, sp, #12
    560a:	4639      	mov	r1, r7
    560c:	4620      	mov	r0, r4
    560e:	4b1e      	ldr	r3, [pc, #120]	; (5688 <lv_obj_design+0x26c>)
    5610:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
    5612:	2204      	movs	r2, #4
    5614:	4639      	mov	r1, r7
    5616:	4620      	mov	r0, r4
    5618:	4d17      	ldr	r5, [pc, #92]	; (5678 <lv_obj_design+0x25c>)
    561a:	47a8      	blx	r5
    561c:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
    561e:	2205      	movs	r2, #5
    5620:	4639      	mov	r1, r7
    5622:	4620      	mov	r0, r4
    5624:	47a8      	blx	r5
    5626:	f104 030f 	add.w	r3, r4, #15
    562a:	3417      	adds	r4, #23
    uint8_t * d8 = (uint8_t *)dst;
    562c:	aa01      	add	r2, sp, #4
        *d8 = *s8;
    562e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    5632:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    5636:	42a3      	cmp	r3, r4
    5638:	d1f9      	bne.n	562e <lv_obj_design+0x212>
            coords.x1 -= w;
    563a:	fa1f f388 	uxth.w	r3, r8
    563e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    5642:	1ad2      	subs	r2, r2, r3
    5644:	f8ad 2004 	strh.w	r2, [sp, #4]
            coords.x2 += w;
    5648:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    564c:	4413      	add	r3, r2
    564e:	f8ad 3008 	strh.w	r3, [sp, #8]
            coords.y1 -= h;
    5652:	b280      	uxth	r0, r0
    5654:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5658:	1a1b      	subs	r3, r3, r0
    565a:	f8ad 3006 	strh.w	r3, [sp, #6]
            coords.y2 += h;
    565e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5662:	4418      	add	r0, r3
    5664:	f8ad 000a 	strh.w	r0, [sp, #10]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
    5668:	aa03      	add	r2, sp, #12
    566a:	4631      	mov	r1, r6
    566c:	a801      	add	r0, sp, #4
    566e:	4b07      	ldr	r3, [pc, #28]	; (568c <lv_obj_design+0x270>)
    5670:	4798      	blx	r3
    return LV_DESIGN_RES_OK;
    5672:	2000      	movs	r0, #0
    5674:	e6df      	b.n	5436 <lv_obj_design+0x1a>
    5676:	bf00      	nop
    5678:	000044c9 	.word	0x000044c9
    567c:	00011761 	.word	0x00011761
    5680:	00004601 	.word	0x00004601
    5684:	0000c25d 	.word	0x0000c25d
    5688:	000050b9 	.word	0x000050b9
    568c:	0000c325 	.word	0x0000c325
    5690:	00012931 	.word	0x00012931
    5694:	0000c021 	.word	0x0000c021
    5698:	0000bdb5 	.word	0x0000bdb5
    569c:	0000be85 	.word	0x0000be85
    56a0:	00012565 	.word	0x00012565

000056a4 <lv_obj_init_draw_label_dsc>:
{
    56a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    56a6:	4605      	mov	r5, r0
    56a8:	460e      	mov	r6, r1
    56aa:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
    56ac:	f248 028c 	movw	r2, #32908	; 0x808c
    56b0:	4b26      	ldr	r3, [pc, #152]	; (574c <lv_obj_init_draw_label_dsc+0xa8>)
    56b2:	4798      	blx	r3
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
    56b4:	7220      	strb	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
    56b6:	2805      	cmp	r0, #5
    56b8:	d800      	bhi.n	56bc <lv_obj_init_draw_label_dsc+0x18>
    56ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
    56bc:	f248 020c 	movw	r2, #32780	; 0x800c
    56c0:	4631      	mov	r1, r6
    56c2:	4628      	mov	r0, r5
    56c4:	4b21      	ldr	r3, [pc, #132]	; (574c <lv_obj_init_draw_label_dsc+0xa8>)
    56c6:	4798      	blx	r3
    if(opa_scale < LV_OPA_MAX) {
    56c8:	28f9      	cmp	r0, #249	; 0xf9
    56ca:	d805      	bhi.n	56d8 <lv_obj_init_draw_label_dsc+0x34>
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
    56cc:	7a23      	ldrb	r3, [r4, #8]
    56ce:	fb13 f000 	smulbb	r0, r3, r0
    56d2:	f3c0 2007 	ubfx	r0, r0, #8, #8
    56d6:	7220      	strb	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
    56d8:	7a23      	ldrb	r3, [r4, #8]
    56da:	2b05      	cmp	r3, #5
    56dc:	d9ed      	bls.n	56ba <lv_obj_init_draw_label_dsc+0x16>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
    56de:	f248 0289 	movw	r2, #32905	; 0x8089
    56e2:	4631      	mov	r1, r6
    56e4:	4628      	mov	r0, r5
    56e6:	4b1a      	ldr	r3, [pc, #104]	; (5750 <lv_obj_init_draw_label_dsc+0xac>)
    56e8:	4798      	blx	r3
    draw_dsc->color = lv_obj_get_style_text_color(obj, part);
    56ea:	8020      	strh	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
    56ec:	f248 0280 	movw	r2, #32896	; 0x8080
    56f0:	4631      	mov	r1, r6
    56f2:	4628      	mov	r0, r5
    56f4:	4f17      	ldr	r7, [pc, #92]	; (5754 <lv_obj_init_draw_label_dsc+0xb0>)
    56f6:	47b8      	blx	r7
    draw_dsc->letter_space = lv_obj_get_style_text_letter_space(obj, part);
    56f8:	81a0      	strh	r0, [r4, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
    56fa:	f248 0281 	movw	r2, #32897	; 0x8081
    56fe:	4631      	mov	r1, r6
    5700:	4628      	mov	r0, r5
    5702:	47b8      	blx	r7
    draw_dsc->line_space = lv_obj_get_style_text_line_space(obj, part);
    5704:	8160      	strh	r0, [r4, #10]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
    5706:	f248 0282 	movw	r2, #32898	; 0x8082
    570a:	4631      	mov	r1, r6
    570c:	4628      	mov	r0, r5
    570e:	47b8      	blx	r7
    5710:	7620      	strb	r0, [r4, #24]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
    5712:	f248 0283 	movw	r2, #32899	; 0x8083
    5716:	4631      	mov	r1, r6
    5718:	4628      	mov	r0, r5
    571a:	47b8      	blx	r7
    571c:	7660      	strb	r0, [r4, #25]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
    571e:	f248 028e 	movw	r2, #32910	; 0x808e
    5722:	4631      	mov	r1, r6
    5724:	4628      	mov	r0, r5
    5726:	4b0c      	ldr	r3, [pc, #48]	; (5758 <lv_obj_init_draw_label_dsc+0xb4>)
    5728:	4798      	blx	r3
    draw_dsc->font = lv_obj_get_style_text_font(obj, part);
    572a:	6060      	str	r0, [r4, #4]
    if(draw_dsc->sel_start != LV_DRAW_LABEL_NO_TXT_SEL && draw_dsc->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
    572c:	89e2      	ldrh	r2, [r4, #14]
    572e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5732:	429a      	cmp	r2, r3
    5734:	d0c1      	beq.n	56ba <lv_obj_init_draw_label_dsc+0x16>
    5736:	8a22      	ldrh	r2, [r4, #16]
    5738:	429a      	cmp	r2, r3
    573a:	d0be      	beq.n	56ba <lv_obj_init_draw_label_dsc+0x16>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
    573c:	f248 028a 	movw	r2, #32906	; 0x808a
    5740:	4631      	mov	r1, r6
    5742:	4628      	mov	r0, r5
    5744:	4b02      	ldr	r3, [pc, #8]	; (5750 <lv_obj_init_draw_label_dsc+0xac>)
    5746:	4798      	blx	r3
        draw_dsc->color = lv_obj_get_style_text_sel_color(obj, part);
    5748:	8020      	strh	r0, [r4, #0]
    574a:	e7b6      	b.n	56ba <lv_obj_init_draw_label_dsc+0x16>
    574c:	00004601 	.word	0x00004601
    5750:	00004575 	.word	0x00004575
    5754:	000044c9 	.word	0x000044c9
    5758:	00004695 	.word	0x00004695

0000575c <lv_obj_init_draw_img_dsc>:
{
    575c:	b570      	push	{r4, r5, r6, lr}
    575e:	4605      	mov	r5, r0
    5760:	460e      	mov	r6, r1
    5762:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
    5764:	f248 02ac 	movw	r2, #32940	; 0x80ac
    5768:	4b21      	ldr	r3, [pc, #132]	; (57f0 <lv_obj_init_draw_img_dsc+0x94>)
    576a:	4798      	blx	r3
    draw_dsc->opa = lv_obj_get_style_image_opa(obj, part);
    576c:	7020      	strb	r0, [r4, #0]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
    576e:	2805      	cmp	r0, #5
    5770:	d800      	bhi.n	5774 <lv_obj_init_draw_img_dsc+0x18>
    5772:	bd70      	pop	{r4, r5, r6, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
    5774:	f248 020c 	movw	r2, #32780	; 0x800c
    5778:	4631      	mov	r1, r6
    577a:	4628      	mov	r0, r5
    577c:	4b1c      	ldr	r3, [pc, #112]	; (57f0 <lv_obj_init_draw_img_dsc+0x94>)
    577e:	4798      	blx	r3
    if(opa_scale < LV_OPA_MAX) {
    5780:	28f9      	cmp	r0, #249	; 0xf9
    5782:	d805      	bhi.n	5790 <lv_obj_init_draw_img_dsc+0x34>
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
    5784:	7823      	ldrb	r3, [r4, #0]
    5786:	fb13 f000 	smulbb	r0, r3, r0
    578a:	f3c0 2007 	ubfx	r0, r0, #8, #8
    578e:	7020      	strb	r0, [r4, #0]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
    5790:	7823      	ldrb	r3, [r4, #0]
    5792:	2b05      	cmp	r3, #5
    5794:	d9ed      	bls.n	5772 <lv_obj_init_draw_img_dsc+0x16>
    draw_dsc->angle = 0;
    5796:	2300      	movs	r3, #0
    5798:	8063      	strh	r3, [r4, #2]
    draw_dsc->zoom = LV_IMG_ZOOM_NONE;
    579a:	f44f 7380 	mov.w	r3, #256	; 0x100
    579e:	8123      	strh	r3, [r4, #8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    57a0:	8aab      	ldrh	r3, [r5, #20]
    57a2:	3301      	adds	r3, #1
    57a4:	8a2a      	ldrh	r2, [r5, #16]
    57a6:	1a9b      	subs	r3, r3, r2
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
    57a8:	b21b      	sxth	r3, r3
    57aa:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    57ae:	105b      	asrs	r3, r3, #1
    57b0:	80a3      	strh	r3, [r4, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    57b2:	8aeb      	ldrh	r3, [r5, #22]
    57b4:	3301      	adds	r3, #1
    57b6:	8a6a      	ldrh	r2, [r5, #18]
    57b8:	1a9b      	subs	r3, r3, r2
    draw_dsc->pivot.y = lv_area_get_height(&obj->coords) / 2;
    57ba:	b21b      	sxth	r3, r3
    57bc:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    57c0:	105b      	asrs	r3, r3, #1
    57c2:	80e3      	strh	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
    57c4:	f248 02ad 	movw	r2, #32941	; 0x80ad
    57c8:	4631      	mov	r1, r6
    57ca:	4628      	mov	r0, r5
    57cc:	4b08      	ldr	r3, [pc, #32]	; (57f0 <lv_obj_init_draw_img_dsc+0x94>)
    57ce:	4798      	blx	r3
    draw_dsc->recolor_opa = lv_obj_get_style_image_recolor_opa(obj, part);
    57d0:	72a0      	strb	r0, [r4, #10]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
    57d2:	f248 02a9 	movw	r2, #32937	; 0x80a9
    57d6:	4631      	mov	r1, r6
    57d8:	4628      	mov	r0, r5
    57da:	4b06      	ldr	r3, [pc, #24]	; (57f4 <lv_obj_init_draw_img_dsc+0x98>)
    57dc:	4798      	blx	r3
    draw_dsc->recolor = lv_obj_get_style_image_recolor(obj, part);
    57de:	81a0      	strh	r0, [r4, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
    57e0:	f248 02a0 	movw	r2, #32928	; 0x80a0
    57e4:	4631      	mov	r1, r6
    57e6:	4628      	mov	r0, r5
    57e8:	4b03      	ldr	r3, [pc, #12]	; (57f8 <lv_obj_init_draw_img_dsc+0x9c>)
    57ea:	4798      	blx	r3
    57ec:	73a0      	strb	r0, [r4, #14]
    57ee:	e7c0      	b.n	5772 <lv_obj_init_draw_img_dsc+0x16>
    57f0:	00004601 	.word	0x00004601
    57f4:	00004575 	.word	0x00004575
    57f8:	000044c9 	.word	0x000044c9

000057fc <lv_obj_get_draw_rect_ext_pad_size>:
{
    57fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5800:	b089      	sub	sp, #36	; 0x24
    5802:	4604      	mov	r4, r0
    5804:	460e      	mov	r6, r1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
    5806:	2250      	movs	r2, #80	; 0x50
    5808:	4b76      	ldr	r3, [pc, #472]	; (59e4 <lv_obj_get_draw_rect_ext_pad_size+0x1e8>)
    580a:	4798      	blx	r3
    if(sh_width) {
    580c:	4607      	mov	r7, r0
    580e:	bb68      	cbnz	r0, 586c <lv_obj_get_draw_rect_ext_pad_size+0x70>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
    5810:	227f      	movs	r2, #127	; 0x7f
    5812:	4631      	mov	r1, r6
    5814:	4620      	mov	r0, r4
    5816:	4b74      	ldr	r3, [pc, #464]	; (59e8 <lv_obj_get_draw_rect_ext_pad_size+0x1ec>)
    5818:	4798      	blx	r3
    if(value_str) {
    581a:	4680      	mov	r8, r0
    581c:	b130      	cbz	r0, 582c <lv_obj_get_draw_rect_ext_pad_size+0x30>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
    581e:	227c      	movs	r2, #124	; 0x7c
    5820:	4631      	mov	r1, r6
    5822:	4620      	mov	r0, r4
    5824:	4b71      	ldr	r3, [pc, #452]	; (59ec <lv_obj_get_draw_rect_ext_pad_size+0x1f0>)
    5826:	4798      	blx	r3
        if(value_opa > LV_OPA_MIN) {
    5828:	2805      	cmp	r0, #5
    582a:	d84c      	bhi.n	58c6 <lv_obj_get_draw_rect_ext_pad_size+0xca>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
    582c:	2240      	movs	r2, #64	; 0x40
    582e:	4631      	mov	r1, r6
    5830:	4620      	mov	r0, r4
    5832:	4b6c      	ldr	r3, [pc, #432]	; (59e4 <lv_obj_get_draw_rect_ext_pad_size+0x1e8>)
    5834:	4798      	blx	r3
    if(outline_width) {
    5836:	4605      	mov	r5, r0
    5838:	2800      	cmp	r0, #0
    583a:	f040 80bf 	bne.w	59bc <lv_obj_get_draw_rect_ext_pad_size+0x1c0>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
    583e:	2204      	movs	r2, #4
    5840:	4631      	mov	r1, r6
    5842:	4620      	mov	r0, r4
    5844:	f8df 819c 	ldr.w	r8, [pc, #412]	; 59e4 <lv_obj_get_draw_rect_ext_pad_size+0x1e8>
    5848:	47c0      	blx	r8
    584a:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
    584c:	2205      	movs	r2, #5
    584e:	4631      	mov	r1, r6
    5850:	4620      	mov	r0, r4
    5852:	47c0      	blx	r8
    lv_coord_t wh = LV_MATH_MAX(w, h);
    5854:	42a8      	cmp	r0, r5
    5856:	bfb8      	it	lt
    5858:	4628      	movlt	r0, r5
    585a:	b200      	sxth	r0, r0
    if(wh > 0) s += wh;
    585c:	2800      	cmp	r0, #0
    585e:	bfc4      	itt	gt
    5860:	19c0      	addgt	r0, r0, r7
    5862:	b207      	sxthgt	r7, r0
}
    5864:	4638      	mov	r0, r7
    5866:	b009      	add	sp, #36	; 0x24
    5868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa, scalar)
    586c:	225c      	movs	r2, #92	; 0x5c
    586e:	4631      	mov	r1, r6
    5870:	4620      	mov	r0, r4
    5872:	4b5e      	ldr	r3, [pc, #376]	; (59ec <lv_obj_get_draw_rect_ext_pad_size+0x1f0>)
    5874:	4798      	blx	r3
        if(sh_opa > LV_OPA_MIN) {
    5876:	2805      	cmp	r0, #5
    5878:	d801      	bhi.n	587e <lv_obj_get_draw_rect_ext_pad_size+0x82>
    lv_coord_t s = 0;
    587a:	2700      	movs	r7, #0
    587c:	e7c8      	b.n	5810 <lv_obj_get_draw_rect_ext_pad_size+0x14>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
    587e:	2253      	movs	r2, #83	; 0x53
    5880:	4631      	mov	r1, r6
    5882:	4620      	mov	r0, r4
    5884:	4d57      	ldr	r5, [pc, #348]	; (59e4 <lv_obj_get_draw_rect_ext_pad_size+0x1e8>)
    5886:	47a8      	blx	r5
            sh_width = sh_width / 2;    /*THe blur adds only half width*/
    5888:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
            sh_width++;
    588c:	eb00 0767 	add.w	r7, r0, r7, asr #1
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
    5890:	3701      	adds	r7, #1
    5892:	b2bf      	uxth	r7, r7
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
    5894:	2251      	movs	r2, #81	; 0x51
    5896:	4631      	mov	r1, r6
    5898:	4620      	mov	r0, r4
    589a:	47a8      	blx	r5
    589c:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
    589e:	2252      	movs	r2, #82	; 0x52
    58a0:	4631      	mov	r1, r6
    58a2:	4620      	mov	r0, r4
    58a4:	47a8      	blx	r5
            sh_width += LV_MATH_MAX(LV_MATH_ABS(sh_ofs_x), LV_MATH_ABS(sh_ofs_y));
    58a6:	2800      	cmp	r0, #0
    58a8:	bfb8      	it	lt
    58aa:	4240      	neglt	r0, r0
    58ac:	f1b8 0f00 	cmp.w	r8, #0
    58b0:	bfb8      	it	lt
    58b2:	f1c8 0800 	rsblt	r8, r8, #0
    58b6:	4540      	cmp	r0, r8
    58b8:	bfac      	ite	ge
    58ba:	183f      	addge	r7, r7, r0
    58bc:	4447      	addlt	r7, r8
            s = LV_MATH_MAX(s, sh_width);
    58be:	b238      	sxth	r0, r7
    58c0:	ea20 77e0 	bic.w	r7, r0, r0, asr #31
    58c4:	e7a4      	b.n	5810 <lv_obj_get_draw_rect_ext_pad_size+0x14>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
    58c6:	2270      	movs	r2, #112	; 0x70
    58c8:	4631      	mov	r1, r6
    58ca:	4620      	mov	r0, r4
    58cc:	4d45      	ldr	r5, [pc, #276]	; (59e4 <lv_obj_get_draw_rect_ext_pad_size+0x1e8>)
    58ce:	47a8      	blx	r5
    58d0:	4682      	mov	sl, r0
    58d2:	2270      	movs	r2, #112	; 0x70
    58d4:	4631      	mov	r1, r6
    58d6:	4620      	mov	r0, r4
    58d8:	47a8      	blx	r5
    58da:	4683      	mov	fp, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
    58dc:	227e      	movs	r2, #126	; 0x7e
    58de:	4631      	mov	r1, r6
    58e0:	4620      	mov	r0, r4
    58e2:	4b41      	ldr	r3, [pc, #260]	; (59e8 <lv_obj_get_draw_rect_ext_pad_size+0x1ec>)
    58e4:	4798      	blx	r3
            _lv_txt_get_size(&txt_size, value_str, font, letter_space, line_space, LV_COORD_MAX, LV_TXT_FLAG_NONE);
    58e6:	f04f 0900 	mov.w	r9, #0
    58ea:	f8cd 9008 	str.w	r9, [sp, #8]
    58ee:	f647 4318 	movw	r3, #31768	; 0x7c18
    58f2:	9301      	str	r3, [sp, #4]
    58f4:	f8cd b000 	str.w	fp, [sp]
    58f8:	4653      	mov	r3, sl
    58fa:	4602      	mov	r2, r0
    58fc:	4641      	mov	r1, r8
    58fe:	a804      	add	r0, sp, #16
    5900:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 59f0 <lv_obj_get_draw_rect_ext_pad_size+0x1f4>
    5904:	47c0      	blx	r8
            value_area.x1 = 0;
    5906:	f8ad 9018 	strh.w	r9, [sp, #24]
            value_area.y1 = 0;
    590a:	f8ad 901a 	strh.w	r9, [sp, #26]
            value_area.x2 = txt_size.x - 1;
    590e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    5912:	3b01      	subs	r3, #1
    5914:	f8ad 301c 	strh.w	r3, [sp, #28]
            value_area.y2 = txt_size.y - 1;
    5918:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    591c:	3b01      	subs	r3, #1
    591e:	f8ad 301e 	strh.w	r3, [sp, #30]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
    5922:	2275      	movs	r2, #117	; 0x75
    5924:	4631      	mov	r1, r6
    5926:	4620      	mov	r0, r4
    5928:	47a8      	blx	r5
    592a:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
    592c:	2273      	movs	r2, #115	; 0x73
    592e:	4631      	mov	r1, r6
    5930:	4620      	mov	r0, r4
    5932:	47a8      	blx	r5
    5934:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
    5936:	2274      	movs	r2, #116	; 0x74
    5938:	4631      	mov	r1, r6
    593a:	4620      	mov	r0, r4
    593c:	47a8      	blx	r5
    593e:	4605      	mov	r5, r0
            _lv_area_align(&obj->coords, &value_area, align, &p_align);
    5940:	ab05      	add	r3, sp, #20
    5942:	fa5f f289 	uxtb.w	r2, r9
    5946:	a906      	add	r1, sp, #24
    5948:	f104 0010 	add.w	r0, r4, #16
    594c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 59f4 <lv_obj_get_draw_rect_ext_pad_size+0x1f8>
    5950:	47c8      	blx	r9
            value_area.x1 += p_align.x + xofs;
    5952:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    5956:	4443      	add	r3, r8
    5958:	b29b      	uxth	r3, r3
            value_area.y1 += p_align.y + yofs;
    595a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    595e:	442a      	add	r2, r5
    5960:	b292      	uxth	r2, r2
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
    5962:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
            value_area.x1 += p_align.x + xofs;
    5966:	f8bd 1018 	ldrh.w	r1, [sp, #24]
    596a:	4419      	add	r1, r3
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
    596c:	b209      	sxth	r1, r1
    596e:	1a40      	subs	r0, r0, r1
    5970:	42b8      	cmp	r0, r7
    5972:	bfb8      	it	lt
    5974:	4638      	movlt	r0, r7
            s = LV_MATH_MAX(s, obj->coords.y1 - value_area.y1);
    5976:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
            value_area.y1 += p_align.y + yofs;
    597a:	f8bd 701a 	ldrh.w	r7, [sp, #26]
    597e:	4417      	add	r7, r2
            s = LV_MATH_MAX(s, obj->coords.y1 - value_area.y1);
    5980:	b23f      	sxth	r7, r7
    5982:	1bcf      	subs	r7, r1, r7
    5984:	b200      	sxth	r0, r0
    5986:	4287      	cmp	r7, r0
    5988:	bfb8      	it	lt
    598a:	4607      	movlt	r7, r0
            value_area.x2 += p_align.x + xofs;
    598c:	f8bd 001c 	ldrh.w	r0, [sp, #28]
    5990:	4403      	add	r3, r0
            s = LV_MATH_MAX(s, value_area.x2 - obj->coords.x2);
    5992:	b21b      	sxth	r3, r3
    5994:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
    5998:	1a18      	subs	r0, r3, r0
    599a:	b23b      	sxth	r3, r7
    599c:	4283      	cmp	r3, r0
    599e:	bfb8      	it	lt
    59a0:	4603      	movlt	r3, r0
            value_area.y2 += p_align.y + yofs;
    59a2:	f8bd 001e 	ldrh.w	r0, [sp, #30]
    59a6:	4410      	add	r0, r2
            s = LV_MATH_MAX(s, value_area.y2 - obj->coords.y2);
    59a8:	b200      	sxth	r0, r0
    59aa:	f9b4 7016 	ldrsh.w	r7, [r4, #22]
    59ae:	1bc7      	subs	r7, r0, r7
    59b0:	b218      	sxth	r0, r3
    59b2:	42b8      	cmp	r0, r7
    59b4:	bfb8      	it	lt
    59b6:	4638      	movlt	r0, r7
    59b8:	b207      	sxth	r7, r0
    59ba:	e737      	b.n	582c <lv_obj_get_draw_rect_ext_pad_size+0x30>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
    59bc:	224c      	movs	r2, #76	; 0x4c
    59be:	4631      	mov	r1, r6
    59c0:	4620      	mov	r0, r4
    59c2:	4b0a      	ldr	r3, [pc, #40]	; (59ec <lv_obj_get_draw_rect_ext_pad_size+0x1f0>)
    59c4:	4798      	blx	r3
        if(outline_opa > LV_OPA_MIN) {
    59c6:	2805      	cmp	r0, #5
    59c8:	f67f af39 	bls.w	583e <lv_obj_get_draw_rect_ext_pad_size+0x42>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
    59cc:	2241      	movs	r2, #65	; 0x41
    59ce:	4631      	mov	r1, r6
    59d0:	4620      	mov	r0, r4
    59d2:	4b04      	ldr	r3, [pc, #16]	; (59e4 <lv_obj_get_draw_rect_ext_pad_size+0x1e8>)
    59d4:	4798      	blx	r3
            s = LV_MATH_MAX(s, outline_pad + outline_width);
    59d6:	4428      	add	r0, r5
    59d8:	42b8      	cmp	r0, r7
    59da:	bfb8      	it	lt
    59dc:	4638      	movlt	r0, r7
    59de:	b207      	sxth	r7, r0
    59e0:	e72d      	b.n	583e <lv_obj_get_draw_rect_ext_pad_size+0x42>
    59e2:	bf00      	nop
    59e4:	000044c9 	.word	0x000044c9
    59e8:	00004695 	.word	0x00004695
    59ec:	00004601 	.word	0x00004601
    59f0:	00014071 	.word	0x00014071
    59f4:	00011819 	.word	0x00011819

000059f8 <lv_obj_signal>:
    if(sign == LV_SIGNAL_GET_STYLE) {
    59f8:	2908      	cmp	r1, #8
    59fa:	d01a      	beq.n	5a32 <lv_obj_signal+0x3a>
{
    59fc:	b510      	push	{r4, lr}
    59fe:	4604      	mov	r4, r0
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
    5a00:	2907      	cmp	r1, #7
    5a02:	d020      	beq.n	5a46 <lv_obj_signal+0x4e>
    if(sign == LV_SIGNAL_CHILD_CHG) {
    5a04:	2901      	cmp	r1, #1
    5a06:	d023      	beq.n	5a50 <lv_obj_signal+0x58>
    else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
    5a08:	2906      	cmp	r1, #6
    5a0a:	d027      	beq.n	5a5c <lv_obj_signal+0x64>
    else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
    5a0c:	2903      	cmp	r1, #3
    5a0e:	d030      	beq.n	5a72 <lv_obj_signal+0x7a>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
    5a10:	2904      	cmp	r1, #4
    5a12:	d039      	beq.n	5a88 <lv_obj_signal+0x90>
    else if(sign == LV_SIGNAL_PRESSED) {
    5a14:	290b      	cmp	r1, #11
    5a16:	d03b      	beq.n	5a90 <lv_obj_signal+0x98>
    else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
    5a18:	f1a1 030d 	sub.w	r3, r1, #13
    5a1c:	b2db      	uxtb	r3, r3
    5a1e:	2b01      	cmp	r3, #1
    5a20:	d93b      	bls.n	5a9a <lv_obj_signal+0xa2>
    else if(sign == LV_SIGNAL_FOCUS) {
    5a22:	2916      	cmp	r1, #22
    5a24:	d03e      	beq.n	5aa4 <lv_obj_signal+0xac>
    else if(sign == LV_SIGNAL_DEFOCUS) {
    5a26:	2917      	cmp	r1, #23
    5a28:	d051      	beq.n	5ace <lv_obj_signal+0xd6>
    else if(sign == LV_SIGNAL_CLEANUP) {
    5a2a:	2900      	cmp	r1, #0
    5a2c:	d054      	beq.n	5ad8 <lv_obj_signal+0xe0>
    lv_res_t res = LV_RES_OK;
    5a2e:	2001      	movs	r0, #1
}
    5a30:	bd10      	pop	{r4, pc}
        if(info->part == LV_OBJ_PART_MAIN) info->result = &obj->style_list;
    5a32:	7813      	ldrb	r3, [r2, #0]
    5a34:	b91b      	cbnz	r3, 5a3e <lv_obj_signal+0x46>
    5a36:	3028      	adds	r0, #40	; 0x28
    5a38:	6050      	str	r0, [r2, #4]
        return LV_RES_OK;
    5a3a:	2001      	movs	r0, #1
    5a3c:	4770      	bx	lr
        else info->result = NULL;
    5a3e:	2300      	movs	r3, #0
    5a40:	6053      	str	r3, [r2, #4]
        return LV_RES_OK;
    5a42:	2001      	movs	r0, #1
    5a44:	4770      	bx	lr
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
    5a46:	4926      	ldr	r1, [pc, #152]	; (5ae0 <lv_obj_signal+0xe8>)
    5a48:	4610      	mov	r0, r2
    5a4a:	4b26      	ldr	r3, [pc, #152]	; (5ae4 <lv_obj_signal+0xec>)
    5a4c:	4798      	blx	r3
    5a4e:	bd10      	pop	{r4, pc}
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
    5a50:	4b25      	ldr	r3, [pc, #148]	; (5ae8 <lv_obj_signal+0xf0>)
    5a52:	4798      	blx	r3
    5a54:	f080 0001 	eor.w	r0, r0, #1
        return LV_RES_OK;
    5a58:	b2c0      	uxtb	r0, r0
    5a5a:	bd10      	pop	{r4, pc}
        lv_coord_t d = lv_obj_get_draw_rect_ext_pad_size(obj, LV_OBJ_PART_MAIN);
    5a5c:	2100      	movs	r1, #0
    5a5e:	4b23      	ldr	r3, [pc, #140]	; (5aec <lv_obj_signal+0xf4>)
    5a60:	4798      	blx	r3
        obj->ext_draw_pad = LV_MATH_MAX(obj->ext_draw_pad, d);
    5a62:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
    5a66:	4298      	cmp	r0, r3
    5a68:	bfb8      	it	lt
    5a6a:	4618      	movlt	r0, r3
    5a6c:	8660      	strh	r0, [r4, #50]	; 0x32
    lv_res_t res = LV_RES_OK;
    5a6e:	2001      	movs	r0, #1
    5a70:	bd10      	pop	{r4, pc}
        if(obj->realign.auto_realign) {
    5a72:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
    5a76:	f013 0f01 	tst.w	r3, #1
    5a7a:	d101      	bne.n	5a80 <lv_obj_signal+0x88>
    lv_res_t res = LV_RES_OK;
    5a7c:	2001      	movs	r0, #1
    5a7e:	bd10      	pop	{r4, pc}
            lv_obj_realign(obj);
    5a80:	4b1b      	ldr	r3, [pc, #108]	; (5af0 <lv_obj_signal+0xf8>)
    5a82:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
    5a84:	2001      	movs	r0, #1
    5a86:	bd10      	pop	{r4, pc}
        lv_obj_refresh_ext_draw_pad(obj);
    5a88:	4b1a      	ldr	r3, [pc, #104]	; (5af4 <lv_obj_signal+0xfc>)
    5a8a:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
    5a8c:	2001      	movs	r0, #1
    5a8e:	bd10      	pop	{r4, pc}
        lv_obj_add_state(obj, LV_STATE_PRESSED);
    5a90:	2110      	movs	r1, #16
    5a92:	4b19      	ldr	r3, [pc, #100]	; (5af8 <lv_obj_signal+0x100>)
    5a94:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
    5a96:	2001      	movs	r0, #1
    5a98:	bd10      	pop	{r4, pc}
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
    5a9a:	2110      	movs	r1, #16
    5a9c:	4b17      	ldr	r3, [pc, #92]	; (5afc <lv_obj_signal+0x104>)
    5a9e:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
    5aa0:	2001      	movs	r0, #1
    5aa2:	bd10      	pop	{r4, pc}
        if(lv_group_get_editing(lv_obj_get_group(obj))) {
    5aa4:	4b16      	ldr	r3, [pc, #88]	; (5b00 <lv_obj_signal+0x108>)
    5aa6:	4798      	blx	r3
    5aa8:	4b16      	ldr	r3, [pc, #88]	; (5b04 <lv_obj_signal+0x10c>)
    5aaa:	4798      	blx	r3
    5aac:	b128      	cbz	r0, 5aba <lv_obj_signal+0xc2>
            lv_obj_add_state(obj, state);
    5aae:	2106      	movs	r1, #6
    5ab0:	4620      	mov	r0, r4
    5ab2:	4b11      	ldr	r3, [pc, #68]	; (5af8 <lv_obj_signal+0x100>)
    5ab4:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
    5ab6:	2001      	movs	r0, #1
    5ab8:	bd10      	pop	{r4, pc}
            lv_obj_add_state(obj, LV_STATE_FOCUSED);
    5aba:	2102      	movs	r1, #2
    5abc:	4620      	mov	r0, r4
    5abe:	4b0e      	ldr	r3, [pc, #56]	; (5af8 <lv_obj_signal+0x100>)
    5ac0:	4798      	blx	r3
            lv_obj_clear_state(obj, LV_STATE_EDITED);
    5ac2:	2104      	movs	r1, #4
    5ac4:	4620      	mov	r0, r4
    5ac6:	4b0d      	ldr	r3, [pc, #52]	; (5afc <lv_obj_signal+0x104>)
    5ac8:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
    5aca:	2001      	movs	r0, #1
    5acc:	bd10      	pop	{r4, pc}
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED);
    5ace:	2106      	movs	r1, #6
    5ad0:	4b0a      	ldr	r3, [pc, #40]	; (5afc <lv_obj_signal+0x104>)
    5ad2:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
    5ad4:	2001      	movs	r0, #1
    5ad6:	bd10      	pop	{r4, pc}
        lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
    5ad8:	4b0b      	ldr	r3, [pc, #44]	; (5b08 <lv_obj_signal+0x110>)
    5ada:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
    5adc:	2001      	movs	r0, #1
    5ade:	bd10      	pop	{r4, pc}
    5ae0:	000249dc 	.word	0x000249dc
    5ae4:	00005089 	.word	0x00005089
    5ae8:	00004409 	.word	0x00004409
    5aec:	000057fd 	.word	0x000057fd
    5af0:	000039d5 	.word	0x000039d5
    5af4:	00002c21 	.word	0x00002c21
    5af8:	00004c91 	.word	0x00004c91
    5afc:	00004ced 	.word	0x00004ced
    5b00:	00004dd9 	.word	0x00004dd9
    5b04:	0000274f 	.word	0x0000274f
    5b08:	000030c1 	.word	0x000030c1

00005b0c <lv_refr_get_top_obj>:
 * @param area_p pointer to an area
 * @param obj the first object to start the searching (typically a screen)
 * @return
 */
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)
{
    5b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5b10:	4605      	mov	r5, r0
    5b12:	4688      	mov	r8, r1
    lv_obj_t * found_p = NULL;

    /*If this object is fully cover the draw area check the children too */
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
    5b14:	2200      	movs	r2, #0
    5b16:	3110      	adds	r1, #16
    5b18:	4b1f      	ldr	r3, [pc, #124]	; (5b98 <lv_refr_get_top_obj+0x8c>)
    5b1a:	4798      	blx	r3
    5b1c:	b350      	cbz	r0, 5b74 <lv_refr_get_top_obj+0x68>
    5b1e:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
    5b22:	f013 0f10 	tst.w	r3, #16
    5b26:	d127      	bne.n	5b78 <lv_refr_get_top_obj+0x6c>
        lv_design_res_t design_res = obj->design_cb ? obj->design_cb(obj, area_p,
    5b28:	f8d8 3020 	ldr.w	r3, [r8, #32]
    5b2c:	b343      	cbz	r3, 5b80 <lv_refr_get_top_obj+0x74>
    5b2e:	2202      	movs	r2, #2
    5b30:	4629      	mov	r1, r5
    5b32:	4640      	mov	r0, r8
    5b34:	4798      	blx	r3
    5b36:	4681      	mov	r9, r0
                                                                     LV_DESIGN_COVER_CHK) : LV_DESIGN_RES_NOT_COVER;
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
    5b38:	2803      	cmp	r0, #3
    5b3a:	d01f      	beq.n	5b7c <lv_refr_get_top_obj+0x70>

        lv_obj_t * i;
        _LV_LL_READ(obj->child_ll, i) {
    5b3c:	f108 0604 	add.w	r6, r8, #4
    5b40:	4630      	mov	r0, r6
    5b42:	4b16      	ldr	r3, [pc, #88]	; (5b9c <lv_refr_get_top_obj+0x90>)
    5b44:	4798      	blx	r3
    5b46:	4604      	mov	r4, r0
    5b48:	b160      	cbz	r0, 5b64 <lv_refr_get_top_obj+0x58>
    5b4a:	4f15      	ldr	r7, [pc, #84]	; (5ba0 <lv_refr_get_top_obj+0x94>)
            found_p = lv_refr_get_top_obj(area_p, i);
    5b4c:	4621      	mov	r1, r4
    5b4e:	4628      	mov	r0, r5
    5b50:	f7ff ffdc 	bl	5b0c <lv_refr_get_top_obj>

            /*If a children is ok then break*/
            if(found_p != NULL) {
    5b54:	4603      	mov	r3, r0
    5b56:	b950      	cbnz	r0, 5b6e <lv_refr_get_top_obj+0x62>
        _LV_LL_READ(obj->child_ll, i) {
    5b58:	4621      	mov	r1, r4
    5b5a:	4630      	mov	r0, r6
    5b5c:	47b8      	blx	r7
    5b5e:	4604      	mov	r4, r0
    5b60:	2800      	cmp	r0, #0
    5b62:	d1f3      	bne.n	5b4c <lv_refr_get_top_obj+0x40>
        }

        /*If no better children use this object*/
        if(found_p == NULL) {
            if(design_res == LV_DESIGN_RES_COVER) {
                found_p = obj;
    5b64:	f1b9 0f01 	cmp.w	r9, #1
    5b68:	bf0c      	ite	eq
    5b6a:	4643      	moveq	r3, r8
    5b6c:	2300      	movne	r3, #0
            }
        }
    }

    return found_p;
}
    5b6e:	4618      	mov	r0, r3
    5b70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    lv_obj_t * found_p = NULL;
    5b74:	2300      	movs	r3, #0
    5b76:	e7fa      	b.n	5b6e <lv_refr_get_top_obj+0x62>
    5b78:	2300      	movs	r3, #0
    5b7a:	e7f8      	b.n	5b6e <lv_refr_get_top_obj+0x62>
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
    5b7c:	2300      	movs	r3, #0
    5b7e:	e7f6      	b.n	5b6e <lv_refr_get_top_obj+0x62>
        _LV_LL_READ(obj->child_ll, i) {
    5b80:	f108 0604 	add.w	r6, r8, #4
    5b84:	4630      	mov	r0, r6
    5b86:	4b05      	ldr	r3, [pc, #20]	; (5b9c <lv_refr_get_top_obj+0x90>)
    5b88:	4798      	blx	r3
    5b8a:	4604      	mov	r4, r0
        lv_design_res_t design_res = obj->design_cb ? obj->design_cb(obj, area_p,
    5b8c:	f04f 0902 	mov.w	r9, #2
        _LV_LL_READ(obj->child_ll, i) {
    5b90:	2800      	cmp	r0, #0
    5b92:	d1da      	bne.n	5b4a <lv_refr_get_top_obj+0x3e>
    5b94:	4603      	mov	r3, r0
    5b96:	e7ea      	b.n	5b6e <lv_refr_get_top_obj+0x62>
    5b98:	00011761 	.word	0x00011761
    5b9c:	00011f9d 	.word	0x00011f9d
    5ba0:	00011fb1 	.word	0x00011fb1

00005ba4 <lv_refr_obj>:
 * @param mask_ori_p pointer to an area, the objects will be drawn only here
 */
static void lv_refr_obj(lv_obj_t * obj, const lv_area_t * mask_ori_p)
{
    /*Do not refresh hidden objects*/
    if(obj->hidden != 0) return;
    5ba4:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
    5ba8:	f013 0f10 	tst.w	r3, #16
    5bac:	d000      	beq.n	5bb0 <lv_refr_obj+0xc>
    5bae:	4770      	bx	lr
{
    5bb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5bb4:	b08b      	sub	sp, #44	; 0x2c
    5bb6:	460e      	mov	r6, r1
    5bb8:	4605      	mov	r5, r0
    /* Truncate the original mask to the coordinates of the parent
     * because the parent and its children are visible only here */
    lv_area_t obj_mask;
    lv_area_t obj_ext_mask;
    lv_area_t obj_area;
    lv_coord_t ext_size = obj->ext_draw_pad;
    5bba:	f9b0 4032 	ldrsh.w	r4, [r0, #50]	; 0x32
    lv_obj_get_coords(obj, &obj_area);
    5bbe:	a904      	add	r1, sp, #16
    5bc0:	4b35      	ldr	r3, [pc, #212]	; (5c98 <lv_refr_obj+0xf4>)
    5bc2:	4798      	blx	r3
    obj_area.x1 -= ext_size;
    5bc4:	b2a3      	uxth	r3, r4
    5bc6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    5bca:	1ad2      	subs	r2, r2, r3
    5bcc:	f8ad 2010 	strh.w	r2, [sp, #16]
    obj_area.y1 -= ext_size;
    5bd0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    5bd4:	1ad2      	subs	r2, r2, r3
    5bd6:	f8ad 2012 	strh.w	r2, [sp, #18]
    obj_area.x2 += ext_size;
    5bda:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    5bde:	441a      	add	r2, r3
    5be0:	f8ad 2014 	strh.w	r2, [sp, #20]
    obj_area.y2 += ext_size;
    5be4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5be8:	4413      	add	r3, r2
    5bea:	f8ad 3016 	strh.w	r3, [sp, #22]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
    5bee:	aa04      	add	r2, sp, #16
    5bf0:	4631      	mov	r1, r6
    5bf2:	a806      	add	r0, sp, #24
    5bf4:	4b29      	ldr	r3, [pc, #164]	; (5c9c <lv_refr_obj+0xf8>)
    5bf6:	4798      	blx	r3

    /*Draw the parent and its children only if they ore on 'mask_parent'*/
    if(union_ok != false) {
    5bf8:	b1a8      	cbz	r0, 5c26 <lv_refr_obj+0x82>

        /* Redraw the object */
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
    5bfa:	6a2b      	ldr	r3, [r5, #32]
    5bfc:	b11b      	cbz	r3, 5c06 <lv_refr_obj+0x62>
    5bfe:	2200      	movs	r2, #0
    5c00:	a906      	add	r1, sp, #24
    5c02:	4628      	mov	r0, r5
    5c04:	4798      	blx	r3
#if LV_COLOR_DEPTH == 32
        debug_color.ch.alpha = 0xff;
#endif
#endif
        /*Create a new 'obj_mask' without 'ext_size' because the children can't be visible there*/
        lv_obj_get_coords(obj, &obj_area);
    5c06:	a904      	add	r1, sp, #16
    5c08:	4628      	mov	r0, r5
    5c0a:	4b23      	ldr	r3, [pc, #140]	; (5c98 <lv_refr_obj+0xf4>)
    5c0c:	4798      	blx	r3
        union_ok = _lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
    5c0e:	aa04      	add	r2, sp, #16
    5c10:	4631      	mov	r1, r6
    5c12:	a808      	add	r0, sp, #32
    5c14:	4b21      	ldr	r3, [pc, #132]	; (5c9c <lv_refr_obj+0xf8>)
    5c16:	4798      	blx	r3
        if(union_ok != false) {
    5c18:	b940      	cbnz	r0, 5c2c <lv_refr_obj+0x88>
                }
            }
        }

        /* If all the children are redrawn make 'post draw' design */
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
    5c1a:	6a2b      	ldr	r3, [r5, #32]
    5c1c:	b11b      	cbz	r3, 5c26 <lv_refr_obj+0x82>
    5c1e:	2201      	movs	r2, #1
    5c20:	a906      	add	r1, sp, #24
    5c22:	4628      	mov	r0, r5
    5c24:	4798      	blx	r3
    }
}
    5c26:	b00b      	add	sp, #44	; 0x2c
    5c28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
    5c2c:	f105 0804 	add.w	r8, r5, #4
    5c30:	4640      	mov	r0, r8
    5c32:	4b1b      	ldr	r3, [pc, #108]	; (5ca0 <lv_refr_obj+0xfc>)
    5c34:	4798      	blx	r3
    5c36:	4604      	mov	r4, r0
    5c38:	2800      	cmp	r0, #0
    5c3a:	d0ee      	beq.n	5c1a <lv_refr_obj+0x76>
                lv_obj_get_coords(child_p, &child_area);
    5c3c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 5c98 <lv_refr_obj+0xf4>
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
    5c40:	4e16      	ldr	r6, [pc, #88]	; (5c9c <lv_refr_obj+0xf8>)
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
    5c42:	4f18      	ldr	r7, [pc, #96]	; (5ca4 <lv_refr_obj+0x100>)
    5c44:	e005      	b.n	5c52 <lv_refr_obj+0xae>
    5c46:	4621      	mov	r1, r4
    5c48:	4640      	mov	r0, r8
    5c4a:	47b8      	blx	r7
    5c4c:	4604      	mov	r4, r0
    5c4e:	2800      	cmp	r0, #0
    5c50:	d0e3      	beq.n	5c1a <lv_refr_obj+0x76>
                lv_obj_get_coords(child_p, &child_area);
    5c52:	a902      	add	r1, sp, #8
    5c54:	4620      	mov	r0, r4
    5c56:	47c8      	blx	r9
                child_area.x1 -= ext_size;
    5c58:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    5c5a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    5c5e:	1ad2      	subs	r2, r2, r3
    5c60:	f8ad 2008 	strh.w	r2, [sp, #8]
                child_area.y1 -= ext_size;
    5c64:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    5c68:	1ad2      	subs	r2, r2, r3
    5c6a:	f8ad 200a 	strh.w	r2, [sp, #10]
                child_area.x2 += ext_size;
    5c6e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    5c72:	441a      	add	r2, r3
    5c74:	f8ad 200c 	strh.w	r2, [sp, #12]
                child_area.y2 += ext_size;
    5c78:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5c7c:	4413      	add	r3, r2
    5c7e:	f8ad 300e 	strh.w	r3, [sp, #14]
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
    5c82:	aa02      	add	r2, sp, #8
    5c84:	a908      	add	r1, sp, #32
    5c86:	4668      	mov	r0, sp
    5c88:	47b0      	blx	r6
                if(union_ok) {
    5c8a:	2800      	cmp	r0, #0
    5c8c:	d0db      	beq.n	5c46 <lv_refr_obj+0xa2>
                    lv_refr_obj(child_p, &mask_child);
    5c8e:	4669      	mov	r1, sp
    5c90:	4620      	mov	r0, r4
    5c92:	f7ff ff87 	bl	5ba4 <lv_refr_obj>
    5c96:	e7d6      	b.n	5c46 <lv_refr_obj+0xa2>
    5c98:	00002e35 	.word	0x00002e35
    5c9c:	0001150d 	.word	0x0001150d
    5ca0:	00011fa7 	.word	0x00011fa7
    5ca4:	00011fdd 	.word	0x00011fdd

00005ca8 <lv_refr_obj_and_children>:
{
    5ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5cac:	460f      	mov	r7, r1
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
    5cae:	4604      	mov	r4, r0
    5cb0:	b170      	cbz	r0, 5cd0 <lv_refr_obj_and_children+0x28>
    lv_refr_obj(top_p, mask_p);
    5cb2:	4639      	mov	r1, r7
    5cb4:	4620      	mov	r0, r4
    5cb6:	4b1a      	ldr	r3, [pc, #104]	; (5d20 <lv_refr_obj_and_children+0x78>)
    5cb8:	4798      	blx	r3
    par = lv_obj_get_parent(top_p);
    5cba:	4620      	mov	r0, r4
    5cbc:	4b19      	ldr	r3, [pc, #100]	; (5d24 <lv_refr_obj_and_children+0x7c>)
    5cbe:	4798      	blx	r3
    while(par != NULL) {
    5cc0:	4681      	mov	r9, r0
    5cc2:	b160      	cbz	r0, 5cde <lv_refr_obj_and_children+0x36>
        lv_obj_t * i = _lv_ll_get_prev(&(par->child_ll), border_p);
    5cc4:	4e18      	ldr	r6, [pc, #96]	; (5d28 <lv_refr_obj_and_children+0x80>)
            lv_refr_obj(i, mask_p);
    5cc6:	f8df 8058 	ldr.w	r8, [pc, #88]	; 5d20 <lv_refr_obj_and_children+0x78>
        par = lv_obj_get_parent(par);
    5cca:	f8df a058 	ldr.w	sl, [pc, #88]	; 5d24 <lv_refr_obj_and_children+0x7c>
    5cce:	e00e      	b.n	5cee <lv_refr_obj_and_children+0x46>
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
    5cd0:	4b16      	ldr	r3, [pc, #88]	; (5d2c <lv_refr_obj_and_children+0x84>)
    5cd2:	6818      	ldr	r0, [r3, #0]
    5cd4:	4b16      	ldr	r3, [pc, #88]	; (5d30 <lv_refr_obj_and_children+0x88>)
    5cd6:	4798      	blx	r3
    if(top_p == NULL) return;  /*Shouldn't happen*/
    5cd8:	4604      	mov	r4, r0
    5cda:	2800      	cmp	r0, #0
    5cdc:	d1e9      	bne.n	5cb2 <lv_refr_obj_and_children+0xa>
    5cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        par = lv_obj_get_parent(par);
    5ce2:	4648      	mov	r0, r9
    5ce4:	47d0      	blx	sl
    5ce6:	464c      	mov	r4, r9
    while(par != NULL) {
    5ce8:	4681      	mov	r9, r0
    5cea:	2800      	cmp	r0, #0
    5cec:	d0f7      	beq.n	5cde <lv_refr_obj_and_children+0x36>
        lv_obj_t * i = _lv_ll_get_prev(&(par->child_ll), border_p);
    5cee:	f109 0504 	add.w	r5, r9, #4
    5cf2:	4621      	mov	r1, r4
    5cf4:	4628      	mov	r0, r5
    5cf6:	47b0      	blx	r6
        while(i != NULL) {
    5cf8:	4604      	mov	r4, r0
    5cfa:	b140      	cbz	r0, 5d0e <lv_refr_obj_and_children+0x66>
            lv_refr_obj(i, mask_p);
    5cfc:	4639      	mov	r1, r7
    5cfe:	4620      	mov	r0, r4
    5d00:	47c0      	blx	r8
            i = _lv_ll_get_prev(&(par->child_ll), i);
    5d02:	4621      	mov	r1, r4
    5d04:	4628      	mov	r0, r5
    5d06:	47b0      	blx	r6
        while(i != NULL) {
    5d08:	4604      	mov	r4, r0
    5d0a:	2800      	cmp	r0, #0
    5d0c:	d1f6      	bne.n	5cfc <lv_refr_obj_and_children+0x54>
        if(par->design_cb) par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
    5d0e:	f8d9 3020 	ldr.w	r3, [r9, #32]
    5d12:	2b00      	cmp	r3, #0
    5d14:	d0e5      	beq.n	5ce2 <lv_refr_obj_and_children+0x3a>
    5d16:	2201      	movs	r2, #1
    5d18:	4639      	mov	r1, r7
    5d1a:	4648      	mov	r0, r9
    5d1c:	4798      	blx	r3
    5d1e:	e7e0      	b.n	5ce2 <lv_refr_obj_and_children+0x3a>
    5d20:	00005ba5 	.word	0x00005ba5
    5d24:	00002c71 	.word	0x00002c71
    5d28:	00011fdd 	.word	0x00011fdd
    5d2c:	20008084 	.word	0x20008084
    5d30:	00002341 	.word	0x00002341

00005d34 <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
    5d34:	b538      	push	{r3, r4, r5, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
    5d36:	4d1a      	ldr	r5, [pc, #104]	; (5da0 <lv_refr_vdb_flush+0x6c>)
    5d38:	6828      	ldr	r0, [r5, #0]
    5d3a:	4b1a      	ldr	r3, [pc, #104]	; (5da4 <lv_refr_vdb_flush+0x70>)
    5d3c:	4798      	blx	r3
    5d3e:	4604      	mov	r4, r0

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
    5d40:	6828      	ldr	r0, [r5, #0]
    5d42:	4b19      	ldr	r3, [pc, #100]	; (5da8 <lv_refr_vdb_flush+0x74>)
    5d44:	4798      	blx	r3
    5d46:	b978      	cbnz	r0, 5d68 <lv_refr_vdb_flush+0x34>
        while(vdb->flushing) {
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
        }
    }

    vdb->flushing = 1;
    5d48:	2301      	movs	r3, #1
    5d4a:	61a3      	str	r3, [r4, #24]

    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
    5d4c:	4b14      	ldr	r3, [pc, #80]	; (5da0 <lv_refr_vdb_flush+0x6c>)
    5d4e:	6818      	ldr	r0, [r3, #0]
    5d50:	6843      	ldr	r3, [r0, #4]
    5d52:	6a1a      	ldr	r2, [r3, #32]
    5d54:	f012 0f01 	tst.w	r2, #1
    5d58:	d010      	beq.n	5d7c <lv_refr_vdb_flush+0x48>
    5d5a:	6a1b      	ldr	r3, [r3, #32]
    5d5c:	f013 0f02 	tst.w	r3, #2
    5d60:	d00c      	beq.n	5d7c <lv_refr_vdb_flush+0x48>
    5d62:	2301      	movs	r3, #1
    5d64:	61e3      	str	r3, [r4, #28]
    5d66:	e00b      	b.n	5d80 <lv_refr_vdb_flush+0x4c>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
    5d68:	4d0d      	ldr	r5, [pc, #52]	; (5da0 <lv_refr_vdb_flush+0x6c>)
    5d6a:	6828      	ldr	r0, [r5, #0]
        while(vdb->flushing) {
    5d6c:	69a3      	ldr	r3, [r4, #24]
    5d6e:	2b00      	cmp	r3, #0
    5d70:	d0ea      	beq.n	5d48 <lv_refr_vdb_flush+0x14>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
    5d72:	69c3      	ldr	r3, [r0, #28]
    5d74:	2b00      	cmp	r3, #0
    5d76:	d0f9      	beq.n	5d6c <lv_refr_vdb_flush+0x38>
    5d78:	4798      	blx	r3
    5d7a:	e7f6      	b.n	5d6a <lv_refr_vdb_flush+0x36>
    else vdb->flushing_last = 0;
    5d7c:	2300      	movs	r3, #0
    5d7e:	61e3      	str	r3, [r4, #28]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
    5d80:	68c3      	ldr	r3, [r0, #12]
    5d82:	b11b      	cbz	r3, 5d8c <lv_refr_vdb_flush+0x58>
    5d84:	68a2      	ldr	r2, [r4, #8]
    5d86:	f104 0110 	add.w	r1, r4, #16
    5d8a:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
    5d8c:	6823      	ldr	r3, [r4, #0]
    5d8e:	b133      	cbz	r3, 5d9e <lv_refr_vdb_flush+0x6a>
    5d90:	6862      	ldr	r2, [r4, #4]
    5d92:	b122      	cbz	r2, 5d9e <lv_refr_vdb_flush+0x6a>
        if(vdb->buf_act == vdb->buf1)
    5d94:	68a1      	ldr	r1, [r4, #8]
            vdb->buf_act = vdb->buf2;
    5d96:	428b      	cmp	r3, r1
    5d98:	bf08      	it	eq
    5d9a:	4613      	moveq	r3, r2
    5d9c:	60a3      	str	r3, [r4, #8]
    5d9e:	bd38      	pop	{r3, r4, r5, pc}
    5da0:	20008084 	.word	0x20008084
    5da4:	00010fd1 	.word	0x00010fd1
    5da8:	00010fd5 	.word	0x00010fd5

00005dac <lv_refr_area_part>:
{
    5dac:	b570      	push	{r4, r5, r6, lr}
    5dae:	b082      	sub	sp, #8
    5db0:	4606      	mov	r6, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
    5db2:	4d1a      	ldr	r5, [pc, #104]	; (5e1c <lv_refr_area_part+0x70>)
    5db4:	6828      	ldr	r0, [r5, #0]
    5db6:	4b1a      	ldr	r3, [pc, #104]	; (5e20 <lv_refr_area_part+0x74>)
    5db8:	4798      	blx	r3
    5dba:	4604      	mov	r4, r0
    if(lv_disp_is_double_buf(disp_refr) == false) {
    5dbc:	6828      	ldr	r0, [r5, #0]
    5dbe:	4b19      	ldr	r3, [pc, #100]	; (5e24 <lv_refr_area_part+0x78>)
    5dc0:	4798      	blx	r3
    5dc2:	b938      	cbnz	r0, 5dd4 <lv_refr_area_part+0x28>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
    5dc4:	6828      	ldr	r0, [r5, #0]
        while(vdb->flushing) {
    5dc6:	69a3      	ldr	r3, [r4, #24]
    5dc8:	b123      	cbz	r3, 5dd4 <lv_refr_area_part+0x28>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
    5dca:	69c3      	ldr	r3, [r0, #28]
    5dcc:	2b00      	cmp	r3, #0
    5dce:	d0fa      	beq.n	5dc6 <lv_refr_area_part+0x1a>
    5dd0:	4798      	blx	r3
    5dd2:	e7f7      	b.n	5dc4 <lv_refr_area_part+0x18>
    _lv_area_intersect(&start_mask, area_p, &vdb->area);
    5dd4:	f104 0210 	add.w	r2, r4, #16
    5dd8:	4631      	mov	r1, r6
    5dda:	4668      	mov	r0, sp
    5ddc:	4b12      	ldr	r3, [pc, #72]	; (5e28 <lv_refr_area_part+0x7c>)
    5dde:	4798      	blx	r3
    top_p = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
    5de0:	4c0e      	ldr	r4, [pc, #56]	; (5e1c <lv_refr_area_part+0x70>)
    5de2:	6820      	ldr	r0, [r4, #0]
    5de4:	4b11      	ldr	r3, [pc, #68]	; (5e2c <lv_refr_area_part+0x80>)
    5de6:	4798      	blx	r3
    5de8:	4601      	mov	r1, r0
    5dea:	4668      	mov	r0, sp
    5dec:	4b10      	ldr	r3, [pc, #64]	; (5e30 <lv_refr_area_part+0x84>)
    5dee:	4798      	blx	r3
    lv_refr_obj_and_children(top_p, &start_mask);
    5df0:	4669      	mov	r1, sp
    5df2:	4d10      	ldr	r5, [pc, #64]	; (5e34 <lv_refr_area_part+0x88>)
    5df4:	47a8      	blx	r5
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
    5df6:	6820      	ldr	r0, [r4, #0]
    5df8:	4b0f      	ldr	r3, [pc, #60]	; (5e38 <lv_refr_area_part+0x8c>)
    5dfa:	4798      	blx	r3
    5dfc:	4669      	mov	r1, sp
    5dfe:	47a8      	blx	r5
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
    5e00:	6820      	ldr	r0, [r4, #0]
    5e02:	4b0e      	ldr	r3, [pc, #56]	; (5e3c <lv_refr_area_part+0x90>)
    5e04:	4798      	blx	r3
    5e06:	4669      	mov	r1, sp
    5e08:	47a8      	blx	r5
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
    5e0a:	6820      	ldr	r0, [r4, #0]
    5e0c:	4b0c      	ldr	r3, [pc, #48]	; (5e40 <lv_refr_area_part+0x94>)
    5e0e:	4798      	blx	r3
    5e10:	b108      	cbz	r0, 5e16 <lv_refr_area_part+0x6a>
}
    5e12:	b002      	add	sp, #8
    5e14:	bd70      	pop	{r4, r5, r6, pc}
        lv_refr_vdb_flush();
    5e16:	4b0b      	ldr	r3, [pc, #44]	; (5e44 <lv_refr_area_part+0x98>)
    5e18:	4798      	blx	r3
}
    5e1a:	e7fa      	b.n	5e12 <lv_refr_area_part+0x66>
    5e1c:	20008084 	.word	0x20008084
    5e20:	00010fd1 	.word	0x00010fd1
    5e24:	00010fd5 	.word	0x00010fd5
    5e28:	0001150d 	.word	0x0001150d
    5e2c:	00002341 	.word	0x00002341
    5e30:	00005b0d 	.word	0x00005b0d
    5e34:	00005ca9 	.word	0x00005ca9
    5e38:	00002381 	.word	0x00002381
    5e3c:	000023c1 	.word	0x000023c1
    5e40:	00010fe9 	.word	0x00010fe9
    5e44:	00005d35 	.word	0x00005d35

00005e48 <_lv_refr_init>:
{
    5e48:	4770      	bx	lr
	...

00005e4c <_lv_inv_area>:
{
    5e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e4e:	b085      	sub	sp, #20
    5e50:	460c      	mov	r4, r1
    if(!disp) disp = lv_disp_get_default();
    5e52:	4605      	mov	r5, r0
    5e54:	2800      	cmp	r0, #0
    5e56:	d054      	beq.n	5f02 <_lv_inv_area+0xb6>
    if(area_p == NULL) {
    5e58:	2c00      	cmp	r4, #0
    5e5a:	d057      	beq.n	5f0c <_lv_inv_area+0xc0>
    scr_area.x1 = 0;
    5e5c:	2300      	movs	r3, #0
    5e5e:	f8ad 3008 	strh.w	r3, [sp, #8]
    scr_area.y1 = 0;
    5e62:	f8ad 300a 	strh.w	r3, [sp, #10]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
    5e66:	4628      	mov	r0, r5
    5e68:	4b36      	ldr	r3, [pc, #216]	; (5f44 <_lv_inv_area+0xf8>)
    5e6a:	4798      	blx	r3
    5e6c:	3801      	subs	r0, #1
    5e6e:	f8ad 000c 	strh.w	r0, [sp, #12]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
    5e72:	4628      	mov	r0, r5
    5e74:	4b34      	ldr	r3, [pc, #208]	; (5f48 <_lv_inv_area+0xfc>)
    5e76:	4798      	blx	r3
    5e78:	3801      	subs	r0, #1
    5e7a:	f8ad 000e 	strh.w	r0, [sp, #14]
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
    5e7e:	aa02      	add	r2, sp, #8
    5e80:	4621      	mov	r1, r4
    5e82:	4668      	mov	r0, sp
    5e84:	4b31      	ldr	r3, [pc, #196]	; (5f4c <_lv_inv_area+0x100>)
    5e86:	4798      	blx	r3
    if(suc != false) {
    5e88:	2800      	cmp	r0, #0
    5e8a:	d045      	beq.n	5f18 <_lv_inv_area+0xcc>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp->driver, &com_area);
    5e8c:	692b      	ldr	r3, [r5, #16]
    5e8e:	b113      	cbz	r3, 5e96 <_lv_inv_area+0x4a>
    5e90:	4669      	mov	r1, sp
    5e92:	4628      	mov	r0, r5
    5e94:	4798      	blx	r3
        for(i = 0; i < disp->inv_p; i++) {
    5e96:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
    5e9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    5e9e:	b19b      	cbz	r3, 5ec8 <_lv_inv_area+0x7c>
    5ea0:	2100      	movs	r1, #0
    5ea2:	460c      	mov	r4, r1
            if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
    5ea4:	460f      	mov	r7, r1
    5ea6:	4e2a      	ldr	r6, [pc, #168]	; (5f50 <_lv_inv_area+0x104>)
    5ea8:	3109      	adds	r1, #9
    5eaa:	463a      	mov	r2, r7
    5eac:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
    5eb0:	4668      	mov	r0, sp
    5eb2:	47b0      	blx	r6
    5eb4:	bb80      	cbnz	r0, 5f18 <_lv_inv_area+0xcc>
        for(i = 0; i < disp->inv_p; i++) {
    5eb6:	3401      	adds	r4, #1
    5eb8:	b2a4      	uxth	r4, r4
    5eba:	4621      	mov	r1, r4
    5ebc:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
    5ec0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    5ec4:	429c      	cmp	r4, r3
    5ec6:	dbef      	blt.n	5ea8 <_lv_inv_area+0x5c>
        if(disp->inv_p < LV_INV_BUF_SIZE) {
    5ec8:	2b1f      	cmp	r3, #31
    5eca:	dc27      	bgt.n	5f1c <_lv_inv_area+0xd0>
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
    5ecc:	3309      	adds	r3, #9
    5ece:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    5ed2:	f10d 32ff 	add.w	r2, sp, #4294967295
    5ed6:	f103 0008 	add.w	r0, r3, #8
        *d8 = *s8;
    5eda:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    5ede:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    5ee2:	4283      	cmp	r3, r0
    5ee4:	d1f9      	bne.n	5eda <_lv_inv_area+0x8e>
        disp->inv_p++;
    5ee6:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
    5eea:	f3c3 0209 	ubfx	r2, r3, #0, #10
    5eee:	3201      	adds	r2, #1
    5ef0:	f362 0309 	bfi	r3, r2, #0, #10
    5ef4:	f8a5 3168 	strh.w	r3, [r5, #360]	; 0x168
        lv_task_set_prio(disp->refr_task, LV_REFR_TASK_PRIO);
    5ef8:	2103      	movs	r1, #3
    5efa:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    5efc:	4b15      	ldr	r3, [pc, #84]	; (5f54 <_lv_inv_area+0x108>)
    5efe:	4798      	blx	r3
    5f00:	e00a      	b.n	5f18 <_lv_inv_area+0xcc>
    if(!disp) disp = lv_disp_get_default();
    5f02:	4b15      	ldr	r3, [pc, #84]	; (5f58 <_lv_inv_area+0x10c>)
    5f04:	4798      	blx	r3
    if(!disp) return;
    5f06:	4605      	mov	r5, r0
    5f08:	b130      	cbz	r0, 5f18 <_lv_inv_area+0xcc>
    5f0a:	e7a5      	b.n	5e58 <_lv_inv_area+0xc>
        disp->inv_p = 0;
    5f0c:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
    5f10:	f36f 0309 	bfc	r3, #0, #10
    5f14:	f8a5 3168 	strh.w	r3, [r5, #360]	; 0x168
}
    5f18:	b005      	add	sp, #20
    5f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            disp->inv_p = 0;
    5f1c:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
    5f20:	f36f 0309 	bfc	r3, #0, #10
    5f24:	f8a5 3168 	strh.w	r3, [r5, #360]	; 0x168
    5f28:	f10d 0207 	add.w	r2, sp, #7
    5f2c:	f105 0050 	add.w	r0, r5, #80	; 0x50
    uint8_t * d8 = (uint8_t *)dst;
    5f30:	f105 0348 	add.w	r3, r5, #72	; 0x48
        *d8 = *s8;
    5f34:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    5f38:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    5f3c:	4283      	cmp	r3, r0
    5f3e:	d1f9      	bne.n	5f34 <_lv_inv_area+0xe8>
    5f40:	e7d1      	b.n	5ee6 <_lv_inv_area+0x9a>
    5f42:	bf00      	nop
    5f44:	00010ee1 	.word	0x00010ee1
    5f48:	00010f09 	.word	0x00010f09
    5f4c:	0001150d 	.word	0x0001150d
    5f50:	00011761 	.word	0x00011761
    5f54:	0001394d 	.word	0x0001394d
    5f58:	00010ed5 	.word	0x00010ed5

00005f5c <_lv_refr_get_disp_refreshing>:
}
    5f5c:	4b01      	ldr	r3, [pc, #4]	; (5f64 <_lv_refr_get_disp_refreshing+0x8>)
    5f5e:	6818      	ldr	r0, [r3, #0]
    5f60:	4770      	bx	lr
    5f62:	bf00      	nop
    5f64:	20008084 	.word	0x20008084

00005f68 <_lv_disp_refr_task>:
{
    5f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5f6c:	b08d      	sub	sp, #52	; 0x34
    5f6e:	4605      	mov	r5, r0
    uint32_t start = lv_tick_get();
    5f70:	4bb7      	ldr	r3, [pc, #732]	; (6250 <_lv_disp_refr_task+0x2e8>)
    5f72:	4798      	blx	r3
    5f74:	9009      	str	r0, [sp, #36]	; 0x24
    disp_refr = task->user_data;
    5f76:	4cb7      	ldr	r4, [pc, #732]	; (6254 <_lv_disp_refr_task+0x2ec>)
    5f78:	68eb      	ldr	r3, [r5, #12]
    5f7a:	6023      	str	r3, [r4, #0]
    lv_task_set_prio(task, LV_TASK_PRIO_OFF);
    5f7c:	2100      	movs	r1, #0
    5f7e:	4628      	mov	r0, r5
    5f80:	4bb5      	ldr	r3, [pc, #724]	; (6258 <_lv_disp_refr_task+0x2f0>)
    5f82:	4798      	blx	r3
    if(disp_refr->act_scr == NULL) {
    5f84:	6820      	ldr	r0, [r4, #0]
    5f86:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    5f88:	b17b      	cbz	r3, 5faa <_lv_disp_refr_task+0x42>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
    5f8a:	f8b0 3168 	ldrh.w	r3, [r0, #360]	; 0x168
    5f8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    5f92:	2b00      	cmp	r3, #0
    5f94:	f000 8278 	beq.w	6488 <_lv_disp_refr_task+0x520>
    5f98:	f04f 0848 	mov.w	r8, #72	; 0x48
    5f9c:	2700      	movs	r7, #0
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
    5f9e:	4dad      	ldr	r5, [pc, #692]	; (6254 <_lv_disp_refr_task+0x2ec>)
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
    5fa0:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 6288 <_lv_disp_refr_task+0x320>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
    5fa4:	f8df b2c8 	ldr.w	fp, [pc, #712]	; 6270 <_lv_disp_refr_task+0x308>
    5fa8:	e04d      	b.n	6046 <_lv_disp_refr_task+0xde>
        disp_refr->inv_p = 0;
    5faa:	f8b0 3168 	ldrh.w	r3, [r0, #360]	; 0x168
    5fae:	f36f 0309 	bfc	r3, #0, #10
    5fb2:	f8a0 3168 	strh.w	r3, [r0, #360]	; 0x168
        return;
    5fb6:	e262      	b.n	647e <_lv_disp_refr_task+0x516>
                disp_refr->inv_area_joined[join_from] = 1;
    5fb8:	4426      	add	r6, r4
    5fba:	2301      	movs	r3, #1
    5fbc:	f886 3148 	strb.w	r3, [r6, #328]	; 0x148
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
    5fc0:	3401      	adds	r4, #1
    5fc2:	6828      	ldr	r0, [r5, #0]
    5fc4:	f8b0 3168 	ldrh.w	r3, [r0, #360]	; 0x168
    5fc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    5fcc:	429c      	cmp	r4, r3
    5fce:	d230      	bcs.n	6032 <_lv_disp_refr_task+0xca>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
    5fd0:	1903      	adds	r3, r0, r4
    5fd2:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
    5fd6:	2b00      	cmp	r3, #0
    5fd8:	d1f2      	bne.n	5fc0 <_lv_disp_refr_task+0x58>
    5fda:	42a7      	cmp	r7, r4
    5fdc:	d0f0      	beq.n	5fc0 <_lv_disp_refr_task+0x58>
    5fde:	f104 0609 	add.w	r6, r4, #9
    5fe2:	00f6      	lsls	r6, r6, #3
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
    5fe4:	1981      	adds	r1, r0, r6
    5fe6:	4440      	add	r0, r8
    5fe8:	47d0      	blx	sl
    5fea:	2800      	cmp	r0, #0
    5fec:	d0e8      	beq.n	5fc0 <_lv_disp_refr_task+0x58>
            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
    5fee:	6829      	ldr	r1, [r5, #0]
    5ff0:	198a      	adds	r2, r1, r6
    5ff2:	4441      	add	r1, r8
    5ff4:	a80a      	add	r0, sp, #40	; 0x28
    5ff6:	4b99      	ldr	r3, [pc, #612]	; (625c <_lv_disp_refr_task+0x2f4>)
    5ff8:	4798      	blx	r3
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
    5ffa:	a80a      	add	r0, sp, #40	; 0x28
    5ffc:	47d8      	blx	fp
    5ffe:	9003      	str	r0, [sp, #12]
    6000:	6828      	ldr	r0, [r5, #0]
    6002:	4440      	add	r0, r8
    6004:	47d8      	blx	fp
    6006:	4681      	mov	r9, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
    6008:	6828      	ldr	r0, [r5, #0]
    600a:	4430      	add	r0, r6
    600c:	47d8      	blx	fp
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
    600e:	4448      	add	r0, r9
    6010:	9b03      	ldr	r3, [sp, #12]
    6012:	4283      	cmp	r3, r0
    6014:	d2d4      	bcs.n	5fc0 <_lv_disp_refr_task+0x58>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
    6016:	682e      	ldr	r6, [r5, #0]
    6018:	eb06 0308 	add.w	r3, r6, r8
    601c:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    6020:	f103 0008 	add.w	r0, r3, #8
        *d8 = *s8;
    6024:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    6028:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    602c:	4283      	cmp	r3, r0
    602e:	d1f9      	bne.n	6024 <_lv_disp_refr_task+0xbc>
    6030:	e7c2      	b.n	5fb8 <_lv_disp_refr_task+0x50>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
    6032:	3701      	adds	r7, #1
    6034:	6828      	ldr	r0, [r5, #0]
    6036:	f8b0 3168 	ldrh.w	r3, [r0, #360]	; 0x168
    603a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    603e:	f108 0808 	add.w	r8, r8, #8
    6042:	429f      	cmp	r7, r3
    6044:	d20e      	bcs.n	6064 <_lv_disp_refr_task+0xfc>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
    6046:	4438      	add	r0, r7
    6048:	f890 3148 	ldrb.w	r3, [r0, #328]	; 0x148
    604c:	2b00      	cmp	r3, #0
    604e:	d1f0      	bne.n	6032 <_lv_disp_refr_task+0xca>
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
    6050:	6828      	ldr	r0, [r5, #0]
    6052:	f8b0 3168 	ldrh.w	r3, [r0, #360]	; 0x168
    6056:	f3c3 0309 	ubfx	r3, r3, #0, #10
    605a:	2b00      	cmp	r3, #0
    605c:	f000 81fa 	beq.w	6454 <_lv_disp_refr_task+0x4ec>
    6060:	2400      	movs	r4, #0
    6062:	e7b5      	b.n	5fd0 <_lv_disp_refr_task+0x68>
    px_num = 0;
    6064:	2100      	movs	r1, #0
    6066:	4a7b      	ldr	r2, [pc, #492]	; (6254 <_lv_disp_refr_task+0x2ec>)
    6068:	6051      	str	r1, [r2, #4]
    if(disp_refr->inv_p == 0) return;
    606a:	2b00      	cmp	r3, #0
    606c:	f000 81fa 	beq.w	6464 <_lv_disp_refr_task+0x4fc>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
    6070:	1e5a      	subs	r2, r3, #1
    6072:	4611      	mov	r1, r2
    6074:	9207      	str	r2, [sp, #28]
    6076:	d432      	bmi.n	60de <_lv_disp_refr_task+0x176>
        if(disp_refr->inv_area_joined[i] == 0) {
    6078:	1882      	adds	r2, r0, r2
    607a:	f892 2148 	ldrb.w	r2, [r2, #328]	; 0x148
    607e:	b17a      	cbz	r2, 60a0 <_lv_disp_refr_task+0x138>
    6080:	f203 1347 	addw	r3, r3, #327	; 0x147
    6084:	4403      	add	r3, r0
    6086:	460a      	mov	r2, r1
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
    6088:	3a01      	subs	r2, #1
    608a:	f1b2 3fff 	cmp.w	r2, #4294967295
    608e:	d005      	beq.n	609c <_lv_disp_refr_task+0x134>
        if(disp_refr->inv_area_joined[i] == 0) {
    6090:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    6094:	2900      	cmp	r1, #0
    6096:	d1f7      	bne.n	6088 <_lv_disp_refr_task+0x120>
    6098:	9207      	str	r2, [sp, #28]
    609a:	e001      	b.n	60a0 <_lv_disp_refr_task+0x138>
    int32_t last_i = 0;
    609c:	2300      	movs	r3, #0
    609e:	9307      	str	r3, [sp, #28]
    disp_refr->driver.buffer->last_area = 0;
    60a0:	6842      	ldr	r2, [r0, #4]
    60a2:	f892 3020 	ldrb.w	r3, [r2, #32]
    60a6:	f36f 0300 	bfc	r3, #0, #1
    60aa:	f882 3020 	strb.w	r3, [r2, #32]
    disp_refr->driver.buffer->last_part = 0;
    60ae:	6842      	ldr	r2, [r0, #4]
    60b0:	f892 3020 	ldrb.w	r3, [r2, #32]
    60b4:	f36f 0341 	bfc	r3, #1, #1
    60b8:	f882 3020 	strb.w	r3, [r2, #32]
    for(i = 0; i < disp_refr->inv_p; i++) {
    60bc:	4b65      	ldr	r3, [pc, #404]	; (6254 <_lv_disp_refr_task+0x2ec>)
    60be:	681c      	ldr	r4, [r3, #0]
    60c0:	f8b4 3168 	ldrh.w	r3, [r4, #360]	; 0x168
    60c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    60c8:	2b00      	cmp	r3, #0
    60ca:	f000 81cb 	beq.w	6464 <_lv_disp_refr_task+0x4fc>
    60ce:	2348      	movs	r3, #72	; 0x48
    60d0:	9306      	str	r3, [sp, #24]
    60d2:	f04f 0a00 	mov.w	sl, #0
            if(disp_refr->driver.monitor_cb) px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
    60d6:	f8df b17c 	ldr.w	fp, [pc, #380]	; 6254 <_lv_disp_refr_task+0x2ec>
    60da:	4627      	mov	r7, r4
    60dc:	e045      	b.n	616a <_lv_disp_refr_task+0x202>
    int32_t last_i = 0;
    60de:	2300      	movs	r3, #0
    60e0:	9307      	str	r3, [sp, #28]
    60e2:	e7dd      	b.n	60a0 <_lv_disp_refr_task+0x138>
            if(i == last_i) disp_refr->driver.buffer->last_area = 1;
    60e4:	687a      	ldr	r2, [r7, #4]
    60e6:	f892 3020 	ldrb.w	r3, [r2, #32]
    60ea:	f043 0301 	orr.w	r3, r3, #1
    60ee:	f882 3020 	strb.w	r3, [r2, #32]
    60f2:	e043      	b.n	617c <_lv_disp_refr_task+0x214>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
    60f4:	f8db 0000 	ldr.w	r0, [fp]
    60f8:	4b59      	ldr	r3, [pc, #356]	; (6260 <_lv_disp_refr_task+0x2f8>)
    60fa:	4798      	blx	r3
    60fc:	4604      	mov	r4, r0
        vdb->area.x1        = 0;
    60fe:	2500      	movs	r5, #0
    6100:	8205      	strh	r5, [r0, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
    6102:	f8db 0000 	ldr.w	r0, [fp]
    6106:	4b57      	ldr	r3, [pc, #348]	; (6264 <_lv_disp_refr_task+0x2fc>)
    6108:	4798      	blx	r3
    610a:	3801      	subs	r0, #1
    610c:	82a0      	strh	r0, [r4, #20]
        vdb->area.y1        = 0;
    610e:	8265      	strh	r5, [r4, #18]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
    6110:	f8db 0000 	ldr.w	r0, [fp]
    6114:	4b54      	ldr	r3, [pc, #336]	; (6268 <_lv_disp_refr_task+0x300>)
    6116:	4798      	blx	r3
    6118:	3801      	subs	r0, #1
    611a:	82e0      	strh	r0, [r4, #22]
        disp_refr->driver.buffer->last_part = 1;
    611c:	f8db 3000 	ldr.w	r3, [fp]
    6120:	685a      	ldr	r2, [r3, #4]
    6122:	f892 3020 	ldrb.w	r3, [r2, #32]
    6126:	f043 0302 	orr.w	r3, r3, #2
    612a:	f882 3020 	strb.w	r3, [r2, #32]
        lv_refr_area_part(area_p);
    612e:	9803      	ldr	r0, [sp, #12]
    6130:	4b4e      	ldr	r3, [pc, #312]	; (626c <_lv_disp_refr_task+0x304>)
    6132:	4798      	blx	r3
            if(disp_refr->driver.monitor_cb) px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
    6134:	f8db 0000 	ldr.w	r0, [fp]
    6138:	6983      	ldr	r3, [r0, #24]
    613a:	b143      	cbz	r3, 614e <_lv_disp_refr_task+0x1e6>
    613c:	9b06      	ldr	r3, [sp, #24]
    613e:	4418      	add	r0, r3
    6140:	4b4b      	ldr	r3, [pc, #300]	; (6270 <_lv_disp_refr_task+0x308>)
    6142:	4798      	blx	r3
    6144:	f8db 3004 	ldr.w	r3, [fp, #4]
    6148:	4403      	add	r3, r0
    614a:	f8cb 3004 	str.w	r3, [fp, #4]
    for(i = 0; i < disp_refr->inv_p; i++) {
    614e:	f10a 0a01 	add.w	sl, sl, #1
    6152:	f8db 7000 	ldr.w	r7, [fp]
    6156:	9b06      	ldr	r3, [sp, #24]
    6158:	3308      	adds	r3, #8
    615a:	9306      	str	r3, [sp, #24]
    615c:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
    6160:	f3c3 0309 	ubfx	r3, r3, #0, #10
    6164:	459a      	cmp	sl, r3
    6166:	f280 817d 	bge.w	6464 <_lv_disp_refr_task+0x4fc>
        if(disp_refr->inv_area_joined[i] == 0) {
    616a:	eb07 030a 	add.w	r3, r7, sl
    616e:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
    6172:	2b00      	cmp	r3, #0
    6174:	d1eb      	bne.n	614e <_lv_disp_refr_task+0x1e6>
            if(i == last_i) disp_refr->driver.buffer->last_area = 1;
    6176:	9b07      	ldr	r3, [sp, #28]
    6178:	4553      	cmp	r3, sl
    617a:	d0b3      	beq.n	60e4 <_lv_disp_refr_task+0x17c>
            disp_refr->driver.buffer->last_part = 0;
    617c:	687a      	ldr	r2, [r7, #4]
    617e:	f892 3020 	ldrb.w	r3, [r2, #32]
    6182:	f36f 0341 	bfc	r3, #1, #1
    6186:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area(&disp_refr->inv_areas[i]);
    618a:	9b06      	ldr	r3, [sp, #24]
    618c:	18fb      	adds	r3, r7, r3
    618e:	9303      	str	r3, [sp, #12]
    if(lv_disp_is_true_double_buf(disp_refr)) {
    6190:	4638      	mov	r0, r7
    6192:	4b38      	ldr	r3, [pc, #224]	; (6274 <_lv_disp_refr_task+0x30c>)
    6194:	4798      	blx	r3
    6196:	2800      	cmp	r0, #0
    6198:	d1ac      	bne.n	60f4 <_lv_disp_refr_task+0x18c>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
    619a:	f8db 0000 	ldr.w	r0, [fp]
    619e:	4b30      	ldr	r3, [pc, #192]	; (6260 <_lv_disp_refr_task+0x2f8>)
    61a0:	4798      	blx	r3
    61a2:	4606      	mov	r6, r0
    61a4:	eb07 07ca 	add.w	r7, r7, sl, lsl #3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    61a8:	f8b7 404c 	ldrh.w	r4, [r7, #76]	; 0x4c
    61ac:	3401      	adds	r4, #1
    61ae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
    61b2:	1ae4      	subs	r4, r4, r3
    61b4:	b224      	sxth	r4, r4
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    61b6:	f9b7 504e 	ldrsh.w	r5, [r7, #78]	; 0x4e
    61ba:	f105 0801 	add.w	r8, r5, #1
    61be:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
    61c2:	eba8 0803 	sub.w	r8, r8, r3
    61c6:	fa0f f888 	sxth.w	r8, r8
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
    61ca:	f8db 0000 	ldr.w	r0, [fp]
    61ce:	4b26      	ldr	r3, [pc, #152]	; (6268 <_lv_disp_refr_task+0x300>)
    61d0:	4798      	blx	r3
        lv_coord_t y2 =
    61d2:	4285      	cmp	r5, r0
    61d4:	da34      	bge.n	6240 <_lv_disp_refr_task+0x2d8>
    61d6:	f9b7 904e 	ldrsh.w	r9, [r7, #78]	; 0x4e
        int32_t max_row = (uint32_t)vdb->size / w;
    61da:	68f3      	ldr	r3, [r6, #12]
    61dc:	fbb3 f3f4 	udiv	r3, r3, r4
    61e0:	4598      	cmp	r8, r3
    61e2:	bfa8      	it	ge
    61e4:	4698      	movge	r8, r3
        if(disp_refr->driver.rounder_cb) {
    61e6:	f8db 3000 	ldr.w	r3, [fp]
    61ea:	691b      	ldr	r3, [r3, #16]
    61ec:	2b00      	cmp	r3, #0
    61ee:	d052      	beq.n	6296 <_lv_disp_refr_task+0x32e>
            tmp.x1 = 0;
    61f0:	2300      	movs	r3, #0
    61f2:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            tmp.x2 = 0;
    61f6:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            tmp.y1 = 0;
    61fa:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
            lv_coord_t h_tmp = max_row;
    61fe:	fa0f f588 	sxth.w	r5, r8
    6202:	1e6c      	subs	r4, r5, #1
    6204:	b224      	sxth	r4, r4
                tmp.y2 = h_tmp - 1;
    6206:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
    620a:	f8db 0000 	ldr.w	r0, [fp]
    620e:	6903      	ldr	r3, [r0, #16]
    6210:	a90a      	add	r1, sp, #40	; 0x28
    6212:	4798      	blx	r3
    6214:	f9bd 102e 	ldrsh.w	r1, [sp, #46]	; 0x2e
    6218:	1c4b      	adds	r3, r1, #1
    621a:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
    621e:	1a9b      	subs	r3, r3, r2
                if(lv_area_get_height(&tmp) <= max_row) break;
    6220:	b21b      	sxth	r3, r3
    6222:	4598      	cmp	r8, r3
    6224:	da32      	bge.n	628c <_lv_disp_refr_task+0x324>
                h_tmp--;
    6226:	4625      	mov	r5, r4
            } while(h_tmp > 0);
    6228:	2c00      	cmp	r4, #0
    622a:	dcea      	bgt.n	6202 <_lv_disp_refr_task+0x29a>
                LV_LOG_WARN("Can't set VDB height using the round function. (Wrong round_cb or to "
    622c:	4b12      	ldr	r3, [pc, #72]	; (6278 <_lv_disp_refr_task+0x310>)
    622e:	9300      	str	r3, [sp, #0]
    6230:	4b12      	ldr	r3, [pc, #72]	; (627c <_lv_disp_refr_task+0x314>)
    6232:	f240 129f 	movw	r2, #415	; 0x19f
    6236:	4912      	ldr	r1, [pc, #72]	; (6280 <_lv_disp_refr_task+0x318>)
    6238:	2002      	movs	r0, #2
    623a:	4c12      	ldr	r4, [pc, #72]	; (6284 <_lv_disp_refr_task+0x31c>)
    623c:	47a0      	blx	r4
    623e:	e779      	b.n	6134 <_lv_disp_refr_task+0x1cc>
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
    6240:	f8db 0000 	ldr.w	r0, [fp]
    6244:	4b08      	ldr	r3, [pc, #32]	; (6268 <_lv_disp_refr_task+0x300>)
    6246:	4798      	blx	r3
    6248:	3801      	subs	r0, #1
        lv_coord_t y2 =
    624a:	fa0f f980 	sxth.w	r9, r0
    624e:	e7c4      	b.n	61da <_lv_disp_refr_task+0x272>
    6250:	0001104d 	.word	0x0001104d
    6254:	20008084 	.word	0x20008084
    6258:	0001394d 	.word	0x0001394d
    625c:	00011563 	.word	0x00011563
    6260:	00010fd1 	.word	0x00010fd1
    6264:	00010ee1 	.word	0x00010ee1
    6268:	00010f09 	.word	0x00010f09
    626c:	00005dad 	.word	0x00005dad
    6270:	000114f1 	.word	0x000114f1
    6274:	00010fe9 	.word	0x00010fe9
    6278:	00024a20 	.word	0x00024a20
    627c:	000249e4 	.word	0x000249e4
    6280:	000249f4 	.word	0x000249f4
    6284:	00012251 	.word	0x00012251
    6288:	0001171d 	.word	0x0001171d
            if(h_tmp <= 0) {
    628c:	2d00      	cmp	r5, #0
                max_row = tmp.y2 + 1;
    628e:	bfc8      	it	gt
    6290:	f101 0801 	addgt.w	r8, r1, #1
            if(h_tmp <= 0) {
    6294:	ddca      	ble.n	622c <_lv_disp_refr_task+0x2c4>
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
    6296:	f9b7 404a 	ldrsh.w	r4, [r7, #74]	; 0x4a
    629a:	f8cd 9010 	str.w	r9, [sp, #16]
    629e:	eb04 0308 	add.w	r3, r4, r8
    62a2:	3b01      	subs	r3, #1
    62a4:	454b      	cmp	r3, r9
    62a6:	dc4b      	bgt.n	6340 <_lv_disp_refr_task+0x3d8>
            vdb->area.y2 = row + max_row - 1;
    62a8:	fa1f f388 	uxth.w	r3, r8
    62ac:	9305      	str	r3, [sp, #20]
    62ae:	3b01      	subs	r3, #1
    62b0:	f8cd a020 	str.w	sl, [sp, #32]
    62b4:	469a      	mov	sl, r3
    62b6:	e00d      	b.n	62d4 <_lv_disp_refr_task+0x36c>
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
    62b8:	45a9      	cmp	r9, r5
    62ba:	d01c      	beq.n	62f6 <_lv_disp_refr_task+0x38e>
            lv_refr_area_part(area_p);
    62bc:	9803      	ldr	r0, [sp, #12]
    62be:	4b78      	ldr	r3, [pc, #480]	; (64a0 <_lv_disp_refr_task+0x538>)
    62c0:	4798      	blx	r3
    62c2:	9b05      	ldr	r3, [sp, #20]
    62c4:	441c      	add	r4, r3
    62c6:	b224      	sxth	r4, r4
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
    62c8:	eb04 0308 	add.w	r3, r4, r8
    62cc:	3b01      	subs	r3, #1
    62ce:	9a04      	ldr	r2, [sp, #16]
    62d0:	4293      	cmp	r3, r2
    62d2:	dc1a      	bgt.n	630a <_lv_disp_refr_task+0x3a2>
            vdb->area.x1 = area_p->x1;
    62d4:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
    62d8:	8233      	strh	r3, [r6, #16]
            vdb->area.x2 = area_p->x2;
    62da:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
    62de:	82b3      	strh	r3, [r6, #20]
            vdb->area.y1 = row;
    62e0:	8274      	strh	r4, [r6, #18]
    62e2:	b2a4      	uxth	r4, r4
    62e4:	eb04 050a 	add.w	r5, r4, sl
    62e8:	b22d      	sxth	r5, r5
            vdb->area.y2 = row + max_row - 1;
    62ea:	82f5      	strh	r5, [r6, #22]
            if(vdb->area.y2 > y2) vdb->area.y2 = y2;
    62ec:	45a9      	cmp	r9, r5
    62ee:	dae3      	bge.n	62b8 <_lv_disp_refr_task+0x350>
    62f0:	f8a6 9016 	strh.w	r9, [r6, #22]
            row_last = vdb->area.y2;
    62f4:	464d      	mov	r5, r9
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
    62f6:	f8db 3000 	ldr.w	r3, [fp]
    62fa:	685a      	ldr	r2, [r3, #4]
    62fc:	f892 3020 	ldrb.w	r3, [r2, #32]
    6300:	f043 0302 	orr.w	r3, r3, #2
    6304:	f882 3020 	strb.w	r3, [r2, #32]
    6308:	e7d8      	b.n	62bc <_lv_disp_refr_task+0x354>
    630a:	f8dd a020 	ldr.w	sl, [sp, #32]
        if(y2 != row_last) {
    630e:	45a9      	cmp	r9, r5
    6310:	f43f af10 	beq.w	6134 <_lv_disp_refr_task+0x1cc>
            vdb->area.x1 = area_p->x1;
    6314:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
    6318:	8233      	strh	r3, [r6, #16]
            vdb->area.x2 = area_p->x2;
    631a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
    631e:	82b3      	strh	r3, [r6, #20]
            vdb->area.y1 = row;
    6320:	8274      	strh	r4, [r6, #18]
            vdb->area.y2 = y2;
    6322:	f8a6 9016 	strh.w	r9, [r6, #22]
            disp_refr->driver.buffer->last_part = 1;
    6326:	f8db 3000 	ldr.w	r3, [fp]
    632a:	685a      	ldr	r2, [r3, #4]
    632c:	f892 3020 	ldrb.w	r3, [r2, #32]
    6330:	f043 0302 	orr.w	r3, r3, #2
    6334:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area_part(area_p);
    6338:	9803      	ldr	r0, [sp, #12]
    633a:	4b59      	ldr	r3, [pc, #356]	; (64a0 <_lv_disp_refr_task+0x538>)
    633c:	4798      	blx	r3
    633e:	e6f9      	b.n	6134 <_lv_disp_refr_task+0x1cc>
        lv_coord_t row_last = 0;
    6340:	2500      	movs	r5, #0
    6342:	e7e4      	b.n	630e <_lv_disp_refr_task+0x3a6>
        if(lv_disp_is_true_double_buf(disp_refr) && disp_refr->driver.set_px_cb == NULL) {
    6344:	4b57      	ldr	r3, [pc, #348]	; (64a4 <_lv_disp_refr_task+0x53c>)
    6346:	4798      	blx	r3
    6348:	b118      	cbz	r0, 6352 <_lv_disp_refr_task+0x3ea>
    634a:	4b57      	ldr	r3, [pc, #348]	; (64a8 <_lv_disp_refr_task+0x540>)
    634c:	6818      	ldr	r0, [r3, #0]
    634e:	6943      	ldr	r3, [r0, #20]
    6350:	b1eb      	cbz	r3, 638e <_lv_disp_refr_task+0x426>
        _lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
    6352:	4c55      	ldr	r4, [pc, #340]	; (64a8 <_lv_disp_refr_task+0x540>)
    6354:	6820      	ldr	r0, [r4, #0]
    6356:	f44f 7180 	mov.w	r1, #256	; 0x100
    635a:	3048      	adds	r0, #72	; 0x48
    635c:	4d53      	ldr	r5, [pc, #332]	; (64ac <_lv_disp_refr_task+0x544>)
    635e:	47a8      	blx	r5
        _lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
    6360:	6820      	ldr	r0, [r4, #0]
    6362:	2120      	movs	r1, #32
    6364:	f500 70a4 	add.w	r0, r0, #328	; 0x148
    6368:	47a8      	blx	r5
        disp_refr->inv_p = 0;
    636a:	6823      	ldr	r3, [r4, #0]
    636c:	f8b3 2168 	ldrh.w	r2, [r3, #360]	; 0x168
    6370:	f36f 0209 	bfc	r2, #0, #10
    6374:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
        elaps = lv_tick_elaps(start);
    6378:	9809      	ldr	r0, [sp, #36]	; 0x24
    637a:	4b4d      	ldr	r3, [pc, #308]	; (64b0 <_lv_disp_refr_task+0x548>)
    637c:	4798      	blx	r3
    637e:	4601      	mov	r1, r0
        if(disp_refr->driver.monitor_cb) {
    6380:	6820      	ldr	r0, [r4, #0]
    6382:	6983      	ldr	r3, [r0, #24]
    6384:	2b00      	cmp	r3, #0
    6386:	d076      	beq.n	6476 <_lv_disp_refr_task+0x50e>
            disp_refr->driver.monitor_cb(&disp_refr->driver, elaps, px_num);
    6388:	6862      	ldr	r2, [r4, #4]
    638a:	4798      	blx	r3
    638c:	e073      	b.n	6476 <_lv_disp_refr_task+0x50e>
            lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
    638e:	4b49      	ldr	r3, [pc, #292]	; (64b4 <_lv_disp_refr_task+0x54c>)
    6390:	4798      	blx	r3
    6392:	4604      	mov	r4, r0
            lv_refr_vdb_flush();
    6394:	4b48      	ldr	r3, [pc, #288]	; (64b8 <_lv_disp_refr_task+0x550>)
    6396:	4798      	blx	r3
            while(vdb->flushing)
    6398:	69a3      	ldr	r3, [r4, #24]
    639a:	2b00      	cmp	r3, #0
    639c:	d1fc      	bne.n	6398 <_lv_disp_refr_task+0x430>
            uint8_t * buf_act = (uint8_t *)vdb->buf_act;
    639e:	68a3      	ldr	r3, [r4, #8]
    63a0:	9303      	str	r3, [sp, #12]
            uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
    63a2:	f8d4 a000 	ldr.w	sl, [r4]
    63a6:	4553      	cmp	r3, sl
    63a8:	bf08      	it	eq
    63aa:	f8d4 a004 	ldreq.w	sl, [r4, #4]
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
    63ae:	4c3e      	ldr	r4, [pc, #248]	; (64a8 <_lv_disp_refr_task+0x540>)
    63b0:	6820      	ldr	r0, [r4, #0]
    63b2:	4b42      	ldr	r3, [pc, #264]	; (64bc <_lv_disp_refr_task+0x554>)
    63b4:	4798      	blx	r3
    63b6:	9004      	str	r0, [sp, #16]
            for(a = 0; a < disp_refr->inv_p; a++) {
    63b8:	6823      	ldr	r3, [r4, #0]
    63ba:	f8b3 2168 	ldrh.w	r2, [r3, #360]	; 0x168
    63be:	f3c2 0209 	ubfx	r2, r2, #0, #10
    63c2:	2a00      	cmp	r2, #0
    63c4:	d0c5      	beq.n	6352 <_lv_disp_refr_task+0x3ea>
                        start_offs += hres * sizeof(lv_color_t);
    63c6:	0045      	lsls	r5, r0, #1
    63c8:	2200      	movs	r2, #0
    63ca:	4690      	mov	r8, r2
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
    63cc:	46a1      	mov	r9, r4
    63ce:	e00c      	b.n	63ea <_lv_disp_refr_task+0x482>
            for(a = 0; a < disp_refr->inv_p; a++) {
    63d0:	f108 0801 	add.w	r8, r8, #1
    63d4:	fa1f f888 	uxth.w	r8, r8
    63d8:	4642      	mov	r2, r8
    63da:	f8d9 3000 	ldr.w	r3, [r9]
    63de:	f8b3 1168 	ldrh.w	r1, [r3, #360]	; 0x168
    63e2:	f3c1 0109 	ubfx	r1, r1, #0, #10
    63e6:	4588      	cmp	r8, r1
    63e8:	dab3      	bge.n	6352 <_lv_disp_refr_task+0x3ea>
                if(disp_refr->inv_area_joined[a] == 0) {
    63ea:	1899      	adds	r1, r3, r2
    63ec:	f891 1148 	ldrb.w	r1, [r1, #328]	; 0x148
    63f0:	2900      	cmp	r1, #0
    63f2:	d1ed      	bne.n	63d0 <_lv_disp_refr_task+0x468>
    63f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
                        (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
    63f8:	f9b3 704a 	ldrsh.w	r7, [r3, #74]	; 0x4a
    63fc:	f9b3 1048 	ldrsh.w	r1, [r3, #72]	; 0x48
    6400:	9804      	ldr	r0, [sp, #16]
    6402:	fb07 1600 	mla	r6, r7, r0, r1
                    uint32_t start_offs =
    6406:	0076      	lsls	r6, r6, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    6408:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
    640c:	3301      	adds	r3, #1
    640e:	1a5b      	subs	r3, r3, r1
                    uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
    6410:	b21b      	sxth	r3, r3
    6412:	005b      	lsls	r3, r3, #1
    6414:	9305      	str	r3, [sp, #20]
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
    6416:	f8d9 3000 	ldr.w	r3, [r9]
    641a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    641e:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
    6422:	42bb      	cmp	r3, r7
    6424:	dbd4      	blt.n	63d0 <_lv_disp_refr_task+0x468>
    6426:	9b03      	ldr	r3, [sp, #12]
    6428:	eb03 0b06 	add.w	fp, r3, r6
    642c:	4456      	add	r6, sl
    642e:	3209      	adds	r2, #9
    6430:	00d4      	lsls	r4, r2, #3
                        _lv_memcpy(buf_act + start_offs, buf_ina + start_offs, line_length);
    6432:	9a05      	ldr	r2, [sp, #20]
    6434:	4631      	mov	r1, r6
    6436:	4658      	mov	r0, fp
    6438:	4b21      	ldr	r3, [pc, #132]	; (64c0 <_lv_disp_refr_task+0x558>)
    643a:	4798      	blx	r3
    643c:	3701      	adds	r7, #1
    643e:	b23f      	sxth	r7, r7
    6440:	44ab      	add	fp, r5
    6442:	442e      	add	r6, r5
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
    6444:	f8d9 3000 	ldr.w	r3, [r9]
    6448:	4423      	add	r3, r4
    644a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    644e:	42bb      	cmp	r3, r7
    6450:	daef      	bge.n	6432 <_lv_disp_refr_task+0x4ca>
    6452:	e7bd      	b.n	63d0 <_lv_disp_refr_task+0x468>
    px_num = 0;
    6454:	2200      	movs	r2, #0
    6456:	4b14      	ldr	r3, [pc, #80]	; (64a8 <_lv_disp_refr_task+0x540>)
    6458:	605a      	str	r2, [r3, #4]
    if(disp_refr->inv_p == 0) return;
    645a:	f8b0 3168 	ldrh.w	r3, [r0, #360]	; 0x168
    645e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    6462:	b97b      	cbnz	r3, 6484 <_lv_disp_refr_task+0x51c>
    if(disp_refr->inv_p != 0) {
    6464:	4b10      	ldr	r3, [pc, #64]	; (64a8 <_lv_disp_refr_task+0x540>)
    6466:	6818      	ldr	r0, [r3, #0]
    6468:	f8b0 3168 	ldrh.w	r3, [r0, #360]	; 0x168
    646c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    6470:	2b00      	cmp	r3, #0
    6472:	f47f af67 	bne.w	6344 <_lv_disp_refr_task+0x3dc>
    _lv_mem_buf_free_all();
    6476:	4b13      	ldr	r3, [pc, #76]	; (64c4 <_lv_disp_refr_task+0x55c>)
    6478:	4798      	blx	r3
    _lv_font_clean_up_fmt_txt();
    647a:	4b13      	ldr	r3, [pc, #76]	; (64c8 <_lv_disp_refr_task+0x560>)
    647c:	4798      	blx	r3
}
    647e:	b00d      	add	sp, #52	; 0x34
    6480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int32_t last_i = 0;
    6484:	9207      	str	r2, [sp, #28]
    6486:	e60b      	b.n	60a0 <_lv_disp_refr_task+0x138>
    px_num = 0;
    6488:	2200      	movs	r2, #0
    648a:	4b07      	ldr	r3, [pc, #28]	; (64a8 <_lv_disp_refr_task+0x540>)
    648c:	605a      	str	r2, [r3, #4]
    if(disp_refr->inv_p == 0) return;
    648e:	f8b0 3168 	ldrh.w	r3, [r0, #360]	; 0x168
    6492:	f3c3 0309 	ubfx	r3, r3, #0, #10
    6496:	2b00      	cmp	r3, #0
    6498:	d0ed      	beq.n	6476 <_lv_disp_refr_task+0x50e>
    int32_t last_i = 0;
    649a:	9207      	str	r2, [sp, #28]
    649c:	e600      	b.n	60a0 <_lv_disp_refr_task+0x138>
    649e:	bf00      	nop
    64a0:	00005dad 	.word	0x00005dad
    64a4:	00010fe9 	.word	0x00010fe9
    64a8:	20008084 	.word	0x20008084
    64ac:	00012b2b 	.word	0x00012b2b
    64b0:	00011065 	.word	0x00011065
    64b4:	00010fd1 	.word	0x00010fd1
    64b8:	00005d35 	.word	0x00005d35
    64bc:	00010ee1 	.word	0x00010ee1
    64c0:	00012649 	.word	0x00012649
    64c4:	000125ed 	.word	0x000125ed
    64c8:	00010ce9 	.word	0x00010ce9

000064cc <lv_style_init>:
/**
 * Initialize a style
 * @param style pointer to a style to initialize
 */
void lv_style_init(lv_style_t * style)
{
    64cc:	b508      	push	{r3, lr}
    _lv_memset_00(style, sizeof(lv_style_t));
    64ce:	2104      	movs	r1, #4
    64d0:	4b01      	ldr	r3, [pc, #4]	; (64d8 <lv_style_init+0xc>)
    64d2:	4798      	blx	r3
    64d4:	bd08      	pop	{r3, pc}
    64d6:	bf00      	nop
    64d8:	00012b2b 	.word	0x00012b2b

000064dc <lv_style_list_init>:
/**
 * Initialize a style list
 * @param list a style list to initialize
 */
void lv_style_list_init(lv_style_list_t * list)
{
    64dc:	b508      	push	{r3, lr}
    _lv_memset_00(list, sizeof(lv_style_list_t));
    64de:	2108      	movs	r1, #8
    64e0:	4b01      	ldr	r3, [pc, #4]	; (64e8 <lv_style_list_init+0xc>)
    64e2:	4798      	blx	r3
    64e4:	bd08      	pop	{r3, pc}
    64e6:	bf00      	nop
    64e8:	00012b2b 	.word	0x00012b2b

000064ec <_lv_style_list_remove_style>:
 * Remove a style from a style list
 * @param style_list pointer to a style list
 * @param style pointer to a style to remove
 */
void _lv_style_list_remove_style(lv_style_list_t * list, lv_style_t * style)
{
    64ec:	b570      	push	{r4, r5, r6, lr}
    64ee:	b082      	sub	sp, #8
    LV_ASSERT_STYLE_LIST(list);
    LV_ASSERT_STYLE(style);

    if(list->style_cnt == 0) return;
    64f0:	7906      	ldrb	r6, [r0, #4]
    64f2:	2e00      	cmp	r6, #0
    64f4:	d055      	beq.n	65a2 <_lv_style_list_remove_style+0xb6>
    64f6:	4604      	mov	r4, r0

    /*Check if the style really exists here*/
    uint8_t i;
    bool found = false;
    for(i = 0; i < list->style_cnt; i++) {
        if(list->style_list[i] == style) {
    64f8:	6800      	ldr	r0, [r0, #0]
    64fa:	6803      	ldr	r3, [r0, #0]
    64fc:	4299      	cmp	r1, r3
    64fe:	d00a      	beq.n	6516 <_lv_style_list_remove_style+0x2a>
    6500:	4603      	mov	r3, r0
    6502:	1e75      	subs	r5, r6, #1
    6504:	b2ed      	uxtb	r5, r5
    6506:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    for(i = 0; i < list->style_cnt; i++) {
    650a:	429d      	cmp	r5, r3
    650c:	d049      	beq.n	65a2 <_lv_style_list_remove_style+0xb6>
        if(list->style_list[i] == style) {
    650e:	f853 2f04 	ldr.w	r2, [r3, #4]!
    6512:	428a      	cmp	r2, r1
    6514:	d1f9      	bne.n	650a <_lv_style_list_remove_style+0x1e>
    6516:	460d      	mov	r5, r1
            break;
        }
    }
    if(found == false) return;

    if(list->style_cnt == 1) {
    6518:	2e01      	cmp	r6, #1
    651a:	d00e      	beq.n	653a <_lv_style_list_remove_style+0x4e>
        list->style_cnt = 0;
        list->has_local = 0;
        return;
    }

    lv_style_t ** new_classes = lv_mem_realloc(list->style_list, sizeof(lv_style_t *) * (list->style_cnt - 1));
    651c:	1e71      	subs	r1, r6, #1
    651e:	0089      	lsls	r1, r1, #2
    6520:	4b21      	ldr	r3, [pc, #132]	; (65a8 <_lv_style_list_remove_style+0xbc>)
    6522:	4798      	blx	r3
    6524:	4606      	mov	r6, r0
    LV_ASSERT_MEM(new_classes);
    6526:	4b21      	ldr	r3, [pc, #132]	; (65ac <_lv_style_list_remove_style+0xc0>)
    6528:	4798      	blx	r3
    652a:	b180      	cbz	r0, 654e <_lv_style_list_remove_style+0x62>
    if(new_classes == NULL) {
    652c:	b1ee      	cbz	r6, 656a <_lv_style_list_remove_style+0x7e>
        LV_LOG_WARN("lv_style_list_remove_style: couldn't reallocate class list");
        return;
    }
    uint8_t j;
    for(i = 0, j = 0; i < list->style_cnt; i++) {
    652e:	7921      	ldrb	r1, [r4, #4]
    6530:	2900      	cmp	r1, #0
    6532:	d033      	beq.n	659c <_lv_style_list_remove_style+0xb0>
    6534:	2200      	movs	r2, #0
    6536:	4613      	mov	r3, r2
    6538:	e026      	b.n	6588 <_lv_style_list_remove_style+0x9c>
        lv_mem_free(list->style_list);
    653a:	4b1d      	ldr	r3, [pc, #116]	; (65b0 <_lv_style_list_remove_style+0xc4>)
    653c:	4798      	blx	r3
        list->style_list = NULL;
    653e:	2300      	movs	r3, #0
    6540:	6023      	str	r3, [r4, #0]
        list->style_cnt = 0;
    6542:	7123      	strb	r3, [r4, #4]
        list->has_local = 0;
    6544:	7962      	ldrb	r2, [r4, #5]
    6546:	f363 0200 	bfi	r2, r3, #0, #1
    654a:	7162      	strb	r2, [r4, #5]
        return;
    654c:	e029      	b.n	65a2 <_lv_style_list_remove_style+0xb6>
    LV_ASSERT_MEM(new_classes);
    654e:	4b19      	ldr	r3, [pc, #100]	; (65b4 <_lv_style_list_remove_style+0xc8>)
    6550:	9300      	str	r3, [sp, #0]
    6552:	f44f 7282 	mov.w	r2, #260	; 0x104
    6556:	4918      	ldr	r1, [pc, #96]	; (65b8 <_lv_style_list_remove_style+0xcc>)
    6558:	2003      	movs	r0, #3
    655a:	4c18      	ldr	r4, [pc, #96]	; (65bc <_lv_style_list_remove_style+0xd0>)
    655c:	47a0      	blx	r4
    655e:	4632      	mov	r2, r6
    6560:	2300      	movs	r3, #0
    6562:	4817      	ldr	r0, [pc, #92]	; (65c0 <_lv_style_list_remove_style+0xd4>)
    6564:	4917      	ldr	r1, [pc, #92]	; (65c4 <_lv_style_list_remove_style+0xd8>)
    6566:	4788      	blx	r1
    6568:	e7fe      	b.n	6568 <_lv_style_list_remove_style+0x7c>
        LV_LOG_WARN("lv_style_list_remove_style: couldn't reallocate class list");
    656a:	4b17      	ldr	r3, [pc, #92]	; (65c8 <_lv_style_list_remove_style+0xdc>)
    656c:	9300      	str	r3, [sp, #0]
    656e:	4b11      	ldr	r3, [pc, #68]	; (65b4 <_lv_style_list_remove_style+0xc8>)
    6570:	f44f 7283 	mov.w	r2, #262	; 0x106
    6574:	4910      	ldr	r1, [pc, #64]	; (65b8 <_lv_style_list_remove_style+0xcc>)
    6576:	2002      	movs	r0, #2
    6578:	4c10      	ldr	r4, [pc, #64]	; (65bc <_lv_style_list_remove_style+0xd0>)
    657a:	47a0      	blx	r4
        return;
    657c:	e011      	b.n	65a2 <_lv_style_list_remove_style+0xb6>
    for(i = 0, j = 0; i < list->style_cnt; i++) {
    657e:	3301      	adds	r3, #1
    6580:	b2db      	uxtb	r3, r3
    6582:	7921      	ldrb	r1, [r4, #4]
    6584:	4299      	cmp	r1, r3
    6586:	d909      	bls.n	659c <_lv_style_list_remove_style+0xb0>
        if(list->style_list[i] == style) continue;
    6588:	6821      	ldr	r1, [r4, #0]
    658a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    658e:	428d      	cmp	r5, r1
    6590:	d0f5      	beq.n	657e <_lv_style_list_remove_style+0x92>
        new_classes[j] = list->style_list[i];
    6592:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
        j++;
    6596:	3201      	adds	r2, #1
    6598:	b2d2      	uxtb	r2, r2
    659a:	e7f0      	b.n	657e <_lv_style_list_remove_style+0x92>

    }

    list->style_cnt--;
    659c:	3901      	subs	r1, #1
    659e:	7121      	strb	r1, [r4, #4]
    list->style_list = new_classes;
    65a0:	6026      	str	r6, [r4, #0]
}
    65a2:	b002      	add	sp, #8
    65a4:	bd70      	pop	{r4, r5, r6, pc}
    65a6:	bf00      	nop
    65a8:	0001288d 	.word	0x0001288d
    65ac:	000022a5 	.word	0x000022a5
    65b0:	000124b9 	.word	0x000124b9
    65b4:	00024a70 	.word	0x00024a70
    65b8:	00024b30 	.word	0x00024b30
    65bc:	00012251 	.word	0x00012251
    65c0:	00023fcc 	.word	0x00023fcc
    65c4:	000022ad 	.word	0x000022ad
    65c8:	00024b5c 	.word	0x00024b5c

000065cc <_lv_style_list_add_style>:
    if(list == NULL) return;
    65cc:	2800      	cmp	r0, #0
    65ce:	d051      	beq.n	6674 <_lv_style_list_add_style+0xa8>
{
    65d0:	b570      	push	{r4, r5, r6, lr}
    65d2:	b082      	sub	sp, #8
    65d4:	4604      	mov	r4, r0
    65d6:	460e      	mov	r6, r1
    _lv_style_list_remove_style(list, style);
    65d8:	4b27      	ldr	r3, [pc, #156]	; (6678 <_lv_style_list_add_style+0xac>)
    65da:	4798      	blx	r3
    if(list->style_cnt == 0) new_classes = lv_mem_alloc(sizeof(lv_style_t *));
    65dc:	7923      	ldrb	r3, [r4, #4]
    65de:	bb63      	cbnz	r3, 663a <_lv_style_list_add_style+0x6e>
    65e0:	2004      	movs	r0, #4
    65e2:	4b26      	ldr	r3, [pc, #152]	; (667c <_lv_style_list_add_style+0xb0>)
    65e4:	4798      	blx	r3
    65e6:	4605      	mov	r5, r0
    LV_ASSERT_MEM(new_classes);
    65e8:	4628      	mov	r0, r5
    65ea:	4b25      	ldr	r3, [pc, #148]	; (6680 <_lv_style_list_add_style+0xb4>)
    65ec:	4798      	blx	r3
    65ee:	b358      	cbz	r0, 6648 <_lv_style_list_add_style+0x7c>
    if(new_classes == NULL) {
    65f0:	2d00      	cmp	r5, #0
    65f2:	d036      	beq.n	6662 <_lv_style_list_add_style+0x96>
    if(list->has_trans) first_style++;
    65f4:	7963      	ldrb	r3, [r4, #5]
    uint8_t first_style = 0;
    65f6:	f3c3 0040 	ubfx	r0, r3, #1, #1
    if(list->has_local) first_style++;
    65fa:	f013 0f01 	tst.w	r3, #1
    65fe:	bf18      	it	ne
    6600:	3001      	addne	r0, #1
    for(i = list->style_cnt; i > first_style; i--) {
    6602:	7923      	ldrb	r3, [r4, #4]
    6604:	4298      	cmp	r0, r3
    6606:	d210      	bcs.n	662a <_lv_style_list_add_style+0x5e>
    6608:	eb05 0183 	add.w	r1, r5, r3, lsl #2
    660c:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    6610:	3a01      	subs	r2, #1
    6612:	3b01      	subs	r3, #1
    6614:	1a1b      	subs	r3, r3, r0
    6616:	b2db      	uxtb	r3, r3
    6618:	1ad3      	subs	r3, r2, r3
    661a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
        new_classes[i] = new_classes[i - 1];
    661e:	f851 2c04 	ldr.w	r2, [r1, #-4]
    6622:	f841 2904 	str.w	r2, [r1], #-4
    for(i = list->style_cnt; i > first_style; i--) {
    6626:	4299      	cmp	r1, r3
    6628:	d1f9      	bne.n	661e <_lv_style_list_add_style+0x52>
    new_classes[first_style] = style;
    662a:	f845 6020 	str.w	r6, [r5, r0, lsl #2]
    list->style_cnt++;
    662e:	7923      	ldrb	r3, [r4, #4]
    6630:	3301      	adds	r3, #1
    6632:	7123      	strb	r3, [r4, #4]
    list->style_list = new_classes;
    6634:	6025      	str	r5, [r4, #0]
}
    6636:	b002      	add	sp, #8
    6638:	bd70      	pop	{r4, r5, r6, pc}
    else new_classes = lv_mem_realloc(list->style_list, sizeof(lv_style_t *) * (list->style_cnt + 1));
    663a:	3301      	adds	r3, #1
    663c:	0099      	lsls	r1, r3, #2
    663e:	6820      	ldr	r0, [r4, #0]
    6640:	4b10      	ldr	r3, [pc, #64]	; (6684 <_lv_style_list_add_style+0xb8>)
    6642:	4798      	blx	r3
    6644:	4605      	mov	r5, r0
    6646:	e7cf      	b.n	65e8 <_lv_style_list_add_style+0x1c>
    LV_ASSERT_MEM(new_classes);
    6648:	4b0f      	ldr	r3, [pc, #60]	; (6688 <_lv_style_list_add_style+0xbc>)
    664a:	9300      	str	r3, [sp, #0]
    664c:	22d0      	movs	r2, #208	; 0xd0
    664e:	490f      	ldr	r1, [pc, #60]	; (668c <_lv_style_list_add_style+0xc0>)
    6650:	2003      	movs	r0, #3
    6652:	4c0f      	ldr	r4, [pc, #60]	; (6690 <_lv_style_list_add_style+0xc4>)
    6654:	47a0      	blx	r4
    6656:	462a      	mov	r2, r5
    6658:	2300      	movs	r3, #0
    665a:	480e      	ldr	r0, [pc, #56]	; (6694 <_lv_style_list_add_style+0xc8>)
    665c:	490e      	ldr	r1, [pc, #56]	; (6698 <_lv_style_list_add_style+0xcc>)
    665e:	4788      	blx	r1
    6660:	e7fe      	b.n	6660 <_lv_style_list_add_style+0x94>
        LV_LOG_WARN("lv_style_list_add_style: couldn't add the class");
    6662:	4b0e      	ldr	r3, [pc, #56]	; (669c <_lv_style_list_add_style+0xd0>)
    6664:	9300      	str	r3, [sp, #0]
    6666:	4b08      	ldr	r3, [pc, #32]	; (6688 <_lv_style_list_add_style+0xbc>)
    6668:	22d2      	movs	r2, #210	; 0xd2
    666a:	4908      	ldr	r1, [pc, #32]	; (668c <_lv_style_list_add_style+0xc0>)
    666c:	2002      	movs	r0, #2
    666e:	4c08      	ldr	r4, [pc, #32]	; (6690 <_lv_style_list_add_style+0xc4>)
    6670:	47a0      	blx	r4
        return;
    6672:	e7e0      	b.n	6636 <_lv_style_list_add_style+0x6a>
    6674:	4770      	bx	lr
    6676:	bf00      	nop
    6678:	000064ed 	.word	0x000064ed
    667c:	000123d1 	.word	0x000123d1
    6680:	000022a5 	.word	0x000022a5
    6684:	0001288d 	.word	0x0001288d
    6688:	00024a8c 	.word	0x00024a8c
    668c:	00024b30 	.word	0x00024b30
    6690:	00012251 	.word	0x00012251
    6694:	00023fcc 	.word	0x00023fcc
    6698:	000022ad 	.word	0x000022ad
    669c:	00024b98 	.word	0x00024b98

000066a0 <get_alloc_local_style>:
 * Get he local style from a style list. Allocate it if not exists yet.
 * @param list pointer to a style list
 * @return pointer to the local style
 */
static lv_style_t * get_alloc_local_style(lv_style_list_t * list)
{
    66a0:	b530      	push	{r4, r5, lr}
    66a2:	b083      	sub	sp, #12
    LV_ASSERT_STYLE_LIST(list);

    if(list->has_local) return lv_style_list_get_style(list, 0);
    66a4:	7943      	ldrb	r3, [r0, #5]
    66a6:	f013 0f01 	tst.w	r3, #1
    66aa:	d010      	beq.n	66ce <get_alloc_local_style+0x2e>
    if(list->has_trans && list->skip_trans) id++;
    66ac:	f003 0306 	and.w	r3, r3, #6
    66b0:	2b06      	cmp	r3, #6
    66b2:	bf14      	ite	ne
    66b4:	2300      	movne	r3, #0
    66b6:	2301      	moveq	r3, #1
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    66b8:	7902      	ldrb	r2, [r0, #4]
    66ba:	2a00      	cmp	r2, #0
    66bc:	d034      	beq.n	6728 <get_alloc_local_style+0x88>
    66be:	429a      	cmp	r2, r3
    66c0:	d934      	bls.n	672c <get_alloc_local_style+0x8c>
    return list->style_list[id];
    66c2:	6802      	ldr	r2, [r0, #0]
    66c4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    /*Add the local style to the furst place*/
    _lv_style_list_add_style(list, local_style);
    list->has_local = 1;

    return local_style;
}
    66c8:	4620      	mov	r0, r4
    66ca:	b003      	add	sp, #12
    66cc:	bd30      	pop	{r4, r5, pc}
    66ce:	4605      	mov	r5, r0
    lv_style_t * local_style = lv_mem_alloc(sizeof(lv_style_t));
    66d0:	2004      	movs	r0, #4
    66d2:	4b17      	ldr	r3, [pc, #92]	; (6730 <get_alloc_local_style+0x90>)
    66d4:	4798      	blx	r3
    66d6:	4604      	mov	r4, r0
    LV_ASSERT_MEM(local_style);
    66d8:	4b16      	ldr	r3, [pc, #88]	; (6734 <get_alloc_local_style+0x94>)
    66da:	4798      	blx	r3
    66dc:	b160      	cbz	r0, 66f8 <get_alloc_local_style+0x58>
    if(local_style == NULL) {
    66de:	b1cc      	cbz	r4, 6714 <get_alloc_local_style+0x74>
    lv_style_init(local_style);
    66e0:	4620      	mov	r0, r4
    66e2:	4b15      	ldr	r3, [pc, #84]	; (6738 <get_alloc_local_style+0x98>)
    66e4:	4798      	blx	r3
    _lv_style_list_add_style(list, local_style);
    66e6:	4621      	mov	r1, r4
    66e8:	4628      	mov	r0, r5
    66ea:	4b14      	ldr	r3, [pc, #80]	; (673c <get_alloc_local_style+0x9c>)
    66ec:	4798      	blx	r3
    list->has_local = 1;
    66ee:	796b      	ldrb	r3, [r5, #5]
    66f0:	f043 0301 	orr.w	r3, r3, #1
    66f4:	716b      	strb	r3, [r5, #5]
    return local_style;
    66f6:	e7e7      	b.n	66c8 <get_alloc_local_style+0x28>
    LV_ASSERT_MEM(local_style);
    66f8:	4b11      	ldr	r3, [pc, #68]	; (6740 <get_alloc_local_style+0xa0>)
    66fa:	9300      	str	r3, [sp, #0]
    66fc:	f240 4235 	movw	r2, #1077	; 0x435
    6700:	4910      	ldr	r1, [pc, #64]	; (6744 <get_alloc_local_style+0xa4>)
    6702:	2003      	movs	r0, #3
    6704:	4d10      	ldr	r5, [pc, #64]	; (6748 <get_alloc_local_style+0xa8>)
    6706:	47a8      	blx	r5
    6708:	4622      	mov	r2, r4
    670a:	2300      	movs	r3, #0
    670c:	480f      	ldr	r0, [pc, #60]	; (674c <get_alloc_local_style+0xac>)
    670e:	4910      	ldr	r1, [pc, #64]	; (6750 <get_alloc_local_style+0xb0>)
    6710:	4788      	blx	r1
    6712:	e7fe      	b.n	6712 <get_alloc_local_style+0x72>
        LV_LOG_WARN("get_local_style: couldn't create local style");
    6714:	4b0f      	ldr	r3, [pc, #60]	; (6754 <get_alloc_local_style+0xb4>)
    6716:	9300      	str	r3, [sp, #0]
    6718:	4b09      	ldr	r3, [pc, #36]	; (6740 <get_alloc_local_style+0xa0>)
    671a:	f240 4237 	movw	r2, #1079	; 0x437
    671e:	4909      	ldr	r1, [pc, #36]	; (6744 <get_alloc_local_style+0xa4>)
    6720:	2002      	movs	r0, #2
    6722:	4d09      	ldr	r5, [pc, #36]	; (6748 <get_alloc_local_style+0xa8>)
    6724:	47a8      	blx	r5
        return NULL;
    6726:	e7cf      	b.n	66c8 <get_alloc_local_style+0x28>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    6728:	2400      	movs	r4, #0
    672a:	e7cd      	b.n	66c8 <get_alloc_local_style+0x28>
    672c:	2400      	movs	r4, #0
    672e:	e7cb      	b.n	66c8 <get_alloc_local_style+0x28>
    6730:	000123d1 	.word	0x000123d1
    6734:	000022a5 	.word	0x000022a5
    6738:	000064cd 	.word	0x000064cd
    673c:	000065cd 	.word	0x000065cd
    6740:	00024aa8 	.word	0x00024aa8
    6744:	00024b30 	.word	0x00024b30
    6748:	00012251 	.word	0x00012251
    674c:	00023fcc 	.word	0x00023fcc
    6750:	000022ad 	.word	0x000022ad
    6754:	00024bc8 	.word	0x00024bc8

00006758 <lv_style_reset>:
{
    6758:	b510      	push	{r4, lr}
    675a:	4604      	mov	r4, r0
    lv_mem_free(style->map);
    675c:	6800      	ldr	r0, [r0, #0]
    675e:	4b02      	ldr	r3, [pc, #8]	; (6768 <lv_style_reset+0x10>)
    6760:	4798      	blx	r3
    style->map = NULL;
    6762:	2300      	movs	r3, #0
    6764:	6023      	str	r3, [r4, #0]
    6766:	bd10      	pop	{r4, pc}
    6768:	000124b9 	.word	0x000124b9

0000676c <_lv_style_get_mem_size>:
    if(style->map == NULL) return 0;
    676c:	6802      	ldr	r2, [r0, #0]
    676e:	b1d2      	cbz	r2, 67a6 <_lv_style_get_mem_size+0x3a>
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    6770:	7813      	ldrb	r3, [r2, #0]
    6772:	2bff      	cmp	r3, #255	; 0xff
    6774:	d013      	beq.n	679e <_lv_style_get_mem_size+0x32>
    6776:	2000      	movs	r0, #0
    6778:	e006      	b.n	6788 <_lv_style_get_mem_size+0x1c>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    677a:	2b0b      	cmp	r3, #11
    677c:	dc0a      	bgt.n	6794 <_lv_style_get_mem_size+0x28>
    677e:	3002      	adds	r0, #2
        i += sizeof(lv_style_property_t);
    6780:	3002      	adds	r0, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    6782:	5c13      	ldrb	r3, [r2, r0]
    6784:	2bff      	cmp	r3, #255	; 0xff
    6786:	d00b      	beq.n	67a0 <_lv_style_get_mem_size+0x34>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    6788:	f003 030f 	and.w	r3, r3, #15
    678c:	2b08      	cmp	r3, #8
    678e:	dcf4      	bgt.n	677a <_lv_style_get_mem_size+0xe>
    6790:	3002      	adds	r0, #2
    6792:	e7f5      	b.n	6780 <_lv_style_get_mem_size+0x14>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    6794:	2b0d      	cmp	r3, #13
    6796:	bfd4      	ite	le
    6798:	3001      	addle	r0, #1
        else i += sizeof(const void *);
    679a:	3004      	addgt	r0, #4
    679c:	e7f0      	b.n	6780 <_lv_style_get_mem_size+0x14>
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    679e:	2000      	movs	r0, #0
    return i + sizeof(lv_style_property_t);
    67a0:	3002      	adds	r0, #2
    67a2:	b280      	uxth	r0, r0
    67a4:	4770      	bx	lr
    if(style->map == NULL) return 0;
    67a6:	2000      	movs	r0, #0
}
    67a8:	4770      	bx	lr
	...

000067ac <lv_style_copy>:
    if(style_src == NULL) return;
    67ac:	b181      	cbz	r1, 67d0 <lv_style_copy+0x24>
{
    67ae:	b570      	push	{r4, r5, r6, lr}
    67b0:	460c      	mov	r4, r1
    if(style_src->map == NULL) return;
    67b2:	680a      	ldr	r2, [r1, #0]
    67b4:	b15a      	cbz	r2, 67ce <lv_style_copy+0x22>
    67b6:	4605      	mov	r5, r0
    uint16_t size = _lv_style_get_mem_size(style_src);
    67b8:	4608      	mov	r0, r1
    67ba:	4b06      	ldr	r3, [pc, #24]	; (67d4 <lv_style_copy+0x28>)
    67bc:	4798      	blx	r3
    67be:	4606      	mov	r6, r0
    style_dest->map = lv_mem_alloc(size);
    67c0:	4b05      	ldr	r3, [pc, #20]	; (67d8 <lv_style_copy+0x2c>)
    67c2:	4798      	blx	r3
    67c4:	6028      	str	r0, [r5, #0]
    _lv_memcpy(style_dest->map, style_src->map, size);
    67c6:	4632      	mov	r2, r6
    67c8:	6821      	ldr	r1, [r4, #0]
    67ca:	4b04      	ldr	r3, [pc, #16]	; (67dc <lv_style_copy+0x30>)
    67cc:	4798      	blx	r3
    67ce:	bd70      	pop	{r4, r5, r6, pc}
    67d0:	4770      	bx	lr
    67d2:	bf00      	nop
    67d4:	0000676d 	.word	0x0000676d
    67d8:	000123d1 	.word	0x000123d1
    67dc:	00012649 	.word	0x00012649

000067e0 <lv_style_remove_prop>:
    if(style == NULL) return false;
    67e0:	2800      	cmp	r0, #0
    67e2:	d06b      	beq.n	68bc <lv_style_remove_prop+0xdc>
{
    67e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    67e8:	4607      	mov	r7, r0
    if(style->map == NULL) return -1;
    67ea:	6800      	ldr	r0, [r0, #0]
    67ec:	2800      	cmp	r0, #0
    67ee:	d06a      	beq.n	68c6 <lv_style_remove_prop+0xe6>
    uint8_t id_to_find = prop & 0xFF;
    67f0:	b2cd      	uxtb	r5, r1
    attr.full = (prop >> 8) & 0xFF;
    67f2:	0a0e      	lsrs	r6, r1, #8
    67f4:	46b4      	mov	ip, r6
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    67f6:	7803      	ldrb	r3, [r0, #0]
    67f8:	2bff      	cmp	r3, #255	; 0xff
    67fa:	d03b      	beq.n	6874 <lv_style_remove_prop+0x94>
    67fc:	f04f 3eff 	mov.w	lr, #4294967295
    6800:	46f0      	mov	r8, lr
    6802:	2200      	movs	r2, #0
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    6804:	f3cc 0c06 	ubfx	ip, ip, #0, #7
    6808:	e027      	b.n	685a <lv_style_remove_prop+0x7a>
            attr_i.full = style->map[i + 1];
    680a:	1884      	adds	r4, r0, r2
    680c:	7864      	ldrb	r4, [r4, #1]
            if(attr_i.bits.state == attr.bits.state) {
    680e:	ea86 0904 	eor.w	r9, r6, r4
    6812:	f019 0f7f 	tst.w	r9, #127	; 0x7f
    6816:	d00b      	beq.n	6830 <lv_style_remove_prop+0x50>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    6818:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    681c:	ea34 090c 	bics.w	r9, r4, ip
    6820:	d11d      	bne.n	685e <lv_style_remove_prop+0x7e>
                if(attr_i.bits.state > weight) {
    6822:	4544      	cmp	r4, r8
                    weight = attr_i.bits.state;
    6824:	bfc4      	itt	gt
    6826:	fa0f f884 	sxthgt.w	r8, r4
                    id_guess = i;
    682a:	fa0f fe82 	sxthgt.w	lr, r2
    682e:	e016      	b.n	685e <lv_style_remove_prop+0x7e>
                return i;
    6830:	4696      	mov	lr, r2
    if(id >= 0) {
    6832:	f1be 0f00 	cmp.w	lr, #0
    6836:	db43      	blt.n	68c0 <lv_style_remove_prop+0xe0>
        attr_found.full = *(style->map + id + 1);
    6838:	4674      	mov	r4, lr
    683a:	4470      	add	r0, lr
        if(attr_found.bits.state == attr_goal.bits.state) {
    683c:	7843      	ldrb	r3, [r0, #1]
    683e:	405e      	eors	r6, r3
    6840:	f016 0f7f 	tst.w	r6, #127	; 0x7f
    6844:	d019      	beq.n	687a <lv_style_remove_prop+0x9a>
    return false;
    6846:	2000      	movs	r0, #0
    6848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    684c:	2b0b      	cmp	r3, #11
    684e:	dc0c      	bgt.n	686a <lv_style_remove_prop+0x8a>
    6850:	3202      	adds	r2, #2
        i += sizeof(lv_style_property_t);
    6852:	3202      	adds	r2, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    6854:	5c83      	ldrb	r3, [r0, r2]
    6856:	2bff      	cmp	r3, #255	; 0xff
    6858:	d0eb      	beq.n	6832 <lv_style_remove_prop+0x52>
        if(style->map[i] == id_to_find) {
    685a:	429d      	cmp	r5, r3
    685c:	d0d5      	beq.n	680a <lv_style_remove_prop+0x2a>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    685e:	f003 030f 	and.w	r3, r3, #15
    6862:	2b08      	cmp	r3, #8
    6864:	dcf2      	bgt.n	684c <lv_style_remove_prop+0x6c>
    6866:	3202      	adds	r2, #2
    6868:	e7f3      	b.n	6852 <lv_style_remove_prop+0x72>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    686a:	2b0d      	cmp	r3, #13
    686c:	bfd4      	ite	le
    686e:	3201      	addle	r2, #1
        else i += sizeof(const void *);
    6870:	3204      	addgt	r2, #4
    6872:	e7ee      	b.n	6852 <lv_style_remove_prop+0x72>
    int16_t id_guess = -1;
    6874:	f04f 3eff 	mov.w	lr, #4294967295
    6878:	e7db      	b.n	6832 <lv_style_remove_prop+0x52>
    687a:	460d      	mov	r5, r1
            uint32_t map_size = _lv_style_get_mem_size(style);
    687c:	4638      	mov	r0, r7
    687e:	4b13      	ldr	r3, [pc, #76]	; (68cc <lv_style_remove_prop+0xec>)
    6880:	4798      	blx	r3
            if((prop & 0xF) < LV_STYLE_ID_COLOR) prop_size += sizeof(lv_style_int_t);
    6882:	f005 010f 	and.w	r1, r5, #15
            else if((prop & 0xF) < LV_STYLE_ID_OPA) prop_size += sizeof(lv_color_t);
    6886:	290b      	cmp	r1, #11
    6888:	dd04      	ble.n	6894 <lv_style_remove_prop+0xb4>
            else prop_size += sizeof(const void *);
    688a:	290e      	cmp	r1, #14
    688c:	bfb4      	ite	lt
    688e:	2103      	movlt	r1, #3
    6890:	2106      	movge	r1, #6
    6892:	e000      	b.n	6896 <lv_style_remove_prop+0xb6>
            else if((prop & 0xF) < LV_STYLE_ID_OPA) prop_size += sizeof(lv_color_t);
    6894:	2104      	movs	r1, #4
            for(i = id; i < map_size - prop_size; i++) {
    6896:	460d      	mov	r5, r1
    6898:	1a41      	subs	r1, r0, r1
    689a:	428c      	cmp	r4, r1
    689c:	d207      	bcs.n	68ae <lv_style_remove_prop+0xce>
    689e:	4623      	mov	r3, r4
                style->map[i] = style->map[i + prop_size];
    68a0:	683a      	ldr	r2, [r7, #0]
    68a2:	1954      	adds	r4, r2, r5
    68a4:	5ce4      	ldrb	r4, [r4, r3]
    68a6:	54d4      	strb	r4, [r2, r3]
            for(i = id; i < map_size - prop_size; i++) {
    68a8:	3301      	adds	r3, #1
    68aa:	428b      	cmp	r3, r1
    68ac:	d1f8      	bne.n	68a0 <lv_style_remove_prop+0xc0>
            style->map = lv_mem_realloc(style->map, map_size - prop_size);
    68ae:	6838      	ldr	r0, [r7, #0]
    68b0:	4b07      	ldr	r3, [pc, #28]	; (68d0 <lv_style_remove_prop+0xf0>)
    68b2:	4798      	blx	r3
    68b4:	6038      	str	r0, [r7, #0]
            return true;
    68b6:	2001      	movs	r0, #1
    68b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(style == NULL) return false;
    68bc:	2000      	movs	r0, #0
    68be:	4770      	bx	lr
    return false;
    68c0:	2000      	movs	r0, #0
    68c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    68c6:	2000      	movs	r0, #0
}
    68c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    68cc:	0000676d 	.word	0x0000676d
    68d0:	0001288d 	.word	0x0001288d

000068d4 <_lv_style_set_int>:
{
    68d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    68d8:	b086      	sub	sp, #24
    68da:	f8ad 100e 	strh.w	r1, [sp, #14]
    68de:	f8ad 200c 	strh.w	r2, [sp, #12]
    if(style->map == NULL) return -1;
    68e2:	6804      	ldr	r4, [r0, #0]
    68e4:	2c00      	cmp	r4, #0
    68e6:	d048      	beq.n	697a <_lv_style_set_int+0xa6>
    uint8_t id_to_find = prop & 0xFF;
    68e8:	b2cf      	uxtb	r7, r1
    attr.full = (prop >> 8) & 0xFF;
    68ea:	0a0d      	lsrs	r5, r1, #8
    68ec:	46ae      	mov	lr, r5
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    68ee:	7823      	ldrb	r3, [r4, #0]
    68f0:	2bff      	cmp	r3, #255	; 0xff
    68f2:	d02c      	beq.n	694e <_lv_style_set_int+0x7a>
    68f4:	f04f 31ff 	mov.w	r1, #4294967295
    68f8:	4688      	mov	r8, r1
    68fa:	2200      	movs	r2, #0
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    68fc:	f3ce 0e06 	ubfx	lr, lr, #0, #7
    6900:	e018      	b.n	6934 <_lv_style_set_int+0x60>
            attr_i.full = style->map[i + 1];
    6902:	18a6      	adds	r6, r4, r2
    6904:	7876      	ldrb	r6, [r6, #1]
            if(attr_i.bits.state == attr.bits.state) {
    6906:	ea85 0c06 	eor.w	ip, r5, r6
    690a:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
    690e:	d021      	beq.n	6954 <_lv_style_set_int+0x80>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    6910:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    6914:	ea36 0c0e 	bics.w	ip, r6, lr
    6918:	d10e      	bne.n	6938 <_lv_style_set_int+0x64>
                if(attr_i.bits.state > weight) {
    691a:	4546      	cmp	r6, r8
                    weight = attr_i.bits.state;
    691c:	bfc4      	itt	gt
    691e:	fa0f f886 	sxthgt.w	r8, r6
                    id_guess = i;
    6922:	b211      	sxthgt	r1, r2
    6924:	e008      	b.n	6938 <_lv_style_set_int+0x64>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    6926:	2b0b      	cmp	r3, #11
    6928:	dc0c      	bgt.n	6944 <_lv_style_set_int+0x70>
    692a:	3202      	adds	r2, #2
        i += sizeof(lv_style_property_t);
    692c:	3202      	adds	r2, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    692e:	5ca3      	ldrb	r3, [r4, r2]
    6930:	2bff      	cmp	r3, #255	; 0xff
    6932:	d00e      	beq.n	6952 <_lv_style_set_int+0x7e>
        if(style->map[i] == id_to_find) {
    6934:	429f      	cmp	r7, r3
    6936:	d0e4      	beq.n	6902 <_lv_style_set_int+0x2e>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    6938:	f003 030f 	and.w	r3, r3, #15
    693c:	2b08      	cmp	r3, #8
    693e:	dcf2      	bgt.n	6926 <_lv_style_set_int+0x52>
    6940:	3202      	adds	r2, #2
    6942:	e7f3      	b.n	692c <_lv_style_set_int+0x58>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    6944:	2b0d      	cmp	r3, #13
    6946:	bfd4      	ite	le
    6948:	3201      	addle	r2, #1
        else i += sizeof(const void *);
    694a:	3204      	addgt	r2, #4
    694c:	e7ee      	b.n	692c <_lv_style_set_int+0x58>
    int16_t id_guess = -1;
    694e:	f04f 31ff 	mov.w	r1, #4294967295
    return id_guess;
    6952:	460a      	mov	r2, r1
    if(id >= 0) {
    6954:	2a00      	cmp	r2, #0
    6956:	db10      	blt.n	697a <_lv_style_set_int+0xa6>
        attr_found.full = *(style->map + id + 1);
    6958:	18a3      	adds	r3, r4, r2
        if(attr_found.bits.state == attr_goal.bits.state) {
    695a:	785b      	ldrb	r3, [r3, #1]
    695c:	405d      	eors	r5, r3
    695e:	f015 0f7f 	tst.w	r5, #127	; 0x7f
    6962:	d10a      	bne.n	697a <_lv_style_set_int+0xa6>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &value, sizeof(lv_style_int_t));
    6964:	3202      	adds	r2, #2
    6966:	18a3      	adds	r3, r4, r2
        *d8 = *s8;
    6968:	f89d 100c 	ldrb.w	r1, [sp, #12]
    696c:	54a1      	strb	r1, [r4, r2]
    696e:	f89d 200d 	ldrb.w	r2, [sp, #13]
    6972:	705a      	strb	r2, [r3, #1]
}
    6974:	b006      	add	sp, #24
    6976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    697a:	4606      	mov	r6, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
    697c:	23ff      	movs	r3, #255	; 0xff
    697e:	f8ad 3016 	strh.w	r3, [sp, #22]
    uint16_t size = _lv_style_get_mem_size(style);
    6982:	4b1d      	ldr	r3, [pc, #116]	; (69f8 <_lv_style_set_int+0x124>)
    6984:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
    6986:	2800      	cmp	r0, #0
    6988:	bf08      	it	eq
    698a:	2002      	moveq	r0, #2
    size += sizeof(lv_style_property_t) + sizeof(lv_style_int_t);
    698c:	1d05      	adds	r5, r0, #4
    style->map = lv_mem_realloc(style->map, size);
    698e:	b2ad      	uxth	r5, r5
    6990:	4629      	mov	r1, r5
    6992:	4620      	mov	r0, r4
    6994:	4b19      	ldr	r3, [pc, #100]	; (69fc <_lv_style_set_int+0x128>)
    6996:	4798      	blx	r3
    6998:	6030      	str	r0, [r6, #0]
    LV_ASSERT_MEM(style->map);
    699a:	4b19      	ldr	r3, [pc, #100]	; (6a00 <_lv_style_set_int+0x12c>)
    699c:	4798      	blx	r3
    699e:	b1e8      	cbz	r0, 69dc <_lv_style_set_int+0x108>
    if(style == NULL) return;
    69a0:	2e00      	cmp	r6, #0
    69a2:	d0e7      	beq.n	6974 <_lv_style_set_int+0xa0>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
    69a4:	1fab      	subs	r3, r5, #6
    69a6:	6832      	ldr	r2, [r6, #0]
    69a8:	18d1      	adds	r1, r2, r3
    69aa:	f89d 000e 	ldrb.w	r0, [sp, #14]
    69ae:	54d0      	strb	r0, [r2, r3]
    69b0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    69b4:	704b      	strb	r3, [r1, #1]
    69b6:	1f2b      	subs	r3, r5, #4
    _lv_memcpy_small(style->map + size - sizeof(lv_style_int_t) - end_mark_size, &value, sizeof(lv_style_int_t));
    69b8:	6832      	ldr	r2, [r6, #0]
    69ba:	18d1      	adds	r1, r2, r3
    69bc:	f89d 000c 	ldrb.w	r0, [sp, #12]
    69c0:	54d0      	strb	r0, [r2, r3]
    69c2:	f89d 300d 	ldrb.w	r3, [sp, #13]
    69c6:	704b      	strb	r3, [r1, #1]
    69c8:	3d02      	subs	r5, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
    69ca:	6833      	ldr	r3, [r6, #0]
    69cc:	195a      	adds	r2, r3, r5
    69ce:	f89d 1016 	ldrb.w	r1, [sp, #22]
    69d2:	5559      	strb	r1, [r3, r5]
    69d4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    69d8:	7053      	strb	r3, [r2, #1]
    69da:	e7cb      	b.n	6974 <_lv_style_set_int+0xa0>
    LV_ASSERT_MEM(style->map);
    69dc:	4b09      	ldr	r3, [pc, #36]	; (6a04 <_lv_style_set_int+0x130>)
    69de:	9300      	str	r3, [sp, #0]
    69e0:	f44f 72c3 	mov.w	r2, #390	; 0x186
    69e4:	4908      	ldr	r1, [pc, #32]	; (6a08 <_lv_style_set_int+0x134>)
    69e6:	2003      	movs	r0, #3
    69e8:	4c08      	ldr	r4, [pc, #32]	; (6a0c <_lv_style_set_int+0x138>)
    69ea:	47a0      	blx	r4
    69ec:	6832      	ldr	r2, [r6, #0]
    69ee:	2300      	movs	r3, #0
    69f0:	4807      	ldr	r0, [pc, #28]	; (6a10 <_lv_style_set_int+0x13c>)
    69f2:	4908      	ldr	r1, [pc, #32]	; (6a14 <_lv_style_set_int+0x140>)
    69f4:	4788      	blx	r1
    69f6:	e7fe      	b.n	69f6 <_lv_style_set_int+0x122>
    69f8:	0000676d 	.word	0x0000676d
    69fc:	0001288d 	.word	0x0001288d
    6a00:	000022a5 	.word	0x000022a5
    6a04:	00024ac0 	.word	0x00024ac0
    6a08:	00024b30 	.word	0x00024b30
    6a0c:	00012251 	.word	0x00012251
    6a10:	00023fcc 	.word	0x00023fcc
    6a14:	000022ad 	.word	0x000022ad

00006a18 <_lv_style_set_color>:
{
    6a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a1c:	b086      	sub	sp, #24
    6a1e:	f8ad 200c 	strh.w	r2, [sp, #12]
    6a22:	f8ad 100e 	strh.w	r1, [sp, #14]
    if(style->map == NULL) return -1;
    6a26:	6804      	ldr	r4, [r0, #0]
    6a28:	2c00      	cmp	r4, #0
    6a2a:	d048      	beq.n	6abe <_lv_style_set_color+0xa6>
    uint8_t id_to_find = prop & 0xFF;
    6a2c:	b2cf      	uxtb	r7, r1
    attr.full = (prop >> 8) & 0xFF;
    6a2e:	0a0d      	lsrs	r5, r1, #8
    6a30:	46ae      	mov	lr, r5
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    6a32:	7823      	ldrb	r3, [r4, #0]
    6a34:	2bff      	cmp	r3, #255	; 0xff
    6a36:	d02c      	beq.n	6a92 <_lv_style_set_color+0x7a>
    6a38:	f04f 31ff 	mov.w	r1, #4294967295
    6a3c:	4688      	mov	r8, r1
    6a3e:	2200      	movs	r2, #0
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    6a40:	f3ce 0e06 	ubfx	lr, lr, #0, #7
    6a44:	e018      	b.n	6a78 <_lv_style_set_color+0x60>
            attr_i.full = style->map[i + 1];
    6a46:	18a6      	adds	r6, r4, r2
    6a48:	7876      	ldrb	r6, [r6, #1]
            if(attr_i.bits.state == attr.bits.state) {
    6a4a:	ea85 0c06 	eor.w	ip, r5, r6
    6a4e:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
    6a52:	d021      	beq.n	6a98 <_lv_style_set_color+0x80>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    6a54:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    6a58:	ea36 0c0e 	bics.w	ip, r6, lr
    6a5c:	d10e      	bne.n	6a7c <_lv_style_set_color+0x64>
                if(attr_i.bits.state > weight) {
    6a5e:	4546      	cmp	r6, r8
                    weight = attr_i.bits.state;
    6a60:	bfc4      	itt	gt
    6a62:	fa0f f886 	sxthgt.w	r8, r6
                    id_guess = i;
    6a66:	b211      	sxthgt	r1, r2
    6a68:	e008      	b.n	6a7c <_lv_style_set_color+0x64>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    6a6a:	2b0b      	cmp	r3, #11
    6a6c:	dc0c      	bgt.n	6a88 <_lv_style_set_color+0x70>
    6a6e:	3202      	adds	r2, #2
        i += sizeof(lv_style_property_t);
    6a70:	3202      	adds	r2, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    6a72:	5ca3      	ldrb	r3, [r4, r2]
    6a74:	2bff      	cmp	r3, #255	; 0xff
    6a76:	d00e      	beq.n	6a96 <_lv_style_set_color+0x7e>
        if(style->map[i] == id_to_find) {
    6a78:	429f      	cmp	r7, r3
    6a7a:	d0e4      	beq.n	6a46 <_lv_style_set_color+0x2e>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    6a7c:	f003 030f 	and.w	r3, r3, #15
    6a80:	2b08      	cmp	r3, #8
    6a82:	dcf2      	bgt.n	6a6a <_lv_style_set_color+0x52>
    6a84:	3202      	adds	r2, #2
    6a86:	e7f3      	b.n	6a70 <_lv_style_set_color+0x58>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    6a88:	2b0d      	cmp	r3, #13
    6a8a:	bfd4      	ite	le
    6a8c:	3201      	addle	r2, #1
        else i += sizeof(const void *);
    6a8e:	3204      	addgt	r2, #4
    6a90:	e7ee      	b.n	6a70 <_lv_style_set_color+0x58>
    int16_t id_guess = -1;
    6a92:	f04f 31ff 	mov.w	r1, #4294967295
    return id_guess;
    6a96:	460a      	mov	r2, r1
    if(id >= 0) {
    6a98:	2a00      	cmp	r2, #0
    6a9a:	db10      	blt.n	6abe <_lv_style_set_color+0xa6>
        attr_found.full = *(style->map + id + 1);
    6a9c:	18a3      	adds	r3, r4, r2
        if(attr_found.bits.state == attr_goal.bits.state) {
    6a9e:	785b      	ldrb	r3, [r3, #1]
    6aa0:	405d      	eors	r5, r3
    6aa2:	f015 0f7f 	tst.w	r5, #127	; 0x7f
    6aa6:	d10a      	bne.n	6abe <_lv_style_set_color+0xa6>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &color, sizeof(lv_color_t));
    6aa8:	3202      	adds	r2, #2
    6aaa:	18a3      	adds	r3, r4, r2
    6aac:	f89d 100c 	ldrb.w	r1, [sp, #12]
    6ab0:	54a1      	strb	r1, [r4, r2]
    6ab2:	f89d 200d 	ldrb.w	r2, [sp, #13]
    6ab6:	705a      	strb	r2, [r3, #1]
}
    6ab8:	b006      	add	sp, #24
    6aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6abe:	4606      	mov	r6, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
    6ac0:	23ff      	movs	r3, #255	; 0xff
    6ac2:	f8ad 3016 	strh.w	r3, [sp, #22]
    uint16_t size = _lv_style_get_mem_size(style);
    6ac6:	4b1d      	ldr	r3, [pc, #116]	; (6b3c <_lv_style_set_color+0x124>)
    6ac8:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
    6aca:	2800      	cmp	r0, #0
    6acc:	bf08      	it	eq
    6ace:	2002      	moveq	r0, #2
    size += sizeof(lv_style_property_t) + sizeof(lv_color_t);
    6ad0:	1d05      	adds	r5, r0, #4
    style->map = lv_mem_realloc(style->map, size);
    6ad2:	b2ad      	uxth	r5, r5
    6ad4:	4629      	mov	r1, r5
    6ad6:	4620      	mov	r0, r4
    6ad8:	4b19      	ldr	r3, [pc, #100]	; (6b40 <_lv_style_set_color+0x128>)
    6ada:	4798      	blx	r3
    6adc:	6030      	str	r0, [r6, #0]
    LV_ASSERT_MEM(style->map);
    6ade:	4b19      	ldr	r3, [pc, #100]	; (6b44 <_lv_style_set_color+0x12c>)
    6ae0:	4798      	blx	r3
    6ae2:	b1e8      	cbz	r0, 6b20 <_lv_style_set_color+0x108>
    if(style == NULL) return;
    6ae4:	2e00      	cmp	r6, #0
    6ae6:	d0e7      	beq.n	6ab8 <_lv_style_set_color+0xa0>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
    6ae8:	1fab      	subs	r3, r5, #6
    6aea:	6832      	ldr	r2, [r6, #0]
    6aec:	18d1      	adds	r1, r2, r3
    6aee:	f89d 000e 	ldrb.w	r0, [sp, #14]
    6af2:	54d0      	strb	r0, [r2, r3]
    6af4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6af8:	704b      	strb	r3, [r1, #1]
    6afa:	1f2b      	subs	r3, r5, #4
    _lv_memcpy_small(style->map + size - sizeof(lv_color_t) - end_mark_size, &color, sizeof(lv_color_t));
    6afc:	6832      	ldr	r2, [r6, #0]
    6afe:	18d1      	adds	r1, r2, r3
    6b00:	f89d 000c 	ldrb.w	r0, [sp, #12]
    6b04:	54d0      	strb	r0, [r2, r3]
    6b06:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6b0a:	704b      	strb	r3, [r1, #1]
    6b0c:	3d02      	subs	r5, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
    6b0e:	6833      	ldr	r3, [r6, #0]
    6b10:	195a      	adds	r2, r3, r5
    6b12:	f89d 1016 	ldrb.w	r1, [sp, #22]
    6b16:	5559      	strb	r1, [r3, r5]
    6b18:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6b1c:	7053      	strb	r3, [r2, #1]
    6b1e:	e7cb      	b.n	6ab8 <_lv_style_set_color+0xa0>
    LV_ASSERT_MEM(style->map);
    6b20:	4b09      	ldr	r3, [pc, #36]	; (6b48 <_lv_style_set_color+0x130>)
    6b22:	9300      	str	r3, [sp, #0]
    6b24:	f240 12b5 	movw	r2, #437	; 0x1b5
    6b28:	4908      	ldr	r1, [pc, #32]	; (6b4c <_lv_style_set_color+0x134>)
    6b2a:	2003      	movs	r0, #3
    6b2c:	4c08      	ldr	r4, [pc, #32]	; (6b50 <_lv_style_set_color+0x138>)
    6b2e:	47a0      	blx	r4
    6b30:	6832      	ldr	r2, [r6, #0]
    6b32:	2300      	movs	r3, #0
    6b34:	4807      	ldr	r0, [pc, #28]	; (6b54 <_lv_style_set_color+0x13c>)
    6b36:	4908      	ldr	r1, [pc, #32]	; (6b58 <_lv_style_set_color+0x140>)
    6b38:	4788      	blx	r1
    6b3a:	e7fe      	b.n	6b3a <_lv_style_set_color+0x122>
    6b3c:	0000676d 	.word	0x0000676d
    6b40:	0001288d 	.word	0x0001288d
    6b44:	000022a5 	.word	0x000022a5
    6b48:	00024ad4 	.word	0x00024ad4
    6b4c:	00024b30 	.word	0x00024b30
    6b50:	00012251 	.word	0x00012251
    6b54:	00023fcc 	.word	0x00023fcc
    6b58:	000022ad 	.word	0x000022ad

00006b5c <_lv_style_set_opa>:
{
    6b5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6b60:	b087      	sub	sp, #28
    6b62:	f8ad 100e 	strh.w	r1, [sp, #14]
    if(style->map == NULL) return -1;
    6b66:	6804      	ldr	r4, [r0, #0]
    6b68:	2c00      	cmp	r4, #0
    6b6a:	d043      	beq.n	6bf4 <_lv_style_set_opa+0x98>
    uint8_t id_to_find = prop & 0xFF;
    6b6c:	fa5f fe81 	uxtb.w	lr, r1
    attr.full = (prop >> 8) & 0xFF;
    6b70:	0a0d      	lsrs	r5, r1, #8
    6b72:	46ac      	mov	ip, r5
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    6b74:	7823      	ldrb	r3, [r4, #0]
    6b76:	2bff      	cmp	r3, #255	; 0xff
    6b78:	d02c      	beq.n	6bd4 <_lv_style_set_opa+0x78>
    6b7a:	f04f 37ff 	mov.w	r7, #4294967295
    6b7e:	46b8      	mov	r8, r7
    6b80:	2100      	movs	r1, #0
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    6b82:	f3cc 0c06 	ubfx	ip, ip, #0, #7
    6b86:	e018      	b.n	6bba <_lv_style_set_opa+0x5e>
            attr_i.full = style->map[i + 1];
    6b88:	1866      	adds	r6, r4, r1
    6b8a:	7876      	ldrb	r6, [r6, #1]
            if(attr_i.bits.state == attr.bits.state) {
    6b8c:	ea85 0906 	eor.w	r9, r5, r6
    6b90:	f019 0f7f 	tst.w	r9, #127	; 0x7f
    6b94:	d021      	beq.n	6bda <_lv_style_set_opa+0x7e>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    6b96:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    6b9a:	ea36 090c 	bics.w	r9, r6, ip
    6b9e:	d10e      	bne.n	6bbe <_lv_style_set_opa+0x62>
                if(attr_i.bits.state > weight) {
    6ba0:	4546      	cmp	r6, r8
                    weight = attr_i.bits.state;
    6ba2:	bfc4      	itt	gt
    6ba4:	fa0f f886 	sxthgt.w	r8, r6
                    id_guess = i;
    6ba8:	b20f      	sxthgt	r7, r1
    6baa:	e008      	b.n	6bbe <_lv_style_set_opa+0x62>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    6bac:	2b0b      	cmp	r3, #11
    6bae:	dc0c      	bgt.n	6bca <_lv_style_set_opa+0x6e>
    6bb0:	3102      	adds	r1, #2
        i += sizeof(lv_style_property_t);
    6bb2:	3102      	adds	r1, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    6bb4:	5c63      	ldrb	r3, [r4, r1]
    6bb6:	2bff      	cmp	r3, #255	; 0xff
    6bb8:	d00e      	beq.n	6bd8 <_lv_style_set_opa+0x7c>
        if(style->map[i] == id_to_find) {
    6bba:	459e      	cmp	lr, r3
    6bbc:	d0e4      	beq.n	6b88 <_lv_style_set_opa+0x2c>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    6bbe:	f003 030f 	and.w	r3, r3, #15
    6bc2:	2b08      	cmp	r3, #8
    6bc4:	dcf2      	bgt.n	6bac <_lv_style_set_opa+0x50>
    6bc6:	3102      	adds	r1, #2
    6bc8:	e7f3      	b.n	6bb2 <_lv_style_set_opa+0x56>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    6bca:	2b0d      	cmp	r3, #13
    6bcc:	bfd4      	ite	le
    6bce:	3101      	addle	r1, #1
        else i += sizeof(const void *);
    6bd0:	3104      	addgt	r1, #4
    6bd2:	e7ee      	b.n	6bb2 <_lv_style_set_opa+0x56>
    int16_t id_guess = -1;
    6bd4:	f04f 37ff 	mov.w	r7, #4294967295
    return id_guess;
    6bd8:	4639      	mov	r1, r7
    if(id >= 0) {
    6bda:	2900      	cmp	r1, #0
    6bdc:	db0a      	blt.n	6bf4 <_lv_style_set_opa+0x98>
        attr_found.full = *(style->map + id + 1);
    6bde:	1863      	adds	r3, r4, r1
        if(attr_found.bits.state == attr_goal.bits.state) {
    6be0:	785b      	ldrb	r3, [r3, #1]
    6be2:	405d      	eors	r5, r3
    6be4:	f015 0f7f 	tst.w	r5, #127	; 0x7f
    6be8:	d104      	bne.n	6bf4 <_lv_style_set_opa+0x98>
    6bea:	4421      	add	r1, r4
    6bec:	708a      	strb	r2, [r1, #2]
}
    6bee:	b007      	add	sp, #28
    6bf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6bf4:	4617      	mov	r7, r2
    6bf6:	4606      	mov	r6, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
    6bf8:	23ff      	movs	r3, #255	; 0xff
    6bfa:	f8ad 3016 	strh.w	r3, [sp, #22]
    uint16_t size = _lv_style_get_mem_size(style);
    6bfe:	4b1b      	ldr	r3, [pc, #108]	; (6c6c <_lv_style_set_opa+0x110>)
    6c00:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
    6c02:	2800      	cmp	r0, #0
    6c04:	bf08      	it	eq
    6c06:	2002      	moveq	r0, #2
    size += sizeof(lv_style_property_t) + sizeof(lv_opa_t);
    6c08:	1cc5      	adds	r5, r0, #3
    style->map = lv_mem_realloc(style->map, size);
    6c0a:	b2ad      	uxth	r5, r5
    6c0c:	4629      	mov	r1, r5
    6c0e:	4620      	mov	r0, r4
    6c10:	4b17      	ldr	r3, [pc, #92]	; (6c70 <_lv_style_set_opa+0x114>)
    6c12:	4798      	blx	r3
    6c14:	6030      	str	r0, [r6, #0]
    LV_ASSERT_MEM(style->map);
    6c16:	4b17      	ldr	r3, [pc, #92]	; (6c74 <_lv_style_set_opa+0x118>)
    6c18:	4798      	blx	r3
    6c1a:	b1c0      	cbz	r0, 6c4e <_lv_style_set_opa+0xf2>
    if(style == NULL) return;
    6c1c:	2e00      	cmp	r6, #0
    6c1e:	d0e6      	beq.n	6bee <_lv_style_set_opa+0x92>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
    6c20:	1f6b      	subs	r3, r5, #5
    6c22:	6832      	ldr	r2, [r6, #0]
    6c24:	18d1      	adds	r1, r2, r3
    6c26:	f89d 000e 	ldrb.w	r0, [sp, #14]
    6c2a:	54d0      	strb	r0, [r2, r3]
    6c2c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6c30:	704b      	strb	r3, [r1, #1]
    6c32:	6833      	ldr	r3, [r6, #0]
    6c34:	442b      	add	r3, r5
    6c36:	f803 7c03 	strb.w	r7, [r3, #-3]
    _lv_memcpy_small(style->map + size - sizeof(lv_opa_t) - end_mark_size, &opa, sizeof(lv_opa_t));
    6c3a:	3d02      	subs	r5, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
    6c3c:	6833      	ldr	r3, [r6, #0]
    6c3e:	195a      	adds	r2, r3, r5
    6c40:	f89d 1016 	ldrb.w	r1, [sp, #22]
    6c44:	5559      	strb	r1, [r3, r5]
    6c46:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6c4a:	7053      	strb	r3, [r2, #1]
    6c4c:	e7cf      	b.n	6bee <_lv_style_set_opa+0x92>
    LV_ASSERT_MEM(style->map);
    6c4e:	4b0a      	ldr	r3, [pc, #40]	; (6c78 <_lv_style_set_opa+0x11c>)
    6c50:	9300      	str	r3, [sp, #0]
    6c52:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
    6c56:	4909      	ldr	r1, [pc, #36]	; (6c7c <_lv_style_set_opa+0x120>)
    6c58:	2003      	movs	r0, #3
    6c5a:	4c09      	ldr	r4, [pc, #36]	; (6c80 <_lv_style_set_opa+0x124>)
    6c5c:	47a0      	blx	r4
    6c5e:	6832      	ldr	r2, [r6, #0]
    6c60:	2300      	movs	r3, #0
    6c62:	4808      	ldr	r0, [pc, #32]	; (6c84 <_lv_style_set_opa+0x128>)
    6c64:	4908      	ldr	r1, [pc, #32]	; (6c88 <_lv_style_set_opa+0x12c>)
    6c66:	4788      	blx	r1
    6c68:	e7fe      	b.n	6c68 <_lv_style_set_opa+0x10c>
    6c6a:	bf00      	nop
    6c6c:	0000676d 	.word	0x0000676d
    6c70:	0001288d 	.word	0x0001288d
    6c74:	000022a5 	.word	0x000022a5
    6c78:	00024ae8 	.word	0x00024ae8
    6c7c:	00024b30 	.word	0x00024b30
    6c80:	00012251 	.word	0x00012251
    6c84:	00023fcc 	.word	0x00023fcc
    6c88:	000022ad 	.word	0x000022ad

00006c8c <_lv_style_set_ptr>:
{
    6c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6c90:	b086      	sub	sp, #24
    6c92:	9202      	str	r2, [sp, #8]
    6c94:	f8ad 100e 	strh.w	r1, [sp, #14]
    if(style->map == NULL) return -1;
    6c98:	6804      	ldr	r4, [r0, #0]
    6c9a:	2c00      	cmp	r4, #0
    6c9c:	d04e      	beq.n	6d3c <_lv_style_set_ptr+0xb0>
    uint8_t id_to_find = prop & 0xFF;
    6c9e:	b2cf      	uxtb	r7, r1
    attr.full = (prop >> 8) & 0xFF;
    6ca0:	0a0d      	lsrs	r5, r1, #8
    6ca2:	46ae      	mov	lr, r5
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    6ca4:	7823      	ldrb	r3, [r4, #0]
    6ca6:	2bff      	cmp	r3, #255	; 0xff
    6ca8:	d02c      	beq.n	6d04 <_lv_style_set_ptr+0x78>
    6caa:	f04f 31ff 	mov.w	r1, #4294967295
    6cae:	4688      	mov	r8, r1
    6cb0:	2200      	movs	r2, #0
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    6cb2:	f3ce 0e06 	ubfx	lr, lr, #0, #7
    6cb6:	e018      	b.n	6cea <_lv_style_set_ptr+0x5e>
            attr_i.full = style->map[i + 1];
    6cb8:	18a6      	adds	r6, r4, r2
    6cba:	7876      	ldrb	r6, [r6, #1]
            if(attr_i.bits.state == attr.bits.state) {
    6cbc:	ea85 0c06 	eor.w	ip, r5, r6
    6cc0:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
    6cc4:	d021      	beq.n	6d0a <_lv_style_set_ptr+0x7e>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    6cc6:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    6cca:	ea36 0c0e 	bics.w	ip, r6, lr
    6cce:	d10e      	bne.n	6cee <_lv_style_set_ptr+0x62>
                if(attr_i.bits.state > weight) {
    6cd0:	4546      	cmp	r6, r8
                    weight = attr_i.bits.state;
    6cd2:	bfc4      	itt	gt
    6cd4:	fa0f f886 	sxthgt.w	r8, r6
                    id_guess = i;
    6cd8:	b211      	sxthgt	r1, r2
    6cda:	e008      	b.n	6cee <_lv_style_set_ptr+0x62>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    6cdc:	2b0b      	cmp	r3, #11
    6cde:	dc0c      	bgt.n	6cfa <_lv_style_set_ptr+0x6e>
    6ce0:	3202      	adds	r2, #2
        i += sizeof(lv_style_property_t);
    6ce2:	3202      	adds	r2, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    6ce4:	5ca3      	ldrb	r3, [r4, r2]
    6ce6:	2bff      	cmp	r3, #255	; 0xff
    6ce8:	d00e      	beq.n	6d08 <_lv_style_set_ptr+0x7c>
        if(style->map[i] == id_to_find) {
    6cea:	429f      	cmp	r7, r3
    6cec:	d0e4      	beq.n	6cb8 <_lv_style_set_ptr+0x2c>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    6cee:	f003 030f 	and.w	r3, r3, #15
    6cf2:	2b08      	cmp	r3, #8
    6cf4:	dcf2      	bgt.n	6cdc <_lv_style_set_ptr+0x50>
    6cf6:	3202      	adds	r2, #2
    6cf8:	e7f3      	b.n	6ce2 <_lv_style_set_ptr+0x56>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    6cfa:	2b0d      	cmp	r3, #13
    6cfc:	bfd4      	ite	le
    6cfe:	3201      	addle	r2, #1
        else i += sizeof(const void *);
    6d00:	3204      	addgt	r2, #4
    6d02:	e7ee      	b.n	6ce2 <_lv_style_set_ptr+0x56>
    int16_t id_guess = -1;
    6d04:	f04f 31ff 	mov.w	r1, #4294967295
    return id_guess;
    6d08:	460a      	mov	r2, r1
    if(id >= 0) {
    6d0a:	2a00      	cmp	r2, #0
    6d0c:	db16      	blt.n	6d3c <_lv_style_set_ptr+0xb0>
        attr_found.full = *(style->map + id + 1);
    6d0e:	18a3      	adds	r3, r4, r2
        if(attr_found.bits.state == attr_goal.bits.state) {
    6d10:	785b      	ldrb	r3, [r3, #1]
    6d12:	405d      	eors	r5, r3
    6d14:	f015 0f7f 	tst.w	r5, #127	; 0x7f
    6d18:	d110      	bne.n	6d3c <_lv_style_set_ptr+0xb0>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &p, sizeof(const void *));
    6d1a:	3202      	adds	r2, #2
    6d1c:	18a3      	adds	r3, r4, r2
    6d1e:	f89d 1008 	ldrb.w	r1, [sp, #8]
    6d22:	54a1      	strb	r1, [r4, r2]
    6d24:	f89d 2009 	ldrb.w	r2, [sp, #9]
    6d28:	705a      	strb	r2, [r3, #1]
    6d2a:	f89d 200a 	ldrb.w	r2, [sp, #10]
    6d2e:	709a      	strb	r2, [r3, #2]
    6d30:	f89d 200b 	ldrb.w	r2, [sp, #11]
    6d34:	70da      	strb	r2, [r3, #3]
}
    6d36:	b006      	add	sp, #24
    6d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d3c:	4606      	mov	r6, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
    6d3e:	23ff      	movs	r3, #255	; 0xff
    6d40:	f8ad 3016 	strh.w	r3, [sp, #22]
    uint16_t size = _lv_style_get_mem_size(style);
    6d44:	4b20      	ldr	r3, [pc, #128]	; (6dc8 <_lv_style_set_ptr+0x13c>)
    6d46:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
    6d48:	2800      	cmp	r0, #0
    6d4a:	bf08      	it	eq
    6d4c:	2002      	moveq	r0, #2
    size += sizeof(lv_style_property_t) + sizeof(const void *);
    6d4e:	1d85      	adds	r5, r0, #6
    style->map = lv_mem_realloc(style->map, size);
    6d50:	b2ad      	uxth	r5, r5
    6d52:	4629      	mov	r1, r5
    6d54:	4620      	mov	r0, r4
    6d56:	4b1d      	ldr	r3, [pc, #116]	; (6dcc <_lv_style_set_ptr+0x140>)
    6d58:	4798      	blx	r3
    6d5a:	6030      	str	r0, [r6, #0]
    LV_ASSERT_MEM(style->map);
    6d5c:	4b1c      	ldr	r3, [pc, #112]	; (6dd0 <_lv_style_set_ptr+0x144>)
    6d5e:	4798      	blx	r3
    6d60:	b320      	cbz	r0, 6dac <_lv_style_set_ptr+0x120>
    if(style == NULL) return;
    6d62:	2e00      	cmp	r6, #0
    6d64:	d0e7      	beq.n	6d36 <_lv_style_set_ptr+0xaa>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
    6d66:	f1a5 0308 	sub.w	r3, r5, #8
    6d6a:	6832      	ldr	r2, [r6, #0]
    6d6c:	18d1      	adds	r1, r2, r3
    6d6e:	f89d 000e 	ldrb.w	r0, [sp, #14]
    6d72:	54d0      	strb	r0, [r2, r3]
    6d74:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6d78:	704b      	strb	r3, [r1, #1]
    6d7a:	1faa      	subs	r2, r5, #6
    _lv_memcpy_small(style->map + size - sizeof(const void *) - end_mark_size, &p, sizeof(const void *));
    6d7c:	6831      	ldr	r1, [r6, #0]
    6d7e:	188b      	adds	r3, r1, r2
    6d80:	f89d 0008 	ldrb.w	r0, [sp, #8]
    6d84:	5488      	strb	r0, [r1, r2]
    6d86:	f89d 2009 	ldrb.w	r2, [sp, #9]
    6d8a:	705a      	strb	r2, [r3, #1]
    6d8c:	f89d 200a 	ldrb.w	r2, [sp, #10]
    6d90:	709a      	strb	r2, [r3, #2]
    6d92:	f89d 200b 	ldrb.w	r2, [sp, #11]
    6d96:	70da      	strb	r2, [r3, #3]
    6d98:	3d02      	subs	r5, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
    6d9a:	6833      	ldr	r3, [r6, #0]
    6d9c:	195a      	adds	r2, r3, r5
    6d9e:	f89d 1016 	ldrb.w	r1, [sp, #22]
    6da2:	5559      	strb	r1, [r3, r5]
    6da4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6da8:	7053      	strb	r3, [r2, #1]
    6daa:	e7c4      	b.n	6d36 <_lv_style_set_ptr+0xaa>
    LV_ASSERT_MEM(style->map);
    6dac:	4b09      	ldr	r3, [pc, #36]	; (6dd4 <_lv_style_set_ptr+0x148>)
    6dae:	9300      	str	r3, [sp, #0]
    6db0:	f240 2213 	movw	r2, #531	; 0x213
    6db4:	4908      	ldr	r1, [pc, #32]	; (6dd8 <_lv_style_set_ptr+0x14c>)
    6db6:	2003      	movs	r0, #3
    6db8:	4c08      	ldr	r4, [pc, #32]	; (6ddc <_lv_style_set_ptr+0x150>)
    6dba:	47a0      	blx	r4
    6dbc:	6832      	ldr	r2, [r6, #0]
    6dbe:	2300      	movs	r3, #0
    6dc0:	4807      	ldr	r0, [pc, #28]	; (6de0 <_lv_style_set_ptr+0x154>)
    6dc2:	4908      	ldr	r1, [pc, #32]	; (6de4 <_lv_style_set_ptr+0x158>)
    6dc4:	4788      	blx	r1
    6dc6:	e7fe      	b.n	6dc6 <_lv_style_set_ptr+0x13a>
    6dc8:	0000676d 	.word	0x0000676d
    6dcc:	0001288d 	.word	0x0001288d
    6dd0:	000022a5 	.word	0x000022a5
    6dd4:	00024afc 	.word	0x00024afc
    6dd8:	00024b30 	.word	0x00024b30
    6ddc:	00012251 	.word	0x00012251
    6de0:	00023fcc 	.word	0x00023fcc
    6de4:	000022ad 	.word	0x000022ad

00006de8 <_lv_style_get_int>:
    if(style == NULL) return -1;
    6de8:	2800      	cmp	r0, #0
    6dea:	d04d      	beq.n	6e88 <_lv_style_get_int+0xa0>
{
    6dec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6df0:	4684      	mov	ip, r0
    if(style->map == NULL) return -1;
    6df2:	6804      	ldr	r4, [r0, #0]
    6df4:	2c00      	cmp	r4, #0
    6df6:	d04a      	beq.n	6e8e <_lv_style_get_int+0xa6>
    uint8_t id_to_find = prop & 0xFF;
    6df8:	b2ce      	uxtb	r6, r1
    attr.full = (prop >> 8) & 0xFF;
    6dfa:	0a09      	lsrs	r1, r1, #8
    6dfc:	468e      	mov	lr, r1
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    6dfe:	7823      	ldrb	r3, [r4, #0]
    6e00:	2bff      	cmp	r3, #255	; 0xff
    6e02:	d03e      	beq.n	6e82 <_lv_style_get_int+0x9a>
    6e04:	f04f 37ff 	mov.w	r7, #4294967295
    6e08:	46b8      	mov	r8, r7
    6e0a:	2000      	movs	r0, #0
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    6e0c:	f3ce 0e06 	ubfx	lr, lr, #0, #7
    6e10:	e02a      	b.n	6e68 <_lv_style_get_int+0x80>
            attr_i.full = style->map[i + 1];
    6e12:	1825      	adds	r5, r4, r0
    6e14:	786d      	ldrb	r5, [r5, #1]
            if(attr_i.bits.state == attr.bits.state) {
    6e16:	ea81 0905 	eor.w	r9, r1, r5
    6e1a:	f019 0f7f 	tst.w	r9, #127	; 0x7f
    6e1e:	d00a      	beq.n	6e36 <_lv_style_get_int+0x4e>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    6e20:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    6e24:	ea35 090e 	bics.w	r9, r5, lr
    6e28:	d120      	bne.n	6e6c <_lv_style_get_int+0x84>
                if(attr_i.bits.state > weight) {
    6e2a:	4545      	cmp	r5, r8
                    weight = attr_i.bits.state;
    6e2c:	bfc4      	itt	gt
    6e2e:	fa0f f885 	sxthgt.w	r8, r5
                    id_guess = i;
    6e32:	b207      	sxthgt	r7, r0
    6e34:	e01a      	b.n	6e6c <_lv_style_get_int+0x84>
                return i;
    6e36:	4607      	mov	r7, r0
    if(id < 0) {
    6e38:	2f00      	cmp	r7, #0
    6e3a:	db2c      	blt.n	6e96 <_lv_style_get_int+0xae>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_style_int_t));
    6e3c:	1cbb      	adds	r3, r7, #2
    6e3e:	18e0      	adds	r0, r4, r3
    6e40:	5ce3      	ldrb	r3, [r4, r3]
    6e42:	7013      	strb	r3, [r2, #0]
    6e44:	7843      	ldrb	r3, [r0, #1]
    6e46:	7053      	strb	r3, [r2, #1]
        attr_act.full = style->map[id + 1];
    6e48:	f8dc 0000 	ldr.w	r0, [ip]
    6e4c:	4407      	add	r7, r0
    6e4e:	7878      	ldrb	r0, [r7, #1]
        return attr_act.bits.state & attr_goal.bits.state;
    6e50:	f3c1 0106 	ubfx	r1, r1, #0, #7
    6e54:	4008      	ands	r0, r1
    6e56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    6e5a:	2b0b      	cmp	r3, #11
    6e5c:	dc0c      	bgt.n	6e78 <_lv_style_get_int+0x90>
    6e5e:	3002      	adds	r0, #2
        i += sizeof(lv_style_property_t);
    6e60:	3002      	adds	r0, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    6e62:	5c23      	ldrb	r3, [r4, r0]
    6e64:	2bff      	cmp	r3, #255	; 0xff
    6e66:	d0e7      	beq.n	6e38 <_lv_style_get_int+0x50>
        if(style->map[i] == id_to_find) {
    6e68:	429e      	cmp	r6, r3
    6e6a:	d0d2      	beq.n	6e12 <_lv_style_get_int+0x2a>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    6e6c:	f003 030f 	and.w	r3, r3, #15
    6e70:	2b08      	cmp	r3, #8
    6e72:	dcf2      	bgt.n	6e5a <_lv_style_get_int+0x72>
    6e74:	3002      	adds	r0, #2
    6e76:	e7f3      	b.n	6e60 <_lv_style_get_int+0x78>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    6e78:	2b0d      	cmp	r3, #13
    6e7a:	bfd4      	ite	le
    6e7c:	3001      	addle	r0, #1
        else i += sizeof(const void *);
    6e7e:	3004      	addgt	r0, #4
    6e80:	e7ee      	b.n	6e60 <_lv_style_get_int+0x78>
    int16_t id_guess = -1;
    6e82:	f04f 37ff 	mov.w	r7, #4294967295
    6e86:	e7d7      	b.n	6e38 <_lv_style_get_int+0x50>
    if(style == NULL) return -1;
    6e88:	f04f 30ff 	mov.w	r0, #4294967295
    6e8c:	4770      	bx	lr
    if(style->map == NULL) return -1;
    6e8e:	f04f 30ff 	mov.w	r0, #4294967295
    6e92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    6e96:	f04f 30ff 	mov.w	r0, #4294967295
}
    6e9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00006e9e <_lv_style_get_opa>:
    if(style == NULL) return -1;
    6e9e:	2800      	cmp	r0, #0
    6ea0:	d04a      	beq.n	6f38 <_lv_style_get_opa+0x9a>
{
    6ea2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6ea6:	4686      	mov	lr, r0
    if(style->map == NULL) return -1;
    6ea8:	6804      	ldr	r4, [r0, #0]
    6eaa:	2c00      	cmp	r4, #0
    6eac:	d047      	beq.n	6f3e <_lv_style_get_opa+0xa0>
    uint8_t id_to_find = prop & 0xFF;
    6eae:	b2ce      	uxtb	r6, r1
    attr.full = (prop >> 8) & 0xFF;
    6eb0:	0a09      	lsrs	r1, r1, #8
    6eb2:	468c      	mov	ip, r1
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    6eb4:	7823      	ldrb	r3, [r4, #0]
    6eb6:	2bff      	cmp	r3, #255	; 0xff
    6eb8:	d03b      	beq.n	6f32 <_lv_style_get_opa+0x94>
    6eba:	f04f 37ff 	mov.w	r7, #4294967295
    6ebe:	46b8      	mov	r8, r7
    6ec0:	2000      	movs	r0, #0
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    6ec2:	f3cc 0c06 	ubfx	ip, ip, #0, #7
    6ec6:	e027      	b.n	6f18 <_lv_style_get_opa+0x7a>
            attr_i.full = style->map[i + 1];
    6ec8:	1825      	adds	r5, r4, r0
    6eca:	786d      	ldrb	r5, [r5, #1]
            if(attr_i.bits.state == attr.bits.state) {
    6ecc:	ea81 0905 	eor.w	r9, r1, r5
    6ed0:	f019 0f7f 	tst.w	r9, #127	; 0x7f
    6ed4:	d00a      	beq.n	6eec <_lv_style_get_opa+0x4e>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    6ed6:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    6eda:	ea35 090c 	bics.w	r9, r5, ip
    6ede:	d11d      	bne.n	6f1c <_lv_style_get_opa+0x7e>
                if(attr_i.bits.state > weight) {
    6ee0:	4545      	cmp	r5, r8
                    weight = attr_i.bits.state;
    6ee2:	bfc4      	itt	gt
    6ee4:	fa0f f885 	sxthgt.w	r8, r5
                    id_guess = i;
    6ee8:	b207      	sxthgt	r7, r0
    6eea:	e017      	b.n	6f1c <_lv_style_get_opa+0x7e>
                return i;
    6eec:	4607      	mov	r7, r0
    if(id < 0) {
    6eee:	2f00      	cmp	r7, #0
    6ef0:	db29      	blt.n	6f46 <_lv_style_get_opa+0xa8>
    6ef2:	443c      	add	r4, r7
    6ef4:	78a3      	ldrb	r3, [r4, #2]
    6ef6:	7013      	strb	r3, [r2, #0]
        attr_act.full = style->map[id + 1];
    6ef8:	f8de 0000 	ldr.w	r0, [lr]
    6efc:	4407      	add	r7, r0
    6efe:	7878      	ldrb	r0, [r7, #1]
        return attr_act.bits.state & attr_goal.bits.state;
    6f00:	f3c1 0106 	ubfx	r1, r1, #0, #7
    6f04:	4008      	ands	r0, r1
    6f06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    6f0a:	2b0b      	cmp	r3, #11
    6f0c:	dc0c      	bgt.n	6f28 <_lv_style_get_opa+0x8a>
    6f0e:	3002      	adds	r0, #2
        i += sizeof(lv_style_property_t);
    6f10:	3002      	adds	r0, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    6f12:	5c23      	ldrb	r3, [r4, r0]
    6f14:	2bff      	cmp	r3, #255	; 0xff
    6f16:	d0ea      	beq.n	6eee <_lv_style_get_opa+0x50>
        if(style->map[i] == id_to_find) {
    6f18:	429e      	cmp	r6, r3
    6f1a:	d0d5      	beq.n	6ec8 <_lv_style_get_opa+0x2a>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    6f1c:	f003 030f 	and.w	r3, r3, #15
    6f20:	2b08      	cmp	r3, #8
    6f22:	dcf2      	bgt.n	6f0a <_lv_style_get_opa+0x6c>
    6f24:	3002      	adds	r0, #2
    6f26:	e7f3      	b.n	6f10 <_lv_style_get_opa+0x72>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    6f28:	2b0d      	cmp	r3, #13
    6f2a:	bfd4      	ite	le
    6f2c:	3001      	addle	r0, #1
        else i += sizeof(const void *);
    6f2e:	3004      	addgt	r0, #4
    6f30:	e7ee      	b.n	6f10 <_lv_style_get_opa+0x72>
    int16_t id_guess = -1;
    6f32:	f04f 37ff 	mov.w	r7, #4294967295
    6f36:	e7da      	b.n	6eee <_lv_style_get_opa+0x50>
    if(style == NULL) return -1;
    6f38:	f04f 30ff 	mov.w	r0, #4294967295
    6f3c:	4770      	bx	lr
    if(style->map == NULL) return -1;
    6f3e:	f04f 30ff 	mov.w	r0, #4294967295
    6f42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    6f46:	f04f 30ff 	mov.w	r0, #4294967295
}
    6f4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00006f4e <_lv_style_get_color>:
    if(style == NULL) return -1;
    6f4e:	2800      	cmp	r0, #0
    6f50:	d04d      	beq.n	6fee <_lv_style_get_color+0xa0>
{
    6f52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6f56:	4684      	mov	ip, r0
    if(style->map == NULL) return -1;
    6f58:	6804      	ldr	r4, [r0, #0]
    6f5a:	2c00      	cmp	r4, #0
    6f5c:	d04a      	beq.n	6ff4 <_lv_style_get_color+0xa6>
    uint8_t id_to_find = prop & 0xFF;
    6f5e:	b2ce      	uxtb	r6, r1
    attr.full = (prop >> 8) & 0xFF;
    6f60:	0a09      	lsrs	r1, r1, #8
    6f62:	468e      	mov	lr, r1
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    6f64:	7823      	ldrb	r3, [r4, #0]
    6f66:	2bff      	cmp	r3, #255	; 0xff
    6f68:	d03e      	beq.n	6fe8 <_lv_style_get_color+0x9a>
    6f6a:	f04f 37ff 	mov.w	r7, #4294967295
    6f6e:	46b8      	mov	r8, r7
    6f70:	2000      	movs	r0, #0
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    6f72:	f3ce 0e06 	ubfx	lr, lr, #0, #7
    6f76:	e02a      	b.n	6fce <_lv_style_get_color+0x80>
            attr_i.full = style->map[i + 1];
    6f78:	1825      	adds	r5, r4, r0
    6f7a:	786d      	ldrb	r5, [r5, #1]
            if(attr_i.bits.state == attr.bits.state) {
    6f7c:	ea81 0905 	eor.w	r9, r1, r5
    6f80:	f019 0f7f 	tst.w	r9, #127	; 0x7f
    6f84:	d00a      	beq.n	6f9c <_lv_style_get_color+0x4e>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    6f86:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    6f8a:	ea35 090e 	bics.w	r9, r5, lr
    6f8e:	d120      	bne.n	6fd2 <_lv_style_get_color+0x84>
                if(attr_i.bits.state > weight) {
    6f90:	4545      	cmp	r5, r8
                    weight = attr_i.bits.state;
    6f92:	bfc4      	itt	gt
    6f94:	fa0f f885 	sxthgt.w	r8, r5
                    id_guess = i;
    6f98:	b207      	sxthgt	r7, r0
    6f9a:	e01a      	b.n	6fd2 <_lv_style_get_color+0x84>
                return i;
    6f9c:	4607      	mov	r7, r0
    if(id < 0) {
    6f9e:	2f00      	cmp	r7, #0
    6fa0:	db2c      	blt.n	6ffc <_lv_style_get_color+0xae>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_color_t));
    6fa2:	1cbb      	adds	r3, r7, #2
    6fa4:	18e0      	adds	r0, r4, r3
    6fa6:	5ce3      	ldrb	r3, [r4, r3]
    6fa8:	7013      	strb	r3, [r2, #0]
    6faa:	7843      	ldrb	r3, [r0, #1]
    6fac:	7053      	strb	r3, [r2, #1]
        attr_act.full = style->map[id + 1];
    6fae:	f8dc 0000 	ldr.w	r0, [ip]
    6fb2:	4407      	add	r7, r0
    6fb4:	7878      	ldrb	r0, [r7, #1]
        return attr_act.bits.state & attr_goal.bits.state;
    6fb6:	f3c1 0106 	ubfx	r1, r1, #0, #7
    6fba:	4008      	ands	r0, r1
    6fbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    6fc0:	2b0b      	cmp	r3, #11
    6fc2:	dc0c      	bgt.n	6fde <_lv_style_get_color+0x90>
    6fc4:	3002      	adds	r0, #2
        i += sizeof(lv_style_property_t);
    6fc6:	3002      	adds	r0, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    6fc8:	5c23      	ldrb	r3, [r4, r0]
    6fca:	2bff      	cmp	r3, #255	; 0xff
    6fcc:	d0e7      	beq.n	6f9e <_lv_style_get_color+0x50>
        if(style->map[i] == id_to_find) {
    6fce:	429e      	cmp	r6, r3
    6fd0:	d0d2      	beq.n	6f78 <_lv_style_get_color+0x2a>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    6fd2:	f003 030f 	and.w	r3, r3, #15
    6fd6:	2b08      	cmp	r3, #8
    6fd8:	dcf2      	bgt.n	6fc0 <_lv_style_get_color+0x72>
    6fda:	3002      	adds	r0, #2
    6fdc:	e7f3      	b.n	6fc6 <_lv_style_get_color+0x78>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    6fde:	2b0d      	cmp	r3, #13
    6fe0:	bfd4      	ite	le
    6fe2:	3001      	addle	r0, #1
        else i += sizeof(const void *);
    6fe4:	3004      	addgt	r0, #4
    6fe6:	e7ee      	b.n	6fc6 <_lv_style_get_color+0x78>
    int16_t id_guess = -1;
    6fe8:	f04f 37ff 	mov.w	r7, #4294967295
    6fec:	e7d7      	b.n	6f9e <_lv_style_get_color+0x50>
    if(style == NULL) return -1;
    6fee:	f04f 30ff 	mov.w	r0, #4294967295
    6ff2:	4770      	bx	lr
    if(style->map == NULL) return -1;
    6ff4:	f04f 30ff 	mov.w	r0, #4294967295
    6ff8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    6ffc:	f04f 30ff 	mov.w	r0, #4294967295
}
    7000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00007004 <_lv_style_get_ptr>:
    if(style == NULL) return -1;
    7004:	2800      	cmp	r0, #0
    7006:	d050      	beq.n	70aa <_lv_style_get_ptr+0xa6>
{
    7008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    700c:	4607      	mov	r7, r0
    if(style->map == NULL) return -1;
    700e:	6804      	ldr	r4, [r0, #0]
    7010:	2c00      	cmp	r4, #0
    7012:	d04d      	beq.n	70b0 <_lv_style_get_ptr+0xac>
    uint8_t id_to_find = prop & 0xFF;
    7014:	b2ce      	uxtb	r6, r1
    attr.full = (prop >> 8) & 0xFF;
    7016:	0a09      	lsrs	r1, r1, #8
    7018:	468c      	mov	ip, r1
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    701a:	7823      	ldrb	r3, [r4, #0]
    701c:	2bff      	cmp	r3, #255	; 0xff
    701e:	d02d      	beq.n	707c <_lv_style_get_ptr+0x78>
    7020:	f04f 3eff 	mov.w	lr, #4294967295
    7024:	46f0      	mov	r8, lr
    7026:	2000      	movs	r0, #0
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    7028:	f3cc 0c06 	ubfx	ip, ip, #0, #7
    702c:	e019      	b.n	7062 <_lv_style_get_ptr+0x5e>
            attr_i.full = style->map[i + 1];
    702e:	1825      	adds	r5, r4, r0
    7030:	786d      	ldrb	r5, [r5, #1]
            if(attr_i.bits.state == attr.bits.state) {
    7032:	ea81 0905 	eor.w	r9, r1, r5
    7036:	f019 0f7f 	tst.w	r9, #127	; 0x7f
    703a:	d022      	beq.n	7082 <_lv_style_get_ptr+0x7e>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    703c:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    7040:	ea35 090c 	bics.w	r9, r5, ip
    7044:	d10f      	bne.n	7066 <_lv_style_get_ptr+0x62>
                if(attr_i.bits.state > weight) {
    7046:	4545      	cmp	r5, r8
                    weight = attr_i.bits.state;
    7048:	bfc4      	itt	gt
    704a:	fa0f f885 	sxthgt.w	r8, r5
                    id_guess = i;
    704e:	fa0f fe80 	sxthgt.w	lr, r0
    7052:	e008      	b.n	7066 <_lv_style_get_ptr+0x62>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    7054:	2b0b      	cmp	r3, #11
    7056:	dc0c      	bgt.n	7072 <_lv_style_get_ptr+0x6e>
    7058:	3002      	adds	r0, #2
        i += sizeof(lv_style_property_t);
    705a:	3002      	adds	r0, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    705c:	5c23      	ldrb	r3, [r4, r0]
    705e:	2bff      	cmp	r3, #255	; 0xff
    7060:	d00e      	beq.n	7080 <_lv_style_get_ptr+0x7c>
        if(style->map[i] == id_to_find) {
    7062:	429e      	cmp	r6, r3
    7064:	d0e3      	beq.n	702e <_lv_style_get_ptr+0x2a>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    7066:	f003 030f 	and.w	r3, r3, #15
    706a:	2b08      	cmp	r3, #8
    706c:	dcf2      	bgt.n	7054 <_lv_style_get_ptr+0x50>
    706e:	3002      	adds	r0, #2
    7070:	e7f3      	b.n	705a <_lv_style_get_ptr+0x56>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    7072:	2b0d      	cmp	r3, #13
    7074:	bfd4      	ite	le
    7076:	3001      	addle	r0, #1
        else i += sizeof(const void *);
    7078:	3004      	addgt	r0, #4
    707a:	e7ee      	b.n	705a <_lv_style_get_ptr+0x56>
    int16_t id_guess = -1;
    707c:	f04f 3eff 	mov.w	lr, #4294967295
    return id_guess;
    7080:	4670      	mov	r0, lr
    if(id < 0) {
    7082:	2800      	cmp	r0, #0
    7084:	db18      	blt.n	70b8 <_lv_style_get_ptr+0xb4>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(const void *));
    7086:	4605      	mov	r5, r0
    7088:	3001      	adds	r0, #1
    708a:	1823      	adds	r3, r4, r0
    708c:	1d14      	adds	r4, r2, #4
    708e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    7092:	f802 0b01 	strb.w	r0, [r2], #1
    while(len) {
    7096:	4294      	cmp	r4, r2
    7098:	d1f9      	bne.n	708e <_lv_style_get_ptr+0x8a>
        attr_act.full = style->map[id + 1];
    709a:	683b      	ldr	r3, [r7, #0]
    709c:	442b      	add	r3, r5
    709e:	7858      	ldrb	r0, [r3, #1]
        return attr_act.bits.state & attr_goal.bits.state;
    70a0:	f3c1 0106 	ubfx	r1, r1, #0, #7
    70a4:	4008      	ands	r0, r1
    70a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(style == NULL) return -1;
    70aa:	f04f 30ff 	mov.w	r0, #4294967295
    70ae:	4770      	bx	lr
    if(style->map == NULL) return -1;
    70b0:	f04f 30ff 	mov.w	r0, #4294967295
    70b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    70b8:	f04f 30ff 	mov.w	r0, #4294967295
}
    70bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000070c0 <lv_style_list_get_local_style>:
    if(!list->has_local) return NULL;
    70c0:	7943      	ldrb	r3, [r0, #5]
    70c2:	f013 0f01 	tst.w	r3, #1
    70c6:	d006      	beq.n	70d6 <lv_style_list_get_local_style+0x16>
    if(list->has_trans) return list->style_list[1];
    70c8:	f013 0f02 	tst.w	r3, #2
    70cc:	6803      	ldr	r3, [r0, #0]
    70ce:	bf14      	ite	ne
    70d0:	6858      	ldrne	r0, [r3, #4]
    else return list->style_list[0];
    70d2:	6818      	ldreq	r0, [r3, #0]
    70d4:	4770      	bx	lr
    if(!list->has_local) return NULL;
    70d6:	2000      	movs	r0, #0
}
    70d8:	4770      	bx	lr

000070da <_lv_style_list_get_transition_style>:
    if(!list->has_trans) return NULL;
    70da:	7943      	ldrb	r3, [r0, #5]
    70dc:	f013 0f02 	tst.w	r3, #2
    return list->style_list[0];
    70e0:	bf1a      	itte	ne
    70e2:	6803      	ldrne	r3, [r0, #0]
    70e4:	6818      	ldrne	r0, [r3, #0]
    if(!list->has_trans) return NULL;
    70e6:	2000      	moveq	r0, #0
}
    70e8:	4770      	bx	lr
	...

000070ec <_lv_style_list_reset>:
    if(list == NULL) return;
    70ec:	2800      	cmp	r0, #0
    70ee:	d02c      	beq.n	714a <_lv_style_list_reset+0x5e>
{
    70f0:	b538      	push	{r3, r4, r5, lr}
    70f2:	4604      	mov	r4, r0
    if(list->has_local) {
    70f4:	7943      	ldrb	r3, [r0, #5]
    70f6:	f013 0f01 	tst.w	r3, #1
    70fa:	d008      	beq.n	710e <_lv_style_list_reset+0x22>
        lv_style_t * local = lv_style_list_get_local_style(list);
    70fc:	4b13      	ldr	r3, [pc, #76]	; (714c <_lv_style_list_reset+0x60>)
    70fe:	4798      	blx	r3
        if(local) {
    7100:	4605      	mov	r5, r0
    7102:	b120      	cbz	r0, 710e <_lv_style_list_reset+0x22>
            lv_style_reset(local);
    7104:	4b12      	ldr	r3, [pc, #72]	; (7150 <_lv_style_list_reset+0x64>)
    7106:	4798      	blx	r3
            lv_mem_free(local);
    7108:	4628      	mov	r0, r5
    710a:	4b12      	ldr	r3, [pc, #72]	; (7154 <_lv_style_list_reset+0x68>)
    710c:	4798      	blx	r3
    if(list->has_trans) {
    710e:	7963      	ldrb	r3, [r4, #5]
    7110:	f013 0f02 	tst.w	r3, #2
    7114:	d009      	beq.n	712a <_lv_style_list_reset+0x3e>
        lv_style_t * trans = _lv_style_list_get_transition_style(list);
    7116:	4620      	mov	r0, r4
    7118:	4b0f      	ldr	r3, [pc, #60]	; (7158 <_lv_style_list_reset+0x6c>)
    711a:	4798      	blx	r3
        if(trans) {
    711c:	4605      	mov	r5, r0
    711e:	b120      	cbz	r0, 712a <_lv_style_list_reset+0x3e>
            lv_style_reset(trans);
    7120:	4b0b      	ldr	r3, [pc, #44]	; (7150 <_lv_style_list_reset+0x64>)
    7122:	4798      	blx	r3
            lv_mem_free(trans);
    7124:	4628      	mov	r0, r5
    7126:	4b0b      	ldr	r3, [pc, #44]	; (7154 <_lv_style_list_reset+0x68>)
    7128:	4798      	blx	r3
    if(list->style_cnt > 0) lv_mem_free(list->style_list);
    712a:	7923      	ldrb	r3, [r4, #4]
    712c:	b94b      	cbnz	r3, 7142 <_lv_style_list_reset+0x56>
    list->style_list = NULL;
    712e:	2200      	movs	r2, #0
    7130:	6022      	str	r2, [r4, #0]
    list->style_cnt = 0;
    7132:	7122      	strb	r2, [r4, #4]
    list->has_local = 0;
    7134:	7963      	ldrb	r3, [r4, #5]
    list->skip_trans = 0;
    7136:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    713a:	f362 0382 	bfi	r3, r2, #2, #1
    713e:	7163      	strb	r3, [r4, #5]
    7140:	bd38      	pop	{r3, r4, r5, pc}
    if(list->style_cnt > 0) lv_mem_free(list->style_list);
    7142:	6820      	ldr	r0, [r4, #0]
    7144:	4b03      	ldr	r3, [pc, #12]	; (7154 <_lv_style_list_reset+0x68>)
    7146:	4798      	blx	r3
    7148:	e7f1      	b.n	712e <_lv_style_list_reset+0x42>
    714a:	4770      	bx	lr
    714c:	000070c1 	.word	0x000070c1
    7150:	00006759 	.word	0x00006759
    7154:	000124b9 	.word	0x000124b9
    7158:	000070db 	.word	0x000070db

0000715c <lv_style_list_copy>:
{
    715c:	b570      	push	{r4, r5, r6, lr}
    715e:	4605      	mov	r5, r0
    7160:	460c      	mov	r4, r1
    _lv_style_list_reset(list_dest);
    7162:	4b2c      	ldr	r3, [pc, #176]	; (7214 <lv_style_list_copy+0xb8>)
    7164:	4798      	blx	r3
    if(list_src->style_list == NULL) return;
    7166:	6823      	ldr	r3, [r4, #0]
    7168:	2b00      	cmp	r3, #0
    716a:	d041      	beq.n	71f0 <lv_style_list_copy+0x94>
    if(list_src->has_local == 0) {
    716c:	7963      	ldrb	r3, [r4, #5]
    716e:	f013 0f01 	tst.w	r3, #1
    7172:	d120      	bne.n	71b6 <lv_style_list_copy+0x5a>
        if(list_src->has_trans) {
    7174:	f013 0f02 	tst.w	r3, #2
    7178:	d010      	beq.n	719c <lv_style_list_copy+0x40>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
    717a:	7920      	ldrb	r0, [r4, #4]
    717c:	3801      	subs	r0, #1
    717e:	0080      	lsls	r0, r0, #2
    7180:	4b25      	ldr	r3, [pc, #148]	; (7218 <lv_style_list_copy+0xbc>)
    7182:	4798      	blx	r3
    7184:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
    7186:	7922      	ldrb	r2, [r4, #4]
    7188:	3a01      	subs	r2, #1
    718a:	6821      	ldr	r1, [r4, #0]
    718c:	0092      	lsls	r2, r2, #2
    718e:	3104      	adds	r1, #4
    7190:	4b22      	ldr	r3, [pc, #136]	; (721c <lv_style_list_copy+0xc0>)
    7192:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt - 1;
    7194:	7923      	ldrb	r3, [r4, #4]
    7196:	3b01      	subs	r3, #1
    7198:	712b      	strb	r3, [r5, #4]
    719a:	bd70      	pop	{r4, r5, r6, pc}
            list_dest->style_list = lv_mem_alloc(list_src->style_cnt * sizeof(lv_style_t *));
    719c:	7920      	ldrb	r0, [r4, #4]
    719e:	0080      	lsls	r0, r0, #2
    71a0:	4b1d      	ldr	r3, [pc, #116]	; (7218 <lv_style_list_copy+0xbc>)
    71a2:	4798      	blx	r3
    71a4:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list, list_src->style_cnt * sizeof(lv_style_t *));
    71a6:	7922      	ldrb	r2, [r4, #4]
    71a8:	0092      	lsls	r2, r2, #2
    71aa:	6821      	ldr	r1, [r4, #0]
    71ac:	4b1b      	ldr	r3, [pc, #108]	; (721c <lv_style_list_copy+0xc0>)
    71ae:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt;
    71b0:	7923      	ldrb	r3, [r4, #4]
    71b2:	712b      	strb	r3, [r5, #4]
    71b4:	bd70      	pop	{r4, r5, r6, pc}
        if(list_src->has_trans) {
    71b6:	f013 0f02 	tst.w	r3, #2
    71ba:	d01a      	beq.n	71f2 <lv_style_list_copy+0x96>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 2) * sizeof(lv_style_t *));
    71bc:	7920      	ldrb	r0, [r4, #4]
    71be:	3802      	subs	r0, #2
    71c0:	0080      	lsls	r0, r0, #2
    71c2:	4b15      	ldr	r3, [pc, #84]	; (7218 <lv_style_list_copy+0xbc>)
    71c4:	4798      	blx	r3
    71c6:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 2, (list_src->style_cnt - 2) * sizeof(lv_style_t *));
    71c8:	7922      	ldrb	r2, [r4, #4]
    71ca:	3a02      	subs	r2, #2
    71cc:	6821      	ldr	r1, [r4, #0]
    71ce:	0092      	lsls	r2, r2, #2
    71d0:	3108      	adds	r1, #8
    71d2:	4b12      	ldr	r3, [pc, #72]	; (721c <lv_style_list_copy+0xc0>)
    71d4:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt - 2;
    71d6:	7923      	ldrb	r3, [r4, #4]
    71d8:	3b02      	subs	r3, #2
    71da:	712b      	strb	r3, [r5, #4]
        lv_style_t * local_style = get_alloc_local_style(list_dest);
    71dc:	4628      	mov	r0, r5
    71de:	4d10      	ldr	r5, [pc, #64]	; (7220 <lv_style_list_copy+0xc4>)
    71e0:	47a8      	blx	r5
    71e2:	4606      	mov	r6, r0
        lv_style_copy(local_style, get_alloc_local_style((lv_style_list_t *)list_src));
    71e4:	4620      	mov	r0, r4
    71e6:	47a8      	blx	r5
    71e8:	4601      	mov	r1, r0
    71ea:	4630      	mov	r0, r6
    71ec:	4b0d      	ldr	r3, [pc, #52]	; (7224 <lv_style_list_copy+0xc8>)
    71ee:	4798      	blx	r3
    71f0:	bd70      	pop	{r4, r5, r6, pc}
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
    71f2:	7920      	ldrb	r0, [r4, #4]
    71f4:	3801      	subs	r0, #1
    71f6:	0080      	lsls	r0, r0, #2
    71f8:	4b07      	ldr	r3, [pc, #28]	; (7218 <lv_style_list_copy+0xbc>)
    71fa:	4798      	blx	r3
    71fc:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
    71fe:	7922      	ldrb	r2, [r4, #4]
    7200:	3a01      	subs	r2, #1
    7202:	6821      	ldr	r1, [r4, #0]
    7204:	0092      	lsls	r2, r2, #2
    7206:	3104      	adds	r1, #4
    7208:	4b04      	ldr	r3, [pc, #16]	; (721c <lv_style_list_copy+0xc0>)
    720a:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt - 1;
    720c:	7923      	ldrb	r3, [r4, #4]
    720e:	3b01      	subs	r3, #1
    7210:	712b      	strb	r3, [r5, #4]
    7212:	e7e3      	b.n	71dc <lv_style_list_copy+0x80>
    7214:	000070ed 	.word	0x000070ed
    7218:	000123d1 	.word	0x000123d1
    721c:	00012649 	.word	0x00012649
    7220:	000066a1 	.word	0x000066a1
    7224:	000067ad 	.word	0x000067ad

00007228 <_lv_style_list_add_trans_style>:
{
    7228:	b530      	push	{r4, r5, lr}
    722a:	b083      	sub	sp, #12
    722c:	4604      	mov	r4, r0
    if(list->has_trans) return _lv_style_list_get_transition_style(list);
    722e:	7943      	ldrb	r3, [r0, #5]
    7230:	f013 0f02 	tst.w	r3, #2
    7234:	d005      	beq.n	7242 <_lv_style_list_add_trans_style+0x1a>
    7236:	4b1d      	ldr	r3, [pc, #116]	; (72ac <_lv_style_list_add_trans_style+0x84>)
    7238:	4798      	blx	r3
    723a:	4605      	mov	r5, r0
}
    723c:	4628      	mov	r0, r5
    723e:	b003      	add	sp, #12
    7240:	bd30      	pop	{r4, r5, pc}
    lv_style_t * trans_style = lv_mem_alloc(sizeof(lv_style_t));
    7242:	2004      	movs	r0, #4
    7244:	4b1a      	ldr	r3, [pc, #104]	; (72b0 <_lv_style_list_add_trans_style+0x88>)
    7246:	4798      	blx	r3
    7248:	4605      	mov	r5, r0
    LV_ASSERT_MEM(trans_style);
    724a:	4b1a      	ldr	r3, [pc, #104]	; (72b4 <_lv_style_list_add_trans_style+0x8c>)
    724c:	4798      	blx	r3
    724e:	b1a8      	cbz	r0, 727c <_lv_style_list_add_trans_style+0x54>
    if(trans_style == NULL) {
    7250:	b315      	cbz	r5, 7298 <_lv_style_list_add_trans_style+0x70>
    lv_style_init(trans_style);
    7252:	4628      	mov	r0, r5
    7254:	4b18      	ldr	r3, [pc, #96]	; (72b8 <_lv_style_list_add_trans_style+0x90>)
    7256:	4798      	blx	r3
    _lv_style_list_add_style(list, trans_style);
    7258:	4629      	mov	r1, r5
    725a:	4620      	mov	r0, r4
    725c:	4b17      	ldr	r3, [pc, #92]	; (72bc <_lv_style_list_add_trans_style+0x94>)
    725e:	4798      	blx	r3
    list->has_trans = 1;
    7260:	7963      	ldrb	r3, [r4, #5]
    7262:	f043 0302 	orr.w	r3, r3, #2
    7266:	7163      	strb	r3, [r4, #5]
    if(list->has_local) {
    7268:	f013 0f01 	tst.w	r3, #1
    726c:	d0e6      	beq.n	723c <_lv_style_list_add_trans_style+0x14>
        lv_style_t * tmp = list->style_list[0];
    726e:	6823      	ldr	r3, [r4, #0]
    7270:	681a      	ldr	r2, [r3, #0]
        list->style_list[0] = list->style_list[1];
    7272:	6859      	ldr	r1, [r3, #4]
    7274:	6019      	str	r1, [r3, #0]
        list->style_list[1] = tmp;
    7276:	6823      	ldr	r3, [r4, #0]
    7278:	605a      	str	r2, [r3, #4]
    727a:	e7df      	b.n	723c <_lv_style_list_add_trans_style+0x14>
    LV_ASSERT_MEM(trans_style);
    727c:	4b10      	ldr	r3, [pc, #64]	; (72c0 <_lv_style_list_add_trans_style+0x98>)
    727e:	9300      	str	r3, [sp, #0]
    7280:	f240 22cd 	movw	r2, #717	; 0x2cd
    7284:	490f      	ldr	r1, [pc, #60]	; (72c4 <_lv_style_list_add_trans_style+0x9c>)
    7286:	2003      	movs	r0, #3
    7288:	4c0f      	ldr	r4, [pc, #60]	; (72c8 <_lv_style_list_add_trans_style+0xa0>)
    728a:	47a0      	blx	r4
    728c:	462a      	mov	r2, r5
    728e:	2300      	movs	r3, #0
    7290:	480e      	ldr	r0, [pc, #56]	; (72cc <_lv_style_list_add_trans_style+0xa4>)
    7292:	490f      	ldr	r1, [pc, #60]	; (72d0 <_lv_style_list_add_trans_style+0xa8>)
    7294:	4788      	blx	r1
    7296:	e7fe      	b.n	7296 <_lv_style_list_add_trans_style+0x6e>
        LV_LOG_WARN("lv_style_list_add_trans_style: couldn't create transition style");
    7298:	4b0e      	ldr	r3, [pc, #56]	; (72d4 <_lv_style_list_add_trans_style+0xac>)
    729a:	9300      	str	r3, [sp, #0]
    729c:	4b08      	ldr	r3, [pc, #32]	; (72c0 <_lv_style_list_add_trans_style+0x98>)
    729e:	f240 22cf 	movw	r2, #719	; 0x2cf
    72a2:	4908      	ldr	r1, [pc, #32]	; (72c4 <_lv_style_list_add_trans_style+0x9c>)
    72a4:	2002      	movs	r0, #2
    72a6:	4c08      	ldr	r4, [pc, #32]	; (72c8 <_lv_style_list_add_trans_style+0xa0>)
    72a8:	47a0      	blx	r4
        return NULL;
    72aa:	e7c7      	b.n	723c <_lv_style_list_add_trans_style+0x14>
    72ac:	000070db 	.word	0x000070db
    72b0:	000123d1 	.word	0x000123d1
    72b4:	000022a5 	.word	0x000022a5
    72b8:	000064cd 	.word	0x000064cd
    72bc:	000065cd 	.word	0x000065cd
    72c0:	00024b10 	.word	0x00024b10
    72c4:	00024b30 	.word	0x00024b30
    72c8:	00012251 	.word	0x00012251
    72cc:	00023fcc 	.word	0x00023fcc
    72d0:	000022ad 	.word	0x000022ad
    72d4:	00024bf8 	.word	0x00024bf8

000072d8 <_lv_style_list_get_int>:
    if(list == NULL) return LV_RES_INV;
    72d8:	2800      	cmp	r0, #0
    72da:	d059      	beq.n	7390 <_lv_style_list_get_int+0xb8>
{
    72dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    72e0:	b083      	sub	sp, #12
    72e2:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
    72e4:	6803      	ldr	r3, [r0, #0]
    72e6:	2b00      	cmp	r3, #0
    72e8:	d054      	beq.n	7394 <_lv_style_list_get_int+0xbc>
    int16_t weight_goal = attr.full;
    72ea:	ea4f 2811 	mov.w	r8, r1, lsr #8
    lv_style_int_t value_act = 0;
    72ee:	2300      	movs	r3, #0
    72f0:	f8ad 3006 	strh.w	r3, [sp, #6]
    for(ci = 0; ci < list->style_cnt; ci++) {
    72f4:	7900      	ldrb	r0, [r0, #4]
    72f6:	2800      	cmp	r0, #0
    72f8:	d042      	beq.n	7380 <_lv_style_list_get_int+0xa8>
    72fa:	4693      	mov	fp, r2
    72fc:	4689      	mov	r9, r1
    72fe:	461c      	mov	r4, r3
    7300:	f04f 36ff 	mov.w	r6, #4294967295
    7304:	469a      	mov	sl, r3
        int16_t weight_act = _lv_style_get_int(class, prop, &value_act);
    7306:	4f24      	ldr	r7, [pc, #144]	; (7398 <_lv_style_list_get_int+0xc0>)
    7308:	e01c      	b.n	7344 <_lv_style_list_get_int+0x6c>
    730a:	4650      	mov	r0, sl
    730c:	f10d 0206 	add.w	r2, sp, #6
    7310:	4649      	mov	r1, r9
    7312:	47b8      	blx	r7
        if(weight_act == weight_goal) {
    7314:	4580      	cmp	r8, r0
    7316:	d027      	beq.n	7368 <_lv_style_list_get_int+0x90>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
    7318:	796b      	ldrb	r3, [r5, #5]
    731a:	f013 0f02 	tst.w	r3, #2
    731e:	d005      	beq.n	732c <_lv_style_list_get_int+0x54>
    7320:	2800      	cmp	r0, #0
    7322:	db03      	blt.n	732c <_lv_style_list_get_int+0x54>
    7324:	b914      	cbnz	r4, 732c <_lv_style_list_get_int+0x54>
    7326:	f013 0f04 	tst.w	r3, #4
    732a:	d023      	beq.n	7374 <_lv_style_list_get_int+0x9c>
        else if(weight_act > weight) {
    732c:	42b0      	cmp	r0, r6
    732e:	dd04      	ble.n	733a <_lv_style_list_get_int+0x62>
            *res = value_act;
    7330:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7334:	f8ab 3000 	strh.w	r3, [fp]
            weight =  weight_act;
    7338:	4606      	mov	r6, r0
    733a:	3401      	adds	r4, #1
    733c:	b224      	sxth	r4, r4
    for(ci = 0; ci < list->style_cnt; ci++) {
    733e:	7928      	ldrb	r0, [r5, #4]
    7340:	4284      	cmp	r4, r0
    7342:	da1f      	bge.n	7384 <_lv_style_list_get_int+0xac>
        lv_style_t * class = lv_style_list_get_style(list, ci);
    7344:	b2e2      	uxtb	r2, r4
    if(list->has_trans && list->skip_trans) id++;
    7346:	796b      	ldrb	r3, [r5, #5]
    7348:	f003 0306 	and.w	r3, r3, #6
    734c:	2b06      	cmp	r3, #6
    734e:	bf04      	itt	eq
    7350:	3201      	addeq	r2, #1
    7352:	b2d2      	uxtbeq	r2, r2
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    7354:	2800      	cmp	r0, #0
    7356:	d0d8      	beq.n	730a <_lv_style_list_get_int+0x32>
    7358:	4282      	cmp	r2, r0
    735a:	d203      	bcs.n	7364 <_lv_style_list_get_int+0x8c>
    return list->style_list[id];
    735c:	682b      	ldr	r3, [r5, #0]
    735e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    7362:	e7d3      	b.n	730c <_lv_style_list_get_int+0x34>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    7364:	4650      	mov	r0, sl
    7366:	e7d1      	b.n	730c <_lv_style_list_get_int+0x34>
            *res = value_act;
    7368:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    736c:	f8ab 3000 	strh.w	r3, [fp]
            return LV_RES_OK;
    7370:	2001      	movs	r0, #1
    7372:	e00a      	b.n	738a <_lv_style_list_get_int+0xb2>
            *res = value_act;
    7374:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7378:	f8ab 3000 	strh.w	r3, [fp]
            return LV_RES_OK;
    737c:	2001      	movs	r0, #1
    737e:	e004      	b.n	738a <_lv_style_list_get_int+0xb2>
    int16_t weight = -1;
    7380:	f04f 36ff 	mov.w	r6, #4294967295
    if(weight >= 0) return LV_RES_OK;
    7384:	43f0      	mvns	r0, r6
    if(list == NULL) return LV_RES_INV;
    7386:	f3c0 30c0 	ubfx	r0, r0, #15, #1
}
    738a:	b003      	add	sp, #12
    738c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(list == NULL) return LV_RES_INV;
    7390:	2000      	movs	r0, #0
    7392:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
    7394:	2000      	movs	r0, #0
    7396:	e7f8      	b.n	738a <_lv_style_list_get_int+0xb2>
    7398:	00006de9 	.word	0x00006de9

0000739c <_lv_style_list_get_color>:
    if(list == NULL) return LV_RES_INV;
    739c:	2800      	cmp	r0, #0
    739e:	d058      	beq.n	7452 <_lv_style_list_get_color+0xb6>
{
    73a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    73a4:	b083      	sub	sp, #12
    73a6:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
    73a8:	6803      	ldr	r3, [r0, #0]
    73aa:	2b00      	cmp	r3, #0
    73ac:	d053      	beq.n	7456 <_lv_style_list_get_color+0xba>
    int16_t weight_goal = attr.full;
    73ae:	ea4f 2811 	mov.w	r8, r1, lsr #8
    lv_color_t value_act = { 0 };
    73b2:	2300      	movs	r3, #0
    73b4:	f8ad 3004 	strh.w	r3, [sp, #4]
    for(ci = 0; ci < list->style_cnt; ci++) {
    73b8:	7900      	ldrb	r0, [r0, #4]
    73ba:	2800      	cmp	r0, #0
    73bc:	d041      	beq.n	7442 <_lv_style_list_get_color+0xa6>
    73be:	4693      	mov	fp, r2
    73c0:	4689      	mov	r9, r1
    73c2:	461c      	mov	r4, r3
    73c4:	f04f 36ff 	mov.w	r6, #4294967295
    73c8:	469a      	mov	sl, r3
        int16_t weight_act = _lv_style_get_color(class, prop, &value_act);
    73ca:	4f24      	ldr	r7, [pc, #144]	; (745c <_lv_style_list_get_color+0xc0>)
    73cc:	e01b      	b.n	7406 <_lv_style_list_get_color+0x6a>
    73ce:	4650      	mov	r0, sl
    73d0:	aa01      	add	r2, sp, #4
    73d2:	4649      	mov	r1, r9
    73d4:	47b8      	blx	r7
        if(weight_act == weight_goal) {
    73d6:	4580      	cmp	r8, r0
    73d8:	d027      	beq.n	742a <_lv_style_list_get_color+0x8e>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
    73da:	796b      	ldrb	r3, [r5, #5]
    73dc:	f013 0f02 	tst.w	r3, #2
    73e0:	d005      	beq.n	73ee <_lv_style_list_get_color+0x52>
    73e2:	2800      	cmp	r0, #0
    73e4:	db03      	blt.n	73ee <_lv_style_list_get_color+0x52>
    73e6:	b914      	cbnz	r4, 73ee <_lv_style_list_get_color+0x52>
    73e8:	f013 0f04 	tst.w	r3, #4
    73ec:	d023      	beq.n	7436 <_lv_style_list_get_color+0x9a>
        else if(weight_act > weight) {
    73ee:	42b0      	cmp	r0, r6
    73f0:	dd04      	ble.n	73fc <_lv_style_list_get_color+0x60>
            *res = value_act;
    73f2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    73f6:	f8ab 3000 	strh.w	r3, [fp]
            weight =  weight_act;
    73fa:	4606      	mov	r6, r0
    73fc:	3401      	adds	r4, #1
    73fe:	b224      	sxth	r4, r4
    for(ci = 0; ci < list->style_cnt; ci++) {
    7400:	7928      	ldrb	r0, [r5, #4]
    7402:	4284      	cmp	r4, r0
    7404:	da1f      	bge.n	7446 <_lv_style_list_get_color+0xaa>
        lv_style_t * class = lv_style_list_get_style(list, ci);
    7406:	b2e2      	uxtb	r2, r4
    if(list->has_trans && list->skip_trans) id++;
    7408:	796b      	ldrb	r3, [r5, #5]
    740a:	f003 0306 	and.w	r3, r3, #6
    740e:	2b06      	cmp	r3, #6
    7410:	bf04      	itt	eq
    7412:	3201      	addeq	r2, #1
    7414:	b2d2      	uxtbeq	r2, r2
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    7416:	2800      	cmp	r0, #0
    7418:	d0d9      	beq.n	73ce <_lv_style_list_get_color+0x32>
    741a:	4282      	cmp	r2, r0
    741c:	d203      	bcs.n	7426 <_lv_style_list_get_color+0x8a>
    return list->style_list[id];
    741e:	682b      	ldr	r3, [r5, #0]
    7420:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    7424:	e7d4      	b.n	73d0 <_lv_style_list_get_color+0x34>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    7426:	4650      	mov	r0, sl
    7428:	e7d2      	b.n	73d0 <_lv_style_list_get_color+0x34>
            *res = value_act;
    742a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    742e:	f8ab 3000 	strh.w	r3, [fp]
            return LV_RES_OK;
    7432:	2001      	movs	r0, #1
    7434:	e00a      	b.n	744c <_lv_style_list_get_color+0xb0>
            *res = value_act;
    7436:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    743a:	f8ab 3000 	strh.w	r3, [fp]
            return LV_RES_OK;
    743e:	2001      	movs	r0, #1
    7440:	e004      	b.n	744c <_lv_style_list_get_color+0xb0>
    int16_t weight = -1;
    7442:	f04f 36ff 	mov.w	r6, #4294967295
    if(weight >= 0)  return LV_RES_OK;
    7446:	43f0      	mvns	r0, r6
    if(list == NULL) return LV_RES_INV;
    7448:	f3c0 30c0 	ubfx	r0, r0, #15, #1
}
    744c:	b003      	add	sp, #12
    744e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(list == NULL) return LV_RES_INV;
    7452:	2000      	movs	r0, #0
    7454:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
    7456:	2000      	movs	r0, #0
    7458:	e7f8      	b.n	744c <_lv_style_list_get_color+0xb0>
    745a:	bf00      	nop
    745c:	00006f4f 	.word	0x00006f4f

00007460 <_lv_style_list_get_opa>:
    if(list == NULL) return LV_RES_INV;
    7460:	2800      	cmp	r0, #0
    7462:	d059      	beq.n	7518 <_lv_style_list_get_opa+0xb8>
{
    7464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7468:	b083      	sub	sp, #12
    746a:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
    746c:	6803      	ldr	r3, [r0, #0]
    746e:	2b00      	cmp	r3, #0
    7470:	d054      	beq.n	751c <_lv_style_list_get_opa+0xbc>
    int16_t weight_goal = attr.full;
    7472:	ea4f 2811 	mov.w	r8, r1, lsr #8
    lv_opa_t value_act = LV_OPA_TRANSP;
    7476:	2300      	movs	r3, #0
    7478:	f88d 3007 	strb.w	r3, [sp, #7]
    for(ci = 0; ci < list->style_cnt; ci++) {
    747c:	7900      	ldrb	r0, [r0, #4]
    747e:	2800      	cmp	r0, #0
    7480:	d042      	beq.n	7508 <_lv_style_list_get_opa+0xa8>
    7482:	4693      	mov	fp, r2
    7484:	4689      	mov	r9, r1
    7486:	461c      	mov	r4, r3
    7488:	f04f 36ff 	mov.w	r6, #4294967295
    748c:	469a      	mov	sl, r3
        int16_t weight_act = _lv_style_get_opa(class, prop, &value_act);
    748e:	4f24      	ldr	r7, [pc, #144]	; (7520 <_lv_style_list_get_opa+0xc0>)
    7490:	e01c      	b.n	74cc <_lv_style_list_get_opa+0x6c>
    7492:	4650      	mov	r0, sl
    7494:	f10d 0207 	add.w	r2, sp, #7
    7498:	4649      	mov	r1, r9
    749a:	47b8      	blx	r7
        if(weight_act == weight_goal) {
    749c:	4580      	cmp	r8, r0
    749e:	d027      	beq.n	74f0 <_lv_style_list_get_opa+0x90>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
    74a0:	796b      	ldrb	r3, [r5, #5]
    74a2:	f013 0f02 	tst.w	r3, #2
    74a6:	d005      	beq.n	74b4 <_lv_style_list_get_opa+0x54>
    74a8:	2800      	cmp	r0, #0
    74aa:	db03      	blt.n	74b4 <_lv_style_list_get_opa+0x54>
    74ac:	b914      	cbnz	r4, 74b4 <_lv_style_list_get_opa+0x54>
    74ae:	f013 0f04 	tst.w	r3, #4
    74b2:	d023      	beq.n	74fc <_lv_style_list_get_opa+0x9c>
        else if(weight_act > weight) {
    74b4:	42b0      	cmp	r0, r6
    74b6:	dd04      	ble.n	74c2 <_lv_style_list_get_opa+0x62>
            *res = value_act;
    74b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    74bc:	f88b 3000 	strb.w	r3, [fp]
            weight =  weight_act;
    74c0:	4606      	mov	r6, r0
    74c2:	3401      	adds	r4, #1
    74c4:	b224      	sxth	r4, r4
    for(ci = 0; ci < list->style_cnt; ci++) {
    74c6:	7928      	ldrb	r0, [r5, #4]
    74c8:	4284      	cmp	r4, r0
    74ca:	da1f      	bge.n	750c <_lv_style_list_get_opa+0xac>
        lv_style_t * class = lv_style_list_get_style(list, ci);
    74cc:	b2e2      	uxtb	r2, r4
    if(list->has_trans && list->skip_trans) id++;
    74ce:	796b      	ldrb	r3, [r5, #5]
    74d0:	f003 0306 	and.w	r3, r3, #6
    74d4:	2b06      	cmp	r3, #6
    74d6:	bf04      	itt	eq
    74d8:	3201      	addeq	r2, #1
    74da:	b2d2      	uxtbeq	r2, r2
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    74dc:	2800      	cmp	r0, #0
    74de:	d0d8      	beq.n	7492 <_lv_style_list_get_opa+0x32>
    74e0:	4282      	cmp	r2, r0
    74e2:	d203      	bcs.n	74ec <_lv_style_list_get_opa+0x8c>
    return list->style_list[id];
    74e4:	682b      	ldr	r3, [r5, #0]
    74e6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    74ea:	e7d3      	b.n	7494 <_lv_style_list_get_opa+0x34>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    74ec:	4650      	mov	r0, sl
    74ee:	e7d1      	b.n	7494 <_lv_style_list_get_opa+0x34>
            *res = value_act;
    74f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    74f4:	f88b 3000 	strb.w	r3, [fp]
            return LV_RES_OK;
    74f8:	2001      	movs	r0, #1
    74fa:	e00a      	b.n	7512 <_lv_style_list_get_opa+0xb2>
            *res = value_act;
    74fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7500:	f88b 3000 	strb.w	r3, [fp]
            return LV_RES_OK;
    7504:	2001      	movs	r0, #1
    7506:	e004      	b.n	7512 <_lv_style_list_get_opa+0xb2>
    int16_t weight = -1;
    7508:	f04f 36ff 	mov.w	r6, #4294967295
    if(weight >= 0)  return LV_RES_OK;
    750c:	43f0      	mvns	r0, r6
    if(list == NULL) return LV_RES_INV;
    750e:	f3c0 30c0 	ubfx	r0, r0, #15, #1
}
    7512:	b003      	add	sp, #12
    7514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(list == NULL) return LV_RES_INV;
    7518:	2000      	movs	r0, #0
    751a:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
    751c:	2000      	movs	r0, #0
    751e:	e7f8      	b.n	7512 <_lv_style_list_get_opa+0xb2>
    7520:	00006e9f 	.word	0x00006e9f

00007524 <_lv_style_list_get_ptr>:
    if(list == NULL) return LV_RES_INV;
    7524:	2800      	cmp	r0, #0
    7526:	d052      	beq.n	75ce <_lv_style_list_get_ptr+0xaa>
{
    7528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    752c:	b083      	sub	sp, #12
    752e:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
    7530:	6803      	ldr	r3, [r0, #0]
    7532:	2b00      	cmp	r3, #0
    7534:	d04d      	beq.n	75d2 <_lv_style_list_get_ptr+0xae>
    int16_t weight_goal = attr.full;
    7536:	ea4f 2811 	mov.w	r8, r1, lsr #8
    for(ci = 0; ci < list->style_cnt; ci++) {
    753a:	7900      	ldrb	r0, [r0, #4]
    753c:	2800      	cmp	r0, #0
    753e:	d03e      	beq.n	75be <_lv_style_list_get_ptr+0x9a>
    7540:	4693      	mov	fp, r2
    7542:	4689      	mov	r9, r1
    7544:	2400      	movs	r4, #0
    7546:	f04f 36ff 	mov.w	r6, #4294967295
    754a:	46a2      	mov	sl, r4
        int16_t weight_act = _lv_style_get_ptr(class, prop, &value_act);
    754c:	4f22      	ldr	r7, [pc, #136]	; (75d8 <_lv_style_list_get_ptr+0xb4>)
    754e:	e01a      	b.n	7586 <_lv_style_list_get_ptr+0x62>
    7550:	4650      	mov	r0, sl
    7552:	aa01      	add	r2, sp, #4
    7554:	4649      	mov	r1, r9
    7556:	47b8      	blx	r7
        if(weight_act == weight_goal) {
    7558:	4580      	cmp	r8, r0
    755a:	d026      	beq.n	75aa <_lv_style_list_get_ptr+0x86>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
    755c:	796b      	ldrb	r3, [r5, #5]
    755e:	f013 0f02 	tst.w	r3, #2
    7562:	d005      	beq.n	7570 <_lv_style_list_get_ptr+0x4c>
    7564:	2800      	cmp	r0, #0
    7566:	db03      	blt.n	7570 <_lv_style_list_get_ptr+0x4c>
    7568:	b914      	cbnz	r4, 7570 <_lv_style_list_get_ptr+0x4c>
    756a:	f013 0f04 	tst.w	r3, #4
    756e:	d021      	beq.n	75b4 <_lv_style_list_get_ptr+0x90>
        else if(weight_act > weight) {
    7570:	42b0      	cmp	r0, r6
    7572:	dd03      	ble.n	757c <_lv_style_list_get_ptr+0x58>
            *res = value_act;
    7574:	9b01      	ldr	r3, [sp, #4]
    7576:	f8cb 3000 	str.w	r3, [fp]
            weight =  weight_act;
    757a:	4606      	mov	r6, r0
    757c:	3401      	adds	r4, #1
    757e:	b224      	sxth	r4, r4
    for(ci = 0; ci < list->style_cnt; ci++) {
    7580:	7928      	ldrb	r0, [r5, #4]
    7582:	4284      	cmp	r4, r0
    7584:	da1d      	bge.n	75c2 <_lv_style_list_get_ptr+0x9e>
        lv_style_t * class = lv_style_list_get_style(list, ci);
    7586:	b2e2      	uxtb	r2, r4
    if(list->has_trans && list->skip_trans) id++;
    7588:	796b      	ldrb	r3, [r5, #5]
    758a:	f003 0306 	and.w	r3, r3, #6
    758e:	2b06      	cmp	r3, #6
    7590:	bf04      	itt	eq
    7592:	3201      	addeq	r2, #1
    7594:	b2d2      	uxtbeq	r2, r2
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    7596:	2800      	cmp	r0, #0
    7598:	d0da      	beq.n	7550 <_lv_style_list_get_ptr+0x2c>
    759a:	4282      	cmp	r2, r0
    759c:	d203      	bcs.n	75a6 <_lv_style_list_get_ptr+0x82>
    return list->style_list[id];
    759e:	682b      	ldr	r3, [r5, #0]
    75a0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    75a4:	e7d5      	b.n	7552 <_lv_style_list_get_ptr+0x2e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    75a6:	4650      	mov	r0, sl
    75a8:	e7d3      	b.n	7552 <_lv_style_list_get_ptr+0x2e>
            *res = value_act;
    75aa:	9b01      	ldr	r3, [sp, #4]
    75ac:	f8cb 3000 	str.w	r3, [fp]
            return LV_RES_OK;
    75b0:	2001      	movs	r0, #1
    75b2:	e009      	b.n	75c8 <_lv_style_list_get_ptr+0xa4>
            *res = value_act;
    75b4:	9b01      	ldr	r3, [sp, #4]
    75b6:	f8cb 3000 	str.w	r3, [fp]
            return LV_RES_OK;
    75ba:	2001      	movs	r0, #1
    75bc:	e004      	b.n	75c8 <_lv_style_list_get_ptr+0xa4>
    int16_t weight = -1;
    75be:	f04f 36ff 	mov.w	r6, #4294967295
    if(weight >= 0)  return LV_RES_OK;
    75c2:	43f0      	mvns	r0, r6
    if(list == NULL) return LV_RES_INV;
    75c4:	f3c0 30c0 	ubfx	r0, r0, #15, #1
}
    75c8:	b003      	add	sp, #12
    75ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(list == NULL) return LV_RES_INV;
    75ce:	2000      	movs	r0, #0
    75d0:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
    75d2:	2000      	movs	r0, #0
    75d4:	e7f8      	b.n	75c8 <_lv_style_list_get_ptr+0xa4>
    75d6:	bf00      	nop
    75d8:	00007005 	.word	0x00007005

000075dc <color_blend_true_color_additive>:
        }
    }
}

static inline lv_color_t color_blend_true_color_additive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
    75dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    75de:	f001 0e1f 	and.w	lr, r1, #31
    75e2:	f3c1 1645 	ubfx	r6, r1, #5, #6
    75e6:	f3c1 21c4 	ubfx	r1, r1, #11, #5

    if(opa <= LV_OPA_MIN) return bg;
    75ea:	2a05      	cmp	r2, #5
    75ec:	d93f      	bls.n	766e <color_blend_true_color_additive+0x92>
    uint32_t tmp;
#if LV_COLOR_DEPTH == 1
    tmp = bg.full + fg.full;
    fg.full = LV_MATH_MIN(tmp, 1);
#else
    tmp = bg.ch.red + fg.ch.red;
    75ee:	f3c0 24c4 	ubfx	r4, r0, #11, #5
    75f2:	440c      	add	r4, r1
#if LV_COLOR_DEPTH == 8
    fg.ch.red = LV_MATH_MIN(tmp, 7);
#elif LV_COLOR_DEPTH == 16
    fg.ch.red = LV_MATH_MIN(tmp, 31);
    75f4:	2c1f      	cmp	r4, #31
    75f6:	bf28      	it	cs
    75f8:	241f      	movcs	r4, #31
    75fa:	f004 041f 	and.w	r4, r4, #31

#if LV_COLOR_DEPTH == 8
    fg.ch.green = LV_MATH_MIN(tmp, 7);
#elif LV_COLOR_DEPTH == 16
#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green + fg.ch.green;
    75fe:	f3c0 1345 	ubfx	r3, r0, #5, #6
    7602:	4433      	add	r3, r6
    fg.ch.green = LV_MATH_MIN(tmp, 63);
    7604:	2b3f      	cmp	r3, #63	; 0x3f
    7606:	bf28      	it	cs
    7608:	233f      	movcs	r3, #63	; 0x3f
    760a:	f003 053f 	and.w	r5, r3, #63	; 0x3f

#elif LV_COLOR_DEPTH == 32
    fg.ch.green = LV_MATH_MIN(tmp, 255);
#endif

    tmp = bg.ch.blue + fg.ch.blue;
    760e:	f000 001f 	and.w	r0, r0, #31
    7612:	4470      	add	r0, lr
#if LV_COLOR_DEPTH == 8
    fg.ch.blue = LV_MATH_MIN(tmp, 4);
#elif LV_COLOR_DEPTH == 16
    fg.ch.blue = LV_MATH_MIN(tmp, 31);
    7614:	281f      	cmp	r0, #31
    7616:	bf28      	it	cs
    7618:	201f      	movcs	r0, #31
    761a:	f000 031f 	and.w	r3, r0, #31
#elif LV_COLOR_DEPTH == 32
    fg.ch.blue = LV_MATH_MIN(tmp, 255);
#endif
#endif

    if(opa == LV_OPA_COVER) return fg;
    761e:	2aff      	cmp	r2, #255	; 0xff
    7620:	d02e      	beq.n	7680 <color_blend_true_color_additive+0xa4>
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    7622:	f1c2 07ff 	rsb	r7, r2, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    7626:	fb07 f00e 	mul.w	r0, r7, lr
    762a:	fb02 0003 	mla	r0, r2, r3, r0
    762e:	eb00 2300 	add.w	r3, r0, r0, lsl #8
    7632:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
    7636:	0dc3      	lsrs	r3, r0, #23
    7638:	f04f 0000 	mov.w	r0, #0
    763c:	f363 0004 	bfi	r0, r3, #0, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    7640:	fb07 f306 	mul.w	r3, r7, r6
    7644:	fb02 3305 	mla	r3, r2, r5, r3
    7648:	eb03 2503 	add.w	r5, r3, r3, lsl #8
    764c:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
    7650:	0ddb      	lsrs	r3, r3, #23
    7652:	f363 104a 	bfi	r0, r3, #5, #6
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    7656:	fb07 f101 	mul.w	r1, r7, r1
    765a:	fb02 1204 	mla	r2, r2, r4, r1
    765e:	eb02 2302 	add.w	r3, r2, r2, lsl #8
    7662:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
    7666:	0dd2      	lsrs	r2, r2, #23
    7668:	f362 20cf 	bfi	r0, r2, #11, #5

    return lv_color_mix(fg, bg, opa);
}
    766c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(opa <= LV_OPA_MIN) return bg;
    766e:	f04f 0000 	mov.w	r0, #0
    7672:	f36e 0004 	bfi	r0, lr, #0, #5
    7676:	f366 104a 	bfi	r0, r6, #5, #6
    767a:	f361 20cf 	bfi	r0, r1, #11, #5
    767e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(opa == LV_OPA_COVER) return fg;
    7680:	f04f 0000 	mov.w	r0, #0
    7684:	f363 0004 	bfi	r0, r3, #0, #5
    7688:	f365 104a 	bfi	r0, r5, #5, #6
    768c:	f364 20cf 	bfi	r0, r4, #11, #5
    7690:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007692 <color_blend_true_color_subtractive>:

static inline lv_color_t color_blend_true_color_subtractive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
    7692:	b5f0      	push	{r4, r5, r6, r7, lr}
    7694:	f001 0e1f 	and.w	lr, r1, #31
    7698:	f3c1 1645 	ubfx	r6, r1, #5, #6
    769c:	f3c1 21c4 	ubfx	r1, r1, #11, #5

    if(opa <= LV_OPA_MIN) return bg;
    76a0:	2a05      	cmp	r2, #5
    76a2:	d93d      	bls.n	7720 <color_blend_true_color_subtractive+0x8e>

    int32_t tmp;
    tmp = bg.ch.red - fg.ch.red;
    76a4:	f3c0 24c4 	ubfx	r4, r0, #11, #5
    76a8:	1b0c      	subs	r4, r1, r4
    fg.ch.red = LV_MATH_MAX(tmp, 0);
    76aa:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    76ae:	f004 041f 	and.w	r4, r4, #31

#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green - fg.ch.green;
    76b2:	f3c0 1345 	ubfx	r3, r0, #5, #6
    76b6:	1af3      	subs	r3, r6, r3
    fg.ch.green = LV_MATH_MAX(tmp, 0);
    76b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    76bc:	f003 053f 	and.w	r5, r3, #63	; 0x3f
    tmp = LV_MATH_MAX(tmp, 0);
    fg.ch.green_h = tmp >> 3;
    fg.ch.green_l = tmp & 0x7;
#endif

    tmp = bg.ch.blue - fg.ch.blue;
    76c0:	f000 001f 	and.w	r0, r0, #31
    76c4:	ebae 0000 	sub.w	r0, lr, r0
    fg.ch.blue = LV_MATH_MAX(tmp, 0);
    76c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    76cc:	f000 031f 	and.w	r3, r0, #31

    if(opa == LV_OPA_COVER) return fg;
    76d0:	2aff      	cmp	r2, #255	; 0xff
    76d2:	d02e      	beq.n	7732 <color_blend_true_color_subtractive+0xa0>
    76d4:	f1c2 07ff 	rsb	r7, r2, #255	; 0xff
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    76d8:	fb07 f00e 	mul.w	r0, r7, lr
    76dc:	fb02 0003 	mla	r0, r2, r3, r0
    76e0:	eb00 2300 	add.w	r3, r0, r0, lsl #8
    76e4:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
    76e8:	0dc3      	lsrs	r3, r0, #23
    76ea:	f04f 0000 	mov.w	r0, #0
    76ee:	f363 0004 	bfi	r0, r3, #0, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    76f2:	fb07 f306 	mul.w	r3, r7, r6
    76f6:	fb02 3305 	mla	r3, r2, r5, r3
    76fa:	eb03 2503 	add.w	r5, r3, r3, lsl #8
    76fe:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
    7702:	0ddb      	lsrs	r3, r3, #23
    7704:	f363 104a 	bfi	r0, r3, #5, #6
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    7708:	fb07 f101 	mul.w	r1, r7, r1
    770c:	fb02 1204 	mla	r2, r2, r4, r1
    7710:	eb02 2302 	add.w	r3, r2, r2, lsl #8
    7714:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
    7718:	0dd2      	lsrs	r2, r2, #23
    771a:	f362 20cf 	bfi	r0, r2, #11, #5

    return lv_color_mix(fg, bg, opa);
}
    771e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(opa <= LV_OPA_MIN) return bg;
    7720:	f04f 0000 	mov.w	r0, #0
    7724:	f36e 0004 	bfi	r0, lr, #0, #5
    7728:	f366 104a 	bfi	r0, r6, #5, #6
    772c:	f361 20cf 	bfi	r0, r1, #11, #5
    7730:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(opa == LV_OPA_COVER) return fg;
    7732:	f04f 0000 	mov.w	r0, #0
    7736:	f363 0004 	bfi	r0, r3, #0, #5
    773a:	f365 104a 	bfi	r0, r5, #5, #6
    773e:	f364 20cf 	bfi	r0, r4, #11, #5
    7742:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007744 <_lv_blend_fill>:
{
    7744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7748:	b093      	sub	sp, #76	; 0x4c
    774a:	f89d 4070 	ldrb.w	r4, [sp, #112]	; 0x70
    774e:	f89d b074 	ldrb.w	fp, [sp, #116]	; 0x74
    7752:	f89d 9078 	ldrb.w	r9, [sp, #120]	; 0x78
    if(opa < LV_OPA_MIN) return;
    7756:	f1bb 0f04 	cmp.w	fp, #4
    775a:	d900      	bls.n	775e <_lv_blend_fill+0x1a>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
    775c:	b914      	cbnz	r4, 7764 <_lv_blend_fill+0x20>
}
    775e:	b013      	add	sp, #76	; 0x4c
    7760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7764:	9308      	str	r3, [sp, #32]
    7766:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    776a:	460e      	mov	r6, r1
    776c:	4605      	mov	r5, r0
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    776e:	4bba      	ldr	r3, [pc, #744]	; (7a58 <_lv_blend_fill+0x314>)
    7770:	4798      	blx	r3
    7772:	4680      	mov	r8, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    7774:	4bb9      	ldr	r3, [pc, #740]	; (7a5c <_lv_blend_fill+0x318>)
    7776:	4798      	blx	r3
    7778:	4607      	mov	r7, r0
    lv_color_t * disp_buf = vdb->buf_act;
    777a:	6882      	ldr	r2, [r0, #8]
    777c:	9206      	str	r2, [sp, #24]
    is_common = _lv_area_intersect(&draw_area, clip_area, fill_area);
    777e:	4632      	mov	r2, r6
    7780:	4629      	mov	r1, r5
    7782:	a810      	add	r0, sp, #64	; 0x40
    7784:	4bb6      	ldr	r3, [pc, #728]	; (7a60 <_lv_blend_fill+0x31c>)
    7786:	4798      	blx	r3
    if(!is_common) return;
    7788:	2800      	cmp	r0, #0
    778a:	d0e8      	beq.n	775e <_lv_blend_fill+0x1a>
    draw_area.x1 -= disp_area->x1;
    778c:	8a3a      	ldrh	r2, [r7, #16]
    778e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
    7792:	1a9b      	subs	r3, r3, r2
    7794:	b299      	uxth	r1, r3
    7796:	460d      	mov	r5, r1
    7798:	910a      	str	r1, [sp, #40]	; 0x28
    779a:	b208      	sxth	r0, r1
    779c:	900b      	str	r0, [sp, #44]	; 0x2c
    779e:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
    draw_area.y1 -= disp_area->y1;
    77a2:	8a7b      	ldrh	r3, [r7, #18]
    77a4:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
    77a8:	1ac9      	subs	r1, r1, r3
    77aa:	fa0f fc81 	sxth.w	ip, r1
    77ae:	f8ad c042 	strh.w	ip, [sp, #66]	; 0x42
    draw_area.x2 -= disp_area->x1;
    77b2:	f8bd 0044 	ldrh.w	r0, [sp, #68]	; 0x44
    77b6:	1a80      	subs	r0, r0, r2
    77b8:	b280      	uxth	r0, r0
    77ba:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
    draw_area.y2 -= disp_area->y1;
    77be:	f8bd e046 	ldrh.w	lr, [sp, #70]	; 0x46
    77c2:	ebae 0e03 	sub.w	lr, lr, r3
    77c6:	fa0f fe8e 	sxth.w	lr, lr
    77ca:	f8ad e046 	strh.w	lr, [sp, #70]	; 0x46
    if(mask && disp->driver.antialiasing == 0)
    77ce:	9a08      	ldr	r2, [sp, #32]
    77d0:	b1aa      	cbz	r2, 77fe <_lv_blend_fill+0xba>
    77d2:	f898 3008 	ldrb.w	r3, [r8, #8]
    77d6:	f013 0f01 	tst.w	r3, #1
    77da:	d110      	bne.n	77fe <_lv_blend_fill+0xba>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    77dc:	1c41      	adds	r1, r0, #1
    77de:	1b49      	subs	r1, r1, r5
    77e0:	b209      	sxth	r1, r1
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
    77e2:	2900      	cmp	r1, #0
    77e4:	dd0b      	ble.n	77fe <_lv_blend_fill+0xba>
    77e6:	4613      	mov	r3, r2
    77e8:	4411      	add	r1, r2
    77ea:	781a      	ldrb	r2, [r3, #0]
    77ec:	2a80      	cmp	r2, #128	; 0x80
    77ee:	f04f 32ff 	mov.w	r2, #4294967295
    77f2:	bf98      	it	ls
    77f4:	2200      	movls	r2, #0
    77f6:	f803 2b01 	strb.w	r2, [r3], #1
    77fa:	428b      	cmp	r3, r1
    77fc:	d1f5      	bne.n	77ea <_lv_blend_fill+0xa6>
    if(disp->driver.set_px_cb) {
    77fe:	f8d8 3014 	ldr.w	r3, [r8, #20]
    7802:	2b00      	cmp	r3, #0
    7804:	d077      	beq.n	78f6 <_lv_blend_fill+0x1b2>
    7806:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    780a:	4b93      	ldr	r3, [pc, #588]	; (7a58 <_lv_blend_fill+0x314>)
    780c:	4798      	blx	r3
    780e:	4605      	mov	r5, r0
    7810:	8abb      	ldrh	r3, [r7, #20]
    7812:	3301      	adds	r3, #1
    7814:	8a3a      	ldrh	r2, [r7, #16]
    7816:	1a9b      	subs	r3, r3, r2
    7818:	b21b      	sxth	r3, r3
    781a:	9307      	str	r3, [sp, #28]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
    781c:	2c01      	cmp	r4, #1
    781e:	d03e      	beq.n	789e <_lv_blend_fill+0x15a>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
    7820:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
    7824:	9b08      	ldr	r3, [sp, #32]
    7826:	1a9f      	subs	r7, r3, r2
    7828:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
    782c:	3301      	adds	r3, #1
    782e:	1a9b      	subs	r3, r3, r2
    7830:	b21b      	sxth	r3, r3
    7832:	9308      	str	r3, [sp, #32]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    7834:	f9bd a042 	ldrsh.w	sl, [sp, #66]	; 0x42
    7838:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
    783c:	459a      	cmp	sl, r3
    783e:	dc8e      	bgt.n	775e <_lv_blend_fill+0x1a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    7840:	f9bd 6040 	ldrsh.w	r6, [sp, #64]	; 0x40
    7844:	4634      	mov	r4, r6
    7846:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
    784a:	429e      	cmp	r6, r3
    784c:	dc1e      	bgt.n	788c <_lv_blend_fill+0x148>
    784e:	443e      	add	r6, r7
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
    7850:	fa0f f98a 	sxth.w	r9, sl
    7854:	9605      	str	r6, [sp, #20]
    7856:	464b      	mov	r3, r9
    7858:	46b9      	mov	r9, r7
    785a:	461f      	mov	r7, r3
                                       (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
    785c:	9a05      	ldr	r2, [sp, #20]
    785e:	f812 3b01 	ldrb.w	r3, [r2], #1
    7862:	9205      	str	r2, [sp, #20]
    7864:	fb03 f30b 	mul.w	r3, r3, fp
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
    7868:	f3c3 2307 	ubfx	r3, r3, #8, #8
    786c:	9302      	str	r3, [sp, #8]
    786e:	f8ad 8004 	strh.w	r8, [sp, #4]
    7872:	9700      	str	r7, [sp, #0]
    7874:	b223      	sxth	r3, r4
    7876:	9a07      	ldr	r2, [sp, #28]
    7878:	9906      	ldr	r1, [sp, #24]
    787a:	4628      	mov	r0, r5
    787c:	696e      	ldr	r6, [r5, #20]
    787e:	47b0      	blx	r6
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    7880:	3401      	adds	r4, #1
    7882:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
    7886:	429c      	cmp	r4, r3
    7888:	dde8      	ble.n	785c <_lv_blend_fill+0x118>
    788a:	464f      	mov	r7, r9
    788c:	9b08      	ldr	r3, [sp, #32]
    788e:	441f      	add	r7, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    7890:	f10a 0a01 	add.w	sl, sl, #1
    7894:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
    7898:	459a      	cmp	sl, r3
    789a:	ddd1      	ble.n	7840 <_lv_blend_fill+0xfc>
    789c:	e75f      	b.n	775e <_lv_blend_fill+0x1a>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    789e:	f9bd 9042 	ldrsh.w	r9, [sp, #66]	; 0x42
    78a2:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
    78a6:	4599      	cmp	r9, r3
    78a8:	f73f af59 	bgt.w	775e <_lv_blend_fill+0x1a>
    78ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
    78b0:	465e      	mov	r6, fp
    78b2:	f8dd b018 	ldr.w	fp, [sp, #24]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    78b6:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
    78ba:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
    78be:	429c      	cmp	r4, r3
    78c0:	dc12      	bgt.n	78e8 <_lv_blend_fill+0x1a4>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
    78c2:	fa0f f789 	sxth.w	r7, r9
    78c6:	9705      	str	r7, [sp, #20]
    78c8:	9602      	str	r6, [sp, #8]
    78ca:	f8ad 8004 	strh.w	r8, [sp, #4]
    78ce:	9b05      	ldr	r3, [sp, #20]
    78d0:	9300      	str	r3, [sp, #0]
    78d2:	b223      	sxth	r3, r4
    78d4:	4652      	mov	r2, sl
    78d6:	4659      	mov	r1, fp
    78d8:	4628      	mov	r0, r5
    78da:	696f      	ldr	r7, [r5, #20]
    78dc:	47b8      	blx	r7
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    78de:	3401      	adds	r4, #1
    78e0:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
    78e4:	429c      	cmp	r4, r3
    78e6:	ddef      	ble.n	78c8 <_lv_blend_fill+0x184>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    78e8:	f109 0901 	add.w	r9, r9, #1
    78ec:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
    78f0:	4599      	cmp	r9, r3
    78f2:	dde0      	ble.n	78b6 <_lv_blend_fill+0x172>
    78f4:	e733      	b.n	775e <_lv_blend_fill+0x1a>
    else if(mode == LV_BLEND_MODE_NORMAL) {
    78f6:	f1b9 0f00 	cmp.w	r9, #0
    78fa:	f040 83a0 	bne.w	803e <_lv_blend_fill+0x8fa>
    78fe:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7902:	f8ad 301c 	strh.w	r3, [sp, #28]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    7906:	4b54      	ldr	r3, [pc, #336]	; (7a58 <_lv_blend_fill+0x314>)
    7908:	4798      	blx	r3
    790a:	4606      	mov	r6, r0
    790c:	8abb      	ldrh	r3, [r7, #20]
    790e:	3301      	adds	r3, #1
    7910:	8a3f      	ldrh	r7, [r7, #16]
    7912:	1bdf      	subs	r7, r3, r7
    7914:	b23f      	sxth	r7, r7
    7916:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
    791a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
    791e:	3301      	adds	r3, #1
    7920:	1a9b      	subs	r3, r3, r2
    7922:	b21b      	sxth	r3, r3
    7924:	930b      	str	r3, [sp, #44]	; 0x2c
    int32_t draw_area_w = lv_area_get_width(draw_area);
    7926:	461d      	mov	r5, r3
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    7928:	f9bd 0046 	ldrsh.w	r0, [sp, #70]	; 0x46
    792c:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
    7930:	1c41      	adds	r1, r0, #1
    7932:	1ac9      	subs	r1, r1, r3
    int32_t draw_area_h = lv_area_get_height(draw_area);
    7934:	b209      	sxth	r1, r1
    7936:	910c      	str	r1, [sp, #48]	; 0x30
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
    7938:	930a      	str	r3, [sp, #40]	; 0x28
    793a:	fb03 2207 	mla	r2, r3, r7, r2
    793e:	9906      	ldr	r1, [sp, #24]
    7940:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    7944:	9105      	str	r1, [sp, #20]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
    7946:	2c01      	cmp	r4, #1
    7948:	d029      	beq.n	799e <_lv_blend_fill+0x25a>
        if(opa > LV_OPA_MAX) {
    794a:	f1bb 0ffa 	cmp.w	fp, #250	; 0xfa
    794e:	f200 8108 	bhi.w	7b62 <_lv_blend_fill+0x41e>
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
    7952:	4283      	cmp	r3, r0
    7954:	f73f af03 	bgt.w	775e <_lv_blend_fill+0x1a>
        last_dest_color.full = disp_buf_first[0].full;
    7958:	9b06      	ldr	r3, [sp, #24]
    795a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    795e:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
    7962:	f3c6 2cc4 	ubfx	ip, r6, #11, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    7966:	f3c6 1245 	ubfx	r2, r6, #5, #6
    796a:	4610      	mov	r0, r2
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    796c:	f006 021f 	and.w	r2, r6, #31
    7970:	4614      	mov	r4, r2
                disp_buf_first += disp_w;
    7972:	007a      	lsls	r2, r7, #1
    7974:	920c      	str	r2, [sp, #48]	; 0x30
    7976:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7978:	9908      	ldr	r1, [sp, #32]
    797a:	3901      	subs	r1, #1
    797c:	9106      	str	r1, [sp, #24]
    797e:	0052      	lsls	r2, r2, #1
    7980:	920e      	str	r2, [sp, #56]	; 0x38
    7982:	4619      	mov	r1, r3
    7984:	f04f 0e00 	mov.w	lr, #0
    7988:	4672      	mov	r2, lr
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
    798a:	b2b6      	uxth	r6, r6
    798c:	9608      	str	r6, [sp, #32]
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
    798e:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
    7992:	950d      	str	r5, [sp, #52]	; 0x34
    7994:	46a1      	mov	r9, r4
    7996:	f8cd b01c 	str.w	fp, [sp, #28]
    799a:	4683      	mov	fp, r0
    799c:	e345      	b.n	802a <_lv_blend_fill+0x8e6>
        if(opa > LV_OPA_MAX) {
    799e:	f1bb 0ffa 	cmp.w	fp, #250	; 0xfa
    79a2:	d925      	bls.n	79f0 <_lv_blend_fill+0x2ac>
            if(disp->driver.gpu_fill_cb && lv_area_get_size(draw_area) > GPU_SIZE_LIMIT) {
    79a4:	6a73      	ldr	r3, [r6, #36]	; 0x24
    79a6:	b123      	cbz	r3, 79b2 <_lv_blend_fill+0x26e>
    79a8:	a810      	add	r0, sp, #64	; 0x40
    79aa:	4b2e      	ldr	r3, [pc, #184]	; (7a64 <_lv_blend_fill+0x320>)
    79ac:	4798      	blx	r3
    79ae:	28f0      	cmp	r0, #240	; 0xf0
    79b0:	d813      	bhi.n	79da <_lv_blend_fill+0x296>
            for(y = 0; y < draw_area_h; y++) {
    79b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    79b4:	2b00      	cmp	r3, #0
    79b6:	f77f aed2 	ble.w	775e <_lv_blend_fill+0x1a>
                disp_buf_first += disp_w;
    79ba:	007f      	lsls	r7, r7, #1
    79bc:	2400      	movs	r4, #0
                lv_color_fill(disp_buf_first, color, draw_area_w);
    79be:	4d2a      	ldr	r5, [pc, #168]	; (7a68 <_lv_blend_fill+0x324>)
    79c0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    79c4:	9e05      	ldr	r6, [sp, #20]
    79c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    79c8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    79cc:	4630      	mov	r0, r6
    79ce:	47a8      	blx	r5
                disp_buf_first += disp_w;
    79d0:	443e      	add	r6, r7
            for(y = 0; y < draw_area_h; y++) {
    79d2:	3401      	adds	r4, #1
    79d4:	45a0      	cmp	r8, r4
    79d6:	d1f6      	bne.n	79c6 <_lv_blend_fill+0x282>
    79d8:	e6c1      	b.n	775e <_lv_blend_fill+0x1a>
                disp->driver.gpu_fill_cb(&disp->driver, disp_buf, disp_w, draw_area, color);
    79da:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    79de:	f8ad 3000 	strh.w	r3, [sp]
    79e2:	6a74      	ldr	r4, [r6, #36]	; 0x24
    79e4:	ab10      	add	r3, sp, #64	; 0x40
    79e6:	463a      	mov	r2, r7
    79e8:	9906      	ldr	r1, [sp, #24]
    79ea:	4630      	mov	r0, r6
    79ec:	47a0      	blx	r4
    79ee:	e6b6      	b.n	775e <_lv_blend_fill+0x1a>
            if(disp->driver.gpu_blend_cb && lv_area_get_size(draw_area) > GPU_SIZE_LIMIT) {
    79f0:	6a33      	ldr	r3, [r6, #32]
    79f2:	2b00      	cmp	r3, #0
    79f4:	d03c      	beq.n	7a70 <_lv_blend_fill+0x32c>
    79f6:	a810      	add	r0, sp, #64	; 0x40
    79f8:	4b1a      	ldr	r3, [pc, #104]	; (7a64 <_lv_blend_fill+0x320>)
    79fa:	4798      	blx	r3
    79fc:	28f0      	cmp	r0, #240	; 0xf0
    79fe:	d937      	bls.n	7a70 <_lv_blend_fill+0x32c>
                for(x = 0; x < draw_area_w ; x++) blend_buf[x].full = color.full;
    7a00:	990b      	ldr	r1, [sp, #44]	; 0x2c
    7a02:	2900      	cmp	r1, #0
    7a04:	dd0c      	ble.n	7a20 <_lv_blend_fill+0x2dc>
    7a06:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
    7a0a:	4a18      	ldr	r2, [pc, #96]	; (7a6c <_lv_blend_fill+0x328>)
    7a0c:	1e93      	subs	r3, r2, #2
    7a0e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
    7a12:	3901      	subs	r1, #1
    7a14:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    7a18:	f823 8f02 	strh.w	r8, [r3, #2]!
    7a1c:	429a      	cmp	r2, r3
    7a1e:	d1fb      	bne.n	7a18 <_lv_blend_fill+0x2d4>
                for(y = draw_area->y1; y <= draw_area->y2; y++) {
    7a20:	f9bd 5042 	ldrsh.w	r5, [sp, #66]	; 0x42
    7a24:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
    7a28:	429d      	cmp	r5, r3
    7a2a:	f73f ae98 	bgt.w	775e <_lv_blend_fill+0x1a>
                    disp_buf_first += disp_w;
    7a2e:	ea4f 0847 	mov.w	r8, r7, lsl #1
                    disp->driver.gpu_blend_cb(&disp->driver, disp_buf_first, blend_buf, draw_area_w, opa);
    7a32:	f8df a038 	ldr.w	sl, [pc, #56]	; 7a6c <_lv_blend_fill+0x328>
    7a36:	f8dd 9014 	ldr.w	r9, [sp, #20]
    7a3a:	465c      	mov	r4, fp
    7a3c:	9400      	str	r4, [sp, #0]
    7a3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7a40:	4652      	mov	r2, sl
    7a42:	4649      	mov	r1, r9
    7a44:	4630      	mov	r0, r6
    7a46:	6a37      	ldr	r7, [r6, #32]
    7a48:	47b8      	blx	r7
                    disp_buf_first += disp_w;
    7a4a:	44c1      	add	r9, r8
                for(y = draw_area->y1; y <= draw_area->y2; y++) {
    7a4c:	3501      	adds	r5, #1
    7a4e:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
    7a52:	429d      	cmp	r5, r3
    7a54:	ddf2      	ble.n	7a3c <_lv_blend_fill+0x2f8>
    7a56:	e682      	b.n	775e <_lv_blend_fill+0x1a>
    7a58:	00005f5d 	.word	0x00005f5d
    7a5c:	00010fd1 	.word	0x00010fd1
    7a60:	0001150d 	.word	0x0001150d
    7a64:	000114f1 	.word	0x000114f1
    7a68:	00011b2f 	.word	0x00011b2f
    7a6c:	2000808c 	.word	0x2000808c
            lv_color_t last_dest_color = LV_COLOR_BLACK;
    7a70:	f04f 0e00 	mov.w	lr, #0
    7a74:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    7a78:	f002 091f 	and.w	r9, r2, #31
    7a7c:	f3c2 1845 	ubfx	r8, r2, #5, #6
    7a80:	f3c2 2cc4 	ubfx	ip, r2, #11, #5
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    7a84:	fb0b f30c 	mul.w	r3, fp, ip
    7a88:	eb03 2103 	add.w	r1, r3, r3, lsl #8
    7a8c:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
    7a90:	f3c3 51c4 	ubfx	r1, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    7a94:	fb0b f308 	mul.w	r3, fp, r8
    7a98:	eb03 2403 	add.w	r4, r3, r3, lsl #8
    7a9c:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
    7aa0:	f3c3 54c5 	ubfx	r4, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    7aa4:	fb0b f309 	mul.w	r3, fp, r9
    7aa8:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    7aac:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    7ab0:	f3c3 52c4 	ubfx	r2, r3, #23, #5
}

LV_ATTRIBUTE_FAST_MEM static inline void lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out)
{
#if LV_COLOR_DEPTH != 1
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
    7ab4:	fa1f f38b 	uxth.w	r3, fp
    7ab8:	fb0c fc03 	mul.w	ip, ip, r3
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
    7abc:	fb08 f803 	mul.w	r8, r8, r3
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
    7ac0:	fb09 f903 	mul.w	r9, r9, r3
            lv_opa_t opa_inv = 255 - opa;
    7ac4:	ea6f 030b 	mvn.w	r3, fp
    7ac8:	b2db      	uxtb	r3, r3
            for(y = 0; y < draw_area_h; y++) {
    7aca:	980c      	ldr	r0, [sp, #48]	; 0x30
    7acc:	2800      	cmp	r0, #0
    7ace:	f77f ae46 	ble.w	775e <_lv_blend_fill+0x1a>
                disp_buf_first += disp_w;
    7ad2:	0078      	lsls	r0, r7, #1
    7ad4:	9007      	str	r0, [sp, #28]
    7ad6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    7ad8:	0040      	lsls	r0, r0, #1
    7ada:	9008      	str	r0, [sp, #32]
    7adc:	2000      	movs	r0, #0
    7ade:	9006      	str	r0, [sp, #24]
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix_premult(uint16_t * premult_c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix) >> 8);
    7ae0:	b29f      	uxth	r7, r3
    7ae2:	e036      	b.n	7b52 <_lv_blend_fill+0x40e>
                    disp_buf_first[x] = last_res_color;
    7ae4:	7830      	ldrb	r0, [r6, #0]
    7ae6:	f362 0004 	bfi	r0, r2, #0, #5
    7aea:	7030      	strb	r0, [r6, #0]
    7aec:	8830      	ldrh	r0, [r6, #0]
    7aee:	f364 104a 	bfi	r0, r4, #5, #6
    7af2:	8030      	strh	r0, [r6, #0]
    7af4:	0a00      	lsrs	r0, r0, #8
    7af6:	f361 00c7 	bfi	r0, r1, #3, #5
    7afa:	7070      	strb	r0, [r6, #1]
    7afc:	3302      	adds	r3, #2
                for(x = 0; x < draw_area_w; x++) {
    7afe:	459b      	cmp	fp, r3
    7b00:	d01c      	beq.n	7b3c <_lv_blend_fill+0x3f8>
                    if(last_dest_color.full != disp_buf_first[x].full) {
    7b02:	461e      	mov	r6, r3
    7b04:	fa1f f08e 	uxth.w	r0, lr
    7b08:	f8b3 a000 	ldrh.w	sl, [r3]
    7b0c:	4550      	cmp	r0, sl
    7b0e:	d0e9      	beq.n	7ae4 <_lv_blend_fill+0x3a0>
                        last_dest_color = disp_buf_first[x];
    7b10:	f8b3 e000 	ldrh.w	lr, [r3]
    7b14:	7859      	ldrb	r1, [r3, #1]
    7b16:	08c9      	lsrs	r1, r1, #3
    7b18:	fb01 c107 	mla	r1, r1, r7, ip
    7b1c:	f3c1 2104 	ubfx	r1, r1, #8, #5
    LV_COLOR_SET_G(ret, (uint16_t)((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix) >> 8);
    7b20:	f3ce 1445 	ubfx	r4, lr, #5, #6
    7b24:	fb04 8407 	mla	r4, r4, r7, r8
    7b28:	f3c4 2405 	ubfx	r4, r4, #8, #6
    LV_COLOR_SET_B(ret, (uint16_t)((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix) >> 8);
    7b2c:	781a      	ldrb	r2, [r3, #0]
    7b2e:	f002 021f 	and.w	r2, r2, #31
    7b32:	fb02 9207 	mla	r2, r2, r7, r9
    7b36:	f3c2 2204 	ubfx	r2, r2, #8, #5
    7b3a:	e7d3      	b.n	7ae4 <_lv_blend_fill+0x3a0>
                disp_buf_first += disp_w;
    7b3c:	9b05      	ldr	r3, [sp, #20]
    7b3e:	9807      	ldr	r0, [sp, #28]
    7b40:	4403      	add	r3, r0
    7b42:	9305      	str	r3, [sp, #20]
            for(y = 0; y < draw_area_h; y++) {
    7b44:	9b06      	ldr	r3, [sp, #24]
    7b46:	3301      	adds	r3, #1
    7b48:	9306      	str	r3, [sp, #24]
    7b4a:	980c      	ldr	r0, [sp, #48]	; 0x30
    7b4c:	4298      	cmp	r0, r3
    7b4e:	f43f ae06 	beq.w	775e <_lv_blend_fill+0x1a>
                for(x = 0; x < draw_area_w; x++) {
    7b52:	2d00      	cmp	r5, #0
    7b54:	ddf2      	ble.n	7b3c <_lv_blend_fill+0x3f8>
    7b56:	9805      	ldr	r0, [sp, #20]
    7b58:	4603      	mov	r3, r0
    7b5a:	9e08      	ldr	r6, [sp, #32]
    7b5c:	eb00 0b06 	add.w	fp, r0, r6
    7b60:	e7cf      	b.n	7b02 <_lv_blend_fill+0x3be>
            for(y = 0; y < draw_area_h; y++) {
    7b62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7b64:	2b00      	cmp	r3, #0
    7b66:	f77f adfa 	ble.w	775e <_lv_blend_fill+0x1a>
        int32_t x_end4 = draw_area_w - 4;
    7b6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7b6c:	3b04      	subs	r3, #4
    7b6e:	930d      	str	r3, [sp, #52]	; 0x34
                disp_buf_first += disp_w;
    7b70:	007b      	lsls	r3, r7, #1
    7b72:	930f      	str	r3, [sp, #60]	; 0x3c
    7b74:	2300      	movs	r3, #0
    7b76:	930a      	str	r3, [sp, #40]	; 0x28
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    7b78:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    7b7c:	f3c2 2cc4 	ubfx	ip, r2, #11, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    7b80:	f3c2 1e45 	ubfx	lr, r2, #5, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    7b84:	f3c2 0304 	ubfx	r3, r2, #0, #5
    7b88:	9306      	str	r3, [sp, #24]
    7b8a:	e1de      	b.n	7f4a <_lv_blend_fill+0x806>
                    FILL_NORMAL_MASK_PX(x, color)
    7b8c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    7b90:	803b      	strh	r3, [r7, #0]
    7b92:	4643      	mov	r3, r8
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
    7b94:	3101      	adds	r1, #1
    7b96:	428d      	cmp	r5, r1
    7b98:	f000 834c 	beq.w	8234 <_lv_blend_fill+0xaf0>
    7b9c:	3702      	adds	r7, #2
    7b9e:	f018 0f03 	tst.w	r8, #3
    7ba2:	f000 8355 	beq.w	8250 <_lv_blend_fill+0xb0c>
                    FILL_NORMAL_MASK_PX(x, color)
    7ba6:	f818 3b01 	ldrb.w	r3, [r8], #1
    7baa:	2b00      	cmp	r3, #0
    7bac:	d0f1      	beq.n	7b92 <_lv_blend_fill+0x44e>
    7bae:	2bff      	cmp	r3, #255	; 0xff
    7bb0:	d0ec      	beq.n	7b8c <_lv_blend_fill+0x448>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    7bb2:	f1c3 09ff 	rsb	r9, r3, #255	; 0xff
    7bb6:	787a      	ldrb	r2, [r7, #1]
    7bb8:	08d2      	lsrs	r2, r2, #3
    7bba:	fb09 f202 	mul.w	r2, r9, r2
    7bbe:	fb03 220c 	mla	r2, r3, ip, r2
    7bc2:	eb02 2002 	add.w	r0, r2, r2, lsl #8
    7bc6:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
    7bca:	f3c2 52c4 	ubfx	r2, r2, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    7bce:	8838      	ldrh	r0, [r7, #0]
    7bd0:	f3c0 1045 	ubfx	r0, r0, #5, #6
    7bd4:	fb09 f000 	mul.w	r0, r9, r0
    7bd8:	fb03 000e 	mla	r0, r3, lr, r0
    7bdc:	eb00 2600 	add.w	r6, r0, r0, lsl #8
    7be0:	eb00 10c6 	add.w	r0, r0, r6, lsl #7
    7be4:	f3c0 50c5 	ubfx	r0, r0, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    7be8:	783e      	ldrb	r6, [r7, #0]
    7bea:	f006 0a1f 	and.w	sl, r6, #31
    7bee:	fb09 f90a 	mul.w	r9, r9, sl
    7bf2:	fb03 9304 	mla	r3, r3, r4, r9
    7bf6:	eb03 2903 	add.w	r9, r3, r3, lsl #8
    7bfa:	eb03 13c9 	add.w	r3, r3, r9, lsl #7
    7bfe:	0ddb      	lsrs	r3, r3, #23
    7c00:	f363 0604 	bfi	r6, r3, #0, #5
    7c04:	703e      	strb	r6, [r7, #0]
    7c06:	883b      	ldrh	r3, [r7, #0]
    7c08:	f360 134a 	bfi	r3, r0, #5, #6
    7c0c:	803b      	strh	r3, [r7, #0]
    7c0e:	0a1b      	lsrs	r3, r3, #8
    7c10:	f362 03c7 	bfi	r3, r2, #3, #5
    7c14:	707b      	strb	r3, [r7, #1]
    7c16:	e7bc      	b.n	7b92 <_lv_blend_fill+0x44e>
                            disp_buf_first[x] = color;
    7c18:	f8bd 401c 	ldrh.w	r4, [sp, #28]
    7c1c:	f820 4c06 	strh.w	r4, [r0, #-6]
                            disp_buf_first[x + 1] = color;
    7c20:	f820 4c04 	strh.w	r4, [r0, #-4]
                            disp_buf_first[x + 2] = color;
    7c24:	f820 4c02 	strh.w	r4, [r0, #-2]
                            disp_buf_first[x + 3] = color;
    7c28:	8004      	strh	r4, [r0, #0]
                for(; x <= x_end4; x += 4) {
    7c2a:	3104      	adds	r1, #4
    7c2c:	3304      	adds	r3, #4
    7c2e:	3008      	adds	r0, #8
    7c30:	428f      	cmp	r7, r1
    7c32:	f2c0 8129 	blt.w	7e88 <_lv_blend_fill+0x744>
    7c36:	461a      	mov	r2, r3
                    if(*mask32) {
    7c38:	f853 4c04 	ldr.w	r4, [r3, #-4]
    7c3c:	2c00      	cmp	r4, #0
    7c3e:	d0f4      	beq.n	7c2a <_lv_blend_fill+0x4e6>
                        if((*mask32) == 0xFFFFFFFF) {
    7c40:	f1b4 3fff 	cmp.w	r4, #4294967295
    7c44:	d0e8      	beq.n	7c18 <_lv_blend_fill+0x4d4>
                            FILL_NORMAL_MASK_PX(x, color)
    7c46:	f813 8c04 	ldrb.w	r8, [r3, #-4]
    7c4a:	f1b8 0f00 	cmp.w	r8, #0
    7c4e:	d03f      	beq.n	7cd0 <_lv_blend_fill+0x58c>
    7c50:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    7c54:	f000 8105 	beq.w	7e62 <_lv_blend_fill+0x71e>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    7c58:	f1c8 06ff 	rsb	r6, r8, #255	; 0xff
    7c5c:	f810 4c05 	ldrb.w	r4, [r0, #-5]
    7c60:	08e4      	lsrs	r4, r4, #3
    7c62:	fb06 f404 	mul.w	r4, r6, r4
    7c66:	fb08 440c 	mla	r4, r8, ip, r4
    7c6a:	eb04 2504 	add.w	r5, r4, r4, lsl #8
    7c6e:	eb04 14c5 	add.w	r4, r4, r5, lsl #7
    7c72:	f3c4 54c4 	ubfx	r4, r4, #23, #5
    7c76:	9409      	str	r4, [sp, #36]	; 0x24
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    7c78:	f830 5c06 	ldrh.w	r5, [r0, #-6]
    7c7c:	f3c5 1545 	ubfx	r5, r5, #5, #6
    7c80:	fb06 f505 	mul.w	r5, r6, r5
    7c84:	fb08 550e 	mla	r5, r8, lr, r5
    7c88:	eb05 2905 	add.w	r9, r5, r5, lsl #8
    7c8c:	eb05 15c9 	add.w	r5, r5, r9, lsl #7
    7c90:	f3c5 55c5 	ubfx	r5, r5, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    7c94:	f810 9c06 	ldrb.w	r9, [r0, #-6]
    7c98:	f009 0b1f 	and.w	fp, r9, #31
    7c9c:	fb06 f60b 	mul.w	r6, r6, fp
    7ca0:	9c06      	ldr	r4, [sp, #24]
    7ca2:	fb08 6804 	mla	r8, r8, r4, r6
    7ca6:	eb08 2608 	add.w	r6, r8, r8, lsl #8
    7caa:	eb08 16c6 	add.w	r6, r8, r6, lsl #7
    7cae:	0df6      	lsrs	r6, r6, #23
    7cb0:	f366 0904 	bfi	r9, r6, #0, #5
    7cb4:	f800 9c06 	strb.w	r9, [r0, #-6]
    7cb8:	f830 6c06 	ldrh.w	r6, [r0, #-6]
    7cbc:	f365 164a 	bfi	r6, r5, #5, #6
    7cc0:	f820 6c06 	strh.w	r6, [r0, #-6]
    7cc4:	0a36      	lsrs	r6, r6, #8
    7cc6:	9c09      	ldr	r4, [sp, #36]	; 0x24
    7cc8:	f364 06c7 	bfi	r6, r4, #3, #5
    7ccc:	f800 6c05 	strb.w	r6, [r0, #-5]
                            FILL_NORMAL_MASK_PX(x + 1, color)
    7cd0:	f812 8c03 	ldrb.w	r8, [r2, #-3]
    7cd4:	f1b8 0f00 	cmp.w	r8, #0
    7cd8:	d03f      	beq.n	7d5a <_lv_blend_fill+0x616>
    7cda:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    7cde:	f000 80c5 	beq.w	7e6c <_lv_blend_fill+0x728>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    7ce2:	f1c8 06ff 	rsb	r6, r8, #255	; 0xff
    7ce6:	f810 4c03 	ldrb.w	r4, [r0, #-3]
    7cea:	08e4      	lsrs	r4, r4, #3
    7cec:	fb06 f404 	mul.w	r4, r6, r4
    7cf0:	fb08 440c 	mla	r4, r8, ip, r4
    7cf4:	eb04 2504 	add.w	r5, r4, r4, lsl #8
    7cf8:	eb04 14c5 	add.w	r4, r4, r5, lsl #7
    7cfc:	f3c4 54c4 	ubfx	r4, r4, #23, #5
    7d00:	9409      	str	r4, [sp, #36]	; 0x24
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    7d02:	f830 5c04 	ldrh.w	r5, [r0, #-4]
    7d06:	f3c5 1545 	ubfx	r5, r5, #5, #6
    7d0a:	fb06 f505 	mul.w	r5, r6, r5
    7d0e:	fb08 550e 	mla	r5, r8, lr, r5
    7d12:	eb05 2905 	add.w	r9, r5, r5, lsl #8
    7d16:	eb05 15c9 	add.w	r5, r5, r9, lsl #7
    7d1a:	f3c5 55c5 	ubfx	r5, r5, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    7d1e:	f810 9c04 	ldrb.w	r9, [r0, #-4]
    7d22:	f009 0b1f 	and.w	fp, r9, #31
    7d26:	fb06 f60b 	mul.w	r6, r6, fp
    7d2a:	9c06      	ldr	r4, [sp, #24]
    7d2c:	fb08 6804 	mla	r8, r8, r4, r6
    7d30:	eb08 2608 	add.w	r6, r8, r8, lsl #8
    7d34:	eb08 16c6 	add.w	r6, r8, r6, lsl #7
    7d38:	0df6      	lsrs	r6, r6, #23
    7d3a:	f366 0904 	bfi	r9, r6, #0, #5
    7d3e:	f800 9c04 	strb.w	r9, [r0, #-4]
    7d42:	f830 6c04 	ldrh.w	r6, [r0, #-4]
    7d46:	f365 164a 	bfi	r6, r5, #5, #6
    7d4a:	f820 6c04 	strh.w	r6, [r0, #-4]
    7d4e:	0a36      	lsrs	r6, r6, #8
    7d50:	9c09      	ldr	r4, [sp, #36]	; 0x24
    7d52:	f364 06c7 	bfi	r6, r4, #3, #5
    7d56:	f800 6c03 	strb.w	r6, [r0, #-3]
                            FILL_NORMAL_MASK_PX(x + 2, color)
    7d5a:	f812 8c02 	ldrb.w	r8, [r2, #-2]
    7d5e:	f1b8 0f00 	cmp.w	r8, #0
    7d62:	d03f      	beq.n	7de4 <_lv_blend_fill+0x6a0>
    7d64:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    7d68:	f000 8085 	beq.w	7e76 <_lv_blend_fill+0x732>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    7d6c:	f1c8 06ff 	rsb	r6, r8, #255	; 0xff
    7d70:	f810 4c01 	ldrb.w	r4, [r0, #-1]
    7d74:	08e4      	lsrs	r4, r4, #3
    7d76:	fb06 f404 	mul.w	r4, r6, r4
    7d7a:	fb08 440c 	mla	r4, r8, ip, r4
    7d7e:	eb04 2504 	add.w	r5, r4, r4, lsl #8
    7d82:	eb04 14c5 	add.w	r4, r4, r5, lsl #7
    7d86:	f3c4 54c4 	ubfx	r4, r4, #23, #5
    7d8a:	9409      	str	r4, [sp, #36]	; 0x24
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    7d8c:	f830 5c02 	ldrh.w	r5, [r0, #-2]
    7d90:	f3c5 1545 	ubfx	r5, r5, #5, #6
    7d94:	fb06 f505 	mul.w	r5, r6, r5
    7d98:	fb08 550e 	mla	r5, r8, lr, r5
    7d9c:	eb05 2905 	add.w	r9, r5, r5, lsl #8
    7da0:	eb05 15c9 	add.w	r5, r5, r9, lsl #7
    7da4:	f3c5 55c5 	ubfx	r5, r5, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    7da8:	f810 9c02 	ldrb.w	r9, [r0, #-2]
    7dac:	f009 0b1f 	and.w	fp, r9, #31
    7db0:	fb06 f60b 	mul.w	r6, r6, fp
    7db4:	9c06      	ldr	r4, [sp, #24]
    7db6:	fb08 6804 	mla	r8, r8, r4, r6
    7dba:	eb08 2608 	add.w	r6, r8, r8, lsl #8
    7dbe:	eb08 16c6 	add.w	r6, r8, r6, lsl #7
    7dc2:	0df6      	lsrs	r6, r6, #23
    7dc4:	f366 0904 	bfi	r9, r6, #0, #5
    7dc8:	f800 9c02 	strb.w	r9, [r0, #-2]
    7dcc:	f830 6c02 	ldrh.w	r6, [r0, #-2]
    7dd0:	f365 164a 	bfi	r6, r5, #5, #6
    7dd4:	f820 6c02 	strh.w	r6, [r0, #-2]
    7dd8:	0a36      	lsrs	r6, r6, #8
    7dda:	9c09      	ldr	r4, [sp, #36]	; 0x24
    7ddc:	f364 06c7 	bfi	r6, r4, #3, #5
    7de0:	f800 6c01 	strb.w	r6, [r0, #-1]
                            FILL_NORMAL_MASK_PX(x + 3, color)
    7de4:	f812 8c01 	ldrb.w	r8, [r2, #-1]
    7de8:	f1b8 0f00 	cmp.w	r8, #0
    7dec:	f43f af1d 	beq.w	7c2a <_lv_blend_fill+0x4e6>
    7df0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    7df4:	d044      	beq.n	7e80 <_lv_blend_fill+0x73c>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    7df6:	f1c8 06ff 	rsb	r6, r8, #255	; 0xff
    7dfa:	7844      	ldrb	r4, [r0, #1]
    7dfc:	08e4      	lsrs	r4, r4, #3
    7dfe:	fb06 f404 	mul.w	r4, r6, r4
    7e02:	fb08 440c 	mla	r4, r8, ip, r4
    7e06:	eb04 2504 	add.w	r5, r4, r4, lsl #8
    7e0a:	eb04 14c5 	add.w	r4, r4, r5, lsl #7
    7e0e:	f3c4 5bc4 	ubfx	fp, r4, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    7e12:	8805      	ldrh	r5, [r0, #0]
    7e14:	f3c5 1545 	ubfx	r5, r5, #5, #6
    7e18:	fb06 f505 	mul.w	r5, r6, r5
    7e1c:	fb08 550e 	mla	r5, r8, lr, r5
    7e20:	eb05 2905 	add.w	r9, r5, r5, lsl #8
    7e24:	eb05 15c9 	add.w	r5, r5, r9, lsl #7
    7e28:	f3c5 55c5 	ubfx	r5, r5, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    7e2c:	f890 9000 	ldrb.w	r9, [r0]
    7e30:	f009 0a1f 	and.w	sl, r9, #31
    7e34:	fb06 f60a 	mul.w	r6, r6, sl
    7e38:	9c06      	ldr	r4, [sp, #24]
    7e3a:	fb08 6804 	mla	r8, r8, r4, r6
    7e3e:	eb08 2608 	add.w	r6, r8, r8, lsl #8
    7e42:	eb08 16c6 	add.w	r6, r8, r6, lsl #7
    7e46:	0df6      	lsrs	r6, r6, #23
    7e48:	f366 0904 	bfi	r9, r6, #0, #5
    7e4c:	f880 9000 	strb.w	r9, [r0]
    7e50:	8806      	ldrh	r6, [r0, #0]
    7e52:	f365 164a 	bfi	r6, r5, #5, #6
    7e56:	8006      	strh	r6, [r0, #0]
    7e58:	0a36      	lsrs	r6, r6, #8
    7e5a:	f36b 06c7 	bfi	r6, fp, #3, #5
    7e5e:	7046      	strb	r6, [r0, #1]
    7e60:	e6e3      	b.n	7c2a <_lv_blend_fill+0x4e6>
                            FILL_NORMAL_MASK_PX(x, color)
    7e62:	f8bd 401c 	ldrh.w	r4, [sp, #28]
    7e66:	f820 4c06 	strh.w	r4, [r0, #-6]
    7e6a:	e731      	b.n	7cd0 <_lv_blend_fill+0x58c>
                            FILL_NORMAL_MASK_PX(x + 1, color)
    7e6c:	f8bd 401c 	ldrh.w	r4, [sp, #28]
    7e70:	f820 4c04 	strh.w	r4, [r0, #-4]
    7e74:	e771      	b.n	7d5a <_lv_blend_fill+0x616>
                            FILL_NORMAL_MASK_PX(x + 2, color)
    7e76:	f8bd 401c 	ldrh.w	r4, [sp, #28]
    7e7a:	f820 4c02 	strh.w	r4, [r0, #-2]
    7e7e:	e7b1      	b.n	7de4 <_lv_blend_fill+0x6a0>
                            FILL_NORMAL_MASK_PX(x + 3, color)
    7e80:	f8bd 401c 	ldrh.w	r4, [sp, #28]
    7e84:	8004      	strh	r4, [r0, #0]
    7e86:	e6d0      	b.n	7c2a <_lv_blend_fill+0x4e6>
    7e88:	9d0e      	ldr	r5, [sp, #56]	; 0x38
                for(; x < draw_area_w ; x++) {
    7e8a:	428d      	cmp	r5, r1
    7e8c:	dd4e      	ble.n	7f2c <_lv_blend_fill+0x7e8>
    7e8e:	1e54      	subs	r4, r2, #1
    7e90:	9b05      	ldr	r3, [sp, #20]
    7e92:	eb03 0841 	add.w	r8, r3, r1, lsl #1
    7e96:	9e06      	ldr	r6, [sp, #24]
    7e98:	e008      	b.n	7eac <_lv_blend_fill+0x768>
                    FILL_NORMAL_MASK_PX(x, color)
    7e9a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    7e9e:	f8a8 3000 	strh.w	r3, [r8]
                for(; x < draw_area_w ; x++) {
    7ea2:	3101      	adds	r1, #1
    7ea4:	f108 0802 	add.w	r8, r8, #2
    7ea8:	428d      	cmp	r5, r1
    7eaa:	dd3f      	ble.n	7f2c <_lv_blend_fill+0x7e8>
                    FILL_NORMAL_MASK_PX(x, color)
    7eac:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    7eb0:	2b00      	cmp	r3, #0
    7eb2:	d0f6      	beq.n	7ea2 <_lv_blend_fill+0x75e>
    7eb4:	2bff      	cmp	r3, #255	; 0xff
    7eb6:	d0f0      	beq.n	7e9a <_lv_blend_fill+0x756>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    7eb8:	f1c3 09ff 	rsb	r9, r3, #255	; 0xff
    7ebc:	f898 2001 	ldrb.w	r2, [r8, #1]
    7ec0:	08d2      	lsrs	r2, r2, #3
    7ec2:	fb09 f202 	mul.w	r2, r9, r2
    7ec6:	fb03 220c 	mla	r2, r3, ip, r2
    7eca:	eb02 2002 	add.w	r0, r2, r2, lsl #8
    7ece:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
    7ed2:	f3c2 52c4 	ubfx	r2, r2, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    7ed6:	f8b8 0000 	ldrh.w	r0, [r8]
    7eda:	f3c0 1045 	ubfx	r0, r0, #5, #6
    7ede:	fb09 f000 	mul.w	r0, r9, r0
    7ee2:	fb03 000e 	mla	r0, r3, lr, r0
    7ee6:	eb00 2700 	add.w	r7, r0, r0, lsl #8
    7eea:	eb00 10c7 	add.w	r0, r0, r7, lsl #7
    7eee:	f3c0 50c5 	ubfx	r0, r0, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    7ef2:	f898 7000 	ldrb.w	r7, [r8]
    7ef6:	f007 0a1f 	and.w	sl, r7, #31
    7efa:	fb09 f90a 	mul.w	r9, r9, sl
    7efe:	fb03 9306 	mla	r3, r3, r6, r9
    7f02:	eb03 2903 	add.w	r9, r3, r3, lsl #8
    7f06:	eb03 13c9 	add.w	r3, r3, r9, lsl #7
    7f0a:	0ddb      	lsrs	r3, r3, #23
    7f0c:	f363 0704 	bfi	r7, r3, #0, #5
    7f10:	f888 7000 	strb.w	r7, [r8]
    7f14:	f8b8 3000 	ldrh.w	r3, [r8]
    7f18:	f360 134a 	bfi	r3, r0, #5, #6
    7f1c:	f8a8 3000 	strh.w	r3, [r8]
    7f20:	0a1b      	lsrs	r3, r3, #8
    7f22:	f362 03c7 	bfi	r3, r2, #3, #5
    7f26:	f888 3001 	strb.w	r3, [r8, #1]
    7f2a:	e7ba      	b.n	7ea2 <_lv_blend_fill+0x75e>
                disp_buf_first += disp_w;
    7f2c:	9b05      	ldr	r3, [sp, #20]
    7f2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7f30:	4413      	add	r3, r2
    7f32:	9305      	str	r3, [sp, #20]
    7f34:	9b08      	ldr	r3, [sp, #32]
    7f36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7f38:	4413      	add	r3, r2
    7f3a:	9308      	str	r3, [sp, #32]
            for(y = 0; y < draw_area_h; y++) {
    7f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7f3e:	3301      	adds	r3, #1
    7f40:	930a      	str	r3, [sp, #40]	; 0x28
    7f42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7f44:	429a      	cmp	r2, r3
    7f46:	f43f ac0a 	beq.w	775e <_lv_blend_fill+0x1a>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
    7f4a:	2d00      	cmp	r5, #0
    7f4c:	f340 8170 	ble.w	8230 <_lv_blend_fill+0xaec>
    7f50:	9a08      	ldr	r2, [sp, #32]
    7f52:	f012 0f03 	tst.w	r2, #3
    7f56:	f000 8179 	beq.w	824c <_lv_blend_fill+0xb08>
    7f5a:	9f05      	ldr	r7, [sp, #20]
    7f5c:	4690      	mov	r8, r2
    7f5e:	2100      	movs	r1, #0
    7f60:	9c06      	ldr	r4, [sp, #24]
    7f62:	e620      	b.n	7ba6 <_lv_blend_fill+0x462>
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
    7f64:	2aff      	cmp	r2, #255	; 0xff
    7f66:	d002      	beq.n	7f6e <_lv_blend_fill+0x82a>
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
    7f68:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
    7f6c:	e004      	b.n	7f78 <_lv_blend_fill+0x834>
    7f6e:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
    7f72:	882a      	ldrh	r2, [r5, #0]
    7f74:	429a      	cmp	r2, r3
    7f76:	d032      	beq.n	7fde <_lv_blend_fill+0x89a>
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
    7f78:	f1be 0fff 	cmp.w	lr, #255	; 0xff
    7f7c:	d042      	beq.n	8004 <_lv_blend_fill+0x8c0>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    7f7e:	f1ce 04ff 	rsb	r4, lr, #255	; 0xff
    7f82:	786b      	ldrb	r3, [r5, #1]
    7f84:	08db      	lsrs	r3, r3, #3
    7f86:	fb0e f20c 	mul.w	r2, lr, ip
    7f8a:	fb04 2303 	mla	r3, r4, r3, r2
    7f8e:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    7f92:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    7f96:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    7f9a:	882a      	ldrh	r2, [r5, #0]
    7f9c:	f3c2 1245 	ubfx	r2, r2, #5, #6
    7fa0:	fb0b f10e 	mul.w	r1, fp, lr
    7fa4:	fb04 1202 	mla	r2, r4, r2, r1
    7fa8:	eb02 2102 	add.w	r1, r2, r2, lsl #8
    7fac:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
    7fb0:	f3c2 52c5 	ubfx	r2, r2, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    7fb4:	7829      	ldrb	r1, [r5, #0]
    7fb6:	f001 011f 	and.w	r1, r1, #31
    7fba:	fb09 f60e 	mul.w	r6, r9, lr
    7fbe:	fb04 6101 	mla	r1, r4, r1, r6
    7fc2:	eb01 2601 	add.w	r6, r1, r1, lsl #8
    7fc6:	eb01 11c6 	add.w	r1, r1, r6, lsl #7
    7fca:	0dc9      	lsrs	r1, r1, #23
    7fcc:	f361 0a04 	bfi	sl, r1, #0, #5
    7fd0:	f362 1a4a 	bfi	sl, r2, #5, #6
    7fd4:	f363 2acf 	bfi	sl, r3, #11, #5
    7fd8:	fa1f f18a 	uxth.w	r1, sl
                            last_dest_color.full = disp_buf_first[x].full;
    7fdc:	882b      	ldrh	r3, [r5, #0]
                        disp_buf_first[x] = last_res_color;
    7fde:	8029      	strh	r1, [r5, #0]
    7fe0:	4602      	mov	r2, r0
    7fe2:	3502      	adds	r5, #2
                for(x = 0; x < draw_area_w; x++) {
    7fe4:	45a8      	cmp	r8, r5
    7fe6:	d00f      	beq.n	8008 <_lv_blend_fill+0x8c4>
                    if(*mask_tmp_x) {
    7fe8:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    7fec:	2800      	cmp	r0, #0
    7fee:	d0f8      	beq.n	7fe2 <_lv_blend_fill+0x89e>
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
    7ff0:	4290      	cmp	r0, r2
    7ff2:	d0be      	beq.n	7f72 <_lv_blend_fill+0x82e>
    7ff4:	28ff      	cmp	r0, #255	; 0xff
    7ff6:	d0b5      	beq.n	7f64 <_lv_blend_fill+0x820>
                                                                   (uint32_t)((uint32_t)(*mask_tmp_x) * opa) >> 8;
    7ff8:	9b07      	ldr	r3, [sp, #28]
    7ffa:	fb03 fe00 	mul.w	lr, r3, r0
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
    7ffe:	f3ce 2e07 	ubfx	lr, lr, #8, #8
    8002:	e7b9      	b.n	7f78 <_lv_blend_fill+0x834>
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
    8004:	9908      	ldr	r1, [sp, #32]
    8006:	e7e9      	b.n	7fdc <_lv_blend_fill+0x898>
                disp_buf_first += disp_w;
    8008:	9805      	ldr	r0, [sp, #20]
    800a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    800c:	4420      	add	r0, r4
    800e:	9005      	str	r0, [sp, #20]
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
    8010:	980a      	ldr	r0, [sp, #40]	; 0x28
    8012:	3001      	adds	r0, #1
    8014:	4604      	mov	r4, r0
    8016:	900a      	str	r0, [sp, #40]	; 0x28
    8018:	9806      	ldr	r0, [sp, #24]
    801a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    801c:	4428      	add	r0, r5
    801e:	9006      	str	r0, [sp, #24]
    8020:	f9bd 0046 	ldrsh.w	r0, [sp, #70]	; 0x46
    8024:	4284      	cmp	r4, r0
    8026:	f73f ab9a 	bgt.w	775e <_lv_blend_fill+0x1a>
                for(x = 0; x < draw_area_w; x++) {
    802a:	980d      	ldr	r0, [sp, #52]	; 0x34
    802c:	2800      	cmp	r0, #0
    802e:	ddeb      	ble.n	8008 <_lv_blend_fill+0x8c4>
    8030:	9805      	ldr	r0, [sp, #20]
    8032:	4605      	mov	r5, r0
    8034:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    8036:	eb00 0804 	add.w	r8, r0, r4
    803a:	9f06      	ldr	r7, [sp, #24]
    803c:	e7d4      	b.n	7fe8 <_lv_blend_fill+0x8a4>
    803e:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
    switch(mode) {
    8042:	f1b9 0f01 	cmp.w	r9, #1
    8046:	d040      	beq.n	80ca <_lv_blend_fill+0x986>
    8048:	f1b9 0f02 	cmp.w	r9, #2
    804c:	d132      	bne.n	80b4 <_lv_blend_fill+0x970>
            blend_fp = color_blend_true_color_subtractive;
    804e:	4b83      	ldr	r3, [pc, #524]	; (825c <_lv_blend_fill+0xb18>)
    8050:	9305      	str	r3, [sp, #20]
    8052:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    8056:	f002 081f 	and.w	r8, r2, #31
    805a:	f3c2 1645 	ubfx	r6, r2, #5, #6
    805e:	f3c2 23c4 	ubfx	r3, r2, #11, #5
    8062:	4699      	mov	r9, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    8064:	8aba      	ldrh	r2, [r7, #20]
    8066:	3201      	adds	r2, #1
    8068:	8a3b      	ldrh	r3, [r7, #16]
    806a:	1ad3      	subs	r3, r2, r3
    806c:	b21f      	sxth	r7, r3
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
    806e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    8072:	fb0c f307 	mul.w	r3, ip, r7
    8076:	9a06      	ldr	r2, [sp, #24]
    8078:	eb02 0243 	add.w	r2, r2, r3, lsl #1
    807c:	9207      	str	r2, [sp, #28]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
    807e:	2c01      	cmp	r4, #1
    8080:	d026      	beq.n	80d0 <_lv_blend_fill+0x98c>
    8082:	3001      	adds	r0, #1
    8084:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8086:	1a80      	subs	r0, r0, r2
    8088:	b202      	sxth	r2, r0
    808a:	920c      	str	r2, [sp, #48]	; 0x30
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
    808c:	9a08      	ldr	r2, [sp, #32]
    808e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    8090:	1a52      	subs	r2, r2, r1
    8092:	9208      	str	r2, [sp, #32]
        last_dest_color.full = disp_buf_tmp[0].full;
    8094:	9a06      	ldr	r2, [sp, #24]
    8096:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    809a:	45f4      	cmp	ip, lr
    809c:	f73f ab5f 	bgt.w	775e <_lv_blend_fill+0x1a>
            disp_buf_tmp += disp_w;
    80a0:	007b      	lsls	r3, r7, #1
    80a2:	930b      	str	r3, [sp, #44]	; 0x2c
    80a4:	4610      	mov	r0, r2
    80a6:	2100      	movs	r1, #0
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
    80a8:	f8cd b018 	str.w	fp, [sp, #24]
    80ac:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    80b0:	46cb      	mov	fp, r9
    80b2:	e0b0      	b.n	8216 <_lv_blend_fill+0xad2>
            LV_LOG_WARN("fill_blended: unsupported blend mode");
    80b4:	4b6a      	ldr	r3, [pc, #424]	; (8260 <_lv_blend_fill+0xb1c>)
    80b6:	9300      	str	r3, [sp, #0]
    80b8:	4b6a      	ldr	r3, [pc, #424]	; (8264 <_lv_blend_fill+0xb20>)
    80ba:	f44f 7204 	mov.w	r2, #528	; 0x210
    80be:	496a      	ldr	r1, [pc, #424]	; (8268 <_lv_blend_fill+0xb24>)
    80c0:	2002      	movs	r0, #2
    80c2:	4c6a      	ldr	r4, [pc, #424]	; (826c <_lv_blend_fill+0xb28>)
    80c4:	47a0      	blx	r4
    80c6:	f7ff bb4a 	b.w	775e <_lv_blend_fill+0x1a>
            blend_fp = color_blend_true_color_additive;
    80ca:	4b69      	ldr	r3, [pc, #420]	; (8270 <_lv_blend_fill+0xb2c>)
    80cc:	9305      	str	r3, [sp, #20]
    80ce:	e7c0      	b.n	8052 <_lv_blend_fill+0x90e>
        lv_color_t last_dest_color = LV_COLOR_BLACK;
    80d0:	f04f 0a00 	mov.w	sl, #0
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    80d4:	fb0b f309 	mul.w	r3, fp, r9
    80d8:	eb03 2003 	add.w	r0, r3, r3, lsl #8
    80dc:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
    80e0:	f3c3 50c4 	ubfx	r0, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    80e4:	fb0b f306 	mul.w	r3, fp, r6
    80e8:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    80ec:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    80f0:	f3c3 52c5 	ubfx	r2, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    80f4:	fb0b f308 	mul.w	r3, fp, r8
    80f8:	eb03 2103 	add.w	r1, r3, r3, lsl #8
    80fc:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
    8100:	f3c3 53c4 	ubfx	r3, r3, #23, #5
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    8104:	45f4      	cmp	ip, lr
    8106:	f73f ab2a 	bgt.w	775e <_lv_blend_fill+0x1a>
            disp_buf_tmp += disp_w;
    810a:	0079      	lsls	r1, r7, #1
    810c:	9108      	str	r1, [sp, #32]
    810e:	f8cd b018 	str.w	fp, [sp, #24]
    8112:	46cb      	mov	fp, r9
    8114:	e03a      	b.n	818c <_lv_blend_fill+0xa48>
                disp_buf_tmp[x] = last_res_color;
    8116:	7821      	ldrb	r1, [r4, #0]
    8118:	f363 0104 	bfi	r1, r3, #0, #5
    811c:	7021      	strb	r1, [r4, #0]
    811e:	8821      	ldrh	r1, [r4, #0]
    8120:	f362 114a 	bfi	r1, r2, #5, #6
    8124:	8021      	strh	r1, [r4, #0]
    8126:	0a09      	lsrs	r1, r1, #8
    8128:	f360 01c7 	bfi	r1, r0, #3, #5
    812c:	7061      	strb	r1, [r4, #1]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    812e:	f109 0901 	add.w	r9, r9, #1
    8132:	3702      	adds	r7, #2
    8134:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
    8138:	4589      	cmp	r9, r1
    813a:	dc1a      	bgt.n	8172 <_lv_blend_fill+0xa2e>
                if(last_dest_color.full != disp_buf_tmp[x].full) {
    813c:	463c      	mov	r4, r7
    813e:	fa1f f18a 	uxth.w	r1, sl
    8142:	f8b7 e000 	ldrh.w	lr, [r7]
    8146:	4571      	cmp	r1, lr
    8148:	d0e5      	beq.n	8116 <_lv_blend_fill+0x9d2>
                    last_dest_color = disp_buf_tmp[x];
    814a:	f8b7 a000 	ldrh.w	sl, [r7]
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa);
    814e:	f368 0504 	bfi	r5, r8, #0, #5
    8152:	f366 154a 	bfi	r5, r6, #5, #6
    8156:	f36b 25cf 	bfi	r5, fp, #11, #5
    815a:	9a06      	ldr	r2, [sp, #24]
    815c:	4651      	mov	r1, sl
    815e:	4628      	mov	r0, r5
    8160:	9b05      	ldr	r3, [sp, #20]
    8162:	4798      	blx	r3
    8164:	f000 031f 	and.w	r3, r0, #31
    8168:	f3c0 1245 	ubfx	r2, r0, #5, #6
    816c:	f3c0 20c4 	ubfx	r0, r0, #11, #5
    8170:	e7d1      	b.n	8116 <_lv_blend_fill+0x9d2>
            disp_buf_tmp += disp_w;
    8172:	9907      	ldr	r1, [sp, #28]
    8174:	9c08      	ldr	r4, [sp, #32]
    8176:	4421      	add	r1, r4
    8178:	9107      	str	r1, [sp, #28]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    817a:	9909      	ldr	r1, [sp, #36]	; 0x24
    817c:	3101      	adds	r1, #1
    817e:	460c      	mov	r4, r1
    8180:	9109      	str	r1, [sp, #36]	; 0x24
    8182:	f9bd 1046 	ldrsh.w	r1, [sp, #70]	; 0x46
    8186:	428c      	cmp	r4, r1
    8188:	f73f aae9 	bgt.w	775e <_lv_blend_fill+0x1a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    818c:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
    8190:	46b9      	mov	r9, r7
    8192:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
    8196:	428f      	cmp	r7, r1
    8198:	dceb      	bgt.n	8172 <_lv_blend_fill+0xa2e>
    819a:	9907      	ldr	r1, [sp, #28]
    819c:	eb01 0747 	add.w	r7, r1, r7, lsl #1
    81a0:	e7cc      	b.n	813c <_lv_blend_fill+0x9f8>
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
    81a2:	2bf9      	cmp	r3, #249	; 0xf9
    81a4:	bf9d      	ittte	ls
    81a6:	9a0a      	ldrls	r2, [sp, #40]	; 0x28
    81a8:	4353      	mulls	r3, r2
    81aa:	f3c3 2207 	ubfxls	r2, r3, #8, #8
    81ae:	9a06      	ldrhi	r2, [sp, #24]
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa_tmp);
    81b0:	f368 0504 	bfi	r5, r8, #0, #5
    81b4:	f366 154a 	bfi	r5, r6, #5, #6
    81b8:	f36b 25cf 	bfi	r5, fp, #11, #5
    81bc:	8821      	ldrh	r1, [r4, #0]
    81be:	4628      	mov	r0, r5
    81c0:	9b05      	ldr	r3, [sp, #20]
    81c2:	4798      	blx	r3
    81c4:	b280      	uxth	r0, r0
                    last_mask = mask_tmp[x];
    81c6:	f89a 1000 	ldrb.w	r1, [sl]
                    last_dest_color.full = disp_buf_tmp[x].full;
    81ca:	8822      	ldrh	r2, [r4, #0]
                disp_buf_tmp[x] = last_res_color;
    81cc:	8020      	strh	r0, [r4, #0]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    81ce:	f109 0901 	add.w	r9, r9, #1
    81d2:	3701      	adds	r7, #1
    81d4:	3402      	adds	r4, #2
    81d6:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
    81da:	4599      	cmp	r9, r3
    81dc:	dc0a      	bgt.n	81f4 <_lv_blend_fill+0xab0>
    81de:	46ba      	mov	sl, r7
                if(mask_tmp[x] == 0) continue;
    81e0:	783b      	ldrb	r3, [r7, #0]
    81e2:	2b00      	cmp	r3, #0
    81e4:	d0f3      	beq.n	81ce <_lv_blend_fill+0xa8a>
                if(mask_tmp[x] != last_mask || last_dest_color.full != disp_buf_tmp[x].full) {
    81e6:	428b      	cmp	r3, r1
    81e8:	d1db      	bne.n	81a2 <_lv_blend_fill+0xa5e>
    81ea:	f8b4 e000 	ldrh.w	lr, [r4]
    81ee:	4596      	cmp	lr, r2
    81f0:	d1d7      	bne.n	81a2 <_lv_blend_fill+0xa5e>
    81f2:	e7eb      	b.n	81cc <_lv_blend_fill+0xa88>
            disp_buf_tmp += disp_w;
    81f4:	9b07      	ldr	r3, [sp, #28]
    81f6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    81f8:	4423      	add	r3, r4
    81fa:	9307      	str	r3, [sp, #28]
    81fc:	9b08      	ldr	r3, [sp, #32]
    81fe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    8200:	4423      	add	r3, r4
    8202:	9308      	str	r3, [sp, #32]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    8204:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8206:	3301      	adds	r3, #1
    8208:	461c      	mov	r4, r3
    820a:	9309      	str	r3, [sp, #36]	; 0x24
    820c:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
    8210:	429c      	cmp	r4, r3
    8212:	f73f aaa4 	bgt.w	775e <_lv_blend_fill+0x1a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    8216:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
    821a:	46a1      	mov	r9, r4
    821c:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
    8220:	429c      	cmp	r4, r3
    8222:	dce7      	bgt.n	81f4 <_lv_blend_fill+0xab0>
    8224:	9b08      	ldr	r3, [sp, #32]
    8226:	191f      	adds	r7, r3, r4
    8228:	9b07      	ldr	r3, [sp, #28]
    822a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    822e:	e7d6      	b.n	81de <_lv_blend_fill+0xa9a>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
    8230:	9b08      	ldr	r3, [sp, #32]
    8232:	2100      	movs	r1, #0
                for(; x <= x_end4; x += 4) {
    8234:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8236:	428a      	cmp	r2, r1
    8238:	f6ff ae78 	blt.w	7f2c <_lv_blend_fill+0x7e8>
    823c:	3304      	adds	r3, #4
    823e:	1cc8      	adds	r0, r1, #3
    8240:	9a05      	ldr	r2, [sp, #20]
    8242:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    8246:	950e      	str	r5, [sp, #56]	; 0x38
    8248:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    824a:	e4f4      	b.n	7c36 <_lv_blend_fill+0x4f2>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
    824c:	9b08      	ldr	r3, [sp, #32]
    824e:	2100      	movs	r1, #0
                for(; x <= x_end4; x += 4) {
    8250:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8252:	428a      	cmp	r2, r1
    8254:	daf2      	bge.n	823c <_lv_blend_fill+0xaf8>
    8256:	461a      	mov	r2, r3
    8258:	e619      	b.n	7e8e <_lv_blend_fill+0x74a>
    825a:	bf00      	nop
    825c:	00007693 	.word	0x00007693
    8260:	00024c84 	.word	0x00024c84
    8264:	00024c38 	.word	0x00024c38
    8268:	00024c54 	.word	0x00024c54
    826c:	00012251 	.word	0x00012251
    8270:	000075dd 	.word	0x000075dd

00008274 <_lv_blend_map>:
{
    8274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8278:	b091      	sub	sp, #68	; 0x44
    827a:	f89d 4068 	ldrb.w	r4, [sp, #104]	; 0x68
    827e:	f89d a06c 	ldrb.w	sl, [sp, #108]	; 0x6c
    8282:	f89d 5070 	ldrb.w	r5, [sp, #112]	; 0x70
    if(opa < LV_OPA_MIN) return;
    8286:	f1ba 0f04 	cmp.w	sl, #4
    828a:	d900      	bls.n	828e <_lv_blend_map+0x1a>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
    828c:	b914      	cbnz	r4, 8294 <_lv_blend_map+0x20>
}
    828e:	b011      	add	sp, #68	; 0x44
    8290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8294:	9304      	str	r3, [sp, #16]
    8296:	9207      	str	r2, [sp, #28]
    8298:	460f      	mov	r7, r1
    829a:	4601      	mov	r1, r0
    is_common = _lv_area_intersect(&draw_area, clip_area, map_area);
    829c:	463a      	mov	r2, r7
    829e:	a80e      	add	r0, sp, #56	; 0x38
    82a0:	4bbc      	ldr	r3, [pc, #752]	; (8594 <_lv_blend_map+0x320>)
    82a2:	4798      	blx	r3
    if(!is_common) return;
    82a4:	2800      	cmp	r0, #0
    82a6:	d0f2      	beq.n	828e <_lv_blend_map+0x1a>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    82a8:	4bbb      	ldr	r3, [pc, #748]	; (8598 <_lv_blend_map+0x324>)
    82aa:	4798      	blx	r3
    82ac:	4680      	mov	r8, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    82ae:	4bbb      	ldr	r3, [pc, #748]	; (859c <_lv_blend_map+0x328>)
    82b0:	4798      	blx	r3
    82b2:	4606      	mov	r6, r0
    lv_color_t * disp_buf = vdb->buf_act;
    82b4:	6883      	ldr	r3, [r0, #8]
    82b6:	9305      	str	r3, [sp, #20]
    draw_area.x1 -= disp_area->x1;
    82b8:	8a02      	ldrh	r2, [r0, #16]
    82ba:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    82be:	1a9b      	subs	r3, r3, r2
    82c0:	b29b      	uxth	r3, r3
    82c2:	9306      	str	r3, [sp, #24]
    82c4:	f9bd c018 	ldrsh.w	ip, [sp, #24]
    82c8:	f8ad c038 	strh.w	ip, [sp, #56]	; 0x38
    draw_area.y1 -= disp_area->y1;
    82cc:	8a43      	ldrh	r3, [r0, #18]
    82ce:	f8bd b03a 	ldrh.w	fp, [sp, #58]	; 0x3a
    82d2:	ebab 0b03 	sub.w	fp, fp, r3
    82d6:	fa1f fb8b 	uxth.w	fp, fp
    82da:	fa0f fe8b 	sxth.w	lr, fp
    82de:	f8ad e03a 	strh.w	lr, [sp, #58]	; 0x3a
    draw_area.x2 -= disp_area->x1;
    82e2:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
    82e6:	1a89      	subs	r1, r1, r2
    82e8:	b289      	uxth	r1, r1
    82ea:	f8ad 103c 	strh.w	r1, [sp, #60]	; 0x3c
    draw_area.y2 -= disp_area->y1;
    82ee:	f8bd 003e 	ldrh.w	r0, [sp, #62]	; 0x3e
    82f2:	1ac0      	subs	r0, r0, r3
    82f4:	b280      	uxth	r0, r0
    82f6:	b202      	sxth	r2, r0
    82f8:	9208      	str	r2, [sp, #32]
    82fa:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    if(mask && disp->driver.antialiasing == 0)
    82fe:	9a04      	ldr	r2, [sp, #16]
    8300:	b1d2      	cbz	r2, 8338 <_lv_blend_map+0xc4>
    8302:	f898 3008 	ldrb.w	r3, [r8, #8]
    8306:	f013 0f01 	tst.w	r3, #1
    830a:	d115      	bne.n	8338 <_lv_blend_map+0xc4>
    830c:	f101 0901 	add.w	r9, r1, #1
    8310:	9b06      	ldr	r3, [sp, #24]
    8312:	eba9 0903 	sub.w	r9, r9, r3
    8316:	fa0f f989 	sxth.w	r9, r9
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
    831a:	f1b9 0f00 	cmp.w	r9, #0
    831e:	dd0b      	ble.n	8338 <_lv_blend_map+0xc4>
    8320:	4613      	mov	r3, r2
    8322:	4491      	add	r9, r2
    8324:	781a      	ldrb	r2, [r3, #0]
    8326:	2a80      	cmp	r2, #128	; 0x80
    8328:	f04f 32ff 	mov.w	r2, #4294967295
    832c:	bf98      	it	ls
    832e:	2200      	movls	r2, #0
    8330:	f803 2b01 	strb.w	r2, [r3], #1
    8334:	454b      	cmp	r3, r9
    8336:	d1f5      	bne.n	8324 <_lv_blend_map+0xb0>
    if(disp->driver.set_px_cb) {
    8338:	f8d8 3014 	ldr.w	r3, [r8, #20]
    833c:	2b00      	cmp	r3, #0
    833e:	f000 80a9 	beq.w	8494 <_lv_blend_map+0x220>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    8342:	4b95      	ldr	r3, [pc, #596]	; (8598 <_lv_blend_map+0x324>)
    8344:	4798      	blx	r3
    8346:	4605      	mov	r5, r0
    8348:	f9b6 0010 	ldrsh.w	r0, [r6, #16]
    834c:	8ab3      	ldrh	r3, [r6, #20]
    834e:	3301      	adds	r3, #1
    8350:	1a1b      	subs	r3, r3, r0
    8352:	b21b      	sxth	r3, r3
    8354:	9306      	str	r3, [sp, #24]
    8356:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
    835a:	f9b7 2000 	ldrsh.w	r2, [r7]
    835e:	f8b7 9004 	ldrh.w	r9, [r7, #4]
    8362:	f109 0901 	add.w	r9, r9, #1
    8366:	eba9 0902 	sub.w	r9, r9, r2
    836a:	fa0f f989 	sxth.w	r9, r9
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
    836e:	f9bd e03a 	ldrsh.w	lr, [sp, #58]	; 0x3a
    8372:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    8376:	f9b6 6012 	ldrsh.w	r6, [r6, #18]
    837a:	1b9b      	subs	r3, r3, r6
    837c:	ebae 0303 	sub.w	r3, lr, r3
    map_buf_tmp += (draw_area->x1 - (map_area->x1 - disp_area->x1));
    8380:	1a12      	subs	r2, r2, r0
    8382:	1a8a      	subs	r2, r1, r2
    map_buf_tmp -= draw_area->x1;
    8384:	fb09 2303 	mla	r3, r9, r3, r2
    8388:	ea4f 0b41 	mov.w	fp, r1, lsl #1
    838c:	ebcb 0b43 	rsb	fp, fp, r3, lsl #1
    8390:	9b07      	ldr	r3, [sp, #28]
    8392:	445b      	add	r3, fp
    8394:	469b      	mov	fp, r3
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
    8396:	2c01      	cmp	r4, #1
    8398:	d046      	beq.n	8428 <_lv_blend_map+0x1b4>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
    839a:	9b04      	ldr	r3, [sp, #16]
    839c:	1a5b      	subs	r3, r3, r1
    839e:	9307      	str	r3, [sp, #28]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    83a0:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    83a4:	459e      	cmp	lr, r3
    83a6:	f73f af72 	bgt.w	828e <_lv_blend_map+0x1a>
    83aa:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
            map_buf_tmp += map_w;
    83ae:	ea4f 0249 	mov.w	r2, r9, lsl #1
    83b2:	9208      	str	r2, [sp, #32]
    83b4:	3301      	adds	r3, #1
    83b6:	1a59      	subs	r1, r3, r1
            mask_tmp += draw_area_w;
    83b8:	b20b      	sxth	r3, r1
    83ba:	9309      	str	r3, [sp, #36]	; 0x24
    83bc:	46f1      	mov	r9, lr
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    83be:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
    83c2:	4634      	mov	r4, r6
    83c4:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
    83c8:	429e      	cmp	r6, r3
    83ca:	dc20      	bgt.n	840e <_lv_blend_map+0x19a>
    83cc:	9b07      	ldr	r3, [sp, #28]
    83ce:	eb03 0806 	add.w	r8, r3, r6
    83d2:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
    83d6:	fa0f f789 	sxth.w	r7, r9
    83da:	9604      	str	r6, [sp, #16]
                                       (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
    83dc:	f818 3b01 	ldrb.w	r3, [r8], #1
    83e0:	fb03 f30a 	mul.w	r3, r3, sl
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
    83e4:	f3c3 2307 	ubfx	r3, r3, #8, #8
    83e8:	9302      	str	r3, [sp, #8]
    83ea:	9a04      	ldr	r2, [sp, #16]
    83ec:	f832 3b02 	ldrh.w	r3, [r2], #2
    83f0:	9204      	str	r2, [sp, #16]
    83f2:	f8ad 3004 	strh.w	r3, [sp, #4]
    83f6:	9700      	str	r7, [sp, #0]
    83f8:	b223      	sxth	r3, r4
    83fa:	9a06      	ldr	r2, [sp, #24]
    83fc:	9905      	ldr	r1, [sp, #20]
    83fe:	4628      	mov	r0, r5
    8400:	696e      	ldr	r6, [r5, #20]
    8402:	47b0      	blx	r6
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    8404:	3401      	adds	r4, #1
    8406:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
    840a:	429c      	cmp	r4, r3
    840c:	dde6      	ble.n	83dc <_lv_blend_map+0x168>
    840e:	9b07      	ldr	r3, [sp, #28]
    8410:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8412:	4413      	add	r3, r2
    8414:	9307      	str	r3, [sp, #28]
            map_buf_tmp += map_w;
    8416:	9b08      	ldr	r3, [sp, #32]
    8418:	449b      	add	fp, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    841a:	f109 0901 	add.w	r9, r9, #1
    841e:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    8422:	4599      	cmp	r9, r3
    8424:	ddcb      	ble.n	83be <_lv_blend_map+0x14a>
    8426:	e732      	b.n	828e <_lv_blend_map+0x1a>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    8428:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    842c:	4573      	cmp	r3, lr
    842e:	f6ff af2e 	blt.w	828e <_lv_blend_map+0x1a>
            map_buf_tmp += map_w;
    8432:	ea4f 0949 	mov.w	r9, r9, lsl #1
    8436:	46f0      	mov	r8, lr
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    8438:	f9bd 7038 	ldrsh.w	r7, [sp, #56]	; 0x38
    843c:	463c      	mov	r4, r7
    843e:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
    8442:	429f      	cmp	r7, r3
    8444:	dc1e      	bgt.n	8484 <_lv_blend_map+0x210>
    8446:	eb0b 0747 	add.w	r7, fp, r7, lsl #1
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
    844a:	fa0f f688 	sxth.w	r6, r8
    844e:	9704      	str	r7, [sp, #16]
    8450:	4633      	mov	r3, r6
    8452:	4656      	mov	r6, sl
    8454:	46ca      	mov	sl, r9
    8456:	4699      	mov	r9, r3
    8458:	9602      	str	r6, [sp, #8]
    845a:	9a04      	ldr	r2, [sp, #16]
    845c:	f832 3b02 	ldrh.w	r3, [r2], #2
    8460:	9204      	str	r2, [sp, #16]
    8462:	f8ad 3004 	strh.w	r3, [sp, #4]
    8466:	f8cd 9000 	str.w	r9, [sp]
    846a:	b223      	sxth	r3, r4
    846c:	9a06      	ldr	r2, [sp, #24]
    846e:	9905      	ldr	r1, [sp, #20]
    8470:	4628      	mov	r0, r5
    8472:	696f      	ldr	r7, [r5, #20]
    8474:	47b8      	blx	r7
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    8476:	3401      	adds	r4, #1
    8478:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
    847c:	429c      	cmp	r4, r3
    847e:	ddeb      	ble.n	8458 <_lv_blend_map+0x1e4>
    8480:	46d1      	mov	r9, sl
    8482:	46b2      	mov	sl, r6
            map_buf_tmp += map_w;
    8484:	44cb      	add	fp, r9
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    8486:	f108 0801 	add.w	r8, r8, #1
    848a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    848e:	4598      	cmp	r8, r3
    8490:	ddd2      	ble.n	8438 <_lv_blend_map+0x1c4>
    8492:	e6fc      	b.n	828e <_lv_blend_map+0x1a>
    else if(mode == LV_BLEND_MODE_NORMAL) {
    8494:	2d00      	cmp	r5, #0
    8496:	f040 8399 	bne.w	8bcc <_lv_blend_map+0x958>
    849a:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
    849e:	f8b6 8014 	ldrh.w	r8, [r6, #20]
    84a2:	f108 0801 	add.w	r8, r8, #1
    84a6:	eba8 0803 	sub.w	r8, r8, r3
    84aa:	fa0f f888 	sxth.w	r8, r8
    84ae:	3101      	adds	r1, #1
    84b0:	9a06      	ldr	r2, [sp, #24]
    84b2:	1a89      	subs	r1, r1, r2
    84b4:	b20a      	sxth	r2, r1
    84b6:	9209      	str	r2, [sp, #36]	; 0x24
    int32_t draw_area_w = lv_area_get_width(draw_area);
    84b8:	4615      	mov	r5, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    84ba:	3001      	adds	r0, #1
    84bc:	eba0 0b0b 	sub.w	fp, r0, fp
    int32_t draw_area_h = lv_area_get_height(draw_area);
    84c0:	fa0f f28b 	sxth.w	r2, fp
    84c4:	9208      	str	r2, [sp, #32]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    84c6:	f9b7 1000 	ldrsh.w	r1, [r7]
    84ca:	f8b7 9004 	ldrh.w	r9, [r7, #4]
    84ce:	f109 0901 	add.w	r9, r9, #1
    84d2:	eba9 0901 	sub.w	r9, r9, r1
    84d6:	fa0f f989 	sxth.w	r9, r9
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
    84da:	fb0e c208 	mla	r2, lr, r8, ip
    84de:	9805      	ldr	r0, [sp, #20]
    84e0:	eb00 0242 	add.w	r2, r0, r2, lsl #1
    84e4:	9205      	str	r2, [sp, #20]
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
    84e6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
    84ea:	f9b6 0012 	ldrsh.w	r0, [r6, #18]
    84ee:	1a12      	subs	r2, r2, r0
    84f0:	ebae 0e02 	sub.w	lr, lr, r2
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
    84f4:	1acb      	subs	r3, r1, r3
    84f6:	ebac 0303 	sub.w	r3, ip, r3
    84fa:	fb09 330e 	mla	r3, r9, lr, r3
    84fe:	9a07      	ldr	r2, [sp, #28]
    8500:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    8504:	9306      	str	r3, [sp, #24]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    8506:	4b24      	ldr	r3, [pc, #144]	; (8598 <_lv_blend_map+0x324>)
    8508:	4798      	blx	r3
    850a:	4606      	mov	r6, r0
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
    850c:	2c01      	cmp	r4, #1
    850e:	d01b      	beq.n	8548 <_lv_blend_map+0x2d4>
        if(opa > LV_OPA_MAX) {
    8510:	f1ba 0ffa 	cmp.w	sl, #250	; 0xfa
    8514:	f200 80c5 	bhi.w	86a2 <_lv_blend_map+0x42e>
            for(y = 0; y < draw_area_h; y++) {
    8518:	9b08      	ldr	r3, [sp, #32]
    851a:	2b00      	cmp	r3, #0
    851c:	f77f aeb7 	ble.w	828e <_lv_blend_map+0x1a>
                disp_buf_first += disp_w;
    8520:	ea4f 0348 	mov.w	r3, r8, lsl #1
    8524:	930a      	str	r3, [sp, #40]	; 0x28
                map_buf_first += map_w;
    8526:	ea4f 0349 	mov.w	r3, r9, lsl #1
    852a:	930b      	str	r3, [sp, #44]	; 0x2c
    852c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    852e:	9a04      	ldr	r2, [sp, #16]
    8530:	3a01      	subs	r2, #1
    8532:	9204      	str	r2, [sp, #16]
    8534:	005b      	lsls	r3, r3, #1
    8536:	930d      	str	r3, [sp, #52]	; 0x34
    8538:	f04f 0b00 	mov.w	fp, #0
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
    853c:	f8cd a01c 	str.w	sl, [sp, #28]
    8540:	950c      	str	r5, [sp, #48]	; 0x30
    8542:	f8dd 9018 	ldr.w	r9, [sp, #24]
    8546:	e336      	b.n	8bb6 <_lv_blend_map+0x942>
        if(disp->driver.gpu_blend_cb && (lv_area_get_size(draw_area) > GPU_SIZE_LIMIT)) {
    8548:	6a03      	ldr	r3, [r0, #32]
    854a:	b35b      	cbz	r3, 85a4 <_lv_blend_map+0x330>
    854c:	a80e      	add	r0, sp, #56	; 0x38
    854e:	4b14      	ldr	r3, [pc, #80]	; (85a0 <_lv_blend_map+0x32c>)
    8550:	4798      	blx	r3
    8552:	28f0      	cmp	r0, #240	; 0xf0
    8554:	d926      	bls.n	85a4 <_lv_blend_map+0x330>
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
    8556:	f9bd 503a 	ldrsh.w	r5, [sp, #58]	; 0x3a
    855a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    855e:	429d      	cmp	r5, r3
    8560:	f73f ae95 	bgt.w	828e <_lv_blend_map+0x1a>
                disp_buf_first += disp_w;
    8564:	ea4f 0848 	mov.w	r8, r8, lsl #1
                map_buf_first += map_w;
    8568:	ea4f 0949 	mov.w	r9, r9, lsl #1
    856c:	f8dd b014 	ldr.w	fp, [sp, #20]
    8570:	9f06      	ldr	r7, [sp, #24]
                disp->driver.gpu_blend_cb(&disp->driver, disp_buf_first, map_buf_first, draw_area_w, opa);
    8572:	f8cd a000 	str.w	sl, [sp]
    8576:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8578:	463a      	mov	r2, r7
    857a:	4659      	mov	r1, fp
    857c:	4630      	mov	r0, r6
    857e:	6a34      	ldr	r4, [r6, #32]
    8580:	47a0      	blx	r4
                disp_buf_first += disp_w;
    8582:	44c3      	add	fp, r8
                map_buf_first += map_w;
    8584:	444f      	add	r7, r9
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
    8586:	3501      	adds	r5, #1
    8588:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    858c:	429d      	cmp	r5, r3
    858e:	ddf0      	ble.n	8572 <_lv_blend_map+0x2fe>
    8590:	e67d      	b.n	828e <_lv_blend_map+0x1a>
    8592:	bf00      	nop
    8594:	0001150d 	.word	0x0001150d
    8598:	00005f5d 	.word	0x00005f5d
    859c:	00010fd1 	.word	0x00010fd1
    85a0:	000114f1 	.word	0x000114f1
        if(opa > LV_OPA_MAX) {
    85a4:	f1ba 0ffa 	cmp.w	sl, #250	; 0xfa
    85a8:	d810      	bhi.n	85cc <_lv_blend_map+0x358>
            for(y = 0; y < draw_area_h; y++) {
    85aa:	9b08      	ldr	r3, [sp, #32]
    85ac:	2b00      	cmp	r3, #0
    85ae:	f77f ae6e 	ble.w	828e <_lv_blend_map+0x1a>
                disp_buf_first += disp_w;
    85b2:	ea4f 0348 	mov.w	r3, r8, lsl #1
    85b6:	9304      	str	r3, [sp, #16]
                map_buf_first += map_w;
    85b8:	ea4f 0949 	mov.w	r9, r9, lsl #1
    85bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    85be:	ea4f 0b43 	mov.w	fp, r3, lsl #1
    85c2:	f04f 0800 	mov.w	r8, #0
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    85c6:	f1ca 0eff 	rsb	lr, sl, #255	; 0xff
    85ca:	e026      	b.n	861a <_lv_blend_map+0x3a6>
            for(y = 0; y < draw_area_h; y++) {
    85cc:	9b08      	ldr	r3, [sp, #32]
    85ce:	2b00      	cmp	r3, #0
    85d0:	f77f ae5d 	ble.w	828e <_lv_blend_map+0x1a>
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
    85d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    85d6:	0056      	lsls	r6, r2, #1
                disp_buf_first += disp_w;
    85d8:	ea4f 0848 	mov.w	r8, r8, lsl #1
                map_buf_first += map_w;
    85dc:	ea4f 0949 	mov.w	r9, r9, lsl #1
    85e0:	2400      	movs	r4, #0
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
    85e2:	4d66      	ldr	r5, [pc, #408]	; (877c <_lv_blend_map+0x508>)
    85e4:	469b      	mov	fp, r3
    85e6:	9f05      	ldr	r7, [sp, #20]
    85e8:	f8dd a018 	ldr.w	sl, [sp, #24]
    85ec:	4632      	mov	r2, r6
    85ee:	4651      	mov	r1, sl
    85f0:	4638      	mov	r0, r7
    85f2:	47a8      	blx	r5
                disp_buf_first += disp_w;
    85f4:	4447      	add	r7, r8
                map_buf_first += map_w;
    85f6:	44ca      	add	sl, r9
            for(y = 0; y < draw_area_h; y++) {
    85f8:	3401      	adds	r4, #1
    85fa:	45a3      	cmp	fp, r4
    85fc:	d1f6      	bne.n	85ec <_lv_blend_map+0x378>
    85fe:	e646      	b.n	828e <_lv_blend_map+0x1a>
                disp_buf_first += disp_w;
    8600:	9b05      	ldr	r3, [sp, #20]
    8602:	9a04      	ldr	r2, [sp, #16]
    8604:	4413      	add	r3, r2
    8606:	9305      	str	r3, [sp, #20]
                map_buf_first += map_w;
    8608:	9b06      	ldr	r3, [sp, #24]
    860a:	444b      	add	r3, r9
    860c:	9306      	str	r3, [sp, #24]
            for(y = 0; y < draw_area_h; y++) {
    860e:	f108 0801 	add.w	r8, r8, #1
    8612:	9b08      	ldr	r3, [sp, #32]
    8614:	4543      	cmp	r3, r8
    8616:	f43f ae3a 	beq.w	828e <_lv_blend_map+0x1a>
                for(x = 0; x < draw_area_w; x++) {
    861a:	2d00      	cmp	r5, #0
    861c:	ddf0      	ble.n	8600 <_lv_blend_map+0x38c>
    861e:	9b06      	ldr	r3, [sp, #24]
    8620:	461f      	mov	r7, r3
    8622:	9c05      	ldr	r4, [sp, #20]
    8624:	eb03 0c0b 	add.w	ip, r3, fp
    8628:	787b      	ldrb	r3, [r7, #1]
    862a:	08db      	lsrs	r3, r3, #3
    862c:	7862      	ldrb	r2, [r4, #1]
    862e:	08d2      	lsrs	r2, r2, #3
    8630:	fb0e f202 	mul.w	r2, lr, r2
    8634:	fb0a 2303 	mla	r3, sl, r3, r2
    8638:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    863c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    8640:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    8644:	883a      	ldrh	r2, [r7, #0]
    8646:	f3c2 1245 	ubfx	r2, r2, #5, #6
    864a:	8821      	ldrh	r1, [r4, #0]
    864c:	f3c1 1145 	ubfx	r1, r1, #5, #6
    8650:	fb0e f101 	mul.w	r1, lr, r1
    8654:	fb0a 1202 	mla	r2, sl, r2, r1
    8658:	eb02 2102 	add.w	r1, r2, r2, lsl #8
    865c:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
    8660:	f3c2 52c5 	ubfx	r2, r2, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    8664:	f817 1b02 	ldrb.w	r1, [r7], #2
    8668:	f001 011f 	and.w	r1, r1, #31
    866c:	7820      	ldrb	r0, [r4, #0]
    866e:	f000 061f 	and.w	r6, r0, #31
    8672:	fb0e f606 	mul.w	r6, lr, r6
    8676:	fb0a 6101 	mla	r1, sl, r1, r6
    867a:	eb01 2601 	add.w	r6, r1, r1, lsl #8
    867e:	eb01 11c6 	add.w	r1, r1, r6, lsl #7
    8682:	0dc9      	lsrs	r1, r1, #23
                        disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa);
    8684:	f361 0004 	bfi	r0, r1, #0, #5
    8688:	7020      	strb	r0, [r4, #0]
    868a:	8821      	ldrh	r1, [r4, #0]
    868c:	f362 114a 	bfi	r1, r2, #5, #6
    8690:	8021      	strh	r1, [r4, #0]
    8692:	0a09      	lsrs	r1, r1, #8
    8694:	f363 01c7 	bfi	r1, r3, #3, #5
    8698:	7061      	strb	r1, [r4, #1]
    869a:	3402      	adds	r4, #2
                for(x = 0; x < draw_area_w; x++) {
    869c:	45bc      	cmp	ip, r7
    869e:	d1c3      	bne.n	8628 <_lv_blend_map+0x3b4>
    86a0:	e7ae      	b.n	8600 <_lv_blend_map+0x38c>
            int32_t x_end4 = draw_area_w - 4;
    86a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    86a4:	3b04      	subs	r3, #4
    86a6:	930a      	str	r3, [sp, #40]	; 0x28
            for(y = 0; y < draw_area_h; y++) {
    86a8:	9b08      	ldr	r3, [sp, #32]
    86aa:	2b00      	cmp	r3, #0
    86ac:	f77f adef 	ble.w	828e <_lv_blend_map+0x1a>
                disp_buf_first += disp_w;
    86b0:	ea4f 0348 	mov.w	r3, r8, lsl #1
    86b4:	930c      	str	r3, [sp, #48]	; 0x30
                map_buf_first += map_w;
    86b6:	ea4f 0349 	mov.w	r3, r9, lsl #1
    86ba:	930d      	str	r3, [sp, #52]	; 0x34
    86bc:	2300      	movs	r3, #0
    86be:	9307      	str	r3, [sp, #28]
    86c0:	e365      	b.n	8d8e <_lv_blend_map+0xb1a>
                    MAP_NORMAL_MASK_PX(x)
    86c2:	f8b8 3000 	ldrh.w	r3, [r8]
    86c6:	f8ae 3000 	strh.w	r3, [lr]
    86ca:	4663      	mov	r3, ip
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
    86cc:	3101      	adds	r1, #1
    86ce:	428d      	cmp	r5, r1
    86d0:	f000 8347 	beq.w	8d62 <_lv_blend_map+0xaee>
    86d4:	f108 0802 	add.w	r8, r8, #2
    86d8:	f10e 0e02 	add.w	lr, lr, #2
    86dc:	f01c 0f03 	tst.w	ip, #3
    86e0:	f000 832d 	beq.w	8d3e <_lv_blend_map+0xaca>
                    MAP_NORMAL_MASK_PX(x)
    86e4:	f81c 4b01 	ldrb.w	r4, [ip], #1
    86e8:	2c00      	cmp	r4, #0
    86ea:	d0ee      	beq.n	86ca <_lv_blend_map+0x456>
    86ec:	2cff      	cmp	r4, #255	; 0xff
    86ee:	d0e8      	beq.n	86c2 <_lv_blend_map+0x44e>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    86f0:	f1c4 06ff 	rsb	r6, r4, #255	; 0xff
    86f4:	f898 3001 	ldrb.w	r3, [r8, #1]
    86f8:	08db      	lsrs	r3, r3, #3
    86fa:	f89e 2001 	ldrb.w	r2, [lr, #1]
    86fe:	08d2      	lsrs	r2, r2, #3
    8700:	fb06 f202 	mul.w	r2, r6, r2
    8704:	fb04 2303 	mla	r3, r4, r3, r2
    8708:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    870c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    8710:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    8714:	f8b8 0000 	ldrh.w	r0, [r8]
    8718:	f3c0 1045 	ubfx	r0, r0, #5, #6
    871c:	f8be 2000 	ldrh.w	r2, [lr]
    8720:	f3c2 1245 	ubfx	r2, r2, #5, #6
    8724:	fb06 f202 	mul.w	r2, r6, r2
    8728:	fb04 2000 	mla	r0, r4, r0, r2
    872c:	eb00 2200 	add.w	r2, r0, r0, lsl #8
    8730:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
    8734:	f3c0 50c5 	ubfx	r0, r0, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    8738:	f898 2000 	ldrb.w	r2, [r8]
    873c:	f002 021f 	and.w	r2, r2, #31
    8740:	f89e 7000 	ldrb.w	r7, [lr]
    8744:	f007 091f 	and.w	r9, r7, #31
    8748:	fb06 f609 	mul.w	r6, r6, r9
    874c:	fb04 6202 	mla	r2, r4, r2, r6
    8750:	eb02 2402 	add.w	r4, r2, r2, lsl #8
    8754:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
    8758:	0dd2      	lsrs	r2, r2, #23
    875a:	463c      	mov	r4, r7
    875c:	f362 0404 	bfi	r4, r2, #0, #5
    8760:	f88e 4000 	strb.w	r4, [lr]
    8764:	f8be 2000 	ldrh.w	r2, [lr]
    8768:	f360 124a 	bfi	r2, r0, #5, #6
    876c:	f8ae 2000 	strh.w	r2, [lr]
    8770:	0a12      	lsrs	r2, r2, #8
    8772:	f363 02c7 	bfi	r2, r3, #3, #5
    8776:	f88e 2001 	strb.w	r2, [lr, #1]
    877a:	e7a6      	b.n	86ca <_lv_blend_map+0x456>
    877c:	00012649 	.word	0x00012649
                            disp_buf_first[x] = map_buf_first[x];
    8780:	f834 5c06 	ldrh.w	r5, [r4, #-6]
    8784:	f820 5c06 	strh.w	r5, [r0, #-6]
                            disp_buf_first[x + 1] = map_buf_first[x + 1];
    8788:	f834 5c04 	ldrh.w	r5, [r4, #-4]
    878c:	f820 5c04 	strh.w	r5, [r0, #-4]
                            disp_buf_first[x + 2] = map_buf_first[x + 2];
    8790:	f834 5c02 	ldrh.w	r5, [r4, #-2]
    8794:	f820 5c02 	strh.w	r5, [r0, #-2]
                            disp_buf_first[x + 3] = map_buf_first[x + 3];
    8798:	8825      	ldrh	r5, [r4, #0]
    879a:	8005      	strh	r5, [r0, #0]
                for(; x < x_end4; x += 4) {
    879c:	3104      	adds	r1, #4
    879e:	3304      	adds	r3, #4
    87a0:	3408      	adds	r4, #8
    87a2:	3008      	adds	r0, #8
    87a4:	458e      	cmp	lr, r1
    87a6:	f340 8147 	ble.w	8a38 <_lv_blend_map+0x7c4>
    87aa:	461a      	mov	r2, r3
                    if(*mask32) {
    87ac:	f853 5c04 	ldr.w	r5, [r3, #-4]
    87b0:	2d00      	cmp	r5, #0
    87b2:	d0f3      	beq.n	879c <_lv_blend_map+0x528>
                        if((*mask32) == 0xFFFFFFFF) {
    87b4:	f1b5 3fff 	cmp.w	r5, #4294967295
    87b8:	d0e2      	beq.n	8780 <_lv_blend_map+0x50c>
                            MAP_NORMAL_MASK_PX(x)
    87ba:	f813 cc04 	ldrb.w	ip, [r3, #-4]
    87be:	f1bc 0f00 	cmp.w	ip, #0
    87c2:	d047      	beq.n	8854 <_lv_blend_map+0x5e0>
    87c4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    87c8:	f000 8124 	beq.w	8a14 <_lv_blend_map+0x7a0>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    87cc:	f1cc 09ff 	rsb	r9, ip, #255	; 0xff
    87d0:	f814 5c05 	ldrb.w	r5, [r4, #-5]
    87d4:	08ed      	lsrs	r5, r5, #3
    87d6:	f810 6c05 	ldrb.w	r6, [r0, #-5]
    87da:	08f6      	lsrs	r6, r6, #3
    87dc:	fb09 f606 	mul.w	r6, r9, r6
    87e0:	fb0c 6505 	mla	r5, ip, r5, r6
    87e4:	eb05 2605 	add.w	r6, r5, r5, lsl #8
    87e8:	eb05 15c6 	add.w	r5, r5, r6, lsl #7
    87ec:	f3c5 55c4 	ubfx	r5, r5, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    87f0:	f834 6c06 	ldrh.w	r6, [r4, #-6]
    87f4:	f3c6 1645 	ubfx	r6, r6, #5, #6
    87f8:	f830 7c06 	ldrh.w	r7, [r0, #-6]
    87fc:	f3c7 1745 	ubfx	r7, r7, #5, #6
    8800:	fb09 f707 	mul.w	r7, r9, r7
    8804:	fb0c 7606 	mla	r6, ip, r6, r7
    8808:	eb06 2706 	add.w	r7, r6, r6, lsl #8
    880c:	eb06 16c7 	add.w	r6, r6, r7, lsl #7
    8810:	f3c6 56c5 	ubfx	r6, r6, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    8814:	f814 7c06 	ldrb.w	r7, [r4, #-6]
    8818:	f007 071f 	and.w	r7, r7, #31
    881c:	f810 8c06 	ldrb.w	r8, [r0, #-6]
    8820:	f008 0b1f 	and.w	fp, r8, #31
    8824:	fb09 f90b 	mul.w	r9, r9, fp
    8828:	fb0c 9707 	mla	r7, ip, r7, r9
    882c:	eb07 2c07 	add.w	ip, r7, r7, lsl #8
    8830:	eb07 17cc 	add.w	r7, r7, ip, lsl #7
    8834:	0dff      	lsrs	r7, r7, #23
    8836:	f367 0804 	bfi	r8, r7, #0, #5
    883a:	f800 8c06 	strb.w	r8, [r0, #-6]
    883e:	f830 7c06 	ldrh.w	r7, [r0, #-6]
    8842:	f366 174a 	bfi	r7, r6, #5, #6
    8846:	f820 7c06 	strh.w	r7, [r0, #-6]
    884a:	0a3f      	lsrs	r7, r7, #8
    884c:	f365 07c7 	bfi	r7, r5, #3, #5
    8850:	f800 7c05 	strb.w	r7, [r0, #-5]
                            MAP_NORMAL_MASK_PX(x + 1)
    8854:	f812 cc03 	ldrb.w	ip, [r2, #-3]
    8858:	f1bc 0f00 	cmp.w	ip, #0
    885c:	d047      	beq.n	88ee <_lv_blend_map+0x67a>
    885e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    8862:	f000 80dc 	beq.w	8a1e <_lv_blend_map+0x7aa>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    8866:	f1cc 09ff 	rsb	r9, ip, #255	; 0xff
    886a:	f814 5c03 	ldrb.w	r5, [r4, #-3]
    886e:	08ed      	lsrs	r5, r5, #3
    8870:	f810 6c03 	ldrb.w	r6, [r0, #-3]
    8874:	08f6      	lsrs	r6, r6, #3
    8876:	fb09 f606 	mul.w	r6, r9, r6
    887a:	fb0c 6505 	mla	r5, ip, r5, r6
    887e:	eb05 2605 	add.w	r6, r5, r5, lsl #8
    8882:	eb05 15c6 	add.w	r5, r5, r6, lsl #7
    8886:	f3c5 55c4 	ubfx	r5, r5, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    888a:	f834 6c04 	ldrh.w	r6, [r4, #-4]
    888e:	f3c6 1645 	ubfx	r6, r6, #5, #6
    8892:	f830 7c04 	ldrh.w	r7, [r0, #-4]
    8896:	f3c7 1745 	ubfx	r7, r7, #5, #6
    889a:	fb09 f707 	mul.w	r7, r9, r7
    889e:	fb0c 7606 	mla	r6, ip, r6, r7
    88a2:	eb06 2706 	add.w	r7, r6, r6, lsl #8
    88a6:	eb06 16c7 	add.w	r6, r6, r7, lsl #7
    88aa:	f3c6 56c5 	ubfx	r6, r6, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    88ae:	f814 7c04 	ldrb.w	r7, [r4, #-4]
    88b2:	f007 071f 	and.w	r7, r7, #31
    88b6:	f810 8c04 	ldrb.w	r8, [r0, #-4]
    88ba:	f008 0b1f 	and.w	fp, r8, #31
    88be:	fb09 f90b 	mul.w	r9, r9, fp
    88c2:	fb0c 9707 	mla	r7, ip, r7, r9
    88c6:	eb07 2c07 	add.w	ip, r7, r7, lsl #8
    88ca:	eb07 17cc 	add.w	r7, r7, ip, lsl #7
    88ce:	0dff      	lsrs	r7, r7, #23
    88d0:	f367 0804 	bfi	r8, r7, #0, #5
    88d4:	f800 8c04 	strb.w	r8, [r0, #-4]
    88d8:	f830 7c04 	ldrh.w	r7, [r0, #-4]
    88dc:	f366 174a 	bfi	r7, r6, #5, #6
    88e0:	f820 7c04 	strh.w	r7, [r0, #-4]
    88e4:	0a3f      	lsrs	r7, r7, #8
    88e6:	f365 07c7 	bfi	r7, r5, #3, #5
    88ea:	f800 7c03 	strb.w	r7, [r0, #-3]
                            MAP_NORMAL_MASK_PX(x + 2)
    88ee:	f812 cc02 	ldrb.w	ip, [r2, #-2]
    88f2:	f1bc 0f00 	cmp.w	ip, #0
    88f6:	d047      	beq.n	8988 <_lv_blend_map+0x714>
    88f8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    88fc:	f000 8094 	beq.w	8a28 <_lv_blend_map+0x7b4>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    8900:	f1cc 09ff 	rsb	r9, ip, #255	; 0xff
    8904:	f814 5c01 	ldrb.w	r5, [r4, #-1]
    8908:	08ed      	lsrs	r5, r5, #3
    890a:	f810 6c01 	ldrb.w	r6, [r0, #-1]
    890e:	08f6      	lsrs	r6, r6, #3
    8910:	fb09 f606 	mul.w	r6, r9, r6
    8914:	fb0c 6505 	mla	r5, ip, r5, r6
    8918:	eb05 2605 	add.w	r6, r5, r5, lsl #8
    891c:	eb05 15c6 	add.w	r5, r5, r6, lsl #7
    8920:	f3c5 55c4 	ubfx	r5, r5, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    8924:	f834 6c02 	ldrh.w	r6, [r4, #-2]
    8928:	f3c6 1645 	ubfx	r6, r6, #5, #6
    892c:	f830 7c02 	ldrh.w	r7, [r0, #-2]
    8930:	f3c7 1745 	ubfx	r7, r7, #5, #6
    8934:	fb09 f707 	mul.w	r7, r9, r7
    8938:	fb0c 7606 	mla	r6, ip, r6, r7
    893c:	eb06 2706 	add.w	r7, r6, r6, lsl #8
    8940:	eb06 16c7 	add.w	r6, r6, r7, lsl #7
    8944:	f3c6 56c5 	ubfx	r6, r6, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    8948:	f814 7c02 	ldrb.w	r7, [r4, #-2]
    894c:	f007 071f 	and.w	r7, r7, #31
    8950:	f810 8c02 	ldrb.w	r8, [r0, #-2]
    8954:	f008 0b1f 	and.w	fp, r8, #31
    8958:	fb09 f90b 	mul.w	r9, r9, fp
    895c:	fb0c 9707 	mla	r7, ip, r7, r9
    8960:	eb07 2c07 	add.w	ip, r7, r7, lsl #8
    8964:	eb07 17cc 	add.w	r7, r7, ip, lsl #7
    8968:	0dff      	lsrs	r7, r7, #23
    896a:	f367 0804 	bfi	r8, r7, #0, #5
    896e:	f800 8c02 	strb.w	r8, [r0, #-2]
    8972:	f830 7c02 	ldrh.w	r7, [r0, #-2]
    8976:	f366 174a 	bfi	r7, r6, #5, #6
    897a:	f820 7c02 	strh.w	r7, [r0, #-2]
    897e:	0a3f      	lsrs	r7, r7, #8
    8980:	f365 07c7 	bfi	r7, r5, #3, #5
    8984:	f800 7c01 	strb.w	r7, [r0, #-1]
                            MAP_NORMAL_MASK_PX(x + 3)
    8988:	f812 8c01 	ldrb.w	r8, [r2, #-1]
    898c:	f1b8 0f00 	cmp.w	r8, #0
    8990:	f43f af04 	beq.w	879c <_lv_blend_map+0x528>
    8994:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    8998:	d04b      	beq.n	8a32 <_lv_blend_map+0x7be>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    899a:	f1c8 09ff 	rsb	r9, r8, #255	; 0xff
    899e:	7865      	ldrb	r5, [r4, #1]
    89a0:	08ed      	lsrs	r5, r5, #3
    89a2:	7846      	ldrb	r6, [r0, #1]
    89a4:	08f6      	lsrs	r6, r6, #3
    89a6:	fb09 f606 	mul.w	r6, r9, r6
    89aa:	fb08 6505 	mla	r5, r8, r5, r6
    89ae:	eb05 2605 	add.w	r6, r5, r5, lsl #8
    89b2:	eb05 15c6 	add.w	r5, r5, r6, lsl #7
    89b6:	f3c5 55c4 	ubfx	r5, r5, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    89ba:	8826      	ldrh	r6, [r4, #0]
    89bc:	f3c6 1645 	ubfx	r6, r6, #5, #6
    89c0:	8807      	ldrh	r7, [r0, #0]
    89c2:	f3c7 1745 	ubfx	r7, r7, #5, #6
    89c6:	fb09 f707 	mul.w	r7, r9, r7
    89ca:	fb08 7606 	mla	r6, r8, r6, r7
    89ce:	eb06 2706 	add.w	r7, r6, r6, lsl #8
    89d2:	eb06 16c7 	add.w	r6, r6, r7, lsl #7
    89d6:	f3c6 56c5 	ubfx	r6, r6, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    89da:	7827      	ldrb	r7, [r4, #0]
    89dc:	f007 071f 	and.w	r7, r7, #31
    89e0:	f890 c000 	ldrb.w	ip, [r0]
    89e4:	f00c 0a1f 	and.w	sl, ip, #31
    89e8:	fb09 f90a 	mul.w	r9, r9, sl
    89ec:	fb08 9707 	mla	r7, r8, r7, r9
    89f0:	eb07 2807 	add.w	r8, r7, r7, lsl #8
    89f4:	eb07 17c8 	add.w	r7, r7, r8, lsl #7
    89f8:	0dff      	lsrs	r7, r7, #23
    89fa:	f367 0c04 	bfi	ip, r7, #0, #5
    89fe:	f880 c000 	strb.w	ip, [r0]
    8a02:	8807      	ldrh	r7, [r0, #0]
    8a04:	f366 174a 	bfi	r7, r6, #5, #6
    8a08:	8007      	strh	r7, [r0, #0]
    8a0a:	0a3f      	lsrs	r7, r7, #8
    8a0c:	f365 07c7 	bfi	r7, r5, #3, #5
    8a10:	7047      	strb	r7, [r0, #1]
    8a12:	e6c3      	b.n	879c <_lv_blend_map+0x528>
                            MAP_NORMAL_MASK_PX(x)
    8a14:	f834 5c06 	ldrh.w	r5, [r4, #-6]
    8a18:	f820 5c06 	strh.w	r5, [r0, #-6]
    8a1c:	e71a      	b.n	8854 <_lv_blend_map+0x5e0>
                            MAP_NORMAL_MASK_PX(x + 1)
    8a1e:	f834 5c04 	ldrh.w	r5, [r4, #-4]
    8a22:	f820 5c04 	strh.w	r5, [r0, #-4]
    8a26:	e762      	b.n	88ee <_lv_blend_map+0x67a>
                            MAP_NORMAL_MASK_PX(x + 2)
    8a28:	f834 5c02 	ldrh.w	r5, [r4, #-2]
    8a2c:	f820 5c02 	strh.w	r5, [r0, #-2]
    8a30:	e7aa      	b.n	8988 <_lv_blend_map+0x714>
                            MAP_NORMAL_MASK_PX(x + 3)
    8a32:	8825      	ldrh	r5, [r4, #0]
    8a34:	8005      	strh	r5, [r0, #0]
    8a36:	e6b1      	b.n	879c <_lv_blend_map+0x528>
    8a38:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
                for(; x < draw_area_w ; x++) {
    8a3a:	428d      	cmp	r5, r1
    8a3c:	f340 8194 	ble.w	8d68 <_lv_blend_map+0xaf4>
    8a40:	1e56      	subs	r6, r2, #1
    8a42:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8a46:	9b06      	ldr	r3, [sp, #24]
    8a48:	eb03 080c 	add.w	r8, r3, ip
    8a4c:	9b05      	ldr	r3, [sp, #20]
    8a4e:	449c      	add	ip, r3
    8a50:	e00b      	b.n	8a6a <_lv_blend_map+0x7f6>
                    MAP_NORMAL_MASK_PX(x)
    8a52:	f8b8 3000 	ldrh.w	r3, [r8]
    8a56:	f8ac 3000 	strh.w	r3, [ip]
                for(; x < draw_area_w ; x++) {
    8a5a:	3101      	adds	r1, #1
    8a5c:	f108 0802 	add.w	r8, r8, #2
    8a60:	f10c 0c02 	add.w	ip, ip, #2
    8a64:	428d      	cmp	r5, r1
    8a66:	f340 817f 	ble.w	8d68 <_lv_blend_map+0xaf4>
                    MAP_NORMAL_MASK_PX(x)
    8a6a:	f816 4f01 	ldrb.w	r4, [r6, #1]!
    8a6e:	2c00      	cmp	r4, #0
    8a70:	d0f3      	beq.n	8a5a <_lv_blend_map+0x7e6>
    8a72:	2cff      	cmp	r4, #255	; 0xff
    8a74:	d0ed      	beq.n	8a52 <_lv_blend_map+0x7de>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    8a76:	f1c4 07ff 	rsb	r7, r4, #255	; 0xff
    8a7a:	f898 3001 	ldrb.w	r3, [r8, #1]
    8a7e:	08db      	lsrs	r3, r3, #3
    8a80:	f89c 2001 	ldrb.w	r2, [ip, #1]
    8a84:	08d2      	lsrs	r2, r2, #3
    8a86:	fb07 f202 	mul.w	r2, r7, r2
    8a8a:	fb04 2303 	mla	r3, r4, r3, r2
    8a8e:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    8a92:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    8a96:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    8a9a:	f8b8 0000 	ldrh.w	r0, [r8]
    8a9e:	f3c0 1045 	ubfx	r0, r0, #5, #6
    8aa2:	f8bc 2000 	ldrh.w	r2, [ip]
    8aa6:	f3c2 1245 	ubfx	r2, r2, #5, #6
    8aaa:	fb07 f202 	mul.w	r2, r7, r2
    8aae:	fb04 2000 	mla	r0, r4, r0, r2
    8ab2:	eb00 2200 	add.w	r2, r0, r0, lsl #8
    8ab6:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
    8aba:	f3c0 50c5 	ubfx	r0, r0, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    8abe:	f898 2000 	ldrb.w	r2, [r8]
    8ac2:	f002 021f 	and.w	r2, r2, #31
    8ac6:	f89c e000 	ldrb.w	lr, [ip]
    8aca:	f00e 091f 	and.w	r9, lr, #31
    8ace:	fb07 f709 	mul.w	r7, r7, r9
    8ad2:	fb04 7202 	mla	r2, r4, r2, r7
    8ad6:	eb02 2402 	add.w	r4, r2, r2, lsl #8
    8ada:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
    8ade:	0dd2      	lsrs	r2, r2, #23
    8ae0:	4674      	mov	r4, lr
    8ae2:	f362 0404 	bfi	r4, r2, #0, #5
    8ae6:	f88c 4000 	strb.w	r4, [ip]
    8aea:	f8bc 2000 	ldrh.w	r2, [ip]
    8aee:	f360 124a 	bfi	r2, r0, #5, #6
    8af2:	f8ac 2000 	strh.w	r2, [ip]
    8af6:	0a12      	lsrs	r2, r2, #8
    8af8:	f363 02c7 	bfi	r2, r3, #3, #5
    8afc:	f88c 2001 	strb.w	r2, [ip, #1]
    8b00:	e7ab      	b.n	8a5a <_lv_blend_map+0x7e6>
    8b02:	3702      	adds	r7, #2
    8b04:	3602      	adds	r6, #2
                for(x = 0; x < draw_area_w; x++) {
    8b06:	4547      	cmp	r7, r8
    8b08:	d045      	beq.n	8b96 <_lv_blend_map+0x922>
                    if(mask[x]) {
    8b0a:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
    8b0e:	2900      	cmp	r1, #0
    8b10:	d0f7      	beq.n	8b02 <_lv_blend_map+0x88e>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
    8b12:	29f9      	cmp	r1, #249	; 0xf9
    8b14:	bf9a      	itte	ls
    8b16:	fb01 f10a 	mulls.w	r1, r1, sl
    8b1a:	f3c1 2407 	ubfxls	r4, r1, #8, #8
    8b1e:	9c07      	ldrhi	r4, [sp, #28]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    8b20:	f1c4 05ff 	rsb	r5, r4, #255	; 0xff
    8b24:	787b      	ldrb	r3, [r7, #1]
    8b26:	08db      	lsrs	r3, r3, #3
    8b28:	7872      	ldrb	r2, [r6, #1]
    8b2a:	08d2      	lsrs	r2, r2, #3
    8b2c:	fb05 f202 	mul.w	r2, r5, r2
    8b30:	fb04 2303 	mla	r3, r4, r3, r2
    8b34:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    8b38:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    8b3c:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    8b40:	883a      	ldrh	r2, [r7, #0]
    8b42:	f3c2 1245 	ubfx	r2, r2, #5, #6
    8b46:	8831      	ldrh	r1, [r6, #0]
    8b48:	f3c1 1145 	ubfx	r1, r1, #5, #6
    8b4c:	fb05 f101 	mul.w	r1, r5, r1
    8b50:	fb04 1202 	mla	r2, r4, r2, r1
    8b54:	eb02 2102 	add.w	r1, r2, r2, lsl #8
    8b58:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
    8b5c:	f3c2 52c5 	ubfx	r2, r2, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    8b60:	7839      	ldrb	r1, [r7, #0]
    8b62:	f001 011f 	and.w	r1, r1, #31
    8b66:	7830      	ldrb	r0, [r6, #0]
    8b68:	f000 0e1f 	and.w	lr, r0, #31
    8b6c:	fb05 f50e 	mul.w	r5, r5, lr
    8b70:	fb04 5101 	mla	r1, r4, r1, r5
    8b74:	eb01 2401 	add.w	r4, r1, r1, lsl #8
    8b78:	eb01 11c4 	add.w	r1, r1, r4, lsl #7
    8b7c:	0dc9      	lsrs	r1, r1, #23
                            disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa_tmp);
    8b7e:	f361 0004 	bfi	r0, r1, #0, #5
    8b82:	7030      	strb	r0, [r6, #0]
    8b84:	8831      	ldrh	r1, [r6, #0]
    8b86:	f362 114a 	bfi	r1, r2, #5, #6
    8b8a:	8031      	strh	r1, [r6, #0]
    8b8c:	0a09      	lsrs	r1, r1, #8
    8b8e:	f363 01c7 	bfi	r1, r3, #3, #5
    8b92:	7071      	strb	r1, [r6, #1]
    8b94:	e7b5      	b.n	8b02 <_lv_blend_map+0x88e>
                disp_buf_first += disp_w;
    8b96:	9b05      	ldr	r3, [sp, #20]
    8b98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8b9a:	4413      	add	r3, r2
    8b9c:	9305      	str	r3, [sp, #20]
                map_buf_first += map_w;
    8b9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8ba0:	4499      	add	r9, r3
            for(y = 0; y < draw_area_h; y++) {
    8ba2:	f10b 0b01 	add.w	fp, fp, #1
    8ba6:	9b04      	ldr	r3, [sp, #16]
    8ba8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8baa:	4413      	add	r3, r2
    8bac:	9304      	str	r3, [sp, #16]
    8bae:	9b08      	ldr	r3, [sp, #32]
    8bb0:	455b      	cmp	r3, fp
    8bb2:	f43f ab6c 	beq.w	828e <_lv_blend_map+0x1a>
                for(x = 0; x < draw_area_w; x++) {
    8bb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8bb8:	2b00      	cmp	r3, #0
    8bba:	ddec      	ble.n	8b96 <_lv_blend_map+0x922>
    8bbc:	464f      	mov	r7, r9
    8bbe:	9e05      	ldr	r6, [sp, #20]
    8bc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8bc2:	eb09 0803 	add.w	r8, r9, r3
    8bc6:	f8dd c010 	ldr.w	ip, [sp, #16]
    8bca:	e79e      	b.n	8b0a <_lv_blend_map+0x896>
    switch(mode) {
    8bcc:	2d01      	cmp	r5, #1
    8bce:	d049      	beq.n	8c64 <_lv_blend_map+0x9f0>
    8bd0:	2d02      	cmp	r5, #2
    8bd2:	d13c      	bne.n	8c4e <_lv_blend_map+0x9da>
            blend_fp = color_blend_true_color_subtractive;
    8bd4:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8db8 <_lv_blend_map+0xb44>
    8bd8:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
    8bdc:	9309      	str	r3, [sp, #36]	; 0x24
    8bde:	8ab0      	ldrh	r0, [r6, #20]
    8be0:	3001      	adds	r0, #1
    8be2:	1ac0      	subs	r0, r0, r3
    8be4:	b200      	sxth	r0, r0
    8be6:	f9b7 2000 	ldrsh.w	r2, [r7]
    8bea:	88bb      	ldrh	r3, [r7, #4]
    8bec:	3301      	adds	r3, #1
    8bee:	1a9b      	subs	r3, r3, r2
    8bf0:	b21d      	sxth	r5, r3
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
    8bf2:	46f1      	mov	r9, lr
    8bf4:	fb0e fb00 	mul.w	fp, lr, r0
    8bf8:	9b05      	ldr	r3, [sp, #20]
    8bfa:	eb03 0b4b 	add.w	fp, r3, fp, lsl #1
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
    8bfe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    8c02:	f9b6 6012 	ldrsh.w	r6, [r6, #18]
    8c06:	1b9f      	subs	r7, r3, r6
    8c08:	ebae 0707 	sub.w	r7, lr, r7
    8c0c:	fb05 f707 	mul.w	r7, r5, r7
    8c10:	9b07      	ldr	r3, [sp, #28]
    8c12:	eb03 0747 	add.w	r7, r3, r7, lsl #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
    8c16:	2c01      	cmp	r4, #1
    8c18:	d027      	beq.n	8c6a <_lv_blend_map+0x9f6>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
    8c1a:	9b04      	ldr	r3, [sp, #16]
    8c1c:	eba3 030c 	sub.w	r3, r3, ip
    8c20:	461a      	mov	r2, r3
        map_buf_tmp -= draw_area->x1;
    8c22:	eba7 034c 	sub.w	r3, r7, ip, lsl #1
    8c26:	9304      	str	r3, [sp, #16]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    8c28:	9b08      	ldr	r3, [sp, #32]
    8c2a:	459e      	cmp	lr, r3
    8c2c:	f73f ab2f 	bgt.w	828e <_lv_blend_map+0x1a>
            disp_buf_tmp += disp_w;
    8c30:	0043      	lsls	r3, r0, #1
    8c32:	9307      	str	r3, [sp, #28]
            map_buf_tmp += map_w;
    8c34:	006b      	lsls	r3, r5, #1
    8c36:	9308      	str	r3, [sp, #32]
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
    8c38:	f8cd a014 	str.w	sl, [sp, #20]
    8c3c:	1c4b      	adds	r3, r1, #1
    8c3e:	9906      	ldr	r1, [sp, #24]
    8c40:	1a5b      	subs	r3, r3, r1
            mask_tmp += draw_area_w;
    8c42:	b21b      	sxth	r3, r3
    8c44:	9309      	str	r3, [sp, #36]	; 0x24
    8c46:	f8cd a018 	str.w	sl, [sp, #24]
    8c4a:	4692      	mov	sl, r2
    8c4c:	e066      	b.n	8d1c <_lv_blend_map+0xaa8>
            LV_LOG_WARN("fill_blended: unsupported blend mode");
    8c4e:	4b56      	ldr	r3, [pc, #344]	; (8da8 <_lv_blend_map+0xb34>)
    8c50:	9300      	str	r3, [sp, #0]
    8c52:	4b56      	ldr	r3, [pc, #344]	; (8dac <_lv_blend_map+0xb38>)
    8c54:	f240 3253 	movw	r2, #851	; 0x353
    8c58:	4955      	ldr	r1, [pc, #340]	; (8db0 <_lv_blend_map+0xb3c>)
    8c5a:	2002      	movs	r0, #2
    8c5c:	4c55      	ldr	r4, [pc, #340]	; (8db4 <_lv_blend_map+0xb40>)
    8c5e:	47a0      	blx	r4
    8c60:	f7ff bb15 	b.w	828e <_lv_blend_map+0x1a>
            blend_fp = color_blend_true_color_additive;
    8c64:	f8df 8154 	ldr.w	r8, [pc, #340]	; 8dbc <_lv_blend_map+0xb48>
    8c68:	e7b6      	b.n	8bd8 <_lv_blend_map+0x964>
        map_buf_tmp -= draw_area->x1;
    8c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8c6c:	1a9b      	subs	r3, r3, r2
    8c6e:	eb07 0743 	add.w	r7, r7, r3, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    8c72:	9b08      	ldr	r3, [sp, #32]
    8c74:	459e      	cmp	lr, r3
    8c76:	f73f ab0a 	bgt.w	828e <_lv_blend_map+0x1a>
            disp_buf_tmp += disp_w;
    8c7a:	0043      	lsls	r3, r0, #1
    8c7c:	9304      	str	r3, [sp, #16]
            map_buf_tmp += map_w;
    8c7e:	006b      	lsls	r3, r5, #1
    8c80:	9305      	str	r3, [sp, #20]
    8c82:	463b      	mov	r3, r7
    8c84:	4647      	mov	r7, r8
    8c86:	4698      	mov	r8, r3
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    8c88:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
    8c8c:	461c      	mov	r4, r3
    8c8e:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
    8c92:	4293      	cmp	r3, r2
    8c94:	dc10      	bgt.n	8cb8 <_lv_blend_map+0xa44>
    8c96:	005b      	lsls	r3, r3, #1
    8c98:	eb0b 0503 	add.w	r5, fp, r3
    8c9c:	eb08 0603 	add.w	r6, r8, r3
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa);
    8ca0:	4652      	mov	r2, sl
    8ca2:	8829      	ldrh	r1, [r5, #0]
    8ca4:	f836 0b02 	ldrh.w	r0, [r6], #2
    8ca8:	47b8      	blx	r7
    8caa:	f825 0b02 	strh.w	r0, [r5], #2
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    8cae:	3401      	adds	r4, #1
    8cb0:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
    8cb4:	429c      	cmp	r4, r3
    8cb6:	ddf3      	ble.n	8ca0 <_lv_blend_map+0xa2c>
            disp_buf_tmp += disp_w;
    8cb8:	9b04      	ldr	r3, [sp, #16]
    8cba:	449b      	add	fp, r3
            map_buf_tmp += map_w;
    8cbc:	9b05      	ldr	r3, [sp, #20]
    8cbe:	4498      	add	r8, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    8cc0:	f109 0901 	add.w	r9, r9, #1
    8cc4:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    8cc8:	4599      	cmp	r9, r3
    8cca:	dddd      	ble.n	8c88 <_lv_blend_map+0xa14>
    8ccc:	f7ff badf 	b.w	828e <_lv_blend_map+0x1a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    8cd0:	3501      	adds	r5, #1
    8cd2:	3602      	adds	r6, #2
    8cd4:	3402      	adds	r4, #2
    8cd6:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
    8cda:	429d      	cmp	r5, r3
    8cdc:	dc0f      	bgt.n	8cfe <_lv_blend_map+0xa8a>
                if(mask_tmp[x] == 0) continue;
    8cde:	f817 3b01 	ldrb.w	r3, [r7], #1
    8ce2:	2b00      	cmp	r3, #0
    8ce4:	d0f4      	beq.n	8cd0 <_lv_blend_map+0xa5c>
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
    8ce6:	2bf9      	cmp	r3, #249	; 0xf9
    8ce8:	bf9d      	ittte	ls
    8cea:	9a06      	ldrls	r2, [sp, #24]
    8cec:	4353      	mulls	r3, r2
    8cee:	f3c3 2207 	ubfxls	r2, r3, #8, #8
    8cf2:	9a05      	ldrhi	r2, [sp, #20]
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa_tmp);
    8cf4:	8831      	ldrh	r1, [r6, #0]
    8cf6:	8820      	ldrh	r0, [r4, #0]
    8cf8:	47c0      	blx	r8
    8cfa:	8030      	strh	r0, [r6, #0]
    8cfc:	e7e8      	b.n	8cd0 <_lv_blend_map+0xa5c>
            disp_buf_tmp += disp_w;
    8cfe:	9b07      	ldr	r3, [sp, #28]
    8d00:	449b      	add	fp, r3
    8d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8d04:	449a      	add	sl, r3
            map_buf_tmp += map_w;
    8d06:	9b04      	ldr	r3, [sp, #16]
    8d08:	9a08      	ldr	r2, [sp, #32]
    8d0a:	4413      	add	r3, r2
    8d0c:	9304      	str	r3, [sp, #16]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    8d0e:	f109 0901 	add.w	r9, r9, #1
    8d12:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    8d16:	4599      	cmp	r9, r3
    8d18:	f73f aab9 	bgt.w	828e <_lv_blend_map+0x1a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    8d1c:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
    8d20:	461d      	mov	r5, r3
    8d22:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
    8d26:	4293      	cmp	r3, r2
    8d28:	dce9      	bgt.n	8cfe <_lv_blend_map+0xa8a>
    8d2a:	eb0a 0703 	add.w	r7, sl, r3
    8d2e:	005b      	lsls	r3, r3, #1
    8d30:	eb0b 0603 	add.w	r6, fp, r3
    8d34:	9a04      	ldr	r2, [sp, #16]
    8d36:	18d4      	adds	r4, r2, r3
    8d38:	e7d1      	b.n	8cde <_lv_blend_map+0xa6a>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
    8d3a:	9b04      	ldr	r3, [sp, #16]
    8d3c:	2100      	movs	r1, #0
                for(; x < x_end4; x += 4) {
    8d3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8d40:	428a      	cmp	r2, r1
    8d42:	dd0a      	ble.n	8d5a <_lv_blend_map+0xae6>
    8d44:	3304      	adds	r3, #4
    8d46:	1cc8      	adds	r0, r1, #3
    8d48:	0040      	lsls	r0, r0, #1
    8d4a:	9a06      	ldr	r2, [sp, #24]
    8d4c:	1814      	adds	r4, r2, r0
    8d4e:	9a05      	ldr	r2, [sp, #20]
    8d50:	4410      	add	r0, r2
    8d52:	950b      	str	r5, [sp, #44]	; 0x2c
    8d54:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
    8d58:	e527      	b.n	87aa <_lv_blend_map+0x536>
    8d5a:	461a      	mov	r2, r3
    8d5c:	e670      	b.n	8a40 <_lv_blend_map+0x7cc>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
    8d5e:	9b04      	ldr	r3, [sp, #16]
    8d60:	2100      	movs	r1, #0
                for(; x < x_end4; x += 4) {
    8d62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8d64:	4291      	cmp	r1, r2
    8d66:	dbed      	blt.n	8d44 <_lv_blend_map+0xad0>
                disp_buf_first += disp_w;
    8d68:	9b05      	ldr	r3, [sp, #20]
    8d6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8d6c:	4413      	add	r3, r2
    8d6e:	9305      	str	r3, [sp, #20]
    8d70:	9b04      	ldr	r3, [sp, #16]
    8d72:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8d74:	4413      	add	r3, r2
    8d76:	9304      	str	r3, [sp, #16]
                map_buf_first += map_w;
    8d78:	9b06      	ldr	r3, [sp, #24]
    8d7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8d7c:	4413      	add	r3, r2
    8d7e:	9306      	str	r3, [sp, #24]
            for(y = 0; y < draw_area_h; y++) {
    8d80:	9b07      	ldr	r3, [sp, #28]
    8d82:	3301      	adds	r3, #1
    8d84:	9307      	str	r3, [sp, #28]
    8d86:	9a08      	ldr	r2, [sp, #32]
    8d88:	429a      	cmp	r2, r3
    8d8a:	f43f aa80 	beq.w	828e <_lv_blend_map+0x1a>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
    8d8e:	2d00      	cmp	r5, #0
    8d90:	dde5      	ble.n	8d5e <_lv_blend_map+0xaea>
    8d92:	9a04      	ldr	r2, [sp, #16]
    8d94:	f012 0f03 	tst.w	r2, #3
    8d98:	d0cf      	beq.n	8d3a <_lv_blend_map+0xac6>
    8d9a:	f8dd 8018 	ldr.w	r8, [sp, #24]
    8d9e:	f8dd e014 	ldr.w	lr, [sp, #20]
    8da2:	4694      	mov	ip, r2
    8da4:	2100      	movs	r1, #0
    8da6:	e49d      	b.n	86e4 <_lv_blend_map+0x470>
    8da8:	00024c84 	.word	0x00024c84
    8dac:	00024c48 	.word	0x00024c48
    8db0:	00024c54 	.word	0x00024c54
    8db4:	00012251 	.word	0x00012251
    8db8:	00007693 	.word	0x00007693
    8dbc:	000075dd 	.word	0x000075dd

00008dc0 <lv_draw_map>:
 * @param antialias anti-alias transformations (rotate, zoom) or not
 */
LV_ATTRIBUTE_FAST_MEM static void lv_draw_map(const lv_area_t * map_area, const lv_area_t * clip_area,
                                              const uint8_t * map_p,
                                              lv_draw_img_dsc_t * draw_dsc, bool chroma_key, bool alpha_byte)
{
    8dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8dc4:	b0bd      	sub	sp, #244	; 0xf4
    8dc6:	901b      	str	r0, [sp, #108]	; 0x6c
    8dc8:	9123      	str	r1, [sp, #140]	; 0x8c
    8dca:	4617      	mov	r7, r2
    8dcc:	9308      	str	r3, [sp, #32]
    8dce:	f89d 3118 	ldrb.w	r3, [sp, #280]	; 0x118
    8dd2:	930a      	str	r3, [sp, #40]	; 0x28
    8dd4:	f89d 311c 	ldrb.w	r3, [sp, #284]	; 0x11c
    8dd8:	9306      	str	r3, [sp, #24]
    8dda:	1e4b      	subs	r3, r1, #1
    8ddc:	1dc8      	adds	r0, r1, #7
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    8dde:	aa3a      	add	r2, sp, #232	; 0xe8
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
    8de0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    8de4:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    8de8:	4283      	cmp	r3, r0
    8dea:	d1f9      	bne.n	8de0 <lv_draw_map+0x20>
    /* Use the clip area as draw area*/
    lv_area_t draw_area;
    lv_area_copy(&draw_area, clip_area);

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    8dec:	4ba3      	ldr	r3, [pc, #652]	; (907c <lv_draw_map+0x2bc>)
    8dee:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    8df0:	4ba3      	ldr	r3, [pc, #652]	; (9080 <lv_draw_map+0x2c0>)
    8df2:	4798      	blx	r3
    8df4:	9018      	str	r0, [sp, #96]	; 0x60
    const lv_area_t * disp_area = &vdb->area;

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
    8df6:	8a01      	ldrh	r1, [r0, #16]
    8df8:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	; 0xe8
    8dfc:	1a5b      	subs	r3, r3, r1
    8dfe:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
    draw_area.y1 -= disp_area->y1;
    8e02:	8a42      	ldrh	r2, [r0, #18]
    8e04:	f8bd 30ea 	ldrh.w	r3, [sp, #234]	; 0xea
    8e08:	1a9b      	subs	r3, r3, r2
    8e0a:	f8ad 30ea 	strh.w	r3, [sp, #234]	; 0xea
    draw_area.x2 -= disp_area->x1;
    8e0e:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
    8e12:	1a5b      	subs	r3, r3, r1
    8e14:	f8ad 30ec 	strh.w	r3, [sp, #236]	; 0xec
    draw_area.y2 -= disp_area->y1;
    8e18:	f8bd 30ee 	ldrh.w	r3, [sp, #238]	; 0xee
    8e1c:	1a9b      	subs	r3, r3, r2
    8e1e:	f8ad 30ee 	strh.w	r3, [sp, #238]	; 0xee

    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
    8e22:	4b98      	ldr	r3, [pc, #608]	; (9084 <lv_draw_map+0x2c4>)
    8e24:	4798      	blx	r3

    /*The simplest case just copy the pixels into the VDB*/
    if(other_mask_cnt == 0 && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE &&
    8e26:	9019      	str	r0, [sp, #100]	; 0x64
    8e28:	b930      	cbnz	r0, 8e38 <lv_draw_map+0x78>
    8e2a:	9a08      	ldr	r2, [sp, #32]
    8e2c:	8853      	ldrh	r3, [r2, #2]
    8e2e:	b91b      	cbnz	r3, 8e38 <lv_draw_map+0x78>
    8e30:	8913      	ldrh	r3, [r2, #8]
    8e32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8e36:	d071      	beq.n	8f1c <lv_draw_map+0x15c>
                      draw_dsc->blend_mode);
    }
    /*In the other cases every pixel need to be checked one-by-one*/
    else {
        /*The pixel size in byte is different if an alpha byte is added too*/
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
    8e38:	9b06      	ldr	r3, [sp, #24]
    8e3a:	2b00      	cmp	r3, #0
    8e3c:	bf14      	ite	ne
    8e3e:	f04f 0b03 	movne.w	fp, #3
    8e42:	f04f 0b02 	moveq.w	fp, #2
    8e46:	991b      	ldr	r1, [sp, #108]	; 0x6c
    8e48:	460b      	mov	r3, r1
    8e4a:	f9b1 2000 	ldrsh.w	r2, [r1]
    8e4e:	888d      	ldrh	r5, [r1, #4]
    8e50:	3501      	adds	r5, #1
    8e52:	1aad      	subs	r5, r5, r2
    8e54:	b22d      	sxth	r5, r5

        /*Go to the first displayed pixel of the map*/
        int32_t map_w = lv_area_get_width(map_area);
        const uint8_t * map_buf_tmp = map_p;
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
    8e56:	f9bd 00ea 	ldrsh.w	r0, [sp, #234]	; 0xea
    8e5a:	9e18      	ldr	r6, [sp, #96]	; 0x60
    8e5c:	f9b6 1012 	ldrsh.w	r1, [r6, #18]
    8e60:	46d8      	mov	r8, fp
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
    8e62:	f9bd 40e8 	ldrsh.w	r4, [sp, #232]	; 0xe8
    8e66:	f9b6 6010 	ldrsh.w	r6, [r6, #16]
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
    8e6a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    8e6e:	1a5b      	subs	r3, r3, r1
    8e70:	1ac3      	subs	r3, r0, r3
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
    8e72:	1b92      	subs	r2, r2, r6
    8e74:	1aa2      	subs	r2, r4, r2
    8e76:	fb05 2303 	mla	r3, r5, r3, r2
    8e7a:	fb03 730b 	mla	r3, r3, fp, r7
    8e7e:	9314      	str	r3, [sp, #80]	; 0x50
        uint32_t px_i = 0;

        const uint8_t * map_px;

        lv_area_t blend_area;
        blend_area.x1 = draw_area.x1 + disp_area->x1;
    8e80:	b2a4      	uxth	r4, r4
    8e82:	19a2      	adds	r2, r4, r6
    8e84:	b292      	uxth	r2, r2
    8e86:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
    8e8a:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
    8e8e:	3301      	adds	r3, #1
    8e90:	1b1b      	subs	r3, r3, r4
    8e92:	b29b      	uxth	r3, r3
    8e94:	b21c      	sxth	r4, r3
    8e96:	9416      	str	r4, [sp, #88]	; 0x58
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
    8e98:	3b01      	subs	r3, #1
    8e9a:	4413      	add	r3, r2
    8e9c:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
        blend_area.y1 = disp_area->y1 + draw_area.y1;
    8ea0:	b280      	uxth	r0, r0
    8ea2:	1843      	adds	r3, r0, r1
    8ea4:	b21b      	sxth	r3, r3
    8ea6:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        blend_area.y2 = blend_area.y1;
    8eaa:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    8eae:	f8bd 60ee 	ldrh.w	r6, [sp, #238]	; 0xee
    8eb2:	3601      	adds	r6, #1
    8eb4:	1a36      	subs	r6, r6, r0
    8eb6:	b236      	sxth	r6, r6

        lv_coord_t draw_area_h = lv_area_get_height(&draw_area);
        lv_coord_t draw_area_w = lv_area_get_width(&draw_area);

#if LV_USE_IMG_TRANSFORM
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
    8eb8:	9908      	ldr	r1, [sp, #32]
    8eba:	884b      	ldrh	r3, [r1, #2]
    8ebc:	2b00      	cmp	r3, #0
    8ebe:	f040 8353 	bne.w	9568 <lv_draw_map+0x7a8>
    8ec2:	890b      	ldrh	r3, [r1, #8]
    8ec4:	f5b3 7280 	subs.w	r2, r3, #256	; 0x100
    8ec8:	bf18      	it	ne
    8eca:	2201      	movne	r2, #1
    8ecc:	9205      	str	r2, [sp, #20]
#else
        bool transform = false;
#endif
        /*Simple ARGB image. Handle it as special case because it's very common*/
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
    8ece:	9a19      	ldr	r2, [sp, #100]	; 0x64
    8ed0:	2a00      	cmp	r2, #0
    8ed2:	f040 8370 	bne.w	95b6 <lv_draw_map+0x7f6>
    8ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8eda:	f040 8349 	bne.w	9570 <lv_draw_map+0x7b0>
    8ede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8ee0:	b923      	cbnz	r3, 8eec <lv_draw_map+0x12c>
    8ee2:	7a8b      	ldrb	r3, [r1, #10]
    8ee4:	b913      	cbnz	r3, 8eec <lv_draw_map+0x12c>
    8ee6:	9b06      	ldr	r3, [sp, #24]
    8ee8:	2b00      	cmp	r3, #0
    8eea:	d131      	bne.n	8f50 <lv_draw_map+0x190>
            _lv_mem_buf_release(map2);
        }
        /*Most complicated case: transform or other mask or chroma keyed*/
        else {
            /*Build the image and a mask line-by-line*/
             uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
    8eec:	a83a      	add	r0, sp, #232	; 0xe8
    8eee:	4b66      	ldr	r3, [pc, #408]	; (9088 <lv_draw_map+0x2c8>)
    8ef0:	4798      	blx	r3
    8ef2:	f5b0 7ff0 	cmp.w	r0, #480	; 0x1e0
    8ef6:	f240 80ac 	bls.w	9052 <lv_draw_map+0x292>
             lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
    8efa:	f44f 7070 	mov.w	r0, #960	; 0x3c0
    8efe:	4c63      	ldr	r4, [pc, #396]	; (908c <lv_draw_map+0x2cc>)
    8f00:	47a0      	blx	r4
    8f02:	901a      	str	r0, [sp, #104]	; 0x68
             lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
    8f04:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
    8f08:	47a0      	blx	r4
    8f0a:	9017      	str	r0, [sp, #92]	; 0x5c

#if LV_USE_IMG_TRANSFORM
            lv_img_transform_dsc_t trans_dsc;
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
    8f0c:	2148      	movs	r1, #72	; 0x48
    8f0e:	a828      	add	r0, sp, #160	; 0xa0
    8f10:	4b5f      	ldr	r3, [pc, #380]	; (9090 <lv_draw_map+0x2d0>)
    8f12:	4798      	blx	r3
             uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
    8f14:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    8f18:	931c      	str	r3, [sp, #112]	; 0x70
    8f1a:	e0e4      	b.n	90e6 <lv_draw_map+0x326>
    if(other_mask_cnt == 0 && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE &&
    8f1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8f1e:	2b00      	cmp	r3, #0
    8f20:	d18a      	bne.n	8e38 <lv_draw_map+0x78>
       chroma_key == false && alpha_byte == false && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
    8f22:	9b06      	ldr	r3, [sp, #24]
    8f24:	b98b      	cbnz	r3, 8f4a <lv_draw_map+0x18a>
    8f26:	7a93      	ldrb	r3, [r2, #10]
    8f28:	b113      	cbz	r3, 8f30 <lv_draw_map+0x170>
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
    8f2a:	f04f 0b02 	mov.w	fp, #2
    8f2e:	e78a      	b.n	8e46 <lv_draw_map+0x86>
        _lv_blend_map(clip_area, map_area, (lv_color_t *)map_p, NULL, LV_DRAW_MASK_RES_FULL_COVER, draw_dsc->opa,
    8f30:	7b93      	ldrb	r3, [r2, #14]
    8f32:	9302      	str	r3, [sp, #8]
    8f34:	7813      	ldrb	r3, [r2, #0]
    8f36:	9301      	str	r3, [sp, #4]
    8f38:	2301      	movs	r3, #1
    8f3a:	9300      	str	r3, [sp, #0]
    8f3c:	2300      	movs	r3, #0
    8f3e:	463a      	mov	r2, r7
    8f40:	991b      	ldr	r1, [sp, #108]	; 0x6c
    8f42:	9823      	ldr	r0, [sp, #140]	; 0x8c
    8f44:	4c53      	ldr	r4, [pc, #332]	; (9094 <lv_draw_map+0x2d4>)
    8f46:	47a0      	blx	r4
    8f48:	e30b      	b.n	9562 <lv_draw_map+0x7a2>
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
    8f4a:	f04f 0b03 	mov.w	fp, #3
    8f4e:	e77a      	b.n	8e46 <lv_draw_map+0x86>
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
    8f50:	a83a      	add	r0, sp, #232	; 0xe8
    8f52:	4b4d      	ldr	r3, [pc, #308]	; (9088 <lv_draw_map+0x2c8>)
    8f54:	4798      	blx	r3
    8f56:	f5b0 7ff0 	cmp.w	r0, #480	; 0x1e0
    8f5a:	d814      	bhi.n	8f86 <lv_draw_map+0x1c6>
    8f5c:	a83a      	add	r0, sp, #232	; 0xe8
    8f5e:	4b4a      	ldr	r3, [pc, #296]	; (9088 <lv_draw_map+0x2c8>)
    8f60:	4798      	blx	r3
    8f62:	4681      	mov	r9, r0
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
    8f64:	ea4f 0049 	mov.w	r0, r9, lsl #1
    8f68:	4c48      	ldr	r4, [pc, #288]	; (908c <lv_draw_map+0x2cc>)
    8f6a:	47a0      	blx	r4
    8f6c:	4682      	mov	sl, r0
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
    8f6e:	4648      	mov	r0, r9
    8f70:	47a0      	blx	r4
    8f72:	4604      	mov	r4, r0
            for(y = 0; y < draw_area_h; y++) {
    8f74:	9605      	str	r6, [sp, #20]
    8f76:	2e00      	cmp	r6, #0
    8f78:	dd4f      	ble.n	901a <lv_draw_map+0x25a>
                map_buf_tmp += map_w * px_size_byte;
    8f7a:	fb08 f805 	mul.w	r8, r8, r5
    8f7e:	2500      	movs	r5, #0
    8f80:	46ac      	mov	ip, r5
    8f82:	9e14      	ldr	r6, [sp, #80]	; 0x50
    8f84:	e025      	b.n	8fd2 <lv_draw_map+0x212>
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
    8f86:	f44f 79f0 	mov.w	r9, #480	; 0x1e0
    8f8a:	e7eb      	b.n	8f64 <lv_draw_map+0x1a4>
    8f8c:	445b      	add	r3, fp
    8f8e:	3702      	adds	r7, #2
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
    8f90:	4596      	cmp	lr, r2
    8f92:	d00a      	beq.n	8faa <lv_draw_map+0x1ea>
                    lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
    8f94:	7899      	ldrb	r1, [r3, #2]
                    mask_buf[px_i] = px_opa;
    8f96:	f802 1b01 	strb.w	r1, [r2], #1
                    if(px_opa) {
    8f9a:	2900      	cmp	r1, #0
    8f9c:	d0f6      	beq.n	8f8c <lv_draw_map+0x1cc>
                        map2[px_i].full =  map_px[0] + (map_px[1] << 8);
    8f9e:	7858      	ldrb	r0, [r3, #1]
    8fa0:	7819      	ldrb	r1, [r3, #0]
    8fa2:	eb01 2100 	add.w	r1, r1, r0, lsl #8
    8fa6:	8039      	strh	r1, [r7, #0]
    8fa8:	e7f0      	b.n	8f8c <lv_draw_map+0x1cc>
                map_buf_tmp += map_w * px_size_byte;
    8faa:	4446      	add	r6, r8
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    8fac:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
    8fb0:	3301      	adds	r3, #1
    8fb2:	f8bd 20e8 	ldrh.w	r2, [sp, #232]	; 0xe8
    8fb6:	1a9b      	subs	r3, r3, r2
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
    8fb8:	fa0c f383 	sxtah	r3, ip, r3
    8fbc:	4599      	cmp	r9, r3
    8fbe:	d914      	bls.n	8fea <lv_draw_map+0x22a>
                    blend_area.y2 ++;
    8fc0:	f8bd 309e 	ldrh.w	r3, [sp, #158]	; 0x9e
    8fc4:	3301      	adds	r3, #1
    8fc6:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            for(y = 0; y < draw_area_h; y++) {
    8fca:	3501      	adds	r5, #1
    8fcc:	9b05      	ldr	r3, [sp, #20]
    8fce:	429d      	cmp	r5, r3
    8fd0:	d023      	beq.n	901a <lv_draw_map+0x25a>
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
    8fd2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8fd4:	2b00      	cmp	r3, #0
    8fd6:	dde8      	ble.n	8faa <lv_draw_map+0x1ea>
    8fd8:	eb04 020c 	add.w	r2, r4, ip
    8fdc:	eb0a 074c 	add.w	r7, sl, ip, lsl #1
    8fe0:	449c      	add	ip, r3
    8fe2:	eb04 0e0c 	add.w	lr, r4, ip
    8fe6:	4633      	mov	r3, r6
    8fe8:	e7d4      	b.n	8f94 <lv_draw_map+0x1d4>
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
    8fea:	9a08      	ldr	r2, [sp, #32]
    8fec:	7b93      	ldrb	r3, [r2, #14]
    8fee:	9302      	str	r3, [sp, #8]
    8ff0:	7813      	ldrb	r3, [r2, #0]
    8ff2:	9301      	str	r3, [sp, #4]
    8ff4:	2302      	movs	r3, #2
    8ff6:	9300      	str	r3, [sp, #0]
    8ff8:	4623      	mov	r3, r4
    8ffa:	4652      	mov	r2, sl
    8ffc:	a926      	add	r1, sp, #152	; 0x98
    8ffe:	9823      	ldr	r0, [sp, #140]	; 0x8c
    9000:	4f24      	ldr	r7, [pc, #144]	; (9094 <lv_draw_map+0x2d4>)
    9002:	47b8      	blx	r7
                    blend_area.y1 = blend_area.y2 + 1;
    9004:	f8bd 309e 	ldrh.w	r3, [sp, #158]	; 0x9e
    9008:	3301      	adds	r3, #1
    900a:	b21b      	sxth	r3, r3
    900c:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                    blend_area.y2 = blend_area.y1;
    9010:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
                    px_i = 0;
    9014:	f04f 0c00 	mov.w	ip, #0
    9018:	e7d7      	b.n	8fca <lv_draw_map+0x20a>
            if(blend_area.y1 != blend_area.y2) {
    901a:	f9bd 309e 	ldrsh.w	r3, [sp, #158]	; 0x9e
    901e:	f9bd 209a 	ldrsh.w	r2, [sp, #154]	; 0x9a
    9022:	429a      	cmp	r2, r3
    9024:	d00f      	beq.n	9046 <lv_draw_map+0x286>
                blend_area.y2--;
    9026:	3b01      	subs	r3, #1
    9028:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
    902c:	9a08      	ldr	r2, [sp, #32]
    902e:	7b93      	ldrb	r3, [r2, #14]
    9030:	9302      	str	r3, [sp, #8]
    9032:	7813      	ldrb	r3, [r2, #0]
    9034:	9301      	str	r3, [sp, #4]
    9036:	2302      	movs	r3, #2
    9038:	9300      	str	r3, [sp, #0]
    903a:	4623      	mov	r3, r4
    903c:	4652      	mov	r2, sl
    903e:	a926      	add	r1, sp, #152	; 0x98
    9040:	9823      	ldr	r0, [sp, #140]	; 0x8c
    9042:	4d14      	ldr	r5, [pc, #80]	; (9094 <lv_draw_map+0x2d4>)
    9044:	47a8      	blx	r5
            _lv_mem_buf_release(mask_buf);
    9046:	4620      	mov	r0, r4
    9048:	4c13      	ldr	r4, [pc, #76]	; (9098 <lv_draw_map+0x2d8>)
    904a:	47a0      	blx	r4
            _lv_mem_buf_release(map2);
    904c:	4650      	mov	r0, sl
    904e:	47a0      	blx	r4
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
    9050:	e287      	b.n	9562 <lv_draw_map+0x7a2>
             uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
    9052:	a83a      	add	r0, sp, #232	; 0xe8
    9054:	4b0c      	ldr	r3, [pc, #48]	; (9088 <lv_draw_map+0x2c8>)
    9056:	4798      	blx	r3
    9058:	901c      	str	r0, [sp, #112]	; 0x70
             lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
    905a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    905c:	0058      	lsls	r0, r3, #1
    905e:	4c0b      	ldr	r4, [pc, #44]	; (908c <lv_draw_map+0x2cc>)
    9060:	47a0      	blx	r4
    9062:	901a      	str	r0, [sp, #104]	; 0x68
             lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
    9064:	981c      	ldr	r0, [sp, #112]	; 0x70
    9066:	47a0      	blx	r4
    9068:	9017      	str	r0, [sp, #92]	; 0x5c
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
    906a:	2148      	movs	r1, #72	; 0x48
    906c:	a828      	add	r0, sp, #160	; 0xa0
    906e:	4b08      	ldr	r3, [pc, #32]	; (9090 <lv_draw_map+0x2d0>)
    9070:	4798      	blx	r3
            if(transform) {
    9072:	9b05      	ldr	r3, [sp, #20]
    9074:	2b00      	cmp	r3, #0
    9076:	d036      	beq.n	90e6 <lv_draw_map+0x326>
    9078:	e291      	b.n	959e <lv_draw_map+0x7de>
    907a:	bf00      	nop
    907c:	00005f5d 	.word	0x00005f5d
    9080:	00010fd1 	.word	0x00010fd1
    9084:	0000beb9 	.word	0x0000beb9
    9088:	000114f1 	.word	0x000114f1
    908c:	00012931 	.word	0x00012931
    9090:	00012b2b 	.word	0x00012b2b
    9094:	00008275 	.word	0x00008275
    9098:	00012565 	.word	0x00012565
                lv_img_cf_t cf = LV_IMG_CF_TRUE_COLOR;
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
    909c:	2205      	movs	r2, #5
                else if(chroma_key) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;

                trans_dsc.cfg.angle = draw_dsc->angle;
    909e:	9808      	ldr	r0, [sp, #32]
    90a0:	8843      	ldrh	r3, [r0, #2]
    90a2:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
                trans_dsc.cfg.zoom = draw_dsc->zoom;
    90a6:	8903      	ldrh	r3, [r0, #8]
    90a8:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
                trans_dsc.cfg.src = map_p;
    90ac:	9728      	str	r7, [sp, #160]	; 0xa0
                trans_dsc.cfg.src_w = map_w;
    90ae:	f8ad 50a4 	strh.w	r5, [sp, #164]	; 0xa4
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    90b2:	991b      	ldr	r1, [sp, #108]	; 0x6c
    90b4:	88cb      	ldrh	r3, [r1, #6]
    90b6:	3301      	adds	r3, #1
    90b8:	8849      	ldrh	r1, [r1, #2]
    90ba:	1a5b      	subs	r3, r3, r1
                trans_dsc.cfg.src_h = lv_area_get_height(map_area);;
    90bc:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
                trans_dsc.cfg.cf = cf;
    90c0:	f88d 20b2 	strb.w	r2, [sp, #178]	; 0xb2
                trans_dsc.cfg.pivot_x = draw_dsc->pivot.x;
    90c4:	8883      	ldrh	r3, [r0, #4]
    90c6:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
                trans_dsc.cfg.pivot_y = draw_dsc->pivot.y;
    90ca:	88c3      	ldrh	r3, [r0, #6]
    90cc:	f8ad 30aa 	strh.w	r3, [sp, #170]	; 0xaa
                trans_dsc.cfg.color = draw_dsc->recolor;
    90d0:	8983      	ldrh	r3, [r0, #12]
    90d2:	f8ad 30b0 	strh.w	r3, [sp, #176]	; 0xb0
                trans_dsc.cfg.antialias = draw_dsc->antialias;
    90d6:	7bc3      	ldrb	r3, [r0, #15]
    90d8:	f3c3 0300 	ubfx	r3, r3, #0, #1
    90dc:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3

                _lv_img_buf_transform_init(&trans_dsc);
    90e0:	a828      	add	r0, sp, #160	; 0xa0
    90e2:	4b93      	ldr	r3, [pc, #588]	; (9330 <lv_draw_map+0x570>)
    90e4:	4798      	blx	r3
            }
#endif
            uint16_t recolor_premult[3] = {0};
            lv_opa_t recolor_opa_inv = 255 - draw_dsc->recolor_opa;
    90e6:	9808      	ldr	r0, [sp, #32]
    90e8:	7a83      	ldrb	r3, [r0, #10]
    90ea:	43da      	mvns	r2, r3
    90ec:	b2d2      	uxtb	r2, r2
    90ee:	9212      	str	r2, [sp, #72]	; 0x48
            if(draw_dsc->recolor_opa != 0) {
    90f0:	b303      	cbz	r3, 9134 <lv_draw_map+0x374>
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
    90f2:	b29b      	uxth	r3, r3
    90f4:	7b42      	ldrb	r2, [r0, #13]
    90f6:	08d2      	lsrs	r2, r2, #3
    90f8:	fb02 f203 	mul.w	r2, r2, r3
    90fc:	9210      	str	r2, [sp, #64]	; 0x40
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
    90fe:	8982      	ldrh	r2, [r0, #12]
    9100:	f3c2 1245 	ubfx	r2, r2, #5, #6
    9104:	fb02 f203 	mul.w	r2, r2, r3
    9108:	9211      	str	r2, [sp, #68]	; 0x44
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
    910a:	7b02      	ldrb	r2, [r0, #12]
    910c:	f002 021f 	and.w	r2, r2, #31
    9110:	fb02 f303 	mul.w	r3, r2, r3
    9114:	9313      	str	r3, [sp, #76]	; 0x4c
                lv_color_premult(draw_dsc->recolor, draw_dsc->recolor_opa, recolor_premult);
            }

            lv_draw_mask_res_t mask_res;
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
    9116:	9b06      	ldr	r3, [sp, #24]
    9118:	b98b      	cbnz	r3, 913e <lv_draw_map+0x37e>
    911a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    911c:	bb53      	cbnz	r3, 9174 <lv_draw_map+0x3b4>
    911e:	9a08      	ldr	r2, [sp, #32]
    9120:	8853      	ldrh	r3, [r2, #2]
    9122:	bb53      	cbnz	r3, 917a <lv_draw_map+0x3ba>
    9124:	8913      	ldrh	r3, [r2, #8]
    9126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    912a:	bf14      	ite	ne
    912c:	2302      	movne	r3, #2
    912e:	2301      	moveq	r3, #1
    9130:	931d      	str	r3, [sp, #116]	; 0x74
    9132:	e006      	b.n	9142 <lv_draw_map+0x382>
            uint16_t recolor_premult[3] = {0};
    9134:	2300      	movs	r3, #0
    9136:	9313      	str	r3, [sp, #76]	; 0x4c
    9138:	9311      	str	r3, [sp, #68]	; 0x44
    913a:	9310      	str	r3, [sp, #64]	; 0x40
    913c:	e7eb      	b.n	9116 <lv_draw_map+0x356>
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
    913e:	2302      	movs	r3, #2
    9140:	931d      	str	r3, [sp, #116]	; 0x74
                        draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;


            /*Prepare the `mask_buf`if there are other masks*/
            if(other_mask_cnt) {
    9142:	9b19      	ldr	r3, [sp, #100]	; 0x64
    9144:	b9e3      	cbnz	r3, 9180 <lv_draw_map+0x3c0>
            }

            int32_t x;
            int32_t y;
#if LV_USE_IMG_TRANSFORM
            int32_t rot_y = disp_area->y1 + draw_area.y1 - map_area->y1;
    9146:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9148:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
    914c:	f9bd 20ea 	ldrsh.w	r2, [sp, #234]	; 0xea
    9150:	4413      	add	r3, r2
    9152:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9154:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
    9158:	1a9b      	subs	r3, r3, r2
    915a:	9322      	str	r3, [sp, #136]	; 0x88
#endif
            for(y = 0; y < draw_area_h; y++) {
    915c:	961f      	str	r6, [sp, #124]	; 0x7c
    915e:	2e00      	cmp	r6, #0
    9160:	f340 81e4 	ble.w	952c <lv_draw_map+0x76c>
                    else if(mask_res_sub == LV_DRAW_MASK_RES_CHANGED) {
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
                    }
                }

                map_buf_tmp += map_w * px_size_byte;
    9164:	fb08 f305 	mul.w	r3, r8, r5
    9168:	931e      	str	r3, [sp, #120]	; 0x78
    916a:	2300      	movs	r3, #0
    916c:	930e      	str	r3, [sp, #56]	; 0x38
    916e:	930f      	str	r3, [sp, #60]	; 0x3c
        }
    }
    else {
        pxi = 0; /*unused*/
        px_size = 0;    /*unused*/
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
    9170:	46d1      	mov	r9, sl
    9172:	e154      	b.n	941e <lv_draw_map+0x65e>
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
    9174:	2302      	movs	r3, #2
    9176:	931d      	str	r3, [sp, #116]	; 0x74
    9178:	e7e3      	b.n	9142 <lv_draw_map+0x382>
    917a:	2302      	movs	r3, #2
    917c:	931d      	str	r3, [sp, #116]	; 0x74
    917e:	e7e0      	b.n	9142 <lv_draw_map+0x382>
                _lv_memset_ff(mask_buf, mask_buf_size);
    9180:	991c      	ldr	r1, [sp, #112]	; 0x70
    9182:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9184:	4b6b      	ldr	r3, [pc, #428]	; (9334 <lv_draw_map+0x574>)
    9186:	4798      	blx	r3
    9188:	e7dd      	b.n	9146 <lv_draw_map+0x386>
    int32_t xt = x - dsc->cfg.pivot_x;
    918a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    918c:	442b      	add	r3, r5
    918e:	b21b      	sxth	r3, r3
    9190:	f9bd 20a8 	ldrsh.w	r2, [sp, #168]	; 0xa8
    9194:	1a9b      	subs	r3, r3, r2
    int32_t yt = y - dsc->cfg.pivot_y;
    9196:	f9bd 20aa 	ldrsh.w	r2, [sp, #170]	; 0xaa
    919a:	990d      	ldr	r1, [sp, #52]	; 0x34
    919c:	1a8a      	subs	r2, r1, r2
    if(dsc->cfg.zoom == LV_IMG_ZOOM_NONE) {
    919e:	f8bd 10ae 	ldrh.w	r1, [sp, #174]	; 0xae
    91a2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    91a6:	d056      	beq.n	9256 <lv_draw_map+0x496>
    else if(dsc->cfg.angle == 0) {
    91a8:	f9bd 10ac 	ldrsh.w	r1, [sp, #172]	; 0xac
    91ac:	2900      	cmp	r1, #0
    91ae:	d165      	bne.n	927c <lv_draw_map+0x4bc>
        xt *= dsc->tmp.zoom_inv;
    91b0:	f8bd 10d6 	ldrh.w	r1, [sp, #214]	; 0xd6
        xs = xt + dsc->tmp.pivot_x_256;
    91b4:	9c31      	ldr	r4, [sp, #196]	; 0xc4
    91b6:	fb01 4303 	mla	r3, r1, r3, r4
    91ba:	9309      	str	r3, [sp, #36]	; 0x24
        ys = yt + dsc->tmp.pivot_y_256;
    91bc:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    91be:	fb01 3302 	mla	r3, r1, r2, r3
    91c2:	930b      	str	r3, [sp, #44]	; 0x2c
    int32_t xs_int = xs >> 8;
    91c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    91c6:	121f      	asrs	r7, r3, #8
    if(xs_int >= dsc->cfg.src_w) return false;
    91c8:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	; 0xa4
    91cc:	429f      	cmp	r7, r3
    91ce:	f280 80ab 	bge.w	9328 <lv_draw_map+0x568>
    else if(xs_int < 0) return false;
    91d2:	2f00      	cmp	r7, #0
    91d4:	f2c0 80a8 	blt.w	9328 <lv_draw_map+0x568>
    int32_t ys_int = ys >> 8;
    91d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    91da:	1212      	asrs	r2, r2, #8
    91dc:	4610      	mov	r0, r2
    91de:	9215      	str	r2, [sp, #84]	; 0x54
    if(ys_int >= dsc->cfg.src_h) return false;
    91e0:	f9bd 20a6 	ldrsh.w	r2, [sp, #166]	; 0xa6
    91e4:	4290      	cmp	r0, r2
    91e6:	f280 809f 	bge.w	9328 <lv_draw_map+0x568>
    else if(ys_int < 0) return false;
    91ea:	2800      	cmp	r0, #0
    91ec:	f2c0 809c 	blt.w	9328 <lv_draw_map+0x568>
    if(dsc->tmp.native_color) {
    91f0:	f89d 20d4 	ldrb.w	r2, [sp, #212]	; 0xd4
    91f4:	f012 0f04 	tst.w	r2, #4
    91f8:	d06a      	beq.n	92d0 <lv_draw_map+0x510>
    const uint8_t * src_u8 = (const uint8_t *)dsc->cfg.src;
    91fa:	9928      	ldr	r1, [sp, #160]	; 0xa0
        if(dsc->tmp.has_alpha == 0) {
    91fc:	f012 0f02 	tst.w	r2, #2
    9200:	d155      	bne.n	92ae <lv_draw_map+0x4ee>
            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
    9202:	fb03 7300 	mla	r3, r3, r0, r7
    9206:	005a      	lsls	r2, r3, #1
            _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size);
    9208:	1888      	adds	r0, r1, r2
        *d8 = *s8;
    920a:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
    920e:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
    9212:	7843      	ldrb	r3, [r0, #1]
    9214:	f88d 30b5 	strb.w	r3, [sp, #181]	; 0xb5
            px_size = LV_COLOR_SIZE >> 3;
    9218:	2102      	movs	r1, #2
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
    }

    if(dsc->tmp.chroma_keyed) {
    921a:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
    921e:	f013 0f01 	tst.w	r3, #1
    9222:	d00d      	beq.n	9240 <lv_draw_map+0x480>
        lv_color_t ct = LV_COLOR_TRANSP;
    9224:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9226:	f36f 0304 	bfc	r3, #0, #5
    922a:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
    922e:	f36f 23cf 	bfc	r3, #11, #5
    9232:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
        if(dsc->res.color.full == ct.full) return false;
    9236:	f8bd 00b4 	ldrh.w	r0, [sp, #180]	; 0xb4
    923a:	b29b      	uxth	r3, r3
    923c:	4298      	cmp	r0, r3
    923e:	d073      	beq.n	9328 <lv_draw_map+0x568>
    }

    if(dsc->cfg.antialias == false) return true;
    9240:	f89d 30b3 	ldrb.w	r3, [sp, #179]	; 0xb3
    9244:	2b00      	cmp	r3, #0
    9246:	d159      	bne.n	92fc <lv_draw_map+0x53c>
                            mask_buf[px_i] = trans_dsc.res.opa;
    9248:	f89d 30b6 	ldrb.w	r3, [sp, #182]	; 0xb6
    924c:	f88a 3000 	strb.w	r3, [sl]
                            c.full = trans_dsc.res.color.full;
    9250:	f8bd 30b4 	ldrh.w	r3, [sp, #180]	; 0xb4
    9254:	e086      	b.n	9364 <lv_draw_map+0x5a4>
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (LV_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
    9256:	9834      	ldr	r0, [sp, #208]	; 0xd0
    9258:	9933      	ldr	r1, [sp, #204]	; 0xcc
    925a:	fb00 f403 	mul.w	r4, r0, r3
    925e:	fb01 4712 	mls	r7, r1, r2, r4
    9262:	9c31      	ldr	r4, [sp, #196]	; 0xc4
    9264:	eb04 14e7 	add.w	r4, r4, r7, asr #7
    9268:	9409      	str	r4, [sp, #36]	; 0x24
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (LV_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
    926a:	fb00 f202 	mul.w	r2, r0, r2
    926e:	fb01 2303 	mla	r3, r1, r3, r2
    9272:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    9274:	eb02 13e3 	add.w	r3, r2, r3, asr #7
    9278:	930b      	str	r3, [sp, #44]	; 0x2c
    927a:	e7a3      	b.n	91c4 <lv_draw_map+0x404>
        xt *= dsc->tmp.zoom_inv;
    927c:	f8bd 10d6 	ldrh.w	r1, [sp, #214]	; 0xd6
    9280:	fb01 f303 	mul.w	r3, r1, r3
        yt *= dsc->tmp.zoom_inv;
    9284:	fb01 f202 	mul.w	r2, r1, r2
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (LV_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
    9288:	9934      	ldr	r1, [sp, #208]	; 0xd0
    928a:	9833      	ldr	r0, [sp, #204]	; 0xcc
    928c:	fb01 f403 	mul.w	r4, r1, r3
    9290:	fb00 4712 	mls	r7, r0, r2, r4
    9294:	9c31      	ldr	r4, [sp, #196]	; 0xc4
    9296:	eb04 34e7 	add.w	r4, r4, r7, asr #15
    929a:	9409      	str	r4, [sp, #36]	; 0x24
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (LV_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
    929c:	fb01 f202 	mul.w	r2, r1, r2
    92a0:	fb00 2303 	mla	r3, r0, r3, r2
    92a4:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    92a6:	eb02 33e3 	add.w	r3, r2, r3, asr #15
    92aa:	930b      	str	r3, [sp, #44]	; 0x2c
    92ac:	e78a      	b.n	91c4 <lv_draw_map+0x404>
            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
    92ae:	9a15      	ldr	r2, [sp, #84]	; 0x54
    92b0:	fb03 7302 	mla	r3, r3, r2, r7
    92b4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
            _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size - 1);
    92b8:	188b      	adds	r3, r1, r2
    92ba:	5c89      	ldrb	r1, [r1, r2]
    92bc:	f88d 10b4 	strb.w	r1, [sp, #180]	; 0xb4
    92c0:	7859      	ldrb	r1, [r3, #1]
    92c2:	f88d 10b5 	strb.w	r1, [sp, #181]	; 0xb5
            dsc->res.opa = src_u8[pxi + px_size - 1];
    92c6:	789b      	ldrb	r3, [r3, #2]
    92c8:	f88d 30b6 	strb.w	r3, [sp, #182]	; 0xb6
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE;
    92cc:	2103      	movs	r1, #3
    92ce:	e7a4      	b.n	921a <lv_draw_map+0x45a>
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
    92d0:	b239      	sxth	r1, r7
    92d2:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
    92d6:	f8bd 30b0 	ldrh.w	r3, [sp, #176]	; 0xb0
    92da:	9225      	str	r2, [sp, #148]	; 0x94
    92dc:	9124      	str	r1, [sp, #144]	; 0x90
    92de:	a82e      	add	r0, sp, #184	; 0xb8
    92e0:	4c15      	ldr	r4, [pc, #84]	; (9338 <lv_draw_map+0x578>)
    92e2:	47a0      	blx	r4
    92e4:	f8ad 00b4 	strh.w	r0, [sp, #180]	; 0xb4
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
    92e8:	9a25      	ldr	r2, [sp, #148]	; 0x94
    92ea:	9924      	ldr	r1, [sp, #144]	; 0x90
    92ec:	a82e      	add	r0, sp, #184	; 0xb8
    92ee:	4b13      	ldr	r3, [pc, #76]	; (933c <lv_draw_map+0x57c>)
    92f0:	4798      	blx	r3
    92f2:	f88d 00b6 	strb.w	r0, [sp, #182]	; 0xb6
        pxi = 0; /*unused*/
    92f6:	2200      	movs	r2, #0
        px_size = 0;    /*unused*/
    92f8:	4611      	mov	r1, r2
    92fa:	e78e      	b.n	921a <lv_draw_map+0x45a>

    dsc->tmp.xs = xs;
    92fc:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9300:	f8ad 30d8 	strh.w	r3, [sp, #216]	; 0xd8
    dsc->tmp.ys = ys;
    9304:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    9308:	f8ad 30da 	strh.w	r3, [sp, #218]	; 0xda
    dsc->tmp.xs_int = xs_int;
    930c:	f8ad 70dc 	strh.w	r7, [sp, #220]	; 0xdc
    dsc->tmp.ys_int = ys_int;
    9310:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
    9314:	f8ad 30de 	strh.w	r3, [sp, #222]	; 0xde
    dsc->tmp.pxi = pxi;
    9318:	9238      	str	r2, [sp, #224]	; 0xe0
    dsc->tmp.px_size = px_size;
    931a:	f88d 10e4 	strb.w	r1, [sp, #228]	; 0xe4

    bool ret;
    ret = _lv_img_buf_transform_anti_alias(dsc);
    931e:	a828      	add	r0, sp, #160	; 0xa0
    9320:	4b07      	ldr	r3, [pc, #28]	; (9340 <lv_draw_map+0x580>)
    9322:	4798      	blx	r3
                        if(ret == false) {
    9324:	2800      	cmp	r0, #0
    9326:	d18f      	bne.n	9248 <lv_draw_map+0x488>
                            mask_buf[px_i] = LV_OPA_TRANSP;
    9328:	2300      	movs	r3, #0
    932a:	f88a 3000 	strb.w	r3, [sl]
                            continue;
    932e:	e03d      	b.n	93ac <lv_draw_map+0x5ec>
    9330:	0000eb41 	.word	0x0000eb41
    9334:	00012be1 	.word	0x00012be1
    9338:	0000e90d 	.word	0x0000e90d
    933c:	0000ea3d 	.word	0x0000ea3d
    9340:	0000edf1 	.word	0x0000edf1
    9344:	000007e0 	.word	0x000007e0
                            mask_buf[px_i] = 0xFF;
    9348:	23ff      	movs	r3, #255	; 0xff
    934a:	f88a 3000 	strb.w	r3, [sl]
                        c.full =  map_px[0] + (map_px[1] << 8);
    934e:	7872      	ldrb	r2, [r6, #1]
    9350:	7833      	ldrb	r3, [r6, #0]
    9352:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    9356:	b29b      	uxth	r3, r3
                        if(chroma_key) {
    9358:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    935a:	b11a      	cbz	r2, 9364 <lv_draw_map+0x5a4>
                            if(c.full == chroma_keyed_color.full) {
    935c:	f83f 201c 	ldrh.w	r2, [pc, #-28]	; 9344 <lv_draw_map+0x584>
    9360:	429a      	cmp	r2, r3
    9362:	d036      	beq.n	93d2 <lv_draw_map+0x612>
                    if(draw_dsc->recolor_opa != 0) {
    9364:	9a08      	ldr	r2, [sp, #32]
    9366:	7a92      	ldrb	r2, [r2, #10]
    9368:	b1ea      	cbz	r2, 93a6 <lv_draw_map+0x5e6>
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix) >> 8);
    936a:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    936e:	0ad9      	lsrs	r1, r3, #11
    9370:	9810      	ldr	r0, [sp, #64]	; 0x40
    9372:	fb01 0102 	mla	r1, r1, r2, r0
    9376:	f3c1 2104 	ubfx	r1, r1, #8, #5
    LV_COLOR_SET_G(ret, (uint16_t)((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix) >> 8);
    937a:	f3c3 1045 	ubfx	r0, r3, #5, #6
    937e:	9c11      	ldr	r4, [sp, #68]	; 0x44
    9380:	fb00 4002 	mla	r0, r0, r2, r4
    9384:	f3c0 2005 	ubfx	r0, r0, #8, #6
    LV_COLOR_SET_B(ret, (uint16_t)((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix) >> 8);
    9388:	f003 031f 	and.w	r3, r3, #31
    938c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    938e:	fb03 4302 	mla	r3, r3, r2, r4
    9392:	f3c3 2307 	ubfx	r3, r3, #8, #8
    9396:	f363 0904 	bfi	r9, r3, #0, #5
    939a:	f360 194a 	bfi	r9, r0, #5, #6
    939e:	f361 29cf 	bfi	r9, r1, #11, #5
    93a2:	fa1f f389 	uxth.w	r3, r9
                    map2[px_i].full = c.full;
    93a6:	9a07      	ldr	r2, [sp, #28]
    93a8:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
    93ac:	3501      	adds	r5, #1
    93ae:	445e      	add	r6, fp
    93b0:	f10a 0a01 	add.w	sl, sl, #1
    93b4:	4545      	cmp	r5, r8
    93b6:	d010      	beq.n	93da <lv_draw_map+0x61a>
                    if(transform) {
    93b8:	9b05      	ldr	r3, [sp, #20]
    93ba:	2b00      	cmp	r3, #0
    93bc:	f47f aee5 	bne.w	918a <lv_draw_map+0x3ca>
                        if(alpha_byte) {
    93c0:	9b06      	ldr	r3, [sp, #24]
    93c2:	2b00      	cmp	r3, #0
    93c4:	d0c0      	beq.n	9348 <lv_draw_map+0x588>
                            lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
    93c6:	78b3      	ldrb	r3, [r6, #2]
                            mask_buf[px_i] = px_opa;
    93c8:	f88a 3000 	strb.w	r3, [sl]
                            if(px_opa == 0) {
    93cc:	2b00      	cmp	r3, #0
    93ce:	d0ed      	beq.n	93ac <lv_draw_map+0x5ec>
    93d0:	e7bd      	b.n	934e <lv_draw_map+0x58e>
                                mask_buf[px_i] = LV_OPA_TRANSP;
    93d2:	2300      	movs	r3, #0
    93d4:	f88a 3000 	strb.w	r3, [sl]
                                continue;
    93d8:	e7e8      	b.n	93ac <lv_draw_map+0x5ec>
    93da:	9b16      	ldr	r3, [sp, #88]	; 0x58
    93dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    93de:	189c      	adds	r4, r3, r2
                if(other_mask_cnt) {
    93e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    93e2:	2b00      	cmp	r3, #0
    93e4:	d13e      	bne.n	9464 <lv_draw_map+0x6a4>
                map_buf_tmp += map_w * px_size_byte;
    93e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    93e8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    93ea:	4413      	add	r3, r2
    93ec:	9314      	str	r3, [sp, #80]	; 0x50
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    93ee:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
    93f2:	3301      	adds	r3, #1
    93f4:	f8bd 20e8 	ldrh.w	r2, [sp, #232]	; 0xe8
    93f8:	1a9b      	subs	r3, r3, r2
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
    93fa:	fa04 f383 	sxtah	r3, r4, r3
    93fe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    9400:	429a      	cmp	r2, r3
    9402:	d95c      	bls.n	94be <lv_draw_map+0x6fe>
                    blend_area.y2 ++;
    9404:	f8bd 309e 	ldrh.w	r3, [sp, #158]	; 0x9e
    9408:	3301      	adds	r3, #1
    940a:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
    940e:	940f      	str	r4, [sp, #60]	; 0x3c
            for(y = 0; y < draw_area_h; y++) {
    9410:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9412:	3301      	adds	r3, #1
    9414:	930e      	str	r3, [sp, #56]	; 0x38
    9416:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    9418:	4293      	cmp	r3, r2
    941a:	f000 8087 	beq.w	952c <lv_draw_map+0x76c>
                int32_t rot_x = disp_area->x1 + draw_area.x1 - map_area->x1;
    941e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9420:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
    9424:	f9bd 20e8 	ldrsh.w	r2, [sp, #232]	; 0xe8
    9428:	4413      	add	r3, r2
    942a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    942c:	f9b2 2000 	ldrsh.w	r2, [r2]
    9430:	1a9b      	subs	r3, r3, r2
    9432:	930c      	str	r3, [sp, #48]	; 0x30
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
    9434:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9436:	4698      	mov	r8, r3
    9438:	2b00      	cmp	r3, #0
    943a:	dd11      	ble.n	9460 <lv_draw_map+0x6a0>
    943c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    943e:	4619      	mov	r1, r3
    9440:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9442:	eb01 0a02 	add.w	sl, r1, r2
    9446:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9448:	4619      	mov	r1, r3
    944a:	eb01 0342 	add.w	r3, r1, r2, lsl #1
    944e:	9307      	str	r3, [sp, #28]
    9450:	9e14      	ldr	r6, [sp, #80]	; 0x50
    9452:	2500      	movs	r5, #0
    int32_t yt = y - dsc->cfg.pivot_y;
    9454:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9456:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9458:	4413      	add	r3, r2
    945a:	b21b      	sxth	r3, r3
    945c:	930d      	str	r3, [sp, #52]	; 0x34
    945e:	e7ab      	b.n	93b8 <lv_draw_map+0x5f8>
    9460:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    9462:	e7bd      	b.n	93e0 <lv_draw_map+0x620>
                    mask_res_sub = lv_draw_mask_apply(mask_buf + px_i_start, draw_area.x1 + vdb->area.x1, y + draw_area.y1 + vdb->area.y1,
    9464:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9466:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    9468:	4413      	add	r3, r2
    946a:	461e      	mov	r6, r3
    946c:	f8bd 10e8 	ldrh.w	r1, [sp, #232]	; 0xe8
    9470:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
    9474:	3301      	adds	r3, #1
    9476:	1a5b      	subs	r3, r3, r1
    9478:	f8bd 20ea 	ldrh.w	r2, [sp, #234]	; 0xea
    947c:	9d18      	ldr	r5, [sp, #96]	; 0x60
    947e:	8a68      	ldrh	r0, [r5, #18]
    9480:	4402      	add	r2, r0
    9482:	980e      	ldr	r0, [sp, #56]	; 0x38
    9484:	4402      	add	r2, r0
    9486:	8a28      	ldrh	r0, [r5, #16]
    9488:	4401      	add	r1, r0
    948a:	b21b      	sxth	r3, r3
    948c:	b212      	sxth	r2, r2
    948e:	b209      	sxth	r1, r1
    9490:	4630      	mov	r0, r6
    9492:	4d4e      	ldr	r5, [pc, #312]	; (95cc <lv_draw_map+0x80c>)
    9494:	47a8      	blx	r5
                    if(mask_res_sub == LV_DRAW_MASK_RES_TRANSP) {
    9496:	b128      	cbz	r0, 94a4 <lv_draw_map+0x6e4>
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
    9498:	2802      	cmp	r0, #2
    949a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    949c:	bf08      	it	eq
    949e:	4602      	moveq	r2, r0
    94a0:	921d      	str	r2, [sp, #116]	; 0x74
    94a2:	e7a0      	b.n	93e6 <lv_draw_map+0x626>
    94a4:	f8bd 10ec 	ldrh.w	r1, [sp, #236]	; 0xec
    94a8:	3101      	adds	r1, #1
    94aa:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	; 0xe8
    94ae:	1ac9      	subs	r1, r1, r3
                        _lv_memset_00(mask_buf + px_i_start, lv_area_get_width(&draw_area));
    94b0:	b209      	sxth	r1, r1
    94b2:	4630      	mov	r0, r6
    94b4:	4b46      	ldr	r3, [pc, #280]	; (95d0 <lv_draw_map+0x810>)
    94b6:	4798      	blx	r3
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
    94b8:	2302      	movs	r3, #2
    94ba:	931d      	str	r3, [sp, #116]	; 0x74
    94bc:	e793      	b.n	93e6 <lv_draw_map+0x626>
                }
                else {

                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
    94be:	9d08      	ldr	r5, [sp, #32]
    94c0:	7bab      	ldrb	r3, [r5, #14]
    94c2:	9302      	str	r3, [sp, #8]
    94c4:	782b      	ldrb	r3, [r5, #0]
    94c6:	9301      	str	r3, [sp, #4]
    94c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    94ca:	9300      	str	r3, [sp, #0]
    94cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    94ce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    94d0:	a926      	add	r1, sp, #152	; 0x98
    94d2:	9823      	ldr	r0, [sp, #140]	; 0x8c
    94d4:	4c3f      	ldr	r4, [pc, #252]	; (95d4 <lv_draw_map+0x814>)
    94d6:	47a0      	blx	r4

                    blend_area.y1 = blend_area.y2 + 1;
    94d8:	f8bd 309e 	ldrh.w	r3, [sp, #158]	; 0x9e
    94dc:	3301      	adds	r3, #1
    94de:	b21b      	sxth	r3, r3
    94e0:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                    blend_area.y2 = blend_area.y1;
    94e4:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e

                    px_i = 0;
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
    94e8:	9b06      	ldr	r3, [sp, #24]
    94ea:	b95b      	cbnz	r3, 9504 <lv_draw_map+0x744>
    94ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    94ee:	b983      	cbnz	r3, 9512 <lv_draw_map+0x752>
    94f0:	886b      	ldrh	r3, [r5, #2]
    94f2:	b98b      	cbnz	r3, 9518 <lv_draw_map+0x758>
    94f4:	892b      	ldrh	r3, [r5, #8]
    94f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    94fa:	bf14      	ite	ne
    94fc:	2302      	movne	r3, #2
    94fe:	2301      	moveq	r3, #1
    9500:	931d      	str	r3, [sp, #116]	; 0x74
    9502:	e001      	b.n	9508 <lv_draw_map+0x748>
    9504:	2302      	movs	r3, #2
    9506:	931d      	str	r3, [sp, #116]	; 0x74
                                draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;

                    /*Prepare the `mask_buf`if there are other masks*/
                    if(other_mask_cnt) {
    9508:	9b19      	ldr	r3, [sp, #100]	; 0x64
    950a:	b943      	cbnz	r3, 951e <lv_draw_map+0x75e>
                    px_i = 0;
    950c:	2300      	movs	r3, #0
    950e:	930f      	str	r3, [sp, #60]	; 0x3c
    9510:	e77e      	b.n	9410 <lv_draw_map+0x650>
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
    9512:	2302      	movs	r3, #2
    9514:	931d      	str	r3, [sp, #116]	; 0x74
    9516:	e7f7      	b.n	9508 <lv_draw_map+0x748>
    9518:	2302      	movs	r3, #2
    951a:	931d      	str	r3, [sp, #116]	; 0x74
    951c:	e7f4      	b.n	9508 <lv_draw_map+0x748>
                        _lv_memset_ff(mask_buf, mask_buf_size);
    951e:	991c      	ldr	r1, [sp, #112]	; 0x70
    9520:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9522:	4b2d      	ldr	r3, [pc, #180]	; (95d8 <lv_draw_map+0x818>)
    9524:	4798      	blx	r3
                    px_i = 0;
    9526:	2300      	movs	r3, #0
    9528:	930f      	str	r3, [sp, #60]	; 0x3c
    952a:	e771      	b.n	9410 <lv_draw_map+0x650>
                    }
                }
            }

            /*Flush the last part*/
            if(blend_area.y1 != blend_area.y2) {
    952c:	f9bd 309e 	ldrsh.w	r3, [sp, #158]	; 0x9e
    9530:	f9bd 209a 	ldrsh.w	r2, [sp, #154]	; 0x9a
    9534:	429a      	cmp	r2, r3
    9536:	d00f      	beq.n	9558 <lv_draw_map+0x798>
                blend_area.y2--;
    9538:	3b01      	subs	r3, #1
    953a:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
    953e:	9a08      	ldr	r2, [sp, #32]
    9540:	7b93      	ldrb	r3, [r2, #14]
    9542:	9302      	str	r3, [sp, #8]
    9544:	7813      	ldrb	r3, [r2, #0]
    9546:	9301      	str	r3, [sp, #4]
    9548:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    954a:	9300      	str	r3, [sp, #0]
    954c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    954e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    9550:	a926      	add	r1, sp, #152	; 0x98
    9552:	9823      	ldr	r0, [sp, #140]	; 0x8c
    9554:	4c1f      	ldr	r4, [pc, #124]	; (95d4 <lv_draw_map+0x814>)
    9556:	47a0      	blx	r4
            }

            _lv_mem_buf_release(mask_buf);
    9558:	9817      	ldr	r0, [sp, #92]	; 0x5c
    955a:	4c20      	ldr	r4, [pc, #128]	; (95dc <lv_draw_map+0x81c>)
    955c:	47a0      	blx	r4
            _lv_mem_buf_release(map2);
    955e:	981a      	ldr	r0, [sp, #104]	; 0x68
    9560:	47a0      	blx	r4
        }
    }
}
    9562:	b03d      	add	sp, #244	; 0xf4
    9564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
    9568:	9b19      	ldr	r3, [sp, #100]	; 0x64
    956a:	bb13      	cbnz	r3, 95b2 <lv_draw_map+0x7f2>
    956c:	2301      	movs	r3, #1
    956e:	9305      	str	r3, [sp, #20]
             uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
    9570:	a83a      	add	r0, sp, #232	; 0xe8
    9572:	4b1b      	ldr	r3, [pc, #108]	; (95e0 <lv_draw_map+0x820>)
    9574:	4798      	blx	r3
    9576:	f5b0 7ff0 	cmp.w	r0, #480	; 0x1e0
    957a:	f67f ad6a 	bls.w	9052 <lv_draw_map+0x292>
             lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
    957e:	f44f 7070 	mov.w	r0, #960	; 0x3c0
    9582:	4c18      	ldr	r4, [pc, #96]	; (95e4 <lv_draw_map+0x824>)
    9584:	47a0      	blx	r4
    9586:	901a      	str	r0, [sp, #104]	; 0x68
             lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
    9588:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
    958c:	47a0      	blx	r4
    958e:	9017      	str	r0, [sp, #92]	; 0x5c
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
    9590:	2148      	movs	r1, #72	; 0x48
    9592:	a828      	add	r0, sp, #160	; 0xa0
    9594:	4b0e      	ldr	r3, [pc, #56]	; (95d0 <lv_draw_map+0x810>)
    9596:	4798      	blx	r3
             uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
    9598:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    959c:	931c      	str	r3, [sp, #112]	; 0x70
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
    959e:	9b06      	ldr	r3, [sp, #24]
    95a0:	2b00      	cmp	r3, #0
    95a2:	f47f ad7b 	bne.w	909c <lv_draw_map+0x2dc>
                else if(chroma_key) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
    95a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    95a8:	2b00      	cmp	r3, #0
    95aa:	bf0c      	ite	eq
    95ac:	2204      	moveq	r2, #4
    95ae:	2206      	movne	r2, #6
    95b0:	e575      	b.n	909e <lv_draw_map+0x2de>
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
    95b2:	2301      	movs	r3, #1
    95b4:	9305      	str	r3, [sp, #20]
             uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
    95b6:	a83a      	add	r0, sp, #232	; 0xe8
    95b8:	4b09      	ldr	r3, [pc, #36]	; (95e0 <lv_draw_map+0x820>)
    95ba:	4798      	blx	r3
    95bc:	f5b0 7ff0 	cmp.w	r0, #480	; 0x1e0
    95c0:	f67f ad47 	bls.w	9052 <lv_draw_map+0x292>
    95c4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    95c8:	931c      	str	r3, [sp, #112]	; 0x70
    95ca:	e546      	b.n	905a <lv_draw_map+0x29a>
    95cc:	0000be11 	.word	0x0000be11
    95d0:	00012b2b 	.word	0x00012b2b
    95d4:	00008275 	.word	0x00008275
    95d8:	00012be1 	.word	0x00012be1
    95dc:	00012565 	.word	0x00012565
    95e0:	000114f1 	.word	0x000114f1
    95e4:	00012931 	.word	0x00012931

000095e8 <show_error>:

static void show_error(const lv_area_t * coords, const lv_area_t * clip_area, const char * msg)
{
    95e8:	b570      	push	{r4, r5, r6, lr}
    95ea:	b09e      	sub	sp, #120	; 0x78
    95ec:	4604      	mov	r4, r0
    95ee:	460d      	mov	r5, r1
    95f0:	4616      	mov	r6, r2
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
    95f2:	a809      	add	r0, sp, #36	; 0x24
    95f4:	4b0b      	ldr	r3, [pc, #44]	; (9624 <show_error+0x3c>)
    95f6:	4798      	blx	r3
    rect_dsc.bg_color = LV_COLOR_WHITE;
    95f8:	4b0b      	ldr	r3, [pc, #44]	; (9628 <show_error+0x40>)
    95fa:	881b      	ldrh	r3, [r3, #0]
    95fc:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    lv_draw_rect(coords, clip_area, &rect_dsc);
    9600:	aa09      	add	r2, sp, #36	; 0x24
    9602:	4629      	mov	r1, r5
    9604:	4620      	mov	r0, r4
    9606:	4b09      	ldr	r3, [pc, #36]	; (962c <show_error+0x44>)
    9608:	4798      	blx	r3

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
    960a:	a802      	add	r0, sp, #8
    960c:	4b08      	ldr	r3, [pc, #32]	; (9630 <show_error+0x48>)
    960e:	4798      	blx	r3
    lv_draw_label(coords, clip_area, &label_dsc, msg, NULL);
    9610:	2300      	movs	r3, #0
    9612:	9300      	str	r3, [sp, #0]
    9614:	4633      	mov	r3, r6
    9616:	aa02      	add	r2, sp, #8
    9618:	4629      	mov	r1, r5
    961a:	4620      	mov	r0, r4
    961c:	4c05      	ldr	r4, [pc, #20]	; (9634 <show_error+0x4c>)
    961e:	47a0      	blx	r4
}
    9620:	b01e      	add	sp, #120	; 0x78
    9622:	bd70      	pop	{r4, r5, r6, pc}
    9624:	0000c25d 	.word	0x0000c25d
    9628:	00024cac 	.word	0x00024cac
    962c:	0000c325 	.word	0x0000c325
    9630:	000099c1 	.word	0x000099c1
    9634:	00009a19 	.word	0x00009a19

00009638 <lv_draw_img_dsc_init>:
{
    9638:	b510      	push	{r4, lr}
    963a:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
    963c:	2110      	movs	r1, #16
    963e:	4b0c      	ldr	r3, [pc, #48]	; (9670 <lv_draw_img_dsc_init+0x38>)
    9640:	4798      	blx	r3
    dsc->recolor = LV_COLOR_BLACK;
    9642:	7b23      	ldrb	r3, [r4, #12]
    9644:	f36f 0304 	bfc	r3, #0, #5
    9648:	7323      	strb	r3, [r4, #12]
    964a:	89a3      	ldrh	r3, [r4, #12]
    964c:	f36f 134a 	bfc	r3, #5, #6
    9650:	81a3      	strh	r3, [r4, #12]
    9652:	0a1b      	lsrs	r3, r3, #8
    9654:	f36f 03c7 	bfc	r3, #3, #5
    9658:	7363      	strb	r3, [r4, #13]
    dsc->opa = LV_OPA_COVER;
    965a:	23ff      	movs	r3, #255	; 0xff
    965c:	7023      	strb	r3, [r4, #0]
    dsc->zoom = LV_IMG_ZOOM_NONE;
    965e:	f44f 7380 	mov.w	r3, #256	; 0x100
    9662:	8123      	strh	r3, [r4, #8]
    dsc->antialias = LV_ANTIALIAS;
    9664:	7be3      	ldrb	r3, [r4, #15]
    9666:	f043 0301 	orr.w	r3, r3, #1
    966a:	73e3      	strb	r3, [r4, #15]
    966c:	bd10      	pop	{r4, pc}
    966e:	bf00      	nop
    9670:	00012b2b 	.word	0x00012b2b

00009674 <lv_img_cf_get_px_size>:
    switch(cf) {
    9674:	3804      	subs	r0, #4
    9676:	280a      	cmp	r0, #10
    9678:	d813      	bhi.n	96a2 <lv_img_cf_get_px_size+0x2e>
    967a:	e8df f000 	tbb	[pc, r0]
    967e:	0806      	.short	0x0806
    9680:	0e0c0a06 	.word	0x0e0c0a06
    9684:	0e0c0a10 	.word	0x0e0c0a10
    9688:	10          	.byte	0x10
    9689:	00          	.byte	0x00
            px_size = LV_COLOR_SIZE;
    968a:	2010      	movs	r0, #16
    968c:	4770      	bx	lr
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE << 3;
    968e:	2018      	movs	r0, #24
            break;
    9690:	4770      	bx	lr
            px_size = 1;
    9692:	2001      	movs	r0, #1
            break;
    9694:	4770      	bx	lr
            px_size = 2;
    9696:	2002      	movs	r0, #2
            break;
    9698:	4770      	bx	lr
            px_size = 4;
    969a:	2004      	movs	r0, #4
            break;
    969c:	4770      	bx	lr
            px_size = 8;
    969e:	2008      	movs	r0, #8
            break;
    96a0:	4770      	bx	lr
            px_size = 0;
    96a2:	2000      	movs	r0, #0
}
    96a4:	4770      	bx	lr

000096a6 <lv_img_cf_is_chroma_keyed>:
    switch(cf) {
    96a6:	2803      	cmp	r0, #3
    96a8:	d005      	beq.n	96b6 <lv_img_cf_is_chroma_keyed+0x10>
    96aa:	d302      	bcc.n	96b2 <lv_img_cf_is_chroma_keyed+0xc>
    96ac:	3806      	subs	r0, #6
    96ae:	2804      	cmp	r0, #4
    96b0:	d901      	bls.n	96b6 <lv_img_cf_is_chroma_keyed+0x10>
            is_chroma_keyed = false;
    96b2:	2000      	movs	r0, #0
    96b4:	4770      	bx	lr
            is_chroma_keyed = true;
    96b6:	2001      	movs	r0, #1
}
    96b8:	4770      	bx	lr

000096ba <lv_img_cf_has_alpha>:
    switch(cf) {
    96ba:	3802      	subs	r0, #2
    96bc:	280c      	cmp	r0, #12
    96be:	d808      	bhi.n	96d2 <lv_img_cf_has_alpha+0x18>
    96c0:	e8df f000 	tbb	[pc, r0]
    96c4:	09070709 	.word	0x09070709
    96c8:	09090907 	.word	0x09090907
    96cc:	09090909 	.word	0x09090909
    96d0:	09          	.byte	0x09
    96d1:	00          	.byte	0x00
            has_alpha = false;
    96d2:	2000      	movs	r0, #0
    96d4:	4770      	bx	lr
            has_alpha = true;
    96d6:	2001      	movs	r0, #1
}
    96d8:	4770      	bx	lr
	...

000096dc <lv_draw_img>:
{
    96dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    96e0:	b08f      	sub	sp, #60	; 0x3c
    96e2:	4605      	mov	r5, r0
    96e4:	460e      	mov	r6, r1
    if(src == NULL) {
    96e6:	b13a      	cbz	r2, 96f8 <lv_draw_img+0x1c>
    96e8:	461c      	mov	r4, r3
    96ea:	4610      	mov	r0, r2
    if(dsc->opa <= LV_OPA_MIN) return;
    96ec:	781b      	ldrb	r3, [r3, #0]
    96ee:	2b05      	cmp	r3, #5
    96f0:	d810      	bhi.n	9714 <lv_draw_img+0x38>
}
    96f2:	b00f      	add	sp, #60	; 0x3c
    96f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LV_LOG_WARN("Image draw: src is NULL");
    96f8:	4b84      	ldr	r3, [pc, #528]	; (990c <lv_draw_img+0x230>)
    96fa:	9300      	str	r3, [sp, #0]
    96fc:	4b84      	ldr	r3, [pc, #528]	; (9910 <lv_draw_img+0x234>)
    96fe:	224d      	movs	r2, #77	; 0x4d
    9700:	4984      	ldr	r1, [pc, #528]	; (9914 <lv_draw_img+0x238>)
    9702:	2002      	movs	r0, #2
    9704:	4c84      	ldr	r4, [pc, #528]	; (9918 <lv_draw_img+0x23c>)
    9706:	47a0      	blx	r4
        show_error(coords, mask, "No\ndata");
    9708:	4a84      	ldr	r2, [pc, #528]	; (991c <lv_draw_img+0x240>)
    970a:	4631      	mov	r1, r6
    970c:	4628      	mov	r0, r5
    970e:	4b84      	ldr	r3, [pc, #528]	; (9920 <lv_draw_img+0x244>)
    9710:	4798      	blx	r3
        return;
    9712:	e7ee      	b.n	96f2 <lv_draw_img+0x16>
    lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor);
    9714:	89a1      	ldrh	r1, [r4, #12]
    9716:	4b83      	ldr	r3, [pc, #524]	; (9924 <lv_draw_img+0x248>)
    9718:	4798      	blx	r3
    if(cdsc == NULL) return LV_RES_INV;
    971a:	4607      	mov	r7, r0
    971c:	2800      	cmp	r0, #0
    971e:	f000 80b5 	beq.w	988c <lv_draw_img+0x1b0>
    bool chroma_keyed = lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf);
    9722:	f890 900c 	ldrb.w	r9, [r0, #12]
    9726:	f009 091f 	and.w	r9, r9, #31
    972a:	4648      	mov	r0, r9
    972c:	4b7e      	ldr	r3, [pc, #504]	; (9928 <lv_draw_img+0x24c>)
    972e:	4798      	blx	r3
    9730:	4680      	mov	r8, r0
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
    9732:	4648      	mov	r0, r9
    9734:	4b7d      	ldr	r3, [pc, #500]	; (992c <lv_draw_img+0x250>)
    9736:	4798      	blx	r3
    9738:	4681      	mov	r9, r0
    if(cdsc->dec_dsc.error_msg != NULL) {
    973a:	69bb      	ldr	r3, [r7, #24]
    973c:	b16b      	cbz	r3, 975a <lv_draw_img+0x7e>
        LV_LOG_WARN("Image draw error");
    973e:	4b7c      	ldr	r3, [pc, #496]	; (9930 <lv_draw_img+0x254>)
    9740:	9300      	str	r3, [sp, #0]
    9742:	4b7c      	ldr	r3, [pc, #496]	; (9934 <lv_draw_img+0x258>)
    9744:	22f7      	movs	r2, #247	; 0xf7
    9746:	4973      	ldr	r1, [pc, #460]	; (9914 <lv_draw_img+0x238>)
    9748:	2002      	movs	r0, #2
    974a:	4c73      	ldr	r4, [pc, #460]	; (9918 <lv_draw_img+0x23c>)
    974c:	47a0      	blx	r4
        show_error(coords, clip_area, cdsc->dec_dsc.error_msg);
    974e:	69ba      	ldr	r2, [r7, #24]
    9750:	4631      	mov	r1, r6
    9752:	4628      	mov	r0, r5
    9754:	4b72      	ldr	r3, [pc, #456]	; (9920 <lv_draw_img+0x244>)
    9756:	4798      	blx	r3
    9758:	e7cb      	b.n	96f2 <lv_draw_img+0x16>
    else if(cdsc->dec_dsc.img_data) {
    975a:	693b      	ldr	r3, [r7, #16]
    975c:	2b00      	cmp	r3, #0
    975e:	d049      	beq.n	97f4 <lv_draw_img+0x118>
    9760:	1e6b      	subs	r3, r5, #1
    9762:	1de8      	adds	r0, r5, #7
    9764:	aa0a      	add	r2, sp, #40	; 0x28
    9766:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    976a:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    976e:	4298      	cmp	r0, r3
    9770:	d1f9      	bne.n	9766 <lv_draw_img+0x8a>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
    9772:	8863      	ldrh	r3, [r4, #2]
    9774:	b91b      	cbnz	r3, 977e <lv_draw_img+0xa2>
    9776:	8922      	ldrh	r2, [r4, #8]
    9778:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    977c:	d028      	beq.n	97d0 <lv_draw_img+0xf4>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    977e:	88ea      	ldrh	r2, [r5, #6]
    9780:	3201      	adds	r2, #1
    9782:	8869      	ldrh	r1, [r5, #2]
    9784:	1a52      	subs	r2, r2, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    9786:	88a9      	ldrh	r1, [r5, #4]
    9788:	3101      	adds	r1, #1
    978a:	8828      	ldrh	r0, [r5, #0]
    978c:	1a09      	subs	r1, r1, r0
            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
    978e:	1d20      	adds	r0, r4, #4
    9790:	9001      	str	r0, [sp, #4]
    9792:	8920      	ldrh	r0, [r4, #8]
    9794:	9000      	str	r0, [sp, #0]
    9796:	b21b      	sxth	r3, r3
    9798:	b212      	sxth	r2, r2
    979a:	b209      	sxth	r1, r1
    979c:	a80a      	add	r0, sp, #40	; 0x28
    979e:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 9958 <lv_draw_img+0x27c>
    97a2:	47d0      	blx	sl
            map_area_rot.x1 += coords->x1;
    97a4:	882a      	ldrh	r2, [r5, #0]
    97a6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    97aa:	4413      	add	r3, r2
    97ac:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            map_area_rot.y1 += coords->y1;
    97b0:	886b      	ldrh	r3, [r5, #2]
    97b2:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
    97b6:	4419      	add	r1, r3
    97b8:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
            map_area_rot.x2 += coords->x1;
    97bc:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
    97c0:	440a      	add	r2, r1
    97c2:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
            map_area_rot.y2 += coords->y1;
    97c6:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
    97ca:	4413      	add	r3, r2
    97cc:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        union_ok = _lv_area_intersect(&mask_com, clip_area, &map_area_rot);
    97d0:	aa0a      	add	r2, sp, #40	; 0x28
    97d2:	4631      	mov	r1, r6
    97d4:	a80c      	add	r0, sp, #48	; 0x30
    97d6:	4b58      	ldr	r3, [pc, #352]	; (9938 <lv_draw_img+0x25c>)
    97d8:	4798      	blx	r3
        if(union_ok == false) {
    97da:	2800      	cmp	r0, #0
    97dc:	d089      	beq.n	96f2 <lv_draw_img+0x16>
        lv_draw_map(coords, &mask_com, cdsc->dec_dsc.img_data, draw_dsc, chroma_keyed, alpha_byte);
    97de:	693a      	ldr	r2, [r7, #16]
    97e0:	f8cd 9004 	str.w	r9, [sp, #4]
    97e4:	f8cd 8000 	str.w	r8, [sp]
    97e8:	4623      	mov	r3, r4
    97ea:	a90c      	add	r1, sp, #48	; 0x30
    97ec:	4628      	mov	r0, r5
    97ee:	4c53      	ldr	r4, [pc, #332]	; (993c <lv_draw_img+0x260>)
    97f0:	47a0      	blx	r4
    97f2:	e77e      	b.n	96f2 <lv_draw_img+0x16>
        union_ok = _lv_area_intersect(&mask_com, clip_area, coords);
    97f4:	462a      	mov	r2, r5
    97f6:	4631      	mov	r1, r6
    97f8:	a808      	add	r0, sp, #32
    97fa:	4b4f      	ldr	r3, [pc, #316]	; (9938 <lv_draw_img+0x25c>)
    97fc:	4798      	blx	r3
        if(union_ok == false) {
    97fe:	2800      	cmp	r0, #0
    9800:	f43f af77 	beq.w	96f2 <lv_draw_img+0x16>
    9804:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9808:	3301      	adds	r3, #1
    980a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    980e:	1a9b      	subs	r3, r3, r2
    9810:	b21b      	sxth	r3, r3
    9812:	9303      	str	r3, [sp, #12]
        uint8_t  * buf = _lv_mem_buf_get(lv_area_get_width(&mask_com) *
    9814:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    9818:	4b49      	ldr	r3, [pc, #292]	; (9940 <lv_draw_img+0x264>)
    981a:	4798      	blx	r3
    981c:	9002      	str	r0, [sp, #8]
    981e:	f10d 021f 	add.w	r2, sp, #31
    uint8_t * d8 = (uint8_t *)dst;
    9822:	ab0a      	add	r3, sp, #40	; 0x28
    while(len) {
    9824:	a80c      	add	r0, sp, #48	; 0x30
        *d8 = *s8;
    9826:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    982a:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    982e:	4283      	cmp	r3, r0
    9830:	d1f9      	bne.n	9826 <lv_draw_img+0x14a>
        lv_area_set_height(&line, 1);
    9832:	2101      	movs	r1, #1
    9834:	a80a      	add	r0, sp, #40	; 0x28
    9836:	4b43      	ldr	r3, [pc, #268]	; (9944 <lv_draw_img+0x268>)
    9838:	4798      	blx	r3
        int32_t x = mask_com.x1 - coords->x1;
    983a:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
    983e:	f9b5 2000 	ldrsh.w	r2, [r5]
        int32_t y = mask_com.y1 - coords->y1;
    9842:	f9bd a022 	ldrsh.w	sl, [sp, #34]	; 0x22
    9846:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
    984a:	ebaa 0101 	sub.w	r1, sl, r1
    984e:	4608      	mov	r0, r1
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
    9850:	f9bd 1026 	ldrsh.w	r1, [sp, #38]	; 0x26
    9854:	458a      	cmp	sl, r1
    9856:	dc55      	bgt.n	9904 <lv_draw_img+0x228>
            union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
    9858:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 9938 <lv_draw_img+0x25c>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
    985c:	1a9b      	subs	r3, r3, r2
    985e:	b21b      	sxth	r3, r3
    9860:	9305      	str	r3, [sp, #20]
    9862:	9507      	str	r5, [sp, #28]
    9864:	9406      	str	r4, [sp, #24]
    9866:	4644      	mov	r4, r8
    9868:	4680      	mov	r8, r0
    986a:	e023      	b.n	98b4 <lv_draw_img+0x1d8>
    986c:	9d07      	ldr	r5, [sp, #28]
                lv_img_decoder_close(&cdsc->dec_dsc);
    986e:	9804      	ldr	r0, [sp, #16]
    9870:	4b35      	ldr	r3, [pc, #212]	; (9948 <lv_draw_img+0x26c>)
    9872:	4798      	blx	r3
                LV_LOG_WARN("Image draw can't read the line");
    9874:	4b35      	ldr	r3, [pc, #212]	; (994c <lv_draw_img+0x270>)
    9876:	9300      	str	r3, [sp, #0]
    9878:	4b2e      	ldr	r3, [pc, #184]	; (9934 <lv_draw_img+0x258>)
    987a:	f44f 729a 	mov.w	r2, #308	; 0x134
    987e:	4925      	ldr	r1, [pc, #148]	; (9914 <lv_draw_img+0x238>)
    9880:	2002      	movs	r0, #2
    9882:	4c25      	ldr	r4, [pc, #148]	; (9918 <lv_draw_img+0x23c>)
    9884:	47a0      	blx	r4
                _lv_mem_buf_release(buf);
    9886:	9802      	ldr	r0, [sp, #8]
    9888:	4b31      	ldr	r3, [pc, #196]	; (9950 <lv_draw_img+0x274>)
    988a:	4798      	blx	r3
        LV_LOG_WARN("Image draw error");
    988c:	4b28      	ldr	r3, [pc, #160]	; (9930 <lv_draw_img+0x254>)
    988e:	9300      	str	r3, [sp, #0]
    9890:	4b1f      	ldr	r3, [pc, #124]	; (9910 <lv_draw_img+0x234>)
    9892:	2258      	movs	r2, #88	; 0x58
    9894:	491f      	ldr	r1, [pc, #124]	; (9914 <lv_draw_img+0x238>)
    9896:	2002      	movs	r0, #2
    9898:	4c1f      	ldr	r4, [pc, #124]	; (9918 <lv_draw_img+0x23c>)
    989a:	47a0      	blx	r4
        show_error(coords, mask, "No\ndata");
    989c:	4a1f      	ldr	r2, [pc, #124]	; (991c <lv_draw_img+0x240>)
    989e:	4631      	mov	r1, r6
    98a0:	4628      	mov	r0, r5
    98a2:	4b1f      	ldr	r3, [pc, #124]	; (9920 <lv_draw_img+0x244>)
    98a4:	4798      	blx	r3
        return;
    98a6:	e724      	b.n	96f2 <lv_draw_img+0x16>
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
    98a8:	f10a 0a01 	add.w	sl, sl, #1
    98ac:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
    98b0:	459a      	cmp	sl, r3
    98b2:	dc27      	bgt.n	9904 <lv_draw_img+0x228>
            union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
    98b4:	aa0a      	add	r2, sp, #40	; 0x28
    98b6:	4631      	mov	r1, r6
    98b8:	a80c      	add	r0, sp, #48	; 0x30
    98ba:	47d8      	blx	fp
            if(union_ok == false) continue;
    98bc:	2800      	cmp	r0, #0
    98be:	d0f3      	beq.n	98a8 <lv_draw_img+0x1cc>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
    98c0:	9704      	str	r7, [sp, #16]
    98c2:	9b02      	ldr	r3, [sp, #8]
    98c4:	9300      	str	r3, [sp, #0]
    98c6:	9b03      	ldr	r3, [sp, #12]
    98c8:	fa0f f288 	sxth.w	r2, r8
    98cc:	9905      	ldr	r1, [sp, #20]
    98ce:	4638      	mov	r0, r7
    98d0:	4d20      	ldr	r5, [pc, #128]	; (9954 <lv_draw_img+0x278>)
    98d2:	47a8      	blx	r5
            if(read_res != LV_RES_OK) {
    98d4:	2801      	cmp	r0, #1
    98d6:	d1c9      	bne.n	986c <lv_draw_img+0x190>
            lv_draw_map(&line, &mask_line, buf, draw_dsc, chroma_keyed, alpha_byte);
    98d8:	f8cd 9004 	str.w	r9, [sp, #4]
    98dc:	9400      	str	r4, [sp, #0]
    98de:	9b06      	ldr	r3, [sp, #24]
    98e0:	9a02      	ldr	r2, [sp, #8]
    98e2:	a90c      	add	r1, sp, #48	; 0x30
    98e4:	a80a      	add	r0, sp, #40	; 0x28
    98e6:	4d15      	ldr	r5, [pc, #84]	; (993c <lv_draw_img+0x260>)
    98e8:	47a8      	blx	r5
            line.y1++;
    98ea:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    98ee:	3301      	adds	r3, #1
    98f0:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
            line.y2++;
    98f4:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
    98f8:	3301      	adds	r3, #1
    98fa:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            y++;
    98fe:	f108 0801 	add.w	r8, r8, #1
    9902:	e7d1      	b.n	98a8 <lv_draw_img+0x1cc>
        _lv_mem_buf_release(buf);
    9904:	9802      	ldr	r0, [sp, #8]
    9906:	4b12      	ldr	r3, [pc, #72]	; (9950 <lv_draw_img+0x274>)
    9908:	4798      	blx	r3
    990a:	e6f2      	b.n	96f2 <lv_draw_img+0x16>
    990c:	00024d00 	.word	0x00024d00
    9910:	00024cb0 	.word	0x00024cb0
    9914:	00024cd0 	.word	0x00024cd0
    9918:	00012251 	.word	0x00012251
    991c:	00024d18 	.word	0x00024d18
    9920:	000095e9 	.word	0x000095e9
    9924:	0000f1f5 	.word	0x0000f1f5
    9928:	000096a7 	.word	0x000096a7
    992c:	000096bb 	.word	0x000096bb
    9930:	00024d20 	.word	0x00024d20
    9934:	00024cbc 	.word	0x00024cbc
    9938:	0001150d 	.word	0x0001150d
    993c:	00008dc1 	.word	0x00008dc1
    9940:	00012931 	.word	0x00012931
    9944:	000114e7 	.word	0x000114e7
    9948:	0000ff29 	.word	0x0000ff29
    994c:	00024d34 	.word	0x00024d34
    9950:	00012565 	.word	0x00012565
    9954:	0000ff05 	.word	0x0000ff05
    9958:	0000ec59 	.word	0x0000ec59

0000995c <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
    995c:	b158      	cbz	r0, 9976 <lv_img_src_get_type+0x1a>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
    995e:	7802      	ldrb	r2, [r0, #0]
    9960:	f1a2 0320 	sub.w	r3, r2, #32
    9964:	b2db      	uxtb	r3, r3
    9966:	2b5f      	cmp	r3, #95	; 0x5f
    9968:	d907      	bls.n	997a <lv_img_src_get_type+0x1e>
    else if(u8_p[0] >= 0x80) {
    996a:	b252      	sxtb	r2, r2
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
    996c:	2a00      	cmp	r2, #0
    996e:	bfb4      	ite	lt
    9970:	2002      	movlt	r0, #2
    9972:	2000      	movge	r0, #0
    9974:	4770      	bx	lr
    if(src == NULL) return img_src_type;
    9976:	2003      	movs	r0, #3
    9978:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
    997a:	2001      	movs	r0, #1
}
    997c:	4770      	bx	lr

0000997e <hex_char_to_num>:
 */
static uint8_t hex_char_to_num(char hex)
{
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
    997e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    9982:	b2db      	uxtb	r3, r3
    9984:	2b09      	cmp	r3, #9
    9986:	d917      	bls.n	99b8 <hex_char_to_num+0x3a>
        result = hex - '0';
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
    9988:	2860      	cmp	r0, #96	; 0x60
    998a:	bf84      	itt	hi
    998c:	3820      	subhi	r0, #32
    998e:	b2c0      	uxtbhi	r0, r0

        switch(hex) {
    9990:	3841      	subs	r0, #65	; 0x41
    9992:	2805      	cmp	r0, #5
    9994:	d80e      	bhi.n	99b4 <hex_char_to_num+0x36>
    9996:	e8df f000 	tbb	[pc, r0]
    999a:	0311      	.short	0x0311
    999c:	0b090705 	.word	0x0b090705
            case 'A':
                result = 10;
                break;
            case 'B':
                result = 11;
    99a0:	200b      	movs	r0, #11
    99a2:	4770      	bx	lr
                break;
            case 'C':
                result = 12;
    99a4:	200c      	movs	r0, #12
                break;
    99a6:	4770      	bx	lr
            case 'D':
                result = 13;
    99a8:	200d      	movs	r0, #13
                break;
    99aa:	4770      	bx	lr
            case 'E':
                result = 14;
    99ac:	200e      	movs	r0, #14
                break;
    99ae:	4770      	bx	lr
            case 'F':
                result = 15;
    99b0:	200f      	movs	r0, #15
                break;
    99b2:	4770      	bx	lr
            default:
                result = 0;
    99b4:	2000      	movs	r0, #0
                break;
    99b6:	4770      	bx	lr
        result = hex - '0';
    99b8:	4618      	mov	r0, r3
    99ba:	4770      	bx	lr
                result = 10;
    99bc:	200a      	movs	r0, #10
        }
    }

    return result;
}
    99be:	4770      	bx	lr

000099c0 <lv_draw_label_dsc_init>:
{
    99c0:	b510      	push	{r4, lr}
    99c2:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
    99c4:	211c      	movs	r1, #28
    99c6:	4b12      	ldr	r3, [pc, #72]	; (9a10 <lv_draw_label_dsc_init+0x50>)
    99c8:	4798      	blx	r3
    dsc->opa = LV_OPA_COVER;
    99ca:	23ff      	movs	r3, #255	; 0xff
    99cc:	7223      	strb	r3, [r4, #8]
    dsc->color = LV_COLOR_BLACK;
    99ce:	7823      	ldrb	r3, [r4, #0]
    99d0:	f36f 0304 	bfc	r3, #0, #5
    99d4:	7023      	strb	r3, [r4, #0]
    99d6:	8823      	ldrh	r3, [r4, #0]
    99d8:	f36f 134a 	bfc	r3, #5, #6
    99dc:	8023      	strh	r3, [r4, #0]
    99de:	0a1b      	lsrs	r3, r3, #8
    99e0:	f36f 03c7 	bfc	r3, #3, #5
    99e4:	7063      	strb	r3, [r4, #1]
    dsc->font = LV_THEME_DEFAULT_FONT_NORMAL;
    99e6:	4b0b      	ldr	r3, [pc, #44]	; (9a14 <lv_draw_label_dsc_init+0x54>)
    99e8:	6063      	str	r3, [r4, #4]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
    99ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
    99ee:	81e3      	strh	r3, [r4, #14]
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
    99f0:	8223      	strh	r3, [r4, #16]
    dsc->sel_color = LV_COLOR_BLUE;
    99f2:	78a3      	ldrb	r3, [r4, #2]
    99f4:	f043 031f 	orr.w	r3, r3, #31
    99f8:	70a3      	strb	r3, [r4, #2]
    99fa:	8863      	ldrh	r3, [r4, #2]
    99fc:	f36f 134a 	bfc	r3, #5, #6
    9a00:	8063      	strh	r3, [r4, #2]
    9a02:	0a1b      	lsrs	r3, r3, #8
    9a04:	f36f 03c7 	bfc	r3, #3, #5
    9a08:	70e3      	strb	r3, [r4, #3]
    dsc->bidi_dir = LV_BIDI_DIR_LTR;
    9a0a:	2300      	movs	r3, #0
    9a0c:	75a3      	strb	r3, [r4, #22]
    9a0e:	bd10      	pop	{r4, pc}
    9a10:	00012b2b 	.word	0x00012b2b
    9a14:	20000010 	.word	0x20000010

00009a18 <lv_draw_label>:
{
    9a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9a1c:	b0d9      	sub	sp, #356	; 0x164
    9a1e:	9c62      	ldr	r4, [sp, #392]	; 0x188
    if(dsc->opa <= LV_OPA_MIN) return;
    9a20:	7a15      	ldrb	r5, [r2, #8]
    9a22:	2d05      	cmp	r5, #5
    9a24:	d901      	bls.n	9a2a <lv_draw_label+0x12>
    if(txt[0] == '\0')  return;
    9a26:	781d      	ldrb	r5, [r3, #0]
    9a28:	b915      	cbnz	r5, 9a30 <lv_draw_label+0x18>
}
    9a2a:	b059      	add	sp, #356	; 0x164
    9a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9a30:	930a      	str	r3, [sp, #40]	; 0x28
    9a32:	4693      	mov	fp, r2
    9a34:	460a      	mov	r2, r1
    9a36:	910d      	str	r1, [sp, #52]	; 0x34
    9a38:	4605      	mov	r5, r0
    9a3a:	9013      	str	r0, [sp, #76]	; 0x4c
    const lv_font_t * font = dsc->font;
    9a3c:	f8db 3004 	ldr.w	r3, [fp, #4]
    9a40:	9305      	str	r3, [sp, #20]
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, mask);
    9a42:	4601      	mov	r1, r0
    9a44:	a856      	add	r0, sp, #344	; 0x158
    9a46:	4baa      	ldr	r3, [pc, #680]	; (9cf0 <lv_draw_label+0x2d8>)
    9a48:	4798      	blx	r3
    if(!clip_ok) return;
    9a4a:	2800      	cmp	r0, #0
    9a4c:	d0ed      	beq.n	9a2a <lv_draw_label+0x12>
    if((dsc->flag & LV_TXT_FLAG_EXPAND) == 0) {
    9a4e:	f89b 2017 	ldrb.w	r2, [fp, #23]
    9a52:	f012 0f02 	tst.w	r2, #2
    9a56:	d121      	bne.n	9a9c <lv_draw_label+0x84>
    9a58:	88ab      	ldrh	r3, [r5, #4]
    9a5a:	3301      	adds	r3, #1
    9a5c:	882a      	ldrh	r2, [r5, #0]
    9a5e:	1a9b      	subs	r3, r3, r2
        w = lv_area_get_width(coords);
    9a60:	b21b      	sxth	r3, r3
    int32_t line_height_font = lv_font_get_line_height(font);
    9a62:	9a05      	ldr	r2, [sp, #20]
    9a64:	f9b2 a008 	ldrsh.w	sl, [r2, #8]
    int32_t line_height = line_height_font + dsc->line_space;
    9a68:	f9bb 900a 	ldrsh.w	r9, [fp, #10]
    9a6c:	44d1      	add	r9, sl
    pos.x = coords->x1;
    9a6e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    9a70:	f9b1 2000 	ldrsh.w	r2, [r1]
    9a74:	921f      	str	r2, [sp, #124]	; 0x7c
    pos.y = coords->y1;
    9a76:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
    x_ofs = dsc->ofs_x;
    9a7a:	f9bb 2012 	ldrsh.w	r2, [fp, #18]
    9a7e:	921a      	str	r2, [sp, #104]	; 0x68
    y_ofs = dsc->ofs_y;
    9a80:	f9bb 1014 	ldrsh.w	r1, [fp, #20]
    pos.y += y_ofs;
    9a84:	1842      	adds	r2, r0, r1
    9a86:	b292      	uxth	r2, r2
    9a88:	b215      	sxth	r5, r2
    if(hint && y_ofs == 0 && coords->y1 < 0) {
    9a8a:	2c00      	cmp	r4, #0
    9a8c:	d04a      	beq.n	9b24 <lv_draw_label+0x10c>
    9a8e:	2900      	cmp	r1, #0
    9a90:	d14b      	bne.n	9b2a <lv_draw_label+0x112>
    9a92:	2800      	cmp	r0, #0
    9a94:	db14      	blt.n	9ac0 <lv_draw_label+0xa8>
    pos.y += y_ofs;
    9a96:	950e      	str	r5, [sp, #56]	; 0x38
    uint32_t line_start     = 0;
    9a98:	2600      	movs	r6, #0
    9a9a:	e029      	b.n	9af0 <lv_draw_label+0xd8>
        _lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
    9a9c:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
    9aa0:	9202      	str	r2, [sp, #8]
    9aa2:	f647 4218 	movw	r2, #31768	; 0x7c18
    9aa6:	9201      	str	r2, [sp, #4]
    9aa8:	f9bb 200a 	ldrsh.w	r2, [fp, #10]
    9aac:	9200      	str	r2, [sp, #0]
    9aae:	f8db 2004 	ldr.w	r2, [fp, #4]
    9ab2:	990a      	ldr	r1, [sp, #40]	; 0x28
    9ab4:	a83a      	add	r0, sp, #232	; 0xe8
    9ab6:	4d8f      	ldr	r5, [pc, #572]	; (9cf4 <lv_draw_label+0x2dc>)
    9ab8:	47a8      	blx	r5
        w = p.x;
    9aba:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
    9abe:	e7d0      	b.n	9a62 <lv_draw_label+0x4a>
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
    9ac0:	68a1      	ldr	r1, [r4, #8]
    9ac2:	1a08      	subs	r0, r1, r0
    9ac4:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
    9ac8:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
    9acc:	f5c9 7000 	rsb	r0, r9, #512	; 0x200
    9ad0:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
    9ad4:	dd05      	ble.n	9ae2 <lv_draw_label+0xca>
            hint->line_start = -1;
    9ad6:	f04f 32ff 	mov.w	r2, #4294967295
    9ada:	6022      	str	r2, [r4, #0]
    pos.y += y_ofs;
    9adc:	950e      	str	r5, [sp, #56]	; 0x38
    uint32_t line_start     = 0;
    9ade:	2600      	movs	r6, #0
    9ae0:	e006      	b.n	9af0 <lv_draw_label+0xd8>
        last_line_start = hint->line_start;
    9ae2:	6826      	ldr	r6, [r4, #0]
    if(hint && last_line_start >= 0) {
    9ae4:	2e00      	cmp	r6, #0
    9ae6:	db23      	blt.n	9b30 <lv_draw_label+0x118>
        pos.y += hint->y;
    9ae8:	6861      	ldr	r1, [r4, #4]
    9aea:	440a      	add	r2, r1
    9aec:	b212      	sxth	r2, r2
    9aee:	920e      	str	r2, [sp, #56]	; 0x38
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
    9af0:	b21b      	sxth	r3, r3
    9af2:	4619      	mov	r1, r3
    9af4:	9310      	str	r3, [sp, #64]	; 0x40
    9af6:	f9bb 200c 	ldrsh.w	r2, [fp, #12]
    9afa:	f89b 3017 	ldrb.w	r3, [fp, #23]
    9afe:	9300      	str	r3, [sp, #0]
    9b00:	460b      	mov	r3, r1
    9b02:	9905      	ldr	r1, [sp, #20]
    9b04:	980a      	ldr	r0, [sp, #40]	; 0x28
    9b06:	4430      	add	r0, r6
    9b08:	4d7b      	ldr	r5, [pc, #492]	; (9cf8 <lv_draw_label+0x2e0>)
    9b0a:	47a8      	blx	r5
    9b0c:	1983      	adds	r3, r0, r6
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
    9b0e:	462f      	mov	r7, r5
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
    9b10:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 9d0c <lv_draw_label+0x2f4>
    9b14:	4631      	mov	r1, r6
    9b16:	f8cd 9018 	str.w	r9, [sp, #24]
    9b1a:	46d1      	mov	r9, sl
    9b1c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    9b1e:	4626      	mov	r6, r4
    9b20:	461c      	mov	r4, r3
    while(pos.y + line_height_font < mask->y1) {
    9b22:	e00f      	b.n	9b44 <lv_draw_label+0x12c>
    pos.y += y_ofs;
    9b24:	950e      	str	r5, [sp, #56]	; 0x38
    uint32_t line_start     = 0;
    9b26:	2600      	movs	r6, #0
    9b28:	e7e2      	b.n	9af0 <lv_draw_label+0xd8>
    pos.y += y_ofs;
    9b2a:	950e      	str	r5, [sp, #56]	; 0x38
    uint32_t line_start     = 0;
    9b2c:	2600      	movs	r6, #0
    9b2e:	e7df      	b.n	9af0 <lv_draw_label+0xd8>
    pos.y += y_ofs;
    9b30:	950e      	str	r5, [sp, #56]	; 0x38
    uint32_t line_start     = 0;
    9b32:	2600      	movs	r6, #0
    9b34:	e7dc      	b.n	9af0 <lv_draw_label+0xd8>
    9b36:	4621      	mov	r1, r4
        if(txt[line_start] == '\0') return;
    9b38:	f89a 3000 	ldrb.w	r3, [sl]
    9b3c:	2b00      	cmp	r3, #0
    9b3e:	f43f af74 	beq.w	9a2a <lv_draw_label+0x12>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
    9b42:	4604      	mov	r4, r0
    while(pos.y + line_height_font < mask->y1) {
    9b44:	eb05 0309 	add.w	r3, r5, r9
    9b48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9b4a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
    9b4e:	4293      	cmp	r3, r2
    9b50:	da20      	bge.n	9b94 <lv_draw_label+0x17c>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
    9b52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9b54:	eb03 0a04 	add.w	sl, r3, r4
    9b58:	f9bb 200c 	ldrsh.w	r2, [fp, #12]
    9b5c:	f89b 3017 	ldrb.w	r3, [fp, #23]
    9b60:	9300      	str	r3, [sp, #0]
    9b62:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9b64:	9905      	ldr	r1, [sp, #20]
    9b66:	4650      	mov	r0, sl
    9b68:	47b8      	blx	r7
    9b6a:	4420      	add	r0, r4
    9b6c:	9b06      	ldr	r3, [sp, #24]
    9b6e:	441d      	add	r5, r3
    9b70:	b22d      	sxth	r5, r5
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
    9b72:	2e00      	cmp	r6, #0
    9b74:	d0df      	beq.n	9b36 <lv_draw_label+0x11e>
    9b76:	4545      	cmp	r5, r8
    9b78:	dbdd      	blt.n	9b36 <lv_draw_label+0x11e>
    9b7a:	6833      	ldr	r3, [r6, #0]
    9b7c:	2b00      	cmp	r3, #0
    9b7e:	dada      	bge.n	9b36 <lv_draw_label+0x11e>
            hint->line_start = line_start;
    9b80:	6034      	str	r4, [r6, #0]
            hint->y          = pos.y - coords->y1;
    9b82:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    9b84:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
    9b88:	1aeb      	subs	r3, r5, r3
    9b8a:	6073      	str	r3, [r6, #4]
            hint->coord_y    = coords->y1;
    9b8c:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
    9b90:	60b3      	str	r3, [r6, #8]
    9b92:	e7d0      	b.n	9b36 <lv_draw_label+0x11e>
    9b94:	460e      	mov	r6, r1
    9b96:	9407      	str	r4, [sp, #28]
    9b98:	f8dd 9018 	ldr.w	r9, [sp, #24]
    9b9c:	950e      	str	r5, [sp, #56]	; 0x38
    if(dsc->flag & LV_TXT_FLAG_CENTER) {
    9b9e:	f89b 2017 	ldrb.w	r2, [fp, #23]
    9ba2:	f012 0f04 	tst.w	r2, #4
    9ba6:	d12f      	bne.n	9c08 <lv_draw_label+0x1f0>
    else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
    9ba8:	f012 0f08 	tst.w	r2, #8
    9bac:	d145      	bne.n	9c3a <lv_draw_label+0x222>
    lv_opa_t opa = dsc->opa;
    9bae:	f89b 3008 	ldrb.w	r3, [fp, #8]
    9bb2:	930b      	str	r3, [sp, #44]	; 0x2c
    uint16_t sel_start = dsc->sel_start;
    9bb4:	f8bb 700e 	ldrh.w	r7, [fp, #14]
    uint16_t sel_end = dsc->sel_end;
    9bb8:	f8bb 3010 	ldrh.w	r3, [fp, #16]
    9bbc:	4619      	mov	r1, r3
    9bbe:	9308      	str	r3, [sp, #32]
    if(sel_start > sel_end) {
    9bc0:	429f      	cmp	r7, r3
    9bc2:	d902      	bls.n	9bca <lv_draw_label+0x1b2>
    9bc4:	463b      	mov	r3, r7
        sel_start = sel_end;
    9bc6:	460f      	mov	r7, r1
        sel_end = tmp;
    9bc8:	9308      	str	r3, [sp, #32]
    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
    9bca:	f89b 3018 	ldrb.w	r3, [fp, #24]
    9bce:	f013 0f03 	tst.w	r3, #3
    9bd2:	d149      	bne.n	9c68 <lv_draw_label+0x250>
    lv_draw_rect_dsc_init(&draw_dsc_sel);
    9bd4:	a83d      	add	r0, sp, #244	; 0xf4
    9bd6:	4b49      	ldr	r3, [pc, #292]	; (9cfc <lv_draw_label+0x2e4>)
    9bd8:	4798      	blx	r3
    draw_dsc_sel.bg_color = dsc->sel_color;
    9bda:	f8bb 3002 	ldrh.w	r3, [fp, #2]
    9bde:	f8ad 30f6 	strh.w	r3, [sp, #246]	; 0xf6
    9be2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9be4:	2bfa      	cmp	r3, #250	; 0xfa
    9be6:	bf88      	it	hi
    9be8:	23ff      	movhi	r3, #255	; 0xff
    9bea:	9316      	str	r3, [sp, #88]	; 0x58
    9bec:	fa1f f389 	uxth.w	r3, r9
    9bf0:	9317      	str	r3, [sp, #92]	; 0x5c
    9bf2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    9bf6:	9311      	str	r3, [sp, #68]	; 0x44
    while(txt[line_start] != '\0') {
    9bf8:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
    uint16_t par_start = 0;
    9bfa:	2300      	movs	r3, #0
    9bfc:	9319      	str	r3, [sp, #100]	; 0x64
    9bfe:	46ba      	mov	sl, r7
    9c00:	46d8      	mov	r8, fp
    9c02:	46b3      	mov	fp, r6
    while(txt[line_start] != '\0') {
    9c04:	f000 bdd3 	b.w	a7ae <lv_draw_label+0xd96>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
    9c08:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
    9c0c:	1ba1      	subs	r1, r4, r6
    9c0e:	9200      	str	r2, [sp, #0]
    9c10:	9a05      	ldr	r2, [sp, #20]
    9c12:	b289      	uxth	r1, r1
    9c14:	980a      	ldr	r0, [sp, #40]	; 0x28
    9c16:	4430      	add	r0, r6
    9c18:	4c39      	ldr	r4, [pc, #228]	; (9d00 <lv_draw_label+0x2e8>)
    9c1a:	47a0      	blx	r4
    9c1c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    9c1e:	8893      	ldrh	r3, [r2, #4]
    9c20:	3301      	adds	r3, #1
    9c22:	8812      	ldrh	r2, [r2, #0]
    9c24:	1a9b      	subs	r3, r3, r2
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
    9c26:	b21b      	sxth	r3, r3
    9c28:	1a18      	subs	r0, r3, r0
    9c2a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    9c2e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    9c30:	eb03 0360 	add.w	r3, r3, r0, asr #1
    9c34:	b21b      	sxth	r3, r3
    9c36:	931f      	str	r3, [sp, #124]	; 0x7c
    9c38:	e7b9      	b.n	9bae <lv_draw_label+0x196>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
    9c3a:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
    9c3e:	9907      	ldr	r1, [sp, #28]
    9c40:	1b89      	subs	r1, r1, r6
    9c42:	9200      	str	r2, [sp, #0]
    9c44:	9a05      	ldr	r2, [sp, #20]
    9c46:	b289      	uxth	r1, r1
    9c48:	980a      	ldr	r0, [sp, #40]	; 0x28
    9c4a:	4430      	add	r0, r6
    9c4c:	4c2c      	ldr	r4, [pc, #176]	; (9d00 <lv_draw_label+0x2e8>)
    9c4e:	47a0      	blx	r4
    9c50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    9c52:	8893      	ldrh	r3, [r2, #4]
    9c54:	3301      	adds	r3, #1
    9c56:	8812      	ldrh	r2, [r2, #0]
    9c58:	1a9b      	subs	r3, r3, r2
        pos.x += lv_area_get_width(coords) - line_width;
    9c5a:	b21b      	sxth	r3, r3
    9c5c:	1a1b      	subs	r3, r3, r0
    9c5e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    9c60:	4413      	add	r3, r2
    9c62:	b21b      	sxth	r3, r3
    9c64:	931f      	str	r3, [sp, #124]	; 0x7c
    9c66:	e7a2      	b.n	9bae <lv_draw_label+0x196>
        lv_draw_line_dsc_init(&line_dsc);
    9c68:	a853      	add	r0, sp, #332	; 0x14c
    9c6a:	4b26      	ldr	r3, [pc, #152]	; (9d04 <lv_draw_label+0x2ec>)
    9c6c:	4798      	blx	r3
        line_dsc.color = dsc->color;
    9c6e:	f8bb 3000 	ldrh.w	r3, [fp]
    9c72:	f8ad 314c 	strh.w	r3, [sp, #332]	; 0x14c
        line_dsc.width = (dsc->font->line_height + 5) / 10;    /*+5 for rounding*/
    9c76:	f8db 3004 	ldr.w	r3, [fp, #4]
    9c7a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    9c7e:	3305      	adds	r3, #5
    9c80:	4a21      	ldr	r2, [pc, #132]	; (9d08 <lv_draw_label+0x2f0>)
    9c82:	fb82 1203 	smull	r1, r2, r2, r3
    9c86:	17db      	asrs	r3, r3, #31
    9c88:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
    9c8c:	f8ad 314e 	strh.w	r3, [sp, #334]	; 0x14e
        line_dsc.opa = dsc->opa;
    9c90:	f89b 3008 	ldrb.w	r3, [fp, #8]
    9c94:	f88d 3154 	strb.w	r3, [sp, #340]	; 0x154
        line_dsc.blend_mode = dsc->blend_mode;
    9c98:	f89d 3155 	ldrb.w	r3, [sp, #341]	; 0x155
    9c9c:	f89b 2019 	ldrb.w	r2, [fp, #25]
    9ca0:	f362 0301 	bfi	r3, r2, #0, #2
    9ca4:	f88d 3155 	strb.w	r3, [sp, #341]	; 0x155
    9ca8:	e794      	b.n	9bd4 <lv_draw_label+0x1bc>
            uint16_t logical_char_pos = 0;
    9caa:	2500      	movs	r5, #0
    9cac:	e0aa      	b.n	9e04 <lv_draw_label+0x3ec>
    9cae:	2500      	movs	r5, #0
    9cb0:	e0a8      	b.n	9e04 <lv_draw_label+0x3ec>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
    9cb2:	9b06      	ldr	r3, [sp, #24]
    9cb4:	b92b      	cbnz	r3, 9cc2 <lv_draw_label+0x2aa>
                        par_start = i;
    9cb6:	f8bd 3148 	ldrh.w	r3, [sp, #328]	; 0x148
    9cba:	9319      	str	r3, [sp, #100]	; 0x64
                        cmd_state = CMD_STATE_PAR;
    9cbc:	2301      	movs	r3, #1
    9cbe:	9306      	str	r3, [sp, #24]
                        continue;
    9cc0:	e08a      	b.n	9dd8 <lv_draw_label+0x3c0>
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char */
    9cc2:	9b06      	ldr	r3, [sp, #24]
    9cc4:	2b01      	cmp	r3, #1
    9cc6:	f000 85f1 	beq.w	a8ac <lv_draw_label+0xe94>
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end */
    9cca:	2b02      	cmp	r3, #2
    9ccc:	f000 8533 	beq.w	a736 <lv_draw_label+0xd1e>
            lv_color_t color = dsc->color;
    9cd0:	f8b8 6000 	ldrh.w	r6, [r8]
    9cd4:	e0b5      	b.n	9e42 <lv_draw_label+0x42a>
                    if(letter == ' ') {
    9cd6:	2c20      	cmp	r4, #32
    9cd8:	d17e      	bne.n	9dd8 <lv_draw_label+0x3c0>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
    9cda:	9b52      	ldr	r3, [sp, #328]	; 0x148
    9cdc:	9a19      	ldr	r2, [sp, #100]	; 0x64
    9cde:	1a9b      	subs	r3, r3, r2
    9ce0:	2b07      	cmp	r3, #7
    9ce2:	d015      	beq.n	9d10 <lv_draw_label+0x2f8>
                            recolor.full = dsc->color.full;
    9ce4:	f8b8 3000 	ldrh.w	r3, [r8]
    9ce8:	930c      	str	r3, [sp, #48]	; 0x30
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
    9cea:	2302      	movs	r3, #2
    9cec:	9306      	str	r3, [sp, #24]
    9cee:	e073      	b.n	9dd8 <lv_draw_label+0x3c0>
    9cf0:	0001150d 	.word	0x0001150d
    9cf4:	00014071 	.word	0x00014071
    9cf8:	00013da5 	.word	0x00013da5
    9cfc:	0000c25d 	.word	0x0000c25d
    9d00:	00013fd1 	.word	0x00013fd1
    9d04:	0000a8d5 	.word	0x0000a8d5
    9d08:	66666667 	.word	0x66666667
    9d0c:	fffffc00 	.word	0xfffffc00
                            _lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
    9d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9d12:	1898      	adds	r0, r3, r2
    9d14:	1e43      	subs	r3, r0, #1
    9d16:	3005      	adds	r0, #5
    uint8_t * d8 = (uint8_t *)dst;
    9d18:	aa3a      	add	r2, sp, #232	; 0xe8
        *d8 = *s8;
    9d1a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    9d1e:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    9d22:	4283      	cmp	r3, r0
    9d24:	d1f9      	bne.n	9d1a <lv_draw_label+0x302>
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
    9d26:	f89d 00e8 	ldrb.w	r0, [sp, #232]	; 0xe8
    9d2a:	4c8c      	ldr	r4, [pc, #560]	; (9f5c <lv_draw_label+0x544>)
    9d2c:	47a0      	blx	r4
    9d2e:	4605      	mov	r5, r0
    9d30:	f89d 00e9 	ldrb.w	r0, [sp, #233]	; 0xe9
    9d34:	47a0      	blx	r4
    9d36:	eb00 1505 	add.w	r5, r0, r5, lsl #4
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
    9d3a:	f89d 00ea 	ldrb.w	r0, [sp, #234]	; 0xea
    9d3e:	47a0      	blx	r4
    9d40:	4606      	mov	r6, r0
    9d42:	f89d 00eb 	ldrb.w	r0, [sp, #235]	; 0xeb
    9d46:	47a0      	blx	r4
    9d48:	eb00 1606 	add.w	r6, r0, r6, lsl #4
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
    9d4c:	f89d 00ec 	ldrb.w	r0, [sp, #236]	; 0xec
    9d50:	47a0      	blx	r4
    9d52:	4607      	mov	r7, r0
    9d54:	f89d 00ed 	ldrb.w	r0, [sp, #237]	; 0xed
    9d58:	47a0      	blx	r4
    9d5a:	eb00 1307 	add.w	r3, r0, r7, lsl #4
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
    9d5e:	f3c3 03c4 	ubfx	r3, r3, #3, #5
    9d62:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    9d64:	f363 0204 	bfi	r2, r3, #0, #5
    9d68:	4613      	mov	r3, r2
    9d6a:	f3c6 0685 	ubfx	r6, r6, #2, #6
    9d6e:	f366 134a 	bfi	r3, r6, #5, #6
    9d72:	f3c5 05c4 	ubfx	r5, r5, #3, #5
    9d76:	f365 23cf 	bfi	r3, r5, #11, #5
    9d7a:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
    9d7e:	b29b      	uxth	r3, r3
    9d80:	930c      	str	r3, [sp, #48]	; 0x30
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
    9d82:	2302      	movs	r3, #2
    9d84:	9306      	str	r3, [sp, #24]
    9d86:	e027      	b.n	9dd8 <lv_draw_label+0x3c0>
                    sel_coords.x1 = pos.x;
    9d88:	f8ad a0e8 	strh.w	sl, [sp, #232]	; 0xe8
                    sel_coords.y1 = pos.y;
    9d8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9d8e:	f8ad 20ea 	strh.w	r2, [sp, #234]	; 0xea
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
    9d92:	f8b8 300c 	ldrh.w	r3, [r8, #12]
    9d96:	3b01      	subs	r3, #1
    9d98:	4453      	add	r3, sl
    9d9a:	4403      	add	r3, r0
    9d9c:	f8ad 30ec 	strh.w	r3, [sp, #236]	; 0xec
                    sel_coords.y2 = pos.y + line_height - 1;
    9da0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9da2:	3b01      	subs	r3, #1
    9da4:	4413      	add	r3, r2
    9da6:	f8ad 30ee 	strh.w	r3, [sp, #238]	; 0xee
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
    9daa:	aa3d      	add	r2, sp, #244	; 0xf4
    9dac:	990d      	ldr	r1, [sp, #52]	; 0x34
    9dae:	a83a      	add	r0, sp, #232	; 0xe8
    9db0:	4b6b      	ldr	r3, [pc, #428]	; (9f60 <lv_draw_label+0x548>)
    9db2:	4798      	blx	r3
    9db4:	e056      	b.n	9e64 <lv_draw_label+0x44c>
        LV_LOG_WARN("lv_draw_letter: font is NULL");
    9db6:	4b6b      	ldr	r3, [pc, #428]	; (9f64 <lv_draw_label+0x54c>)
    9db8:	9300      	str	r3, [sp, #0]
    9dba:	4b6b      	ldr	r3, [pc, #428]	; (9f68 <lv_draw_label+0x550>)
    9dbc:	f240 1297 	movw	r2, #407	; 0x197
    9dc0:	496a      	ldr	r1, [pc, #424]	; (9f6c <lv_draw_label+0x554>)
    9dc2:	2002      	movs	r0, #2
    9dc4:	4c6a      	ldr	r4, [pc, #424]	; (9f70 <lv_draw_label+0x558>)
    9dc6:	47a0      	blx	r4
            if(letter_w > 0) {
    9dc8:	2f00      	cmp	r7, #0
    9dca:	dd05      	ble.n	9dd8 <lv_draw_label+0x3c0>
                pos.x += letter_w + dsc->letter_space;
    9dcc:	f8b8 300c 	ldrh.w	r3, [r8, #12]
    9dd0:	4453      	add	r3, sl
    9dd2:	443b      	add	r3, r7
    9dd4:	fa0f fa83 	sxth.w	sl, r3
        while(i < line_end - line_start) {
    9dd8:	9952      	ldr	r1, [sp, #328]	; 0x148
    9dda:	9b07      	ldr	r3, [sp, #28]
    9ddc:	eba3 030b 	sub.w	r3, r3, fp
    9de0:	428b      	cmp	r3, r1
    9de2:	f240 84ac 	bls.w	a73e <lv_draw_label+0xd26>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
    9de6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9dea:	4599      	cmp	r9, r3
    9dec:	f43f af5d 	beq.w	9caa <lv_draw_label+0x292>
    9df0:	9a08      	ldr	r2, [sp, #32]
    9df2:	429a      	cmp	r2, r3
    9df4:	f43f af5b 	beq.w	9cae <lv_draw_label+0x296>
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
    9df8:	4459      	add	r1, fp
    9dfa:	980a      	ldr	r0, [sp, #40]	; 0x28
    9dfc:	4b5d      	ldr	r3, [pc, #372]	; (9f74 <lv_draw_label+0x55c>)
    9dfe:	681b      	ldr	r3, [r3, #0]
    9e00:	4798      	blx	r3
    9e02:	b285      	uxth	r5, r0
            uint32_t letter      = _lv_txt_encoded_next(bidi_txt, &i);
    9e04:	4e5c      	ldr	r6, [pc, #368]	; (9f78 <lv_draw_label+0x560>)
    9e06:	6833      	ldr	r3, [r6, #0]
    9e08:	a952      	add	r1, sp, #328	; 0x148
    9e0a:	9f09      	ldr	r7, [sp, #36]	; 0x24
    9e0c:	4638      	mov	r0, r7
    9e0e:	4798      	blx	r3
    9e10:	4604      	mov	r4, r0
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
    9e12:	6833      	ldr	r3, [r6, #0]
    9e14:	2100      	movs	r1, #0
    9e16:	9852      	ldr	r0, [sp, #328]	; 0x148
    9e18:	4438      	add	r0, r7
    9e1a:	4798      	blx	r3
            if((dsc->flag & LV_TXT_FLAG_RECOLOR) != 0) {
    9e1c:	f898 3017 	ldrb.w	r3, [r8, #23]
    9e20:	f013 0f01 	tst.w	r3, #1
    9e24:	d006      	beq.n	9e34 <lv_draw_label+0x41c>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
    9e26:	2c23      	cmp	r4, #35	; 0x23
    9e28:	f43f af43 	beq.w	9cb2 <lv_draw_label+0x29a>
                if(cmd_state == CMD_STATE_PAR) {
    9e2c:	9b06      	ldr	r3, [sp, #24]
    9e2e:	2b01      	cmp	r3, #1
    9e30:	f43f af51 	beq.w	9cd6 <lv_draw_label+0x2be>
            lv_color_t color = dsc->color;
    9e34:	f8b8 6000 	ldrh.w	r6, [r8]
            if(cmd_state == CMD_STATE_IN) color = recolor;
    9e38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9e3a:	9a06      	ldr	r2, [sp, #24]
    9e3c:	2a02      	cmp	r2, #2
    9e3e:	bf08      	it	eq
    9e40:	461e      	moveq	r6, r3
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
    9e42:	4602      	mov	r2, r0
    9e44:	4621      	mov	r1, r4
    9e46:	9805      	ldr	r0, [sp, #20]
    9e48:	4b4c      	ldr	r3, [pc, #304]	; (9f7c <lv_draw_label+0x564>)
    9e4a:	4798      	blx	r3
    9e4c:	4607      	mov	r7, r0
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
    9e4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9e52:	4599      	cmp	r9, r3
    9e54:	d006      	beq.n	9e64 <lv_draw_label+0x44c>
    9e56:	9908      	ldr	r1, [sp, #32]
    9e58:	4299      	cmp	r1, r3
    9e5a:	d003      	beq.n	9e64 <lv_draw_label+0x44c>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
    9e5c:	45a9      	cmp	r9, r5
    9e5e:	d801      	bhi.n	9e64 <lv_draw_label+0x44c>
    9e60:	42a9      	cmp	r1, r5
    9e62:	d891      	bhi.n	9d88 <lv_draw_label+0x370>
    if(opa < LV_OPA_MIN) return;
    9e64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9e66:	2b04      	cmp	r3, #4
    9e68:	d9ae      	bls.n	9dc8 <lv_draw_label+0x3b0>
    if(font_p == NULL) {
    9e6a:	9b05      	ldr	r3, [sp, #20]
    9e6c:	2b00      	cmp	r3, #0
    9e6e:	d0a2      	beq.n	9db6 <lv_draw_label+0x39e>
            lv_draw_letter(&pos, mask, font, letter, color, opa, dsc->blend_mode);
    9e70:	f898 3019 	ldrb.w	r3, [r8, #25]
    9e74:	930f      	str	r3, [sp, #60]	; 0x3c
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
    9e76:	2300      	movs	r3, #0
    9e78:	4622      	mov	r2, r4
    9e7a:	a93a      	add	r1, sp, #232	; 0xe8
    9e7c:	9805      	ldr	r0, [sp, #20]
    9e7e:	4d40      	ldr	r5, [pc, #256]	; (9f80 <lv_draw_label+0x568>)
    9e80:	47a8      	blx	r5
    if(g_ret == false)  {
    9e82:	b958      	cbnz	r0, 9e9c <lv_draw_label+0x484>
        if(letter >= 0x20) {
    9e84:	2c1f      	cmp	r4, #31
    9e86:	d99f      	bls.n	9dc8 <lv_draw_label+0x3b0>
            LV_LOG_WARN("lv_draw_letter: glyph dsc. not found");
    9e88:	4b3e      	ldr	r3, [pc, #248]	; (9f84 <lv_draw_label+0x56c>)
    9e8a:	9300      	str	r3, [sp, #0]
    9e8c:	4b36      	ldr	r3, [pc, #216]	; (9f68 <lv_draw_label+0x550>)
    9e8e:	f240 12a1 	movw	r2, #417	; 0x1a1
    9e92:	4936      	ldr	r1, [pc, #216]	; (9f6c <lv_draw_label+0x554>)
    9e94:	2002      	movs	r0, #2
    9e96:	4c36      	ldr	r4, [pc, #216]	; (9f70 <lv_draw_label+0x558>)
    9e98:	47a0      	blx	r4
    9e9a:	e795      	b.n	9dc8 <lv_draw_label+0x3b0>
    if((g.box_h == 0) && (g.box_w == 0)) return;
    9e9c:	f8bd 20ec 	ldrh.w	r2, [sp, #236]	; 0xec
    9ea0:	b91a      	cbnz	r2, 9eaa <lv_draw_label+0x492>
    9ea2:	f8bd 30ea 	ldrh.w	r3, [sp, #234]	; 0xea
    9ea6:	2b00      	cmp	r3, #0
    9ea8:	d08e      	beq.n	9dc8 <lv_draw_label+0x3b0>
    int32_t pos_x = pos_p->x + g.ofs_x;
    9eaa:	f9bd 50ee 	ldrsh.w	r5, [sp, #238]	; 0xee
    9eae:	4455      	add	r5, sl
    if(pos_x + g.box_w < clip_area->x1 ||
    9eb0:	f8bd 30ea 	ldrh.w	r3, [sp, #234]	; 0xea
    9eb4:	442b      	add	r3, r5
    9eb6:	980d      	ldr	r0, [sp, #52]	; 0x34
    9eb8:	f9b0 1000 	ldrsh.w	r1, [r0]
    9ebc:	428b      	cmp	r3, r1
    9ebe:	db83      	blt.n	9dc8 <lv_draw_label+0x3b0>
       pos_x > clip_area->x2 ||
    9ec0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
    if(pos_x + g.box_w < clip_area->x1 ||
    9ec4:	429d      	cmp	r5, r3
    9ec6:	f73f af7f 	bgt.w	9dc8 <lv_draw_label+0x3b0>
    int32_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
    9eca:	9b05      	ldr	r3, [sp, #20]
    9ecc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
    9ed0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    9ed4:	1acb      	subs	r3, r1, r3
    9ed6:	990e      	ldr	r1, [sp, #56]	; 0x38
    9ed8:	440b      	add	r3, r1
    9eda:	1a99      	subs	r1, r3, r2
    9edc:	f9bd 30f0 	ldrsh.w	r3, [sp, #240]	; 0xf0
    9ee0:	1acb      	subs	r3, r1, r3
       pos_y + g.box_h < clip_area->y1 ||
    9ee2:	9315      	str	r3, [sp, #84]	; 0x54
    9ee4:	441a      	add	r2, r3
    9ee6:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
       pos_x > clip_area->x2 ||
    9eea:	429a      	cmp	r2, r3
    9eec:	f6ff af6c 	blt.w	9dc8 <lv_draw_label+0x3b0>
       pos_y > clip_area->y2)  {
    9ef0:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
       pos_y + g.box_h < clip_area->y1 ||
    9ef4:	9915      	ldr	r1, [sp, #84]	; 0x54
    9ef6:	4299      	cmp	r1, r3
    9ef8:	f73f af66 	bgt.w	9dc8 <lv_draw_label+0x3b0>
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
    9efc:	4621      	mov	r1, r4
    9efe:	9805      	ldr	r0, [sp, #20]
    9f00:	4b21      	ldr	r3, [pc, #132]	; (9f88 <lv_draw_label+0x570>)
    9f02:	4798      	blx	r3
    if(map_p == NULL) {
    9f04:	4686      	mov	lr, r0
    9f06:	b1f0      	cbz	r0, 9f46 <lv_draw_label+0x52e>
    if(font_p->subpx) {
    9f08:	9b05      	ldr	r3, [sp, #20]
    9f0a:	7b1b      	ldrb	r3, [r3, #12]
    9f0c:	f013 0f03 	tst.w	r3, #3
    9f10:	f000 825e 	beq.w	a3d0 <lv_draw_label+0x9b8>
        draw_letter_subpx(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
    9f14:	b22b      	sxth	r3, r5
    9f16:	9318      	str	r3, [sp, #96]	; 0x60
    9f18:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
    9f1c:	931d      	str	r3, [sp, #116]	; 0x74
    uint32_t bpp = g->bpp;
    9f1e:	f89d 30f2 	ldrb.w	r3, [sp, #242]	; 0xf2
    9f22:	9312      	str	r3, [sp, #72]	; 0x48
    if(bpp == 3) bpp = 4;
    9f24:	2b03      	cmp	r3, #3
    9f26:	f000 80ff 	beq.w	a128 <lv_draw_label+0x710>
    switch(bpp) {
    9f2a:	3b01      	subs	r3, #1
    9f2c:	2b07      	cmp	r3, #7
    9f2e:	f200 8102 	bhi.w	a136 <lv_draw_label+0x71e>
    9f32:	e8df f013 	tbh	[pc, r3, lsl #1]
    9f36:	010a      	.short	0x010a
    9f38:	0100002d 	.word	0x0100002d
    9f3c:	010000fb 	.word	0x010000fb
    9f40:	01000100 	.word	0x01000100
    9f44:	0111      	.short	0x0111
        LV_LOG_WARN("lv_draw_letter: character's bitmap not found");
    9f46:	4b11      	ldr	r3, [pc, #68]	; (9f8c <lv_draw_label+0x574>)
    9f48:	9300      	str	r3, [sp, #0]
    9f4a:	4b07      	ldr	r3, [pc, #28]	; (9f68 <lv_draw_label+0x550>)
    9f4c:	f240 12b7 	movw	r2, #439	; 0x1b7
    9f50:	4906      	ldr	r1, [pc, #24]	; (9f6c <lv_draw_label+0x554>)
    9f52:	2002      	movs	r0, #2
    9f54:	4c06      	ldr	r4, [pc, #24]	; (9f70 <lv_draw_label+0x558>)
    9f56:	47a0      	blx	r4
    9f58:	e736      	b.n	9dc8 <lv_draw_label+0x3b0>
    9f5a:	bf00      	nop
    9f5c:	0000997f 	.word	0x0000997f
    9f60:	0000c325 	.word	0x0000c325
    9f64:	00024edc 	.word	0x00024edc
    9f68:	00024e6c 	.word	0x00024e6c
    9f6c:	00024eac 	.word	0x00024eac
    9f70:	00012251 	.word	0x00012251
    9f74:	20000064 	.word	0x20000064
    9f78:	20000058 	.word	0x20000058
    9f7c:	00010055 	.word	0x00010055
    9f80:	0001004d 	.word	0x0001004d
    9f84:	00024efc 	.word	0x00024efc
    9f88:	00010045 	.word	0x00010045
    9f8c:	00024f24 	.word	0x00024f24
            bitmask_init  = 0xC0;
    9f90:	23c0      	movs	r3, #192	; 0xc0
    9f92:	931b      	str	r3, [sp, #108]	; 0x6c
            bpp_opa_table = _lv_bpp2_opa_table;
    9f94:	4bac      	ldr	r3, [pc, #688]	; (a248 <lv_draw_label+0x830>)
    9f96:	9320      	str	r3, [sp, #128]	; 0x80
    int32_t box_w = g->box_w;
    9f98:	f8bd 30ea 	ldrh.w	r3, [sp, #234]	; 0xea
    9f9c:	931e      	str	r3, [sp, #120]	; 0x78
    int32_t box_h = g->box_h;
    9f9e:	f8bd 10ec 	ldrh.w	r1, [sp, #236]	; 0xec
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
    9fa2:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9fa4:	fb02 f203 	mul.w	r2, r2, r3
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : (clip_area->x1 - pos_x) * 3;
    9fa8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9faa:	f9b3 3000 	ldrsh.w	r3, [r3]
    9fae:	9c18      	ldr	r4, [sp, #96]	; 0x60
    9fb0:	429c      	cmp	r4, r3
    9fb2:	bfba      	itte	lt
    9fb4:	1b1b      	sublt	r3, r3, r4
    9fb6:	eb03 0343 	addlt.w	r3, r3, r3, lsl #1
    9fba:	2300      	movge	r3, #0
    9fbc:	9327      	str	r3, [sp, #156]	; 0x9c
    int32_t col_end   = pos_x + box_w / 3 <= clip_area->x2 ? box_w : (clip_area->x2 - pos_x + 1) * 3;
    9fbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9fc0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    9fc4:	981e      	ldr	r0, [sp, #120]	; 0x78
    9fc6:	4604      	mov	r4, r0
    9fc8:	48a0      	ldr	r0, [pc, #640]	; (a24c <lv_draw_label+0x834>)
    9fca:	fb80 4004 	smull	r4, r0, r0, r4
    9fce:	9c18      	ldr	r4, [sp, #96]	; 0x60
    9fd0:	4420      	add	r0, r4
    9fd2:	4298      	cmp	r0, r3
    9fd4:	bfc3      	ittte	gt
    9fd6:	1b1b      	subgt	r3, r3, r4
    9fd8:	3301      	addgt	r3, #1
    9fda:	eb03 0343 	addgt.w	r3, r3, r3, lsl #1
    9fde:	9b1e      	ldrle	r3, [sp, #120]	; 0x78
    9fe0:	9314      	str	r3, [sp, #80]	; 0x50
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
    9fe2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9fe4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    9fe8:	9c1d      	ldr	r4, [sp, #116]	; 0x74
    9fea:	429c      	cmp	r4, r3
    9fec:	bfb4      	ite	lt
    9fee:	1b1b      	sublt	r3, r3, r4
    9ff0:	2300      	movge	r3, #0
    9ff2:	9325      	str	r3, [sp, #148]	; 0x94
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
    9ff4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9ff6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    9ffa:	9c1d      	ldr	r4, [sp, #116]	; 0x74
    9ffc:	1908      	adds	r0, r1, r4
    9ffe:	4298      	cmp	r0, r3
    a000:	f340 80b1 	ble.w	a166 <lv_draw_label+0x74e>
    a004:	1b1b      	subs	r3, r3, r4
    a006:	3301      	adds	r3, #1
    a008:	9328      	str	r3, [sp, #160]	; 0xa0
    a00a:	f006 031f 	and.w	r3, r6, #31
    a00e:	9322      	str	r3, [sp, #136]	; 0x88
    a010:	f3c6 1345 	ubfx	r3, r6, #5, #6
    a014:	9324      	str	r3, [sp, #144]	; 0x90
    a016:	f3c6 23c4 	ubfx	r3, r6, #11, #5
    a01a:	9323      	str	r3, [sp, #140]	; 0x8c
    int32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
    a01c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a01e:	4618      	mov	r0, r3
    a020:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    a022:	fb00 f303 	mul.w	r3, r0, r3
    a026:	9825      	ldr	r0, [sp, #148]	; 0x94
    a028:	fb00 3202 	mla	r2, r0, r2, r3
    map_p += bit_ofs >> 3;
    a02c:	eb0e 06e2 	add.w	r6, lr, r2, asr #3
    a030:	9631      	str	r6, [sp, #196]	; 0xc4
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
    a032:	f002 0607 	and.w	r6, r2, #7
    int32_t mask_buf_size = box_w * box_h > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : g->box_w * g->box_h;
    a036:	981e      	ldr	r0, [sp, #120]	; 0x78
    a038:	fb01 f100 	mul.w	r1, r1, r0
    a03c:	f5b1 7ff0 	cmp.w	r1, #480	; 0x1e0
    a040:	bfa8      	it	ge
    a042:	f44f 71f0 	movge.w	r1, #480	; 0x1e0
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
    a046:	9129      	str	r1, [sp, #164]	; 0xa4
    a048:	4608      	mov	r0, r1
    a04a:	4c81      	ldr	r4, [pc, #516]	; (a250 <lv_draw_label+0x838>)
    a04c:	47a0      	blx	r4
    a04e:	9021      	str	r0, [sp, #132]	; 0x84
    lv_color_t * color_buf = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
    a050:	9929      	ldr	r1, [sp, #164]	; 0xa4
    a052:	0048      	lsls	r0, r1, #1
    a054:	47a0      	blx	r4
    a056:	9030      	str	r0, [sp, #192]	; 0xc0
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    a058:	4b7e      	ldr	r3, [pc, #504]	; (a254 <lv_draw_label+0x83c>)
    a05a:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    a05c:	4b7e      	ldr	r3, [pc, #504]	; (a258 <lv_draw_label+0x840>)
    a05e:	4798      	blx	r3
    a060:	f9b0 4010 	ldrsh.w	r4, [r0, #16]
    a064:	8a83      	ldrh	r3, [r0, #20]
    a066:	3301      	adds	r3, #1
    a068:	1b1b      	subs	r3, r3, r4
    int32_t vdb_width     = lv_area_get_width(&vdb->area);
    a06a:	b219      	sxth	r1, r3
    a06c:	9126      	str	r1, [sp, #152]	; 0x98
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
    a06e:	6881      	ldr	r1, [r0, #8]
    vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
    a070:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    a072:	4a76      	ldr	r2, [pc, #472]	; (a24c <lv_draw_label+0x834>)
    a074:	fb82 e203 	smull	lr, r2, r2, r3
    a078:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
    a07c:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
    a080:	981d      	ldr	r0, [sp, #116]	; 0x74
    a082:	1ac3      	subs	r3, r0, r3
    a084:	9826      	ldr	r0, [sp, #152]	; 0x98
    a086:	4686      	mov	lr, r0
    a088:	9818      	ldr	r0, [sp, #96]	; 0x60
    a08a:	fb0e 0303 	mla	r3, lr, r3, r0
    a08e:	1b1b      	subs	r3, r3, r4
    vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
    a090:	9c25      	ldr	r4, [sp, #148]	; 0x94
    a092:	fb0e 2004 	mla	r0, lr, r4, r2
    a096:	4403      	add	r3, r0
    a098:	eb01 0143 	add.w	r1, r1, r3, lsl #1
    a09c:	9118      	str	r1, [sp, #96]	; 0x60
    map_area.x1 = col_start / 3 + pos_x;
    a09e:	b2ad      	uxth	r5, r5
    a0a0:	442a      	add	r2, r5
    a0a2:	f8ad 20e0 	strh.w	r2, [sp, #224]	; 0xe0
    map_area.x2 = col_end / 3  + pos_x - 1;
    a0a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
    a0a8:	4696      	mov	lr, r2
    a0aa:	4968      	ldr	r1, [pc, #416]	; (a24c <lv_draw_label+0x834>)
    a0ac:	fb81 e30e 	smull	lr, r3, r1, lr
    a0b0:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    a0b4:	3d01      	subs	r5, #1
    a0b6:	442b      	add	r3, r5
    a0b8:	f8ad 30e4 	strh.w	r3, [sp, #228]	; 0xe4
    map_area.y1 = row_start + pos_y;
    a0bc:	9d15      	ldr	r5, [sp, #84]	; 0x54
    a0be:	4425      	add	r5, r4
    a0c0:	b22b      	sxth	r3, r5
    a0c2:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
    map_area.y2 = map_area.y1;
    a0c6:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
    a0ca:	4b64      	ldr	r3, [pc, #400]	; (a25c <lv_draw_label+0x844>)
    a0cc:	4798      	blx	r3
    a0ce:	902a      	str	r0, [sp, #168]	; 0xa8
    for(row = row_start ; row < row_end; row++) {
    a0d0:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    a0d2:	42ac      	cmp	r4, r5
    a0d4:	f280 8161 	bge.w	a39a <lv_draw_label+0x982>
        if((int32_t) mask_p + (col_end - col_start) < mask_buf_size) {
    a0d8:	9914      	ldr	r1, [sp, #80]	; 0x50
    a0da:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    a0dc:	1a8c      	subs	r4, r1, r2
    a0de:	942b      	str	r4, [sp, #172]	; 0xac
        col_bit += ((box_w - col_end) + col_start) * bpp;
    a0e0:	9d1e      	ldr	r5, [sp, #120]	; 0x78
    a0e2:	1a6b      	subs	r3, r5, r1
    a0e4:	4413      	add	r3, r2
    a0e6:	9912      	ldr	r1, [sp, #72]	; 0x48
    a0e8:	fb01 f303 	mul.w	r3, r1, r3
    a0ec:	932c      	str	r3, [sp, #176]	; 0xb0
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
    a0ee:	4a57      	ldr	r2, [pc, #348]	; (a24c <lv_draw_label+0x834>)
    a0f0:	fb82 2304 	smull	r2, r3, r2, r4
    a0f4:	ebc3 73e4 	rsb	r3, r3, r4, asr #31
    a0f8:	9826      	ldr	r0, [sp, #152]	; 0x98
    a0fa:	4403      	add	r3, r0
    a0fc:	005b      	lsls	r3, r3, #1
    a0fe:	932d      	str	r3, [sp, #180]	; 0xb4
    a100:	2300      	movs	r3, #0
    a102:	9326      	str	r3, [sp, #152]	; 0x98
                col_bit = 0;
    a104:	9315      	str	r3, [sp, #84]	; 0x54
    a106:	f8cd b0c8 	str.w	fp, [sp, #200]	; 0xc8
    a10a:	f8cd 90cc 	str.w	r9, [sp, #204]	; 0xcc
    a10e:	9734      	str	r7, [sp, #208]	; 0xd0
    a110:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
    a114:	f8dd b0c4 	ldr.w	fp, [sp, #196]	; 0xc4
    a118:	f8cd a0c4 	str.w	sl, [sp, #196]	; 0xc4
    a11c:	f8dd a0c0 	ldr.w	sl, [sp, #192]	; 0xc0
    a120:	f8cd 80d4 	str.w	r8, [sp, #212]	; 0xd4
    a124:	4688      	mov	r8, r1
    a126:	e0ea      	b.n	a2fe <lv_draw_label+0x8e6>
    if(bpp == 3) bpp = 4;
    a128:	2304      	movs	r3, #4
    a12a:	9312      	str	r3, [sp, #72]	; 0x48
            bitmask_init  = 0xF0;
    a12c:	23f0      	movs	r3, #240	; 0xf0
    a12e:	931b      	str	r3, [sp, #108]	; 0x6c
            bpp_opa_table = _lv_bpp4_opa_table;
    a130:	4b4b      	ldr	r3, [pc, #300]	; (a260 <lv_draw_label+0x848>)
    a132:	9320      	str	r3, [sp, #128]	; 0x80
    a134:	e730      	b.n	9f98 <lv_draw_label+0x580>
            LV_LOG_WARN("lv_draw_letter: invalid bpp not found");
    a136:	4b4b      	ldr	r3, [pc, #300]	; (a264 <lv_draw_label+0x84c>)
    a138:	9300      	str	r3, [sp, #0]
    a13a:	4b4b      	ldr	r3, [pc, #300]	; (a268 <lv_draw_label+0x850>)
    a13c:	f240 227a 	movw	r2, #634	; 0x27a
    a140:	494a      	ldr	r1, [pc, #296]	; (a26c <lv_draw_label+0x854>)
    a142:	2002      	movs	r0, #2
    a144:	4c4a      	ldr	r4, [pc, #296]	; (a270 <lv_draw_label+0x858>)
    a146:	47a0      	blx	r4
    a148:	e63e      	b.n	9dc8 <lv_draw_label+0x3b0>
    uint32_t bpp = g->bpp;
    a14a:	2301      	movs	r3, #1
    a14c:	9312      	str	r3, [sp, #72]	; 0x48
            bitmask_init  = 0x80;
    a14e:	2380      	movs	r3, #128	; 0x80
    a150:	931b      	str	r3, [sp, #108]	; 0x6c
            bpp_opa_table = _lv_bpp1_opa_table;
    a152:	4b48      	ldr	r3, [pc, #288]	; (a274 <lv_draw_label+0x85c>)
    a154:	9320      	str	r3, [sp, #128]	; 0x80
    a156:	e71f      	b.n	9f98 <lv_draw_label+0x580>
    uint32_t bpp = g->bpp;
    a158:	2308      	movs	r3, #8
    a15a:	9312      	str	r3, [sp, #72]	; 0x48
            bitmask_init  = 0xFF;
    a15c:	23ff      	movs	r3, #255	; 0xff
    a15e:	931b      	str	r3, [sp, #108]	; 0x6c
            bpp_opa_table = _lv_bpp8_opa_table;
    a160:	4b45      	ldr	r3, [pc, #276]	; (a278 <lv_draw_label+0x860>)
    a162:	9320      	str	r3, [sp, #128]	; 0x80
    a164:	e718      	b.n	9f98 <lv_draw_label+0x580>
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
    a166:	9128      	str	r1, [sp, #160]	; 0xa0
    a168:	e74f      	b.n	a00a <lv_draw_label+0x5f2>
                    px_opa = bpp == 8 ? letter_px : bpp_opa_table[letter_px];
    a16a:	f1b8 0f08 	cmp.w	r8, #8
    a16e:	d004      	beq.n	a17a <lv_draw_label+0x762>
    a170:	b2db      	uxtb	r3, r3
    a172:	9a20      	ldr	r2, [sp, #128]	; 0x80
    a174:	5cd2      	ldrb	r2, [r2, r3]
    a176:	e000      	b.n	a17a <lv_draw_label+0x762>
                px_opa = 0;
    a178:	9a15      	ldr	r2, [sp, #84]	; 0x54
            font_rgb[subpx_cnt] = px_opa;
    a17a:	ab58      	add	r3, sp, #352	; 0x160
    a17c:	440b      	add	r3, r1
    a17e:	f803 2c84 	strb.w	r2, [r3, #-132]
            subpx_cnt ++;
    a182:	3101      	adds	r1, #1
            if(subpx_cnt == 3) {
    a184:	2903      	cmp	r1, #3
    a186:	d028      	beq.n	a1da <lv_draw_label+0x7c2>
            if(col_bit < (int32_t) (8 - bpp)) {
    a188:	45b4      	cmp	ip, r6
    a18a:	f340 8094 	ble.w	a2b6 <lv_draw_label+0x89e>
                col_bit += bpp;
    a18e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a190:	4443      	add	r3, r8
    a192:	461e      	mov	r6, r3
                bitmask = bitmask >> bpp;
    a194:	fa2e fe08 	lsr.w	lr, lr, r8
        for(col = col_start; col < col_end; col++) {
    a198:	3501      	adds	r5, #1
    a19a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a19c:	42ab      	cmp	r3, r5
    a19e:	f000 8090 	beq.w	a2c2 <lv_draw_label+0x8aa>
            letter_px = (*map_p & bitmask) >> (8 - col_bit - bpp);
    a1a2:	9612      	str	r6, [sp, #72]	; 0x48
    a1a4:	f89b 3000 	ldrb.w	r3, [fp]
    a1a8:	ea03 020e 	and.w	r2, r3, lr
    a1ac:	ebac 0306 	sub.w	r3, ip, r6
    a1b0:	fa22 f303 	lsr.w	r3, r2, r3
            if(letter_px != 0) {
    a1b4:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
    a1b8:	d0de      	beq.n	a178 <lv_draw_label+0x760>
                if(opa == LV_OPA_COVER) {
    a1ba:	9816      	ldr	r0, [sp, #88]	; 0x58
    a1bc:	28ff      	cmp	r0, #255	; 0xff
    a1be:	d0d4      	beq.n	a16a <lv_draw_label+0x752>
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
    a1c0:	f1b8 0f08 	cmp.w	r8, #8
    a1c4:	bf0f      	iteee	eq
    a1c6:	b2da      	uxtbeq	r2, r3
                             : (uint32_t)((uint32_t)bpp_opa_table[letter_px] * opa) >> 8;
    a1c8:	b2db      	uxtbne	r3, r3
    a1ca:	9a20      	ldrne	r2, [sp, #128]	; 0x80
    a1cc:	5cd2      	ldrbne	r2, [r2, r3]
    a1ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a1d0:	fb03 f202 	mul.w	r2, r3, r2
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
    a1d4:	f3c2 2207 	ubfx	r2, r2, #8, #8
    a1d8:	e7cf      	b.n	a17a <lv_draw_label+0x762>
                res_color.ch.red = (uint32_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
    a1da:	f89d 10dc 	ldrb.w	r1, [sp, #220]	; 0xdc
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red, vdb_buf_tmp->ch.green, vdb_buf_tmp->ch.blue};
    a1de:	f89a 3001 	ldrb.w	r3, [sl, #1]
                res_color.ch.red = (uint32_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
    a1e2:	08db      	lsrs	r3, r3, #3
    a1e4:	f1c1 00ff 	rsb	r0, r1, #255	; 0xff
    a1e8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    a1ea:	fb01 f202 	mul.w	r2, r1, r2
    a1ee:	fb00 2303 	mla	r3, r0, r3, r2
    a1f2:	f3c3 2304 	ubfx	r3, r3, #8, #5
    a1f6:	931d      	str	r3, [sp, #116]	; 0x74
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
    a1f8:	f89d 30de 	ldrb.w	r3, [sp, #222]	; 0xde
    a1fc:	9318      	str	r3, [sp, #96]	; 0x60
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red, vdb_buf_tmp->ch.green, vdb_buf_tmp->ch.blue};
    a1fe:	f89a 2000 	ldrb.w	r2, [sl]
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
    a202:	f002 021f 	and.w	r2, r2, #31
    a206:	f1c3 00ff 	rsb	r0, r3, #255	; 0xff
    a20a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a20c:	9c18      	ldr	r4, [sp, #96]	; 0x60
    a20e:	fb04 f303 	mul.w	r3, r4, r3
    a212:	fb00 3202 	mla	r2, r0, r2, r3
    a216:	f3c2 2304 	ubfx	r3, r2, #8, #5
    a21a:	931e      	str	r3, [sp, #120]	; 0x78
                res_color.ch.green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
    a21c:	f89d 00dd 	ldrb.w	r0, [sp, #221]	; 0xdd
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red, vdb_buf_tmp->ch.green, vdb_buf_tmp->ch.blue};
    a220:	f8ba 3000 	ldrh.w	r3, [sl]
                res_color.ch.green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
    a224:	f3c3 1445 	ubfx	r4, r3, #5, #6
    a228:	f1c0 03ff 	rsb	r3, r0, #255	; 0xff
    a22c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    a22e:	fb00 f202 	mul.w	r2, r0, r2
    a232:	fb03 2304 	mla	r3, r3, r4, r2
    a236:	f3c3 2305 	ubfx	r3, r3, #8, #6
                if(font_rgb[0] == 0 && font_rgb[1] == 0 && font_rgb[2] == 0) mask_buf[mask_p] = LV_OPA_TRANSP;
    a23a:	b9f9      	cbnz	r1, a27c <lv_draw_label+0x864>
    a23c:	b9f0      	cbnz	r0, a27c <lv_draw_label+0x864>
    a23e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    a240:	b9e2      	cbnz	r2, a27c <lv_draw_label+0x864>
    a242:	9a21      	ldr	r2, [sp, #132]	; 0x84
    a244:	55d1      	strb	r1, [r2, r7]
    a246:	e01d      	b.n	a284 <lv_draw_label+0x86c>
    a248:	00024d58 	.word	0x00024d58
    a24c:	55555556 	.word	0x55555556
    a250:	00012931 	.word	0x00012931
    a254:	00005f5d 	.word	0x00005f5d
    a258:	00010fd1 	.word	0x00010fd1
    a25c:	0000beb9 	.word	0x0000beb9
    a260:	00024d5c 	.word	0x00024d5c
    a264:	00024f54 	.word	0x00024f54
    a268:	00024e7c 	.word	0x00024e7c
    a26c:	00024eac 	.word	0x00024eac
    a270:	00012251 	.word	0x00012251
    a274:	00024d54 	.word	0x00024d54
    a278:	00024d6c 	.word	0x00024d6c
                else mask_buf[mask_p] = LV_OPA_COVER;
    a27c:	9a21      	ldr	r2, [sp, #132]	; 0x84
    a27e:	f04f 31ff 	mov.w	r1, #4294967295
    a282:	55d1      	strb	r1, [r2, r7]
                color_buf[mask_p] = res_color;
    a284:	eb09 0047 	add.w	r0, r9, r7, lsl #1
    a288:	f819 1017 	ldrb.w	r1, [r9, r7, lsl #1]
    a28c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    a28e:	f362 0104 	bfi	r1, r2, #0, #5
    a292:	f809 1017 	strb.w	r1, [r9, r7, lsl #1]
    a296:	f839 2017 	ldrh.w	r2, [r9, r7, lsl #1]
    a29a:	f363 124a 	bfi	r2, r3, #5, #6
    a29e:	f829 2017 	strh.w	r2, [r9, r7, lsl #1]
    a2a2:	0a12      	lsrs	r2, r2, #8
    a2a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a2a6:	f363 02c7 	bfi	r2, r3, #3, #5
    a2aa:	7042      	strb	r2, [r0, #1]
                mask_p++;
    a2ac:	3701      	adds	r7, #1
                vdb_buf_tmp++;
    a2ae:	f10a 0a02 	add.w	sl, sl, #2
                subpx_cnt = 0;
    a2b2:	2100      	movs	r1, #0
    a2b4:	e768      	b.n	a188 <lv_draw_label+0x770>
                map_p++;
    a2b6:	f10b 0b01 	add.w	fp, fp, #1
                bitmask = bitmask_init;
    a2ba:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
                col_bit = 0;
    a2be:	9e15      	ldr	r6, [sp, #84]	; 0x54
    a2c0:	e76a      	b.n	a198 <lv_draw_label+0x780>
    a2c2:	4653      	mov	r3, sl
    a2c4:	46ca      	mov	sl, r9
    a2c6:	4699      	mov	r9, r3
        if(other_mask_cnt) {
    a2c8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    a2ca:	bb4b      	cbnz	r3, a320 <lv_draw_label+0x908>
        if((int32_t) mask_p + (col_end - col_start) < mask_buf_size) {
    a2cc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    a2ce:	443b      	add	r3, r7
    a2d0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    a2d2:	429a      	cmp	r2, r3
    a2d4:	dd41      	ble.n	a35a <lv_draw_label+0x942>
            map_area.y2 ++;
    a2d6:	f8bd 30e6 	ldrh.w	r3, [sp, #230]	; 0xe6
    a2da:	3301      	adds	r3, #1
    a2dc:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
    a2e0:	9726      	str	r7, [sp, #152]	; 0x98
        col_bit += ((box_w - col_end) + col_start) * bpp;
    a2e2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    a2e4:	441e      	add	r6, r3
        map_p += (col_bit >> 3);
    a2e6:	eb0b 0be6 	add.w	fp, fp, r6, asr #3
        col_bit = col_bit & 0x7;
    a2ea:	f006 0607 	and.w	r6, r6, #7
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
    a2ee:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    a2f0:	4499      	add	r9, r3
    for(row = row_start ; row < row_end; row++) {
    a2f2:	9b25      	ldr	r3, [sp, #148]	; 0x94
    a2f4:	3301      	adds	r3, #1
    a2f6:	9325      	str	r3, [sp, #148]	; 0x94
    a2f8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    a2fa:	4293      	cmp	r3, r2
    a2fc:	da44      	bge.n	a388 <lv_draw_label+0x970>
        bitmask = bitmask_init >> col_bit;
    a2fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    a300:	fa23 fe06 	lsr.w	lr, r3, r6
        for(col = col_start; col < col_end; col++) {
    a304:	9d27      	ldr	r5, [sp, #156]	; 0x9c
    a306:	9a14      	ldr	r2, [sp, #80]	; 0x50
    a308:	4295      	cmp	r5, r2
    a30a:	da07      	bge.n	a31c <lv_draw_label+0x904>
    a30c:	9f26      	ldr	r7, [sp, #152]	; 0x98
    a30e:	2100      	movs	r1, #0
    a310:	f1c8 0c08 	rsb	ip, r8, #8
                else mask_buf[mask_p] = LV_OPA_COVER;
    a314:	464b      	mov	r3, r9
    a316:	46d1      	mov	r9, sl
    a318:	469a      	mov	sl, r3
    a31a:	e742      	b.n	a1a2 <lv_draw_label+0x78a>
        for(col = col_start; col < col_end; col++) {
    a31c:	9f26      	ldr	r7, [sp, #152]	; 0x98
    a31e:	e7d3      	b.n	a2c8 <lv_draw_label+0x8b0>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, map_area.x1, map_area.y2,
    a320:	9b26      	ldr	r3, [sp, #152]	; 0x98
    a322:	9a21      	ldr	r2, [sp, #132]	; 0x84
    a324:	4413      	add	r3, r2
    a326:	461c      	mov	r4, r3
    a328:	f9bd 10e0 	ldrsh.w	r1, [sp, #224]	; 0xe0
    a32c:	f8bd 30e4 	ldrh.w	r3, [sp, #228]	; 0xe4
    a330:	3301      	adds	r3, #1
    a332:	1a5b      	subs	r3, r3, r1
    a334:	b21b      	sxth	r3, r3
    a336:	f9bd 20e6 	ldrsh.w	r2, [sp, #230]	; 0xe6
    a33a:	4620      	mov	r0, r4
    a33c:	4dab      	ldr	r5, [pc, #684]	; (a5ec <lv_draw_label+0xbd4>)
    a33e:	47a8      	blx	r5
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
    a340:	2800      	cmp	r0, #0
    a342:	d1c3      	bne.n	a2cc <lv_draw_label+0x8b4>
    a344:	f8bd 10e4 	ldrh.w	r1, [sp, #228]	; 0xe4
    a348:	3101      	adds	r1, #1
    a34a:	f8bd 30e0 	ldrh.w	r3, [sp, #224]	; 0xe0
    a34e:	1ac9      	subs	r1, r1, r3
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&map_area));
    a350:	b209      	sxth	r1, r1
    a352:	4620      	mov	r0, r4
    a354:	4ba6      	ldr	r3, [pc, #664]	; (a5f0 <lv_draw_label+0xbd8>)
    a356:	4798      	blx	r3
    a358:	e7b8      	b.n	a2cc <lv_draw_label+0x8b4>
            _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
    a35a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a35c:	9302      	str	r3, [sp, #8]
    a35e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a360:	9301      	str	r3, [sp, #4]
    a362:	2302      	movs	r3, #2
    a364:	9300      	str	r3, [sp, #0]
    a366:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a368:	4652      	mov	r2, sl
    a36a:	a938      	add	r1, sp, #224	; 0xe0
    a36c:	980d      	ldr	r0, [sp, #52]	; 0x34
    a36e:	4ca1      	ldr	r4, [pc, #644]	; (a5f4 <lv_draw_label+0xbdc>)
    a370:	47a0      	blx	r4
            map_area.y1 = map_area.y2 + 1;
    a372:	f8bd 30e6 	ldrh.w	r3, [sp, #230]	; 0xe6
    a376:	3301      	adds	r3, #1
    a378:	b21b      	sxth	r3, r3
    a37a:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
            map_area.y2 = map_area.y1;
    a37e:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
            mask_p = 0;
    a382:	2300      	movs	r3, #0
    a384:	9326      	str	r3, [sp, #152]	; 0x98
    a386:	e7ac      	b.n	a2e2 <lv_draw_label+0x8ca>
    a388:	f8dd b0c8 	ldr.w	fp, [sp, #200]	; 0xc8
    a38c:	f8dd 90cc 	ldr.w	r9, [sp, #204]	; 0xcc
    a390:	9f34      	ldr	r7, [sp, #208]	; 0xd0
    a392:	f8dd a0c4 	ldr.w	sl, [sp, #196]	; 0xc4
    a396:	f8dd 80d4 	ldr.w	r8, [sp, #212]	; 0xd4
    if(map_area.y1 != map_area.y2) {
    a39a:	f9bd 30e6 	ldrsh.w	r3, [sp, #230]	; 0xe6
    a39e:	f9bd 20e2 	ldrsh.w	r2, [sp, #226]	; 0xe2
    a3a2:	429a      	cmp	r2, r3
    a3a4:	d00e      	beq.n	a3c4 <lv_draw_label+0x9ac>
        map_area.y2--;
    a3a6:	3b01      	subs	r3, #1
    a3a8:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
        _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
    a3ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a3ae:	9302      	str	r3, [sp, #8]
    a3b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a3b2:	9301      	str	r3, [sp, #4]
    a3b4:	2302      	movs	r3, #2
    a3b6:	9300      	str	r3, [sp, #0]
    a3b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a3ba:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    a3bc:	a938      	add	r1, sp, #224	; 0xe0
    a3be:	980d      	ldr	r0, [sp, #52]	; 0x34
    a3c0:	4c8c      	ldr	r4, [pc, #560]	; (a5f4 <lv_draw_label+0xbdc>)
    a3c2:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
    a3c4:	9821      	ldr	r0, [sp, #132]	; 0x84
    a3c6:	4c8c      	ldr	r4, [pc, #560]	; (a5f8 <lv_draw_label+0xbe0>)
    a3c8:	47a0      	blx	r4
    _lv_mem_buf_release(color_buf);
    a3ca:	9830      	ldr	r0, [sp, #192]	; 0xc0
    a3cc:	47a0      	blx	r4
    a3ce:	e4fb      	b.n	9dc8 <lv_draw_label+0x3b0>
        draw_letter_normal(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
    a3d0:	b22c      	sxth	r4, r5
    a3d2:	f9bd 0054 	ldrsh.w	r0, [sp, #84]	; 0x54
    a3d6:	f8ad 608c 	strh.w	r6, [sp, #140]	; 0x8c
    uint32_t bpp = g->bpp;
    a3da:	f89d 30f2 	ldrb.w	r3, [sp, #242]	; 0xf2
    a3de:	9320      	str	r3, [sp, #128]	; 0x80
    if(bpp == 3) bpp = 4;
    a3e0:	2b03      	cmp	r3, #3
    a3e2:	f000 80c1 	beq.w	a568 <lv_draw_label+0xb50>
    switch(bpp) {
    a3e6:	3b01      	subs	r3, #1
    a3e8:	2b07      	cmp	r3, #7
    a3ea:	f200 80c5 	bhi.w	a578 <lv_draw_label+0xb60>
    a3ee:	e8df f013 	tbh	[pc, r3, lsl #1]
    a3f2:	00cd      	.short	0x00cd
    a3f4:	00c30008 	.word	0x00c30008
    a3f8:	00c300bd 	.word	0x00c300bd
    a3fc:	00c300c3 	.word	0x00c300c3
    a400:	00d5      	.short	0x00d5
            shades = 4;
    a402:	2304      	movs	r3, #4
            bitmask_init  = 0xC0;
    a404:	22c0      	movs	r2, #192	; 0xc0
    a406:	9212      	str	r2, [sp, #72]	; 0x48
            bpp_opa_table_p = _lv_bpp2_opa_table;
    a408:	4a7c      	ldr	r2, [pc, #496]	; (a5fc <lv_draw_label+0xbe4>)
    a40a:	9222      	str	r2, [sp, #136]	; 0x88
    if(opa < LV_OPA_MAX) {
    a40c:	9916      	ldr	r1, [sp, #88]	; 0x58
    a40e:	29f9      	cmp	r1, #249	; 0xf9
    a410:	d82b      	bhi.n	a46a <lv_draw_label+0xa52>
        if(prev_opa != opa || prev_bpp != bpp) {
    a412:	4a7b      	ldr	r2, [pc, #492]	; (a600 <lv_draw_label+0xbe8>)
    a414:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
    a418:	428a      	cmp	r2, r1
    a41a:	f000 80c8 	beq.w	a5ae <lv_draw_label+0xb96>
            for(i = 0; i < shades; i++) {
    a41e:	b1d3      	cbz	r3, a456 <lv_draw_label+0xa3e>
    a420:	9e22      	ldr	r6, [sp, #136]	; 0x88
    a422:	1e72      	subs	r2, r6, #1
    a424:	4976      	ldr	r1, [pc, #472]	; (a600 <lv_draw_label+0xbe8>)
    a426:	3901      	subs	r1, #1
    a428:	3b01      	subs	r3, #1
    a42a:	eb06 0c03 	add.w	ip, r6, r3
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
    a42e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a430:	461e      	mov	r6, r3
    a432:	f8cd b050 	str.w	fp, [sp, #80]	; 0x50
    a436:	469b      	mov	fp, r3
    a438:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    a43c:	2bff      	cmp	r3, #255	; 0xff
    a43e:	bf1a      	itte	ne
    a440:	fb0b f303 	mulne.w	r3, fp, r3
    a444:	f3c3 2307 	ubfxne	r3, r3, #8, #8
    a448:	4633      	moveq	r3, r6
    a44a:	f801 3f01 	strb.w	r3, [r1, #1]!
            for(i = 0; i < shades; i++) {
    a44e:	4594      	cmp	ip, r2
    a450:	d1f2      	bne.n	a438 <lv_draw_label+0xa20>
    a452:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
        prev_opa = opa;
    a456:	4b6a      	ldr	r3, [pc, #424]	; (a600 <lv_draw_label+0xbe8>)
    a458:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
    a45c:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
        prev_bpp = bpp;
    a460:	9a20      	ldr	r2, [sp, #128]	; 0x80
    a462:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        bpp_opa_table_p = opa_table;
    a466:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    a468:	9322      	str	r3, [sp, #136]	; 0x88
    int32_t box_w = g->box_w;
    a46a:	f8bd 30ea 	ldrh.w	r3, [sp, #234]	; 0xea
    a46e:	9324      	str	r3, [sp, #144]	; 0x90
    int32_t box_h = g->box_h;
    a470:	f8bd 20ec 	ldrh.w	r2, [sp, #236]	; 0xec
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
    a474:	9920      	ldr	r1, [sp, #128]	; 0x80
    a476:	fb01 fc03 	mul.w	ip, r1, r3
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
    a47a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a47c:	f9b3 3000 	ldrsh.w	r3, [r3]
    a480:	429c      	cmp	r4, r3
    a482:	bfb4      	ite	lt
    a484:	1b1b      	sublt	r3, r3, r4
    a486:	2300      	movge	r3, #0
    a488:	9314      	str	r3, [sp, #80]	; 0x50
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
    a48a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a48c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    a490:	9924      	ldr	r1, [sp, #144]	; 0x90
    a492:	4421      	add	r1, r4
    a494:	4299      	cmp	r1, r3
    a496:	bfc6      	itte	gt
    a498:	1b1b      	subgt	r3, r3, r4
    a49a:	3301      	addgt	r3, #1
    a49c:	9b24      	ldrle	r3, [sp, #144]	; 0x90
    a49e:	9325      	str	r3, [sp, #148]	; 0x94
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
    a4a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a4a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    a4a6:	4298      	cmp	r0, r3
    a4a8:	bfb4      	ite	lt
    a4aa:	1a1b      	sublt	r3, r3, r0
    a4ac:	2300      	movge	r3, #0
    a4ae:	9326      	str	r3, [sp, #152]	; 0x98
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
    a4b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a4b2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    a4b6:	1811      	adds	r1, r2, r0
    a4b8:	4299      	cmp	r1, r3
    a4ba:	bfc3      	ittte	gt
    a4bc:	1a1b      	subgt	r3, r3, r0
    a4be:	3301      	addgt	r3, #1
    a4c0:	931b      	strgt	r3, [sp, #108]	; 0x6c
    a4c2:	921b      	strle	r2, [sp, #108]	; 0x6c
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
    a4c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a4c6:	9321      	str	r3, [sp, #132]	; 0x84
    a4c8:	9920      	ldr	r1, [sp, #128]	; 0x80
    a4ca:	fb03 f401 	mul.w	r4, r3, r1
    a4ce:	9826      	ldr	r0, [sp, #152]	; 0x98
    a4d0:	fb00 440c 	mla	r4, r0, ip, r4
    map_p += bit_ofs >> 3;
    a4d4:	eb0e 06d4 	add.w	r6, lr, r4, lsr #3
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
    a4d8:	f004 0407 	and.w	r4, r4, #7
    uint32_t mask_buf_size = box_w * box_h > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : box_w * box_h;
    a4dc:	9924      	ldr	r1, [sp, #144]	; 0x90
    a4de:	fb02 fe01 	mul.w	lr, r2, r1
    a4e2:	4672      	mov	r2, lr
    a4e4:	f5be 7ff0 	cmp.w	lr, #480	; 0x1e0
    a4e8:	bfa8      	it	ge
    a4ea:	f44f 72f0 	movge.w	r2, #480	; 0x1e0
    a4ee:	921d      	str	r2, [sp, #116]	; 0x74
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
    a4f0:	4610      	mov	r0, r2
    a4f2:	4b44      	ldr	r3, [pc, #272]	; (a604 <lv_draw_label+0xbec>)
    a4f4:	4798      	blx	r3
    a4f6:	9018      	str	r0, [sp, #96]	; 0x60
    fill_area.x1 = col_start + pos_x;
    a4f8:	b2ad      	uxth	r5, r5
    a4fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a4fc:	18eb      	adds	r3, r5, r3
    a4fe:	f8ad 30e0 	strh.w	r3, [sp, #224]	; 0xe0
    fill_area.x2 = col_end  + pos_x - 1;
    a502:	3d01      	subs	r5, #1
    a504:	9a25      	ldr	r2, [sp, #148]	; 0x94
    a506:	18ab      	adds	r3, r5, r2
    a508:	f8ad 30e4 	strh.w	r3, [sp, #228]	; 0xe4
    fill_area.y1 = row_start + pos_y;
    a50c:	9d15      	ldr	r5, [sp, #84]	; 0x54
    a50e:	9826      	ldr	r0, [sp, #152]	; 0x98
    a510:	4405      	add	r5, r0
    a512:	b22b      	sxth	r3, r5
    a514:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
    fill_area.y2 = fill_area.y1;
    a518:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
    a51c:	4b3a      	ldr	r3, [pc, #232]	; (a608 <lv_draw_label+0xbf0>)
    a51e:	4798      	blx	r3
    a520:	901e      	str	r0, [sp, #120]	; 0x78
    uint32_t col_bit_max = 8 - bpp;
    a522:	9920      	ldr	r1, [sp, #128]	; 0x80
    a524:	f1c1 0508 	rsb	r5, r1, #8
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
    a528:	9a24      	ldr	r2, [sp, #144]	; 0x90
    a52a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a52c:	18d3      	adds	r3, r2, r3
    a52e:	9a25      	ldr	r2, [sp, #148]	; 0x94
    a530:	1a9b      	subs	r3, r3, r2
    a532:	fb01 f303 	mul.w	r3, r1, r3
    a536:	9320      	str	r3, [sp, #128]	; 0x80
    for(row = row_start ; row < row_end; row++) {
    a538:	9826      	ldr	r0, [sp, #152]	; 0x98
    a53a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    a53c:	4298      	cmp	r0, r3
    a53e:	f280 80df 	bge.w	a700 <lv_draw_label+0xce8>
    a542:	f04f 0e00 	mov.w	lr, #0
                mask_buf[mask_p] = 0;
    a546:	f8cd b090 	str.w	fp, [sp, #144]	; 0x90
    a54a:	f8cd 9098 	str.w	r9, [sp, #152]	; 0x98
    a54e:	9727      	str	r7, [sp, #156]	; 0x9c
    a550:	460f      	mov	r7, r1
    a552:	9515      	str	r5, [sp, #84]	; 0x54
    a554:	f8cd a0a0 	str.w	sl, [sp, #160]	; 0xa0
    a558:	f8dd a094 	ldr.w	sl, [sp, #148]	; 0x94
    a55c:	4681      	mov	r9, r0
    a55e:	f8cd 8094 	str.w	r8, [sp, #148]	; 0x94
    a562:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
    a566:	e07a      	b.n	a65e <lv_draw_label+0xc46>
    if(bpp == 3) bpp = 4;
    a568:	2304      	movs	r3, #4
    a56a:	9320      	str	r3, [sp, #128]	; 0x80
            shades = 16;
    a56c:	2310      	movs	r3, #16
            bitmask_init  = 0xF0;
    a56e:	22f0      	movs	r2, #240	; 0xf0
    a570:	9212      	str	r2, [sp, #72]	; 0x48
            bpp_opa_table_p = _lv_bpp4_opa_table;
    a572:	4a26      	ldr	r2, [pc, #152]	; (a60c <lv_draw_label+0xbf4>)
    a574:	9222      	str	r2, [sp, #136]	; 0x88
    a576:	e749      	b.n	a40c <lv_draw_label+0x9f4>
            LV_LOG_WARN("lv_draw_letter: invalid bpp");
    a578:	4b25      	ldr	r3, [pc, #148]	; (a610 <lv_draw_label+0xbf8>)
    a57a:	9300      	str	r3, [sp, #0]
    a57c:	4b25      	ldr	r3, [pc, #148]	; (a614 <lv_draw_label+0xbfc>)
    a57e:	f240 12e5 	movw	r2, #485	; 0x1e5
    a582:	4925      	ldr	r1, [pc, #148]	; (a618 <lv_draw_label+0xc00>)
    a584:	2002      	movs	r0, #2
    a586:	4c25      	ldr	r4, [pc, #148]	; (a61c <lv_draw_label+0xc04>)
    a588:	47a0      	blx	r4
    a58a:	e41d      	b.n	9dc8 <lv_draw_label+0x3b0>
    uint32_t bpp = g->bpp;
    a58c:	2301      	movs	r3, #1
    a58e:	9320      	str	r3, [sp, #128]	; 0x80
            shades = 2;
    a590:	2302      	movs	r3, #2
            bitmask_init  = 0x80;
    a592:	2280      	movs	r2, #128	; 0x80
    a594:	9212      	str	r2, [sp, #72]	; 0x48
            bpp_opa_table_p = _lv_bpp1_opa_table;
    a596:	4a22      	ldr	r2, [pc, #136]	; (a620 <lv_draw_label+0xc08>)
    a598:	9222      	str	r2, [sp, #136]	; 0x88
    a59a:	e737      	b.n	a40c <lv_draw_label+0x9f4>
    uint32_t bpp = g->bpp;
    a59c:	2308      	movs	r3, #8
    a59e:	9320      	str	r3, [sp, #128]	; 0x80
            shades = 256;
    a5a0:	f44f 7380 	mov.w	r3, #256	; 0x100
            bitmask_init  = 0xFF;
    a5a4:	22ff      	movs	r2, #255	; 0xff
    a5a6:	9212      	str	r2, [sp, #72]	; 0x48
            bpp_opa_table_p = _lv_bpp8_opa_table;
    a5a8:	4a1e      	ldr	r2, [pc, #120]	; (a624 <lv_draw_label+0xc0c>)
    a5aa:	9222      	str	r2, [sp, #136]	; 0x88
    a5ac:	e72e      	b.n	a40c <lv_draw_label+0x9f4>
        if(prev_opa != opa || prev_bpp != bpp) {
    a5ae:	4a14      	ldr	r2, [pc, #80]	; (a600 <lv_draw_label+0xbe8>)
    a5b0:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
    a5b4:	9920      	ldr	r1, [sp, #128]	; 0x80
    a5b6:	4291      	cmp	r1, r2
    a5b8:	f47f af31 	bne.w	a41e <lv_draw_label+0xa06>
    a5bc:	e74b      	b.n	a456 <lv_draw_label+0xa3e>
                map_p++;
    a5be:	3601      	adds	r6, #1
                bitmask = bitmask_init;
    a5c0:	9812      	ldr	r0, [sp, #72]	; 0x48
                col_bit = 0;
    a5c2:	2400      	movs	r4, #0
    a5c4:	3101      	adds	r1, #1
        for(col = col_start; col < col_end; col++) {
    a5c6:	458c      	cmp	ip, r1
    a5c8:	d02e      	beq.n	a628 <lv_draw_label+0xc10>
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
    a5ca:	7833      	ldrb	r3, [r6, #0]
    a5cc:	4003      	ands	r3, r0
    a5ce:	1b2a      	subs	r2, r5, r4
    a5d0:	40d3      	lsrs	r3, r2
            if(letter_px) {
    a5d2:	f013 0fff 	tst.w	r3, #255	; 0xff
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
    a5d6:	bf1a      	itte	ne
    a5d8:	b2db      	uxtbne	r3, r3
    a5da:	f818 3003 	ldrbne.w	r3, [r8, r3]
                mask_buf[mask_p] = 0;
    a5de:	2300      	moveq	r3, #0
    a5e0:	700b      	strb	r3, [r1, #0]
            if(col_bit < col_bit_max) {
    a5e2:	42a5      	cmp	r5, r4
    a5e4:	d9eb      	bls.n	a5be <lv_draw_label+0xba6>
                col_bit += bpp;
    a5e6:	443c      	add	r4, r7
                bitmask = bitmask >> bpp;
    a5e8:	40f8      	lsrs	r0, r7
    a5ea:	e7eb      	b.n	a5c4 <lv_draw_label+0xbac>
    a5ec:	0000be11 	.word	0x0000be11
    a5f0:	00012b2b 	.word	0x00012b2b
    a5f4:	00008275 	.word	0x00008275
    a5f8:	00012565 	.word	0x00012565
    a5fc:	00024d58 	.word	0x00024d58
    a600:	2000844c 	.word	0x2000844c
    a604:	00012931 	.word	0x00012931
    a608:	0000beb9 	.word	0x0000beb9
    a60c:	00024d5c 	.word	0x00024d5c
    a610:	00024f7c 	.word	0x00024f7c
    a614:	00024e90 	.word	0x00024e90
    a618:	00024eac 	.word	0x00024eac
    a61c:	00012251 	.word	0x00012251
    a620:	00024d54 	.word	0x00024d54
    a624:	00024d6c 	.word	0x00024d6c
    a628:	9515      	str	r5, [sp, #84]	; 0x54
        if(other_mask_cnt) {
    a62a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    a62c:	bb53      	cbnz	r3, a684 <lv_draw_label+0xc6c>
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
    a62e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a630:	ebaa 0303 	sub.w	r3, sl, r3
    a634:	445b      	add	r3, fp
    a636:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    a638:	429a      	cmp	r2, r3
    a63a:	d93f      	bls.n	a6bc <lv_draw_label+0xca4>
            fill_area.y2 ++;
    a63c:	f8bd 30e6 	ldrh.w	r3, [sp, #230]	; 0xe6
    a640:	3301      	adds	r3, #1
    a642:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
    a646:	46de      	mov	lr, fp
        col_bit += col_bit_row_ofs;
    a648:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a64a:	441c      	add	r4, r3
        map_p += (col_bit >> 3);
    a64c:	eb06 06d4 	add.w	r6, r6, r4, lsr #3
        col_bit = col_bit & 0x7;
    a650:	f004 0407 	and.w	r4, r4, #7
    for(row = row_start ; row < row_end; row++) {
    a654:	f109 0901 	add.w	r9, r9, #1
    a658:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    a65a:	4599      	cmp	r9, r3
    a65c:	da47      	bge.n	a6ee <lv_draw_label+0xcd6>
        bitmask = bitmask_init >> col_bit;
    a65e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a660:	fa23 f004 	lsr.w	r0, r3, r4
        for(col = col_start; col < col_end; col++) {
    a664:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a666:	4553      	cmp	r3, sl
    a668:	da0a      	bge.n	a680 <lv_draw_label+0xc68>
    a66a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    a66c:	eb02 010e 	add.w	r1, r2, lr
    a670:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a672:	ebaa 0b03 	sub.w	fp, sl, r3
    a676:	44f3      	add	fp, lr
    a678:	eb02 0c0b 	add.w	ip, r2, fp
    a67c:	9d15      	ldr	r5, [sp, #84]	; 0x54
    a67e:	e7a4      	b.n	a5ca <lv_draw_label+0xbb2>
    a680:	46f3      	mov	fp, lr
    a682:	e7d2      	b.n	a62a <lv_draw_label+0xc12>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
    a684:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a686:	4473      	add	r3, lr
    a688:	4618      	mov	r0, r3
    a68a:	9322      	str	r3, [sp, #136]	; 0x88
    a68c:	f9bd 10e0 	ldrsh.w	r1, [sp, #224]	; 0xe0
    a690:	f8bd 30e4 	ldrh.w	r3, [sp, #228]	; 0xe4
    a694:	3301      	adds	r3, #1
    a696:	1a5b      	subs	r3, r3, r1
    a698:	b21b      	sxth	r3, r3
    a69a:	f9bd 20e6 	ldrsh.w	r2, [sp, #230]	; 0xe6
    a69e:	4d85      	ldr	r5, [pc, #532]	; (a8b4 <lv_draw_label+0xe9c>)
    a6a0:	47a8      	blx	r5
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
    a6a2:	2800      	cmp	r0, #0
    a6a4:	d1c3      	bne.n	a62e <lv_draw_label+0xc16>
    a6a6:	f8bd 10e4 	ldrh.w	r1, [sp, #228]	; 0xe4
    a6aa:	3101      	adds	r1, #1
    a6ac:	f8bd 30e0 	ldrh.w	r3, [sp, #224]	; 0xe0
    a6b0:	1ac9      	subs	r1, r1, r3
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&fill_area));
    a6b2:	b209      	sxth	r1, r1
    a6b4:	9822      	ldr	r0, [sp, #136]	; 0x88
    a6b6:	4b80      	ldr	r3, [pc, #512]	; (a8b8 <lv_draw_label+0xea0>)
    a6b8:	4798      	blx	r3
    a6ba:	e7b8      	b.n	a62e <lv_draw_label+0xc16>
            _lv_blend_fill(clip_area, &fill_area,
    a6bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a6be:	9302      	str	r3, [sp, #8]
    a6c0:	23ff      	movs	r3, #255	; 0xff
    a6c2:	9301      	str	r3, [sp, #4]
    a6c4:	2302      	movs	r3, #2
    a6c6:	9300      	str	r3, [sp, #0]
    a6c8:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a6ca:	f8bd 208c 	ldrh.w	r2, [sp, #140]	; 0x8c
    a6ce:	a938      	add	r1, sp, #224	; 0xe0
    a6d0:	980d      	ldr	r0, [sp, #52]	; 0x34
    a6d2:	f8df b1e8 	ldr.w	fp, [pc, #488]	; a8bc <lv_draw_label+0xea4>
    a6d6:	47d8      	blx	fp
            fill_area.y1 = fill_area.y2 + 1;
    a6d8:	f8bd 30e6 	ldrh.w	r3, [sp, #230]	; 0xe6
    a6dc:	3301      	adds	r3, #1
    a6de:	b21b      	sxth	r3, r3
    a6e0:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
            fill_area.y2 = fill_area.y1;
    a6e4:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
            mask_p = 0;
    a6e8:	f04f 0e00 	mov.w	lr, #0
    a6ec:	e7ac      	b.n	a648 <lv_draw_label+0xc30>
    a6ee:	f8dd b090 	ldr.w	fp, [sp, #144]	; 0x90
    a6f2:	f8dd 9098 	ldr.w	r9, [sp, #152]	; 0x98
    a6f6:	9f27      	ldr	r7, [sp, #156]	; 0x9c
    a6f8:	f8dd a0a0 	ldr.w	sl, [sp, #160]	; 0xa0
    a6fc:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    if(fill_area.y1 != fill_area.y2) {
    a700:	f9bd 30e6 	ldrsh.w	r3, [sp, #230]	; 0xe6
    a704:	f9bd 20e2 	ldrsh.w	r2, [sp, #226]	; 0xe2
    a708:	429a      	cmp	r2, r3
    a70a:	d00f      	beq.n	a72c <lv_draw_label+0xd14>
        fill_area.y2--;
    a70c:	3b01      	subs	r3, #1
    a70e:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
        _lv_blend_fill(clip_area, &fill_area,
    a712:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a714:	9302      	str	r3, [sp, #8]
    a716:	23ff      	movs	r3, #255	; 0xff
    a718:	9301      	str	r3, [sp, #4]
    a71a:	2302      	movs	r3, #2
    a71c:	9300      	str	r3, [sp, #0]
    a71e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a720:	f8bd 208c 	ldrh.w	r2, [sp, #140]	; 0x8c
    a724:	a938      	add	r1, sp, #224	; 0xe0
    a726:	980d      	ldr	r0, [sp, #52]	; 0x34
    a728:	4c64      	ldr	r4, [pc, #400]	; (a8bc <lv_draw_label+0xea4>)
    a72a:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
    a72c:	9818      	ldr	r0, [sp, #96]	; 0x60
    a72e:	4b64      	ldr	r3, [pc, #400]	; (a8c0 <lv_draw_label+0xea8>)
    a730:	4798      	blx	r3
    a732:	f7ff bb49 	b.w	9dc8 <lv_draw_label+0x3b0>
                        cmd_state = CMD_STATE_WAIT;
    a736:	2300      	movs	r3, #0
    a738:	9306      	str	r3, [sp, #24]
    a73a:	f7ff bb4d 	b.w	9dd8 <lv_draw_label+0x3c0>
    a73e:	4653      	mov	r3, sl
    a740:	46ca      	mov	sl, r9
    a742:	4699      	mov	r9, r3
        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
    a744:	f898 3018 	ldrb.w	r3, [r8, #24]
    a748:	f013 0f02 	tst.w	r3, #2
    a74c:	d146      	bne.n	a7dc <lv_draw_label+0xdc4>
        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
    a74e:	f898 3018 	ldrb.w	r3, [r8, #24]
    a752:	f013 0f01 	tst.w	r3, #1
    a756:	d162      	bne.n	a81e <lv_draw_label+0xe06>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
    a758:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a75a:	9d07      	ldr	r5, [sp, #28]
    a75c:	1956      	adds	r6, r2, r5
    a75e:	f9b8 200c 	ldrsh.w	r2, [r8, #12]
    a762:	f898 3017 	ldrb.w	r3, [r8, #23]
    a766:	9300      	str	r3, [sp, #0]
    a768:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a76a:	9905      	ldr	r1, [sp, #20]
    a76c:	4630      	mov	r0, r6
    a76e:	4c55      	ldr	r4, [pc, #340]	; (a8c4 <lv_draw_label+0xeac>)
    a770:	47a0      	blx	r4
    a772:	1944      	adds	r4, r0, r5
        pos.x = coords->x1;
    a774:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a776:	f9b3 5000 	ldrsh.w	r5, [r3]
        if(dsc->flag & LV_TXT_FLAG_CENTER) {
    a77a:	f898 2017 	ldrb.w	r2, [r8, #23]
    a77e:	f012 0f04 	tst.w	r2, #4
    a782:	d16c      	bne.n	a85e <lv_draw_label+0xe46>
        else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
    a784:	f012 0f08 	tst.w	r2, #8
    a788:	d17e      	bne.n	a888 <lv_draw_label+0xe70>
    a78a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a78c:	9917      	ldr	r1, [sp, #92]	; 0x5c
    a78e:	440b      	add	r3, r1
    a790:	b21b      	sxth	r3, r3
    a792:	9a11      	ldr	r2, [sp, #68]	; 0x44
    a794:	440a      	add	r2, r1
    a796:	b292      	uxth	r2, r2
    a798:	9211      	str	r2, [sp, #68]	; 0x44
        line_start = line_end;
    a79a:	f8dd b01c 	ldr.w	fp, [sp, #28]
        pos.y += line_height;
    a79e:	930e      	str	r3, [sp, #56]	; 0x38
        if(pos.y > mask->y2) return;
    a7a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    a7a2:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
    a7a6:	429a      	cmp	r2, r3
    a7a8:	f6ff a93f 	blt.w	9a2a <lv_draw_label+0x12>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
    a7ac:	9407      	str	r4, [sp, #28]
    while(txt[line_start] != '\0') {
    a7ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a7b0:	4613      	mov	r3, r2
    a7b2:	445b      	add	r3, fp
    a7b4:	9309      	str	r3, [sp, #36]	; 0x24
    a7b6:	f812 300b 	ldrb.w	r3, [r2, fp]
    a7ba:	2b00      	cmp	r3, #0
    a7bc:	f43f a935 	beq.w	9a2a <lv_draw_label+0x12>
        pos.x += x_ofs;
    a7c0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    a7c2:	441d      	add	r5, r3
    a7c4:	fa0f f985 	sxth.w	r9, r5
        i         = 0;
    a7c8:	2300      	movs	r3, #0
    a7ca:	9352      	str	r3, [sp, #328]	; 0x148
        cmd_state = CMD_STATE_WAIT;
    a7cc:	9306      	str	r3, [sp, #24]
        bpp_opa_table_p = opa_table;
    a7ce:	4b3e      	ldr	r3, [pc, #248]	; (a8c8 <lv_draw_label+0xeb0>)
    a7d0:	931c      	str	r3, [sp, #112]	; 0x70
    a7d2:	464b      	mov	r3, r9
    a7d4:	46d1      	mov	r9, sl
    a7d6:	469a      	mov	sl, r3
        while(i < line_end - line_start) {
    a7d8:	f7ff bafe 	b.w	9dd8 <lv_draw_label+0x3c0>
            p1.x = pos_x_start;
    a7dc:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
    a7e0:	f8ad 30e0 	strh.w	r3, [sp, #224]	; 0xe0
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
    a7e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
    a7e8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    a7ec:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
    a7f0:	f9bd 314e 	ldrsh.w	r3, [sp, #334]	; 0x14e
    a7f4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    a7f8:	105b      	asrs	r3, r3, #1
    a7fa:	eb03 0362 	add.w	r3, r3, r2, asr #1
    a7fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
    a800:	4413      	add	r3, r2
    a802:	b21b      	sxth	r3, r3
    a804:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
            p2.x = pos.x;
    a808:	f8ad 90e8 	strh.w	r9, [sp, #232]	; 0xe8
            p2.y = p1.y;
    a80c:	f8ad 30ea 	strh.w	r3, [sp, #234]	; 0xea
            lv_draw_line(&p1, &p2, mask, &line_dsc);
    a810:	ab53      	add	r3, sp, #332	; 0x14c
    a812:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    a814:	a93a      	add	r1, sp, #232	; 0xe8
    a816:	a838      	add	r0, sp, #224	; 0xe0
    a818:	4c2c      	ldr	r4, [pc, #176]	; (a8cc <lv_draw_label+0xeb4>)
    a81a:	47a0      	blx	r4
    a81c:	e797      	b.n	a74e <lv_draw_label+0xd36>
            p1.x = pos_x_start;
    a81e:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
    a822:	f8ad 30e0 	strh.w	r3, [sp, #224]	; 0xe0
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line + line_dsc.width / 2 + 1;
    a826:	f8d8 2004 	ldr.w	r2, [r8, #4]
    a82a:	f9bd 314e 	ldrsh.w	r3, [sp, #334]	; 0x14e
    a82e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    a832:	105b      	asrs	r3, r3, #1
    a834:	3301      	adds	r3, #1
    a836:	8911      	ldrh	r1, [r2, #8]
    a838:	440b      	add	r3, r1
    a83a:	8952      	ldrh	r2, [r2, #10]
    a83c:	1a9b      	subs	r3, r3, r2
    a83e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    a840:	4413      	add	r3, r2
    a842:	b21b      	sxth	r3, r3
    a844:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
            p2.x = pos.x;
    a848:	f8ad 90e8 	strh.w	r9, [sp, #232]	; 0xe8
            p2.y = p1.y;
    a84c:	f8ad 30ea 	strh.w	r3, [sp, #234]	; 0xea
            lv_draw_line(&p1, &p2, mask, &line_dsc);
    a850:	ab53      	add	r3, sp, #332	; 0x14c
    a852:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    a854:	a93a      	add	r1, sp, #232	; 0xe8
    a856:	a838      	add	r0, sp, #224	; 0xe0
    a858:	4c1c      	ldr	r4, [pc, #112]	; (a8cc <lv_draw_label+0xeb4>)
    a85a:	47a0      	blx	r4
    a85c:	e77c      	b.n	a758 <lv_draw_label+0xd40>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
    a85e:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
    a862:	9200      	str	r2, [sp, #0]
    a864:	9a05      	ldr	r2, [sp, #20]
    a866:	4601      	mov	r1, r0
    a868:	4630      	mov	r0, r6
    a86a:	4e19      	ldr	r6, [pc, #100]	; (a8d0 <lv_draw_label+0xeb8>)
    a86c:	47b0      	blx	r6
    a86e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a870:	8893      	ldrh	r3, [r2, #4]
    a872:	3301      	adds	r3, #1
    a874:	8812      	ldrh	r2, [r2, #0]
    a876:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
    a878:	b21b      	sxth	r3, r3
    a87a:	1a18      	subs	r0, r3, r0
    a87c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    a880:	eb05 0560 	add.w	r5, r5, r0, asr #1
    a884:	b22d      	sxth	r5, r5
    a886:	e780      	b.n	a78a <lv_draw_label+0xd72>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
    a888:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
    a88c:	9200      	str	r2, [sp, #0]
    a88e:	9a05      	ldr	r2, [sp, #20]
    a890:	4601      	mov	r1, r0
    a892:	4630      	mov	r0, r6
    a894:	4e0e      	ldr	r6, [pc, #56]	; (a8d0 <lv_draw_label+0xeb8>)
    a896:	47b0      	blx	r6
    a898:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a89a:	8893      	ldrh	r3, [r2, #4]
    a89c:	3301      	adds	r3, #1
    a89e:	8812      	ldrh	r2, [r2, #0]
    a8a0:	1a9b      	subs	r3, r3, r2
            pos.x += lv_area_get_width(coords) - line_width;
    a8a2:	b21b      	sxth	r3, r3
    a8a4:	1a18      	subs	r0, r3, r0
    a8a6:	4405      	add	r5, r0
    a8a8:	b22d      	sxth	r5, r5
    a8aa:	e76e      	b.n	a78a <lv_draw_label+0xd72>
                        cmd_state = CMD_STATE_WAIT;
    a8ac:	2300      	movs	r3, #0
    a8ae:	9306      	str	r3, [sp, #24]
    a8b0:	f7ff ba0e 	b.w	9cd0 <lv_draw_label+0x2b8>
    a8b4:	0000be11 	.word	0x0000be11
    a8b8:	00012b2b 	.word	0x00012b2b
    a8bc:	00007745 	.word	0x00007745
    a8c0:	00012565 	.word	0x00012565
    a8c4:	00013da5 	.word	0x00013da5
    a8c8:	2000844c 	.word	0x2000844c
    a8cc:	0000a905 	.word	0x0000a905
    a8d0:	00013fd1 	.word	0x00013fd1

0000a8d4 <lv_draw_line_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_line_dsc_init(lv_draw_line_dsc_t * dsc)
{
    a8d4:	b510      	push	{r4, lr}
    a8d6:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
    a8d8:	210a      	movs	r1, #10
    a8da:	4b09      	ldr	r3, [pc, #36]	; (a900 <lv_draw_line_dsc_init+0x2c>)
    a8dc:	4798      	blx	r3
    dsc->width = 1;
    a8de:	2301      	movs	r3, #1
    a8e0:	8063      	strh	r3, [r4, #2]
    dsc->opa = LV_OPA_COVER;
    a8e2:	23ff      	movs	r3, #255	; 0xff
    a8e4:	7223      	strb	r3, [r4, #8]
    dsc->color = LV_COLOR_BLACK;
    a8e6:	7823      	ldrb	r3, [r4, #0]
    a8e8:	f36f 0304 	bfc	r3, #0, #5
    a8ec:	7023      	strb	r3, [r4, #0]
    a8ee:	8823      	ldrh	r3, [r4, #0]
    a8f0:	f36f 134a 	bfc	r3, #5, #6
    a8f4:	8023      	strh	r3, [r4, #0]
    a8f6:	0a1b      	lsrs	r3, r3, #8
    a8f8:	f36f 03c7 	bfc	r3, #3, #5
    a8fc:	7063      	strb	r3, [r4, #1]
    a8fe:	bd10      	pop	{r4, pc}
    a900:	00012b2b 	.word	0x00012b2b

0000a904 <lv_draw_line>:
 * @param style pointer to a line's style
 * @param opa_scale scale down all opacities by the factor
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_line(const lv_point_t * point1, const lv_point_t * point2, const lv_area_t * clip,
                                        lv_draw_line_dsc_t * dsc)
{
    a904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a908:	b0cb      	sub	sp, #300	; 0x12c
    if(dsc->width == 0) return;
    a90a:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
    a90e:	2d00      	cmp	r5, #0
    a910:	f000 8418 	beq.w	b144 <lv_draw_line+0x840>
    if(dsc->opa <= LV_OPA_MIN) return;
    a914:	7a1c      	ldrb	r4, [r3, #8]
    a916:	2c05      	cmp	r4, #5
    a918:	f240 8414 	bls.w	b144 <lv_draw_line+0x840>

    if(point1->x == point2->x && point1->y == point2->y) return;
    a91c:	f9b0 6000 	ldrsh.w	r6, [r0]
    a920:	f9b1 7000 	ldrsh.w	r7, [r1]
    a924:	42be      	cmp	r6, r7
    a926:	f000 8130 	beq.w	ab8a <lv_draw_line+0x286>
    a92a:	461c      	mov	r4, r3
    a92c:	4696      	mov	lr, r2
    a92e:	9208      	str	r2, [sp, #32]
    a930:	9107      	str	r1, [sp, #28]
    a932:	9006      	str	r0, [sp, #24]

    lv_area_t clip_line;
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
    a934:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
    a938:	f3c5 054f 	ubfx	r5, r5, #1, #16
    a93c:	42be      	cmp	r6, r7
    a93e:	bfd4      	ite	le
    a940:	ebc5 0306 	rsble	r3, r5, r6
    a944:	ebc5 0307 	rsbgt	r3, r5, r7
    a948:	f8ad 3120 	strh.w	r3, [sp, #288]	; 0x120
    clip_line.x2 = LV_MATH_MAX(point1->x, point2->x) + dsc->width / 2;
    a94c:	42be      	cmp	r6, r7
    a94e:	bfac      	ite	ge
    a950:	19ab      	addge	r3, r5, r6
    a952:	19eb      	addlt	r3, r5, r7
    a954:	f8ad 3124 	strh.w	r3, [sp, #292]	; 0x124
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
    a958:	460f      	mov	r7, r1
    a95a:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
    a95e:	4606      	mov	r6, r0
    a960:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
    a964:	429a      	cmp	r2, r3
    a966:	bfd4      	ite	le
    a968:	ebc5 0102 	rsble	r1, r5, r2
    a96c:	ebc5 0103 	rsbgt	r1, r5, r3
    a970:	f8ad 1122 	strh.w	r1, [sp, #290]	; 0x122
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
    a974:	429a      	cmp	r2, r3
    a976:	bfac      	ite	ge
    a978:	18ad      	addge	r5, r5, r2
    a97a:	18ed      	addlt	r5, r5, r3
    a97c:	f8ad 5126 	strh.w	r5, [sp, #294]	; 0x126

    bool is_common;
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
    a980:	4672      	mov	r2, lr
    a982:	a948      	add	r1, sp, #288	; 0x120
    a984:	4608      	mov	r0, r1
    a986:	4bab      	ldr	r3, [pc, #684]	; (ac34 <lv_draw_line+0x330>)
    a988:	4798      	blx	r3
    if(!is_common) return;
    a98a:	2800      	cmp	r0, #0
    a98c:	f000 83da 	beq.w	b144 <lv_draw_line+0x840>

    if(point1->y == point2->y) draw_line_hor(point1, point2, &clip_line, dsc);
    a990:	f9b6 6002 	ldrsh.w	r6, [r6, #2]
    a994:	f9b7 5002 	ldrsh.w	r5, [r7, #2]
    a998:	42ae      	cmp	r6, r5
    a99a:	f000 80fe 	beq.w	ab9a <lv_draw_line+0x296>
    else if(point1->x == point2->x) draw_line_ver(point1, point2, &clip_line, dsc);
    a99e:	9b06      	ldr	r3, [sp, #24]
    a9a0:	f9b3 3000 	ldrsh.w	r3, [r3]
    a9a4:	461a      	mov	r2, r3
    a9a6:	9305      	str	r3, [sp, #20]
    a9a8:	9b07      	ldr	r3, [sp, #28]
    a9aa:	f9b3 a000 	ldrsh.w	sl, [r3]
    a9ae:	4552      	cmp	r2, sl
    a9b0:	f000 8201 	beq.w	adb6 <lv_draw_line+0x4b2>
                                                 lv_draw_line_dsc_t * dsc)
{
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
    a9b4:	42ae      	cmp	r6, r5
    a9b6:	db06      	blt.n	a9c6 <lv_draw_line+0xc2>
    a9b8:	4633      	mov	r3, r6
        p2.y = point2->y;
        p1.x = point1->x;
        p2.x = point2->x;
    }
    else {
        p1.y = point2->y;
    a9ba:	462e      	mov	r6, r5
        p2.y = point1->y;
    a9bc:	461d      	mov	r5, r3
    if(point1->y < point2->y) {
    a9be:	9b05      	ldr	r3, [sp, #20]
        p1.x = point2->x;
    a9c0:	f8cd a014 	str.w	sl, [sp, #20]
        p2.x = point1->x;
    a9c4:	469a      	mov	sl, r3
    }

    int32_t xdiff = p2.x - p1.x;
    a9c6:	9b05      	ldr	r3, [sp, #20]
    a9c8:	ebaa 0303 	sub.w	r3, sl, r3
    a9cc:	9309      	str	r3, [sp, #36]	; 0x24
    int32_t ydiff = p2.y - p1.y;
    a9ce:	1baa      	subs	r2, r5, r6
    a9d0:	920a      	str	r2, [sp, #40]	; 0x28
    bool flat = LV_MATH_ABS(xdiff) > LV_MATH_ABS(ydiff) ? true : false;
    a9d2:	2b00      	cmp	r3, #0
    a9d4:	bfb8      	it	lt
    a9d6:	425b      	neglt	r3, r3
    a9d8:	469b      	mov	fp, r3
    a9da:	2a00      	cmp	r2, #0
    a9dc:	bfb8      	it	lt
    a9de:	4252      	neglt	r2, r2
    a9e0:	4690      	mov	r8, r2
        143, 145, 147, 149, 151, 153, 155, 158,
        160, 162, 165, 167, 170, 173, 175, 178,
        181,
    };

    int32_t w = dsc->width;
    a9e2:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
    int32_t wcorr_i = 0;
    if(flat) wcorr_i = (LV_MATH_ABS(ydiff) << 5) / LV_MATH_ABS(xdiff);
    a9e6:	4293      	cmp	r3, r2
    a9e8:	bfc7      	ittee	gt
    a9ea:	0153      	lslgt	r3, r2, #5
    a9ec:	fb93 f3fb 	sdivgt	r3, r3, fp
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);
    a9f0:	ea4f 134b 	movle.w	r3, fp, lsl #5
    a9f4:	fb93 f3f2 	sdivle	r3, r3, r2

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
    a9f8:	4a8f      	ldr	r2, [pc, #572]	; (ac38 <lv_draw_line+0x334>)
    a9fa:	5cd3      	ldrb	r3, [r2, r3]
    a9fc:	fb09 f903 	mul.w	r9, r9, r3
    aa00:	f109 093f 	add.w	r9, r9, #63	; 0x3f
    aa04:	ea4f 13e9 	mov.w	r3, r9, asr #7
    aa08:	461f      	mov	r7, r3
    int32_t w_half0 = w >> 1;
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(p1.x, p2.x) - w;
    aa0a:	b29b      	uxth	r3, r3
    aa0c:	9805      	ldr	r0, [sp, #20]
    aa0e:	4582      	cmp	sl, r0
    aa10:	bfd4      	ite	le
    aa12:	ebc3 020a 	rsble	r2, r3, sl
    aa16:	ebc3 0200 	rsbgt	r2, r3, r0
    aa1a:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
    draw_area.x2 = LV_MATH_MAX(p1.x, p2.x) + w;
    aa1e:	4582      	cmp	sl, r0
    aa20:	bfac      	ite	ge
    aa22:	eb03 020a 	addge.w	r2, r3, sl
    aa26:	181a      	addlt	r2, r3, r0
    aa28:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
    draw_area.y1 = LV_MATH_MIN(p1.y, p2.y) - w;
    aa2c:	42b5      	cmp	r5, r6
    aa2e:	bfd4      	ite	le
    aa30:	ebc3 0205 	rsble	r2, r3, r5
    aa34:	ebc3 0206 	rsbgt	r2, r3, r6
    aa38:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
    draw_area.y2 = LV_MATH_MAX(p1.y, p2.y) + w;
    aa3c:	42b5      	cmp	r5, r6
    aa3e:	bfac      	ite	ge
    aa40:	195b      	addge	r3, r3, r5
    aa42:	199b      	addlt	r3, r3, r6
    aa44:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e

    /* Get the union of `coords` and `clip`*/
    /* `clip` is already truncated to the `vdb` size
     * in 'lv_refr_area' function */
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
    aa48:	aa48      	add	r2, sp, #288	; 0x120
    aa4a:	a90e      	add	r1, sp, #56	; 0x38
    aa4c:	4608      	mov	r0, r1
    aa4e:	4b79      	ldr	r3, [pc, #484]	; (ac34 <lv_draw_line+0x330>)
    aa50:	4798      	blx	r3
    if(is_common == false) return;
    aa52:	2800      	cmp	r0, #0
    aa54:	f000 8372 	beq.w	b13c <lv_draw_line+0x838>
    int32_t w_half0 = w >> 1;
    aa58:	ea4f 2929 	mov.w	r9, r9, asr #8
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
    aa5c:	f007 0301 	and.w	r3, r7, #1
    aa60:	444b      	add	r3, r9
    aa62:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
    aa64:	45c3      	cmp	fp, r8
    aa66:	f340 82b6 	ble.w	afd6 <lv_draw_line+0x6d2>
        if(xdiff > 0) {
    aa6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    aa6c:	2a00      	cmp	r2, #0
    aa6e:	f340 828e 	ble.w	af8e <lv_draw_line+0x68a>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
    aa72:	fa1f fb86 	uxth.w	fp, r6
    aa76:	fa1f f389 	uxth.w	r3, r9
    aa7a:	fa1f f985 	uxth.w	r9, r5
    aa7e:	ebab 0203 	sub.w	r2, fp, r3
    aa82:	2100      	movs	r1, #0
    aa84:	9101      	str	r1, [sp, #4]
    aa86:	eba9 0303 	sub.w	r3, r9, r3
    aa8a:	b21b      	sxth	r3, r3
    aa8c:	9300      	str	r3, [sp, #0]
    aa8e:	4653      	mov	r3, sl
    aa90:	b212      	sxth	r2, r2
    aa92:	9905      	ldr	r1, [sp, #20]
    aa94:	a812      	add	r0, sp, #72	; 0x48
    aa96:	4f69      	ldr	r7, [pc, #420]	; (ac3c <lv_draw_line+0x338>)
    aa98:	47b8      	blx	r7
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
    aa9a:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    aa9e:	eb0b 0208 	add.w	r2, fp, r8
    aaa2:	2301      	movs	r3, #1
    aaa4:	9301      	str	r3, [sp, #4]
    aaa6:	44c1      	add	r9, r8
    aaa8:	fa0f f389 	sxth.w	r3, r9
    aaac:	9300      	str	r3, [sp, #0]
    aaae:	4653      	mov	r3, sl
    aab0:	b212      	sxth	r2, r2
    aab2:	9905      	ldr	r1, [sp, #20]
    aab4:	a81d      	add	r0, sp, #116	; 0x74
    aab6:	47b8      	blx	r7
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
    aab8:	2100      	movs	r1, #0
    aaba:	a812      	add	r0, sp, #72	; 0x48
    aabc:	f8df 819c 	ldr.w	r8, [pc, #412]	; ac5c <lv_draw_line+0x358>
    aac0:	47c0      	blx	r8
    aac2:	900b      	str	r0, [sp, #44]	; 0x2c
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
    aac4:	2100      	movs	r1, #0
    aac6:	a81d      	add	r0, sp, #116	; 0x74
    aac8:	47c0      	blx	r8
    aaca:	900c      	str	r0, [sp, #48]	; 0x30
    int16_t mask_top_id = LV_MASK_ID_INV;
    int16_t mask_bottom_id = LV_MASK_ID_INV;

    if(!dsc->raw_end) {
    aacc:	7a63      	ldrb	r3, [r4, #9]
    aace:	f013 0f10 	tst.w	r3, #16
    aad2:	f000 82a4 	beq.w	b01e <lv_draw_line+0x71a>
    int16_t mask_bottom_id = LV_MASK_ID_INV;
    aad6:	f04f 33ff 	mov.w	r3, #4294967295
    aada:	930d      	str	r3, [sp, #52]	; 0x34
    int16_t mask_top_id = LV_MASK_ID_INV;
    aadc:	930a      	str	r3, [sp, #40]	; 0x28
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    aade:	4b58      	ldr	r3, [pc, #352]	; (ac40 <lv_draw_line+0x33c>)
    aae0:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    aae2:	4b58      	ldr	r3, [pc, #352]	; (ac44 <lv_draw_line+0x340>)
    aae4:	4798      	blx	r3
    aae6:	4682      	mov	sl, r0

    const lv_area_t * disp_area = &vdb->area;

    /*Store the coordinates of the `draw_a` relative to the VDB */
    draw_area.x1 -= disp_area->x1;
    aae8:	8a06      	ldrh	r6, [r0, #16]
    aaea:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
    aaee:	1bad      	subs	r5, r5, r6
    aaf0:	b2aa      	uxth	r2, r5
    aaf2:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
    draw_area.y1 -= disp_area->y1;
    aaf6:	8a40      	ldrh	r0, [r0, #18]
    aaf8:	f8bd 103a 	ldrh.w	r1, [sp, #58]	; 0x3a
    aafc:	1a09      	subs	r1, r1, r0
    aafe:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
    draw_area.x2 -= disp_area->x1;
    ab02:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    ab06:	1b9b      	subs	r3, r3, r6
    ab08:	b29b      	uxth	r3, r3
    ab0a:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    draw_area.y2 -= disp_area->y1;
    ab0e:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
    ab12:	1a09      	subs	r1, r1, r0
    ab14:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
    ab18:	1c5d      	adds	r5, r3, #1
    ab1a:	1aad      	subs	r5, r5, r2
    ab1c:	b22d      	sxth	r5, r5
     * So deal with it only with steep lines. */
    int32_t draw_area_w = lv_area_get_width(&draw_area);

    /*Draw the background line by line*/
    int32_t h;
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), LV_HOR_RES_MAX);
    ab1e:	a80e      	add	r0, sp, #56	; 0x38
    ab20:	4b49      	ldr	r3, [pc, #292]	; (ac48 <lv_draw_line+0x344>)
    ab22:	4798      	blx	r3
    ab24:	f5b0 7ff0 	cmp.w	r0, #480	; 0x1e0
    ab28:	f0c0 82a2 	bcc.w	b070 <lv_draw_line+0x76c>
    ab2c:	f44f 7bf0 	mov.w	fp, #480	; 0x1e0
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
    ab30:	4658      	mov	r0, fp
    ab32:	4b46      	ldr	r3, [pc, #280]	; (ac4c <lv_draw_line+0x348>)
    ab34:	4798      	blx	r3
    ab36:	4681      	mov	r9, r0

    lv_area_t fill_area;
    fill_area.x1 = draw_area.x1 + disp_area->x1;
    ab38:	f8ba 3010 	ldrh.w	r3, [sl, #16]
    ab3c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
    ab40:	441a      	add	r2, r3
    ab42:	b212      	sxth	r2, r2
    ab44:	9205      	str	r2, [sp, #20]
    ab46:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
    fill_area.x2 = draw_area.x2 + disp_area->x1;
    ab4a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
    ab4e:	4413      	add	r3, r2
    ab50:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    fill_area.y1 = draw_area.y1 + disp_area->y1;
    ab54:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    ab58:	f8ba 2012 	ldrh.w	r2, [sl, #18]
    ab5c:	4413      	add	r3, r2
    ab5e:	b21b      	sxth	r3, r3
    ab60:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    fill_area.y2 = fill_area.y1;
    ab64:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46

    int32_t x = vdb->area.x1 + draw_area.x1;

    uint32_t mask_p = 0;

    _lv_memset_ff(mask_buf, mask_buf_size);
    ab68:	4659      	mov	r1, fp
    ab6a:	4b39      	ldr	r3, [pc, #228]	; (ac50 <lv_draw_line+0x34c>)
    ab6c:	4798      	blx	r3
    /*Fill the first row with 'color'*/
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
    ab6e:	f9ba 2012 	ldrsh.w	r2, [sl, #18]
    ab72:	f9bd 603a 	ldrsh.w	r6, [sp, #58]	; 0x3a
    ab76:	4416      	add	r6, r2
    ab78:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    ab7c:	4413      	add	r3, r2
    ab7e:	429e      	cmp	r6, r3
    ab80:	f300 82b9 	bgt.w	b0f6 <lv_draw_line+0x7f2>
    ab84:	2700      	movs	r7, #0
        mask_p += draw_area_w;
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
            fill_area.y2 ++;
        }
        else {
            _lv_blend_fill(&fill_area, clip,
    ab86:	9409      	str	r4, [sp, #36]	; 0x24
    ab88:	e2a0      	b.n	b0cc <lv_draw_line+0x7c8>
    if(point1->x == point2->x && point1->y == point2->y) return;
    ab8a:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
    ab8e:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
    ab92:	45a6      	cmp	lr, r4
    ab94:	f47f aec9 	bne.w	a92a <lv_draw_line+0x26>
    ab98:	e2d4      	b.n	b144 <lv_draw_line+0x840>
    lv_opa_t opa = dsc->opa;
    ab9a:	f894 9008 	ldrb.w	r9, [r4, #8]
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    ab9e:	4b28      	ldr	r3, [pc, #160]	; (ac40 <lv_draw_line+0x33c>)
    aba0:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    aba2:	4b28      	ldr	r3, [pc, #160]	; (ac44 <lv_draw_line+0x340>)
    aba4:	4798      	blx	r3
    aba6:	4607      	mov	r7, r0
    int32_t w = dsc->width - 1;
    aba8:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    abac:	3b01      	subs	r3, #1
    int32_t w_half0 = w >> 1;
    abae:	105e      	asrs	r6, r3, #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
    abb0:	f003 0301 	and.w	r3, r3, #1
    abb4:	199d      	adds	r5, r3, r6
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
    abb6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
    abba:	2b00      	cmp	r3, #0
    abbc:	d035      	beq.n	ac2a <lv_draw_line+0x326>
    abbe:	f9b4 8004 	ldrsh.w	r8, [r4, #4]
    abc2:	f118 0800 	adds.w	r8, r8, #0
    abc6:	bf18      	it	ne
    abc8:	f04f 0801 	movne.w	r8, #1
    if(lv_draw_mask_get_cnt()) simple_mode = false;
    abcc:	4b21      	ldr	r3, [pc, #132]	; (ac54 <lv_draw_line+0x350>)
    abce:	4798      	blx	r3
    abd0:	bb70      	cbnz	r0, ac30 <lv_draw_line+0x32c>
    else if(dashed) simple_mode = false;
    abd2:	f088 0201 	eor.w	r2, r8, #1
    draw_area.x1 = LV_MATH_MIN(point1->x, point2->x);
    abd6:	9b07      	ldr	r3, [sp, #28]
    abd8:	f9b3 3000 	ldrsh.w	r3, [r3]
    abdc:	9906      	ldr	r1, [sp, #24]
    abde:	f9b1 1000 	ldrsh.w	r1, [r1]
    abe2:	4618      	mov	r0, r3
    abe4:	428b      	cmp	r3, r1
    abe6:	bfa8      	it	ge
    abe8:	4608      	movge	r0, r1
    abea:	f8ad 00a0 	strh.w	r0, [sp, #160]	; 0xa0
    draw_area.x2 = LV_MATH_MAX(point1->x, point2->x)  - 1;
    abee:	428b      	cmp	r3, r1
    abf0:	bfb8      	it	lt
    abf2:	460b      	movlt	r3, r1
    abf4:	3b01      	subs	r3, #1
    abf6:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
    draw_area.y1 = point1->y - w_half1;
    abfa:	9906      	ldr	r1, [sp, #24]
    abfc:	884b      	ldrh	r3, [r1, #2]
    abfe:	1b5d      	subs	r5, r3, r5
    ac00:	f8ad 50a2 	strh.w	r5, [sp, #162]	; 0xa2
    draw_area.y2 = point1->y + w_half0;
    ac04:	4433      	add	r3, r6
    ac06:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
    if(simple_mode) {
    ac0a:	b34a      	cbz	r2, ac60 <lv_draw_line+0x35c>
                       dsc->blend_mode);
    ac0c:	7a63      	ldrb	r3, [r4, #9]
        _lv_blend_fill(clip, &draw_area,
    ac0e:	f003 0303 	and.w	r3, r3, #3
    ac12:	9302      	str	r3, [sp, #8]
    ac14:	f8cd 9004 	str.w	r9, [sp, #4]
    ac18:	2301      	movs	r3, #1
    ac1a:	9300      	str	r3, [sp, #0]
    ac1c:	2300      	movs	r3, #0
    ac1e:	8822      	ldrh	r2, [r4, #0]
    ac20:	a928      	add	r1, sp, #160	; 0xa0
    ac22:	a848      	add	r0, sp, #288	; 0x120
    ac24:	4d0c      	ldr	r5, [pc, #48]	; (ac58 <lv_draw_line+0x354>)
    ac26:	47a8      	blx	r5
    ac28:	e288      	b.n	b13c <lv_draw_line+0x838>
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
    ac2a:	f04f 0800 	mov.w	r8, #0
    ac2e:	e7cd      	b.n	abcc <lv_draw_line+0x2c8>
    if(lv_draw_mask_get_cnt()) simple_mode = false;
    ac30:	2200      	movs	r2, #0
    ac32:	e7d0      	b.n	abd6 <lv_draw_line+0x2d2>
    ac34:	0001150d 	.word	0x0001150d
    ac38:	00024f98 	.word	0x00024f98
    ac3c:	0000bedd 	.word	0x0000bedd
    ac40:	00005f5d 	.word	0x00005f5d
    ac44:	00010fd1 	.word	0x00010fd1
    ac48:	000114f1 	.word	0x000114f1
    ac4c:	00012931 	.word	0x00012931
    ac50:	00012be1 	.word	0x00012be1
    ac54:	0000beb9 	.word	0x0000beb9
    ac58:	00007745 	.word	0x00007745
    ac5c:	0000bdb5 	.word	0x0000bdb5
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
    ac60:	aa28      	add	r2, sp, #160	; 0xa0
    ac62:	a948      	add	r1, sp, #288	; 0x120
    ac64:	4610      	mov	r0, r2
    ac66:	4ba1      	ldr	r3, [pc, #644]	; (aeec <lv_draw_line+0x5e8>)
    ac68:	4798      	blx	r3
        if(!is_common) return;
    ac6a:	2800      	cmp	r0, #0
    ac6c:	f000 8266 	beq.w	b13c <lv_draw_line+0x838>
        draw_area.x1 -= disp_area->x1;
    ac70:	f9bd e0a0 	ldrsh.w	lr, [sp, #160]	; 0xa0
    ac74:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
    ac78:	b28b      	uxth	r3, r1
    ac7a:	ebae 0203 	sub.w	r2, lr, r3
    ac7e:	b292      	uxth	r2, r2
    ac80:	fa0f fc82 	sxth.w	ip, r2
    ac84:	f8ad c0a0 	strh.w	ip, [sp, #160]	; 0xa0
        draw_area.y1 -= disp_area->y1;
    ac88:	f9bd 00a2 	ldrsh.w	r0, [sp, #162]	; 0xa2
    ac8c:	f8b7 9012 	ldrh.w	r9, [r7, #18]
    ac90:	eba0 0509 	sub.w	r5, r0, r9
    ac94:	f8ad 50a2 	strh.w	r5, [sp, #162]	; 0xa2
        draw_area.x2 -= disp_area->x1;
    ac98:	f9bd 60a4 	ldrsh.w	r6, [sp, #164]	; 0xa4
    ac9c:	1af3      	subs	r3, r6, r3
    ac9e:	b29b      	uxth	r3, r3
    aca0:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
        draw_area.y2 -= disp_area->y1;
    aca4:	f8bd 50a6 	ldrh.w	r5, [sp, #166]	; 0xa6
    aca8:	eba5 0509 	sub.w	r5, r5, r9
    acac:	f8ad 50a6 	strh.w	r5, [sp, #166]	; 0xa6
    acb0:	3301      	adds	r3, #1
    acb2:	1a9a      	subs	r2, r3, r2
    acb4:	b215      	sxth	r5, r2
        fill_area.x1 = draw_area.x1 + disp_area->x1;
    acb6:	f8ad e0cc 	strh.w	lr, [sp, #204]	; 0xcc
        fill_area.x2 = draw_area.x2 + disp_area->x1;
    acba:	f8ad 60d0 	strh.w	r6, [sp, #208]	; 0xd0
        fill_area.y1 = draw_area.y1 + disp_area->y1;
    acbe:	f8ad 00ce 	strh.w	r0, [sp, #206]	; 0xce
        fill_area.y2 = fill_area.y1;
    acc2:	f8ad 00d2 	strh.w	r0, [sp, #210]	; 0xd2
        if(dashed) {
    acc6:	f1b8 0f00 	cmp.w	r8, #0
    acca:	d01c      	beq.n	ad06 <lv_draw_line+0x402>
            dash_start = (vdb->area.x1 + draw_area.x1) % (dsc->dash_gap + dsc->dash_width);
    accc:	4461      	add	r1, ip
    acce:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
    acd2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
    acd6:	441a      	add	r2, r3
    acd8:	fb91 f3f2 	sdiv	r3, r1, r2
    acdc:	fb02 1113 	mls	r1, r2, r3, r1
    ace0:	b20b      	sxth	r3, r1
    ace2:	930a      	str	r3, [sp, #40]	; 0x28
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
    ace4:	9509      	str	r5, [sp, #36]	; 0x24
    ace6:	4628      	mov	r0, r5
    ace8:	4b81      	ldr	r3, [pc, #516]	; (aef0 <lv_draw_line+0x5ec>)
    acea:	4798      	blx	r3
    acec:	4682      	mov	sl, r0
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    acee:	f9bd 60a2 	ldrsh.w	r6, [sp, #162]	; 0xa2
    acf2:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
    acf6:	42b3      	cmp	r3, r6
    acf8:	db59      	blt.n	adae <lv_draw_line+0x4aa>
            _lv_memset_ff(mask_buf, draw_area_w);
    acfa:	f8df 9210 	ldr.w	r9, [pc, #528]	; af0c <lv_draw_line+0x608>
            _lv_blend_fill(clip, &fill_area,
    acfe:	f8df b208 	ldr.w	fp, [pc, #520]	; af08 <lv_draw_line+0x604>
    ad02:	9505      	str	r5, [sp, #20]
    ad04:	e035      	b.n	ad72 <lv_draw_line+0x46e>
        if(dashed) {
    ad06:	2100      	movs	r1, #0
    ad08:	e7ea      	b.n	ace0 <lv_draw_line+0x3dc>
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
    ad0a:	f9b4 e006 	ldrsh.w	lr, [r4, #6]
    ad0e:	4473      	add	r3, lr
    ad10:	429a      	cmp	r2, r3
                            mask_buf[i] = 0x00;
    ad12:	bfba      	itte	lt
    ad14:	f80a 1000 	strblt.w	r1, [sl, r0]
    ad18:	4613      	movlt	r3, r2
                            dash_cnt = 0;
    ad1a:	460b      	movge	r3, r1
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
    ad1c:	3001      	adds	r0, #1
    ad1e:	b200      	sxth	r0, r0
    ad20:	3301      	adds	r3, #1
    ad22:	b21a      	sxth	r2, r3
    ad24:	4285      	cmp	r5, r0
    ad26:	dd07      	ble.n	ad38 <lv_draw_line+0x434>
                        if(dash_cnt <= dsc->dash_width) {
    ad28:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
    ad2c:	4293      	cmp	r3, r2
    ad2e:	dbec      	blt.n	ad0a <lv_draw_line+0x406>
                            i += diff;
    ad30:	4418      	add	r0, r3
    ad32:	1a80      	subs	r0, r0, r2
    ad34:	b200      	sxth	r0, r0
    ad36:	e7f1      	b.n	ad1c <lv_draw_line+0x418>
    ad38:	9505      	str	r5, [sp, #20]
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
    ad3a:	2002      	movs	r0, #2
                           dsc->blend_mode);
    ad3c:	7a63      	ldrb	r3, [r4, #9]
            _lv_blend_fill(clip, &fill_area,
    ad3e:	f003 0303 	and.w	r3, r3, #3
    ad42:	9302      	str	r3, [sp, #8]
    ad44:	7a23      	ldrb	r3, [r4, #8]
    ad46:	9301      	str	r3, [sp, #4]
    ad48:	9000      	str	r0, [sp, #0]
    ad4a:	4653      	mov	r3, sl
    ad4c:	8822      	ldrh	r2, [r4, #0]
    ad4e:	a933      	add	r1, sp, #204	; 0xcc
    ad50:	a848      	add	r0, sp, #288	; 0x120
    ad52:	47d8      	blx	fp
            fill_area.y1++;
    ad54:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
    ad58:	3301      	adds	r3, #1
    ad5a:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
            fill_area.y2++;
    ad5e:	f8bd 30d2 	ldrh.w	r3, [sp, #210]	; 0xd2
    ad62:	3301      	adds	r3, #1
    ad64:	f8ad 30d2 	strh.w	r3, [sp, #210]	; 0xd2
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    ad68:	3601      	adds	r6, #1
    ad6a:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
    ad6e:	429e      	cmp	r6, r3
    ad70:	dc1d      	bgt.n	adae <lv_draw_line+0x4aa>
            _lv_memset_ff(mask_buf, draw_area_w);
    ad72:	9909      	ldr	r1, [sp, #36]	; 0x24
    ad74:	4650      	mov	r0, sl
    ad76:	47c8      	blx	r9
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    ad78:	8a7a      	ldrh	r2, [r7, #18]
    ad7a:	4432      	add	r2, r6
    ad7c:	8a39      	ldrh	r1, [r7, #16]
    ad7e:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
    ad82:	4419      	add	r1, r3
    ad84:	9b05      	ldr	r3, [sp, #20]
    ad86:	b212      	sxth	r2, r2
    ad88:	b209      	sxth	r1, r1
    ad8a:	4650      	mov	r0, sl
    ad8c:	4d59      	ldr	r5, [pc, #356]	; (aef4 <lv_draw_line+0x5f0>)
    ad8e:	47a8      	blx	r5
            if(dashed) {
    ad90:	f1b8 0f00 	cmp.w	r8, #0
    ad94:	d0d2      	beq.n	ad3c <lv_draw_line+0x438>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
    ad96:	2800      	cmp	r0, #0
    ad98:	d0d0      	beq.n	ad3c <lv_draw_line+0x438>
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
    ad9a:	9b05      	ldr	r3, [sp, #20]
    ad9c:	2b00      	cmp	r3, #0
    ad9e:	dd04      	ble.n	adaa <lv_draw_line+0x4a6>
    ada0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ada2:	2000      	movs	r0, #0
                            dash_cnt = 0;
    ada4:	4601      	mov	r1, r0
    ada6:	461d      	mov	r5, r3
    ada8:	e7be      	b.n	ad28 <lv_draw_line+0x424>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
    adaa:	2002      	movs	r0, #2
    adac:	e7c6      	b.n	ad3c <lv_draw_line+0x438>
        _lv_mem_buf_release(mask_buf);
    adae:	4650      	mov	r0, sl
    adb0:	4b51      	ldr	r3, [pc, #324]	; (aef8 <lv_draw_line+0x5f4>)
    adb2:	4798      	blx	r3
    adb4:	e1c2      	b.n	b13c <lv_draw_line+0x838>
    lv_opa_t opa = dsc->opa;
    adb6:	f894 9008 	ldrb.w	r9, [r4, #8]
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    adba:	4b50      	ldr	r3, [pc, #320]	; (aefc <lv_draw_line+0x5f8>)
    adbc:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    adbe:	4b50      	ldr	r3, [pc, #320]	; (af00 <lv_draw_line+0x5fc>)
    adc0:	4798      	blx	r3
    adc2:	4680      	mov	r8, r0
    int32_t w = dsc->width - 1;
    adc4:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
    adc8:	3d01      	subs	r5, #1
    int32_t w_half0 = w >> 1;
    adca:	106f      	asrs	r7, r5, #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
    adcc:	f005 0501 	and.w	r5, r5, #1
    add0:	443d      	add	r5, r7
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
    add2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
    add6:	b12b      	cbz	r3, ade4 <lv_draw_line+0x4e0>
    add8:	f9b4 6004 	ldrsh.w	r6, [r4, #4]
    addc:	3600      	adds	r6, #0
    adde:	bf18      	it	ne
    ade0:	2601      	movne	r6, #1
    ade2:	e000      	b.n	ade6 <lv_draw_line+0x4e2>
    ade4:	2600      	movs	r6, #0
    if(lv_draw_mask_get_cnt()) simple_mode = false;
    ade6:	4b47      	ldr	r3, [pc, #284]	; (af04 <lv_draw_line+0x600>)
    ade8:	4798      	blx	r3
    adea:	b910      	cbnz	r0, adf2 <lv_draw_line+0x4ee>
    else if(dashed) simple_mode = false;
    adec:	f086 0201 	eor.w	r2, r6, #1
    adf0:	e000      	b.n	adf4 <lv_draw_line+0x4f0>
    if(lv_draw_mask_get_cnt()) simple_mode = false;
    adf2:	2200      	movs	r2, #0
    draw_area.x1 = point1->x - w_half1;
    adf4:	9906      	ldr	r1, [sp, #24]
    adf6:	880b      	ldrh	r3, [r1, #0]
    adf8:	1b5d      	subs	r5, r3, r5
    adfa:	f8ad 50a0 	strh.w	r5, [sp, #160]	; 0xa0
    draw_area.x2 = point1->x + w_half0;
    adfe:	441f      	add	r7, r3
    ae00:	f8ad 70a4 	strh.w	r7, [sp, #164]	; 0xa4
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
    ae04:	9b07      	ldr	r3, [sp, #28]
    ae06:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    ae0a:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
    ae0e:	4618      	mov	r0, r3
    ae10:	428b      	cmp	r3, r1
    ae12:	bfa8      	it	ge
    ae14:	4608      	movge	r0, r1
    ae16:	f8ad 00a2 	strh.w	r0, [sp, #162]	; 0xa2
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;
    ae1a:	428b      	cmp	r3, r1
    ae1c:	bfb8      	it	lt
    ae1e:	460b      	movlt	r3, r1
    ae20:	3b01      	subs	r3, #1
    ae22:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
    if(simple_mode) {
    ae26:	b172      	cbz	r2, ae46 <lv_draw_line+0x542>
                       dsc->blend_mode);
    ae28:	7a63      	ldrb	r3, [r4, #9]
        _lv_blend_fill(clip, &draw_area,
    ae2a:	f003 0303 	and.w	r3, r3, #3
    ae2e:	9302      	str	r3, [sp, #8]
    ae30:	f8cd 9004 	str.w	r9, [sp, #4]
    ae34:	2301      	movs	r3, #1
    ae36:	9300      	str	r3, [sp, #0]
    ae38:	2300      	movs	r3, #0
    ae3a:	8822      	ldrh	r2, [r4, #0]
    ae3c:	a928      	add	r1, sp, #160	; 0xa0
    ae3e:	a848      	add	r0, sp, #288	; 0x120
    ae40:	4d31      	ldr	r5, [pc, #196]	; (af08 <lv_draw_line+0x604>)
    ae42:	47a8      	blx	r5
    ae44:	e17a      	b.n	b13c <lv_draw_line+0x838>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
    ae46:	aa28      	add	r2, sp, #160	; 0xa0
    ae48:	a948      	add	r1, sp, #288	; 0x120
    ae4a:	4610      	mov	r0, r2
    ae4c:	4b27      	ldr	r3, [pc, #156]	; (aeec <lv_draw_line+0x5e8>)
    ae4e:	4798      	blx	r3
        if(!is_common) return;
    ae50:	2800      	cmp	r0, #0
    ae52:	f000 8173 	beq.w	b13c <lv_draw_line+0x838>
        draw_area.x1 -= vdb->area.x1;
    ae56:	f9bd 00a0 	ldrsh.w	r0, [sp, #160]	; 0xa0
    ae5a:	f8b8 3010 	ldrh.w	r3, [r8, #16]
    ae5e:	1ac5      	subs	r5, r0, r3
    ae60:	b2ad      	uxth	r5, r5
    ae62:	f8ad 50a0 	strh.w	r5, [sp, #160]	; 0xa0
        draw_area.y1 -= vdb->area.y1;
    ae66:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
    ae6a:	f8b8 7012 	ldrh.w	r7, [r8, #18]
    ae6e:	1bd1      	subs	r1, r2, r7
    ae70:	f8ad 10a2 	strh.w	r1, [sp, #162]	; 0xa2
        draw_area.x2 -= vdb->area.x1;
    ae74:	f9bd 10a4 	ldrsh.w	r1, [sp, #164]	; 0xa4
    ae78:	1acb      	subs	r3, r1, r3
    ae7a:	b29b      	uxth	r3, r3
    ae7c:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
        draw_area.y2 -= vdb->area.y1;
    ae80:	f8bd e0a6 	ldrh.w	lr, [sp, #166]	; 0xa6
    ae84:	ebae 0707 	sub.w	r7, lr, r7
    ae88:	f8ad 70a6 	strh.w	r7, [sp, #166]	; 0xa6
    ae8c:	3301      	adds	r3, #1
    ae8e:	1b5b      	subs	r3, r3, r5
    ae90:	b21b      	sxth	r3, r3
    ae92:	9309      	str	r3, [sp, #36]	; 0x24
        fill_area.x1 = draw_area.x1 + disp_area->x1;
    ae94:	f8ad 00cc 	strh.w	r0, [sp, #204]	; 0xcc
        fill_area.x2 = draw_area.x2 + disp_area->x1;
    ae98:	f8ad 10d0 	strh.w	r1, [sp, #208]	; 0xd0
        fill_area.y1 = draw_area.y1 + disp_area->y1;
    ae9c:	f8ad 20ce 	strh.w	r2, [sp, #206]	; 0xce
        fill_area.y2 = fill_area.y1;
    aea0:	f8ad 20d2 	strh.w	r2, [sp, #210]	; 0xd2
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
    aea4:	930a      	str	r3, [sp, #40]	; 0x28
    aea6:	4618      	mov	r0, r3
    aea8:	4b11      	ldr	r3, [pc, #68]	; (aef0 <lv_draw_line+0x5ec>)
    aeaa:	4798      	blx	r3
    aeac:	9005      	str	r0, [sp, #20]
        if(dashed) {
    aeae:	b176      	cbz	r6, aece <lv_draw_line+0x5ca>
            dash_start = (vdb->area.x1 + draw_area.x1) % (dsc->dash_gap + dsc->dash_width);
    aeb0:	f9b8 2010 	ldrsh.w	r2, [r8, #16]
    aeb4:	f9bd 70a0 	ldrsh.w	r7, [sp, #160]	; 0xa0
    aeb8:	443a      	add	r2, r7
    aeba:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
    aebe:	f9b4 7004 	ldrsh.w	r7, [r4, #4]
    aec2:	443b      	add	r3, r7
    aec4:	fb92 f7f3 	sdiv	r7, r2, r3
    aec8:	fb03 2717 	mls	r7, r3, r7, r2
    aecc:	e000      	b.n	aed0 <lv_draw_line+0x5cc>
        if(dashed) {
    aece:	2700      	movs	r7, #0
    aed0:	b23f      	sxth	r7, r7
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    aed2:	f9bd 50a2 	ldrsh.w	r5, [sp, #162]	; 0xa2
    aed6:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
    aeda:	429d      	cmp	r5, r3
    aedc:	dc53      	bgt.n	af86 <lv_draw_line+0x682>
            _lv_memset_ff(mask_buf, draw_area_w);
    aede:	f8df 902c 	ldr.w	r9, [pc, #44]	; af0c <lv_draw_line+0x608>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    aee2:	f8df a010 	ldr.w	sl, [pc, #16]	; aef4 <lv_draw_line+0x5f0>
            _lv_blend_fill(clip, &fill_area,
    aee6:	f8df b020 	ldr.w	fp, [pc, #32]	; af08 <lv_draw_line+0x604>
    aeea:	e02c      	b.n	af46 <lv_draw_line+0x642>
    aeec:	0001150d 	.word	0x0001150d
    aef0:	00012931 	.word	0x00012931
    aef4:	0000be11 	.word	0x0000be11
    aef8:	00012565 	.word	0x00012565
    aefc:	00005f5d 	.word	0x00005f5d
    af00:	00010fd1 	.word	0x00010fd1
    af04:	0000beb9 	.word	0x0000beb9
    af08:	00007745 	.word	0x00007745
    af0c:	00012be1 	.word	0x00012be1
                dash_cnt ++;
    af10:	3701      	adds	r7, #1
    af12:	b23f      	sxth	r7, r7
            _lv_blend_fill(clip, &fill_area,
    af14:	2300      	movs	r3, #0
    af16:	9302      	str	r3, [sp, #8]
    af18:	7a23      	ldrb	r3, [r4, #8]
    af1a:	9301      	str	r3, [sp, #4]
    af1c:	9000      	str	r0, [sp, #0]
    af1e:	9b05      	ldr	r3, [sp, #20]
    af20:	8822      	ldrh	r2, [r4, #0]
    af22:	a933      	add	r1, sp, #204	; 0xcc
    af24:	a848      	add	r0, sp, #288	; 0x120
    af26:	47d8      	blx	fp
            fill_area.y1++;
    af28:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
    af2c:	3301      	adds	r3, #1
    af2e:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
            fill_area.y2++;
    af32:	f8bd 30d2 	ldrh.w	r3, [sp, #210]	; 0xd2
    af36:	3301      	adds	r3, #1
    af38:	f8ad 30d2 	strh.w	r3, [sp, #210]	; 0xd2
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    af3c:	3501      	adds	r5, #1
    af3e:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
    af42:	429d      	cmp	r5, r3
    af44:	dc1f      	bgt.n	af86 <lv_draw_line+0x682>
            _lv_memset_ff(mask_buf, draw_area_w);
    af46:	990a      	ldr	r1, [sp, #40]	; 0x28
    af48:	9805      	ldr	r0, [sp, #20]
    af4a:	47c8      	blx	r9
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    af4c:	f8b8 2012 	ldrh.w	r2, [r8, #18]
    af50:	442a      	add	r2, r5
    af52:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    af56:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
    af5a:	4419      	add	r1, r3
    af5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    af5e:	b212      	sxth	r2, r2
    af60:	b209      	sxth	r1, r1
    af62:	9805      	ldr	r0, [sp, #20]
    af64:	47d0      	blx	sl
            if(dashed) {
    af66:	2e00      	cmp	r6, #0
    af68:	d0d4      	beq.n	af14 <lv_draw_line+0x610>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
    af6a:	2800      	cmp	r0, #0
    af6c:	d0d0      	beq.n	af10 <lv_draw_line+0x60c>
                    if(dash_cnt > dsc->dash_width) {
    af6e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
                        mask_res = LV_DRAW_MASK_RES_TRANSP;
    af72:	42ba      	cmp	r2, r7
    af74:	bfb8      	it	lt
    af76:	2000      	movlt	r0, #0
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
    af78:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
    af7c:	4413      	add	r3, r2
                        dash_cnt = 0;
    af7e:	429f      	cmp	r7, r3
    af80:	bfa8      	it	ge
    af82:	2700      	movge	r7, #0
    af84:	e7c4      	b.n	af10 <lv_draw_line+0x60c>
        _lv_mem_buf_release(mask_buf);
    af86:	9805      	ldr	r0, [sp, #20]
    af88:	4b97      	ldr	r3, [pc, #604]	; (b1e8 <lv_draw_line+0x8e4>)
    af8a:	4798      	blx	r3
    af8c:	e0d6      	b.n	b13c <lv_draw_line+0x838>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
    af8e:	fa1f fb86 	uxth.w	fp, r6
    af92:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    af96:	b2a9      	uxth	r1, r5
    af98:	eb0b 0208 	add.w	r2, fp, r8
    af9c:	2300      	movs	r3, #0
    af9e:	9301      	str	r3, [sp, #4]
    afa0:	460f      	mov	r7, r1
    afa2:	4488      	add	r8, r1
    afa4:	fa0f f388 	sxth.w	r3, r8
    afa8:	9300      	str	r3, [sp, #0]
    afaa:	4653      	mov	r3, sl
    afac:	b212      	sxth	r2, r2
    afae:	9905      	ldr	r1, [sp, #20]
    afb0:	a812      	add	r0, sp, #72	; 0x48
    afb2:	f8df 8238 	ldr.w	r8, [pc, #568]	; b1ec <lv_draw_line+0x8e8>
    afb6:	47c0      	blx	r8
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
    afb8:	fa1f f389 	uxth.w	r3, r9
    afbc:	ebab 0203 	sub.w	r2, fp, r3
    afc0:	2101      	movs	r1, #1
    afc2:	9101      	str	r1, [sp, #4]
    afc4:	1afb      	subs	r3, r7, r3
    afc6:	b21b      	sxth	r3, r3
    afc8:	9300      	str	r3, [sp, #0]
    afca:	4653      	mov	r3, sl
    afcc:	b212      	sxth	r2, r2
    afce:	9905      	ldr	r1, [sp, #20]
    afd0:	a81d      	add	r0, sp, #116	; 0x74
    afd2:	47c0      	blx	r8
    afd4:	e570      	b.n	aab8 <lv_draw_line+0x1b4>
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
    afd6:	f8bd b014 	ldrh.w	fp, [sp, #20]
    afda:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    afde:	fa1f f38a 	uxth.w	r3, sl
    afe2:	461f      	mov	r7, r3
    afe4:	4443      	add	r3, r8
    afe6:	44d8      	add	r8, fp
    afe8:	2200      	movs	r2, #0
    afea:	9201      	str	r2, [sp, #4]
    afec:	9500      	str	r5, [sp, #0]
    afee:	b21b      	sxth	r3, r3
    aff0:	4632      	mov	r2, r6
    aff2:	fa0f f188 	sxth.w	r1, r8
    aff6:	a812      	add	r0, sp, #72	; 0x48
    aff8:	f8df 81f0 	ldr.w	r8, [pc, #496]	; b1ec <lv_draw_line+0x8e8>
    affc:	47c0      	blx	r8
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
    affe:	fa1f f989 	uxth.w	r9, r9
    b002:	eba7 0309 	sub.w	r3, r7, r9
    b006:	ebab 0909 	sub.w	r9, fp, r9
    b00a:	2201      	movs	r2, #1
    b00c:	9201      	str	r2, [sp, #4]
    b00e:	9500      	str	r5, [sp, #0]
    b010:	b21b      	sxth	r3, r3
    b012:	4632      	mov	r2, r6
    b014:	fa0f f189 	sxth.w	r1, r9
    b018:	a81d      	add	r0, sp, #116	; 0x74
    b01a:	47c0      	blx	r8
    b01c:	e54c      	b.n	aab8 <lv_draw_line+0x1b4>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
    b01e:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
    b022:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
    b026:	9905      	ldr	r1, [sp, #20]
    b028:	eba1 0308 	sub.w	r3, r1, r8
    b02c:	2203      	movs	r2, #3
    b02e:	9201      	str	r2, [sp, #4]
    b030:	eb09 0206 	add.w	r2, r9, r6
    b034:	b212      	sxth	r2, r2
    b036:	9200      	str	r2, [sp, #0]
    b038:	b21b      	sxth	r3, r3
    b03a:	4632      	mov	r2, r6
    b03c:	a828      	add	r0, sp, #160	; 0xa0
    b03e:	4e6b      	ldr	r6, [pc, #428]	; (b1ec <lv_draw_line+0x8e8>)
    b040:	47b0      	blx	r6
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
    b042:	ebaa 0308 	sub.w	r3, sl, r8
    b046:	2202      	movs	r2, #2
    b048:	9201      	str	r2, [sp, #4]
    b04a:	eb09 0205 	add.w	r2, r9, r5
    b04e:	b212      	sxth	r2, r2
    b050:	9200      	str	r2, [sp, #0]
    b052:	b21b      	sxth	r3, r3
    b054:	462a      	mov	r2, r5
    b056:	4651      	mov	r1, sl
    b058:	a833      	add	r0, sp, #204	; 0xcc
    b05a:	47b0      	blx	r6
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
    b05c:	2100      	movs	r1, #0
    b05e:	a828      	add	r0, sp, #160	; 0xa0
    b060:	4d63      	ldr	r5, [pc, #396]	; (b1f0 <lv_draw_line+0x8ec>)
    b062:	47a8      	blx	r5
    b064:	900a      	str	r0, [sp, #40]	; 0x28
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
    b066:	2100      	movs	r1, #0
    b068:	a833      	add	r0, sp, #204	; 0xcc
    b06a:	47a8      	blx	r5
    b06c:	900d      	str	r0, [sp, #52]	; 0x34
    b06e:	e536      	b.n	aade <lv_draw_line+0x1da>
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), LV_HOR_RES_MAX);
    b070:	a80e      	add	r0, sp, #56	; 0x38
    b072:	4b60      	ldr	r3, [pc, #384]	; (b1f4 <lv_draw_line+0x8f0>)
    b074:	4798      	blx	r3
    b076:	4683      	mov	fp, r0
    b078:	e55a      	b.n	ab30 <lv_draw_line+0x22c>
            _lv_memset_00(&mask_buf[mask_p], draw_area_w);
    b07a:	4629      	mov	r1, r5
    b07c:	4640      	mov	r0, r8
    b07e:	4b5e      	ldr	r3, [pc, #376]	; (b1f8 <lv_draw_line+0x8f4>)
    b080:	4798      	blx	r3
    b082:	e02d      	b.n	b0e0 <lv_draw_line+0x7dc>
                           dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                           dsc->blend_mode);
    b084:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b086:	7a53      	ldrb	r3, [r2, #9]
            _lv_blend_fill(&fill_area, clip,
    b088:	f003 0303 	and.w	r3, r3, #3
    b08c:	9302      	str	r3, [sp, #8]
    b08e:	7a13      	ldrb	r3, [r2, #8]
    b090:	9301      	str	r3, [sp, #4]
    b092:	2302      	movs	r3, #2
    b094:	9300      	str	r3, [sp, #0]
    b096:	464b      	mov	r3, r9
    b098:	8812      	ldrh	r2, [r2, #0]
    b09a:	a948      	add	r1, sp, #288	; 0x120
    b09c:	a810      	add	r0, sp, #64	; 0x40
    b09e:	4c57      	ldr	r4, [pc, #348]	; (b1fc <lv_draw_line+0x8f8>)
    b0a0:	47a0      	blx	r4

            fill_area.y1 = fill_area.y2 + 1;
    b0a2:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
    b0a6:	3301      	adds	r3, #1
    b0a8:	b21b      	sxth	r3, r3
    b0aa:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2 = fill_area.y1;
    b0ae:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            mask_p = 0;
            _lv_memset_ff(mask_buf, mask_buf_size);
    b0b2:	4659      	mov	r1, fp
    b0b4:	4648      	mov	r0, r9
    b0b6:	4b52      	ldr	r3, [pc, #328]	; (b200 <lv_draw_line+0x8fc>)
    b0b8:	4798      	blx	r3
            mask_p = 0;
    b0ba:	2700      	movs	r7, #0
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
    b0bc:	3601      	adds	r6, #1
    b0be:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    b0c2:	f9ba 2012 	ldrsh.w	r2, [sl, #18]
    b0c6:	4413      	add	r3, r2
    b0c8:	429e      	cmp	r6, r3
    b0ca:	dc13      	bgt.n	b0f4 <lv_draw_line+0x7f0>
        lv_draw_mask_res_t mask_res = lv_draw_mask_apply(&mask_buf[mask_p], x, h, draw_area_w);
    b0cc:	eb09 0807 	add.w	r8, r9, r7
    b0d0:	462b      	mov	r3, r5
    b0d2:	b232      	sxth	r2, r6
    b0d4:	9905      	ldr	r1, [sp, #20]
    b0d6:	4640      	mov	r0, r8
    b0d8:	4c4a      	ldr	r4, [pc, #296]	; (b204 <lv_draw_line+0x900>)
    b0da:	47a0      	blx	r4
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
    b0dc:	2800      	cmp	r0, #0
    b0de:	d0cc      	beq.n	b07a <lv_draw_line+0x776>
        mask_p += draw_area_w;
    b0e0:	442f      	add	r7, r5
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
    b0e2:	19eb      	adds	r3, r5, r7
    b0e4:	459b      	cmp	fp, r3
    b0e6:	d9cd      	bls.n	b084 <lv_draw_line+0x780>
            fill_area.y2 ++;
    b0e8:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
    b0ec:	3301      	adds	r3, #1
    b0ee:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    b0f2:	e7e3      	b.n	b0bc <lv_draw_line+0x7b8>
    b0f4:	9c09      	ldr	r4, [sp, #36]	; 0x24
        }
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
    b0f6:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
    b0fa:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
    b0fe:	429a      	cmp	r2, r3
    b100:	d010      	beq.n	b124 <lv_draw_line+0x820>
        fill_area.y2--;
    b102:	3b01      	subs	r3, #1
    b104:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        _lv_blend_fill(&fill_area, clip,
                       dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                       dsc->blend_mode);
    b108:	7a63      	ldrb	r3, [r4, #9]
        _lv_blend_fill(&fill_area, clip,
    b10a:	f003 0303 	and.w	r3, r3, #3
    b10e:	9302      	str	r3, [sp, #8]
    b110:	7a23      	ldrb	r3, [r4, #8]
    b112:	9301      	str	r3, [sp, #4]
    b114:	2302      	movs	r3, #2
    b116:	9300      	str	r3, [sp, #0]
    b118:	464b      	mov	r3, r9
    b11a:	8822      	ldrh	r2, [r4, #0]
    b11c:	a948      	add	r1, sp, #288	; 0x120
    b11e:	a810      	add	r0, sp, #64	; 0x40
    b120:	4d36      	ldr	r5, [pc, #216]	; (b1fc <lv_draw_line+0x8f8>)
    b122:	47a8      	blx	r5

    }

    _lv_mem_buf_release(mask_buf);
    b124:	4648      	mov	r0, r9
    b126:	4b30      	ldr	r3, [pc, #192]	; (b1e8 <lv_draw_line+0x8e4>)
    b128:	4798      	blx	r3

    lv_draw_mask_remove_id(mask_left_id);
    b12a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b12c:	4d36      	ldr	r5, [pc, #216]	; (b208 <lv_draw_line+0x904>)
    b12e:	47a8      	blx	r5
    lv_draw_mask_remove_id(mask_right_id);
    b130:	980c      	ldr	r0, [sp, #48]	; 0x30
    b132:	47a8      	blx	r5
    lv_draw_mask_remove_id(mask_top_id);
    b134:	980a      	ldr	r0, [sp, #40]	; 0x28
    b136:	47a8      	blx	r5
    lv_draw_mask_remove_id(mask_bottom_id);
    b138:	980d      	ldr	r0, [sp, #52]	; 0x34
    b13a:	47a8      	blx	r5
    if(dsc->round_end || dsc->round_start) {
    b13c:	7a63      	ldrb	r3, [r4, #9]
    b13e:	f013 0f0c 	tst.w	r3, #12
    b142:	d102      	bne.n	b14a <lv_draw_line+0x846>
}
    b144:	b04b      	add	sp, #300	; 0x12c
    b146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_draw_rect_dsc_init(&cir_dsc);
    b14a:	a833      	add	r0, sp, #204	; 0xcc
    b14c:	4b2f      	ldr	r3, [pc, #188]	; (b20c <lv_draw_line+0x908>)
    b14e:	4798      	blx	r3
        cir_dsc.bg_color = dsc->color;
    b150:	8823      	ldrh	r3, [r4, #0]
    b152:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
        cir_dsc.radius = LV_RADIUS_CIRCLE;
    b156:	f647 73ff 	movw	r3, #32767	; 0x7fff
    b15a:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
        cir_dsc.bg_opa = dsc->opa;
    b15e:	7a23      	ldrb	r3, [r4, #8]
    b160:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
        int32_t r = (dsc->width >> 1);
    b164:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    b168:	105e      	asrs	r6, r3, #1
        int32_t r_corr = (dsc->width & 1) ? 0 : 1;
    b16a:	f083 0301 	eor.w	r3, r3, #1
    b16e:	f003 0501 	and.w	r5, r3, #1
        if(dsc->round_start) {
    b172:	7a63      	ldrb	r3, [r4, #9]
    b174:	f013 0f04 	tst.w	r3, #4
    b178:	d11c      	bne.n	b1b4 <lv_draw_line+0x8b0>
        if(dsc->round_end) {
    b17a:	7a63      	ldrb	r3, [r4, #9]
    b17c:	f013 0f08 	tst.w	r3, #8
    b180:	d0e0      	beq.n	b144 <lv_draw_line+0x840>
            cir_area.x1 = point2->x - r;
    b182:	9907      	ldr	r1, [sp, #28]
    b184:	880a      	ldrh	r2, [r1, #0]
    b186:	b2b6      	uxth	r6, r6
    b188:	1b93      	subs	r3, r2, r6
    b18a:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
            cir_area.y1 = point2->y - r;
    b18e:	8849      	ldrh	r1, [r1, #2]
    b190:	1b8b      	subs	r3, r1, r6
    b192:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
            cir_area.x2 = point2->x + r - r_corr;
    b196:	b2ab      	uxth	r3, r5
    b198:	4432      	add	r2, r6
    b19a:	1ad2      	subs	r2, r2, r3
    b19c:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
            cir_area.y2 = point2->y + r - r_corr ;
    b1a0:	440e      	add	r6, r1
    b1a2:	1af3      	subs	r3, r6, r3
    b1a4:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
            lv_draw_rect(&cir_area, clip, &cir_dsc);
    b1a8:	aa33      	add	r2, sp, #204	; 0xcc
    b1aa:	9908      	ldr	r1, [sp, #32]
    b1ac:	a828      	add	r0, sp, #160	; 0xa0
    b1ae:	4b18      	ldr	r3, [pc, #96]	; (b210 <lv_draw_line+0x90c>)
    b1b0:	4798      	blx	r3
    b1b2:	e7c7      	b.n	b144 <lv_draw_line+0x840>
            cir_area.x1 = point1->x - r;
    b1b4:	9806      	ldr	r0, [sp, #24]
    b1b6:	8802      	ldrh	r2, [r0, #0]
    b1b8:	b2b3      	uxth	r3, r6
    b1ba:	1ad1      	subs	r1, r2, r3
    b1bc:	f8ad 10a0 	strh.w	r1, [sp, #160]	; 0xa0
            cir_area.y1 = point1->y - r;
    b1c0:	8840      	ldrh	r0, [r0, #2]
    b1c2:	1ac1      	subs	r1, r0, r3
    b1c4:	f8ad 10a2 	strh.w	r1, [sp, #162]	; 0xa2
            cir_area.x2 = point1->x + r - r_corr;
    b1c8:	b2a9      	uxth	r1, r5
    b1ca:	441a      	add	r2, r3
    b1cc:	1a52      	subs	r2, r2, r1
    b1ce:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
            cir_area.y2 = point1->y + r - r_corr ;
    b1d2:	4403      	add	r3, r0
    b1d4:	1a5b      	subs	r3, r3, r1
    b1d6:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
            lv_draw_rect(&cir_area, clip, &cir_dsc);
    b1da:	aa33      	add	r2, sp, #204	; 0xcc
    b1dc:	9908      	ldr	r1, [sp, #32]
    b1de:	a828      	add	r0, sp, #160	; 0xa0
    b1e0:	4b0b      	ldr	r3, [pc, #44]	; (b210 <lv_draw_line+0x90c>)
    b1e2:	4798      	blx	r3
    b1e4:	e7c9      	b.n	b17a <lv_draw_line+0x876>
    b1e6:	bf00      	nop
    b1e8:	00012565 	.word	0x00012565
    b1ec:	0000bedd 	.word	0x0000bedd
    b1f0:	0000bdb5 	.word	0x0000bdb5
    b1f4:	000114f1 	.word	0x000114f1
    b1f8:	00012b2b 	.word	0x00012b2b
    b1fc:	00007745 	.word	0x00007745
    b200:	00012be1 	.word	0x00012be1
    b204:	0000be11 	.word	0x0000be11
    b208:	0000be61 	.word	0x0000be61
    b20c:	0000c25d 	.word	0x0000c25d
    b210:	0000c325 	.word	0x0000c325

0000b214 <lv_draw_mask_line>:
 **********************/

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_line(lv_opa_t * mask_buf, lv_coord_t abs_x,
                                                                  lv_coord_t abs_y, lv_coord_t len,
                                                                  lv_draw_mask_line_param_t * p)
{
    b214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b218:	9c06      	ldr	r4, [sp, #24]
    /*Make to points relative to the vertex*/
    abs_y -= p->origo.y;
    b21a:	8aa5      	ldrh	r5, [r4, #20]
    b21c:	1b52      	subs	r2, r2, r5
    b21e:	b212      	sxth	r2, r2
    abs_x -= p->origo.x;
    b220:	8a65      	ldrh	r5, [r4, #18]
    b222:	1b4d      	subs	r5, r1, r5
    b224:	b22d      	sxth	r5, r5

    /*Handle special cases*/
    if(p->steep == 0) {
    b226:	6a21      	ldr	r1, [r4, #32]
    b228:	2900      	cmp	r1, #0
    b22a:	d14b      	bne.n	b2c4 <lv_draw_mask_line+0xb0>
        /*Horizontal*/
        if(p->flat) {
    b22c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    b230:	f011 0f01 	tst.w	r1, #1
    b234:	d016      	beq.n	b264 <lv_draw_mask_line+0x50>
            /*Non sense: Can't be on the right/left of a horizontal line*/
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
    b236:	7c23      	ldrb	r3, [r4, #16]
    b238:	f003 0303 	and.w	r3, r3, #3
    b23c:	2b01      	cmp	r3, #1
    b23e:	f240 81db 	bls.w	b5f8 <lv_draw_mask_line+0x3e4>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
    b242:	2b02      	cmp	r3, #2
    b244:	d004      	beq.n	b250 <lv_draw_mask_line+0x3c>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
    b246:	2b03      	cmp	r3, #3
    b248:	d006      	beq.n	b258 <lv_draw_mask_line+0x44>
            else {
                return LV_DRAW_MASK_RES_TRANSP;
    b24a:	2000      	movs	r0, #0
    b24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
    b250:	3201      	adds	r2, #1
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
    b252:	0fd0      	lsrs	r0, r2, #31
    b254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b258:	2a00      	cmp	r2, #0
    b25a:	bfd4      	ite	le
    b25c:	2000      	movle	r0, #0
    b25e:	2001      	movgt	r0, #1
    b260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            }
        }
        /*Vertical*/
        else {
            /*Non sense: Can't be on the top/bottom of a vertical line*/
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
    b264:	7c22      	ldrb	r2, [r4, #16]
    b266:	f002 0203 	and.w	r2, r2, #3
    b26a:	1e91      	subs	r1, r2, #2
    b26c:	b2c9      	uxtb	r1, r1
    b26e:	2901      	cmp	r1, #1
    b270:	f240 81c5 	bls.w	b5fe <lv_draw_mask_line+0x3ea>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
    b274:	2a01      	cmp	r2, #1
    b276:	d00c      	beq.n	b292 <lv_draw_mask_line+0x7e>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) {
    b278:	b9b2      	cbnz	r2, b2a8 <lv_draw_mask_line+0x94>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
    b27a:	18e9      	adds	r1, r5, r3
    b27c:	f100 81c2 	bmi.w	b604 <lv_draw_mask_line+0x3f0>
                else {
                    int32_t k = - abs_x;
    b280:	426d      	negs	r5, r5
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
    b282:	2d00      	cmp	r5, #0
    b284:	f2c0 81c1 	blt.w	b60a <lv_draw_mask_line+0x3f6>
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
    b288:	42ab      	cmp	r3, r5
    b28a:	dc07      	bgt.n	b29c <lv_draw_mask_line+0x88>
                    return  LV_DRAW_MASK_RES_CHANGED;
    b28c:	2002      	movs	r0, #2
    b28e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
    b292:	2d00      	cmp	r5, #0
    b294:	dd08      	ble.n	b2a8 <lv_draw_mask_line+0x94>
    b296:	2001      	movs	r0, #1
    b298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
    b29c:	4428      	add	r0, r5
    b29e:	4bcd      	ldr	r3, [pc, #820]	; (b5d4 <lv_draw_mask_line+0x3c0>)
    b2a0:	4798      	blx	r3
                    return  LV_DRAW_MASK_RES_CHANGED;
    b2a2:	2002      	movs	r0, #2
    b2a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                }
            }
            else {
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
    b2a8:	42dd      	cmn	r5, r3
    b2aa:	f100 81b1 	bmi.w	b610 <lv_draw_mask_line+0x3fc>
                else {
                    int32_t k = - abs_x;
    b2ae:	4269      	negs	r1, r5
    b2b0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
                    if(k < 0) k = 0;
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
    b2b4:	428b      	cmp	r3, r1
    b2b6:	f340 81ae 	ble.w	b616 <lv_draw_mask_line+0x402>
                    else if(k >= 0 && k < len) _lv_memset_00(&mask_buf[0], k);
    b2ba:	4bc6      	ldr	r3, [pc, #792]	; (b5d4 <lv_draw_mask_line+0x3c0>)
    b2bc:	4798      	blx	r3
                    return  LV_DRAW_MASK_RES_CHANGED;
    b2be:	2002      	movs	r0, #2
    b2c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            }
        }
    }

    lv_draw_mask_res_t res;
    if(p->flat) {
    b2c4:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
    b2c8:	f016 0f01 	tst.w	r6, #1
    b2cc:	d10f      	bne.n	b2ee <lv_draw_mask_line+0xda>
{
    int32_t k;
    int32_t x_at_y;
    /* At the beginning of the mask if the limit line is greater then the mask's y.
     * Then the mask is in the "wrong" area*/
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
    b2ce:	69a7      	ldr	r7, [r4, #24]
    b2d0:	fb02 f107 	mul.w	r1, r2, r7
    b2d4:	1289      	asrs	r1, r1, #10
    if(p->xy_steep > 0) x_at_y++;
    b2d6:	2f00      	cmp	r7, #0
    b2d8:	bfcc      	ite	gt
    b2da:	f101 0e01 	addgt.w	lr, r1, #1
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
    b2de:	468e      	movle	lr, r1
    if(x_at_y < abs_x) {
    b2e0:	4575      	cmp	r5, lr
    b2e2:	f340 8098 	ble.w	b416 <lv_draw_mask_line+0x202>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
    b2e6:	f3c6 0040 	ubfx	r0, r6, #1, #1
    b2ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
    b2ee:	69e1      	ldr	r1, [r4, #28]
    b2f0:	fb05 f701 	mul.w	r7, r5, r1
    b2f4:	12bf      	asrs	r7, r7, #10
    if(p->yx_steep > 0) {
    b2f6:	2900      	cmp	r1, #0
    b2f8:	dd06      	ble.n	b308 <lv_draw_mask_line+0xf4>
        if(y_at_x > abs_y) {
    b2fa:	4297      	cmp	r7, r2
    b2fc:	f340 81b8 	ble.w	b670 <lv_draw_mask_line+0x45c>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
    b300:	f3c6 0040 	ubfx	r0, r6, #1, #1
    b304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(y_at_x < abs_y) {
    b308:	4297      	cmp	r7, r2
    b30a:	f280 81ed 	bge.w	b6e8 <lv_draw_mask_line+0x4d4>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
    b30e:	f3c6 0040 	ubfx	r0, r6, #1, #1
    b312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if(p->inv) {
    b316:	f086 0002 	eor.w	r0, r6, #2
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
    b31a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    b31e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if(p->inv) {
    b322:	f086 0002 	eor.w	r0, r6, #2
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
    b326:	f3c0 0040 	ubfx	r0, r0, #1, #1
    b32a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}


LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
    if(mask_new >= LV_OPA_MAX) return mask_act;
    if(mask_new <= LV_OPA_MIN) return 0;
    b32e:	2500      	movs	r5, #0
    b330:	e1d4      	b.n	b6dc <lv_draw_mask_line+0x4c8>
    b332:	46f4      	mov	ip, lr
            mask_buf[k] = mask_mix(mask_buf[k], m);
    b334:	f888 c000 	strb.w	ip, [r8]
        px_h -= p->spx;
    b338:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b33a:	1ad2      	subs	r2, r2, r3
        k++;
    b33c:	3501      	adds	r5, #1
    b33e:	3601      	adds	r6, #1
        if(k >= len) break;
    b340:	42bd      	cmp	r5, r7
    b342:	da49      	bge.n	b3d8 <lv_draw_mask_line+0x1c4>
    while(px_h > p->spx) {
    b344:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b346:	429a      	cmp	r2, r3
    b348:	dd1d      	ble.n	b386 <lv_draw_mask_line+0x172>
        if(k >= 0 && k < len) {
    b34a:	2d00      	cmp	r5, #0
    b34c:	dbf4      	blt.n	b338 <lv_draw_mask_line+0x124>
    b34e:	42bd      	cmp	r5, r7
    b350:	daf2      	bge.n	b338 <lv_draw_mask_line+0x124>
            m = px_h - (p->spx >> 1);
    b352:	eba2 0363 	sub.w	r3, r2, r3, asr #1
    b356:	b2db      	uxtb	r3, r3
            if(p->inv) m = 255 - m;
    b358:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    b35c:	f01c 0f02 	tst.w	ip, #2
    b360:	bf1c      	itt	ne
    b362:	43db      	mvnne	r3, r3
    b364:	b2db      	uxtbne	r3, r3
    b366:	46b0      	mov	r8, r6
            mask_buf[k] = mask_mix(mask_buf[k], m);
    b368:	f896 c000 	ldrb.w	ip, [r6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    b36c:	2bf9      	cmp	r3, #249	; 0xf9
    b36e:	d8e1      	bhi.n	b334 <lv_draw_mask_line+0x120>
    if(mask_new <= LV_OPA_MIN) return 0;
    b370:	2b05      	cmp	r3, #5
    b372:	d9de      	bls.n	b332 <lv_draw_mask_line+0x11e>

    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    b374:	fb03 f30c 	mul.w	r3, r3, ip
    b378:	eb03 2c03 	add.w	ip, r3, r3, lsl #8
    b37c:	eb03 13cc 	add.w	r3, r3, ip, lsl #7
    b380:	f3c3 5cc7 	ubfx	ip, r3, #23, #8
    b384:	e7d6      	b.n	b334 <lv_draw_mask_line+0x120>
    if(k < len && k >= 0) {
    b386:	42bd      	cmp	r5, r7
    b388:	da26      	bge.n	b3d8 <lv_draw_mask_line+0x1c4>
    b38a:	2d00      	cmp	r5, #0
    b38c:	db24      	blt.n	b3d8 <lv_draw_mask_line+0x1c4>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
    b38e:	69a3      	ldr	r3, [r4, #24]
    b390:	fb03 f302 	mul.w	r3, r3, r2
    b394:	129b      	asrs	r3, r3, #10
        m = (x_inters * px_h) >> 9;
    b396:	fb02 f203 	mul.w	r2, r2, r3
    b39a:	f3c2 2247 	ubfx	r2, r2, #9, #8
        if(p->yx_steep < 0) m = 255 - m;
    b39e:	69e3      	ldr	r3, [r4, #28]
    b3a0:	2b00      	cmp	r3, #0
    b3a2:	bfbc      	itt	lt
    b3a4:	43d2      	mvnlt	r2, r2
    b3a6:	b2d2      	uxtblt	r2, r2
        if(p->inv) m = 255 - m;
    b3a8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    b3ac:	f013 0f02 	tst.w	r3, #2
    b3b0:	bf1c      	itt	ne
    b3b2:	43d2      	mvnne	r2, r2
    b3b4:	b2d2      	uxtbne	r2, r2
        mask_buf[k] = mask_mix(mask_buf[k], m);
    b3b6:	1946      	adds	r6, r0, r5
    b3b8:	5d43      	ldrb	r3, [r0, r5]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    b3ba:	2af9      	cmp	r2, #249	; 0xf9
    b3bc:	d80b      	bhi.n	b3d6 <lv_draw_mask_line+0x1c2>
    if(mask_new <= LV_OPA_MIN) return 0;
    b3be:	2a05      	cmp	r2, #5
    b3c0:	d908      	bls.n	b3d4 <lv_draw_mask_line+0x1c0>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    b3c2:	fb02 f203 	mul.w	r2, r2, r3
    b3c6:	eb02 2302 	add.w	r3, r2, r2, lsl #8
    b3ca:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
    b3ce:	f3c2 53c7 	ubfx	r3, r2, #23, #8
    b3d2:	e000      	b.n	b3d6 <lv_draw_mask_line+0x1c2>
    if(mask_new <= LV_OPA_MIN) return 0;
    b3d4:	2300      	movs	r3, #0
        mask_buf[k] = mask_mix(mask_buf[k], m);
    b3d6:	7033      	strb	r3, [r6, #0]
    if(p->inv) {
    b3d8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    b3dc:	f013 0f02 	tst.w	r3, #2
    b3e0:	d00a      	beq.n	b3f8 <lv_draw_mask_line+0x1e4>
        if(k > len) {
    b3e2:	428f      	cmp	r7, r1
    b3e4:	f2c0 811a 	blt.w	b61c <lv_draw_mask_line+0x408>
        if(k >= 0) {
    b3e8:	2900      	cmp	r1, #0
    b3ea:	f2c0 811a 	blt.w	b622 <lv_draw_mask_line+0x40e>
            _lv_memset_00(&mask_buf[0], k);
    b3ee:	4b79      	ldr	r3, [pc, #484]	; (b5d4 <lv_draw_mask_line+0x3c0>)
    b3f0:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
    b3f2:	2002      	movs	r0, #2
    b3f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(k < 0) {
    b3f8:	3501      	adds	r5, #1
    b3fa:	f100 8115 	bmi.w	b628 <lv_draw_mask_line+0x414>
        if(k <= len) {
    b3fe:	42bd      	cmp	r5, r7
    b400:	dd02      	ble.n	b408 <lv_draw_mask_line+0x1f4>
    return LV_DRAW_MASK_RES_CHANGED;
    b402:	2002      	movs	r0, #2
    b404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            _lv_memset_00(&mask_buf[k], len - k);
    b408:	1b79      	subs	r1, r7, r5
    b40a:	4428      	add	r0, r5
    b40c:	4b71      	ldr	r3, [pc, #452]	; (b5d4 <lv_draw_mask_line+0x3c0>)
    b40e:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
    b410:	2002      	movs	r0, #2
    b412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(x_at_y > abs_x + len) {
    b416:	eb05 0e03 	add.w	lr, r5, r3
    b41a:	4571      	cmp	r1, lr
    b41c:	dd05      	ble.n	b42a <lv_draw_mask_line+0x216>
        if(p->inv) {
    b41e:	f086 0002 	eor.w	r0, r6, #2
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
    b422:	f3c0 0040 	ubfx	r0, r0, #1, #1
    b426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    int32_t xs = ((abs_y << 8) * p->xy_steep) >> 10;
    b42a:	0211      	lsls	r1, r2, #8
    b42c:	fb07 f101 	mul.w	r1, r7, r1
    int32_t xsi = xs >> 8;
    b430:	ea4f 48a1 	mov.w	r8, r1, asr #18
    int32_t xsf = xs & 0xFF;
    b434:	f3c1 2187 	ubfx	r1, r1, #10, #8
    int32_t xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
    b438:	3201      	adds	r2, #1
    b43a:	0212      	lsls	r2, r2, #8
    b43c:	fb07 f202 	mul.w	r2, r7, r2
    int32_t xei = xe >> 8;
    b440:	ea4f 4ca2 	mov.w	ip, r2, asr #18
    k = xsi - abs_x;
    b444:	eba8 0e05 	sub.w	lr, r8, r5
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
    b448:	45e0      	cmp	r8, ip
    b44a:	d063      	beq.n	b514 <lv_draw_mask_line+0x300>
    b44c:	2f00      	cmp	r7, #0
    b44e:	db5b      	blt.n	b508 <lv_draw_mask_line+0x2f4>
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
    b450:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
    b454:	69e2      	ldr	r2, [r4, #28]
    b456:	fb02 f201 	mul.w	r2, r2, r1
    b45a:	1295      	asrs	r5, r2, #10
            if(k >= 0 && k < len) {
    b45c:	f1be 0f00 	cmp.w	lr, #0
    b460:	db1c      	blt.n	b49c <lv_draw_mask_line+0x288>
    b462:	4573      	cmp	r3, lr
    b464:	dd1a      	ble.n	b49c <lv_draw_mask_line+0x288>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
    b466:	fb05 f101 	mul.w	r1, r5, r1
    b46a:	f3c1 2247 	ubfx	r2, r1, #9, #8
                if(p->inv) m = 255 - m;
    b46e:	f016 0f02 	tst.w	r6, #2
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
    b472:	bf04      	itt	eq
    b474:	43d2      	mvneq	r2, r2
    b476:	b2d2      	uxtbeq	r2, r2
                mask_buf[k] = mask_mix(mask_buf[k], m);
    b478:	eb00 060e 	add.w	r6, r0, lr
    b47c:	f810 100e 	ldrb.w	r1, [r0, lr]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    b480:	2af9      	cmp	r2, #249	; 0xf9
    b482:	d80a      	bhi.n	b49a <lv_draw_mask_line+0x286>
    if(mask_new <= LV_OPA_MIN) return 0;
    b484:	2a05      	cmp	r2, #5
    b486:	f240 80a1 	bls.w	b5cc <lv_draw_mask_line+0x3b8>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    b48a:	fb02 f201 	mul.w	r2, r2, r1
    b48e:	eb02 2102 	add.w	r1, r2, r2, lsl #8
    b492:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
    b496:	f3c2 51c7 	ubfx	r1, r2, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
    b49a:	7031      	strb	r1, [r6, #0]
            if(k >= 0 && k < len) {
    b49c:	f11e 0101 	adds.w	r1, lr, #1
    b4a0:	d420      	bmi.n	b4e4 <lv_draw_mask_line+0x2d0>
    b4a2:	428b      	cmp	r3, r1
    b4a4:	dd1e      	ble.n	b4e4 <lv_draw_mask_line+0x2d0>
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
    b4a6:	f1c5 02ff 	rsb	r2, r5, #255	; 0xff
    b4aa:	69a5      	ldr	r5, [r4, #24]
    b4ac:	fb05 f502 	mul.w	r5, r5, r2
    b4b0:	12ad      	asrs	r5, r5, #10
                m = ((255 - y_inters) * x_inters) >> 9;
    b4b2:	fb02 f205 	mul.w	r2, r2, r5
    b4b6:	f3c2 2247 	ubfx	r2, r2, #9, #8
                if(p->inv) m = 255 - m;
    b4ba:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
    b4be:	f015 0f02 	tst.w	r5, #2
    b4c2:	bf1c      	itt	ne
    b4c4:	43d2      	mvnne	r2, r2
    b4c6:	b2d2      	uxtbne	r2, r2
                mask_buf[k] = mask_mix(mask_buf[k], m);
    b4c8:	5c45      	ldrb	r5, [r0, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    b4ca:	2af9      	cmp	r2, #249	; 0xf9
    b4cc:	d809      	bhi.n	b4e2 <lv_draw_mask_line+0x2ce>
    if(mask_new <= LV_OPA_MIN) return 0;
    b4ce:	2a05      	cmp	r2, #5
    b4d0:	d97e      	bls.n	b5d0 <lv_draw_mask_line+0x3bc>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    b4d2:	fb02 f205 	mul.w	r2, r2, r5
    b4d6:	eb02 2502 	add.w	r5, r2, r2, lsl #8
    b4da:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
    b4de:	f3c2 55c7 	ubfx	r5, r2, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
    b4e2:	5445      	strb	r5, [r0, r1]
            if(p->inv) {
    b4e4:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    b4e8:	f012 0f02 	tst.w	r2, #2
    b4ec:	d074      	beq.n	b5d8 <lv_draw_mask_line+0x3c4>
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
    b4ee:	4573      	cmp	r3, lr
    b4f0:	f2c0 80b2 	blt.w	b658 <lv_draw_mask_line+0x444>
                if(k >= 0) _lv_memset_00(&mask_buf[0],  k);
    b4f4:	f1be 0f00 	cmp.w	lr, #0
    b4f8:	f2c0 80b1 	blt.w	b65e <lv_draw_mask_line+0x44a>
    b4fc:	4671      	mov	r1, lr
    b4fe:	4b35      	ldr	r3, [pc, #212]	; (b5d4 <lv_draw_mask_line+0x3c0>)
    b500:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
    b502:	2002      	movs	r0, #2
    b504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
    b508:	2900      	cmp	r1, #0
    b50a:	f040 8100 	bne.w	b70e <lv_draw_mask_line+0x4fa>
        k--;
    b50e:	f10e 3eff 	add.w	lr, lr, #4294967295
        xsf = 0xFF;
    b512:	21ff      	movs	r1, #255	; 0xff
        if(k >= 0 && k < len) {
    b514:	f1be 0f00 	cmp.w	lr, #0
    b518:	db1e      	blt.n	b558 <lv_draw_mask_line+0x344>
    b51a:	4573      	cmp	r3, lr
    b51c:	dd1c      	ble.n	b558 <lv_draw_mask_line+0x344>
    int32_t xef = xe & 0xFF;
    b51e:	f3c2 2287 	ubfx	r2, r2, #10, #8
            m = (xsf + xef) >> 1;
    b522:	440a      	add	r2, r1
    b524:	f3c2 0247 	ubfx	r2, r2, #1, #8
            if(p->inv) m = 255 - m;
    b528:	f016 0f02 	tst.w	r6, #2
    b52c:	bf1c      	itt	ne
    b52e:	43d2      	mvnne	r2, r2
    b530:	b2d2      	uxtbne	r2, r2
            mask_buf[k] = mask_mix(mask_buf[k], m);
    b532:	eb00 060e 	add.w	r6, r0, lr
    b536:	f810 100e 	ldrb.w	r1, [r0, lr]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    b53a:	2af9      	cmp	r2, #249	; 0xf9
    b53c:	d80b      	bhi.n	b556 <lv_draw_mask_line+0x342>
    if(mask_new <= LV_OPA_MIN) return 0;
    b53e:	2a05      	cmp	r2, #5
    b540:	d908      	bls.n	b554 <lv_draw_mask_line+0x340>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    b542:	fb02 f201 	mul.w	r2, r2, r1
    b546:	eb02 2102 	add.w	r1, r2, r2, lsl #8
    b54a:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
    b54e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
    b552:	e000      	b.n	b556 <lv_draw_mask_line+0x342>
    if(mask_new <= LV_OPA_MIN) return 0;
    b554:	2100      	movs	r1, #0
            mask_buf[k] = mask_mix(mask_buf[k], m);
    b556:	7031      	strb	r1, [r6, #0]
        if(p->inv) {
    b558:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    b55c:	f012 0f02 	tst.w	r2, #2
    b560:	d00a      	beq.n	b578 <lv_draw_mask_line+0x364>
            k = xsi - abs_x;
    b562:	ebac 0105 	sub.w	r1, ip, r5
            if(k >= len) {
    b566:	428b      	cmp	r3, r1
    b568:	dd61      	ble.n	b62e <lv_draw_mask_line+0x41a>
            if(k >= 0) _lv_memset_00(&mask_buf[0], k);
    b56a:	2900      	cmp	r1, #0
    b56c:	db62      	blt.n	b634 <lv_draw_mask_line+0x420>
    b56e:	4b19      	ldr	r3, [pc, #100]	; (b5d4 <lv_draw_mask_line+0x3c0>)
    b570:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
    b572:	2002      	movs	r0, #2
    b574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        k++;
    b578:	f10e 0201 	add.w	r2, lr, #1
    b57c:	429a      	cmp	r2, r3
    b57e:	bfa8      	it	ge
    b580:	461a      	movge	r2, r3
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
    b582:	2a00      	cmp	r2, #0
    b584:	d059      	beq.n	b63a <lv_draw_mask_line+0x426>
            else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
    b586:	2a00      	cmp	r2, #0
    b588:	dd5a      	ble.n	b640 <lv_draw_mask_line+0x42c>
    b58a:	1a99      	subs	r1, r3, r2
    b58c:	4410      	add	r0, r2
    b58e:	4b11      	ldr	r3, [pc, #68]	; (b5d4 <lv_draw_mask_line+0x3c0>)
    b590:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
    b592:	2002      	movs	r0, #2
    b594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(mask_new <= LV_OPA_MIN) return 0;
    b598:	2500      	movs	r5, #0
    b59a:	e0dc      	b.n	b756 <lv_draw_mask_line+0x542>
    b59c:	2500      	movs	r5, #0
    b59e:	e100      	b.n	b7a2 <lv_draw_mask_line+0x58e>
                else if(k > 0) _lv_memset_00(&mask_buf[0],  k);
    b5a0:	2900      	cmp	r1, #0
    b5a2:	dd50      	ble.n	b646 <lv_draw_mask_line+0x432>
    b5a4:	4b0b      	ldr	r3, [pc, #44]	; (b5d4 <lv_draw_mask_line+0x3c0>)
    b5a6:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
    b5a8:	2002      	movs	r0, #2
    b5aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            k += 2;
    b5ae:	f10e 0e01 	add.w	lr, lr, #1
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
    b5b2:	4573      	cmp	r3, lr
    b5b4:	db4a      	blt.n	b64c <lv_draw_mask_line+0x438>
                if(k >= 0) _lv_memset_00(&mask_buf[k],  len - k);
    b5b6:	f1be 0f00 	cmp.w	lr, #0
    b5ba:	db4a      	blt.n	b652 <lv_draw_mask_line+0x43e>
    b5bc:	eba3 010e 	sub.w	r1, r3, lr
    b5c0:	4470      	add	r0, lr
    b5c2:	4b04      	ldr	r3, [pc, #16]	; (b5d4 <lv_draw_mask_line+0x3c0>)
    b5c4:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
    b5c6:	2002      	movs	r0, #2
    b5c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(mask_new <= LV_OPA_MIN) return 0;
    b5cc:	2100      	movs	r1, #0
    b5ce:	e764      	b.n	b49a <lv_draw_mask_line+0x286>
    b5d0:	2500      	movs	r5, #0
    b5d2:	e786      	b.n	b4e2 <lv_draw_mask_line+0x2ce>
    b5d4:	00012b2b 	.word	0x00012b2b
            k++;
    b5d8:	f10e 0202 	add.w	r2, lr, #2
    b5dc:	429a      	cmp	r2, r3
    b5de:	bfa8      	it	ge
    b5e0:	461a      	movge	r2, r3
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
    b5e2:	2a00      	cmp	r2, #0
    b5e4:	d03e      	beq.n	b664 <lv_draw_mask_line+0x450>
                else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
    b5e6:	2a00      	cmp	r2, #0
    b5e8:	dd3f      	ble.n	b66a <lv_draw_mask_line+0x456>
    b5ea:	1a99      	subs	r1, r3, r2
    b5ec:	4410      	add	r0, r2
    b5ee:	4b73      	ldr	r3, [pc, #460]	; (b7bc <lv_draw_mask_line+0x5a8>)
    b5f0:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
    b5f2:	2002      	movs	r0, #2
    b5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
    b5f8:	2001      	movs	r0, #1
    b5fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
    b5fe:	2001      	movs	r0, #1
    b600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
    b604:	2001      	movs	r0, #1
    b606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
    b60a:	2000      	movs	r0, #0
    b60c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
    b610:	2000      	movs	r0, #0
    b612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
    b616:	2000      	movs	r0, #0
    b618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return LV_DRAW_MASK_RES_TRANSP;
    b61c:	2000      	movs	r0, #0
    b61e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return LV_DRAW_MASK_RES_CHANGED;
    b622:	2002      	movs	r0, #2
    b624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return LV_DRAW_MASK_RES_TRANSP;
    b628:	2000      	movs	r0, #0
    b62a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                return LV_DRAW_MASK_RES_TRANSP;
    b62e:	2000      	movs	r0, #0
    b630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return LV_DRAW_MASK_RES_CHANGED;
    b634:	2002      	movs	r0, #2
    b636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
    b63a:	2000      	movs	r0, #0
    b63c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return LV_DRAW_MASK_RES_CHANGED;
    b640:	2002      	movs	r0, #2
    b642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b646:	2002      	movs	r0, #2
    b648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
    b64c:	2001      	movs	r0, #1
    b64e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return LV_DRAW_MASK_RES_CHANGED;
    b652:	2002      	movs	r0, #2
    b654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
    b658:	2000      	movs	r0, #0
    b65a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return LV_DRAW_MASK_RES_CHANGED;
    b65e:	2002      	movs	r0, #2
    b660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
    b664:	2000      	movs	r0, #0
    b666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return LV_DRAW_MASK_RES_CHANGED;
    b66a:	2002      	movs	r0, #2
    b66c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
    b670:	461f      	mov	r7, r3
    b672:	442b      	add	r3, r5
    b674:	fb01 f103 	mul.w	r1, r1, r3
        if(y_at_x < abs_y) {
    b678:	ebb2 2fa1 	cmp.w	r2, r1, asr #10
    b67c:	f73f ae4b 	bgt.w	b316 <lv_draw_mask_line+0x102>
    if(p->yx_steep > 0) xe = ((abs_y << 8) * p->xy_steep) >> 10;
    b680:	0212      	lsls	r2, r2, #8
    b682:	69a3      	ldr	r3, [r4, #24]
    b684:	fb03 f302 	mul.w	r3, r3, r2
    b688:	129b      	asrs	r3, r3, #10
    int32_t xei = xe >> 8;
    b68a:	1219      	asrs	r1, r3, #8
    if(xef == 0) px_h = 255;
    b68c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    b690:	d039      	beq.n	b706 <lv_draw_mask_line+0x4f2>
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
    b692:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
    b696:	6a62      	ldr	r2, [r4, #36]	; 0x24
    b698:	fb02 f203 	mul.w	r2, r2, r3
    b69c:	ea4f 2e22 	mov.w	lr, r2, asr #8
    b6a0:	f1ce 02ff 	rsb	r2, lr, #255	; 0xff
        if(k >= 0 && k < len) {
    b6a4:	1b49      	subs	r1, r1, r5
    b6a6:	d41a      	bmi.n	b6de <lv_draw_mask_line+0x4ca>
    b6a8:	42b9      	cmp	r1, r7
    b6aa:	da18      	bge.n	b6de <lv_draw_mask_line+0x4ca>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
    b6ac:	fb0e f303 	mul.w	r3, lr, r3
    b6b0:	f3c3 2347 	ubfx	r3, r3, #9, #8
            if(p->inv) m = 255 - m;
    b6b4:	f016 0f02 	tst.w	r6, #2
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
    b6b8:	bf04      	itt	eq
    b6ba:	43db      	mvneq	r3, r3
    b6bc:	b2db      	uxtbeq	r3, r3
            mask_buf[k] = mask_mix(mask_buf[k], m);
    b6be:	1846      	adds	r6, r0, r1
    b6c0:	5c45      	ldrb	r5, [r0, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    b6c2:	2bf9      	cmp	r3, #249	; 0xf9
    b6c4:	d80a      	bhi.n	b6dc <lv_draw_mask_line+0x4c8>
    if(mask_new <= LV_OPA_MIN) return 0;
    b6c6:	2b05      	cmp	r3, #5
    b6c8:	f67f ae31 	bls.w	b32e <lv_draw_mask_line+0x11a>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    b6cc:	fb03 f305 	mul.w	r3, r3, r5
    b6d0:	eb03 2503 	add.w	r5, r3, r3, lsl #8
    b6d4:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
    b6d8:	f3c3 55c7 	ubfx	r5, r3, #23, #8
            mask_buf[k] = mask_mix(mask_buf[k], m);
    b6dc:	7035      	strb	r5, [r6, #0]
        k++;
    b6de:	1c4d      	adds	r5, r1, #1
    b6e0:	1946      	adds	r6, r0, r5
    if(mask_new <= LV_OPA_MIN) return 0;
    b6e2:	f04f 0e00 	mov.w	lr, #0
    b6e6:	e62d      	b.n	b344 <lv_draw_mask_line+0x130>
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
    b6e8:	461f      	mov	r7, r3
    b6ea:	442b      	add	r3, r5
    b6ec:	fb01 f103 	mul.w	r1, r1, r3
        if(y_at_x > abs_y) {
    b6f0:	ebb2 2fa1 	cmp.w	r2, r1, asr #10
    b6f4:	f6ff ae15 	blt.w	b322 <lv_draw_mask_line+0x10e>
    else xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
    b6f8:	3201      	adds	r2, #1
    b6fa:	0212      	lsls	r2, r2, #8
    b6fc:	69a3      	ldr	r3, [r4, #24]
    b6fe:	fb03 f302 	mul.w	r3, r3, r2
    b702:	129b      	asrs	r3, r3, #10
    b704:	e7c1      	b.n	b68a <lv_draw_mask_line+0x476>
    int32_t k = xei - abs_x;
    b706:	1b4d      	subs	r5, r1, r5
    b708:	4629      	mov	r1, r5
    if(xef == 0) px_h = 255;
    b70a:	22ff      	movs	r2, #255	; 0xff
    b70c:	e7e8      	b.n	b6e0 <lv_draw_mask_line+0x4cc>
            y_inters = (xsf * (-p->yx_steep)) >> 10;
    b70e:	69e2      	ldr	r2, [r4, #28]
    b710:	4252      	negs	r2, r2
    b712:	fb01 f202 	mul.w	r2, r1, r2
    b716:	1292      	asrs	r2, r2, #10
            if(k >= 0 && k < len) {
    b718:	f1be 0f00 	cmp.w	lr, #0
    b71c:	db1c      	blt.n	b758 <lv_draw_mask_line+0x544>
    b71e:	4573      	cmp	r3, lr
    b720:	dd1a      	ble.n	b758 <lv_draw_mask_line+0x544>
                m = (y_inters * xsf) >> 9;
    b722:	fb02 f101 	mul.w	r1, r2, r1
    b726:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
    b72a:	f016 0f02 	tst.w	r6, #2
    b72e:	bf1c      	itt	ne
    b730:	43c9      	mvnne	r1, r1
    b732:	b2c9      	uxtbne	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
    b734:	eb00 060e 	add.w	r6, r0, lr
    b738:	f810 500e 	ldrb.w	r5, [r0, lr]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    b73c:	29f9      	cmp	r1, #249	; 0xf9
    b73e:	d80a      	bhi.n	b756 <lv_draw_mask_line+0x542>
    if(mask_new <= LV_OPA_MIN) return 0;
    b740:	2905      	cmp	r1, #5
    b742:	f67f af29 	bls.w	b598 <lv_draw_mask_line+0x384>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    b746:	fb01 f105 	mul.w	r1, r1, r5
    b74a:	eb01 2501 	add.w	r5, r1, r1, lsl #8
    b74e:	eb01 11c5 	add.w	r1, r1, r5, lsl #7
    b752:	f3c1 55c7 	ubfx	r5, r1, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
    b756:	7035      	strb	r5, [r6, #0]
            if(k >= 0 && k < len) {
    b758:	f1be 0101 	subs.w	r1, lr, #1
    b75c:	d422      	bmi.n	b7a4 <lv_draw_mask_line+0x590>
    b75e:	428b      	cmp	r3, r1
    b760:	dd20      	ble.n	b7a4 <lv_draw_mask_line+0x590>
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
    b762:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
    b766:	69a5      	ldr	r5, [r4, #24]
    b768:	426d      	negs	r5, r5
    b76a:	fb02 f505 	mul.w	r5, r2, r5
    b76e:	12ad      	asrs	r5, r5, #10
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
    b770:	fb02 f205 	mul.w	r2, r2, r5
    b774:	f3c2 2247 	ubfx	r2, r2, #9, #8
                if(p->inv) m = 255 - m;
    b778:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
    b77c:	f015 0f02 	tst.w	r5, #2
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
    b780:	bf04      	itt	eq
    b782:	43d2      	mvneq	r2, r2
    b784:	b2d2      	uxtbeq	r2, r2
                mask_buf[k] = mask_mix(mask_buf[k], m);
    b786:	5c45      	ldrb	r5, [r0, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    b788:	2af9      	cmp	r2, #249	; 0xf9
    b78a:	d80a      	bhi.n	b7a2 <lv_draw_mask_line+0x58e>
    if(mask_new <= LV_OPA_MIN) return 0;
    b78c:	2a05      	cmp	r2, #5
    b78e:	f67f af05 	bls.w	b59c <lv_draw_mask_line+0x388>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    b792:	fb02 f205 	mul.w	r2, r2, r5
    b796:	eb02 2502 	add.w	r5, r2, r2, lsl #8
    b79a:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
    b79e:	f3c2 55c7 	ubfx	r5, r2, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
    b7a2:	5445      	strb	r5, [r0, r1]
            if(p->inv) {
    b7a4:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    b7a8:	f012 0f02 	tst.w	r2, #2
    b7ac:	f43f aeff 	beq.w	b5ae <lv_draw_mask_line+0x39a>
                if(k > len) k = len;
    b7b0:	428b      	cmp	r3, r1
    b7b2:	f6bf aef5 	bge.w	b5a0 <lv_draw_mask_line+0x38c>
    return LV_DRAW_MASK_RES_CHANGED;
    b7b6:	2002      	movs	r0, #2
    b7b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b7bc:	00012b2b 	.word	0x00012b2b

0000b7c0 <lv_draw_mask_radius>:
{
    b7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b7c4:	b08d      	sub	sp, #52	; 0x34
    b7c6:	9d16      	ldr	r5, [sp, #88]	; 0x58
    bool outer = p->cfg.outer;
    b7c8:	7cae      	ldrb	r6, [r5, #18]
    b7ca:	f006 0601 	and.w	r6, r6, #1
    int32_t radius = p->cfg.radius;
    b7ce:	f9b5 8010 	ldrsh.w	r8, [r5, #16]
    b7d2:	1dec      	adds	r4, r5, #7
    b7d4:	f105 090f 	add.w	r9, r5, #15
    uint8_t * d8 = (uint8_t *)dst;
    b7d8:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
        *d8 = *s8;
    b7dc:	f814 7f01 	ldrb.w	r7, [r4, #1]!
    b7e0:	f80e 7b01 	strb.w	r7, [lr], #1
    while(len) {
    b7e4:	454c      	cmp	r4, r9
    b7e6:	d1f9      	bne.n	b7dc <lv_draw_mask_radius+0x1c>
    if(outer == false) {
    b7e8:	2e00      	cmp	r6, #0
    b7ea:	d13d      	bne.n	b868 <lv_draw_mask_radius+0xa8>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
    b7ec:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	; 0x2a
    b7f0:	4294      	cmp	r4, r2
    b7f2:	f300 822b 	bgt.w	bc4c <lv_draw_mask_radius+0x48c>
    b7f6:	f9bd 402e 	ldrsh.w	r4, [sp, #46]	; 0x2e
    b7fa:	4294      	cmp	r4, r2
    b7fc:	f2c0 822a 	blt.w	bc54 <lv_draw_mask_radius+0x494>
    b800:	469b      	mov	fp, r3
    b802:	460f      	mov	r7, r1
    b804:	9002      	str	r0, [sp, #8]
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
    b806:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    b80a:	eb08 0309 	add.w	r3, r8, r9
    b80e:	4299      	cmp	r1, r3
    b810:	db06      	blt.n	b820 <lv_draw_mask_radius+0x60>
    b812:	4459      	add	r1, fp
    b814:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
    b818:	eba3 0308 	sub.w	r3, r3, r8
    b81c:	4299      	cmp	r1, r3
    b81e:	dd0b      	ble.n	b838 <lv_draw_mask_radius+0x78>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
    b820:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
    b824:	eb03 0108 	add.w	r1, r3, r8
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
    b828:	428a      	cmp	r2, r1
    b82a:	db53      	blt.n	b8d4 <lv_draw_mask_radius+0x114>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
    b82c:	f9bd 102e 	ldrsh.w	r1, [sp, #46]	; 0x2e
    b830:	eba1 0108 	sub.w	r1, r1, r8
    b834:	428a      	cmp	r2, r1
    b836:	dc4d      	bgt.n	b8d4 <lv_draw_mask_radius+0x114>
        if(outer == false) {
    b838:	bb86      	cbnz	r6, b89c <lv_draw_mask_radius+0xdc>
            int32_t last =  rect.x1 - abs_x;
    b83a:	eba9 0407 	sub.w	r4, r9, r7
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
    b83e:	455c      	cmp	r4, fp
    b840:	f300 820c 	bgt.w	bc5c <lv_draw_mask_radius+0x49c>
            if(last >= 0) {
    b844:	2c00      	cmp	r4, #0
    b846:	db03      	blt.n	b850 <lv_draw_mask_radius+0x90>
                _lv_memset_00(&mask_buf[0], last);
    b848:	4621      	mov	r1, r4
    b84a:	9802      	ldr	r0, [sp, #8]
    b84c:	4b9f      	ldr	r3, [pc, #636]	; (bacc <lv_draw_mask_radius+0x30c>)
    b84e:	4798      	blx	r3
            int32_t first = rect.x2 - abs_x + 1;
    b850:	f9bd 002c 	ldrsh.w	r0, [sp, #44]	; 0x2c
    b854:	1bc0      	subs	r0, r0, r7
    b856:	3001      	adds	r0, #1
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
    b858:	2800      	cmp	r0, #0
    b85a:	f340 8201 	ble.w	bc60 <lv_draw_mask_radius+0x4a0>
            else if(first < len) {
    b85e:	4583      	cmp	fp, r0
    b860:	dc0d      	bgt.n	b87e <lv_draw_mask_radius+0xbe>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
    b862:	b1bc      	cbz	r4, b894 <lv_draw_mask_radius+0xd4>
            else return LV_DRAW_MASK_RES_CHANGED;
    b864:	2002      	movs	r0, #2
    b866:	e1f2      	b.n	bc4e <lv_draw_mask_radius+0x48e>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
    b868:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	; 0x2a
    b86c:	4294      	cmp	r4, r2
    b86e:	f300 81f3 	bgt.w	bc58 <lv_draw_mask_radius+0x498>
    b872:	f9bd 402e 	ldrsh.w	r4, [sp, #46]	; 0x2e
    b876:	4294      	cmp	r4, r2
    b878:	dac2      	bge.n	b800 <lv_draw_mask_radius+0x40>
            return LV_DRAW_MASK_RES_FULL_COVER;
    b87a:	2001      	movs	r0, #1
    b87c:	e1e7      	b.n	bc4e <lv_draw_mask_radius+0x48e>
                _lv_memset_00(&mask_buf[first], len - first);
    b87e:	ebab 0100 	sub.w	r1, fp, r0
    b882:	9b02      	ldr	r3, [sp, #8]
    b884:	4403      	add	r3, r0
    b886:	4618      	mov	r0, r3
    b888:	4b90      	ldr	r3, [pc, #576]	; (bacc <lv_draw_mask_radius+0x30c>)
    b88a:	4798      	blx	r3
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
    b88c:	2c00      	cmp	r4, #0
    b88e:	d1e9      	bne.n	b864 <lv_draw_mask_radius+0xa4>
            else return LV_DRAW_MASK_RES_CHANGED;
    b890:	2002      	movs	r0, #2
    b892:	e1dc      	b.n	bc4e <lv_draw_mask_radius+0x48e>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
    b894:	4583      	cmp	fp, r0
    b896:	d1e5      	bne.n	b864 <lv_draw_mask_radius+0xa4>
    b898:	2001      	movs	r0, #1
    b89a:	e1d8      	b.n	bc4e <lv_draw_mask_radius+0x48e>
            int32_t first = rect.x1 - abs_x;
    b89c:	eba9 0007 	sub.w	r0, r9, r7
    b8a0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
            if(first <= len) {
    b8a4:	4558      	cmp	r0, fp
    b8a6:	dd01      	ble.n	b8ac <lv_draw_mask_radius+0xec>
        return LV_DRAW_MASK_RES_CHANGED;
    b8a8:	2002      	movs	r0, #2
    b8aa:	e1d0      	b.n	bc4e <lv_draw_mask_radius+0x48e>
                int32_t last =  rect.x2 - abs_x - first + 1;
    b8ac:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
    b8b0:	1bc9      	subs	r1, r1, r7
    b8b2:	1a09      	subs	r1, r1, r0
    b8b4:	3101      	adds	r1, #1
                if(first + last > len) last = len - first;
    b8b6:	1843      	adds	r3, r0, r1
    b8b8:	459b      	cmp	fp, r3
    b8ba:	bfb8      	it	lt
    b8bc:	ebab 0100 	sublt.w	r1, fp, r0
                if(last >= 0) {
    b8c0:	2900      	cmp	r1, #0
    b8c2:	f2c0 81cf 	blt.w	bc64 <lv_draw_mask_radius+0x4a4>
                    _lv_memset_00(&mask_buf[first], last);
    b8c6:	9b02      	ldr	r3, [sp, #8]
    b8c8:	4403      	add	r3, r0
    b8ca:	4618      	mov	r0, r3
    b8cc:	4b7f      	ldr	r3, [pc, #508]	; (bacc <lv_draw_mask_radius+0x30c>)
    b8ce:	4798      	blx	r3
        return LV_DRAW_MASK_RES_CHANGED;
    b8d0:	2002      	movs	r0, #2
    b8d2:	e1bc      	b.n	bc4e <lv_draw_mask_radius+0x48e>
    b8d4:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    b8d8:	b29b      	uxth	r3, r3
    b8da:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
    b8de:	3101      	adds	r1, #1
    b8e0:	1ac9      	subs	r1, r1, r3
    int32_t h = lv_area_get_height(&rect);
    b8e2:	b209      	sxth	r1, r1
    abs_y -= rect.y1;
    b8e4:	1ad2      	subs	r2, r2, r3
    uint32_t r2 = p->cfg.radius * p->cfg.radius;
    b8e6:	fb08 f308 	mul.w	r3, r8, r8
    b8ea:	9301      	str	r3, [sp, #4]
    if(abs_y < radius || abs_y > h - radius - 1) {
    b8ec:	b212      	sxth	r2, r2
    b8ee:	4590      	cmp	r8, r2
    b8f0:	f300 81d1 	bgt.w	bc96 <lv_draw_mask_radius+0x4d6>
    b8f4:	eba1 0308 	sub.w	r3, r1, r8
    b8f8:	3b01      	subs	r3, #1
    b8fa:	429a      	cmp	r2, r3
    b8fc:	f300 81b4 	bgt.w	bc68 <lv_draw_mask_radius+0x4a8>
    return LV_DRAW_MASK_RES_CHANGED;
    b900:	2002      	movs	r0, #2
    b902:	e1a4      	b.n	bc4e <lv_draw_mask_radius+0x48e>
                x0.f = p->y_prev_x.f;
    b904:	8b6b      	ldrh	r3, [r5, #26]
    b906:	f8ad 301a 	strh.w	r3, [sp, #26]
                x0.i = p->y_prev_x.i;
    b90a:	8b2b      	ldrh	r3, [r5, #24]
    b90c:	f8ad 3018 	strh.w	r3, [sp, #24]
    b910:	e1d6      	b.n	bcc0 <lv_draw_mask_radius+0x500>
                _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
    b912:	9a04      	ldr	r2, [sp, #16]
    b914:	a907      	add	r1, sp, #28
    b916:	9b01      	ldr	r3, [sp, #4]
    b918:	fb00 3010 	mls	r0, r0, r0, r3
    b91c:	4b6c      	ldr	r3, [pc, #432]	; (bad0 <lv_draw_mask_radius+0x310>)
    b91e:	4798      	blx	r3
            _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
    b920:	9a04      	ldr	r2, [sp, #16]
    b922:	a906      	add	r1, sp, #24
    b924:	9b01      	ldr	r3, [sp, #4]
    b926:	fb04 3014 	mls	r0, r4, r4, r3
    b92a:	4b69      	ldr	r3, [pc, #420]	; (bad0 <lv_draw_mask_radius+0x310>)
    b92c:	4798      	blx	r3
            p->y_prev = y;
    b92e:	616c      	str	r4, [r5, #20]
            p->y_prev_x.f = x0.f;
    b930:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    b934:	836b      	strh	r3, [r5, #26]
            p->y_prev_x.i = x0.i;
    b936:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    b93a:	832b      	strh	r3, [r5, #24]
    b93c:	e1d1      	b.n	bce2 <lv_draw_mask_radius+0x522>
        if(x0.i == x1.i - 1 && x1.f == 0) {
    b93e:	f8bd 101e 	ldrh.w	r1, [sp, #30]
    b942:	2900      	cmp	r1, #0
    b944:	f040 81d5 	bne.w	bcf2 <lv_draw_mask_radius+0x532>
            x1.i--;
    b948:	3a01      	subs	r2, #1
    b94a:	f8ad 201c 	strh.w	r2, [sp, #28]
            x1.f = 0xFF;
    b94e:	22ff      	movs	r2, #255	; 0xff
    b950:	f8ad 201e 	strh.w	r2, [sp, #30]
    b954:	e1cd      	b.n	bcf2 <lv_draw_mask_radius+0x532>
            lv_opa_t m = (x0.f + x1.f) >> 1;
    b956:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    b95a:	f8bd 101e 	ldrh.w	r1, [sp, #30]
    b95e:	440a      	add	r2, r1
    b960:	f3c2 0247 	ubfx	r2, r2, #1, #8
            if(outer) m = 255 - m;
    b964:	b10e      	cbz	r6, b96a <lv_draw_mask_radius+0x1aa>
    b966:	43d2      	mvns	r2, r2
    b968:	b2d2      	uxtb	r2, r2
            int32_t ofs = radius - x0.i - 1;
    b96a:	eba8 0303 	sub.w	r3, r8, r3
    b96e:	3b01      	subs	r3, #1
            if(kl >= 0 && kl < len) {
    b970:	18f9      	adds	r1, r7, r3
    b972:	d411      	bmi.n	b998 <lv_draw_mask_radius+0x1d8>
    b974:	4559      	cmp	r1, fp
    b976:	da0f      	bge.n	b998 <lv_draw_mask_radius+0x1d8>
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
    b978:	9802      	ldr	r0, [sp, #8]
    b97a:	5c40      	ldrb	r0, [r0, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    b97c:	2af9      	cmp	r2, #249	; 0xf9
    b97e:	d809      	bhi.n	b994 <lv_draw_mask_radius+0x1d4>
    if(mask_new <= LV_OPA_MIN) return 0;
    b980:	2a05      	cmp	r2, #5
    b982:	d935      	bls.n	b9f0 <lv_draw_mask_radius+0x230>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    b984:	fb02 f000 	mul.w	r0, r2, r0
    b988:	eb00 2400 	add.w	r4, r0, r0, lsl #8
    b98c:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
    b990:	f3c0 50c7 	ubfx	r0, r0, #23, #8
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
    b994:	9c02      	ldr	r4, [sp, #8]
    b996:	5460      	strb	r0, [r4, r1]
            int32_t kr = k + (w - ofs - 1);
    b998:	eba9 0303 	sub.w	r3, r9, r3
    b99c:	3b01      	subs	r3, #1
            if(kr >= 0 && kr < len) {
    b99e:	19df      	adds	r7, r3, r7
    b9a0:	d411      	bmi.n	b9c6 <lv_draw_mask_radius+0x206>
    b9a2:	455f      	cmp	r7, fp
    b9a4:	da0f      	bge.n	b9c6 <lv_draw_mask_radius+0x206>
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
    b9a6:	9b02      	ldr	r3, [sp, #8]
    b9a8:	5ddb      	ldrb	r3, [r3, r7]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    b9aa:	2af9      	cmp	r2, #249	; 0xf9
    b9ac:	d809      	bhi.n	b9c2 <lv_draw_mask_radius+0x202>
    if(mask_new <= LV_OPA_MIN) return 0;
    b9ae:	2a05      	cmp	r2, #5
    b9b0:	d920      	bls.n	b9f4 <lv_draw_mask_radius+0x234>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    b9b2:	fb02 f203 	mul.w	r2, r2, r3
    b9b6:	eb02 2302 	add.w	r3, r2, r2, lsl #8
    b9ba:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
    b9be:	f3c2 53c7 	ubfx	r3, r2, #23, #8
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
    b9c2:	9a02      	ldr	r2, [sp, #8]
    b9c4:	55d3      	strb	r3, [r2, r7]
            if(outer == false) {
    b9c6:	b1be      	cbz	r6, b9f8 <lv_draw_mask_radius+0x238>
                kl++;
    b9c8:	1c48      	adds	r0, r1, #1
    b9ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
                if(len_tmp + first > len) len_tmp = len - first;
    b9ce:	455f      	cmp	r7, fp
                int32_t len_tmp = kr - first;
    b9d0:	bfd4      	ite	le
    b9d2:	1a39      	suble	r1, r7, r0
                if(len_tmp + first > len) len_tmp = len - first;
    b9d4:	ebab 0100 	subgt.w	r1, fp, r0
                if(first < len && len_tmp >= 0) {
    b9d8:	4558      	cmp	r0, fp
    b9da:	f280 8119 	bge.w	bc10 <lv_draw_mask_radius+0x450>
    b9de:	2900      	cmp	r1, #0
    b9e0:	f2c0 8116 	blt.w	bc10 <lv_draw_mask_radius+0x450>
                    _lv_memset_00(&mask_buf[first], len_tmp);
    b9e4:	9b02      	ldr	r3, [sp, #8]
    b9e6:	4403      	add	r3, r0
    b9e8:	4618      	mov	r0, r3
    b9ea:	4b38      	ldr	r3, [pc, #224]	; (bacc <lv_draw_mask_radius+0x30c>)
    b9ec:	4798      	blx	r3
    b9ee:	e10f      	b.n	bc10 <lv_draw_mask_radius+0x450>
    if(mask_new <= LV_OPA_MIN) return 0;
    b9f0:	2000      	movs	r0, #0
    b9f2:	e7cf      	b.n	b994 <lv_draw_mask_radius+0x1d4>
    b9f4:	2300      	movs	r3, #0
    b9f6:	e7e4      	b.n	b9c2 <lv_draw_mask_radius+0x202>
                if(kl > len)  {
    b9f8:	4559      	cmp	r1, fp
    b9fa:	f300 8125 	bgt.w	bc48 <lv_draw_mask_radius+0x488>
                if(kl >= 0) {
    b9fe:	2900      	cmp	r1, #0
    ba00:	db02      	blt.n	ba08 <lv_draw_mask_radius+0x248>
                    _lv_memset_00(&mask_buf[0], kl);
    ba02:	9802      	ldr	r0, [sp, #8]
    ba04:	4b31      	ldr	r3, [pc, #196]	; (bacc <lv_draw_mask_radius+0x30c>)
    ba06:	4798      	blx	r3
                if(kr < 0) {
    ba08:	3701      	adds	r7, #1
    ba0a:	f100 811d 	bmi.w	bc48 <lv_draw_mask_radius+0x488>
                if(kr <= len) {
    ba0e:	455f      	cmp	r7, fp
    ba10:	f300 80fe 	bgt.w	bc10 <lv_draw_mask_radius+0x450>
                    _lv_memset_00(&mask_buf[kr], len - kr);
    ba14:	ebab 0107 	sub.w	r1, fp, r7
    ba18:	9b02      	ldr	r3, [sp, #8]
    ba1a:	443b      	add	r3, r7
    ba1c:	4618      	mov	r0, r3
    ba1e:	4b2b      	ldr	r3, [pc, #172]	; (bacc <lv_draw_mask_radius+0x30c>)
    ba20:	4798      	blx	r3
    ba22:	e0f5      	b.n	bc10 <lv_draw_mask_radius+0x450>
                _lv_sqrt(r2 - (i * i), &y_next, sqrt_mask);
    ba24:	9a04      	ldr	r2, [sp, #16]
    ba26:	a909      	add	r1, sp, #36	; 0x24
    ba28:	9b01      	ldr	r3, [sp, #4]
    ba2a:	fb08 3018 	mls	r0, r8, r8, r3
    ba2e:	4b28      	ldr	r3, [pc, #160]	; (bad0 <lv_draw_mask_radius+0x310>)
    ba30:	4798      	blx	r3
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
    ba32:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
    ba36:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    ba3a:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
    ba3e:	f1c1 03ff 	rsb	r3, r1, #255	; 0xff
    ba42:	fb03 f302 	mul.w	r3, r3, r2
    ba46:	f3c3 2347 	ubfx	r3, r3, #9, #8
                if(outer) m = 255 - m;
    ba4a:	b90e      	cbnz	r6, ba50 <lv_draw_mask_radius+0x290>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
    ba4c:	43db      	mvns	r3, r3
    ba4e:	b2db      	uxtb	r3, r3
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
    ba50:	9803      	ldr	r0, [sp, #12]
    ba52:	4602      	mov	r2, r0
    ba54:	2800      	cmp	r0, #0
    ba56:	db11      	blt.n	ba7c <lv_draw_mask_radius+0x2bc>
    ba58:	4558      	cmp	r0, fp
    ba5a:	da0f      	bge.n	ba7c <lv_draw_mask_radius+0x2bc>
    ba5c:	9c02      	ldr	r4, [sp, #8]
    ba5e:	1820      	adds	r0, r4, r0
    ba60:	5ca2      	ldrb	r2, [r4, r2]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    ba62:	2bf9      	cmp	r3, #249	; 0xf9
    ba64:	d809      	bhi.n	ba7a <lv_draw_mask_radius+0x2ba>
    if(mask_new <= LV_OPA_MIN) return 0;
    ba66:	2b05      	cmp	r3, #5
    ba68:	d929      	bls.n	babe <lv_draw_mask_radius+0x2fe>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    ba6a:	fb03 f202 	mul.w	r2, r3, r2
    ba6e:	eb02 2402 	add.w	r4, r2, r2, lsl #8
    ba72:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
    ba76:	f3c2 52c7 	ubfx	r2, r2, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
    ba7a:	7002      	strb	r2, [r0, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
    ba7c:	f1ba 0f00 	cmp.w	sl, #0
    ba80:	db13      	blt.n	baaa <lv_draw_mask_radius+0x2ea>
    ba82:	45da      	cmp	sl, fp
    ba84:	da11      	bge.n	baaa <lv_draw_mask_radius+0x2ea>
    ba86:	9c02      	ldr	r4, [sp, #8]
    ba88:	eb04 000a 	add.w	r0, r4, sl
    ba8c:	f814 200a 	ldrb.w	r2, [r4, sl]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    ba90:	2bf9      	cmp	r3, #249	; 0xf9
    ba92:	d809      	bhi.n	baa8 <lv_draw_mask_radius+0x2e8>
    if(mask_new <= LV_OPA_MIN) return 0;
    ba94:	2b05      	cmp	r3, #5
    ba96:	d914      	bls.n	bac2 <lv_draw_mask_radius+0x302>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    ba98:	fb03 f302 	mul.w	r3, r3, r2
    ba9c:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    baa0:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    baa4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
    baa8:	7002      	strb	r2, [r0, #0]
                kl--;
    baaa:	9b03      	ldr	r3, [sp, #12]
    baac:	3b01      	subs	r3, #1
    baae:	9303      	str	r3, [sp, #12]
                kr++;
    bab0:	f10a 0a01 	add.w	sl, sl, #1
                y_prev.f = y_next.f;
    bab4:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
                i++;
    bab8:	f108 0801 	add.w	r8, r8, #1
    babc:	e15e      	b.n	bd7c <lv_draw_mask_radius+0x5bc>
    if(mask_new <= LV_OPA_MIN) return 0;
    babe:	2200      	movs	r2, #0
    bac0:	e7db      	b.n	ba7a <lv_draw_mask_radius+0x2ba>
    bac2:	2200      	movs	r2, #0
    bac4:	e7f0      	b.n	baa8 <lv_draw_mask_radius+0x2e8>
    bac6:	2700      	movs	r7, #0
    bac8:	e039      	b.n	bb3e <lv_draw_mask_radius+0x37e>
    baca:	bf00      	nop
    bacc:	00012b2b 	.word	0x00012b2b
    bad0:	00012311 	.word	0x00012311
    bad4:	2700      	movs	r7, #0
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
    bad6:	f80e 7008 	strb.w	r7, [lr, r8]
                kl--;
    bada:	3801      	subs	r0, #1
                kr++;
    badc:	3401      	adds	r4, #1
            for(; i <= x1.i; i++) {
    bade:	3101      	adds	r1, #1
                y_prev.f = y_next.f;
    bae0:	461a      	mov	r2, r3
            for(; i <= x1.i; i++) {
    bae2:	9d01      	ldr	r5, [sp, #4]
    bae4:	42a9      	cmp	r1, r5
    bae6:	d840      	bhi.n	bb6a <lv_draw_mask_radius+0x3aa>
 */
LV_ATTRIBUTE_FAST_MEM static inline void sqrt_approx(lv_sqrt_res_t * q, lv_sqrt_res_t * ref, uint32_t x)
{
    x = x << 8; /*Upscale for extra precision*/

    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
    bae8:	eb09 1712 	add.w	r7, r9, r2, lsr #4
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
    baec:	fb01 a311 	mls	r3, r1, r1, sl
    uint32_t raw2 = raw * raw;
    baf0:	fb07 fc07 	mul.w	ip, r7, r7

    int32_t d = x - raw2;
    baf4:	ebcc 2303 	rsb	r3, ip, r3, lsl #8
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
    baf8:	ea4f 0c47 	mov.w	ip, r7, lsl #1
    bafc:	fb93 f3fc 	sdiv	r3, r3, ip
    bb00:	441f      	add	r7, r3

    q->i = d >> 4;
    bb02:	f3c7 1c0f 	ubfx	ip, r7, #4, #16
    q->f = (d & 0xF) << 4;
    bb06:	013f      	lsls	r7, r7, #4
    bb08:	f007 03f0 	and.w	r3, r7, #240	; 0xf0
                m = (y_prev.f + y_next.f) >> 1;
    bb0c:	441a      	add	r2, r3
    bb0e:	f3c2 0247 	ubfx	r2, r2, #1, #8
                if(outer) m = 255 - m;
    bb12:	b10e      	cbz	r6, bb18 <lv_draw_mask_radius+0x358>
    bb14:	43d2      	mvns	r2, r2
    bb16:	b2d2      	uxtb	r2, r2
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
    bb18:	2800      	cmp	r0, #0
    bb1a:	db12      	blt.n	bb42 <lv_draw_mask_radius+0x382>
    bb1c:	4583      	cmp	fp, r0
    bb1e:	dd10      	ble.n	bb42 <lv_draw_mask_radius+0x382>
    bb20:	4680      	mov	r8, r0
    bb22:	f81e 7000 	ldrb.w	r7, [lr, r0]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    bb26:	2af9      	cmp	r2, #249	; 0xf9
    bb28:	d809      	bhi.n	bb3e <lv_draw_mask_radius+0x37e>
    if(mask_new <= LV_OPA_MIN) return 0;
    bb2a:	2a05      	cmp	r2, #5
    bb2c:	d9cb      	bls.n	bac6 <lv_draw_mask_radius+0x306>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    bb2e:	fb02 f507 	mul.w	r5, r2, r7
    bb32:	eb05 2705 	add.w	r7, r5, r5, lsl #8
    bb36:	eb05 17c7 	add.w	r7, r5, r7, lsl #7
    bb3a:	f3c7 57c7 	ubfx	r7, r7, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
    bb3e:	f80e 7008 	strb.w	r7, [lr, r8]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
    bb42:	2c00      	cmp	r4, #0
    bb44:	dbc9      	blt.n	bada <lv_draw_mask_radius+0x31a>
    bb46:	45a3      	cmp	fp, r4
    bb48:	ddc7      	ble.n	bada <lv_draw_mask_radius+0x31a>
    bb4a:	46a0      	mov	r8, r4
    bb4c:	f81e 7004 	ldrb.w	r7, [lr, r4]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    bb50:	2af9      	cmp	r2, #249	; 0xf9
    bb52:	d8c0      	bhi.n	bad6 <lv_draw_mask_radius+0x316>
    if(mask_new <= LV_OPA_MIN) return 0;
    bb54:	2a05      	cmp	r2, #5
    bb56:	d9bd      	bls.n	bad4 <lv_draw_mask_radius+0x314>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    bb58:	fb02 f207 	mul.w	r2, r2, r7
    bb5c:	eb02 2702 	add.w	r7, r2, r2, lsl #8
    bb60:	eb02 17c7 	add.w	r7, r2, r7, lsl #7
    bb64:	f3c7 57c7 	ubfx	r7, r7, #23, #8
    bb68:	e7b5      	b.n	bad6 <lv_draw_mask_radius+0x316>
    bb6a:	f8dd 8010 	ldr.w	r8, [sp, #16]
    bb6e:	f8dd a014 	ldr.w	sl, [sp, #20]
    bb72:	43ea      	mvns	r2, r5
    bb74:	4442      	add	r2, r8
    bb76:	9903      	ldr	r1, [sp, #12]
    bb78:	4411      	add	r1, r2
    bb7a:	9103      	str	r1, [sp, #12]
    bb7c:	3501      	adds	r5, #1
    bb7e:	44aa      	add	sl, r5
    bb80:	ebaa 0a08 	sub.w	sl, sl, r8
    bb84:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    bb88:	f8ad c024 	strh.w	ip, [sp, #36]	; 0x24
    bb8c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
            if(y_prev.f) {
    bb90:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    bb94:	2b00      	cmp	r3, #0
    bb96:	d03a      	beq.n	bc0e <lv_draw_mask_radius+0x44e>
                m = (y_prev.f * x1.f) >> 9;
    bb98:	f8bd 201e 	ldrh.w	r2, [sp, #30]
    bb9c:	fb03 f302 	mul.w	r3, r3, r2
    bba0:	f3c3 2347 	ubfx	r3, r3, #9, #8
                if(outer) m = 255 - m;
    bba4:	b10e      	cbz	r6, bbaa <lv_draw_mask_radius+0x3ea>
    bba6:	43db      	mvns	r3, r3
    bba8:	b2db      	uxtb	r3, r3
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
    bbaa:	9a03      	ldr	r2, [sp, #12]
    bbac:	2a00      	cmp	r2, #0
    bbae:	db12      	blt.n	bbd6 <lv_draw_mask_radius+0x416>
    bbb0:	4593      	cmp	fp, r2
    bbb2:	dd10      	ble.n	bbd6 <lv_draw_mask_radius+0x416>
    bbb4:	9802      	ldr	r0, [sp, #8]
    bbb6:	4601      	mov	r1, r0
    bbb8:	4411      	add	r1, r2
    bbba:	5c82      	ldrb	r2, [r0, r2]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    bbbc:	2bf9      	cmp	r3, #249	; 0xf9
    bbbe:	d809      	bhi.n	bbd4 <lv_draw_mask_radius+0x414>
    if(mask_new <= LV_OPA_MIN) return 0;
    bbc0:	2b05      	cmp	r3, #5
    bbc2:	d927      	bls.n	bc14 <lv_draw_mask_radius+0x454>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    bbc4:	fb03 f202 	mul.w	r2, r3, r2
    bbc8:	eb02 2002 	add.w	r0, r2, r2, lsl #8
    bbcc:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
    bbd0:	f3c2 52c7 	ubfx	r2, r2, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
    bbd4:	700a      	strb	r2, [r1, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
    bbd6:	f1ba 0f00 	cmp.w	sl, #0
    bbda:	db13      	blt.n	bc04 <lv_draw_mask_radius+0x444>
    bbdc:	45d3      	cmp	fp, sl
    bbde:	dd11      	ble.n	bc04 <lv_draw_mask_radius+0x444>
    bbe0:	9802      	ldr	r0, [sp, #8]
    bbe2:	eb00 010a 	add.w	r1, r0, sl
    bbe6:	f810 200a 	ldrb.w	r2, [r0, sl]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    bbea:	2bf9      	cmp	r3, #249	; 0xf9
    bbec:	d809      	bhi.n	bc02 <lv_draw_mask_radius+0x442>
    if(mask_new <= LV_OPA_MIN) return 0;
    bbee:	2b05      	cmp	r3, #5
    bbf0:	d912      	bls.n	bc18 <lv_draw_mask_radius+0x458>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    bbf2:	fb03 f302 	mul.w	r3, r3, r2
    bbf6:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    bbfa:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    bbfe:	f3c3 52c7 	ubfx	r2, r3, #23, #8
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
    bc02:	700a      	strb	r2, [r1, #0]
                kl--;
    bc04:	9b03      	ldr	r3, [sp, #12]
    bc06:	3b01      	subs	r3, #1
    bc08:	9303      	str	r3, [sp, #12]
                kr++;
    bc0a:	f10a 0a01 	add.w	sl, sl, #1
            if(outer == 0) {
    bc0e:	b12e      	cbz	r6, bc1c <lv_draw_mask_radius+0x45c>
    return LV_DRAW_MASK_RES_CHANGED;
    bc10:	2002      	movs	r0, #2
    bc12:	e01c      	b.n	bc4e <lv_draw_mask_radius+0x48e>
    if(mask_new <= LV_OPA_MIN) return 0;
    bc14:	2200      	movs	r2, #0
    bc16:	e7dd      	b.n	bbd4 <lv_draw_mask_radius+0x414>
    bc18:	2200      	movs	r2, #0
    bc1a:	e7f2      	b.n	bc02 <lv_draw_mask_radius+0x442>
                kl++;
    bc1c:	9903      	ldr	r1, [sp, #12]
    bc1e:	3101      	adds	r1, #1
                if(kl > len) {
    bc20:	4559      	cmp	r1, fp
    bc22:	dc11      	bgt.n	bc48 <lv_draw_mask_radius+0x488>
                if(kl >= 0) _lv_memset_00(&mask_buf[0], kl);
    bc24:	2900      	cmp	r1, #0
    bc26:	db02      	blt.n	bc2e <lv_draw_mask_radius+0x46e>
    bc28:	9802      	ldr	r0, [sp, #8]
    bc2a:	4b60      	ldr	r3, [pc, #384]	; (bdac <lv_draw_mask_radius+0x5ec>)
    bc2c:	4798      	blx	r3
                if(kr < 0) {
    bc2e:	f1ba 0f00 	cmp.w	sl, #0
    bc32:	db09      	blt.n	bc48 <lv_draw_mask_radius+0x488>
                if(kr < len) _lv_memset_00(&mask_buf[kr], len - kr);
    bc34:	45da      	cmp	sl, fp
    bc36:	daeb      	bge.n	bc10 <lv_draw_mask_radius+0x450>
    bc38:	ebab 010a 	sub.w	r1, fp, sl
    bc3c:	9b02      	ldr	r3, [sp, #8]
    bc3e:	4453      	add	r3, sl
    bc40:	4618      	mov	r0, r3
    bc42:	4b5a      	ldr	r3, [pc, #360]	; (bdac <lv_draw_mask_radius+0x5ec>)
    bc44:	4798      	blx	r3
    bc46:	e7e3      	b.n	bc10 <lv_draw_mask_radius+0x450>
                    return LV_DRAW_MASK_RES_TRANSP;
    bc48:	2000      	movs	r0, #0
    bc4a:	e000      	b.n	bc4e <lv_draw_mask_radius+0x48e>
            return LV_DRAW_MASK_RES_TRANSP;
    bc4c:	2000      	movs	r0, #0
}
    bc4e:	b00d      	add	sp, #52	; 0x34
    bc50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LV_DRAW_MASK_RES_TRANSP;
    bc54:	2000      	movs	r0, #0
    bc56:	e7fa      	b.n	bc4e <lv_draw_mask_radius+0x48e>
            return LV_DRAW_MASK_RES_FULL_COVER;
    bc58:	2001      	movs	r0, #1
    bc5a:	e7f8      	b.n	bc4e <lv_draw_mask_radius+0x48e>
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
    bc5c:	2000      	movs	r0, #0
    bc5e:	e7f6      	b.n	bc4e <lv_draw_mask_radius+0x48e>
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
    bc60:	2000      	movs	r0, #0
    bc62:	e7f4      	b.n	bc4e <lv_draw_mask_radius+0x48e>
        return LV_DRAW_MASK_RES_CHANGED;
    bc64:	2002      	movs	r0, #2
    bc66:	e7f2      	b.n	bc4e <lv_draw_mask_radius+0x48e>
        if(radius <= 256) sqrt_mask = 0x800;
    bc68:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
    bc6c:	bfd4      	ite	le
    bc6e:	f44f 6300 	movle.w	r3, #2048	; 0x800
    bc72:	f44f 4300 	movgt.w	r3, #32768	; 0x8000
    bc76:	9304      	str	r3, [sp, #16]
            y = radius - (h - abs_y) + 1;
    bc78:	1a89      	subs	r1, r1, r2
    bc7a:	eba8 0001 	sub.w	r0, r8, r1
    bc7e:	1c44      	adds	r4, r0, #1
            if((y - 1) == p->y_prev) {
    bc80:	696b      	ldr	r3, [r5, #20]
    bc82:	4298      	cmp	r0, r3
    bc84:	f47f ae45 	bne.w	b912 <lv_draw_mask_radius+0x152>
                x1.f = p->y_prev_x.f;
    bc88:	8b6b      	ldrh	r3, [r5, #26]
    bc8a:	f8ad 301e 	strh.w	r3, [sp, #30]
                x1.i = p->y_prev_x.i;
    bc8e:	8b2b      	ldrh	r3, [r5, #24]
    bc90:	f8ad 301c 	strh.w	r3, [sp, #28]
    bc94:	e644      	b.n	b920 <lv_draw_mask_radius+0x160>
        if(radius <= 256) sqrt_mask = 0x800;
    bc96:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
    bc9a:	bfd4      	ite	le
    bc9c:	f44f 6300 	movle.w	r3, #2048	; 0x800
    bca0:	f44f 4300 	movgt.w	r3, #32768	; 0x8000
    bca4:	9304      	str	r3, [sp, #16]
            y = radius - abs_y;
    bca6:	eba8 0402 	sub.w	r4, r8, r2
            if(y == p->y_prev) {
    bcaa:	696b      	ldr	r3, [r5, #20]
    bcac:	429c      	cmp	r4, r3
    bcae:	f43f ae29 	beq.w	b904 <lv_draw_mask_radius+0x144>
                _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
    bcb2:	9a04      	ldr	r2, [sp, #16]
    bcb4:	a906      	add	r1, sp, #24
    bcb6:	9b01      	ldr	r3, [sp, #4]
    bcb8:	fb04 3014 	mls	r0, r4, r4, r3
    bcbc:	4b3c      	ldr	r3, [pc, #240]	; (bdb0 <lv_draw_mask_radius+0x5f0>)
    bcbe:	4798      	blx	r3
            _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
    bcc0:	1e63      	subs	r3, r4, #1
    bcc2:	9a04      	ldr	r2, [sp, #16]
    bcc4:	a907      	add	r1, sp, #28
    bcc6:	9303      	str	r3, [sp, #12]
    bcc8:	9801      	ldr	r0, [sp, #4]
    bcca:	fb03 0013 	mls	r0, r3, r3, r0
    bcce:	4b38      	ldr	r3, [pc, #224]	; (bdb0 <lv_draw_mask_radius+0x5f0>)
    bcd0:	4798      	blx	r3
            p->y_prev = y - 1;
    bcd2:	9b03      	ldr	r3, [sp, #12]
    bcd4:	616b      	str	r3, [r5, #20]
            p->y_prev_x.f = x1.f;
    bcd6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    bcda:	836b      	strh	r3, [r5, #26]
            p->y_prev_x.i = x1.i;
    bcdc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    bce0:	832b      	strh	r3, [r5, #24]
        if(x0.i == x1.i - 1 && x1.f == 0) {
    bce2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    bce6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    bcea:	1e51      	subs	r1, r2, #1
    bcec:	428b      	cmp	r3, r1
    bcee:	f43f ae26 	beq.w	b93e <lv_draw_mask_radius+0x17e>
    int32_t k = rect.x1 - abs_x; /*First relevant coordinate on the of the mask*/
    bcf2:	eba9 0707 	sub.w	r7, r9, r7
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    bcf6:	f10a 0a01 	add.w	sl, sl, #1
    bcfa:	ebaa 0909 	sub.w	r9, sl, r9
    int32_t w = lv_area_get_width(&rect);
    bcfe:	fa0f f989 	sxth.w	r9, r9
        if(x0.i == x1.i) {
    bd02:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    bd06:	429a      	cmp	r2, r3
    bd08:	f43f ae25 	beq.w	b956 <lv_draw_mask_radius+0x196>
            int32_t ofs = radius - (x0.i + 1);
    bd0c:	3301      	adds	r3, #1
    bd0e:	eba8 0803 	sub.w	r8, r8, r3
            int32_t kl = k + ofs;
    bd12:	eb07 0308 	add.w	r3, r7, r8
    bd16:	9303      	str	r3, [sp, #12]
            int32_t kr = k + (w - ofs - 1);
    bd18:	eba9 0808 	sub.w	r8, r9, r8
    bd1c:	f108 3aff 	add.w	sl, r8, #4294967295
    bd20:	44ba      	add	sl, r7
            if(outer) {
    bd22:	b186      	cbz	r6, bd46 <lv_draw_mask_radius+0x586>
                int32_t first = kl + 1;
    bd24:	1c58      	adds	r0, r3, #1
    bd26:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
                if(len_tmp + first > len) len_tmp = len - first;
    bd2a:	45da      	cmp	sl, fp
                int32_t len_tmp = kr - first;
    bd2c:	bfd4      	ite	le
    bd2e:	ebaa 0100 	suble.w	r1, sl, r0
                if(len_tmp + first > len) len_tmp = len - first;
    bd32:	ebab 0100 	subgt.w	r1, fp, r0
                if(first < len && len_tmp >= 0) {
    bd36:	4558      	cmp	r0, fp
    bd38:	da05      	bge.n	bd46 <lv_draw_mask_radius+0x586>
    bd3a:	2900      	cmp	r1, #0
    bd3c:	db03      	blt.n	bd46 <lv_draw_mask_radius+0x586>
                    _lv_memset_00(&mask_buf[first], len_tmp);
    bd3e:	9b02      	ldr	r3, [sp, #8]
    bd40:	4418      	add	r0, r3
    bd42:	4b1a      	ldr	r3, [pc, #104]	; (bdac <lv_draw_mask_radius+0x5ec>)
    bd44:	4798      	blx	r3
            uint32_t i = x0.i + 1;
    bd46:	f8bd 0018 	ldrh.w	r0, [sp, #24]
    bd4a:	f100 0801 	add.w	r8, r0, #1
            _lv_sqrt(r2 - (x0.i * x0.i), &y_prev, sqrt_mask);
    bd4e:	9a04      	ldr	r2, [sp, #16]
    bd50:	a908      	add	r1, sp, #32
    bd52:	9b01      	ldr	r3, [sp, #4]
    bd54:	fb00 3010 	mls	r0, r0, r0, r3
    bd58:	4b15      	ldr	r3, [pc, #84]	; (bdb0 <lv_draw_mask_radius+0x5f0>)
    bd5a:	4798      	blx	r3
            if(y_prev.f == 0) {
    bd5c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    bd60:	b93b      	cbnz	r3, bd72 <lv_draw_mask_radius+0x5b2>
                y_prev.i--;
    bd62:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    bd66:	3b01      	subs	r3, #1
    bd68:	f8ad 3020 	strh.w	r3, [sp, #32]
                y_prev.f = 0xFF;
    bd6c:	23ff      	movs	r3, #255	; 0xff
    bd6e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            if(y_prev.i >= y) {
    bd72:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    bd76:	429c      	cmp	r4, r3
    bd78:	f77f ae54 	ble.w	ba24 <lv_draw_mask_radius+0x264>
            for(; i <= x1.i; i++) {
    bd7c:	f8bd 501c 	ldrh.w	r5, [sp, #28]
    bd80:	45a8      	cmp	r8, r5
    bd82:	f63f af05 	bhi.w	bb90 <lv_draw_mask_radius+0x3d0>
    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
    bd86:	f8bd 9020 	ldrh.w	r9, [sp, #32]
    bd8a:	ea4f 1909 	mov.w	r9, r9, lsl #4
    bd8e:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
    bd92:	4641      	mov	r1, r8
    bd94:	4654      	mov	r4, sl
    bd96:	9803      	ldr	r0, [sp, #12]
    if(mask_new <= LV_OPA_MIN) return 0;
    bd98:	f8cd 8010 	str.w	r8, [sp, #16]
    bd9c:	f8cd a014 	str.w	sl, [sp, #20]
    bda0:	f8dd a004 	ldr.w	sl, [sp, #4]
    bda4:	9501      	str	r5, [sp, #4]
    bda6:	f8dd e008 	ldr.w	lr, [sp, #8]
    bdaa:	e69d      	b.n	bae8 <lv_draw_mask_radius+0x328>
    bdac:	00012b2b 	.word	0x00012b2b
    bdb0:	00012311 	.word	0x00012311

0000bdb4 <lv_draw_mask_add>:
{
    bdb4:	b510      	push	{r4, lr}
    bdb6:	b082      	sub	sp, #8
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
    bdb8:	4b10      	ldr	r3, [pc, #64]	; (bdfc <lv_draw_mask_add+0x48>)
    bdba:	681b      	ldr	r3, [r3, #0]
    bdbc:	b19b      	cbz	r3, bde6 <lv_draw_mask_add+0x32>
    bdbe:	4a0f      	ldr	r2, [pc, #60]	; (bdfc <lv_draw_mask_add+0x48>)
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
    bdc0:	2301      	movs	r3, #1
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
    bdc2:	6894      	ldr	r4, [r2, #8]
    bdc4:	b184      	cbz	r4, bde8 <lv_draw_mask_add+0x34>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
    bdc6:	3301      	adds	r3, #1
    bdc8:	b2db      	uxtb	r3, r3
    bdca:	3208      	adds	r2, #8
    bdcc:	2b10      	cmp	r3, #16
    bdce:	d1f8      	bne.n	bdc2 <lv_draw_mask_add+0xe>
        LV_LOG_WARN("lv_mask_add: no place to add the mask");
    bdd0:	4b0b      	ldr	r3, [pc, #44]	; (be00 <lv_draw_mask_add+0x4c>)
    bdd2:	9300      	str	r3, [sp, #0]
    bdd4:	4b0b      	ldr	r3, [pc, #44]	; (be04 <lv_draw_mask_add+0x50>)
    bdd6:	2257      	movs	r2, #87	; 0x57
    bdd8:	490b      	ldr	r1, [pc, #44]	; (be08 <lv_draw_mask_add+0x54>)
    bdda:	2002      	movs	r0, #2
    bddc:	4c0b      	ldr	r4, [pc, #44]	; (be0c <lv_draw_mask_add+0x58>)
    bdde:	47a0      	blx	r4
        return LV_MASK_ID_INV;
    bde0:	f04f 30ff 	mov.w	r0, #4294967295
    bde4:	e007      	b.n	bdf6 <lv_draw_mask_add+0x42>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
    bde6:	2300      	movs	r3, #0
    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
    bde8:	4a04      	ldr	r2, [pc, #16]	; (bdfc <lv_draw_mask_add+0x48>)
    bdea:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
    bdee:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    bdf2:	6051      	str	r1, [r2, #4]
    return i;
    bdf4:	b218      	sxth	r0, r3
}
    bdf6:	b002      	add	sp, #8
    bdf8:	bd10      	pop	{r4, pc}
    bdfa:	bf00      	nop
    bdfc:	2000c768 	.word	0x2000c768
    be00:	00025018 	.word	0x00025018
    be04:	00024fbc 	.word	0x00024fbc
    be08:	00024fe8 	.word	0x00024fe8
    be0c:	00012251 	.word	0x00012251

0000be10 <lv_draw_mask_apply>:
{
    be10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    be14:	b082      	sub	sp, #8
    while(m->param) {
    be16:	4c11      	ldr	r4, [pc, #68]	; (be5c <lv_draw_mask_apply+0x4c>)
    be18:	6824      	ldr	r4, [r4, #0]
    be1a:	b1ec      	cbz	r4, be58 <lv_draw_mask_apply+0x48>
    be1c:	469a      	mov	sl, r3
    be1e:	4691      	mov	r9, r2
    be20:	4688      	mov	r8, r1
    be22:	4607      	mov	r7, r0
    be24:	4e0d      	ldr	r6, [pc, #52]	; (be5c <lv_draw_mask_apply+0x4c>)
    be26:	2500      	movs	r5, #0
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
    be28:	9400      	str	r4, [sp, #0]
    be2a:	6824      	ldr	r4, [r4, #0]
    be2c:	4653      	mov	r3, sl
    be2e:	464a      	mov	r2, r9
    be30:	4641      	mov	r1, r8
    be32:	4638      	mov	r0, r7
    be34:	47a0      	blx	r4
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
    be36:	4604      	mov	r4, r0
    be38:	b150      	cbz	r0, be50 <lv_draw_mask_apply+0x40>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
    be3a:	2802      	cmp	r0, #2
    be3c:	bf08      	it	eq
    be3e:	2501      	moveq	r5, #1
    while(m->param) {
    be40:	f856 4f08 	ldr.w	r4, [r6, #8]!
    be44:	2c00      	cmp	r4, #0
    be46:	d1ef      	bne.n	be28 <lv_draw_mask_apply+0x18>
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
    be48:	2d00      	cmp	r5, #0
    be4a:	bf14      	ite	ne
    be4c:	2402      	movne	r4, #2
    be4e:	2401      	moveq	r4, #1
}
    be50:	4620      	mov	r0, r4
    be52:	b002      	add	sp, #8
    be54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
    be58:	2401      	movs	r4, #1
    be5a:	e7f9      	b.n	be50 <lv_draw_mask_apply+0x40>
    be5c:	2000c768 	.word	0x2000c768

0000be60 <lv_draw_mask_remove_id>:
    if(id != LV_MASK_ID_INV) {
    be60:	f1b0 3fff 	cmp.w	r0, #4294967295
    be64:	d00a      	beq.n	be7c <lv_draw_mask_remove_id+0x1c>
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
    be66:	4b06      	ldr	r3, [pc, #24]	; (be80 <lv_draw_mask_remove_id+0x20>)
    be68:	f853 1030 	ldr.w	r1, [r3, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
    be6c:	2200      	movs	r2, #0
    be6e:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
    be72:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    be76:	605a      	str	r2, [r3, #4]
}
    be78:	4608      	mov	r0, r1
    be7a:	4770      	bx	lr
    void * p = NULL;
    be7c:	2100      	movs	r1, #0
    return p;
    be7e:	e7fb      	b.n	be78 <lv_draw_mask_remove_id+0x18>
    be80:	2000c768 	.word	0x2000c768

0000be84 <lv_draw_mask_remove_custom>:
{
    be84:	b470      	push	{r4, r5, r6}
    be86:	4b0b      	ldr	r3, [pc, #44]	; (beb4 <lv_draw_mask_remove_custom+0x30>)
    be88:	1d1a      	adds	r2, r3, #4
    be8a:	f103 0480 	add.w	r4, r3, #128	; 0x80
    void * p = NULL;
    be8e:	2600      	movs	r6, #0
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
    be90:	4635      	mov	r5, r6
    be92:	e003      	b.n	be9c <lv_draw_mask_remove_custom+0x18>
    be94:	3308      	adds	r3, #8
    be96:	3208      	adds	r2, #8
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
    be98:	42a3      	cmp	r3, r4
    be9a:	d008      	beq.n	beae <lv_draw_mask_remove_custom+0x2a>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
    be9c:	6859      	ldr	r1, [r3, #4]
    be9e:	4281      	cmp	r1, r0
    bea0:	d1f8      	bne.n	be94 <lv_draw_mask_remove_custom+0x10>
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
    bea2:	f852 6c04 	ldr.w	r6, [r2, #-4]
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
    bea6:	f842 5c04 	str.w	r5, [r2, #-4]
            LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = NULL;
    beaa:	605d      	str	r5, [r3, #4]
    beac:	e7f2      	b.n	be94 <lv_draw_mask_remove_custom+0x10>
}
    beae:	4630      	mov	r0, r6
    beb0:	bc70      	pop	{r4, r5, r6}
    beb2:	4770      	bx	lr
    beb4:	2000c768 	.word	0x2000c768

0000beb8 <lv_draw_mask_get_cnt>:
{
    beb8:	2300      	movs	r3, #0
    uint8_t cnt = 0;
    beba:	4618      	mov	r0, r3
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
    bebc:	4906      	ldr	r1, [pc, #24]	; (bed8 <lv_draw_mask_get_cnt+0x20>)
    bebe:	e002      	b.n	bec6 <lv_draw_mask_get_cnt+0xe>
    bec0:	3301      	adds	r3, #1
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
    bec2:	2b10      	cmp	r3, #16
    bec4:	d006      	beq.n	bed4 <lv_draw_mask_get_cnt+0x1c>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
    bec6:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
    beca:	2a00      	cmp	r2, #0
    becc:	d0f8      	beq.n	bec0 <lv_draw_mask_get_cnt+0x8>
    bece:	3001      	adds	r0, #1
    bed0:	b2c0      	uxtb	r0, r0
    bed2:	e7f5      	b.n	bec0 <lv_draw_mask_get_cnt+0x8>
}
    bed4:	4770      	bx	lr
    bed6:	bf00      	nop
    bed8:	2000c768 	.word	0x2000c768

0000bedc <lv_draw_mask_line_points_init>:
{
    bedc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bee0:	4604      	mov	r4, r0
    bee2:	460f      	mov	r7, r1
    bee4:	4615      	mov	r5, r2
    bee6:	4698      	mov	r8, r3
    bee8:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
    _lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
    beec:	212c      	movs	r1, #44	; 0x2c
    beee:	4b4a      	ldr	r3, [pc, #296]	; (c018 <lv_draw_mask_line_points_init+0x13c>)
    bef0:	4798      	blx	r3
    if(p1y > p2y) {
    bef2:	42b5      	cmp	r5, r6
    bef4:	dd05      	ble.n	bf02 <lv_draw_mask_line_points_init+0x26>
    bef6:	462b      	mov	r3, r5
        p1y = t;
    bef8:	4635      	mov	r5, r6
        p2y = p1y;
    befa:	461e      	mov	r6, r3
    if(p1y > p2y) {
    befc:	463b      	mov	r3, r7
        p1x = t;
    befe:	4647      	mov	r7, r8
        p2x = p1x;
    bf00:	4698      	mov	r8, r3
    param->cfg.p1.x = p1x;
    bf02:	8127      	strh	r7, [r4, #8]
    param->cfg.p1.y = p1y;
    bf04:	8165      	strh	r5, [r4, #10]
    param->cfg.p2.x = p2x;
    bf06:	f8a4 800c 	strh.w	r8, [r4, #12]
    param->cfg.p2.y = p2y;
    bf0a:	81e6      	strh	r6, [r4, #14]
    param->cfg.side = side;
    bf0c:	7c23      	ldrb	r3, [r4, #16]
    bf0e:	f89d 201c 	ldrb.w	r2, [sp, #28]
    bf12:	f362 0301 	bfi	r3, r2, #0, #2
    bf16:	7423      	strb	r3, [r4, #16]
    param->origo.x = p1x;
    bf18:	8267      	strh	r7, [r4, #18]
    param->origo.y = p1y;
    bf1a:	82a5      	strh	r5, [r4, #20]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
    bf1c:	eba8 0707 	sub.w	r7, r8, r7
    bf20:	1b75      	subs	r5, r6, r5
    bf22:	ea87 71e7 	eor.w	r1, r7, r7, asr #31
    bf26:	eba1 71e7 	sub.w	r1, r1, r7, asr #31
    bf2a:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
    bf2e:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
    bf32:	4299      	cmp	r1, r3
    bf34:	bfd4      	ite	le
    bf36:	2100      	movle	r1, #0
    bf38:	2101      	movgt	r1, #1
    bf3a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    bf3e:	f361 0200 	bfi	r2, r1, #0, #1
    bf42:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    param->yx_steep = 0;
    bf46:	2100      	movs	r1, #0
    bf48:	61e1      	str	r1, [r4, #28]
    param->xy_steep = 0;
    bf4a:	61a1      	str	r1, [r4, #24]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
    bf4c:	4b33      	ldr	r3, [pc, #204]	; (c01c <lv_draw_mask_line_points_init+0x140>)
    bf4e:	6023      	str	r3, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
    bf50:	7121      	strb	r1, [r4, #4]
    if(param->flat) {
    bf52:	f012 0f01 	tst.w	r2, #1
    bf56:	d025      	beq.n	bfa4 <lv_draw_mask_line_points_init+0xc8>
        if(dx) {
    bf58:	b13f      	cbz	r7, bf6a <lv_draw_mask_line_points_init+0x8e>
            m = (1 << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
    bf5a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    bf5e:	fb93 f3f7 	sdiv	r3, r3, r7
            param->yx_steep = (m * dy) >> 10;
    bf62:	fb05 f303 	mul.w	r3, r5, r3
    bf66:	129b      	asrs	r3, r3, #10
    bf68:	61e3      	str	r3, [r4, #28]
        if(dy) {
    bf6a:	b13d      	cbz	r5, bf7c <lv_draw_mask_line_points_init+0xa0>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
    bf6c:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
    bf70:	fb96 f5f5 	sdiv	r5, r6, r5
            param->xy_steep = (m * dx) >> 10;
    bf74:	fb07 f705 	mul.w	r7, r7, r5
    bf78:	12bf      	asrs	r7, r7, #10
    bf7a:	61a7      	str	r7, [r4, #24]
        param->steep = param->yx_steep;
    bf7c:	69e3      	ldr	r3, [r4, #28]
    bf7e:	6223      	str	r3, [r4, #32]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
    bf80:	7c23      	ldrb	r3, [r4, #16]
    bf82:	f013 0303 	ands.w	r3, r3, #3
    bf86:	d122      	bne.n	bfce <lv_draw_mask_line_points_init+0xf2>
    bf88:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    bf8c:	f36f 0341 	bfc	r3, #1, #1
    bf90:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    param->spx = param->steep >> 2;
    bf94:	6a23      	ldr	r3, [r4, #32]
    bf96:	109a      	asrs	r2, r3, #2
    if(param->steep < 0) param->spx = -param->spx;
    bf98:	2b00      	cmp	r3, #0
    bf9a:	bfb8      	it	lt
    bf9c:	4252      	neglt	r2, r2
    bf9e:	6262      	str	r2, [r4, #36]	; 0x24
    bfa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(dy) {
    bfa4:	b13d      	cbz	r5, bfb6 <lv_draw_mask_line_points_init+0xda>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
    bfa6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    bfaa:	fb93 f3f5 	sdiv	r3, r3, r5
            param->xy_steep = (m * dx) >> 10;
    bfae:	fb07 f303 	mul.w	r3, r7, r3
    bfb2:	129b      	asrs	r3, r3, #10
    bfb4:	61a3      	str	r3, [r4, #24]
        if(dx) {
    bfb6:	b13f      	cbz	r7, bfc8 <lv_draw_mask_line_points_init+0xec>
            m = (1 << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
    bfb8:	f44f 1880 	mov.w	r8, #1048576	; 0x100000
    bfbc:	fb98 f7f7 	sdiv	r7, r8, r7
            param->yx_steep = (m * dy) >> 10;
    bfc0:	fb05 f507 	mul.w	r5, r5, r7
    bfc4:	12ad      	asrs	r5, r5, #10
    bfc6:	61e5      	str	r5, [r4, #28]
        param->steep = param->xy_steep;
    bfc8:	69a3      	ldr	r3, [r4, #24]
    bfca:	6223      	str	r3, [r4, #32]
    bfcc:	e7d8      	b.n	bf80 <lv_draw_mask_line_points_init+0xa4>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
    bfce:	2b01      	cmp	r3, #1
    bfd0:	d00f      	beq.n	bff2 <lv_draw_mask_line_points_init+0x116>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
    bfd2:	2b02      	cmp	r3, #2
    bfd4:	d014      	beq.n	c000 <lv_draw_mask_line_points_init+0x124>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
    bfd6:	2b03      	cmp	r3, #3
    bfd8:	d1dc      	bne.n	bf94 <lv_draw_mask_line_points_init+0xb8>
        if(param->steep > 0) param->inv = 0;
    bfda:	6a23      	ldr	r3, [r4, #32]
    bfdc:	2b00      	cmp	r3, #0
    bfde:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    bfe2:	bfcc      	ite	gt
    bfe4:	f36f 0341 	bfcgt	r3, #1, #1
        else param->inv = 1;
    bfe8:	f043 0302 	orrle.w	r3, r3, #2
    bfec:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    bff0:	e7d0      	b.n	bf94 <lv_draw_mask_line_points_init+0xb8>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
    bff2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    bff6:	f043 0302 	orr.w	r3, r3, #2
    bffa:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    bffe:	e7c9      	b.n	bf94 <lv_draw_mask_line_points_init+0xb8>
        if(param->steep > 0) param->inv = 1;
    c000:	6a23      	ldr	r3, [r4, #32]
    c002:	2b00      	cmp	r3, #0
    c004:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    c008:	bfcc      	ite	gt
    c00a:	f043 0302 	orrgt.w	r3, r3, #2
        else param->inv = 0;
    c00e:	f36f 0341 	bfcle	r3, #1, #1
    c012:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    c016:	e7bd      	b.n	bf94 <lv_draw_mask_line_points_init+0xb8>
    c018:	00012b2b 	.word	0x00012b2b
    c01c:	0000b215 	.word	0x0000b215

0000c020 <lv_draw_mask_radius_init>:
{
    c020:	b470      	push	{r4, r5, r6}
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    c022:	88cc      	ldrh	r4, [r1, #6]
    c024:	3401      	adds	r4, #1
    c026:	884d      	ldrh	r5, [r1, #2]
    c028:	1b64      	subs	r4, r4, r5
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    c02a:	888d      	ldrh	r5, [r1, #4]
    c02c:	3501      	adds	r5, #1
    c02e:	880e      	ldrh	r6, [r1, #0]
    c030:	1bad      	subs	r5, r5, r6
    int32_t short_side = LV_MATH_MIN(w, h);
    c032:	b224      	sxth	r4, r4
    c034:	b22d      	sxth	r5, r5
    c036:	42ac      	cmp	r4, r5
    c038:	bfa8      	it	ge
    c03a:	462c      	movge	r4, r5
    if(radius > short_side >> 1) radius = short_side >> 1;
    c03c:	1064      	asrs	r4, r4, #1
    c03e:	42a2      	cmp	r2, r4
    c040:	bfc8      	it	gt
    c042:	b222      	sxthgt	r2, r4
    c044:	3901      	subs	r1, #1
    c046:	f100 0610 	add.w	r6, r0, #16
    uint8_t * d8 = (uint8_t *)dst;
    c04a:	f100 0408 	add.w	r4, r0, #8
        *d8 = *s8;
    c04e:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    c052:	f804 5b01 	strb.w	r5, [r4], #1
    while(len) {
    c056:	42b4      	cmp	r4, r6
    c058:	d1f9      	bne.n	c04e <lv_draw_mask_radius_init+0x2e>
    param->cfg.radius = radius;
    c05a:	8202      	strh	r2, [r0, #16]
    param->cfg.outer = inv ? 1 : 0;
    c05c:	7c82      	ldrb	r2, [r0, #18]
    c05e:	f363 0200 	bfi	r2, r3, #0, #1
    c062:	7482      	strb	r2, [r0, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
    c064:	4b05      	ldr	r3, [pc, #20]	; (c07c <lv_draw_mask_radius_init+0x5c>)
    c066:	6003      	str	r3, [r0, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
    c068:	2302      	movs	r3, #2
    c06a:	7103      	strb	r3, [r0, #4]
    param->y_prev = INT32_MIN;
    c06c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    c070:	6143      	str	r3, [r0, #20]
    param->y_prev_x.f = 0;
    c072:	2300      	movs	r3, #0
    c074:	8343      	strh	r3, [r0, #26]
    param->y_prev_x.i = 0;
    c076:	8303      	strh	r3, [r0, #24]
}
    c078:	bc70      	pop	{r4, r5, r6}
    c07a:	4770      	bx	lr
    c07c:	0000b7c1 	.word	0x0000b7c1

0000c080 <shadow_blur_corner>:
#endif

}

LV_ATTRIBUTE_FAST_MEM static void shadow_blur_corner(lv_coord_t size, lv_coord_t sw, uint16_t * sh_ups_buf)
{
    c080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c084:	b08b      	sub	sp, #44	; 0x2c
    c086:	9006      	str	r0, [sp, #24]
    c088:	4689      	mov	r9, r1
    c08a:	9207      	str	r2, [sp, #28]
    int32_t s_left = sw >> 1;
    c08c:	ea4f 0b61 	mov.w	fp, r1, asr #1
    c090:	f8cd b008 	str.w	fp, [sp, #8]
    int32_t s_right = (sw >> 1);
    if((sw & 1) == 0) s_left--;
    c094:	f011 0f01 	tst.w	r1, #1
    c098:	bf06      	itte	eq
    c09a:	f10b 33ff 	addeq.w	r3, fp, #4294967295
    c09e:	9308      	streq	r3, [sp, #32]
    int32_t s_left = sw >> 1;
    c0a0:	f8cd b020 	strne.w	fp, [sp, #32]

    /*Horizontal blur*/
    uint16_t * sh_ups_blur_buf = _lv_mem_buf_get(size * sizeof(uint16_t));
    c0a4:	9c06      	ldr	r4, [sp, #24]
    c0a6:	0067      	lsls	r7, r4, #1
    c0a8:	4638      	mov	r0, r7
    c0aa:	4b69      	ldr	r3, [pc, #420]	; (c250 <shadow_blur_corner+0x1d0>)
    c0ac:	4798      	blx	r3
    c0ae:	9005      	str	r0, [sp, #20]
    int32_t x;
    int32_t y;

    uint16_t * sh_ups_tmp_buf = sh_ups_buf;

    for(y = 0; y < size; y++) {
    c0b0:	2c00      	cmp	r4, #0
    c0b2:	f340 80be 	ble.w	c232 <shadow_blur_corner+0x1b2>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
    c0b6:	1eba      	subs	r2, r7, #2
    c0b8:	19c1      	adds	r1, r0, r7
    c0ba:	9103      	str	r1, [sp, #12]
    c0bc:	9d07      	ldr	r5, [sp, #28]
    c0be:	f04f 0800 	mov.w	r8, #0
        for(x = size - 1; x >= 0; x--) {
    c0c2:	f104 3aff 	add.w	sl, r4, #4294967295
    c0c6:	9908      	ldr	r1, [sp, #32]
    c0c8:	ebaa 0101 	sub.w	r1, sl, r1
    c0cc:	9104      	str	r1, [sp, #16]
    c0ce:	4606      	mov	r6, r0
    c0d0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
    c0d4:	4693      	mov	fp, r2
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
    c0d6:	f8cd 9004 	str.w	r9, [sp, #4]
    c0da:	f835 300b 	ldrh.w	r3, [r5, fp]
    c0de:	fb09 f303 	mul.w	r3, r9, r3
        for(x = size - 1; x >= 0; x--) {
    c0e2:	f1ba 0f00 	cmp.w	sl, #0
    c0e6:	db1b      	blt.n	c120 <shadow_blur_corner+0xa0>
    c0e8:	9a02      	ldr	r2, [sp, #8]
    c0ea:	eb02 010a 	add.w	r1, r2, sl
    c0ee:	9a04      	ldr	r2, [sp, #16]
    c0f0:	3a01      	subs	r2, #1
    c0f2:	9803      	ldr	r0, [sp, #12]
    c0f4:	f04f 0e00 	mov.w	lr, #0
            sh_ups_blur_buf[x] = v;
    c0f8:	f820 3d02 	strh.w	r3, [r0, #-2]!

            /*Forget the right pixel*/
            uint32_t right_val = 0;
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
    c0fc:	428c      	cmp	r4, r1
    c0fe:	bfcc      	ite	gt
    c100:	f835 c011 	ldrhgt.w	ip, [r5, r1, lsl #1]
    c104:	46f4      	movle	ip, lr
            v -= right_val;
    c106:	eba3 030c 	sub.w	r3, r3, ip

            /*Add the left pixel*/
            uint32_t left_val;
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
    c10a:	2a00      	cmp	r2, #0
    c10c:	bfb4      	ite	lt
    c10e:	f8b5 c000 	ldrhlt.w	ip, [r5]
            else left_val = sh_ups_tmp_buf[x - s_left - 1];
    c112:	f835 c012 	ldrhge.w	ip, [r5, r2, lsl #1]
            v += left_val;
    c116:	4463      	add	r3, ip
    c118:	3901      	subs	r1, #1
    c11a:	3a01      	subs	r2, #1
        for(x = size - 1; x >= 0; x--) {
    c11c:	42b0      	cmp	r0, r6
    c11e:	d1eb      	bne.n	c0f8 <shadow_blur_corner+0x78>
        }
        _lv_memcpy(sh_ups_tmp_buf, sh_ups_blur_buf, size * sizeof(uint16_t));
    c120:	463a      	mov	r2, r7
    c122:	4631      	mov	r1, r6
    c124:	4628      	mov	r0, r5
    c126:	4b4b      	ldr	r3, [pc, #300]	; (c254 <shadow_blur_corner+0x1d4>)
    c128:	4798      	blx	r3
        sh_ups_tmp_buf += size;
    c12a:	443d      	add	r5, r7
    for(y = 0; y < size; y++) {
    c12c:	f108 0801 	add.w	r8, r8, #1
    c130:	45a0      	cmp	r8, r4
    c132:	d1d0      	bne.n	c0d6 <shadow_blur_corner+0x56>
    c134:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    }

    /*Vertical blur*/
    uint32_t i;
    sh_ups_buf[0] = sh_ups_buf[0] / sw;
    c138:	9a07      	ldr	r2, [sp, #28]
    c13a:	8813      	ldrh	r3, [r2, #0]
    c13c:	9901      	ldr	r1, [sp, #4]
    c13e:	fb93 f3f1 	sdiv	r3, r3, r1
    c142:	8013      	strh	r3, [r2, #0]
    for(i = 1; i < (uint32_t)size * size; i++) {
    c144:	9b06      	ldr	r3, [sp, #24]
    c146:	fb03 f503 	mul.w	r5, r3, r3
    c14a:	2d01      	cmp	r5, #1
    c14c:	d911      	bls.n	c172 <shadow_blur_corner+0xf2>
    c14e:	9a07      	ldr	r2, [sp, #28]
    c150:	2101      	movs	r1, #1
    c152:	9e01      	ldr	r6, [sp, #4]
    c154:	4610      	mov	r0, r2
        if(sh_ups_buf[i] == sh_ups_buf[i - 1]) sh_ups_buf[i] = sh_ups_buf[i - 1];
    c156:	f832 3f02 	ldrh.w	r3, [r2, #2]!
    c15a:	8800      	ldrh	r0, [r0, #0]
    c15c:	4298      	cmp	r0, r3
        else  sh_ups_buf[i] = sh_ups_buf[i] / sw;
    c15e:	bf1c      	itt	ne
    c160:	fb93 f3f6 	sdivne	r3, r3, r6
    c164:	8013      	strhne	r3, [r2, #0]
    for(i = 1; i < (uint32_t)size * size; i++) {
    c166:	3101      	adds	r1, #1
    c168:	42a9      	cmp	r1, r5
    c16a:	d3f3      	bcc.n	c154 <shadow_blur_corner+0xd4>
    }

    for(x = 0; x < size; x++) {
    c16c:	9b06      	ldr	r3, [sp, #24]
    c16e:	2b00      	cmp	r3, #0
    c170:	dd59      	ble.n	c226 <shadow_blur_corner+0x1a6>
    c172:	9e07      	ldr	r6, [sp, #28]
    c174:	9602      	str	r6, [sp, #8]
    c176:	9908      	ldr	r1, [sp, #32]
    c178:	fb01 7207 	mla	r2, r1, r7, r7
    c17c:	ea6f 030b 	mvn.w	r3, fp
    c180:	1a5b      	subs	r3, r3, r1
    c182:	9d06      	ldr	r5, [sp, #24]
    c184:	fb05 f303 	mul.w	r3, r5, r3
    c188:	9306      	str	r3, [sp, #24]
            v -= top_val;

            /*Add the bottom pixel*/
            uint32_t bottom_val;
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
    c18a:	1e6b      	subs	r3, r5, #1
    c18c:	fb05 f303 	mul.w	r3, r5, r3
    c190:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    c194:	9307      	str	r3, [sp, #28]
    c196:	f04f 0a00 	mov.w	sl, #0
    c19a:	1e93      	subs	r3, r2, #2
    c19c:	9308      	str	r3, [sp, #32]
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
    c19e:	f101 0901 	add.w	r9, r1, #1
        sh_ups_tmp_buf = &sh_ups_buf[x];
    c1a2:	9b02      	ldr	r3, [sp, #8]
    c1a4:	461e      	mov	r6, r3
    c1a6:	3302      	adds	r3, #2
    c1a8:	461a      	mov	r2, r3
    c1aa:	9302      	str	r3, [sp, #8]
        int32_t v = sh_ups_tmp_buf[0] * sw;
    c1ac:	8833      	ldrh	r3, [r6, #0]
    c1ae:	9901      	ldr	r1, [sp, #4]
    c1b0:	fb01 f303 	mul.w	r3, r1, r3
    c1b4:	9908      	ldr	r1, [sp, #32]
    c1b6:	188d      	adds	r5, r1, r2
    c1b8:	9a05      	ldr	r2, [sp, #20]
    c1ba:	f1a2 0c02 	sub.w	ip, r2, #2
    c1be:	46e0      	mov	r8, ip
    c1c0:	46b6      	mov	lr, r6
    c1c2:	2200      	movs	r2, #0
    c1c4:	f8cd c00c 	str.w	ip, [sp, #12]
    c1c8:	9604      	str	r6, [sp, #16]
    c1ca:	9e06      	ldr	r6, [sp, #24]
    c1cc:	f8dd c01c 	ldr.w	ip, [sp, #28]
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSACALE_SHIFT);
    c1d0:	2b00      	cmp	r3, #0
    c1d2:	bfac      	ite	ge
    c1d4:	1199      	asrge	r1, r3, #6
    c1d6:	2100      	movlt	r1, #0
    c1d8:	f828 1f02 	strh.w	r1, [r8, #2]!
    c1dc:	4611      	mov	r1, r2
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
    c1de:	eba2 000b 	sub.w	r0, r2, fp
    c1e2:	2800      	cmp	r0, #0
    c1e4:	bfd4      	ite	le
    c1e6:	f8be 0000 	ldrhle.w	r0, [lr]
            else top_val = sh_ups_buf[(y - s_right) * size + x];
    c1ea:	f835 0016 	ldrhgt.w	r0, [r5, r6, lsl #1]
            v -= top_val;
    c1ee:	1a1b      	subs	r3, r3, r0
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
    c1f0:	4449      	add	r1, r9
    c1f2:	428c      	cmp	r4, r1
    c1f4:	bfcc      	ite	gt
    c1f6:	8829      	ldrhgt	r1, [r5, #0]
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
    c1f8:	f83c 101a 	ldrhle.w	r1, [ip, sl, lsl #1]
            v += bottom_val;
    c1fc:	440b      	add	r3, r1
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
    c1fe:	3201      	adds	r2, #1
    c200:	44be      	add	lr, r7
    c202:	443d      	add	r5, r7
    c204:	42a2      	cmp	r2, r4
    c206:	dbe3      	blt.n	c1d0 <shadow_blur_corner+0x150>
    c208:	f8dd c00c 	ldr.w	ip, [sp, #12]
    c20c:	9e04      	ldr	r6, [sp, #16]
    c20e:	2300      	movs	r3, #0
        }

        /*Write back the result into `sh_ups_buf`*/
        sh_ups_tmp_buf = &sh_ups_buf[x];
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
    c210:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
    c214:	8032      	strh	r2, [r6, #0]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
    c216:	3301      	adds	r3, #1
    c218:	443e      	add	r6, r7
    c21a:	42a3      	cmp	r3, r4
    c21c:	dbf8      	blt.n	c210 <shadow_blur_corner+0x190>
    for(x = 0; x < size; x++) {
    c21e:	f10a 0a01 	add.w	sl, sl, #1
    c222:	45a2      	cmp	sl, r4
    c224:	dbbd      	blt.n	c1a2 <shadow_blur_corner+0x122>
        }
    }

    _lv_mem_buf_release(sh_ups_blur_buf);
    c226:	9805      	ldr	r0, [sp, #20]
    c228:	4b0b      	ldr	r3, [pc, #44]	; (c258 <shadow_blur_corner+0x1d8>)
    c22a:	4798      	blx	r3
}
    c22c:	b00b      	add	sp, #44	; 0x2c
    c22e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    sh_ups_buf[0] = sh_ups_buf[0] / sw;
    c232:	f8cd 9004 	str.w	r9, [sp, #4]
    c236:	9a07      	ldr	r2, [sp, #28]
    c238:	8813      	ldrh	r3, [r2, #0]
    c23a:	fb93 f9f9 	sdiv	r9, r3, r9
    c23e:	f8a2 9000 	strh.w	r9, [r2]
    for(i = 1; i < (uint32_t)size * size; i++) {
    c242:	9b06      	ldr	r3, [sp, #24]
    c244:	fb03 f503 	mul.w	r5, r3, r3
    c248:	2d01      	cmp	r5, #1
    c24a:	d880      	bhi.n	c14e <shadow_blur_corner+0xce>
    c24c:	e7eb      	b.n	c226 <shadow_blur_corner+0x1a6>
    c24e:	bf00      	nop
    c250:	00012931 	.word	0x00012931
    c254:	00012649 	.word	0x00012649
    c258:	00012565 	.word	0x00012565

0000c25c <lv_draw_rect_dsc_init>:
{
    c25c:	b510      	push	{r4, lr}
    c25e:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
    c260:	2154      	movs	r1, #84	; 0x54
    c262:	4b2d      	ldr	r3, [pc, #180]	; (c318 <lv_draw_rect_dsc_init+0xbc>)
    c264:	4798      	blx	r3
    dsc->bg_color = LV_COLOR_WHITE;
    c266:	4b2d      	ldr	r3, [pc, #180]	; (c31c <lv_draw_rect_dsc_init+0xc0>)
    c268:	881b      	ldrh	r3, [r3, #0]
    c26a:	8063      	strh	r3, [r4, #2]
    dsc->bg_grad_color = LV_COLOR_BLACK;
    c26c:	7923      	ldrb	r3, [r4, #4]
    c26e:	f36f 0304 	bfc	r3, #0, #5
    c272:	7123      	strb	r3, [r4, #4]
    c274:	88a3      	ldrh	r3, [r4, #4]
    c276:	f36f 134a 	bfc	r3, #5, #6
    c27a:	80a3      	strh	r3, [r4, #4]
    c27c:	0a1b      	lsrs	r3, r3, #8
    c27e:	f36f 03c7 	bfc	r3, #3, #5
    c282:	7163      	strb	r3, [r4, #5]
    dsc->border_color = LV_COLOR_BLACK;
    c284:	7ba3      	ldrb	r3, [r4, #14]
    c286:	f36f 0304 	bfc	r3, #0, #5
    c28a:	73a3      	strb	r3, [r4, #14]
    c28c:	89e3      	ldrh	r3, [r4, #14]
    c28e:	f36f 134a 	bfc	r3, #5, #6
    c292:	81e3      	strh	r3, [r4, #14]
    c294:	0a1b      	lsrs	r3, r3, #8
    c296:	f36f 03c7 	bfc	r3, #3, #5
    c29a:	73e3      	strb	r3, [r4, #15]
    dsc->pattern_recolor = LV_COLOR_BLACK;
    c29c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    c2a0:	f36f 0304 	bfc	r3, #0, #5
    c2a4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    c2a8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    c2aa:	f36f 134a 	bfc	r3, #5, #6
    c2ae:	86a3      	strh	r3, [r4, #52]	; 0x34
    c2b0:	0a1b      	lsrs	r3, r3, #8
    c2b2:	f36f 03c7 	bfc	r3, #3, #5
    c2b6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    dsc->value_color = LV_COLOR_BLACK;
    c2ba:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
    c2be:	f36f 0304 	bfc	r3, #0, #5
    c2c2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
    c2c6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
    c2ca:	f36f 134a 	bfc	r3, #5, #6
    c2ce:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    c2d2:	0a1b      	lsrs	r3, r3, #8
    c2d4:	f36f 03c7 	bfc	r3, #3, #5
    c2d8:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
    dsc->shadow_color = LV_COLOR_BLACK;
    c2dc:	7fa3      	ldrb	r3, [r4, #30]
    c2de:	f36f 0304 	bfc	r3, #0, #5
    c2e2:	77a3      	strb	r3, [r4, #30]
    c2e4:	8be3      	ldrh	r3, [r4, #30]
    c2e6:	f36f 134a 	bfc	r3, #5, #6
    c2ea:	83e3      	strh	r3, [r4, #30]
    c2ec:	0a1b      	lsrs	r3, r3, #8
    c2ee:	f36f 03c7 	bfc	r3, #3, #5
    c2f2:	77e3      	strb	r3, [r4, #31]
    dsc->bg_grad_color_stop = 0xFF;
    c2f4:	23ff      	movs	r3, #255	; 0xff
    c2f6:	8163      	strh	r3, [r4, #10]
    dsc->bg_opa = LV_OPA_COVER;
    c2f8:	7323      	strb	r3, [r4, #12]
    dsc->outline_opa = LV_OPA_COVER;
    c2fa:	7723      	strb	r3, [r4, #28]
    dsc->border_opa = LV_OPA_COVER;
    c2fc:	7523      	strb	r3, [r4, #20]
    dsc->pattern_opa = LV_OPA_COVER;
    c2fe:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    dsc->pattern_font = LV_THEME_DEFAULT_FONT_NORMAL;
    c302:	4a07      	ldr	r2, [pc, #28]	; (c320 <lv_draw_rect_dsc_init+0xc4>)
    c304:	6322      	str	r2, [r4, #48]	; 0x30
    dsc->value_opa = LV_OPA_COVER;
    c306:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    dsc->value_font = LV_THEME_DEFAULT_FONT_NORMAL;
    c30a:	6422      	str	r2, [r4, #64]	; 0x40
    dsc->shadow_opa = LV_OPA_COVER;
    c30c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    dsc->border_side = LV_BORDER_SIDE_FULL;
    c310:	230f      	movs	r3, #15
    c312:	8263      	strh	r3, [r4, #18]
    c314:	bd10      	pop	{r4, pc}
    c316:	bf00      	nop
    c318:	00012b2b 	.word	0x00012b2b
    c31c:	00025070 	.word	0x00025070
    c320:	20000010 	.word	0x20000010

0000c324 <lv_draw_rect>:
{
    c324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c328:	b0b1      	sub	sp, #196	; 0xc4
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    c32a:	88c4      	ldrh	r4, [r0, #6]
    c32c:	8845      	ldrh	r5, [r0, #2]
    c32e:	1c63      	adds	r3, r4, #1
    c330:	1b5b      	subs	r3, r3, r5
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
    c332:	b21b      	sxth	r3, r3
    c334:	2b00      	cmp	r3, #0
    c336:	f341 800f 	ble.w	d358 <lv_draw_rect+0x1034>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    c33a:	8886      	ldrh	r6, [r0, #4]
    c33c:	f8b0 8000 	ldrh.w	r8, [r0]
    c340:	1c73      	adds	r3, r6, #1
    c342:	eba3 0308 	sub.w	r3, r3, r8
    c346:	b21b      	sxth	r3, r3
    c348:	2b00      	cmp	r3, #0
    c34a:	f341 8005 	ble.w	d358 <lv_draw_rect+0x1034>
    c34e:	4692      	mov	sl, r2
    c350:	9104      	str	r1, [sp, #16]
    c352:	9006      	str	r0, [sp, #24]
    if(dsc->shadow_width == 0) return;
    c354:	f9b2 7020 	ldrsh.w	r7, [r2, #32]
    c358:	2f00      	cmp	r7, #0
    c35a:	f000 8719 	beq.w	d190 <lv_draw_rect+0xe6c>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
    c35e:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    c362:	9309      	str	r3, [sp, #36]	; 0x24
    c364:	2b05      	cmp	r3, #5
    c366:	f240 8713 	bls.w	d190 <lv_draw_rect+0xe6c>
    if(dsc->shadow_width == 1 && dsc->shadow_ofs_x == 0 &&
    c36a:	6a13      	ldr	r3, [r2, #32]
    c36c:	2b01      	cmp	r3, #1
    c36e:	f000 80f6 	beq.w	c55e <lv_draw_rect+0x23a>
    sh_rect_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
    c372:	f8ba 2022 	ldrh.w	r2, [sl, #34]	; 0x22
    c376:	f8ba 3026 	ldrh.w	r3, [sl, #38]	; 0x26
    c37a:	1ad1      	subs	r1, r2, r3
    c37c:	4488      	add	r8, r1
    c37e:	fa1f f888 	uxth.w	r8, r8
    c382:	f8ad 8050 	strh.w	r8, [sp, #80]	; 0x50
    sh_rect_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
    c386:	441a      	add	r2, r3
    c388:	4416      	add	r6, r2
    c38a:	b2b6      	uxth	r6, r6
    c38c:	f8ad 6054 	strh.w	r6, [sp, #84]	; 0x54
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
    c390:	f8ba 2024 	ldrh.w	r2, [sl, #36]	; 0x24
    c394:	1ad1      	subs	r1, r2, r3
    c396:	440d      	add	r5, r1
    c398:	b2ad      	uxth	r5, r5
    c39a:	f8ad 5052 	strh.w	r5, [sp, #82]	; 0x52
    sh_rect_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
    c39e:	4413      	add	r3, r2
    c3a0:	441c      	add	r4, r3
    c3a2:	b2a4      	uxth	r4, r4
    c3a4:	f8ad 4056 	strh.w	r4, [sp, #86]	; 0x56
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
    c3a8:	eb07 73d7 	add.w	r3, r7, r7, lsr #31
    c3ac:	ea6f 0263 	mvn.w	r2, r3, asr #1
    c3b0:	b292      	uxth	r2, r2
    c3b2:	eb08 0102 	add.w	r1, r8, r2
    c3b6:	f8ad 1058 	strh.w	r1, [sp, #88]	; 0x58
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
    c3ba:	105b      	asrs	r3, r3, #1
    c3bc:	3301      	adds	r3, #1
    c3be:	b29b      	uxth	r3, r3
    c3c0:	18f1      	adds	r1, r6, r3
    c3c2:	f8ad 105c 	strh.w	r1, [sp, #92]	; 0x5c
    sh_area.y1 = sh_rect_area.y1 - sw / 2 - 1;
    c3c6:	442a      	add	r2, r5
    c3c8:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    sh_area.y2 = sh_rect_area.y2 + sw / 2 + 1;
    c3cc:	4423      	add	r3, r4
    c3ce:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
    c3d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c3d4:	2bfb      	cmp	r3, #251	; 0xfb
    c3d6:	bf28      	it	cs
    c3d8:	23ff      	movcs	r3, #255	; 0xff
    c3da:	9309      	str	r3, [sp, #36]	; 0x24
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    c3dc:	4bbe      	ldr	r3, [pc, #760]	; (c6d8 <lv_draw_rect+0x3b4>)
    c3de:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    c3e0:	4bbe      	ldr	r3, [pc, #760]	; (c6dc <lv_draw_rect+0x3b8>)
    c3e2:	4798      	blx	r3
    c3e4:	4681      	mov	r9, r0
    is_common = _lv_area_intersect(&draw_area, &sh_area, clip);
    c3e6:	9a04      	ldr	r2, [sp, #16]
    c3e8:	a916      	add	r1, sp, #88	; 0x58
    c3ea:	a818      	add	r0, sp, #96	; 0x60
    c3ec:	4bbc      	ldr	r3, [pc, #752]	; (c6e0 <lv_draw_rect+0x3bc>)
    c3ee:	4798      	blx	r3
    if(is_common == false) return;
    c3f0:	2800      	cmp	r0, #0
    c3f2:	f000 86cd 	beq.w	d190 <lv_draw_rect+0xe6c>
    draw_area.x1 -= disp_area->x1;
    c3f6:	f8b9 1010 	ldrh.w	r1, [r9, #16]
    c3fa:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    c3fe:	1a5b      	subs	r3, r3, r1
    c400:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    draw_area.y1 -= disp_area->y1;
    c404:	f8b9 2012 	ldrh.w	r2, [r9, #18]
    c408:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
    c40c:	1a9b      	subs	r3, r3, r2
    c40e:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
    draw_area.x2 -= disp_area->x1;
    c412:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
    c416:	1a5b      	subs	r3, r3, r1
    c418:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    draw_area.y2 -= disp_area->y1;
    c41c:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
    c420:	1a9b      	subs	r3, r3, r2
    c422:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    c426:	9a06      	ldr	r2, [sp, #24]
    c428:	1e53      	subs	r3, r2, #1
    c42a:	1dd0      	adds	r0, r2, #7
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    c42c:	aa1a      	add	r2, sp, #104	; 0x68
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
    c42e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    c432:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    c436:	4298      	cmp	r0, r3
    c438:	d1f9      	bne.n	c42e <lv_draw_rect+0x10a>
    bg_coords.x1 += 1;
    c43a:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    c43e:	3301      	adds	r3, #1
    c440:	fa1f fe83 	uxth.w	lr, r3
    c444:	f8ad e068 	strh.w	lr, [sp, #104]	; 0x68
    bg_coords.y1 += 1;
    c448:	f8bd 106a 	ldrh.w	r1, [sp, #106]	; 0x6a
    c44c:	3101      	adds	r1, #1
    c44e:	b288      	uxth	r0, r1
    c450:	f8ad 006a 	strh.w	r0, [sp, #106]	; 0x6a
    bg_coords.x2 -= 1;
    c454:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
    c458:	1e5a      	subs	r2, r3, #1
    c45a:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
    bg_coords.y2 -= 1;
    c45e:	f8bd 106e 	ldrh.w	r1, [sp, #110]	; 0x6e
    c462:	1e4a      	subs	r2, r1, #1
    c464:	f8ad 206e 	strh.w	r2, [sp, #110]	; 0x6e
    int32_t r_bg = dsc->radius;
    c468:	f9ba 2000 	ldrsh.w	r2, [sl]
    c46c:	eba3 030e 	sub.w	r3, r3, lr
    c470:	b21b      	sxth	r3, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    c472:	1a09      	subs	r1, r1, r0
    c474:	b209      	sxth	r1, r1
    int32_t short_side = LV_MATH_MIN(lv_area_get_width(&bg_coords), lv_area_get_height(&bg_coords));
    c476:	428b      	cmp	r3, r1
    c478:	bfa8      	it	ge
    c47a:	460b      	movge	r3, r1
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
    c47c:	105b      	asrs	r3, r3, #1
    c47e:	4293      	cmp	r3, r2
    c480:	bfa8      	it	ge
    c482:	4613      	movge	r3, r2
    c484:	930e      	str	r3, [sp, #56]	; 0x38
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    c486:	3601      	adds	r6, #1
    c488:	eba6 0608 	sub.w	r6, r6, r8
    c48c:	b2b6      	uxth	r6, r6
    c48e:	b233      	sxth	r3, r6
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    c490:	3401      	adds	r4, #1
    c492:	1b64      	subs	r4, r4, r5
    c494:	b2a4      	uxth	r4, r4
    c496:	b225      	sxth	r5, r4
    short_side = LV_MATH_MIN(lv_area_get_width(&sh_rect_area), lv_area_get_height(&sh_rect_area));
    c498:	429d      	cmp	r5, r3
    c49a:	bfa8      	it	ge
    c49c:	461d      	movge	r5, r3
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
    c49e:	106d      	asrs	r5, r5, #1
    c4a0:	4295      	cmp	r5, r2
    c4a2:	bfa8      	it	ge
    c4a4:	4615      	movge	r5, r2
    int32_t corner_size = sw  + r_sh;
    c4a6:	eb07 0905 	add.w	r9, r7, r5
    sh_buf = _lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
    c4aa:	fb09 f009 	mul.w	r0, r9, r9
    c4ae:	0040      	lsls	r0, r0, #1
    c4b0:	4b8c      	ldr	r3, [pc, #560]	; (c6e4 <lv_draw_rect+0x3c0>)
    c4b2:	4798      	blx	r3
    c4b4:	900a      	str	r0, [sp, #40]	; 0x28
    shadow_draw_corner_buf(&sh_rect_area, (uint16_t *)sh_buf, dsc->shadow_width, r_sh);
    c4b6:	f9ba b020 	ldrsh.w	fp, [sl, #32]
    c4ba:	b22a      	sxth	r2, r5
    int32_t size = sw_ori  + r;
    c4bc:	eb02 070b 	add.w	r7, r2, fp
    c4c0:	f10d 014f 	add.w	r1, sp, #79	; 0x4f
    uint8_t * d8 = (uint8_t *)dst;
    c4c4:	ab22      	add	r3, sp, #136	; 0x88
    while(len) {
    c4c6:	f10d 0e90 	add.w	lr, sp, #144	; 0x90
        *d8 = *s8;
    c4ca:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    c4ce:	f803 0b01 	strb.w	r0, [r3], #1
    while(len) {
    c4d2:	4573      	cmp	r3, lr
    c4d4:	d1f9      	bne.n	c4ca <lv_draw_rect+0x1a6>
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
    c4d6:	eb0b 71db 	add.w	r1, fp, fp, lsr #31
    c4da:	f3c1 014f 	ubfx	r1, r1, #1, #16
    c4de:	1e4b      	subs	r3, r1, #1
    c4e0:	f01b 0001 	ands.w	r0, fp, #1
    c4e4:	9010      	str	r0, [sp, #64]	; 0x40
    c4e6:	bf0c      	ite	eq
    c4e8:	2001      	moveq	r0, #1
    c4ea:	2000      	movne	r0, #0
    c4ec:	1a1b      	subs	r3, r3, r0
    c4ee:	442b      	add	r3, r5
    c4f0:	b29b      	uxth	r3, r3
    c4f2:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
    sh_area.y1 = sw / 2 + 1;
    c4f6:	3101      	adds	r1, #1
    c4f8:	b289      	uxth	r1, r1
    c4fa:	f8ad 108a 	strh.w	r1, [sp, #138]	; 0x8a
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
    c4fe:	1b9b      	subs	r3, r3, r6
    c500:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
    c504:	4421      	add	r1, r4
    c506:	f8ad 108e 	strh.w	r1, [sp, #142]	; 0x8e
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
    c50a:	2300      	movs	r3, #0
    c50c:	a922      	add	r1, sp, #136	; 0x88
    c50e:	a829      	add	r0, sp, #164	; 0xa4
    c510:	4c75      	ldr	r4, [pc, #468]	; (c6e8 <lv_draw_rect+0x3c4>)
    c512:	47a0      	blx	r4
    if(sw_ori == 1) sw = 1;
    c514:	f1bb 0f01 	cmp.w	fp, #1
    c518:	f002 81d8 	beq.w	e8cc <lv_draw_rect+0x25a8>
    c51c:	ea4f 036b 	mov.w	r3, fp, asr #1
    c520:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_opa_t * mask_line = _lv_mem_buf_get(size);
    c522:	9707      	str	r7, [sp, #28]
    c524:	4638      	mov	r0, r7
    c526:	4b6f      	ldr	r3, [pc, #444]	; (c6e4 <lv_draw_rect+0x3c0>)
    c528:	4798      	blx	r3
    c52a:	900c      	str	r0, [sp, #48]	; 0x30
    for(y = 0; y < size; y++) {
    c52c:	2f00      	cmp	r7, #0
    c52e:	dd5c      	ble.n	c5ea <lv_draw_rect+0x2c6>
            _lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
    c530:	9b07      	ldr	r3, [sp, #28]
    c532:	ea4f 0b43 	mov.w	fp, r3, lsl #1
    c536:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
    c53a:	3b01      	subs	r3, #1
    c53c:	005b      	lsls	r3, r3, #1
    c53e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    c540:	2500      	movs	r5, #0
        _lv_memset_ff(mask_line, size);
    c542:	f8df 81b8 	ldr.w	r8, [pc, #440]	; c6fc <lv_draw_rect+0x3d8>
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
    c546:	b23a      	sxth	r2, r7
    c548:	9208      	str	r2, [sp, #32]
            _lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
    c54a:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
    c54e:	9705      	str	r7, [sp, #20]
    c550:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    c552:	4699      	mov	r9, r3
    c554:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
    c558:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
    c55c:	e014      	b.n	c588 <lv_draw_rect+0x264>
    if(dsc->shadow_width == 1 && dsc->shadow_ofs_x == 0 &&
    c55e:	f9b2 3024 	ldrsh.w	r3, [r2, #36]	; 0x24
    c562:	2b00      	cmp	r3, #0
    c564:	f47f af05 	bne.w	c372 <lv_draw_rect+0x4e>
       dsc->shadow_ofs_y == 0 && dsc->shadow_spread <= 0) {
    c568:	f9b2 3026 	ldrsh.w	r3, [r2, #38]	; 0x26
    c56c:	2b00      	cmp	r3, #0
    c56e:	f73f af00 	bgt.w	c372 <lv_draw_rect+0x4e>
    c572:	f000 be0d 	b.w	d190 <lv_draw_rect+0xe6c>
            _lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
    c576:	4659      	mov	r1, fp
    c578:	4620      	mov	r0, r4
    c57a:	4b5c      	ldr	r3, [pc, #368]	; (c6ec <lv_draw_rect+0x3c8>)
    c57c:	4798      	blx	r3
        sh_ups_tmp_buf += size;
    c57e:	445c      	add	r4, fp
    for(y = 0; y < size; y++) {
    c580:	3501      	adds	r5, #1
    c582:	9b05      	ldr	r3, [sp, #20]
    c584:	42ab      	cmp	r3, r5
    c586:	dd2b      	ble.n	c5e0 <lv_draw_rect+0x2bc>
        _lv_memset_ff(mask_line, size);
    c588:	9907      	ldr	r1, [sp, #28]
    c58a:	4630      	mov	r0, r6
    c58c:	47c0      	blx	r8
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
    c58e:	ab29      	add	r3, sp, #164	; 0xa4
    c590:	9300      	str	r3, [sp, #0]
    c592:	9b08      	ldr	r3, [sp, #32]
    c594:	b22a      	sxth	r2, r5
    c596:	2100      	movs	r1, #0
    c598:	4630      	mov	r0, r6
    c59a:	9f29      	ldr	r7, [sp, #164]	; 0xa4
    c59c:	47b8      	blx	r7
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
    c59e:	2800      	cmp	r0, #0
    c5a0:	d0e9      	beq.n	c576 <lv_draw_rect+0x252>
            sh_ups_tmp_buf[0] = (mask_line[0] << SHADOW_UPSACALE_SHIFT) / sw;
    c5a2:	46d6      	mov	lr, sl
    c5a4:	7833      	ldrb	r3, [r6, #0]
    c5a6:	019b      	lsls	r3, r3, #6
    c5a8:	fb93 f3fa 	sdiv	r3, r3, sl
    c5ac:	8023      	strh	r3, [r4, #0]
            for(i = 1; i < size; i++) {
    c5ae:	9b05      	ldr	r3, [sp, #20]
    c5b0:	2b01      	cmp	r3, #1
    c5b2:	dde4      	ble.n	c57e <lv_draw_rect+0x25a>
    c5b4:	4631      	mov	r1, r6
    c5b6:	4622      	mov	r2, r4
    c5b8:	eb04 0009 	add.w	r0, r4, r9
    c5bc:	461f      	mov	r7, r3
    c5be:	468c      	mov	ip, r1
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
    c5c0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    c5c4:	f89c c000 	ldrb.w	ip, [ip]
    c5c8:	459c      	cmp	ip, r3
    c5ca:	bf0e      	itee	eq
    c5cc:	8813      	ldrheq	r3, [r2, #0]
                else  sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSACALE_SHIFT) / sw;
    c5ce:	019b      	lslne	r3, r3, #6
    c5d0:	fb93 f3fe 	sdivne	r3, r3, lr
    c5d4:	8053      	strh	r3, [r2, #2]
    c5d6:	3202      	adds	r2, #2
            for(i = 1; i < size; i++) {
    c5d8:	4290      	cmp	r0, r2
    c5da:	d1f0      	bne.n	c5be <lv_draw_rect+0x29a>
    c5dc:	9705      	str	r7, [sp, #20]
    c5de:	e7ce      	b.n	c57e <lv_draw_rect+0x25a>
    c5e0:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    c5e4:	461f      	mov	r7, r3
    c5e6:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    _lv_mem_buf_release(mask_line);
    c5ea:	980c      	ldr	r0, [sp, #48]	; 0x30
    c5ec:	4b40      	ldr	r3, [pc, #256]	; (c6f0 <lv_draw_rect+0x3cc>)
    c5ee:	4798      	blx	r3
    if(sw == 1) {
    c5f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c5f2:	2b01      	cmp	r3, #1
    c5f4:	f002 814d 	beq.w	e892 <lv_draw_rect+0x256e>
    shadow_blur_corner(size, sw, sh_buf);
    c5f8:	b23c      	sxth	r4, r7
    c5fa:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    c5fc:	4632      	mov	r2, r6
    c5fe:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    c600:	4629      	mov	r1, r5
    c602:	4620      	mov	r0, r4
    c604:	4b3b      	ldr	r3, [pc, #236]	; (c6f4 <lv_draw_rect+0x3d0>)
    c606:	4798      	blx	r3
    sw += sw_ori & 1;
    c608:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c60a:	442a      	add	r2, r5
    c60c:	b211      	sxth	r1, r2
    if(sw > 1) {
    c60e:	2901      	cmp	r1, #1
    c610:	dd22      	ble.n	c658 <lv_draw_rect+0x334>
        sh_buf[0] = (sh_buf[0] << SHADOW_UPSACALE_SHIFT) / sw;
    c612:	460d      	mov	r5, r1
    c614:	8833      	ldrh	r3, [r6, #0]
    c616:	019b      	lsls	r3, r3, #6
    c618:	fb93 f3f1 	sdiv	r3, r3, r1
    c61c:	4632      	mov	r2, r6
    c61e:	8033      	strh	r3, [r6, #0]
        for(i = 1; i < (uint32_t) size * size; i++) {
    c620:	9807      	ldr	r0, [sp, #28]
    c622:	fb00 f000 	mul.w	r0, r0, r0
    c626:	2801      	cmp	r0, #1
    c628:	d912      	bls.n	c650 <lv_draw_rect+0x32c>
    c62a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    c62e:	3801      	subs	r0, #1
    c630:	eb06 0040 	add.w	r0, r6, r0, lsl #1
    c634:	e001      	b.n	c63a <lv_draw_rect+0x316>
    c636:	4282      	cmp	r2, r0
    c638:	d00a      	beq.n	c650 <lv_draw_rect+0x32c>
    c63a:	4616      	mov	r6, r2
            if(sh_buf[i] == sh_buf[i - 1]) sh_buf[i] = sh_buf[i - 1];
    c63c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
    c640:	8836      	ldrh	r6, [r6, #0]
    c642:	429e      	cmp	r6, r3
    c644:	d0f7      	beq.n	c636 <lv_draw_rect+0x312>
            else  sh_buf[i] = (sh_buf[i] << SHADOW_UPSACALE_SHIFT) / sw;
    c646:	019b      	lsls	r3, r3, #6
    c648:	fb93 f3f5 	sdiv	r3, r3, r5
    c64c:	8013      	strh	r3, [r2, #0]
    c64e:	e7f2      	b.n	c636 <lv_draw_rect+0x312>
        shadow_blur_corner(size, sw, sh_buf);
    c650:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c652:	4620      	mov	r0, r4
    c654:	4b27      	ldr	r3, [pc, #156]	; (c6f4 <lv_draw_rect+0x3d0>)
    c656:	4798      	blx	r3
    for(x = 0; x < size * size; x++) {
    c658:	fb07 f707 	mul.w	r7, r7, r7
    c65c:	b157      	cbz	r7, c674 <lv_draw_rect+0x350>
    c65e:	990a      	ldr	r1, [sp, #40]	; 0x28
    c660:	460b      	mov	r3, r1
    c662:	1e4a      	subs	r2, r1, #1
    c664:	eb01 0047 	add.w	r0, r1, r7, lsl #1
        res_buf[x] = sh_buf[x];
    c668:	f833 1b02 	ldrh.w	r1, [r3], #2
    c66c:	f802 1f01 	strb.w	r1, [r2, #1]!
    for(x = 0; x < size * size; x++) {
    c670:	4283      	cmp	r3, r0
    c672:	d1f9      	bne.n	c668 <lv_draw_rect+0x344>
    lv_coord_t h_half = sh_area.y1 + lv_area_get_height(&sh_area) / 2;
    c674:	f8bd 205a 	ldrh.w	r2, [sp, #90]	; 0x5a
    c678:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
    c67c:	3301      	adds	r3, #1
    c67e:	1a9b      	subs	r3, r3, r2
    c680:	b21b      	sxth	r3, r3
    c682:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    c686:	eb02 0363 	add.w	r3, r2, r3, asr #1
    c68a:	b29b      	uxth	r3, r3
    c68c:	930f      	str	r3, [sp, #60]	; 0x3c
    c68e:	b21b      	sxth	r3, r3
    c690:	930c      	str	r3, [sp, #48]	; 0x30
    lv_coord_t w_half = sh_area.x1 + lv_area_get_width(&sh_area) / 2;
    c692:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    c696:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
    c69a:	3301      	adds	r3, #1
    c69c:	1a9b      	subs	r3, r3, r2
    c69e:	b21b      	sxth	r3, r3
    c6a0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    c6a4:	eb02 0363 	add.w	r3, r2, r3, asr #1
    c6a8:	b29b      	uxth	r3, r3
    c6aa:	9310      	str	r3, [sp, #64]	; 0x40
    c6ac:	b21b      	sxth	r3, r3
    c6ae:	930d      	str	r3, [sp, #52]	; 0x34
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
    c6b0:	4b11      	ldr	r3, [pc, #68]	; (c6f8 <lv_draw_rect+0x3d4>)
    c6b2:	4798      	blx	r3
    c6b4:	bb20      	cbnz	r0, c700 <lv_draw_rect+0x3dc>
    else if(dsc->shadow_ofs_x != 0 || dsc->shadow_ofs_y != 0) simple_mode = false;
    c6b6:	f9ba 3022 	ldrsh.w	r3, [sl, #34]	; 0x22
    c6ba:	2b00      	cmp	r3, #0
    c6bc:	f040 81bc 	bne.w	ca38 <lv_draw_rect+0x714>
    c6c0:	f9ba 3024 	ldrsh.w	r3, [sl, #36]	; 0x24
    c6c4:	2b00      	cmp	r3, #0
    c6c6:	f040 81ba 	bne.w	ca3e <lv_draw_rect+0x71a>
    else if(dsc->shadow_spread != 0) simple_mode = false;
    c6ca:	f9ba 3026 	ldrsh.w	r3, [sl, #38]	; 0x26
    c6ce:	fab3 f383 	clz	r3, r3
    c6d2:	095b      	lsrs	r3, r3, #5
    c6d4:	9307      	str	r3, [sp, #28]
    c6d6:	e015      	b.n	c704 <lv_draw_rect+0x3e0>
    c6d8:	00005f5d 	.word	0x00005f5d
    c6dc:	00010fd1 	.word	0x00010fd1
    c6e0:	0001150d 	.word	0x0001150d
    c6e4:	00012931 	.word	0x00012931
    c6e8:	0000c021 	.word	0x0000c021
    c6ec:	00012b2b 	.word	0x00012b2b
    c6f0:	00012565 	.word	0x00012565
    c6f4:	0000c081 	.word	0x0000c081
    c6f8:	0000beb9 	.word	0x0000beb9
    c6fc:	00012be1 	.word	0x00012be1
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
    c700:	2300      	movs	r3, #0
    c702:	9307      	str	r3, [sp, #28]
    c704:	f8bd 005c 	ldrh.w	r0, [sp, #92]	; 0x5c
    c708:	3001      	adds	r0, #1
    c70a:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
    c70e:	1ac0      	subs	r0, r0, r3
    lv_opa_t * mask_buf = _lv_mem_buf_get(lv_area_get_width(&sh_area));
    c710:	b200      	sxth	r0, r0
    c712:	4bc2      	ldr	r3, [pc, #776]	; (ca1c <lv_draw_rect+0x6f8>)
    c714:	4798      	blx	r3
    c716:	9005      	str	r0, [sp, #20]
    lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, r_bg, true);
    c718:	2301      	movs	r3, #1
    c71a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c71c:	a91a      	add	r1, sp, #104	; 0x68
    c71e:	a829      	add	r0, sp, #164	; 0xa4
    c720:	4cbf      	ldr	r4, [pc, #764]	; (ca20 <lv_draw_rect+0x6fc>)
    c722:	47a0      	blx	r4
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
    c724:	2100      	movs	r1, #0
    c726:	a829      	add	r0, sp, #164	; 0xa4
    c728:	4bbe      	ldr	r3, [pc, #760]	; (ca24 <lv_draw_rect+0x700>)
    c72a:	4798      	blx	r3
    c72c:	900e      	str	r0, [sp, #56]	; 0x38
    a.x2 = sh_area.x2;
    c72e:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
    c732:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    a.x1 = a.x2 - corner_size + 1;
    c736:	fa1f fb89 	uxth.w	fp, r9
    c73a:	3301      	adds	r3, #1
    c73c:	eba3 030b 	sub.w	r3, r3, fp
    c740:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    a.y1 = sh_area.y1;
    c744:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
    c748:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    a.y2 = a.y1 + corner_size - 1;
    c74c:	3b01      	subs	r3, #1
    c74e:	445b      	add	r3, fp
    c750:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
    bool has_com = _lv_area_intersect(&ca, &a, clip);
    c754:	9a04      	ldr	r2, [sp, #16]
    c756:	a91c      	add	r1, sp, #112	; 0x70
    c758:	a81e      	add	r0, sp, #120	; 0x78
    c75a:	4bb3      	ldr	r3, [pc, #716]	; (ca28 <lv_draw_rect+0x704>)
    c75c:	4798      	blx	r3
    if(has_com) {
    c75e:	2800      	cmp	r0, #0
    c760:	d072      	beq.n	c848 <lv_draw_rect+0x524>
        if(ca.y2 > h_half) ca.y2 = h_half;
    c762:	f9bd 307e 	ldrsh.w	r3, [sp, #126]	; 0x7e
    c766:	990c      	ldr	r1, [sp, #48]	; 0x30
    c768:	428b      	cmp	r3, r1
    c76a:	bfc4      	itt	gt
    c76c:	460b      	movgt	r3, r1
    c76e:	f8ad 307e 	strhgt.w	r3, [sp, #126]	; 0x7e
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
    c772:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
    c776:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c778:	4293      	cmp	r3, r2
    c77a:	dc03      	bgt.n	c784 <lv_draw_rect+0x460>
    c77c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c77e:	3301      	adds	r3, #1
    c780:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    c784:	f9bd 2078 	ldrsh.w	r2, [sp, #120]	; 0x78
    c788:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
    c78c:	3301      	adds	r3, #1
    c78e:	1a9b      	subs	r3, r3, r2
    c790:	b21b      	sxth	r3, r3
    c792:	9308      	str	r3, [sp, #32]
        if(w > 0) {
    c794:	2b00      	cmp	r3, #0
    c796:	dd57      	ble.n	c848 <lv_draw_rect+0x524>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    c798:	f9bd 707e 	ldrsh.w	r7, [sp, #126]	; 0x7e
    c79c:	f9bd 407a 	ldrsh.w	r4, [sp, #122]	; 0x7a
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
    c7a0:	f9bd 5072 	ldrsh.w	r5, [sp, #114]	; 0x72
    c7a4:	1b65      	subs	r5, r4, r5
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
    c7a6:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
    c7aa:	1ad2      	subs	r2, r2, r3
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
    c7ac:	fb09 2505 	mla	r5, r9, r5, r2
    c7b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c7b2:	441d      	add	r5, r3
    c7b4:	f10d 0277 	add.w	r2, sp, #119	; 0x77
    uint8_t * d8 = (uint8_t *)dst;
    c7b8:	ab22      	add	r3, sp, #136	; 0x88
    while(len) {
    c7ba:	a824      	add	r0, sp, #144	; 0x90
        *d8 = *s8;
    c7bc:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    c7c0:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    c7c4:	4283      	cmp	r3, r0
    c7c6:	d1f9      	bne.n	c7bc <lv_draw_rect+0x498>
            fa.y2 = fa.y1;
    c7c8:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    c7cc:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    c7d0:	3701      	adds	r7, #1
    c7d2:	1b3f      	subs	r7, r7, r4
            for(y = 0; y < h; y++) {
    c7d4:	b23f      	sxth	r7, r7
    c7d6:	2f00      	cmp	r7, #0
    c7d8:	dd36      	ble.n	c848 <lv_draw_rect+0x524>
    c7da:	2600      	movs	r6, #0
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    c7dc:	f8df 8254 	ldr.w	r8, [pc, #596]	; ca34 <lv_draw_rect+0x710>
    c7e0:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
    c7e4:	46bb      	mov	fp, r7
    c7e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c7e8:	930b      	str	r3, [sp, #44]	; 0x2c
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
    c7ea:	9a08      	ldr	r2, [sp, #32]
    c7ec:	4629      	mov	r1, r5
    c7ee:	9f05      	ldr	r7, [sp, #20]
    c7f0:	4638      	mov	r0, r7
    c7f2:	4c8e      	ldr	r4, [pc, #568]	; (ca2c <lv_draw_rect+0x708>)
    c7f4:	47a0      	blx	r4
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    c7f6:	ac30      	add	r4, sp, #192	; 0xc0
    c7f8:	9b08      	ldr	r3, [sp, #32]
    c7fa:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
    c7fe:	f934 1d38 	ldrsh.w	r1, [r4, #-56]!
    c802:	9705      	str	r7, [sp, #20]
    c804:	4638      	mov	r0, r7
    c806:	4f8a      	ldr	r7, [pc, #552]	; (ca30 <lv_draw_rect+0x70c>)
    c808:	47b8      	blx	r7
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    c80a:	2801      	cmp	r0, #1
    c80c:	bf08      	it	eq
    c80e:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    c810:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    c814:	9302      	str	r3, [sp, #8]
    c816:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c818:	9201      	str	r2, [sp, #4]
    c81a:	9000      	str	r0, [sp, #0]
    c81c:	9b05      	ldr	r3, [sp, #20]
    c81e:	f8ba 201e 	ldrh.w	r2, [sl, #30]
    c822:	4621      	mov	r1, r4
    c824:	9804      	ldr	r0, [sp, #16]
    c826:	47c0      	blx	r8
                fa.y1++;
    c828:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    c82c:	3301      	adds	r3, #1
    c82e:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
                fa.y2++;
    c832:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    c836:	3301      	adds	r3, #1
    c838:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    c83c:	444d      	add	r5, r9
            for(y = 0; y < h; y++) {
    c83e:	3601      	adds	r6, #1
    c840:	455e      	cmp	r6, fp
    c842:	d1d2      	bne.n	c7ea <lv_draw_rect+0x4c6>
    c844:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
    a.x2 = sh_area.x2;
    c848:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
    c84c:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    a.x1 = a.x2 - corner_size + 1;
    c850:	3301      	adds	r3, #1
    c852:	eba3 030b 	sub.w	r3, r3, fp
    c856:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    a.y1 = sh_area.y2 - corner_size + 1;
    c85a:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
    c85e:	1c53      	adds	r3, r2, #1
    c860:	eba3 030b 	sub.w	r3, r3, fp
    c864:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    a.y2 = sh_area.y2;
    c868:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
    has_com = _lv_area_intersect(&ca, &a, clip);
    c86c:	9a04      	ldr	r2, [sp, #16]
    c86e:	a91c      	add	r1, sp, #112	; 0x70
    c870:	a81e      	add	r0, sp, #120	; 0x78
    c872:	4b6d      	ldr	r3, [pc, #436]	; (ca28 <lv_draw_rect+0x704>)
    c874:	4798      	blx	r3
    if(has_com) {
    c876:	2800      	cmp	r0, #0
    c878:	d073      	beq.n	c962 <lv_draw_rect+0x63e>
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
    c87a:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
    c87e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c880:	4293      	cmp	r3, r2
    c882:	dc03      	bgt.n	c88c <lv_draw_rect+0x568>
    c884:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c886:	3301      	adds	r3, #1
    c888:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
    c88c:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
    c890:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c892:	4293      	cmp	r3, r2
    c894:	dc03      	bgt.n	c89e <lv_draw_rect+0x57a>
    c896:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c898:	3301      	adds	r3, #1
    c89a:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    c89e:	f9bd 2078 	ldrsh.w	r2, [sp, #120]	; 0x78
    c8a2:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
    c8a6:	3301      	adds	r3, #1
    c8a8:	1a9b      	subs	r3, r3, r2
    c8aa:	b21b      	sxth	r3, r3
    c8ac:	9308      	str	r3, [sp, #32]
        if(w > 0) {
    c8ae:	2b00      	cmp	r3, #0
    c8b0:	dd57      	ble.n	c962 <lv_draw_rect+0x63e>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    c8b2:	f9bd 407e 	ldrsh.w	r4, [sp, #126]	; 0x7e
    c8b6:	f9bd 607a 	ldrsh.w	r6, [sp, #122]	; 0x7a
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
    c8ba:	f9bd 5076 	ldrsh.w	r5, [sp, #118]	; 0x76
    c8be:	1b2d      	subs	r5, r5, r4
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
    c8c0:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
    c8c4:	1ad2      	subs	r2, r2, r3
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
    c8c6:	fb09 2505 	mla	r5, r9, r5, r2
    c8ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c8cc:	441d      	add	r5, r3
    c8ce:	f10d 0277 	add.w	r2, sp, #119	; 0x77
    uint8_t * d8 = (uint8_t *)dst;
    c8d2:	ab22      	add	r3, sp, #136	; 0x88
    while(len) {
    c8d4:	a824      	add	r0, sp, #144	; 0x90
        *d8 = *s8;
    c8d6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    c8da:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    c8de:	4283      	cmp	r3, r0
    c8e0:	d1f9      	bne.n	c8d6 <lv_draw_rect+0x5b2>
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
    c8e2:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    c8e6:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
    c8ea:	1c67      	adds	r7, r4, #1
    c8ec:	1bbf      	subs	r7, r7, r6
            for(y = 0; y < h; y++) {
    c8ee:	b23f      	sxth	r7, r7
    c8f0:	2f00      	cmp	r7, #0
    c8f2:	dd36      	ble.n	c962 <lv_draw_rect+0x63e>
    c8f4:	2600      	movs	r6, #0
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    c8f6:	f8df 813c 	ldr.w	r8, [pc, #316]	; ca34 <lv_draw_rect+0x710>
    c8fa:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
    c8fe:	46bb      	mov	fp, r7
    c900:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c902:	930b      	str	r3, [sp, #44]	; 0x2c
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
    c904:	9a08      	ldr	r2, [sp, #32]
    c906:	4629      	mov	r1, r5
    c908:	9f05      	ldr	r7, [sp, #20]
    c90a:	4638      	mov	r0, r7
    c90c:	4c47      	ldr	r4, [pc, #284]	; (ca2c <lv_draw_rect+0x708>)
    c90e:	47a0      	blx	r4
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    c910:	ac30      	add	r4, sp, #192	; 0xc0
    c912:	9b08      	ldr	r3, [sp, #32]
    c914:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
    c918:	f934 1d38 	ldrsh.w	r1, [r4, #-56]!
    c91c:	9705      	str	r7, [sp, #20]
    c91e:	4638      	mov	r0, r7
    c920:	4f43      	ldr	r7, [pc, #268]	; (ca30 <lv_draw_rect+0x70c>)
    c922:	47b8      	blx	r7
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    c924:	2801      	cmp	r0, #1
    c926:	bf08      	it	eq
    c928:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    c92a:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    c92e:	9302      	str	r3, [sp, #8]
    c930:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c932:	9201      	str	r2, [sp, #4]
    c934:	9000      	str	r0, [sp, #0]
    c936:	9b05      	ldr	r3, [sp, #20]
    c938:	f8ba 201e 	ldrh.w	r2, [sl, #30]
    c93c:	4621      	mov	r1, r4
    c93e:	9804      	ldr	r0, [sp, #16]
    c940:	47c0      	blx	r8
                fa.y1--;
    c942:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    c946:	3b01      	subs	r3, #1
    c948:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
                fa.y2--;
    c94c:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    c950:	3b01      	subs	r3, #1
    c952:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    c956:	444d      	add	r5, r9
            for(y = 0; y < h; y++) {
    c958:	3601      	adds	r6, #1
    c95a:	455e      	cmp	r6, fp
    c95c:	d1d2      	bne.n	c904 <lv_draw_rect+0x5e0>
    c95e:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
    a.x2 = sh_area.x2;
    c962:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
    c966:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    a.x1 = a.x2 - corner_size + 1;
    c96a:	3301      	adds	r3, #1
    c96c:	eba3 030b 	sub.w	r3, r3, fp
    c970:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    a.y1 = sh_area.y1 + corner_size;
    c974:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
    c978:	445b      	add	r3, fp
    c97a:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    a.y2 = sh_area.y2 - corner_size;
    c97e:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
    c982:	eba3 030b 	sub.w	r3, r3, fp
    c986:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
    has_com = _lv_area_intersect(&ca, &a, clip);
    c98a:	9a04      	ldr	r2, [sp, #16]
    c98c:	a91c      	add	r1, sp, #112	; 0x70
    c98e:	a81e      	add	r0, sp, #120	; 0x78
    c990:	4b25      	ldr	r3, [pc, #148]	; (ca28 <lv_draw_rect+0x704>)
    c992:	4798      	blx	r3
    if(has_com) {
    c994:	2800      	cmp	r0, #0
    c996:	f000 8085 	beq.w	caa4 <lv_draw_rect+0x780>
        if(simple_mode) ca.x1 = LV_MATH_MAX(ca.x1, coords->x2);
    c99a:	9b07      	ldr	r3, [sp, #28]
    c99c:	b14b      	cbz	r3, c9b2 <lv_draw_rect+0x68e>
    c99e:	9b06      	ldr	r3, [sp, #24]
    c9a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    c9a4:	f9bd 2078 	ldrsh.w	r2, [sp, #120]	; 0x78
    c9a8:	4293      	cmp	r3, r2
    c9aa:	bfb8      	it	lt
    c9ac:	4613      	movlt	r3, r2
    c9ae:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    c9b2:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
    c9b6:	f8bd 207c 	ldrh.w	r2, [sp, #124]	; 0x7c
    c9ba:	3201      	adds	r2, #1
    c9bc:	1ad2      	subs	r2, r2, r3
    c9be:	fa0f f882 	sxth.w	r8, r2
        if(w > 0) {
    c9c2:	f1b8 0f00 	cmp.w	r8, #0
    c9c6:	dd6d      	ble.n	caa4 <lv_draw_rect+0x780>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    c9c8:	f8bd 407e 	ldrh.w	r4, [sp, #126]	; 0x7e
    c9cc:	3401      	adds	r4, #1
    c9ce:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
    c9d2:	1aa4      	subs	r4, r4, r2
    c9d4:	b224      	sxth	r4, r4
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
    c9d6:	f109 31ff 	add.w	r1, r9, #4294967295
            sh_buf_tmp += ca.x1 - a.x1;
    c9da:	f9bd 2070 	ldrsh.w	r2, [sp, #112]	; 0x70
    c9de:	1a9b      	subs	r3, r3, r2
    c9e0:	fb09 3301 	mla	r3, r9, r1, r3
    c9e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c9e6:	18d3      	adds	r3, r2, r3
    c9e8:	9308      	str	r3, [sp, #32]
    c9ea:	f10d 0277 	add.w	r2, sp, #119	; 0x77
    uint8_t * d8 = (uint8_t *)dst;
    c9ee:	ab22      	add	r3, sp, #136	; 0x88
    while(len) {
    c9f0:	a824      	add	r0, sp, #144	; 0x90
        *d8 = *s8;
    c9f2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    c9f6:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    c9fa:	4283      	cmp	r3, r0
    c9fc:	d1f9      	bne.n	c9f2 <lv_draw_rect+0x6ce>
            fa.y2 = fa.y1;
    c9fe:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    ca02:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            for(y = 0; y < h; y++) {
    ca06:	4625      	mov	r5, r4
    ca08:	2c00      	cmp	r4, #0
    ca0a:	dd4b      	ble.n	caa4 <lv_draw_rect+0x780>
    ca0c:	2400      	movs	r4, #0
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
    ca0e:	4f07      	ldr	r7, [pc, #28]	; (ca2c <lv_draw_rect+0x708>)
                _lv_blend_fill(clip, &fa,
    ca10:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    ca14:	46a9      	mov	r9, r5
    ca16:	9d07      	ldr	r5, [sp, #28]
    ca18:	e03a      	b.n	ca90 <lv_draw_rect+0x76c>
    ca1a:	bf00      	nop
    ca1c:	00012931 	.word	0x00012931
    ca20:	0000c021 	.word	0x0000c021
    ca24:	0000bdb5 	.word	0x0000bdb5
    ca28:	0001150d 	.word	0x0001150d
    ca2c:	00012649 	.word	0x00012649
    ca30:	0000be11 	.word	0x0000be11
    ca34:	00007745 	.word	0x00007745
    else if(dsc->shadow_ofs_x != 0 || dsc->shadow_ofs_y != 0) simple_mode = false;
    ca38:	2300      	movs	r3, #0
    ca3a:	9307      	str	r3, [sp, #28]
    ca3c:	e662      	b.n	c704 <lv_draw_rect+0x3e0>
    ca3e:	2300      	movs	r3, #0
    ca40:	9307      	str	r3, [sp, #28]
    ca42:	e65f      	b.n	c704 <lv_draw_rect+0x3e0>
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    ca44:	4643      	mov	r3, r8
    ca46:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
    ca4a:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
    ca4e:	9805      	ldr	r0, [sp, #20]
    ca50:	4e23      	ldr	r6, [pc, #140]	; (cae0 <lv_draw_rect+0x7bc>)
    ca52:	47b0      	blx	r6
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    ca54:	2801      	cmp	r0, #1
    ca56:	bf08      	it	eq
    ca58:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa,
    ca5a:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    ca5e:	9302      	str	r3, [sp, #8]
    ca60:	f89a 3028 	ldrb.w	r3, [sl, #40]	; 0x28
    ca64:	9301      	str	r3, [sp, #4]
    ca66:	9000      	str	r0, [sp, #0]
    ca68:	9b05      	ldr	r3, [sp, #20]
    ca6a:	f8ba 201e 	ldrh.w	r2, [sl, #30]
    ca6e:	a922      	add	r1, sp, #136	; 0x88
    ca70:	9804      	ldr	r0, [sp, #16]
    ca72:	4e1c      	ldr	r6, [pc, #112]	; (cae4 <lv_draw_rect+0x7c0>)
    ca74:	47b0      	blx	r6
                fa.y1++;
    ca76:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    ca7a:	3301      	adds	r3, #1
    ca7c:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
                fa.y2++;
    ca80:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    ca84:	3301      	adds	r3, #1
    ca86:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            for(y = 0; y < h; y++) {
    ca8a:	3401      	adds	r4, #1
    ca8c:	454c      	cmp	r4, r9
    ca8e:	d007      	beq.n	caa0 <lv_draw_rect+0x77c>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
    ca90:	4642      	mov	r2, r8
    ca92:	9908      	ldr	r1, [sp, #32]
    ca94:	9805      	ldr	r0, [sp, #20]
    ca96:	47b8      	blx	r7
                if(simple_mode) {
    ca98:	2d00      	cmp	r5, #0
    ca9a:	d0d3      	beq.n	ca44 <lv_draw_rect+0x720>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
    ca9c:	2002      	movs	r0, #2
    ca9e:	e7dc      	b.n	ca5a <lv_draw_rect+0x736>
    caa0:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    for(y = 0; y < corner_size; y++) {
    caa4:	f1b9 0f00 	cmp.w	r9, #0
    caa8:	dd1e      	ble.n	cae8 <lv_draw_rect+0x7c4>
        for(x = 0; x < corner_size / 2; x++) {
    caaa:	eb09 77d9 	add.w	r7, r9, r9, lsr #31
    caae:	107f      	asrs	r7, r7, #1
    cab0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    cab2:	2600      	movs	r6, #0
    cab4:	e00c      	b.n	cad0 <lv_draw_rect+0x7ac>
            lv_opa_t tmp = sh_buf_tmp[x];
    cab6:	7819      	ldrb	r1, [r3, #0]
            sh_buf_tmp[x] = sh_buf_tmp[corner_size - x - 1];
    cab8:	f812 0c01 	ldrb.w	r0, [r2, #-1]
    cabc:	f803 0b01 	strb.w	r0, [r3], #1
            sh_buf_tmp[corner_size - x - 1] = tmp;
    cac0:	f802 1d01 	strb.w	r1, [r2, #-1]!
        for(x = 0; x < corner_size / 2; x++) {
    cac4:	42a3      	cmp	r3, r4
    cac6:	d1f6      	bne.n	cab6 <lv_draw_rect+0x792>
    cac8:	444d      	add	r5, r9
    for(y = 0; y < corner_size; y++) {
    caca:	3601      	adds	r6, #1
    cacc:	45b1      	cmp	r9, r6
    cace:	d00b      	beq.n	cae8 <lv_draw_rect+0x7c4>
        for(x = 0; x < corner_size / 2; x++) {
    cad0:	2f00      	cmp	r7, #0
    cad2:	ddf9      	ble.n	cac8 <lv_draw_rect+0x7a4>
    cad4:	462b      	mov	r3, r5
    cad6:	eb05 0209 	add.w	r2, r5, r9
    cada:	19ec      	adds	r4, r5, r7
    cadc:	e7eb      	b.n	cab6 <lv_draw_rect+0x792>
    cade:	bf00      	nop
    cae0:	0000be11 	.word	0x0000be11
    cae4:	00007745 	.word	0x00007745
    a.x1 = sh_area.x1;
    cae8:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
    caec:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    a.x2 = a.x1 + corner_size - 1;
    caf0:	3b01      	subs	r3, #1
    caf2:	445b      	add	r3, fp
    caf4:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    a.y1 = sh_area.y1;
    caf8:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
    cafc:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    a.y2 = a.y1 + corner_size - 1;
    cb00:	3b01      	subs	r3, #1
    cb02:	445b      	add	r3, fp
    cb04:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
    has_com = _lv_area_intersect(&ca, &a, clip);
    cb08:	9a04      	ldr	r2, [sp, #16]
    cb0a:	a91c      	add	r1, sp, #112	; 0x70
    cb0c:	a81e      	add	r0, sp, #120	; 0x78
    cb0e:	4bae      	ldr	r3, [pc, #696]	; (cdc8 <lv_draw_rect+0xaa4>)
    cb10:	4798      	blx	r3
    if(has_com) {
    cb12:	2800      	cmp	r0, #0
    cb14:	d071      	beq.n	cbfa <lv_draw_rect+0x8d6>
        if(ca.y2 > h_half) ca.y2 = h_half;
    cb16:	f9bd 307e 	ldrsh.w	r3, [sp, #126]	; 0x7e
    cb1a:	990c      	ldr	r1, [sp, #48]	; 0x30
    cb1c:	428b      	cmp	r3, r1
    cb1e:	bfc4      	itt	gt
    cb20:	460b      	movgt	r3, r1
    cb22:	f8ad 307e 	strhgt.w	r3, [sp, #126]	; 0x7e
        if(ca.x2 > w_half) ca.x2 = w_half;
    cb26:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
    cb2a:	990d      	ldr	r1, [sp, #52]	; 0x34
    cb2c:	428b      	cmp	r3, r1
    cb2e:	bfc4      	itt	gt
    cb30:	460b      	movgt	r3, r1
    cb32:	f8ad 307c 	strhgt.w	r3, [sp, #124]	; 0x7c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    cb36:	f9bd 2078 	ldrsh.w	r2, [sp, #120]	; 0x78
    cb3a:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
    cb3e:	3301      	adds	r3, #1
    cb40:	1a9b      	subs	r3, r3, r2
    cb42:	b21b      	sxth	r3, r3
    cb44:	9308      	str	r3, [sp, #32]
        if(w > 0) {
    cb46:	2b00      	cmp	r3, #0
    cb48:	dd57      	ble.n	cbfa <lv_draw_rect+0x8d6>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    cb4a:	f9bd 707e 	ldrsh.w	r7, [sp, #126]	; 0x7e
    cb4e:	f9bd 407a 	ldrsh.w	r4, [sp, #122]	; 0x7a
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
    cb52:	f9bd 5072 	ldrsh.w	r5, [sp, #114]	; 0x72
    cb56:	1b65      	subs	r5, r4, r5
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
    cb58:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
    cb5c:	1ad2      	subs	r2, r2, r3
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
    cb5e:	fb09 2505 	mla	r5, r9, r5, r2
    cb62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cb64:	441d      	add	r5, r3
    cb66:	f10d 0277 	add.w	r2, sp, #119	; 0x77
    uint8_t * d8 = (uint8_t *)dst;
    cb6a:	ab22      	add	r3, sp, #136	; 0x88
    while(len) {
    cb6c:	a824      	add	r0, sp, #144	; 0x90
        *d8 = *s8;
    cb6e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    cb72:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    cb76:	4283      	cmp	r3, r0
    cb78:	d1f9      	bne.n	cb6e <lv_draw_rect+0x84a>
            fa.y2 = fa.y1;
    cb7a:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    cb7e:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    cb82:	3701      	adds	r7, #1
    cb84:	1b3f      	subs	r7, r7, r4
            for(y = 0; y < h; y++) {
    cb86:	b23f      	sxth	r7, r7
    cb88:	2f00      	cmp	r7, #0
    cb8a:	dd36      	ble.n	cbfa <lv_draw_rect+0x8d6>
    cb8c:	2600      	movs	r6, #0
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    cb8e:	f8df 8244 	ldr.w	r8, [pc, #580]	; cdd4 <lv_draw_rect+0xab0>
    cb92:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
    cb96:	46bb      	mov	fp, r7
    cb98:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cb9a:	930b      	str	r3, [sp, #44]	; 0x2c
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
    cb9c:	9a08      	ldr	r2, [sp, #32]
    cb9e:	4629      	mov	r1, r5
    cba0:	9f05      	ldr	r7, [sp, #20]
    cba2:	4638      	mov	r0, r7
    cba4:	4c89      	ldr	r4, [pc, #548]	; (cdcc <lv_draw_rect+0xaa8>)
    cba6:	47a0      	blx	r4
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    cba8:	ac30      	add	r4, sp, #192	; 0xc0
    cbaa:	9b08      	ldr	r3, [sp, #32]
    cbac:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
    cbb0:	f934 1d38 	ldrsh.w	r1, [r4, #-56]!
    cbb4:	9705      	str	r7, [sp, #20]
    cbb6:	4638      	mov	r0, r7
    cbb8:	4f85      	ldr	r7, [pc, #532]	; (cdd0 <lv_draw_rect+0xaac>)
    cbba:	47b8      	blx	r7
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    cbbc:	2801      	cmp	r0, #1
    cbbe:	bf08      	it	eq
    cbc0:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    cbc2:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    cbc6:	9302      	str	r3, [sp, #8]
    cbc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cbca:	9201      	str	r2, [sp, #4]
    cbcc:	9000      	str	r0, [sp, #0]
    cbce:	9b05      	ldr	r3, [sp, #20]
    cbd0:	f8ba 201e 	ldrh.w	r2, [sl, #30]
    cbd4:	4621      	mov	r1, r4
    cbd6:	9804      	ldr	r0, [sp, #16]
    cbd8:	47c0      	blx	r8
                fa.y1++;
    cbda:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    cbde:	3301      	adds	r3, #1
    cbe0:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
                fa.y2++;
    cbe4:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    cbe8:	3301      	adds	r3, #1
    cbea:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    cbee:	444d      	add	r5, r9
            for(y = 0; y < h; y++) {
    cbf0:	3601      	adds	r6, #1
    cbf2:	455e      	cmp	r6, fp
    cbf4:	d1d2      	bne.n	cb9c <lv_draw_rect+0x878>
    cbf6:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
    a.x1 = sh_area.x1;
    cbfa:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
    cbfe:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    a.x2 = a.x1 + corner_size - 1;
    cc02:	3b01      	subs	r3, #1
    cc04:	445b      	add	r3, fp
    cc06:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    a.y1 = sh_area.y2 - corner_size + 1;
    cc0a:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
    cc0e:	1c53      	adds	r3, r2, #1
    cc10:	eba3 030b 	sub.w	r3, r3, fp
    cc14:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    a.y2 = sh_area.y2;
    cc18:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
    has_com = _lv_area_intersect(&ca, &a, clip);
    cc1c:	9a04      	ldr	r2, [sp, #16]
    cc1e:	a91c      	add	r1, sp, #112	; 0x70
    cc20:	a81e      	add	r0, sp, #120	; 0x78
    cc22:	4b69      	ldr	r3, [pc, #420]	; (cdc8 <lv_draw_rect+0xaa4>)
    cc24:	4798      	blx	r3
    if(has_com) {
    cc26:	2800      	cmp	r0, #0
    cc28:	d072      	beq.n	cd10 <lv_draw_rect+0x9ec>
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
    cc2a:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
    cc2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cc30:	4293      	cmp	r3, r2
    cc32:	dc03      	bgt.n	cc3c <lv_draw_rect+0x918>
    cc34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cc36:	3301      	adds	r3, #1
    cc38:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
        if(ca.x2 > w_half) ca.x2 = w_half;
    cc3c:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
    cc40:	990d      	ldr	r1, [sp, #52]	; 0x34
    cc42:	428b      	cmp	r3, r1
    cc44:	bfc4      	itt	gt
    cc46:	460b      	movgt	r3, r1
    cc48:	f8ad 307c 	strhgt.w	r3, [sp, #124]	; 0x7c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    cc4c:	f9bd 2078 	ldrsh.w	r2, [sp, #120]	; 0x78
    cc50:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
    cc54:	3301      	adds	r3, #1
    cc56:	1a9b      	subs	r3, r3, r2
    cc58:	b21b      	sxth	r3, r3
    cc5a:	9308      	str	r3, [sp, #32]
        if(w > 0) {
    cc5c:	2b00      	cmp	r3, #0
    cc5e:	dd57      	ble.n	cd10 <lv_draw_rect+0x9ec>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    cc60:	f9bd 407e 	ldrsh.w	r4, [sp, #126]	; 0x7e
    cc64:	f9bd 607a 	ldrsh.w	r6, [sp, #122]	; 0x7a
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
    cc68:	f9bd 5076 	ldrsh.w	r5, [sp, #118]	; 0x76
    cc6c:	1b2d      	subs	r5, r5, r4
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
    cc6e:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
    cc72:	1ad2      	subs	r2, r2, r3
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
    cc74:	fb09 2505 	mla	r5, r9, r5, r2
    cc78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cc7a:	441d      	add	r5, r3
    cc7c:	f10d 0277 	add.w	r2, sp, #119	; 0x77
    uint8_t * d8 = (uint8_t *)dst;
    cc80:	ab22      	add	r3, sp, #136	; 0x88
    while(len) {
    cc82:	a824      	add	r0, sp, #144	; 0x90
        *d8 = *s8;
    cc84:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    cc88:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    cc8c:	4283      	cmp	r3, r0
    cc8e:	d1f9      	bne.n	cc84 <lv_draw_rect+0x960>
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
    cc90:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    cc94:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
    cc98:	1c67      	adds	r7, r4, #1
    cc9a:	1bbf      	subs	r7, r7, r6
            for(y = 0; y < h; y++) {
    cc9c:	b23f      	sxth	r7, r7
    cc9e:	2f00      	cmp	r7, #0
    cca0:	dd36      	ble.n	cd10 <lv_draw_rect+0x9ec>
    cca2:	2600      	movs	r6, #0
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    cca4:	f8df 812c 	ldr.w	r8, [pc, #300]	; cdd4 <lv_draw_rect+0xab0>
    cca8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
    ccac:	46bb      	mov	fp, r7
    ccae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ccb0:	930b      	str	r3, [sp, #44]	; 0x2c
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
    ccb2:	9a08      	ldr	r2, [sp, #32]
    ccb4:	4629      	mov	r1, r5
    ccb6:	9f05      	ldr	r7, [sp, #20]
    ccb8:	4638      	mov	r0, r7
    ccba:	4c44      	ldr	r4, [pc, #272]	; (cdcc <lv_draw_rect+0xaa8>)
    ccbc:	47a0      	blx	r4
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    ccbe:	ac30      	add	r4, sp, #192	; 0xc0
    ccc0:	9b08      	ldr	r3, [sp, #32]
    ccc2:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
    ccc6:	f934 1d38 	ldrsh.w	r1, [r4, #-56]!
    ccca:	9705      	str	r7, [sp, #20]
    cccc:	4638      	mov	r0, r7
    ccce:	4f40      	ldr	r7, [pc, #256]	; (cdd0 <lv_draw_rect+0xaac>)
    ccd0:	47b8      	blx	r7
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    ccd2:	2801      	cmp	r0, #1
    ccd4:	bf08      	it	eq
    ccd6:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    ccd8:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    ccdc:	9302      	str	r3, [sp, #8]
    ccde:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cce0:	9201      	str	r2, [sp, #4]
    cce2:	9000      	str	r0, [sp, #0]
    cce4:	9b05      	ldr	r3, [sp, #20]
    cce6:	f8ba 201e 	ldrh.w	r2, [sl, #30]
    ccea:	4621      	mov	r1, r4
    ccec:	9804      	ldr	r0, [sp, #16]
    ccee:	47c0      	blx	r8
                fa.y1--;
    ccf0:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    ccf4:	3b01      	subs	r3, #1
    ccf6:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
                fa.y2--;
    ccfa:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    ccfe:	3b01      	subs	r3, #1
    cd00:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    cd04:	444d      	add	r5, r9
            for(y = 0; y < h; y++) {
    cd06:	3601      	adds	r6, #1
    cd08:	455e      	cmp	r6, fp
    cd0a:	d1d2      	bne.n	ccb2 <lv_draw_rect+0x98e>
    cd0c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    a.x1 = sh_area.x1;
    cd10:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
    cd14:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    a.x2 = a.x1 + corner_size - 1;
    cd18:	3b01      	subs	r3, #1
    cd1a:	445b      	add	r3, fp
    cd1c:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    a.y1 = sh_area.y1 + corner_size;
    cd20:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
    cd24:	445b      	add	r3, fp
    cd26:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    a.y2 = sh_area.y2 - corner_size;
    cd2a:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
    cd2e:	eba3 030b 	sub.w	r3, r3, fp
    cd32:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
    has_com = _lv_area_intersect(&ca, &a, clip);
    cd36:	9a04      	ldr	r2, [sp, #16]
    cd38:	a91c      	add	r1, sp, #112	; 0x70
    cd3a:	a81e      	add	r0, sp, #120	; 0x78
    cd3c:	4b22      	ldr	r3, [pc, #136]	; (cdc8 <lv_draw_rect+0xaa4>)
    cd3e:	4798      	blx	r3
    if(has_com) {
    cd40:	2800      	cmp	r0, #0
    cd42:	d079      	beq.n	ce38 <lv_draw_rect+0xb14>
        if(simple_mode) ca.x2 = LV_MATH_MIN(coords->x1, ca.x2);
    cd44:	9b07      	ldr	r3, [sp, #28]
    cd46:	b14b      	cbz	r3, cd5c <lv_draw_rect+0xa38>
    cd48:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
    cd4c:	9a06      	ldr	r2, [sp, #24]
    cd4e:	f9b2 2000 	ldrsh.w	r2, [r2]
    cd52:	4293      	cmp	r3, r2
    cd54:	bfa8      	it	ge
    cd56:	4613      	movge	r3, r2
    cd58:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    cd5c:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
    cd60:	f8bd 807c 	ldrh.w	r8, [sp, #124]	; 0x7c
    cd64:	f108 0801 	add.w	r8, r8, #1
    cd68:	eba8 0803 	sub.w	r8, r8, r3
    cd6c:	fa0f f888 	sxth.w	r8, r8
        if(w > 0) {
    cd70:	f1b8 0f00 	cmp.w	r8, #0
    cd74:	dd60      	ble.n	ce38 <lv_draw_rect+0xb14>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    cd76:	f8bd 407e 	ldrh.w	r4, [sp, #126]	; 0x7e
    cd7a:	3401      	adds	r4, #1
    cd7c:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
    cd80:	1aa4      	subs	r4, r4, r2
    cd82:	b224      	sxth	r4, r4
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
    cd84:	f109 31ff 	add.w	r1, r9, #4294967295
            sh_buf_tmp += ca.x1 - a.x1;
    cd88:	f9bd 2070 	ldrsh.w	r2, [sp, #112]	; 0x70
    cd8c:	1a9b      	subs	r3, r3, r2
    cd8e:	fb09 3301 	mla	r3, r9, r1, r3
    cd92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    cd94:	18d3      	adds	r3, r2, r3
    cd96:	9308      	str	r3, [sp, #32]
    cd98:	f10d 0277 	add.w	r2, sp, #119	; 0x77
    uint8_t * d8 = (uint8_t *)dst;
    cd9c:	ab22      	add	r3, sp, #136	; 0x88
    while(len) {
    cd9e:	a824      	add	r0, sp, #144	; 0x90
        *d8 = *s8;
    cda0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    cda4:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    cda8:	4283      	cmp	r3, r0
    cdaa:	d1f9      	bne.n	cda0 <lv_draw_rect+0xa7c>
            fa.y2 = fa.y1;
    cdac:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    cdb0:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            for(y = 0; y < h; y++) {
    cdb4:	4625      	mov	r5, r4
    cdb6:	2c00      	cmp	r4, #0
    cdb8:	dd3e      	ble.n	ce38 <lv_draw_rect+0xb14>
    cdba:	2400      	movs	r4, #0
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
    cdbc:	4f03      	ldr	r7, [pc, #12]	; (cdcc <lv_draw_rect+0xaa8>)
                _lv_blend_fill(clip, &fa,
    cdbe:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    cdc2:	46a9      	mov	r9, r5
    cdc4:	9d07      	ldr	r5, [sp, #28]
    cdc6:	e02d      	b.n	ce24 <lv_draw_rect+0xb00>
    cdc8:	0001150d 	.word	0x0001150d
    cdcc:	00012649 	.word	0x00012649
    cdd0:	0000be11 	.word	0x0000be11
    cdd4:	00007745 	.word	0x00007745
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    cdd8:	4643      	mov	r3, r8
    cdda:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
    cdde:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
    cde2:	9805      	ldr	r0, [sp, #20]
    cde4:	4eaa      	ldr	r6, [pc, #680]	; (d090 <lv_draw_rect+0xd6c>)
    cde6:	47b0      	blx	r6
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    cde8:	2801      	cmp	r0, #1
    cdea:	bf08      	it	eq
    cdec:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa,
    cdee:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    cdf2:	9302      	str	r3, [sp, #8]
    cdf4:	f89a 3028 	ldrb.w	r3, [sl, #40]	; 0x28
    cdf8:	9301      	str	r3, [sp, #4]
    cdfa:	9000      	str	r0, [sp, #0]
    cdfc:	9b05      	ldr	r3, [sp, #20]
    cdfe:	f8ba 201e 	ldrh.w	r2, [sl, #30]
    ce02:	a922      	add	r1, sp, #136	; 0x88
    ce04:	9804      	ldr	r0, [sp, #16]
    ce06:	4ea3      	ldr	r6, [pc, #652]	; (d094 <lv_draw_rect+0xd70>)
    ce08:	47b0      	blx	r6
                fa.y1++;
    ce0a:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    ce0e:	3301      	adds	r3, #1
    ce10:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
                fa.y2++;
    ce14:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    ce18:	3301      	adds	r3, #1
    ce1a:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            for(y = 0; y < h; y++) {
    ce1e:	3401      	adds	r4, #1
    ce20:	454c      	cmp	r4, r9
    ce22:	d007      	beq.n	ce34 <lv_draw_rect+0xb10>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
    ce24:	4642      	mov	r2, r8
    ce26:	9908      	ldr	r1, [sp, #32]
    ce28:	9805      	ldr	r0, [sp, #20]
    ce2a:	47b8      	blx	r7
                if(simple_mode) {
    ce2c:	2d00      	cmp	r5, #0
    ce2e:	d0d3      	beq.n	cdd8 <lv_draw_rect+0xab4>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
    ce30:	2002      	movs	r0, #2
    ce32:	e7dc      	b.n	cdee <lv_draw_rect+0xaca>
    ce34:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    a.x1 = sh_area.x1 + corner_size;
    ce38:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
    ce3c:	445b      	add	r3, fp
    ce3e:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    a.x2 = sh_area.x2 - corner_size;
    ce42:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
    ce46:	eba3 030b 	sub.w	r3, r3, fp
    ce4a:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    a.y1 = sh_area.y1;
    ce4e:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
    ce52:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    a.y2 = sh_area.y1 + corner_size - 1;
    ce56:	3b01      	subs	r3, #1
    ce58:	445b      	add	r3, fp
    ce5a:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
    has_com = _lv_area_intersect(&ca, &a, clip);
    ce5e:	9a04      	ldr	r2, [sp, #16]
    ce60:	a91c      	add	r1, sp, #112	; 0x70
    ce62:	a81e      	add	r0, sp, #120	; 0x78
    ce64:	4b8c      	ldr	r3, [pc, #560]	; (d098 <lv_draw_rect+0xd74>)
    ce66:	4798      	blx	r3
    if(has_com) {
    ce68:	2800      	cmp	r0, #0
    ce6a:	d07d      	beq.n	cf68 <lv_draw_rect+0xc44>
        if(simple_mode) ca.y2 = LV_MATH_MIN(ca.y2, coords->y1);
    ce6c:	9b07      	ldr	r3, [sp, #28]
    ce6e:	b14b      	cbz	r3, ce84 <lv_draw_rect+0xb60>
    ce70:	9b06      	ldr	r3, [sp, #24]
    ce72:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    ce76:	f9bd 207e 	ldrsh.w	r2, [sp, #126]	; 0x7e
    ce7a:	4293      	cmp	r3, r2
    ce7c:	bfa8      	it	ge
    ce7e:	4613      	movge	r3, r2
    ce80:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    ce84:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
    ce88:	3301      	adds	r3, #1
    ce8a:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
    ce8e:	1a9b      	subs	r3, r3, r2
    ce90:	b21b      	sxth	r3, r3
    ce92:	9308      	str	r3, [sp, #32]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    ce94:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
    ce98:	f8bd 507e 	ldrh.w	r5, [sp, #126]	; 0x7e
    ce9c:	3501      	adds	r5, #1
    ce9e:	1aed      	subs	r5, r5, r3
    cea0:	b22d      	sxth	r5, r5
        sh_buf_tmp = sh_buf + corner_size - 1;
    cea2:	46c8      	mov	r8, r9
        sh_buf_tmp += corner_size * (ca.y1 - a.y1);
    cea4:	f9bd 4072 	ldrsh.w	r4, [sp, #114]	; 0x72
    cea8:	1b1c      	subs	r4, r3, r4
        sh_buf_tmp = sh_buf + corner_size - 1;
    ceaa:	f109 33ff 	add.w	r3, r9, #4294967295
        sh_buf_tmp += corner_size * (ca.y1 - a.y1);
    ceae:	fb09 3404 	mla	r4, r9, r4, r3
    ceb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ceb4:	441c      	add	r4, r3
    ceb6:	f10d 0277 	add.w	r2, sp, #119	; 0x77
    uint8_t * d8 = (uint8_t *)dst;
    ceba:	ab22      	add	r3, sp, #136	; 0x88
    while(len) {
    cebc:	a824      	add	r0, sp, #144	; 0x90
        *d8 = *s8;
    cebe:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    cec2:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    cec6:	4283      	cmp	r3, r0
    cec8:	d1f9      	bne.n	cebe <lv_draw_rect+0xb9a>
        fa.y2 = fa.y1;
    ceca:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    cece:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
        for(y = 0; y < h; y++) {
    ced2:	462b      	mov	r3, r5
    ced4:	2d00      	cmp	r5, #0
    ced6:	dd47      	ble.n	cf68 <lv_draw_rect+0xc44>
    ced8:	2500      	movs	r5, #0
            _lv_memset(mask_buf, opa_tmp, w);
    ceda:	4f70      	ldr	r7, [pc, #448]	; (d09c <lv_draw_rect+0xd78>)
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    cedc:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    cee0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    cee4:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
    cee8:	469b      	mov	fp, r3
    ceea:	e02a      	b.n	cf42 <lv_draw_rect+0xc1e>
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
    ceec:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    cef0:	d12a      	bne.n	cf48 <lv_draw_rect+0xc24>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
    cef2:	4649      	mov	r1, r9
    cef4:	e02c      	b.n	cf50 <lv_draw_rect+0xc2c>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    cef6:	9b08      	ldr	r3, [sp, #32]
    cef8:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
    cefc:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
    cf00:	9805      	ldr	r0, [sp, #20]
    cf02:	4e63      	ldr	r6, [pc, #396]	; (d090 <lv_draw_rect+0xd6c>)
    cf04:	47b0      	blx	r6
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    cf06:	2801      	cmp	r0, #1
    cf08:	bf08      	it	eq
    cf0a:	2002      	moveq	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    cf0c:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    cf10:	9302      	str	r3, [sp, #8]
    cf12:	23ff      	movs	r3, #255	; 0xff
    cf14:	9301      	str	r3, [sp, #4]
    cf16:	9000      	str	r0, [sp, #0]
    cf18:	9b05      	ldr	r3, [sp, #20]
    cf1a:	f8ba 201e 	ldrh.w	r2, [sl, #30]
    cf1e:	a922      	add	r1, sp, #136	; 0x88
    cf20:	9804      	ldr	r0, [sp, #16]
    cf22:	4e5c      	ldr	r6, [pc, #368]	; (d094 <lv_draw_rect+0xd70>)
    cf24:	47b0      	blx	r6
            fa.y1++;
    cf26:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    cf2a:	3301      	adds	r3, #1
    cf2c:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
            fa.y2++;
    cf30:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    cf34:	3301      	adds	r3, #1
    cf36:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            sh_buf_tmp += corner_size;
    cf3a:	4444      	add	r4, r8
        for(y = 0; y < h; y++) {
    cf3c:	3501      	adds	r5, #1
    cf3e:	455d      	cmp	r5, fp
    cf40:	d00e      	beq.n	cf60 <lv_draw_rect+0xc3c>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
    cf42:	7823      	ldrb	r3, [r4, #0]
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
    cf44:	2bff      	cmp	r3, #255	; 0xff
    cf46:	d0d1      	beq.n	ceec <lv_draw_rect+0xbc8>
    cf48:	fb03 f309 	mul.w	r3, r3, r9
    cf4c:	f3c3 2107 	ubfx	r1, r3, #8, #8
            _lv_memset(mask_buf, opa_tmp, w);
    cf50:	9a08      	ldr	r2, [sp, #32]
    cf52:	9805      	ldr	r0, [sp, #20]
    cf54:	47b8      	blx	r7
            if(simple_mode) {
    cf56:	9b07      	ldr	r3, [sp, #28]
    cf58:	2b00      	cmp	r3, #0
    cf5a:	d0cc      	beq.n	cef6 <lv_draw_rect+0xbd2>
                mask_res = LV_DRAW_MASK_RES_CHANGED;
    cf5c:	2002      	movs	r0, #2
    cf5e:	e7d5      	b.n	cf0c <lv_draw_rect+0xbe8>
    cf60:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    cf64:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    a.x1 = sh_area.x1 + corner_size;
    cf68:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
    cf6c:	445b      	add	r3, fp
    cf6e:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    a.x2 = sh_area.x2 - corner_size;
    cf72:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
    cf76:	eba3 030b 	sub.w	r3, r3, fp
    cf7a:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    a.y1 = sh_area.y2 - corner_size + 1;
    cf7e:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
    cf82:	1c53      	adds	r3, r2, #1
    cf84:	eba3 030b 	sub.w	r3, r3, fp
    cf88:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    a.y2 = sh_area.y2;
    cf8c:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
    has_com = _lv_area_intersect(&ca, &a, clip);
    cf90:	9a04      	ldr	r2, [sp, #16]
    cf92:	a91c      	add	r1, sp, #112	; 0x70
    cf94:	a81e      	add	r0, sp, #120	; 0x78
    cf96:	4b40      	ldr	r3, [pc, #256]	; (d098 <lv_draw_rect+0xd74>)
    cf98:	4798      	blx	r3
    if(has_com) {
    cf9a:	2800      	cmp	r0, #0
    cf9c:	f000 8082 	beq.w	d0a4 <lv_draw_rect+0xd80>
        if(simple_mode) ca.y1 = LV_MATH_MAX(ca.y1, coords->y2);
    cfa0:	9b07      	ldr	r3, [sp, #28]
    cfa2:	b14b      	cbz	r3, cfb8 <lv_draw_rect+0xc94>
    cfa4:	9b06      	ldr	r3, [sp, #24]
    cfa6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    cfaa:	f9bd 207a 	ldrsh.w	r2, [sp, #122]	; 0x7a
    cfae:	4293      	cmp	r3, r2
    cfb0:	bfb8      	it	lt
    cfb2:	4613      	movlt	r3, r2
    cfb4:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    cfb8:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
    cfbc:	3301      	adds	r3, #1
    cfbe:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
    cfc2:	1a9b      	subs	r3, r3, r2
    cfc4:	b21b      	sxth	r3, r3
    cfc6:	9308      	str	r3, [sp, #32]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    cfc8:	f9bd 307e 	ldrsh.w	r3, [sp, #126]	; 0x7e
    cfcc:	1c5d      	adds	r5, r3, #1
    cfce:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
    cfd2:	1aad      	subs	r5, r5, r2
    cfd4:	b22d      	sxth	r5, r5
        sh_buf_tmp = sh_buf + corner_size - 1;
    cfd6:	46c8      	mov	r8, r9
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
    cfd8:	f9bd 4076 	ldrsh.w	r4, [sp, #118]	; 0x76
    cfdc:	1ae4      	subs	r4, r4, r3
        sh_buf_tmp = sh_buf + corner_size - 1;
    cfde:	f109 33ff 	add.w	r3, r9, #4294967295
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
    cfe2:	fb09 3404 	mla	r4, r9, r4, r3
    cfe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cfe8:	441c      	add	r4, r3
    cfea:	f10d 0277 	add.w	r2, sp, #119	; 0x77
    uint8_t * d8 = (uint8_t *)dst;
    cfee:	ab22      	add	r3, sp, #136	; 0x88
    while(len) {
    cff0:	a824      	add	r0, sp, #144	; 0x90
        *d8 = *s8;
    cff2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    cff6:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    cffa:	4283      	cmp	r3, r0
    cffc:	d1f9      	bne.n	cff2 <lv_draw_rect+0xcce>
        fa.y1 = fa.y2;
    cffe:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    d002:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
        for(y = 0; y < h; y++) {
    d006:	46a9      	mov	r9, r5
    d008:	2d00      	cmp	r5, #0
    d00a:	dd4b      	ble.n	d0a4 <lv_draw_rect+0xd80>
    d00c:	2500      	movs	r5, #0
            _lv_memset(mask_buf, opa_tmp, w);
    d00e:	4f23      	ldr	r7, [pc, #140]	; (d09c <lv_draw_rect+0xd78>)
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    d010:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    d014:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    d018:	e02a      	b.n	d070 <lv_draw_rect+0xd4c>
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
    d01a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    d01e:	d12a      	bne.n	d076 <lv_draw_rect+0xd52>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
    d020:	4659      	mov	r1, fp
    d022:	e02c      	b.n	d07e <lv_draw_rect+0xd5a>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    d024:	9b08      	ldr	r3, [sp, #32]
    d026:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
    d02a:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
    d02e:	9805      	ldr	r0, [sp, #20]
    d030:	4e17      	ldr	r6, [pc, #92]	; (d090 <lv_draw_rect+0xd6c>)
    d032:	47b0      	blx	r6
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    d034:	2801      	cmp	r0, #1
    d036:	bf08      	it	eq
    d038:	2002      	moveq	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    d03a:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    d03e:	9302      	str	r3, [sp, #8]
    d040:	23ff      	movs	r3, #255	; 0xff
    d042:	9301      	str	r3, [sp, #4]
    d044:	9000      	str	r0, [sp, #0]
    d046:	9b05      	ldr	r3, [sp, #20]
    d048:	f8ba 201e 	ldrh.w	r2, [sl, #30]
    d04c:	a922      	add	r1, sp, #136	; 0x88
    d04e:	9804      	ldr	r0, [sp, #16]
    d050:	4e10      	ldr	r6, [pc, #64]	; (d094 <lv_draw_rect+0xd70>)
    d052:	47b0      	blx	r6
            fa.y1--;
    d054:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    d058:	3b01      	subs	r3, #1
    d05a:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
            fa.y2--;
    d05e:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    d062:	3b01      	subs	r3, #1
    d064:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            sh_buf_tmp += corner_size;
    d068:	4444      	add	r4, r8
        for(y = 0; y < h; y++) {
    d06a:	3501      	adds	r5, #1
    d06c:	454d      	cmp	r5, r9
    d06e:	d017      	beq.n	d0a0 <lv_draw_rect+0xd7c>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
    d070:	7823      	ldrb	r3, [r4, #0]
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
    d072:	2bff      	cmp	r3, #255	; 0xff
    d074:	d0d1      	beq.n	d01a <lv_draw_rect+0xcf6>
    d076:	fb03 f30b 	mul.w	r3, r3, fp
    d07a:	f3c3 2107 	ubfx	r1, r3, #8, #8
            _lv_memset(mask_buf, opa_tmp, w);
    d07e:	9a08      	ldr	r2, [sp, #32]
    d080:	9805      	ldr	r0, [sp, #20]
    d082:	47b8      	blx	r7
            if(simple_mode) {
    d084:	9b07      	ldr	r3, [sp, #28]
    d086:	2b00      	cmp	r3, #0
    d088:	d0cc      	beq.n	d024 <lv_draw_rect+0xd00>
                mask_res = LV_DRAW_MASK_RES_CHANGED;
    d08a:	2002      	movs	r0, #2
    d08c:	e7d5      	b.n	d03a <lv_draw_rect+0xd16>
    d08e:	bf00      	nop
    d090:	0000be11 	.word	0x0000be11
    d094:	00007745 	.word	0x00007745
    d098:	0001150d 	.word	0x0001150d
    d09c:	00012a75 	.word	0x00012a75
    d0a0:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    a.x1 = sh_area.x1 + corner_size;
    d0a4:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
    d0a8:	445b      	add	r3, fp
    d0aa:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    a.x2 = sh_area.x2 - corner_size;
    d0ae:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
    d0b2:	eba3 030b 	sub.w	r3, r3, fp
    d0b6:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    a.y1 = sh_area.y1 + corner_size;
    d0ba:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
    d0be:	445b      	add	r3, fp
    d0c0:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    a.y2 = sh_area.y2 - corner_size;
    d0c4:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
    d0c8:	eba3 0b0b 	sub.w	fp, r3, fp
    d0cc:	f8ad b076 	strh.w	fp, [sp, #118]	; 0x76
    has_com = _lv_area_intersect(&ca, &a, clip);
    d0d0:	9a04      	ldr	r2, [sp, #16]
    d0d2:	a91c      	add	r1, sp, #112	; 0x70
    d0d4:	a81e      	add	r0, sp, #120	; 0x78
    d0d6:	4ba2      	ldr	r3, [pc, #648]	; (d360 <lv_draw_rect+0x103c>)
    d0d8:	4798      	blx	r3
    if(has_com && simple_mode == false) {
    d0da:	2800      	cmp	r0, #0
    d0dc:	d050      	beq.n	d180 <lv_draw_rect+0xe5c>
    d0de:	9b07      	ldr	r3, [sp, #28]
    d0e0:	2b00      	cmp	r3, #0
    d0e2:	d14d      	bne.n	d180 <lv_draw_rect+0xe5c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    d0e4:	f8bd 607c 	ldrh.w	r6, [sp, #124]	; 0x7c
    d0e8:	3601      	adds	r6, #1
    d0ea:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
    d0ee:	1af6      	subs	r6, r6, r3
    d0f0:	b236      	sxth	r6, r6
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    d0f2:	f8bd 407e 	ldrh.w	r4, [sp, #126]	; 0x7e
    d0f6:	3401      	adds	r4, #1
    d0f8:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
    d0fc:	1ae4      	subs	r4, r4, r3
    d0fe:	b224      	sxth	r4, r4
    d100:	f10d 0277 	add.w	r2, sp, #119	; 0x77
    uint8_t * d8 = (uint8_t *)dst;
    d104:	ab22      	add	r3, sp, #136	; 0x88
    while(len) {
    d106:	a824      	add	r0, sp, #144	; 0x90
        *d8 = *s8;
    d108:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    d10c:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    d110:	4283      	cmp	r3, r0
    d112:	d1f9      	bne.n	d108 <lv_draw_rect+0xde4>
        fa.y2 = fa.y1;
    d114:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    d118:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
        for(y = 0; y < h; y++) {
    d11c:	46a3      	mov	fp, r4
    d11e:	2c00      	cmp	r4, #0
    d120:	dd2e      	ble.n	d180 <lv_draw_rect+0xe5c>
    d122:	2500      	movs	r5, #0
            _lv_memset(mask_buf, dsc->shadow_opa, w);
    d124:	f8df 9254 	ldr.w	r9, [pc, #596]	; d37c <lv_draw_rect+0x1058>
            mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    d128:	f8df 8254 	ldr.w	r8, [pc, #596]	; d380 <lv_draw_rect+0x105c>
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    d12c:	4f8d      	ldr	r7, [pc, #564]	; (d364 <lv_draw_rect+0x1040>)
            _lv_memset(mask_buf, dsc->shadow_opa, w);
    d12e:	4632      	mov	r2, r6
    d130:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
    d134:	9805      	ldr	r0, [sp, #20]
    d136:	47c8      	blx	r9
            mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    d138:	ac30      	add	r4, sp, #192	; 0xc0
    d13a:	4633      	mov	r3, r6
    d13c:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
    d140:	f934 1d38 	ldrsh.w	r1, [r4, #-56]!
    d144:	9805      	ldr	r0, [sp, #20]
    d146:	47c0      	blx	r8
            if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    d148:	2801      	cmp	r0, #1
    d14a:	bf08      	it	eq
    d14c:	2002      	moveq	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    d14e:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    d152:	9302      	str	r3, [sp, #8]
    d154:	23ff      	movs	r3, #255	; 0xff
    d156:	9301      	str	r3, [sp, #4]
    d158:	9000      	str	r0, [sp, #0]
    d15a:	9b05      	ldr	r3, [sp, #20]
    d15c:	f8ba 201e 	ldrh.w	r2, [sl, #30]
    d160:	4621      	mov	r1, r4
    d162:	9804      	ldr	r0, [sp, #16]
    d164:	47b8      	blx	r7
            fa.y1++;
    d166:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    d16a:	3301      	adds	r3, #1
    d16c:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
            fa.y2++;
    d170:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    d174:	3301      	adds	r3, #1
    d176:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
        for(y = 0; y < h; y++) {
    d17a:	3501      	adds	r5, #1
    d17c:	455d      	cmp	r5, fp
    d17e:	d1d6      	bne.n	d12e <lv_draw_rect+0xe0a>
    lv_draw_mask_remove_id(mask_rout_id);
    d180:	980e      	ldr	r0, [sp, #56]	; 0x38
    d182:	4b79      	ldr	r3, [pc, #484]	; (d368 <lv_draw_rect+0x1044>)
    d184:	4798      	blx	r3
    _lv_mem_buf_release(mask_buf);
    d186:	9805      	ldr	r0, [sp, #20]
    d188:	4c78      	ldr	r4, [pc, #480]	; (d36c <lv_draw_rect+0x1048>)
    d18a:	47a0      	blx	r4
    _lv_mem_buf_release(sh_buf);
    d18c:	980a      	ldr	r0, [sp, #40]	; 0x28
    d18e:	47a0      	blx	r4
    if(dsc->bg_opa <= LV_OPA_MIN) return;
    d190:	f89a 700c 	ldrb.w	r7, [sl, #12]
    d194:	2f05      	cmp	r7, #5
    d196:	d942      	bls.n	d21e <lv_draw_rect+0xefa>
    d198:	9a06      	ldr	r2, [sp, #24]
    d19a:	1e53      	subs	r3, r2, #1
    d19c:	1dd0      	adds	r0, r2, #7
    d19e:	aa1a      	add	r2, sp, #104	; 0x68
        *d8 = *s8;
    d1a0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    d1a4:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    d1a8:	4298      	cmp	r0, r3
    d1aa:	d1f9      	bne.n	d1a0 <lv_draw_rect+0xe7c>
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
    d1ac:	f9ba 3010 	ldrsh.w	r3, [sl, #16]
    d1b0:	2b01      	cmp	r3, #1
    d1b2:	dd24      	ble.n	d1fe <lv_draw_rect+0xeda>
    d1b4:	f89a 3014 	ldrb.w	r3, [sl, #20]
    d1b8:	2bf9      	cmp	r3, #249	; 0xf9
    d1ba:	d920      	bls.n	d1fe <lv_draw_rect+0xeda>
    d1bc:	f9ba 3000 	ldrsh.w	r3, [sl]
    d1c0:	b1eb      	cbz	r3, d1fe <lv_draw_rect+0xeda>
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
    d1c2:	f8ba 3012 	ldrh.w	r3, [sl, #18]
    d1c6:	f3c3 0280 	ubfx	r2, r3, #2, #1
    d1ca:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
    d1ce:	440a      	add	r2, r1
    d1d0:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
    d1d4:	f3c3 0240 	ubfx	r2, r3, #1, #1
    d1d8:	f8bd 106a 	ldrh.w	r1, [sp, #106]	; 0x6a
    d1dc:	440a      	add	r2, r1
    d1de:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
        coords_bg.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
    d1e2:	f3c3 01c0 	ubfx	r1, r3, #3, #1
    d1e6:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
    d1ea:	1a52      	subs	r2, r2, r1
    d1ec:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
        coords_bg.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
    d1f0:	f003 0301 	and.w	r3, r3, #1
    d1f4:	f8bd 206e 	ldrh.w	r2, [sp, #110]	; 0x6e
    d1f8:	1ad3      	subs	r3, r2, r3
    d1fa:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
    d1fe:	2ffb      	cmp	r7, #251	; 0xfb
    d200:	bf28      	it	cs
    d202:	27ff      	movcs	r7, #255	; 0xff
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    d204:	4b5a      	ldr	r3, [pc, #360]	; (d370 <lv_draw_rect+0x104c>)
    d206:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    d208:	4b5a      	ldr	r3, [pc, #360]	; (d374 <lv_draw_rect+0x1050>)
    d20a:	4798      	blx	r3
    d20c:	4680      	mov	r8, r0
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
    d20e:	9a04      	ldr	r2, [sp, #16]
    d210:	a91a      	add	r1, sp, #104	; 0x68
    d212:	a81c      	add	r0, sp, #112	; 0x70
    d214:	4b52      	ldr	r3, [pc, #328]	; (d360 <lv_draw_rect+0x103c>)
    d216:	4798      	blx	r3
    if(is_common == false) return;
    d218:	2800      	cmp	r0, #0
    d21a:	f040 80b3 	bne.w	d384 <lv_draw_rect+0x1060>
    _lv_mem_buf_release(mask_buf);
}

static void draw_pattern(const lv_area_t * coords, const lv_area_t * clip, lv_draw_rect_dsc_t * dsc)
{
    if(dsc->pattern_image == NULL) return;
    d21e:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
    d222:	b120      	cbz	r0, d22e <lv_draw_rect+0xf0a>
    if(dsc->pattern_opa <= LV_OPA_MIN) return;
    d224:	f89a 3036 	ldrb.w	r3, [sl, #54]	; 0x36
    d228:	2b05      	cmp	r3, #5
    d22a:	f200 83eb 	bhi.w	da04 <lv_draw_rect+0x16e0>
    if(dsc->border_opa <= LV_OPA_MIN) return;
    d22e:	f89a 4014 	ldrb.w	r4, [sl, #20]
    d232:	2c05      	cmp	r4, #5
    d234:	d915      	bls.n	d262 <lv_draw_rect+0xf3e>
    if(dsc->border_width == 0) return;
    d236:	f9ba 3010 	ldrsh.w	r3, [sl, #16]
    d23a:	b193      	cbz	r3, d262 <lv_draw_rect+0xf3e>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
    d23c:	f9ba 3012 	ldrsh.w	r3, [sl, #18]
    d240:	b17b      	cbz	r3, d262 <lv_draw_rect+0xf3e>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
    d242:	2cfb      	cmp	r4, #251	; 0xfb
    d244:	bf28      	it	cs
    d246:	24ff      	movcs	r4, #255	; 0xff
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    d248:	4b49      	ldr	r3, [pc, #292]	; (d370 <lv_draw_rect+0x104c>)
    d24a:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    d24c:	4b49      	ldr	r3, [pc, #292]	; (d374 <lv_draw_rect+0x1050>)
    d24e:	4798      	blx	r3
    d250:	4605      	mov	r5, r0
    is_common = _lv_area_intersect(&draw_area, coords, clip);
    d252:	9a04      	ldr	r2, [sp, #16]
    d254:	9906      	ldr	r1, [sp, #24]
    d256:	a818      	add	r0, sp, #96	; 0x60
    d258:	4b41      	ldr	r3, [pc, #260]	; (d360 <lv_draw_rect+0x103c>)
    d25a:	4798      	blx	r3
    if(is_common == false) return;
    d25c:	2800      	cmp	r0, #0
    d25e:	f040 8546 	bne.w	dcee <lv_draw_rect+0x19ca>
}


static void draw_value(const lv_area_t * coords, const lv_area_t * clip, lv_draw_rect_dsc_t * dsc)
{
    if(dsc->value_str == NULL) return;
    d262:	f8da 103c 	ldr.w	r1, [sl, #60]	; 0x3c
    d266:	b121      	cbz	r1, d272 <lv_draw_rect+0xf4e>
    if(dsc->value_opa <= LV_OPA_MIN) return;
    d268:	f89a 3044 	ldrb.w	r3, [sl, #68]	; 0x44
    d26c:	2b05      	cmp	r3, #5
    d26e:	f201 8053 	bhi.w	e318 <lv_draw_rect+0x1ff4>
    if(dsc->outline_opa <= LV_OPA_MIN) return;
    d272:	f89a b01c 	ldrb.w	fp, [sl, #28]
    d276:	f1bb 0f05 	cmp.w	fp, #5
    d27a:	d96d      	bls.n	d358 <lv_draw_rect+0x1034>
    if(dsc->outline_width == 0) return;
    d27c:	f9ba 3018 	ldrsh.w	r3, [sl, #24]
    d280:	2b00      	cmp	r3, #0
    d282:	d069      	beq.n	d358 <lv_draw_rect+0x1034>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
    d284:	f1bb 0ffb 	cmp.w	fp, #251	; 0xfb
    d288:	bf28      	it	cs
    d28a:	f04f 0bff 	movcs.w	fp, #255	; 0xff
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
    d28e:	4b3a      	ldr	r3, [pc, #232]	; (d378 <lv_draw_rect+0x1054>)
    d290:	4798      	blx	r3
    d292:	9009      	str	r0, [sp, #36]	; 0x24
    d294:	9a06      	ldr	r2, [sp, #24]
    d296:	1e53      	subs	r3, r2, #1
    d298:	1dd0      	adds	r0, r2, #7
    uint8_t * d8 = (uint8_t *)dst;
    d29a:	aa16      	add	r2, sp, #88	; 0x58
        *d8 = *s8;
    d29c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    d2a0:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    d2a4:	4283      	cmp	r3, r0
    d2a6:	d1f9      	bne.n	d29c <lv_draw_rect+0xf78>
    area_inner.x1 -= dsc->outline_pad;
    d2a8:	f8ba 501a 	ldrh.w	r5, [sl, #26]
    d2ac:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
    d2b0:	1b5b      	subs	r3, r3, r5
    d2b2:	b29b      	uxth	r3, r3
    d2b4:	9306      	str	r3, [sp, #24]
    d2b6:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    area_inner.y1 -= dsc->outline_pad;
    d2ba:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
    d2be:	1b5b      	subs	r3, r3, r5
    d2c0:	b29b      	uxth	r3, r3
    d2c2:	9307      	str	r3, [sp, #28]
    d2c4:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    area_inner.x2 += dsc->outline_pad;
    d2c8:	f8bd 605c 	ldrh.w	r6, [sp, #92]	; 0x5c
    d2cc:	442e      	add	r6, r5
    d2ce:	b2b6      	uxth	r6, r6
    d2d0:	f8ad 605c 	strh.w	r6, [sp, #92]	; 0x5c
    area_inner.y2 += dsc->outline_pad;
    d2d4:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
    d2d8:	441d      	add	r5, r3
    d2da:	b2ad      	uxth	r5, r5
    d2dc:	f8ad 505e 	strh.w	r5, [sp, #94]	; 0x5e
    int32_t rin = dsc->radius;
    d2e0:	f9ba 3000 	ldrsh.w	r3, [sl]
    d2e4:	9308      	str	r3, [sp, #32]
    int32_t rout = rin + dsc->outline_width;
    d2e6:	f9ba 3018 	ldrsh.w	r3, [sl, #24]
    d2ea:	9305      	str	r3, [sp, #20]
    d2ec:	f10d 0257 	add.w	r2, sp, #87	; 0x57
    uint8_t * d8 = (uint8_t *)dst;
    d2f0:	ab18      	add	r3, sp, #96	; 0x60
    while(len) {
    d2f2:	a81a      	add	r0, sp, #104	; 0x68
        *d8 = *s8;
    d2f4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    d2f8:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    d2fc:	4283      	cmp	r3, r0
    d2fe:	d1f9      	bne.n	d2f4 <lv_draw_rect+0xfd0>
    area_outer.x1 -= dsc->outline_width;
    d300:	f8bd 4014 	ldrh.w	r4, [sp, #20]
    d304:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
    d308:	eba9 0904 	sub.w	r9, r9, r4
    d30c:	fa1f f389 	uxth.w	r3, r9
    d310:	930a      	str	r3, [sp, #40]	; 0x28
    d312:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    area_outer.x2 += dsc->outline_width;
    d316:	f8bd 7064 	ldrh.w	r7, [sp, #100]	; 0x64
    d31a:	4427      	add	r7, r4
    d31c:	b2bf      	uxth	r7, r7
    d31e:	f8ad 7064 	strh.w	r7, [sp, #100]	; 0x64
    area_outer.y1 -= dsc->outline_width;
    d322:	f8bd 8062 	ldrh.w	r8, [sp, #98]	; 0x62
    d326:	eba8 0804 	sub.w	r8, r8, r4
    d32a:	fa1f f888 	uxth.w	r8, r8
    d32e:	f8ad 8062 	strh.w	r8, [sp, #98]	; 0x62
    area_outer.y2 += dsc->outline_width;
    d332:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
    d336:	441c      	add	r4, r3
    d338:	b2a4      	uxth	r4, r4
    d33a:	f8ad 4066 	strh.w	r4, [sp, #102]	; 0x66
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    d33e:	4b0c      	ldr	r3, [pc, #48]	; (d370 <lv_draw_rect+0x104c>)
    d340:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    d342:	4b0c      	ldr	r3, [pc, #48]	; (d374 <lv_draw_rect+0x1050>)
    d344:	4798      	blx	r3
    d346:	4681      	mov	r9, r0
    is_common = _lv_area_intersect(&draw_area, &area_outer, clip);
    d348:	9a04      	ldr	r2, [sp, #16]
    d34a:	a918      	add	r1, sp, #96	; 0x60
    d34c:	a81a      	add	r0, sp, #104	; 0x68
    d34e:	4b04      	ldr	r3, [pc, #16]	; (d360 <lv_draw_rect+0x103c>)
    d350:	4798      	blx	r3
    if(is_common == false) return;
    d352:	2800      	cmp	r0, #0
    d354:	f041 8044 	bne.w	e3e0 <lv_draw_rect+0x20bc>
}
    d358:	b031      	add	sp, #196	; 0xc4
    d35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d35e:	bf00      	nop
    d360:	0001150d 	.word	0x0001150d
    d364:	00007745 	.word	0x00007745
    d368:	0000be61 	.word	0x0000be61
    d36c:	00012565 	.word	0x00012565
    d370:	00005f5d 	.word	0x00005f5d
    d374:	00010fd1 	.word	0x00010fd1
    d378:	0000beb9 	.word	0x0000beb9
    d37c:	00012a75 	.word	0x00012a75
    d380:	0000be11 	.word	0x0000be11
    draw_area.x1 -= disp_area->x1;
    d384:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    d388:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
    d38c:	1a5b      	subs	r3, r3, r1
    d38e:	b29a      	uxth	r2, r3
    d390:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
    draw_area.y1 -= disp_area->y1;
    d394:	f8b8 0012 	ldrh.w	r0, [r8, #18]
    d398:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    d39c:	1a1b      	subs	r3, r3, r0
    d39e:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    draw_area.x2 -= disp_area->x1;
    d3a2:	f8bd 3074 	ldrh.w	r3, [sp, #116]	; 0x74
    d3a6:	1a5b      	subs	r3, r3, r1
    d3a8:	b29b      	uxth	r3, r3
    d3aa:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    draw_area.y2 -= disp_area->y1;
    d3ae:	f8bd 1076 	ldrh.w	r1, [sp, #118]	; 0x76
    d3b2:	1a09      	subs	r1, r1, r0
    d3b4:	f8ad 1076 	strh.w	r1, [sp, #118]	; 0x76
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    d3b8:	3301      	adds	r3, #1
    d3ba:	1a9b      	subs	r3, r3, r2
    d3bc:	b21b      	sxth	r3, r3
    d3be:	9309      	str	r3, [sp, #36]	; 0x24
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
    d3c0:	930a      	str	r3, [sp, #40]	; 0x28
    d3c2:	4618      	mov	r0, r3
    d3c4:	4b93      	ldr	r3, [pc, #588]	; (d614 <lv_draw_rect+0x12f0>)
    d3c6:	4798      	blx	r3
    d3c8:	9005      	str	r0, [sp, #20]
    uint16_t other_mask_cnt = lv_draw_mask_get_cnt();
    d3ca:	4b93      	ldr	r3, [pc, #588]	; (d618 <lv_draw_rect+0x12f4>)
    d3cc:	4798      	blx	r3
    d3ce:	b283      	uxth	r3, r0
    d3d0:	930b      	str	r3, [sp, #44]	; 0x2c
    if(other_mask_cnt) simple_mode = false;
    d3d2:	bb43      	cbnz	r3, d426 <lv_draw_rect+0x1102>
    else if(dsc->bg_grad_dir == LV_GRAD_DIR_HOR) simple_mode = false;
    d3d4:	f89a 3006 	ldrb.w	r3, [sl, #6]
    d3d8:	3b02      	subs	r3, #2
    d3da:	bf18      	it	ne
    d3dc:	2301      	movne	r3, #1
    d3de:	9307      	str	r3, [sp, #28]
    d3e0:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
    d3e4:	3501      	adds	r5, #1
    d3e6:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    d3ea:	1aed      	subs	r5, r5, r3
    d3ec:	b22d      	sxth	r5, r5
    int32_t coords_w = lv_area_get_width(&coords_bg);
    d3ee:	462c      	mov	r4, r5
    int32_t rout = dsc->radius;
    d3f0:	f9ba 2000 	ldrsh.w	r2, [sl]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    d3f4:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
    d3f8:	3301      	adds	r3, #1
    d3fa:	f8bd 606a 	ldrh.w	r6, [sp, #106]	; 0x6a
    d3fe:	1b9b      	subs	r3, r3, r6
    int32_t coords_h = lv_area_get_height(&coords_bg);
    d400:	b21e      	sxth	r6, r3
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
    d402:	4633      	mov	r3, r6
    d404:	42ae      	cmp	r6, r5
    d406:	bfa8      	it	ge
    d408:	462b      	movge	r3, r5
    if(rout > short_side >> 1) rout = short_side >> 1;
    d40a:	105e      	asrs	r6, r3, #1
    d40c:	4296      	cmp	r6, r2
    d40e:	bfa8      	it	ge
    d410:	4616      	movge	r6, r2
    if(simple_mode && rout == 0 && (dsc->bg_grad_dir == LV_GRAD_DIR_NONE)) {
    d412:	9b07      	ldr	r3, [sp, #28]
    d414:	b1db      	cbz	r3, d44e <lv_draw_rect+0x112a>
    d416:	b9d6      	cbnz	r6, d44e <lv_draw_rect+0x112a>
    d418:	f89a 3006 	ldrb.w	r3, [sl, #6]
    d41c:	b133      	cbz	r3, d42c <lv_draw_rect+0x1108>
    int16_t mask_rout_id = LV_MASK_ID_INV;
    d41e:	f04f 33ff 	mov.w	r3, #4294967295
    d422:	930e      	str	r3, [sp, #56]	; 0x38
    d424:	e021      	b.n	d46a <lv_draw_rect+0x1146>
    if(other_mask_cnt) simple_mode = false;
    d426:	2300      	movs	r3, #0
    d428:	9307      	str	r3, [sp, #28]
    d42a:	e7d9      	b.n	d3e0 <lv_draw_rect+0x10bc>
        _lv_blend_fill(clip, &coords_bg,
    d42c:	f89a 300d 	ldrb.w	r3, [sl, #13]
    d430:	9302      	str	r3, [sp, #8]
    d432:	9701      	str	r7, [sp, #4]
    d434:	2301      	movs	r3, #1
    d436:	9300      	str	r3, [sp, #0]
    d438:	2300      	movs	r3, #0
    d43a:	f8ba 2002 	ldrh.w	r2, [sl, #2]
    d43e:	a91a      	add	r1, sp, #104	; 0x68
    d440:	9804      	ldr	r0, [sp, #16]
    d442:	4c76      	ldr	r4, [pc, #472]	; (d61c <lv_draw_rect+0x12f8>)
    d444:	47a0      	blx	r4
    int16_t mask_rout_id = LV_MASK_ID_INV;
    d446:	f04f 33ff 	mov.w	r3, #4294967295
    d44a:	930e      	str	r3, [sp, #56]	; 0x38
    d44c:	e276      	b.n	d93c <lv_draw_rect+0x1618>
        if(rout > 0) {
    d44e:	2e00      	cmp	r6, #0
    d450:	dd32      	ble.n	d4b8 <lv_draw_rect+0x1194>
            lv_draw_mask_radius_init(&mask_rout_param, &coords_bg, rout, false);
    d452:	2300      	movs	r3, #0
    d454:	4632      	mov	r2, r6
    d456:	a91a      	add	r1, sp, #104	; 0x68
    d458:	a829      	add	r0, sp, #164	; 0xa4
    d45a:	f8df 91d0 	ldr.w	r9, [pc, #464]	; d62c <lv_draw_rect+0x1308>
    d45e:	47c8      	blx	r9
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
    d460:	2100      	movs	r1, #0
    d462:	a829      	add	r0, sp, #164	; 0xa4
    d464:	4b6e      	ldr	r3, [pc, #440]	; (d620 <lv_draw_rect+0x12fc>)
    d466:	4798      	blx	r3
    d468:	900e      	str	r0, [sp, #56]	; 0x38
        lv_color_t grad_color = dsc->bg_color;
    d46a:	f8ba b002 	ldrh.w	fp, [sl, #2]
        if(dsc->bg_grad_dir == LV_GRAD_DIR_HOR && dsc->bg_color.full != dsc->bg_grad_color.full) {
    d46e:	f89a 3006 	ldrb.w	r3, [sl, #6]
    d472:	2b02      	cmp	r3, #2
    d474:	d024      	beq.n	d4c0 <lv_draw_rect+0x119c>
        lv_color_t * grad_map = NULL;
    d476:	2300      	movs	r3, #0
    d478:	930d      	str	r3, [sp, #52]	; 0x34
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    d47a:	f9bd 206c 	ldrsh.w	r2, [sp, #108]	; 0x6c
    d47e:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
    d482:	1c53      	adds	r3, r2, #1
    d484:	1a5b      	subs	r3, r3, r1
        if(lv_area_get_width(&coords_bg) - 2 * rout > SPLIT_LIMIT) split = true;
    d486:	b21b      	sxth	r3, r3
    d488:	eba3 0946 	sub.w	r9, r3, r6, lsl #1
        fill_area.x1 = coords_bg.x1;
    d48c:	f8ad 1078 	strh.w	r1, [sp, #120]	; 0x78
        fill_area.x2 = coords_bg.x2;
    d490:	f8ad 207c 	strh.w	r2, [sp, #124]	; 0x7c
        fill_area.y1 = disp_area->y1 + draw_area.y1;
    d494:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
    d498:	f8b8 3012 	ldrh.w	r3, [r8, #18]
    d49c:	4413      	add	r3, r2
    d49e:	b21b      	sxth	r3, r3
    d4a0:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
        fill_area.y2 = fill_area.y1;
    d4a4:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    d4a8:	4615      	mov	r5, r2
    d4aa:	f9bd 3076 	ldrsh.w	r3, [sp, #118]	; 0x76
    d4ae:	429a      	cmp	r2, r3
    d4b0:	f300 8237 	bgt.w	d922 <lv_draw_rect+0x15fe>
                _lv_blend_fill(clip, &fill_area2,
    d4b4:	9708      	str	r7, [sp, #32]
    d4b6:	e0fa      	b.n	d6ae <lv_draw_rect+0x138a>
    int16_t mask_rout_id = LV_MASK_ID_INV;
    d4b8:	f04f 33ff 	mov.w	r3, #4294967295
    d4bc:	930e      	str	r3, [sp, #56]	; 0x38
    d4be:	e7d4      	b.n	d46a <lv_draw_rect+0x1146>
        if(dsc->bg_grad_dir == LV_GRAD_DIR_HOR && dsc->bg_color.full != dsc->bg_grad_color.full) {
    d4c0:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    d4c4:	459b      	cmp	fp, r3
    d4c6:	f000 8089 	beq.w	d5dc <lv_draw_rect+0x12b8>
            grad_map = _lv_mem_buf_get(coords_w * sizeof(lv_color_t));
    d4ca:	0068      	lsls	r0, r5, #1
    d4cc:	4b51      	ldr	r3, [pc, #324]	; (d614 <lv_draw_rect+0x12f0>)
    d4ce:	4798      	blx	r3
    d4d0:	900d      	str	r0, [sp, #52]	; 0x34
            for(i = 0; i < coords_w; i++) {
    d4d2:	2d00      	cmp	r5, #0
    d4d4:	ddd1      	ble.n	d47a <lv_draw_rect+0x1156>
    d4d6:	f04f 0900 	mov.w	r9, #0
    d4da:	9608      	str	r6, [sp, #32]
    d4dc:	4606      	mov	r6, r0
    d4de:	e01b      	b.n	d518 <lv_draw_rect+0x11f4>
    if(i <= min) return dsc->bg_color;
    d4e0:	f89a 3002 	ldrb.w	r3, [sl, #2]
    d4e4:	f003 031f 	and.w	r3, r3, #31
    d4e8:	f8ba 1002 	ldrh.w	r1, [sl, #2]
    d4ec:	f3c1 1145 	ubfx	r1, r1, #5, #6
    d4f0:	f89a 2003 	ldrb.w	r2, [sl, #3]
    d4f4:	08d2      	lsrs	r2, r2, #3
                grad_map[i] = grad_get(dsc, coords_w, i);
    d4f6:	7828      	ldrb	r0, [r5, #0]
    d4f8:	f363 0004 	bfi	r0, r3, #0, #5
    d4fc:	7028      	strb	r0, [r5, #0]
    d4fe:	882b      	ldrh	r3, [r5, #0]
    d500:	f361 134a 	bfi	r3, r1, #5, #6
    d504:	802b      	strh	r3, [r5, #0]
    d506:	0a1b      	lsrs	r3, r3, #8
    d508:	f362 03c7 	bfi	r3, r2, #3, #5
    d50c:	706b      	strb	r3, [r5, #1]
            for(i = 0; i < coords_w; i++) {
    d50e:	f109 0901 	add.w	r9, r9, #1
    d512:	3602      	adds	r6, #2
    d514:	454c      	cmp	r4, r9
    d516:	d05f      	beq.n	d5d8 <lv_draw_rect+0x12b4>
                grad_map[i] = grad_get(dsc, coords_w, i);
    d518:	4635      	mov	r5, r6
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
    d51a:	f9ba 0008 	ldrsh.w	r0, [sl, #8]
    d51e:	fb00 f304 	mul.w	r3, r0, r4
    d522:	121b      	asrs	r3, r3, #8
    if(i <= min) return dsc->bg_color;
    d524:	fa0f f189 	sxth.w	r1, r9
    d528:	428b      	cmp	r3, r1
    d52a:	dad9      	bge.n	d4e0 <lv_draw_rect+0x11bc>
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
    d52c:	f9ba 200a 	ldrsh.w	r2, [sl, #10]
    d530:	fb02 fe04 	mul.w	lr, r2, r4
    if(i >= max) return dsc->bg_grad_color;
    d534:	ebb1 2f2e 	cmp.w	r1, lr, asr #8
    d538:	da42      	bge.n	d5c0 <lv_draw_rect+0x129c>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
    d53a:	1a12      	subs	r2, r2, r0
    d = (s * d) >> 8;
    d53c:	fb04 f202 	mul.w	r2, r4, r2
    i -= min;
    d540:	eba9 0303 	sub.w	r3, r9, r3
    lv_opa_t mix = (i * 255) / d;
    d544:	b21b      	sxth	r3, r3
    d546:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
    d = (s * d) >> 8;
    d54a:	1212      	asrs	r2, r2, #8
    lv_opa_t mix = (i * 255) / d;
    d54c:	fb93 f3f2 	sdiv	r3, r3, r2
    d550:	b2db      	uxtb	r3, r3
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    d552:	f1c3 0eff 	rsb	lr, r3, #255	; 0xff
    d556:	f89a 2005 	ldrb.w	r2, [sl, #5]
    d55a:	08d2      	lsrs	r2, r2, #3
    d55c:	f89a 1003 	ldrb.w	r1, [sl, #3]
    d560:	08c9      	lsrs	r1, r1, #3
    d562:	fb0e f101 	mul.w	r1, lr, r1
    d566:	fb03 1202 	mla	r2, r3, r2, r1
    d56a:	eb02 2102 	add.w	r1, r2, r2, lsl #8
    d56e:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
    d572:	f3c2 52c4 	ubfx	r2, r2, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    d576:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    d57a:	f3c1 1145 	ubfx	r1, r1, #5, #6
    d57e:	f8ba 0002 	ldrh.w	r0, [sl, #2]
    d582:	f3c0 1045 	ubfx	r0, r0, #5, #6
    d586:	fb0e f000 	mul.w	r0, lr, r0
    d58a:	fb03 0101 	mla	r1, r3, r1, r0
    d58e:	eb01 2001 	add.w	r0, r1, r1, lsl #8
    d592:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
    d596:	f3c1 51c5 	ubfx	r1, r1, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    d59a:	f89a 0004 	ldrb.w	r0, [sl, #4]
    d59e:	f000 001f 	and.w	r0, r0, #31
    d5a2:	f89a c002 	ldrb.w	ip, [sl, #2]
    d5a6:	f00c 0c1f 	and.w	ip, ip, #31
    d5aa:	fb0e fe0c 	mul.w	lr, lr, ip
    d5ae:	fb03 e300 	mla	r3, r3, r0, lr
    d5b2:	eb03 2003 	add.w	r0, r3, r3, lsl #8
    d5b6:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
    d5ba:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    d5be:	e79a      	b.n	d4f6 <lv_draw_rect+0x11d2>
    if(i >= max) return dsc->bg_grad_color;
    d5c0:	f89a 3004 	ldrb.w	r3, [sl, #4]
    d5c4:	f003 031f 	and.w	r3, r3, #31
    d5c8:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    d5cc:	f3c1 1145 	ubfx	r1, r1, #5, #6
    d5d0:	f89a 2005 	ldrb.w	r2, [sl, #5]
    d5d4:	08d2      	lsrs	r2, r2, #3
    d5d6:	e78e      	b.n	d4f6 <lv_draw_rect+0x11d2>
    d5d8:	9e08      	ldr	r6, [sp, #32]
    d5da:	e74e      	b.n	d47a <lv_draw_rect+0x1156>
        lv_color_t * grad_map = NULL;
    d5dc:	2300      	movs	r3, #0
    d5de:	930d      	str	r3, [sp, #52]	; 0x34
    d5e0:	e74b      	b.n	d47a <lv_draw_rect+0x1156>
                    _lv_memset_ff(mask_buf, draw_area_w);
    d5e2:	990a      	ldr	r1, [sp, #40]	; 0x28
    d5e4:	9f05      	ldr	r7, [sp, #20]
    d5e6:	4638      	mov	r0, r7
    d5e8:	4b0e      	ldr	r3, [pc, #56]	; (d624 <lv_draw_rect+0x1300>)
    d5ea:	4798      	blx	r3
                    mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    d5ec:	f8b8 2012 	ldrh.w	r2, [r8, #18]
    d5f0:	442a      	add	r2, r5
    d5f2:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    d5f6:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
    d5fa:	4419      	add	r1, r3
    d5fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d5fe:	b212      	sxth	r2, r2
    d600:	b209      	sxth	r1, r1
    d602:	4638      	mov	r0, r7
    d604:	4f08      	ldr	r7, [pc, #32]	; (d628 <lv_draw_rect+0x1304>)
    d606:	47b8      	blx	r7
    d608:	4607      	mov	r7, r0
            if(dsc->bg_grad_dir == LV_GRAD_DIR_VER && dsc->bg_color.full != dsc->bg_grad_color.full) {
    d60a:	f89a 3006 	ldrb.w	r3, [sl, #6]
    d60e:	2b01      	cmp	r3, #1
    d610:	d129      	bne.n	d666 <lv_draw_rect+0x1342>
    d612:	e07a      	b.n	d70a <lv_draw_rect+0x13e6>
    d614:	00012931 	.word	0x00012931
    d618:	0000beb9 	.word	0x0000beb9
    d61c:	00007745 	.word	0x00007745
    d620:	0000bdb5 	.word	0x0000bdb5
    d624:	00012be1 	.word	0x00012be1
    d628:	0000be11 	.word	0x0000be11
    d62c:	0000c021 	.word	0x0000c021
                _lv_memset_ff(mask_buf, draw_area_w);
    d630:	990a      	ldr	r1, [sp, #40]	; 0x28
    d632:	9f05      	ldr	r7, [sp, #20]
    d634:	4638      	mov	r0, r7
    d636:	4bb6      	ldr	r3, [pc, #728]	; (d910 <lv_draw_rect+0x15ec>)
    d638:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    d63a:	f8b8 2012 	ldrh.w	r2, [r8, #18]
    d63e:	442a      	add	r2, r5
    d640:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    d644:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
    d648:	4419      	add	r1, r3
    d64a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d64c:	b212      	sxth	r2, r2
    d64e:	b209      	sxth	r1, r1
    d650:	4638      	mov	r0, r7
    d652:	4fb0      	ldr	r7, [pc, #704]	; (d914 <lv_draw_rect+0x15f0>)
    d654:	47b8      	blx	r7
    d656:	4607      	mov	r7, r0
            if(dsc->bg_grad_dir == LV_GRAD_DIR_VER && dsc->bg_color.full != dsc->bg_grad_color.full) {
    d658:	f89a 3006 	ldrb.w	r3, [sl, #6]
    d65c:	2b01      	cmp	r3, #1
    d65e:	d054      	beq.n	d70a <lv_draw_rect+0x13e6>
            if(simple_mode && split &&
    d660:	9a07      	ldr	r2, [sp, #28]
    d662:	2a00      	cmp	r2, #0
    d664:	d13a      	bne.n	d6dc <lv_draw_rect+0x13b8>
                if(dsc->bg_grad_dir == LV_GRAD_DIR_HOR) {
    d666:	2b02      	cmp	r3, #2
    d668:	f000 8144 	beq.w	d8f4 <lv_draw_rect+0x15d0>
                else if(other_mask_cnt != 0 || !split) {
    d66c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d66e:	b913      	cbnz	r3, d676 <lv_draw_rect+0x1352>
    d670:	f1b9 0f32 	cmp.w	r9, #50	; 0x32
    d674:	dc0b      	bgt.n	d68e <lv_draw_rect+0x136a>
                    _lv_blend_fill(clip, &fill_area,
    d676:	f89a 300d 	ldrb.w	r3, [sl, #13]
    d67a:	9302      	str	r3, [sp, #8]
    d67c:	9b08      	ldr	r3, [sp, #32]
    d67e:	9301      	str	r3, [sp, #4]
    d680:	9700      	str	r7, [sp, #0]
    d682:	9b05      	ldr	r3, [sp, #20]
    d684:	465a      	mov	r2, fp
    d686:	a91e      	add	r1, sp, #120	; 0x78
    d688:	9804      	ldr	r0, [sp, #16]
    d68a:	4ca3      	ldr	r4, [pc, #652]	; (d918 <lv_draw_rect+0x15f4>)
    d68c:	47a0      	blx	r4
            fill_area.y1++;
    d68e:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
    d692:	3301      	adds	r3, #1
    d694:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            fill_area.y2++;
    d698:	f8bd 307e 	ldrh.w	r3, [sp, #126]	; 0x7e
    d69c:	3301      	adds	r3, #1
    d69e:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    d6a2:	3501      	adds	r5, #1
    d6a4:	f9bd 3076 	ldrsh.w	r3, [sp, #118]	; 0x76
    d6a8:	429d      	cmp	r5, r3
    d6aa:	f300 8139 	bgt.w	d920 <lv_draw_rect+0x15fc>
            int32_t y = h + vdb->area.y1;
    d6ae:	f9b8 4012 	ldrsh.w	r4, [r8, #18]
    d6b2:	442c      	add	r4, r5
            if(y > coords_bg.y1 + rout + 1 &&
    d6b4:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
    d6b8:	4433      	add	r3, r6
    d6ba:	3301      	adds	r3, #1
    d6bc:	429c      	cmp	r4, r3
    d6be:	ddb7      	ble.n	d630 <lv_draw_rect+0x130c>
               y < coords_bg.y2 - rout - 1) {
    d6c0:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
    d6c4:	1b9b      	subs	r3, r3, r6
    d6c6:	3b01      	subs	r3, #1
            if(y > coords_bg.y1 + rout + 1 &&
    d6c8:	429c      	cmp	r4, r3
    d6ca:	dab1      	bge.n	d630 <lv_draw_rect+0x130c>
                if(simple_mode == false) {
    d6cc:	9b07      	ldr	r3, [sp, #28]
    d6ce:	2b00      	cmp	r3, #0
    d6d0:	d087      	beq.n	d5e2 <lv_draw_rect+0x12be>
            if(dsc->bg_grad_dir == LV_GRAD_DIR_VER && dsc->bg_color.full != dsc->bg_grad_color.full) {
    d6d2:	f89a 3006 	ldrb.w	r3, [sl, #6]
    d6d6:	2b01      	cmp	r3, #1
    d6d8:	d016      	beq.n	d708 <lv_draw_rect+0x13e4>
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
    d6da:	2701      	movs	r7, #1
            if(simple_mode && split &&
    d6dc:	f1b9 0f32 	cmp.w	r9, #50	; 0x32
    d6e0:	f300 8093 	bgt.w	d80a <lv_draw_rect+0x14e6>
                if(dsc->bg_grad_dir == LV_GRAD_DIR_HOR) {
    d6e4:	2b02      	cmp	r3, #2
    d6e6:	f000 8105 	beq.w	d8f4 <lv_draw_rect+0x15d0>
                else if(dsc->bg_grad_dir == LV_GRAD_DIR_VER) {
    d6ea:	2b01      	cmp	r3, #1
    d6ec:	d1be      	bne.n	d66c <lv_draw_rect+0x1348>
                    _lv_blend_fill(clip, &fill_area,
    d6ee:	f89a 300d 	ldrb.w	r3, [sl, #13]
    d6f2:	9302      	str	r3, [sp, #8]
    d6f4:	9b08      	ldr	r3, [sp, #32]
    d6f6:	9301      	str	r3, [sp, #4]
    d6f8:	9700      	str	r7, [sp, #0]
    d6fa:	9b05      	ldr	r3, [sp, #20]
    d6fc:	465a      	mov	r2, fp
    d6fe:	a91e      	add	r1, sp, #120	; 0x78
    d700:	9804      	ldr	r0, [sp, #16]
    d702:	4c85      	ldr	r4, [pc, #532]	; (d918 <lv_draw_rect+0x15f4>)
    d704:	47a0      	blx	r4
    d706:	e7c2      	b.n	d68e <lv_draw_rect+0x136a>
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
    d708:	2701      	movs	r7, #1
            if(dsc->bg_grad_dir == LV_GRAD_DIR_VER && dsc->bg_color.full != dsc->bg_grad_color.full) {
    d70a:	f8ba 2002 	ldrh.w	r2, [sl, #2]
    d70e:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    d712:	429a      	cmp	r2, r3
    d714:	d06f      	beq.n	d7f6 <lv_draw_rect+0x14d2>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    d716:	f8bd 106a 	ldrh.w	r1, [sp, #106]	; 0x6a
                grad_color = grad_get(dsc, lv_area_get_height(&coords_bg), y - coords_bg.y1);
    d71a:	1a62      	subs	r2, r4, r1
    d71c:	b293      	uxth	r3, r2
    d71e:	461a      	mov	r2, r3
    d720:	930c      	str	r3, [sp, #48]	; 0x30
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
    d722:	f9ba e008 	ldrsh.w	lr, [sl, #8]
    d726:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
    d72a:	3301      	adds	r3, #1
    d72c:	1a5b      	subs	r3, r3, r1
    d72e:	b21b      	sxth	r3, r3
    d730:	fb03 f10e 	mul.w	r1, r3, lr
    d734:	1209      	asrs	r1, r1, #8
    if(i <= min) return dsc->bg_color;
    d736:	b210      	sxth	r0, r2
    d738:	4281      	cmp	r1, r0
    d73a:	da4b      	bge.n	d7d4 <lv_draw_rect+0x14b0>
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
    d73c:	f9ba c00a 	ldrsh.w	ip, [sl, #10]
    d740:	fb0c f203 	mul.w	r2, ip, r3
    if(i >= max) return dsc->bg_grad_color;
    d744:	ebb0 2f22 	cmp.w	r0, r2, asr #8
    d748:	f280 80b0 	bge.w	d8ac <lv_draw_rect+0x1588>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
    d74c:	ebac 0e0e 	sub.w	lr, ip, lr
    d = (s * d) >> 8;
    d750:	fb03 f30e 	mul.w	r3, r3, lr
    i -= min;
    d754:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d756:	1a52      	subs	r2, r2, r1
    lv_opa_t mix = (i * 255) / d;
    d758:	b212      	sxth	r2, r2
    d75a:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
    d = (s * d) >> 8;
    d75e:	121b      	asrs	r3, r3, #8
    lv_opa_t mix = (i * 255) / d;
    d760:	fb92 f3f3 	sdiv	r3, r2, r3
    d764:	b2db      	uxtb	r3, r3
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    d766:	f1c3 01ff 	rsb	r1, r3, #255	; 0xff
    d76a:	f89a 2005 	ldrb.w	r2, [sl, #5]
    d76e:	08d2      	lsrs	r2, r2, #3
    d770:	f89a 0003 	ldrb.w	r0, [sl, #3]
    d774:	08c0      	lsrs	r0, r0, #3
    d776:	fb01 f000 	mul.w	r0, r1, r0
    d77a:	fb03 0202 	mla	r2, r3, r2, r0
    d77e:	eb02 2002 	add.w	r0, r2, r2, lsl #8
    d782:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
    d786:	f3c2 52c4 	ubfx	r2, r2, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    d78a:	f8ba 0004 	ldrh.w	r0, [sl, #4]
    d78e:	f3c0 1045 	ubfx	r0, r0, #5, #6
    d792:	f8ba e002 	ldrh.w	lr, [sl, #2]
    d796:	f3ce 1e45 	ubfx	lr, lr, #5, #6
    d79a:	fb01 fe0e 	mul.w	lr, r1, lr
    d79e:	fb03 e000 	mla	r0, r3, r0, lr
    d7a2:	eb00 2e00 	add.w	lr, r0, r0, lsl #8
    d7a6:	eb00 10ce 	add.w	r0, r0, lr, lsl #7
    d7aa:	f3c0 50c5 	ubfx	r0, r0, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    d7ae:	f89a e004 	ldrb.w	lr, [sl, #4]
    d7b2:	f00e 0e1f 	and.w	lr, lr, #31
    d7b6:	f89a c002 	ldrb.w	ip, [sl, #2]
    d7ba:	f00c 0c1f 	and.w	ip, ip, #31
    d7be:	fb01 f10c 	mul.w	r1, r1, ip
    d7c2:	fb03 130e 	mla	r3, r3, lr, r1
    d7c6:	eb03 2103 	add.w	r1, r3, r3, lsl #8
    d7ca:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
    d7ce:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    d7d2:	e00a      	b.n	d7ea <lv_draw_rect+0x14c6>
    if(i <= min) return dsc->bg_color;
    d7d4:	f89a 3002 	ldrb.w	r3, [sl, #2]
    d7d8:	f003 031f 	and.w	r3, r3, #31
    d7dc:	f8ba 0002 	ldrh.w	r0, [sl, #2]
    d7e0:	f3c0 1045 	ubfx	r0, r0, #5, #6
    d7e4:	f89a 2003 	ldrb.w	r2, [sl, #3]
    d7e8:	08d2      	lsrs	r2, r2, #3
    d7ea:	f363 0b04 	bfi	fp, r3, #0, #5
    d7ee:	f360 1b4a 	bfi	fp, r0, #5, #6
    d7f2:	f362 2bcf 	bfi	fp, r2, #11, #5
            if(simple_mode && split &&
    d7f6:	9b07      	ldr	r3, [sp, #28]
    d7f8:	2b00      	cmp	r3, #0
    d7fa:	f43f af78 	beq.w	d6ee <lv_draw_rect+0x13ca>
    d7fe:	f1b9 0f32 	cmp.w	r9, #50	; 0x32
    d802:	bfc8      	it	gt
    d804:	2301      	movgt	r3, #1
    d806:	f77f af72 	ble.w	d6ee <lv_draw_rect+0x13ca>
               (y < coords_bg.y1 + rout + 1 ||
    d80a:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
    d80e:	4432      	add	r2, r6
    d810:	3201      	adds	r2, #1
            if(simple_mode && split &&
    d812:	4294      	cmp	r4, r2
    d814:	db06      	blt.n	d824 <lv_draw_rect+0x1500>
                y > coords_bg.y2 - rout - 1)) {
    d816:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	; 0x6e
    d81a:	1b92      	subs	r2, r2, r6
    d81c:	3a01      	subs	r2, #1
               (y < coords_bg.y1 + rout + 1 ||
    d81e:	4294      	cmp	r4, r2
    d820:	f77f af60 	ble.w	d6e4 <lv_draw_rect+0x13c0>
                fill_area2.x1 = coords_bg.x1;
    d824:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
    d828:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
                fill_area2.x2 = coords_bg.x1 + rout - 1;
    d82c:	b2b2      	uxth	r2, r6
    d82e:	920c      	str	r2, [sp, #48]	; 0x30
    d830:	3b01      	subs	r3, #1
    d832:	4413      	add	r3, r2
    d834:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
                fill_area2.y1 = fill_area.y1;
    d838:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
    d83c:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
                fill_area2.y2 = fill_area.y2;
    d840:	f8bd 307e 	ldrh.w	r3, [sp, #126]	; 0x7e
    d844:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
                _lv_blend_fill(clip, &fill_area2,
    d848:	f89a 300d 	ldrb.w	r3, [sl, #13]
    d84c:	9302      	str	r3, [sp, #8]
    d84e:	9b08      	ldr	r3, [sp, #32]
    d850:	9301      	str	r3, [sp, #4]
    d852:	9700      	str	r7, [sp, #0]
    d854:	9b05      	ldr	r3, [sp, #20]
    d856:	465a      	mov	r2, fp
    d858:	a922      	add	r1, sp, #136	; 0x88
    d85a:	9804      	ldr	r0, [sp, #16]
    d85c:	4c2e      	ldr	r4, [pc, #184]	; (d918 <lv_draw_rect+0x15f4>)
    d85e:	47a0      	blx	r4
                if(dsc->bg_grad_dir == LV_GRAD_DIR_VER) {
    d860:	f89a 3006 	ldrb.w	r3, [sl, #6]
    d864:	2b01      	cmp	r3, #1
    d866:	d02d      	beq.n	d8c4 <lv_draw_rect+0x15a0>
                fill_area2.x1 = coords_bg.x2 - rout + 1;
    d868:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
    d86c:	1c5a      	adds	r2, r3, #1
    d86e:	990c      	ldr	r1, [sp, #48]	; 0x30
    d870:	1a54      	subs	r4, r2, r1
    d872:	f8ad 4088 	strh.w	r4, [sp, #136]	; 0x88
                fill_area2.x2 = coords_bg.x2;
    d876:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
    d87a:	1b9b      	subs	r3, r3, r6
    d87c:	3301      	adds	r3, #1
    d87e:	f9b8 2010 	ldrsh.w	r2, [r8, #16]
    d882:	f9bd 1070 	ldrsh.w	r1, [sp, #112]	; 0x70
    d886:	440a      	add	r2, r1
    d888:	1a9b      	subs	r3, r3, r2
                _lv_blend_fill(clip, &fill_area2,
    d88a:	f89a 200d 	ldrb.w	r2, [sl, #13]
    d88e:	9202      	str	r2, [sp, #8]
    d890:	9a08      	ldr	r2, [sp, #32]
    d892:	9201      	str	r2, [sp, #4]
    d894:	9700      	str	r7, [sp, #0]
    d896:	9a05      	ldr	r2, [sp, #20]
    d898:	2b00      	cmp	r3, #0
    d89a:	bfa8      	it	ge
    d89c:	18d2      	addge	r2, r2, r3
    d89e:	4613      	mov	r3, r2
    d8a0:	465a      	mov	r2, fp
    d8a2:	a922      	add	r1, sp, #136	; 0x88
    d8a4:	9804      	ldr	r0, [sp, #16]
    d8a6:	4c1c      	ldr	r4, [pc, #112]	; (d918 <lv_draw_rect+0x15f4>)
    d8a8:	47a0      	blx	r4
    d8aa:	e6f0      	b.n	d68e <lv_draw_rect+0x136a>
    if(i >= max) return dsc->bg_grad_color;
    d8ac:	f89a 3004 	ldrb.w	r3, [sl, #4]
    d8b0:	f003 031f 	and.w	r3, r3, #31
    d8b4:	f8ba 0004 	ldrh.w	r0, [sl, #4]
    d8b8:	f3c0 1045 	ubfx	r0, r0, #5, #6
    d8bc:	f89a 2005 	ldrb.w	r2, [sl, #5]
    d8c0:	08d2      	lsrs	r2, r2, #3
    d8c2:	e792      	b.n	d7ea <lv_draw_rect+0x14c6>
                    fill_area2.x1 = coords_bg.x1 + rout;
    d8c4:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    d8c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d8ca:	4413      	add	r3, r2
    d8cc:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
                    fill_area2.x2 = coords_bg.x2 - rout;
    d8d0:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
    d8d4:	1a9b      	subs	r3, r3, r2
    d8d6:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
                    _lv_blend_fill(clip, &fill_area2,
    d8da:	f89a 300d 	ldrb.w	r3, [sl, #13]
    d8de:	9302      	str	r3, [sp, #8]
    d8e0:	9b08      	ldr	r3, [sp, #32]
    d8e2:	9301      	str	r3, [sp, #4]
    d8e4:	2301      	movs	r3, #1
    d8e6:	9300      	str	r3, [sp, #0]
    d8e8:	2300      	movs	r3, #0
    d8ea:	465a      	mov	r2, fp
    d8ec:	a922      	add	r1, sp, #136	; 0x88
    d8ee:	9804      	ldr	r0, [sp, #16]
    d8f0:	47a0      	blx	r4
    d8f2:	e7b9      	b.n	d868 <lv_draw_rect+0x1544>
                    _lv_blend_map(clip, &fill_area, grad_map, mask_buf, mask_res, opa, dsc->bg_blend_mode);
    d8f4:	f89a 300d 	ldrb.w	r3, [sl, #13]
    d8f8:	9302      	str	r3, [sp, #8]
    d8fa:	9b08      	ldr	r3, [sp, #32]
    d8fc:	9301      	str	r3, [sp, #4]
    d8fe:	9700      	str	r7, [sp, #0]
    d900:	9b05      	ldr	r3, [sp, #20]
    d902:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    d904:	a91e      	add	r1, sp, #120	; 0x78
    d906:	9804      	ldr	r0, [sp, #16]
    d908:	4c04      	ldr	r4, [pc, #16]	; (d91c <lv_draw_rect+0x15f8>)
    d90a:	47a0      	blx	r4
    d90c:	e6bf      	b.n	d68e <lv_draw_rect+0x136a>
    d90e:	bf00      	nop
    d910:	00012be1 	.word	0x00012be1
    d914:	0000be11 	.word	0x0000be11
    d918:	00007745 	.word	0x00007745
    d91c:	00008275 	.word	0x00008275
    d920:	9f08      	ldr	r7, [sp, #32]
        if(dsc->bg_grad_dir == LV_GRAD_DIR_NONE && other_mask_cnt == 0 && split) {
    d922:	f89a 3006 	ldrb.w	r3, [sl, #6]
    d926:	b923      	cbnz	r3, d932 <lv_draw_rect+0x160e>
    d928:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d92a:	b913      	cbnz	r3, d932 <lv_draw_rect+0x160e>
    d92c:	f1b9 0f32 	cmp.w	r9, #50	; 0x32
    d930:	dc0b      	bgt.n	d94a <lv_draw_rect+0x1626>
        if(grad_map) _lv_mem_buf_release(grad_map);
    d932:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d934:	b113      	cbz	r3, d93c <lv_draw_rect+0x1618>
    d936:	4618      	mov	r0, r3
    d938:	4bb3      	ldr	r3, [pc, #716]	; (dc08 <lv_draw_rect+0x18e4>)
    d93a:	4798      	blx	r3
    lv_draw_mask_remove_id(mask_rout_id);
    d93c:	980e      	ldr	r0, [sp, #56]	; 0x38
    d93e:	4bb3      	ldr	r3, [pc, #716]	; (dc0c <lv_draw_rect+0x18e8>)
    d940:	4798      	blx	r3
    _lv_mem_buf_release(mask_buf);
    d942:	9805      	ldr	r0, [sp, #20]
    d944:	4bb0      	ldr	r3, [pc, #704]	; (dc08 <lv_draw_rect+0x18e4>)
    d946:	4798      	blx	r3
    d948:	e469      	b.n	d21e <lv_draw_rect+0xefa>
            fill_area.x1 = coords_bg.x1 + rout;
    d94a:	b2b6      	uxth	r6, r6
    d94c:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    d950:	4433      	add	r3, r6
    d952:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
            fill_area.x2 = coords_bg.x2 - rout;
    d956:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
    d95a:	1b9b      	subs	r3, r3, r6
    d95c:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            fill_area.y1 = coords_bg.y1;
    d960:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
    d964:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            fill_area.y2 = coords_bg.y1 + rout;
    d968:	4433      	add	r3, r6
    d96a:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
            _lv_blend_fill(clip, &fill_area,
    d96e:	f89a 300d 	ldrb.w	r3, [sl, #13]
    d972:	9302      	str	r3, [sp, #8]
    d974:	9701      	str	r7, [sp, #4]
    d976:	2301      	movs	r3, #1
    d978:	9300      	str	r3, [sp, #0]
    d97a:	2300      	movs	r3, #0
    d97c:	f8ba 2002 	ldrh.w	r2, [sl, #2]
    d980:	a91e      	add	r1, sp, #120	; 0x78
    d982:	9804      	ldr	r0, [sp, #16]
    d984:	4ca2      	ldr	r4, [pc, #648]	; (dc10 <lv_draw_rect+0x18ec>)
    d986:	47a0      	blx	r4
            fill_area.y1 = coords_bg.y2 - rout;
    d988:	f9bd 106e 	ldrsh.w	r1, [sp, #110]	; 0x6e
    d98c:	1b8a      	subs	r2, r1, r6
    d98e:	b212      	sxth	r2, r2
    d990:	f8ad 207a 	strh.w	r2, [sp, #122]	; 0x7a
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
    d994:	f9bd 307e 	ldrsh.w	r3, [sp, #126]	; 0x7e
    d998:	429a      	cmp	r2, r3
    d99a:	bfdc      	itt	le
    d99c:	3301      	addle	r3, #1
    d99e:	f8ad 307a 	strhle.w	r3, [sp, #122]	; 0x7a
            fill_area.y2 = coords_bg.y2;
    d9a2:	f8ad 107e 	strh.w	r1, [sp, #126]	; 0x7e
            _lv_blend_fill(clip, &fill_area,
    d9a6:	f89a 300d 	ldrb.w	r3, [sl, #13]
    d9aa:	9302      	str	r3, [sp, #8]
    d9ac:	9701      	str	r7, [sp, #4]
    d9ae:	2501      	movs	r5, #1
    d9b0:	9500      	str	r5, [sp, #0]
    d9b2:	2300      	movs	r3, #0
    d9b4:	f8ba 2002 	ldrh.w	r2, [sl, #2]
    d9b8:	a91e      	add	r1, sp, #120	; 0x78
    d9ba:	f8dd 8010 	ldr.w	r8, [sp, #16]
    d9be:	4640      	mov	r0, r8
    d9c0:	4c93      	ldr	r4, [pc, #588]	; (dc10 <lv_draw_rect+0x18ec>)
    d9c2:	47a0      	blx	r4
            fill_area.x1 = coords_bg.x1;
    d9c4:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    d9c8:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
            fill_area.x2 = coords_bg.x2;
    d9cc:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
    d9d0:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            fill_area.y1 = coords_bg.y1 + rout + 1;
    d9d4:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
    d9d8:	442b      	add	r3, r5
    d9da:	4433      	add	r3, r6
    d9dc:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            fill_area.y2 = coords_bg.y2 - rout - 1;
    d9e0:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
    d9e4:	3b01      	subs	r3, #1
    d9e6:	1b9e      	subs	r6, r3, r6
    d9e8:	f8ad 607e 	strh.w	r6, [sp, #126]	; 0x7e
            _lv_blend_fill(clip, &fill_area,
    d9ec:	f89a 300d 	ldrb.w	r3, [sl, #13]
    d9f0:	9302      	str	r3, [sp, #8]
    d9f2:	9701      	str	r7, [sp, #4]
    d9f4:	9500      	str	r5, [sp, #0]
    d9f6:	2300      	movs	r3, #0
    d9f8:	f8ba 2002 	ldrh.w	r2, [sl, #2]
    d9fc:	a91e      	add	r1, sp, #120	; 0x78
    d9fe:	4640      	mov	r0, r8
    da00:	47a0      	blx	r4
    da02:	e796      	b.n	d932 <lv_draw_rect+0x160e>
    lv_img_src_t src_type = lv_img_src_get_type(dsc->pattern_image);
    da04:	4b83      	ldr	r3, [pc, #524]	; (dc14 <lv_draw_rect+0x18f0>)
    da06:	4798      	blx	r3
    da08:	4605      	mov	r5, r0
    if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_VARIABLE) {
    da0a:	2801      	cmp	r0, #1
    da0c:	d912      	bls.n	da34 <lv_draw_rect+0x1710>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
    da0e:	2802      	cmp	r0, #2
    da10:	d039      	beq.n	da86 <lv_draw_rect+0x1762>
        LV_LOG_WARN("lv_img_design: image source type is unknown");
    da12:	4b81      	ldr	r3, [pc, #516]	; (dc18 <lv_draw_rect+0x18f4>)
    da14:	9300      	str	r3, [sp, #0]
    da16:	4b81      	ldr	r3, [pc, #516]	; (dc1c <lv_draw_rect+0x18f8>)
    da18:	f240 52ae 	movw	r2, #1454	; 0x5ae
    da1c:	4980      	ldr	r1, [pc, #512]	; (dc20 <lv_draw_rect+0x18fc>)
    da1e:	2002      	movs	r0, #2
    da20:	4c80      	ldr	r4, [pc, #512]	; (dc24 <lv_draw_rect+0x1900>)
    da22:	47a0      	blx	r4
        lv_draw_img(coords, clip, NULL, NULL);
    da24:	2300      	movs	r3, #0
    da26:	461a      	mov	r2, r3
    da28:	9904      	ldr	r1, [sp, #16]
    da2a:	9806      	ldr	r0, [sp, #24]
    da2c:	4c7e      	ldr	r4, [pc, #504]	; (dc28 <lv_draw_rect+0x1904>)
    da2e:	47a0      	blx	r4
    da30:	f7ff bbfd 	b.w	d22e <lv_draw_rect+0xf0a>
        lv_res_t res = lv_img_decoder_get_info(dsc->pattern_image, &header);
    da34:	a929      	add	r1, sp, #164	; 0xa4
    da36:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
    da3a:	4b7c      	ldr	r3, [pc, #496]	; (dc2c <lv_draw_rect+0x1908>)
    da3c:	4798      	blx	r3
        if(res != LV_RES_OK) {
    da3e:	2801      	cmp	r0, #1
    da40:	d00a      	beq.n	da58 <lv_draw_rect+0x1734>
            LV_LOG_WARN("draw_img: can't get image info");
    da42:	4b7b      	ldr	r3, [pc, #492]	; (dc30 <lv_draw_rect+0x190c>)
    da44:	9300      	str	r3, [sp, #0]
    da46:	4b75      	ldr	r3, [pc, #468]	; (dc1c <lv_draw_rect+0x18f8>)
    da48:	f240 5294 	movw	r2, #1428	; 0x594
    da4c:	4974      	ldr	r1, [pc, #464]	; (dc20 <lv_draw_rect+0x18fc>)
    da4e:	2002      	movs	r0, #2
    da50:	4c74      	ldr	r4, [pc, #464]	; (dc24 <lv_draw_rect+0x1900>)
    da52:	47a0      	blx	r4
    da54:	f7ff bbeb 	b.w	d22e <lv_draw_rect+0xf0a>
        img_w = header.w;
    da58:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    da5a:	f3c3 298a 	ubfx	r9, r3, #10, #11
        img_h = header.h;
    da5e:	f8bd 70a6 	ldrh.w	r7, [sp, #166]	; 0xa6
    da62:	f3c7 174a 	ubfx	r7, r7, #5, #11
        lv_draw_img_dsc_init(&img_dsc);
    da66:	a81e      	add	r0, sp, #120	; 0x78
    da68:	4b72      	ldr	r3, [pc, #456]	; (dc34 <lv_draw_rect+0x1910>)
    da6a:	4798      	blx	r3
        img_dsc.opa = dsc->pattern_opa;
    da6c:	f89a 3036 	ldrb.w	r3, [sl, #54]	; 0x36
    da70:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
        img_dsc.recolor_opa = dsc->pattern_recolor_opa;
    da74:	f89a 3037 	ldrb.w	r3, [sl, #55]	; 0x37
    da78:	f88d 3082 	strb.w	r3, [sp, #130]	; 0x82
        img_dsc.recolor = dsc->pattern_recolor;
    da7c:	f8ba 3034 	ldrh.w	r3, [sl, #52]	; 0x34
    da80:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
    da84:	e020      	b.n	dac8 <lv_draw_rect+0x17a4>
        lv_draw_label_dsc_init(&label_dsc);
    da86:	a822      	add	r0, sp, #136	; 0x88
    da88:	4b6b      	ldr	r3, [pc, #428]	; (dc38 <lv_draw_rect+0x1914>)
    da8a:	4798      	blx	r3
        label_dsc.color = dsc->pattern_recolor;
    da8c:	f8ba 3034 	ldrh.w	r3, [sl, #52]	; 0x34
    da90:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
        label_dsc.font = dsc->pattern_font;
    da94:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
    da98:	9223      	str	r2, [sp, #140]	; 0x8c
        label_dsc.opa = dsc->pattern_opa;
    da9a:	f89a 3036 	ldrb.w	r3, [sl, #54]	; 0x36
    da9e:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
        _lv_txt_get_size(&s, dsc->pattern_image, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
    daa2:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
    daa6:	2100      	movs	r1, #0
    daa8:	9102      	str	r1, [sp, #8]
    daaa:	f647 4118 	movw	r1, #31768	; 0x7c18
    daae:	9101      	str	r1, [sp, #4]
    dab0:	f9bd 1092 	ldrsh.w	r1, [sp, #146]	; 0x92
    dab4:	9100      	str	r1, [sp, #0]
    dab6:	f8da 102c 	ldr.w	r1, [sl, #44]	; 0x2c
    daba:	a829      	add	r0, sp, #164	; 0xa4
    dabc:	4c5f      	ldr	r4, [pc, #380]	; (dc3c <lv_draw_rect+0x1918>)
    dabe:	47a0      	blx	r4
        img_w = s.x;
    dac0:	f9bd 90a4 	ldrsh.w	r9, [sp, #164]	; 0xa4
        img_h = s.y;
    dac4:	f9bd 70a6 	ldrsh.w	r7, [sp, #166]	; 0xa6
    if(dsc->pattern_repeat) {
    dac8:	f89a 3038 	ldrb.w	r3, [sl, #56]	; 0x38
    dacc:	f013 0f01 	tst.w	r3, #1
    dad0:	d13f      	bne.n	db52 <lv_draw_rect+0x182e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    dad2:	9c06      	ldr	r4, [sp, #24]
    dad4:	8821      	ldrh	r1, [r4, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    dad6:	8860      	ldrh	r0, [r4, #2]
    dad8:	88e2      	ldrh	r2, [r4, #6]
    dada:	3201      	adds	r2, #1
    dadc:	1a12      	subs	r2, r2, r0
        int32_t obj_h = lv_area_get_height(coords);
    dade:	b212      	sxth	r2, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    dae0:	88a3      	ldrh	r3, [r4, #4]
    dae2:	3301      	adds	r3, #1
    dae4:	1a5b      	subs	r3, r3, r1
        int32_t obj_w = lv_area_get_width(coords);
    dae6:	b21b      	sxth	r3, r3
        coords_tmp.x1 = coords->x1 + (obj_w - img_w) / 2;
    dae8:	eba3 0309 	sub.w	r3, r3, r9
    daec:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    daf0:	eb01 0363 	add.w	r3, r1, r3, asr #1
    daf4:	b29b      	uxth	r3, r3
    daf6:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        coords_tmp.y1 = coords->y1 + (obj_h - img_h) / 2;
    dafa:	1bd2      	subs	r2, r2, r7
    dafc:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
    db00:	eb00 0161 	add.w	r1, r0, r1, asr #1
    db04:	b289      	uxth	r1, r1
    db06:	f8ad 1072 	strh.w	r1, [sp, #114]	; 0x72
        coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
    db0a:	f109 39ff 	add.w	r9, r9, #4294967295
    db0e:	4499      	add	r9, r3
    db10:	f8ad 9074 	strh.w	r9, [sp, #116]	; 0x74
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
    db14:	1e7b      	subs	r3, r7, #1
    db16:	440b      	add	r3, r1
    db18:	b29b      	uxth	r3, r3
    db1a:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        if(src_type == LV_IMG_SRC_SYMBOL) {
    db1e:	2d02      	cmp	r5, #2
    db20:	f000 80bd 	beq.w	dc9e <lv_draw_rect+0x197a>
        if(_lv_area_is_in(&coords_tmp, coords, dsc->radius) == false) {
    db24:	f9ba 2000 	ldrsh.w	r2, [sl]
    db28:	9906      	ldr	r1, [sp, #24]
    db2a:	a81c      	add	r0, sp, #112	; 0x70
    db2c:	4b44      	ldr	r3, [pc, #272]	; (dc40 <lv_draw_rect+0x191c>)
    db2e:	4798      	blx	r3
        int16_t radius_mask_id = LV_MASK_ID_INV;
    db30:	f04f 34ff 	mov.w	r4, #4294967295
        if(_lv_area_is_in(&coords_tmp, coords, dsc->radius) == false) {
    db34:	2800      	cmp	r0, #0
    db36:	f000 86d4 	beq.w	e8e2 <lv_draw_rect+0x25be>
        else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
    db3a:	ab1e      	add	r3, sp, #120	; 0x78
    db3c:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
    db40:	9904      	ldr	r1, [sp, #16]
    db42:	a81c      	add	r0, sp, #112	; 0x70
    db44:	4d38      	ldr	r5, [pc, #224]	; (dc28 <lv_draw_rect+0x1904>)
    db46:	47a8      	blx	r5
        lv_draw_mask_remove_id(radius_mask_id);
    db48:	4620      	mov	r0, r4
    db4a:	4b30      	ldr	r3, [pc, #192]	; (dc0c <lv_draw_rect+0x18e8>)
    db4c:	4798      	blx	r3
    db4e:	f7ff bb6e 	b.w	d22e <lv_draw_rect+0xf0a>
        lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
    db52:	2300      	movs	r3, #0
    db54:	f9ba 2000 	ldrsh.w	r2, [sl]
    db58:	9e06      	ldr	r6, [sp, #24]
    db5a:	4631      	mov	r1, r6
    db5c:	a829      	add	r0, sp, #164	; 0xa4
    db5e:	4c39      	ldr	r4, [pc, #228]	; (dc44 <lv_draw_rect+0x1920>)
    db60:	47a0      	blx	r4
        int16_t radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
    db62:	2100      	movs	r1, #0
    db64:	a829      	add	r0, sp, #164	; 0xa4
    db66:	4b38      	ldr	r3, [pc, #224]	; (dc48 <lv_draw_rect+0x1924>)
    db68:	4798      	blx	r3
    db6a:	9007      	str	r0, [sp, #28]
    db6c:	88b3      	ldrh	r3, [r6, #4]
    db6e:	3301      	adds	r3, #1
    db70:	4634      	mov	r4, r6
    db72:	8832      	ldrh	r2, [r6, #0]
    db74:	1a9b      	subs	r3, r3, r2
        int32_t ofs_x = (lv_area_get_width(coords) - (lv_area_get_width(coords) / img_w) * img_w) / 2;
    db76:	b21b      	sxth	r3, r3
    db78:	fb93 f2f9 	sdiv	r2, r3, r9
    db7c:	fb09 3312 	mls	r3, r9, r2, r3
    db80:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    db84:	ea4f 0b63 	mov.w	fp, r3, asr #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    db88:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
    db8c:	8873      	ldrh	r3, [r6, #2]
    db8e:	1c4a      	adds	r2, r1, #1
    db90:	1ad2      	subs	r2, r2, r3
        int32_t ofs_y = (lv_area_get_height(coords) - (lv_area_get_height(coords) / img_h) * img_h) / 2;
    db92:	b210      	sxth	r0, r2
    db94:	fb90 f2f7 	sdiv	r2, r0, r7
    db98:	fb07 0212 	mls	r2, r7, r2, r0
    db9c:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
        coords_tmp.y1 = coords->y1 - ofs_y;
    dba0:	eba3 0362 	sub.w	r3, r3, r2, asr #1
    dba4:	b29b      	uxth	r3, r3
    dba6:	b21a      	sxth	r2, r3
    dba8:	f8ad 2072 	strh.w	r2, [sp, #114]	; 0x72
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
    dbac:	b2bf      	uxth	r7, r7
    dbae:	1e78      	subs	r0, r7, #1
    dbb0:	4403      	add	r3, r0
    dbb2:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(; coords_tmp.y1 <= coords->y2; coords_tmp.y1 += img_h, coords_tmp.y2 += img_h) {
    dbb6:	4291      	cmp	r1, r2
    dbb8:	db6c      	blt.n	dc94 <lv_draw_rect+0x1970>
                if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
    dbba:	f8df 8090 	ldr.w	r8, [pc, #144]	; dc4c <lv_draw_rect+0x1928>
                else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
    dbbe:	4e1a      	ldr	r6, [pc, #104]	; (dc28 <lv_draw_rect+0x1904>)
    dbc0:	f8cd 9014 	str.w	r9, [sp, #20]
    dbc4:	46a1      	mov	r9, r4
    dbc6:	e052      	b.n	dc6e <lv_draw_rect+0x194a>
                if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
    dbc8:	2300      	movs	r3, #0
    dbca:	9300      	str	r3, [sp, #0]
    dbcc:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
    dbd0:	aa22      	add	r2, sp, #136	; 0x88
    dbd2:	9904      	ldr	r1, [sp, #16]
    dbd4:	a81c      	add	r0, sp, #112	; 0x70
    dbd6:	47c0      	blx	r8
            for(; coords_tmp.x1 <= coords->x2; coords_tmp.x1 += img_w, coords_tmp.x2 += img_w) {
    dbd8:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
    dbdc:	4423      	add	r3, r4
    dbde:	b21b      	sxth	r3, r3
    dbe0:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    dbe4:	f8bd 2074 	ldrh.w	r2, [sp, #116]	; 0x74
    dbe8:	4422      	add	r2, r4
    dbea:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
    dbee:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
    dbf2:	429a      	cmp	r2, r3
    dbf4:	db2c      	blt.n	dc50 <lv_draw_rect+0x192c>
                if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
    dbf6:	2d02      	cmp	r5, #2
    dbf8:	d0e6      	beq.n	dbc8 <lv_draw_rect+0x18a4>
                else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
    dbfa:	ab1e      	add	r3, sp, #120	; 0x78
    dbfc:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
    dc00:	9904      	ldr	r1, [sp, #16]
    dc02:	a81c      	add	r0, sp, #112	; 0x70
    dc04:	47b0      	blx	r6
    dc06:	e7e7      	b.n	dbd8 <lv_draw_rect+0x18b4>
    dc08:	00012565 	.word	0x00012565
    dc0c:	0000be61 	.word	0x0000be61
    dc10:	00007745 	.word	0x00007745
    dc14:	0000995d 	.word	0x0000995d
    dc18:	000250d4 	.word	0x000250d4
    dc1c:	00025074 	.word	0x00025074
    dc20:	00025084 	.word	0x00025084
    dc24:	00012251 	.word	0x00012251
    dc28:	000096dd 	.word	0x000096dd
    dc2c:	0000fde1 	.word	0x0000fde1
    dc30:	000250b4 	.word	0x000250b4
    dc34:	00009639 	.word	0x00009639
    dc38:	000099c1 	.word	0x000099c1
    dc3c:	00014071 	.word	0x00014071
    dc40:	00011761 	.word	0x00011761
    dc44:	0000c021 	.word	0x0000c021
    dc48:	0000bdb5 	.word	0x0000bdb5
    dc4c:	00009a19 	.word	0x00009a19
        for(; coords_tmp.y1 <= coords->y2; coords_tmp.y1 += img_h, coords_tmp.y2 += img_h) {
    dc50:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    dc54:	443b      	add	r3, r7
    dc56:	b21b      	sxth	r3, r3
    dc58:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    dc5c:	f8bd 2076 	ldrh.w	r2, [sp, #118]	; 0x76
    dc60:	443a      	add	r2, r7
    dc62:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
    dc66:	f9b9 2006 	ldrsh.w	r2, [r9, #6]
    dc6a:	429a      	cmp	r2, r3
    dc6c:	db12      	blt.n	dc94 <lv_draw_rect+0x1970>
            coords_tmp.x1 = coords->x1 - ofs_x;
    dc6e:	f8b9 3000 	ldrh.w	r3, [r9]
    dc72:	eba3 030b 	sub.w	r3, r3, fp
    dc76:	b29b      	uxth	r3, r3
    dc78:	b21a      	sxth	r2, r3
    dc7a:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
            coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
    dc7e:	f8bd 4014 	ldrh.w	r4, [sp, #20]
    dc82:	1e61      	subs	r1, r4, #1
    dc84:	440b      	add	r3, r1
    dc86:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
            for(; coords_tmp.x1 <= coords->x2; coords_tmp.x1 += img_w, coords_tmp.x2 += img_w) {
    dc8a:	f9b9 3004 	ldrsh.w	r3, [r9, #4]
    dc8e:	4293      	cmp	r3, r2
    dc90:	dab1      	bge.n	dbf6 <lv_draw_rect+0x18d2>
    dc92:	e7dd      	b.n	dc50 <lv_draw_rect+0x192c>
        lv_draw_mask_remove_id(radius_mask_id);
    dc94:	9807      	ldr	r0, [sp, #28]
    dc96:	4b8a      	ldr	r3, [pc, #552]	; (dec0 <lv_draw_rect+0x1b9c>)
    dc98:	4798      	blx	r3
    dc9a:	f7ff bac8 	b.w	d22e <lv_draw_rect+0xf0a>
            coords_tmp.y1 += y_corr;
    dc9e:	f002 0201 	and.w	r2, r2, #1
    dca2:	4411      	add	r1, r2
    dca4:	f8ad 1072 	strh.w	r1, [sp, #114]	; 0x72
            coords_tmp.y2 += y_corr;
    dca8:	4413      	add	r3, r2
    dcaa:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        if(_lv_area_is_in(&coords_tmp, coords, dsc->radius) == false) {
    dcae:	f9ba 2000 	ldrsh.w	r2, [sl]
    dcb2:	4621      	mov	r1, r4
    dcb4:	a81c      	add	r0, sp, #112	; 0x70
    dcb6:	4b83      	ldr	r3, [pc, #524]	; (dec4 <lv_draw_rect+0x1ba0>)
    dcb8:	4798      	blx	r3
    dcba:	b9a8      	cbnz	r0, dce8 <lv_draw_rect+0x19c4>
            lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
    dcbc:	2300      	movs	r3, #0
    dcbe:	f9ba 2000 	ldrsh.w	r2, [sl]
    dcc2:	9906      	ldr	r1, [sp, #24]
    dcc4:	a829      	add	r0, sp, #164	; 0xa4
    dcc6:	4c80      	ldr	r4, [pc, #512]	; (dec8 <lv_draw_rect+0x1ba4>)
    dcc8:	47a0      	blx	r4
            radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
    dcca:	2100      	movs	r1, #0
    dccc:	a829      	add	r0, sp, #164	; 0xa4
    dcce:	4b7f      	ldr	r3, [pc, #508]	; (decc <lv_draw_rect+0x1ba8>)
    dcd0:	4798      	blx	r3
    dcd2:	4604      	mov	r4, r0
        if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
    dcd4:	2300      	movs	r3, #0
    dcd6:	9300      	str	r3, [sp, #0]
    dcd8:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
    dcdc:	aa22      	add	r2, sp, #136	; 0x88
    dcde:	9904      	ldr	r1, [sp, #16]
    dce0:	a81c      	add	r0, sp, #112	; 0x70
    dce2:	4d7b      	ldr	r5, [pc, #492]	; (ded0 <lv_draw_rect+0x1bac>)
    dce4:	47a8      	blx	r5
    dce6:	e72f      	b.n	db48 <lv_draw_rect+0x1824>
        int16_t radius_mask_id = LV_MASK_ID_INV;
    dce8:	f04f 34ff 	mov.w	r4, #4294967295
    dcec:	e7f2      	b.n	dcd4 <lv_draw_rect+0x19b0>
    draw_area.x1 -= disp_area->x1;
    dcee:	8a29      	ldrh	r1, [r5, #16]
    dcf0:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    dcf4:	1a5b      	subs	r3, r3, r1
    dcf6:	b29a      	uxth	r2, r3
    dcf8:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
    draw_area.y1 -= disp_area->y1;
    dcfc:	8a68      	ldrh	r0, [r5, #18]
    dcfe:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
    dd02:	1a1b      	subs	r3, r3, r0
    dd04:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
    draw_area.x2 -= disp_area->x1;
    dd08:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
    dd0c:	1a5b      	subs	r3, r3, r1
    dd0e:	b29b      	uxth	r3, r3
    dd10:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    draw_area.y2 -= disp_area->y1;
    dd14:	f8bd 1066 	ldrh.w	r1, [sp, #102]	; 0x66
    dd18:	1a09      	subs	r1, r1, r0
    dd1a:	f8ad 1066 	strh.w	r1, [sp, #102]	; 0x66
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    dd1e:	3301      	adds	r3, #1
    dd20:	1a9b      	subs	r3, r3, r2
    dd22:	b21b      	sxth	r3, r3
    dd24:	9308      	str	r3, [sp, #32]
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
    dd26:	9309      	str	r3, [sp, #36]	; 0x24
    dd28:	4618      	mov	r0, r3
    dd2a:	4b6a      	ldr	r3, [pc, #424]	; (ded4 <lv_draw_rect+0x1bb0>)
    dd2c:	4798      	blx	r3
    dd2e:	4683      	mov	fp, r0
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
    dd30:	4b69      	ldr	r3, [pc, #420]	; (ded8 <lv_draw_rect+0x1bb4>)
    dd32:	4798      	blx	r3
    if(other_mask_cnt) simple_mode = false;
    dd34:	b948      	cbnz	r0, dd4a <lv_draw_rect+0x1a26>
    else if(dsc->border_side != LV_BORDER_SIDE_FULL) simple_mode = false;
    dd36:	f9ba 8012 	ldrsh.w	r8, [sl, #18]
    dd3a:	f1b8 0f0f 	cmp.w	r8, #15
    dd3e:	bf14      	ite	ne
    dd40:	f04f 0800 	movne.w	r8, #0
    dd44:	f04f 0801 	moveq.w	r8, #1
    dd48:	e001      	b.n	dd4e <lv_draw_rect+0x1a2a>
    if(other_mask_cnt) simple_mode = false;
    dd4a:	f04f 0800 	mov.w	r8, #0
    int32_t rout = dsc->radius;
    dd4e:	f9ba 2000 	ldrsh.w	r2, [sl]
    dd52:	9e06      	ldr	r6, [sp, #24]
    dd54:	88b3      	ldrh	r3, [r6, #4]
    dd56:	3301      	adds	r3, #1
    dd58:	8831      	ldrh	r1, [r6, #0]
    dd5a:	1a5b      	subs	r3, r3, r1
    int32_t coords_w = lv_area_get_width(coords);
    dd5c:	b219      	sxth	r1, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    dd5e:	88f3      	ldrh	r3, [r6, #6]
    dd60:	3301      	adds	r3, #1
    dd62:	8870      	ldrh	r0, [r6, #2]
    dd64:	1a1b      	subs	r3, r3, r0
    int32_t coords_h = lv_area_get_height(coords);
    dd66:	b21b      	sxth	r3, r3
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
    dd68:	428b      	cmp	r3, r1
    dd6a:	bfa8      	it	ge
    dd6c:	460b      	movge	r3, r1
    if(rout > short_side >> 1) rout = short_side >> 1;
    dd6e:	105b      	asrs	r3, r3, #1
    dd70:	4293      	cmp	r3, r2
    dd72:	bfa8      	it	ge
    dd74:	4613      	movge	r3, r2
    dd76:	461a      	mov	r2, r3
    dd78:	930a      	str	r3, [sp, #40]	; 0x28
    if(rout > 0) {
    dd7a:	2b00      	cmp	r3, #0
    dd7c:	f340 8088 	ble.w	de90 <lv_draw_rect+0x1b6c>
        lv_draw_mask_radius_init(&mask_rout_param, coords, rout, false);
    dd80:	2300      	movs	r3, #0
    dd82:	4631      	mov	r1, r6
    dd84:	a822      	add	r0, sp, #136	; 0x88
    dd86:	4e50      	ldr	r6, [pc, #320]	; (dec8 <lv_draw_rect+0x1ba4>)
    dd88:	47b0      	blx	r6
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
    dd8a:	2100      	movs	r1, #0
    dd8c:	a822      	add	r0, sp, #136	; 0x88
    dd8e:	4b4f      	ldr	r3, [pc, #316]	; (decc <lv_draw_rect+0x1ba8>)
    dd90:	4798      	blx	r3
    dd92:	900e      	str	r0, [sp, #56]	; 0x38
    int32_t rin = rout - dsc->border_width;
    dd94:	f9ba 6010 	ldrsh.w	r6, [sl, #16]
    dd98:	9a06      	ldr	r2, [sp, #24]
    dd9a:	1e53      	subs	r3, r2, #1
    dd9c:	1dd0      	adds	r0, r2, #7
    uint8_t * d8 = (uint8_t *)dst;
    dd9e:	aa1a      	add	r2, sp, #104	; 0x68
        *d8 = *s8;
    dda0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    dda4:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    dda8:	4283      	cmp	r3, r0
    ddaa:	d1f9      	bne.n	dda0 <lv_draw_rect+0x1a7c>
    area_small.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
    ddac:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
    ddb0:	f8ba 3012 	ldrh.w	r3, [sl, #18]
    ddb4:	f013 0f04 	tst.w	r3, #4
    ddb8:	d06e      	beq.n	de98 <lv_draw_rect+0x1b74>
    ddba:	b2b1      	uxth	r1, r6
    ddbc:	440a      	add	r2, r1
    ddbe:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
    area_small.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
    ddc2:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
    ddc6:	f013 0f08 	tst.w	r3, #8
    ddca:	d06a      	beq.n	dea2 <lv_draw_rect+0x1b7e>
    ddcc:	b2b1      	uxth	r1, r6
    ddce:	1a52      	subs	r2, r2, r1
    ddd0:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
    area_small.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
    ddd4:	f8bd 206a 	ldrh.w	r2, [sp, #106]	; 0x6a
    ddd8:	f013 0f02 	tst.w	r3, #2
    dddc:	d066      	beq.n	deac <lv_draw_rect+0x1b88>
    ddde:	b2b1      	uxth	r1, r6
    dde0:	440a      	add	r2, r1
    dde2:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
    area_small.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
    dde6:	f8bd 206e 	ldrh.w	r2, [sp, #110]	; 0x6e
    ddea:	f013 0f01 	tst.w	r3, #1
    ddee:	d062      	beq.n	deb6 <lv_draw_rect+0x1b92>
    ddf0:	b2b3      	uxth	r3, r6
    ddf2:	1ad3      	subs	r3, r2, r3
    ddf4:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
    lv_draw_mask_radius_init(&mask_rin_param, &area_small, rout - dsc->border_width, true);
    ddf8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    ddfc:	fa1f f789 	uxth.w	r7, r9
    de00:	1bba      	subs	r2, r7, r6
    de02:	2301      	movs	r3, #1
    de04:	b212      	sxth	r2, r2
    de06:	a91a      	add	r1, sp, #104	; 0x68
    de08:	a829      	add	r0, sp, #164	; 0xa4
    de0a:	4e2f      	ldr	r6, [pc, #188]	; (dec8 <lv_draw_rect+0x1ba4>)
    de0c:	47b0      	blx	r6
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
    de0e:	2100      	movs	r1, #0
    de10:	a829      	add	r0, sp, #164	; 0xa4
    de12:	4b2e      	ldr	r3, [pc, #184]	; (decc <lv_draw_rect+0x1ba8>)
    de14:	4798      	blx	r3
    de16:	900f      	str	r0, [sp, #60]	; 0x3c
    int32_t corner_size = LV_MATH_MAX(rout, dsc->border_width - 1);
    de18:	f9ba 3010 	ldrsh.w	r3, [sl, #16]
    de1c:	3b01      	subs	r3, #1
    de1e:	454b      	cmp	r3, r9
    de20:	bfb8      	it	lt
    de22:	464b      	movlt	r3, r9
    de24:	4619      	mov	r1, r3
    de26:	930d      	str	r3, [sp, #52]	; 0x34
    lv_color_t color = dsc->border_color;
    de28:	f8ba 300e 	ldrh.w	r3, [sl, #14]
    de2c:	f8ad 3014 	strh.w	r3, [sp, #20]
    lv_blend_mode_t blend_mode = dsc->border_blend_mode;
    de30:	f89a 6015 	ldrb.w	r6, [sl, #21]
    if(simple_mode) {
    de34:	f1b8 0f00 	cmp.w	r8, #0
    de38:	f000 81bf 	beq.w	e1ba <lv_draw_rect+0x1e96>
        int32_t upper_corner_end = coords->y1 - disp_area->y1 + corner_size;
    de3c:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
    de40:	9806      	ldr	r0, [sp, #24]
    de42:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
    de46:	1ad2      	subs	r2, r2, r3
    de48:	440a      	add	r2, r1
        upper_corner_end = LV_MATH_MIN(upper_corner_end, draw_area.y2);
    de4a:	f9bd 1066 	ldrsh.w	r1, [sp, #102]	; 0x66
    de4e:	4291      	cmp	r1, r2
    de50:	bfa8      	it	ge
    de52:	4611      	movge	r1, r2
    de54:	910b      	str	r1, [sp, #44]	; 0x2c
        fill_area.x1 = coords->x1;
    de56:	8802      	ldrh	r2, [r0, #0]
    de58:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
        fill_area.x2 = coords->x2;
    de5c:	8882      	ldrh	r2, [r0, #4]
    de5e:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
        fill_area.y1 = disp_area->y1 + draw_area.y1;
    de62:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
    de66:	4413      	add	r3, r2
    de68:	b21b      	sxth	r3, r3
    de6a:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        fill_area.y2 = fill_area.y1;
    de6e:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
    de72:	4690      	mov	r8, r2
    de74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    de76:	4293      	cmp	r3, r2
    de78:	f2c0 80b3 	blt.w	dfe2 <lv_draw_rect+0x1cbe>
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
    de7c:	f8df 905c 	ldr.w	r9, [pc, #92]	; dedc <lv_draw_rect+0x1bb8>
    de80:	f8cd b01c 	str.w	fp, [sp, #28]
    de84:	46b3      	mov	fp, r6
    de86:	4626      	mov	r6, r4
    de88:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
    de8c:	4682      	mov	sl, r0
    de8e:	e055      	b.n	df3c <lv_draw_rect+0x1c18>
    int16_t mask_rout_id = LV_MASK_ID_INV;
    de90:	f04f 33ff 	mov.w	r3, #4294967295
    de94:	930e      	str	r3, [sp, #56]	; 0x38
    de96:	e77d      	b.n	dd94 <lv_draw_rect+0x1a70>
    area_small.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
    de98:	990a      	ldr	r1, [sp, #40]	; 0x28
    de9a:	1871      	adds	r1, r6, r1
    de9c:	4249      	negs	r1, r1
    de9e:	b289      	uxth	r1, r1
    dea0:	e78c      	b.n	ddbc <lv_draw_rect+0x1a98>
    area_small.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
    dea2:	990a      	ldr	r1, [sp, #40]	; 0x28
    dea4:	1871      	adds	r1, r6, r1
    dea6:	4249      	negs	r1, r1
    dea8:	b289      	uxth	r1, r1
    deaa:	e790      	b.n	ddce <lv_draw_rect+0x1aaa>
    area_small.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
    deac:	990a      	ldr	r1, [sp, #40]	; 0x28
    deae:	1871      	adds	r1, r6, r1
    deb0:	4249      	negs	r1, r1
    deb2:	b289      	uxth	r1, r1
    deb4:	e794      	b.n	dde0 <lv_draw_rect+0x1abc>
    area_small.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
    deb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    deb8:	18f3      	adds	r3, r6, r3
    deba:	425b      	negs	r3, r3
    debc:	b29b      	uxth	r3, r3
    debe:	e798      	b.n	ddf2 <lv_draw_rect+0x1ace>
    dec0:	0000be61 	.word	0x0000be61
    dec4:	00011761 	.word	0x00011761
    dec8:	0000c021 	.word	0x0000c021
    decc:	0000bdb5 	.word	0x0000bdb5
    ded0:	00009a19 	.word	0x00009a19
    ded4:	00012931 	.word	0x00012931
    ded8:	0000beb9 	.word	0x0000beb9
    dedc:	00007745 	.word	0x00007745
            fill_area2.x1 = coords->x2 - rout + 1;
    dee0:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
    dee4:	1c5a      	adds	r2, r3, #1
    dee6:	1bd2      	subs	r2, r2, r7
    dee8:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
            fill_area2.x2 = coords->x2;
    deec:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            int32_t mask_ofs = (coords->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
    def0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    def2:	1a9b      	subs	r3, r3, r2
    def4:	3301      	adds	r3, #1
    def6:	f9b5 2010 	ldrsh.w	r2, [r5, #16]
    defa:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
    defe:	440a      	add	r2, r1
    df00:	1a9b      	subs	r3, r3, r2
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
    df02:	f8cd b008 	str.w	fp, [sp, #8]
    df06:	9601      	str	r6, [sp, #4]
    df08:	9400      	str	r4, [sp, #0]
    df0a:	9a07      	ldr	r2, [sp, #28]
    df0c:	2b00      	cmp	r3, #0
    df0e:	bfa8      	it	ge
    df10:	18d2      	addge	r2, r2, r3
    df12:	4613      	mov	r3, r2
    df14:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    df18:	a91e      	add	r1, sp, #120	; 0x78
    df1a:	9804      	ldr	r0, [sp, #16]
    df1c:	47c8      	blx	r9
            fill_area.y1++;
    df1e:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    df22:	3301      	adds	r3, #1
    df24:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
            fill_area.y2++;
    df28:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    df2c:	3301      	adds	r3, #1
    df2e:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
    df32:	f108 0801 	add.w	r8, r8, #1
    df36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    df38:	4543      	cmp	r3, r8
    df3a:	db4c      	blt.n	dfd6 <lv_draw_rect+0x1cb2>
            _lv_memset_ff(mask_buf, draw_area_w);
    df3c:	9909      	ldr	r1, [sp, #36]	; 0x24
    df3e:	9c07      	ldr	r4, [sp, #28]
    df40:	4620      	mov	r0, r4
    df42:	4bc7      	ldr	r3, [pc, #796]	; (e260 <lv_draw_rect+0x1f3c>)
    df44:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    df46:	8a6a      	ldrh	r2, [r5, #18]
    df48:	4442      	add	r2, r8
    df4a:	8a29      	ldrh	r1, [r5, #16]
    df4c:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    df50:	4419      	add	r1, r3
    df52:	9b08      	ldr	r3, [sp, #32]
    df54:	b212      	sxth	r2, r2
    df56:	b209      	sxth	r1, r1
    df58:	9407      	str	r4, [sp, #28]
    df5a:	4620      	mov	r0, r4
    df5c:	4cc1      	ldr	r4, [pc, #772]	; (e264 <lv_draw_rect+0x1f40>)
    df5e:	47a0      	blx	r4
    df60:	4604      	mov	r4, r0
            fill_area2.y1 = fill_area.y1;
    df62:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    df66:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            fill_area2.y2 = fill_area.y2;
    df6a:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    df6e:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
            fill_area2.x1 = coords->x1;
    df72:	f9ba 3000 	ldrsh.w	r3, [sl]
    df76:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
            fill_area2.x2 = coords->x1 + rout - 1;
    df7a:	3b01      	subs	r3, #1
    df7c:	443b      	add	r3, r7
    df7e:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
    df82:	f8cd b008 	str.w	fp, [sp, #8]
    df86:	9601      	str	r6, [sp, #4]
    df88:	9000      	str	r0, [sp, #0]
    df8a:	9b07      	ldr	r3, [sp, #28]
    df8c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    df90:	a91e      	add	r1, sp, #120	; 0x78
    df92:	9804      	ldr	r0, [sp, #16]
    df94:	47c8      	blx	r9
            if(fill_area2.y2 < coords->y1 + dsc->border_width) {
    df96:	f9bd 207e 	ldrsh.w	r2, [sp, #126]	; 0x7e
    df9a:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
    df9e:	990c      	ldr	r1, [sp, #48]	; 0x30
    dfa0:	f9b1 1010 	ldrsh.w	r1, [r1, #16]
    dfa4:	440b      	add	r3, r1
    dfa6:	429a      	cmp	r2, r3
    dfa8:	da9a      	bge.n	dee0 <lv_draw_rect+0x1bbc>
                fill_area2.x1 = coords->x1 + rout;
    dfaa:	f8ba 3000 	ldrh.w	r3, [sl]
    dfae:	443b      	add	r3, r7
    dfb0:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
                fill_area2.x2 = coords->x2 - rout;
    dfb4:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    dfb8:	1bdb      	subs	r3, r3, r7
    dfba:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
    dfbe:	f8cd b008 	str.w	fp, [sp, #8]
    dfc2:	9601      	str	r6, [sp, #4]
    dfc4:	2301      	movs	r3, #1
    dfc6:	9300      	str	r3, [sp, #0]
    dfc8:	2300      	movs	r3, #0
    dfca:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    dfce:	a91e      	add	r1, sp, #120	; 0x78
    dfd0:	9804      	ldr	r0, [sp, #16]
    dfd2:	47c8      	blx	r9
    dfd4:	e784      	b.n	dee0 <lv_draw_rect+0x1bbc>
    dfd6:	4634      	mov	r4, r6
    dfd8:	465e      	mov	r6, fp
    dfda:	f8dd b01c 	ldr.w	fp, [sp, #28]
    dfde:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
        int32_t lower_corner_end = coords->y2 - disp_area->y1 - corner_size;
    dfe2:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
    dfe6:	9a06      	ldr	r2, [sp, #24]
    dfe8:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
    dfec:	1ad2      	subs	r2, r2, r3
    dfee:	990d      	ldr	r1, [sp, #52]	; 0x34
    dff0:	1a52      	subs	r2, r2, r1
        lower_corner_end = LV_MATH_MAX(lower_corner_end, draw_area.y1);
    dff2:	f9bd 8062 	ldrsh.w	r8, [sp, #98]	; 0x62
    dff6:	4590      	cmp	r8, r2
    dff8:	bfb8      	it	lt
    dffa:	4690      	movlt	r8, r2
        if(lower_corner_end <= upper_corner_end) lower_corner_end = upper_corner_end + 1;
    dffc:	990b      	ldr	r1, [sp, #44]	; 0x2c
    dffe:	4541      	cmp	r1, r8
    e000:	bfa8      	it	ge
    e002:	f101 0801 	addge.w	r8, r1, #1
        fill_area.y1 = disp_area->y1 + lower_corner_end;
    e006:	4443      	add	r3, r8
    e008:	b21b      	sxth	r3, r3
    e00a:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        fill_area.y2 = fill_area.y1;
    e00e:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
    e012:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
    e016:	4598      	cmp	r8, r3
    e018:	f300 808d 	bgt.w	e136 <lv_draw_rect+0x1e12>
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
    e01c:	f8df 9248 	ldr.w	r9, [pc, #584]	; e268 <lv_draw_rect+0x1f44>
    e020:	f8cd b01c 	str.w	fp, [sp, #28]
    e024:	46b3      	mov	fp, r6
    e026:	4626      	mov	r6, r4
    e028:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
    e02c:	f8dd a018 	ldr.w	sl, [sp, #24]
    e030:	e02e      	b.n	e090 <lv_draw_rect+0x1d6c>
            fill_area2.x1 = coords->x2 - rout + 1;
    e032:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
    e036:	1c5a      	adds	r2, r3, #1
    e038:	1bd2      	subs	r2, r2, r7
    e03a:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
            fill_area2.x2 = coords->x2;
    e03e:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            int32_t mask_ofs = (coords->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
    e042:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e044:	1a9b      	subs	r3, r3, r2
    e046:	3301      	adds	r3, #1
    e048:	f9b5 2010 	ldrsh.w	r2, [r5, #16]
    e04c:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
    e050:	440a      	add	r2, r1
    e052:	1a9b      	subs	r3, r3, r2
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
    e054:	f8cd b008 	str.w	fp, [sp, #8]
    e058:	9601      	str	r6, [sp, #4]
    e05a:	9400      	str	r4, [sp, #0]
    e05c:	9a07      	ldr	r2, [sp, #28]
    e05e:	2b00      	cmp	r3, #0
    e060:	bfa8      	it	ge
    e062:	18d2      	addge	r2, r2, r3
    e064:	4613      	mov	r3, r2
    e066:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    e06a:	a91e      	add	r1, sp, #120	; 0x78
    e06c:	9804      	ldr	r0, [sp, #16]
    e06e:	47c8      	blx	r9
            fill_area.y1++;
    e070:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    e074:	3301      	adds	r3, #1
    e076:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
            fill_area.y2++;
    e07a:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    e07e:	3301      	adds	r3, #1
    e080:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
    e084:	f108 0801 	add.w	r8, r8, #1
    e088:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
    e08c:	4598      	cmp	r8, r3
    e08e:	dc4c      	bgt.n	e12a <lv_draw_rect+0x1e06>
            _lv_memset_ff(mask_buf, draw_area_w);
    e090:	9909      	ldr	r1, [sp, #36]	; 0x24
    e092:	9c07      	ldr	r4, [sp, #28]
    e094:	4620      	mov	r0, r4
    e096:	4b72      	ldr	r3, [pc, #456]	; (e260 <lv_draw_rect+0x1f3c>)
    e098:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    e09a:	8a6a      	ldrh	r2, [r5, #18]
    e09c:	4442      	add	r2, r8
    e09e:	8a29      	ldrh	r1, [r5, #16]
    e0a0:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    e0a4:	4419      	add	r1, r3
    e0a6:	9b08      	ldr	r3, [sp, #32]
    e0a8:	b212      	sxth	r2, r2
    e0aa:	b209      	sxth	r1, r1
    e0ac:	9407      	str	r4, [sp, #28]
    e0ae:	4620      	mov	r0, r4
    e0b0:	4c6c      	ldr	r4, [pc, #432]	; (e264 <lv_draw_rect+0x1f40>)
    e0b2:	47a0      	blx	r4
    e0b4:	4604      	mov	r4, r0
            fill_area2.x1 = coords->x1;
    e0b6:	f9ba 3000 	ldrsh.w	r3, [sl]
    e0ba:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
            fill_area2.x2 = coords->x1 + rout - 1;
    e0be:	3b01      	subs	r3, #1
    e0c0:	443b      	add	r3, r7
    e0c2:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            fill_area2.y1 = fill_area.y1;
    e0c6:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    e0ca:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            fill_area2.y2 = fill_area.y2;
    e0ce:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    e0d2:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
    e0d6:	f8cd b008 	str.w	fp, [sp, #8]
    e0da:	9601      	str	r6, [sp, #4]
    e0dc:	9000      	str	r0, [sp, #0]
    e0de:	9b07      	ldr	r3, [sp, #28]
    e0e0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    e0e4:	a91e      	add	r1, sp, #120	; 0x78
    e0e6:	9804      	ldr	r0, [sp, #16]
    e0e8:	47c8      	blx	r9
            if(fill_area2.y2 > coords->y2 - dsc->border_width) {
    e0ea:	f9bd 207e 	ldrsh.w	r2, [sp, #126]	; 0x7e
    e0ee:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
    e0f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    e0f4:	f9b1 1010 	ldrsh.w	r1, [r1, #16]
    e0f8:	1a5b      	subs	r3, r3, r1
    e0fa:	429a      	cmp	r2, r3
    e0fc:	dd99      	ble.n	e032 <lv_draw_rect+0x1d0e>
                fill_area2.x1 = coords->x1 + rout;
    e0fe:	f8ba 3000 	ldrh.w	r3, [sl]
    e102:	443b      	add	r3, r7
    e104:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
                fill_area2.x2 = coords->x2 - rout;
    e108:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    e10c:	1bdb      	subs	r3, r3, r7
    e10e:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
    e112:	f8cd b008 	str.w	fp, [sp, #8]
    e116:	9601      	str	r6, [sp, #4]
    e118:	2301      	movs	r3, #1
    e11a:	9300      	str	r3, [sp, #0]
    e11c:	2300      	movs	r3, #0
    e11e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    e122:	a91e      	add	r1, sp, #120	; 0x78
    e124:	9804      	ldr	r0, [sp, #16]
    e126:	47c8      	blx	r9
    e128:	e783      	b.n	e032 <lv_draw_rect+0x1d0e>
    e12a:	4634      	mov	r4, r6
    e12c:	465e      	mov	r6, fp
    e12e:	f8dd b01c 	ldr.w	fp, [sp, #28]
    e132:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
        fill_area.y1 = coords->y1 + corner_size + 1;
    e136:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
    e13a:	9906      	ldr	r1, [sp, #24]
    e13c:	884b      	ldrh	r3, [r1, #2]
    e13e:	3301      	adds	r3, #1
    e140:	4413      	add	r3, r2
    e142:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        fill_area.y2 = coords->y2 - corner_size - 1;
    e146:	88cb      	ldrh	r3, [r1, #6]
    e148:	3b01      	subs	r3, #1
    e14a:	1a9b      	subs	r3, r3, r2
    e14c:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        fill_area.x1 = coords->x1;
    e150:	f9b1 3000 	ldrsh.w	r3, [r1]
    e154:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        fill_area.x2 = coords->x1 + dsc->border_width - 1;
    e158:	f8ba 2010 	ldrh.w	r2, [sl, #16]
    e15c:	3a01      	subs	r2, #1
    e15e:	4413      	add	r3, r2
    e160:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
    e164:	9602      	str	r6, [sp, #8]
    e166:	9401      	str	r4, [sp, #4]
    e168:	2701      	movs	r7, #1
    e16a:	9700      	str	r7, [sp, #0]
    e16c:	2300      	movs	r3, #0
    e16e:	f8bd 9014 	ldrh.w	r9, [sp, #20]
    e172:	464a      	mov	r2, r9
    e174:	a91c      	add	r1, sp, #112	; 0x70
    e176:	f8dd 8010 	ldr.w	r8, [sp, #16]
    e17a:	4640      	mov	r0, r8
    e17c:	4d3a      	ldr	r5, [pc, #232]	; (e268 <lv_draw_rect+0x1f44>)
    e17e:	47a8      	blx	r5
        fill_area.x1 = coords->x2 - dsc->border_width + 1;
    e180:	9b06      	ldr	r3, [sp, #24]
    e182:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
    e186:	f8ba 3010 	ldrh.w	r3, [sl, #16]
    e18a:	1afb      	subs	r3, r7, r3
    e18c:	4413      	add	r3, r2
    e18e:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        fill_area.x2 = coords->x2;
    e192:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
    e196:	9602      	str	r6, [sp, #8]
    e198:	9401      	str	r4, [sp, #4]
    e19a:	9700      	str	r7, [sp, #0]
    e19c:	2300      	movs	r3, #0
    e19e:	464a      	mov	r2, r9
    e1a0:	a91c      	add	r1, sp, #112	; 0x70
    e1a2:	4640      	mov	r0, r8
    e1a4:	47a8      	blx	r5
    lv_draw_mask_remove_id(mask_rin_id);
    e1a6:	980f      	ldr	r0, [sp, #60]	; 0x3c
    e1a8:	4c30      	ldr	r4, [pc, #192]	; (e26c <lv_draw_rect+0x1f48>)
    e1aa:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_rout_id);
    e1ac:	980e      	ldr	r0, [sp, #56]	; 0x38
    e1ae:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
    e1b0:	4658      	mov	r0, fp
    e1b2:	4b2f      	ldr	r3, [pc, #188]	; (e270 <lv_draw_rect+0x1f4c>)
    e1b4:	4798      	blx	r3
    e1b6:	f7ff b854 	b.w	d262 <lv_draw_rect+0xf3e>
        fill_area.x1 = coords->x1;
    e1ba:	9a06      	ldr	r2, [sp, #24]
    e1bc:	f9b2 1000 	ldrsh.w	r1, [r2]
    e1c0:	f8ad 1070 	strh.w	r1, [sp, #112]	; 0x70
        fill_area.x2 = coords->x2;
    e1c4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
    e1c8:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
        fill_area.y1 = disp_area->y1 + draw_area.y1;
    e1cc:	f9bd 0062 	ldrsh.w	r0, [sp, #98]	; 0x62
    e1d0:	8a6b      	ldrh	r3, [r5, #18]
    e1d2:	4403      	add	r3, r0
    e1d4:	b21b      	sxth	r3, r3
    e1d6:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        fill_area.y2 = fill_area.y1;
    e1da:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
    e1de:	f9ba 3012 	ldrsh.w	r3, [sl, #18]
    e1e2:	2b04      	cmp	r3, #4
    e1e4:	d029      	beq.n	e23a <lv_draw_rect+0x1f16>
        else if(dsc->border_side == LV_BORDER_SIDE_RIGHT) fill_area.x1 = coords->x2 - corner_size;
    e1e6:	2b08      	cmp	r3, #8
    e1e8:	d044      	beq.n	e274 <lv_draw_rect+0x1f50>
        volatile bool top_only = false;
    e1ea:	2200      	movs	r2, #0
    e1ec:	f88d 204e 	strb.w	r2, [sp, #78]	; 0x4e
        volatile bool bottom_only = false;
    e1f0:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
    e1f4:	2b02      	cmp	r3, #2
    e1f6:	d129      	bne.n	e24c <lv_draw_rect+0x1f28>
    e1f8:	2301      	movs	r3, #1
    e1fa:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
        volatile bool normal = !top_only && !bottom_only ? true : false;
    e1fe:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
    e202:	b91b      	cbnz	r3, e20c <lv_draw_rect+0x1ee8>
    e204:	f89d 804f 	ldrb.w	r8, [sp, #79]	; 0x4f
    e208:	f088 0801 	eor.w	r8, r8, #1
    e20c:	f008 0801 	and.w	r8, r8, #1
    e210:	f88d 8050 	strb.w	r8, [sp, #80]	; 0x50
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    e214:	4607      	mov	r7, r0
    e216:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
    e21a:	4298      	cmp	r0, r3
    e21c:	dcc3      	bgt.n	e1a6 <lv_draw_rect+0x1e82>
                _lv_memset_ff(mask_buf, draw_area_w);
    e21e:	f8df 8040 	ldr.w	r8, [pc, #64]	; e260 <lv_draw_rect+0x1f3c>
                _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
    e222:	f8df 9044 	ldr.w	r9, [pc, #68]	; e268 <lv_draw_rect+0x1f44>
    e226:	940a      	str	r4, [sp, #40]	; 0x28
    e228:	f8cd b01c 	str.w	fp, [sp, #28]
    e22c:	f8dd b018 	ldr.w	fp, [sp, #24]
    e230:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
    e234:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    e238:	e04e      	b.n	e2d8 <lv_draw_rect+0x1fb4>
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
    e23a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    e23c:	4411      	add	r1, r2
    e23e:	f8ad 1074 	strh.w	r1, [sp, #116]	; 0x74
        volatile bool top_only = false;
    e242:	2200      	movs	r2, #0
    e244:	f88d 204e 	strb.w	r2, [sp, #78]	; 0x4e
        volatile bool bottom_only = false;
    e248:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
    e24c:	2b01      	cmp	r3, #1
    e24e:	d016      	beq.n	e27e <lv_draw_rect+0x1f5a>
        if(dsc->border_side == (LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM)) {
    e250:	2b03      	cmp	r3, #3
    e252:	d1d4      	bne.n	e1fe <lv_draw_rect+0x1eda>
            top_only = true;
    e254:	2301      	movs	r3, #1
    e256:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
            bottom_only = true;
    e25a:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    e25e:	e7ce      	b.n	e1fe <lv_draw_rect+0x1eda>
    e260:	00012be1 	.word	0x00012be1
    e264:	0000be11 	.word	0x0000be11
    e268:	00007745 	.word	0x00007745
    e26c:	0000be61 	.word	0x0000be61
    e270:	00012565 	.word	0x00012565
        else if(dsc->border_side == LV_BORDER_SIDE_RIGHT) fill_area.x1 = coords->x2 - corner_size;
    e274:	990d      	ldr	r1, [sp, #52]	; 0x34
    e276:	1a52      	subs	r2, r2, r1
    e278:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
    e27c:	e7e1      	b.n	e242 <lv_draw_rect+0x1f1e>
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
    e27e:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    e282:	e7bc      	b.n	e1fe <lv_draw_rect+0x1eda>
                _lv_memset_ff(mask_buf, draw_area_w);
    e284:	9909      	ldr	r1, [sp, #36]	; 0x24
    e286:	9c07      	ldr	r4, [sp, #28]
    e288:	4620      	mov	r0, r4
    e28a:	47c0      	blx	r8
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    e28c:	8a6a      	ldrh	r2, [r5, #18]
    e28e:	443a      	add	r2, r7
    e290:	8a29      	ldrh	r1, [r5, #16]
    e292:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    e296:	4419      	add	r1, r3
    e298:	9b08      	ldr	r3, [sp, #32]
    e29a:	b212      	sxth	r2, r2
    e29c:	b209      	sxth	r1, r1
    e29e:	9407      	str	r4, [sp, #28]
    e2a0:	4620      	mov	r0, r4
    e2a2:	4c98      	ldr	r4, [pc, #608]	; (e504 <lv_draw_rect+0x21e0>)
    e2a4:	47a0      	blx	r4
                _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
    e2a6:	9602      	str	r6, [sp, #8]
    e2a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e2aa:	9201      	str	r2, [sp, #4]
    e2ac:	9000      	str	r0, [sp, #0]
    e2ae:	9b07      	ldr	r3, [sp, #28]
    e2b0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    e2b4:	a91c      	add	r1, sp, #112	; 0x70
    e2b6:	9804      	ldr	r0, [sp, #16]
    e2b8:	47c8      	blx	r9
            fill_area.y1++;
    e2ba:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    e2be:	3301      	adds	r3, #1
    e2c0:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
            fill_area.y2++;
    e2c4:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    e2c8:	3301      	adds	r3, #1
    e2ca:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    e2ce:	3701      	adds	r7, #1
    e2d0:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
    e2d4:	429f      	cmp	r7, r3
    e2d6:	dc1a      	bgt.n	e30e <lv_draw_rect+0x1fea>
            if(normal ||
    e2d8:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
    e2dc:	2b00      	cmp	r3, #0
    e2de:	d1d1      	bne.n	e284 <lv_draw_rect+0x1f60>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
    e2e0:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
            if(normal ||
    e2e4:	b133      	cbz	r3, e2f4 <lv_draw_rect+0x1fd0>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
    e2e6:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
    e2ea:	f9bb 3002 	ldrsh.w	r3, [fp, #2]
    e2ee:	4453      	add	r3, sl
    e2f0:	429a      	cmp	r2, r3
    e2f2:	ddc7      	ble.n	e284 <lv_draw_rect+0x1f60>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
    e2f4:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
    e2f8:	2b00      	cmp	r3, #0
    e2fa:	d0de      	beq.n	e2ba <lv_draw_rect+0x1f96>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
    e2fc:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
    e300:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
    e304:	eba3 030a 	sub.w	r3, r3, sl
    e308:	429a      	cmp	r2, r3
    e30a:	dbd6      	blt.n	e2ba <lv_draw_rect+0x1f96>
    e30c:	e7ba      	b.n	e284 <lv_draw_rect+0x1f60>
    e30e:	f8dd b01c 	ldr.w	fp, [sp, #28]
    e312:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
    e316:	e746      	b.n	e1a6 <lv_draw_rect+0x1e82>

    lv_point_t s;
    _lv_txt_get_size(&s, dsc->value_str, dsc->value_font, dsc->value_letter_space, dsc->value_line_space, LV_COORD_MAX,
    e318:	f9ba 304c 	ldrsh.w	r3, [sl, #76]	; 0x4c
    e31c:	2400      	movs	r4, #0
    e31e:	9402      	str	r4, [sp, #8]
    e320:	f647 4218 	movw	r2, #31768	; 0x7c18
    e324:	9201      	str	r2, [sp, #4]
    e326:	f9ba 204e 	ldrsh.w	r2, [sl, #78]	; 0x4e
    e32a:	9200      	str	r2, [sp, #0]
    e32c:	f8da 2040 	ldr.w	r2, [sl, #64]	; 0x40
    e330:	a81c      	add	r0, sp, #112	; 0x70
    e332:	4d75      	ldr	r5, [pc, #468]	; (e508 <lv_draw_rect+0x21e4>)
    e334:	47a8      	blx	r5
                     LV_TXT_FLAG_NONE);

    lv_area_t value_area;
    value_area.x1 = 0;
    e336:	f8ad 4088 	strh.w	r4, [sp, #136]	; 0x88
    value_area.y1 = 0;
    e33a:	f8ad 408a 	strh.w	r4, [sp, #138]	; 0x8a
    value_area.x2 = s.x - 1;
    e33e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
    e342:	3b01      	subs	r3, #1
    e344:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
    value_area.y2 = s.y - 1;
    e348:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    e34c:	3b01      	subs	r3, #1
    e34e:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e

    lv_point_t p_align;
    _lv_area_align(coords, &value_area, dsc->value_align, &p_align);
    e352:	ab1e      	add	r3, sp, #120	; 0x78
    e354:	f89a 2050 	ldrb.w	r2, [sl, #80]	; 0x50
    e358:	a922      	add	r1, sp, #136	; 0x88
    e35a:	9806      	ldr	r0, [sp, #24]
    e35c:	4d6b      	ldr	r5, [pc, #428]	; (e50c <lv_draw_rect+0x21e8>)
    e35e:	47a8      	blx	r5

    value_area.x1 += p_align.x + dsc->value_ofs_x;
    e360:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
    e364:	f8ba 3048 	ldrh.w	r3, [sl, #72]	; 0x48
    e368:	441a      	add	r2, r3
    e36a:	b292      	uxth	r2, r2
    e36c:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
    e370:	4413      	add	r3, r2
    e372:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
    value_area.y1 += p_align.y + dsc->value_ofs_y;
    e376:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
    e37a:	f8ba 104a 	ldrh.w	r1, [sl, #74]	; 0x4a
    e37e:	440b      	add	r3, r1
    e380:	b29b      	uxth	r3, r3
    e382:	f8bd 108a 	ldrh.w	r1, [sp, #138]	; 0x8a
    e386:	4419      	add	r1, r3
    e388:	f8ad 108a 	strh.w	r1, [sp, #138]	; 0x8a
    value_area.x2 += p_align.x + dsc->value_ofs_x;
    e38c:	f8bd 108c 	ldrh.w	r1, [sp, #140]	; 0x8c
    e390:	440a      	add	r2, r1
    e392:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
    value_area.y2 += p_align.y + dsc->value_ofs_y;
    e396:	f8bd 208e 	ldrh.w	r2, [sp, #142]	; 0x8e
    e39a:	4413      	add	r3, r2
    e39c:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
    e3a0:	a829      	add	r0, sp, #164	; 0xa4
    e3a2:	4b5b      	ldr	r3, [pc, #364]	; (e510 <lv_draw_rect+0x21ec>)
    e3a4:	4798      	blx	r3
    label_dsc.font = dsc->value_font;
    e3a6:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
    e3aa:	932a      	str	r3, [sp, #168]	; 0xa8
    label_dsc.letter_space = dsc->value_letter_space;
    e3ac:	f8ba 304c 	ldrh.w	r3, [sl, #76]	; 0x4c
    e3b0:	f8ad 30b0 	strh.w	r3, [sp, #176]	; 0xb0
    label_dsc.line_space = dsc->value_line_space;
    e3b4:	f8ba 304e 	ldrh.w	r3, [sl, #78]	; 0x4e
    e3b8:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
    label_dsc.color = dsc->value_color;
    e3bc:	f8ba 3046 	ldrh.w	r3, [sl, #70]	; 0x46
    e3c0:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
    label_dsc.opa = dsc->value_opa;
    e3c4:	f89a 3044 	ldrb.w	r3, [sl, #68]	; 0x44
    e3c8:	f88d 30ac 	strb.w	r3, [sp, #172]	; 0xac

    lv_draw_label(&value_area, clip, &label_dsc, dsc->value_str, NULL);
    e3cc:	9400      	str	r4, [sp, #0]
    e3ce:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
    e3d2:	aa29      	add	r2, sp, #164	; 0xa4
    e3d4:	9904      	ldr	r1, [sp, #16]
    e3d6:	a822      	add	r0, sp, #136	; 0x88
    e3d8:	4c4e      	ldr	r4, [pc, #312]	; (e514 <lv_draw_rect+0x21f0>)
    e3da:	47a0      	blx	r4
    e3dc:	f7fe bf49 	b.w	d272 <lv_draw_rect+0xf4e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    e3e0:	1c72      	adds	r2, r6, #1
    e3e2:	9b06      	ldr	r3, [sp, #24]
    e3e4:	1ad2      	subs	r2, r2, r3
    int32_t inner_w = lv_area_get_width(&area_inner);
    e3e6:	b212      	sxth	r2, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    e3e8:	1c6b      	adds	r3, r5, #1
    e3ea:	9907      	ldr	r1, [sp, #28]
    e3ec:	1a5b      	subs	r3, r3, r1
    int32_t inner_h = lv_area_get_height(&area_inner);
    e3ee:	b21b      	sxth	r3, r3
    int32_t short_side = LV_MATH_MIN(inner_w, inner_h);
    e3f0:	429a      	cmp	r2, r3
    e3f2:	bfa8      	it	ge
    e3f4:	461a      	movge	r2, r3
    if(rin > short_side >> 1) rin = short_side >> 1;
    e3f6:	1052      	asrs	r2, r2, #1
    e3f8:	9b08      	ldr	r3, [sp, #32]
    e3fa:	429a      	cmp	r2, r3
    e3fc:	bfa8      	it	ge
    e3fe:	461a      	movge	r2, r3
    int32_t rout = rin + dsc->outline_width;
    e400:	9b05      	ldr	r3, [sp, #20]
    e402:	4413      	add	r3, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    e404:	3701      	adds	r7, #1
    e406:	990a      	ldr	r1, [sp, #40]	; 0x28
    e408:	1a79      	subs	r1, r7, r1
    int32_t coords_out_w = lv_area_get_width(&area_outer);
    e40a:	b208      	sxth	r0, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    e40c:	1c61      	adds	r1, r4, #1
    e40e:	eba1 0108 	sub.w	r1, r1, r8
    int32_t coords_out_h = lv_area_get_height(&area_outer);
    e412:	b209      	sxth	r1, r1
    short_side = LV_MATH_MIN(coords_out_w, coords_out_h);
    e414:	4281      	cmp	r1, r0
    e416:	bfa8      	it	ge
    e418:	4601      	movge	r1, r0
    if(rout > short_side >> 1) rout = short_side >> 1;
    e41a:	1049      	asrs	r1, r1, #1
    e41c:	4299      	cmp	r1, r3
    e41e:	bfa8      	it	ge
    e420:	4619      	movge	r1, r3
    e422:	460f      	mov	r7, r1
    e424:	9106      	str	r1, [sp, #24]
    draw_area.x1 -= disp_area->x1;
    e426:	f8b9 0010 	ldrh.w	r0, [r9, #16]
    e42a:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    e42e:	1a1b      	subs	r3, r3, r0
    e430:	b299      	uxth	r1, r3
    e432:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
    draw_area.y1 -= disp_area->y1;
    e436:	f8b9 4012 	ldrh.w	r4, [r9, #18]
    e43a:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
    e43e:	1b1b      	subs	r3, r3, r4
    e440:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    draw_area.x2 -= disp_area->x1;
    e444:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
    e448:	1a1b      	subs	r3, r3, r0
    e44a:	b29b      	uxth	r3, r3
    e44c:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    draw_area.y2 -= disp_area->y1;
    e450:	f8bd 006e 	ldrh.w	r0, [sp, #110]	; 0x6e
    e454:	1b00      	subs	r0, r0, r4
    e456:	f8ad 006e 	strh.w	r0, [sp, #110]	; 0x6e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    e45a:	3301      	adds	r3, #1
    e45c:	1a5b      	subs	r3, r3, r1
    e45e:	b21b      	sxth	r3, r3
    e460:	461e      	mov	r6, r3
    e462:	9307      	str	r3, [sp, #28]
    lv_draw_mask_radius_init(&mask_rin_param, &area_inner, rin, true);
    e464:	2301      	movs	r3, #1
    e466:	a916      	add	r1, sp, #88	; 0x58
    e468:	a822      	add	r0, sp, #136	; 0x88
    e46a:	4d2b      	ldr	r5, [pc, #172]	; (e518 <lv_draw_rect+0x21f4>)
    e46c:	47a8      	blx	r5
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
    e46e:	2100      	movs	r1, #0
    e470:	a822      	add	r0, sp, #136	; 0x88
    e472:	4c2a      	ldr	r4, [pc, #168]	; (e51c <lv_draw_rect+0x21f8>)
    e474:	47a0      	blx	r4
    e476:	900c      	str	r0, [sp, #48]	; 0x30
    lv_draw_mask_radius_init(&mask_rout_param, &area_outer, rout, false);
    e478:	2300      	movs	r3, #0
    e47a:	b23a      	sxth	r2, r7
    e47c:	a918      	add	r1, sp, #96	; 0x60
    e47e:	a829      	add	r0, sp, #164	; 0xa4
    e480:	47a8      	blx	r5
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
    e482:	2100      	movs	r1, #0
    e484:	a829      	add	r0, sp, #164	; 0xa4
    e486:	47a0      	blx	r4
    e488:	900d      	str	r0, [sp, #52]	; 0x34
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
    e48a:	9608      	str	r6, [sp, #32]
    e48c:	4630      	mov	r0, r6
    e48e:	4b24      	ldr	r3, [pc, #144]	; (e520 <lv_draw_rect+0x21fc>)
    e490:	4798      	blx	r3
    e492:	900b      	str	r0, [sp, #44]	; 0x2c
    int32_t corner_size = LV_MATH_MAX(rout, dsc->outline_width - 1);
    e494:	f9ba 3018 	ldrsh.w	r3, [sl, #24]
    lv_color_t color = dsc->outline_color;
    e498:	f8ba 2016 	ldrh.w	r2, [sl, #22]
    e49c:	f8ad 2014 	strh.w	r2, [sp, #20]
    lv_blend_mode_t blend_mode = dsc->outline_blend_mode;
    e4a0:	f89a 501d 	ldrb.w	r5, [sl, #29]
    if(simple_mode) {
    e4a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e4a6:	2a00      	cmp	r2, #0
    e4a8:	f040 81a6 	bne.w	e7f8 <lv_draw_rect+0x24d4>
    int32_t corner_size = LV_MATH_MAX(rout, dsc->outline_width - 1);
    e4ac:	3b01      	subs	r3, #1
    e4ae:	42bb      	cmp	r3, r7
    e4b0:	bfb8      	it	lt
    e4b2:	463b      	movlt	r3, r7
    e4b4:	4619      	mov	r1, r3
    e4b6:	930e      	str	r3, [sp, #56]	; 0x38
        int32_t upper_corner_end = area_outer.y1 - disp_area->y1 + corner_size;
    e4b8:	f9b9 3012 	ldrsh.w	r3, [r9, #18]
    e4bc:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
    e4c0:	1ad2      	subs	r2, r2, r3
    e4c2:	440a      	add	r2, r1
    e4c4:	4611      	mov	r1, r2
    e4c6:	9209      	str	r2, [sp, #36]	; 0x24
        fill_area.x1 = area_outer.x1;
    e4c8:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
    e4cc:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
        fill_area.x2 = area_outer.x2;
    e4d0:	f8bd 2064 	ldrh.w	r2, [sp, #100]	; 0x64
    e4d4:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
        fill_area.y1 = disp_area->y1 + draw_area.y1;
    e4d8:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
    e4dc:	4413      	add	r3, r2
    e4de:	b21b      	sxth	r3, r3
    e4e0:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        fill_area.y2 = fill_area.y1;
    e4e4:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
    e4e8:	4616      	mov	r6, r2
    e4ea:	4291      	cmp	r1, r2
    e4ec:	f2c0 809d 	blt.w	e62a <lv_draw_rect+0x2306>
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
    e4f0:	f8df 8030 	ldr.w	r8, [pc, #48]	; e524 <lv_draw_rect+0x2200>
    e4f4:	462b      	mov	r3, r5
    e4f6:	465d      	mov	r5, fp
    e4f8:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
    e4fc:	4682      	mov	sl, r0
    e4fe:	469b      	mov	fp, r3
    e500:	e03f      	b.n	e582 <lv_draw_rect+0x225e>
    e502:	bf00      	nop
    e504:	0000be11 	.word	0x0000be11
    e508:	00014071 	.word	0x00014071
    e50c:	00011819 	.word	0x00011819
    e510:	000099c1 	.word	0x000099c1
    e514:	00009a19 	.word	0x00009a19
    e518:	0000c021 	.word	0x0000c021
    e51c:	0000bdb5 	.word	0x0000bdb5
    e520:	00012931 	.word	0x00012931
    e524:	00007745 	.word	0x00007745
            fill_area2.x1 = area_outer.x2 - rout + 1;
    e528:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
    e52c:	1c5a      	adds	r2, r3, #1
    e52e:	1b14      	subs	r4, r2, r4
    e530:	f8ad 4078 	strh.w	r4, [sp, #120]	; 0x78
            fill_area2.x2 = area_outer.x2;
    e534:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            int32_t mask_ofs = (area_outer.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
    e538:	9a06      	ldr	r2, [sp, #24]
    e53a:	1a9b      	subs	r3, r3, r2
    e53c:	3301      	adds	r3, #1
    e53e:	f9b9 2010 	ldrsh.w	r2, [r9, #16]
    e542:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
    e546:	440a      	add	r2, r1
    e548:	1a9b      	subs	r3, r3, r2
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
    e54a:	f8cd b008 	str.w	fp, [sp, #8]
    e54e:	9501      	str	r5, [sp, #4]
    e550:	9700      	str	r7, [sp, #0]
    e552:	2b00      	cmp	r3, #0
    e554:	bfac      	ite	ge
    e556:	4453      	addge	r3, sl
    e558:	f10a 0300 	addlt.w	r3, sl, #0
    e55c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    e560:	a91e      	add	r1, sp, #120	; 0x78
    e562:	9804      	ldr	r0, [sp, #16]
    e564:	47c0      	blx	r8
            fill_area.y1++;
    e566:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    e56a:	3301      	adds	r3, #1
    e56c:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
            fill_area.y2++;
    e570:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    e574:	3301      	adds	r3, #1
    e576:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
    e57a:	3601      	adds	r6, #1
    e57c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e57e:	42b3      	cmp	r3, r6
    e580:	db4e      	blt.n	e620 <lv_draw_rect+0x22fc>
            _lv_memset_ff(mask_buf, draw_area_w);
    e582:	9908      	ldr	r1, [sp, #32]
    e584:	4650      	mov	r0, sl
    e586:	4bcc      	ldr	r3, [pc, #816]	; (e8b8 <lv_draw_rect+0x2594>)
    e588:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    e58a:	f8b9 2012 	ldrh.w	r2, [r9, #18]
    e58e:	4432      	add	r2, r6
    e590:	f8b9 1010 	ldrh.w	r1, [r9, #16]
    e594:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    e598:	4419      	add	r1, r3
    e59a:	9b07      	ldr	r3, [sp, #28]
    e59c:	b212      	sxth	r2, r2
    e59e:	b209      	sxth	r1, r1
    e5a0:	4650      	mov	r0, sl
    e5a2:	4cc6      	ldr	r4, [pc, #792]	; (e8bc <lv_draw_rect+0x2598>)
    e5a4:	47a0      	blx	r4
    e5a6:	4607      	mov	r7, r0
            fill_area2.y1 = fill_area.y1;
    e5a8:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    e5ac:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            fill_area2.y2 = fill_area.y2;
    e5b0:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    e5b4:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
            fill_area2.x1 = area_outer.x1;
    e5b8:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
    e5bc:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
            fill_area2.x2 = area_outer.x1 + rout - 1;
    e5c0:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    e5c4:	3b01      	subs	r3, #1
    e5c6:	4423      	add	r3, r4
    e5c8:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
    e5cc:	f8cd b008 	str.w	fp, [sp, #8]
    e5d0:	9501      	str	r5, [sp, #4]
    e5d2:	9000      	str	r0, [sp, #0]
    e5d4:	4653      	mov	r3, sl
    e5d6:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    e5da:	a91e      	add	r1, sp, #120	; 0x78
    e5dc:	9804      	ldr	r0, [sp, #16]
    e5de:	47c0      	blx	r8
            if(fill_area2.y2 < area_outer.y1 + dsc->outline_width) {
    e5e0:	f9bd 207e 	ldrsh.w	r2, [sp, #126]	; 0x7e
    e5e4:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
    e5e8:	990a      	ldr	r1, [sp, #40]	; 0x28
    e5ea:	f9b1 1018 	ldrsh.w	r1, [r1, #24]
    e5ee:	440b      	add	r3, r1
    e5f0:	429a      	cmp	r2, r3
    e5f2:	da99      	bge.n	e528 <lv_draw_rect+0x2204>
                fill_area2.x1 = area_outer.x1 + rout;
    e5f4:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    e5f8:	4423      	add	r3, r4
    e5fa:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
                fill_area2.x2 = area_outer.x2 - rout;
    e5fe:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
    e602:	1b1b      	subs	r3, r3, r4
    e604:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
    e608:	f8cd b008 	str.w	fp, [sp, #8]
    e60c:	9501      	str	r5, [sp, #4]
    e60e:	2301      	movs	r3, #1
    e610:	9300      	str	r3, [sp, #0]
    e612:	2300      	movs	r3, #0
    e614:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    e618:	a91e      	add	r1, sp, #120	; 0x78
    e61a:	9804      	ldr	r0, [sp, #16]
    e61c:	47c0      	blx	r8
    e61e:	e783      	b.n	e528 <lv_draw_rect+0x2204>
    e620:	465b      	mov	r3, fp
    e622:	46ab      	mov	fp, r5
    e624:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    e628:	461d      	mov	r5, r3
        int32_t lower_corner_end = area_outer.y2 - disp_area->y1 - corner_size;
    e62a:	f9b9 3012 	ldrsh.w	r3, [r9, #18]
    e62e:	f9bd 6066 	ldrsh.w	r6, [sp, #102]	; 0x66
    e632:	1af6      	subs	r6, r6, r3
    e634:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    e636:	1ab6      	subs	r6, r6, r2
        if(lower_corner_end <= upper_corner_end) lower_corner_end = upper_corner_end + 1;
    e638:	9909      	ldr	r1, [sp, #36]	; 0x24
    e63a:	460a      	mov	r2, r1
    e63c:	42b1      	cmp	r1, r6
    e63e:	bfa4      	itt	ge
    e640:	3201      	addge	r2, #1
    e642:	4616      	movge	r6, r2
        fill_area.y1 = disp_area->y1 + lower_corner_end;
    e644:	4433      	add	r3, r6
    e646:	b21b      	sxth	r3, r3
    e648:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        fill_area.y2 = fill_area.y1;
    e64c:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
    e650:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
    e654:	429e      	cmp	r6, r3
    e656:	f300 808c 	bgt.w	e772 <lv_draw_rect+0x244e>
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
    e65a:	f8df 8264 	ldr.w	r8, [pc, #612]	; e8c0 <lv_draw_rect+0x259c>
    e65e:	462b      	mov	r3, r5
    e660:	465d      	mov	r5, fp
    e662:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    e666:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
    e66a:	469b      	mov	fp, r3
    e66c:	e02d      	b.n	e6ca <lv_draw_rect+0x23a6>
            fill_area2.x1 = area_outer.x2 - rout + 1;
    e66e:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
    e672:	1c5a      	adds	r2, r3, #1
    e674:	1b14      	subs	r4, r2, r4
    e676:	f8ad 4078 	strh.w	r4, [sp, #120]	; 0x78
            fill_area2.x2 = area_outer.x2;
    e67a:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            int32_t mask_ofs = (area_outer.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
    e67e:	9a06      	ldr	r2, [sp, #24]
    e680:	1a9b      	subs	r3, r3, r2
    e682:	3301      	adds	r3, #1
    e684:	f9b9 2010 	ldrsh.w	r2, [r9, #16]
    e688:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
    e68c:	440a      	add	r2, r1
    e68e:	1a9b      	subs	r3, r3, r2
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
    e690:	f8cd b008 	str.w	fp, [sp, #8]
    e694:	9501      	str	r5, [sp, #4]
    e696:	9700      	str	r7, [sp, #0]
    e698:	2b00      	cmp	r3, #0
    e69a:	bfac      	ite	ge
    e69c:	4453      	addge	r3, sl
    e69e:	f10a 0300 	addlt.w	r3, sl, #0
    e6a2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    e6a6:	a91e      	add	r1, sp, #120	; 0x78
    e6a8:	9804      	ldr	r0, [sp, #16]
    e6aa:	47c0      	blx	r8
            fill_area.y1++;
    e6ac:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    e6b0:	3301      	adds	r3, #1
    e6b2:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
            fill_area.y2++;
    e6b6:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    e6ba:	3301      	adds	r3, #1
    e6bc:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
    e6c0:	3601      	adds	r6, #1
    e6c2:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
    e6c6:	429e      	cmp	r6, r3
    e6c8:	dc4e      	bgt.n	e768 <lv_draw_rect+0x2444>
            _lv_memset_ff(mask_buf, draw_area_w);
    e6ca:	9908      	ldr	r1, [sp, #32]
    e6cc:	4650      	mov	r0, sl
    e6ce:	4b7a      	ldr	r3, [pc, #488]	; (e8b8 <lv_draw_rect+0x2594>)
    e6d0:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    e6d2:	f8b9 2012 	ldrh.w	r2, [r9, #18]
    e6d6:	4432      	add	r2, r6
    e6d8:	f8b9 1010 	ldrh.w	r1, [r9, #16]
    e6dc:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    e6e0:	4419      	add	r1, r3
    e6e2:	9b07      	ldr	r3, [sp, #28]
    e6e4:	b212      	sxth	r2, r2
    e6e6:	b209      	sxth	r1, r1
    e6e8:	4650      	mov	r0, sl
    e6ea:	4c74      	ldr	r4, [pc, #464]	; (e8bc <lv_draw_rect+0x2598>)
    e6ec:	47a0      	blx	r4
    e6ee:	4607      	mov	r7, r0
            fill_area2.x1 = area_outer.x1;
    e6f0:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
    e6f4:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
            fill_area2.x2 = area_outer.x1 + rout - 1;
    e6f8:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    e6fc:	3b01      	subs	r3, #1
    e6fe:	4423      	add	r3, r4
    e700:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            fill_area2.y1 = fill_area.y1;
    e704:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    e708:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            fill_area2.y2 = fill_area.y2;
    e70c:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    e710:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
    e714:	f8cd b008 	str.w	fp, [sp, #8]
    e718:	9501      	str	r5, [sp, #4]
    e71a:	9000      	str	r0, [sp, #0]
    e71c:	4653      	mov	r3, sl
    e71e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    e722:	a91e      	add	r1, sp, #120	; 0x78
    e724:	9804      	ldr	r0, [sp, #16]
    e726:	47c0      	blx	r8
            if(fill_area2.y2 > area_outer.y2 - dsc->outline_width) {
    e728:	f9bd 207e 	ldrsh.w	r2, [sp, #126]	; 0x7e
    e72c:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
    e730:	9909      	ldr	r1, [sp, #36]	; 0x24
    e732:	f9b1 1018 	ldrsh.w	r1, [r1, #24]
    e736:	1a5b      	subs	r3, r3, r1
    e738:	429a      	cmp	r2, r3
    e73a:	dd98      	ble.n	e66e <lv_draw_rect+0x234a>
                fill_area2.x1 = area_outer.x1 + rout;
    e73c:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    e740:	4423      	add	r3, r4
    e742:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
                fill_area2.x2 = area_outer.x2 - rout;
    e746:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
    e74a:	1b1b      	subs	r3, r3, r4
    e74c:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
    e750:	f8cd b008 	str.w	fp, [sp, #8]
    e754:	9501      	str	r5, [sp, #4]
    e756:	2301      	movs	r3, #1
    e758:	9300      	str	r3, [sp, #0]
    e75a:	2300      	movs	r3, #0
    e75c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    e760:	a91e      	add	r1, sp, #120	; 0x78
    e762:	9804      	ldr	r0, [sp, #16]
    e764:	47c0      	blx	r8
    e766:	e782      	b.n	e66e <lv_draw_rect+0x234a>
    e768:	465b      	mov	r3, fp
    e76a:	46ab      	mov	fp, r5
    e76c:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    e770:	461d      	mov	r5, r3
        fill_area.y1 = area_outer.y1 + corner_size + 1;
    e772:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    e776:	f8bd 2062 	ldrh.w	r2, [sp, #98]	; 0x62
    e77a:	3201      	adds	r2, #1
    e77c:	441a      	add	r2, r3
    e77e:	f8ad 2072 	strh.w	r2, [sp, #114]	; 0x72
        fill_area.y2 = area_outer.y2 - corner_size - 1;
    e782:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
    e786:	3a01      	subs	r2, #1
    e788:	1ad3      	subs	r3, r2, r3
    e78a:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        fill_area.x1 = area_outer.x1;
    e78e:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
    e792:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        fill_area.x2 = area_outer.x1 + dsc->outline_width - 1;
    e796:	3b01      	subs	r3, #1
    e798:	f8ba 2018 	ldrh.w	r2, [sl, #24]
    e79c:	4413      	add	r3, r2
    e79e:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
    e7a2:	9502      	str	r5, [sp, #8]
    e7a4:	f8cd b004 	str.w	fp, [sp, #4]
    e7a8:	2601      	movs	r6, #1
    e7aa:	9600      	str	r6, [sp, #0]
    e7ac:	2300      	movs	r3, #0
    e7ae:	f8bd 8014 	ldrh.w	r8, [sp, #20]
    e7b2:	4642      	mov	r2, r8
    e7b4:	a91c      	add	r1, sp, #112	; 0x70
    e7b6:	9f04      	ldr	r7, [sp, #16]
    e7b8:	4638      	mov	r0, r7
    e7ba:	4c41      	ldr	r4, [pc, #260]	; (e8c0 <lv_draw_rect+0x259c>)
    e7bc:	47a0      	blx	r4
        fill_area.x1 = area_outer.x2 - dsc->outline_width + 1;
    e7be:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
    e7c2:	1993      	adds	r3, r2, r6
    e7c4:	f8ba 1018 	ldrh.w	r1, [sl, #24]
    e7c8:	1a5b      	subs	r3, r3, r1
    e7ca:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        fill_area.x2 = area_outer.x2;
    e7ce:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
    e7d2:	9502      	str	r5, [sp, #8]
    e7d4:	f8cd b004 	str.w	fp, [sp, #4]
    e7d8:	9600      	str	r6, [sp, #0]
    e7da:	2300      	movs	r3, #0
    e7dc:	4642      	mov	r2, r8
    e7de:	a91c      	add	r1, sp, #112	; 0x70
    e7e0:	4638      	mov	r0, r7
    e7e2:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_rin_id);
    e7e4:	980c      	ldr	r0, [sp, #48]	; 0x30
    e7e6:	4c37      	ldr	r4, [pc, #220]	; (e8c4 <lv_draw_rect+0x25a0>)
    e7e8:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_rout_id);
    e7ea:	980d      	ldr	r0, [sp, #52]	; 0x34
    e7ec:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
    e7ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
    e7f0:	4b35      	ldr	r3, [pc, #212]	; (e8c8 <lv_draw_rect+0x25a4>)
    e7f2:	4798      	blx	r3
    e7f4:	f7fe bdb0 	b.w	d358 <lv_draw_rect+0x1034>
        fill_area.x1 = area_outer.x1;
    e7f8:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    e7fc:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        fill_area.x2 = area_outer.x2;
    e800:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
    e804:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
        fill_area.y1 = disp_area->y1 + draw_area.y1;
    e808:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
    e80c:	f8b9 3012 	ldrh.w	r3, [r9, #18]
    e810:	4413      	add	r3, r2
    e812:	b21b      	sxth	r3, r3
    e814:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        fill_area.y2 = fill_area.y1;
    e818:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    e81c:	4614      	mov	r4, r2
    e81e:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
    e822:	429a      	cmp	r2, r3
    e824:	dcde      	bgt.n	e7e4 <lv_draw_rect+0x24c0>
            _lv_memset_ff(mask_buf, draw_area_w);
    e826:	f8df 8090 	ldr.w	r8, [pc, #144]	; e8b8 <lv_draw_rect+0x2594>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    e82a:	4f24      	ldr	r7, [pc, #144]	; (e8bc <lv_draw_rect+0x2598>)
            _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
    e82c:	4e24      	ldr	r6, [pc, #144]	; (e8c0 <lv_draw_rect+0x259c>)
    e82e:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
    e832:	462b      	mov	r3, r5
    e834:	465d      	mov	r5, fp
    e836:	469b      	mov	fp, r3
            _lv_memset_ff(mask_buf, draw_area_w);
    e838:	9908      	ldr	r1, [sp, #32]
    e83a:	4650      	mov	r0, sl
    e83c:	47c0      	blx	r8
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    e83e:	f8b9 2012 	ldrh.w	r2, [r9, #18]
    e842:	4422      	add	r2, r4
    e844:	f8b9 1010 	ldrh.w	r1, [r9, #16]
    e848:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    e84c:	4419      	add	r1, r3
    e84e:	9b07      	ldr	r3, [sp, #28]
    e850:	b212      	sxth	r2, r2
    e852:	b209      	sxth	r1, r1
    e854:	4650      	mov	r0, sl
    e856:	47b8      	blx	r7
            _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
    e858:	f8cd b008 	str.w	fp, [sp, #8]
    e85c:	9501      	str	r5, [sp, #4]
    e85e:	9000      	str	r0, [sp, #0]
    e860:	4653      	mov	r3, sl
    e862:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    e866:	a91c      	add	r1, sp, #112	; 0x70
    e868:	9804      	ldr	r0, [sp, #16]
    e86a:	47b0      	blx	r6
            fill_area.y1++;
    e86c:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    e870:	3301      	adds	r3, #1
    e872:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
            fill_area.y2++;
    e876:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    e87a:	3301      	adds	r3, #1
    e87c:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    e880:	3401      	adds	r4, #1
    e882:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
    e886:	429c      	cmp	r4, r3
    e888:	ddd6      	ble.n	e838 <lv_draw_rect+0x2514>
    e88a:	e7ab      	b.n	e7e4 <lv_draw_rect+0x24c0>
    _lv_mem_buf_release(mask_line);
    e88c:	980c      	ldr	r0, [sp, #48]	; 0x30
    e88e:	4b0e      	ldr	r3, [pc, #56]	; (e8c8 <lv_draw_rect+0x25a4>)
    e890:	4798      	blx	r3
        for(i = 0; i < size * size; i++) {
    e892:	fb07 f707 	mul.w	r7, r7, r7
    e896:	2f00      	cmp	r7, #0
    e898:	f43d aeec 	beq.w	c674 <lv_draw_rect+0x350>
    e89c:	980a      	ldr	r0, [sp, #40]	; 0x28
    e89e:	4602      	mov	r2, r0
    e8a0:	1e41      	subs	r1, r0, #1
    e8a2:	eb00 0047 	add.w	r0, r0, r7, lsl #1
            res_buf[i] = (sh_buf[i] >> SHADOW_UPSACALE_SHIFT);
    e8a6:	f832 3b02 	ldrh.w	r3, [r2], #2
    e8aa:	099b      	lsrs	r3, r3, #6
    e8ac:	f801 3f01 	strb.w	r3, [r1, #1]!
        for(i = 0; i < size * size; i++) {
    e8b0:	4290      	cmp	r0, r2
    e8b2:	d1f8      	bne.n	e8a6 <lv_draw_rect+0x2582>
    e8b4:	f7fd bede 	b.w	c674 <lv_draw_rect+0x350>
    e8b8:	00012be1 	.word	0x00012be1
    e8bc:	0000be11 	.word	0x0000be11
    e8c0:	00007745 	.word	0x00007745
    e8c4:	0000be61 	.word	0x0000be61
    e8c8:	00012565 	.word	0x00012565
    lv_opa_t * mask_line = _lv_mem_buf_get(size);
    e8cc:	9707      	str	r7, [sp, #28]
    e8ce:	4638      	mov	r0, r7
    e8d0:	4b0b      	ldr	r3, [pc, #44]	; (e900 <lv_draw_rect+0x25dc>)
    e8d2:	4798      	blx	r3
    e8d4:	900c      	str	r0, [sp, #48]	; 0x30
    for(y = 0; y < size; y++) {
    e8d6:	2f00      	cmp	r7, #0
    e8d8:	ddd8      	ble.n	e88c <lv_draw_rect+0x2568>
    e8da:	2301      	movs	r3, #1
    e8dc:	930b      	str	r3, [sp, #44]	; 0x2c
    e8de:	f7fd be27 	b.w	c530 <lv_draw_rect+0x20c>
            lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
    e8e2:	2300      	movs	r3, #0
    e8e4:	f9ba 2000 	ldrsh.w	r2, [sl]
    e8e8:	9906      	ldr	r1, [sp, #24]
    e8ea:	a829      	add	r0, sp, #164	; 0xa4
    e8ec:	4c05      	ldr	r4, [pc, #20]	; (e904 <lv_draw_rect+0x25e0>)
    e8ee:	47a0      	blx	r4
            radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
    e8f0:	2100      	movs	r1, #0
    e8f2:	a829      	add	r0, sp, #164	; 0xa4
    e8f4:	4b04      	ldr	r3, [pc, #16]	; (e908 <lv_draw_rect+0x25e4>)
    e8f6:	4798      	blx	r3
    e8f8:	4604      	mov	r4, r0
    e8fa:	f7ff b91e 	b.w	db3a <lv_draw_rect+0x1816>
    e8fe:	bf00      	nop
    e900:	00012931 	.word	0x00012931
    e904:	0000c021 	.word	0x0000c021
    e908:	0000bdb5 	.word	0x0000bdb5

0000e90c <lv_img_buf_get_px_color>:
 * Not used in other cases.
 * @param safe true: check out of bounds
 * @return color of the point
 */
lv_color_t lv_img_buf_get_px_color(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_color_t color)
{
    e90c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e90e:	b083      	sub	sp, #12
    lv_color_t p_color = LV_COLOR_BLACK;
    e910:	f89d 4004 	ldrb.w	r4, [sp, #4]
    e914:	f36f 0404 	bfc	r4, #0, #5
    e918:	f88d 4004 	strb.w	r4, [sp, #4]
    e91c:	f8bd 4004 	ldrh.w	r4, [sp, #4]
    e920:	f36f 144a 	bfc	r4, #5, #6
    e924:	f8ad 4004 	strh.w	r4, [sp, #4]
    e928:	0a24      	lsrs	r4, r4, #8
    e92a:	f36f 04c7 	bfc	r4, #3, #5
    e92e:	f88d 4005 	strb.w	r4, [sp, #5]
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
    e932:	6886      	ldr	r6, [r0, #8]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED ||
    e934:	7804      	ldrb	r4, [r0, #0]
    e936:	f004 041f 	and.w	r4, r4, #31
    e93a:	1f25      	subs	r5, r4, #4
    e93c:	b2ed      	uxtb	r5, r5
    e93e:	2d02      	cmp	r5, #2
    e940:	d90e      	bls.n	e960 <lv_img_buf_get_px_color+0x54>
        _lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
#if LV_COLOR_SIZE == 32
        p_color.ch.alpha = 0xFF; /*Only the color should be get so use a deafult alpha value*/
#endif
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT) {
    e942:	2c07      	cmp	r4, #7
    e944:	d028      	beq.n	e998 <lv_img_buf_get_px_color+0x8c>
         * dsc->header.w + 7 means rounding up to 8 because the lines are byte aligned
         * so the possible real width are 8, 16, 24 ...*/
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_2BIT) {
    e946:	2c08      	cmp	r4, #8
    e948:	d03b      	beq.n	e9c2 <lv_img_buf_get_px_color+0xb6>
         * dsc->header.w + 3 means rounding up to 4 because the lines are byte aligned
         * so the possible real width are 4, 8, 12 ...*/
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_4BIT) {
    e94a:	2c09      	cmp	r4, #9
    e94c:	d050      	beq.n	e9f0 <lv_img_buf_get_px_color+0xe4>
         * dsc->header.w + 1 means rounding up to 2 because the lines are byte aligned
         * so the possible real width are 2, 4, 6 ...*/
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
    e94e:	2c0a      	cmp	r4, #10
    e950:	d066      	beq.n	ea20 <lv_img_buf_get_px_color+0x114>
        buf_u8 += 4 * 256;
        uint32_t px  = dsc->header.w * y + x;
        p_color.full = buf_u8[px];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
    e952:	3c0b      	subs	r4, #11
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
    e954:	b2e4      	uxtb	r4, r4
    e956:	2c03      	cmp	r4, #3
        p_color = color;
    e958:	bf98      	it	ls
    e95a:	f8ad 3004 	strhls.w	r3, [sp, #4]
    e95e:	e017      	b.n	e990 <lv_img_buf_get_px_color+0x84>
    e960:	4614      	mov	r4, r2
    e962:	460f      	mov	r7, r1
    e964:	4605      	mov	r5, r0
        uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
    e966:	7800      	ldrb	r0, [r0, #0]
    e968:	f000 001f 	and.w	r0, r0, #31
    e96c:	4b32      	ldr	r3, [pc, #200]	; (ea38 <lv_img_buf_get_px_color+0x12c>)
    e96e:	4798      	blx	r3
        uint32_t px     = dsc->header.w * y * px_size + x * px_size;
    e970:	682b      	ldr	r3, [r5, #0]
    e972:	f3c3 238a 	ubfx	r3, r3, #10, #11
    e976:	fb04 7203 	mla	r2, r4, r3, r7
    e97a:	f3c0 00c7 	ubfx	r0, r0, #3, #8
    e97e:	fb00 f202 	mul.w	r2, r0, r2
        _lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
    e982:	18b3      	adds	r3, r6, r2
        *d8 = *s8;
    e984:	5cb2      	ldrb	r2, [r6, r2]
    e986:	f88d 2004 	strb.w	r2, [sp, #4]
    e98a:	785b      	ldrb	r3, [r3, #1]
    e98c:	f88d 3005 	strb.w	r3, [sp, #5]
    }
    return p_color;
}
    e990:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    e994:	b003      	add	sp, #12
    e996:	bdf0      	pop	{r4, r5, r6, r7, pc}
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
    e998:	f001 0307 	and.w	r3, r1, #7
    e99c:	f1c3 0407 	rsb	r4, r3, #7
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
    e9a0:	6803      	ldr	r3, [r0, #0]
    e9a2:	f3c3 238a 	ubfx	r3, r3, #10, #11
    e9a6:	3307      	adds	r3, #7
    e9a8:	10db      	asrs	r3, r3, #3
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
    e9aa:	fb02 6603 	mla	r6, r2, r3, r6
    e9ae:	eb06 01e1 	add.w	r1, r6, r1, asr #3
    e9b2:	7a0b      	ldrb	r3, [r1, #8]
    e9b4:	2201      	movs	r2, #1
    e9b6:	40a2      	lsls	r2, r4
    e9b8:	4013      	ands	r3, r2
    e9ba:	4123      	asrs	r3, r4
    e9bc:	f8ad 3004 	strh.w	r3, [sp, #4]
    e9c0:	e7e6      	b.n	e990 <lv_img_buf_get_px_color+0x84>
        uint8_t bit = (x & 0x3) * 2;
    e9c2:	f001 0403 	and.w	r4, r1, #3
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
    e9c6:	0064      	lsls	r4, r4, #1
    e9c8:	f1c4 0406 	rsb	r4, r4, #6
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
    e9cc:	6803      	ldr	r3, [r0, #0]
    e9ce:	f3c3 238a 	ubfx	r3, r3, #10, #11
    e9d2:	3303      	adds	r3, #3
    e9d4:	109b      	asrs	r3, r3, #2
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
    e9d6:	fb02 6603 	mla	r6, r2, r3, r6
    e9da:	eb06 01a1 	add.w	r1, r6, r1, asr #2
    e9de:	7c0b      	ldrb	r3, [r1, #16]
    e9e0:	2203      	movs	r2, #3
    e9e2:	40a2      	lsls	r2, r4
    e9e4:	4013      	ands	r3, r2
    e9e6:	fa43 f404 	asr.w	r4, r3, r4
    e9ea:	f8ad 4004 	strh.w	r4, [sp, #4]
    e9ee:	e7cf      	b.n	e990 <lv_img_buf_get_px_color+0x84>
        uint8_t bit = (x & 0x1) * 4;
    e9f0:	f001 0401 	and.w	r4, r1, #1
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
    e9f4:	00a4      	lsls	r4, r4, #2
    e9f6:	f1c4 0404 	rsb	r4, r4, #4
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
    e9fa:	6803      	ldr	r3, [r0, #0]
    e9fc:	f3c3 238a 	ubfx	r3, r3, #10, #11
    ea00:	3301      	adds	r3, #1
    ea02:	105b      	asrs	r3, r3, #1
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
    ea04:	fb02 6603 	mla	r6, r2, r3, r6
    ea08:	eb06 0161 	add.w	r1, r6, r1, asr #1
    ea0c:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
    ea10:	220f      	movs	r2, #15
    ea12:	40a2      	lsls	r2, r4
    ea14:	4013      	ands	r3, r2
    ea16:	fa43 f404 	asr.w	r4, r3, r4
    ea1a:	f8ad 4004 	strh.w	r4, [sp, #4]
    ea1e:	e7b7      	b.n	e990 <lv_img_buf_get_px_color+0x84>
        uint32_t px  = dsc->header.w * y + x;
    ea20:	6803      	ldr	r3, [r0, #0]
    ea22:	f3c3 238a 	ubfx	r3, r3, #10, #11
        p_color.full = buf_u8[px];
    ea26:	4431      	add	r1, r6
    ea28:	fb02 1103 	mla	r1, r2, r3, r1
    ea2c:	f891 3400 	ldrb.w	r3, [r1, #1024]	; 0x400
    ea30:	f8ad 3004 	strh.w	r3, [sp, #4]
    ea34:	e7ac      	b.n	e990 <lv_img_buf_get_px_color+0x84>
    ea36:	bf00      	nop
    ea38:	00009675 	.word	0x00009675

0000ea3c <lv_img_buf_get_px_alpha>:
 * @param y x coordinate of the point to set
 * @param safe true: check out of bounds
 * @return alpha value of the point
 */
lv_opa_t lv_img_buf_get_px_alpha(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y)
{
    ea3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ea3e:	b085      	sub	sp, #20
    ea40:	4604      	mov	r4, r0
    ea42:	460d      	mov	r5, r1
    ea44:	4617      	mov	r7, r2
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
    ea46:	6886      	ldr	r6, [r0, #8]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
    ea48:	7803      	ldrb	r3, [r0, #0]
    ea4a:	f003 031f 	and.w	r3, r3, #31
    ea4e:	2b05      	cmp	r3, #5
    ea50:	d00a      	beq.n	ea68 <lv_img_buf_get_px_alpha+0x2c>
        uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE;
        return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT) {
    ea52:	2b0b      	cmp	r3, #11
    ea54:	d012      	beq.n	ea7c <lv_img_buf_get_px_alpha+0x40>
         * so the possible real width are 8 ,16, 24 ...*/
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
        return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_2BIT) {
    ea56:	2b0c      	cmp	r3, #12
    ea58:	d027      	beq.n	eaaa <lv_img_buf_get_px_alpha+0x6e>
         * so the possible real width are 4 ,8, 12 ...*/
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
        return opa_table[px_opa];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_4BIT) {
    ea5a:	2b0d      	cmp	r3, #13
    ea5c:	d049      	beq.n	eaf2 <lv_img_buf_get_px_alpha+0xb6>
         * so the possible real width are 2 ,4, 6 ...*/
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
        return opa_table[px_opa];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
    ea5e:	2b0e      	cmp	r3, #14
    ea60:	d064      	beq.n	eb2c <lv_img_buf_get_px_alpha+0xf0>
        uint32_t px = dsc->header.w * y + x;
        return buf_u8[px];
    }

    return LV_OPA_COVER;
    ea62:	20ff      	movs	r0, #255	; 0xff
}
    ea64:	b005      	add	sp, #20
    ea66:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE;
    ea68:	6802      	ldr	r2, [r0, #0]
    ea6a:	f3c2 228a 	ubfx	r2, r2, #10, #11
    ea6e:	fb07 1502 	mla	r5, r7, r2, r1
        return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
    ea72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    ea76:	4435      	add	r5, r6
    ea78:	78a8      	ldrb	r0, [r5, #2]
    ea7a:	e7f3      	b.n	ea64 <lv_img_buf_get_px_alpha+0x28>
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
    ea7c:	f001 0307 	and.w	r3, r1, #7
    ea80:	f1c3 0107 	rsb	r1, r3, #7
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
    ea84:	6802      	ldr	r2, [r0, #0]
    ea86:	f3c2 228a 	ubfx	r2, r2, #10, #11
    ea8a:	3207      	adds	r2, #7
    ea8c:	10d2      	asrs	r2, r2, #3
    ea8e:	10ed      	asrs	r5, r5, #3
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
    ea90:	fb07 6202 	mla	r2, r7, r2, r6
    ea94:	5d53      	ldrb	r3, [r2, r5]
    ea96:	2201      	movs	r2, #1
    ea98:	408a      	lsls	r2, r1
    ea9a:	4013      	ands	r3, r2
    ea9c:	410b      	asrs	r3, r1
        return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
    ea9e:	f013 0fff 	tst.w	r3, #255	; 0xff
    eaa2:	bf0c      	ite	eq
    eaa4:	20ff      	moveq	r0, #255	; 0xff
    eaa6:	2000      	movne	r0, #0
    eaa8:	e7dc      	b.n	ea64 <lv_img_buf_get_px_alpha+0x28>
        const uint8_t opa_table[4] = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
    eaaa:	2300      	movs	r3, #0
    eaac:	f88d 3000 	strb.w	r3, [sp]
    eab0:	2355      	movs	r3, #85	; 0x55
    eab2:	f88d 3001 	strb.w	r3, [sp, #1]
    eab6:	23aa      	movs	r3, #170	; 0xaa
    eab8:	f88d 3002 	strb.w	r3, [sp, #2]
    eabc:	23ff      	movs	r3, #255	; 0xff
    eabe:	f88d 3003 	strb.w	r3, [sp, #3]
        uint8_t bit = (x & 0x3) * 2;
    eac2:	f001 0303 	and.w	r3, r1, #3
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
    eac6:	005b      	lsls	r3, r3, #1
    eac8:	f1c3 0106 	rsb	r1, r3, #6
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
    eacc:	6802      	ldr	r2, [r0, #0]
    eace:	f3c2 228a 	ubfx	r2, r2, #10, #11
    ead2:	3203      	adds	r2, #3
    ead4:	1092      	asrs	r2, r2, #2
    ead6:	10ad      	asrs	r5, r5, #2
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
    ead8:	fb07 6202 	mla	r2, r7, r2, r6
    eadc:	5d53      	ldrb	r3, [r2, r5]
    eade:	2203      	movs	r2, #3
    eae0:	408a      	lsls	r2, r1
    eae2:	4013      	ands	r3, r2
    eae4:	410b      	asrs	r3, r1
        return opa_table[px_opa];
    eae6:	aa04      	add	r2, sp, #16
    eae8:	fa52 f383 	uxtab	r3, r2, r3
    eaec:	f813 0c10 	ldrb.w	r0, [r3, #-16]
    eaf0:	e7b8      	b.n	ea64 <lv_img_buf_get_px_alpha+0x28>
        const uint8_t opa_table[16] = {0,  17, 34,  51, /*Opacity mapping with bpp = 4*/
    eaf2:	4b12      	ldr	r3, [pc, #72]	; (eb3c <lv_img_buf_get_px_alpha+0x100>)
    eaf4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    eaf6:	f10d 0e10 	add.w	lr, sp, #16
    eafa:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
        uint8_t bit = (x & 0x1) * 4;
    eafe:	f005 0301 	and.w	r3, r5, #1
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
    eb02:	009b      	lsls	r3, r3, #2
    eb04:	f1c3 0104 	rsb	r1, r3, #4
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
    eb08:	6822      	ldr	r2, [r4, #0]
    eb0a:	f3c2 228a 	ubfx	r2, r2, #10, #11
    eb0e:	3201      	adds	r2, #1
    eb10:	1052      	asrs	r2, r2, #1
    eb12:	106d      	asrs	r5, r5, #1
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
    eb14:	fb07 6202 	mla	r2, r7, r2, r6
    eb18:	5d53      	ldrb	r3, [r2, r5]
    eb1a:	220f      	movs	r2, #15
    eb1c:	408a      	lsls	r2, r1
    eb1e:	4013      	ands	r3, r2
    eb20:	410b      	asrs	r3, r1
        return opa_table[px_opa];
    eb22:	fa5e f383 	uxtab	r3, lr, r3
    eb26:	f813 0c10 	ldrb.w	r0, [r3, #-16]
    eb2a:	e79b      	b.n	ea64 <lv_img_buf_get_px_alpha+0x28>
        uint32_t px = dsc->header.w * y + x;
    eb2c:	6802      	ldr	r2, [r0, #0]
    eb2e:	f3c2 228a 	ubfx	r2, r2, #10, #11
        return buf_u8[px];
    eb32:	fb07 6202 	mla	r2, r7, r2, r6
    eb36:	5c50      	ldrb	r0, [r2, r1]
    eb38:	e794      	b.n	ea64 <lv_img_buf_get_px_alpha+0x28>
    eb3a:	bf00      	nop
    eb3c:	00025100 	.word	0x00025100

0000eb40 <_lv_img_buf_transform_init>:
/**
 * Initialize a descriptor to tranform an image
 * @param dsc pointer to an `lv_img_transform_dsc_t` variable whose `cfg` field is initialized
 */
void _lv_img_buf_transform_init(lv_img_transform_dsc_t * dsc)
{
    eb40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eb44:	4604      	mov	r4, r0
    dsc->tmp.pivot_x_256 = dsc->cfg.pivot_x * 256;
    eb46:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
    eb4a:	021b      	lsls	r3, r3, #8
    eb4c:	6243      	str	r3, [r0, #36]	; 0x24
    dsc->tmp.pivot_y_256 = dsc->cfg.pivot_y * 256;
    eb4e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    eb52:	021b      	lsls	r3, r3, #8
    eb54:	6283      	str	r3, [r0, #40]	; 0x28

    int32_t angle_low = dsc->cfg.angle / 10;
    eb56:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
    eb5a:	f8df 80f4 	ldr.w	r8, [pc, #244]	; ec50 <_lv_img_buf_transform_init+0x110>
    eb5e:	fb88 2300 	smull	r2, r3, r8, r0
    eb62:	17c5      	asrs	r5, r0, #31
    eb64:	ebc5 05a3 	rsb	r5, r5, r3, asr #2
    eb68:	b22d      	sxth	r5, r5
    int32_t angle_hight = angle_low + 1;
    int32_t angle_rem = dsc->cfg.angle  - (angle_low * 10);
    eb6a:	f06f 0709 	mvn.w	r7, #9
    eb6e:	fb07 0705 	mla	r7, r7, r5, r0

    int32_t s1 = _lv_trigo_sin(-angle_low);
    eb72:	fa1f fa85 	uxth.w	sl, r5
    eb76:	f1ca 0000 	rsb	r0, sl, #0
    eb7a:	b200      	sxth	r0, r0
    eb7c:	f8df 90d4 	ldr.w	r9, [pc, #212]	; ec54 <_lv_img_buf_transform_init+0x114>
    eb80:	47c8      	blx	r9
    eb82:	4606      	mov	r6, r0
    int32_t angle_hight = angle_low + 1;
    eb84:	3501      	adds	r5, #1
    int32_t s2 = _lv_trigo_sin(-angle_hight);
    eb86:	b2ad      	uxth	r5, r5
    eb88:	4268      	negs	r0, r5
    eb8a:	b200      	sxth	r0, r0
    eb8c:	47c8      	blx	r9
    eb8e:	4683      	mov	fp, r0

    int32_t c1 = _lv_trigo_sin(-angle_low + 90);
    eb90:	f1ca 005a 	rsb	r0, sl, #90	; 0x5a
    eb94:	b200      	sxth	r0, r0
    eb96:	47c8      	blx	r9
    eb98:	4682      	mov	sl, r0
    int32_t c2 = _lv_trigo_sin(-angle_hight + 90);
    eb9a:	f1c5 055a 	rsb	r5, r5, #90	; 0x5a
    eb9e:	b228      	sxth	r0, r5
    eba0:	47c8      	blx	r9

    dsc->tmp.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
    eba2:	f1c7 030a 	rsb	r3, r7, #10
    eba6:	fb07 fb0b 	mul.w	fp, r7, fp
    ebaa:	fb03 b606 	mla	r6, r3, r6, fp
    ebae:	fb88 2b06 	smull	r2, fp, r8, r6
    ebb2:	17f6      	asrs	r6, r6, #31
    ebb4:	ebc6 06ab 	rsb	r6, r6, fp, asr #2
    ebb8:	62e6      	str	r6, [r4, #44]	; 0x2c
    dsc->tmp.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
    ebba:	fb07 f000 	mul.w	r0, r7, r0
    ebbe:	fb03 000a 	mla	r0, r3, sl, r0
    ebc2:	fb88 3800 	smull	r3, r8, r8, r0
    ebc6:	17c0      	asrs	r0, r0, #31
    ebc8:	ebc0 00a8 	rsb	r0, r0, r8, asr #2
    ebcc:	6320      	str	r0, [r4, #48]	; 0x30

    dsc->tmp.chroma_keyed = lv_img_cf_is_chroma_keyed(dsc->cfg.cf) ? 1 : 0;
    ebce:	7ca0      	ldrb	r0, [r4, #18]
    ebd0:	4b1d      	ldr	r3, [pc, #116]	; (ec48 <_lv_img_buf_transform_init+0x108>)
    ebd2:	4798      	blx	r3
    ebd4:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    ebd8:	f360 0300 	bfi	r3, r0, #0, #1
    ebdc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
    ebe0:	7ca0      	ldrb	r0, [r4, #18]
    ebe2:	4b1a      	ldr	r3, [pc, #104]	; (ec4c <_lv_img_buf_transform_init+0x10c>)
    ebe4:	4798      	blx	r3
    ebe6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    ebea:	f360 0341 	bfi	r3, r0, #1, #1
    ebee:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR || dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
    ebf2:	7ca2      	ldrb	r2, [r4, #18]
    ebf4:	1f13      	subs	r3, r2, #4
    ebf6:	b2db      	uxtb	r3, r3
    ebf8:	2b02      	cmp	r3, #2
       dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
        dsc->tmp.native_color = 1;
    ebfa:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    ebfe:	bf94      	ite	ls
    ec00:	f043 0304 	orrls.w	r3, r3, #4
    }
    else {
        dsc->tmp.native_color = 0;
    ec04:	f36f 0382 	bfchi	r3, #2, #1
    ec08:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    }

    dsc->tmp.img_dsc.data = dsc->cfg.src;
    ec0c:	6823      	ldr	r3, [r4, #0]
    ec0e:	6223      	str	r3, [r4, #32]
    dsc->tmp.img_dsc.header.always_zero = 0;
    ec10:	7e23      	ldrb	r3, [r4, #24]
    dsc->tmp.img_dsc.header.cf = dsc->cfg.cf;
    ec12:	f003 031f 	and.w	r3, r3, #31
    ec16:	f362 0304 	bfi	r3, r2, #0, #5
    ec1a:	7623      	strb	r3, [r4, #24]
    dsc->tmp.img_dsc.header.w = dsc->cfg.src_w;
    ec1c:	69a3      	ldr	r3, [r4, #24]
    ec1e:	88a2      	ldrh	r2, [r4, #4]
    ec20:	f362 2394 	bfi	r3, r2, #10, #11
    ec24:	61a3      	str	r3, [r4, #24]
    dsc->tmp.img_dsc.header.h = dsc->cfg.src_h;
    ec26:	0c1b      	lsrs	r3, r3, #16
    ec28:	88e2      	ldrh	r2, [r4, #6]
    ec2a:	f362 134f 	bfi	r3, r2, #5, #11
    ec2e:	8363      	strh	r3, [r4, #26]

    dsc->tmp.zoom_inv = (256 * 256) / dsc->cfg.zoom;
    ec30:	89e2      	ldrh	r2, [r4, #14]
    ec32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    ec36:	fb93 f3f2 	sdiv	r3, r3, r2
    ec3a:	86e3      	strh	r3, [r4, #54]	; 0x36

    dsc->res.opa = LV_OPA_COVER;
    ec3c:	23ff      	movs	r3, #255	; 0xff
    ec3e:	75a3      	strb	r3, [r4, #22]
    dsc->res.color = dsc->cfg.color;
    ec40:	8a23      	ldrh	r3, [r4, #16]
    ec42:	82a3      	strh	r3, [r4, #20]
    ec44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ec48:	000096a7 	.word	0x000096a7
    ec4c:	000096bb 	.word	0x000096bb
    ec50:	66666667 	.word	0x66666667
    ec54:	00012299 	.word	0x00012299

0000ec58 <_lv_img_buf_get_transformed_area>:
 * @param zoom zoom, (256 no zoom)
 * @param pivot x,y pivot coordinates of rotation
 */
void _lv_img_buf_get_transformed_area(lv_area_t * res, lv_coord_t w, lv_coord_t h, int16_t angle, uint16_t zoom,
                                      lv_point_t * pivot)
{
    ec58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ec5c:	b087      	sub	sp, #28
    ec5e:	9003      	str	r0, [sp, #12]
    ec60:	9104      	str	r1, [sp, #16]
    ec62:	9205      	str	r2, [sp, #20]
    ec64:	f8bd 4040 	ldrh.w	r4, [sp, #64]	; 0x40
    ec68:	9401      	str	r4, [sp, #4]
    ec6a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
#if LV_USE_IMG_TRANSFORM
    int32_t angle_low = angle / 10;
    ec6e:	4f5e      	ldr	r7, [pc, #376]	; (ede8 <_lv_img_buf_get_transformed_area+0x190>)
    ec70:	fb87 6003 	smull	r6, r0, r7, r3
    ec74:	17dd      	asrs	r5, r3, #31
    ec76:	ebc5 05a0 	rsb	r5, r5, r0, asr #2
    ec7a:	b22d      	sxth	r5, r5
    int32_t angle_hight = angle_low + 1;
    ec7c:	f105 0901 	add.w	r9, r5, #1
    int32_t angle_rem = angle  - (angle_low * 10);
    ec80:	f06f 0609 	mvn.w	r6, #9
    ec84:	fb06 3605 	mla	r6, r6, r5, r3

    int32_t s1 = _lv_trigo_sin(angle_low);
    ec88:	4628      	mov	r0, r5
    ec8a:	f8df 8160 	ldr.w	r8, [pc, #352]	; edec <_lv_img_buf_get_transformed_area+0x194>
    ec8e:	47c0      	blx	r8
    ec90:	4604      	mov	r4, r0
    int32_t s2 = _lv_trigo_sin(angle_hight);
    ec92:	fa0f f089 	sxth.w	r0, r9
    ec96:	47c0      	blx	r8
    ec98:	4682      	mov	sl, r0

    int32_t c1 = _lv_trigo_sin(angle_low + 90);
    ec9a:	f105 005a 	add.w	r0, r5, #90	; 0x5a
    ec9e:	b200      	sxth	r0, r0
    eca0:	47c0      	blx	r8
    eca2:	4605      	mov	r5, r0
    int32_t c2 = _lv_trigo_sin(angle_hight + 90);
    eca4:	f109 005a 	add.w	r0, r9, #90	; 0x5a
    eca8:	b200      	sxth	r0, r0
    ecaa:	47c0      	blx	r8

    int32_t sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
    ecac:	f1c6 030a 	rsb	r3, r6, #10
    ecb0:	fb06 fa0a 	mul.w	sl, r6, sl
    ecb4:	fb03 a404 	mla	r4, r3, r4, sl
    ecb8:	fb87 ea04 	smull	lr, sl, r7, r4
    ecbc:	17e4      	asrs	r4, r4, #31
    ecbe:	ebc4 04aa 	rsb	r4, r4, sl, asr #2
    int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
    ecc2:	fb06 f000 	mul.w	r0, r6, r0
    ecc6:	fb03 0505 	mla	r5, r3, r5, r0
    ecca:	fb87 3705 	smull	r3, r7, r7, r5
    ecce:	17ed      	asrs	r5, r5, #31
    ecd0:	ebc5 07a7 	rsb	r7, r5, r7, asr #2

    lv_coord_t xt;
    lv_coord_t yt;

    lv_area_t a;
    a.x1 = ((-pivot->x) * zoom) >> 8;
    ecd4:	f9bb c000 	ldrsh.w	ip, [fp]
    a.y1 = ((-pivot->y) * zoom) >> 8;
    ecd8:	f9bb 8002 	ldrsh.w	r8, [fp, #2]
    a.x1 = ((-pivot->x) * zoom) >> 8;
    ecdc:	f1cc 0300 	rsb	r3, ip, #0
    ece0:	9d01      	ldr	r5, [sp, #4]
    ece2:	fb05 f303 	mul.w	r3, r5, r3
    a.x2 = ((w - pivot->x) * zoom) >> 8;
    a.y2 = ((h - pivot->y) * zoom) >> 8;

    xt = a.x1;
    yt = a.y1;
    lt.x = ((cosma * xt - sinma * yt) >> LV_TRIGO_SHIFT) + pivot->x;
    ece6:	f343 230f 	sbfx	r3, r3, #8, #16
    ecea:	fb03 fa07 	mul.w	sl, r3, r7
    a.y1 = ((-pivot->y) * zoom) >> 8;
    ecee:	f1c8 0200 	rsb	r2, r8, #0
    ecf2:	fb05 f202 	mul.w	r2, r5, r2
    lt.x = ((cosma * xt - sinma * yt) >> LV_TRIGO_SHIFT) + pivot->x;
    ecf6:	f342 220f 	sbfx	r2, r2, #8, #16
    ecfa:	fb02 fe04 	mul.w	lr, r2, r4
    ecfe:	fa1f f68c 	uxth.w	r6, ip
    ed02:	ebaa 0b0e 	sub.w	fp, sl, lr
    ed06:	eb06 3beb 	add.w	fp, r6, fp, asr #15
    ed0a:	fa0f fb8b 	sxth.w	fp, fp
    lt.y = ((sinma * xt + cosma * yt) >> LV_TRIGO_SHIFT) + pivot->y;
    ed0e:	fb03 f304 	mul.w	r3, r3, r4
    ed12:	fb02 f207 	mul.w	r2, r2, r7
    ed16:	fa1f f088 	uxth.w	r0, r8
    ed1a:	1899      	adds	r1, r3, r2
    ed1c:	eb00 31e1 	add.w	r1, r0, r1, asr #15
    ed20:	b209      	sxth	r1, r1
    ed22:	9102      	str	r1, [sp, #8]
    a.x2 = ((w - pivot->x) * zoom) >> 8;
    ed24:	9904      	ldr	r1, [sp, #16]
    ed26:	eba1 0c0c 	sub.w	ip, r1, ip
    ed2a:	fb05 fc0c 	mul.w	ip, r5, ip

    xt = a.x2;
    yt = a.y1;
    rt.x = ((cosma * xt - sinma * yt) >> LV_TRIGO_SHIFT) + pivot->x;
    ed2e:	f34c 2c0f 	sbfx	ip, ip, #8, #16
    ed32:	fb0c f907 	mul.w	r9, ip, r7
    ed36:	eba9 0e0e 	sub.w	lr, r9, lr
    ed3a:	eb06 3eee 	add.w	lr, r6, lr, asr #15
    ed3e:	fa0f fe8e 	sxth.w	lr, lr
    rt.y = ((sinma * xt + cosma * yt) >> LV_TRIGO_SHIFT) + pivot->y;
    ed42:	fb0c fc04 	mul.w	ip, ip, r4
    ed46:	4462      	add	r2, ip
    ed48:	eb00 32e2 	add.w	r2, r0, r2, asr #15
    ed4c:	b212      	sxth	r2, r2
    a.y2 = ((h - pivot->y) * zoom) >> 8;
    ed4e:	9905      	ldr	r1, [sp, #20]
    ed50:	eba1 0808 	sub.w	r8, r1, r8
    ed54:	fb05 f808 	mul.w	r8, r5, r8

    xt = a.x1;
    yt = a.y2;
    lb.x = ((cosma * xt - sinma * yt) >> LV_TRIGO_SHIFT) + pivot->x;
    ed58:	f348 280f 	sbfx	r8, r8, #8, #16
    ed5c:	fb08 f404 	mul.w	r4, r8, r4
    ed60:	ebaa 0504 	sub.w	r5, sl, r4
    ed64:	eb06 35e5 	add.w	r5, r6, r5, asr #15
    ed68:	b22d      	sxth	r5, r5
    lb.y = ((sinma * xt + cosma * yt) >> LV_TRIGO_SHIFT) + pivot->y;
    ed6a:	fb08 f707 	mul.w	r7, r8, r7
    ed6e:	443b      	add	r3, r7
    ed70:	eb00 33e3 	add.w	r3, r0, r3, asr #15
    ed74:	b21b      	sxth	r3, r3

    xt = a.x2;
    yt = a.y2;
    rb.x = ((cosma * xt - sinma * yt) >> LV_TRIGO_SHIFT) + pivot->x;
    ed76:	eba9 0404 	sub.w	r4, r9, r4
    ed7a:	eb06 36e4 	add.w	r6, r6, r4, asr #15
    ed7e:	b236      	sxth	r6, r6
    rb.y = ((sinma * xt + cosma * yt) >> LV_TRIGO_SHIFT) + pivot->y;
    ed80:	44bc      	add	ip, r7
    ed82:	eb00 30ec 	add.w	r0, r0, ip, asr #15
    ed86:	b200      	sxth	r0, r0

    res->x1 = LV_MATH_MIN4(lb.x, lt.x, rb.x, rt.x);
    ed88:	465c      	mov	r4, fp
    ed8a:	45f3      	cmp	fp, lr
    ed8c:	bfa8      	it	ge
    ed8e:	4674      	movge	r4, lr
    ed90:	42ac      	cmp	r4, r5
    ed92:	bfa8      	it	ge
    ed94:	462c      	movge	r4, r5
    ed96:	42b4      	cmp	r4, r6
    ed98:	bfa8      	it	ge
    ed9a:	4634      	movge	r4, r6
    ed9c:	9903      	ldr	r1, [sp, #12]
    ed9e:	460f      	mov	r7, r1
    eda0:	800c      	strh	r4, [r1, #0]
    res->x2 = LV_MATH_MAX4(lb.x, lt.x, rb.x, rt.x);
    eda2:	45de      	cmp	lr, fp
    eda4:	bfb8      	it	lt
    eda6:	46de      	movlt	lr, fp
    eda8:	4575      	cmp	r5, lr
    edaa:	bfb8      	it	lt
    edac:	4675      	movlt	r5, lr
    edae:	42ae      	cmp	r6, r5
    edb0:	bfb8      	it	lt
    edb2:	462e      	movlt	r6, r5
    edb4:	808e      	strh	r6, [r1, #4]
    res->y1 = LV_MATH_MIN4(lb.y, lt.y, rb.y, rt.y);
    edb6:	9902      	ldr	r1, [sp, #8]
    edb8:	460c      	mov	r4, r1
    edba:	4291      	cmp	r1, r2
    edbc:	bfa8      	it	ge
    edbe:	4614      	movge	r4, r2
    edc0:	429c      	cmp	r4, r3
    edc2:	bfa8      	it	ge
    edc4:	461c      	movge	r4, r3
    edc6:	4284      	cmp	r4, r0
    edc8:	bfa8      	it	ge
    edca:	4604      	movge	r4, r0
    edcc:	807c      	strh	r4, [r7, #2]
    res->y2 = LV_MATH_MAX4(lb.y, lt.y, rb.y, rt.y);
    edce:	4291      	cmp	r1, r2
    edd0:	bfb8      	it	lt
    edd2:	4611      	movlt	r1, r2
    edd4:	428b      	cmp	r3, r1
    edd6:	bfb8      	it	lt
    edd8:	460b      	movlt	r3, r1
    edda:	4298      	cmp	r0, r3
    eddc:	bfb8      	it	lt
    edde:	4618      	movlt	r0, r3
    ede0:	80f8      	strh	r0, [r7, #6]
    res->x1 = 0;
    res->y1 = 0;
    res->x2 = w;
    res->y2 = h;
#endif
}
    ede2:	b007      	add	sp, #28
    ede4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ede8:	66666667 	.word	0x66666667
    edec:	00012299 	.word	0x00012299

0000edf0 <_lv_img_buf_transform_anti_alias>:
/**
 * Continue transformation by taking the neighbors into account
 * @param dsc pointer to the transformation descriptor
 */
bool _lv_img_buf_transform_anti_alias(lv_img_transform_dsc_t * dsc)
{
    edf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    edf4:	b089      	sub	sp, #36	; 0x24
    edf6:	4604      	mov	r4, r0
    const uint8_t * src_u8 = dsc->cfg.src;

    /*Get the fractional part of the source pixel*/
    int xs_fract = dsc->tmp.xs & 0xff;
    edf8:	f9b0 5038 	ldrsh.w	r5, [r0, #56]	; 0x38
    edfc:	b2ea      	uxtb	r2, r5
    int ys_fract = dsc->tmp.ys & 0xff;
    edfe:	f9b0 603a 	ldrsh.w	r6, [r0, #58]	; 0x3a
    ee02:	b2f3      	uxtb	r3, r6
    int32_t xn;      /*x neightboor*/
    lv_opa_t xr; /*x mix ratio*/

    if(xs_fract < 0x70) {
    ee04:	2a6f      	cmp	r2, #111	; 0x6f
    ee06:	dc74      	bgt.n	eef2 <_lv_img_buf_transform_anti_alias+0x102>
        xn = - 1;
        if(dsc->tmp.xs_int + xn < 0) xn = 0;
    ee08:	f9b0 103c 	ldrsh.w	r1, [r0, #60]	; 0x3c
    ee0c:	4249      	negs	r1, r1
    ee0e:	17c9      	asrs	r1, r1, #31
        xr = xs_fract + 0x80;
    ee10:	3d80      	subs	r5, #128	; 0x80
    ee12:	b2ed      	uxtb	r5, r5
    }

    int32_t yn;      /*x neightboor*/
    lv_opa_t yr; /*x mix ratio*/

    if(ys_fract < 0x70) {
    ee14:	2b6f      	cmp	r3, #111	; 0x6f
    ee16:	dc7e      	bgt.n	ef16 <_lv_img_buf_transform_anti_alias+0x126>
        yn = - 1;
        if(dsc->tmp.ys_int + yn < 0) yn = 0;
    ee18:	f9b4 b03e 	ldrsh.w	fp, [r4, #62]	; 0x3e
    ee1c:	f1cb 0b00 	rsb	fp, fp, #0
    ee20:	ea4f 7beb 	mov.w	fp, fp, asr #31

        yr = ys_fract + 0x80;
    ee24:	3e80      	subs	r6, #128	; 0x80
    ee26:	b2f6      	uxtb	r6, r6
    else {
        yn = 0;
        yr = 0xFF;
    }

    lv_color_t c00 = dsc->res.color;
    ee28:	f894 9014 	ldrb.w	r9, [r4, #20]
    ee2c:	f009 091f 	and.w	r9, r9, #31
    ee30:	f8b4 8014 	ldrh.w	r8, [r4, #20]
    ee34:	f3c8 1845 	ubfx	r8, r8, #5, #6
    ee38:	7d67      	ldrb	r7, [r4, #21]
    ee3a:	08ff      	lsrs	r7, r7, #3
    lv_color_t c01;
    lv_color_t c10;
    lv_color_t c11;

    lv_opa_t a00 = dsc->res.opa;
    ee3c:	7da3      	ldrb	r3, [r4, #22]
    ee3e:	9300      	str	r3, [sp, #0]
    lv_opa_t a10 = 0;
    lv_opa_t a01 = 0;
    lv_opa_t a11 = 0;

    if(dsc->tmp.native_color) {
    ee40:	f894 c034 	ldrb.w	ip, [r4, #52]	; 0x34
    ee44:	f01c 0f04 	tst.w	ip, #4
    ee48:	d07b      	beq.n	ef42 <_lv_img_buf_transform_anti_alias+0x152>
    const uint8_t * src_u8 = dsc->cfg.src;
    ee4a:	6823      	ldr	r3, [r4, #0]
        _lv_memcpy_small(&c01, &src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn], sizeof(lv_color_t));
    ee4c:	6c20      	ldr	r0, [r4, #64]	; 0x40
    ee4e:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
    ee52:	fb0e 0101 	mla	r1, lr, r1, r0
    ee56:	185a      	adds	r2, r3, r1
    ee58:	f813 a001 	ldrb.w	sl, [r3, r1]
    ee5c:	f88d a01c 	strb.w	sl, [sp, #28]
    ee60:	7852      	ldrb	r2, [r2, #1]
    ee62:	f88d 201d 	strb.w	r2, [sp, #29]
        _lv_memcpy_small(&c10, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn], sizeof(lv_color_t));
    ee66:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
    ee6a:	fb0e f202 	mul.w	r2, lr, r2
    ee6e:	fb0b fb02 	mul.w	fp, fp, r2
    ee72:	4458      	add	r0, fp
    ee74:	181a      	adds	r2, r3, r0
    ee76:	f813 a000 	ldrb.w	sl, [r3, r0]
    ee7a:	f88d a018 	strb.w	sl, [sp, #24]
    ee7e:	7852      	ldrb	r2, [r2, #1]
    ee80:	f88d 2019 	strb.w	r2, [sp, #25]
        _lv_memcpy_small(&c11, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn],
    ee84:	eb01 020b 	add.w	r2, r1, fp
    ee88:	eb03 0a02 	add.w	sl, r3, r2
    ee8c:	f813 b002 	ldrb.w	fp, [r3, r2]
    ee90:	f88d b014 	strb.w	fp, [sp, #20]
    ee94:	f89a a001 	ldrb.w	sl, [sl, #1]
    ee98:	f88d a015 	strb.w	sl, [sp, #21]
                         sizeof(lv_color_t));
        if(dsc->tmp.has_alpha) {
    ee9c:	f01c 0f02 	tst.w	ip, #2
    eea0:	f000 8081 	beq.w	efa6 <_lv_img_buf_transform_anti_alias+0x1b6>
    eea4:	f10e 3eff 	add.w	lr, lr, #4294967295
            a10 = src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
    eea8:	4473      	add	r3, lr
    eeaa:	f813 b001 	ldrb.w	fp, [r3, r1]
            a01 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size - 1];
    eeae:	f813 a000 	ldrb.w	sl, [r3, r0]
            a11 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
    eeb2:	5c98      	ldrb	r0, [r3, r2]
    }

    lv_opa_t xr0 = xr;
    lv_opa_t xr1 = xr;
    if(dsc->tmp.has_alpha) {
        lv_opa_t a0 = (a00 * xr + (a10 * (255 - xr))) >> 8;
    eeb4:	f1c5 03ff 	rsb	r3, r5, #255	; 0xff
    eeb8:	fb03 f10b 	mul.w	r1, r3, fp
    eebc:	9a00      	ldr	r2, [sp, #0]
    eebe:	fb05 1102 	mla	r1, r5, r2, r1
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
    eec2:	fb03 f300 	mul.w	r3, r3, r0
    eec6:	fb05 330a 	mla	r3, r5, sl, r3
    eeca:	f3c3 2307 	ubfx	r3, r3, #8, #8
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
    eece:	f1c6 02ff 	rsb	r2, r6, #255	; 0xff
    eed2:	f3c1 2107 	ubfx	r1, r1, #8, #8
    eed6:	fb06 fe01 	mul.w	lr, r6, r1
    eeda:	fb02 e203 	mla	r2, r2, r3, lr
    eede:	1212      	asrs	r2, r2, #8
    eee0:	75a2      	strb	r2, [r4, #22]

        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
    eee2:	2905      	cmp	r1, #5
    eee4:	f200 80dc 	bhi.w	f0a0 <_lv_img_buf_transform_anti_alias+0x2b0>
    eee8:	2b05      	cmp	r3, #5
    eeea:	f240 817d 	bls.w	f1e8 <_lv_img_buf_transform_anti_alias+0x3f8>
        if(a0 <= LV_OPA_MIN) yr = LV_OPA_TRANSP;
    eeee:	2600      	movs	r6, #0
    eef0:	e0d9      	b.n	f0a6 <_lv_img_buf_transform_anti_alias+0x2b6>
    else if(xs_fract > 0x90) {
    eef2:	2a90      	cmp	r2, #144	; 0x90
    eef4:	dd0c      	ble.n	ef10 <_lv_img_buf_transform_anti_alias+0x120>
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
    eef6:	f9b0 103c 	ldrsh.w	r1, [r0, #60]	; 0x3c
    eefa:	3101      	adds	r1, #1
    eefc:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
    ef00:	4291      	cmp	r1, r2
    ef02:	bfac      	ite	ge
    ef04:	2100      	movge	r1, #0
    ef06:	2101      	movlt	r1, #1
        xr = (0xFF - xs_fract) + 0x80;
    ef08:	f1c5 057f 	rsb	r5, r5, #127	; 0x7f
    ef0c:	b2ed      	uxtb	r5, r5
    ef0e:	e781      	b.n	ee14 <_lv_img_buf_transform_anti_alias+0x24>
        xr = 0xFF;
    ef10:	25ff      	movs	r5, #255	; 0xff
        xn = 0;
    ef12:	2100      	movs	r1, #0
    ef14:	e77e      	b.n	ee14 <_lv_img_buf_transform_anti_alias+0x24>
    else if(ys_fract > 0x90) {
    ef16:	2b90      	cmp	r3, #144	; 0x90
    ef18:	dd0f      	ble.n	ef3a <_lv_img_buf_transform_anti_alias+0x14a>
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;
    ef1a:	f9b4 b03e 	ldrsh.w	fp, [r4, #62]	; 0x3e
    ef1e:	f10b 0b01 	add.w	fp, fp, #1
    ef22:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
    ef26:	4593      	cmp	fp, r2
    ef28:	bfac      	ite	ge
    ef2a:	f04f 0b00 	movge.w	fp, #0
    ef2e:	f04f 0b01 	movlt.w	fp, #1
        yr = (0xFF - ys_fract) + 0x80;
    ef32:	f1c6 067f 	rsb	r6, r6, #127	; 0x7f
    ef36:	b2f6      	uxtb	r6, r6
    ef38:	e776      	b.n	ee28 <_lv_img_buf_transform_anti_alias+0x38>
        yr = 0xFF;
    ef3a:	26ff      	movs	r6, #255	; 0xff
        yn = 0;
    ef3c:	f04f 0b00 	mov.w	fp, #0
    ef40:	e772      	b.n	ee28 <_lv_img_buf_transform_anti_alias+0x38>
        c01 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int, dsc->cfg.color);
    ef42:	f104 0318 	add.w	r3, r4, #24
    ef46:	4618      	mov	r0, r3
    ef48:	b28b      	uxth	r3, r1
    ef4a:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
    ef4c:	9302      	str	r3, [sp, #8]
    ef4e:	4419      	add	r1, r3
    ef50:	8a23      	ldrh	r3, [r4, #16]
    ef52:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
    ef56:	b209      	sxth	r1, r1
    ef58:	9001      	str	r0, [sp, #4]
    ef5a:	f8df a294 	ldr.w	sl, [pc, #660]	; f1f0 <_lv_img_buf_transform_anti_alias+0x400>
    ef5e:	47d0      	blx	sl
    ef60:	f8ad 001c 	strh.w	r0, [sp, #28]
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
    ef64:	fa1f f18b 	uxth.w	r1, fp
    ef68:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    ef6a:	9103      	str	r1, [sp, #12]
    ef6c:	440a      	add	r2, r1
    ef6e:	8a23      	ldrh	r3, [r4, #16]
    ef70:	b212      	sxth	r2, r2
    ef72:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
    ef76:	f8dd b004 	ldr.w	fp, [sp, #4]
    ef7a:	4658      	mov	r0, fp
    ef7c:	47d0      	blx	sl
    ef7e:	f8ad 0018 	strh.w	r0, [sp, #24]
        c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn, dsc->cfg.color);
    ef82:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    ef84:	9903      	ldr	r1, [sp, #12]
    ef86:	440a      	add	r2, r1
    ef88:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
    ef8a:	9b02      	ldr	r3, [sp, #8]
    ef8c:	4419      	add	r1, r3
    ef8e:	8a23      	ldrh	r3, [r4, #16]
    ef90:	b212      	sxth	r2, r2
    ef92:	b209      	sxth	r1, r1
    ef94:	4658      	mov	r0, fp
    ef96:	47d0      	blx	sl
    ef98:	f8ad 0014 	strh.w	r0, [sp, #20]
        if(dsc->tmp.has_alpha) {
    ef9c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    efa0:	f013 0f02 	tst.w	r3, #2
    efa4:	d152      	bne.n	f04c <_lv_img_buf_transform_anti_alias+0x25c>
        if(a11 <= LV_OPA_MIN) xr1 = LV_OPA_COVER;
    }
    else {
        xr0 = xr;
        xr1 = xr;
        dsc->res.opa = LV_OPA_COVER;
    efa6:	23ff      	movs	r3, #255	; 0xff
    efa8:	75a3      	strb	r3, [r4, #22]
        xr0 = xr;
    efaa:	462b      	mov	r3, r5
    }

    lv_color_t c0;
    if(xr0 == LV_OPA_TRANSP) c0 = c01;
    efac:	2b00      	cmp	r3, #0
    efae:	f040 808b 	bne.w	f0c8 <_lv_img_buf_transform_anti_alias+0x2d8>
    efb2:	f89d 901c 	ldrb.w	r9, [sp, #28]
    efb6:	f009 091f 	and.w	r9, r9, #31
    efba:	f8bd 801c 	ldrh.w	r8, [sp, #28]
    efbe:	f3c8 1845 	ubfx	r8, r8, #5, #6
    efc2:	f89d 701d 	ldrb.w	r7, [sp, #29]
    efc6:	08ff      	lsrs	r7, r7, #3
    else if(xr0 == LV_OPA_COVER) c0 = c00;
    else c0 = lv_color_mix(c00, c01, xr0);

    lv_color_t c1;
    if(xr1 == LV_OPA_TRANSP) c1 = c11;
    efc8:	2d00      	cmp	r5, #0
    efca:	f040 80ac 	bne.w	f126 <_lv_img_buf_transform_anti_alias+0x336>
    efce:	f89d 5014 	ldrb.w	r5, [sp, #20]
    efd2:	f005 051f 	and.w	r5, r5, #31
    efd6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    efda:	f3c3 1345 	ubfx	r3, r3, #5, #6
    efde:	f89d 1015 	ldrb.w	r1, [sp, #21]
    efe2:	08c9      	lsrs	r1, r1, #3
    else if(xr1 == LV_OPA_COVER) c1 = c10;
    else c1 = lv_color_mix(c10, c11, xr1);

    if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
    efe4:	2e00      	cmp	r6, #0
    efe6:	f000 80e3 	beq.w	f1b0 <_lv_img_buf_transform_anti_alias+0x3c0>
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
    efea:	2eff      	cmp	r6, #255	; 0xff
    efec:	f000 80ee 	beq.w	f1cc <_lv_img_buf_transform_anti_alias+0x3dc>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    eff0:	f1c6 02ff 	rsb	r2, r6, #255	; 0xff
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    eff4:	fb02 f505 	mul.w	r5, r2, r5
    eff8:	fb06 5509 	mla	r5, r6, r9, r5
    effc:	eb05 2905 	add.w	r9, r5, r5, lsl #8
    f000:	eb05 15c9 	add.w	r5, r5, r9, lsl #7
    f004:	0ded      	lsrs	r5, r5, #23
    else dsc->res.color = lv_color_mix(c0, c1, yr);
    f006:	7d20      	ldrb	r0, [r4, #20]
    f008:	f365 0004 	bfi	r0, r5, #0, #5
    f00c:	7520      	strb	r0, [r4, #20]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    f00e:	fb02 f303 	mul.w	r3, r2, r3
    f012:	fb06 3808 	mla	r8, r6, r8, r3
    f016:	eb08 2308 	add.w	r3, r8, r8, lsl #8
    f01a:	eb08 18c3 	add.w	r8, r8, r3, lsl #7
    f01e:	ea4f 58d8 	mov.w	r8, r8, lsr #23
    f022:	8aa3      	ldrh	r3, [r4, #20]
    f024:	f368 134a 	bfi	r3, r8, #5, #6
    f028:	82a3      	strh	r3, [r4, #20]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    f02a:	fb02 f101 	mul.w	r1, r2, r1
    f02e:	fb06 1607 	mla	r6, r6, r7, r1
    f032:	eb06 2706 	add.w	r7, r6, r6, lsl #8
    f036:	eb06 16c7 	add.w	r6, r6, r7, lsl #7
    f03a:	0df6      	lsrs	r6, r6, #23
    f03c:	0a1b      	lsrs	r3, r3, #8
    f03e:	f366 03c7 	bfi	r3, r6, #3, #5
    f042:	7563      	strb	r3, [r4, #21]

    return true;
    f044:	2001      	movs	r0, #1
}
    f046:	b009      	add	sp, #36	; 0x24
    f048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            a10 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int);
    f04c:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
    f04e:	9b02      	ldr	r3, [sp, #8]
    f050:	4419      	add	r1, r3
    f052:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
    f056:	b209      	sxth	r1, r1
    f058:	f8dd a004 	ldr.w	sl, [sp, #4]
    f05c:	4650      	mov	r0, sl
    f05e:	4b63      	ldr	r3, [pc, #396]	; (f1ec <_lv_img_buf_transform_anti_alias+0x3fc>)
    f060:	4798      	blx	r3
    f062:	4683      	mov	fp, r0
            a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn);
    f064:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    f066:	9903      	ldr	r1, [sp, #12]
    f068:	440a      	add	r2, r1
    f06a:	b212      	sxth	r2, r2
    f06c:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
    f070:	f8cd a004 	str.w	sl, [sp, #4]
    f074:	4650      	mov	r0, sl
    f076:	4b5d      	ldr	r3, [pc, #372]	; (f1ec <_lv_img_buf_transform_anti_alias+0x3fc>)
    f078:	4798      	blx	r3
    f07a:	4682      	mov	sl, r0
            a11 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn);
    f07c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    f07e:	9903      	ldr	r1, [sp, #12]
    f080:	440a      	add	r2, r1
    f082:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
    f084:	9b02      	ldr	r3, [sp, #8]
    f086:	4419      	add	r1, r3
    f088:	b212      	sxth	r2, r2
    f08a:	b209      	sxth	r1, r1
    f08c:	9801      	ldr	r0, [sp, #4]
    f08e:	4b57      	ldr	r3, [pc, #348]	; (f1ec <_lv_img_buf_transform_anti_alias+0x3fc>)
    f090:	4798      	blx	r3
    if(dsc->tmp.has_alpha) {
    f092:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    f096:	f013 0f02 	tst.w	r3, #2
    f09a:	f47f af0b 	bne.w	eeb4 <_lv_img_buf_transform_anti_alias+0xc4>
    f09e:	e782      	b.n	efa6 <_lv_img_buf_transform_anti_alias+0x1b6>
        if(a1 <= LV_OPA_MIN) yr = LV_OPA_COVER;
    f0a0:	2b05      	cmp	r3, #5
    f0a2:	bf98      	it	ls
    f0a4:	26ff      	movls	r6, #255	; 0xff
        if(a00 <= LV_OPA_MIN) xr0 = LV_OPA_TRANSP;
    f0a6:	9b00      	ldr	r3, [sp, #0]
    f0a8:	2b05      	cmp	r3, #5
    f0aa:	bf8c      	ite	hi
    f0ac:	462b      	movhi	r3, r5
    f0ae:	2300      	movls	r3, #0
        if(a10 <= LV_OPA_MIN) xr0 = LV_OPA_COVER;
    f0b0:	f1bb 0f05 	cmp.w	fp, #5
    f0b4:	bf98      	it	ls
    f0b6:	23ff      	movls	r3, #255	; 0xff
        if(a01 <= LV_OPA_MIN) xr1 = LV_OPA_TRANSP;
    f0b8:	f1ba 0f05 	cmp.w	sl, #5
    f0bc:	bf98      	it	ls
    f0be:	2500      	movls	r5, #0
        if(a11 <= LV_OPA_MIN) xr1 = LV_OPA_COVER;
    f0c0:	2805      	cmp	r0, #5
    f0c2:	bf98      	it	ls
    f0c4:	25ff      	movls	r5, #255	; 0xff
    f0c6:	e771      	b.n	efac <_lv_img_buf_transform_anti_alias+0x1bc>
    else if(xr0 == LV_OPA_COVER) c0 = c00;
    f0c8:	2bff      	cmp	r3, #255	; 0xff
    f0ca:	f43f af7d 	beq.w	efc8 <_lv_img_buf_transform_anti_alias+0x1d8>
    f0ce:	f1c3 01ff 	rsb	r1, r3, #255	; 0xff
    f0d2:	f89d 201d 	ldrb.w	r2, [sp, #29]
    f0d6:	08d2      	lsrs	r2, r2, #3
    f0d8:	fb03 f707 	mul.w	r7, r3, r7
    f0dc:	fb01 7702 	mla	r7, r1, r2, r7
    f0e0:	eb07 2207 	add.w	r2, r7, r7, lsl #8
    f0e4:	eb07 17c2 	add.w	r7, r7, r2, lsl #7
    f0e8:	f3c7 57c4 	ubfx	r7, r7, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    f0ec:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    f0f0:	f3c2 1245 	ubfx	r2, r2, #5, #6
    f0f4:	fb03 f808 	mul.w	r8, r3, r8
    f0f8:	fb01 8802 	mla	r8, r1, r2, r8
    f0fc:	eb08 2208 	add.w	r2, r8, r8, lsl #8
    f100:	eb08 18c2 	add.w	r8, r8, r2, lsl #7
    f104:	f3c8 58c5 	ubfx	r8, r8, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    f108:	f89d 201c 	ldrb.w	r2, [sp, #28]
    f10c:	f002 021f 	and.w	r2, r2, #31
    f110:	fb03 f909 	mul.w	r9, r3, r9
    f114:	fb01 9902 	mla	r9, r1, r2, r9
    f118:	eb09 2309 	add.w	r3, r9, r9, lsl #8
    f11c:	eb09 19c3 	add.w	r9, r9, r3, lsl #7
    f120:	f3c9 59c4 	ubfx	r9, r9, #23, #5
    f124:	e750      	b.n	efc8 <_lv_img_buf_transform_anti_alias+0x1d8>
    else if(xr1 == LV_OPA_COVER) c1 = c10;
    f126:	2dff      	cmp	r5, #255	; 0xff
    f128:	d036      	beq.n	f198 <_lv_img_buf_transform_anti_alias+0x3a8>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    f12a:	f1c5 00ff 	rsb	r0, r5, #255	; 0xff
    f12e:	f89d 1019 	ldrb.w	r1, [sp, #25]
    f132:	08c9      	lsrs	r1, r1, #3
    f134:	f89d 3015 	ldrb.w	r3, [sp, #21]
    f138:	08db      	lsrs	r3, r3, #3
    f13a:	fb00 f303 	mul.w	r3, r0, r3
    f13e:	fb05 3101 	mla	r1, r5, r1, r3
    f142:	eb01 2301 	add.w	r3, r1, r1, lsl #8
    f146:	eb01 11c3 	add.w	r1, r1, r3, lsl #7
    f14a:	f3c1 51c4 	ubfx	r1, r1, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    f14e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    f152:	f3c3 1345 	ubfx	r3, r3, #5, #6
    f156:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    f15a:	f3c2 1245 	ubfx	r2, r2, #5, #6
    f15e:	fb00 f202 	mul.w	r2, r0, r2
    f162:	fb05 2303 	mla	r3, r5, r3, r2
    f166:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    f16a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    f16e:	f3c3 53c5 	ubfx	r3, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    f172:	f89d 2018 	ldrb.w	r2, [sp, #24]
    f176:	f002 021f 	and.w	r2, r2, #31
    f17a:	f89d e014 	ldrb.w	lr, [sp, #20]
    f17e:	f00e 0e1f 	and.w	lr, lr, #31
    f182:	fb00 f00e 	mul.w	r0, r0, lr
    f186:	fb05 0502 	mla	r5, r5, r2, r0
    f18a:	eb05 2205 	add.w	r2, r5, r5, lsl #8
    f18e:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    f192:	f3c5 55c4 	ubfx	r5, r5, #23, #5
    f196:	e725      	b.n	efe4 <_lv_img_buf_transform_anti_alias+0x1f4>
    f198:	f89d 5018 	ldrb.w	r5, [sp, #24]
    f19c:	f005 051f 	and.w	r5, r5, #31
    f1a0:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    f1a4:	f3c3 1345 	ubfx	r3, r3, #5, #6
    f1a8:	f89d 1019 	ldrb.w	r1, [sp, #25]
    f1ac:	08c9      	lsrs	r1, r1, #3
    f1ae:	e719      	b.n	efe4 <_lv_img_buf_transform_anti_alias+0x1f4>
    if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
    f1b0:	7d22      	ldrb	r2, [r4, #20]
    f1b2:	f365 0204 	bfi	r2, r5, #0, #5
    f1b6:	7522      	strb	r2, [r4, #20]
    f1b8:	8aa2      	ldrh	r2, [r4, #20]
    f1ba:	f363 124a 	bfi	r2, r3, #5, #6
    f1be:	82a2      	strh	r2, [r4, #20]
    f1c0:	0a12      	lsrs	r2, r2, #8
    f1c2:	f361 02c7 	bfi	r2, r1, #3, #5
    f1c6:	7562      	strb	r2, [r4, #21]
    return true;
    f1c8:	2001      	movs	r0, #1
    f1ca:	e73c      	b.n	f046 <_lv_img_buf_transform_anti_alias+0x256>
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
    f1cc:	7d23      	ldrb	r3, [r4, #20]
    f1ce:	f369 0304 	bfi	r3, r9, #0, #5
    f1d2:	7523      	strb	r3, [r4, #20]
    f1d4:	8aa3      	ldrh	r3, [r4, #20]
    f1d6:	f368 134a 	bfi	r3, r8, #5, #6
    f1da:	82a3      	strh	r3, [r4, #20]
    f1dc:	0a1b      	lsrs	r3, r3, #8
    f1de:	f367 03c7 	bfi	r3, r7, #3, #5
    f1e2:	7563      	strb	r3, [r4, #21]
    return true;
    f1e4:	2001      	movs	r0, #1
    f1e6:	e72e      	b.n	f046 <_lv_img_buf_transform_anti_alias+0x256>
        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
    f1e8:	2000      	movs	r0, #0
    f1ea:	e72c      	b.n	f046 <_lv_img_buf_transform_anti_alias+0x256>
    f1ec:	0000ea3d 	.word	0x0000ea3d
    f1f0:	0000e90d 	.word	0x0000e90d

0000f1f4 <_lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param style style of the image
 * @return pointer to the cache entry or NULL if can open the image
 */
lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color)
{
    f1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f1f8:	b083      	sub	sp, #12
    f1fa:	4688      	mov	r8, r1
    if(entry_cnt == 0) {
    f1fc:	4b5d      	ldr	r3, [pc, #372]	; (f374 <_lv_img_cache_open+0x180>)
    f1fe:	8819      	ldrh	r1, [r3, #0]
    f200:	b1e1      	cbz	r1, f23c <_lv_img_cache_open+0x48>
    f202:	4607      	mov	r7, r0
        LV_LOG_WARN("lv_img_cache_open: the cache size is 0");
        return NULL;
    }

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
    f204:	4b5c      	ldr	r3, [pc, #368]	; (f378 <_lv_img_cache_open+0x184>)
    f206:	681e      	ldr	r6, [r3, #0]
    f208:	4633      	mov	r3, r6
    f20a:	3901      	subs	r1, #1
    f20c:	b289      	uxth	r1, r1
    f20e:	3101      	adds	r1, #1
    f210:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
    f214:	eb06 0181 	add.w	r1, r6, r1, lsl #2

    /*Decrement all lifes. Make the entries older*/
    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
    f218:	4858      	ldr	r0, [pc, #352]	; (f37c <_lv_img_cache_open+0x188>)
    f21a:	6a1a      	ldr	r2, [r3, #32]
    f21c:	4282      	cmp	r2, r0
            cache[i].life -= LV_IMG_CACHE_AGING;
    f21e:	bfa4      	itt	ge
    f220:	f102 32ff 	addge.w	r2, r2, #4294967295
    f224:	621a      	strge	r2, [r3, #32]
    f226:	3324      	adds	r3, #36	; 0x24
    for(i = 0; i < entry_cnt; i++) {
    f228:	428b      	cmp	r3, r1
    f22a:	d1f6      	bne.n	f21a <_lv_img_cache_open+0x26>
    f22c:	2400      	movs	r4, #0

    /*Is the image cached?*/
    lv_img_cache_entry_t * cached_src = NULL;
    for(i = 0; i < entry_cnt; i++) {
        bool match = false;
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
    f22e:	f8df 9180 	ldr.w	r9, [pc, #384]	; f3b0 <_lv_img_cache_open+0x1bc>
        if(src_type == LV_IMG_SRC_VARIABLE) {
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
        }
        else if(src_type == LV_IMG_SRC_FILE) {
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
    f232:	f8df b180 	ldr.w	fp, [pc, #384]	; f3b4 <_lv_img_cache_open+0x1c0>
    for(i = 0; i < entry_cnt; i++) {
    f236:	f8df a13c 	ldr.w	sl, [pc, #316]	; f374 <_lv_img_cache_open+0x180>
    f23a:	e011      	b.n	f260 <_lv_img_cache_open+0x6c>
        LV_LOG_WARN("lv_img_cache_open: the cache size is 0");
    f23c:	4b50      	ldr	r3, [pc, #320]	; (f380 <_lv_img_cache_open+0x18c>)
    f23e:	9300      	str	r3, [sp, #0]
    f240:	4b50      	ldr	r3, [pc, #320]	; (f384 <_lv_img_cache_open+0x190>)
    f242:	2244      	movs	r2, #68	; 0x44
    f244:	4950      	ldr	r1, [pc, #320]	; (f388 <_lv_img_cache_open+0x194>)
    f246:	2002      	movs	r0, #2
    f248:	4c50      	ldr	r4, [pc, #320]	; (f38c <_lv_img_cache_open+0x198>)
    f24a:	47a0      	blx	r4
        return NULL;
    f24c:	2500      	movs	r5, #0
    f24e:	e025      	b.n	f29c <_lv_img_cache_open+0xa8>
        else if(src_type == LV_IMG_SRC_FILE) {
    f250:	2801      	cmp	r0, #1
    f252:	d027      	beq.n	f2a4 <_lv_img_cache_open+0xb0>
    for(i = 0; i < entry_cnt; i++) {
    f254:	3401      	adds	r4, #1
    f256:	b2a4      	uxth	r4, r4
    f258:	f8ba 3000 	ldrh.w	r3, [sl]
    f25c:	42a3      	cmp	r3, r4
    f25e:	d92a      	bls.n	f2b6 <_lv_img_cache_open+0xc2>
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
    f260:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
    f264:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    f268:	6868      	ldr	r0, [r5, #4]
    f26a:	47c8      	blx	r9
        if(src_type == LV_IMG_SRC_VARIABLE) {
    f26c:	2800      	cmp	r0, #0
    f26e:	d1ef      	bne.n	f250 <_lv_img_cache_open+0x5c>
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
    f270:	686b      	ldr	r3, [r5, #4]
    f272:	42bb      	cmp	r3, r7
    f274:	d1ee      	bne.n	f254 <_lv_img_cache_open+0x60>
    f276:	8928      	ldrh	r0, [r5, #8]
    f278:	fa1f f388 	uxth.w	r3, r8
    f27c:	4298      	cmp	r0, r3
    f27e:	bf14      	ite	ne
    f280:	2000      	movne	r0, #0
    f282:	2001      	moveq	r0, #1
        }

        if(match) {
    f284:	2800      	cmp	r0, #0
    f286:	d0e5      	beq.n	f254 <_lv_img_cache_open+0x60>
            /* If opened increment its life.
             * Image difficult to open should live longer to keep avoid frequent their recaching.
             * Therefore increase `life` with `time_to_open`*/
            cached_src = &cache[i];
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
    f288:	6a2b      	ldr	r3, [r5, #32]
    f28a:	696a      	ldr	r2, [r5, #20]
    f28c:	4413      	add	r3, r2
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
    f28e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    f292:	dd0e      	ble.n	f2b2 <_lv_img_cache_open+0xbe>
    f294:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    f298:	622b      	str	r3, [r5, #32]
            break;
        }
    }

    /*The image is not cached then cache it now*/
    if(cached_src == NULL) {
    f29a:	b165      	cbz	r5, f2b6 <_lv_img_cache_open+0xc2>

        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
    }

    return cached_src;
}
    f29c:	4628      	mov	r0, r5
    f29e:	b003      	add	sp, #12
    f2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
    f2a4:	4639      	mov	r1, r7
    f2a6:	6868      	ldr	r0, [r5, #4]
    f2a8:	47d8      	blx	fp
    f2aa:	fab0 f080 	clz	r0, r0
    f2ae:	0940      	lsrs	r0, r0, #5
    f2b0:	e7e8      	b.n	f284 <_lv_img_cache_open+0x90>
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
    f2b2:	622b      	str	r3, [r5, #32]
    f2b4:	e7f1      	b.n	f29a <_lv_img_cache_open+0xa6>
        for(i = 1; i < entry_cnt; i++) {
    f2b6:	4b2f      	ldr	r3, [pc, #188]	; (f374 <_lv_img_cache_open+0x180>)
    f2b8:	881a      	ldrh	r2, [r3, #0]
    f2ba:	2a01      	cmp	r2, #1
    f2bc:	d937      	bls.n	f32e <_lv_img_cache_open+0x13a>
    f2be:	f106 0324 	add.w	r3, r6, #36	; 0x24
    f2c2:	3a02      	subs	r2, #2
    f2c4:	b292      	uxth	r2, r2
    f2c6:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
    f2ca:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    f2ce:	3248      	adds	r2, #72	; 0x48
    f2d0:	4635      	mov	r5, r6
            if(cache[i].life < cached_src->life) {
    f2d2:	6a18      	ldr	r0, [r3, #32]
    f2d4:	6a29      	ldr	r1, [r5, #32]
                cached_src = &cache[i];
    f2d6:	4288      	cmp	r0, r1
    f2d8:	bfb8      	it	lt
    f2da:	461d      	movlt	r5, r3
    f2dc:	3324      	adds	r3, #36	; 0x24
        for(i = 1; i < entry_cnt; i++) {
    f2de:	4293      	cmp	r3, r2
    f2e0:	d1f7      	bne.n	f2d2 <_lv_img_cache_open+0xde>
        if(cached_src->dec_dsc.src) {
    f2e2:	686b      	ldr	r3, [r5, #4]
    f2e4:	b32b      	cbz	r3, f332 <_lv_img_cache_open+0x13e>
            lv_img_decoder_close(&cached_src->dec_dsc);
    f2e6:	4628      	mov	r0, r5
    f2e8:	4b29      	ldr	r3, [pc, #164]	; (f390 <_lv_img_cache_open+0x19c>)
    f2ea:	4798      	blx	r3
            LV_LOG_INFO("image draw: cache miss, close and reuse an entry");
    f2ec:	4b29      	ldr	r3, [pc, #164]	; (f394 <_lv_img_cache_open+0x1a0>)
    f2ee:	9300      	str	r3, [sp, #0]
    f2f0:	4b24      	ldr	r3, [pc, #144]	; (f384 <_lv_img_cache_open+0x190>)
    f2f2:	2277      	movs	r2, #119	; 0x77
    f2f4:	4924      	ldr	r1, [pc, #144]	; (f388 <_lv_img_cache_open+0x194>)
    f2f6:	2001      	movs	r0, #1
    f2f8:	4c24      	ldr	r4, [pc, #144]	; (f38c <_lv_img_cache_open+0x198>)
    f2fa:	47a0      	blx	r4
        t_start                          = lv_tick_get();
    f2fc:	4b26      	ldr	r3, [pc, #152]	; (f398 <_lv_img_cache_open+0x1a4>)
    f2fe:	4798      	blx	r3
    f300:	4604      	mov	r4, r0
        cached_src->dec_dsc.time_to_open = 0;
    f302:	2300      	movs	r3, #0
    f304:	616b      	str	r3, [r5, #20]
        lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, color);
    f306:	4642      	mov	r2, r8
    f308:	4639      	mov	r1, r7
    f30a:	4628      	mov	r0, r5
    f30c:	4b23      	ldr	r3, [pc, #140]	; (f39c <_lv_img_cache_open+0x1a8>)
    f30e:	4798      	blx	r3
        if(open_res == LV_RES_INV) {
    f310:	b1c0      	cbz	r0, f344 <_lv_img_cache_open+0x150>
        cached_src->life = 0;
    f312:	2300      	movs	r3, #0
    f314:	622b      	str	r3, [r5, #32]
        if(cached_src->dec_dsc.time_to_open == 0) {
    f316:	696b      	ldr	r3, [r5, #20]
    f318:	2b00      	cmp	r3, #0
    f31a:	d1bf      	bne.n	f29c <_lv_img_cache_open+0xa8>
            cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
    f31c:	4620      	mov	r0, r4
    f31e:	4b20      	ldr	r3, [pc, #128]	; (f3a0 <_lv_img_cache_open+0x1ac>)
    f320:	4798      	blx	r3
    f322:	6168      	str	r0, [r5, #20]
        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
    f324:	2800      	cmp	r0, #0
    f326:	d1b9      	bne.n	f29c <_lv_img_cache_open+0xa8>
    f328:	2301      	movs	r3, #1
    f32a:	616b      	str	r3, [r5, #20]
    f32c:	e7b6      	b.n	f29c <_lv_img_cache_open+0xa8>
        for(i = 1; i < entry_cnt; i++) {
    f32e:	4635      	mov	r5, r6
    f330:	e7d7      	b.n	f2e2 <_lv_img_cache_open+0xee>
            LV_LOG_INFO("image draw: cache miss, cached to an empty entry");
    f332:	4b1c      	ldr	r3, [pc, #112]	; (f3a4 <_lv_img_cache_open+0x1b0>)
    f334:	9300      	str	r3, [sp, #0]
    f336:	4b13      	ldr	r3, [pc, #76]	; (f384 <_lv_img_cache_open+0x190>)
    f338:	227a      	movs	r2, #122	; 0x7a
    f33a:	4913      	ldr	r1, [pc, #76]	; (f388 <_lv_img_cache_open+0x194>)
    f33c:	2001      	movs	r0, #1
    f33e:	4c13      	ldr	r4, [pc, #76]	; (f38c <_lv_img_cache_open+0x198>)
    f340:	47a0      	blx	r4
    f342:	e7db      	b.n	f2fc <_lv_img_cache_open+0x108>
            LV_LOG_WARN("Image draw cannot open the image resource");
    f344:	4b18      	ldr	r3, [pc, #96]	; (f3a8 <_lv_img_cache_open+0x1b4>)
    f346:	9300      	str	r3, [sp, #0]
    f348:	4b0e      	ldr	r3, [pc, #56]	; (f384 <_lv_img_cache_open+0x190>)
    f34a:	2283      	movs	r2, #131	; 0x83
    f34c:	490e      	ldr	r1, [pc, #56]	; (f388 <_lv_img_cache_open+0x194>)
    f34e:	2002      	movs	r0, #2
    f350:	4c0e      	ldr	r4, [pc, #56]	; (f38c <_lv_img_cache_open+0x198>)
    f352:	47a0      	blx	r4
            lv_img_decoder_close(&cached_src->dec_dsc);
    f354:	4628      	mov	r0, r5
    f356:	4b0e      	ldr	r3, [pc, #56]	; (f390 <_lv_img_cache_open+0x19c>)
    f358:	4798      	blx	r3
            _lv_memset_00(&cached_src->dec_dsc, sizeof(lv_img_decoder_dsc_t));
    f35a:	2120      	movs	r1, #32
    f35c:	4628      	mov	r0, r5
    f35e:	4c13      	ldr	r4, [pc, #76]	; (f3ac <_lv_img_cache_open+0x1b8>)
    f360:	47a0      	blx	r4
            _lv_memset_00(cached_src, sizeof(lv_img_cache_entry_t));
    f362:	2124      	movs	r1, #36	; 0x24
    f364:	4628      	mov	r0, r5
    f366:	47a0      	blx	r4
            cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its use  */
    f368:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    f36c:	622b      	str	r3, [r5, #32]
            return NULL;
    f36e:	2500      	movs	r5, #0
    f370:	e794      	b.n	f29c <_lv_img_cache_open+0xa8>
    f372:	bf00      	nop
    f374:	20008554 	.word	0x20008554
    f378:	2000c754 	.word	0x2000c754
    f37c:	80000002 	.word	0x80000002
    f380:	00025184 	.word	0x00025184
    f384:	00025128 	.word	0x00025128
    f388:	00025154 	.word	0x00025154
    f38c:	00012251 	.word	0x00012251
    f390:	0000ff29 	.word	0x0000ff29
    f394:	000251ac 	.word	0x000251ac
    f398:	0001104d 	.word	0x0001104d
    f39c:	0000fe3d 	.word	0x0000fe3d
    f3a0:	00011065 	.word	0x00011065
    f3a4:	000251e0 	.word	0x000251e0
    f3a8:	00025214 	.word	0x00025214
    f3ac:	00012b2b 	.word	0x00012b2b
    f3b0:	0000995d 	.word	0x0000995d
    f3b4:	0001b4ef 	.word	0x0001b4ef

0000f3b8 <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
    f3b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
    f3bc:	4b14      	ldr	r3, [pc, #80]	; (f410 <lv_img_cache_invalidate_src+0x58>)
    f3be:	681f      	ldr	r7, [r3, #0]

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
    f3c0:	4b14      	ldr	r3, [pc, #80]	; (f414 <lv_img_cache_invalidate_src+0x5c>)
    f3c2:	881b      	ldrh	r3, [r3, #0]
    f3c4:	b30b      	cbz	r3, f40a <lv_img_cache_invalidate_src+0x52>
    f3c6:	4606      	mov	r6, r0
    f3c8:	2400      	movs	r4, #0
        if(cache[i].dec_dsc.src == src || src == NULL) {
            if(cache[i].dec_dsc.src != NULL) {
                lv_img_decoder_close(&cache[i].dec_dsc);
            }

            _lv_memset_00(&cache[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
    f3ca:	f8df 904c 	ldr.w	r9, [pc, #76]	; f418 <lv_img_cache_invalidate_src+0x60>
                lv_img_decoder_close(&cache[i].dec_dsc);
    f3ce:	f8df a04c 	ldr.w	sl, [pc, #76]	; f41c <lv_img_cache_invalidate_src+0x64>
    for(i = 0; i < entry_cnt; i++) {
    f3d2:	f8df 8040 	ldr.w	r8, [pc, #64]	; f414 <lv_img_cache_invalidate_src+0x5c>
    f3d6:	e00e      	b.n	f3f6 <lv_img_cache_invalidate_src+0x3e>
            if(cache[i].dec_dsc.src != NULL) {
    f3d8:	b10b      	cbz	r3, f3de <lv_img_cache_invalidate_src+0x26>
                lv_img_decoder_close(&cache[i].dec_dsc);
    f3da:	4628      	mov	r0, r5
    f3dc:	47d0      	blx	sl
            _lv_memset_00(&cache[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
    f3de:	2120      	movs	r1, #32
    f3e0:	4628      	mov	r0, r5
    f3e2:	47c8      	blx	r9
            _lv_memset_00(&cache[i], sizeof(lv_img_cache_entry_t));
    f3e4:	2124      	movs	r1, #36	; 0x24
    f3e6:	4628      	mov	r0, r5
    f3e8:	47c8      	blx	r9
    for(i = 0; i < entry_cnt; i++) {
    f3ea:	3401      	adds	r4, #1
    f3ec:	b2a4      	uxth	r4, r4
    f3ee:	f8b8 3000 	ldrh.w	r3, [r8]
    f3f2:	42a3      	cmp	r3, r4
    f3f4:	d909      	bls.n	f40a <lv_img_cache_invalidate_src+0x52>
        if(cache[i].dec_dsc.src == src || src == NULL) {
    f3f6:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
    f3fa:	eb07 0585 	add.w	r5, r7, r5, lsl #2
    f3fe:	686b      	ldr	r3, [r5, #4]
    f400:	42b3      	cmp	r3, r6
    f402:	d0e9      	beq.n	f3d8 <lv_img_cache_invalidate_src+0x20>
    f404:	2e00      	cmp	r6, #0
    f406:	d1f0      	bne.n	f3ea <lv_img_cache_invalidate_src+0x32>
    f408:	e7e6      	b.n	f3d8 <lv_img_cache_invalidate_src+0x20>
    f40a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f40e:	bf00      	nop
    f410:	2000c754 	.word	0x2000c754
    f414:	20008554 	.word	0x20008554
    f418:	00012b2b 	.word	0x00012b2b
    f41c:	0000ff29 	.word	0x0000ff29

0000f420 <lv_img_cache_set_size>:
{
    f420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f424:	b082      	sub	sp, #8
    f426:	4604      	mov	r4, r0
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
    f428:	4b21      	ldr	r3, [pc, #132]	; (f4b0 <lv_img_cache_set_size+0x90>)
    f42a:	681b      	ldr	r3, [r3, #0]
    f42c:	b133      	cbz	r3, f43c <lv_img_cache_set_size+0x1c>
        lv_img_cache_invalidate_src(NULL);
    f42e:	2000      	movs	r0, #0
    f430:	4b20      	ldr	r3, [pc, #128]	; (f4b4 <lv_img_cache_set_size+0x94>)
    f432:	4798      	blx	r3
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
    f434:	4b1e      	ldr	r3, [pc, #120]	; (f4b0 <lv_img_cache_set_size+0x90>)
    f436:	6818      	ldr	r0, [r3, #0]
    f438:	4b1f      	ldr	r3, [pc, #124]	; (f4b8 <lv_img_cache_set_size+0x98>)
    f43a:	4798      	blx	r3
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
    f43c:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
    f440:	0080      	lsls	r0, r0, #2
    f442:	4b1e      	ldr	r3, [pc, #120]	; (f4bc <lv_img_cache_set_size+0x9c>)
    f444:	4798      	blx	r3
    f446:	4b1a      	ldr	r3, [pc, #104]	; (f4b0 <lv_img_cache_set_size+0x90>)
    f448:	6018      	str	r0, [r3, #0]
    LV_ASSERT_MEM(LV_GC_ROOT(_lv_img_cache_array));
    f44a:	4b1d      	ldr	r3, [pc, #116]	; (f4c0 <lv_img_cache_set_size+0xa0>)
    f44c:	4798      	blx	r3
    f44e:	b1e8      	cbz	r0, f48c <lv_img_cache_set_size+0x6c>
    if(LV_GC_ROOT(_lv_img_cache_array) == NULL) {
    f450:	4b17      	ldr	r3, [pc, #92]	; (f4b0 <lv_img_cache_set_size+0x90>)
    f452:	681b      	ldr	r3, [r3, #0]
    f454:	b343      	cbz	r3, f4a8 <lv_img_cache_set_size+0x88>
    entry_cnt = new_entry_cnt;
    f456:	4b1b      	ldr	r3, [pc, #108]	; (f4c4 <lv_img_cache_set_size+0xa4>)
    f458:	801c      	strh	r4, [r3, #0]
    for(i = 0; i < entry_cnt; i++) {
    f45a:	b1a4      	cbz	r4, f486 <lv_img_cache_set_size+0x66>
    f45c:	2400      	movs	r4, #0
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
    f45e:	4f14      	ldr	r7, [pc, #80]	; (f4b0 <lv_img_cache_set_size+0x90>)
    f460:	4e19      	ldr	r6, [pc, #100]	; (f4c8 <lv_img_cache_set_size+0xa8>)
    for(i = 0; i < entry_cnt; i++) {
    f462:	4698      	mov	r8, r3
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
    f464:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
    f468:	00ad      	lsls	r5, r5, #2
    f46a:	6838      	ldr	r0, [r7, #0]
    f46c:	2120      	movs	r1, #32
    f46e:	4428      	add	r0, r5
    f470:	47b0      	blx	r6
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i], sizeof(lv_img_cache_entry_t));
    f472:	6838      	ldr	r0, [r7, #0]
    f474:	2124      	movs	r1, #36	; 0x24
    f476:	4428      	add	r0, r5
    f478:	47b0      	blx	r6
    for(i = 0; i < entry_cnt; i++) {
    f47a:	3401      	adds	r4, #1
    f47c:	b2a4      	uxth	r4, r4
    f47e:	f8b8 3000 	ldrh.w	r3, [r8]
    f482:	42a3      	cmp	r3, r4
    f484:	d8ee      	bhi.n	f464 <lv_img_cache_set_size+0x44>
}
    f486:	b002      	add	sp, #8
    f488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LV_ASSERT_MEM(LV_GC_ROOT(_lv_img_cache_array));
    f48c:	4b0f      	ldr	r3, [pc, #60]	; (f4cc <lv_img_cache_set_size+0xac>)
    f48e:	9300      	str	r3, [sp, #0]
    f490:	22a8      	movs	r2, #168	; 0xa8
    f492:	490f      	ldr	r1, [pc, #60]	; (f4d0 <lv_img_cache_set_size+0xb0>)
    f494:	2003      	movs	r0, #3
    f496:	4c0f      	ldr	r4, [pc, #60]	; (f4d4 <lv_img_cache_set_size+0xb4>)
    f498:	47a0      	blx	r4
    f49a:	4b05      	ldr	r3, [pc, #20]	; (f4b0 <lv_img_cache_set_size+0x90>)
    f49c:	681a      	ldr	r2, [r3, #0]
    f49e:	2300      	movs	r3, #0
    f4a0:	480d      	ldr	r0, [pc, #52]	; (f4d8 <lv_img_cache_set_size+0xb8>)
    f4a2:	490e      	ldr	r1, [pc, #56]	; (f4dc <lv_img_cache_set_size+0xbc>)
    f4a4:	4788      	blx	r1
    f4a6:	e7fe      	b.n	f4a6 <lv_img_cache_set_size+0x86>
        entry_cnt = 0;
    f4a8:	2200      	movs	r2, #0
    f4aa:	4b06      	ldr	r3, [pc, #24]	; (f4c4 <lv_img_cache_set_size+0xa4>)
    f4ac:	801a      	strh	r2, [r3, #0]
        return;
    f4ae:	e7ea      	b.n	f486 <lv_img_cache_set_size+0x66>
    f4b0:	2000c754 	.word	0x2000c754
    f4b4:	0000f3b9 	.word	0x0000f3b9
    f4b8:	000124b9 	.word	0x000124b9
    f4bc:	000123d1 	.word	0x000123d1
    f4c0:	000022a5 	.word	0x000022a5
    f4c4:	20008554 	.word	0x20008554
    f4c8:	00012b2b 	.word	0x00012b2b
    f4cc:	0002513c 	.word	0x0002513c
    f4d0:	00025154 	.word	0x00025154
    f4d4:	00012251 	.word	0x00012251
    f4d8:	00023fcc 	.word	0x00023fcc
    f4dc:	000022ad 	.word	0x000022ad

0000f4e0 <lv_img_decoder_built_in_info>:
 * @param src the image source: pointer to an `lv_img_dsc_t` variable, a file path or a symbol
 * @param header store the image data here
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_info(lv_img_decoder_t * decoder, const void * src, lv_img_header_t * header)
{
    f4e0:	b530      	push	{r4, r5, lr}
    f4e2:	b087      	sub	sp, #28
    f4e4:	460c      	mov	r4, r1
    f4e6:	4615      	mov	r5, r2
    (void)decoder; /*Unused*/

    lv_img_src_t src_type = lv_img_src_get_type(src);
    f4e8:	4608      	mov	r0, r1
    f4ea:	4b33      	ldr	r3, [pc, #204]	; (f5b8 <lv_img_decoder_built_in_info+0xd8>)
    f4ec:	4798      	blx	r3
    if(src_type == LV_IMG_SRC_VARIABLE) {
    f4ee:	b9d8      	cbnz	r0, f528 <lv_img_decoder_built_in_info+0x48>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
    f4f0:	7823      	ldrb	r3, [r4, #0]
    f4f2:	f3c3 0304 	ubfx	r3, r3, #0, #5
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
    f4f6:	3b04      	subs	r3, #4
    f4f8:	b2db      	uxtb	r3, r3
    f4fa:	2b0a      	cmp	r3, #10
    f4fc:	d859      	bhi.n	f5b2 <lv_img_decoder_built_in_info+0xd2>

        header->w  = ((lv_img_dsc_t *)src)->header.w;
    f4fe:	6823      	ldr	r3, [r4, #0]
    f500:	f3c3 238a 	ubfx	r3, r3, #10, #11
    f504:	682a      	ldr	r2, [r5, #0]
    f506:	f363 2294 	bfi	r2, r3, #10, #11
    f50a:	602a      	str	r2, [r5, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
    f50c:	8863      	ldrh	r3, [r4, #2]
    f50e:	f3c3 134a 	ubfx	r3, r3, #5, #11
    f512:	886a      	ldrh	r2, [r5, #2]
    f514:	f363 124f 	bfi	r2, r3, #5, #11
    f518:	806a      	strh	r2, [r5, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
    f51a:	7822      	ldrb	r2, [r4, #0]
    f51c:	782b      	ldrb	r3, [r5, #0]
    f51e:	f362 0304 	bfi	r3, r2, #0, #5
    f522:	702b      	strb	r3, [r5, #0]
    }
    else {
        LV_LOG_WARN("Image get info found unknown src type");
        return LV_RES_INV;
    }
    return LV_RES_OK;
    f524:	2001      	movs	r0, #1
    f526:	e00d      	b.n	f544 <lv_img_decoder_built_in_info+0x64>
    else if(src_type == LV_IMG_SRC_FILE) {
    f528:	2801      	cmp	r0, #1
    f52a:	d00d      	beq.n	f548 <lv_img_decoder_built_in_info+0x68>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
    f52c:	2802      	cmp	r0, #2
    f52e:	d032      	beq.n	f596 <lv_img_decoder_built_in_info+0xb6>
        LV_LOG_WARN("Image get info found unknown src type");
    f530:	4b22      	ldr	r3, [pc, #136]	; (f5bc <lv_img_decoder_built_in_info+0xdc>)
    f532:	9300      	str	r3, [sp, #0]
    f534:	4b22      	ldr	r3, [pc, #136]	; (f5c0 <lv_img_decoder_built_in_info+0xe0>)
    f536:	f44f 729a 	mov.w	r2, #308	; 0x134
    f53a:	4922      	ldr	r1, [pc, #136]	; (f5c4 <lv_img_decoder_built_in_info+0xe4>)
    f53c:	2002      	movs	r0, #2
    f53e:	4c22      	ldr	r4, [pc, #136]	; (f5c8 <lv_img_decoder_built_in_info+0xe8>)
    f540:	47a0      	blx	r4
        return LV_RES_INV;
    f542:	2000      	movs	r0, #0
}
    f544:	b007      	add	sp, #28
    f546:	bd30      	pop	{r4, r5, pc}
        res = lv_fs_open(&file, src, LV_FS_MODE_RD);
    f548:	2202      	movs	r2, #2
    f54a:	4621      	mov	r1, r4
    f54c:	a804      	add	r0, sp, #16
    f54e:	4b1f      	ldr	r3, [pc, #124]	; (f5cc <lv_img_decoder_built_in_info+0xec>)
    f550:	4798      	blx	r3
        if(res == LV_FS_RES_OK) {
    f552:	b138      	cbz	r0, f564 <lv_img_decoder_built_in_info+0x84>
        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
    f554:	782b      	ldrb	r3, [r5, #0]
    f556:	331c      	adds	r3, #28
    f558:	f003 031f 	and.w	r3, r3, #31
    f55c:	2b0a      	cmp	r3, #10
    f55e:	d818      	bhi.n	f592 <lv_img_decoder_built_in_info+0xb2>
    return LV_RES_OK;
    f560:	2001      	movs	r0, #1
    f562:	e7ef      	b.n	f544 <lv_img_decoder_built_in_info+0x64>
            res = lv_fs_read(&file, header, sizeof(lv_img_header_t), &rn);
    f564:	ab03      	add	r3, sp, #12
    f566:	2204      	movs	r2, #4
    f568:	4629      	mov	r1, r5
    f56a:	a804      	add	r0, sp, #16
    f56c:	4c18      	ldr	r4, [pc, #96]	; (f5d0 <lv_img_decoder_built_in_info+0xf0>)
    f56e:	47a0      	blx	r4
    f570:	4604      	mov	r4, r0
            lv_fs_close(&file);
    f572:	a804      	add	r0, sp, #16
    f574:	4b17      	ldr	r3, [pc, #92]	; (f5d4 <lv_img_decoder_built_in_info+0xf4>)
    f576:	4798      	blx	r3
            if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
    f578:	b914      	cbnz	r4, f580 <lv_img_decoder_built_in_info+0xa0>
    f57a:	9b03      	ldr	r3, [sp, #12]
    f57c:	2b04      	cmp	r3, #4
    f57e:	d0e9      	beq.n	f554 <lv_img_decoder_built_in_info+0x74>
                LV_LOG_WARN("Image get info get read file header");
    f580:	4b15      	ldr	r3, [pc, #84]	; (f5d8 <lv_img_decoder_built_in_info+0xf8>)
    f582:	9300      	str	r3, [sp, #0]
    f584:	4b0e      	ldr	r3, [pc, #56]	; (f5c0 <lv_img_decoder_built_in_info+0xe0>)
    f586:	f240 1221 	movw	r2, #289	; 0x121
    f58a:	490e      	ldr	r1, [pc, #56]	; (f5c4 <lv_img_decoder_built_in_info+0xe4>)
    f58c:	2002      	movs	r0, #2
    f58e:	4c0e      	ldr	r4, [pc, #56]	; (f5c8 <lv_img_decoder_built_in_info+0xe8>)
    f590:	47a0      	blx	r4
                return LV_RES_INV;
    f592:	2000      	movs	r0, #0
    f594:	e7d6      	b.n	f544 <lv_img_decoder_built_in_info+0x64>
        header->w = 1;
    f596:	682b      	ldr	r3, [r5, #0]
    f598:	2001      	movs	r0, #1
    f59a:	f360 2394 	bfi	r3, r0, #10, #11
    f59e:	602b      	str	r3, [r5, #0]
        header->h = 1;
    f5a0:	0c1a      	lsrs	r2, r3, #16
    f5a2:	f360 124f 	bfi	r2, r0, #5, #11
    f5a6:	806a      	strh	r2, [r5, #2]
        header->cf = LV_IMG_CF_ALPHA_1BIT;
    f5a8:	220b      	movs	r2, #11
    f5aa:	f362 0304 	bfi	r3, r2, #0, #5
    f5ae:	702b      	strb	r3, [r5, #0]
    f5b0:	e7c8      	b.n	f544 <lv_img_decoder_built_in_info+0x64>
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
    f5b2:	2000      	movs	r0, #0
    f5b4:	e7c6      	b.n	f544 <lv_img_decoder_built_in_info+0x64>
    f5b6:	bf00      	nop
    f5b8:	0000995d 	.word	0x0000995d
    f5bc:	00025360 	.word	0x00025360
    f5c0:	00025240 	.word	0x00025240
    f5c4:	0002530c 	.word	0x0002530c
    f5c8:	00012251 	.word	0x00012251
    f5cc:	00011d41 	.word	0x00011d41
    f5d0:	00011cb1 	.word	0x00011cb1
    f5d4:	00011c81 	.word	0x00011c81
    f5d8:	0002533c 	.word	0x0002533c

0000f5dc <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
    f5dc:	b538      	push	{r3, r4, r5, lr}
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    f5de:	69cc      	ldr	r4, [r1, #28]
    if(user_data) {
    f5e0:	b1a4      	cbz	r4, f60c <lv_img_decoder_built_in_close+0x30>
    f5e2:	460d      	mov	r5, r1
#if LV_USE_FILESYSTEM
        if(user_data->f) {
    f5e4:	6820      	ldr	r0, [r4, #0]
    f5e6:	b120      	cbz	r0, f5f2 <lv_img_decoder_built_in_close+0x16>
            lv_fs_close(user_data->f);
    f5e8:	4b09      	ldr	r3, [pc, #36]	; (f610 <lv_img_decoder_built_in_close+0x34>)
    f5ea:	4798      	blx	r3
            lv_mem_free(user_data->f);
    f5ec:	6820      	ldr	r0, [r4, #0]
    f5ee:	4b09      	ldr	r3, [pc, #36]	; (f614 <lv_img_decoder_built_in_close+0x38>)
    f5f0:	4798      	blx	r3
        }
#endif
        if(user_data->palette) lv_mem_free(user_data->palette);
    f5f2:	6860      	ldr	r0, [r4, #4]
    f5f4:	b108      	cbz	r0, f5fa <lv_img_decoder_built_in_close+0x1e>
    f5f6:	4b07      	ldr	r3, [pc, #28]	; (f614 <lv_img_decoder_built_in_close+0x38>)
    f5f8:	4798      	blx	r3
        if(user_data->opa) lv_mem_free(user_data->opa);
    f5fa:	68a0      	ldr	r0, [r4, #8]
    f5fc:	b108      	cbz	r0, f602 <lv_img_decoder_built_in_close+0x26>
    f5fe:	4b05      	ldr	r3, [pc, #20]	; (f614 <lv_img_decoder_built_in_close+0x38>)
    f600:	4798      	blx	r3

        lv_mem_free(user_data);
    f602:	4620      	mov	r0, r4
    f604:	4b03      	ldr	r3, [pc, #12]	; (f614 <lv_img_decoder_built_in_close+0x38>)
    f606:	4798      	blx	r3

        dsc->user_data = NULL;
    f608:	2300      	movs	r3, #0
    f60a:	61eb      	str	r3, [r5, #28]
    f60c:	bd38      	pop	{r3, r4, r5, pc}
    f60e:	bf00      	nop
    f610:	00011c81 	.word	0x00011c81
    f614:	000124b9 	.word	0x000124b9

0000f618 <lv_img_decoder_built_in_open>:
{
    f618:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f61c:	b085      	sub	sp, #20
    f61e:	4605      	mov	r5, r0
    f620:	460c      	mov	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
    f622:	7a8b      	ldrb	r3, [r1, #10]
    f624:	2b01      	cmp	r3, #1
    f626:	d016      	beq.n	f656 <lv_img_decoder_built_in_open+0x3e>
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
    f628:	2b00      	cmp	r3, #0
    f62a:	f040 81aa 	bne.w	f982 <lv_img_decoder_built_in_open+0x36a>
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
    f62e:	684b      	ldr	r3, [r1, #4]
    f630:	689b      	ldr	r3, [r3, #8]
    f632:	2b00      	cmp	r3, #0
    f634:	f000 81a3 	beq.w	f97e <lv_img_decoder_built_in_open+0x366>
    lv_img_cf_t cf = dsc->header.cf;
    f638:	7b08      	ldrb	r0, [r1, #12]
    f63a:	f000 001f 	and.w	r0, r0, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
    f63e:	1f03      	subs	r3, r0, #4
    f640:	b2db      	uxtb	r3, r3
    f642:	2b02      	cmp	r3, #2
    f644:	f200 8085 	bhi.w	f752 <lv_img_decoder_built_in_open+0x13a>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
    f648:	6863      	ldr	r3, [r4, #4]
    f64a:	689b      	ldr	r3, [r3, #8]
    f64c:	6123      	str	r3, [r4, #16]
            return LV_RES_OK;
    f64e:	2001      	movs	r0, #1
}
    f650:	b005      	add	sp, #20
    f652:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
    f656:	6848      	ldr	r0, [r1, #4]
    f658:	4b96      	ldr	r3, [pc, #600]	; (f8b4 <lv_img_decoder_built_in_open+0x29c>)
    f65a:	4798      	blx	r3
    f65c:	4996      	ldr	r1, [pc, #600]	; (f8b8 <lv_img_decoder_built_in_open+0x2a0>)
    f65e:	4b97      	ldr	r3, [pc, #604]	; (f8bc <lv_img_decoder_built_in_open+0x2a4>)
    f660:	4798      	blx	r3
    f662:	2800      	cmp	r0, #0
    f664:	d12a      	bne.n	f6bc <lv_img_decoder_built_in_open+0xa4>
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
    f666:	2202      	movs	r2, #2
    f668:	6861      	ldr	r1, [r4, #4]
    f66a:	a802      	add	r0, sp, #8
    f66c:	4b94      	ldr	r3, [pc, #592]	; (f8c0 <lv_img_decoder_built_in_open+0x2a8>)
    f66e:	4798      	blx	r3
        if(res != LV_FS_RES_OK) {
    f670:	b9d8      	cbnz	r0, f6aa <lv_img_decoder_built_in_open+0x92>
        if(dsc->user_data == NULL) {
    f672:	69e3      	ldr	r3, [r4, #28]
    f674:	b323      	cbz	r3, f6c0 <lv_img_decoder_built_in_open+0xa8>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    f676:	69e6      	ldr	r6, [r4, #28]
        user_data->f = lv_mem_alloc(sizeof(f));
    f678:	2008      	movs	r0, #8
    f67a:	4b92      	ldr	r3, [pc, #584]	; (f8c4 <lv_img_decoder_built_in_open+0x2ac>)
    f67c:	4798      	blx	r3
    f67e:	6030      	str	r0, [r6, #0]
        LV_ASSERT_MEM(user_data->f);
    f680:	4b91      	ldr	r3, [pc, #580]	; (f8c8 <lv_img_decoder_built_in_open+0x2b0>)
    f682:	4798      	blx	r3
    f684:	2800      	cmp	r0, #0
    f686:	d040      	beq.n	f70a <lv_img_decoder_built_in_open+0xf2>
        if(user_data->f == NULL) {
    f688:	6833      	ldr	r3, [r6, #0]
    f68a:	2b00      	cmp	r3, #0
    f68c:	d14b      	bne.n	f726 <lv_img_decoder_built_in_open+0x10e>
            LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
    f68e:	4b8f      	ldr	r3, [pc, #572]	; (f8cc <lv_img_decoder_built_in_open+0x2b4>)
    f690:	9300      	str	r3, [sp, #0]
    f692:	4b8f      	ldr	r3, [pc, #572]	; (f8d0 <lv_img_decoder_built_in_open+0x2b8>)
    f694:	f240 125f 	movw	r2, #351	; 0x15f
    f698:	498e      	ldr	r1, [pc, #568]	; (f8d4 <lv_img_decoder_built_in_open+0x2bc>)
    f69a:	2003      	movs	r0, #3
    f69c:	4e8e      	ldr	r6, [pc, #568]	; (f8d8 <lv_img_decoder_built_in_open+0x2c0>)
    f69e:	47b0      	blx	r6
            lv_img_decoder_built_in_close(decoder, dsc);
    f6a0:	4621      	mov	r1, r4
    f6a2:	4628      	mov	r0, r5
    f6a4:	4b8d      	ldr	r3, [pc, #564]	; (f8dc <lv_img_decoder_built_in_open+0x2c4>)
    f6a6:	4798      	blx	r3
            return LV_RES_INV;
    f6a8:	e008      	b.n	f6bc <lv_img_decoder_built_in_open+0xa4>
            LV_LOG_WARN("Built-in image decoder can't open the file");
    f6aa:	4b8d      	ldr	r3, [pc, #564]	; (f8e0 <lv_img_decoder_built_in_open+0x2c8>)
    f6ac:	9300      	str	r3, [sp, #0]
    f6ae:	4b88      	ldr	r3, [pc, #544]	; (f8d0 <lv_img_decoder_built_in_open+0x2b8>)
    f6b0:	f44f 72a6 	mov.w	r2, #332	; 0x14c
    f6b4:	4987      	ldr	r1, [pc, #540]	; (f8d4 <lv_img_decoder_built_in_open+0x2bc>)
    f6b6:	2002      	movs	r0, #2
    f6b8:	4c87      	ldr	r4, [pc, #540]	; (f8d8 <lv_img_decoder_built_in_open+0x2c0>)
    f6ba:	47a0      	blx	r4
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
    f6bc:	2000      	movs	r0, #0
    f6be:	e7c7      	b.n	f650 <lv_img_decoder_built_in_open+0x38>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
    f6c0:	200c      	movs	r0, #12
    f6c2:	4b80      	ldr	r3, [pc, #512]	; (f8c4 <lv_img_decoder_built_in_open+0x2ac>)
    f6c4:	4798      	blx	r3
    f6c6:	61e0      	str	r0, [r4, #28]
            LV_ASSERT_MEM(dsc->user_data);
    f6c8:	4b7f      	ldr	r3, [pc, #508]	; (f8c8 <lv_img_decoder_built_in_open+0x2b0>)
    f6ca:	4798      	blx	r3
    f6cc:	b968      	cbnz	r0, f6ea <lv_img_decoder_built_in_open+0xd2>
    f6ce:	4b80      	ldr	r3, [pc, #512]	; (f8d0 <lv_img_decoder_built_in_open+0x2b8>)
    f6d0:	9300      	str	r3, [sp, #0]
    f6d2:	f240 1253 	movw	r2, #339	; 0x153
    f6d6:	497f      	ldr	r1, [pc, #508]	; (f8d4 <lv_img_decoder_built_in_open+0x2bc>)
    f6d8:	2003      	movs	r0, #3
    f6da:	4d7f      	ldr	r5, [pc, #508]	; (f8d8 <lv_img_decoder_built_in_open+0x2c0>)
    f6dc:	47a8      	blx	r5
    f6de:	69e2      	ldr	r2, [r4, #28]
    f6e0:	2300      	movs	r3, #0
    f6e2:	4880      	ldr	r0, [pc, #512]	; (f8e4 <lv_img_decoder_built_in_open+0x2cc>)
    f6e4:	4980      	ldr	r1, [pc, #512]	; (f8e8 <lv_img_decoder_built_in_open+0x2d0>)
    f6e6:	4788      	blx	r1
    f6e8:	e7fe      	b.n	f6e8 <lv_img_decoder_built_in_open+0xd0>
            if(dsc->user_data == NULL) {
    f6ea:	69e0      	ldr	r0, [r4, #28]
    f6ec:	b948      	cbnz	r0, f702 <lv_img_decoder_built_in_open+0xea>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
    f6ee:	4b77      	ldr	r3, [pc, #476]	; (f8cc <lv_img_decoder_built_in_open+0x2b4>)
    f6f0:	9300      	str	r3, [sp, #0]
    f6f2:	4b77      	ldr	r3, [pc, #476]	; (f8d0 <lv_img_decoder_built_in_open+0x2b8>)
    f6f4:	f240 1255 	movw	r2, #341	; 0x155
    f6f8:	4976      	ldr	r1, [pc, #472]	; (f8d4 <lv_img_decoder_built_in_open+0x2bc>)
    f6fa:	2003      	movs	r0, #3
    f6fc:	4c76      	ldr	r4, [pc, #472]	; (f8d8 <lv_img_decoder_built_in_open+0x2c0>)
    f6fe:	47a0      	blx	r4
                return LV_RES_INV;
    f700:	e7dc      	b.n	f6bc <lv_img_decoder_built_in_open+0xa4>
            _lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
    f702:	210c      	movs	r1, #12
    f704:	4b79      	ldr	r3, [pc, #484]	; (f8ec <lv_img_decoder_built_in_open+0x2d4>)
    f706:	4798      	blx	r3
    f708:	e7b5      	b.n	f676 <lv_img_decoder_built_in_open+0x5e>
        LV_ASSERT_MEM(user_data->f);
    f70a:	4b71      	ldr	r3, [pc, #452]	; (f8d0 <lv_img_decoder_built_in_open+0x2b8>)
    f70c:	9300      	str	r3, [sp, #0]
    f70e:	f240 125d 	movw	r2, #349	; 0x15d
    f712:	4970      	ldr	r1, [pc, #448]	; (f8d4 <lv_img_decoder_built_in_open+0x2bc>)
    f714:	2003      	movs	r0, #3
    f716:	4c70      	ldr	r4, [pc, #448]	; (f8d8 <lv_img_decoder_built_in_open+0x2c0>)
    f718:	47a0      	blx	r4
    f71a:	6832      	ldr	r2, [r6, #0]
    f71c:	2300      	movs	r3, #0
    f71e:	4871      	ldr	r0, [pc, #452]	; (f8e4 <lv_img_decoder_built_in_open+0x2cc>)
    f720:	4971      	ldr	r1, [pc, #452]	; (f8e8 <lv_img_decoder_built_in_open+0x2d0>)
    f722:	4788      	blx	r1
    f724:	e7fe      	b.n	f724 <lv_img_decoder_built_in_open+0x10c>
    f726:	f10d 0207 	add.w	r2, sp, #7
    f72a:	f103 0108 	add.w	r1, r3, #8
    f72e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    f732:	f803 0b01 	strb.w	r0, [r3], #1
    while(len) {
    f736:	428b      	cmp	r3, r1
    f738:	d1f9      	bne.n	f72e <lv_img_decoder_built_in_open+0x116>
    lv_img_cf_t cf = dsc->header.cf;
    f73a:	7b20      	ldrb	r0, [r4, #12]
    f73c:	f000 001f 	and.w	r0, r0, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
    f740:	1f03      	subs	r3, r0, #4
    f742:	b2db      	uxtb	r3, r3
    f744:	2b02      	cmp	r3, #2
    f746:	d804      	bhi.n	f752 <lv_img_decoder_built_in_open+0x13a>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
    f748:	7aa3      	ldrb	r3, [r4, #10]
    f74a:	2b00      	cmp	r3, #0
    f74c:	f43f af7c 	beq.w	f648 <lv_img_decoder_built_in_open+0x30>
    f750:	e11f      	b.n	f992 <lv_img_decoder_built_in_open+0x37a>
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
    f752:	1fc3      	subs	r3, r0, #7
    f754:	b2db      	uxtb	r3, r3
    f756:	2b03      	cmp	r3, #3
    f758:	d909      	bls.n	f76e <lv_img_decoder_built_in_open+0x156>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
    f75a:	f1a0 030b 	sub.w	r3, r0, #11
    f75e:	b2db      	uxtb	r3, r3
    f760:	2b03      	cmp	r3, #3
    f762:	f200 80fd 	bhi.w	f960 <lv_img_decoder_built_in_open+0x348>
        dsc->img_data = NULL;
    f766:	2300      	movs	r3, #0
    f768:	6123      	str	r3, [r4, #16]
        return LV_RES_OK; /*Nothing to process*/
    f76a:	2001      	movs	r0, #1
    f76c:	e770      	b.n	f650 <lv_img_decoder_built_in_open+0x38>
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
    f76e:	4b60      	ldr	r3, [pc, #384]	; (f8f0 <lv_img_decoder_built_in_open+0x2d8>)
    f770:	4798      	blx	r3
    f772:	4607      	mov	r7, r0
        if(dsc->user_data == NULL) {
    f774:	69e3      	ldr	r3, [r4, #28]
    f776:	b1bb      	cbz	r3, f7a8 <lv_img_decoder_built_in_open+0x190>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    f778:	69e6      	ldr	r6, [r4, #28]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
    f77a:	2002      	movs	r0, #2
    f77c:	40b8      	lsls	r0, r7
    f77e:	4b51      	ldr	r3, [pc, #324]	; (f8c4 <lv_img_decoder_built_in_open+0x2ac>)
    f780:	4798      	blx	r3
    f782:	6070      	str	r0, [r6, #4]
        LV_ASSERT_MEM(user_data->palette);
    f784:	4b50      	ldr	r3, [pc, #320]	; (f8c8 <lv_img_decoder_built_in_open+0x2b0>)
    f786:	4798      	blx	r3
    f788:	2800      	cmp	r0, #0
    f78a:	d137      	bne.n	f7fc <lv_img_decoder_built_in_open+0x1e4>
    f78c:	4b50      	ldr	r3, [pc, #320]	; (f8d0 <lv_img_decoder_built_in_open+0x2b8>)
    f78e:	9300      	str	r3, [sp, #0]
    f790:	f240 1297 	movw	r2, #407	; 0x197
    f794:	494f      	ldr	r1, [pc, #316]	; (f8d4 <lv_img_decoder_built_in_open+0x2bc>)
    f796:	2003      	movs	r0, #3
    f798:	4c4f      	ldr	r4, [pc, #316]	; (f8d8 <lv_img_decoder_built_in_open+0x2c0>)
    f79a:	47a0      	blx	r4
    f79c:	6872      	ldr	r2, [r6, #4]
    f79e:	2300      	movs	r3, #0
    f7a0:	4850      	ldr	r0, [pc, #320]	; (f8e4 <lv_img_decoder_built_in_open+0x2cc>)
    f7a2:	4951      	ldr	r1, [pc, #324]	; (f8e8 <lv_img_decoder_built_in_open+0x2d0>)
    f7a4:	4788      	blx	r1
    f7a6:	e7fe      	b.n	f7a6 <lv_img_decoder_built_in_open+0x18e>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
    f7a8:	200c      	movs	r0, #12
    f7aa:	4b46      	ldr	r3, [pc, #280]	; (f8c4 <lv_img_decoder_built_in_open+0x2ac>)
    f7ac:	4798      	blx	r3
    f7ae:	61e0      	str	r0, [r4, #28]
            LV_ASSERT_MEM(dsc->user_data);
    f7b0:	4b45      	ldr	r3, [pc, #276]	; (f8c8 <lv_img_decoder_built_in_open+0x2b0>)
    f7b2:	4798      	blx	r3
    f7b4:	b968      	cbnz	r0, f7d2 <lv_img_decoder_built_in_open+0x1ba>
    f7b6:	4b46      	ldr	r3, [pc, #280]	; (f8d0 <lv_img_decoder_built_in_open+0x2b8>)
    f7b8:	9300      	str	r3, [sp, #0]
    f7ba:	f44f 72c6 	mov.w	r2, #396	; 0x18c
    f7be:	4945      	ldr	r1, [pc, #276]	; (f8d4 <lv_img_decoder_built_in_open+0x2bc>)
    f7c0:	2003      	movs	r0, #3
    f7c2:	4d45      	ldr	r5, [pc, #276]	; (f8d8 <lv_img_decoder_built_in_open+0x2c0>)
    f7c4:	47a8      	blx	r5
    f7c6:	69e2      	ldr	r2, [r4, #28]
    f7c8:	2300      	movs	r3, #0
    f7ca:	4846      	ldr	r0, [pc, #280]	; (f8e4 <lv_img_decoder_built_in_open+0x2cc>)
    f7cc:	4946      	ldr	r1, [pc, #280]	; (f8e8 <lv_img_decoder_built_in_open+0x2d0>)
    f7ce:	4788      	blx	r1
    f7d0:	e7fe      	b.n	f7d0 <lv_img_decoder_built_in_open+0x1b8>
            if(dsc->user_data == NULL) {
    f7d2:	69e0      	ldr	r0, [r4, #28]
    f7d4:	b970      	cbnz	r0, f7f4 <lv_img_decoder_built_in_open+0x1dc>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
    f7d6:	4b3d      	ldr	r3, [pc, #244]	; (f8cc <lv_img_decoder_built_in_open+0x2b4>)
    f7d8:	9300      	str	r3, [sp, #0]
    f7da:	4b3d      	ldr	r3, [pc, #244]	; (f8d0 <lv_img_decoder_built_in_open+0x2b8>)
    f7dc:	f44f 72c7 	mov.w	r2, #398	; 0x18e
    f7e0:	493c      	ldr	r1, [pc, #240]	; (f8d4 <lv_img_decoder_built_in_open+0x2bc>)
    f7e2:	2003      	movs	r0, #3
    f7e4:	4e3c      	ldr	r6, [pc, #240]	; (f8d8 <lv_img_decoder_built_in_open+0x2c0>)
    f7e6:	47b0      	blx	r6
                lv_img_decoder_built_in_close(decoder, dsc);
    f7e8:	4621      	mov	r1, r4
    f7ea:	4628      	mov	r0, r5
    f7ec:	4b3b      	ldr	r3, [pc, #236]	; (f8dc <lv_img_decoder_built_in_open+0x2c4>)
    f7ee:	4798      	blx	r3
                return LV_RES_INV;
    f7f0:	2000      	movs	r0, #0
    f7f2:	e72d      	b.n	f650 <lv_img_decoder_built_in_open+0x38>
            _lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
    f7f4:	210c      	movs	r1, #12
    f7f6:	4b3d      	ldr	r3, [pc, #244]	; (f8ec <lv_img_decoder_built_in_open+0x2d4>)
    f7f8:	4798      	blx	r3
    f7fa:	e7bd      	b.n	f778 <lv_img_decoder_built_in_open+0x160>
        uint32_t palette_size = 1 << px_size;
    f7fc:	2301      	movs	r3, #1
    f7fe:	fa03 f707 	lsl.w	r7, r3, r7
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
    f802:	4638      	mov	r0, r7
    f804:	4b2f      	ldr	r3, [pc, #188]	; (f8c4 <lv_img_decoder_built_in_open+0x2ac>)
    f806:	4798      	blx	r3
    f808:	60b0      	str	r0, [r6, #8]
        LV_ASSERT_MEM(user_data->opa);
    f80a:	4b2f      	ldr	r3, [pc, #188]	; (f8c8 <lv_img_decoder_built_in_open+0x2b0>)
    f80c:	4798      	blx	r3
    f80e:	2800      	cmp	r0, #0
    f810:	d032      	beq.n	f878 <lv_img_decoder_built_in_open+0x260>
        if(user_data->palette == NULL || user_data->opa == NULL) {
    f812:	6873      	ldr	r3, [r6, #4]
    f814:	2b00      	cmp	r3, #0
    f816:	d03d      	beq.n	f894 <lv_img_decoder_built_in_open+0x27c>
    f818:	68b3      	ldr	r3, [r6, #8]
    f81a:	2b00      	cmp	r3, #0
    f81c:	d03a      	beq.n	f894 <lv_img_decoder_built_in_open+0x27c>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
    f81e:	7aa3      	ldrb	r3, [r4, #10]
    f820:	2b01      	cmp	r3, #1
    f822:	d067      	beq.n	f8f4 <lv_img_decoder_built_in_open+0x2dc>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
    f824:	6863      	ldr	r3, [r4, #4]
    f826:	689a      	ldr	r2, [r3, #8]
            for(i = 0; i < palette_size; i++) {
    f828:	2f00      	cmp	r7, #0
    f82a:	f000 8095 	beq.w	f958 <lv_img_decoder_built_in_open+0x340>
    f82e:	2300      	movs	r3, #0
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
    f830:	6870      	ldr	r0, [r6, #4]
    f832:	eb00 0c43 	add.w	ip, r0, r3, lsl #1
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
    f836:	f892 e001 	ldrb.w	lr, [r2, #1]
    f83a:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
    f83e:	7895      	ldrb	r5, [r2, #2]
    f840:	08ed      	lsrs	r5, r5, #3
    f842:	7811      	ldrb	r1, [r2, #0]
    f844:	08c9      	lsrs	r1, r1, #3
    f846:	f810 8013 	ldrb.w	r8, [r0, r3, lsl #1]
    f84a:	f361 0804 	bfi	r8, r1, #0, #5
    f84e:	f800 8013 	strb.w	r8, [r0, r3, lsl #1]
    f852:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
    f856:	f36e 114a 	bfi	r1, lr, #5, #6
    f85a:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
    f85e:	0a09      	lsrs	r1, r1, #8
    f860:	f365 01c7 	bfi	r1, r5, #3, #5
    f864:	f88c 1001 	strb.w	r1, [ip, #1]
                user_data->opa[i]     = palette_p[i].ch.alpha;
    f868:	78d0      	ldrb	r0, [r2, #3]
    f86a:	68b1      	ldr	r1, [r6, #8]
    f86c:	54c8      	strb	r0, [r1, r3]
            for(i = 0; i < palette_size; i++) {
    f86e:	3301      	adds	r3, #1
    f870:	3204      	adds	r2, #4
    f872:	429f      	cmp	r7, r3
    f874:	d1dc      	bne.n	f830 <lv_img_decoder_built_in_open+0x218>
    f876:	e06f      	b.n	f958 <lv_img_decoder_built_in_open+0x340>
        LV_ASSERT_MEM(user_data->opa);
    f878:	4b15      	ldr	r3, [pc, #84]	; (f8d0 <lv_img_decoder_built_in_open+0x2b8>)
    f87a:	9300      	str	r3, [sp, #0]
    f87c:	f240 1299 	movw	r2, #409	; 0x199
    f880:	4914      	ldr	r1, [pc, #80]	; (f8d4 <lv_img_decoder_built_in_open+0x2bc>)
    f882:	2003      	movs	r0, #3
    f884:	4c14      	ldr	r4, [pc, #80]	; (f8d8 <lv_img_decoder_built_in_open+0x2c0>)
    f886:	47a0      	blx	r4
    f888:	68b2      	ldr	r2, [r6, #8]
    f88a:	2300      	movs	r3, #0
    f88c:	4815      	ldr	r0, [pc, #84]	; (f8e4 <lv_img_decoder_built_in_open+0x2cc>)
    f88e:	4916      	ldr	r1, [pc, #88]	; (f8e8 <lv_img_decoder_built_in_open+0x2d0>)
    f890:	4788      	blx	r1
    f892:	e7fe      	b.n	f892 <lv_img_decoder_built_in_open+0x27a>
            LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
    f894:	4b0d      	ldr	r3, [pc, #52]	; (f8cc <lv_img_decoder_built_in_open+0x2b4>)
    f896:	9300      	str	r3, [sp, #0]
    f898:	4b0d      	ldr	r3, [pc, #52]	; (f8d0 <lv_img_decoder_built_in_open+0x2b8>)
    f89a:	f240 129b 	movw	r2, #411	; 0x19b
    f89e:	490d      	ldr	r1, [pc, #52]	; (f8d4 <lv_img_decoder_built_in_open+0x2bc>)
    f8a0:	2003      	movs	r0, #3
    f8a2:	4e0d      	ldr	r6, [pc, #52]	; (f8d8 <lv_img_decoder_built_in_open+0x2c0>)
    f8a4:	47b0      	blx	r6
            lv_img_decoder_built_in_close(decoder, dsc);
    f8a6:	4621      	mov	r1, r4
    f8a8:	4628      	mov	r0, r5
    f8aa:	4b0c      	ldr	r3, [pc, #48]	; (f8dc <lv_img_decoder_built_in_open+0x2c4>)
    f8ac:	4798      	blx	r3
            return LV_RES_INV;
    f8ae:	2000      	movs	r0, #0
    f8b0:	e6ce      	b.n	f650 <lv_img_decoder_built_in_open+0x38>
    f8b2:	bf00      	nop
    f8b4:	00011e15 	.word	0x00011e15
    f8b8:	00025388 	.word	0x00025388
    f8bc:	0001b4ef 	.word	0x0001b4ef
    f8c0:	00011d41 	.word	0x00011d41
    f8c4:	000123d1 	.word	0x000123d1
    f8c8:	000022a5 	.word	0x000022a5
    f8cc:	000253b8 	.word	0x000253b8
    f8d0:	00025260 	.word	0x00025260
    f8d4:	0002530c 	.word	0x0002530c
    f8d8:	00012251 	.word	0x00012251
    f8dc:	0000f5dd 	.word	0x0000f5dd
    f8e0:	0002538c 	.word	0x0002538c
    f8e4:	00023fcc 	.word	0x00023fcc
    f8e8:	000022ad 	.word	0x000022ad
    f8ec:	00012b2b 	.word	0x00012b2b
    f8f0:	00009675 	.word	0x00009675
            lv_fs_seek(user_data->f, 4); /*Skip the header*/
    f8f4:	2104      	movs	r1, #4
    f8f6:	6830      	ldr	r0, [r6, #0]
    f8f8:	4b28      	ldr	r3, [pc, #160]	; (f99c <lv_img_decoder_built_in_open+0x384>)
    f8fa:	4798      	blx	r3
            for(i = 0; i < palette_size; i++) {
    f8fc:	b367      	cbz	r7, f958 <lv_img_decoder_built_in_open+0x340>
    f8fe:	2500      	movs	r5, #0
                lv_fs_read(user_data->f, &cur_color, sizeof(lv_color32_t), NULL);
    f900:	46a9      	mov	r9, r5
    f902:	f8df 80b0 	ldr.w	r8, [pc, #176]	; f9b4 <lv_img_decoder_built_in_open+0x39c>
    f906:	464b      	mov	r3, r9
    f908:	2204      	movs	r2, #4
    f90a:	a902      	add	r1, sp, #8
    f90c:	6830      	ldr	r0, [r6, #0]
    f90e:	47c0      	blx	r8
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
    f910:	6872      	ldr	r2, [r6, #4]
    f912:	eb02 0e45 	add.w	lr, r2, r5, lsl #1
    f916:	f89d 0009 	ldrb.w	r0, [sp, #9]
    f91a:	0880      	lsrs	r0, r0, #2
    f91c:	f89d 100a 	ldrb.w	r1, [sp, #10]
    f920:	08c9      	lsrs	r1, r1, #3
    f922:	f89d 3008 	ldrb.w	r3, [sp, #8]
    f926:	08db      	lsrs	r3, r3, #3
    f928:	f812 c015 	ldrb.w	ip, [r2, r5, lsl #1]
    f92c:	f363 0c04 	bfi	ip, r3, #0, #5
    f930:	f802 c015 	strb.w	ip, [r2, r5, lsl #1]
    f934:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
    f938:	f360 134a 	bfi	r3, r0, #5, #6
    f93c:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
    f940:	0a1b      	lsrs	r3, r3, #8
    f942:	f361 03c7 	bfi	r3, r1, #3, #5
    f946:	f88e 3001 	strb.w	r3, [lr, #1]
                user_data->opa[i]     = cur_color.ch.alpha;
    f94a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    f94e:	68b3      	ldr	r3, [r6, #8]
    f950:	555a      	strb	r2, [r3, r5]
            for(i = 0; i < palette_size; i++) {
    f952:	3501      	adds	r5, #1
    f954:	42af      	cmp	r7, r5
    f956:	d1d6      	bne.n	f906 <lv_img_decoder_built_in_open+0x2ee>
        dsc->img_data = NULL;
    f958:	2300      	movs	r3, #0
    f95a:	6123      	str	r3, [r4, #16]
        return LV_RES_OK;
    f95c:	2001      	movs	r0, #1
    f95e:	e677      	b.n	f650 <lv_img_decoder_built_in_open+0x38>
        lv_img_decoder_built_in_close(decoder, dsc);
    f960:	4621      	mov	r1, r4
    f962:	4628      	mov	r0, r5
    f964:	4b0e      	ldr	r3, [pc, #56]	; (f9a0 <lv_img_decoder_built_in_open+0x388>)
    f966:	4798      	blx	r3
        LV_LOG_WARN("Image decoder open: unknown color format")
    f968:	4b0e      	ldr	r3, [pc, #56]	; (f9a4 <lv_img_decoder_built_in_open+0x38c>)
    f96a:	9300      	str	r3, [sp, #0]
    f96c:	4b0e      	ldr	r3, [pc, #56]	; (f9a8 <lv_img_decoder_built_in_open+0x390>)
    f96e:	f240 12d3 	movw	r2, #467	; 0x1d3
    f972:	490e      	ldr	r1, [pc, #56]	; (f9ac <lv_img_decoder_built_in_open+0x394>)
    f974:	2002      	movs	r0, #2
    f976:	4c0e      	ldr	r4, [pc, #56]	; (f9b0 <lv_img_decoder_built_in_open+0x398>)
    f978:	47a0      	blx	r4
        return LV_RES_INV;
    f97a:	2000      	movs	r0, #0
    f97c:	e668      	b.n	f650 <lv_img_decoder_built_in_open+0x38>
            return LV_RES_INV;
    f97e:	2000      	movs	r0, #0
    f980:	e666      	b.n	f650 <lv_img_decoder_built_in_open+0x38>
    lv_img_cf_t cf = dsc->header.cf;
    f982:	7b08      	ldrb	r0, [r1, #12]
    f984:	f000 001f 	and.w	r0, r0, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
    f988:	1f03      	subs	r3, r0, #4
    f98a:	b2db      	uxtb	r3, r3
    f98c:	2b02      	cmp	r3, #2
    f98e:	f63f aee0 	bhi.w	f752 <lv_img_decoder_built_in_open+0x13a>
            dsc->img_data = NULL;
    f992:	2300      	movs	r3, #0
    f994:	6123      	str	r3, [r4, #16]
            return LV_RES_OK;
    f996:	2001      	movs	r0, #1
    f998:	e65a      	b.n	f650 <lv_img_decoder_built_in_open+0x38>
    f99a:	bf00      	nop
    f99c:	00011ced 	.word	0x00011ced
    f9a0:	0000f5dd 	.word	0x0000f5dd
    f9a4:	000253e4 	.word	0x000253e4
    f9a8:	00025260 	.word	0x00025260
    f9ac:	0002530c 	.word	0x0002530c
    f9b0:	00012251 	.word	0x00012251
    f9b4:	00011cb1 	.word	0x00011cb1

0000f9b8 <lv_img_decoder_built_in_read_line>:
{
    f9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f9bc:	b08b      	sub	sp, #44	; 0x2c
    f9be:	460d      	mov	r5, r1
    f9c0:	4614      	mov	r4, r2
    f9c2:	469a      	mov	sl, r3
    f9c4:	f9bd 6050 	ldrsh.w	r6, [sp, #80]	; 0x50
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
    f9c8:	7b0b      	ldrb	r3, [r1, #12]
    f9ca:	f003 031f 	and.w	r3, r3, #31
    f9ce:	1f1a      	subs	r2, r3, #4
    f9d0:	b2d2      	uxtb	r2, r2
    f9d2:	2a02      	cmp	r2, #2
    f9d4:	d845      	bhi.n	fa62 <lv_img_decoder_built_in_read_line+0xaa>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
    f9d6:	7a8b      	ldrb	r3, [r1, #10]
    f9d8:	2b01      	cmp	r3, #1
    f9da:	d003      	beq.n	f9e4 <lv_img_decoder_built_in_read_line+0x2c>
    lv_res_t res = LV_RES_INV;
    f9dc:	2000      	movs	r0, #0
}
    f9de:	b00b      	add	sp, #44	; 0x2c
    f9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

static lv_res_t lv_img_decoder_built_in_line_true_color(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                        lv_coord_t len, uint8_t * buf)
{
#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    f9e4:	f8d1 801c 	ldr.w	r8, [r1, #28]
    lv_fs_res_t res;
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
    f9e8:	7b08      	ldrb	r0, [r1, #12]
    f9ea:	f000 001f 	and.w	r0, r0, #31
    f9ee:	4b9e      	ldr	r3, [pc, #632]	; (fc68 <lv_img_decoder_built_in_read_line+0x2b0>)
    f9f0:	4798      	blx	r3
    f9f2:	4607      	mov	r7, r0

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
    f9f4:	68e9      	ldr	r1, [r5, #12]
    f9f6:	f3c1 218a 	ubfx	r1, r1, #10, #11
    f9fa:	fb0a 4101 	mla	r1, sl, r1, r4
    f9fe:	fb00 f101 	mul.w	r1, r0, r1
    fa02:	10c9      	asrs	r1, r1, #3
    pos += 4; /*Skip the header*/
    res = lv_fs_seek(user_data->f, pos);
    fa04:	3104      	adds	r1, #4
    fa06:	f8d8 0000 	ldr.w	r0, [r8]
    fa0a:	4b98      	ldr	r3, [pc, #608]	; (fc6c <lv_img_decoder_built_in_read_line+0x2b4>)
    fa0c:	4798      	blx	r3
    if(res != LV_FS_RES_OK) {
    fa0e:	b9d8      	cbnz	r0, fa48 <lv_img_decoder_built_in_read_line+0x90>
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
    }
    uint32_t btr = len * (px_size >> 3);
    fa10:	f3c7 07c7 	ubfx	r7, r7, #3, #8
    fa14:	fb06 f607 	mul.w	r6, r6, r7
    uint32_t br  = 0;
    fa18:	ab0a      	add	r3, sp, #40	; 0x28
    fa1a:	2200      	movs	r2, #0
    fa1c:	f843 2d10 	str.w	r2, [r3, #-16]!
    lv_fs_read(user_data->f, buf, btr, &br);
    fa20:	4632      	mov	r2, r6
    fa22:	9915      	ldr	r1, [sp, #84]	; 0x54
    fa24:	f8d8 0000 	ldr.w	r0, [r8]
    fa28:	4c91      	ldr	r4, [pc, #580]	; (fc70 <lv_img_decoder_built_in_read_line+0x2b8>)
    fa2a:	47a0      	blx	r4
    if(res != LV_FS_RES_OK || btr != br) {
    fa2c:	9b06      	ldr	r3, [sp, #24]
    fa2e:	429e      	cmp	r6, r3
    fa30:	d015      	beq.n	fa5e <lv_img_decoder_built_in_read_line+0xa6>
        LV_LOG_WARN("Built-in image decoder read failed");
    fa32:	4b90      	ldr	r3, [pc, #576]	; (fc74 <lv_img_decoder_built_in_read_line+0x2bc>)
    fa34:	9300      	str	r3, [sp, #0]
    fa36:	4b90      	ldr	r3, [pc, #576]	; (fc78 <lv_img_decoder_built_in_read_line+0x2c0>)
    fa38:	f240 2235 	movw	r2, #565	; 0x235
    fa3c:	498f      	ldr	r1, [pc, #572]	; (fc7c <lv_img_decoder_built_in_read_line+0x2c4>)
    fa3e:	2002      	movs	r0, #2
    fa40:	4c8f      	ldr	r4, [pc, #572]	; (fc80 <lv_img_decoder_built_in_read_line+0x2c8>)
    fa42:	47a0      	blx	r4
        return LV_RES_INV;
    fa44:	2000      	movs	r0, #0
    fa46:	e7ca      	b.n	f9de <lv_img_decoder_built_in_read_line+0x26>
        LV_LOG_WARN("Built-in image decoder seek failed");
    fa48:	4b8e      	ldr	r3, [pc, #568]	; (fc84 <lv_img_decoder_built_in_read_line+0x2cc>)
    fa4a:	9300      	str	r3, [sp, #0]
    fa4c:	4b8a      	ldr	r3, [pc, #552]	; (fc78 <lv_img_decoder_built_in_read_line+0x2c0>)
    fa4e:	f240 222e 	movw	r2, #558	; 0x22e
    fa52:	498a      	ldr	r1, [pc, #552]	; (fc7c <lv_img_decoder_built_in_read_line+0x2c4>)
    fa54:	2002      	movs	r0, #2
    fa56:	4c8a      	ldr	r4, [pc, #552]	; (fc80 <lv_img_decoder_built_in_read_line+0x2c8>)
    fa58:	47a0      	blx	r4
        return LV_RES_INV;
    fa5a:	2000      	movs	r0, #0
    fa5c:	e7bf      	b.n	f9de <lv_img_decoder_built_in_read_line+0x26>
    }

    return LV_RES_OK;
    fa5e:	2001      	movs	r0, #1
    fa60:	e7bd      	b.n	f9de <lv_img_decoder_built_in_read_line+0x26>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
    fa62:	f1a3 020b 	sub.w	r2, r3, #11
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
    fa66:	b2d2      	uxtb	r2, r2
    fa68:	2a03      	cmp	r2, #3
    fa6a:	d90f      	bls.n	fa8c <lv_img_decoder_built_in_read_line+0xd4>
            dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
    fa6c:	3b07      	subs	r3, #7
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
    fa6e:	b2db      	uxtb	r3, r3
    fa70:	2b03      	cmp	r3, #3
    fa72:	f240 80df 	bls.w	fc34 <lv_img_decoder_built_in_read_line+0x27c>
        LV_LOG_WARN("Built-in image decoder read not supports the color format");
    fa76:	4b84      	ldr	r3, [pc, #528]	; (fc88 <lv_img_decoder_built_in_read_line+0x2d0>)
    fa78:	9300      	str	r3, [sp, #0]
    fa7a:	4b84      	ldr	r3, [pc, #528]	; (fc8c <lv_img_decoder_built_in_read_line+0x2d4>)
    fa7c:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
    fa80:	497e      	ldr	r1, [pc, #504]	; (fc7c <lv_img_decoder_built_in_read_line+0x2c4>)
    fa82:	2002      	movs	r0, #2
    fa84:	4c7e      	ldr	r4, [pc, #504]	; (fc80 <lv_img_decoder_built_in_read_line+0x2c8>)
    fa86:	47a0      	blx	r4
        return LV_RES_INV;
    fa88:	2000      	movs	r0, #0
    fa8a:	e7a8      	b.n	f9de <lv_img_decoder_built_in_read_line+0x26>
static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{

#if LV_IMG_CF_ALPHA
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
    fa8c:	2200      	movs	r2, #0
    fa8e:	f88d 2010 	strb.w	r2, [sp, #16]
    fa92:	23ff      	movs	r3, #255	; 0xff
    fa94:	f88d 3011 	strb.w	r3, [sp, #17]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
    fa98:	f88d 2014 	strb.w	r2, [sp, #20]
    fa9c:	2255      	movs	r2, #85	; 0x55
    fa9e:	f88d 2015 	strb.w	r2, [sp, #21]
    faa2:	22aa      	movs	r2, #170	; 0xaa
    faa4:	f88d 2016 	strb.w	r2, [sp, #22]
    faa8:	f88d 3017 	strb.w	r3, [sp, #23]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
    faac:	4b78      	ldr	r3, [pc, #480]	; (fc90 <lv_img_decoder_built_in_read_line+0x2d8>)
    faae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    fab0:	af0a      	add	r7, sp, #40	; 0x28
    fab2:	e907 000f 	stmdb	r7, {r0, r1, r2, r3}
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
                                          };

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->color;
    fab6:	8929      	ldrh	r1, [r5, #8]
    lv_coord_t i;
    for(i = 0; i < len; i++) {
    fab8:	2e00      	cmp	r6, #0
    faba:	dd0c      	ble.n	fad6 <lv_img_decoder_built_in_read_line+0x11e>
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
    fabc:	0a08      	lsrs	r0, r1, #8
    fabe:	9b15      	ldr	r3, [sp, #84]	; 0x54
    fac0:	1e72      	subs	r2, r6, #1
    fac2:	b292      	uxth	r2, r2
    fac4:	3201      	adds	r2, #1
    fac6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    faca:	441a      	add	r2, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
    facc:	7019      	strb	r1, [r3, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
    face:	7058      	strb	r0, [r3, #1]
    fad0:	3303      	adds	r3, #3
    for(i = 0; i < len; i++) {
    fad2:	429a      	cmp	r2, r3
    fad4:	d1fa      	bne.n	facc <lv_img_decoder_built_in_read_line+0x114>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
    fad6:	7b28      	ldrb	r0, [r5, #12]
    fad8:	f000 001f 	and.w	r0, r0, #31
    fadc:	4b62      	ldr	r3, [pc, #392]	; (fc68 <lv_img_decoder_built_in_read_line+0x2b0>)
    fade:	4798      	blx	r3
    fae0:	4680      	mov	r8, r0
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
    fae2:	2701      	movs	r7, #1
    fae4:	4087      	lsls	r7, r0
    fae6:	3f01      	subs	r7, #1
    fae8:	b2bf      	uxth	r7, r7

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos   = 0;
    switch(dsc->header.cf) {
    faea:	7b2b      	ldrb	r3, [r5, #12]
    faec:	f003 031f 	and.w	r3, r3, #31
    faf0:	3b0b      	subs	r3, #11
    faf2:	2b03      	cmp	r3, #3
    faf4:	f200 8083 	bhi.w	fbfe <lv_img_decoder_built_in_read_line+0x246>
    faf8:	e8df f003 	tbb	[pc, r3]
    fafc:	76614c02 	.word	0x76614c02
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
    fb00:	68eb      	ldr	r3, [r5, #12]
    fb02:	f3c3 238a 	ubfx	r3, r3, #10, #11
    fb06:	10da      	asrs	r2, r3, #3
            if(dsc->header.w & 0x7) w++;
    fb08:	f013 0f07 	tst.w	r3, #7
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
    fb0c:	bf0c      	ite	eq
    fb0e:	fa0f fb82 	sxtheq.w	fp, r2
            if(dsc->header.w & 0x7) w++;
    fb12:	f102 0b01 	addne.w	fp, r2, #1
            ofs += w * y + (x >> 3); /*First pixel*/
    fb16:	10e3      	asrs	r3, r4, #3
    fb18:	fb0a 3a0b 	mla	sl, sl, fp, r3
            pos       = 7 - (x & 0x7);
    fb1c:	43e4      	mvns	r4, r4
    fb1e:	f004 0407 	and.w	r4, r4, #7
            opa_table = alpha1_opa_table;
    fb22:	f10d 0910 	add.w	r9, sp, #16
            pos = 0;
            break;
    }

#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    fb26:	69eb      	ldr	r3, [r5, #28]
    fb28:	9303      	str	r3, [sp, #12]
    uint8_t * fs_buf = _lv_mem_buf_get(w);
    fb2a:	4658      	mov	r0, fp
    fb2c:	4b59      	ldr	r3, [pc, #356]	; (fc94 <lv_img_decoder_built_in_read_line+0x2dc>)
    fb2e:	4798      	blx	r3
    fb30:	9002      	str	r0, [sp, #8]
#endif

    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
    fb32:	7aab      	ldrb	r3, [r5, #10]
    fb34:	2b00      	cmp	r3, #0
    fb36:	d16b      	bne.n	fc10 <lv_img_decoder_built_in_read_line+0x258>
        const lv_img_dsc_t * img_dsc = dsc->src;

        data_tmp = img_dsc->data + ofs;
    fb38:	686b      	ldr	r3, [r5, #4]
    fb3a:	689b      	ldr	r3, [r3, #8]
    fb3c:	449a      	add	sl, r3
        data_tmp = NULL; /*To avoid warnings*/
        return LV_RES_INV;
#endif
    }

    for(i = 0; i < len; i++) {
    fb3e:	2e00      	cmp	r6, #0
    fb40:	dd23      	ble.n	fb8a <lv_img_decoder_built_in_read_line+0x1d2>
    fb42:	9a15      	ldr	r2, [sp, #84]	; 0x54
    fb44:	1e71      	subs	r1, r6, #1
    fb46:	b289      	uxth	r1, r1
    fb48:	3101      	adds	r1, #1
    fb4a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    fb4e:	4411      	add	r1, r2
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
    fb50:	f1c8 0008 	rsb	r0, r8, #8
    fb54:	b240      	sxtb	r0, r0
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
    fb56:	f89a 3000 	ldrb.w	r3, [sl]
    fb5a:	fa07 f604 	lsl.w	r6, r7, r4
    fb5e:	4033      	ands	r3, r6
    fb60:	4123      	asrs	r3, r4
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
    fb62:	7b2e      	ldrb	r6, [r5, #12]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
    fb64:	f006 061f 	and.w	r6, r6, #31
    fb68:	2e0e      	cmp	r6, #14
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
    fb6a:	b2db      	uxtb	r3, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
    fb6c:	bf18      	it	ne
    fb6e:	f819 3003 	ldrbne.w	r3, [r9, r3]
    fb72:	7093      	strb	r3, [r2, #2]
        pos -= px_size;
    fb74:	eba4 0408 	sub.w	r4, r4, r8
    fb78:	b264      	sxtb	r4, r4
        if(pos < 0) {
    fb7a:	2c00      	cmp	r4, #0
            pos = 8 - px_size;
    fb7c:	bfbc      	itt	lt
    fb7e:	4604      	movlt	r4, r0
            data_tmp++;
    fb80:	f10a 0a01 	addlt.w	sl, sl, #1
    fb84:	3203      	adds	r2, #3
    for(i = 0; i < len; i++) {
    fb86:	428a      	cmp	r2, r1
    fb88:	d1e5      	bne.n	fb56 <lv_img_decoder_built_in_read_line+0x19e>
        }
    }
#if LV_USE_FILESYSTEM
    _lv_mem_buf_release(fs_buf);
    fb8a:	9802      	ldr	r0, [sp, #8]
    fb8c:	4b42      	ldr	r3, [pc, #264]	; (fc98 <lv_img_decoder_built_in_read_line+0x2e0>)
    fb8e:	4798      	blx	r3
        res = lv_img_decoder_built_in_line_alpha(dsc, x, y, len, buf);
    fb90:	2001      	movs	r0, #1
    fb92:	e724      	b.n	f9de <lv_img_decoder_built_in_read_line+0x26>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
    fb94:	68eb      	ldr	r3, [r5, #12]
    fb96:	f3c3 238a 	ubfx	r3, r3, #10, #11
    fb9a:	109a      	asrs	r2, r3, #2
            if(dsc->header.w & 0x3) w++;
    fb9c:	f013 0f03 	tst.w	r3, #3
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
    fba0:	bf0c      	ite	eq
    fba2:	fa0f fb82 	sxtheq.w	fp, r2
            if(dsc->header.w & 0x3) w++;
    fba6:	f102 0b01 	addne.w	fp, r2, #1
            ofs += w * y + (x >> 2); /*First pixel*/
    fbaa:	10a3      	asrs	r3, r4, #2
    fbac:	fb0a 3a0b 	mla	sl, sl, fp, r3
            pos       = 6 - ((x & 0x3) * 2);
    fbb0:	43e4      	mvns	r4, r4
    fbb2:	f004 0403 	and.w	r4, r4, #3
    fbb6:	0064      	lsls	r4, r4, #1
            opa_table = alpha2_opa_table;
    fbb8:	f10d 0914 	add.w	r9, sp, #20
    fbbc:	e7b3      	b.n	fb26 <lv_img_decoder_built_in_read_line+0x16e>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
    fbbe:	68eb      	ldr	r3, [r5, #12]
    fbc0:	f3c3 238a 	ubfx	r3, r3, #10, #11
    fbc4:	105a      	asrs	r2, r3, #1
            if(dsc->header.w & 0x1) w++;
    fbc6:	f013 0f01 	tst.w	r3, #1
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
    fbca:	bf0c      	ite	eq
    fbcc:	fa0f fb82 	sxtheq.w	fp, r2
            if(dsc->header.w & 0x1) w++;
    fbd0:	f102 0b01 	addne.w	fp, r2, #1
            ofs += w * y + (x >> 1); /*First pixel*/
    fbd4:	1063      	asrs	r3, r4, #1
    fbd6:	fb0a 3a0b 	mla	sl, sl, fp, r3
            pos       = 4 - ((x & 0x1) * 4);
    fbda:	f014 0f01 	tst.w	r4, #1
    fbde:	d013      	beq.n	fc08 <lv_img_decoder_built_in_read_line+0x250>
    fbe0:	2400      	movs	r4, #0
            opa_table = alpha4_opa_table;
    fbe2:	f10d 0918 	add.w	r9, sp, #24
    fbe6:	e79e      	b.n	fb26 <lv_img_decoder_built_in_read_line+0x16e>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
    fbe8:	68eb      	ldr	r3, [r5, #12]
    fbea:	f3c3 238a 	ubfx	r3, r3, #10, #11
    fbee:	b29a      	uxth	r2, r3
    fbf0:	fa0f fb83 	sxth.w	fp, r3
            ofs += w * y + x;  /*First pixel*/
    fbf4:	fb0a 4a02 	mla	sl, sl, r2, r4
            pos = 0;
    fbf8:	2400      	movs	r4, #0
    const lv_opa_t * opa_table = NULL;
    fbfa:	46a1      	mov	r9, r4
    fbfc:	e793      	b.n	fb26 <lv_img_decoder_built_in_read_line+0x16e>
    int8_t pos   = 0;
    fbfe:	2400      	movs	r4, #0
    uint32_t ofs = 0;
    fc00:	46a2      	mov	sl, r4
    lv_coord_t w = 0;
    fc02:	46a3      	mov	fp, r4
    const lv_opa_t * opa_table = NULL;
    fc04:	46a1      	mov	r9, r4
    fc06:	e78e      	b.n	fb26 <lv_img_decoder_built_in_read_line+0x16e>
            pos       = 4 - ((x & 0x1) * 4);
    fc08:	2404      	movs	r4, #4
            opa_table = alpha4_opa_table;
    fc0a:	f10d 0918 	add.w	r9, sp, #24
    fc0e:	e78a      	b.n	fb26 <lv_img_decoder_built_in_read_line+0x16e>
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
    fc10:	f10a 0104 	add.w	r1, sl, #4
    fc14:	9b03      	ldr	r3, [sp, #12]
    fc16:	6818      	ldr	r0, [r3, #0]
    fc18:	4b14      	ldr	r3, [pc, #80]	; (fc6c <lv_img_decoder_built_in_read_line+0x2b4>)
    fc1a:	4798      	blx	r3
        lv_fs_read(user_data->f, fs_buf, w, NULL);
    fc1c:	2300      	movs	r3, #0
    fc1e:	465a      	mov	r2, fp
    fc20:	f8dd b008 	ldr.w	fp, [sp, #8]
    fc24:	4659      	mov	r1, fp
    fc26:	9803      	ldr	r0, [sp, #12]
    fc28:	6800      	ldr	r0, [r0, #0]
    fc2a:	f8df a044 	ldr.w	sl, [pc, #68]	; fc70 <lv_img_decoder_built_in_read_line+0x2b8>
    fc2e:	47d0      	blx	sl
        data_tmp = fs_buf;
    fc30:	46da      	mov	sl, fp
    fc32:	e784      	b.n	fb3e <lv_img_decoder_built_in_read_line+0x186>
static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{

#if LV_IMG_CF_INDEXED
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
    fc34:	7b08      	ldrb	r0, [r1, #12]
    fc36:	f000 001f 	and.w	r0, r0, #31
    fc3a:	4b0b      	ldr	r3, [pc, #44]	; (fc68 <lv_img_decoder_built_in_read_line+0x2b0>)
    fc3c:	4798      	blx	r3
    fc3e:	4681      	mov	r9, r0
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
    fc40:	f04f 0801 	mov.w	r8, #1
    fc44:	fa08 f800 	lsl.w	r8, r8, r0
    fc48:	f108 38ff 	add.w	r8, r8, #4294967295
    fc4c:	fa1f f888 	uxth.w	r8, r8

    lv_coord_t w = 0;
    int8_t pos   = 0;
    uint32_t ofs = 0;
    switch(dsc->header.cf) {
    fc50:	7b2b      	ldrb	r3, [r5, #12]
    fc52:	f003 031f 	and.w	r3, r3, #31
    fc56:	3b07      	subs	r3, #7
    fc58:	2b03      	cmp	r3, #3
    fc5a:	f200 80a5 	bhi.w	fda8 <lv_img_decoder_built_in_read_line+0x3f0>
    fc5e:	e8df f003 	tbb	[pc, r3]
    fc62:	681d      	.short	0x681d
    fc64:	967e      	.short	0x967e
    fc66:	bf00      	nop
    fc68:	00009675 	.word	0x00009675
    fc6c:	00011ced 	.word	0x00011ced
    fc70:	00011cb1 	.word	0x00011cb1
    fc74:	00025434 	.word	0x00025434
    fc78:	00025280 	.word	0x00025280
    fc7c:	0002530c 	.word	0x0002530c
    fc80:	00012251 	.word	0x00012251
    fc84:	00025410 	.word	0x00025410
    fc88:	00025458 	.word	0x00025458
    fc8c:	000252b8 	.word	0x000252b8
    fc90:	000252a8 	.word	0x000252a8
    fc94:	00012931 	.word	0x00012931
    fc98:	00012565 	.word	0x00012565
        case LV_IMG_CF_INDEXED_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
    fc9c:	68eb      	ldr	r3, [r5, #12]
    fc9e:	f3c3 238a 	ubfx	r3, r3, #10, #11
    fca2:	ea4f 0be3 	mov.w	fp, r3, asr #3
            if(dsc->header.w & 0x7) w++;
    fca6:	f013 0f07 	tst.w	r3, #7
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
    fcaa:	bf0c      	ite	eq
    fcac:	fa0f fb8b 	sxtheq.w	fp, fp
            if(dsc->header.w & 0x7) w++;
    fcb0:	f10b 0b01 	addne.w	fp, fp, #1
            ofs += w * y + (x >> 3); /*First pixel*/
    fcb4:	10e3      	asrs	r3, r4, #3
    fcb6:	fb0a 3a0b 	mla	sl, sl, fp, r3
            ofs += 8;                /*Skip the palette*/
    fcba:	f10a 0a08 	add.w	sl, sl, #8
            pos = 7 - (x & 0x7);
    fcbe:	43e4      	mvns	r4, r4
    fcc0:	f004 0407 	and.w	r4, r4, #7
            ofs += 1024;       /*Skip the palette*/
            pos = 0;
            break;
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    fcc4:	69ef      	ldr	r7, [r5, #28]

#if LV_USE_FILESYSTEM
    uint8_t * fs_buf = _lv_mem_buf_get(w);
    fcc6:	4658      	mov	r0, fp
    fcc8:	4b41      	ldr	r3, [pc, #260]	; (fdd0 <lv_img_decoder_built_in_read_line+0x418>)
    fcca:	4798      	blx	r3
    fccc:	9002      	str	r0, [sp, #8]
#endif
    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
    fcce:	7aab      	ldrb	r3, [r5, #10]
    fcd0:	2b00      	cmp	r3, #0
    fcd2:	d16e      	bne.n	fdb2 <lv_img_decoder_built_in_read_line+0x3fa>
        const lv_img_dsc_t * img_dsc = dsc->src;
        data_tmp                     = img_dsc->data + ofs;
    fcd4:	686b      	ldr	r3, [r5, #4]
    fcd6:	689b      	ldr	r3, [r3, #8]
    fcd8:	449a      	add	sl, r3
        return LV_RES_INV;
#endif
    }

    lv_coord_t i;
    for(i = 0; i < len; i++) {
    fcda:	2e00      	cmp	r6, #0
    fcdc:	dd24      	ble.n	fd28 <lv_img_decoder_built_in_read_line+0x370>
    fcde:	9a15      	ldr	r2, [sp, #84]	; 0x54
    fce0:	1e71      	subs	r1, r6, #1
    fce2:	b289      	uxth	r1, r1
    fce4:	3101      	adds	r1, #1
    fce6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    fcea:	4411      	add	r1, r2
#endif
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
    fcec:	f1c9 0508 	rsb	r5, r9, #8
    fcf0:	b26d      	sxtb	r5, r5
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
    fcf2:	f89a 3000 	ldrb.w	r3, [sl]
    fcf6:	fa08 f004 	lsl.w	r0, r8, r4
    fcfa:	4003      	ands	r3, r0
    fcfc:	4123      	asrs	r3, r4
        lv_color_t color = user_data->palette[val_act];
    fcfe:	b2db      	uxtb	r3, r3
    fd00:	6878      	ldr	r0, [r7, #4]
    fd02:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full & 0xFF;
    fd06:	7010      	strb	r0, [r2, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (color.full >> 8) & 0xFF;
    fd08:	0a00      	lsrs	r0, r0, #8
    fd0a:	7050      	strb	r0, [r2, #1]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
    fd0c:	68b8      	ldr	r0, [r7, #8]
    fd0e:	5cc3      	ldrb	r3, [r0, r3]
    fd10:	7093      	strb	r3, [r2, #2]
        pos -= px_size;
    fd12:	eba4 0409 	sub.w	r4, r4, r9
    fd16:	b264      	sxtb	r4, r4
        if(pos < 0) {
    fd18:	2c00      	cmp	r4, #0
            pos = 8 - px_size;
    fd1a:	bfbc      	itt	lt
    fd1c:	462c      	movlt	r4, r5
            data_tmp++;
    fd1e:	f10a 0a01 	addlt.w	sl, sl, #1
    fd22:	3203      	adds	r2, #3
    for(i = 0; i < len; i++) {
    fd24:	428a      	cmp	r2, r1
    fd26:	d1e4      	bne.n	fcf2 <lv_img_decoder_built_in_read_line+0x33a>
        }
    }
#if LV_USE_FILESYSTEM
    _lv_mem_buf_release(fs_buf);
    fd28:	9802      	ldr	r0, [sp, #8]
    fd2a:	4b2a      	ldr	r3, [pc, #168]	; (fdd4 <lv_img_decoder_built_in_read_line+0x41c>)
    fd2c:	4798      	blx	r3
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
    fd2e:	2001      	movs	r0, #1
    fd30:	e655      	b.n	f9de <lv_img_decoder_built_in_read_line+0x26>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
    fd32:	68eb      	ldr	r3, [r5, #12]
    fd34:	f3c3 238a 	ubfx	r3, r3, #10, #11
    fd38:	ea4f 0ba3 	mov.w	fp, r3, asr #2
            if(dsc->header.w & 0x3) w++;
    fd3c:	f013 0f03 	tst.w	r3, #3
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
    fd40:	bf0c      	ite	eq
    fd42:	fa0f fb8b 	sxtheq.w	fp, fp
            if(dsc->header.w & 0x3) w++;
    fd46:	f10b 0b01 	addne.w	fp, fp, #1
            ofs += w * y + (x >> 2); /*First pixel*/
    fd4a:	10a3      	asrs	r3, r4, #2
    fd4c:	fb0a 3a0b 	mla	sl, sl, fp, r3
            ofs += 16;               /*Skip the palette*/
    fd50:	f10a 0a10 	add.w	sl, sl, #16
            pos = 6 - ((x & 0x3) * 2);
    fd54:	43e4      	mvns	r4, r4
    fd56:	f004 0403 	and.w	r4, r4, #3
    fd5a:	0064      	lsls	r4, r4, #1
    fd5c:	e7b2      	b.n	fcc4 <lv_img_decoder_built_in_read_line+0x30c>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
    fd5e:	68eb      	ldr	r3, [r5, #12]
    fd60:	f3c3 238a 	ubfx	r3, r3, #10, #11
    fd64:	ea4f 0b63 	mov.w	fp, r3, asr #1
            if(dsc->header.w & 0x1) w++;
    fd68:	f013 0f01 	tst.w	r3, #1
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
    fd6c:	bf0c      	ite	eq
    fd6e:	fa0f fb8b 	sxtheq.w	fp, fp
            if(dsc->header.w & 0x1) w++;
    fd72:	f10b 0b01 	addne.w	fp, fp, #1
            ofs += w * y + (x >> 1); /*First pixel*/
    fd76:	1063      	asrs	r3, r4, #1
    fd78:	fb0a 3a0b 	mla	sl, sl, fp, r3
            ofs += 64;               /*Skip the palette*/
    fd7c:	f10a 0a40 	add.w	sl, sl, #64	; 0x40
            pos = 4 - ((x & 0x1) * 4);
    fd80:	f004 0401 	and.w	r4, r4, #1
    fd84:	2c00      	cmp	r4, #0
    fd86:	bf0c      	ite	eq
    fd88:	2404      	moveq	r4, #4
    fd8a:	2400      	movne	r4, #0
    fd8c:	e79a      	b.n	fcc4 <lv_img_decoder_built_in_read_line+0x30c>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
    fd8e:	68eb      	ldr	r3, [r5, #12]
    fd90:	f3c3 2b8a 	ubfx	fp, r3, #10, #11
    fd94:	fa1f f38b 	uxth.w	r3, fp
    fd98:	fa0f fb8b 	sxth.w	fp, fp
            ofs += w * y + x;  /*First pixel*/
    fd9c:	fb0a 4a03 	mla	sl, sl, r3, r4
            ofs += 1024;       /*Skip the palette*/
    fda0:	f50a 6a80 	add.w	sl, sl, #1024	; 0x400
            pos = 0;
    fda4:	2400      	movs	r4, #0
    fda6:	e78d      	b.n	fcc4 <lv_img_decoder_built_in_read_line+0x30c>
    uint32_t ofs = 0;
    fda8:	f04f 0a00 	mov.w	sl, #0
    int8_t pos   = 0;
    fdac:	4654      	mov	r4, sl
    lv_coord_t w = 0;
    fdae:	46d3      	mov	fp, sl
    fdb0:	e788      	b.n	fcc4 <lv_img_decoder_built_in_read_line+0x30c>
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
    fdb2:	f10a 0104 	add.w	r1, sl, #4
    fdb6:	6838      	ldr	r0, [r7, #0]
    fdb8:	4b07      	ldr	r3, [pc, #28]	; (fdd8 <lv_img_decoder_built_in_read_line+0x420>)
    fdba:	4798      	blx	r3
        lv_fs_read(user_data->f, fs_buf, w, NULL);
    fdbc:	2300      	movs	r3, #0
    fdbe:	465a      	mov	r2, fp
    fdc0:	f8dd a008 	ldr.w	sl, [sp, #8]
    fdc4:	4651      	mov	r1, sl
    fdc6:	6838      	ldr	r0, [r7, #0]
    fdc8:	4d04      	ldr	r5, [pc, #16]	; (fddc <lv_img_decoder_built_in_read_line+0x424>)
    fdca:	47a8      	blx	r5
    fdcc:	e785      	b.n	fcda <lv_img_decoder_built_in_read_line+0x322>
    fdce:	bf00      	nop
    fdd0:	00012931 	.word	0x00012931
    fdd4:	00012565 	.word	0x00012565
    fdd8:	00011ced 	.word	0x00011ced
    fddc:	00011cb1 	.word	0x00011cb1

0000fde0 <lv_img_decoder_get_info>:
{
    fde0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fde4:	4681      	mov	r9, r0
    fde6:	460e      	mov	r6, r1
    header->always_zero = 0;
    fde8:	780b      	ldrb	r3, [r1, #0]
    fdea:	f36f 1347 	bfc	r3, #5, #3
    fdee:	700b      	strb	r3, [r1, #0]
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
    fdf0:	480f      	ldr	r0, [pc, #60]	; (fe30 <lv_img_decoder_get_info+0x50>)
    fdf2:	4b10      	ldr	r3, [pc, #64]	; (fe34 <lv_img_decoder_get_info+0x54>)
    fdf4:	4798      	blx	r3
    fdf6:	b1c8      	cbz	r0, fe2c <lv_img_decoder_get_info+0x4c>
    fdf8:	4604      	mov	r4, r0
        res = LV_RES_INV;
    fdfa:	f04f 0a00 	mov.w	sl, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
    fdfe:	f8df 8030 	ldr.w	r8, [pc, #48]	; fe30 <lv_img_decoder_get_info+0x50>
    fe02:	4f0d      	ldr	r7, [pc, #52]	; (fe38 <lv_img_decoder_get_info+0x58>)
    fe04:	e005      	b.n	fe12 <lv_img_decoder_get_info+0x32>
        res = LV_RES_INV;
    fe06:	4655      	mov	r5, sl
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
    fe08:	4621      	mov	r1, r4
    fe0a:	4640      	mov	r0, r8
    fe0c:	47b8      	blx	r7
    fe0e:	4604      	mov	r4, r0
    fe10:	b148      	cbz	r0, fe26 <lv_img_decoder_get_info+0x46>
        if(d->info_cb) {
    fe12:	6823      	ldr	r3, [r4, #0]
    fe14:	2b00      	cmp	r3, #0
    fe16:	d0f6      	beq.n	fe06 <lv_img_decoder_get_info+0x26>
            res = d->info_cb(d, src, header);
    fe18:	4632      	mov	r2, r6
    fe1a:	4649      	mov	r1, r9
    fe1c:	4620      	mov	r0, r4
    fe1e:	4798      	blx	r3
    fe20:	4605      	mov	r5, r0
            if(res == LV_RES_OK) break;
    fe22:	2801      	cmp	r0, #1
    fe24:	d1f0      	bne.n	fe08 <lv_img_decoder_get_info+0x28>
}
    fe26:	4628      	mov	r0, r5
    fe28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_res_t res = LV_RES_INV;
    fe2c:	2500      	movs	r5, #0
    fe2e:	e7fa      	b.n	fe26 <lv_img_decoder_get_info+0x46>
    fe30:	2000c6a0 	.word	0x2000c6a0
    fe34:	00011f9d 	.word	0x00011f9d
    fe38:	00011fb1 	.word	0x00011fb1

0000fe3c <lv_img_decoder_open>:
{
    fe3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fe40:	4682      	mov	sl, r0
    fe42:	4688      	mov	r8, r1
    dsc->color     = color;
    fe44:	8102      	strh	r2, [r0, #8]
    dsc->src_type  = lv_img_src_get_type(src);
    fe46:	4608      	mov	r0, r1
    fe48:	4b26      	ldr	r3, [pc, #152]	; (fee4 <lv_img_decoder_open+0xa8>)
    fe4a:	4798      	blx	r3
    fe4c:	f88a 000a 	strb.w	r0, [sl, #10]
    dsc->user_data = NULL;
    fe50:	2300      	movs	r3, #0
    fe52:	f8ca 301c 	str.w	r3, [sl, #28]
    if(dsc->src_type == LV_IMG_SRC_FILE) {
    fe56:	2801      	cmp	r0, #1
    fe58:	d00d      	beq.n	fe76 <lv_img_decoder_open+0x3a>
        dsc->src       = src;
    fe5a:	f8ca 8004 	str.w	r8, [sl, #4]
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
    fe5e:	4822      	ldr	r0, [pc, #136]	; (fee8 <lv_img_decoder_open+0xac>)
    fe60:	4b22      	ldr	r3, [pc, #136]	; (feec <lv_img_decoder_open+0xb0>)
    fe62:	4798      	blx	r3
    fe64:	4604      	mov	r4, r0
    fe66:	2800      	cmp	r0, #0
    fe68:	d036      	beq.n	fed8 <lv_img_decoder_open+0x9c>
    fe6a:	2500      	movs	r5, #0
        res = d->info_cb(d, src, &dsc->header);
    fe6c:	f10a 090c 	add.w	r9, sl, #12
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
    fe70:	4f1d      	ldr	r7, [pc, #116]	; (fee8 <lv_img_decoder_open+0xac>)
    fe72:	4e1f      	ldr	r6, [pc, #124]	; (fef0 <lv_img_decoder_open+0xb4>)
    fe74:	e010      	b.n	fe98 <lv_img_decoder_open+0x5c>
        size_t fnlen = strlen(src);
    fe76:	4640      	mov	r0, r8
    fe78:	4b1e      	ldr	r3, [pc, #120]	; (fef4 <lv_img_decoder_open+0xb8>)
    fe7a:	4798      	blx	r3
        dsc->src = lv_mem_alloc(fnlen + 1);
    fe7c:	3001      	adds	r0, #1
    fe7e:	4b1e      	ldr	r3, [pc, #120]	; (fef8 <lv_img_decoder_open+0xbc>)
    fe80:	4798      	blx	r3
    fe82:	f8ca 0004 	str.w	r0, [sl, #4]
        strcpy((char *)dsc->src, src);
    fe86:	4641      	mov	r1, r8
    fe88:	4b1c      	ldr	r3, [pc, #112]	; (fefc <lv_img_decoder_open+0xc0>)
    fe8a:	4798      	blx	r3
    fe8c:	e7e7      	b.n	fe5e <lv_img_decoder_open+0x22>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
    fe8e:	4621      	mov	r1, r4
    fe90:	4638      	mov	r0, r7
    fe92:	47b0      	blx	r6
    fe94:	4604      	mov	r4, r0
    fe96:	b1d8      	cbz	r0, fed0 <lv_img_decoder_open+0x94>
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
    fe98:	6823      	ldr	r3, [r4, #0]
    fe9a:	2b00      	cmp	r3, #0
    fe9c:	d0f7      	beq.n	fe8e <lv_img_decoder_open+0x52>
    fe9e:	6862      	ldr	r2, [r4, #4]
    fea0:	2a00      	cmp	r2, #0
    fea2:	d0f4      	beq.n	fe8e <lv_img_decoder_open+0x52>
        res = d->info_cb(d, src, &dsc->header);
    fea4:	464a      	mov	r2, r9
    fea6:	4641      	mov	r1, r8
    fea8:	4620      	mov	r0, r4
    feaa:	4798      	blx	r3
    feac:	4605      	mov	r5, r0
        if(res != LV_RES_OK) continue;
    feae:	2801      	cmp	r0, #1
    feb0:	d1ed      	bne.n	fe8e <lv_img_decoder_open+0x52>
        dsc->error_msg = NULL;
    feb2:	2300      	movs	r3, #0
    feb4:	f8ca 3018 	str.w	r3, [sl, #24]
        dsc->img_data  = NULL;
    feb8:	f8ca 3010 	str.w	r3, [sl, #16]
        dsc->decoder   = d;
    febc:	f8ca 4000 	str.w	r4, [sl]
        res = d->open_cb(d, dsc);
    fec0:	6863      	ldr	r3, [r4, #4]
    fec2:	4651      	mov	r1, sl
    fec4:	4620      	mov	r0, r4
    fec6:	4798      	blx	r3
    fec8:	4605      	mov	r5, r0
        if(res == LV_RES_OK) break;
    feca:	2801      	cmp	r0, #1
    fecc:	d1df      	bne.n	fe8e <lv_img_decoder_open+0x52>
    fece:	e000      	b.n	fed2 <lv_img_decoder_open+0x96>
    if(res == LV_RES_INV) {
    fed0:	b11d      	cbz	r5, feda <lv_img_decoder_open+0x9e>
}
    fed2:	4628      	mov	r0, r5
    fed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_res_t res = LV_RES_INV;
    fed8:	2500      	movs	r5, #0
        _lv_memset_00(dsc, sizeof(lv_img_decoder_dsc_t));
    feda:	2120      	movs	r1, #32
    fedc:	4650      	mov	r0, sl
    fede:	4b08      	ldr	r3, [pc, #32]	; (ff00 <lv_img_decoder_open+0xc4>)
    fee0:	4798      	blx	r3
    fee2:	e7f6      	b.n	fed2 <lv_img_decoder_open+0x96>
    fee4:	0000995d 	.word	0x0000995d
    fee8:	2000c6a0 	.word	0x2000c6a0
    feec:	00011f9d 	.word	0x00011f9d
    fef0:	00011fb1 	.word	0x00011fb1
    fef4:	0001b513 	.word	0x0001b513
    fef8:	000123d1 	.word	0x000123d1
    fefc:	0001b503 	.word	0x0001b503
    ff00:	00012b2b 	.word	0x00012b2b

0000ff04 <lv_img_decoder_read_line>:
{
    ff04:	b570      	push	{r4, r5, r6, lr}
    ff06:	b082      	sub	sp, #8
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
    ff08:	6806      	ldr	r6, [r0, #0]
    ff0a:	68b4      	ldr	r4, [r6, #8]
    ff0c:	b154      	cbz	r4, ff24 <lv_img_decoder_read_line+0x20>
    ff0e:	461d      	mov	r5, r3
    ff10:	4613      	mov	r3, r2
    ff12:	460a      	mov	r2, r1
    ff14:	4601      	mov	r1, r0
    ff16:	9806      	ldr	r0, [sp, #24]
    ff18:	9001      	str	r0, [sp, #4]
    ff1a:	9500      	str	r5, [sp, #0]
    ff1c:	4630      	mov	r0, r6
    ff1e:	47a0      	blx	r4
}
    ff20:	b002      	add	sp, #8
    ff22:	bd70      	pop	{r4, r5, r6, pc}
    lv_res_t res = LV_RES_INV;
    ff24:	2000      	movs	r0, #0
    ff26:	e7fb      	b.n	ff20 <lv_img_decoder_read_line+0x1c>

0000ff28 <lv_img_decoder_close>:
    if(dsc->decoder) {
    ff28:	6803      	ldr	r3, [r0, #0]
    ff2a:	b183      	cbz	r3, ff4e <lv_img_decoder_close+0x26>
{
    ff2c:	b510      	push	{r4, lr}
    ff2e:	4604      	mov	r4, r0
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
    ff30:	68da      	ldr	r2, [r3, #12]
    ff32:	b112      	cbz	r2, ff3a <lv_img_decoder_close+0x12>
    ff34:	4601      	mov	r1, r0
    ff36:	4618      	mov	r0, r3
    ff38:	4790      	blx	r2
        if(dsc->src_type == LV_IMG_SRC_FILE) {
    ff3a:	7aa3      	ldrb	r3, [r4, #10]
    ff3c:	2b01      	cmp	r3, #1
    ff3e:	d000      	beq.n	ff42 <lv_img_decoder_close+0x1a>
    ff40:	bd10      	pop	{r4, pc}
            lv_mem_free(dsc->src);
    ff42:	6860      	ldr	r0, [r4, #4]
    ff44:	4b02      	ldr	r3, [pc, #8]	; (ff50 <lv_img_decoder_close+0x28>)
    ff46:	4798      	blx	r3
            dsc->src = NULL;
    ff48:	2300      	movs	r3, #0
    ff4a:	6063      	str	r3, [r4, #4]
}
    ff4c:	e7f8      	b.n	ff40 <lv_img_decoder_close+0x18>
    ff4e:	4770      	bx	lr
    ff50:	000124b9 	.word	0x000124b9

0000ff54 <lv_img_decoder_create>:
{
    ff54:	b530      	push	{r4, r5, lr}
    ff56:	b083      	sub	sp, #12
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
    ff58:	480d      	ldr	r0, [pc, #52]	; (ff90 <lv_img_decoder_create+0x3c>)
    ff5a:	4b0e      	ldr	r3, [pc, #56]	; (ff94 <lv_img_decoder_create+0x40>)
    ff5c:	4798      	blx	r3
    ff5e:	4604      	mov	r4, r0
    LV_ASSERT_MEM(decoder);
    ff60:	4b0d      	ldr	r3, [pc, #52]	; (ff98 <lv_img_decoder_create+0x44>)
    ff62:	4798      	blx	r3
    ff64:	b138      	cbz	r0, ff76 <lv_img_decoder_create+0x22>
    if(decoder == NULL) return NULL;
    ff66:	b11c      	cbz	r4, ff70 <lv_img_decoder_create+0x1c>
    _lv_memset_00(decoder, sizeof(lv_img_decoder_t));
    ff68:	2110      	movs	r1, #16
    ff6a:	4620      	mov	r0, r4
    ff6c:	4b0b      	ldr	r3, [pc, #44]	; (ff9c <lv_img_decoder_create+0x48>)
    ff6e:	4798      	blx	r3
}
    ff70:	4620      	mov	r0, r4
    ff72:	b003      	add	sp, #12
    ff74:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_MEM(decoder);
    ff76:	4b0a      	ldr	r3, [pc, #40]	; (ffa0 <lv_img_decoder_create+0x4c>)
    ff78:	9300      	str	r3, [sp, #0]
    ff7a:	22c9      	movs	r2, #201	; 0xc9
    ff7c:	4909      	ldr	r1, [pc, #36]	; (ffa4 <lv_img_decoder_create+0x50>)
    ff7e:	2003      	movs	r0, #3
    ff80:	4d09      	ldr	r5, [pc, #36]	; (ffa8 <lv_img_decoder_create+0x54>)
    ff82:	47a8      	blx	r5
    ff84:	4622      	mov	r2, r4
    ff86:	2300      	movs	r3, #0
    ff88:	4808      	ldr	r0, [pc, #32]	; (ffac <lv_img_decoder_create+0x58>)
    ff8a:	4909      	ldr	r1, [pc, #36]	; (ffb0 <lv_img_decoder_create+0x5c>)
    ff8c:	4788      	blx	r1
    ff8e:	e7fe      	b.n	ff8e <lv_img_decoder_create+0x3a>
    ff90:	2000c6a0 	.word	0x2000c6a0
    ff94:	00011f05 	.word	0x00011f05
    ff98:	000022a5 	.word	0x000022a5
    ff9c:	00012b2b 	.word	0x00012b2b
    ffa0:	000252dc 	.word	0x000252dc
    ffa4:	0002530c 	.word	0x0002530c
    ffa8:	00012251 	.word	0x00012251
    ffac:	00023fcc 	.word	0x00023fcc
    ffb0:	000022ad 	.word	0x000022ad

0000ffb4 <_lv_img_decoder_init>:
{
    ffb4:	b510      	push	{r4, lr}
    ffb6:	b082      	sub	sp, #8
    _lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
    ffb8:	2110      	movs	r1, #16
    ffba:	4814      	ldr	r0, [pc, #80]	; (1000c <STACK_SIZE+0xc>)
    ffbc:	4b14      	ldr	r3, [pc, #80]	; (10010 <STACK_SIZE+0x10>)
    ffbe:	4798      	blx	r3
    decoder = lv_img_decoder_create();
    ffc0:	4b14      	ldr	r3, [pc, #80]	; (10014 <STACK_SIZE+0x14>)
    ffc2:	4798      	blx	r3
    if(decoder == NULL) {
    ffc4:	b148      	cbz	r0, ffda <_lv_img_decoder_init+0x26>
    decoder->info_cb = info_cb;
    ffc6:	4a14      	ldr	r2, [pc, #80]	; (10018 <STACK_SIZE+0x18>)
    ffc8:	6002      	str	r2, [r0, #0]
    decoder->open_cb = open_cb;
    ffca:	4a14      	ldr	r2, [pc, #80]	; (1001c <STACK_SIZE+0x1c>)
    ffcc:	6042      	str	r2, [r0, #4]
    decoder->read_line_cb = read_line_cb;
    ffce:	4a14      	ldr	r2, [pc, #80]	; (10020 <STACK_SIZE+0x20>)
    ffd0:	6082      	str	r2, [r0, #8]
    decoder->close_cb = close_cb;
    ffd2:	4a14      	ldr	r2, [pc, #80]	; (10024 <STACK_SIZE+0x24>)
    ffd4:	60c2      	str	r2, [r0, #12]
}
    ffd6:	b002      	add	sp, #8
    ffd8:	bd10      	pop	{r4, pc}
        LV_LOG_WARN("lv_img_decoder_init: out of memory");
    ffda:	4b13      	ldr	r3, [pc, #76]	; (10028 <STACK_SIZE+0x28>)
    ffdc:	9300      	str	r3, [sp, #0]
    ffde:	4b13      	ldr	r3, [pc, #76]	; (1002c <STACK_SIZE+0x2c>)
    ffe0:	2247      	movs	r2, #71	; 0x47
    ffe2:	4913      	ldr	r1, [pc, #76]	; (10030 <STACK_SIZE+0x30>)
    ffe4:	2002      	movs	r0, #2
    ffe6:	4c13      	ldr	r4, [pc, #76]	; (10034 <STACK_SIZE+0x34>)
    ffe8:	47a0      	blx	r4
        LV_ASSERT_MEM(decoder);
    ffea:	2000      	movs	r0, #0
    ffec:	4b12      	ldr	r3, [pc, #72]	; (10038 <STACK_SIZE+0x38>)
    ffee:	4798      	blx	r3
    fff0:	2800      	cmp	r0, #0
    fff2:	d1f0      	bne.n	ffd6 <_lv_img_decoder_init+0x22>
    fff4:	4b0d      	ldr	r3, [pc, #52]	; (1002c <STACK_SIZE+0x2c>)
    fff6:	9300      	str	r3, [sp, #0]
    fff8:	2248      	movs	r2, #72	; 0x48
    fffa:	490d      	ldr	r1, [pc, #52]	; (10030 <STACK_SIZE+0x30>)
    fffc:	2003      	movs	r0, #3
    fffe:	47a0      	blx	r4
   10000:	2200      	movs	r2, #0
   10002:	2300      	movs	r3, #0
   10004:	480d      	ldr	r0, [pc, #52]	; (1003c <STACK_SIZE+0x3c>)
   10006:	490e      	ldr	r1, [pc, #56]	; (10040 <STACK_SIZE+0x40>)
   10008:	4788      	blx	r1
   1000a:	e7fe      	b.n	1000a <STACK_SIZE+0xa>
   1000c:	2000c6a0 	.word	0x2000c6a0
   10010:	00011eed 	.word	0x00011eed
   10014:	0000ff55 	.word	0x0000ff55
   10018:	0000f4e1 	.word	0x0000f4e1
   1001c:	0000f619 	.word	0x0000f619
   10020:	0000f9b9 	.word	0x0000f9b9
   10024:	0000f5dd 	.word	0x0000f5dd
   10028:	00025494 	.word	0x00025494
   1002c:	000252f4 	.word	0x000252f4
   10030:	0002530c 	.word	0x0002530c
   10034:	00012251 	.word	0x00012251
   10038:	000022a5 	.word	0x000022a5
   1003c:	00023fcc 	.word	0x00023fcc
   10040:	000022ad 	.word	0x000022ad

00010044 <lv_font_get_glyph_bitmap>:
 * @param font_p pointer to a font
 * @param letter an UNICODE character code
 * @return  pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
   10044:	b508      	push	{r3, lr}
    return font_p->get_glyph_bitmap(font_p, letter);
   10046:	6843      	ldr	r3, [r0, #4]
   10048:	4798      	blx	r3
}
   1004a:	bd08      	pop	{r3, pc}

0001004c <lv_font_get_glyph_dsc>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{
   1004c:	b510      	push	{r4, lr}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
   1004e:	6804      	ldr	r4, [r0, #0]
   10050:	47a0      	blx	r4
}
   10052:	bd10      	pop	{r4, pc}

00010054 <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
   10054:	b510      	push	{r4, lr}
   10056:	b084      	sub	sp, #16
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
   10058:	4613      	mov	r3, r2
   1005a:	460a      	mov	r2, r1
   1005c:	a901      	add	r1, sp, #4
   1005e:	4c04      	ldr	r4, [pc, #16]	; (10070 <lv_font_get_glyph_width+0x1c>)
   10060:	47a0      	blx	r4
    if(ret) return g.adv_w;
   10062:	b118      	cbz	r0, 1006c <lv_font_get_glyph_width+0x18>
   10064:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    else return 0;
}
   10068:	b004      	add	sp, #16
   1006a:	bd10      	pop	{r4, pc}
    else return 0;
   1006c:	2000      	movs	r0, #0
   1006e:	e7fb      	b.n	10068 <lv_font_get_glyph_width+0x14>
   10070:	0001004d 	.word	0x0001004d

00010074 <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
   10074:	7803      	ldrb	r3, [r0, #0]
   10076:	780a      	ldrb	r2, [r1, #0]
   10078:	4293      	cmp	r3, r2
   1007a:	bf11      	iteee	ne
   1007c:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];
   1007e:	7840      	ldrbeq	r0, [r0, #1]
   10080:	784b      	ldrbeq	r3, [r1, #1]
   10082:	1ac0      	subeq	r0, r0, r3

}
   10084:	4770      	bx	lr

00010086 <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
   10086:	8803      	ldrh	r3, [r0, #0]
   10088:	880a      	ldrh	r2, [r1, #0]
   1008a:	4293      	cmp	r3, r2
   1008c:	bf11      	iteee	ne
   1008e:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
   10090:	8840      	ldrheq	r0, [r0, #2]
   10092:	884b      	ldrheq	r3, [r1, #2]
   10094:	1ac0      	subeq	r0, r0, r3
}
   10096:	4770      	bx	lr

00010098 <unicode_list_compare>:
 *  @retval > 0   Reference is less than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
   10098:	8800      	ldrh	r0, [r0, #0]
   1009a:	880b      	ldrh	r3, [r1, #0]
}
   1009c:	1ac0      	subs	r0, r0, r3
   1009e:	4770      	bx	lr

000100a0 <get_glyph_dsc_id>:
    if(letter == '\0') return 0;
   100a0:	460b      	mov	r3, r1
   100a2:	2900      	cmp	r1, #0
   100a4:	d06c      	beq.n	10180 <get_glyph_dsc_id+0xe0>
{
   100a6:	b5f0      	push	{r4, r5, r6, r7, lr}
   100a8:	b085      	sub	sp, #20
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
   100aa:	6904      	ldr	r4, [r0, #16]
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
   100ac:	69a2      	ldr	r2, [r4, #24]
   100ae:	4291      	cmp	r1, r2
   100b0:	d015      	beq.n	100de <get_glyph_dsc_id+0x3e>
    for(i = 0; i < fdsc->cmap_num; i++) {
   100b2:	8a67      	ldrh	r7, [r4, #18]
   100b4:	f3c7 0709 	ubfx	r7, r7, #0, #10
   100b8:	2f00      	cmp	r7, #0
   100ba:	d05d      	beq.n	10178 <get_glyph_dsc_id+0xd8>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
   100bc:	68a1      	ldr	r1, [r4, #8]
   100be:	6808      	ldr	r0, [r1, #0]
   100c0:	1a1a      	subs	r2, r3, r0
   100c2:	9203      	str	r2, [sp, #12]
        if(rcp > fdsc->cmaps[i].range_length) continue;
   100c4:	8888      	ldrh	r0, [r1, #4]
   100c6:	4282      	cmp	r2, r0
   100c8:	d80b      	bhi.n	100e2 <get_glyph_dsc_id+0x42>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
   100ca:	2600      	movs	r6, #0
   100cc:	461d      	mov	r5, r3
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
   100ce:	7c8b      	ldrb	r3, [r1, #18]
   100d0:	b9e3      	cbnz	r3, 1010c <get_glyph_dsc_id+0x6c>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
   100d2:	88c8      	ldrh	r0, [r1, #6]
   100d4:	4410      	add	r0, r2
        fdsc->last_letter = letter;
   100d6:	61a5      	str	r5, [r4, #24]
        fdsc->last_glyph_id = glyph_id;
   100d8:	61e0      	str	r0, [r4, #28]
}
   100da:	b005      	add	sp, #20
   100dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
   100de:	69e0      	ldr	r0, [r4, #28]
   100e0:	e7fb      	b.n	100da <get_glyph_dsc_id+0x3a>
        if(rcp > fdsc->cmaps[i].range_length) continue;
   100e2:	2500      	movs	r5, #0
    for(i = 0; i < fdsc->cmap_num; i++) {
   100e4:	3501      	adds	r5, #1
   100e6:	b2ad      	uxth	r5, r5
   100e8:	42bd      	cmp	r5, r7
   100ea:	da45      	bge.n	10178 <get_glyph_dsc_id+0xd8>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
   100ec:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   100f0:	0082      	lsls	r2, r0, #2
   100f2:	4616      	mov	r6, r2
   100f4:	eb01 0e02 	add.w	lr, r1, r2
   100f8:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
   100fc:	1a9a      	subs	r2, r3, r2
   100fe:	9203      	str	r2, [sp, #12]
        if(rcp > fdsc->cmaps[i].range_length) continue;
   10100:	f8be 0004 	ldrh.w	r0, [lr, #4]
   10104:	4282      	cmp	r2, r0
   10106:	d8ed      	bhi.n	100e4 <get_glyph_dsc_id+0x44>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
   10108:	4671      	mov	r1, lr
   1010a:	e7df      	b.n	100cc <get_glyph_dsc_id+0x2c>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
   1010c:	2b01      	cmp	r3, #1
   1010e:	d005      	beq.n	1011c <get_glyph_dsc_id+0x7c>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
   10110:	2b02      	cmp	r3, #2
   10112:	d008      	beq.n	10126 <get_glyph_dsc_id+0x86>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
   10114:	2b03      	cmp	r3, #3
   10116:	d018      	beq.n	1014a <get_glyph_dsc_id+0xaa>
        uint32_t glyph_id = 0;
   10118:	2000      	movs	r0, #0
   1011a:	e7dc      	b.n	100d6 <get_glyph_dsc_id+0x36>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
   1011c:	68cb      	ldr	r3, [r1, #12]
   1011e:	5c9b      	ldrb	r3, [r3, r2]
   10120:	88c8      	ldrh	r0, [r1, #6]
   10122:	4418      	add	r0, r3
   10124:	e7d7      	b.n	100d6 <get_glyph_dsc_id+0x36>
            uint8_t * p = _lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
   10126:	8a0a      	ldrh	r2, [r1, #16]
   10128:	6889      	ldr	r1, [r1, #8]
   1012a:	4b16      	ldr	r3, [pc, #88]	; (10184 <get_glyph_dsc_id+0xe4>)
   1012c:	9300      	str	r3, [sp, #0]
   1012e:	2302      	movs	r3, #2
   10130:	a803      	add	r0, sp, #12
   10132:	4f15      	ldr	r7, [pc, #84]	; (10188 <get_glyph_dsc_id+0xe8>)
   10134:	47b8      	blx	r7
            if(p) {
   10136:	4603      	mov	r3, r0
   10138:	b1d0      	cbz	r0, 10170 <get_glyph_dsc_id+0xd0>
                lv_uintptr_t ofs = (lv_uintptr_t)(p - (uint8_t *) fdsc->cmaps[i].unicode_list);
   1013a:	68a2      	ldr	r2, [r4, #8]
   1013c:	4416      	add	r6, r2
   1013e:	68b0      	ldr	r0, [r6, #8]
   10140:	1a18      	subs	r0, r3, r0
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
   10142:	88f3      	ldrh	r3, [r6, #6]
   10144:	eb03 0050 	add.w	r0, r3, r0, lsr #1
   10148:	e7c5      	b.n	100d6 <get_glyph_dsc_id+0x36>
            uint8_t * p = _lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
   1014a:	8a0a      	ldrh	r2, [r1, #16]
   1014c:	6889      	ldr	r1, [r1, #8]
   1014e:	4b0d      	ldr	r3, [pc, #52]	; (10184 <get_glyph_dsc_id+0xe4>)
   10150:	9300      	str	r3, [sp, #0]
   10152:	2302      	movs	r3, #2
   10154:	a803      	add	r0, sp, #12
   10156:	4f0c      	ldr	r7, [pc, #48]	; (10188 <get_glyph_dsc_id+0xe8>)
   10158:	47b8      	blx	r7
            if(p) {
   1015a:	b158      	cbz	r0, 10174 <get_glyph_dsc_id+0xd4>
                lv_uintptr_t ofs = (lv_uintptr_t)(p - (uint8_t *) fdsc->cmaps[i].unicode_list);
   1015c:	68a2      	ldr	r2, [r4, #8]
   1015e:	4416      	add	r6, r2
   10160:	68b2      	ldr	r2, [r6, #8]
   10162:	1a83      	subs	r3, r0, r2
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
   10164:	085b      	lsrs	r3, r3, #1
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
   10166:	68f2      	ldr	r2, [r6, #12]
   10168:	5cd3      	ldrb	r3, [r2, r3]
   1016a:	88f0      	ldrh	r0, [r6, #6]
   1016c:	4418      	add	r0, r3
   1016e:	e7b2      	b.n	100d6 <get_glyph_dsc_id+0x36>
        uint32_t glyph_id = 0;
   10170:	2000      	movs	r0, #0
   10172:	e7b0      	b.n	100d6 <get_glyph_dsc_id+0x36>
   10174:	2000      	movs	r0, #0
   10176:	e7ae      	b.n	100d6 <get_glyph_dsc_id+0x36>
    fdsc->last_letter = letter;
   10178:	61a3      	str	r3, [r4, #24]
    fdsc->last_glyph_id = 0;
   1017a:	2000      	movs	r0, #0
   1017c:	61e0      	str	r0, [r4, #28]
    return 0;
   1017e:	e7ac      	b.n	100da <get_glyph_dsc_id+0x3a>
    if(letter == '\0') return 0;
   10180:	4608      	mov	r0, r1
   10182:	4770      	bx	lr
   10184:	00010099 	.word	0x00010099
   10188:	00014179 	.word	0x00014179

0001018c <lv_font_get_bitmap_fmt_txt>:
{
   1018c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10190:	b09f      	sub	sp, #124	; 0x7c
    if(unicode_letter == '\t') unicode_letter = ' ';
   10192:	2909      	cmp	r1, #9
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
   10194:	6905      	ldr	r5, [r0, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
   10196:	bf08      	it	eq
   10198:	2120      	moveq	r1, #32
   1019a:	4ba0      	ldr	r3, [pc, #640]	; (1041c <lv_font_get_bitmap_fmt_txt+0x290>)
   1019c:	4798      	blx	r3
    if(!gid) return NULL;
   1019e:	2800      	cmp	r0, #0
   101a0:	f000 84ea 	beq.w	10b78 <lv_font_get_bitmap_fmt_txt+0x9ec>
   101a4:	4680      	mov	r8, r0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
   101a6:	686f      	ldr	r7, [r5, #4]
   101a8:	eb07 06c0 	add.w	r6, r7, r0, lsl #3
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
   101ac:	7d2b      	ldrb	r3, [r5, #20]
   101ae:	f013 0f03 	tst.w	r3, #3
   101b2:	d10b      	bne.n	101cc <lv_font_get_bitmap_fmt_txt+0x40>
        if(gdsc) return &fdsc->glyph_bitmap[gdsc->bitmap_index];
   101b4:	2e00      	cmp	r6, #0
   101b6:	f000 84e2 	beq.w	10b7e <lv_font_get_bitmap_fmt_txt+0x9f2>
   101ba:	f857 3030 	ldr.w	r3, [r7, r0, lsl #3]
   101be:	f3c3 0313 	ubfx	r3, r3, #0, #20
   101c2:	6828      	ldr	r0, [r5, #0]
   101c4:	4418      	add	r0, r3
}
   101c6:	b01f      	add	sp, #124	; 0x7c
   101c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t gsize = gdsc->box_w * gdsc->box_h;
   101cc:	7933      	ldrb	r3, [r6, #4]
   101ce:	7974      	ldrb	r4, [r6, #5]
   101d0:	fb04 f403 	mul.w	r4, r4, r3
        if(gsize == 0) return NULL;
   101d4:	2c00      	cmp	r4, #0
   101d6:	f000 84d5 	beq.w	10b84 <lv_font_get_bitmap_fmt_txt+0x9f8>
        switch(fdsc->bpp) {
   101da:	7ceb      	ldrb	r3, [r5, #19]
   101dc:	f3c3 0383 	ubfx	r3, r3, #2, #4
   101e0:	3b01      	subs	r3, #1
   101e2:	2b03      	cmp	r3, #3
   101e4:	d805      	bhi.n	101f2 <lv_font_get_bitmap_fmt_txt+0x66>
   101e6:	e8df f003 	tbb	[pc, r3]
   101ea:	7502      	.short	0x7502
   101ec:	7b78      	.short	0x7b78
                buf_size = (gsize + 7) >> 3;
   101ee:	3407      	adds	r4, #7
   101f0:	08e4      	lsrs	r4, r4, #3
        if(_lv_mem_get_size(decompr_buf) < buf_size) {
   101f2:	4b8b      	ldr	r3, [pc, #556]	; (10420 <lv_font_get_bitmap_fmt_txt+0x294>)
   101f4:	6818      	ldr	r0, [r3, #0]
   101f6:	4b8b      	ldr	r3, [pc, #556]	; (10424 <lv_font_get_bitmap_fmt_txt+0x298>)
   101f8:	4798      	blx	r3
   101fa:	4284      	cmp	r4, r0
   101fc:	d911      	bls.n	10222 <lv_font_get_bitmap_fmt_txt+0x96>
            decompr_buf = lv_mem_realloc(decompr_buf, buf_size);
   101fe:	f8df 9220 	ldr.w	r9, [pc, #544]	; 10420 <lv_font_get_bitmap_fmt_txt+0x294>
   10202:	4621      	mov	r1, r4
   10204:	f8d9 0000 	ldr.w	r0, [r9]
   10208:	4b87      	ldr	r3, [pc, #540]	; (10428 <lv_font_get_bitmap_fmt_txt+0x29c>)
   1020a:	4798      	blx	r3
   1020c:	f8c9 0000 	str.w	r0, [r9]
            LV_ASSERT_MEM(decompr_buf);
   10210:	4b86      	ldr	r3, [pc, #536]	; (1042c <lv_font_get_bitmap_fmt_txt+0x2a0>)
   10212:	4798      	blx	r3
   10214:	2800      	cmp	r0, #0
   10216:	d066      	beq.n	102e6 <lv_font_get_bitmap_fmt_txt+0x15a>
            if(decompr_buf == NULL) return NULL;
   10218:	4b81      	ldr	r3, [pc, #516]	; (10420 <lv_font_get_bitmap_fmt_txt+0x294>)
   1021a:	681b      	ldr	r3, [r3, #0]
   1021c:	2b00      	cmp	r3, #0
   1021e:	f000 84b4 	beq.w	10b8a <lv_font_get_bitmap_fmt_txt+0x9fe>
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], decompr_buf, gdsc->box_w, gdsc->box_h, (uint8_t)fdsc->bpp);
   10222:	f857 1038 	ldr.w	r1, [r7, r8, lsl #3]
   10226:	f3c1 0113 	ubfx	r1, r1, #0, #20
   1022a:	682b      	ldr	r3, [r5, #0]
   1022c:	4419      	add	r1, r3
   1022e:	4b7c      	ldr	r3, [pc, #496]	; (10420 <lv_font_get_bitmap_fmt_txt+0x294>)
   10230:	f8d3 9000 	ldr.w	r9, [r3]
   10234:	7933      	ldrb	r3, [r6, #4]
   10236:	930c      	str	r3, [sp, #48]	; 0x30
   10238:	469b      	mov	fp, r3
   1023a:	b21a      	sxth	r2, r3
   1023c:	4617      	mov	r7, r2
   1023e:	9218      	str	r2, [sp, #96]	; 0x60
   10240:	7972      	ldrb	r2, [r6, #5]
   10242:	9215      	str	r2, [sp, #84]	; 0x54
   10244:	7cea      	ldrb	r2, [r5, #19]
   10246:	f3c2 0283 	ubfx	r2, r2, #2, #4
   1024a:	b2d3      	uxtb	r3, r2
   1024c:	930f      	str	r3, [sp, #60]	; 0x3c
    if(bpp == 3) wr_size = 4;
   1024e:	2b03      	cmp	r3, #3
   10250:	bf14      	ite	ne
   10252:	4618      	movne	r0, r3
   10254:	2004      	moveq	r0, #4
   10256:	9008      	str	r0, [sp, #32]
    rle_in = in;
   10258:	4b71      	ldr	r3, [pc, #452]	; (10420 <lv_font_get_bitmap_fmt_txt+0x294>)
   1025a:	6059      	str	r1, [r3, #4]
    rle_bpp = bpp;
   1025c:	721a      	strb	r2, [r3, #8]
    rle_state = RLE_STATE_SINGLE;
   1025e:	2200      	movs	r2, #0
   10260:	725a      	strb	r2, [r3, #9]
    rle_rdp = 0;
   10262:	60da      	str	r2, [r3, #12]
    rle_prev_v = 0;
   10264:	741a      	strb	r2, [r3, #16]
    rle_cnt = 0;
   10266:	745a      	strb	r2, [r3, #17]
    uint8_t * line_buf1 = _lv_mem_buf_get(w);
   10268:	4658      	mov	r0, fp
   1026a:	4c71      	ldr	r4, [pc, #452]	; (10430 <lv_font_get_bitmap_fmt_txt+0x2a4>)
   1026c:	47a0      	blx	r4
   1026e:	9016      	str	r0, [sp, #88]	; 0x58
    uint8_t * line_buf2 = _lv_mem_buf_get(w);
   10270:	4658      	mov	r0, fp
   10272:	47a0      	blx	r4
   10274:	9017      	str	r0, [sp, #92]	; 0x5c
    for(i = 0; i < w; i++) {
   10276:	2f00      	cmp	r7, #0
   10278:	f000 8251 	beq.w	1071e <lv_font_get_bitmap_fmt_txt+0x592>
   1027c:	4b68      	ldr	r3, [pc, #416]	; (10420 <lv_font_get_bitmap_fmt_txt+0x294>)
   1027e:	7c19      	ldrb	r1, [r3, #16]
   10280:	9103      	str	r1, [sp, #12]
   10282:	7c5c      	ldrb	r4, [r3, #17]
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
   10284:	685f      	ldr	r7, [r3, #4]
   10286:	68dd      	ldr	r5, [r3, #12]
   10288:	f893 a008 	ldrb.w	sl, [r3, #8]
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
   1028c:	2201      	movs	r2, #1
   1028e:	fa02 f20a 	lsl.w	r2, r2, sl
   10292:	1e51      	subs	r1, r2, #1
    if(bit_pos + len >= 8) {
   10294:	46d0      	mov	r8, sl
   10296:	f1ca 0608 	rsb	r6, sl, #8
   1029a:	960a      	str	r6, [sp, #40]	; 0x28
   1029c:	f1ca 0610 	rsb	r6, sl, #16
   102a0:	9609      	str	r6, [sp, #36]	; 0x24
   102a2:	f893 c009 	ldrb.w	ip, [r3, #9]
   102a6:	9816      	ldr	r0, [sp, #88]	; 0x58
   102a8:	f100 3eff 	add.w	lr, r0, #4294967295
   102ac:	f10b 33ff 	add.w	r3, fp, #4294967295
   102b0:	b29b      	uxth	r3, r3
   102b2:	930d      	str	r3, [sp, #52]	; 0x34
   102b4:	eb00 0b03 	add.w	fp, r0, r3
   102b8:	4676      	mov	r6, lr
   102ba:	2300      	movs	r3, #0
   102bc:	9305      	str	r3, [sp, #20]
   102be:	9307      	str	r3, [sp, #28]
   102c0:	461a      	mov	r2, r3
    switch(len) {
   102c2:	f10a 3aff 	add.w	sl, sl, #4294967295
            rle_rdp += rle_bpp;
   102c6:	2301      	movs	r3, #1
   102c8:	9304      	str	r3, [sp, #16]
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
   102ca:	b2cb      	uxtb	r3, r1
   102cc:	930b      	str	r3, [sp, #44]	; 0x2c
            bit_mask = 0x3;
   102ce:	9206      	str	r2, [sp, #24]
   102d0:	4661      	mov	r1, ip
   102d2:	e034      	b.n	1033e <lv_font_get_bitmap_fmt_txt+0x1b2>
                buf_size = (gsize + 3) >> 2;
   102d4:	3403      	adds	r4, #3
   102d6:	08a4      	lsrs	r4, r4, #2
                break;
   102d8:	e78b      	b.n	101f2 <lv_font_get_bitmap_fmt_txt+0x66>
                buf_size = (gsize + 1) >> 1;
   102da:	3401      	adds	r4, #1
   102dc:	0864      	lsrs	r4, r4, #1
                break;
   102de:	e788      	b.n	101f2 <lv_font_get_bitmap_fmt_txt+0x66>
                buf_size = (gsize + 1) >> 1;
   102e0:	3401      	adds	r4, #1
   102e2:	0864      	lsrs	r4, r4, #1
                break;
   102e4:	e785      	b.n	101f2 <lv_font_get_bitmap_fmt_txt+0x66>
            LV_ASSERT_MEM(decompr_buf);
   102e6:	4b53      	ldr	r3, [pc, #332]	; (10434 <lv_font_get_bitmap_fmt_txt+0x2a8>)
   102e8:	9300      	str	r3, [sp, #0]
   102ea:	2272      	movs	r2, #114	; 0x72
   102ec:	4952      	ldr	r1, [pc, #328]	; (10438 <lv_font_get_bitmap_fmt_txt+0x2ac>)
   102ee:	2003      	movs	r0, #3
   102f0:	4c52      	ldr	r4, [pc, #328]	; (1043c <lv_font_get_bitmap_fmt_txt+0x2b0>)
   102f2:	47a0      	blx	r4
   102f4:	f8d9 2000 	ldr.w	r2, [r9]
   102f8:	2300      	movs	r3, #0
   102fa:	4851      	ldr	r0, [pc, #324]	; (10440 <lv_font_get_bitmap_fmt_txt+0x2b4>)
   102fc:	4951      	ldr	r1, [pc, #324]	; (10444 <lv_font_get_bitmap_fmt_txt+0x2b8>)
   102fe:	4788      	blx	r1
   10300:	e7fe      	b.n	10300 <lv_font_get_bitmap_fmt_txt+0x174>
            bit_mask = 0x3;
   10302:	2003      	movs	r0, #3
    uint32_t byte_pos = bit_pos >> 3;
   10304:	08eb      	lsrs	r3, r5, #3
    bit_pos = bit_pos & 0x7;
   10306:	f005 0207 	and.w	r2, r5, #7
    if(bit_pos + len >= 8) {
   1030a:	eb02 0c08 	add.w	ip, r2, r8
   1030e:	f1bc 0f07 	cmp.w	ip, #7
   10312:	d835      	bhi.n	10380 <lv_font_get_bitmap_fmt_txt+0x1f4>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
   10314:	f817 c003 	ldrb.w	ip, [r7, r3]
   10318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1031a:	1a9a      	subs	r2, r3, r2
   1031c:	fa4c f302 	asr.w	r3, ip, r2
   10320:	4003      	ands	r3, r0
        if(rle_rdp != 0 && rle_prev_v == ret) {
   10322:	b115      	cbz	r5, 1032a <lv_font_get_bitmap_fmt_txt+0x19e>
   10324:	9a03      	ldr	r2, [sp, #12]
   10326:	4293      	cmp	r3, r2
   10328:	d038      	beq.n	1039c <lv_font_get_bitmap_fmt_txt+0x210>
        rle_rdp += rle_bpp;
   1032a:	4445      	add	r5, r8
        rle_prev_v = ret;
   1032c:	9303      	str	r3, [sp, #12]
        rle_rdp += rle_bpp;
   1032e:	2201      	movs	r2, #1
   10330:	9804      	ldr	r0, [sp, #16]
   10332:	9006      	str	r0, [sp, #24]
        out[i] = rle_next();
   10334:	f806 3f01 	strb.w	r3, [r6, #1]!
    for(i = 0; i < w; i++) {
   10338:	455e      	cmp	r6, fp
   1033a:	f000 814e 	beq.w	105da <lv_font_get_bitmap_fmt_txt+0x44e>
    if(rle_state == RLE_STATE_SINGLE) {
   1033e:	bba1      	cbnz	r1, 103aa <lv_font_get_bitmap_fmt_txt+0x21e>
    switch(len) {
   10340:	f1ba 0f07 	cmp.w	sl, #7
   10344:	d818      	bhi.n	10378 <lv_font_get_bitmap_fmt_txt+0x1ec>
   10346:	a301      	add	r3, pc, #4	; (adr r3, 1034c <lv_font_get_bitmap_fmt_txt+0x1c0>)
   10348:	f853 f02a 	ldr.w	pc, [r3, sl, lsl #2]
   1034c:	0001037d 	.word	0x0001037d
   10350:	00010303 	.word	0x00010303
   10354:	0001036d 	.word	0x0001036d
   10358:	00010371 	.word	0x00010371
   1035c:	00010379 	.word	0x00010379
   10360:	00010379 	.word	0x00010379
   10364:	00010379 	.word	0x00010379
   10368:	00010375 	.word	0x00010375
            bit_mask = 0x7;
   1036c:	2007      	movs	r0, #7
   1036e:	e7c9      	b.n	10304 <lv_font_get_bitmap_fmt_txt+0x178>
            bit_mask = 0xF;
   10370:	200f      	movs	r0, #15
   10372:	e7c7      	b.n	10304 <lv_font_get_bitmap_fmt_txt+0x178>
            bit_mask = 0xFF;
   10374:	20ff      	movs	r0, #255	; 0xff
   10376:	e7c5      	b.n	10304 <lv_font_get_bitmap_fmt_txt+0x178>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
   10378:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1037a:	e7c3      	b.n	10304 <lv_font_get_bitmap_fmt_txt+0x178>
            bit_mask = 0x1;
   1037c:	2001      	movs	r0, #1
   1037e:	e7c1      	b.n	10304 <lv_font_get_bitmap_fmt_txt+0x178>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
   10380:	f817 c003 	ldrb.w	ip, [r7, r3]
   10384:	443b      	add	r3, r7
   10386:	785b      	ldrb	r3, [r3, #1]
   10388:	eb03 230c 	add.w	r3, r3, ip, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
   1038c:	fa1f fc83 	uxth.w	ip, r3
   10390:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10392:	1a9a      	subs	r2, r3, r2
   10394:	fa4c f302 	asr.w	r3, ip, r2
   10398:	4003      	ands	r3, r0
   1039a:	e7c2      	b.n	10322 <lv_font_get_bitmap_fmt_txt+0x196>
        if(rle_rdp != 0 && rle_prev_v == ret) {
   1039c:	2201      	movs	r2, #1
   1039e:	9205      	str	r2, [sp, #20]
            rle_cnt = 0;
   103a0:	2400      	movs	r4, #0
        if(rle_rdp != 0 && rle_prev_v == ret) {
   103a2:	9a04      	ldr	r2, [sp, #16]
   103a4:	9207      	str	r2, [sp, #28]
            rle_state = RLE_STATE_REPEATE;
   103a6:	4611      	mov	r1, r2
   103a8:	e7bf      	b.n	1032a <lv_font_get_bitmap_fmt_txt+0x19e>
    else if(rle_state == RLE_STATE_REPEATE) {
   103aa:	2901      	cmp	r1, #1
   103ac:	d004      	beq.n	103b8 <lv_font_get_bitmap_fmt_txt+0x22c>
    else if(rle_state == RLE_STATE_COUNTER) {
   103ae:	2902      	cmp	r1, #2
   103b0:	f000 80cd 	beq.w	1054e <lv_font_get_bitmap_fmt_txt+0x3c2>
    uint8_t ret = 0;
   103b4:	2300      	movs	r3, #0
   103b6:	e7bd      	b.n	10334 <lv_font_get_bitmap_fmt_txt+0x1a8>
    uint32_t byte_pos = bit_pos >> 3;
   103b8:	08eb      	lsrs	r3, r5, #3
    bit_pos = bit_pos & 0x7;
   103ba:	f005 0207 	and.w	r2, r5, #7
    if(bit_pos + len >= 8) {
   103be:	f102 0c01 	add.w	ip, r2, #1
   103c2:	f1bc 0f07 	cmp.w	ip, #7
   103c6:	d813      	bhi.n	103f0 <lv_font_get_bitmap_fmt_txt+0x264>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
   103c8:	5cfb      	ldrb	r3, [r7, r3]
   103ca:	43d2      	mvns	r2, r2
   103cc:	3208      	adds	r2, #8
   103ce:	4113      	asrs	r3, r2
   103d0:	f003 0301 	and.w	r3, r3, #1
        rle_cnt++;
   103d4:	3401      	adds	r4, #1
   103d6:	b2e4      	uxtb	r4, r4
        rle_rdp += 1;
   103d8:	1c6a      	adds	r2, r5, #1
        if(v == 1) {
   103da:	b9b3      	cbnz	r3, 1040a <lv_font_get_bitmap_fmt_txt+0x27e>
    switch(len) {
   103dc:	f1ba 0f07 	cmp.w	sl, #7
   103e0:	f200 80a5 	bhi.w	1052e <lv_font_get_bitmap_fmt_txt+0x3a2>
   103e4:	e8df f00a 	tbb	[pc, sl]
   103e8:	9f9d84a5 	.word	0x9f9d84a5
   103ec:	a1a3a3a3 	.word	0xa1a3a3a3
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
   103f0:	f817 c003 	ldrb.w	ip, [r7, r3]
   103f4:	443b      	add	r3, r7
   103f6:	785b      	ldrb	r3, [r3, #1]
   103f8:	eb03 230c 	add.w	r3, r3, ip, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
   103fc:	b29b      	uxth	r3, r3
   103fe:	43d2      	mvns	r2, r2
   10400:	3210      	adds	r2, #16
   10402:	4113      	asrs	r3, r2
   10404:	f003 0301 	and.w	r3, r3, #1
   10408:	e7e4      	b.n	103d4 <lv_font_get_bitmap_fmt_txt+0x248>
            if(rle_cnt == 11) {
   1040a:	2c0b      	cmp	r4, #11
   1040c:	d01c      	beq.n	10448 <lv_font_get_bitmap_fmt_txt+0x2bc>
        rle_rdp += 1;
   1040e:	4615      	mov	r5, r2
            ret = rle_prev_v;
   10410:	9b03      	ldr	r3, [sp, #12]
            if(rle_cnt == 11) {
   10412:	2201      	movs	r2, #1
   10414:	9205      	str	r2, [sp, #20]
   10416:	9a04      	ldr	r2, [sp, #16]
   10418:	e78c      	b.n	10334 <lv_font_get_bitmap_fmt_txt+0x1a8>
   1041a:	bf00      	nop
   1041c:	000100a1 	.word	0x000100a1
   10420:	20008558 	.word	0x20008558
   10424:	00012545 	.word	0x00012545
   10428:	0001288d 	.word	0x0001288d
   1042c:	000022a5 	.word	0x000022a5
   10430:	00012931 	.word	0x00012931
   10434:	000254b8 	.word	0x000254b8
   10438:	000254d4 	.word	0x000254d4
   1043c:	00012251 	.word	0x00012251
   10440:	00023fcc 	.word	0x00023fcc
   10444:	000022ad 	.word	0x000022ad
    uint32_t byte_pos = bit_pos >> 3;
   10448:	08d3      	lsrs	r3, r2, #3
    bit_pos = bit_pos & 0x7;
   1044a:	f002 0207 	and.w	r2, r2, #7
    if(bit_pos + len >= 8) {
   1044e:	1d91      	adds	r1, r2, #6
   10450:	2907      	cmp	r1, #7
   10452:	d813      	bhi.n	1047c <lv_font_get_bitmap_fmt_txt+0x2f0>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
   10454:	5cfc      	ldrb	r4, [r7, r3]
   10456:	f1c2 0202 	rsb	r2, r2, #2
   1045a:	fa44 f202 	asr.w	r2, r4, r2
   1045e:	f002 043f 	and.w	r4, r2, #63	; 0x3f
                rle_rdp += 6;
   10462:	3507      	adds	r5, #7
                if(rle_cnt != 0) {
   10464:	2c00      	cmp	r4, #0
   10466:	f040 80ad 	bne.w	105c4 <lv_font_get_bitmap_fmt_txt+0x438>
    switch(len) {
   1046a:	f1ba 0f07 	cmp.w	sl, #7
   1046e:	d826      	bhi.n	104be <lv_font_get_bitmap_fmt_txt+0x332>
   10470:	e8df f00a 	tbb	[pc, sl]
   10474:	211f1027 	.word	0x211f1027
   10478:	23252525 	.word	0x23252525
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
   1047c:	5cf9      	ldrb	r1, [r7, r3]
   1047e:	443b      	add	r3, r7
   10480:	785c      	ldrb	r4, [r3, #1]
   10482:	eb04 2401 	add.w	r4, r4, r1, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
   10486:	b2a4      	uxth	r4, r4
   10488:	f1c2 020a 	rsb	r2, r2, #10
   1048c:	4114      	asrs	r4, r2
   1048e:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   10492:	e7e6      	b.n	10462 <lv_font_get_bitmap_fmt_txt+0x2d6>
            bit_mask = 0x3;
   10494:	2003      	movs	r0, #3
    uint32_t byte_pos = bit_pos >> 3;
   10496:	08ea      	lsrs	r2, r5, #3
    bit_pos = bit_pos & 0x7;
   10498:	f005 0307 	and.w	r3, r5, #7
    if(bit_pos + len >= 8) {
   1049c:	eb03 0108 	add.w	r1, r3, r8
   104a0:	2907      	cmp	r1, #7
   104a2:	d810      	bhi.n	104c6 <lv_font_get_bitmap_fmt_txt+0x33a>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
   104a4:	5cba      	ldrb	r2, [r7, r2]
   104a6:	990a      	ldr	r1, [sp, #40]	; 0x28
   104a8:	1acb      	subs	r3, r1, r3
   104aa:	fa42 f303 	asr.w	r3, r2, r3
   104ae:	4003      	ands	r3, r0
   104b0:	e014      	b.n	104dc <lv_font_get_bitmap_fmt_txt+0x350>
            bit_mask = 0x7;
   104b2:	2007      	movs	r0, #7
   104b4:	e7ef      	b.n	10496 <lv_font_get_bitmap_fmt_txt+0x30a>
            bit_mask = 0xF;
   104b6:	200f      	movs	r0, #15
   104b8:	e7ed      	b.n	10496 <lv_font_get_bitmap_fmt_txt+0x30a>
            bit_mask = 0xFF;
   104ba:	20ff      	movs	r0, #255	; 0xff
   104bc:	e7eb      	b.n	10496 <lv_font_get_bitmap_fmt_txt+0x30a>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
   104be:	980b      	ldr	r0, [sp, #44]	; 0x2c
   104c0:	e7e9      	b.n	10496 <lv_font_get_bitmap_fmt_txt+0x30a>
            bit_mask = 0x1;
   104c2:	2001      	movs	r0, #1
   104c4:	e7e7      	b.n	10496 <lv_font_get_bitmap_fmt_txt+0x30a>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
   104c6:	5cb9      	ldrb	r1, [r7, r2]
   104c8:	443a      	add	r2, r7
   104ca:	7852      	ldrb	r2, [r2, #1]
   104cc:	eb02 2201 	add.w	r2, r2, r1, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
   104d0:	b292      	uxth	r2, r2
   104d2:	9909      	ldr	r1, [sp, #36]	; 0x24
   104d4:	1acb      	subs	r3, r1, r3
   104d6:	fa42 f303 	asr.w	r3, r2, r3
   104da:	4003      	ands	r3, r0
                    rle_rdp += rle_bpp;
   104dc:	4445      	add	r5, r8
                    rle_prev_v = ret;
   104de:	9303      	str	r3, [sp, #12]
                    rle_rdp += rle_bpp;
   104e0:	2201      	movs	r2, #1
   104e2:	9205      	str	r2, [sp, #20]
   104e4:	9804      	ldr	r0, [sp, #16]
   104e6:	4602      	mov	r2, r0
   104e8:	9007      	str	r0, [sp, #28]
                    rle_state = RLE_STATE_SINGLE;
   104ea:	2100      	movs	r1, #0
                    rle_rdp += rle_bpp;
   104ec:	9006      	str	r0, [sp, #24]
   104ee:	e721      	b.n	10334 <lv_font_get_bitmap_fmt_txt+0x1a8>
            bit_mask = 0x3;
   104f0:	2003      	movs	r0, #3
    uint32_t byte_pos = bit_pos >> 3;
   104f2:	08d1      	lsrs	r1, r2, #3
    bit_pos = bit_pos & 0x7;
   104f4:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
   104f8:	eb03 0508 	add.w	r5, r3, r8
   104fc:	2d07      	cmp	r5, #7
   104fe:	d81a      	bhi.n	10536 <lv_font_get_bitmap_fmt_txt+0x3aa>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
   10500:	5c79      	ldrb	r1, [r7, r1]
   10502:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   10504:	1aeb      	subs	r3, r5, r3
   10506:	fa41 f303 	asr.w	r3, r1, r3
   1050a:	4003      	ands	r3, r0
            rle_rdp += rle_bpp;
   1050c:	eb02 0508 	add.w	r5, r2, r8
            rle_prev_v = ret;
   10510:	9303      	str	r3, [sp, #12]
            rle_rdp += rle_bpp;
   10512:	2201      	movs	r2, #1
   10514:	9205      	str	r2, [sp, #20]
   10516:	9804      	ldr	r0, [sp, #16]
   10518:	4602      	mov	r2, r0
   1051a:	9007      	str	r0, [sp, #28]
            rle_state = RLE_STATE_SINGLE;
   1051c:	2100      	movs	r1, #0
            rle_rdp += rle_bpp;
   1051e:	9006      	str	r0, [sp, #24]
   10520:	e708      	b.n	10334 <lv_font_get_bitmap_fmt_txt+0x1a8>
            bit_mask = 0x7;
   10522:	2007      	movs	r0, #7
   10524:	e7e5      	b.n	104f2 <lv_font_get_bitmap_fmt_txt+0x366>
            bit_mask = 0xF;
   10526:	200f      	movs	r0, #15
   10528:	e7e3      	b.n	104f2 <lv_font_get_bitmap_fmt_txt+0x366>
            bit_mask = 0xFF;
   1052a:	20ff      	movs	r0, #255	; 0xff
   1052c:	e7e1      	b.n	104f2 <lv_font_get_bitmap_fmt_txt+0x366>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
   1052e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10530:	e7df      	b.n	104f2 <lv_font_get_bitmap_fmt_txt+0x366>
            bit_mask = 0x1;
   10532:	2001      	movs	r0, #1
   10534:	e7dd      	b.n	104f2 <lv_font_get_bitmap_fmt_txt+0x366>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
   10536:	5c7d      	ldrb	r5, [r7, r1]
   10538:	4439      	add	r1, r7
   1053a:	7849      	ldrb	r1, [r1, #1]
   1053c:	eb01 2105 	add.w	r1, r1, r5, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
   10540:	b289      	uxth	r1, r1
   10542:	9d09      	ldr	r5, [sp, #36]	; 0x24
   10544:	1aeb      	subs	r3, r5, r3
   10546:	fa41 f303 	asr.w	r3, r1, r3
   1054a:	4003      	ands	r3, r0
   1054c:	e7de      	b.n	1050c <lv_font_get_bitmap_fmt_txt+0x380>
        rle_cnt--;
   1054e:	3c01      	subs	r4, #1
        if(rle_cnt == 0) {
   10550:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   10554:	d13d      	bne.n	105d2 <lv_font_get_bitmap_fmt_txt+0x446>
    switch(len) {
   10556:	f1ba 0f07 	cmp.w	sl, #7
   1055a:	d823      	bhi.n	105a4 <lv_font_get_bitmap_fmt_txt+0x418>
   1055c:	e8df f00a 	tbb	[pc, sl]
   10560:	1e1c0424 	.word	0x1e1c0424
   10564:	20222222 	.word	0x20222222
            bit_mask = 0x3;
   10568:	2003      	movs	r0, #3
    uint32_t byte_pos = bit_pos >> 3;
   1056a:	08ea      	lsrs	r2, r5, #3
    bit_pos = bit_pos & 0x7;
   1056c:	f005 0307 	and.w	r3, r5, #7
    if(bit_pos + len >= 8) {
   10570:	eb03 0108 	add.w	r1, r3, r8
   10574:	2907      	cmp	r1, #7
   10576:	d819      	bhi.n	105ac <lv_font_get_bitmap_fmt_txt+0x420>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
   10578:	5cba      	ldrb	r2, [r7, r2]
   1057a:	990a      	ldr	r1, [sp, #40]	; 0x28
   1057c:	1acb      	subs	r3, r1, r3
   1057e:	fa42 f303 	asr.w	r3, r2, r3
   10582:	4003      	ands	r3, r0
            rle_rdp += rle_bpp;
   10584:	4445      	add	r5, r8
            rle_prev_v = ret;
   10586:	9303      	str	r3, [sp, #12]
            rle_rdp += rle_bpp;
   10588:	2201      	movs	r2, #1
   1058a:	9205      	str	r2, [sp, #20]
   1058c:	9804      	ldr	r0, [sp, #16]
   1058e:	4602      	mov	r2, r0
   10590:	9007      	str	r0, [sp, #28]
            rle_state = RLE_STATE_SINGLE;
   10592:	2100      	movs	r1, #0
            rle_rdp += rle_bpp;
   10594:	9006      	str	r0, [sp, #24]
   10596:	e6cd      	b.n	10334 <lv_font_get_bitmap_fmt_txt+0x1a8>
            bit_mask = 0x7;
   10598:	2007      	movs	r0, #7
   1059a:	e7e6      	b.n	1056a <lv_font_get_bitmap_fmt_txt+0x3de>
            bit_mask = 0xF;
   1059c:	200f      	movs	r0, #15
   1059e:	e7e4      	b.n	1056a <lv_font_get_bitmap_fmt_txt+0x3de>
            bit_mask = 0xFF;
   105a0:	20ff      	movs	r0, #255	; 0xff
   105a2:	e7e2      	b.n	1056a <lv_font_get_bitmap_fmt_txt+0x3de>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
   105a4:	980b      	ldr	r0, [sp, #44]	; 0x2c
   105a6:	e7e0      	b.n	1056a <lv_font_get_bitmap_fmt_txt+0x3de>
            bit_mask = 0x1;
   105a8:	2001      	movs	r0, #1
   105aa:	e7de      	b.n	1056a <lv_font_get_bitmap_fmt_txt+0x3de>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
   105ac:	5cb9      	ldrb	r1, [r7, r2]
   105ae:	443a      	add	r2, r7
   105b0:	7852      	ldrb	r2, [r2, #1]
   105b2:	eb02 2201 	add.w	r2, r2, r1, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
   105b6:	b292      	uxth	r2, r2
   105b8:	9909      	ldr	r1, [sp, #36]	; 0x24
   105ba:	1acb      	subs	r3, r1, r3
   105bc:	fa42 f303 	asr.w	r3, r2, r3
   105c0:	4003      	ands	r3, r0
   105c2:	e7df      	b.n	10584 <lv_font_get_bitmap_fmt_txt+0x3f8>
            ret = rle_prev_v;
   105c4:	9b03      	ldr	r3, [sp, #12]
                if(rle_cnt != 0) {
   105c6:	2201      	movs	r2, #1
   105c8:	9205      	str	r2, [sp, #20]
   105ca:	9a04      	ldr	r2, [sp, #16]
   105cc:	9207      	str	r2, [sp, #28]
                    rle_state = RLE_STATE_COUNTER;
   105ce:	2102      	movs	r1, #2
   105d0:	e6b0      	b.n	10334 <lv_font_get_bitmap_fmt_txt+0x1a8>
        ret = rle_prev_v;
   105d2:	9b03      	ldr	r3, [sp, #12]
        if(rle_cnt == 0) {
   105d4:	2001      	movs	r0, #1
   105d6:	9005      	str	r0, [sp, #20]
   105d8:	e6ac      	b.n	10334 <lv_font_get_bitmap_fmt_txt+0x1a8>
   105da:	9806      	ldr	r0, [sp, #24]
   105dc:	468c      	mov	ip, r1
   105de:	b9c8      	cbnz	r0, 10614 <lv_font_get_bitmap_fmt_txt+0x488>
   105e0:	b10a      	cbz	r2, 105e6 <lv_font_get_bitmap_fmt_txt+0x45a>
   105e2:	4b9f      	ldr	r3, [pc, #636]	; (10860 <lv_font_get_bitmap_fmt_txt+0x6d4>)
   105e4:	60dd      	str	r5, [r3, #12]
   105e6:	9b07      	ldr	r3, [sp, #28]
   105e8:	b113      	cbz	r3, 105f0 <lv_font_get_bitmap_fmt_txt+0x464>
   105ea:	4b9d      	ldr	r3, [pc, #628]	; (10860 <lv_font_get_bitmap_fmt_txt+0x6d4>)
   105ec:	f883 c009 	strb.w	ip, [r3, #9]
   105f0:	9b05      	ldr	r3, [sp, #20]
   105f2:	b10b      	cbz	r3, 105f8 <lv_font_get_bitmap_fmt_txt+0x46c>
   105f4:	4b9a      	ldr	r3, [pc, #616]	; (10860 <lv_font_get_bitmap_fmt_txt+0x6d4>)
   105f6:	745c      	strb	r4, [r3, #17]
            rle_rdp += rle_bpp;
   105f8:	2000      	movs	r0, #0
    if(len == 3) {
   105fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   105fc:	9303      	str	r3, [sp, #12]
        len = 4;
   105fe:	2704      	movs	r7, #4
                val = 15;
   10600:	f04f 0c0f 	mov.w	ip, #15
                val = 13;
   10604:	f04f 080d 	mov.w	r8, #13
                val = 11;
   10608:	f04f 0a0b 	mov.w	sl, #11
                val = 9;
   1060c:	f04f 0b09 	mov.w	fp, #9
                val = 4;
   10610:	9704      	str	r7, [sp, #16]
   10612:	e028      	b.n	10666 <lv_font_get_bitmap_fmt_txt+0x4da>
   10614:	4b92      	ldr	r3, [pc, #584]	; (10860 <lv_font_get_bitmap_fmt_txt+0x6d4>)
   10616:	f89d 100c 	ldrb.w	r1, [sp, #12]
   1061a:	7419      	strb	r1, [r3, #16]
   1061c:	e7e0      	b.n	105e0 <lv_font_get_bitmap_fmt_txt+0x454>
        switch(val) {
   1061e:	2907      	cmp	r1, #7
   10620:	d83d      	bhi.n	1069e <lv_font_get_bitmap_fmt_txt+0x512>
   10622:	e8df f001 	tbb	[pc, r1]
   10626:	2704      	.short	0x2704
   10628:	33302d2a 	.word	0x33302d2a
   1062c:	3936      	.short	0x3936
        len = 4;
   1062e:	463d      	mov	r5, r7
                val = 0;
   10630:	2100      	movs	r1, #0
    bit_pos = bit_pos & 0x7;
   10632:	f000 0207 	and.w	r2, r0, #7
   10636:	f1c2 0208 	rsb	r2, r2, #8
    bit_pos = 8 - bit_pos - len;
   1063a:	1b52      	subs	r2, r2, r5
    out[byte_pos] &= ((~bit_mask) << bit_pos);
   1063c:	f3c0 04cf 	ubfx	r4, r0, #3, #16
   10640:	f04f 33ff 	mov.w	r3, #4294967295
   10644:	40ab      	lsls	r3, r5
   10646:	f063 03ff 	orn	r3, r3, #255	; 0xff
   1064a:	4093      	lsls	r3, r2
   1064c:	f819 5004 	ldrb.w	r5, [r9, r4]
   10650:	402b      	ands	r3, r5
    out[byte_pos] |= (val << bit_pos);
   10652:	fa01 f202 	lsl.w	r2, r1, r2
   10656:	4313      	orrs	r3, r2
   10658:	f809 3004 	strb.w	r3, [r9, r4]
        wrp += wr_size;
   1065c:	9a08      	ldr	r2, [sp, #32]
   1065e:	4613      	mov	r3, r2
   10660:	4410      	add	r0, r2
    for(x = 0; x < w; x++) {
   10662:	45b6      	cmp	lr, r6
   10664:	d01d      	beq.n	106a2 <lv_font_get_bitmap_fmt_txt+0x516>
        bits_write(out, wrp, line_buf1[x], bpp);
   10666:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    if(len == 3) {
   1066a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1066c:	2b03      	cmp	r3, #3
   1066e:	d0d6      	beq.n	1061e <lv_font_get_bitmap_fmt_txt+0x492>
   10670:	9d03      	ldr	r5, [sp, #12]
   10672:	e7de      	b.n	10632 <lv_font_get_bitmap_fmt_txt+0x4a6>
        len = 4;
   10674:	463d      	mov	r5, r7
                val = 2;
   10676:	2102      	movs	r1, #2
   10678:	e7db      	b.n	10632 <lv_font_get_bitmap_fmt_txt+0x4a6>
        len = 4;
   1067a:	463d      	mov	r5, r7
                val = 4;
   1067c:	9904      	ldr	r1, [sp, #16]
   1067e:	e7d8      	b.n	10632 <lv_font_get_bitmap_fmt_txt+0x4a6>
        len = 4;
   10680:	463d      	mov	r5, r7
                val = 6;
   10682:	2106      	movs	r1, #6
   10684:	e7d5      	b.n	10632 <lv_font_get_bitmap_fmt_txt+0x4a6>
        len = 4;
   10686:	463d      	mov	r5, r7
                val = 9;
   10688:	4659      	mov	r1, fp
   1068a:	e7d2      	b.n	10632 <lv_font_get_bitmap_fmt_txt+0x4a6>
        len = 4;
   1068c:	463d      	mov	r5, r7
                val = 11;
   1068e:	4651      	mov	r1, sl
   10690:	e7cf      	b.n	10632 <lv_font_get_bitmap_fmt_txt+0x4a6>
        len = 4;
   10692:	463d      	mov	r5, r7
                val = 13;
   10694:	4641      	mov	r1, r8
   10696:	e7cc      	b.n	10632 <lv_font_get_bitmap_fmt_txt+0x4a6>
        len = 4;
   10698:	463d      	mov	r5, r7
                val = 15;
   1069a:	4661      	mov	r1, ip
   1069c:	e7c9      	b.n	10632 <lv_font_get_bitmap_fmt_txt+0x4a6>
        len = 4;
   1069e:	463d      	mov	r5, r7
   106a0:	e7c7      	b.n	10632 <lv_font_get_bitmap_fmt_txt+0x4a6>
   106a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   106a4:	fb02 3303 	mla	r3, r2, r3, r3
   106a8:	930e      	str	r3, [sp, #56]	; 0x38
    for(y = 1; y < h; y++) {
   106aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
   106ac:	2b01      	cmp	r3, #1
   106ae:	f340 8255 	ble.w	10b5c <lv_font_get_bitmap_fmt_txt+0x9d0>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
   106b2:	4b6b      	ldr	r3, [pc, #428]	; (10860 <lv_font_get_bitmap_fmt_txt+0x6d4>)
   106b4:	f8d3 8004 	ldr.w	r8, [r3, #4]
   106b8:	7a1a      	ldrb	r2, [r3, #8]
   106ba:	4610      	mov	r0, r2
   106bc:	9219      	str	r2, [sp, #100]	; 0x64
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
   106be:	2201      	movs	r2, #1
   106c0:	fa02 f100 	lsl.w	r1, r2, r0
   106c4:	3901      	subs	r1, #1
   106c6:	b2c9      	uxtb	r1, r1
   106c8:	911b      	str	r1, [sp, #108]	; 0x6c
    if(bit_pos + len >= 8) {
   106ca:	4601      	mov	r1, r0
   106cc:	4682      	mov	sl, r0
   106ce:	7c58      	ldrb	r0, [r3, #17]
   106d0:	9007      	str	r0, [sp, #28]
   106d2:	f1c1 0108 	rsb	r1, r1, #8
   106d6:	910b      	str	r1, [sp, #44]	; 0x2c
   106d8:	f1ca 0110 	rsb	r1, sl, #16
   106dc:	910d      	str	r1, [sp, #52]	; 0x34
   106de:	7c19      	ldrb	r1, [r3, #16]
   106e0:	9103      	str	r1, [sp, #12]
   106e2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   106e6:	f893 b009 	ldrb.w	fp, [r3, #9]
   106ea:	9908      	ldr	r1, [sp, #32]
   106ec:	9112      	str	r1, [sp, #72]	; 0x48
   106ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   106f0:	3b01      	subs	r3, #1
   106f2:	b29b      	uxth	r3, r3
   106f4:	fb01 f103 	mul.w	r1, r1, r3
   106f8:	911a      	str	r1, [sp, #104]	; 0x68
   106fa:	2100      	movs	r1, #0
   106fc:	910a      	str	r1, [sp, #40]	; 0x28
   106fe:	910c      	str	r1, [sp, #48]	; 0x30
   10700:	9106      	str	r1, [sp, #24]
   10702:	9108      	str	r1, [sp, #32]
   10704:	9210      	str	r2, [sp, #64]	; 0x40
   10706:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   10708:	18d3      	adds	r3, r2, r3
   1070a:	931c      	str	r3, [sp, #112]	; 0x70
            rle_rdp += rle_bpp;
   1070c:	2301      	movs	r3, #1
   1070e:	9304      	str	r3, [sp, #16]
    if(len == 3) {
   10710:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   10712:	9209      	str	r2, [sp, #36]	; 0x24
                val = 4;
   10714:	2204      	movs	r2, #4
   10716:	921d      	str	r2, [sp, #116]	; 0x74
            rle_rdp += rle_bpp;
   10718:	9305      	str	r3, [sp, #20]
   1071a:	4666      	mov	r6, ip
   1071c:	e1f5      	b.n	10b0a <lv_font_get_bitmap_fmt_txt+0x97e>
    for(i = 0; i < w; i++) {
   1071e:	2300      	movs	r3, #0
   10720:	930e      	str	r3, [sp, #56]	; 0x38
   10722:	e7c2      	b.n	106aa <lv_font_get_bitmap_fmt_txt+0x51e>
            bit_mask = 0x3;
   10724:	f04f 0903 	mov.w	r9, #3
   10728:	e00c      	b.n	10744 <lv_font_get_bitmap_fmt_txt+0x5b8>
            bit_mask = 0x7;
   1072a:	f04f 0907 	mov.w	r9, #7
   1072e:	e009      	b.n	10744 <lv_font_get_bitmap_fmt_txt+0x5b8>
            bit_mask = 0xF;
   10730:	f04f 090f 	mov.w	r9, #15
   10734:	e006      	b.n	10744 <lv_font_get_bitmap_fmt_txt+0x5b8>
            bit_mask = 0xFF;
   10736:	46e1      	mov	r9, ip
   10738:	e004      	b.n	10744 <lv_font_get_bitmap_fmt_txt+0x5b8>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
   1073a:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
   1073e:	e001      	b.n	10744 <lv_font_get_bitmap_fmt_txt+0x5b8>
            bit_mask = 0x1;
   10740:	f8dd 9010 	ldr.w	r9, [sp, #16]
    uint32_t byte_pos = bit_pos >> 3;
   10744:	08f3      	lsrs	r3, r6, #3
    bit_pos = bit_pos & 0x7;
   10746:	f006 0207 	and.w	r2, r6, #7
    if(bit_pos + len >= 8) {
   1074a:	eb02 0b0a 	add.w	fp, r2, sl
   1074e:	f1bb 0f07 	cmp.w	fp, #7
   10752:	d831      	bhi.n	107b8 <lv_font_get_bitmap_fmt_txt+0x62c>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
   10754:	f818 3003 	ldrb.w	r3, [r8, r3]
   10758:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1075a:	1aaa      	subs	r2, r5, r2
   1075c:	fa43 f202 	asr.w	r2, r3, r2
   10760:	ea02 0909 	and.w	r9, r2, r9
   10764:	fa5f f989 	uxtb.w	r9, r9
        if(rle_rdp != 0 && rle_prev_v == ret) {
   10768:	b116      	cbz	r6, 10770 <lv_font_get_bitmap_fmt_txt+0x5e4>
   1076a:	9b03      	ldr	r3, [sp, #12]
   1076c:	454b      	cmp	r3, r9
   1076e:	d033      	beq.n	107d8 <lv_font_get_bitmap_fmt_txt+0x64c>
        rle_rdp += rle_bpp;
   10770:	4456      	add	r6, sl
        rle_prev_v = ret;
   10772:	f8cd 900c 	str.w	r9, [sp, #12]
        rle_rdp += rle_bpp;
   10776:	9b04      	ldr	r3, [sp, #16]
   10778:	9306      	str	r3, [sp, #24]
   1077a:	9b05      	ldr	r3, [sp, #20]
   1077c:	9308      	str	r3, [sp, #32]
        out[i] = rle_next();
   1077e:	f804 9f01 	strb.w	r9, [r4, #1]!
    for(i = 0; i < w; i++) {
   10782:	42a0      	cmp	r0, r4
   10784:	f000 815d 	beq.w	10a42 <lv_font_get_bitmap_fmt_txt+0x8b6>
    if(rle_state == RLE_STATE_SINGLE) {
   10788:	bb69      	cbnz	r1, 107e6 <lv_font_get_bitmap_fmt_txt+0x65a>
    switch(len) {
   1078a:	9b07      	ldr	r3, [sp, #28]
   1078c:	461a      	mov	r2, r3
   1078e:	2a07      	cmp	r2, #7
   10790:	d8d3      	bhi.n	1073a <lv_font_get_bitmap_fmt_txt+0x5ae>
   10792:	a301      	add	r3, pc, #4	; (adr r3, 10798 <lv_font_get_bitmap_fmt_txt+0x60c>)
   10794:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   10798:	00010741 	.word	0x00010741
   1079c:	00010725 	.word	0x00010725
   107a0:	0001072b 	.word	0x0001072b
   107a4:	00010731 	.word	0x00010731
   107a8:	0001073b 	.word	0x0001073b
   107ac:	0001073b 	.word	0x0001073b
   107b0:	0001073b 	.word	0x0001073b
   107b4:	00010737 	.word	0x00010737
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
   107b8:	f818 b003 	ldrb.w	fp, [r8, r3]
   107bc:	4443      	add	r3, r8
   107be:	785b      	ldrb	r3, [r3, #1]
   107c0:	eb03 230b 	add.w	r3, r3, fp, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
   107c4:	b29b      	uxth	r3, r3
   107c6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   107c8:	1aaa      	subs	r2, r5, r2
   107ca:	fa43 f202 	asr.w	r2, r3, r2
   107ce:	ea02 0209 	and.w	r2, r2, r9
   107d2:	fa5f f982 	uxtb.w	r9, r2
   107d6:	e7c7      	b.n	10768 <lv_font_get_bitmap_fmt_txt+0x5dc>
        if(rle_rdp != 0 && rle_prev_v == ret) {
   107d8:	9b04      	ldr	r3, [sp, #16]
   107da:	930a      	str	r3, [sp, #40]	; 0x28
            rle_cnt = 0;
   107dc:	4677      	mov	r7, lr
        if(rle_rdp != 0 && rle_prev_v == ret) {
   107de:	9b05      	ldr	r3, [sp, #20]
   107e0:	930c      	str	r3, [sp, #48]	; 0x30
            rle_state = RLE_STATE_REPEATE;
   107e2:	4619      	mov	r1, r3
   107e4:	e7c4      	b.n	10770 <lv_font_get_bitmap_fmt_txt+0x5e4>
    else if(rle_state == RLE_STATE_REPEATE) {
   107e6:	2901      	cmp	r1, #1
   107e8:	d004      	beq.n	107f4 <lv_font_get_bitmap_fmt_txt+0x668>
    else if(rle_state == RLE_STATE_COUNTER) {
   107ea:	2902      	cmp	r1, #2
   107ec:	f000 80d7 	beq.w	1099e <lv_font_get_bitmap_fmt_txt+0x812>
    uint8_t ret = 0;
   107f0:	46f1      	mov	r9, lr
   107f2:	e7c4      	b.n	1077e <lv_font_get_bitmap_fmt_txt+0x5f2>
    uint32_t byte_pos = bit_pos >> 3;
   107f4:	08f3      	lsrs	r3, r6, #3
    bit_pos = bit_pos & 0x7;
   107f6:	f006 0207 	and.w	r2, r6, #7
    if(bit_pos + len >= 8) {
   107fa:	f102 0901 	add.w	r9, r2, #1
   107fe:	f1b9 0f07 	cmp.w	r9, #7
   10802:	d815      	bhi.n	10830 <lv_font_get_bitmap_fmt_txt+0x6a4>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
   10804:	f818 3003 	ldrb.w	r3, [r8, r3]
   10808:	43d2      	mvns	r2, r2
   1080a:	3208      	adds	r2, #8
   1080c:	4113      	asrs	r3, r2
   1080e:	f003 0301 	and.w	r3, r3, #1
        rle_cnt++;
   10812:	1c7a      	adds	r2, r7, #1
   10814:	b2d7      	uxtb	r7, r2
        rle_rdp += 1;
   10816:	1c72      	adds	r2, r6, #1
        if(v == 1) {
   10818:	b9bb      	cbnz	r3, 1084a <lv_font_get_bitmap_fmt_txt+0x6be>
    switch(len) {
   1081a:	9b07      	ldr	r3, [sp, #28]
   1081c:	4619      	mov	r1, r3
   1081e:	2907      	cmp	r1, #7
   10820:	f200 808e 	bhi.w	10940 <lv_font_get_bitmap_fmt_txt+0x7b4>
   10824:	e8df f001 	tbb	[pc, r1]
   10828:	8886848e 	.word	0x8886848e
   1082c:	8a8c8c8c 	.word	0x8a8c8c8c
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
   10830:	f818 9003 	ldrb.w	r9, [r8, r3]
   10834:	4443      	add	r3, r8
   10836:	785b      	ldrb	r3, [r3, #1]
   10838:	eb03 2309 	add.w	r3, r3, r9, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
   1083c:	b29b      	uxth	r3, r3
   1083e:	43d2      	mvns	r2, r2
   10840:	3210      	adds	r2, #16
   10842:	4113      	asrs	r3, r2
   10844:	f003 0301 	and.w	r3, r3, #1
   10848:	e7e3      	b.n	10812 <lv_font_get_bitmap_fmt_txt+0x686>
            if(rle_cnt == 11) {
   1084a:	2f0b      	cmp	r7, #11
   1084c:	d00a      	beq.n	10864 <lv_font_get_bitmap_fmt_txt+0x6d8>
        rle_rdp += 1;
   1084e:	4616      	mov	r6, r2
            ret = rle_prev_v;
   10850:	f8dd 900c 	ldr.w	r9, [sp, #12]
            if(rle_cnt == 11) {
   10854:	9b04      	ldr	r3, [sp, #16]
   10856:	930a      	str	r3, [sp, #40]	; 0x28
   10858:	9b05      	ldr	r3, [sp, #20]
   1085a:	9306      	str	r3, [sp, #24]
   1085c:	e78f      	b.n	1077e <lv_font_get_bitmap_fmt_txt+0x5f2>
   1085e:	bf00      	nop
   10860:	20008558 	.word	0x20008558
    uint32_t byte_pos = bit_pos >> 3;
   10864:	08d3      	lsrs	r3, r2, #3
    bit_pos = bit_pos & 0x7;
   10866:	f002 0207 	and.w	r2, r2, #7
    if(bit_pos + len >= 8) {
   1086a:	1d91      	adds	r1, r2, #6
   1086c:	2907      	cmp	r1, #7
   1086e:	d815      	bhi.n	1089c <lv_font_get_bitmap_fmt_txt+0x710>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
   10870:	f818 3003 	ldrb.w	r3, [r8, r3]
   10874:	f1c2 0202 	rsb	r2, r2, #2
   10878:	fa43 f202 	asr.w	r2, r3, r2
   1087c:	f002 073f 	and.w	r7, r2, #63	; 0x3f
                rle_rdp += 6;
   10880:	3607      	adds	r6, #7
                if(rle_cnt != 0) {
   10882:	2f00      	cmp	r7, #0
   10884:	f040 80cf 	bne.w	10a26 <lv_font_get_bitmap_fmt_txt+0x89a>
    switch(len) {
   10888:	9b07      	ldr	r3, [sp, #28]
   1088a:	461a      	mov	r2, r3
   1088c:	2a07      	cmp	r2, #7
   1088e:	d839      	bhi.n	10904 <lv_font_get_bitmap_fmt_txt+0x778>
   10890:	e8df f002 	tbb	[pc, r2]
   10894:	3330123b 	.word	0x3330123b
   10898:	36383838 	.word	0x36383838
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
   1089c:	f818 1003 	ldrb.w	r1, [r8, r3]
   108a0:	4443      	add	r3, r8
   108a2:	785b      	ldrb	r3, [r3, #1]
   108a4:	eb03 2301 	add.w	r3, r3, r1, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
   108a8:	b29b      	uxth	r3, r3
   108aa:	f1c2 020a 	rsb	r2, r2, #10
   108ae:	fa43 f202 	asr.w	r2, r3, r2
   108b2:	f002 073f 	and.w	r7, r2, #63	; 0x3f
   108b6:	e7e3      	b.n	10880 <lv_font_get_bitmap_fmt_txt+0x6f4>
            bit_mask = 0x3;
   108b8:	f04f 0903 	mov.w	r9, #3
    uint32_t byte_pos = bit_pos >> 3;
   108bc:	08f3      	lsrs	r3, r6, #3
    bit_pos = bit_pos & 0x7;
   108be:	f006 0207 	and.w	r2, r6, #7
    if(bit_pos + len >= 8) {
   108c2:	eb02 010a 	add.w	r1, r2, sl
   108c6:	2907      	cmp	r1, #7
   108c8:	d822      	bhi.n	10910 <lv_font_get_bitmap_fmt_txt+0x784>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
   108ca:	f818 3003 	ldrb.w	r3, [r8, r3]
   108ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
   108d0:	1a8a      	subs	r2, r1, r2
   108d2:	fa43 f202 	asr.w	r2, r3, r2
   108d6:	ea02 0209 	and.w	r2, r2, r9
   108da:	fa5f f982 	uxtb.w	r9, r2
                    rle_rdp += rle_bpp;
   108de:	4456      	add	r6, sl
                    rle_prev_v = ret;
   108e0:	f8cd 900c 	str.w	r9, [sp, #12]
                    rle_rdp += rle_bpp;
   108e4:	9b04      	ldr	r3, [sp, #16]
   108e6:	930a      	str	r3, [sp, #40]	; 0x28
   108e8:	9b05      	ldr	r3, [sp, #20]
   108ea:	930c      	str	r3, [sp, #48]	; 0x30
                    rle_state = RLE_STATE_SINGLE;
   108ec:	4671      	mov	r1, lr
                    rle_rdp += rle_bpp;
   108ee:	9306      	str	r3, [sp, #24]
   108f0:	9308      	str	r3, [sp, #32]
   108f2:	e744      	b.n	1077e <lv_font_get_bitmap_fmt_txt+0x5f2>
            bit_mask = 0x7;
   108f4:	f04f 0907 	mov.w	r9, #7
   108f8:	e7e0      	b.n	108bc <lv_font_get_bitmap_fmt_txt+0x730>
            bit_mask = 0xF;
   108fa:	f04f 090f 	mov.w	r9, #15
   108fe:	e7dd      	b.n	108bc <lv_font_get_bitmap_fmt_txt+0x730>
            bit_mask = 0xFF;
   10900:	46e1      	mov	r9, ip
   10902:	e7db      	b.n	108bc <lv_font_get_bitmap_fmt_txt+0x730>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
   10904:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
   10908:	e7d8      	b.n	108bc <lv_font_get_bitmap_fmt_txt+0x730>
            bit_mask = 0x1;
   1090a:	f8dd 9010 	ldr.w	r9, [sp, #16]
   1090e:	e7d5      	b.n	108bc <lv_font_get_bitmap_fmt_txt+0x730>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
   10910:	f818 1003 	ldrb.w	r1, [r8, r3]
   10914:	4443      	add	r3, r8
   10916:	785b      	ldrb	r3, [r3, #1]
   10918:	eb03 2301 	add.w	r3, r3, r1, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
   1091c:	b29b      	uxth	r3, r3
   1091e:	990d      	ldr	r1, [sp, #52]	; 0x34
   10920:	1a8a      	subs	r2, r1, r2
   10922:	fa43 f202 	asr.w	r2, r3, r2
   10926:	ea02 0209 	and.w	r2, r2, r9
   1092a:	fa5f f982 	uxtb.w	r9, r2
   1092e:	e7d6      	b.n	108de <lv_font_get_bitmap_fmt_txt+0x752>
            bit_mask = 0x3;
   10930:	2603      	movs	r6, #3
   10932:	e008      	b.n	10946 <lv_font_get_bitmap_fmt_txt+0x7ba>
            bit_mask = 0x7;
   10934:	2607      	movs	r6, #7
   10936:	e006      	b.n	10946 <lv_font_get_bitmap_fmt_txt+0x7ba>
            bit_mask = 0xF;
   10938:	260f      	movs	r6, #15
   1093a:	e004      	b.n	10946 <lv_font_get_bitmap_fmt_txt+0x7ba>
            bit_mask = 0xFF;
   1093c:	4666      	mov	r6, ip
   1093e:	e002      	b.n	10946 <lv_font_get_bitmap_fmt_txt+0x7ba>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
   10940:	9e11      	ldr	r6, [sp, #68]	; 0x44
   10942:	e000      	b.n	10946 <lv_font_get_bitmap_fmt_txt+0x7ba>
            bit_mask = 0x1;
   10944:	9e04      	ldr	r6, [sp, #16]
    uint32_t byte_pos = bit_pos >> 3;
   10946:	08d3      	lsrs	r3, r2, #3
    bit_pos = bit_pos & 0x7;
   10948:	f002 0107 	and.w	r1, r2, #7
    if(bit_pos + len >= 8) {
   1094c:	eb01 090a 	add.w	r9, r1, sl
   10950:	f1b9 0f07 	cmp.w	r9, #7
   10954:	d814      	bhi.n	10980 <lv_font_get_bitmap_fmt_txt+0x7f4>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
   10956:	f818 3003 	ldrb.w	r3, [r8, r3]
   1095a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1095c:	1a69      	subs	r1, r5, r1
   1095e:	fa43 f101 	asr.w	r1, r3, r1
   10962:	4031      	ands	r1, r6
   10964:	fa5f f981 	uxtb.w	r9, r1
            rle_rdp += rle_bpp;
   10968:	eb02 060a 	add.w	r6, r2, sl
            rle_prev_v = ret;
   1096c:	f8cd 900c 	str.w	r9, [sp, #12]
            rle_rdp += rle_bpp;
   10970:	9b04      	ldr	r3, [sp, #16]
   10972:	930a      	str	r3, [sp, #40]	; 0x28
   10974:	9b05      	ldr	r3, [sp, #20]
   10976:	930c      	str	r3, [sp, #48]	; 0x30
            rle_state = RLE_STATE_SINGLE;
   10978:	4671      	mov	r1, lr
            rle_rdp += rle_bpp;
   1097a:	9306      	str	r3, [sp, #24]
   1097c:	9308      	str	r3, [sp, #32]
   1097e:	e6fe      	b.n	1077e <lv_font_get_bitmap_fmt_txt+0x5f2>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
   10980:	f818 9003 	ldrb.w	r9, [r8, r3]
   10984:	4443      	add	r3, r8
   10986:	785b      	ldrb	r3, [r3, #1]
   10988:	eb03 2309 	add.w	r3, r3, r9, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
   1098c:	b29b      	uxth	r3, r3
   1098e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   10990:	1a69      	subs	r1, r5, r1
   10992:	fa43 f101 	asr.w	r1, r3, r1
   10996:	4031      	ands	r1, r6
   10998:	fa5f f981 	uxtb.w	r9, r1
   1099c:	e7e4      	b.n	10968 <lv_font_get_bitmap_fmt_txt+0x7dc>
        rle_cnt--;
   1099e:	1e7b      	subs	r3, r7, #1
        if(rle_cnt == 0) {
   109a0:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
   109a4:	d148      	bne.n	10a38 <lv_font_get_bitmap_fmt_txt+0x8ac>
    switch(len) {
   109a6:	9b07      	ldr	r3, [sp, #28]
   109a8:	461a      	mov	r2, r3
   109aa:	2a07      	cmp	r2, #7
   109ac:	d80d      	bhi.n	109ca <lv_font_get_bitmap_fmt_txt+0x83e>
   109ae:	e8df f002 	tbb	[pc, r2]
   109b2:	040e      	.short	0x040e
   109b4:	0c0c0806 	.word	0x0c0c0806
   109b8:	0a0c      	.short	0x0a0c
            bit_mask = 0x3;
   109ba:	2103      	movs	r1, #3
   109bc:	e008      	b.n	109d0 <lv_font_get_bitmap_fmt_txt+0x844>
            bit_mask = 0x7;
   109be:	2107      	movs	r1, #7
   109c0:	e006      	b.n	109d0 <lv_font_get_bitmap_fmt_txt+0x844>
            bit_mask = 0xF;
   109c2:	210f      	movs	r1, #15
   109c4:	e004      	b.n	109d0 <lv_font_get_bitmap_fmt_txt+0x844>
            bit_mask = 0xFF;
   109c6:	4661      	mov	r1, ip
   109c8:	e002      	b.n	109d0 <lv_font_get_bitmap_fmt_txt+0x844>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
   109ca:	9911      	ldr	r1, [sp, #68]	; 0x44
   109cc:	e000      	b.n	109d0 <lv_font_get_bitmap_fmt_txt+0x844>
            bit_mask = 0x1;
   109ce:	9904      	ldr	r1, [sp, #16]
    uint32_t byte_pos = bit_pos >> 3;
   109d0:	08f3      	lsrs	r3, r6, #3
    bit_pos = bit_pos & 0x7;
   109d2:	f006 0207 	and.w	r2, r6, #7
    if(bit_pos + len >= 8) {
   109d6:	eb02 090a 	add.w	r9, r2, sl
   109da:	f1b9 0f07 	cmp.w	r9, #7
   109de:	d813      	bhi.n	10a08 <lv_font_get_bitmap_fmt_txt+0x87c>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
   109e0:	f818 3003 	ldrb.w	r3, [r8, r3]
   109e4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   109e6:	1aaa      	subs	r2, r5, r2
   109e8:	fa43 f202 	asr.w	r2, r3, r2
   109ec:	400a      	ands	r2, r1
   109ee:	fa5f f982 	uxtb.w	r9, r2
            rle_rdp += rle_bpp;
   109f2:	4456      	add	r6, sl
            rle_prev_v = ret;
   109f4:	f8cd 900c 	str.w	r9, [sp, #12]
            rle_rdp += rle_bpp;
   109f8:	9b04      	ldr	r3, [sp, #16]
   109fa:	930a      	str	r3, [sp, #40]	; 0x28
   109fc:	9b05      	ldr	r3, [sp, #20]
   109fe:	930c      	str	r3, [sp, #48]	; 0x30
            rle_state = RLE_STATE_SINGLE;
   10a00:	4671      	mov	r1, lr
            rle_rdp += rle_bpp;
   10a02:	9306      	str	r3, [sp, #24]
   10a04:	9308      	str	r3, [sp, #32]
   10a06:	e6ba      	b.n	1077e <lv_font_get_bitmap_fmt_txt+0x5f2>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
   10a08:	f818 9003 	ldrb.w	r9, [r8, r3]
   10a0c:	4443      	add	r3, r8
   10a0e:	785b      	ldrb	r3, [r3, #1]
   10a10:	eb03 2309 	add.w	r3, r3, r9, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
   10a14:	b29b      	uxth	r3, r3
   10a16:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   10a18:	1aaa      	subs	r2, r5, r2
   10a1a:	fa43 f202 	asr.w	r2, r3, r2
   10a1e:	400a      	ands	r2, r1
   10a20:	fa5f f982 	uxtb.w	r9, r2
   10a24:	e7e5      	b.n	109f2 <lv_font_get_bitmap_fmt_txt+0x866>
            ret = rle_prev_v;
   10a26:	f8dd 900c 	ldr.w	r9, [sp, #12]
                if(rle_cnt != 0) {
   10a2a:	9b04      	ldr	r3, [sp, #16]
   10a2c:	930a      	str	r3, [sp, #40]	; 0x28
   10a2e:	9b05      	ldr	r3, [sp, #20]
   10a30:	930c      	str	r3, [sp, #48]	; 0x30
                    rle_state = RLE_STATE_COUNTER;
   10a32:	2102      	movs	r1, #2
                if(rle_cnt != 0) {
   10a34:	9306      	str	r3, [sp, #24]
   10a36:	e6a2      	b.n	1077e <lv_font_get_bitmap_fmt_txt+0x5f2>
        ret = rle_prev_v;
   10a38:	f8dd 900c 	ldr.w	r9, [sp, #12]
        if(rle_cnt == 0) {
   10a3c:	9b04      	ldr	r3, [sp, #16]
   10a3e:	930a      	str	r3, [sp, #40]	; 0x28
   10a40:	e69d      	b.n	1077e <lv_font_get_bitmap_fmt_txt+0x5f2>
   10a42:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
   10a46:	9707      	str	r7, [sp, #28]
   10a48:	9f14      	ldr	r7, [sp, #80]	; 0x50
   10a4a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   10a4c:	f103 3eff 	add.w	lr, r3, #4294967295
    for(i = 0; i < w; i++) {
   10a50:	9d0e      	ldr	r5, [sp, #56]	; 0x38
                val = 2;
   10a52:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
   10a56:	9611      	str	r6, [sp, #68]	; 0x44
   10a58:	9113      	str	r1, [sp, #76]	; 0x4c
   10a5a:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
   10a5e:	e021      	b.n	10aa4 <lv_font_get_bitmap_fmt_txt+0x918>
        switch(val) {
   10a60:	2a07      	cmp	r2, #7
   10a62:	d840      	bhi.n	10ae6 <lv_font_get_bitmap_fmt_txt+0x95a>
   10a64:	e8df f002 	tbb	[pc, r2]
   10a68:	302d2a04 	.word	0x302d2a04
   10a6c:	3c393633 	.word	0x3c393633
        len = 4;
   10a70:	2304      	movs	r3, #4
                val = 0;
   10a72:	2200      	movs	r2, #0
    bit_pos = bit_pos & 0x7;
   10a74:	f005 0107 	and.w	r1, r5, #7
   10a78:	f1c1 0108 	rsb	r1, r1, #8
    bit_pos = 8 - bit_pos - len;
   10a7c:	1ac9      	subs	r1, r1, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
   10a7e:	f3c5 00cf 	ubfx	r0, r5, #3, #16
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
   10a82:	2601      	movs	r6, #1
   10a84:	fa06 f303 	lsl.w	r3, r6, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
   10a88:	425b      	negs	r3, r3
   10a8a:	f063 03ff 	orn	r3, r3, #255	; 0xff
   10a8e:	408b      	lsls	r3, r1
   10a90:	f819 6000 	ldrb.w	r6, [r9, r0]
   10a94:	4033      	ands	r3, r6
    out[byte_pos] |= (val << bit_pos);
   10a96:	408a      	lsls	r2, r1
   10a98:	4313      	orrs	r3, r2
   10a9a:	f809 3000 	strb.w	r3, [r9, r0]
   10a9e:	445d      	add	r5, fp
        for(x = 0; x < w; x++) {
   10aa0:	42bc      	cmp	r4, r7
   10aa2:	d022      	beq.n	10aea <lv_font_get_bitmap_fmt_txt+0x95e>
            line_buf1[x] = line_buf2[x] ^ line_buf1[x];
   10aa4:	f817 2f01 	ldrb.w	r2, [r7, #1]!
   10aa8:	f89e 3001 	ldrb.w	r3, [lr, #1]
   10aac:	405a      	eors	r2, r3
   10aae:	f80e 2f01 	strb.w	r2, [lr, #1]!
    if(len == 3) {
   10ab2:	f1bc 0f03 	cmp.w	ip, #3
   10ab6:	d0d3      	beq.n	10a60 <lv_font_get_bitmap_fmt_txt+0x8d4>
   10ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10aba:	e7db      	b.n	10a74 <lv_font_get_bitmap_fmt_txt+0x8e8>
        len = 4;
   10abc:	2304      	movs	r3, #4
                val = 2;
   10abe:	2202      	movs	r2, #2
   10ac0:	e7d8      	b.n	10a74 <lv_font_get_bitmap_fmt_txt+0x8e8>
        len = 4;
   10ac2:	2304      	movs	r3, #4
                val = 4;
   10ac4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   10ac6:	e7d5      	b.n	10a74 <lv_font_get_bitmap_fmt_txt+0x8e8>
        len = 4;
   10ac8:	2304      	movs	r3, #4
                val = 6;
   10aca:	2206      	movs	r2, #6
   10acc:	e7d2      	b.n	10a74 <lv_font_get_bitmap_fmt_txt+0x8e8>
        len = 4;
   10ace:	2304      	movs	r3, #4
                val = 9;
   10ad0:	2209      	movs	r2, #9
   10ad2:	e7cf      	b.n	10a74 <lv_font_get_bitmap_fmt_txt+0x8e8>
        len = 4;
   10ad4:	2304      	movs	r3, #4
                val = 11;
   10ad6:	220b      	movs	r2, #11
   10ad8:	e7cc      	b.n	10a74 <lv_font_get_bitmap_fmt_txt+0x8e8>
        len = 4;
   10ada:	2304      	movs	r3, #4
                val = 13;
   10adc:	220d      	movs	r2, #13
   10ade:	e7c9      	b.n	10a74 <lv_font_get_bitmap_fmt_txt+0x8e8>
        len = 4;
   10ae0:	2304      	movs	r3, #4
                val = 15;
   10ae2:	220f      	movs	r2, #15
   10ae4:	e7c6      	b.n	10a74 <lv_font_get_bitmap_fmt_txt+0x8e8>
        len = 4;
   10ae6:	2304      	movs	r3, #4
   10ae8:	e7c4      	b.n	10a74 <lv_font_get_bitmap_fmt_txt+0x8e8>
   10aea:	9e11      	ldr	r6, [sp, #68]	; 0x44
   10aec:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
   10af0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   10af2:	9a12      	ldr	r2, [sp, #72]	; 0x48
   10af4:	4413      	add	r3, r2
   10af6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10af8:	441a      	add	r2, r3
   10afa:	920e      	str	r2, [sp, #56]	; 0x38
   10afc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10afe:	3301      	adds	r3, #1
   10b00:	b21b      	sxth	r3, r3
   10b02:	9310      	str	r3, [sp, #64]	; 0x40
    for(y = 1; y < h; y++) {
   10b04:	9a15      	ldr	r2, [sp, #84]	; 0x54
   10b06:	429a      	cmp	r2, r3
   10b08:	d015      	beq.n	10b36 <lv_font_get_bitmap_fmt_txt+0x9aa>
    for(i = 0; i < w; i++) {
   10b0a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   10b0c:	2b00      	cmp	r3, #0
   10b0e:	d0f5      	beq.n	10afc <lv_font_get_bitmap_fmt_txt+0x970>
   10b10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   10b12:	1e5f      	subs	r7, r3, #1
   10b14:	463c      	mov	r4, r7
    uint8_t ret = 0;
   10b16:	f04f 0e00 	mov.w	lr, #0
    switch(len) {
   10b1a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   10b1c:	1e5d      	subs	r5, r3, #1
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
   10b1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   10b20:	9311      	str	r3, [sp, #68]	; 0x44
            bit_mask = 0xFF;
   10b22:	f04f 0cff 	mov.w	ip, #255	; 0xff
   10b26:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   10b2a:	4659      	mov	r1, fp
   10b2c:	9714      	str	r7, [sp, #80]	; 0x50
   10b2e:	9f07      	ldr	r7, [sp, #28]
   10b30:	9507      	str	r5, [sp, #28]
   10b32:	981c      	ldr	r0, [sp, #112]	; 0x70
   10b34:	e628      	b.n	10788 <lv_font_get_bitmap_fmt_txt+0x5fc>
   10b36:	46b4      	mov	ip, r6
   10b38:	9b08      	ldr	r3, [sp, #32]
   10b3a:	b9c3      	cbnz	r3, 10b6e <lv_font_get_bitmap_fmt_txt+0x9e2>
   10b3c:	9b06      	ldr	r3, [sp, #24]
   10b3e:	b113      	cbz	r3, 10b46 <lv_font_get_bitmap_fmt_txt+0x9ba>
   10b40:	4b13      	ldr	r3, [pc, #76]	; (10b90 <lv_font_get_bitmap_fmt_txt+0xa04>)
   10b42:	f8c3 c00c 	str.w	ip, [r3, #12]
   10b46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10b48:	b113      	cbz	r3, 10b50 <lv_font_get_bitmap_fmt_txt+0x9c4>
   10b4a:	4b11      	ldr	r3, [pc, #68]	; (10b90 <lv_font_get_bitmap_fmt_txt+0xa04>)
   10b4c:	f883 b009 	strb.w	fp, [r3, #9]
   10b50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10b52:	b11b      	cbz	r3, 10b5c <lv_font_get_bitmap_fmt_txt+0x9d0>
   10b54:	4b0e      	ldr	r3, [pc, #56]	; (10b90 <lv_font_get_bitmap_fmt_txt+0xa04>)
   10b56:	f89d 201c 	ldrb.w	r2, [sp, #28]
   10b5a:	745a      	strb	r2, [r3, #17]
    _lv_mem_buf_release(line_buf1);
   10b5c:	9816      	ldr	r0, [sp, #88]	; 0x58
   10b5e:	4c0d      	ldr	r4, [pc, #52]	; (10b94 <lv_font_get_bitmap_fmt_txt+0xa08>)
   10b60:	47a0      	blx	r4
    _lv_mem_buf_release(line_buf2);
   10b62:	9817      	ldr	r0, [sp, #92]	; 0x5c
   10b64:	47a0      	blx	r4
        return decompr_buf;
   10b66:	4b0a      	ldr	r3, [pc, #40]	; (10b90 <lv_font_get_bitmap_fmt_txt+0xa04>)
   10b68:	6818      	ldr	r0, [r3, #0]
   10b6a:	f7ff bb2c 	b.w	101c6 <lv_font_get_bitmap_fmt_txt+0x3a>
   10b6e:	4b08      	ldr	r3, [pc, #32]	; (10b90 <lv_font_get_bitmap_fmt_txt+0xa04>)
   10b70:	f89d 200c 	ldrb.w	r2, [sp, #12]
   10b74:	741a      	strb	r2, [r3, #16]
   10b76:	e7e1      	b.n	10b3c <lv_font_get_bitmap_fmt_txt+0x9b0>
    if(!gid) return NULL;
   10b78:	2000      	movs	r0, #0
   10b7a:	f7ff bb24 	b.w	101c6 <lv_font_get_bitmap_fmt_txt+0x3a>
    return NULL;
   10b7e:	2000      	movs	r0, #0
   10b80:	f7ff bb21 	b.w	101c6 <lv_font_get_bitmap_fmt_txt+0x3a>
        if(gsize == 0) return NULL;
   10b84:	2000      	movs	r0, #0
   10b86:	f7ff bb1e 	b.w	101c6 <lv_font_get_bitmap_fmt_txt+0x3a>
            if(decompr_buf == NULL) return NULL;
   10b8a:	2000      	movs	r0, #0
   10b8c:	f7ff bb1b 	b.w	101c6 <lv_font_get_bitmap_fmt_txt+0x3a>
   10b90:	20008558 	.word	0x20008558
   10b94:	00012565 	.word	0x00012565

00010b98 <lv_font_get_glyph_dsc_fmt_txt>:
{
   10b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10b9c:	b084      	sub	sp, #16
   10b9e:	4607      	mov	r7, r0
   10ba0:	460c      	mov	r4, r1
   10ba2:	4699      	mov	r9, r3
    if(unicode_letter == '\t') {
   10ba4:	2a09      	cmp	r2, #9
        is_tab = true;
   10ba6:	bf06      	itte	eq
   10ba8:	2501      	moveq	r5, #1
        unicode_letter = ' ';
   10baa:	2220      	moveq	r2, #32
    bool is_tab = false;
   10bac:	2500      	movne	r5, #0
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
   10bae:	6906      	ldr	r6, [r0, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
   10bb0:	4611      	mov	r1, r2
   10bb2:	4b49      	ldr	r3, [pc, #292]	; (10cd8 <lv_font_get_glyph_dsc_fmt_txt+0x140>)
   10bb4:	4798      	blx	r3
    if(!gid) return false;
   10bb6:	4680      	mov	r8, r0
   10bb8:	2800      	cmp	r0, #0
   10bba:	f000 8086 	beq.w	10cca <lv_font_get_glyph_dsc_fmt_txt+0x132>
    if(fdsc->kern_dsc) {
   10bbe:	68f3      	ldr	r3, [r6, #12]
   10bc0:	2b00      	cmp	r3, #0
   10bc2:	d07c      	beq.n	10cbe <lv_font_get_glyph_dsc_fmt_txt+0x126>
        uint32_t gid_next = get_glyph_dsc_id(font, unicode_letter_next);
   10bc4:	4649      	mov	r1, r9
   10bc6:	4638      	mov	r0, r7
   10bc8:	4b43      	ldr	r3, [pc, #268]	; (10cd8 <lv_font_get_glyph_dsc_fmt_txt+0x140>)
   10bca:	4798      	blx	r3
        if(gid_next) {
   10bcc:	4603      	mov	r3, r0
   10bce:	bb18      	cbnz	r0, 10c18 <lv_font_get_glyph_dsc_fmt_txt+0x80>
    int8_t kvalue = 0;
   10bd0:	2300      	movs	r3, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
   10bd2:	6870      	ldr	r0, [r6, #4]
   10bd4:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
   10bd8:	8a32      	ldrh	r2, [r6, #16]
   10bda:	fb03 f302 	mul.w	r3, r3, r2
   10bde:	111b      	asrs	r3, r3, #4
    uint32_t adv_w = gdsc->adv_w;
   10be0:	8842      	ldrh	r2, [r0, #2]
   10be2:	f3c2 120b 	ubfx	r2, r2, #4, #12
    if(is_tab) adv_w *= 2;
   10be6:	b105      	cbz	r5, 10bea <lv_font_get_glyph_dsc_fmt_txt+0x52>
   10be8:	0052      	lsls	r2, r2, #1
    adv_w  = (adv_w + (1 << 3)) >> 4;
   10bea:	3308      	adds	r3, #8
   10bec:	4413      	add	r3, r2
   10bee:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
   10bf0:	8023      	strh	r3, [r4, #0]
    dsc_out->box_h = gdsc->box_h;
   10bf2:	7943      	ldrb	r3, [r0, #5]
   10bf4:	80a3      	strh	r3, [r4, #4]
    dsc_out->box_w = gdsc->box_w;
   10bf6:	7902      	ldrb	r2, [r0, #4]
   10bf8:	8062      	strh	r2, [r4, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
   10bfa:	f990 3006 	ldrsb.w	r3, [r0, #6]
   10bfe:	80e3      	strh	r3, [r4, #6]
    dsc_out->ofs_y = gdsc->ofs_y;
   10c00:	f990 3007 	ldrsb.w	r3, [r0, #7]
   10c04:	8123      	strh	r3, [r4, #8]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
   10c06:	7cf3      	ldrb	r3, [r6, #19]
   10c08:	f3c3 0383 	ubfx	r3, r3, #2, #4
   10c0c:	72a3      	strb	r3, [r4, #10]
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
   10c0e:	2d00      	cmp	r5, #0
   10c10:	d060      	beq.n	10cd4 <lv_font_get_glyph_dsc_fmt_txt+0x13c>
   10c12:	0052      	lsls	r2, r2, #1
   10c14:	8062      	strh	r2, [r4, #2]
   10c16:	e059      	b.n	10ccc <lv_font_get_glyph_dsc_fmt_txt+0x134>
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
   10c18:	693a      	ldr	r2, [r7, #16]
    if(fdsc->kern_classes == 0) {
   10c1a:	7cd1      	ldrb	r1, [r2, #19]
   10c1c:	f011 0f40 	tst.w	r1, #64	; 0x40
   10c20:	d13c      	bne.n	10c9c <lv_font_get_glyph_dsc_fmt_txt+0x104>
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
   10c22:	68d7      	ldr	r7, [r2, #12]
        if(kdsc->glyph_ids_size == 0) {
   10c24:	7afa      	ldrb	r2, [r7, #11]
   10c26:	f012 0203 	ands.w	r2, r2, #3
   10c2a:	d003      	beq.n	10c34 <lv_font_get_glyph_dsc_fmt_txt+0x9c>
        else if(kdsc->glyph_ids_size == 1) {
   10c2c:	2a01      	cmp	r2, #1
   10c2e:	d01b      	beq.n	10c68 <lv_font_get_glyph_dsc_fmt_txt+0xd0>
    int8_t value = 0;
   10c30:	2300      	movs	r3, #0
   10c32:	e7ce      	b.n	10bd2 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
            const uint8_t * g_ids = kdsc->glyph_ids;
   10c34:	f8d7 9000 	ldr.w	r9, [r7]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
   10c38:	eb08 2300 	add.w	r3, r8, r0, lsl #8
   10c3c:	a804      	add	r0, sp, #16
   10c3e:	f820 3d04 	strh.w	r3, [r0, #-4]!
            uint8_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
   10c42:	68ba      	ldr	r2, [r7, #8]
   10c44:	4b25      	ldr	r3, [pc, #148]	; (10cdc <lv_font_get_glyph_dsc_fmt_txt+0x144>)
   10c46:	9300      	str	r3, [sp, #0]
   10c48:	2302      	movs	r3, #2
   10c4a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   10c4e:	4649      	mov	r1, r9
   10c50:	f8df a090 	ldr.w	sl, [pc, #144]	; 10ce4 <lv_font_get_glyph_dsc_fmt_txt+0x14c>
   10c54:	47d0      	blx	sl
            if(kid_p) {
   10c56:	b128      	cbz	r0, 10c64 <lv_font_get_glyph_dsc_fmt_txt+0xcc>
                lv_uintptr_t ofs = (lv_uintptr_t)(kid_p - g_ids);
   10c58:	eba0 0309 	sub.w	r3, r0, r9
                ofs = ofs >> 1;     /*ofs is for pair, divide by 2 to refer as a single value*/
   10c5c:	085b      	lsrs	r3, r3, #1
                value = kdsc->values[ofs];
   10c5e:	687a      	ldr	r2, [r7, #4]
   10c60:	56d3      	ldrsb	r3, [r2, r3]
   10c62:	e7b6      	b.n	10bd2 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
    int8_t value = 0;
   10c64:	2300      	movs	r3, #0
   10c66:	e7b4      	b.n	10bd2 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
            const uint16_t * g_ids = kdsc->glyph_ids;
   10c68:	f8d7 9000 	ldr.w	r9, [r7]
            lv_uintptr_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
   10c6c:	eb08 2300 	add.w	r3, r8, r0, lsl #8
   10c70:	a804      	add	r0, sp, #16
   10c72:	f840 3d04 	str.w	r3, [r0, #-4]!
            uint8_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
   10c76:	68ba      	ldr	r2, [r7, #8]
   10c78:	4b19      	ldr	r3, [pc, #100]	; (10ce0 <lv_font_get_glyph_dsc_fmt_txt+0x148>)
   10c7a:	9300      	str	r3, [sp, #0]
   10c7c:	2304      	movs	r3, #4
   10c7e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   10c82:	4649      	mov	r1, r9
   10c84:	f8df a05c 	ldr.w	sl, [pc, #92]	; 10ce4 <lv_font_get_glyph_dsc_fmt_txt+0x14c>
   10c88:	47d0      	blx	sl
            if(kid_p) {
   10c8a:	b128      	cbz	r0, 10c98 <lv_font_get_glyph_dsc_fmt_txt+0x100>
                lv_uintptr_t ofs = (lv_uintptr_t)(kid_p - (const uint8_t *)g_ids);
   10c8c:	eba0 0309 	sub.w	r3, r0, r9
                ofs = ofs >> 4;     /*ofs is 4 byte pairs, divide by 4 to refer as a single value*/
   10c90:	091b      	lsrs	r3, r3, #4
                value = kdsc->values[ofs];
   10c92:	687a      	ldr	r2, [r7, #4]
   10c94:	56d3      	ldrsb	r3, [r2, r3]
   10c96:	e79c      	b.n	10bd2 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
    int8_t value = 0;
   10c98:	2300      	movs	r3, #0
   10c9a:	e79a      	b.n	10bd2 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
   10c9c:	68d1      	ldr	r1, [r2, #12]
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
   10c9e:	684a      	ldr	r2, [r1, #4]
   10ca0:	f812 2008 	ldrb.w	r2, [r2, r8]
        if(left_class > 0 && right_class > 0) {
   10ca4:	b16a      	cbz	r2, 10cc2 <lv_font_get_glyph_dsc_fmt_txt+0x12a>
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
   10ca6:	6888      	ldr	r0, [r1, #8]
   10ca8:	5cc3      	ldrb	r3, [r0, r3]
        if(left_class > 0 && right_class > 0) {
   10caa:	b163      	cbz	r3, 10cc6 <lv_font_get_glyph_dsc_fmt_txt+0x12e>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
   10cac:	3a01      	subs	r2, #1
   10cae:	7b48      	ldrb	r0, [r1, #13]
   10cb0:	6809      	ldr	r1, [r1, #0]
   10cb2:	440b      	add	r3, r1
   10cb4:	fb00 3202 	mla	r2, r0, r2, r3
   10cb8:	f912 3c01 	ldrsb.w	r3, [r2, #-1]
   10cbc:	e789      	b.n	10bd2 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
    int8_t kvalue = 0;
   10cbe:	2300      	movs	r3, #0
   10cc0:	e787      	b.n	10bd2 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
    int8_t value = 0;
   10cc2:	2300      	movs	r3, #0
   10cc4:	e785      	b.n	10bd2 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
   10cc6:	2300      	movs	r3, #0
   10cc8:	e783      	b.n	10bd2 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
    if(!gid) return false;
   10cca:	2500      	movs	r5, #0
}
   10ccc:	4628      	mov	r0, r5
   10cce:	b004      	add	sp, #16
   10cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return true;
   10cd4:	2501      	movs	r5, #1
   10cd6:	e7f9      	b.n	10ccc <lv_font_get_glyph_dsc_fmt_txt+0x134>
   10cd8:	000100a1 	.word	0x000100a1
   10cdc:	00010075 	.word	0x00010075
   10ce0:	00010087 	.word	0x00010087
   10ce4:	00014179 	.word	0x00014179

00010ce8 <_lv_font_clean_up_fmt_txt>:
{
   10ce8:	b508      	push	{r3, lr}
    if(decompr_buf) {
   10cea:	4b04      	ldr	r3, [pc, #16]	; (10cfc <_lv_font_clean_up_fmt_txt+0x14>)
   10cec:	6818      	ldr	r0, [r3, #0]
   10cee:	b120      	cbz	r0, 10cfa <_lv_font_clean_up_fmt_txt+0x12>
        lv_mem_free(decompr_buf);
   10cf0:	4b03      	ldr	r3, [pc, #12]	; (10d00 <_lv_font_clean_up_fmt_txt+0x18>)
   10cf2:	4798      	blx	r3
        decompr_buf = NULL;
   10cf4:	2200      	movs	r2, #0
   10cf6:	4b01      	ldr	r3, [pc, #4]	; (10cfc <_lv_font_clean_up_fmt_txt+0x14>)
   10cf8:	601a      	str	r2, [r3, #0]
   10cfa:	bd08      	pop	{r3, pc}
   10cfc:	20008558 	.word	0x20008558
   10d00:	000124b9 	.word	0x000124b9

00010d04 <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
   10d04:	b510      	push	{r4, lr}
   10d06:	4604      	mov	r4, r0
    _lv_memset_00(driver, sizeof(lv_disp_drv_t));
   10d08:	212c      	movs	r1, #44	; 0x2c
   10d0a:	4b15      	ldr	r3, [pc, #84]	; (10d60 <lv_disp_drv_init+0x5c>)
   10d0c:	4798      	blx	r3

    driver->flush_cb         = NULL;
   10d0e:	2300      	movs	r3, #0
   10d10:	60e3      	str	r3, [r4, #12]
    driver->hor_res          = LV_HOR_RES_MAX;
   10d12:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   10d16:	8022      	strh	r2, [r4, #0]
    driver->ver_res          = LV_VER_RES_MAX;
   10d18:	f44f 7288 	mov.w	r2, #272	; 0x110
   10d1c:	8062      	strh	r2, [r4, #2]
    driver->buffer           = NULL;
   10d1e:	6063      	str	r3, [r4, #4]
    driver->rotated          = 0;
   10d20:	7a22      	ldrb	r2, [r4, #8]
   10d22:	f363 0241 	bfi	r2, r3, #1, #1
   10d26:	7222      	strb	r2, [r4, #8]
    driver->color_chroma_key = LV_COLOR_TRANSP;
   10d28:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   10d2c:	f363 0204 	bfi	r2, r3, #0, #5
   10d30:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
   10d34:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   10d36:	f442 62fc 	orr.w	r2, r2, #2016	; 0x7e0
   10d3a:	8522      	strh	r2, [r4, #40]	; 0x28
   10d3c:	0a12      	lsrs	r2, r2, #8
   10d3e:	f363 02c7 	bfi	r2, r3, #3, #5
   10d42:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
    driver->dpi = LV_DPI;
   10d46:	8922      	ldrh	r2, [r4, #8]
   10d48:	2182      	movs	r1, #130	; 0x82
   10d4a:	f361 028b 	bfi	r2, r1, #2, #10
   10d4e:	8122      	strh	r2, [r4, #8]

#if LV_ANTIALIAS
    driver->antialiasing = true;
   10d50:	f042 0201 	orr.w	r2, r2, #1
   10d54:	7222      	strb	r2, [r4, #8]
#if LV_COLOR_SCREEN_TRANSP
    driver->screen_transp = 1;
#endif

#if LV_USE_GPU
    driver->gpu_blend_cb = NULL;
   10d56:	6223      	str	r3, [r4, #32]
    driver->gpu_fill_cb  = NULL;
   10d58:	6263      	str	r3, [r4, #36]	; 0x24

#if LV_USE_USER_DATA
    driver->user_data = NULL;
#endif

    driver->set_px_cb = NULL;
   10d5a:	6163      	str	r3, [r4, #20]
   10d5c:	bd10      	pop	{r4, pc}
   10d5e:	bf00      	nop
   10d60:	00012b2b 	.word	0x00012b2b

00010d64 <lv_disp_buf_init>:
 *             It lets LVGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
   10d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10d66:	4604      	mov	r4, r0
   10d68:	460d      	mov	r5, r1
   10d6a:	4617      	mov	r7, r2
   10d6c:	461e      	mov	r6, r3
    _lv_memset_00(disp_buf, sizeof(lv_disp_buf_t));
   10d6e:	2124      	movs	r1, #36	; 0x24
   10d70:	4b03      	ldr	r3, [pc, #12]	; (10d80 <lv_disp_buf_init+0x1c>)
   10d72:	4798      	blx	r3

    disp_buf->buf1    = buf1;
   10d74:	6025      	str	r5, [r4, #0]
    disp_buf->buf2    = buf2;
   10d76:	6067      	str	r7, [r4, #4]
    disp_buf->buf_act = disp_buf->buf1;
   10d78:	60a5      	str	r5, [r4, #8]
    disp_buf->size    = size_in_px_cnt;
   10d7a:	60e6      	str	r6, [r4, #12]
   10d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10d7e:	bf00      	nop
   10d80:	00012b2b 	.word	0x00012b2b

00010d84 <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable (can be local variable)
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
   10d84:	b5f0      	push	{r4, r5, r6, r7, lr}
   10d86:	b083      	sub	sp, #12
   10d88:	4605      	mov	r5, r0
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
   10d8a:	483f      	ldr	r0, [pc, #252]	; (10e88 <lv_disp_drv_register+0x104>)
   10d8c:	4b3f      	ldr	r3, [pc, #252]	; (10e8c <lv_disp_drv_register+0x108>)
   10d8e:	4798      	blx	r3
    if(!disp) {
   10d90:	4604      	mov	r4, r0
   10d92:	2800      	cmp	r0, #0
   10d94:	d054      	beq.n	10e40 <lv_disp_drv_register+0xbc>
        LV_ASSERT_MEM(disp);
        return NULL;
    }

    _lv_memset_00(disp, sizeof(lv_disp_t));
   10d96:	f44f 71b8 	mov.w	r1, #368	; 0x170
   10d9a:	4b3d      	ldr	r3, [pc, #244]	; (10e90 <lv_disp_drv_register+0x10c>)
   10d9c:	4798      	blx	r3
    _lv_memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
   10d9e:	222c      	movs	r2, #44	; 0x2c
   10da0:	4629      	mov	r1, r5
   10da2:	4620      	mov	r0, r4
   10da4:	4b3b      	ldr	r3, [pc, #236]	; (10e94 <lv_disp_drv_register+0x110>)
   10da6:	4798      	blx	r3

    _lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
   10da8:	214c      	movs	r1, #76	; 0x4c
   10daa:	f104 0030 	add.w	r0, r4, #48	; 0x30
   10dae:	4b3a      	ldr	r3, [pc, #232]	; (10e98 <lv_disp_drv_register+0x114>)
   10db0:	4798      	blx	r3
    disp->last_activity_time = 0;
   10db2:	2300      	movs	r3, #0
   10db4:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c

    if(disp_def == NULL) disp_def = disp;
   10db8:	4b38      	ldr	r3, [pc, #224]	; (10e9c <lv_disp_drv_register+0x118>)
   10dba:	681b      	ldr	r3, [r3, #0]
   10dbc:	2b00      	cmp	r3, #0
   10dbe:	d050      	beq.n	10e62 <lv_disp_drv_register+0xde>

    lv_disp_t * disp_def_tmp = disp_def;
   10dc0:	4b36      	ldr	r3, [pc, #216]	; (10e9c <lv_disp_drv_register+0x118>)
   10dc2:	681f      	ldr	r7, [r3, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
   10dc4:	601c      	str	r4, [r3, #0]
                                        new display*/
    /*Create a refresh task*/
    disp->refr_task = lv_task_create(_lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_REFR_TASK_PRIO, disp);
   10dc6:	4623      	mov	r3, r4
   10dc8:	2203      	movs	r2, #3
   10dca:	211e      	movs	r1, #30
   10dcc:	4834      	ldr	r0, [pc, #208]	; (10ea0 <lv_disp_drv_register+0x11c>)
   10dce:	4d35      	ldr	r5, [pc, #212]	; (10ea4 <lv_disp_drv_register+0x120>)
   10dd0:	47a8      	blx	r5
   10dd2:	62e0      	str	r0, [r4, #44]	; 0x2c
    LV_ASSERT_MEM(disp->refr_task);
   10dd4:	4b34      	ldr	r3, [pc, #208]	; (10ea8 <lv_disp_drv_register+0x124>)
   10dd6:	4798      	blx	r3
   10dd8:	2800      	cmp	r0, #0
   10dda:	d045      	beq.n	10e68 <lv_disp_drv_register+0xe4>
    if(disp->refr_task == NULL) return NULL;
   10ddc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   10dde:	2b00      	cmp	r3, #0
   10de0:	d04f      	beq.n	10e82 <lv_disp_drv_register+0xfe>

    disp->inv_p = 0;
   10de2:	f8b4 3168 	ldrh.w	r3, [r4, #360]	; 0x168
   10de6:	f36f 0309 	bfc	r3, #0, #10
   10dea:	f8a4 3168 	strh.w	r3, [r4, #360]	; 0x168
    disp->last_activity_time = 0;
   10dee:	2500      	movs	r5, #0
   10df0:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c

    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
   10df4:	4629      	mov	r1, r5
   10df6:	4628      	mov	r0, r5
   10df8:	4e2c      	ldr	r6, [pc, #176]	; (10eac <lv_disp_drv_register+0x128>)
   10dfa:	47b0      	blx	r6
   10dfc:	63e0      	str	r0, [r4, #60]	; 0x3c
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
   10dfe:	4629      	mov	r1, r5
   10e00:	4628      	mov	r0, r5
   10e02:	47b0      	blx	r6
   10e04:	6420      	str	r0, [r4, #64]	; 0x40
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
   10e06:	4629      	mov	r1, r5
   10e08:	4628      	mov	r0, r5
   10e0a:	47b0      	blx	r6
   10e0c:	6460      	str	r0, [r4, #68]	; 0x44
    lv_obj_reset_style_list(disp->top_layer, LV_OBJ_PART_MAIN);
   10e0e:	4629      	mov	r1, r5
   10e10:	6c20      	ldr	r0, [r4, #64]	; 0x40
   10e12:	4e27      	ldr	r6, [pc, #156]	; (10eb0 <lv_disp_drv_register+0x12c>)
   10e14:	47b0      	blx	r6
    lv_obj_reset_style_list(disp->sys_layer, LV_OBJ_PART_MAIN);
   10e16:	4629      	mov	r1, r5
   10e18:	6c60      	ldr	r0, [r4, #68]	; 0x44
   10e1a:	47b0      	blx	r6
    lv_obj_set_click(disp->top_layer, false);
   10e1c:	4629      	mov	r1, r5
   10e1e:	6c20      	ldr	r0, [r4, #64]	; 0x40
   10e20:	4e24      	ldr	r6, [pc, #144]	; (10eb4 <lv_disp_drv_register+0x130>)
   10e22:	47b0      	blx	r6
    lv_obj_set_click(disp->sys_layer, false);
   10e24:	4629      	mov	r1, r5
   10e26:	6c60      	ldr	r0, [r4, #68]	; 0x44
   10e28:	47b0      	blx	r6

    lv_obj_invalidate(disp->act_scr);
   10e2a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   10e2c:	4b22      	ldr	r3, [pc, #136]	; (10eb8 <lv_disp_drv_register+0x134>)
   10e2e:	4798      	blx	r3

    disp_def = disp_def_tmp; /*Revert the default display*/
   10e30:	4b1a      	ldr	r3, [pc, #104]	; (10e9c <lv_disp_drv_register+0x118>)
   10e32:	601f      	str	r7, [r3, #0]

    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
   10e34:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10e36:	4b21      	ldr	r3, [pc, #132]	; (10ebc <lv_disp_drv_register+0x138>)
   10e38:	4798      	blx	r3

    return disp;
}
   10e3a:	4620      	mov	r0, r4
   10e3c:	b003      	add	sp, #12
   10e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LV_ASSERT_MEM(disp);
   10e40:	4b19      	ldr	r3, [pc, #100]	; (10ea8 <lv_disp_drv_register+0x124>)
   10e42:	4798      	blx	r3
   10e44:	2800      	cmp	r0, #0
   10e46:	d1f8      	bne.n	10e3a <lv_disp_drv_register+0xb6>
   10e48:	4b1d      	ldr	r3, [pc, #116]	; (10ec0 <lv_disp_drv_register+0x13c>)
   10e4a:	9300      	str	r3, [sp, #0]
   10e4c:	227c      	movs	r2, #124	; 0x7c
   10e4e:	491d      	ldr	r1, [pc, #116]	; (10ec4 <lv_disp_drv_register+0x140>)
   10e50:	2003      	movs	r0, #3
   10e52:	4c1d      	ldr	r4, [pc, #116]	; (10ec8 <lv_disp_drv_register+0x144>)
   10e54:	47a0      	blx	r4
   10e56:	2200      	movs	r2, #0
   10e58:	2300      	movs	r3, #0
   10e5a:	481c      	ldr	r0, [pc, #112]	; (10ecc <lv_disp_drv_register+0x148>)
   10e5c:	491c      	ldr	r1, [pc, #112]	; (10ed0 <lv_disp_drv_register+0x14c>)
   10e5e:	4788      	blx	r1
   10e60:	e7fe      	b.n	10e60 <lv_disp_drv_register+0xdc>
    if(disp_def == NULL) disp_def = disp;
   10e62:	4b0e      	ldr	r3, [pc, #56]	; (10e9c <lv_disp_drv_register+0x118>)
   10e64:	601c      	str	r4, [r3, #0]
   10e66:	e7ab      	b.n	10dc0 <lv_disp_drv_register+0x3c>
    LV_ASSERT_MEM(disp->refr_task);
   10e68:	4b15      	ldr	r3, [pc, #84]	; (10ec0 <lv_disp_drv_register+0x13c>)
   10e6a:	9300      	str	r3, [sp, #0]
   10e6c:	228d      	movs	r2, #141	; 0x8d
   10e6e:	4915      	ldr	r1, [pc, #84]	; (10ec4 <lv_disp_drv_register+0x140>)
   10e70:	2003      	movs	r0, #3
   10e72:	4d15      	ldr	r5, [pc, #84]	; (10ec8 <lv_disp_drv_register+0x144>)
   10e74:	47a8      	blx	r5
   10e76:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   10e78:	2300      	movs	r3, #0
   10e7a:	4814      	ldr	r0, [pc, #80]	; (10ecc <lv_disp_drv_register+0x148>)
   10e7c:	4914      	ldr	r1, [pc, #80]	; (10ed0 <lv_disp_drv_register+0x14c>)
   10e7e:	4788      	blx	r1
   10e80:	e7fe      	b.n	10e80 <lv_disp_drv_register+0xfc>
    if(disp->refr_task == NULL) return NULL;
   10e82:	2400      	movs	r4, #0
   10e84:	e7d9      	b.n	10e3a <lv_disp_drv_register+0xb6>
   10e86:	bf00      	nop
   10e88:	2000c694 	.word	0x2000c694
   10e8c:	00011f05 	.word	0x00011f05
   10e90:	00012b2b 	.word	0x00012b2b
   10e94:	00012649 	.word	0x00012649
   10e98:	00011eed 	.word	0x00011eed
   10e9c:	2000856c 	.word	0x2000856c
   10ea0:	00005f69 	.word	0x00005f69
   10ea4:	000139d9 	.word	0x000139d9
   10ea8:	000022a5 	.word	0x000022a5
   10eac:	00003e19 	.word	0x00003e19
   10eb0:	00003b91 	.word	0x00003b91
   10eb4:	00002995 	.word	0x00002995
   10eb8:	00003315 	.word	0x00003315
   10ebc:	00013a49 	.word	0x00013a49
   10ec0:	000291b0 	.word	0x000291b0
   10ec4:	000291c8 	.word	0x000291c8
   10ec8:	00012251 	.word	0x00012251
   10ecc:	00023fcc 	.word	0x00023fcc
   10ed0:	000022ad 	.word	0x000022ad

00010ed4 <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
   10ed4:	4b01      	ldr	r3, [pc, #4]	; (10edc <lv_disp_get_default+0x8>)
   10ed6:	6818      	ldr	r0, [r3, #0]
   10ed8:	4770      	bx	lr
   10eda:	bf00      	nop
   10edc:	2000856c 	.word	0x2000856c

00010ee0 <lv_disp_get_hor_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
   10ee0:	4603      	mov	r3, r0
   10ee2:	b140      	cbz	r0, 10ef6 <lv_disp_get_hor_res+0x16>

    if(disp == NULL)
        return LV_HOR_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
   10ee4:	7a1a      	ldrb	r2, [r3, #8]
   10ee6:	f012 0f02 	tst.w	r2, #2
   10eea:	bf0c      	ite	eq
   10eec:	f9b3 0000 	ldrsheq.w	r0, [r3]
   10ef0:	f9b3 0002 	ldrshne.w	r0, [r3, #2]
   10ef4:	4770      	bx	lr
    return disp_def;
   10ef6:	4b03      	ldr	r3, [pc, #12]	; (10f04 <lv_disp_get_hor_res+0x24>)
   10ef8:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL)
   10efa:	2b00      	cmp	r3, #0
   10efc:	d1f2      	bne.n	10ee4 <lv_disp_get_hor_res+0x4>
        return LV_HOR_RES_MAX;
   10efe:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
}
   10f02:	4770      	bx	lr
   10f04:	2000856c 	.word	0x2000856c

00010f08 <lv_disp_get_ver_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
   10f08:	4603      	mov	r3, r0
   10f0a:	b140      	cbz	r0, 10f1e <lv_disp_get_ver_res+0x16>

    if(disp == NULL)
        return LV_VER_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
   10f0c:	7a1a      	ldrb	r2, [r3, #8]
   10f0e:	f012 0f02 	tst.w	r2, #2
   10f12:	bf0c      	ite	eq
   10f14:	f9b3 0002 	ldrsheq.w	r0, [r3, #2]
   10f18:	f9b3 0000 	ldrshne.w	r0, [r3]
   10f1c:	4770      	bx	lr
    return disp_def;
   10f1e:	4b03      	ldr	r3, [pc, #12]	; (10f2c <lv_disp_get_ver_res+0x24>)
   10f20:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL)
   10f22:	2b00      	cmp	r3, #0
   10f24:	d1f2      	bne.n	10f0c <lv_disp_get_ver_res+0x4>
        return LV_VER_RES_MAX;
   10f26:	f44f 7088 	mov.w	r0, #272	; 0x110
}
   10f2a:	4770      	bx	lr
   10f2c:	2000856c 	.word	0x2000856c

00010f30 <lv_disp_get_dpi>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
   10f30:	4603      	mov	r3, r0
   10f32:	b118      	cbz	r0, 10f3c <lv_disp_get_dpi+0xc>
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
    return disp->driver.dpi;
   10f34:	8918      	ldrh	r0, [r3, #8]
   10f36:	f3c0 0089 	ubfx	r0, r0, #2, #10
   10f3a:	4770      	bx	lr
    return disp_def;
   10f3c:	4b02      	ldr	r3, [pc, #8]	; (10f48 <lv_disp_get_dpi+0x18>)
   10f3e:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
   10f40:	2b00      	cmp	r3, #0
   10f42:	d1f7      	bne.n	10f34 <lv_disp_get_dpi+0x4>
   10f44:	2082      	movs	r0, #130	; 0x82
}
   10f46:	4770      	bx	lr
   10f48:	2000856c 	.word	0x2000856c

00010f4c <lv_disp_get_size_category>:
 * Get the size category of the display based on it's hor. res. and dpi.
 * @param disp pointer to a display (NULL to use the default display)
 * @return LV_DISP_SIZE_SMALL/MEDIUM/LARGE/EXTRA_LARGE
 */
lv_disp_size_t lv_disp_get_size_category(lv_disp_t * disp)
{
   10f4c:	b538      	push	{r3, r4, r5, lr}
    if(disp == NULL) disp = lv_disp_get_default();
   10f4e:	4605      	mov	r5, r0
   10f50:	b1a0      	cbz	r0, 10f7c <lv_disp_get_size_category+0x30>

    uint32_t w;
    if(disp == NULL) w = LV_HOR_RES_MAX;
    else w = lv_disp_get_hor_res(disp);
   10f52:	4628      	mov	r0, r5
   10f54:	4b0f      	ldr	r3, [pc, #60]	; (10f94 <lv_disp_get_size_category+0x48>)
   10f56:	4798      	blx	r3
   10f58:	4604      	mov	r4, r0

    uint32_t dpi = lv_disp_get_dpi(disp);
   10f5a:	4628      	mov	r0, r5
   10f5c:	4b0e      	ldr	r3, [pc, #56]	; (10f98 <lv_disp_get_size_category+0x4c>)
   10f5e:	4798      	blx	r3

    w = w * 10 / dpi;
   10f60:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   10f64:	0064      	lsls	r4, r4, #1
   10f66:	fbb4 f0f0 	udiv	r0, r4, r0

    if(w < LV_DISP_SMALL_LIMIT) return LV_DISP_SIZE_SMALL;
   10f6a:	281d      	cmp	r0, #29
   10f6c:	d90d      	bls.n	10f8a <lv_disp_get_size_category+0x3e>
    if(w < LV_DISP_MEDIUM_LIMIT) return LV_DISP_SIZE_MEDIUM;
   10f6e:	2831      	cmp	r0, #49	; 0x31
   10f70:	d90d      	bls.n	10f8e <lv_disp_get_size_category+0x42>
    if(w < LV_DISP_LARGE_LIMIT) return LV_DISP_SIZE_LARGE;
    else return LV_DISP_SIZE_EXTRA_LARGE;
   10f72:	2846      	cmp	r0, #70	; 0x46
   10f74:	bf34      	ite	cc
   10f76:	2002      	movcc	r0, #2
   10f78:	2003      	movcs	r0, #3
   10f7a:	bd38      	pop	{r3, r4, r5, pc}
    return disp_def;
   10f7c:	4b07      	ldr	r3, [pc, #28]	; (10f9c <lv_disp_get_size_category+0x50>)
   10f7e:	681d      	ldr	r5, [r3, #0]
   10f80:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
    if(disp == NULL) w = LV_HOR_RES_MAX;
   10f84:	2d00      	cmp	r5, #0
   10f86:	d0e8      	beq.n	10f5a <lv_disp_get_size_category+0xe>
   10f88:	e7e3      	b.n	10f52 <lv_disp_get_size_category+0x6>
    if(w < LV_DISP_SMALL_LIMIT) return LV_DISP_SIZE_SMALL;
   10f8a:	2000      	movs	r0, #0
   10f8c:	bd38      	pop	{r3, r4, r5, pc}
    if(w < LV_DISP_MEDIUM_LIMIT) return LV_DISP_SIZE_MEDIUM;
   10f8e:	2001      	movs	r0, #1
}
   10f90:	bd38      	pop	{r3, r4, r5, pc}
   10f92:	bf00      	nop
   10f94:	00010ee1 	.word	0x00010ee1
   10f98:	00010f31 	.word	0x00010f31
   10f9c:	2000856c 	.word	0x2000856c

00010fa0 <lv_disp_flush_ready>:
    if(disp_drv->screen_transp) {
        _lv_memset_00(disp_drv->buffer->buf_act, disp_drv->buffer->size * sizeof(lv_color32_t));
    }
#endif

    disp_drv->buffer->flushing = 0;
   10fa0:	6842      	ldr	r2, [r0, #4]
   10fa2:	2300      	movs	r3, #0
   10fa4:	6193      	str	r3, [r2, #24]
    disp_drv->buffer->flushing_last = 0;
   10fa6:	6842      	ldr	r2, [r0, #4]
   10fa8:	61d3      	str	r3, [r2, #28]
   10faa:	4770      	bx	lr

00010fac <lv_disp_get_next>:
 * Get the next display.
 * @param disp pointer to the current display. NULL to initialize.
 * @return the next display or NULL if no more. Give the first display when the parameter is NULL
 */
lv_disp_t * lv_disp_get_next(lv_disp_t * disp)
{
   10fac:	b508      	push	{r3, lr}
    if(disp == NULL)
   10fae:	b120      	cbz	r0, 10fba <lv_disp_get_next+0xe>
   10fb0:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_disp_ll), disp);
   10fb2:	4804      	ldr	r0, [pc, #16]	; (10fc4 <lv_disp_get_next+0x18>)
   10fb4:	4b04      	ldr	r3, [pc, #16]	; (10fc8 <lv_disp_get_next+0x1c>)
   10fb6:	4798      	blx	r3
}
   10fb8:	bd08      	pop	{r3, pc}
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
   10fba:	4802      	ldr	r0, [pc, #8]	; (10fc4 <lv_disp_get_next+0x18>)
   10fbc:	4b03      	ldr	r3, [pc, #12]	; (10fcc <lv_disp_get_next+0x20>)
   10fbe:	4798      	blx	r3
   10fc0:	bd08      	pop	{r3, pc}
   10fc2:	bf00      	nop
   10fc4:	2000c694 	.word	0x2000c694
   10fc8:	00011fb1 	.word	0x00011fb1
   10fcc:	00011f9d 	.word	0x00011f9d

00010fd0 <lv_disp_get_buf>:
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
    return disp->driver.buffer;
}
   10fd0:	6840      	ldr	r0, [r0, #4]
   10fd2:	4770      	bx	lr

00010fd4 <lv_disp_is_double_buf>:
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
   10fd4:	6843      	ldr	r3, [r0, #4]
   10fd6:	681a      	ldr	r2, [r3, #0]
   10fd8:	b122      	cbz	r2, 10fe4 <lv_disp_is_double_buf+0x10>
   10fda:	6858      	ldr	r0, [r3, #4]
   10fdc:	3000      	adds	r0, #0
   10fde:	bf18      	it	ne
   10fe0:	2001      	movne	r0, #1
   10fe2:	4770      	bx	lr
        return true;
    else
        return false;
   10fe4:	2000      	movs	r0, #0
}
   10fe6:	4770      	bx	lr

00010fe8 <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
   10fe8:	b510      	push	{r4, lr}
   10fea:	4604      	mov	r4, r0
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
   10fec:	4b08      	ldr	r3, [pc, #32]	; (11010 <lv_disp_is_true_double_buf+0x28>)
   10fee:	4798      	blx	r3
   10ff0:	4603      	mov	r3, r0
   10ff2:	b158      	cbz	r0, 1100c <lv_disp_is_true_double_buf+0x24>
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
   10ff4:	f9b4 2000 	ldrsh.w	r2, [r4]
   10ff8:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   10ffc:	fb03 f302 	mul.w	r3, r3, r2
    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
   11000:	6862      	ldr	r2, [r4, #4]
   11002:	68d2      	ldr	r2, [r2, #12]
   11004:	4293      	cmp	r3, r2
   11006:	bf14      	ite	ne
   11008:	2300      	movne	r3, #0
   1100a:	2301      	moveq	r3, #1
        return true;
    }
    else {
        return false;
    }
}
   1100c:	4618      	mov	r0, r3
   1100e:	bd10      	pop	{r4, pc}
   11010:	00010fd5 	.word	0x00010fd5

00011014 <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
   11014:	b508      	push	{r3, lr}
    if(indev == NULL)
   11016:	b120      	cbz	r0, 11022 <lv_indev_get_next+0xe>
   11018:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
   1101a:	4804      	ldr	r0, [pc, #16]	; (1102c <lv_indev_get_next+0x18>)
   1101c:	4b04      	ldr	r3, [pc, #16]	; (11030 <lv_indev_get_next+0x1c>)
   1101e:	4798      	blx	r3
}
   11020:	bd08      	pop	{r3, pc}
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
   11022:	4802      	ldr	r0, [pc, #8]	; (1102c <lv_indev_get_next+0x18>)
   11024:	4b03      	ldr	r3, [pc, #12]	; (11034 <lv_indev_get_next+0x20>)
   11026:	4798      	blx	r3
   11028:	bd08      	pop	{r3, pc}
   1102a:	bf00      	nop
   1102c:	2000c688 	.word	0x2000c688
   11030:	00011fb1 	.word	0x00011fb1
   11034:	00011f9d 	.word	0x00011f9d

00011038 <lv_tick_inc>:
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
    tick_irq_flag = 0;
   11038:	4b03      	ldr	r3, [pc, #12]	; (11048 <lv_tick_inc+0x10>)
   1103a:	2200      	movs	r2, #0
   1103c:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
   1103e:	685a      	ldr	r2, [r3, #4]
   11040:	4410      	add	r0, r2
   11042:	6058      	str	r0, [r3, #4]
   11044:	4770      	bx	lr
   11046:	bf00      	nop
   11048:	20008570 	.word	0x20008570

0001104c <lv_tick_get>:
uint32_t lv_tick_get(void)
{
#if LV_TICK_CUSTOM == 0
    uint32_t result;
    do {
        tick_irq_flag = 1;
   1104c:	4b04      	ldr	r3, [pc, #16]	; (11060 <lv_tick_get+0x14>)
   1104e:	f04f 0101 	mov.w	r1, #1
   11052:	7019      	strb	r1, [r3, #0]
        result        = sys_time;
    } while(!tick_irq_flag); /*'lv_tick_inc()' clears this flag which can be in an interrupt.
   11054:	781a      	ldrb	r2, [r3, #0]
   11056:	2a00      	cmp	r2, #0
   11058:	d0fb      	beq.n	11052 <lv_tick_get+0x6>

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
   1105a:	4b01      	ldr	r3, [pc, #4]	; (11060 <lv_tick_get+0x14>)
   1105c:	6858      	ldr	r0, [r3, #4]
   1105e:	4770      	bx	lr
   11060:	20008570 	.word	0x20008570

00011064 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of systick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
   11064:	b510      	push	{r4, lr}
   11066:	4604      	mov	r4, r0
    uint32_t act_time = lv_tick_get();
   11068:	4b01      	ldr	r3, [pc, #4]	; (11070 <lv_tick_elaps+0xc>)
   1106a:	4798      	blx	r3
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
   1106c:	1b00      	subs	r0, r0, r4
   1106e:	bd10      	pop	{r4, pc}
   11070:	0001104d 	.word	0x0001104d

00011074 <lv_anim_path_linear>:
{
    LV_UNUSED(path);

    /*Calculate the current step*/
    uint32_t step;
    if(a->time == a->act_time) {
   11074:	6a0a      	ldr	r2, [r1, #32]
   11076:	6a48      	ldr	r0, [r1, #36]	; 0x24
   11078:	4282      	cmp	r2, r0
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
    }
    else {
        step = ((int32_t)a->act_time * LV_ANIM_RESOLUTION) / a->time;
   1107a:	bf1a      	itte	ne
   1107c:	0280      	lslne	r0, r0, #10
   1107e:	fb90 f0f2 	sdivne	r0, r0, r2
   11082:	f44f 6080 	moveq.w	r0, #1024	; 0x400
    }

    /* Get the new value which will be proportional to `step`
     * and the `start` and `end` values*/
    int32_t new_value;
    new_value = (int32_t)step * (a->end - a->start);
   11086:	698a      	ldr	r2, [r1, #24]
   11088:	69cb      	ldr	r3, [r1, #28]
   1108a:	1a9b      	subs	r3, r3, r2
   1108c:	fb00 f003 	mul.w	r0, r0, r3
    new_value = new_value >> LV_ANIM_RES_SHIFT;
    new_value += a->start;
   11090:	eb02 20a0 	add.w	r0, r2, r0, asr #10

    return (lv_anim_value_t)new_value;
}
   11094:	b200      	sxth	r0, r0
   11096:	4770      	bx	lr

00011098 <anim_mark_list_change>:
    }

    return anim_list_changed;
}
static void anim_mark_list_change(void)
{
   11098:	b508      	push	{r3, lr}
    anim_list_changed = true;
   1109a:	2201      	movs	r2, #1
   1109c:	4b08      	ldr	r3, [pc, #32]	; (110c0 <anim_mark_list_change+0x28>)
   1109e:	701a      	strb	r2, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
   110a0:	4808      	ldr	r0, [pc, #32]	; (110c4 <anim_mark_list_change+0x2c>)
   110a2:	4b09      	ldr	r3, [pc, #36]	; (110c8 <anim_mark_list_change+0x30>)
   110a4:	4798      	blx	r3
   110a6:	b128      	cbz	r0, 110b4 <anim_mark_list_change+0x1c>
        lv_task_set_prio(_lv_anim_task, LV_TASK_PRIO_OFF);
    else
        lv_task_set_prio(_lv_anim_task, LV_ANIM_TASK_PRIO);
   110a8:	2104      	movs	r1, #4
   110aa:	4b05      	ldr	r3, [pc, #20]	; (110c0 <anim_mark_list_change+0x28>)
   110ac:	6858      	ldr	r0, [r3, #4]
   110ae:	4b07      	ldr	r3, [pc, #28]	; (110cc <anim_mark_list_change+0x34>)
   110b0:	4798      	blx	r3
   110b2:	bd08      	pop	{r3, pc}
        lv_task_set_prio(_lv_anim_task, LV_TASK_PRIO_OFF);
   110b4:	2100      	movs	r1, #0
   110b6:	4b02      	ldr	r3, [pc, #8]	; (110c0 <anim_mark_list_change+0x28>)
   110b8:	6858      	ldr	r0, [r3, #4]
   110ba:	4b04      	ldr	r3, [pc, #16]	; (110cc <anim_mark_list_change+0x34>)
   110bc:	4798      	blx	r3
   110be:	bd08      	pop	{r3, pc}
   110c0:	20008578 	.word	0x20008578
   110c4:	2000c758 	.word	0x2000c758
   110c8:	00011f9d 	.word	0x00011f9d
   110cc:	0001394d 	.word	0x0001394d

000110d0 <anim_task>:
{
   110d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   110d4:	b091      	sub	sp, #68	; 0x44
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
   110d6:	4863      	ldr	r0, [pc, #396]	; (11264 <anim_task+0x194>)
   110d8:	4b63      	ldr	r3, [pc, #396]	; (11268 <anim_task+0x198>)
   110da:	4798      	blx	r3
   110dc:	b168      	cbz	r0, 110fa <anim_task+0x2a>
   110de:	4601      	mov	r1, r0
   110e0:	4d60      	ldr	r5, [pc, #384]	; (11264 <anim_task+0x194>)
   110e2:	4c62      	ldr	r4, [pc, #392]	; (1126c <anim_task+0x19c>)
        a->has_run = 0;
   110e4:	f891 303c 	ldrb.w	r3, [r1, #60]	; 0x3c
   110e8:	f36f 0341 	bfc	r3, #1, #1
   110ec:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
   110f0:	4628      	mov	r0, r5
   110f2:	47a0      	blx	r4
   110f4:	4601      	mov	r1, r0
   110f6:	2800      	cmp	r0, #0
   110f8:	d1f4      	bne.n	110e4 <anim_task+0x14>
    uint32_t elaps = lv_tick_elaps(last_task_run);
   110fa:	4b5d      	ldr	r3, [pc, #372]	; (11270 <anim_task+0x1a0>)
   110fc:	6898      	ldr	r0, [r3, #8]
   110fe:	4b5d      	ldr	r3, [pc, #372]	; (11274 <anim_task+0x1a4>)
   11100:	4798      	blx	r3
   11102:	4680      	mov	r8, r0
    a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
   11104:	4857      	ldr	r0, [pc, #348]	; (11264 <anim_task+0x194>)
   11106:	4b58      	ldr	r3, [pc, #352]	; (11268 <anim_task+0x198>)
   11108:	4798      	blx	r3
    while(a != NULL) {
   1110a:	4604      	mov	r4, r0
   1110c:	2800      	cmp	r0, #0
   1110e:	f000 8089 	beq.w	11224 <anim_task+0x154>
        anim_list_changed = false;
   11112:	4d57      	ldr	r5, [pc, #348]	; (11270 <anim_task+0x1a0>)
   11114:	f04f 0700 	mov.w	r7, #0
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
   11118:	4e52      	ldr	r6, [pc, #328]	; (11264 <anim_task+0x194>)
   1111a:	f8df 914c 	ldr.w	r9, [pc, #332]	; 11268 <anim_task+0x198>
   1111e:	e01c      	b.n	1115a <anim_task+0x8a>
            if(a->act_time <= 0 && new_act_time >= 0) {
   11120:	eb13 0308 	adds.w	r3, r3, r8
   11124:	f100 8085 	bmi.w	11232 <anim_task+0x162>
                if(a->start_cb) a->start_cb(a);
   11128:	68a2      	ldr	r2, [r4, #8]
   1112a:	2a00      	cmp	r2, #0
   1112c:	f000 8088 	beq.w	11240 <anim_task+0x170>
   11130:	4620      	mov	r0, r4
   11132:	4790      	blx	r2
   11134:	e01e      	b.n	11174 <anim_task+0xa4>
                else new_value = lv_anim_path_linear(&a->path, a);
   11136:	4621      	mov	r1, r4
   11138:	f104 0010 	add.w	r0, r4, #16
   1113c:	4b4e      	ldr	r3, [pc, #312]	; (11278 <anim_task+0x1a8>)
   1113e:	4798      	blx	r3
   11140:	e028      	b.n	11194 <anim_task+0xc4>
                if(a->act_time >= a->time) {
   11142:	6a62      	ldr	r2, [r4, #36]	; 0x24
   11144:	6a23      	ldr	r3, [r4, #32]
   11146:	429a      	cmp	r2, r3
   11148:	da2b      	bge.n	111a2 <anim_task+0xd2>
        if(anim_list_changed)
   1114a:	782b      	ldrb	r3, [r5, #0]
   1114c:	2b00      	cmp	r3, #0
   1114e:	d071      	beq.n	11234 <anim_task+0x164>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
   11150:	4630      	mov	r0, r6
   11152:	47c8      	blx	r9
   11154:	4604      	mov	r4, r0
    while(a != NULL) {
   11156:	2c00      	cmp	r4, #0
   11158:	d064      	beq.n	11224 <anim_task+0x154>
        anim_list_changed = false;
   1115a:	702f      	strb	r7, [r5, #0]
        if(!a->has_run) {
   1115c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   11160:	f013 0f02 	tst.w	r3, #2
   11164:	d166      	bne.n	11234 <anim_task+0x164>
            a->has_run = 1; /*The list readying might be reseted so need to know which anim has run already*/
   11166:	f043 0302 	orr.w	r3, r3, #2
   1116a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
            int32_t new_act_time = a->act_time + elaps;
   1116e:	6a63      	ldr	r3, [r4, #36]	; 0x24
            if(a->act_time <= 0 && new_act_time >= 0) {
   11170:	2b00      	cmp	r3, #0
   11172:	ddd5      	ble.n	11120 <anim_task+0x50>
            a->act_time += elaps;
   11174:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11176:	4443      	add	r3, r8
   11178:	6263      	str	r3, [r4, #36]	; 0x24
            if(a->act_time >= 0) {
   1117a:	2b00      	cmp	r3, #0
   1117c:	dbe5      	blt.n	1114a <anim_task+0x7a>
                if(a->act_time > a->time) a->act_time = a->time;
   1117e:	6a22      	ldr	r2, [r4, #32]
   11180:	429a      	cmp	r2, r3
   11182:	bfb8      	it	lt
   11184:	6262      	strlt	r2, [r4, #36]	; 0x24
                if(a->path.cb) new_value = a->path.cb(&a->path, a);
   11186:	6923      	ldr	r3, [r4, #16]
   11188:	2b00      	cmp	r3, #0
   1118a:	d0d4      	beq.n	11136 <anim_task+0x66>
   1118c:	4621      	mov	r1, r4
   1118e:	f104 0010 	add.w	r0, r4, #16
   11192:	4798      	blx	r3
                if(a->exec_cb) a->exec_cb(a->var, new_value);
   11194:	6863      	ldr	r3, [r4, #4]
   11196:	2b00      	cmp	r3, #0
   11198:	d0d3      	beq.n	11142 <anim_task+0x72>
   1119a:	b201      	sxth	r1, r0
   1119c:	6820      	ldr	r0, [r4, #0]
   1119e:	4798      	blx	r3
   111a0:	e7cf      	b.n	11142 <anim_task+0x72>
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
   111a2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   111a6:	f013 0301 	ands.w	r3, r3, #1
   111aa:	d108      	bne.n	111be <anim_task+0xee>
   111ac:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   111ae:	2a00      	cmp	r2, #0
   111b0:	d048      	beq.n	11244 <anim_task+0x174>
   111b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   111b6:	428a      	cmp	r2, r1
   111b8:	d04b      	beq.n	11252 <anim_task+0x182>
        a->repeat_cnt--;
   111ba:	3a01      	subs	r2, #1
   111bc:	86a2      	strh	r2, [r4, #52]	; 0x34
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
   111be:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   111c0:	b1ca      	cbz	r2, 111f6 <anim_task+0x126>
        a->act_time = -a->repeat_delay; /*Restart the animation*/
   111c2:	6b22      	ldr	r2, [r4, #48]	; 0x30
   111c4:	4252      	negs	r2, r2
   111c6:	6262      	str	r2, [r4, #36]	; 0x24
        if(a->playback_time != 0) {
   111c8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   111ca:	2a00      	cmp	r2, #0
   111cc:	d0bd      	beq.n	1114a <anim_task+0x7a>
            if(a->playback_now == 0) a->act_time = -a->playback_delay;
   111ce:	2b00      	cmp	r3, #0
   111d0:	d03b      	beq.n	1124a <anim_task+0x17a>
            a->playback_now = a->playback_now == 0 ? 1 : 0;
   111d2:	f083 0301 	eor.w	r3, r3, #1
   111d6:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
   111da:	f363 0100 	bfi	r1, r3, #0, #1
   111de:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
            tmp      = a->start;
   111e2:	69a3      	ldr	r3, [r4, #24]
            a->start = a->end;
   111e4:	69e0      	ldr	r0, [r4, #28]
   111e6:	61a0      	str	r0, [r4, #24]
            a->end   = tmp;
   111e8:	61e3      	str	r3, [r4, #28]
            a->time = a->playback_now == 0 ? a->time_orig : a->playback_time;
   111ea:	f011 0f01 	tst.w	r1, #1
   111ee:	bf08      	it	eq
   111f0:	6ba2      	ldreq	r2, [r4, #56]	; 0x38
   111f2:	6222      	str	r2, [r4, #32]
   111f4:	e7a9      	b.n	1114a <anim_task+0x7a>
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
   111f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   111f8:	b102      	cbz	r2, 111fc <anim_task+0x12c>
   111fa:	b333      	cbz	r3, 1124a <anim_task+0x17a>
        _lv_memcpy(&a_tmp, a, sizeof(lv_anim_t));
   111fc:	2240      	movs	r2, #64	; 0x40
   111fe:	4621      	mov	r1, r4
   11200:	4668      	mov	r0, sp
   11202:	4b1e      	ldr	r3, [pc, #120]	; (1127c <anim_task+0x1ac>)
   11204:	4798      	blx	r3
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
   11206:	4621      	mov	r1, r4
   11208:	4630      	mov	r0, r6
   1120a:	4b1d      	ldr	r3, [pc, #116]	; (11280 <anim_task+0x1b0>)
   1120c:	4798      	blx	r3
        lv_mem_free(a);
   1120e:	4620      	mov	r0, r4
   11210:	4b1c      	ldr	r3, [pc, #112]	; (11284 <anim_task+0x1b4>)
   11212:	4798      	blx	r3
        anim_mark_list_change();
   11214:	4b1c      	ldr	r3, [pc, #112]	; (11288 <anim_task+0x1b8>)
   11216:	4798      	blx	r3
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
   11218:	9b03      	ldr	r3, [sp, #12]
   1121a:	2b00      	cmp	r3, #0
   1121c:	d095      	beq.n	1114a <anim_task+0x7a>
   1121e:	4668      	mov	r0, sp
   11220:	4798      	blx	r3
   11222:	e792      	b.n	1114a <anim_task+0x7a>
    last_task_run = lv_tick_get();
   11224:	4b19      	ldr	r3, [pc, #100]	; (1128c <anim_task+0x1bc>)
   11226:	4798      	blx	r3
   11228:	4b11      	ldr	r3, [pc, #68]	; (11270 <anim_task+0x1a0>)
   1122a:	6098      	str	r0, [r3, #8]
}
   1122c:	b011      	add	sp, #68	; 0x44
   1122e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            a->act_time += elaps;
   11232:	6263      	str	r3, [r4, #36]	; 0x24
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
   11234:	4621      	mov	r1, r4
   11236:	4630      	mov	r0, r6
   11238:	4b0c      	ldr	r3, [pc, #48]	; (1126c <anim_task+0x19c>)
   1123a:	4798      	blx	r3
   1123c:	4604      	mov	r4, r0
   1123e:	e78a      	b.n	11156 <anim_task+0x86>
            a->act_time += elaps;
   11240:	6263      	str	r3, [r4, #36]	; 0x24
   11242:	e79c      	b.n	1117e <anim_task+0xae>
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
   11244:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   11246:	2a00      	cmp	r2, #0
   11248:	d0d8      	beq.n	111fc <anim_task+0x12c>
            if(a->playback_now == 0) a->act_time = -a->playback_delay;
   1124a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   1124c:	4249      	negs	r1, r1
   1124e:	6261      	str	r1, [r4, #36]	; 0x24
   11250:	e7bf      	b.n	111d2 <anim_task+0x102>
        a->act_time = -a->repeat_delay; /*Restart the animation*/
   11252:	6b22      	ldr	r2, [r4, #48]	; 0x30
   11254:	4252      	negs	r2, r2
   11256:	6262      	str	r2, [r4, #36]	; 0x24
        if(a->playback_time != 0) {
   11258:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1125a:	2a00      	cmp	r2, #0
   1125c:	f43f af75 	beq.w	1114a <anim_task+0x7a>
   11260:	e7f3      	b.n	1124a <anim_task+0x17a>
   11262:	bf00      	nop
   11264:	2000c758 	.word	0x2000c758
   11268:	00011f9d 	.word	0x00011f9d
   1126c:	00011fb1 	.word	0x00011fb1
   11270:	20008578 	.word	0x20008578
   11274:	00011065 	.word	0x00011065
   11278:	00011075 	.word	0x00011075
   1127c:	00012649 	.word	0x00012649
   11280:	00012089 	.word	0x00012089
   11284:	000124b9 	.word	0x000124b9
   11288:	00011099 	.word	0x00011099
   1128c:	0001104d 	.word	0x0001104d

00011290 <_lv_anim_core_init>:
{
   11290:	b538      	push	{r3, r4, r5, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
   11292:	2140      	movs	r1, #64	; 0x40
   11294:	4809      	ldr	r0, [pc, #36]	; (112bc <_lv_anim_core_init+0x2c>)
   11296:	4b0a      	ldr	r3, [pc, #40]	; (112c0 <_lv_anim_core_init+0x30>)
   11298:	4798      	blx	r3
    last_task_run = lv_tick_get();
   1129a:	4b0a      	ldr	r3, [pc, #40]	; (112c4 <_lv_anim_core_init+0x34>)
   1129c:	4798      	blx	r3
   1129e:	4c0a      	ldr	r4, [pc, #40]	; (112c8 <_lv_anim_core_init+0x38>)
   112a0:	60a0      	str	r0, [r4, #8]
    _lv_anim_task = lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_ANIM_TASK_PRIO, NULL);
   112a2:	2300      	movs	r3, #0
   112a4:	2204      	movs	r2, #4
   112a6:	211e      	movs	r1, #30
   112a8:	4808      	ldr	r0, [pc, #32]	; (112cc <_lv_anim_core_init+0x3c>)
   112aa:	4d09      	ldr	r5, [pc, #36]	; (112d0 <_lv_anim_core_init+0x40>)
   112ac:	47a8      	blx	r5
   112ae:	6060      	str	r0, [r4, #4]
    anim_mark_list_change(); /*Turn off the animation task*/
   112b0:	4b08      	ldr	r3, [pc, #32]	; (112d4 <_lv_anim_core_init+0x44>)
   112b2:	4798      	blx	r3
    anim_list_changed = false; /*The list has not actaully changed*/
   112b4:	2300      	movs	r3, #0
   112b6:	7023      	strb	r3, [r4, #0]
   112b8:	bd38      	pop	{r3, r4, r5, pc}
   112ba:	bf00      	nop
   112bc:	2000c758 	.word	0x2000c758
   112c0:	00011eed 	.word	0x00011eed
   112c4:	0001104d 	.word	0x0001104d
   112c8:	20008578 	.word	0x20008578
   112cc:	000110d1 	.word	0x000110d1
   112d0:	000139d9 	.word	0x000139d9
   112d4:	00011099 	.word	0x00011099

000112d8 <lv_anim_init>:
{
   112d8:	b510      	push	{r4, lr}
   112da:	4604      	mov	r4, r0
    _lv_memset_00(a, sizeof(lv_anim_t));
   112dc:	2140      	movs	r1, #64	; 0x40
   112de:	4b0d      	ldr	r3, [pc, #52]	; (11314 <lv_anim_init+0x3c>)
   112e0:	4798      	blx	r3
    a->time    = 500;
   112e2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   112e6:	6223      	str	r3, [r4, #32]
    a->start   = 0;
   112e8:	2300      	movs	r3, #0
   112ea:	61a3      	str	r3, [r4, #24]
    a->end     = 100;
   112ec:	2364      	movs	r3, #100	; 0x64
   112ee:	61e3      	str	r3, [r4, #28]
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
   112f0:	4b09      	ldr	r3, [pc, #36]	; (11318 <lv_anim_init+0x40>)
   112f2:	781a      	ldrb	r2, [r3, #0]
   112f4:	7422      	strb	r2, [r4, #16]
   112f6:	785a      	ldrb	r2, [r3, #1]
   112f8:	7462      	strb	r2, [r4, #17]
   112fa:	789a      	ldrb	r2, [r3, #2]
   112fc:	74a2      	strb	r2, [r4, #18]
   112fe:	78db      	ldrb	r3, [r3, #3]
   11300:	74e3      	strb	r3, [r4, #19]
    a->repeat_cnt = 1;
   11302:	2301      	movs	r3, #1
   11304:	86a3      	strh	r3, [r4, #52]	; 0x34
    a->early_apply = 1;
   11306:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   1130a:	f043 0301 	orr.w	r3, r3, #1
   1130e:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   11312:	bd10      	pop	{r4, pc}
   11314:	00012b2b 	.word	0x00012b2b
   11318:	000291f4 	.word	0x000291f4

0001131c <lv_anim_del>:
{
   1131c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11320:	4607      	mov	r7, r0
   11322:	4689      	mov	r9, r1
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
   11324:	4815      	ldr	r0, [pc, #84]	; (1137c <lv_anim_del+0x60>)
   11326:	4b16      	ldr	r3, [pc, #88]	; (11380 <lv_anim_del+0x64>)
   11328:	4798      	blx	r3
    while(a != NULL) {
   1132a:	b310      	cbz	r0, 11372 <lv_anim_del+0x56>
   1132c:	4604      	mov	r4, r0
   1132e:	f04f 0a00 	mov.w	sl, #0
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
   11332:	f8df 8048 	ldr.w	r8, [pc, #72]	; 1137c <lv_anim_del+0x60>
   11336:	4e13      	ldr	r6, [pc, #76]	; (11384 <lv_anim_del+0x68>)
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
   11338:	f8df b054 	ldr.w	fp, [pc, #84]	; 11390 <lv_anim_del+0x74>
   1133c:	e00b      	b.n	11356 <lv_anim_del+0x3a>
   1133e:	4621      	mov	r1, r4
   11340:	4640      	mov	r0, r8
   11342:	47d8      	blx	fp
            lv_mem_free(a);
   11344:	4620      	mov	r0, r4
   11346:	4b10      	ldr	r3, [pc, #64]	; (11388 <lv_anim_del+0x6c>)
   11348:	4798      	blx	r3
            anim_mark_list_change(); /*Read by `anim_task`. It need to know if a delete occurred in
   1134a:	4b10      	ldr	r3, [pc, #64]	; (1138c <lv_anim_del+0x70>)
   1134c:	4798      	blx	r3
            del = true;
   1134e:	f04f 0a01 	mov.w	sl, #1
   11352:	462c      	mov	r4, r5
    while(a != NULL) {
   11354:	b17d      	cbz	r5, 11376 <lv_anim_del+0x5a>
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
   11356:	4621      	mov	r1, r4
   11358:	4640      	mov	r0, r8
   1135a:	47b0      	blx	r6
   1135c:	4605      	mov	r5, r0
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
   1135e:	6823      	ldr	r3, [r4, #0]
   11360:	42bb      	cmp	r3, r7
   11362:	d1f6      	bne.n	11352 <lv_anim_del+0x36>
   11364:	6863      	ldr	r3, [r4, #4]
   11366:	454b      	cmp	r3, r9
   11368:	d0e9      	beq.n	1133e <lv_anim_del+0x22>
   1136a:	f1b9 0f00 	cmp.w	r9, #0
   1136e:	d1f0      	bne.n	11352 <lv_anim_del+0x36>
   11370:	e7e5      	b.n	1133e <lv_anim_del+0x22>
    bool del = false;
   11372:	f04f 0a00 	mov.w	sl, #0
}
   11376:	4650      	mov	r0, sl
   11378:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1137c:	2000c758 	.word	0x2000c758
   11380:	00011f9d 	.word	0x00011f9d
   11384:	00011fb1 	.word	0x00011fb1
   11388:	000124b9 	.word	0x000124b9
   1138c:	00011099 	.word	0x00011099
   11390:	00012089 	.word	0x00012089

00011394 <lv_anim_start>:
{
   11394:	b530      	push	{r4, r5, lr}
   11396:	b083      	sub	sp, #12
   11398:	4605      	mov	r5, r0
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
   1139a:	6841      	ldr	r1, [r0, #4]
   1139c:	b111      	cbz	r1, 113a4 <lv_anim_start+0x10>
   1139e:	6800      	ldr	r0, [r0, #0]
   113a0:	4b1b      	ldr	r3, [pc, #108]	; (11410 <lv_anim_start+0x7c>)
   113a2:	4798      	blx	r3
    if(_lv_ll_is_empty(&LV_GC_ROOT(_lv_anim_ll))) {
   113a4:	481b      	ldr	r0, [pc, #108]	; (11414 <lv_anim_start+0x80>)
   113a6:	4b1c      	ldr	r3, [pc, #112]	; (11418 <lv_anim_start+0x84>)
   113a8:	4798      	blx	r3
   113aa:	b9f0      	cbnz	r0, 113ea <lv_anim_start+0x56>
    lv_anim_t * new_anim = _lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
   113ac:	4819      	ldr	r0, [pc, #100]	; (11414 <lv_anim_start+0x80>)
   113ae:	4b1b      	ldr	r3, [pc, #108]	; (1141c <lv_anim_start+0x88>)
   113b0:	4798      	blx	r3
   113b2:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_anim);
   113b4:	4b1a      	ldr	r3, [pc, #104]	; (11420 <lv_anim_start+0x8c>)
   113b6:	4798      	blx	r3
   113b8:	b1e8      	cbz	r0, 113f6 <lv_anim_start+0x62>
    if(new_anim == NULL) return;
   113ba:	b1a4      	cbz	r4, 113e6 <lv_anim_start+0x52>
    a->time_orig = a->time;
   113bc:	6a2b      	ldr	r3, [r5, #32]
   113be:	63ab      	str	r3, [r5, #56]	; 0x38
    _lv_memcpy(new_anim, a, sizeof(lv_anim_t));
   113c0:	2240      	movs	r2, #64	; 0x40
   113c2:	4629      	mov	r1, r5
   113c4:	4620      	mov	r0, r4
   113c6:	4b17      	ldr	r3, [pc, #92]	; (11424 <lv_anim_start+0x90>)
   113c8:	4798      	blx	r3
    if(new_anim->early_apply) {
   113ca:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   113ce:	f013 0f01 	tst.w	r3, #1
   113d2:	d006      	beq.n	113e2 <lv_anim_start+0x4e>
        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start);
   113d4:	6863      	ldr	r3, [r4, #4]
   113d6:	b123      	cbz	r3, 113e2 <lv_anim_start+0x4e>
   113d8:	6820      	ldr	r0, [r4, #0]
   113da:	b110      	cbz	r0, 113e2 <lv_anim_start+0x4e>
   113dc:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
   113e0:	4798      	blx	r3
    anim_mark_list_change();
   113e2:	4b11      	ldr	r3, [pc, #68]	; (11428 <lv_anim_start+0x94>)
   113e4:	4798      	blx	r3
}
   113e6:	b003      	add	sp, #12
   113e8:	bd30      	pop	{r4, r5, pc}
        last_task_run = lv_tick_get() - 1;
   113ea:	4b10      	ldr	r3, [pc, #64]	; (1142c <lv_anim_start+0x98>)
   113ec:	4798      	blx	r3
   113ee:	3801      	subs	r0, #1
   113f0:	4b0f      	ldr	r3, [pc, #60]	; (11430 <lv_anim_start+0x9c>)
   113f2:	6098      	str	r0, [r3, #8]
   113f4:	e7da      	b.n	113ac <lv_anim_start+0x18>
    LV_ASSERT_MEM(new_anim);
   113f6:	4b0f      	ldr	r3, [pc, #60]	; (11434 <lv_anim_start+0xa0>)
   113f8:	9300      	str	r3, [sp, #0]
   113fa:	226a      	movs	r2, #106	; 0x6a
   113fc:	490e      	ldr	r1, [pc, #56]	; (11438 <lv_anim_start+0xa4>)
   113fe:	2003      	movs	r0, #3
   11400:	4d0e      	ldr	r5, [pc, #56]	; (1143c <lv_anim_start+0xa8>)
   11402:	47a8      	blx	r5
   11404:	4622      	mov	r2, r4
   11406:	2300      	movs	r3, #0
   11408:	480d      	ldr	r0, [pc, #52]	; (11440 <lv_anim_start+0xac>)
   1140a:	490e      	ldr	r1, [pc, #56]	; (11444 <lv_anim_start+0xb0>)
   1140c:	4788      	blx	r1
   1140e:	e7fe      	b.n	1140e <lv_anim_start+0x7a>
   11410:	0001131d 	.word	0x0001131d
   11414:	2000c758 	.word	0x2000c758
   11418:	00012239 	.word	0x00012239
   1141c:	00011f05 	.word	0x00011f05
   11420:	000022a5 	.word	0x000022a5
   11424:	00012649 	.word	0x00012649
   11428:	00011099 	.word	0x00011099
   1142c:	0001104d 	.word	0x0001104d
   11430:	20008578 	.word	0x20008578
   11434:	000291fc 	.word	0x000291fc
   11438:	0002920c 	.word	0x0002920c
   1143c:	00012251 	.word	0x00012251
   11440:	00023fcc 	.word	0x00023fcc
   11444:	000022ad 	.word	0x000022ad

00011448 <lv_anim_get>:
{
   11448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1144a:	4604      	mov	r4, r0
   1144c:	460f      	mov	r7, r1
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
   1144e:	480a      	ldr	r0, [pc, #40]	; (11478 <lv_anim_get+0x30>)
   11450:	4b0a      	ldr	r3, [pc, #40]	; (1147c <lv_anim_get+0x34>)
   11452:	4798      	blx	r3
   11454:	4601      	mov	r1, r0
   11456:	b160      	cbz	r0, 11472 <lv_anim_get+0x2a>
   11458:	4e07      	ldr	r6, [pc, #28]	; (11478 <lv_anim_get+0x30>)
   1145a:	4d09      	ldr	r5, [pc, #36]	; (11480 <lv_anim_get+0x38>)
   1145c:	e003      	b.n	11466 <lv_anim_get+0x1e>
   1145e:	4630      	mov	r0, r6
   11460:	47a8      	blx	r5
   11462:	4601      	mov	r1, r0
   11464:	b128      	cbz	r0, 11472 <lv_anim_get+0x2a>
        if(a->var == var && a->exec_cb == exec_cb) {
   11466:	680b      	ldr	r3, [r1, #0]
   11468:	42a3      	cmp	r3, r4
   1146a:	d1f8      	bne.n	1145e <lv_anim_get+0x16>
   1146c:	684b      	ldr	r3, [r1, #4]
   1146e:	42bb      	cmp	r3, r7
   11470:	d1f5      	bne.n	1145e <lv_anim_get+0x16>
}
   11472:	4608      	mov	r0, r1
   11474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11476:	bf00      	nop
   11478:	2000c758 	.word	0x2000c758
   1147c:	00011f9d 	.word	0x00011f9d
   11480:	00011fb1 	.word	0x00011fb1

00011484 <lv_anim_speed_to_time>:
    int32_t d     = LV_MATH_ABS((int32_t)start - end);
   11484:	1a89      	subs	r1, r1, r2
   11486:	2900      	cmp	r1, #0
   11488:	bfb8      	it	lt
   1148a:	4249      	neglt	r1, r1
    uint32_t time = (int32_t)((int32_t)(d * 1000) / speed);
   1148c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11490:	fb02 f201 	mul.w	r2, r2, r1
   11494:	fb92 f0f0 	sdiv	r0, r2, r0
   11498:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1149c:	4290      	cmp	r0, r2
   1149e:	bf28      	it	cs
   114a0:	4610      	movcs	r0, r2
        time++;
   114a2:	2800      	cmp	r0, #0
   114a4:	bf08      	it	eq
   114a6:	2001      	moveq	r0, #1
}
   114a8:	b280      	uxth	r0, r0
   114aa:	4770      	bx	lr

000114ac <lv_point_within_circle>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
{
   114ac:	b430      	push	{r4, r5}
    lv_coord_t r = (area->x2 - area->x1) / 2;
   114ae:	f9b0 5000 	ldrsh.w	r5, [r0]
   114b2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   114b6:	1b5b      	subs	r3, r3, r5
   114b8:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   114bc:	105b      	asrs	r3, r3, #1

    /* Circle center */
    lv_coord_t cx = area->x1 + r;
   114be:	b29c      	uxth	r4, r3
    lv_coord_t cy = area->y1 + r;

    /*Simplify the code by moving everything to (0, 0) */
    lv_coord_t px = p->x - cx;
   114c0:	880a      	ldrh	r2, [r1, #0]
   114c2:	1b52      	subs	r2, r2, r5
   114c4:	1b12      	subs	r2, r2, r4
    lv_coord_t py = p->y - cy;
   114c6:	8849      	ldrh	r1, [r1, #2]
   114c8:	8840      	ldrh	r0, [r0, #2]
   114ca:	1a08      	subs	r0, r1, r0
   114cc:	1b00      	subs	r0, r0, r4

    int32_t r_sqrd = r * r;
   114ce:	fb13 f303 	smulbb	r3, r3, r3
    int32_t dist = (px * px) + (py * py);
   114d2:	fb10 f000 	smulbb	r0, r0, r0
   114d6:	fb12 0202 	smlabb	r2, r2, r2, r0

    if(dist <= r_sqrd)
        return true;
    else
        return false;
}
   114da:	4293      	cmp	r3, r2
   114dc:	bfb4      	ite	lt
   114de:	2000      	movlt	r0, #0
   114e0:	2001      	movge	r0, #1
   114e2:	bc30      	pop	{r4, r5}
   114e4:	4770      	bx	lr

000114e6 <lv_area_set_height>:
    area_p->y2 = area_p->y1 + h - 1;
   114e6:	3901      	subs	r1, #1
   114e8:	8843      	ldrh	r3, [r0, #2]
   114ea:	4419      	add	r1, r3
   114ec:	80c1      	strh	r1, [r0, #6]
   114ee:	4770      	bx	lr

000114f0 <lv_area_get_size>:
    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
   114f0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   114f4:	f9b0 3000 	ldrsh.w	r3, [r0]
   114f8:	1ad2      	subs	r2, r2, r3
   114fa:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   114fe:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
   11502:	1a18      	subs	r0, r3, r0
   11504:	3001      	adds	r0, #1
}
   11506:	fb02 0000 	mla	r0, r2, r0, r0
   1150a:	4770      	bx	lr

0001150c <_lv_area_intersect>:
{
   1150c:	b470      	push	{r4, r5, r6}
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
   1150e:	f9b2 5000 	ldrsh.w	r5, [r2]
   11512:	f9b1 3000 	ldrsh.w	r3, [r1]
   11516:	429d      	cmp	r5, r3
   11518:	bfb8      	it	lt
   1151a:	461d      	movlt	r5, r3
   1151c:	8005      	strh	r5, [r0, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
   1151e:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
   11522:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
   11526:	42a3      	cmp	r3, r4
   11528:	bfb8      	it	lt
   1152a:	4623      	movlt	r3, r4
   1152c:	8043      	strh	r3, [r0, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
   1152e:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
   11532:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
   11536:	42b4      	cmp	r4, r6
   11538:	bfa8      	it	ge
   1153a:	4634      	movge	r4, r6
   1153c:	8084      	strh	r4, [r0, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
   1153e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
   11542:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
   11546:	428a      	cmp	r2, r1
   11548:	bfa8      	it	ge
   1154a:	460a      	movge	r2, r1
   1154c:	80c2      	strh	r2, [r0, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
   1154e:	42a5      	cmp	r5, r4
   11550:	dc05      	bgt.n	1155e <_lv_area_intersect+0x52>
   11552:	4293      	cmp	r3, r2
   11554:	bfcc      	ite	gt
   11556:	2000      	movgt	r0, #0
   11558:	2001      	movle	r0, #1
}
   1155a:	bc70      	pop	{r4, r5, r6}
   1155c:	4770      	bx	lr
        union_ok = false;
   1155e:	2000      	movs	r0, #0
   11560:	e7fb      	b.n	1155a <_lv_area_intersect+0x4e>

00011562 <_lv_area_join>:
{
   11562:	b410      	push	{r4}
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
   11564:	f9b2 3000 	ldrsh.w	r3, [r2]
   11568:	f9b1 4000 	ldrsh.w	r4, [r1]
   1156c:	42a3      	cmp	r3, r4
   1156e:	bfa8      	it	ge
   11570:	4623      	movge	r3, r4
   11572:	8003      	strh	r3, [r0, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
   11574:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
   11578:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
   1157c:	42a3      	cmp	r3, r4
   1157e:	bfa8      	it	ge
   11580:	4623      	movge	r3, r4
   11582:	8043      	strh	r3, [r0, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
   11584:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
   11588:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   1158c:	42a3      	cmp	r3, r4
   1158e:	bfb8      	it	lt
   11590:	4623      	movlt	r3, r4
   11592:	8083      	strh	r3, [r0, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
   11594:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
   11598:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
   1159c:	4293      	cmp	r3, r2
   1159e:	bfb8      	it	lt
   115a0:	4613      	movlt	r3, r2
   115a2:	80c3      	strh	r3, [r0, #6]
}
   115a4:	f85d 4b04 	ldr.w	r4, [sp], #4
   115a8:	4770      	bx	lr
	...

000115ac <_lv_area_is_point_on>:
{
   115ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115b0:	b085      	sub	sp, #20
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
   115b2:	f9b1 5000 	ldrsh.w	r5, [r1]
   115b6:	f9b0 e000 	ldrsh.w	lr, [r0]
   115ba:	4575      	cmp	r5, lr
   115bc:	f2c0 809d 	blt.w	116fa <_lv_area_is_point_on+0x14e>
   115c0:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
   115c4:	4545      	cmp	r5, r8
   115c6:	f300 809c 	bgt.w	11702 <_lv_area_is_point_on+0x156>
   115ca:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
   115ce:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
   115d2:	4553      	cmp	r3, sl
   115d4:	f2c0 8097 	blt.w	11706 <_lv_area_is_point_on+0x15a>
   115d8:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
   115dc:	9001      	str	r0, [sp, #4]
    if(!is_on_rect)
   115de:	4283      	cmp	r3, r0
   115e0:	f300 8093 	bgt.w	1170a <_lv_area_is_point_on+0x15e>
    if(radius <= 0) {
   115e4:	2a00      	cmp	r2, #0
   115e6:	f340 8092 	ble.w	1170e <_lv_area_is_point_on+0x162>
   115ea:	468c      	mov	ip, r1
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   115ec:	fa1f f988 	uxth.w	r9, r8
   115f0:	fa1f f68e 	uxth.w	r6, lr
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   115f4:	b287      	uxth	r7, r0
   115f6:	fa1f f58a 	uxth.w	r5, sl
    corner_area.x1 = a_p->x1;
   115fa:	f8ad e008 	strh.w	lr, [sp, #8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   115fe:	f109 0301 	add.w	r3, r9, #1
   11602:	1b9b      	subs	r3, r3, r6
    lv_coord_t w = lv_area_get_width(a_p) / 2;
   11604:	b21b      	sxth	r3, r3
   11606:	eb03 74d3 	add.w	r4, r3, r3, lsr #31
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1160a:	1c7b      	adds	r3, r7, #1
   1160c:	1b5b      	subs	r3, r3, r5
    lv_coord_t h = lv_area_get_height(a_p) / 2;
   1160e:	b21b      	sxth	r3, r3
   11610:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
    lv_coord_t max_radius = LV_MATH_MIN(w, h);
   11614:	1064      	asrs	r4, r4, #1
   11616:	104b      	asrs	r3, r1, #1
    corner_area.x2 = a_p->x1 + radius;
   11618:	42a3      	cmp	r3, r4
   1161a:	bfa8      	it	ge
   1161c:	4623      	movge	r3, r4
   1161e:	4293      	cmp	r3, r2
   11620:	bfa8      	it	ge
   11622:	4613      	movge	r3, r2
   11624:	b29c      	uxth	r4, r3
   11626:	4426      	add	r6, r4
   11628:	b2b6      	uxth	r6, r6
   1162a:	f8ad 600c 	strh.w	r6, [sp, #12]
    corner_area.y1 = a_p->y1;
   1162e:	f8ad a00a 	strh.w	sl, [sp, #10]
    corner_area.y2 = a_p->y1 + radius;
   11632:	4425      	add	r5, r4
   11634:	b2ad      	uxth	r5, r5
   11636:	fa0f fb85 	sxth.w	fp, r5
   1163a:	f8ad b00e 	strh.w	fp, [sp, #14]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   1163e:	2200      	movs	r2, #0
   11640:	f8cd c000 	str.w	ip, [sp]
   11644:	4661      	mov	r1, ip
   11646:	a802      	add	r0, sp, #8
   11648:	f7ff ffb0 	bl	115ac <_lv_area_is_point_on>
   1164c:	b150      	cbz	r0, 11664 <_lv_area_is_point_on+0xb8>
        corner_area.x2 += radius;
   1164e:	4426      	add	r6, r4
   11650:	f8ad 600c 	strh.w	r6, [sp, #12]
        corner_area.y2 += radius;
   11654:	442c      	add	r4, r5
   11656:	f8ad 400e 	strh.w	r4, [sp, #14]
        return lv_point_within_circle(&corner_area, p_p);
   1165a:	9900      	ldr	r1, [sp, #0]
   1165c:	a802      	add	r0, sp, #8
   1165e:	4b2e      	ldr	r3, [pc, #184]	; (11718 <_lv_area_is_point_on+0x16c>)
   11660:	4798      	blx	r3
   11662:	e04b      	b.n	116fc <_lv_area_is_point_on+0x150>
    corner_area.y1 = a_p->y2 - radius;
   11664:	1b3f      	subs	r7, r7, r4
   11666:	b2bf      	uxth	r7, r7
   11668:	f8ad 700a 	strh.w	r7, [sp, #10]
    corner_area.y2 = a_p->y2;
   1166c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   11670:	f8ad 300e 	strh.w	r3, [sp, #14]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   11674:	2200      	movs	r2, #0
   11676:	9900      	ldr	r1, [sp, #0]
   11678:	a802      	add	r0, sp, #8
   1167a:	f7ff ff97 	bl	115ac <_lv_area_is_point_on>
   1167e:	b150      	cbz	r0, 11696 <_lv_area_is_point_on+0xea>
        corner_area.x2 += radius;
   11680:	4426      	add	r6, r4
   11682:	f8ad 600c 	strh.w	r6, [sp, #12]
        corner_area.y1 -= radius;
   11686:	1b3c      	subs	r4, r7, r4
   11688:	f8ad 400a 	strh.w	r4, [sp, #10]
        return lv_point_within_circle(&corner_area, p_p);
   1168c:	9900      	ldr	r1, [sp, #0]
   1168e:	a802      	add	r0, sp, #8
   11690:	4b21      	ldr	r3, [pc, #132]	; (11718 <_lv_area_is_point_on+0x16c>)
   11692:	4798      	blx	r3
   11694:	e032      	b.n	116fc <_lv_area_is_point_on+0x150>
    corner_area.x1 = a_p->x2 - radius;
   11696:	eba9 0904 	sub.w	r9, r9, r4
   1169a:	fa1f f989 	uxth.w	r9, r9
   1169e:	f8ad 9008 	strh.w	r9, [sp, #8]
    corner_area.x2 = a_p->x2;
   116a2:	f8ad 800c 	strh.w	r8, [sp, #12]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   116a6:	2200      	movs	r2, #0
   116a8:	9e00      	ldr	r6, [sp, #0]
   116aa:	4631      	mov	r1, r6
   116ac:	a802      	add	r0, sp, #8
   116ae:	f7ff ff7d 	bl	115ac <_lv_area_is_point_on>
   116b2:	b158      	cbz	r0, 116cc <_lv_area_is_point_on+0x120>
        corner_area.x1 -= radius;
   116b4:	eba9 0904 	sub.w	r9, r9, r4
   116b8:	f8ad 9008 	strh.w	r9, [sp, #8]
        corner_area.y1 -= radius;
   116bc:	1b3c      	subs	r4, r7, r4
   116be:	f8ad 400a 	strh.w	r4, [sp, #10]
        return lv_point_within_circle(&corner_area, p_p);
   116c2:	4631      	mov	r1, r6
   116c4:	a802      	add	r0, sp, #8
   116c6:	4b14      	ldr	r3, [pc, #80]	; (11718 <_lv_area_is_point_on+0x16c>)
   116c8:	4798      	blx	r3
   116ca:	e017      	b.n	116fc <_lv_area_is_point_on+0x150>
    corner_area.y1 = a_p->y1;
   116cc:	f8ad a00a 	strh.w	sl, [sp, #10]
    corner_area.y2 = a_p->y1 + radius;
   116d0:	f8ad b00e 	strh.w	fp, [sp, #14]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   116d4:	2200      	movs	r2, #0
   116d6:	9e00      	ldr	r6, [sp, #0]
   116d8:	4631      	mov	r1, r6
   116da:	a802      	add	r0, sp, #8
   116dc:	f7ff ff66 	bl	115ac <_lv_area_is_point_on>
   116e0:	b1b8      	cbz	r0, 11712 <_lv_area_is_point_on+0x166>
        corner_area.x1 -= radius;
   116e2:	eba9 0904 	sub.w	r9, r9, r4
   116e6:	f8ad 9008 	strh.w	r9, [sp, #8]
        corner_area.y2 += radius;
   116ea:	442c      	add	r4, r5
   116ec:	f8ad 400e 	strh.w	r4, [sp, #14]
        return lv_point_within_circle(&corner_area, p_p);
   116f0:	4631      	mov	r1, r6
   116f2:	a802      	add	r0, sp, #8
   116f4:	4b08      	ldr	r3, [pc, #32]	; (11718 <_lv_area_is_point_on+0x16c>)
   116f6:	4798      	blx	r3
   116f8:	e000      	b.n	116fc <_lv_area_is_point_on+0x150>
        return false;
   116fa:	2000      	movs	r0, #0
}
   116fc:	b005      	add	sp, #20
   116fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return false;
   11702:	2000      	movs	r0, #0
   11704:	e7fa      	b.n	116fc <_lv_area_is_point_on+0x150>
   11706:	2000      	movs	r0, #0
   11708:	e7f8      	b.n	116fc <_lv_area_is_point_on+0x150>
   1170a:	2000      	movs	r0, #0
   1170c:	e7f6      	b.n	116fc <_lv_area_is_point_on+0x150>
        return true;
   1170e:	2001      	movs	r0, #1
   11710:	e7f4      	b.n	116fc <_lv_area_is_point_on+0x150>
    return true;
   11712:	2001      	movs	r0, #1
   11714:	e7f2      	b.n	116fc <_lv_area_is_point_on+0x150>
   11716:	bf00      	nop
   11718:	000114ad 	.word	0x000114ad

0001171c <_lv_area_is_on>:
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
   1171c:	f9b0 2000 	ldrsh.w	r2, [r0]
   11720:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   11724:	429a      	cmp	r2, r3
   11726:	dc14      	bgt.n	11752 <_lv_area_is_on+0x36>
   11728:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   1172c:	f9b1 3000 	ldrsh.w	r3, [r1]
   11730:	429a      	cmp	r2, r3
   11732:	db10      	blt.n	11756 <_lv_area_is_on+0x3a>
   11734:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   11738:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
   1173c:	429a      	cmp	r2, r3
   1173e:	dc0c      	bgt.n	1175a <_lv_area_is_on+0x3e>
   11740:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
   11744:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
   11748:	4298      	cmp	r0, r3
   1174a:	bfb4      	ite	lt
   1174c:	2000      	movlt	r0, #0
   1174e:	2001      	movge	r0, #1
   11750:	4770      	bx	lr
        return false;
   11752:	2000      	movs	r0, #0
   11754:	4770      	bx	lr
   11756:	2000      	movs	r0, #0
   11758:	4770      	bx	lr
   1175a:	2000      	movs	r0, #0
}
   1175c:	4770      	bx	lr
	...

00011760 <_lv_area_is_in>:
{
   11760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11764:	b082      	sub	sp, #8
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
   11766:	f9b0 5000 	ldrsh.w	r5, [r0]
   1176a:	f9b1 3000 	ldrsh.w	r3, [r1]
   1176e:	42ab      	cmp	r3, r5
   11770:	dc14      	bgt.n	1179c <_lv_area_is_in+0x3c>
   11772:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
   11776:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
   1177a:	429c      	cmp	r4, r3
   1177c:	db14      	blt.n	117a8 <_lv_area_is_in+0x48>
   1177e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
   11782:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   11786:	429c      	cmp	r4, r3
   11788:	dc10      	bgt.n	117ac <_lv_area_is_in+0x4c>
   1178a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   1178e:	f9b1 4006 	ldrsh.w	r4, [r1, #6]
   11792:	42a3      	cmp	r3, r4
   11794:	bfcc      	ite	gt
   11796:	2300      	movgt	r3, #0
   11798:	2301      	movle	r3, #1
   1179a:	e000      	b.n	1179e <_lv_area_is_in+0x3e>
    bool is_in = false;
   1179c:	2300      	movs	r3, #0
    if(radius == 0) return is_in;
   1179e:	b93a      	cbnz	r2, 117b0 <_lv_area_is_in+0x50>
}
   117a0:	4618      	mov	r0, r3
   117a2:	b002      	add	sp, #8
   117a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool is_in = false;
   117a8:	2300      	movs	r3, #0
   117aa:	e7f8      	b.n	1179e <_lv_area_is_in+0x3e>
   117ac:	2300      	movs	r3, #0
   117ae:	e7f6      	b.n	1179e <_lv_area_is_in+0x3e>
   117b0:	4617      	mov	r7, r2
   117b2:	460c      	mov	r4, r1
   117b4:	4606      	mov	r6, r0
    p.x = ain_p->x1;
   117b6:	f8ad 5004 	strh.w	r5, [sp, #4]
    p.y = ain_p->y1;
   117ba:	8843      	ldrh	r3, [r0, #2]
   117bc:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   117c0:	a901      	add	r1, sp, #4
   117c2:	4620      	mov	r0, r4
   117c4:	4b13      	ldr	r3, [pc, #76]	; (11814 <_lv_area_is_in+0xb4>)
   117c6:	4798      	blx	r3
   117c8:	4603      	mov	r3, r0
   117ca:	2800      	cmp	r0, #0
   117cc:	d0e8      	beq.n	117a0 <_lv_area_is_in+0x40>
    p.x = ain_p->x2;
   117ce:	f9b6 8004 	ldrsh.w	r8, [r6, #4]
   117d2:	a902      	add	r1, sp, #8
   117d4:	f821 8d04 	strh.w	r8, [r1, #-4]!
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   117d8:	463a      	mov	r2, r7
   117da:	4620      	mov	r0, r4
   117dc:	4b0d      	ldr	r3, [pc, #52]	; (11814 <_lv_area_is_in+0xb4>)
   117de:	4798      	blx	r3
   117e0:	4603      	mov	r3, r0
   117e2:	2800      	cmp	r0, #0
   117e4:	d0dc      	beq.n	117a0 <_lv_area_is_in+0x40>
    p.x = ain_p->x1;
   117e6:	f8ad 5004 	strh.w	r5, [sp, #4]
    p.y = ain_p->y2;
   117ea:	88f3      	ldrh	r3, [r6, #6]
   117ec:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   117f0:	463a      	mov	r2, r7
   117f2:	a901      	add	r1, sp, #4
   117f4:	4620      	mov	r0, r4
   117f6:	4b07      	ldr	r3, [pc, #28]	; (11814 <_lv_area_is_in+0xb4>)
   117f8:	4798      	blx	r3
   117fa:	4603      	mov	r3, r0
   117fc:	2800      	cmp	r0, #0
   117fe:	d0cf      	beq.n	117a0 <_lv_area_is_in+0x40>
    p.x = ain_p->x2;
   11800:	a902      	add	r1, sp, #8
   11802:	f821 8d04 	strh.w	r8, [r1, #-4]!
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   11806:	463a      	mov	r2, r7
   11808:	4620      	mov	r0, r4
   1180a:	4b02      	ldr	r3, [pc, #8]	; (11814 <_lv_area_is_in+0xb4>)
   1180c:	4798      	blx	r3
   1180e:	4603      	mov	r3, r0
   11810:	e7c6      	b.n	117a0 <_lv_area_is_in+0x40>
   11812:	bf00      	nop
   11814:	000115ad 	.word	0x000115ad

00011818 <_lv_area_align>:
{
   11818:	b430      	push	{r4, r5}
    switch(align) {
   1181a:	2a14      	cmp	r2, #20
   1181c:	d83a      	bhi.n	11894 <_lv_area_align+0x7c>
   1181e:	e8df f012 	tbh	[pc, r2, lsl #1]
   11822:	0015      	.short	0x0015
   11824:	00470043 	.word	0x00470043
   11828:	0067005c 	.word	0x0067005c
   1182c:	008d0072 	.word	0x008d0072
   11830:	00b3009e 	.word	0x00b3009e
   11834:	00d600ce 	.word	0x00d600ce
   11838:	00fc00ee 	.word	0x00fc00ee
   1183c:	011c0104 	.word	0x011c0104
   11840:	0132012a 	.word	0x0132012a
   11844:	0158014a 	.word	0x0158014a
   11848:	01780160 	.word	0x01780160
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1184c:	8882      	ldrh	r2, [r0, #4]
   1184e:	3201      	adds	r2, #1
   11850:	8804      	ldrh	r4, [r0, #0]
   11852:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   11854:	b212      	sxth	r2, r2
   11856:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   1185a:	888a      	ldrh	r2, [r1, #4]
   1185c:	3201      	adds	r2, #1
   1185e:	880d      	ldrh	r5, [r1, #0]
   11860:	1b52      	subs	r2, r2, r5
   11862:	b212      	sxth	r2, r2
   11864:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   11868:	1052      	asrs	r2, r2, #1
   1186a:	ebc2 0264 	rsb	r2, r2, r4, asr #1
   1186e:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   11870:	88c2      	ldrh	r2, [r0, #6]
   11872:	3201      	adds	r2, #1
   11874:	8844      	ldrh	r4, [r0, #2]
   11876:	1b12      	subs	r2, r2, r4
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
   11878:	b212      	sxth	r2, r2
   1187a:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   1187e:	88ca      	ldrh	r2, [r1, #6]
   11880:	3201      	adds	r2, #1
   11882:	8849      	ldrh	r1, [r1, #2]
   11884:	1a52      	subs	r2, r2, r1
   11886:	b212      	sxth	r2, r2
   11888:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   1188c:	1052      	asrs	r2, r2, #1
   1188e:	ebc2 0264 	rsb	r2, r2, r4, asr #1
   11892:	805a      	strh	r2, [r3, #2]
    res->x += base->x1;
   11894:	881a      	ldrh	r2, [r3, #0]
   11896:	8801      	ldrh	r1, [r0, #0]
   11898:	440a      	add	r2, r1
   1189a:	801a      	strh	r2, [r3, #0]
    res->y += base->y1;
   1189c:	885a      	ldrh	r2, [r3, #2]
   1189e:	8841      	ldrh	r1, [r0, #2]
   118a0:	440a      	add	r2, r1
   118a2:	805a      	strh	r2, [r3, #2]
}
   118a4:	bc30      	pop	{r4, r5}
   118a6:	4770      	bx	lr
            res->x = 0;
   118a8:	2200      	movs	r2, #0
   118aa:	801a      	strh	r2, [r3, #0]
            res->y = 0;
   118ac:	805a      	strh	r2, [r3, #2]
            break;
   118ae:	e7f1      	b.n	11894 <_lv_area_align+0x7c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   118b0:	8882      	ldrh	r2, [r0, #4]
   118b2:	3201      	adds	r2, #1
   118b4:	8804      	ldrh	r4, [r0, #0]
   118b6:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   118b8:	b212      	sxth	r2, r2
   118ba:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   118be:	888a      	ldrh	r2, [r1, #4]
   118c0:	3201      	adds	r2, #1
   118c2:	8809      	ldrh	r1, [r1, #0]
   118c4:	1a52      	subs	r2, r2, r1
   118c6:	b212      	sxth	r2, r2
   118c8:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   118cc:	1052      	asrs	r2, r2, #1
   118ce:	ebc2 0264 	rsb	r2, r2, r4, asr #1
   118d2:	801a      	strh	r2, [r3, #0]
            res->y = 0;
   118d4:	2200      	movs	r2, #0
   118d6:	805a      	strh	r2, [r3, #2]
            break;
   118d8:	e7dc      	b.n	11894 <_lv_area_align+0x7c>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   118da:	8882      	ldrh	r2, [r0, #4]
   118dc:	888c      	ldrh	r4, [r1, #4]
   118de:	1b12      	subs	r2, r2, r4
   118e0:	8804      	ldrh	r4, [r0, #0]
   118e2:	1b12      	subs	r2, r2, r4
   118e4:	8809      	ldrh	r1, [r1, #0]
   118e6:	440a      	add	r2, r1
   118e8:	801a      	strh	r2, [r3, #0]
            res->y = 0;
   118ea:	2200      	movs	r2, #0
   118ec:	805a      	strh	r2, [r3, #2]
            break;
   118ee:	e7d1      	b.n	11894 <_lv_area_align+0x7c>
            res->x = 0;
   118f0:	2200      	movs	r2, #0
   118f2:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
   118f4:	88c2      	ldrh	r2, [r0, #6]
   118f6:	88cc      	ldrh	r4, [r1, #6]
   118f8:	1b12      	subs	r2, r2, r4
   118fa:	8844      	ldrh	r4, [r0, #2]
   118fc:	1b12      	subs	r2, r2, r4
   118fe:	8849      	ldrh	r1, [r1, #2]
   11900:	440a      	add	r2, r1
   11902:	805a      	strh	r2, [r3, #2]
            break;
   11904:	e7c6      	b.n	11894 <_lv_area_align+0x7c>
   11906:	8882      	ldrh	r2, [r0, #4]
   11908:	3201      	adds	r2, #1
   1190a:	8804      	ldrh	r4, [r0, #0]
   1190c:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   1190e:	b212      	sxth	r2, r2
   11910:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   11914:	888a      	ldrh	r2, [r1, #4]
   11916:	3201      	adds	r2, #1
   11918:	880d      	ldrh	r5, [r1, #0]
   1191a:	1b52      	subs	r2, r2, r5
   1191c:	b212      	sxth	r2, r2
   1191e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   11922:	1052      	asrs	r2, r2, #1
   11924:	ebc2 0264 	rsb	r2, r2, r4, asr #1
   11928:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
   1192a:	88c2      	ldrh	r2, [r0, #6]
   1192c:	88cc      	ldrh	r4, [r1, #6]
   1192e:	1b12      	subs	r2, r2, r4
   11930:	8844      	ldrh	r4, [r0, #2]
   11932:	1b12      	subs	r2, r2, r4
   11934:	8849      	ldrh	r1, [r1, #2]
   11936:	440a      	add	r2, r1
   11938:	805a      	strh	r2, [r3, #2]
            break;
   1193a:	e7ab      	b.n	11894 <_lv_area_align+0x7c>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   1193c:	8882      	ldrh	r2, [r0, #4]
   1193e:	888c      	ldrh	r4, [r1, #4]
   11940:	1b12      	subs	r2, r2, r4
   11942:	8804      	ldrh	r4, [r0, #0]
   11944:	1b12      	subs	r2, r2, r4
   11946:	880c      	ldrh	r4, [r1, #0]
   11948:	4422      	add	r2, r4
   1194a:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
   1194c:	88c2      	ldrh	r2, [r0, #6]
   1194e:	88cc      	ldrh	r4, [r1, #6]
   11950:	1b12      	subs	r2, r2, r4
   11952:	8844      	ldrh	r4, [r0, #2]
   11954:	1b12      	subs	r2, r2, r4
   11956:	8849      	ldrh	r1, [r1, #2]
   11958:	440a      	add	r2, r1
   1195a:	805a      	strh	r2, [r3, #2]
            break;
   1195c:	e79a      	b.n	11894 <_lv_area_align+0x7c>
            res->x = 0;
   1195e:	2200      	movs	r2, #0
   11960:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   11962:	88c2      	ldrh	r2, [r0, #6]
   11964:	3201      	adds	r2, #1
   11966:	8844      	ldrh	r4, [r0, #2]
   11968:	1b12      	subs	r2, r2, r4
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
   1196a:	b212      	sxth	r2, r2
   1196c:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   11970:	88ca      	ldrh	r2, [r1, #6]
   11972:	3201      	adds	r2, #1
   11974:	8849      	ldrh	r1, [r1, #2]
   11976:	1a52      	subs	r2, r2, r1
   11978:	b212      	sxth	r2, r2
   1197a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   1197e:	1052      	asrs	r2, r2, #1
   11980:	ebc2 0264 	rsb	r2, r2, r4, asr #1
   11984:	805a      	strh	r2, [r3, #2]
            break;
   11986:	e785      	b.n	11894 <_lv_area_align+0x7c>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   11988:	8882      	ldrh	r2, [r0, #4]
   1198a:	888c      	ldrh	r4, [r1, #4]
   1198c:	1b12      	subs	r2, r2, r4
   1198e:	8804      	ldrh	r4, [r0, #0]
   11990:	1b12      	subs	r2, r2, r4
   11992:	880c      	ldrh	r4, [r1, #0]
   11994:	4422      	add	r2, r4
   11996:	801a      	strh	r2, [r3, #0]
   11998:	88c2      	ldrh	r2, [r0, #6]
   1199a:	3201      	adds	r2, #1
   1199c:	8844      	ldrh	r4, [r0, #2]
   1199e:	1b12      	subs	r2, r2, r4
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
   119a0:	b212      	sxth	r2, r2
   119a2:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   119a6:	88ca      	ldrh	r2, [r1, #6]
   119a8:	3201      	adds	r2, #1
   119aa:	8849      	ldrh	r1, [r1, #2]
   119ac:	1a52      	subs	r2, r2, r1
   119ae:	b212      	sxth	r2, r2
   119b0:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   119b4:	1052      	asrs	r2, r2, #1
   119b6:	ebc2 0264 	rsb	r2, r2, r4, asr #1
   119ba:	805a      	strh	r2, [r3, #2]
            break;
   119bc:	e76a      	b.n	11894 <_lv_area_align+0x7c>
            res->x = 0;
   119be:	2200      	movs	r2, #0
   119c0:	801a      	strh	r2, [r3, #0]
   119c2:	88ca      	ldrh	r2, [r1, #6]
   119c4:	8849      	ldrh	r1, [r1, #2]
   119c6:	1a52      	subs	r2, r2, r1
            res->y = -lv_area_get_height(to_align);
   119c8:	43d2      	mvns	r2, r2
   119ca:	805a      	strh	r2, [r3, #2]
            break;
   119cc:	e762      	b.n	11894 <_lv_area_align+0x7c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   119ce:	8882      	ldrh	r2, [r0, #4]
   119d0:	3201      	adds	r2, #1
   119d2:	8804      	ldrh	r4, [r0, #0]
   119d4:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   119d6:	b212      	sxth	r2, r2
   119d8:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   119dc:	888a      	ldrh	r2, [r1, #4]
   119de:	3201      	adds	r2, #1
   119e0:	880d      	ldrh	r5, [r1, #0]
   119e2:	1b52      	subs	r2, r2, r5
   119e4:	b212      	sxth	r2, r2
   119e6:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   119ea:	1052      	asrs	r2, r2, #1
   119ec:	ebc2 0264 	rsb	r2, r2, r4, asr #1
   119f0:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   119f2:	88ca      	ldrh	r2, [r1, #6]
   119f4:	8849      	ldrh	r1, [r1, #2]
   119f6:	1a52      	subs	r2, r2, r1
            res->y = -lv_area_get_height(to_align);
   119f8:	43d2      	mvns	r2, r2
   119fa:	805a      	strh	r2, [r3, #2]
            break;
   119fc:	e74a      	b.n	11894 <_lv_area_align+0x7c>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   119fe:	8882      	ldrh	r2, [r0, #4]
   11a00:	888c      	ldrh	r4, [r1, #4]
   11a02:	1b12      	subs	r2, r2, r4
   11a04:	8804      	ldrh	r4, [r0, #0]
   11a06:	1b12      	subs	r2, r2, r4
   11a08:	880c      	ldrh	r4, [r1, #0]
   11a0a:	4422      	add	r2, r4
   11a0c:	801a      	strh	r2, [r3, #0]
   11a0e:	88ca      	ldrh	r2, [r1, #6]
   11a10:	8849      	ldrh	r1, [r1, #2]
   11a12:	1a52      	subs	r2, r2, r1
            res->y = -lv_area_get_height(to_align);
   11a14:	43d2      	mvns	r2, r2
   11a16:	805a      	strh	r2, [r3, #2]
            break;
   11a18:	e73c      	b.n	11894 <_lv_area_align+0x7c>
            res->x = 0;
   11a1a:	2200      	movs	r2, #0
   11a1c:	801a      	strh	r2, [r3, #0]
   11a1e:	88c2      	ldrh	r2, [r0, #6]
   11a20:	3201      	adds	r2, #1
   11a22:	8841      	ldrh	r1, [r0, #2]
   11a24:	1a52      	subs	r2, r2, r1
            res->y = lv_area_get_height(base);
   11a26:	805a      	strh	r2, [r3, #2]
            break;
   11a28:	e734      	b.n	11894 <_lv_area_align+0x7c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   11a2a:	8882      	ldrh	r2, [r0, #4]
   11a2c:	3201      	adds	r2, #1
   11a2e:	8804      	ldrh	r4, [r0, #0]
   11a30:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   11a32:	b212      	sxth	r2, r2
   11a34:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   11a38:	888a      	ldrh	r2, [r1, #4]
   11a3a:	3201      	adds	r2, #1
   11a3c:	8809      	ldrh	r1, [r1, #0]
   11a3e:	1a52      	subs	r2, r2, r1
   11a40:	b212      	sxth	r2, r2
   11a42:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   11a46:	1052      	asrs	r2, r2, #1
   11a48:	ebc2 0264 	rsb	r2, r2, r4, asr #1
   11a4c:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   11a4e:	88c2      	ldrh	r2, [r0, #6]
   11a50:	3201      	adds	r2, #1
   11a52:	8841      	ldrh	r1, [r0, #2]
   11a54:	1a52      	subs	r2, r2, r1
            res->y = lv_area_get_height(base);
   11a56:	805a      	strh	r2, [r3, #2]
            break;
   11a58:	e71c      	b.n	11894 <_lv_area_align+0x7c>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   11a5a:	8882      	ldrh	r2, [r0, #4]
   11a5c:	888c      	ldrh	r4, [r1, #4]
   11a5e:	1b12      	subs	r2, r2, r4
   11a60:	8804      	ldrh	r4, [r0, #0]
   11a62:	1b12      	subs	r2, r2, r4
   11a64:	8809      	ldrh	r1, [r1, #0]
   11a66:	440a      	add	r2, r1
   11a68:	801a      	strh	r2, [r3, #0]
   11a6a:	88c2      	ldrh	r2, [r0, #6]
   11a6c:	3201      	adds	r2, #1
   11a6e:	8841      	ldrh	r1, [r0, #2]
   11a70:	1a52      	subs	r2, r2, r1
            res->y = lv_area_get_height(base);
   11a72:	805a      	strh	r2, [r3, #2]
            break;
   11a74:	e70e      	b.n	11894 <_lv_area_align+0x7c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   11a76:	888a      	ldrh	r2, [r1, #4]
   11a78:	8809      	ldrh	r1, [r1, #0]
   11a7a:	1a52      	subs	r2, r2, r1
            res->x = -lv_area_get_width(to_align);
   11a7c:	43d2      	mvns	r2, r2
   11a7e:	801a      	strh	r2, [r3, #0]
            res->y = 0;
   11a80:	2200      	movs	r2, #0
   11a82:	805a      	strh	r2, [r3, #2]
            break;
   11a84:	e706      	b.n	11894 <_lv_area_align+0x7c>
   11a86:	888a      	ldrh	r2, [r1, #4]
   11a88:	880c      	ldrh	r4, [r1, #0]
   11a8a:	1b12      	subs	r2, r2, r4
            res->x = -lv_area_get_width(to_align);
   11a8c:	43d2      	mvns	r2, r2
   11a8e:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   11a90:	88c2      	ldrh	r2, [r0, #6]
   11a92:	3201      	adds	r2, #1
   11a94:	8844      	ldrh	r4, [r0, #2]
   11a96:	1b12      	subs	r2, r2, r4
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
   11a98:	b212      	sxth	r2, r2
   11a9a:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   11a9e:	88ca      	ldrh	r2, [r1, #6]
   11aa0:	3201      	adds	r2, #1
   11aa2:	8849      	ldrh	r1, [r1, #2]
   11aa4:	1a52      	subs	r2, r2, r1
   11aa6:	b212      	sxth	r2, r2
   11aa8:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   11aac:	1052      	asrs	r2, r2, #1
   11aae:	ebc2 0264 	rsb	r2, r2, r4, asr #1
   11ab2:	805a      	strh	r2, [r3, #2]
            break;
   11ab4:	e6ee      	b.n	11894 <_lv_area_align+0x7c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   11ab6:	888a      	ldrh	r2, [r1, #4]
   11ab8:	880c      	ldrh	r4, [r1, #0]
   11aba:	1b12      	subs	r2, r2, r4
            res->x = -lv_area_get_width(to_align);
   11abc:	43d2      	mvns	r2, r2
   11abe:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
   11ac0:	88c2      	ldrh	r2, [r0, #6]
   11ac2:	88cc      	ldrh	r4, [r1, #6]
   11ac4:	1b12      	subs	r2, r2, r4
   11ac6:	8844      	ldrh	r4, [r0, #2]
   11ac8:	1b12      	subs	r2, r2, r4
   11aca:	8849      	ldrh	r1, [r1, #2]
   11acc:	440a      	add	r2, r1
   11ace:	805a      	strh	r2, [r3, #2]
            break;
   11ad0:	e6e0      	b.n	11894 <_lv_area_align+0x7c>
   11ad2:	8882      	ldrh	r2, [r0, #4]
   11ad4:	3201      	adds	r2, #1
   11ad6:	8801      	ldrh	r1, [r0, #0]
   11ad8:	1a52      	subs	r2, r2, r1
            res->x = lv_area_get_width(base);
   11ada:	801a      	strh	r2, [r3, #0]
            res->y = 0;
   11adc:	2200      	movs	r2, #0
   11ade:	805a      	strh	r2, [r3, #2]
            break;
   11ae0:	e6d8      	b.n	11894 <_lv_area_align+0x7c>
   11ae2:	8882      	ldrh	r2, [r0, #4]
   11ae4:	3201      	adds	r2, #1
   11ae6:	8804      	ldrh	r4, [r0, #0]
   11ae8:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base);
   11aea:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   11aec:	88c2      	ldrh	r2, [r0, #6]
   11aee:	3201      	adds	r2, #1
   11af0:	8844      	ldrh	r4, [r0, #2]
   11af2:	1b12      	subs	r2, r2, r4
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
   11af4:	b212      	sxth	r2, r2
   11af6:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   11afa:	88ca      	ldrh	r2, [r1, #6]
   11afc:	3201      	adds	r2, #1
   11afe:	8849      	ldrh	r1, [r1, #2]
   11b00:	1a52      	subs	r2, r2, r1
   11b02:	b212      	sxth	r2, r2
   11b04:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   11b08:	1052      	asrs	r2, r2, #1
   11b0a:	ebc2 0264 	rsb	r2, r2, r4, asr #1
   11b0e:	805a      	strh	r2, [r3, #2]
            break;
   11b10:	e6c0      	b.n	11894 <_lv_area_align+0x7c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   11b12:	8882      	ldrh	r2, [r0, #4]
   11b14:	3201      	adds	r2, #1
   11b16:	8804      	ldrh	r4, [r0, #0]
   11b18:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base);
   11b1a:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
   11b1c:	88c2      	ldrh	r2, [r0, #6]
   11b1e:	88cc      	ldrh	r4, [r1, #6]
   11b20:	1b12      	subs	r2, r2, r4
   11b22:	8844      	ldrh	r4, [r0, #2]
   11b24:	1b12      	subs	r2, r2, r4
   11b26:	8849      	ldrh	r1, [r1, #2]
   11b28:	440a      	add	r2, r1
   11b2a:	805a      	strh	r2, [r3, #2]
            break;
   11b2c:	e6b2      	b.n	11894 <_lv_area_align+0x7c>

00011b2e <lv_color_fill>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
{
   11b2e:	b430      	push	{r4, r5}
   11b30:	b28d      	uxth	r5, r1
#if LV_COLOR_DEPTH == 16
    uintptr_t buf_int = (uintptr_t) buf;
    if(buf_int & 0x3) {
   11b32:	f010 0f03 	tst.w	r0, #3
        *buf = color;
   11b36:	bf1c      	itt	ne
   11b38:	f820 1b02 	strhne.w	r1, [r0], #2
        buf++;
        px_num--;
   11b3c:	f102 32ff 	addne.w	r2, r2, #4294967295
    }

    uint32_t c32 = color.full + (color.full << 16);
   11b40:	eb05 4105 	add.w	r1, r5, r5, lsl #16
    uint32_t * buf32 = (uint32_t *)buf;

    while(px_num > 16) {
   11b44:	2a10      	cmp	r2, #16
   11b46:	d921      	bls.n	11b8c <lv_color_fill+0x5e>
   11b48:	f100 0320 	add.w	r3, r0, #32
   11b4c:	4614      	mov	r4, r2
        *buf32 = c32;
   11b4e:	f843 1c20 	str.w	r1, [r3, #-32]
        buf32++;
        *buf32 = c32;
   11b52:	f843 1c1c 	str.w	r1, [r3, #-28]
        buf32++;
        *buf32 = c32;
   11b56:	f843 1c18 	str.w	r1, [r3, #-24]
        buf32++;
        *buf32 = c32;
   11b5a:	f843 1c14 	str.w	r1, [r3, #-20]
        buf32++;

        *buf32 = c32;
   11b5e:	f843 1c10 	str.w	r1, [r3, #-16]
        buf32++;
        *buf32 = c32;
   11b62:	f843 1c0c 	str.w	r1, [r3, #-12]
        buf32++;
        *buf32 = c32;
   11b66:	f843 1c08 	str.w	r1, [r3, #-8]
        buf32++;
        *buf32 = c32;
   11b6a:	f843 1c04 	str.w	r1, [r3, #-4]
        buf32++;

        px_num -= 16;
   11b6e:	3c10      	subs	r4, #16
   11b70:	3320      	adds	r3, #32
    while(px_num > 16) {
   11b72:	2c10      	cmp	r4, #16
   11b74:	d8eb      	bhi.n	11b4e <lv_color_fill+0x20>
   11b76:	f1a2 0311 	sub.w	r3, r2, #17
   11b7a:	091b      	lsrs	r3, r3, #4
   11b7c:	1c59      	adds	r1, r3, #1
   11b7e:	3a10      	subs	r2, #16
   11b80:	ebc3 7303 	rsb	r3, r3, r3, lsl #28
   11b84:	eb02 1203 	add.w	r2, r2, r3, lsl #4
        buf32++;
   11b88:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    }

    buf = (lv_color_t *)buf32;

    while(px_num) {
   11b8c:	b11a      	cbz	r2, 11b96 <lv_color_fill+0x68>
        *buf = color;
   11b8e:	f820 5b02 	strh.w	r5, [r0], #2
    while(px_num) {
   11b92:	3a01      	subs	r2, #1
   11b94:	d1fb      	bne.n	11b8e <lv_color_fill+0x60>
        *buf = color;
        buf++;
        px_num --;
    }
#endif
}
   11b96:	bc30      	pop	{r4, r5}
   11b98:	4770      	bx	lr

00011b9a <lv_color_lighten>:


lv_color_t lv_color_lighten(lv_color_t c, lv_opa_t lvl)
{
   11b9a:	b430      	push	{r4, r5}
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
   11b9c:	ebc1 1541 	rsb	r5, r1, r1, lsl #5
   11ba0:	f1c1 04ff 	rsb	r4, r1, #255	; 0xff
   11ba4:	f3c0 23c4 	ubfx	r3, r0, #11, #5
   11ba8:	fb04 5303 	mla	r3, r4, r3, r5
   11bac:	eb03 2203 	add.w	r2, r3, r3, lsl #8
   11bb0:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
   11bb4:	f3c3 52c4 	ubfx	r2, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
   11bb8:	f3c0 1345 	ubfx	r3, r0, #5, #6
   11bbc:	ebc1 1181 	rsb	r1, r1, r1, lsl #6
   11bc0:	fb04 1103 	mla	r1, r4, r3, r1
   11bc4:	eb01 2301 	add.w	r3, r1, r1, lsl #8
   11bc8:	eb01 11c3 	add.w	r1, r1, r3, lsl #7
   11bcc:	f3c1 51c5 	ubfx	r1, r1, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
   11bd0:	f000 001f 	and.w	r0, r0, #31
   11bd4:	fb04 5000 	mla	r0, r4, r0, r5
   11bd8:	eb00 2300 	add.w	r3, r0, r0, lsl #8
   11bdc:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
   11be0:	0dc3      	lsrs	r3, r0, #23
   11be2:	f04f 0000 	mov.w	r0, #0
   11be6:	f363 0004 	bfi	r0, r3, #0, #5
   11bea:	f361 104a 	bfi	r0, r1, #5, #6
   11bee:	f362 20cf 	bfi	r0, r2, #11, #5
    return lv_color_mix(LV_COLOR_WHITE, c, lvl);
}
   11bf2:	bc30      	pop	{r4, r5}
   11bf4:	4770      	bx	lr

00011bf6 <lv_color_darken>:


lv_color_t lv_color_darken(lv_color_t c, lv_opa_t lvl)
{
   11bf6:	b410      	push	{r4}
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
   11bf8:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
   11bfc:	f3c0 23c4 	ubfx	r3, r0, #11, #5
   11c00:	fb01 f303 	mul.w	r3, r1, r3
   11c04:	eb03 2203 	add.w	r2, r3, r3, lsl #8
   11c08:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
   11c0c:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
   11c10:	f3c0 1245 	ubfx	r2, r0, #5, #6
   11c14:	fb01 f202 	mul.w	r2, r1, r2
   11c18:	eb02 2402 	add.w	r4, r2, r2, lsl #8
   11c1c:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
   11c20:	f3c2 52c5 	ubfx	r2, r2, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
   11c24:	f000 001f 	and.w	r0, r0, #31
   11c28:	fb01 f100 	mul.w	r1, r1, r0
   11c2c:	eb01 2001 	add.w	r0, r1, r1, lsl #8
   11c30:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
   11c34:	0dc9      	lsrs	r1, r1, #23
   11c36:	f04f 0000 	mov.w	r0, #0
   11c3a:	f361 0004 	bfi	r0, r1, #0, #5
   11c3e:	f362 104a 	bfi	r0, r2, #5, #6
   11c42:	f363 20cf 	bfi	r0, r3, #11, #5
    return lv_color_mix(LV_COLOR_BLACK, c, lvl);
}
   11c46:	f85d 4b04 	ldr.w	r4, [sp], #4
   11c4a:	4770      	bx	lr

00011c4c <lv_fs_get_real_path>:
static const char * lv_fs_get_real_path(const char * path)
{
    /* Example path: "S:/folder/file.txt"
     * Leave the letter and the : / \ characters*/

    path++; /*Ignore the driver letter*/
   11c4c:	1c42      	adds	r2, r0, #1

    while(*path != '\0') {
   11c4e:	7843      	ldrb	r3, [r0, #1]
   11c50:	b91b      	cbnz	r3, 11c5a <lv_fs_get_real_path+0xe>
   11c52:	e008      	b.n	11c66 <lv_fs_get_real_path+0x1a>
   11c54:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   11c58:	b12b      	cbz	r3, 11c66 <lv_fs_get_real_path+0x1a>
        if(*path == ':' || *path == '\\' || *path == '/') {
   11c5a:	2b3a      	cmp	r3, #58	; 0x3a
   11c5c:	d0fa      	beq.n	11c54 <lv_fs_get_real_path+0x8>
   11c5e:	2b5c      	cmp	r3, #92	; 0x5c
   11c60:	d0f8      	beq.n	11c54 <lv_fs_get_real_path+0x8>
   11c62:	2b2f      	cmp	r3, #47	; 0x2f
   11c64:	d0f6      	beq.n	11c54 <lv_fs_get_real_path+0x8>
            break;
        }
    }

    return path;
}
   11c66:	4610      	mov	r0, r2
   11c68:	4770      	bx	lr
	...

00011c6c <_lv_fs_init>:
{
   11c6c:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_drv_ll), sizeof(lv_fs_drv_t));
   11c6e:	2144      	movs	r1, #68	; 0x44
   11c70:	4801      	ldr	r0, [pc, #4]	; (11c78 <_lv_fs_init+0xc>)
   11c72:	4b02      	ldr	r3, [pc, #8]	; (11c7c <_lv_fs_init+0x10>)
   11c74:	4798      	blx	r3
   11c76:	bd08      	pop	{r3, pc}
   11c78:	2000c72c 	.word	0x2000c72c
   11c7c:	00011eed 	.word	0x00011eed

00011c80 <lv_fs_close>:
{
   11c80:	b538      	push	{r3, r4, r5, lr}
    if(file_p->drv == NULL) {
   11c82:	6843      	ldr	r3, [r0, #4]
   11c84:	b173      	cbz	r3, 11ca4 <lv_fs_close+0x24>
    if(file_p->drv->close_cb == NULL) {
   11c86:	691a      	ldr	r2, [r3, #16]
   11c88:	b172      	cbz	r2, 11ca8 <lv_fs_close+0x28>
   11c8a:	4604      	mov	r4, r0
    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
   11c8c:	6801      	ldr	r1, [r0, #0]
   11c8e:	4618      	mov	r0, r3
   11c90:	4790      	blx	r2
   11c92:	4605      	mov	r5, r0
    lv_mem_free(file_p->file_d); /*Clean up*/
   11c94:	6820      	ldr	r0, [r4, #0]
   11c96:	4b05      	ldr	r3, [pc, #20]	; (11cac <lv_fs_close+0x2c>)
   11c98:	4798      	blx	r3
    file_p->file_d = NULL;
   11c9a:	2300      	movs	r3, #0
   11c9c:	6023      	str	r3, [r4, #0]
    file_p->drv    = NULL;
   11c9e:	6063      	str	r3, [r4, #4]
}
   11ca0:	4628      	mov	r0, r5
   11ca2:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
   11ca4:	250b      	movs	r5, #11
   11ca6:	e7fb      	b.n	11ca0 <lv_fs_close+0x20>
        return LV_FS_RES_NOT_IMP;
   11ca8:	2509      	movs	r5, #9
   11caa:	e7f9      	b.n	11ca0 <lv_fs_close+0x20>
   11cac:	000124b9 	.word	0x000124b9

00011cb0 <lv_fs_read>:
{
   11cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   11cb2:	b085      	sub	sp, #20
    if(br != NULL) *br = 0;
   11cb4:	461e      	mov	r6, r3
   11cb6:	b10b      	cbz	r3, 11cbc <lv_fs_read+0xc>
   11cb8:	2300      	movs	r3, #0
   11cba:	6033      	str	r3, [r6, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
   11cbc:	6845      	ldr	r5, [r0, #4]
   11cbe:	b18d      	cbz	r5, 11ce4 <lv_fs_read+0x34>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
   11cc0:	69af      	ldr	r7, [r5, #24]
   11cc2:	b18f      	cbz	r7, 11ce8 <lv_fs_read+0x38>
   11cc4:	4613      	mov	r3, r2
   11cc6:	460a      	mov	r2, r1
   11cc8:	4604      	mov	r4, r0
    uint32_t br_tmp = 0;
   11cca:	a804      	add	r0, sp, #16
   11ccc:	2100      	movs	r1, #0
   11cce:	f840 1d04 	str.w	r1, [r0, #-4]!
    lv_fs_res_t res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
   11cd2:	6821      	ldr	r1, [r4, #0]
   11cd4:	9000      	str	r0, [sp, #0]
   11cd6:	4628      	mov	r0, r5
   11cd8:	47b8      	blx	r7
    if(br != NULL) *br = br_tmp;
   11cda:	b10e      	cbz	r6, 11ce0 <lv_fs_read+0x30>
   11cdc:	9b03      	ldr	r3, [sp, #12]
   11cde:	6033      	str	r3, [r6, #0]
}
   11ce0:	b005      	add	sp, #20
   11ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
   11ce4:	200b      	movs	r0, #11
   11ce6:	e7fb      	b.n	11ce0 <lv_fs_read+0x30>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
   11ce8:	2009      	movs	r0, #9
   11cea:	e7f9      	b.n	11ce0 <lv_fs_read+0x30>

00011cec <lv_fs_seek>:
{
   11cec:	b538      	push	{r3, r4, r5, lr}
    if(file_p->drv == NULL) {
   11cee:	6844      	ldr	r4, [r0, #4]
   11cf0:	b134      	cbz	r4, 11d00 <lv_fs_seek+0x14>
    if(file_p->drv->seek_cb == NULL) {
   11cf2:	6a25      	ldr	r5, [r4, #32]
   11cf4:	b135      	cbz	r5, 11d04 <lv_fs_seek+0x18>
   11cf6:	460a      	mov	r2, r1
    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
   11cf8:	6801      	ldr	r1, [r0, #0]
   11cfa:	4620      	mov	r0, r4
   11cfc:	47a8      	blx	r5
    return res;
   11cfe:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
   11d00:	200b      	movs	r0, #11
   11d02:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_NOT_IMP;
   11d04:	2009      	movs	r0, #9
}
   11d06:	bd38      	pop	{r3, r4, r5, pc}

00011d08 <lv_fs_get_drv>:
{
   11d08:	b570      	push	{r4, r5, r6, lr}
   11d0a:	4604      	mov	r4, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
   11d0c:	4809      	ldr	r0, [pc, #36]	; (11d34 <lv_fs_get_drv+0x2c>)
   11d0e:	4b0a      	ldr	r3, [pc, #40]	; (11d38 <lv_fs_get_drv+0x30>)
   11d10:	4798      	blx	r3
   11d12:	4601      	mov	r1, r0
   11d14:	b158      	cbz	r0, 11d2e <lv_fs_get_drv+0x26>
        if(drv->letter == letter) {
   11d16:	7803      	ldrb	r3, [r0, #0]
   11d18:	42a3      	cmp	r3, r4
   11d1a:	d008      	beq.n	11d2e <lv_fs_get_drv+0x26>
    _LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
   11d1c:	4e05      	ldr	r6, [pc, #20]	; (11d34 <lv_fs_get_drv+0x2c>)
   11d1e:	4d07      	ldr	r5, [pc, #28]	; (11d3c <lv_fs_get_drv+0x34>)
   11d20:	4630      	mov	r0, r6
   11d22:	47a8      	blx	r5
   11d24:	4601      	mov	r1, r0
   11d26:	b110      	cbz	r0, 11d2e <lv_fs_get_drv+0x26>
        if(drv->letter == letter) {
   11d28:	780b      	ldrb	r3, [r1, #0]
   11d2a:	42a3      	cmp	r3, r4
   11d2c:	d1f8      	bne.n	11d20 <lv_fs_get_drv+0x18>
}
   11d2e:	4608      	mov	r0, r1
   11d30:	bd70      	pop	{r4, r5, r6, pc}
   11d32:	bf00      	nop
   11d34:	2000c72c 	.word	0x2000c72c
   11d38:	00011f9d 	.word	0x00011f9d
   11d3c:	00011fb1 	.word	0x00011fb1

00011d40 <lv_fs_open>:
{
   11d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11d44:	b083      	sub	sp, #12
    file_p->drv    = NULL;
   11d46:	2300      	movs	r3, #0
   11d48:	6043      	str	r3, [r0, #4]
    file_p->file_d = NULL;
   11d4a:	6003      	str	r3, [r0, #0]
    if(path == NULL) return LV_FS_RES_INV_PARAM;
   11d4c:	2900      	cmp	r1, #0
   11d4e:	d045      	beq.n	11ddc <lv_fs_open+0x9c>
   11d50:	460d      	mov	r5, r1
   11d52:	4691      	mov	r9, r2
   11d54:	4604      	mov	r4, r0
    file_p->drv = lv_fs_get_drv(letter);
   11d56:	7808      	ldrb	r0, [r1, #0]
   11d58:	4b24      	ldr	r3, [pc, #144]	; (11dec <lv_fs_open+0xac>)
   11d5a:	4798      	blx	r3
   11d5c:	6060      	str	r0, [r4, #4]
    if(file_p->drv == NULL) {
   11d5e:	b140      	cbz	r0, 11d72 <lv_fs_open+0x32>
    if(file_p->drv->ready_cb != NULL) {
   11d60:	6883      	ldr	r3, [r0, #8]
   11d62:	b153      	cbz	r3, 11d7a <lv_fs_open+0x3a>
        if(file_p->drv->ready_cb(file_p->drv) == false) {
   11d64:	4798      	blx	r3
   11d66:	b940      	cbnz	r0, 11d7a <lv_fs_open+0x3a>
            file_p->drv    = NULL;
   11d68:	2300      	movs	r3, #0
   11d6a:	6063      	str	r3, [r4, #4]
            file_p->file_d = NULL;
   11d6c:	6023      	str	r3, [r4, #0]
            return LV_FS_RES_HW_ERR;
   11d6e:	2501      	movs	r5, #1
   11d70:	e035      	b.n	11dde <lv_fs_open+0x9e>
        file_p->file_d = NULL;
   11d72:	2300      	movs	r3, #0
   11d74:	6023      	str	r3, [r4, #0]
        return LV_FS_RES_NOT_EX;
   11d76:	2503      	movs	r5, #3
   11d78:	e031      	b.n	11dde <lv_fs_open+0x9e>
    file_p->file_d = lv_mem_alloc(file_p->drv->file_size);
   11d7a:	6863      	ldr	r3, [r4, #4]
   11d7c:	8858      	ldrh	r0, [r3, #2]
   11d7e:	4b1c      	ldr	r3, [pc, #112]	; (11df0 <lv_fs_open+0xb0>)
   11d80:	4798      	blx	r3
   11d82:	6020      	str	r0, [r4, #0]
    LV_ASSERT_MEM(file_p->file_d);
   11d84:	4b1b      	ldr	r3, [pc, #108]	; (11df4 <lv_fs_open+0xb4>)
   11d86:	4798      	blx	r3
   11d88:	b128      	cbz	r0, 11d96 <lv_fs_open+0x56>
    if(file_p->file_d == NULL) {
   11d8a:	6826      	ldr	r6, [r4, #0]
   11d8c:	b986      	cbnz	r6, 11db0 <lv_fs_open+0x70>
        file_p->drv = NULL;
   11d8e:	2300      	movs	r3, #0
   11d90:	6063      	str	r3, [r4, #4]
        return LV_FS_RES_OUT_OF_MEM; /* Out of memory */
   11d92:	250a      	movs	r5, #10
   11d94:	e023      	b.n	11dde <lv_fs_open+0x9e>
    LV_ASSERT_MEM(file_p->file_d);
   11d96:	4b18      	ldr	r3, [pc, #96]	; (11df8 <lv_fs_open+0xb8>)
   11d98:	9300      	str	r3, [sp, #0]
   11d9a:	226f      	movs	r2, #111	; 0x6f
   11d9c:	4917      	ldr	r1, [pc, #92]	; (11dfc <lv_fs_open+0xbc>)
   11d9e:	2003      	movs	r0, #3
   11da0:	4d17      	ldr	r5, [pc, #92]	; (11e00 <lv_fs_open+0xc0>)
   11da2:	47a8      	blx	r5
   11da4:	6822      	ldr	r2, [r4, #0]
   11da6:	2300      	movs	r3, #0
   11da8:	4816      	ldr	r0, [pc, #88]	; (11e04 <lv_fs_open+0xc4>)
   11daa:	4917      	ldr	r1, [pc, #92]	; (11e08 <lv_fs_open+0xc8>)
   11dac:	4788      	blx	r1
   11dae:	e7fe      	b.n	11dae <lv_fs_open+0x6e>
    if(file_p->drv->open_cb == NULL) {
   11db0:	f8d4 8004 	ldr.w	r8, [r4, #4]
   11db4:	f8d8 700c 	ldr.w	r7, [r8, #12]
   11db8:	b1af      	cbz	r7, 11de6 <lv_fs_open+0xa6>
    const char * real_path = lv_fs_get_real_path(path);
   11dba:	4628      	mov	r0, r5
   11dbc:	4b13      	ldr	r3, [pc, #76]	; (11e0c <lv_fs_open+0xcc>)
   11dbe:	4798      	blx	r3
    lv_fs_res_t res        = file_p->drv->open_cb(file_p->drv, file_p->file_d, real_path, mode);
   11dc0:	464b      	mov	r3, r9
   11dc2:	4602      	mov	r2, r0
   11dc4:	4631      	mov	r1, r6
   11dc6:	4640      	mov	r0, r8
   11dc8:	47b8      	blx	r7
    if(res != LV_FS_RES_OK) {
   11dca:	4605      	mov	r5, r0
   11dcc:	b138      	cbz	r0, 11dde <lv_fs_open+0x9e>
        lv_mem_free(file_p->file_d);
   11dce:	6820      	ldr	r0, [r4, #0]
   11dd0:	4b0f      	ldr	r3, [pc, #60]	; (11e10 <lv_fs_open+0xd0>)
   11dd2:	4798      	blx	r3
        file_p->file_d = NULL;
   11dd4:	2300      	movs	r3, #0
   11dd6:	6023      	str	r3, [r4, #0]
        file_p->drv    = NULL;
   11dd8:	6063      	str	r3, [r4, #4]
   11dda:	e000      	b.n	11dde <lv_fs_open+0x9e>
    if(path == NULL) return LV_FS_RES_INV_PARAM;
   11ddc:	250b      	movs	r5, #11
}
   11dde:	4628      	mov	r0, r5
   11de0:	b003      	add	sp, #12
   11de2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LV_FS_RES_NOT_IMP;
   11de6:	2509      	movs	r5, #9
   11de8:	e7f9      	b.n	11dde <lv_fs_open+0x9e>
   11dea:	bf00      	nop
   11dec:	00011d09 	.word	0x00011d09
   11df0:	000123d1 	.word	0x000123d1
   11df4:	000022a5 	.word	0x000022a5
   11df8:	0002924c 	.word	0x0002924c
   11dfc:	00029268 	.word	0x00029268
   11e00:	00012251 	.word	0x00012251
   11e04:	00023fcc 	.word	0x00023fcc
   11e08:	000022ad 	.word	0x000022ad
   11e0c:	00011c4d 	.word	0x00011c4d
   11e10:	000124b9 	.word	0x000124b9

00011e14 <lv_fs_get_ext>:
{
   11e14:	b510      	push	{r4, lr}
   11e16:	4604      	mov	r4, r0
    for(i = strlen(fn); i > 0; i--) {
   11e18:	4b12      	ldr	r3, [pc, #72]	; (11e64 <lv_fs_get_ext+0x50>)
   11e1a:	4798      	blx	r3
   11e1c:	b1c8      	cbz	r0, 11e52 <lv_fs_get_ext+0x3e>
   11e1e:	4602      	mov	r2, r0
        if(fn[i] == '.') {
   11e20:	1821      	adds	r1, r4, r0
   11e22:	5c23      	ldrb	r3, [r4, r0]
   11e24:	2b2e      	cmp	r3, #46	; 0x2e
   11e26:	d00f      	beq.n	11e48 <lv_fs_get_ext+0x34>
        else if(fn[i] == '/' || fn[i] == '\\') {
   11e28:	2b2f      	cmp	r3, #47	; 0x2f
   11e2a:	d014      	beq.n	11e56 <lv_fs_get_ext+0x42>
   11e2c:	2b5c      	cmp	r3, #92	; 0x5c
   11e2e:	d014      	beq.n	11e5a <lv_fs_get_ext+0x46>
    for(i = strlen(fn); i > 0; i--) {
   11e30:	3a01      	subs	r2, #1
   11e32:	d00c      	beq.n	11e4e <lv_fs_get_ext+0x3a>
        if(fn[i] == '.') {
   11e34:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   11e38:	2b2e      	cmp	r3, #46	; 0x2e
   11e3a:	d005      	beq.n	11e48 <lv_fs_get_ext+0x34>
        else if(fn[i] == '/' || fn[i] == '\\') {
   11e3c:	2b2f      	cmp	r3, #47	; 0x2f
   11e3e:	d00e      	beq.n	11e5e <lv_fs_get_ext+0x4a>
   11e40:	2b5c      	cmp	r3, #92	; 0x5c
   11e42:	d1f5      	bne.n	11e30 <lv_fs_get_ext+0x1c>
            return ""; /*No extension if a '\' or '/' found*/
   11e44:	4808      	ldr	r0, [pc, #32]	; (11e68 <lv_fs_get_ext+0x54>)
}
   11e46:	bd10      	pop	{r4, pc}
            return &fn[i + 1];
   11e48:	3201      	adds	r2, #1
   11e4a:	18a0      	adds	r0, r4, r2
   11e4c:	bd10      	pop	{r4, pc}
    return ""; /*Empty string if no '.' in the file name. */
   11e4e:	4806      	ldr	r0, [pc, #24]	; (11e68 <lv_fs_get_ext+0x54>)
   11e50:	bd10      	pop	{r4, pc}
   11e52:	4805      	ldr	r0, [pc, #20]	; (11e68 <lv_fs_get_ext+0x54>)
   11e54:	bd10      	pop	{r4, pc}
            return ""; /*No extension if a '\' or '/' found*/
   11e56:	4804      	ldr	r0, [pc, #16]	; (11e68 <lv_fs_get_ext+0x54>)
   11e58:	bd10      	pop	{r4, pc}
   11e5a:	4803      	ldr	r0, [pc, #12]	; (11e68 <lv_fs_get_ext+0x54>)
   11e5c:	bd10      	pop	{r4, pc}
   11e5e:	4802      	ldr	r0, [pc, #8]	; (11e68 <lv_fs_get_ext+0x54>)
   11e60:	bd10      	pop	{r4, pc}
   11e62:	bf00      	nop
   11e64:	0001b513 	.word	0x0001b513
   11e68:	00024ef8 	.word	0x00024ef8

00011e6c <node_set_next>:
 * @param ll_p pointer to linked list
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
   11e6c:	b510      	push	{r4, lr}
   11e6e:	b082      	sub	sp, #8
   11e70:	9201      	str	r2, [sp, #4]
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
   11e72:	b181      	cbz	r1, 11e96 <node_set_next+0x2a>
   11e74:	460c      	mov	r4, r1

    uint32_t node_p_size = sizeof(lv_ll_node_t *);
    if(next)
   11e76:	b182      	cbz	r2, 11e9a <node_set_next+0x2e>
        _lv_memcpy_small(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
   11e78:	6803      	ldr	r3, [r0, #0]
   11e7a:	3304      	adds	r3, #4
   11e7c:	18ca      	adds	r2, r1, r3
   11e7e:	f89d 1004 	ldrb.w	r1, [sp, #4]
   11e82:	54e1      	strb	r1, [r4, r3]
   11e84:	f89d 3005 	ldrb.w	r3, [sp, #5]
   11e88:	7053      	strb	r3, [r2, #1]
   11e8a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   11e8e:	7093      	strb	r3, [r2, #2]
   11e90:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11e94:	70d3      	strb	r3, [r2, #3]
    else
        _lv_memset_00(act + LL_NEXT_P_OFFSET(ll_p), node_p_size);
}
   11e96:	b002      	add	sp, #8
   11e98:	bd10      	pop	{r4, pc}
        _lv_memset_00(act + LL_NEXT_P_OFFSET(ll_p), node_p_size);
   11e9a:	6800      	ldr	r0, [r0, #0]
   11e9c:	3004      	adds	r0, #4
   11e9e:	2104      	movs	r1, #4
   11ea0:	4420      	add	r0, r4
   11ea2:	4b01      	ldr	r3, [pc, #4]	; (11ea8 <node_set_next+0x3c>)
   11ea4:	4798      	blx	r3
   11ea6:	e7f6      	b.n	11e96 <node_set_next+0x2a>
   11ea8:	00012b2b 	.word	0x00012b2b

00011eac <node_set_prev>:
{
   11eac:	b500      	push	{lr}
   11eae:	b083      	sub	sp, #12
   11eb0:	9201      	str	r2, [sp, #4]
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
   11eb2:	b181      	cbz	r1, 11ed6 <node_set_prev+0x2a>
   11eb4:	460a      	mov	r2, r1
    if(prev)
   11eb6:	9b01      	ldr	r3, [sp, #4]
   11eb8:	b183      	cbz	r3, 11edc <node_set_prev+0x30>
        _lv_memcpy_small(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
   11eba:	6801      	ldr	r1, [r0, #0]
   11ebc:	1853      	adds	r3, r2, r1
   11ebe:	f89d 0004 	ldrb.w	r0, [sp, #4]
   11ec2:	5450      	strb	r0, [r2, r1]
   11ec4:	f89d 2005 	ldrb.w	r2, [sp, #5]
   11ec8:	705a      	strb	r2, [r3, #1]
   11eca:	f89d 2006 	ldrb.w	r2, [sp, #6]
   11ece:	709a      	strb	r2, [r3, #2]
   11ed0:	f89d 2007 	ldrb.w	r2, [sp, #7]
   11ed4:	70da      	strb	r2, [r3, #3]
}
   11ed6:	b003      	add	sp, #12
   11ed8:	f85d fb04 	ldr.w	pc, [sp], #4
        _lv_memset_00(act + LL_PREV_P_OFFSET(ll_p), node_p_size);
   11edc:	6800      	ldr	r0, [r0, #0]
   11ede:	2104      	movs	r1, #4
   11ee0:	4410      	add	r0, r2
   11ee2:	4b01      	ldr	r3, [pc, #4]	; (11ee8 <node_set_prev+0x3c>)
   11ee4:	4798      	blx	r3
   11ee6:	e7f6      	b.n	11ed6 <node_set_prev+0x2a>
   11ee8:	00012b2b 	.word	0x00012b2b

00011eec <_lv_ll_init>:
    ll_p->head = NULL;
   11eec:	2300      	movs	r3, #0
   11eee:	6043      	str	r3, [r0, #4]
    ll_p->tail = NULL;
   11ef0:	6083      	str	r3, [r0, #8]
    if(node_size & 0x3) {
   11ef2:	f011 0f03 	tst.w	r1, #3
        node_size = node_size & (~0x3);
   11ef6:	bf1c      	itt	ne
   11ef8:	f021 0103 	bicne.w	r1, r1, #3
        node_size += 4;
   11efc:	3104      	addne	r1, #4
    ll_p->n_size = node_size;
   11efe:	6001      	str	r1, [r0, #0]
   11f00:	4770      	bx	lr
	...

00011f04 <_lv_ll_ins_head>:
{
   11f04:	b538      	push	{r3, r4, r5, lr}
   11f06:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
   11f08:	6800      	ldr	r0, [r0, #0]
   11f0a:	3008      	adds	r0, #8
   11f0c:	4b0d      	ldr	r3, [pc, #52]	; (11f44 <_lv_ll_ins_head+0x40>)
   11f0e:	4798      	blx	r3
    if(n_new != NULL) {
   11f10:	4605      	mov	r5, r0
   11f12:	b190      	cbz	r0, 11f3a <_lv_ll_ins_head+0x36>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
   11f14:	2200      	movs	r2, #0
   11f16:	4601      	mov	r1, r0
   11f18:	4620      	mov	r0, r4
   11f1a:	4b0b      	ldr	r3, [pc, #44]	; (11f48 <_lv_ll_ins_head+0x44>)
   11f1c:	4798      	blx	r3
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
   11f1e:	6862      	ldr	r2, [r4, #4]
   11f20:	4629      	mov	r1, r5
   11f22:	4620      	mov	r0, r4
   11f24:	4b09      	ldr	r3, [pc, #36]	; (11f4c <_lv_ll_ins_head+0x48>)
   11f26:	4798      	blx	r3
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
   11f28:	6861      	ldr	r1, [r4, #4]
   11f2a:	b119      	cbz	r1, 11f34 <_lv_ll_ins_head+0x30>
            node_set_prev(ll_p, ll_p->head, n_new);
   11f2c:	462a      	mov	r2, r5
   11f2e:	4620      	mov	r0, r4
   11f30:	4b05      	ldr	r3, [pc, #20]	; (11f48 <_lv_ll_ins_head+0x44>)
   11f32:	4798      	blx	r3
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
   11f34:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
   11f36:	68a3      	ldr	r3, [r4, #8]
   11f38:	b10b      	cbz	r3, 11f3e <_lv_ll_ins_head+0x3a>
}
   11f3a:	4628      	mov	r0, r5
   11f3c:	bd38      	pop	{r3, r4, r5, pc}
            ll_p->tail = n_new;
   11f3e:	60a5      	str	r5, [r4, #8]
   11f40:	e7fb      	b.n	11f3a <_lv_ll_ins_head+0x36>
   11f42:	bf00      	nop
   11f44:	000123d1 	.word	0x000123d1
   11f48:	00011ead 	.word	0x00011ead
   11f4c:	00011e6d 	.word	0x00011e6d

00011f50 <_lv_ll_ins_tail>:
{
   11f50:	b538      	push	{r3, r4, r5, lr}
   11f52:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
   11f54:	6800      	ldr	r0, [r0, #0]
   11f56:	3008      	adds	r0, #8
   11f58:	4b0d      	ldr	r3, [pc, #52]	; (11f90 <_lv_ll_ins_tail+0x40>)
   11f5a:	4798      	blx	r3
    if(n_new != NULL) {
   11f5c:	4605      	mov	r5, r0
   11f5e:	b190      	cbz	r0, 11f86 <_lv_ll_ins_tail+0x36>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
   11f60:	2200      	movs	r2, #0
   11f62:	4601      	mov	r1, r0
   11f64:	4620      	mov	r0, r4
   11f66:	4b0b      	ldr	r3, [pc, #44]	; (11f94 <_lv_ll_ins_tail+0x44>)
   11f68:	4798      	blx	r3
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is tho old tail*/
   11f6a:	68a2      	ldr	r2, [r4, #8]
   11f6c:	4629      	mov	r1, r5
   11f6e:	4620      	mov	r0, r4
   11f70:	4b09      	ldr	r3, [pc, #36]	; (11f98 <_lv_ll_ins_tail+0x48>)
   11f72:	4798      	blx	r3
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
   11f74:	68a1      	ldr	r1, [r4, #8]
   11f76:	b119      	cbz	r1, 11f80 <_lv_ll_ins_tail+0x30>
            node_set_next(ll_p, ll_p->tail, n_new);
   11f78:	462a      	mov	r2, r5
   11f7a:	4620      	mov	r0, r4
   11f7c:	4b05      	ldr	r3, [pc, #20]	; (11f94 <_lv_ll_ins_tail+0x44>)
   11f7e:	4798      	blx	r3
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
   11f80:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
   11f82:	6863      	ldr	r3, [r4, #4]
   11f84:	b10b      	cbz	r3, 11f8a <_lv_ll_ins_tail+0x3a>
}
   11f86:	4628      	mov	r0, r5
   11f88:	bd38      	pop	{r3, r4, r5, pc}
            ll_p->head = n_new;
   11f8a:	6065      	str	r5, [r4, #4]
   11f8c:	e7fb      	b.n	11f86 <_lv_ll_ins_tail+0x36>
   11f8e:	bf00      	nop
   11f90:	000123d1 	.word	0x000123d1
   11f94:	00011e6d 	.word	0x00011e6d
   11f98:	00011ead 	.word	0x00011ead

00011f9c <_lv_ll_get_head>:
    if(ll_p != NULL) {
   11f9c:	b108      	cbz	r0, 11fa2 <_lv_ll_get_head+0x6>
        head = ll_p->head;
   11f9e:	6840      	ldr	r0, [r0, #4]
   11fa0:	4770      	bx	lr
    void * head = NULL;
   11fa2:	2000      	movs	r0, #0
}
   11fa4:	4770      	bx	lr

00011fa6 <_lv_ll_get_tail>:
    if(ll_p != NULL) {
   11fa6:	b108      	cbz	r0, 11fac <_lv_ll_get_tail+0x6>
        tail = ll_p->tail;
   11fa8:	6880      	ldr	r0, [r0, #8]
   11faa:	4770      	bx	lr
    void * tail = NULL;
   11fac:	2000      	movs	r0, #0
}
   11fae:	4770      	bx	lr

00011fb0 <_lv_ll_get_next>:
{
   11fb0:	b082      	sub	sp, #8
    void * next = NULL;
   11fb2:	2300      	movs	r3, #0
   11fb4:	9301      	str	r3, [sp, #4]
    if(ll_p != NULL) {
   11fb6:	b170      	cbz	r0, 11fd6 <_lv_ll_get_next+0x26>
        _lv_memcpy_small(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
   11fb8:	6803      	ldr	r3, [r0, #0]
   11fba:	3304      	adds	r3, #4
   11fbc:	18ca      	adds	r2, r1, r3
   11fbe:	5ccb      	ldrb	r3, [r1, r3]
   11fc0:	f88d 3004 	strb.w	r3, [sp, #4]
   11fc4:	7853      	ldrb	r3, [r2, #1]
   11fc6:	f88d 3005 	strb.w	r3, [sp, #5]
   11fca:	7893      	ldrb	r3, [r2, #2]
   11fcc:	f88d 3006 	strb.w	r3, [sp, #6]
   11fd0:	78d3      	ldrb	r3, [r2, #3]
   11fd2:	f88d 3007 	strb.w	r3, [sp, #7]
}
   11fd6:	9801      	ldr	r0, [sp, #4]
   11fd8:	b002      	add	sp, #8
   11fda:	4770      	bx	lr

00011fdc <_lv_ll_get_prev>:
{
   11fdc:	b082      	sub	sp, #8
    void * prev = NULL;
   11fde:	2300      	movs	r3, #0
   11fe0:	9301      	str	r3, [sp, #4]
    if(ll_p != NULL) {
   11fe2:	b168      	cbz	r0, 12000 <_lv_ll_get_prev+0x24>
        _lv_memcpy_small(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
   11fe4:	6802      	ldr	r2, [r0, #0]
   11fe6:	188b      	adds	r3, r1, r2
   11fe8:	5c8a      	ldrb	r2, [r1, r2]
   11fea:	f88d 2004 	strb.w	r2, [sp, #4]
   11fee:	785a      	ldrb	r2, [r3, #1]
   11ff0:	f88d 2005 	strb.w	r2, [sp, #5]
   11ff4:	789a      	ldrb	r2, [r3, #2]
   11ff6:	f88d 2006 	strb.w	r2, [sp, #6]
   11ffa:	78db      	ldrb	r3, [r3, #3]
   11ffc:	f88d 3007 	strb.w	r3, [sp, #7]
}
   12000:	9801      	ldr	r0, [sp, #4]
   12002:	b002      	add	sp, #8
   12004:	4770      	bx	lr
	...

00012008 <_lv_ll_ins_prev>:
    if(NULL == ll_p || NULL == n_act) return NULL;
   12008:	b360      	cbz	r0, 12064 <_lv_ll_ins_prev+0x5c>
{
   1200a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1200e:	4604      	mov	r4, r0
    if(NULL == ll_p || NULL == n_act) return NULL;
   12010:	b351      	cbz	r1, 12068 <_lv_ll_ins_prev+0x60>
   12012:	460d      	mov	r5, r1
    if(_lv_ll_get_head(ll_p) == n_act) {
   12014:	6843      	ldr	r3, [r0, #4]
   12016:	4299      	cmp	r1, r3
   12018:	d020      	beq.n	1205c <_lv_ll_ins_prev+0x54>
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
   1201a:	6800      	ldr	r0, [r0, #0]
   1201c:	3008      	adds	r0, #8
   1201e:	4b15      	ldr	r3, [pc, #84]	; (12074 <_lv_ll_ins_prev+0x6c>)
   12020:	4798      	blx	r3
        if(n_new == NULL) return NULL;
   12022:	4606      	mov	r6, r0
   12024:	b318      	cbz	r0, 1206e <_lv_ll_ins_prev+0x66>
        n_prev = _lv_ll_get_prev(ll_p, n_act);
   12026:	4629      	mov	r1, r5
   12028:	4620      	mov	r0, r4
   1202a:	4b13      	ldr	r3, [pc, #76]	; (12078 <_lv_ll_ins_prev+0x70>)
   1202c:	4798      	blx	r3
   1202e:	4680      	mov	r8, r0
        node_set_next(ll_p, n_prev, n_new);
   12030:	4632      	mov	r2, r6
   12032:	4601      	mov	r1, r0
   12034:	4620      	mov	r0, r4
   12036:	4f11      	ldr	r7, [pc, #68]	; (1207c <_lv_ll_ins_prev+0x74>)
   12038:	47b8      	blx	r7
        node_set_prev(ll_p, n_new, n_prev);
   1203a:	4642      	mov	r2, r8
   1203c:	4631      	mov	r1, r6
   1203e:	4620      	mov	r0, r4
   12040:	f8df 8040 	ldr.w	r8, [pc, #64]	; 12084 <_lv_ll_ins_prev+0x7c>
   12044:	47c0      	blx	r8
        node_set_prev(ll_p, n_act, n_new);
   12046:	4632      	mov	r2, r6
   12048:	4629      	mov	r1, r5
   1204a:	4620      	mov	r0, r4
   1204c:	47c0      	blx	r8
        node_set_next(ll_p, n_new, n_act);
   1204e:	462a      	mov	r2, r5
   12050:	4631      	mov	r1, r6
   12052:	4620      	mov	r0, r4
   12054:	47b8      	blx	r7
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
   12056:	4630      	mov	r0, r6
   12058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        n_new = _lv_ll_ins_head(ll_p);
   1205c:	4b08      	ldr	r3, [pc, #32]	; (12080 <_lv_ll_ins_prev+0x78>)
   1205e:	4798      	blx	r3
   12060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(NULL == ll_p || NULL == n_act) return NULL;
   12064:	2000      	movs	r0, #0
   12066:	4770      	bx	lr
   12068:	4608      	mov	r0, r1
   1206a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
}
   1206e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12072:	bf00      	nop
   12074:	000123d1 	.word	0x000123d1
   12078:	00011fdd 	.word	0x00011fdd
   1207c:	00011e6d 	.word	0x00011e6d
   12080:	00011f05 	.word	0x00011f05
   12084:	00011ead 	.word	0x00011ead

00012088 <_lv_ll_remove>:
{
   12088:	b570      	push	{r4, r5, r6, lr}
   1208a:	460d      	mov	r5, r1
    if(ll_p != NULL) {
   1208c:	4604      	mov	r4, r0
   1208e:	b350      	cbz	r0, 120e6 <_lv_ll_remove+0x5e>
    if(_lv_ll_get_head(ll_p) == node_p) {
   12090:	6843      	ldr	r3, [r0, #4]
   12092:	4299      	cmp	r1, r3
   12094:	d029      	beq.n	120ea <_lv_ll_remove+0x62>
    else if(_lv_ll_get_tail(ll_p) == node_p) {
   12096:	6883      	ldr	r3, [r0, #8]
   12098:	4299      	cmp	r1, r3
   1209a:	d017      	beq.n	120cc <_lv_ll_remove+0x44>
        lv_ll_node_t * n_prev = _lv_ll_get_prev(ll_p, node_p);
   1209c:	4629      	mov	r1, r5
   1209e:	4620      	mov	r0, r4
   120a0:	4b18      	ldr	r3, [pc, #96]	; (12104 <_lv_ll_remove+0x7c>)
   120a2:	4798      	blx	r3
   120a4:	4606      	mov	r6, r0
        lv_ll_node_t * n_next = _lv_ll_get_next(ll_p, node_p);
   120a6:	4629      	mov	r1, r5
   120a8:	4620      	mov	r0, r4
   120aa:	4b17      	ldr	r3, [pc, #92]	; (12108 <_lv_ll_remove+0x80>)
   120ac:	4798      	blx	r3
   120ae:	4605      	mov	r5, r0
        node_set_next(ll_p, n_prev, n_next);
   120b0:	4602      	mov	r2, r0
   120b2:	4631      	mov	r1, r6
   120b4:	4620      	mov	r0, r4
   120b6:	4b15      	ldr	r3, [pc, #84]	; (1210c <_lv_ll_remove+0x84>)
   120b8:	4798      	blx	r3
        node_set_prev(ll_p, n_next, n_prev);
   120ba:	4632      	mov	r2, r6
   120bc:	4629      	mov	r1, r5
   120be:	4620      	mov	r0, r4
   120c0:	4b13      	ldr	r3, [pc, #76]	; (12110 <_lv_ll_remove+0x88>)
   120c2:	4798      	blx	r3
}
   120c4:	bd70      	pop	{r4, r5, r6, pc}
            ll_p->tail = NULL;
   120c6:	2300      	movs	r3, #0
   120c8:	60a3      	str	r3, [r4, #8]
   120ca:	bd70      	pop	{r4, r5, r6, pc}
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
   120cc:	4b0d      	ldr	r3, [pc, #52]	; (12104 <_lv_ll_remove+0x7c>)
   120ce:	4798      	blx	r3
   120d0:	60a0      	str	r0, [r4, #8]
        if(ll_p->tail == NULL) {
   120d2:	b128      	cbz	r0, 120e0 <_lv_ll_remove+0x58>
            node_set_next(ll_p, ll_p->tail, NULL);
   120d4:	2200      	movs	r2, #0
   120d6:	4601      	mov	r1, r0
   120d8:	4620      	mov	r0, r4
   120da:	4b0c      	ldr	r3, [pc, #48]	; (1210c <_lv_ll_remove+0x84>)
   120dc:	4798      	blx	r3
   120de:	bd70      	pop	{r4, r5, r6, pc}
            ll_p->head = NULL;
   120e0:	2300      	movs	r3, #0
   120e2:	6063      	str	r3, [r4, #4]
   120e4:	bd70      	pop	{r4, r5, r6, pc}
    if(_lv_ll_get_head(ll_p) == node_p) {
   120e6:	2900      	cmp	r1, #0
   120e8:	d1d8      	bne.n	1209c <_lv_ll_remove+0x14>
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
   120ea:	4629      	mov	r1, r5
   120ec:	4620      	mov	r0, r4
   120ee:	4b06      	ldr	r3, [pc, #24]	; (12108 <_lv_ll_remove+0x80>)
   120f0:	4798      	blx	r3
   120f2:	6060      	str	r0, [r4, #4]
        if(ll_p->head == NULL) {
   120f4:	2800      	cmp	r0, #0
   120f6:	d0e6      	beq.n	120c6 <_lv_ll_remove+0x3e>
            node_set_prev(ll_p, ll_p->head, NULL);
   120f8:	2200      	movs	r2, #0
   120fa:	4601      	mov	r1, r0
   120fc:	4620      	mov	r0, r4
   120fe:	4b04      	ldr	r3, [pc, #16]	; (12110 <_lv_ll_remove+0x88>)
   12100:	4798      	blx	r3
   12102:	bd70      	pop	{r4, r5, r6, pc}
   12104:	00011fdd 	.word	0x00011fdd
   12108:	00011fb1 	.word	0x00011fb1
   1210c:	00011e6d 	.word	0x00011e6d
   12110:	00011ead 	.word	0x00011ead

00012114 <_lv_ll_chg_list>:
{
   12114:	b570      	push	{r4, r5, r6, lr}
   12116:	460c      	mov	r4, r1
   12118:	4615      	mov	r5, r2
   1211a:	461e      	mov	r6, r3
    _lv_ll_remove(ll_ori_p, node);
   1211c:	4611      	mov	r1, r2
   1211e:	4b17      	ldr	r3, [pc, #92]	; (1217c <_lv_ll_chg_list+0x68>)
   12120:	4798      	blx	r3
    if(head) {
   12122:	b1ae      	cbz	r6, 12150 <_lv_ll_chg_list+0x3c>
        node_set_prev(ll_new_p, node, NULL);
   12124:	2200      	movs	r2, #0
   12126:	4629      	mov	r1, r5
   12128:	4620      	mov	r0, r4
   1212a:	4b15      	ldr	r3, [pc, #84]	; (12180 <_lv_ll_chg_list+0x6c>)
   1212c:	4798      	blx	r3
        node_set_next(ll_new_p, node, ll_new_p->head);
   1212e:	6862      	ldr	r2, [r4, #4]
   12130:	4629      	mov	r1, r5
   12132:	4620      	mov	r0, r4
   12134:	4b13      	ldr	r3, [pc, #76]	; (12184 <_lv_ll_chg_list+0x70>)
   12136:	4798      	blx	r3
        if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
   12138:	6861      	ldr	r1, [r4, #4]
   1213a:	b119      	cbz	r1, 12144 <_lv_ll_chg_list+0x30>
            node_set_prev(ll_new_p, ll_new_p->head, node);
   1213c:	462a      	mov	r2, r5
   1213e:	4620      	mov	r0, r4
   12140:	4b0f      	ldr	r3, [pc, #60]	; (12180 <_lv_ll_chg_list+0x6c>)
   12142:	4798      	blx	r3
        ll_new_p->head = node;       /*Set the new head in the dsc.*/
   12144:	6065      	str	r5, [r4, #4]
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
   12146:	68a3      	ldr	r3, [r4, #8]
   12148:	b103      	cbz	r3, 1214c <_lv_ll_chg_list+0x38>
   1214a:	bd70      	pop	{r4, r5, r6, pc}
            ll_new_p->tail = node;
   1214c:	60a5      	str	r5, [r4, #8]
   1214e:	bd70      	pop	{r4, r5, r6, pc}
        node_set_prev(ll_new_p, node, ll_new_p->tail);
   12150:	68a2      	ldr	r2, [r4, #8]
   12152:	4629      	mov	r1, r5
   12154:	4620      	mov	r0, r4
   12156:	4b0a      	ldr	r3, [pc, #40]	; (12180 <_lv_ll_chg_list+0x6c>)
   12158:	4798      	blx	r3
        node_set_next(ll_new_p, node, NULL);
   1215a:	2200      	movs	r2, #0
   1215c:	4629      	mov	r1, r5
   1215e:	4620      	mov	r0, r4
   12160:	4b08      	ldr	r3, [pc, #32]	; (12184 <_lv_ll_chg_list+0x70>)
   12162:	4798      	blx	r3
        if(ll_new_p->tail != NULL) { /*If there is old tail then after it goes the new*/
   12164:	68a1      	ldr	r1, [r4, #8]
   12166:	b119      	cbz	r1, 12170 <_lv_ll_chg_list+0x5c>
            node_set_next(ll_new_p, ll_new_p->tail, node);
   12168:	462a      	mov	r2, r5
   1216a:	4620      	mov	r0, r4
   1216c:	4b05      	ldr	r3, [pc, #20]	; (12184 <_lv_ll_chg_list+0x70>)
   1216e:	4798      	blx	r3
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
   12170:	60a5      	str	r5, [r4, #8]
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
   12172:	6863      	ldr	r3, [r4, #4]
   12174:	2b00      	cmp	r3, #0
   12176:	d1e8      	bne.n	1214a <_lv_ll_chg_list+0x36>
            ll_new_p->head = node;
   12178:	6065      	str	r5, [r4, #4]
}
   1217a:	e7e6      	b.n	1214a <_lv_ll_chg_list+0x36>
   1217c:	00012089 	.word	0x00012089
   12180:	00011ead 	.word	0x00011ead
   12184:	00011e6d 	.word	0x00011e6d

00012188 <_lv_ll_move_before>:
    if(n_act == n_after) return; /*Can't move before itself*/
   12188:	4291      	cmp	r1, r2
   1218a:	d04c      	beq.n	12226 <_lv_ll_move_before+0x9e>
{
   1218c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12190:	4617      	mov	r7, r2
   12192:	460c      	mov	r4, r1
   12194:	4605      	mov	r5, r0
    if(n_after != NULL)
   12196:	b312      	cbz	r2, 121de <_lv_ll_move_before+0x56>
        n_before = _lv_ll_get_prev(ll_p, n_after);
   12198:	4611      	mov	r1, r2
   1219a:	4b23      	ldr	r3, [pc, #140]	; (12228 <_lv_ll_move_before+0xa0>)
   1219c:	4798      	blx	r3
   1219e:	4606      	mov	r6, r0
    if(n_act == n_before) return; /*Already before `n_after`*/
   121a0:	4284      	cmp	r4, r0
   121a2:	d01a      	beq.n	121da <_lv_ll_move_before+0x52>
    _lv_ll_remove(ll_p, n_act);
   121a4:	4621      	mov	r1, r4
   121a6:	4628      	mov	r0, r5
   121a8:	4b20      	ldr	r3, [pc, #128]	; (1222c <_lv_ll_move_before+0xa4>)
   121aa:	4798      	blx	r3
    node_set_next(ll_p, n_before, n_act);
   121ac:	4622      	mov	r2, r4
   121ae:	4631      	mov	r1, r6
   121b0:	4628      	mov	r0, r5
   121b2:	f8df 807c 	ldr.w	r8, [pc, #124]	; 12230 <_lv_ll_move_before+0xa8>
   121b6:	47c0      	blx	r8
    node_set_prev(ll_p, n_act, n_before);
   121b8:	4632      	mov	r2, r6
   121ba:	4621      	mov	r1, r4
   121bc:	4628      	mov	r0, r5
   121be:	f8df 9074 	ldr.w	r9, [pc, #116]	; 12234 <_lv_ll_move_before+0xac>
   121c2:	47c8      	blx	r9
    node_set_prev(ll_p, n_after, n_act);
   121c4:	4622      	mov	r2, r4
   121c6:	4639      	mov	r1, r7
   121c8:	4628      	mov	r0, r5
   121ca:	47c8      	blx	r9
    node_set_next(ll_p, n_act, n_after);
   121cc:	463a      	mov	r2, r7
   121ce:	4621      	mov	r1, r4
   121d0:	4628      	mov	r0, r5
   121d2:	47c0      	blx	r8
    if(n_before == NULL) ll_p->head = n_act;
   121d4:	b306      	cbz	r6, 12218 <_lv_ll_move_before+0x90>
   121d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   121da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(ll_p != NULL) {
   121de:	b1f0      	cbz	r0, 1221e <_lv_ll_move_before+0x96>
        tail = ll_p->tail;
   121e0:	6886      	ldr	r6, [r0, #8]
    if(n_act == n_before) return; /*Already before `n_after`*/
   121e2:	42b4      	cmp	r4, r6
   121e4:	d01d      	beq.n	12222 <_lv_ll_move_before+0x9a>
    _lv_ll_remove(ll_p, n_act);
   121e6:	4621      	mov	r1, r4
   121e8:	4628      	mov	r0, r5
   121ea:	4b10      	ldr	r3, [pc, #64]	; (1222c <_lv_ll_move_before+0xa4>)
   121ec:	4798      	blx	r3
    node_set_next(ll_p, n_before, n_act);
   121ee:	4622      	mov	r2, r4
   121f0:	4631      	mov	r1, r6
   121f2:	4628      	mov	r0, r5
   121f4:	4f0e      	ldr	r7, [pc, #56]	; (12230 <_lv_ll_move_before+0xa8>)
   121f6:	47b8      	blx	r7
    node_set_prev(ll_p, n_act, n_before);
   121f8:	4632      	mov	r2, r6
   121fa:	4621      	mov	r1, r4
   121fc:	4628      	mov	r0, r5
   121fe:	f8df 8034 	ldr.w	r8, [pc, #52]	; 12234 <_lv_ll_move_before+0xac>
   12202:	47c0      	blx	r8
    node_set_prev(ll_p, n_after, n_act);
   12204:	4622      	mov	r2, r4
   12206:	2100      	movs	r1, #0
   12208:	4628      	mov	r0, r5
   1220a:	47c0      	blx	r8
    node_set_next(ll_p, n_act, n_after);
   1220c:	2200      	movs	r2, #0
   1220e:	4621      	mov	r1, r4
   12210:	4628      	mov	r0, r5
   12212:	47b8      	blx	r7
    if(n_after == NULL) ll_p->tail = n_act;
   12214:	60ac      	str	r4, [r5, #8]
   12216:	e7dd      	b.n	121d4 <_lv_ll_move_before+0x4c>
    if(n_before == NULL) ll_p->head = n_act;
   12218:	606c      	str	r4, [r5, #4]
   1221a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    void * tail = NULL;
   1221e:	4616      	mov	r6, r2
   12220:	e7df      	b.n	121e2 <_lv_ll_move_before+0x5a>
   12222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12226:	4770      	bx	lr
   12228:	00011fdd 	.word	0x00011fdd
   1222c:	00012089 	.word	0x00012089
   12230:	00011e6d 	.word	0x00011e6d
   12234:	00011ead 	.word	0x00011ead

00012238 <_lv_ll_is_empty>:
    if(ll_p == NULL) return true;
   12238:	b140      	cbz	r0, 1224c <_lv_ll_is_empty+0x14>
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
   1223a:	6842      	ldr	r2, [r0, #4]
   1223c:	b10a      	cbz	r2, 12242 <_lv_ll_is_empty+0xa>
    return false;
   1223e:	2000      	movs	r0, #0
}
   12240:	4770      	bx	lr
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
   12242:	6880      	ldr	r0, [r0, #8]
   12244:	fab0 f080 	clz	r0, r0
   12248:	0940      	lsrs	r0, r0, #5
   1224a:	4770      	bx	lr
    if(ll_p == NULL) return true;
   1224c:	2001      	movs	r0, #1
   1224e:	4770      	bx	lr

00012250 <_lv_log_add>:
 * @param func name of the function when the log added
 * @param format printf-like format string
 * @param ... parameters for `format`
 */
void _lv_log_add(lv_log_level_t level, const char * file, int line, const char * func, const char * format, ...)
{
   12250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12254:	b0c4      	sub	sp, #272	; 0x110
    if(level >= _LV_LOG_LEVEL_NUM) return; /*Invalid level*/

    if(level >= LV_LOG_LEVEL) {
   12256:	1e44      	subs	r4, r0, #1
   12258:	b2e4      	uxtb	r4, r4
   1225a:	2c04      	cmp	r4, #4
   1225c:	d815      	bhi.n	1228a <_lv_log_add+0x3a>
   1225e:	461f      	mov	r7, r3
   12260:	4616      	mov	r6, r2
   12262:	460d      	mov	r5, r1
   12264:	4680      	mov	r8, r0
        va_list args;
        va_start(args, format);
   12266:	ab4b      	add	r3, sp, #300	; 0x12c
   12268:	9303      	str	r3, [sp, #12]
        char buf[256];
        lv_vsnprintf(buf, sizeof(buf), format, args);
   1226a:	9a4a      	ldr	r2, [sp, #296]	; 0x128
   1226c:	f44f 7180 	mov.w	r1, #256	; 0x100
   12270:	a804      	add	r0, sp, #16
   12272:	4c07      	ldr	r4, [pc, #28]	; (12290 <_lv_log_add+0x40>)
   12274:	47a0      	blx	r4
        }

        static const char * lvl_prefix[] = {"Trace", "Info", "Warn", "Error", "User"};
        printf("%s: %s \t(%s #%d %s())\n", lvl_prefix[level], buf, &file[p], line, func);
#else
        if(custom_print_cb) custom_print_cb(level, file, line, func, buf);
   12276:	4b07      	ldr	r3, [pc, #28]	; (12294 <_lv_log_add+0x44>)
   12278:	681c      	ldr	r4, [r3, #0]
   1227a:	b134      	cbz	r4, 1228a <_lv_log_add+0x3a>
   1227c:	ab04      	add	r3, sp, #16
   1227e:	9300      	str	r3, [sp, #0]
   12280:	463b      	mov	r3, r7
   12282:	4632      	mov	r2, r6
   12284:	4629      	mov	r1, r5
   12286:	4640      	mov	r0, r8
   12288:	47a0      	blx	r4
#endif
    }
}
   1228a:	b044      	add	sp, #272	; 0x110
   1228c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12290:	000135c1 	.word	0x000135c1
   12294:	20008584 	.word	0x20008584

00012298 <_lv_trigo_sin>:
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
LV_ATTRIBUTE_FAST_MEM int16_t _lv_trigo_sin(int16_t angle)
{
    int16_t ret = 0;
    angle       = angle % 360;
   12298:	4b1b      	ldr	r3, [pc, #108]	; (12308 <_lv_trigo_sin+0x70>)
   1229a:	fb83 2300 	smull	r2, r3, r3, r0
   1229e:	181a      	adds	r2, r3, r0
   122a0:	17c3      	asrs	r3, r0, #31
   122a2:	ebc3 2322 	rsb	r3, r3, r2, asr #8
   122a6:	f44f 72b4 	mov.w	r2, #360	; 0x168
   122aa:	fb02 0013 	mls	r0, r2, r3, r0
   122ae:	b200      	sxth	r0, r0

    if(angle < 0) angle = 360 + angle;
   122b0:	2800      	cmp	r0, #0
   122b2:	bfbc      	itt	lt
   122b4:	1880      	addlt	r0, r0, r2
   122b6:	b200      	sxthlt	r0, r0

    if(angle < 90) {
   122b8:	2859      	cmp	r0, #89	; 0x59
   122ba:	dd13      	ble.n	122e4 <_lv_trigo_sin+0x4c>
        ret = sin0_90_table[angle];
    }
    else if(angle >= 90 && angle < 180) {
   122bc:	b280      	uxth	r0, r0
   122be:	f1a0 035a 	sub.w	r3, r0, #90	; 0x5a
   122c2:	b29b      	uxth	r3, r3
   122c4:	2b59      	cmp	r3, #89	; 0x59
   122c6:	d911      	bls.n	122ec <_lv_trigo_sin+0x54>
        angle = 180 - angle;
        ret   = sin0_90_table[angle];
    }
    else if(angle >= 180 && angle < 270) {
   122c8:	f1a0 03b4 	sub.w	r3, r0, #180	; 0xb4
   122cc:	b29b      	uxth	r3, r3
   122ce:	2b59      	cmp	r3, #89	; 0x59
   122d0:	d913      	bls.n	122fa <_lv_trigo_sin+0x62>
        angle = angle - 180;
        ret   = -sin0_90_table[angle];
    }
    else {   /*angle >=270*/
        angle = 360 - angle;
   122d2:	f5c0 70b4 	rsb	r0, r0, #360	; 0x168
        ret   = -sin0_90_table[angle];
   122d6:	b200      	sxth	r0, r0
   122d8:	4b0c      	ldr	r3, [pc, #48]	; (1230c <_lv_trigo_sin+0x74>)
   122da:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   122de:	4240      	negs	r0, r0
   122e0:	b200      	sxth	r0, r0
    }

    return ret;
}
   122e2:	4770      	bx	lr
        ret = sin0_90_table[angle];
   122e4:	4b09      	ldr	r3, [pc, #36]	; (1230c <_lv_trigo_sin+0x74>)
   122e6:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
   122ea:	4770      	bx	lr
        angle = 180 - angle;
   122ec:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
        ret   = sin0_90_table[angle];
   122f0:	b200      	sxth	r0, r0
   122f2:	4b06      	ldr	r3, [pc, #24]	; (1230c <_lv_trigo_sin+0x74>)
   122f4:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
   122f8:	4770      	bx	lr
        ret   = -sin0_90_table[angle];
   122fa:	b21b      	sxth	r3, r3
   122fc:	4a03      	ldr	r2, [pc, #12]	; (1230c <_lv_trigo_sin+0x74>)
   122fe:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
   12302:	4240      	negs	r0, r0
   12304:	b200      	sxth	r0, r0
   12306:	4770      	bx	lr
   12308:	b60b60b7 	.word	0xb60b60b7
   1230c:	00029290 	.word	0x00029290

00012310 <_lv_sqrt>:
 * If root < 16: mask = 0x80
 * If root < 256: mask = 0x800
 * Else: mask = 0x8000
 */
LV_ATTRIBUTE_FAST_MEM void _lv_sqrt(uint32_t x, lv_sqrt_res_t * q, uint32_t mask)
{
   12310:	b430      	push	{r4, r5}
    x = x << 8; /*To get 4 bit precision. (sqrt(256) = 16 = 4 bit)*/
   12312:	0200      	lsls	r0, r0, #8

    uint32_t root = 0;
   12314:	2400      	movs	r4, #0
    uint32_t trial;
    // http://ww1.microchip.com/...en/AppNotes/91040a.pdf
    do {
        trial = root + mask;
   12316:	1913      	adds	r3, r2, r4
        if((uint32_t)trial * trial <= x) root = trial;
   12318:	fb03 f503 	mul.w	r5, r3, r3
   1231c:	42a8      	cmp	r0, r5
   1231e:	bf28      	it	cs
   12320:	461c      	movcs	r4, r3
        mask = mask >> 1;
    } while(mask);
   12322:	0852      	lsrs	r2, r2, #1
   12324:	d1f7      	bne.n	12316 <_lv_sqrt+0x6>

    q->i = (uint32_t) root >> 4;
   12326:	0923      	lsrs	r3, r4, #4
   12328:	800b      	strh	r3, [r1, #0]
    q->f = (uint32_t)(root & 0xf) << 4;
   1232a:	0124      	lsls	r4, r4, #4
   1232c:	b2e4      	uxtb	r4, r4
   1232e:	804c      	strh	r4, [r1, #2]
}
   12330:	bc30      	pop	{r4, r5}
   12332:	4770      	bx	lr

00012334 <ent_get_next>:
 */
static lv_mem_ent_t * ent_get_next(lv_mem_ent_t * act_e)
{
    lv_mem_ent_t * next_e = NULL;

    if(act_e == NULL) { /*NULL means: get the first entry*/
   12334:	4603      	mov	r3, r0
   12336:	b160      	cbz	r0, 12352 <ent_get_next+0x1e>
        next_e = (lv_mem_ent_t *)work_mem;
    }
    else {   /*Get the next entry */
        uint8_t * data = &act_e->first_data;
   12338:	3004      	adds	r0, #4
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
   1233a:	681b      	ldr	r3, [r3, #0]
   1233c:	eb00 0053 	add.w	r0, r0, r3, lsr #1

        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
   12340:	1d02      	adds	r2, r0, #4
   12342:	4b05      	ldr	r3, [pc, #20]	; (12358 <ent_get_next+0x24>)
   12344:	681b      	ldr	r3, [r3, #0]
   12346:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   1234a:	429a      	cmp	r2, r3
   1234c:	bf28      	it	cs
   1234e:	2000      	movcs	r0, #0
    }

    return next_e;
}
   12350:	4770      	bx	lr
        next_e = (lv_mem_ent_t *)work_mem;
   12352:	4b01      	ldr	r3, [pc, #4]	; (12358 <ent_get_next+0x24>)
   12354:	6818      	ldr	r0, [r3, #0]
   12356:	4770      	bx	lr
   12358:	20008588 	.word	0x20008588

0001235c <ent_trunc>:
        size = size & (~0x7);
        size += 8;
    }
#else
    /*Round the size up to 4*/
    if(size & 0x3) {
   1235c:	f011 0f03 	tst.w	r1, #3
        size = size & (~0x3);
   12360:	bf1c      	itt	ne
   12362:	f021 0103 	bicne.w	r1, r1, #3
        size += 4;
   12366:	3104      	addne	r1, #4
    }
#endif

    /*Don't let empty space only for a header without data*/
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
   12368:	6803      	ldr	r3, [r0, #0]
   1236a:	f3c3 035e 	ubfx	r3, r3, #1, #31
   1236e:	1d0a      	adds	r2, r1, #4
   12370:	4293      	cmp	r3, r2
   12372:	d017      	beq.n	123a4 <ent_trunc+0x48>
        size = e->header.s.d_size;
    }

    /* Create the new entry after the current if there is space for it */
    if(e->header.s.d_size != size) {
   12374:	4299      	cmp	r1, r3
   12376:	d016      	beq.n	123a6 <ent_trunc+0x4a>
{
   12378:	b410      	push	{r4}
        uint8_t * e_data             = &e->first_data;
   1237a:	1d02      	adds	r2, r0, #4
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
        after_new_e->header.s.used   = 0;
   1237c:	5c53      	ldrb	r3, [r2, r1]
   1237e:	f36f 0300 	bfc	r3, #0, #1
   12382:	5453      	strb	r3, [r2, r1]
        after_new_e->header.s.d_size = (uint32_t)e->header.s.d_size - size - sizeof(lv_mem_header_t);
   12384:	6803      	ldr	r3, [r0, #0]
   12386:	f3c3 035e 	ubfx	r3, r3, #1, #31
   1238a:	3b04      	subs	r3, #4
   1238c:	1a5b      	subs	r3, r3, r1
   1238e:	5854      	ldr	r4, [r2, r1]
   12390:	f363 045f 	bfi	r4, r3, #1, #31
   12394:	5054      	str	r4, [r2, r1]
    }

    /* Set the new size for the original entry */
    e->header.s.d_size = (uint32_t)size;
   12396:	6803      	ldr	r3, [r0, #0]
   12398:	f361 035f 	bfi	r3, r1, #1, #31
   1239c:	6003      	str	r3, [r0, #0]
}
   1239e:	f85d 4b04 	ldr.w	r4, [sp], #4
   123a2:	4770      	bx	lr
        size = e->header.s.d_size;
   123a4:	4611      	mov	r1, r2
    e->header.s.d_size = (uint32_t)size;
   123a6:	6803      	ldr	r3, [r0, #0]
   123a8:	f361 035f 	bfi	r3, r1, #1, #31
   123ac:	6003      	str	r3, [r0, #0]
   123ae:	4770      	bx	lr

000123b0 <_lv_mem_init>:
    work_mem = (uint8_t *)work_mem_int;
   123b0:	4b06      	ldr	r3, [pc, #24]	; (123cc <_lv_mem_init+0x1c>)
   123b2:	1d1a      	adds	r2, r3, #4
   123b4:	601a      	str	r2, [r3, #0]
    full->header.s.used = 0;
   123b6:	791a      	ldrb	r2, [r3, #4]
   123b8:	f36f 0200 	bfc	r2, #0, #1
   123bc:	711a      	strb	r2, [r3, #4]
    full->header.s.d_size = LV_MEM_SIZE - sizeof(lv_mem_header_t);
   123be:	685a      	ldr	r2, [r3, #4]
   123c0:	f643 71fc 	movw	r1, #16380	; 0x3ffc
   123c4:	f361 025f 	bfi	r2, r1, #1, #31
   123c8:	605a      	str	r2, [r3, #4]
   123ca:	4770      	bx	lr
   123cc:	20008588 	.word	0x20008588

000123d0 <lv_mem_alloc>:
    if(size == 0) {
   123d0:	2800      	cmp	r0, #0
   123d2:	d02e      	beq.n	12432 <lv_mem_alloc+0x62>
{
   123d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   123d6:	b083      	sub	sp, #12
   123d8:	4605      	mov	r5, r0
    if(size & 0x3) {
   123da:	f010 0f03 	tst.w	r0, #3
        size = size & (~0x3);
   123de:	bf1c      	itt	ne
   123e0:	f020 0503 	bicne.w	r5, r0, #3
        size += 4;
   123e4:	3504      	addne	r5, #4
    lv_mem_ent_t * e = NULL;
   123e6:	2400      	movs	r4, #0
        e = ent_get_next(e);
   123e8:	4e13      	ldr	r6, [pc, #76]	; (12438 <lv_mem_alloc+0x68>)
        ent_trunc(e, size);
   123ea:	4f14      	ldr	r7, [pc, #80]	; (1243c <lv_mem_alloc+0x6c>)
   123ec:	e008      	b.n	12400 <lv_mem_alloc+0x30>
   123ee:	4629      	mov	r1, r5
   123f0:	47b8      	blx	r7
        e->header.s.used = 1;
   123f2:	7823      	ldrb	r3, [r4, #0]
   123f4:	f043 0301 	orr.w	r3, r3, #1
   123f8:	4620      	mov	r0, r4
   123fa:	f800 3b04 	strb.w	r3, [r0], #4
    } while(e != NULL && alloc == NULL);
   123fe:	b9b0      	cbnz	r0, 1242e <lv_mem_alloc+0x5e>
        e = ent_get_next(e);
   12400:	4620      	mov	r0, r4
   12402:	47b0      	blx	r6
        if(e != NULL) {
   12404:	4604      	mov	r4, r0
   12406:	b148      	cbz	r0, 1241c <lv_mem_alloc+0x4c>
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
   12408:	7803      	ldrb	r3, [r0, #0]
   1240a:	f013 0f01 	tst.w	r3, #1
   1240e:	d1f7      	bne.n	12400 <lv_mem_alloc+0x30>
   12410:	6803      	ldr	r3, [r0, #0]
   12412:	f3c3 035e 	ubfx	r3, r3, #1, #31
   12416:	429d      	cmp	r5, r3
   12418:	d9e9      	bls.n	123ee <lv_mem_alloc+0x1e>
   1241a:	e7f1      	b.n	12400 <lv_mem_alloc+0x30>
    if(alloc == NULL) LV_LOG_WARN("Couldn't allocate memory");
   1241c:	4b08      	ldr	r3, [pc, #32]	; (12440 <lv_mem_alloc+0x70>)
   1241e:	9300      	str	r3, [sp, #0]
   12420:	4b08      	ldr	r3, [pc, #32]	; (12444 <lv_mem_alloc+0x74>)
   12422:	22d1      	movs	r2, #209	; 0xd1
   12424:	4908      	ldr	r1, [pc, #32]	; (12448 <lv_mem_alloc+0x78>)
   12426:	2002      	movs	r0, #2
   12428:	4c08      	ldr	r4, [pc, #32]	; (1244c <lv_mem_alloc+0x7c>)
   1242a:	47a0      	blx	r4
    return alloc;
   1242c:	2000      	movs	r0, #0
}
   1242e:	b003      	add	sp, #12
   12430:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return &zero_mem;
   12432:	4807      	ldr	r0, [pc, #28]	; (12450 <lv_mem_alloc+0x80>)
   12434:	4770      	bx	lr
   12436:	bf00      	nop
   12438:	00012335 	.word	0x00012335
   1243c:	0001235d 	.word	0x0001235d
   12440:	000293b4 	.word	0x000293b4
   12444:	00029348 	.word	0x00029348
   12448:	0002938c 	.word	0x0002938c
   1244c:	00012251 	.word	0x00012251
   12450:	2000c58c 	.word	0x2000c58c

00012454 <lv_mem_defrag>:
{
   12454:	b538      	push	{r3, r4, r5, lr}
    e_free = ent_get_next(NULL);
   12456:	2000      	movs	r0, #0
   12458:	4b16      	ldr	r3, [pc, #88]	; (124b4 <lv_mem_defrag+0x60>)
   1245a:	4798      	blx	r3
   1245c:	4604      	mov	r4, r0
        e_next = ent_get_next(e_free);
   1245e:	4d15      	ldr	r5, [pc, #84]	; (124b4 <lv_mem_defrag+0x60>)
   12460:	e01b      	b.n	1249a <lv_mem_defrag+0x46>
   12462:	bd38      	pop	{r3, r4, r5, pc}
   12464:	4620      	mov	r0, r4
   12466:	47a8      	blx	r5
        while(e_next != NULL) {
   12468:	4601      	mov	r1, r0
   1246a:	b308      	cbz	r0, 124b0 <lv_mem_defrag+0x5c>
            if(e_next->header.s.used == 0) {
   1246c:	7803      	ldrb	r3, [r0, #0]
   1246e:	f013 0f01 	tst.w	r3, #1
   12472:	d111      	bne.n	12498 <lv_mem_defrag+0x44>
                e_free->header.s.d_size += e_next->header.s.d_size + sizeof(e_next->header);
   12474:	6823      	ldr	r3, [r4, #0]
   12476:	f3c3 025e 	ubfx	r2, r3, #1, #31
   1247a:	3204      	adds	r2, #4
   1247c:	6808      	ldr	r0, [r1, #0]
   1247e:	eb02 0250 	add.w	r2, r2, r0, lsr #1
   12482:	f362 035f 	bfi	r3, r2, #1, #31
   12486:	6023      	str	r3, [r4, #0]
            e_next = ent_get_next(e_next);
   12488:	4608      	mov	r0, r1
   1248a:	47a8      	blx	r5
        while(e_next != NULL) {
   1248c:	4601      	mov	r1, r0
   1248e:	b170      	cbz	r0, 124ae <lv_mem_defrag+0x5a>
            if(e_next->header.s.used == 0) {
   12490:	780b      	ldrb	r3, [r1, #0]
   12492:	f013 0f01 	tst.w	r3, #1
   12496:	d0ed      	beq.n	12474 <lv_mem_defrag+0x20>
{
   12498:	460c      	mov	r4, r1
        while(e_free != NULL) {
   1249a:	2c00      	cmp	r4, #0
   1249c:	d0e1      	beq.n	12462 <lv_mem_defrag+0xe>
            if(e_free->header.s.used != 0) {
   1249e:	7823      	ldrb	r3, [r4, #0]
   124a0:	f013 0f01 	tst.w	r3, #1
   124a4:	d0de      	beq.n	12464 <lv_mem_defrag+0x10>
                e_free = ent_get_next(e_free);
   124a6:	4620      	mov	r0, r4
   124a8:	47a8      	blx	r5
   124aa:	4604      	mov	r4, r0
   124ac:	e7f5      	b.n	1249a <lv_mem_defrag+0x46>
   124ae:	bd38      	pop	{r3, r4, r5, pc}
   124b0:	bd38      	pop	{r3, r4, r5, pc}
   124b2:	bf00      	nop
   124b4:	00012335 	.word	0x00012335

000124b8 <lv_mem_free>:
{
   124b8:	b538      	push	{r3, r4, r5, lr}
    if(data == &zero_mem) return;
   124ba:	4b1e      	ldr	r3, [pc, #120]	; (12534 <lv_mem_free+0x7c>)
   124bc:	4298      	cmp	r0, r3
   124be:	d038      	beq.n	12532 <lv_mem_free+0x7a>
    if(data == NULL) return;
   124c0:	2800      	cmp	r0, #0
   124c2:	d036      	beq.n	12532 <lv_mem_free+0x7a>
   124c4:	4604      	mov	r4, r0
    e->header.s.used = 0;
   124c6:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   124ca:	f36f 0300 	bfc	r3, #0, #1
   124ce:	f800 3c04 	strb.w	r3, [r0, #-4]
    full_defrag_cnt++;
   124d2:	4a19      	ldr	r2, [pc, #100]	; (12538 <lv_mem_free+0x80>)
   124d4:	f8b2 3d20 	ldrh.w	r3, [r2, #3360]	; 0xd20
   124d8:	3301      	adds	r3, #1
   124da:	b29b      	uxth	r3, r3
   124dc:	f8a2 3d20 	strh.w	r3, [r2, #3360]	; 0xd20
    if(full_defrag_cnt < LV_MEM_FULL_DEFRAG_CNT) {
   124e0:	2b0f      	cmp	r3, #15
   124e2:	d820      	bhi.n	12526 <lv_mem_free+0x6e>
        e_next = ent_get_next(e);
   124e4:	3804      	subs	r0, #4
   124e6:	4b15      	ldr	r3, [pc, #84]	; (1253c <lv_mem_free+0x84>)
   124e8:	4798      	blx	r3
        while(e_next != NULL) {
   124ea:	4601      	mov	r1, r0
   124ec:	b308      	cbz	r0, 12532 <lv_mem_free+0x7a>
            if(e_next->header.s.used == 0) {
   124ee:	7803      	ldrb	r3, [r0, #0]
   124f0:	f013 0f01 	tst.w	r3, #1
   124f4:	d115      	bne.n	12522 <lv_mem_free+0x6a>
            e_next = ent_get_next(e_next);
   124f6:	4d11      	ldr	r5, [pc, #68]	; (1253c <lv_mem_free+0x84>)
                e->header.s.d_size += e_next->header.s.d_size + sizeof(e->header);
   124f8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   124fc:	f3c3 025e 	ubfx	r2, r3, #1, #31
   12500:	3204      	adds	r2, #4
   12502:	6808      	ldr	r0, [r1, #0]
   12504:	eb02 0250 	add.w	r2, r2, r0, lsr #1
   12508:	f362 035f 	bfi	r3, r2, #1, #31
   1250c:	f844 3c04 	str.w	r3, [r4, #-4]
            e_next = ent_get_next(e_next);
   12510:	4608      	mov	r0, r1
   12512:	47a8      	blx	r5
        while(e_next != NULL) {
   12514:	4601      	mov	r1, r0
   12516:	b128      	cbz	r0, 12524 <lv_mem_free+0x6c>
            if(e_next->header.s.used == 0) {
   12518:	780b      	ldrb	r3, [r1, #0]
   1251a:	f013 0f01 	tst.w	r3, #1
   1251e:	d0eb      	beq.n	124f8 <lv_mem_free+0x40>
   12520:	bd38      	pop	{r3, r4, r5, pc}
   12522:	bd38      	pop	{r3, r4, r5, pc}
   12524:	bd38      	pop	{r3, r4, r5, pc}
        full_defrag_cnt = 0;
   12526:	2200      	movs	r2, #0
   12528:	4b03      	ldr	r3, [pc, #12]	; (12538 <lv_mem_free+0x80>)
   1252a:	f8a3 2d20 	strh.w	r2, [r3, #3360]	; 0xd20
        lv_mem_defrag();
   1252e:	4b04      	ldr	r3, [pc, #16]	; (12540 <lv_mem_free+0x88>)
   12530:	4798      	blx	r3
   12532:	bd38      	pop	{r3, r4, r5, pc}
   12534:	2000c58c 	.word	0x2000c58c
   12538:	2000b870 	.word	0x2000b870
   1253c:	00012335 	.word	0x00012335
   12540:	00012455 	.word	0x00012455

00012544 <_lv_mem_get_size>:
    if(data == NULL) return 0;
   12544:	b138      	cbz	r0, 12556 <_lv_mem_get_size+0x12>
    if(data == &zero_mem) return 0;
   12546:	4a06      	ldr	r2, [pc, #24]	; (12560 <_lv_mem_get_size+0x1c>)
   12548:	4290      	cmp	r0, r2
   1254a:	d006      	beq.n	1255a <_lv_mem_get_size+0x16>
    return e->header.s.d_size;
   1254c:	f850 0c04 	ldr.w	r0, [r0, #-4]
   12550:	f3c0 005e 	ubfx	r0, r0, #1, #31
   12554:	4770      	bx	lr
    if(data == NULL) return 0;
   12556:	2000      	movs	r0, #0
   12558:	4770      	bx	lr
    if(data == &zero_mem) return 0;
   1255a:	2000      	movs	r0, #0
}
   1255c:	4770      	bx	lr
   1255e:	bf00      	nop
   12560:	2000c58c 	.word	0x2000c58c

00012564 <_lv_mem_buf_release>:
        if(mem_buf_small[i].p == p) {
   12564:	4b1b      	ldr	r3, [pc, #108]	; (125d4 <_lv_mem_buf_release+0x70>)
   12566:	681b      	ldr	r3, [r3, #0]
   12568:	4298      	cmp	r0, r3
   1256a:	d020      	beq.n	125ae <_lv_mem_buf_release+0x4a>
   1256c:	4b19      	ldr	r3, [pc, #100]	; (125d4 <_lv_mem_buf_release+0x70>)
   1256e:	689b      	ldr	r3, [r3, #8]
   12570:	4283      	cmp	r3, r0
   12572:	bf08      	it	eq
   12574:	2201      	moveq	r2, #1
   12576:	d01b      	beq.n	125b0 <_lv_mem_buf_release+0x4c>
{
   12578:	b510      	push	{r4, lr}
   1257a:	b082      	sub	sp, #8
        if(LV_GC_ROOT(_lv_mem_buf[i]).p == p) {
   1257c:	4b16      	ldr	r3, [pc, #88]	; (125d8 <_lv_mem_buf_release+0x74>)
   1257e:	681b      	ldr	r3, [r3, #0]
   12580:	4298      	cmp	r0, r3
   12582:	d01d      	beq.n	125c0 <_lv_mem_buf_release+0x5c>
   12584:	2301      	movs	r3, #1
   12586:	4914      	ldr	r1, [pc, #80]	; (125d8 <_lv_mem_buf_release+0x74>)
   12588:	461c      	mov	r4, r3
   1258a:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
   1258e:	4290      	cmp	r0, r2
   12590:	d017      	beq.n	125c2 <_lv_mem_buf_release+0x5e>
   12592:	3301      	adds	r3, #1
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
   12594:	2b10      	cmp	r3, #16
   12596:	d1f7      	bne.n	12588 <_lv_mem_buf_release+0x24>
    LV_LOG_ERROR("lv_mem_buf_release: p is not a known buffer")
   12598:	4b10      	ldr	r3, [pc, #64]	; (125dc <_lv_mem_buf_release+0x78>)
   1259a:	9300      	str	r3, [sp, #0]
   1259c:	4b10      	ldr	r3, [pc, #64]	; (125e0 <_lv_mem_buf_release+0x7c>)
   1259e:	f240 2232 	movw	r2, #562	; 0x232
   125a2:	4910      	ldr	r1, [pc, #64]	; (125e4 <_lv_mem_buf_release+0x80>)
   125a4:	2003      	movs	r0, #3
   125a6:	4c10      	ldr	r4, [pc, #64]	; (125e8 <_lv_mem_buf_release+0x84>)
   125a8:	47a0      	blx	r4
}
   125aa:	b002      	add	sp, #8
   125ac:	bd10      	pop	{r4, pc}
        if(mem_buf_small[i].p == p) {
   125ae:	2200      	movs	r2, #0
            mem_buf_small[i].used = 0;
   125b0:	4b08      	ldr	r3, [pc, #32]	; (125d4 <_lv_mem_buf_release+0x70>)
   125b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   125b6:	799a      	ldrb	r2, [r3, #6]
   125b8:	f36f 0200 	bfc	r2, #0, #1
   125bc:	719a      	strb	r2, [r3, #6]
            return;
   125be:	4770      	bx	lr
        if(LV_GC_ROOT(_lv_mem_buf[i]).p == p) {
   125c0:	2400      	movs	r4, #0
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
   125c2:	4b05      	ldr	r3, [pc, #20]	; (125d8 <_lv_mem_buf_release+0x74>)
   125c4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   125c8:	79a3      	ldrb	r3, [r4, #6]
   125ca:	f36f 0300 	bfc	r3, #0, #1
   125ce:	71a3      	strb	r3, [r4, #6]
            return;
   125d0:	e7eb      	b.n	125aa <_lv_mem_buf_release+0x46>
   125d2:	bf00      	nop
   125d4:	20000044 	.word	0x20000044
   125d8:	2000c6ac 	.word	0x2000c6ac
   125dc:	000293d0 	.word	0x000293d0
   125e0:	00029358 	.word	0x00029358
   125e4:	0002938c 	.word	0x0002938c
   125e8:	00012251 	.word	0x00012251

000125ec <_lv_mem_buf_free_all>:
{
   125ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        mem_buf_small[i].used = 0;
   125f0:	4b12      	ldr	r3, [pc, #72]	; (1263c <_lv_mem_buf_free_all+0x50>)
   125f2:	799a      	ldrb	r2, [r3, #6]
   125f4:	f36f 0200 	bfc	r2, #0, #1
   125f8:	719a      	strb	r2, [r3, #6]
   125fa:	7b9a      	ldrb	r2, [r3, #14]
   125fc:	f36f 0200 	bfc	r2, #0, #1
   12600:	739a      	strb	r2, [r3, #14]
   12602:	4c0f      	ldr	r4, [pc, #60]	; (12640 <_lv_mem_buf_free_all+0x54>)
   12604:	2500      	movs	r5, #0
            lv_mem_free(LV_GC_ROOT(_lv_mem_buf[i]).p);
   12606:	f8df 803c 	ldr.w	r8, [pc, #60]	; 12644 <_lv_mem_buf_free_all+0x58>
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
   1260a:	462e      	mov	r6, r5
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
   1260c:	1f27      	subs	r7, r4, #4
   1260e:	e003      	b.n	12618 <_lv_mem_buf_free_all+0x2c>
   12610:	3501      	adds	r5, #1
   12612:	3408      	adds	r4, #8
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
   12614:	2d10      	cmp	r5, #16
   12616:	d00e      	beq.n	12636 <_lv_mem_buf_free_all+0x4a>
        if(LV_GC_ROOT(_lv_mem_buf[i]).p) {
   12618:	f854 0c04 	ldr.w	r0, [r4, #-4]
   1261c:	2800      	cmp	r0, #0
   1261e:	d0f7      	beq.n	12610 <_lv_mem_buf_free_all+0x24>
            lv_mem_free(LV_GC_ROOT(_lv_mem_buf[i]).p);
   12620:	47c0      	blx	r8
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
   12622:	f844 6c04 	str.w	r6, [r4, #-4]
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
   12626:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
   1262a:	799a      	ldrb	r2, [r3, #6]
   1262c:	f366 0200 	bfi	r2, r6, #0, #1
   12630:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = 0;
   12632:	8026      	strh	r6, [r4, #0]
   12634:	e7ec      	b.n	12610 <_lv_mem_buf_free_all+0x24>
}
   12636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1263a:	bf00      	nop
   1263c:	20000044 	.word	0x20000044
   12640:	2000c6b0 	.word	0x2000c6b0
   12644:	000124b9 	.word	0x000124b9

00012648 <_lv_memcpy>:
{
   12648:	b4f0      	push	{r4, r5, r6, r7}
    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
   1264a:	f000 0303 	and.w	r3, r0, #3
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
   1264e:	f001 0403 	and.w	r4, r1, #3
    if(s_align != d_align) {
   12652:	42a3      	cmp	r3, r4
   12654:	f000 80a6 	beq.w	127a4 <_lv_memcpy+0x15c>
        while(len > 32) {
   12658:	2a20      	cmp	r2, #32
   1265a:	f240 80a1 	bls.w	127a0 <_lv_memcpy+0x158>
   1265e:	f100 0420 	add.w	r4, r0, #32
   12662:	f101 0320 	add.w	r3, r1, #32
   12666:	4615      	mov	r5, r2
            REPEAT8(COPY8);
   12668:	f813 6c20 	ldrb.w	r6, [r3, #-32]
   1266c:	f804 6c20 	strb.w	r6, [r4, #-32]
   12670:	f813 6c1f 	ldrb.w	r6, [r3, #-31]
   12674:	f804 6c1f 	strb.w	r6, [r4, #-31]
   12678:	f813 6c1e 	ldrb.w	r6, [r3, #-30]
   1267c:	f804 6c1e 	strb.w	r6, [r4, #-30]
   12680:	f813 6c1d 	ldrb.w	r6, [r3, #-29]
   12684:	f804 6c1d 	strb.w	r6, [r4, #-29]
   12688:	f813 6c1c 	ldrb.w	r6, [r3, #-28]
   1268c:	f804 6c1c 	strb.w	r6, [r4, #-28]
   12690:	f813 6c1b 	ldrb.w	r6, [r3, #-27]
   12694:	f804 6c1b 	strb.w	r6, [r4, #-27]
   12698:	f813 6c1a 	ldrb.w	r6, [r3, #-26]
   1269c:	f804 6c1a 	strb.w	r6, [r4, #-26]
   126a0:	f813 6c19 	ldrb.w	r6, [r3, #-25]
   126a4:	f804 6c19 	strb.w	r6, [r4, #-25]
            REPEAT8(COPY8);
   126a8:	f813 6c18 	ldrb.w	r6, [r3, #-24]
   126ac:	f804 6c18 	strb.w	r6, [r4, #-24]
   126b0:	f813 6c17 	ldrb.w	r6, [r3, #-23]
   126b4:	f804 6c17 	strb.w	r6, [r4, #-23]
   126b8:	f813 6c16 	ldrb.w	r6, [r3, #-22]
   126bc:	f804 6c16 	strb.w	r6, [r4, #-22]
   126c0:	f813 6c15 	ldrb.w	r6, [r3, #-21]
   126c4:	f804 6c15 	strb.w	r6, [r4, #-21]
   126c8:	f813 6c14 	ldrb.w	r6, [r3, #-20]
   126cc:	f804 6c14 	strb.w	r6, [r4, #-20]
   126d0:	f813 6c13 	ldrb.w	r6, [r3, #-19]
   126d4:	f804 6c13 	strb.w	r6, [r4, #-19]
   126d8:	f813 6c12 	ldrb.w	r6, [r3, #-18]
   126dc:	f804 6c12 	strb.w	r6, [r4, #-18]
   126e0:	f813 6c11 	ldrb.w	r6, [r3, #-17]
   126e4:	f804 6c11 	strb.w	r6, [r4, #-17]
            REPEAT8(COPY8);
   126e8:	f813 6c10 	ldrb.w	r6, [r3, #-16]
   126ec:	f804 6c10 	strb.w	r6, [r4, #-16]
   126f0:	f813 6c0f 	ldrb.w	r6, [r3, #-15]
   126f4:	f804 6c0f 	strb.w	r6, [r4, #-15]
   126f8:	f813 6c0e 	ldrb.w	r6, [r3, #-14]
   126fc:	f804 6c0e 	strb.w	r6, [r4, #-14]
   12700:	f813 6c0d 	ldrb.w	r6, [r3, #-13]
   12704:	f804 6c0d 	strb.w	r6, [r4, #-13]
   12708:	f813 6c0c 	ldrb.w	r6, [r3, #-12]
   1270c:	f804 6c0c 	strb.w	r6, [r4, #-12]
   12710:	f813 6c0b 	ldrb.w	r6, [r3, #-11]
   12714:	f804 6c0b 	strb.w	r6, [r4, #-11]
   12718:	f813 6c0a 	ldrb.w	r6, [r3, #-10]
   1271c:	f804 6c0a 	strb.w	r6, [r4, #-10]
   12720:	f813 6c09 	ldrb.w	r6, [r3, #-9]
   12724:	f804 6c09 	strb.w	r6, [r4, #-9]
            REPEAT8(COPY8);
   12728:	f813 6c08 	ldrb.w	r6, [r3, #-8]
   1272c:	f804 6c08 	strb.w	r6, [r4, #-8]
   12730:	f813 6c07 	ldrb.w	r6, [r3, #-7]
   12734:	f804 6c07 	strb.w	r6, [r4, #-7]
   12738:	f813 6c06 	ldrb.w	r6, [r3, #-6]
   1273c:	f804 6c06 	strb.w	r6, [r4, #-6]
   12740:	f813 6c05 	ldrb.w	r6, [r3, #-5]
   12744:	f804 6c05 	strb.w	r6, [r4, #-5]
   12748:	f813 6c04 	ldrb.w	r6, [r3, #-4]
   1274c:	f804 6c04 	strb.w	r6, [r4, #-4]
   12750:	f813 6c03 	ldrb.w	r6, [r3, #-3]
   12754:	f804 6c03 	strb.w	r6, [r4, #-3]
   12758:	f813 6c02 	ldrb.w	r6, [r3, #-2]
   1275c:	f804 6c02 	strb.w	r6, [r4, #-2]
   12760:	f813 6c01 	ldrb.w	r6, [r3, #-1]
   12764:	f804 6c01 	strb.w	r6, [r4, #-1]
            len -= 32;
   12768:	3d20      	subs	r5, #32
   1276a:	3420      	adds	r4, #32
   1276c:	3320      	adds	r3, #32
        while(len > 32) {
   1276e:	2d20      	cmp	r5, #32
   12770:	f63f af7a 	bhi.w	12668 <_lv_memcpy+0x20>
   12774:	f1a2 0521 	sub.w	r5, r2, #33	; 0x21
   12778:	f025 041f 	bic.w	r4, r5, #31
   1277c:	3420      	adds	r4, #32
   1277e:	1903      	adds	r3, r0, r4
   12780:	4421      	add	r1, r4
   12782:	3a20      	subs	r2, #32
   12784:	f025 051f 	bic.w	r5, r5, #31
   12788:	1b52      	subs	r2, r2, r5
        while(len) {
   1278a:	b13a      	cbz	r2, 1279c <_lv_memcpy+0x154>
   1278c:	3901      	subs	r1, #1
   1278e:	441a      	add	r2, r3
            COPY8
   12790:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   12794:	f803 4b01 	strb.w	r4, [r3], #1
        while(len) {
   12798:	429a      	cmp	r2, r3
   1279a:	d1f9      	bne.n	12790 <_lv_memcpy+0x148>
}
   1279c:	bcf0      	pop	{r4, r5, r6, r7}
   1279e:	4770      	bx	lr
        while(len > 32) {
   127a0:	4603      	mov	r3, r0
   127a2:	e7f2      	b.n	1278a <_lv_memcpy+0x142>
    if(d_align) {
   127a4:	2b00      	cmp	r3, #0
   127a6:	d15b      	bne.n	12860 <_lv_memcpy+0x218>
    uint8_t * d8 = dst;
   127a8:	4605      	mov	r5, r0
    while(len > 32) {
   127aa:	2a20      	cmp	r2, #32
   127ac:	d934      	bls.n	12818 <_lv_memcpy+0x1d0>
   127ae:	f105 0420 	add.w	r4, r5, #32
   127b2:	f101 0320 	add.w	r3, r1, #32
   127b6:	4616      	mov	r6, r2
        REPEAT8(COPY32)
   127b8:	f853 7c20 	ldr.w	r7, [r3, #-32]
   127bc:	f844 7c20 	str.w	r7, [r4, #-32]
   127c0:	f853 7c1c 	ldr.w	r7, [r3, #-28]
   127c4:	f844 7c1c 	str.w	r7, [r4, #-28]
   127c8:	f853 7c18 	ldr.w	r7, [r3, #-24]
   127cc:	f844 7c18 	str.w	r7, [r4, #-24]
   127d0:	f853 7c14 	ldr.w	r7, [r3, #-20]
   127d4:	f844 7c14 	str.w	r7, [r4, #-20]
   127d8:	f853 7c10 	ldr.w	r7, [r3, #-16]
   127dc:	f844 7c10 	str.w	r7, [r4, #-16]
   127e0:	f853 7c0c 	ldr.w	r7, [r3, #-12]
   127e4:	f844 7c0c 	str.w	r7, [r4, #-12]
   127e8:	f853 7c08 	ldr.w	r7, [r3, #-8]
   127ec:	f844 7c08 	str.w	r7, [r4, #-8]
   127f0:	f853 7c04 	ldr.w	r7, [r3, #-4]
   127f4:	f844 7c04 	str.w	r7, [r4, #-4]
        len -= 32;
   127f8:	3e20      	subs	r6, #32
   127fa:	3420      	adds	r4, #32
   127fc:	3320      	adds	r3, #32
    while(len > 32) {
   127fe:	2e20      	cmp	r6, #32
   12800:	d8da      	bhi.n	127b8 <_lv_memcpy+0x170>
   12802:	f1a2 0321 	sub.w	r3, r2, #33	; 0x21
   12806:	f023 041f 	bic.w	r4, r3, #31
   1280a:	3420      	adds	r4, #32
   1280c:	4425      	add	r5, r4
   1280e:	4421      	add	r1, r4
   12810:	3a20      	subs	r2, #32
   12812:	f023 031f 	bic.w	r3, r3, #31
   12816:	1ad2      	subs	r2, r2, r3
    while(len > 4) {
   12818:	2a04      	cmp	r2, #4
   1281a:	d932      	bls.n	12882 <_lv_memcpy+0x23a>
   1281c:	1f0e      	subs	r6, r1, #4
   1281e:	462c      	mov	r4, r5
   12820:	4613      	mov	r3, r2
        COPY32;
   12822:	f856 7f04 	ldr.w	r7, [r6, #4]!
   12826:	f844 7b04 	str.w	r7, [r4], #4
        len -= 4;
   1282a:	3b04      	subs	r3, #4
    while(len > 4) {
   1282c:	2b04      	cmp	r3, #4
   1282e:	d8f8      	bhi.n	12822 <_lv_memcpy+0x1da>
   12830:	1f54      	subs	r4, r2, #5
   12832:	f024 0303 	bic.w	r3, r4, #3
   12836:	3304      	adds	r3, #4
   12838:	3a04      	subs	r2, #4
   1283a:	f024 0403 	bic.w	r4, r4, #3
   1283e:	1b12      	subs	r2, r2, r4
        COPY32;
   12840:	4419      	add	r1, r3
   12842:	442b      	add	r3, r5
    while(len) {
   12844:	2a00      	cmp	r2, #0
   12846:	d0a9      	beq.n	1279c <_lv_memcpy+0x154>
   12848:	3901      	subs	r1, #1
   1284a:	441a      	add	r2, r3
        COPY8
   1284c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   12850:	f803 4b01 	strb.w	r4, [r3], #1
    while(len) {
   12854:	4293      	cmp	r3, r2
   12856:	d1f9      	bne.n	1284c <_lv_memcpy+0x204>
   12858:	e7a0      	b.n	1279c <_lv_memcpy+0x154>
            COPY8;
   1285a:	4629      	mov	r1, r5
   1285c:	461d      	mov	r5, r3
   1285e:	e7a4      	b.n	127aa <_lv_memcpy+0x162>
        while(d_align && len) {
   12860:	f1c3 0304 	rsb	r3, r3, #4
   12864:	b17a      	cbz	r2, 12886 <_lv_memcpy+0x23e>
   12866:	18c4      	adds	r4, r0, r3
   12868:	4603      	mov	r3, r0
            COPY8;
   1286a:	f811 5b01 	ldrb.w	r5, [r1], #1
   1286e:	f803 5b01 	strb.w	r5, [r3], #1
   12872:	460d      	mov	r5, r1
            len--;
   12874:	3a01      	subs	r2, #1
        while(d_align && len) {
   12876:	42a3      	cmp	r3, r4
   12878:	d0ef      	beq.n	1285a <_lv_memcpy+0x212>
   1287a:	2a00      	cmp	r2, #0
   1287c:	d1f5      	bne.n	1286a <_lv_memcpy+0x222>
    while(len > 4) {
   1287e:	2200      	movs	r2, #0
   12880:	e7e0      	b.n	12844 <_lv_memcpy+0x1fc>
   12882:	462b      	mov	r3, r5
   12884:	e7de      	b.n	12844 <_lv_memcpy+0x1fc>
    uint8_t * d8 = dst;
   12886:	4603      	mov	r3, r0
   12888:	e7f9      	b.n	1287e <_lv_memcpy+0x236>
	...

0001288c <lv_mem_realloc>:
{
   1288c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1288e:	b083      	sub	sp, #12
   12890:	4604      	mov	r4, r0
   12892:	460d      	mov	r5, r1
    if(new_size & 0x3) {
   12894:	f011 0f03 	tst.w	r1, #3
        new_size = new_size & (~0x3);
   12898:	bf1c      	itt	ne
   1289a:	f021 0503 	bicne.w	r5, r1, #3
        new_size += 4;
   1289e:	3504      	addne	r5, #4
    if(data_p != NULL) {
   128a0:	b138      	cbz	r0, 128b2 <lv_mem_realloc+0x26>
        if(e->header.s.used == 0) {
   128a2:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   128a6:	f003 0301 	and.w	r3, r3, #1
            data_p = NULL;
   128aa:	2b00      	cmp	r3, #0
   128ac:	bf14      	ite	ne
   128ae:	4604      	movne	r4, r0
   128b0:	2400      	moveq	r4, #0
    uint32_t old_size = _lv_mem_get_size(data_p);
   128b2:	4620      	mov	r0, r4
   128b4:	4b15      	ldr	r3, [pc, #84]	; (1290c <lv_mem_realloc+0x80>)
   128b6:	4798      	blx	r3
   128b8:	4606      	mov	r6, r0
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
   128ba:	4285      	cmp	r5, r0
   128bc:	d024      	beq.n	12908 <lv_mem_realloc+0x7c>
    if(new_size < old_size) {
   128be:	d311      	bcc.n	128e4 <lv_mem_realloc+0x58>
    new_p = lv_mem_alloc(new_size);
   128c0:	4628      	mov	r0, r5
   128c2:	4b13      	ldr	r3, [pc, #76]	; (12910 <lv_mem_realloc+0x84>)
   128c4:	4798      	blx	r3
    if(new_p == NULL) {
   128c6:	4607      	mov	r7, r0
   128c8:	b1a0      	cbz	r0, 128f4 <lv_mem_realloc+0x68>
    if(data_p != NULL) {
   128ca:	b184      	cbz	r4, 128ee <lv_mem_realloc+0x62>
        if(old_size != 0) {
   128cc:	b17e      	cbz	r6, 128ee <lv_mem_realloc+0x62>
            _lv_memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
   128ce:	462a      	mov	r2, r5
   128d0:	42b5      	cmp	r5, r6
   128d2:	bf28      	it	cs
   128d4:	4632      	movcs	r2, r6
   128d6:	4621      	mov	r1, r4
   128d8:	4b0e      	ldr	r3, [pc, #56]	; (12914 <lv_mem_realloc+0x88>)
   128da:	4798      	blx	r3
            lv_mem_free(data_p);
   128dc:	4620      	mov	r0, r4
   128de:	4b0e      	ldr	r3, [pc, #56]	; (12918 <lv_mem_realloc+0x8c>)
   128e0:	4798      	blx	r3
   128e2:	e004      	b.n	128ee <lv_mem_realloc+0x62>
        ent_trunc(e, new_size);
   128e4:	4629      	mov	r1, r5
   128e6:	1f20      	subs	r0, r4, #4
   128e8:	4b0c      	ldr	r3, [pc, #48]	; (1291c <lv_mem_realloc+0x90>)
   128ea:	4798      	blx	r3
        return &e->first_data;
   128ec:	4627      	mov	r7, r4
}
   128ee:	4638      	mov	r0, r7
   128f0:	b003      	add	sp, #12
   128f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LV_LOG_WARN("Couldn't allocate memory");
   128f4:	4b0a      	ldr	r3, [pc, #40]	; (12920 <lv_mem_realloc+0x94>)
   128f6:	9300      	str	r3, [sp, #0]
   128f8:	4b0a      	ldr	r3, [pc, #40]	; (12924 <lv_mem_realloc+0x98>)
   128fa:	f240 123f 	movw	r2, #319	; 0x13f
   128fe:	490a      	ldr	r1, [pc, #40]	; (12928 <lv_mem_realloc+0x9c>)
   12900:	2002      	movs	r0, #2
   12902:	4c0a      	ldr	r4, [pc, #40]	; (1292c <lv_mem_realloc+0xa0>)
   12904:	47a0      	blx	r4
        return NULL;
   12906:	e7f2      	b.n	128ee <lv_mem_realloc+0x62>
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
   12908:	4627      	mov	r7, r4
   1290a:	e7f0      	b.n	128ee <lv_mem_realloc+0x62>
   1290c:	00012545 	.word	0x00012545
   12910:	000123d1 	.word	0x000123d1
   12914:	00012649 	.word	0x00012649
   12918:	000124b9 	.word	0x000124b9
   1291c:	0001235d 	.word	0x0001235d
   12920:	000293b4 	.word	0x000293b4
   12924:	0002936c 	.word	0x0002936c
   12928:	0002938c 	.word	0x0002938c
   1292c:	00012251 	.word	0x00012251

00012930 <_lv_mem_buf_get>:
    if(size == 0) return NULL;
   12930:	2800      	cmp	r0, #0
   12932:	f000 808d 	beq.w	12a50 <_lv_mem_buf_get+0x120>
   12936:	4601      	mov	r1, r0
    if(size <= MEM_BUF_SMALL_SIZE) {
   12938:	2810      	cmp	r0, #16
   1293a:	d80b      	bhi.n	12954 <_lv_mem_buf_get+0x24>
            if(mem_buf_small[i].used == 0) {
   1293c:	4b45      	ldr	r3, [pc, #276]	; (12a54 <_lv_mem_buf_get+0x124>)
   1293e:	799b      	ldrb	r3, [r3, #6]
   12940:	f013 0f01 	tst.w	r3, #1
   12944:	d00e      	beq.n	12964 <_lv_mem_buf_get+0x34>
   12946:	4b43      	ldr	r3, [pc, #268]	; (12a54 <_lv_mem_buf_get+0x124>)
   12948:	7b9b      	ldrb	r3, [r3, #14]
   1294a:	f013 0f01 	tst.w	r3, #1
   1294e:	bf08      	it	eq
   12950:	2001      	moveq	r0, #1
   12952:	d008      	beq.n	12966 <_lv_mem_buf_get+0x36>
{
   12954:	b570      	push	{r4, r5, r6, lr}
   12956:	b082      	sub	sp, #8
   12958:	4a3f      	ldr	r2, [pc, #252]	; (12a58 <_lv_mem_buf_get+0x128>)
            if(mem_buf_small[i].used == 0) {
   1295a:	2300      	movs	r3, #0
   1295c:	f04f 36ff 	mov.w	r6, #4294967295
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0 && LV_GC_ROOT(_lv_mem_buf[i]).size >= size) {
   12960:	4614      	mov	r4, r2
   12962:	e019      	b.n	12998 <_lv_mem_buf_get+0x68>
            if(mem_buf_small[i].used == 0) {
   12964:	2000      	movs	r0, #0
                mem_buf_small[i].used = 1;
   12966:	4a3b      	ldr	r2, [pc, #236]	; (12a54 <_lv_mem_buf_get+0x124>)
   12968:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
   1296c:	798b      	ldrb	r3, [r1, #6]
   1296e:	f043 0301 	orr.w	r3, r3, #1
   12972:	718b      	strb	r3, [r1, #6]
                return mem_buf_small[i].p;
   12974:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
   12978:	4770      	bx	lr
                LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
   1297a:	4a37      	ldr	r2, [pc, #220]	; (12a58 <_lv_mem_buf_get+0x128>)
   1297c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
   12980:	798b      	ldrb	r3, [r1, #6]
   12982:	f043 0301 	orr.w	r3, r3, #1
   12986:	718b      	strb	r3, [r1, #6]
                return LV_GC_ROOT(_lv_mem_buf[i]).p;
   12988:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
   1298c:	e023      	b.n	129d6 <_lv_mem_buf_get+0xa6>
                i_guess = i;
   1298e:	b25e      	sxtb	r6, r3
   12990:	3301      	adds	r3, #1
   12992:	3208      	adds	r2, #8
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
   12994:	2b10      	cmp	r3, #16
   12996:	d013      	beq.n	129c0 <_lv_mem_buf_get+0x90>
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0 && LV_GC_ROOT(_lv_mem_buf[i]).size >= size) {
   12998:	461d      	mov	r5, r3
   1299a:	eb04 00c3 	add.w	r0, r4, r3, lsl #3
   1299e:	7980      	ldrb	r0, [r0, #6]
   129a0:	f010 0f01 	tst.w	r0, #1
   129a4:	d1f4      	bne.n	12990 <_lv_mem_buf_get+0x60>
   129a6:	8890      	ldrh	r0, [r2, #4]
   129a8:	4281      	cmp	r1, r0
   129aa:	d8f1      	bhi.n	12990 <_lv_mem_buf_get+0x60>
            if(LV_GC_ROOT(_lv_mem_buf[i]).size == size) {
   129ac:	d0e5      	beq.n	1297a <_lv_mem_buf_get+0x4a>
            else if(i_guess < 0) {
   129ae:	2e00      	cmp	r6, #0
   129b0:	dbed      	blt.n	1298e <_lv_mem_buf_get+0x5e>
            else if(LV_GC_ROOT(_lv_mem_buf[i]).size < LV_GC_ROOT(_lv_mem_buf[i_guess]).size) {
   129b2:	eb04 05c6 	add.w	r5, r4, r6, lsl #3
   129b6:	88ad      	ldrh	r5, [r5, #4]
   129b8:	4285      	cmp	r5, r0
                i_guess = i;
   129ba:	bf88      	it	hi
   129bc:	b25e      	sxtbhi	r6, r3
   129be:	e7e7      	b.n	12990 <_lv_mem_buf_get+0x60>
    if(i_guess >= 0) {
   129c0:	2e00      	cmp	r6, #0
   129c2:	db0a      	blt.n	129da <_lv_mem_buf_get+0xaa>
        LV_GC_ROOT(_lv_mem_buf[i_guess]).used = 1;
   129c4:	4a24      	ldr	r2, [pc, #144]	; (12a58 <_lv_mem_buf_get+0x128>)
   129c6:	eb02 01c6 	add.w	r1, r2, r6, lsl #3
   129ca:	798b      	ldrb	r3, [r1, #6]
   129cc:	f043 0301 	orr.w	r3, r3, #1
   129d0:	718b      	strb	r3, [r1, #6]
        return LV_GC_ROOT(_lv_mem_buf[i_guess]).p;
   129d2:	f852 0036 	ldr.w	r0, [r2, r6, lsl #3]
}
   129d6:	b002      	add	sp, #8
   129d8:	bd70      	pop	{r4, r5, r6, pc}
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0) {
   129da:	4b1f      	ldr	r3, [pc, #124]	; (12a58 <_lv_mem_buf_get+0x128>)
   129dc:	799b      	ldrb	r3, [r3, #6]
   129de:	f013 0f01 	tst.w	r3, #1
   129e2:	bf08      	it	eq
   129e4:	2400      	moveq	r4, #0
   129e6:	d016      	beq.n	12a16 <_lv_mem_buf_get+0xe6>
   129e8:	2301      	movs	r3, #1
   129ea:	481b      	ldr	r0, [pc, #108]	; (12a58 <_lv_mem_buf_get+0x128>)
   129ec:	461c      	mov	r4, r3
   129ee:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
   129f2:	7992      	ldrb	r2, [r2, #6]
   129f4:	f012 0f01 	tst.w	r2, #1
   129f8:	d00d      	beq.n	12a16 <_lv_mem_buf_get+0xe6>
   129fa:	3301      	adds	r3, #1
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
   129fc:	2b10      	cmp	r3, #16
   129fe:	d1f5      	bne.n	129ec <_lv_mem_buf_get+0xbc>
    LV_LOG_ERROR("lv_mem_buf_get: no free buffer. Increase LV_DRAW_BUF_MAX_NUM.");
   12a00:	4b16      	ldr	r3, [pc, #88]	; (12a5c <_lv_mem_buf_get+0x12c>)
   12a02:	9300      	str	r3, [sp, #0]
   12a04:	4b16      	ldr	r3, [pc, #88]	; (12a60 <_lv_mem_buf_get+0x130>)
   12a06:	f240 2216 	movw	r2, #534	; 0x216
   12a0a:	4916      	ldr	r1, [pc, #88]	; (12a64 <_lv_mem_buf_get+0x134>)
   12a0c:	2003      	movs	r0, #3
   12a0e:	4c16      	ldr	r4, [pc, #88]	; (12a68 <_lv_mem_buf_get+0x138>)
   12a10:	47a0      	blx	r4
    return NULL;
   12a12:	2000      	movs	r0, #0
   12a14:	e7df      	b.n	129d6 <_lv_mem_buf_get+0xa6>
            LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
   12a16:	4d10      	ldr	r5, [pc, #64]	; (12a58 <_lv_mem_buf_get+0x128>)
   12a18:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
   12a1c:	799a      	ldrb	r2, [r3, #6]
   12a1e:	f042 0201 	orr.w	r2, r2, #1
   12a22:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = size;
   12a24:	8099      	strh	r1, [r3, #4]
            LV_GC_ROOT(_lv_mem_buf[i]).p = lv_mem_realloc(LV_GC_ROOT(_lv_mem_buf[i]).p, size);
   12a26:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   12a2a:	4b10      	ldr	r3, [pc, #64]	; (12a6c <_lv_mem_buf_get+0x13c>)
   12a2c:	4798      	blx	r3
   12a2e:	f845 0034 	str.w	r0, [r5, r4, lsl #3]
            if(LV_GC_ROOT(_lv_mem_buf[i]).p == NULL) {
   12a32:	b118      	cbz	r0, 12a3c <_lv_mem_buf_get+0x10c>
            return  LV_GC_ROOT(_lv_mem_buf[i]).p;
   12a34:	4b08      	ldr	r3, [pc, #32]	; (12a58 <_lv_mem_buf_get+0x128>)
   12a36:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   12a3a:	e7cc      	b.n	129d6 <_lv_mem_buf_get+0xa6>
                LV_LOG_ERROR("lv_mem_buf_get: Out of memory, can't allocate a new  buffer (increase your LV_MEM_SIZE/heap size)")
   12a3c:	4b0c      	ldr	r3, [pc, #48]	; (12a70 <_lv_mem_buf_get+0x140>)
   12a3e:	9300      	str	r3, [sp, #0]
   12a40:	4b07      	ldr	r3, [pc, #28]	; (12a60 <_lv_mem_buf_get+0x130>)
   12a42:	f44f 7204 	mov.w	r2, #528	; 0x210
   12a46:	4907      	ldr	r1, [pc, #28]	; (12a64 <_lv_mem_buf_get+0x134>)
   12a48:	2003      	movs	r0, #3
   12a4a:	4d07      	ldr	r5, [pc, #28]	; (12a68 <_lv_mem_buf_get+0x138>)
   12a4c:	47a8      	blx	r5
   12a4e:	e7f1      	b.n	12a34 <_lv_mem_buf_get+0x104>
    if(size == 0) return NULL;
   12a50:	2000      	movs	r0, #0
   12a52:	4770      	bx	lr
   12a54:	20000044 	.word	0x20000044
   12a58:	2000c6ac 	.word	0x2000c6ac
   12a5c:	00029460 	.word	0x00029460
   12a60:	0002937c 	.word	0x0002937c
   12a64:	0002938c 	.word	0x0002938c
   12a68:	00012251 	.word	0x00012251
   12a6c:	0001288d 	.word	0x0001288d
   12a70:	000293fc 	.word	0x000293fc

00012a74 <_lv_memset>:
    if(d_align) {
   12a74:	f010 0303 	ands.w	r3, r0, #3
   12a78:	d013      	beq.n	12aa2 <_lv_memset+0x2e>
        while(d_align && len) {
   12a7a:	f1c3 0304 	rsb	r3, r3, #4
   12a7e:	b13a      	cbz	r2, 12a90 <_lv_memset+0x1c>
   12a80:	4403      	add	r3, r0
            *d8 = v;
   12a82:	f800 1b01 	strb.w	r1, [r0], #1
            len--;
   12a86:	3a01      	subs	r2, #1
        while(d_align && len) {
   12a88:	4298      	cmp	r0, r3
   12a8a:	d00a      	beq.n	12aa2 <_lv_memset+0x2e>
   12a8c:	2a00      	cmp	r2, #0
   12a8e:	d1f8      	bne.n	12a82 <_lv_memset+0xe>
    while(len > 4) {
   12a90:	2200      	movs	r2, #0
    while(len) {
   12a92:	2a00      	cmp	r2, #0
   12a94:	d048      	beq.n	12b28 <_lv_memset+0xb4>
   12a96:	4402      	add	r2, r0
        *d8 = v;
   12a98:	f800 1b01 	strb.w	r1, [r0], #1
    while(len) {
   12a9c:	4290      	cmp	r0, r2
   12a9e:	d1fb      	bne.n	12a98 <_lv_memset+0x24>
   12aa0:	4770      	bx	lr
{
   12aa2:	b430      	push	{r4, r5}
    uint32_t v32 = v + (v << 8) + (v << 16) + (v << 24);
   12aa4:	eb01 2401 	add.w	r4, r1, r1, lsl #8
   12aa8:	eb04 4401 	add.w	r4, r4, r1, lsl #16
   12aac:	eb04 6401 	add.w	r4, r4, r1, lsl #24
    while(len > 32) {
   12ab0:	2a20      	cmp	r2, #32
   12ab2:	d920      	bls.n	12af6 <_lv_memset+0x82>
   12ab4:	f100 0320 	add.w	r3, r0, #32
   12ab8:	4615      	mov	r5, r2
        SET32(v32);
   12aba:	f843 4c20 	str.w	r4, [r3, #-32]
        SET32(v32);
   12abe:	f843 4c1c 	str.w	r4, [r3, #-28]
        SET32(v32);
   12ac2:	f843 4c18 	str.w	r4, [r3, #-24]
        SET32(v32);
   12ac6:	f843 4c14 	str.w	r4, [r3, #-20]
        SET32(v32);
   12aca:	f843 4c10 	str.w	r4, [r3, #-16]
        SET32(v32);
   12ace:	f843 4c0c 	str.w	r4, [r3, #-12]
        SET32(v32);
   12ad2:	f843 4c08 	str.w	r4, [r3, #-8]
        SET32(v32);
   12ad6:	f843 4c04 	str.w	r4, [r3, #-4]
        len -= 32;
   12ada:	3d20      	subs	r5, #32
   12adc:	3320      	adds	r3, #32
    while(len > 32) {
   12ade:	2d20      	cmp	r5, #32
   12ae0:	d8eb      	bhi.n	12aba <_lv_memset+0x46>
   12ae2:	f1a2 0321 	sub.w	r3, r2, #33	; 0x21
   12ae6:	f023 051f 	bic.w	r5, r3, #31
   12aea:	3520      	adds	r5, #32
   12aec:	4428      	add	r0, r5
   12aee:	3a20      	subs	r2, #32
   12af0:	f023 031f 	bic.w	r3, r3, #31
   12af4:	1ad2      	subs	r2, r2, r3
    while(len > 4) {
   12af6:	2a04      	cmp	r2, #4
   12af8:	d90f      	bls.n	12b1a <_lv_memset+0xa6>
   12afa:	4605      	mov	r5, r0
   12afc:	4613      	mov	r3, r2
        SET32(v32);
   12afe:	f845 4b04 	str.w	r4, [r5], #4
        len -= 4;
   12b02:	3b04      	subs	r3, #4
    while(len > 4) {
   12b04:	2b04      	cmp	r3, #4
   12b06:	d8fa      	bhi.n	12afe <_lv_memset+0x8a>
   12b08:	1f53      	subs	r3, r2, #5
   12b0a:	f023 0403 	bic.w	r4, r3, #3
   12b0e:	3404      	adds	r4, #4
   12b10:	3a04      	subs	r2, #4
   12b12:	f023 0303 	bic.w	r3, r3, #3
   12b16:	1ad2      	subs	r2, r2, r3
        SET32(v32);
   12b18:	4420      	add	r0, r4
    while(len) {
   12b1a:	b122      	cbz	r2, 12b26 <_lv_memset+0xb2>
   12b1c:	4402      	add	r2, r0
        *d8 = v;
   12b1e:	f800 1b01 	strb.w	r1, [r0], #1
    while(len) {
   12b22:	4290      	cmp	r0, r2
   12b24:	d1fb      	bne.n	12b1e <_lv_memset+0xaa>
}
   12b26:	bc30      	pop	{r4, r5}
   12b28:	4770      	bx	lr

00012b2a <_lv_memset_00>:
    if(d_align) {
   12b2a:	f010 0303 	ands.w	r3, r0, #3
   12b2e:	d141      	bne.n	12bb4 <_lv_memset_00+0x8a>
{
   12b30:	b410      	push	{r4}
    while(len > 32) {
   12b32:	2920      	cmp	r1, #32
   12b34:	d921      	bls.n	12b7a <_lv_memset_00+0x50>
   12b36:	f100 0320 	add.w	r3, r0, #32
   12b3a:	460c      	mov	r4, r1
        SET32(0);
   12b3c:	2200      	movs	r2, #0
   12b3e:	f843 2c20 	str.w	r2, [r3, #-32]
        SET32(0);
   12b42:	f843 2c1c 	str.w	r2, [r3, #-28]
        SET32(0);
   12b46:	f843 2c18 	str.w	r2, [r3, #-24]
        SET32(0);
   12b4a:	f843 2c14 	str.w	r2, [r3, #-20]
        SET32(0);
   12b4e:	f843 2c10 	str.w	r2, [r3, #-16]
        SET32(0);
   12b52:	f843 2c0c 	str.w	r2, [r3, #-12]
        SET32(0);
   12b56:	f843 2c08 	str.w	r2, [r3, #-8]
        SET32(0);
   12b5a:	f843 2c04 	str.w	r2, [r3, #-4]
        len -= 32;
   12b5e:	3c20      	subs	r4, #32
   12b60:	3320      	adds	r3, #32
    while(len > 32) {
   12b62:	2c20      	cmp	r4, #32
   12b64:	d8eb      	bhi.n	12b3e <_lv_memset_00+0x14>
   12b66:	f1a1 0321 	sub.w	r3, r1, #33	; 0x21
   12b6a:	f023 021f 	bic.w	r2, r3, #31
   12b6e:	3220      	adds	r2, #32
   12b70:	4410      	add	r0, r2
   12b72:	3920      	subs	r1, #32
   12b74:	f023 031f 	bic.w	r3, r3, #31
   12b78:	1ac9      	subs	r1, r1, r3
    while(len > 4) {
   12b7a:	2904      	cmp	r1, #4
   12b7c:	d910      	bls.n	12ba0 <_lv_memset_00+0x76>
   12b7e:	4602      	mov	r2, r0
   12b80:	460b      	mov	r3, r1
        SET32(0);
   12b82:	2400      	movs	r4, #0
   12b84:	f842 4b04 	str.w	r4, [r2], #4
        len -= 4;
   12b88:	3b04      	subs	r3, #4
    while(len > 4) {
   12b8a:	2b04      	cmp	r3, #4
   12b8c:	d8fa      	bhi.n	12b84 <_lv_memset_00+0x5a>
   12b8e:	1f4b      	subs	r3, r1, #5
   12b90:	f023 0203 	bic.w	r2, r3, #3
   12b94:	3204      	adds	r2, #4
   12b96:	3904      	subs	r1, #4
   12b98:	f023 0303 	bic.w	r3, r3, #3
   12b9c:	1ac9      	subs	r1, r1, r3
        SET32(0);
   12b9e:	4410      	add	r0, r2
    while(len) {
   12ba0:	b129      	cbz	r1, 12bae <_lv_memset_00+0x84>
   12ba2:	4401      	add	r1, r0
        *d8 = 0;
   12ba4:	2300      	movs	r3, #0
   12ba6:	f800 3b01 	strb.w	r3, [r0], #1
    while(len) {
   12baa:	4288      	cmp	r0, r1
   12bac:	d1fb      	bne.n	12ba6 <_lv_memset_00+0x7c>
}
   12bae:	f85d 4b04 	ldr.w	r4, [sp], #4
   12bb2:	4770      	bx	lr
        while(d_align && len) {
   12bb4:	f1c3 0304 	rsb	r3, r3, #4
   12bb8:	b141      	cbz	r1, 12bcc <_lv_memset_00+0xa2>
   12bba:	4403      	add	r3, r0
            *d8 = 0x00;
   12bbc:	2200      	movs	r2, #0
   12bbe:	f800 2b01 	strb.w	r2, [r0], #1
            len--;
   12bc2:	3901      	subs	r1, #1
        while(d_align && len) {
   12bc4:	4298      	cmp	r0, r3
   12bc6:	d0b3      	beq.n	12b30 <_lv_memset_00+0x6>
   12bc8:	2900      	cmp	r1, #0
   12bca:	d1f8      	bne.n	12bbe <_lv_memset_00+0x94>
    while(len > 4) {
   12bcc:	2100      	movs	r1, #0
    while(len) {
   12bce:	2900      	cmp	r1, #0
   12bd0:	d0ef      	beq.n	12bb2 <_lv_memset_00+0x88>
   12bd2:	4401      	add	r1, r0
        *d8 = 0;
   12bd4:	2300      	movs	r3, #0
   12bd6:	f800 3b01 	strb.w	r3, [r0], #1
    while(len) {
   12bda:	4288      	cmp	r0, r1
   12bdc:	d1fb      	bne.n	12bd6 <_lv_memset_00+0xac>
   12bde:	4770      	bx	lr

00012be0 <_lv_memset_ff>:
    if(d_align) {
   12be0:	f010 0303 	ands.w	r3, r0, #3
   12be4:	d143      	bne.n	12c6e <_lv_memset_ff+0x8e>
{
   12be6:	b410      	push	{r4}
    while(len > 32) {
   12be8:	2920      	cmp	r1, #32
   12bea:	d922      	bls.n	12c32 <_lv_memset_ff+0x52>
   12bec:	f100 0320 	add.w	r3, r0, #32
   12bf0:	460c      	mov	r4, r1
        SET32(0xFFFFFFFF);
   12bf2:	f04f 32ff 	mov.w	r2, #4294967295
   12bf6:	f843 2c20 	str.w	r2, [r3, #-32]
        SET32(0xFFFFFFFF);
   12bfa:	f843 2c1c 	str.w	r2, [r3, #-28]
        SET32(0xFFFFFFFF);
   12bfe:	f843 2c18 	str.w	r2, [r3, #-24]
        SET32(0xFFFFFFFF);
   12c02:	f843 2c14 	str.w	r2, [r3, #-20]
        SET32(0xFFFFFFFF);
   12c06:	f843 2c10 	str.w	r2, [r3, #-16]
        SET32(0xFFFFFFFF);
   12c0a:	f843 2c0c 	str.w	r2, [r3, #-12]
        SET32(0xFFFFFFFF);
   12c0e:	f843 2c08 	str.w	r2, [r3, #-8]
        SET32(0xFFFFFFFF);
   12c12:	f843 2c04 	str.w	r2, [r3, #-4]
        len -= 32;
   12c16:	3c20      	subs	r4, #32
   12c18:	3320      	adds	r3, #32
    while(len > 32) {
   12c1a:	2c20      	cmp	r4, #32
   12c1c:	d8eb      	bhi.n	12bf6 <_lv_memset_ff+0x16>
   12c1e:	f1a1 0321 	sub.w	r3, r1, #33	; 0x21
   12c22:	f023 021f 	bic.w	r2, r3, #31
   12c26:	3220      	adds	r2, #32
   12c28:	4410      	add	r0, r2
   12c2a:	3920      	subs	r1, #32
   12c2c:	f023 031f 	bic.w	r3, r3, #31
   12c30:	1ac9      	subs	r1, r1, r3
    while(len > 4) {
   12c32:	2904      	cmp	r1, #4
   12c34:	d911      	bls.n	12c5a <_lv_memset_ff+0x7a>
   12c36:	4602      	mov	r2, r0
   12c38:	460b      	mov	r3, r1
        SET32(0xFFFFFFFF);
   12c3a:	f04f 34ff 	mov.w	r4, #4294967295
   12c3e:	f842 4b04 	str.w	r4, [r2], #4
        len -= 4;
   12c42:	3b04      	subs	r3, #4
    while(len > 4) {
   12c44:	2b04      	cmp	r3, #4
   12c46:	d8fa      	bhi.n	12c3e <_lv_memset_ff+0x5e>
   12c48:	1f4b      	subs	r3, r1, #5
   12c4a:	f023 0203 	bic.w	r2, r3, #3
   12c4e:	3204      	adds	r2, #4
   12c50:	3904      	subs	r1, #4
   12c52:	f023 0303 	bic.w	r3, r3, #3
   12c56:	1ac9      	subs	r1, r1, r3
        SET32(0xFFFFFFFF);
   12c58:	4410      	add	r0, r2
    while(len) {
   12c5a:	b129      	cbz	r1, 12c68 <_lv_memset_ff+0x88>
   12c5c:	4401      	add	r1, r0
        *d8 = 0xFF;
   12c5e:	23ff      	movs	r3, #255	; 0xff
   12c60:	f800 3b01 	strb.w	r3, [r0], #1
    while(len) {
   12c64:	4288      	cmp	r0, r1
   12c66:	d1fb      	bne.n	12c60 <_lv_memset_ff+0x80>
}
   12c68:	f85d 4b04 	ldr.w	r4, [sp], #4
   12c6c:	4770      	bx	lr
        while(d_align && len) {
   12c6e:	f1c3 0304 	rsb	r3, r3, #4
   12c72:	b141      	cbz	r1, 12c86 <_lv_memset_ff+0xa6>
   12c74:	4403      	add	r3, r0
            *d8 = 0xFF;
   12c76:	22ff      	movs	r2, #255	; 0xff
   12c78:	f800 2b01 	strb.w	r2, [r0], #1
            len--;
   12c7c:	3901      	subs	r1, #1
        while(d_align && len) {
   12c7e:	4298      	cmp	r0, r3
   12c80:	d0b1      	beq.n	12be6 <_lv_memset_ff+0x6>
   12c82:	2900      	cmp	r1, #0
   12c84:	d1f8      	bne.n	12c78 <_lv_memset_ff+0x98>
    while(len > 4) {
   12c86:	2100      	movs	r1, #0
    while(len) {
   12c88:	2900      	cmp	r1, #0
   12c8a:	d0ef      	beq.n	12c6c <_lv_memset_ff+0x8c>
   12c8c:	4401      	add	r1, r0
        *d8 = 0xFF;
   12c8e:	23ff      	movs	r3, #255	; 0xff
   12c90:	f800 3b01 	strb.w	r3, [r0], #1
    while(len) {
   12c94:	4288      	cmp	r0, r1
   12c96:	d1fb      	bne.n	12c90 <_lv_memset_ff+0xb0>
   12c98:	4770      	bx	lr

00012c9a <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, void * buffer, size_t idx, size_t maxlen)
{
    if(idx < maxlen) {
   12c9a:	429a      	cmp	r2, r3
        ((char *)buffer)[idx] = character;
   12c9c:	bf38      	it	cc
   12c9e:	5488      	strbcc	r0, [r1, r2]
   12ca0:	4770      	bx	lr

00012ca2 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void * buffer, size_t idx, size_t maxlen)
{
   12ca2:	4770      	bx	lr

00012ca4 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char * buffer, size_t idx, size_t maxlen, char * buf, size_t len,
                           bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
   12ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ca8:	b083      	sub	sp, #12
   12caa:	4607      	mov	r7, r0
   12cac:	9100      	str	r1, [sp, #0]
   12cae:	4693      	mov	fp, r2
   12cb0:	4698      	mov	r8, r3
   12cb2:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
   12cb6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   12cb8:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
   12cbc:	9910      	ldr	r1, [sp, #64]	; 0x40
   12cbe:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
   12cc2:	9a12      	ldr	r2, [sp, #72]	; 0x48
    // pad leading zeros
    if(!(flags & FLAGS_LEFT)) {
   12cc4:	f012 0302 	ands.w	r3, r2, #2
   12cc8:	9301      	str	r3, [sp, #4]
   12cca:	d135      	bne.n	12d38 <_ntoa_format+0x94>
        if(width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
   12ccc:	f1ba 0f00 	cmp.w	sl, #0
   12cd0:	d00e      	beq.n	12cf0 <_ntoa_format+0x4c>
   12cd2:	f012 0f01 	tst.w	r2, #1
   12cd6:	f000 80b6 	beq.w	12e46 <_ntoa_format+0x1a2>
   12cda:	b915      	cbnz	r5, 12ce2 <_ntoa_format+0x3e>
   12cdc:	f012 0f0c 	tst.w	r2, #12
   12ce0:	d001      	beq.n	12ce6 <_ntoa_format+0x42>
            width--;
   12ce2:	f10a 3aff 	add.w	sl, sl, #4294967295
        }
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   12ce6:	428c      	cmp	r4, r1
   12ce8:	d213      	bcs.n	12d12 <_ntoa_format+0x6e>
   12cea:	2c1f      	cmp	r4, #31
   12cec:	d904      	bls.n	12cf8 <_ntoa_format+0x54>
   12cee:	e010      	b.n	12d12 <_ntoa_format+0x6e>
   12cf0:	428c      	cmp	r4, r1
   12cf2:	d20b      	bcs.n	12d0c <_ntoa_format+0x68>
   12cf4:	2c1f      	cmp	r4, #31
   12cf6:	d809      	bhi.n	12d0c <_ntoa_format+0x68>
   12cf8:	eb09 0304 	add.w	r3, r9, r4
            buf[len++] = '0';
   12cfc:	2030      	movs	r0, #48	; 0x30
   12cfe:	3401      	adds	r4, #1
   12d00:	f803 0b01 	strb.w	r0, [r3], #1
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   12d04:	42a1      	cmp	r1, r4
   12d06:	d901      	bls.n	12d0c <_ntoa_format+0x68>
   12d08:	2c20      	cmp	r4, #32
   12d0a:	d1f8      	bne.n	12cfe <_ntoa_format+0x5a>
        }
        while((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   12d0c:	f012 0f01 	tst.w	r2, #1
   12d10:	d012      	beq.n	12d38 <_ntoa_format+0x94>
   12d12:	45a2      	cmp	sl, r4
   12d14:	d910      	bls.n	12d38 <_ntoa_format+0x94>
   12d16:	2c1f      	cmp	r4, #31
   12d18:	d809      	bhi.n	12d2e <_ntoa_format+0x8a>
   12d1a:	eb09 0304 	add.w	r3, r9, r4
            buf[len++] = '0';
   12d1e:	2030      	movs	r0, #48	; 0x30
   12d20:	3401      	adds	r4, #1
   12d22:	f803 0b01 	strb.w	r0, [r3], #1
        while((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   12d26:	4554      	cmp	r4, sl
   12d28:	d005      	beq.n	12d36 <_ntoa_format+0x92>
   12d2a:	2c20      	cmp	r4, #32
   12d2c:	d1f8      	bne.n	12d20 <_ntoa_format+0x7c>
        }
    }

    // handle hash
    if(flags & FLAGS_HASH) {
   12d2e:	f012 0f10 	tst.w	r2, #16
   12d32:	d104      	bne.n	12d3e <_ntoa_format+0x9a>
   12d34:	e044      	b.n	12dc0 <_ntoa_format+0x11c>
   12d36:	46a2      	mov	sl, r4
   12d38:	f012 0f10 	tst.w	r2, #16
   12d3c:	d013      	beq.n	12d66 <_ntoa_format+0xc2>
        if(!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
   12d3e:	f412 6f80 	tst.w	r2, #1024	; 0x400
   12d42:	d104      	bne.n	12d4e <_ntoa_format+0xaa>
   12d44:	b11c      	cbz	r4, 12d4e <_ntoa_format+0xaa>
   12d46:	42a1      	cmp	r1, r4
   12d48:	d01b      	beq.n	12d82 <_ntoa_format+0xde>
   12d4a:	4554      	cmp	r4, sl
   12d4c:	d019      	beq.n	12d82 <_ntoa_format+0xde>
            len--;
            if(len && (base == 16U)) {
                len--;
            }
        }
        if((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   12d4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12d50:	2b10      	cmp	r3, #16
   12d52:	d01e      	beq.n	12d92 <_ntoa_format+0xee>
            buf[len++] = 'x';
        }
        else if((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = 'X';
        }
        else if((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   12d54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12d56:	2b02      	cmp	r3, #2
   12d58:	d027      	beq.n	12daa <_ntoa_format+0x106>
            buf[len++] = 'b';
        }
        if(len < PRINTF_NTOA_BUFFER_SIZE) {
   12d5a:	2c1f      	cmp	r4, #31
   12d5c:	d830      	bhi.n	12dc0 <_ntoa_format+0x11c>
            buf[len++] = '0';
   12d5e:	2330      	movs	r3, #48	; 0x30
   12d60:	f809 3004 	strb.w	r3, [r9, r4]
   12d64:	3401      	adds	r4, #1
        }
    }

    if(len < PRINTF_NTOA_BUFFER_SIZE) {
   12d66:	2c1f      	cmp	r4, #31
   12d68:	d82a      	bhi.n	12dc0 <_ntoa_format+0x11c>
        if(negative) {
   12d6a:	bb2d      	cbnz	r5, 12db8 <_ntoa_format+0x114>
            buf[len++] = '-';
        }
        else if(flags & FLAGS_PLUS) {
   12d6c:	f012 0f04 	tst.w	r2, #4
   12d70:	d13a      	bne.n	12de8 <_ntoa_format+0x144>
            buf[len++] = '+';  // ignore the space if the '+' exists
        }
        else if(flags & FLAGS_SPACE) {
   12d72:	f012 0f08 	tst.w	r2, #8
   12d76:	d023      	beq.n	12dc0 <_ntoa_format+0x11c>
            buf[len++] = ' ';
   12d78:	2320      	movs	r3, #32
   12d7a:	f809 3004 	strb.w	r3, [r9, r4]
   12d7e:	3401      	adds	r4, #1
   12d80:	e01e      	b.n	12dc0 <_ntoa_format+0x11c>
            if(len && (base == 16U)) {
   12d82:	1e63      	subs	r3, r4, #1
   12d84:	d00f      	beq.n	12da6 <_ntoa_format+0x102>
   12d86:	990f      	ldr	r1, [sp, #60]	; 0x3c
   12d88:	2910      	cmp	r1, #16
   12d8a:	d001      	beq.n	12d90 <_ntoa_format+0xec>
            len--;
   12d8c:	461c      	mov	r4, r3
   12d8e:	e7e1      	b.n	12d54 <_ntoa_format+0xb0>
                len--;
   12d90:	3c02      	subs	r4, #2
        if((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   12d92:	f012 0f20 	tst.w	r2, #32
   12d96:	d15d      	bne.n	12e54 <_ntoa_format+0x1b0>
   12d98:	2c1f      	cmp	r4, #31
   12d9a:	d8de      	bhi.n	12d5a <_ntoa_format+0xb6>
            buf[len++] = 'x';
   12d9c:	2378      	movs	r3, #120	; 0x78
   12d9e:	f809 3004 	strb.w	r3, [r9, r4]
   12da2:	3401      	adds	r4, #1
   12da4:	e7d9      	b.n	12d5a <_ntoa_format+0xb6>
            len--;
   12da6:	461c      	mov	r4, r3
   12da8:	e7d1      	b.n	12d4e <_ntoa_format+0xaa>
        else if((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   12daa:	2c1f      	cmp	r4, #31
   12dac:	d808      	bhi.n	12dc0 <_ntoa_format+0x11c>
            buf[len++] = 'b';
   12dae:	2362      	movs	r3, #98	; 0x62
   12db0:	f809 3004 	strb.w	r3, [r9, r4]
   12db4:	3401      	adds	r4, #1
   12db6:	e7d0      	b.n	12d5a <_ntoa_format+0xb6>
            buf[len++] = '-';
   12db8:	232d      	movs	r3, #45	; 0x2d
   12dba:	f809 3004 	strb.w	r3, [r9, r4]
   12dbe:	3401      	adds	r4, #1
    if(!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
   12dc0:	f012 0f03 	tst.w	r2, #3
   12dc4:	d115      	bne.n	12df2 <_ntoa_format+0x14e>
        for(i = len; i < width; i++) {
   12dc6:	4554      	cmp	r4, sl
   12dc8:	bf28      	it	cs
   12dca:	465e      	movcs	r6, fp
   12dcc:	d212      	bcs.n	12df4 <_ntoa_format+0x150>
   12dce:	eb0b 050a 	add.w	r5, fp, sl
   12dd2:	1b2d      	subs	r5, r5, r4
   12dd4:	465a      	mov	r2, fp
            out(' ', buffer, idx++, maxlen);
   12dd6:	1c56      	adds	r6, r2, #1
   12dd8:	4643      	mov	r3, r8
   12dda:	9900      	ldr	r1, [sp, #0]
   12ddc:	2020      	movs	r0, #32
   12dde:	47b8      	blx	r7
   12de0:	4632      	mov	r2, r6
        for(i = len; i < width; i++) {
   12de2:	42ae      	cmp	r6, r5
   12de4:	d1f7      	bne.n	12dd6 <_ntoa_format+0x132>
   12de6:	e005      	b.n	12df4 <_ntoa_format+0x150>
            buf[len++] = '+';  // ignore the space if the '+' exists
   12de8:	232b      	movs	r3, #43	; 0x2b
   12dea:	f809 3004 	strb.w	r3, [r9, r4]
   12dee:	3401      	adds	r4, #1
   12df0:	e7e6      	b.n	12dc0 <_ntoa_format+0x11c>
    if(!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
   12df2:	465e      	mov	r6, fp
    while(len) {
   12df4:	4635      	mov	r5, r6
   12df6:	b15c      	cbz	r4, 12e10 <_ntoa_format+0x16c>
   12df8:	44a1      	add	r9, r4
   12dfa:	4434      	add	r4, r6
   12dfc:	4632      	mov	r2, r6
        out(buf[--len], buffer, idx++, maxlen);
   12dfe:	1c55      	adds	r5, r2, #1
   12e00:	4643      	mov	r3, r8
   12e02:	9900      	ldr	r1, [sp, #0]
   12e04:	f819 0d01 	ldrb.w	r0, [r9, #-1]!
   12e08:	47b8      	blx	r7
   12e0a:	462a      	mov	r2, r5
    while(len) {
   12e0c:	42ac      	cmp	r4, r5
   12e0e:	d1f6      	bne.n	12dfe <_ntoa_format+0x15a>
    if(flags & FLAGS_LEFT) {
   12e10:	9b01      	ldr	r3, [sp, #4]
   12e12:	b1a3      	cbz	r3, 12e3e <_ntoa_format+0x19a>
        while(idx - start_idx < width) {
   12e14:	eba5 030b 	sub.w	r3, r5, fp
   12e18:	4553      	cmp	r3, sl
   12e1a:	d212      	bcs.n	12e42 <_ntoa_format+0x19e>
            out(' ', buffer, idx++, maxlen);
   12e1c:	2620      	movs	r6, #32
   12e1e:	462a      	mov	r2, r5
   12e20:	9d00      	ldr	r5, [sp, #0]
   12e22:	1c54      	adds	r4, r2, #1
   12e24:	4643      	mov	r3, r8
   12e26:	4629      	mov	r1, r5
   12e28:	4630      	mov	r0, r6
   12e2a:	47b8      	blx	r7
   12e2c:	4622      	mov	r2, r4
        while(idx - start_idx < width) {
   12e2e:	eba4 030b 	sub.w	r3, r4, fp
   12e32:	4553      	cmp	r3, sl
   12e34:	d3f5      	bcc.n	12e22 <_ntoa_format+0x17e>
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
}
   12e36:	4620      	mov	r0, r4
   12e38:	b003      	add	sp, #12
   12e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(flags & FLAGS_LEFT) {
   12e3e:	462c      	mov	r4, r5
   12e40:	e7f9      	b.n	12e36 <_ntoa_format+0x192>
        while(idx - start_idx < width) {
   12e42:	462c      	mov	r4, r5
    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
   12e44:	e7f7      	b.n	12e36 <_ntoa_format+0x192>
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   12e46:	428c      	cmp	r4, r1
   12e48:	f4bf af76 	bcs.w	12d38 <_ntoa_format+0x94>
   12e4c:	2c1f      	cmp	r4, #31
   12e4e:	f67f af53 	bls.w	12cf8 <_ntoa_format+0x54>
   12e52:	e771      	b.n	12d38 <_ntoa_format+0x94>
        else if((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   12e54:	2c1f      	cmp	r4, #31
   12e56:	d8b3      	bhi.n	12dc0 <_ntoa_format+0x11c>
            buf[len++] = 'X';
   12e58:	2358      	movs	r3, #88	; 0x58
   12e5a:	f809 3004 	strb.w	r3, [r9, r4]
   12e5e:	3401      	adds	r4, #1
   12e60:	e77b      	b.n	12d5a <_ntoa_format+0xb6>
	...

00012e64 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char * buffer, size_t idx, size_t maxlen, unsigned long value, bool negative,
                         unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
   12e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12e68:	b090      	sub	sp, #64	; 0x40
   12e6a:	9d16      	ldr	r5, [sp, #88]	; 0x58
   12e6c:	9e18      	ldr	r6, [sp, #96]	; 0x60
   12e6e:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;

    // no hash for 0 values
    if(!value) {
   12e72:	b92d      	cbnz	r5, 12e80 <_ntoa_long+0x1c>
        flags &= ~FLAGS_HASH;
   12e74:	f028 0410 	bic.w	r4, r8, #16
    }

    // write if precision != 0 and value is != 0
    if(!(flags & FLAGS_PRECISION) || value) {
   12e78:	f418 6f80 	tst.w	r8, #1024	; 0x400
   12e7c:	d12f      	bne.n	12ede <_ntoa_long+0x7a>
        flags &= ~FLAGS_HASH;
   12e7e:	46a0      	mov	r8, r4
   12e80:	f018 0f20 	tst.w	r8, #32
   12e84:	f10d 0e1f 	add.w	lr, sp, #31
        do {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   12e88:	f04f 0700 	mov.w	r7, #0
   12e8c:	bf14      	ite	ne
   12e8e:	f04f 0c37 	movne.w	ip, #55	; 0x37
   12e92:	f04f 0c57 	moveq.w	ip, #87	; 0x57
            const char digit = (char)(value % base);
   12e96:	fbb5 f4f6 	udiv	r4, r5, r6
   12e9a:	fb06 5414 	mls	r4, r6, r4, r5
   12e9e:	b2e4      	uxtb	r4, r4
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   12ea0:	3701      	adds	r7, #1
   12ea2:	2c09      	cmp	r4, #9
   12ea4:	bf94      	ite	ls
   12ea6:	3430      	addls	r4, #48	; 0x30
   12ea8:	4464      	addhi	r4, ip
   12eaa:	b2e4      	uxtb	r4, r4
   12eac:	f80e 4f01 	strb.w	r4, [lr, #1]!
            value /= base;
   12eb0:	fbb5 f5f6 	udiv	r5, r5, r6
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
   12eb4:	b10d      	cbz	r5, 12eba <_ntoa_long+0x56>
   12eb6:	2f20      	cmp	r7, #32
   12eb8:	d1ed      	bne.n	12e96 <_ntoa_long+0x32>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
   12eba:	f8cd 8018 	str.w	r8, [sp, #24]
   12ebe:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   12ec0:	9405      	str	r4, [sp, #20]
   12ec2:	9c19      	ldr	r4, [sp, #100]	; 0x64
   12ec4:	9404      	str	r4, [sp, #16]
   12ec6:	9603      	str	r6, [sp, #12]
   12ec8:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
   12ecc:	9402      	str	r4, [sp, #8]
   12ece:	9701      	str	r7, [sp, #4]
   12ed0:	ac08      	add	r4, sp, #32
   12ed2:	9400      	str	r4, [sp, #0]
   12ed4:	4c03      	ldr	r4, [pc, #12]	; (12ee4 <_ntoa_long+0x80>)
   12ed6:	47a0      	blx	r4
}
   12ed8:	b010      	add	sp, #64	; 0x40
   12eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        flags &= ~FLAGS_HASH;
   12ede:	46a0      	mov	r8, r4
    size_t len = 0U;
   12ee0:	2700      	movs	r7, #0
   12ee2:	e7ea      	b.n	12eba <_ntoa_long+0x56>
   12ee4:	00012ca5 	.word	0x00012ca5

00012ee8 <_ntoa_long_long>:

// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char * buffer, size_t idx, size_t maxlen, unsigned long long value,
                              bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
   12ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12eec:	b095      	sub	sp, #84	; 0x54
   12eee:	9008      	str	r0, [sp, #32]
   12ef0:	9109      	str	r1, [sp, #36]	; 0x24
   12ef2:	920a      	str	r2, [sp, #40]	; 0x28
   12ef4:	930b      	str	r3, [sp, #44]	; 0x2c
   12ef6:	e9dd 451e 	ldrd	r4, r5, [sp, #120]	; 0x78
   12efa:	f8dd 9088 	ldr.w	r9, [sp, #136]	; 0x88
   12efe:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;

    // no hash for 0 values
    if(!value) {
   12f02:	ea54 0305 	orrs.w	r3, r4, r5
   12f06:	d107      	bne.n	12f18 <_ntoa_long_long+0x30>
        flags &= ~FLAGS_HASH;
   12f08:	9b26      	ldr	r3, [sp, #152]	; 0x98
   12f0a:	f023 0310 	bic.w	r3, r3, #16
    }

    // write if precision != 0 and value is != 0
    if(!(flags & FLAGS_PRECISION) || value) {
   12f0e:	9a26      	ldr	r2, [sp, #152]	; 0x98
   12f10:	f412 6f80 	tst.w	r2, #1024	; 0x400
   12f14:	d13e      	bne.n	12f94 <_ntoa_long_long+0xac>
        flags &= ~FLAGS_HASH;
   12f16:	9326      	str	r3, [sp, #152]	; 0x98
   12f18:	9b26      	ldr	r3, [sp, #152]	; 0x98
   12f1a:	f013 0f20 	tst.w	r3, #32
   12f1e:	f10d 0a2f 	add.w	sl, sp, #47	; 0x2f
        do {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   12f22:	f04f 0600 	mov.w	r6, #0
            const char digit = (char)(value % base);
   12f26:	4f1d      	ldr	r7, [pc, #116]	; (12f9c <_ntoa_long_long+0xb4>)
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   12f28:	bf14      	ite	ne
   12f2a:	f04f 0b37 	movne.w	fp, #55	; 0x37
   12f2e:	f04f 0b57 	moveq.w	fp, #87	; 0x57
            const char digit = (char)(value % base);
   12f32:	464a      	mov	r2, r9
   12f34:	4643      	mov	r3, r8
   12f36:	4620      	mov	r0, r4
   12f38:	4629      	mov	r1, r5
   12f3a:	47b8      	blx	r7
   12f3c:	b2d2      	uxtb	r2, r2
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   12f3e:	3601      	adds	r6, #1
   12f40:	2a09      	cmp	r2, #9
   12f42:	bf94      	ite	ls
   12f44:	3230      	addls	r2, #48	; 0x30
   12f46:	445a      	addhi	r2, fp
   12f48:	b2d2      	uxtb	r2, r2
   12f4a:	f80a 2f01 	strb.w	r2, [sl, #1]!
            value /= base;
   12f4e:	464a      	mov	r2, r9
   12f50:	4643      	mov	r3, r8
   12f52:	4620      	mov	r0, r4
   12f54:	4629      	mov	r1, r5
   12f56:	47b8      	blx	r7
   12f58:	4604      	mov	r4, r0
   12f5a:	460d      	mov	r5, r1
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
   12f5c:	ea54 0305 	orrs.w	r3, r4, r5
   12f60:	d001      	beq.n	12f66 <_ntoa_long_long+0x7e>
   12f62:	2e20      	cmp	r6, #32
   12f64:	d1e5      	bne.n	12f32 <_ntoa_long_long+0x4a>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
   12f66:	9b26      	ldr	r3, [sp, #152]	; 0x98
   12f68:	9306      	str	r3, [sp, #24]
   12f6a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   12f6c:	9305      	str	r3, [sp, #20]
   12f6e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   12f70:	9304      	str	r3, [sp, #16]
   12f72:	f8cd 900c 	str.w	r9, [sp, #12]
   12f76:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
   12f7a:	9302      	str	r3, [sp, #8]
   12f7c:	9601      	str	r6, [sp, #4]
   12f7e:	ab0c      	add	r3, sp, #48	; 0x30
   12f80:	9300      	str	r3, [sp, #0]
   12f82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12f84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12f86:	9909      	ldr	r1, [sp, #36]	; 0x24
   12f88:	9808      	ldr	r0, [sp, #32]
   12f8a:	4c05      	ldr	r4, [pc, #20]	; (12fa0 <_ntoa_long_long+0xb8>)
   12f8c:	47a0      	blx	r4
}
   12f8e:	b015      	add	sp, #84	; 0x54
   12f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        flags &= ~FLAGS_HASH;
   12f94:	9326      	str	r3, [sp, #152]	; 0x98
    size_t len = 0U;
   12f96:	2600      	movs	r6, #0
   12f98:	e7e5      	b.n	12f66 <_ntoa_long_long+0x7e>
   12f9a:	bf00      	nop
   12f9c:	0001b179 	.word	0x0001b179
   12fa0:	00012ca5 	.word	0x00012ca5

00012fa4 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char * buffer, const size_t maxlen, const char * format, va_list va)
{
   12fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12fa8:	b091      	sub	sp, #68	; 0x44
   12faa:	920a      	str	r2, [sp, #40]	; 0x28
   12fac:	461c      	mov	r4, r3
   12fae:	9e1a      	ldr	r6, [sp, #104]	; 0x68
    unsigned int flags, width, precision, n;
    size_t idx = 0U;

    if(!buffer) {
   12fb0:	910b      	str	r1, [sp, #44]	; 0x2c
        // use null output function
        out = _out_null;
   12fb2:	4b93      	ldr	r3, [pc, #588]	; (13200 <_vsnprintf+0x25c>)
   12fb4:	2900      	cmp	r1, #0
   12fb6:	bf14      	ite	ne
   12fb8:	4681      	movne	r9, r0
   12fba:	4699      	moveq	r9, r3
                    format++;
                    break;
                }

            case '%' :
                out('%', buffer, idx++, maxlen);
   12fbc:	f04f 0b00 	mov.w	fp, #0
    while(*format) {
   12fc0:	7820      	ldrb	r0, [r4, #0]
   12fc2:	2800      	cmp	r0, #0
   12fc4:	f000 826a 	beq.w	1349c <_vsnprintf+0x4f8>
        if(*format != '%') {
   12fc8:	2825      	cmp	r0, #37	; 0x25
   12fca:	d008      	beq.n	12fde <_vsnprintf+0x3a>
            out(*format, buffer, idx++, maxlen);
   12fcc:	f10b 0501 	add.w	r5, fp, #1
   12fd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12fd2:	465a      	mov	r2, fp
   12fd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12fd6:	47c8      	blx	r9
            format++;
   12fd8:	3401      	adds	r4, #1
            out(*format, buffer, idx++, maxlen);
   12fda:	46ab      	mov	fp, r5
            continue;
   12fdc:	e7f0      	b.n	12fc0 <_vsnprintf+0x1c>
            format++;
   12fde:	1c62      	adds	r2, r4, #1
        flags = 0U;
   12fe0:	2100      	movs	r1, #0
   12fe2:	e001      	b.n	12fe8 <_vsnprintf+0x44>
                    flags |= FLAGS_ZEROPAD;
   12fe4:	f041 0101 	orr.w	r1, r1, #1
   12fe8:	4614      	mov	r4, r2
   12fea:	3201      	adds	r2, #1
            switch(*format) {
   12fec:	7823      	ldrb	r3, [r4, #0]
   12fee:	3b20      	subs	r3, #32
   12ff0:	2b10      	cmp	r3, #16
   12ff2:	d831      	bhi.n	13058 <_vsnprintf+0xb4>
   12ff4:	a001      	add	r0, pc, #4	; (adr r0, 12ffc <_vsnprintf+0x58>)
   12ff6:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   12ffa:	bf00      	nop
   12ffc:	0001304d 	.word	0x0001304d
   13000:	00013059 	.word	0x00013059
   13004:	00013059 	.word	0x00013059
   13008:	00013053 	.word	0x00013053
   1300c:	00013059 	.word	0x00013059
   13010:	00013059 	.word	0x00013059
   13014:	00013059 	.word	0x00013059
   13018:	00013059 	.word	0x00013059
   1301c:	00013059 	.word	0x00013059
   13020:	00013059 	.word	0x00013059
   13024:	00013059 	.word	0x00013059
   13028:	00013047 	.word	0x00013047
   1302c:	00013059 	.word	0x00013059
   13030:	00013041 	.word	0x00013041
   13034:	00013059 	.word	0x00013059
   13038:	00013059 	.word	0x00013059
   1303c:	00012fe5 	.word	0x00012fe5
                    flags |= FLAGS_LEFT;
   13040:	f041 0102 	orr.w	r1, r1, #2
                    break;
   13044:	e7d0      	b.n	12fe8 <_vsnprintf+0x44>
                    flags |= FLAGS_PLUS;
   13046:	f041 0104 	orr.w	r1, r1, #4
                    break;
   1304a:	e7cd      	b.n	12fe8 <_vsnprintf+0x44>
                    flags |= FLAGS_SPACE;
   1304c:	f041 0108 	orr.w	r1, r1, #8
                    break;
   13050:	e7ca      	b.n	12fe8 <_vsnprintf+0x44>
                    flags |= FLAGS_HASH;
   13052:	f041 0110 	orr.w	r1, r1, #16
                    break;
   13056:	e7c7      	b.n	12fe8 <_vsnprintf+0x44>
        if(_is_digit(*format)) {
   13058:	7823      	ldrb	r3, [r4, #0]
    return (ch >= '0') && (ch <= '9');
   1305a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
        if(_is_digit(*format)) {
   1305e:	b2d2      	uxtb	r2, r2
   13060:	2a09      	cmp	r2, #9
   13062:	d916      	bls.n	13092 <_vsnprintf+0xee>
        else if(*format == '*') {
   13064:	2b2a      	cmp	r3, #42	; 0x2a
   13066:	d022      	beq.n	130ae <_vsnprintf+0x10a>
        width = 0U;
   13068:	2500      	movs	r5, #0
        if(*format == '.') {
   1306a:	7823      	ldrb	r3, [r4, #0]
   1306c:	2b2e      	cmp	r3, #46	; 0x2e
   1306e:	d028      	beq.n	130c2 <_vsnprintf+0x11e>
        precision = 0U;
   13070:	2700      	movs	r7, #0
        switch(*format) {
   13072:	7823      	ldrb	r3, [r4, #0]
   13074:	3b68      	subs	r3, #104	; 0x68
   13076:	2b12      	cmp	r3, #18
   13078:	d84f      	bhi.n	1311a <_vsnprintf+0x176>
   1307a:	e8df f003 	tbb	[pc, r3]
   1307e:	4eaa      	.short	0x4eaa
   13080:	4e454eb8 	.word	0x4e454eb8
   13084:	4e4e4e4e 	.word	0x4e4e4e4e
   13088:	4eb44e4e 	.word	0x4eb44e4e
   1308c:	4e4e4e4e 	.word	0x4e4e4e4e
   13090:	bc          	.byte	0xbc
   13091:	00          	.byte	0x00
   13092:	2500      	movs	r5, #0
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
   13094:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   13098:	eb03 0545 	add.w	r5, r3, r5, lsl #1
   1309c:	3d30      	subs	r5, #48	; 0x30
    while(_is_digit(**str)) {
   1309e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    return (ch >= '0') && (ch <= '9');
   130a2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    while(_is_digit(**str)) {
   130a6:	b2d2      	uxtb	r2, r2
   130a8:	2a09      	cmp	r2, #9
   130aa:	d9f3      	bls.n	13094 <_vsnprintf+0xf0>
   130ac:	e7dd      	b.n	1306a <_vsnprintf+0xc6>
            const int w = va_arg(va, int);
   130ae:	1d33      	adds	r3, r6, #4
   130b0:	6835      	ldr	r5, [r6, #0]
            if(w < 0) {
   130b2:	2d00      	cmp	r5, #0
                flags |= FLAGS_LEFT;    // reverse padding
   130b4:	bfbc      	itt	lt
   130b6:	f041 0102 	orrlt.w	r1, r1, #2
                width = (unsigned int) - w;
   130ba:	426d      	neglt	r5, r5
            format++;
   130bc:	3401      	adds	r4, #1
            const int w = va_arg(va, int);
   130be:	461e      	mov	r6, r3
   130c0:	e7d3      	b.n	1306a <_vsnprintf+0xc6>
            flags |= FLAGS_PRECISION;
   130c2:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
            format++;
   130c6:	1c60      	adds	r0, r4, #1
            if(_is_digit(*format)) {
   130c8:	7863      	ldrb	r3, [r4, #1]
    return (ch >= '0') && (ch <= '9');
   130ca:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
            if(_is_digit(*format)) {
   130ce:	b2d2      	uxtb	r2, r2
   130d0:	2a09      	cmp	r2, #9
   130d2:	d904      	bls.n	130de <_vsnprintf+0x13a>
            else if(*format == '*') {
   130d4:	2b2a      	cmp	r3, #42	; 0x2a
   130d6:	d011      	beq.n	130fc <_vsnprintf+0x158>
            format++;
   130d8:	4604      	mov	r4, r0
        precision = 0U;
   130da:	2700      	movs	r7, #0
   130dc:	e7c9      	b.n	13072 <_vsnprintf+0xce>
   130de:	2700      	movs	r7, #0
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
   130e0:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   130e4:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   130e8:	3f30      	subs	r7, #48	; 0x30
    while(_is_digit(**str)) {
   130ea:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    return (ch >= '0') && (ch <= '9');
   130ee:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    while(_is_digit(**str)) {
   130f2:	b2d2      	uxtb	r2, r2
   130f4:	2a09      	cmp	r2, #9
   130f6:	d9f3      	bls.n	130e0 <_vsnprintf+0x13c>
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
   130f8:	4604      	mov	r4, r0
   130fa:	e7ba      	b.n	13072 <_vsnprintf+0xce>
                precision = prec > 0 ? (unsigned int)prec : 0U;
   130fc:	6837      	ldr	r7, [r6, #0]
   130fe:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
                format++;
   13102:	3402      	adds	r4, #2
                const int prec = (int)va_arg(va, int);
   13104:	3604      	adds	r6, #4
   13106:	e7b4      	b.n	13072 <_vsnprintf+0xce>
                if(*format == 'l') {
   13108:	7863      	ldrb	r3, [r4, #1]
   1310a:	2b6c      	cmp	r3, #108	; 0x6c
                flags |= FLAGS_LONG;
   1310c:	bf19      	ittee	ne
   1310e:	f441 7180 	orrne.w	r1, r1, #256	; 0x100
                format++;
   13112:	3401      	addne	r4, #1
                    flags |= FLAGS_LONG_LONG;
   13114:	f441 7140 	orreq.w	r1, r1, #768	; 0x300
                    format++;
   13118:	3402      	addeq	r4, #2
        switch(*format) {
   1311a:	7820      	ldrb	r0, [r4, #0]
   1311c:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   13120:	2b53      	cmp	r3, #83	; 0x53
   13122:	f200 81b2 	bhi.w	1348a <_vsnprintf+0x4e6>
   13126:	e8df f013 	tbh	[pc, r3, lsl #1]
   1312a:	01a6      	.short	0x01a6
   1312c:	01b001b0 	.word	0x01b001b0
   13130:	01b001b0 	.word	0x01b001b0
   13134:	01b001b0 	.word	0x01b001b0
   13138:	01b001b0 	.word	0x01b001b0
   1313c:	01b001b0 	.word	0x01b001b0
   13140:	01b001b0 	.word	0x01b001b0
   13144:	01b001b0 	.word	0x01b001b0
   13148:	01b001b0 	.word	0x01b001b0
   1314c:	01b001b0 	.word	0x01b001b0
   13150:	01b001b0 	.word	0x01b001b0
   13154:	01b001b0 	.word	0x01b001b0
   13158:	01b001b0 	.word	0x01b001b0
   1315c:	01b001b0 	.word	0x01b001b0
   13160:	01b001b0 	.word	0x01b001b0
   13164:	01b001b0 	.word	0x01b001b0
   13168:	01b001b0 	.word	0x01b001b0
   1316c:	01b001b0 	.word	0x01b001b0
   13170:	01b001b0 	.word	0x01b001b0
   13174:	01b001b0 	.word	0x01b001b0
   13178:	01b001b0 	.word	0x01b001b0
   1317c:	01b001b0 	.word	0x01b001b0
   13180:	01b001b0 	.word	0x01b001b0
   13184:	01b001b0 	.word	0x01b001b0
   13188:	01b001b0 	.word	0x01b001b0
   1318c:	01b001b0 	.word	0x01b001b0
   13190:	01b0006d 	.word	0x01b0006d
   13194:	01b001b0 	.word	0x01b001b0
   13198:	01b001b0 	.word	0x01b001b0
   1319c:	01b001b0 	.word	0x01b001b0
   131a0:	01b001b0 	.word	0x01b001b0
   131a4:	0114006d 	.word	0x0114006d
   131a8:	01b0006d 	.word	0x01b0006d
   131ac:	01b001b0 	.word	0x01b001b0
   131b0:	006d01b0 	.word	0x006d01b0
   131b4:	01b001b0 	.word	0x01b001b0
   131b8:	01b001b0 	.word	0x01b001b0
   131bc:	006d01b0 	.word	0x006d01b0
   131c0:	01b0018f 	.word	0x01b0018f
   131c4:	013701b0 	.word	0x013701b0
   131c8:	006d01b0 	.word	0x006d01b0
   131cc:	01b001b0 	.word	0x01b001b0
   131d0:	006d      	.short	0x006d
                if(*format == 'h') {
   131d2:	7863      	ldrb	r3, [r4, #1]
   131d4:	2b68      	cmp	r3, #104	; 0x68
                flags |= FLAGS_SHORT;
   131d6:	bf19      	ittee	ne
   131d8:	f041 0180 	orrne.w	r1, r1, #128	; 0x80
                format++;
   131dc:	3401      	addne	r4, #1
                    flags |= FLAGS_CHAR;
   131de:	f041 01c0 	orreq.w	r1, r1, #192	; 0xc0
                    format++;
   131e2:	3402      	addeq	r4, #2
   131e4:	e799      	b.n	1311a <_vsnprintf+0x176>
                flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   131e6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
                format++;
   131ea:	3401      	adds	r4, #1
                break;
   131ec:	e795      	b.n	1311a <_vsnprintf+0x176>
                flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   131ee:	f441 7100 	orr.w	r1, r1, #512	; 0x200
                format++;
   131f2:	3401      	adds	r4, #1
                break;
   131f4:	e791      	b.n	1311a <_vsnprintf+0x176>
                flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   131f6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
                format++;
   131fa:	3401      	adds	r4, #1
                break;
   131fc:	e78d      	b.n	1311a <_vsnprintf+0x176>
   131fe:	bf00      	nop
   13200:	00012ca3 	.word	0x00012ca3
                    if(*format == 'x' || *format == 'X') {
   13204:	2878      	cmp	r0, #120	; 0x78
   13206:	f000 81d5 	beq.w	135b4 <_vsnprintf+0x610>
   1320a:	2858      	cmp	r0, #88	; 0x58
   1320c:	f000 8154 	beq.w	134b8 <_vsnprintf+0x514>
                    else if(*format == 'o') {
   13210:	286f      	cmp	r0, #111	; 0x6f
   13212:	f000 81d1 	beq.w	135b8 <_vsnprintf+0x614>
                    else if(*format == 'b') {
   13216:	2862      	cmp	r0, #98	; 0x62
   13218:	f000 81d0 	beq.w	135bc <_vsnprintf+0x618>
                        flags &= ~FLAGS_HASH;   // no hash for dec format
   1321c:	f021 0310 	bic.w	r3, r1, #16
                    if((*format != 'i') && (*format != 'd')) {
   13220:	2869      	cmp	r0, #105	; 0x69
   13222:	d126      	bne.n	13272 <_vsnprintf+0x2ce>
                    if(flags & FLAGS_PRECISION) {
   13224:	f411 6f80 	tst.w	r1, #1024	; 0x400
   13228:	f040 81c0 	bne.w	135ac <_vsnprintf+0x608>
                        base = 10U;
   1322c:	220a      	movs	r2, #10
                        if(flags & FLAGS_LONG_LONG) {
   1322e:	f413 7f00 	tst.w	r3, #512	; 0x200
   13232:	d124      	bne.n	1327e <_vsnprintf+0x2da>
                        else if(flags & FLAGS_LONG) {
   13234:	f413 7f80 	tst.w	r3, #256	; 0x100
   13238:	d144      	bne.n	132c4 <_vsnprintf+0x320>
                            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va,
   1323a:	f013 0f40 	tst.w	r3, #64	; 0x40
   1323e:	d157      	bne.n	132f0 <_vsnprintf+0x34c>
                                                                                                                                       int) : va_arg(va, int);
   13240:	f013 0f80 	tst.w	r3, #128	; 0x80
   13244:	bf14      	ite	ne
   13246:	f9b6 1000 	ldrshne.w	r1, [r6]
   1324a:	6831      	ldreq	r1, [r6, #0]
   1324c:	3604      	adds	r6, #4
                            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision,
   1324e:	9305      	str	r3, [sp, #20]
   13250:	9504      	str	r5, [sp, #16]
   13252:	9703      	str	r7, [sp, #12]
   13254:	9202      	str	r2, [sp, #8]
   13256:	0fcb      	lsrs	r3, r1, #31
   13258:	9301      	str	r3, [sp, #4]
   1325a:	2900      	cmp	r1, #0
   1325c:	bfb8      	it	lt
   1325e:	4249      	neglt	r1, r1
   13260:	9100      	str	r1, [sp, #0]
   13262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13264:	465a      	mov	r2, fp
   13266:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13268:	4648      	mov	r0, r9
   1326a:	4dac      	ldr	r5, [pc, #688]	; (1351c <_vsnprintf+0x578>)
   1326c:	47a8      	blx	r5
   1326e:	4683      	mov	fp, r0
   13270:	e152      	b.n	13518 <_vsnprintf+0x574>
                    if((*format != 'i') && (*format != 'd')) {
   13272:	2864      	cmp	r0, #100	; 0x64
   13274:	f000 8156 	beq.w	13524 <_vsnprintf+0x580>
                        flags &= ~FLAGS_HASH;   // no hash for dec format
   13278:	4619      	mov	r1, r3
                        base = 10U;
   1327a:	220a      	movs	r2, #10
   1327c:	e11f      	b.n	134be <_vsnprintf+0x51a>
                            const long long value = va_arg(va, long long);
   1327e:	1df1      	adds	r1, r6, #7
   13280:	f021 0107 	bic.w	r1, r1, #7
   13284:	f101 0608 	add.w	r6, r1, #8
   13288:	6808      	ldr	r0, [r1, #0]
   1328a:	6849      	ldr	r1, [r1, #4]
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base,
   1328c:	9308      	str	r3, [sp, #32]
   1328e:	9507      	str	r5, [sp, #28]
   13290:	9706      	str	r7, [sp, #24]
   13292:	9204      	str	r2, [sp, #16]
   13294:	2300      	movs	r3, #0
   13296:	9305      	str	r3, [sp, #20]
   13298:	0fcb      	lsrs	r3, r1, #31
   1329a:	9302      	str	r3, [sp, #8]
   1329c:	4602      	mov	r2, r0
   1329e:	460b      	mov	r3, r1
   132a0:	2800      	cmp	r0, #0
   132a2:	f173 0100 	sbcs.w	r1, r3, #0
   132a6:	db09      	blt.n	132bc <_vsnprintf+0x318>
   132a8:	e9cd 2300 	strd	r2, r3, [sp]
   132ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   132ae:	465a      	mov	r2, fp
   132b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   132b2:	4648      	mov	r0, r9
   132b4:	4d9a      	ldr	r5, [pc, #616]	; (13520 <_vsnprintf+0x57c>)
   132b6:	47a8      	blx	r5
   132b8:	4683      	mov	fp, r0
   132ba:	e12d      	b.n	13518 <_vsnprintf+0x574>
   132bc:	4242      	negs	r2, r0
   132be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   132c2:	e7f1      	b.n	132a8 <_vsnprintf+0x304>
                            const long value = va_arg(va, long);
   132c4:	f106 0804 	add.w	r8, r6, #4
   132c8:	6831      	ldr	r1, [r6, #0]
                            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision,
   132ca:	9305      	str	r3, [sp, #20]
   132cc:	9504      	str	r5, [sp, #16]
   132ce:	9703      	str	r7, [sp, #12]
   132d0:	9202      	str	r2, [sp, #8]
   132d2:	0fcb      	lsrs	r3, r1, #31
   132d4:	9301      	str	r3, [sp, #4]
   132d6:	2900      	cmp	r1, #0
   132d8:	bfb8      	it	lt
   132da:	4249      	neglt	r1, r1
   132dc:	9100      	str	r1, [sp, #0]
   132de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   132e0:	465a      	mov	r2, fp
   132e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   132e4:	4648      	mov	r0, r9
   132e6:	4d8d      	ldr	r5, [pc, #564]	; (1351c <_vsnprintf+0x578>)
   132e8:	47a8      	blx	r5
   132ea:	4683      	mov	fp, r0
                            const long value = va_arg(va, long);
   132ec:	4646      	mov	r6, r8
   132ee:	e113      	b.n	13518 <_vsnprintf+0x574>
   132f0:	7831      	ldrb	r1, [r6, #0]
                            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va,
   132f2:	3604      	adds	r6, #4
   132f4:	e7ab      	b.n	1324e <_vsnprintf+0x2aa>
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
   132f6:	1df1      	adds	r1, r6, #7
   132f8:	f021 0107 	bic.w	r1, r1, #7
   132fc:	f101 0608 	add.w	r6, r1, #8
   13300:	9308      	str	r3, [sp, #32]
   13302:	9507      	str	r5, [sp, #28]
   13304:	9706      	str	r7, [sp, #24]
   13306:	2300      	movs	r3, #0
   13308:	9204      	str	r2, [sp, #16]
   1330a:	9305      	str	r3, [sp, #20]
   1330c:	9302      	str	r3, [sp, #8]
   1330e:	e9d1 2300 	ldrd	r2, r3, [r1]
   13312:	e9cd 2300 	strd	r2, r3, [sp]
   13316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13318:	465a      	mov	r2, fp
   1331a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1331c:	4648      	mov	r0, r9
   1331e:	4d80      	ldr	r5, [pc, #512]	; (13520 <_vsnprintf+0x57c>)
   13320:	47a8      	blx	r5
   13322:	4683      	mov	fp, r0
   13324:	e0f8      	b.n	13518 <_vsnprintf+0x574>
                            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
   13326:	f106 0804 	add.w	r8, r6, #4
   1332a:	9305      	str	r3, [sp, #20]
   1332c:	9504      	str	r5, [sp, #16]
   1332e:	9703      	str	r7, [sp, #12]
   13330:	9202      	str	r2, [sp, #8]
   13332:	2300      	movs	r3, #0
   13334:	9301      	str	r3, [sp, #4]
   13336:	6833      	ldr	r3, [r6, #0]
   13338:	9300      	str	r3, [sp, #0]
   1333a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1333c:	465a      	mov	r2, fp
   1333e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13340:	4648      	mov	r0, r9
   13342:	4d76      	ldr	r5, [pc, #472]	; (1351c <_vsnprintf+0x578>)
   13344:	47a8      	blx	r5
   13346:	4683      	mov	fp, r0
   13348:	4646      	mov	r6, r8
   1334a:	e0e5      	b.n	13518 <_vsnprintf+0x574>
   1334c:	7831      	ldrb	r1, [r6, #0]
                            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va,
   1334e:	3604      	adds	r6, #4
   13350:	e0d4      	b.n	134fc <_vsnprintf+0x558>
                    if(!(flags & FLAGS_LEFT)) {
   13352:	f011 0f02 	tst.w	r1, #2
   13356:	f040 80ea 	bne.w	1352e <_vsnprintf+0x58a>
                        while(l++ < width) {
   1335a:	2d01      	cmp	r5, #1
   1335c:	f240 8103 	bls.w	13566 <_vsnprintf+0x5c2>
   13360:	f10b 37ff 	add.w	r7, fp, #4294967295
   13364:	442f      	add	r7, r5
                            out(' ', buffer, idx++, maxlen);
   13366:	f04f 0820 	mov.w	r8, #32
   1336a:	465a      	mov	r2, fp
   1336c:	1c55      	adds	r5, r2, #1
   1336e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13370:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13372:	4640      	mov	r0, r8
   13374:	47c8      	blx	r9
   13376:	462a      	mov	r2, r5
                        while(l++ < width) {
   13378:	42bd      	cmp	r5, r7
   1337a:	d1f7      	bne.n	1336c <_vsnprintf+0x3c8>
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
   1337c:	1d37      	adds	r7, r6, #4
   1337e:	f105 0b01 	add.w	fp, r5, #1
   13382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13384:	462a      	mov	r2, r5
   13386:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13388:	7830      	ldrb	r0, [r6, #0]
   1338a:	47c8      	blx	r9
   1338c:	463e      	mov	r6, r7
                    format++;
   1338e:	3401      	adds	r4, #1
                    break;
   13390:	e616      	b.n	12fc0 <_vsnprintf+0x1c>
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
   13392:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   13394:	46bb      	mov	fp, r7
   13396:	e7fa      	b.n	1338e <_vsnprintf+0x3ea>
                    const char * p = va_arg(va, char *);
   13398:	1d33      	adds	r3, r6, #4
   1339a:	930e      	str	r3, [sp, #56]	; 0x38
   1339c:	6833      	ldr	r3, [r6, #0]
   1339e:	461a      	mov	r2, r3
   133a0:	930c      	str	r3, [sp, #48]	; 0x30
                    unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
   133a2:	2f00      	cmp	r7, #0
   133a4:	bf14      	ite	ne
   133a6:	463b      	movne	r3, r7
   133a8:	f04f 33ff 	moveq.w	r3, #4294967295
    for(s = str; *s && maxsize--; ++s);
   133ac:	7810      	ldrb	r0, [r2, #0]
   133ae:	2800      	cmp	r0, #0
   133b0:	f000 80db 	beq.w	1356a <_vsnprintf+0x5c6>
   133b4:	f812 6f01 	ldrb.w	r6, [r2, #1]!
   133b8:	b10e      	cbz	r6, 133be <_vsnprintf+0x41a>
   133ba:	3b01      	subs	r3, #1
   133bc:	d1fa      	bne.n	133b4 <_vsnprintf+0x410>
    return (unsigned int)(s - str);
   133be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   133c0:	1ad3      	subs	r3, r2, r3
   133c2:	930d      	str	r3, [sp, #52]	; 0x34
                    if(flags & FLAGS_PRECISION) {
   133c4:	f411 6a80 	ands.w	sl, r1, #1024	; 0x400
   133c8:	d003      	beq.n	133d2 <_vsnprintf+0x42e>
                        l = (l < precision ? l : precision);
   133ca:	42bb      	cmp	r3, r7
   133cc:	bf28      	it	cs
   133ce:	463b      	movcs	r3, r7
   133d0:	930d      	str	r3, [sp, #52]	; 0x34
                    if(!(flags & FLAGS_LEFT)) {
   133d2:	f011 0302 	ands.w	r3, r1, #2
   133d6:	930f      	str	r3, [sp, #60]	; 0x3c
   133d8:	f040 80ce 	bne.w	13578 <_vsnprintf+0x5d4>
                        while(l++ < width) {
   133dc:	990d      	ldr	r1, [sp, #52]	; 0x34
   133de:	460b      	mov	r3, r1
   133e0:	3301      	adds	r3, #1
   133e2:	428d      	cmp	r5, r1
   133e4:	f240 80c3 	bls.w	1356e <_vsnprintf+0x5ca>
   133e8:	eb05 080b 	add.w	r8, r5, fp
   133ec:	eba8 0801 	sub.w	r8, r8, r1
                            out(' ', buffer, idx++, maxlen);
   133f0:	465a      	mov	r2, fp
   133f2:	1c56      	adds	r6, r2, #1
   133f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   133f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   133f8:	2020      	movs	r0, #32
   133fa:	47c8      	blx	r9
   133fc:	4632      	mov	r2, r6
                        while(l++ < width) {
   133fe:	4546      	cmp	r6, r8
   13400:	d1f7      	bne.n	133f2 <_vsnprintf+0x44e>
   13402:	1c6b      	adds	r3, r5, #1
   13404:	930d      	str	r3, [sp, #52]	; 0x34
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
   13406:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13408:	7818      	ldrb	r0, [r3, #0]
   1340a:	2800      	cmp	r0, #0
   1340c:	f000 80b2 	beq.w	13574 <_vsnprintf+0x5d0>
   13410:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   13414:	4632      	mov	r2, r6
   13416:	4656      	mov	r6, sl
   13418:	e009      	b.n	1342e <_vsnprintf+0x48a>
   1341a:	461f      	mov	r7, r3
                        out(*(p++), buffer, idx++, maxlen);
   1341c:	f102 0b01 	add.w	fp, r2, #1
   13420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13422:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13424:	47c8      	blx	r9
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
   13426:	f818 0f01 	ldrb.w	r0, [r8, #1]!
   1342a:	b130      	cbz	r0, 1343a <_vsnprintf+0x496>
                        out(*(p++), buffer, idx++, maxlen);
   1342c:	465a      	mov	r2, fp
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
   1342e:	2e00      	cmp	r6, #0
   13430:	d0f4      	beq.n	1341c <_vsnprintf+0x478>
   13432:	1e7b      	subs	r3, r7, #1
   13434:	2f00      	cmp	r7, #0
   13436:	d1f0      	bne.n	1341a <_vsnprintf+0x476>
   13438:	4693      	mov	fp, r2
                    if(flags & FLAGS_LEFT) {
   1343a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1343c:	2b00      	cmp	r3, #0
   1343e:	f040 809f 	bne.w	13580 <_vsnprintf+0x5dc>
                    format++;
   13442:	3401      	adds	r4, #1
                    const char * p = va_arg(va, char *);
   13444:	9e0e      	ldr	r6, [sp, #56]	; 0x38
                    break;
   13446:	e5bb      	b.n	12fc0 <_vsnprintf+0x1c>
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void *)), false, 16U, precision, width,
   13448:	1d35      	adds	r5, r6, #4
                    flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
   1344a:	f041 0121 	orr.w	r1, r1, #33	; 0x21
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void *)), false, 16U, precision, width,
   1344e:	9105      	str	r1, [sp, #20]
   13450:	2308      	movs	r3, #8
   13452:	9304      	str	r3, [sp, #16]
   13454:	9703      	str	r7, [sp, #12]
   13456:	2310      	movs	r3, #16
   13458:	9302      	str	r3, [sp, #8]
   1345a:	2300      	movs	r3, #0
   1345c:	9301      	str	r3, [sp, #4]
   1345e:	6833      	ldr	r3, [r6, #0]
   13460:	9300      	str	r3, [sp, #0]
   13462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13464:	465a      	mov	r2, fp
   13466:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13468:	4648      	mov	r0, r9
   1346a:	4e2c      	ldr	r6, [pc, #176]	; (1351c <_vsnprintf+0x578>)
   1346c:	47b0      	blx	r6
   1346e:	4683      	mov	fp, r0
                    format++;
   13470:	3401      	adds	r4, #1
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void *)), false, 16U, precision, width,
   13472:	462e      	mov	r6, r5
                    break;
   13474:	e5a4      	b.n	12fc0 <_vsnprintf+0x1c>
                out('%', buffer, idx++, maxlen);
   13476:	f10b 0501 	add.w	r5, fp, #1
   1347a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1347c:	465a      	mov	r2, fp
   1347e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13480:	2025      	movs	r0, #37	; 0x25
   13482:	47c8      	blx	r9
                format++;
   13484:	3401      	adds	r4, #1
                out('%', buffer, idx++, maxlen);
   13486:	46ab      	mov	fp, r5
                break;
   13488:	e59a      	b.n	12fc0 <_vsnprintf+0x1c>

            default :
                out(*format, buffer, idx++, maxlen);
   1348a:	f10b 0501 	add.w	r5, fp, #1
   1348e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13490:	465a      	mov	r2, fp
   13492:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13494:	47c8      	blx	r9
                format++;
   13496:	3401      	adds	r4, #1
                out(*format, buffer, idx++, maxlen);
   13498:	46ab      	mov	fp, r5
                break;
   1349a:	e591      	b.n	12fc0 <_vsnprintf+0x1c>
        }
    }

    // termination
    out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
   1349c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1349e:	4593      	cmp	fp, r2
   134a0:	bf2c      	ite	cs
   134a2:	f102 32ff 	addcs.w	r2, r2, #4294967295
   134a6:	465a      	movcc	r2, fp
   134a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   134aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
   134ac:	2000      	movs	r0, #0
   134ae:	47c8      	blx	r9

    // return written chars without terminating \0
    return (int)idx;
}
   134b0:	4658      	mov	r0, fp
   134b2:	b011      	add	sp, #68	; 0x44
   134b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                        flags |= FLAGS_UPPERCASE;
   134b8:	f041 0120 	orr.w	r1, r1, #32
                        base = 16U;
   134bc:	2210      	movs	r2, #16
                        flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
   134be:	f021 030c 	bic.w	r3, r1, #12
                    if(flags & FLAGS_PRECISION) {
   134c2:	f411 6f80 	tst.w	r1, #1024	; 0x400
   134c6:	d007      	beq.n	134d8 <_vsnprintf+0x534>
                        flags &= ~FLAGS_ZEROPAD;
   134c8:	f021 030d 	bic.w	r3, r1, #13
                    if((*format == 'i') || (*format == 'd')) {
   134cc:	2869      	cmp	r0, #105	; 0x69
   134ce:	f43f aeae 	beq.w	1322e <_vsnprintf+0x28a>
   134d2:	2864      	cmp	r0, #100	; 0x64
   134d4:	f43f aeab 	beq.w	1322e <_vsnprintf+0x28a>
                        if(flags & FLAGS_LONG_LONG) {
   134d8:	f413 7f00 	tst.w	r3, #512	; 0x200
   134dc:	f47f af0b 	bne.w	132f6 <_vsnprintf+0x352>
                        else if(flags & FLAGS_LONG) {
   134e0:	f413 7f80 	tst.w	r3, #256	; 0x100
   134e4:	f47f af1f 	bne.w	13326 <_vsnprintf+0x382>
                                                                                                    unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
   134e8:	f013 0f40 	tst.w	r3, #64	; 0x40
   134ec:	f47f af2e 	bne.w	1334c <_vsnprintf+0x3a8>
   134f0:	f013 0f80 	tst.w	r3, #128	; 0x80
   134f4:	bf14      	ite	ne
   134f6:	8831      	ldrhne	r1, [r6, #0]
   134f8:	6831      	ldreq	r1, [r6, #0]
   134fa:	3604      	adds	r6, #4
                            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
   134fc:	9305      	str	r3, [sp, #20]
   134fe:	9504      	str	r5, [sp, #16]
   13500:	9703      	str	r7, [sp, #12]
   13502:	9202      	str	r2, [sp, #8]
   13504:	2300      	movs	r3, #0
   13506:	9301      	str	r3, [sp, #4]
   13508:	9100      	str	r1, [sp, #0]
   1350a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1350c:	465a      	mov	r2, fp
   1350e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13510:	4648      	mov	r0, r9
   13512:	4d02      	ldr	r5, [pc, #8]	; (1351c <_vsnprintf+0x578>)
   13514:	47a8      	blx	r5
   13516:	4683      	mov	fp, r0
                    format++;
   13518:	3401      	adds	r4, #1
                    break;
   1351a:	e551      	b.n	12fc0 <_vsnprintf+0x1c>
   1351c:	00012e65 	.word	0x00012e65
   13520:	00012ee9 	.word	0x00012ee9
                    if(flags & FLAGS_PRECISION) {
   13524:	f411 6f80 	tst.w	r1, #1024	; 0x400
   13528:	d13c      	bne.n	135a4 <_vsnprintf+0x600>
                        base = 10U;
   1352a:	220a      	movs	r2, #10
   1352c:	e67f      	b.n	1322e <_vsnprintf+0x28a>
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
   1352e:	1d33      	adds	r3, r6, #4
   13530:	930c      	str	r3, [sp, #48]	; 0x30
   13532:	f10b 0701 	add.w	r7, fp, #1
   13536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13538:	465a      	mov	r2, fp
   1353a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1353c:	7830      	ldrb	r0, [r6, #0]
   1353e:	47c8      	blx	r9
                        while(l++ < width) {
   13540:	2d01      	cmp	r5, #1
   13542:	f67f af26 	bls.w	13392 <_vsnprintf+0x3ee>
   13546:	eb05 0a0b 	add.w	sl, r5, fp
                            out(' ', buffer, idx++, maxlen);
   1354a:	f04f 0820 	mov.w	r8, #32
   1354e:	463a      	mov	r2, r7
   13550:	1c56      	adds	r6, r2, #1
   13552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13554:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13556:	4640      	mov	r0, r8
   13558:	47c8      	blx	r9
   1355a:	4632      	mov	r2, r6
                        while(l++ < width) {
   1355c:	45b2      	cmp	sl, r6
   1355e:	d1f7      	bne.n	13550 <_vsnprintf+0x5ac>
   13560:	44ab      	add	fp, r5
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
   13562:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   13564:	e713      	b.n	1338e <_vsnprintf+0x3ea>
                        while(l++ < width) {
   13566:	465d      	mov	r5, fp
   13568:	e708      	b.n	1337c <_vsnprintf+0x3d8>
    for(s = str; *s && maxsize--; ++s);
   1356a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1356c:	e727      	b.n	133be <_vsnprintf+0x41a>
                        while(l++ < width) {
   1356e:	930d      	str	r3, [sp, #52]	; 0x34
   13570:	465e      	mov	r6, fp
   13572:	e748      	b.n	13406 <_vsnprintf+0x462>
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
   13574:	46b3      	mov	fp, r6
   13576:	e764      	b.n	13442 <_vsnprintf+0x49e>
   13578:	465e      	mov	r6, fp
   1357a:	2800      	cmp	r0, #0
   1357c:	f47f af48 	bne.w	13410 <_vsnprintf+0x46c>
                        while(l++ < width) {
   13580:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   13582:	4295      	cmp	r5, r2
   13584:	f67f af5d 	bls.w	13442 <_vsnprintf+0x49e>
   13588:	445d      	add	r5, fp
   1358a:	1aad      	subs	r5, r5, r2
   1358c:	465a      	mov	r2, fp
                            out(' ', buffer, idx++, maxlen);
   1358e:	2620      	movs	r6, #32
   13590:	f102 0b01 	add.w	fp, r2, #1
   13594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13596:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13598:	4630      	mov	r0, r6
   1359a:	47c8      	blx	r9
   1359c:	465a      	mov	r2, fp
                        while(l++ < width) {
   1359e:	45ab      	cmp	fp, r5
   135a0:	d1f6      	bne.n	13590 <_vsnprintf+0x5ec>
   135a2:	e74e      	b.n	13442 <_vsnprintf+0x49e>
                        flags &= ~FLAGS_ZEROPAD;
   135a4:	f021 0311 	bic.w	r3, r1, #17
                        base = 10U;
   135a8:	220a      	movs	r2, #10
   135aa:	e640      	b.n	1322e <_vsnprintf+0x28a>
                        flags &= ~FLAGS_ZEROPAD;
   135ac:	f021 0311 	bic.w	r3, r1, #17
                        base = 10U;
   135b0:	220a      	movs	r2, #10
   135b2:	e63c      	b.n	1322e <_vsnprintf+0x28a>
                        base = 16U;
   135b4:	2210      	movs	r2, #16
   135b6:	e782      	b.n	134be <_vsnprintf+0x51a>
                        base =  8U;
   135b8:	2208      	movs	r2, #8
   135ba:	e780      	b.n	134be <_vsnprintf+0x51a>
                        base =  2U;
   135bc:	2202      	movs	r2, #2
   135be:	e77e      	b.n	134be <_vsnprintf+0x51a>

000135c0 <lv_vsnprintf>:
    va_end(va);
    return ret;
}

int lv_vsnprintf(char * buffer, size_t count, const char * format, va_list va)
{
   135c0:	b510      	push	{r4, lr}
   135c2:	b082      	sub	sp, #8
    return _vsnprintf(_out_buffer, buffer, count, format, va);
   135c4:	9300      	str	r3, [sp, #0]
   135c6:	4613      	mov	r3, r2
   135c8:	460a      	mov	r2, r1
   135ca:	4601      	mov	r1, r0
   135cc:	4802      	ldr	r0, [pc, #8]	; (135d8 <lv_vsnprintf+0x18>)
   135ce:	4c03      	ldr	r4, [pc, #12]	; (135dc <lv_vsnprintf+0x1c>)
   135d0:	47a0      	blx	r4
}
   135d2:	b002      	add	sp, #8
   135d4:	bd10      	pop	{r4, pc}
   135d6:	bf00      	nop
   135d8:	00012c9b 	.word	0x00012c9b
   135dc:	00012fa5 	.word	0x00012fa5

000135e0 <_lv_task_core_init>:

/**
 * Init the lv_task module
 */
void _lv_task_core_init(void)
{
   135e0:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
   135e2:	2118      	movs	r1, #24
   135e4:	4804      	ldr	r0, [pc, #16]	; (135f8 <_lv_task_core_init+0x18>)
   135e6:	4b05      	ldr	r3, [pc, #20]	; (135fc <_lv_task_core_init+0x1c>)
   135e8:	4798      	blx	r3

    task_list_changed = false;
   135ea:	4b05      	ldr	r3, [pc, #20]	; (13600 <_lv_task_core_init+0x20>)
   135ec:	2200      	movs	r2, #0
   135ee:	701a      	strb	r2, [r3, #0]
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
    lv_task_run = en;
   135f0:	2201      	movs	r2, #1
   135f2:	705a      	strb	r2, [r3, #1]
   135f4:	bd08      	pop	{r3, pc}
   135f6:	bf00      	nop
   135f8:	2000c67c 	.word	0x2000c67c
   135fc:	00011eed 	.word	0x00011eed
   13600:	2000c5b4 	.word	0x2000c5b4

00013604 <lv_task_create_basic>:
{
   13604:	b5f0      	push	{r4, r5, r6, r7, lr}
   13606:	b083      	sub	sp, #12
    tmp = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   13608:	4837      	ldr	r0, [pc, #220]	; (136e8 <lv_task_create_basic+0xe4>)
   1360a:	4b38      	ldr	r3, [pc, #224]	; (136ec <lv_task_create_basic+0xe8>)
   1360c:	4798      	blx	r3
    if(NULL == tmp) {
   1360e:	b310      	cbz	r0, 13656 <lv_task_create_basic+0x52>
   13610:	4604      	mov	r4, r0
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
   13612:	4e35      	ldr	r6, [pc, #212]	; (136e8 <lv_task_create_basic+0xe4>)
   13614:	4d36      	ldr	r5, [pc, #216]	; (136f0 <lv_task_create_basic+0xec>)
            if(tmp->prio <= DEF_PRIO) {
   13616:	7d23      	ldrb	r3, [r4, #20]
   13618:	f003 0307 	and.w	r3, r3, #7
   1361c:	2b03      	cmp	r3, #3
   1361e:	dd30      	ble.n	13682 <lv_task_create_basic+0x7e>
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
   13620:	4621      	mov	r1, r4
   13622:	4630      	mov	r0, r6
   13624:	47a8      	blx	r5
        } while(tmp != NULL);
   13626:	4604      	mov	r4, r0
   13628:	2800      	cmp	r0, #0
   1362a:	d1f4      	bne.n	13616 <lv_task_create_basic+0x12>
            new_task = _lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
   1362c:	482e      	ldr	r0, [pc, #184]	; (136e8 <lv_task_create_basic+0xe4>)
   1362e:	4b31      	ldr	r3, [pc, #196]	; (136f4 <lv_task_create_basic+0xf0>)
   13630:	4798      	blx	r3
   13632:	4605      	mov	r5, r0
            LV_ASSERT_MEM(new_task);
   13634:	4b30      	ldr	r3, [pc, #192]	; (136f8 <lv_task_create_basic+0xf4>)
   13636:	4798      	blx	r3
   13638:	2800      	cmp	r0, #0
   1363a:	d152      	bne.n	136e2 <lv_task_create_basic+0xde>
   1363c:	4b2f      	ldr	r3, [pc, #188]	; (136fc <lv_task_create_basic+0xf8>)
   1363e:	9300      	str	r3, [sp, #0]
   13640:	22e5      	movs	r2, #229	; 0xe5
   13642:	492f      	ldr	r1, [pc, #188]	; (13700 <lv_task_create_basic+0xfc>)
   13644:	2003      	movs	r0, #3
   13646:	4c2f      	ldr	r4, [pc, #188]	; (13704 <lv_task_create_basic+0x100>)
   13648:	47a0      	blx	r4
   1364a:	462a      	mov	r2, r5
   1364c:	2300      	movs	r3, #0
   1364e:	482e      	ldr	r0, [pc, #184]	; (13708 <lv_task_create_basic+0x104>)
   13650:	492e      	ldr	r1, [pc, #184]	; (1370c <lv_task_create_basic+0x108>)
   13652:	4788      	blx	r1
   13654:	e7fe      	b.n	13654 <lv_task_create_basic+0x50>
        new_task = _lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
   13656:	4824      	ldr	r0, [pc, #144]	; (136e8 <lv_task_create_basic+0xe4>)
   13658:	4b2d      	ldr	r3, [pc, #180]	; (13710 <lv_task_create_basic+0x10c>)
   1365a:	4798      	blx	r3
   1365c:	4605      	mov	r5, r0
        LV_ASSERT_MEM(new_task);
   1365e:	4b26      	ldr	r3, [pc, #152]	; (136f8 <lv_task_create_basic+0xf4>)
   13660:	4798      	blx	r3
   13662:	b960      	cbnz	r0, 1367e <lv_task_create_basic+0x7a>
   13664:	4b25      	ldr	r3, [pc, #148]	; (136fc <lv_task_create_basic+0xf8>)
   13666:	9300      	str	r3, [sp, #0]
   13668:	22d3      	movs	r2, #211	; 0xd3
   1366a:	4925      	ldr	r1, [pc, #148]	; (13700 <lv_task_create_basic+0xfc>)
   1366c:	2003      	movs	r0, #3
   1366e:	4c25      	ldr	r4, [pc, #148]	; (13704 <lv_task_create_basic+0x100>)
   13670:	47a0      	blx	r4
   13672:	462a      	mov	r2, r5
   13674:	2300      	movs	r3, #0
   13676:	4824      	ldr	r0, [pc, #144]	; (13708 <lv_task_create_basic+0x104>)
   13678:	4924      	ldr	r1, [pc, #144]	; (1370c <lv_task_create_basic+0x108>)
   1367a:	4788      	blx	r1
   1367c:	e7fe      	b.n	1367c <lv_task_create_basic+0x78>
        if(new_task == NULL) return NULL;
   1367e:	b95d      	cbnz	r5, 13698 <lv_task_create_basic+0x94>
   13680:	e01f      	b.n	136c2 <lv_task_create_basic+0xbe>
                new_task = _lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
   13682:	4621      	mov	r1, r4
   13684:	4818      	ldr	r0, [pc, #96]	; (136e8 <lv_task_create_basic+0xe4>)
   13686:	4b23      	ldr	r3, [pc, #140]	; (13714 <lv_task_create_basic+0x110>)
   13688:	4798      	blx	r3
   1368a:	4605      	mov	r5, r0
                LV_ASSERT_MEM(new_task);
   1368c:	4b1a      	ldr	r3, [pc, #104]	; (136f8 <lv_task_create_basic+0xf4>)
   1368e:	4798      	blx	r3
   13690:	b1d0      	cbz	r0, 136c8 <lv_task_create_basic+0xc4>
                if(new_task == NULL) return NULL;
   13692:	b1b5      	cbz	r5, 136c2 <lv_task_create_basic+0xbe>
        if(tmp == NULL) {
   13694:	2c00      	cmp	r4, #0
   13696:	d0c9      	beq.n	1362c <lv_task_create_basic+0x28>
    task_list_changed = true;
   13698:	4c1f      	ldr	r4, [pc, #124]	; (13718 <lv_task_create_basic+0x114>)
   1369a:	2601      	movs	r6, #1
   1369c:	7026      	strb	r6, [r4, #0]
    new_task->period  = DEF_PERIOD;
   1369e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   136a2:	602b      	str	r3, [r5, #0]
    new_task->task_cb = NULL;
   136a4:	2700      	movs	r7, #0
   136a6:	60af      	str	r7, [r5, #8]
    new_task->prio    = DEF_PRIO;
   136a8:	7d2b      	ldrb	r3, [r5, #20]
   136aa:	2203      	movs	r2, #3
   136ac:	f362 0302 	bfi	r3, r2, #0, #3
   136b0:	752b      	strb	r3, [r5, #20]
    new_task->repeat_count = -1;
   136b2:	f04f 33ff 	mov.w	r3, #4294967295
   136b6:	612b      	str	r3, [r5, #16]
    new_task->last_run = lv_tick_get();
   136b8:	4b18      	ldr	r3, [pc, #96]	; (1371c <lv_task_create_basic+0x118>)
   136ba:	4798      	blx	r3
   136bc:	6068      	str	r0, [r5, #4]
    new_task->user_data = NULL;
   136be:	60ef      	str	r7, [r5, #12]
    task_created = true;
   136c0:	70a6      	strb	r6, [r4, #2]
}
   136c2:	4628      	mov	r0, r5
   136c4:	b003      	add	sp, #12
   136c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                LV_ASSERT_MEM(new_task);
   136c8:	4b0c      	ldr	r3, [pc, #48]	; (136fc <lv_task_create_basic+0xf8>)
   136ca:	9300      	str	r3, [sp, #0]
   136cc:	22db      	movs	r2, #219	; 0xdb
   136ce:	490c      	ldr	r1, [pc, #48]	; (13700 <lv_task_create_basic+0xfc>)
   136d0:	2003      	movs	r0, #3
   136d2:	4c0c      	ldr	r4, [pc, #48]	; (13704 <lv_task_create_basic+0x100>)
   136d4:	47a0      	blx	r4
   136d6:	462a      	mov	r2, r5
   136d8:	2300      	movs	r3, #0
   136da:	480b      	ldr	r0, [pc, #44]	; (13708 <lv_task_create_basic+0x104>)
   136dc:	490b      	ldr	r1, [pc, #44]	; (1370c <lv_task_create_basic+0x108>)
   136de:	4788      	blx	r1
   136e0:	e7fe      	b.n	136e0 <lv_task_create_basic+0xdc>
            if(new_task == NULL) return NULL;
   136e2:	2d00      	cmp	r5, #0
   136e4:	d1d8      	bne.n	13698 <lv_task_create_basic+0x94>
   136e6:	e7ec      	b.n	136c2 <lv_task_create_basic+0xbe>
   136e8:	2000c67c 	.word	0x2000c67c
   136ec:	00011f9d 	.word	0x00011f9d
   136f0:	00011fb1 	.word	0x00011fb1
   136f4:	00011f51 	.word	0x00011f51
   136f8:	000022a5 	.word	0x000022a5
   136fc:	000294a0 	.word	0x000294a0
   13700:	000294c8 	.word	0x000294c8
   13704:	00012251 	.word	0x00012251
   13708:	00023fcc 	.word	0x00023fcc
   1370c:	000022ad 	.word	0x000022ad
   13710:	00011f05 	.word	0x00011f05
   13714:	00012009 	.word	0x00012009
   13718:	2000c5b4 	.word	0x2000c5b4
   1371c:	0001104d 	.word	0x0001104d

00013720 <lv_task_del>:
{
   13720:	b510      	push	{r4, lr}
   13722:	4604      	mov	r4, r0
    _lv_ll_remove(&LV_GC_ROOT(_lv_task_ll), task);
   13724:	4601      	mov	r1, r0
   13726:	4809      	ldr	r0, [pc, #36]	; (1374c <lv_task_del+0x2c>)
   13728:	4b09      	ldr	r3, [pc, #36]	; (13750 <lv_task_del+0x30>)
   1372a:	4798      	blx	r3
    task_list_changed = true;
   1372c:	2201      	movs	r2, #1
   1372e:	4b09      	ldr	r3, [pc, #36]	; (13754 <lv_task_del+0x34>)
   13730:	701a      	strb	r2, [r3, #0]
    lv_mem_free(task);
   13732:	4620      	mov	r0, r4
   13734:	4b08      	ldr	r3, [pc, #32]	; (13758 <lv_task_del+0x38>)
   13736:	4798      	blx	r3
    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
   13738:	4b08      	ldr	r3, [pc, #32]	; (1375c <lv_task_del+0x3c>)
   1373a:	681b      	ldr	r3, [r3, #0]
   1373c:	429c      	cmp	r4, r3
   1373e:	d000      	beq.n	13742 <lv_task_del+0x22>
   13740:	bd10      	pop	{r4, pc}
   13742:	2201      	movs	r2, #1
   13744:	4b03      	ldr	r3, [pc, #12]	; (13754 <lv_task_del+0x34>)
   13746:	70da      	strb	r2, [r3, #3]
}
   13748:	e7fa      	b.n	13740 <lv_task_del+0x20>
   1374a:	bf00      	nop
   1374c:	2000c67c 	.word	0x2000c67c
   13750:	00012089 	.word	0x00012089
   13754:	2000c5b4 	.word	0x2000c5b4
   13758:	000124b9 	.word	0x000124b9
   1375c:	2000c748 	.word	0x2000c748

00013760 <lv_task_exec>:
 * Execute task if its the priority is appropriate
 * @param task pointer to lv_task
 * @return true: execute, false: not executed
 */
static bool lv_task_exec(lv_task_t * task)
{
   13760:	b510      	push	{r4, lr}
   13762:	4604      	mov	r4, r0
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_task_time_remaining(lv_task_t * task)
{
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
   13764:	6840      	ldr	r0, [r0, #4]
   13766:	4b12      	ldr	r3, [pc, #72]	; (137b0 <lv_task_exec+0x50>)
   13768:	4798      	blx	r3
    if(elp >= task->period)
   1376a:	6823      	ldr	r3, [r4, #0]
   1376c:	4298      	cmp	r0, r3
   1376e:	d201      	bcs.n	13774 <lv_task_exec+0x14>
    bool exec = false;
   13770:	2000      	movs	r0, #0
   13772:	bd10      	pop	{r4, pc}
        task->last_run = lv_tick_get();
   13774:	4b0f      	ldr	r3, [pc, #60]	; (137b4 <lv_task_exec+0x54>)
   13776:	4798      	blx	r3
   13778:	6060      	str	r0, [r4, #4]
        task_deleted   = false;
   1377a:	4b0f      	ldr	r3, [pc, #60]	; (137b8 <lv_task_exec+0x58>)
   1377c:	2200      	movs	r2, #0
   1377e:	70da      	strb	r2, [r3, #3]
        task_created   = false;
   13780:	709a      	strb	r2, [r3, #2]
        if(task->task_cb) task->task_cb(task);
   13782:	68a3      	ldr	r3, [r4, #8]
   13784:	b12b      	cbz	r3, 13792 <lv_task_exec+0x32>
   13786:	4620      	mov	r0, r4
   13788:	4798      	blx	r3
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
   1378a:	4b0b      	ldr	r3, [pc, #44]	; (137b8 <lv_task_exec+0x58>)
   1378c:	78d8      	ldrb	r0, [r3, #3]
   1378e:	b100      	cbz	r0, 13792 <lv_task_exec+0x32>
}
   13790:	bd10      	pop	{r4, pc}
            if(task->repeat_count > 0) {
   13792:	6923      	ldr	r3, [r4, #16]
   13794:	2b00      	cmp	r3, #0
                task->repeat_count--;
   13796:	bfc4      	itt	gt
   13798:	f103 33ff 	addgt.w	r3, r3, #4294967295
   1379c:	6123      	strgt	r3, [r4, #16]
            if(task->repeat_count == 0) {
   1379e:	6923      	ldr	r3, [r4, #16]
   137a0:	b10b      	cbz	r3, 137a6 <lv_task_exec+0x46>
        exec = true;
   137a2:	2001      	movs	r0, #1
   137a4:	e7f4      	b.n	13790 <lv_task_exec+0x30>
                lv_task_del(task);
   137a6:	4620      	mov	r0, r4
   137a8:	4b04      	ldr	r3, [pc, #16]	; (137bc <lv_task_exec+0x5c>)
   137aa:	4798      	blx	r3
        exec = true;
   137ac:	2001      	movs	r0, #1
   137ae:	bd10      	pop	{r4, pc}
   137b0:	00011065 	.word	0x00011065
   137b4:	0001104d 	.word	0x0001104d
   137b8:	2000c5b4 	.word	0x2000c5b4
   137bc:	00013721 	.word	0x00013721

000137c0 <lv_task_handler>:
{
   137c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(already_running) return 1;
   137c4:	4b58      	ldr	r3, [pc, #352]	; (13928 <lv_task_handler+0x168>)
   137c6:	791b      	ldrb	r3, [r3, #4]
   137c8:	2b00      	cmp	r3, #0
   137ca:	f040 80a9 	bne.w	13920 <lv_task_handler+0x160>
    already_running = true;
   137ce:	4b56      	ldr	r3, [pc, #344]	; (13928 <lv_task_handler+0x168>)
   137d0:	2201      	movs	r2, #1
   137d2:	711a      	strb	r2, [r3, #4]
    if(lv_task_run == false) {
   137d4:	785b      	ldrb	r3, [r3, #1]
   137d6:	b92b      	cbnz	r3, 137e4 <lv_task_handler+0x24>
        already_running = false; /*Release mutex*/
   137d8:	2200      	movs	r2, #0
   137da:	4b53      	ldr	r3, [pc, #332]	; (13928 <lv_task_handler+0x168>)
   137dc:	711a      	strb	r2, [r3, #4]
        return 1;
   137de:	2001      	movs	r0, #1
   137e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    handler_start = lv_tick_get();
   137e4:	4b51      	ldr	r3, [pc, #324]	; (1392c <lv_task_handler+0x16c>)
   137e6:	4798      	blx	r3
   137e8:	4b4f      	ldr	r3, [pc, #316]	; (13928 <lv_task_handler+0x168>)
   137ea:	6098      	str	r0, [r3, #8]
    lv_task_t * task_interrupter = NULL;
   137ec:	2600      	movs	r6, #0
        task_deleted             = false;
   137ee:	461d      	mov	r5, r3
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   137f0:	f8df 814c 	ldr.w	r8, [pc, #332]	; 13940 <lv_task_handler+0x180>
   137f4:	4c4e      	ldr	r4, [pc, #312]	; (13930 <lv_task_handler+0x170>)
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
   137f6:	f8df 9150 	ldr.w	r9, [pc, #336]	; 13948 <lv_task_handler+0x188>
   137fa:	e06d      	b.n	138d8 <lv_task_handler+0x118>
                LV_GC_ROOT(_lv_task_act) = next;
   137fc:	6027      	str	r7, [r4, #0]
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
   137fe:	2600      	movs	r6, #0
                continue; /*Load the next task*/
   13800:	e009      	b.n	13816 <lv_task_handler+0x56>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
   13802:	4b4c      	ldr	r3, [pc, #304]	; (13934 <lv_task_handler+0x174>)
   13804:	4798      	blx	r3
            if(task_created || task_deleted) {
   13806:	78ab      	ldrb	r3, [r5, #2]
   13808:	bb33      	cbnz	r3, 13858 <lv_task_handler+0x98>
   1380a:	78eb      	ldrb	r3, [r5, #3]
   1380c:	bb23      	cbnz	r3, 13858 <lv_task_handler+0x98>
            if(task_list_changed) {
   1380e:	782b      	ldrb	r3, [r5, #0]
   13810:	2b00      	cmp	r3, #0
   13812:	d15f      	bne.n	138d4 <lv_task_handler+0x114>
            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
   13814:	6027      	str	r7, [r4, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
   13816:	6821      	ldr	r1, [r4, #0]
   13818:	b1f1      	cbz	r1, 13858 <lv_task_handler+0x98>
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
   1381a:	4640      	mov	r0, r8
   1381c:	47c8      	blx	r9
   1381e:	4607      	mov	r7, r0
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_OFF) {
   13820:	6820      	ldr	r0, [r4, #0]
   13822:	7d03      	ldrb	r3, [r0, #20]
   13824:	f013 0307 	ands.w	r3, r3, #7
   13828:	d016      	beq.n	13858 <lv_task_handler+0x98>
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
   1382a:	4286      	cmp	r6, r0
   1382c:	d0e6      	beq.n	137fc <lv_task_handler+0x3c>
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_HIGHEST) {
   1382e:	2b05      	cmp	r3, #5
   13830:	d0e7      	beq.n	13802 <lv_task_handler+0x42>
            else if(task_interrupter) {
   13832:	2e00      	cmp	r6, #0
   13834:	d042      	beq.n	138bc <lv_task_handler+0xfc>
                if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio > task_interrupter->prio) {
   13836:	7d02      	ldrb	r2, [r0, #20]
   13838:	f002 0207 	and.w	r2, r2, #7
   1383c:	7d33      	ldrb	r3, [r6, #20]
   1383e:	f003 0307 	and.w	r3, r3, #7
   13842:	429a      	cmp	r2, r3
   13844:	dddf      	ble.n	13806 <lv_task_handler+0x46>
                    if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
   13846:	4b3b      	ldr	r3, [pc, #236]	; (13934 <lv_task_handler+0x174>)
   13848:	4798      	blx	r3
   1384a:	2800      	cmp	r0, #0
   1384c:	d0db      	beq.n	13806 <lv_task_handler+0x46>
                        if(!task_created && !task_deleted) {
   1384e:	78ab      	ldrb	r3, [r5, #2]
   13850:	b913      	cbnz	r3, 13858 <lv_task_handler+0x98>
   13852:	78eb      	ldrb	r3, [r5, #3]
   13854:	2b00      	cmp	r3, #0
   13856:	d02f      	beq.n	138b8 <lv_task_handler+0xf8>
    busy_time += lv_tick_elaps(handler_start);
   13858:	4c33      	ldr	r4, [pc, #204]	; (13928 <lv_task_handler+0x168>)
   1385a:	68a0      	ldr	r0, [r4, #8]
   1385c:	4d36      	ldr	r5, [pc, #216]	; (13938 <lv_task_handler+0x178>)
   1385e:	47a8      	blx	r5
   13860:	68e3      	ldr	r3, [r4, #12]
   13862:	4403      	add	r3, r0
   13864:	60e3      	str	r3, [r4, #12]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
   13866:	6920      	ldr	r0, [r4, #16]
   13868:	47a8      	blx	r5
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
   1386a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   1386e:	d315      	bcc.n	1389c <lv_task_handler+0xdc>
        idle_last         = (uint32_t)((uint32_t)busy_time * 100) / IDLE_MEAS_PERIOD; /*Calculate the busy percentage*/
   13870:	68e2      	ldr	r2, [r4, #12]
   13872:	2364      	movs	r3, #100	; 0x64
   13874:	fb03 f302 	mul.w	r3, r3, r2
   13878:	4a30      	ldr	r2, [pc, #192]	; (1393c <lv_task_handler+0x17c>)
   1387a:	fba2 2303 	umull	r2, r3, r2, r3
   1387e:	f3c3 1347 	ubfx	r3, r3, #5, #8
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last;                    /*But we need idle time*/
   13882:	2b64      	cmp	r3, #100	; 0x64
   13884:	bf9a      	itte	ls
   13886:	f1c3 0364 	rsbls	r3, r3, #100	; 0x64
   1388a:	b2db      	uxtbls	r3, r3
   1388c:	2300      	movhi	r3, #0
   1388e:	4c26      	ldr	r4, [pc, #152]	; (13928 <lv_task_handler+0x168>)
   13890:	7523      	strb	r3, [r4, #20]
        busy_time         = 0;
   13892:	2300      	movs	r3, #0
   13894:	60e3      	str	r3, [r4, #12]
        idle_period_start = lv_tick_get();
   13896:	4b25      	ldr	r3, [pc, #148]	; (1392c <lv_task_handler+0x16c>)
   13898:	4798      	blx	r3
   1389a:	6120      	str	r0, [r4, #16]
    time_till_next = LV_NO_TASK_READY;
   1389c:	f04f 32ff 	mov.w	r2, #4294967295
   138a0:	4b21      	ldr	r3, [pc, #132]	; (13928 <lv_task_handler+0x168>)
   138a2:	619a      	str	r2, [r3, #24]
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   138a4:	4826      	ldr	r0, [pc, #152]	; (13940 <lv_task_handler+0x180>)
   138a6:	4b27      	ldr	r3, [pc, #156]	; (13944 <lv_task_handler+0x184>)
   138a8:	4798      	blx	r3
    while(next) {
   138aa:	4604      	mov	r4, r0
   138ac:	2800      	cmp	r0, #0
   138ae:	d031      	beq.n	13914 <lv_task_handler+0x154>
    uint32_t elp = lv_tick_elaps(task->last_run);
   138b0:	4f21      	ldr	r7, [pc, #132]	; (13938 <lv_task_handler+0x178>)
            if(delay < time_till_next)
   138b2:	4e1d      	ldr	r6, [pc, #116]	; (13928 <lv_task_handler+0x168>)
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), next); /*Find the next task*/
   138b4:	4d22      	ldr	r5, [pc, #136]	; (13940 <lv_task_handler+0x180>)
   138b6:	e01d      	b.n	138f4 <lv_task_handler+0x134>
                            task_interrupter = LV_GC_ROOT(_lv_task_act);
   138b8:	6826      	ldr	r6, [r4, #0]
                            break;
   138ba:	e00d      	b.n	138d8 <lv_task_handler+0x118>
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
   138bc:	4b1d      	ldr	r3, [pc, #116]	; (13934 <lv_task_handler+0x174>)
   138be:	4798      	blx	r3
   138c0:	2800      	cmp	r0, #0
   138c2:	d0a0      	beq.n	13806 <lv_task_handler+0x46>
                    if(!task_created && !task_deleted) {
   138c4:	78ab      	ldrb	r3, [r5, #2]
   138c6:	2b00      	cmp	r3, #0
   138c8:	d1c6      	bne.n	13858 <lv_task_handler+0x98>
   138ca:	78eb      	ldrb	r3, [r5, #3]
   138cc:	2b00      	cmp	r3, #0
   138ce:	d1c3      	bne.n	13858 <lv_task_handler+0x98>
                        task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
   138d0:	6826      	ldr	r6, [r4, #0]
                        break;
   138d2:	e001      	b.n	138d8 <lv_task_handler+0x118>
                task_list_changed = false;
   138d4:	2600      	movs	r6, #0
   138d6:	702e      	strb	r6, [r5, #0]
        task_deleted             = false;
   138d8:	2300      	movs	r3, #0
   138da:	70eb      	strb	r3, [r5, #3]
        task_created             = false;
   138dc:	70ab      	strb	r3, [r5, #2]
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   138de:	4640      	mov	r0, r8
   138e0:	4b18      	ldr	r3, [pc, #96]	; (13944 <lv_task_handler+0x184>)
   138e2:	4798      	blx	r3
   138e4:	6020      	str	r0, [r4, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
   138e6:	e796      	b.n	13816 <lv_task_handler+0x56>
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), next); /*Find the next task*/
   138e8:	4621      	mov	r1, r4
   138ea:	4628      	mov	r0, r5
   138ec:	4b16      	ldr	r3, [pc, #88]	; (13948 <lv_task_handler+0x188>)
   138ee:	4798      	blx	r3
    while(next) {
   138f0:	4604      	mov	r4, r0
   138f2:	b178      	cbz	r0, 13914 <lv_task_handler+0x154>
        if(next->prio != LV_TASK_PRIO_OFF) {
   138f4:	7d23      	ldrb	r3, [r4, #20]
   138f6:	f013 0f07 	tst.w	r3, #7
   138fa:	d0f5      	beq.n	138e8 <lv_task_handler+0x128>
    uint32_t elp = lv_tick_elaps(task->last_run);
   138fc:	6860      	ldr	r0, [r4, #4]
   138fe:	47b8      	blx	r7
    if(elp >= task->period)
   13900:	6823      	ldr	r3, [r4, #0]
   13902:	4298      	cmp	r0, r3
        return 0;
    return task->period - elp;
   13904:	bf34      	ite	cc
   13906:	1a1b      	subcc	r3, r3, r0
        return 0;
   13908:	2300      	movcs	r3, #0
            if(delay < time_till_next)
   1390a:	69b2      	ldr	r2, [r6, #24]
   1390c:	429a      	cmp	r2, r3
                time_till_next = delay;
   1390e:	bf88      	it	hi
   13910:	61b3      	strhi	r3, [r6, #24]
   13912:	e7e9      	b.n	138e8 <lv_task_handler+0x128>
    already_running = false; /*Release the mutex*/
   13914:	4b04      	ldr	r3, [pc, #16]	; (13928 <lv_task_handler+0x168>)
   13916:	2200      	movs	r2, #0
   13918:	711a      	strb	r2, [r3, #4]
    return time_till_next;
   1391a:	6998      	ldr	r0, [r3, #24]
   1391c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(already_running) return 1;
   13920:	2001      	movs	r0, #1
}
   13922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13926:	bf00      	nop
   13928:	2000c5b4 	.word	0x2000c5b4
   1392c:	0001104d 	.word	0x0001104d
   13930:	2000c748 	.word	0x2000c748
   13934:	00013761 	.word	0x00013761
   13938:	00011065 	.word	0x00011065
   1393c:	10624dd3 	.word	0x10624dd3
   13940:	2000c67c 	.word	0x2000c67c
   13944:	00011f9d 	.word	0x00011f9d
   13948:	00011fb1 	.word	0x00011fb1

0001394c <lv_task_set_prio>:
{
   1394c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(task->prio == prio) return;
   13950:	7d03      	ldrb	r3, [r0, #20]
   13952:	f003 0307 	and.w	r3, r3, #7
   13956:	428b      	cmp	r3, r1
   13958:	d031      	beq.n	139be <lv_task_set_prio+0x72>
   1395a:	460d      	mov	r5, r1
   1395c:	4688      	mov	r8, r1
   1395e:	4681      	mov	r9, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
   13960:	4818      	ldr	r0, [pc, #96]	; (139c4 <lv_task_set_prio+0x78>)
   13962:	4b19      	ldr	r3, [pc, #100]	; (139c8 <lv_task_set_prio+0x7c>)
   13964:	4798      	blx	r3
   13966:	4604      	mov	r4, r0
   13968:	b318      	cbz	r0, 139b2 <lv_task_set_prio+0x66>
        if(i->prio <= prio) {
   1396a:	7d03      	ldrb	r3, [r0, #20]
   1396c:	f003 0307 	and.w	r3, r3, #7
   13970:	429d      	cmp	r5, r3
   13972:	da0b      	bge.n	1398c <lv_task_set_prio+0x40>
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
   13974:	4f13      	ldr	r7, [pc, #76]	; (139c4 <lv_task_set_prio+0x78>)
   13976:	4e15      	ldr	r6, [pc, #84]	; (139cc <lv_task_set_prio+0x80>)
   13978:	4621      	mov	r1, r4
   1397a:	4638      	mov	r0, r7
   1397c:	47b0      	blx	r6
   1397e:	4604      	mov	r4, r0
   13980:	b1b8      	cbz	r0, 139b2 <lv_task_set_prio+0x66>
        if(i->prio <= prio) {
   13982:	7d23      	ldrb	r3, [r4, #20]
   13984:	f003 0307 	and.w	r3, r3, #7
   13988:	429d      	cmp	r5, r3
   1398a:	dbf5      	blt.n	13978 <lv_task_set_prio+0x2c>
            if(i != task) _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
   1398c:	45a1      	cmp	r9, r4
   1398e:	d005      	beq.n	1399c <lv_task_set_prio+0x50>
   13990:	4622      	mov	r2, r4
   13992:	4649      	mov	r1, r9
   13994:	480b      	ldr	r0, [pc, #44]	; (139c4 <lv_task_set_prio+0x78>)
   13996:	4b0e      	ldr	r3, [pc, #56]	; (139d0 <lv_task_set_prio+0x84>)
   13998:	4798      	blx	r3
    if(i == NULL) {
   1399a:	b154      	cbz	r4, 139b2 <lv_task_set_prio+0x66>
    task_list_changed = true;
   1399c:	2201      	movs	r2, #1
   1399e:	4b0d      	ldr	r3, [pc, #52]	; (139d4 <lv_task_set_prio+0x88>)
   139a0:	701a      	strb	r2, [r3, #0]
    task->prio = prio;
   139a2:	f899 3014 	ldrb.w	r3, [r9, #20]
   139a6:	f368 0302 	bfi	r3, r8, #0, #3
   139aa:	f889 3014 	strb.w	r3, [r9, #20]
   139ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
   139b2:	2200      	movs	r2, #0
   139b4:	4649      	mov	r1, r9
   139b6:	4803      	ldr	r0, [pc, #12]	; (139c4 <lv_task_set_prio+0x78>)
   139b8:	4b05      	ldr	r3, [pc, #20]	; (139d0 <lv_task_set_prio+0x84>)
   139ba:	4798      	blx	r3
   139bc:	e7ee      	b.n	1399c <lv_task_set_prio+0x50>
   139be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   139c2:	bf00      	nop
   139c4:	2000c67c 	.word	0x2000c67c
   139c8:	00011f9d 	.word	0x00011f9d
   139cc:	00011fb1 	.word	0x00011fb1
   139d0:	00012189 	.word	0x00012189
   139d4:	2000c5b4 	.word	0x2000c5b4

000139d8 <lv_task_create>:
{
   139d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   139dc:	b082      	sub	sp, #8
   139de:	4680      	mov	r8, r0
   139e0:	460f      	mov	r7, r1
   139e2:	4616      	mov	r6, r2
   139e4:	461d      	mov	r5, r3
    lv_task_t * new_task = lv_task_create_basic();
   139e6:	4b10      	ldr	r3, [pc, #64]	; (13a28 <lv_task_create+0x50>)
   139e8:	4798      	blx	r3
   139ea:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_task);
   139ec:	4b0f      	ldr	r3, [pc, #60]	; (13a2c <lv_task_create+0x54>)
   139ee:	4798      	blx	r3
   139f0:	b160      	cbz	r0, 13a0c <lv_task_create+0x34>
    if(new_task == NULL) return NULL;
   139f2:	b13c      	cbz	r4, 13a04 <lv_task_create+0x2c>
    task->task_cb = task_cb;
   139f4:	f8c4 8008 	str.w	r8, [r4, #8]
    task->period = period;
   139f8:	6027      	str	r7, [r4, #0]
    lv_task_set_prio(new_task, prio);
   139fa:	4631      	mov	r1, r6
   139fc:	4620      	mov	r0, r4
   139fe:	4b0c      	ldr	r3, [pc, #48]	; (13a30 <lv_task_create+0x58>)
   13a00:	4798      	blx	r3
    new_task->user_data = user_data;
   13a02:	60e5      	str	r5, [r4, #12]
}
   13a04:	4620      	mov	r0, r4
   13a06:	b002      	add	sp, #8
   13a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LV_ASSERT_MEM(new_task);
   13a0c:	4b09      	ldr	r3, [pc, #36]	; (13a34 <lv_task_create+0x5c>)
   13a0e:	9300      	str	r3, [sp, #0]
   13a10:	f44f 7283 	mov.w	r2, #262	; 0x106
   13a14:	4908      	ldr	r1, [pc, #32]	; (13a38 <lv_task_create+0x60>)
   13a16:	2003      	movs	r0, #3
   13a18:	4d08      	ldr	r5, [pc, #32]	; (13a3c <lv_task_create+0x64>)
   13a1a:	47a8      	blx	r5
   13a1c:	4622      	mov	r2, r4
   13a1e:	2300      	movs	r3, #0
   13a20:	4807      	ldr	r0, [pc, #28]	; (13a40 <lv_task_create+0x68>)
   13a22:	4908      	ldr	r1, [pc, #32]	; (13a44 <lv_task_create+0x6c>)
   13a24:	4788      	blx	r1
   13a26:	e7fe      	b.n	13a26 <lv_task_create+0x4e>
   13a28:	00013605 	.word	0x00013605
   13a2c:	000022a5 	.word	0x000022a5
   13a30:	0001394d 	.word	0x0001394d
   13a34:	000294b8 	.word	0x000294b8
   13a38:	000294c8 	.word	0x000294c8
   13a3c:	00012251 	.word	0x00012251
   13a40:	00023fcc 	.word	0x00023fcc
   13a44:	000022ad 	.word	0x000022ad

00013a48 <lv_task_ready>:
{
   13a48:	b510      	push	{r4, lr}
   13a4a:	4604      	mov	r4, r0
    task->last_run = lv_tick_get() - task->period - 1;
   13a4c:	4b03      	ldr	r3, [pc, #12]	; (13a5c <lv_task_ready+0x14>)
   13a4e:	4798      	blx	r3
   13a50:	6823      	ldr	r3, [r4, #0]
   13a52:	43db      	mvns	r3, r3
   13a54:	4403      	add	r3, r0
   13a56:	6063      	str	r3, [r4, #4]
   13a58:	bd10      	pop	{r4, pc}
   13a5a:	bf00      	nop
   13a5c:	0001104d 	.word	0x0001104d

00013a60 <lv_txt_utf8_size>:
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4). O on invalid code
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
    if((str[0] & 0x80) == 0)
   13a60:	7803      	ldrb	r3, [r0, #0]
   13a62:	f013 0f80 	tst.w	r3, #128	; 0x80
   13a66:	d101      	bne.n	13a6c <lv_txt_utf8_size+0xc>
        return 1;
   13a68:	2001      	movs	r0, #1
   13a6a:	4770      	bx	lr
    else if((str[0] & 0xE0) == 0xC0)
   13a6c:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
   13a70:	2ac0      	cmp	r2, #192	; 0xc0
   13a72:	d00a      	beq.n	13a8a <lv_txt_utf8_size+0x2a>
        return 2;
    else if((str[0] & 0xF0) == 0xE0)
   13a74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
   13a78:	2ae0      	cmp	r2, #224	; 0xe0
   13a7a:	d008      	beq.n	13a8e <lv_txt_utf8_size+0x2e>
        return 3;
    else if((str[0] & 0xF8) == 0xF0)
   13a7c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
        return 4;
    return 0; /*If the char was invalid tell it's 1 byte long*/
   13a80:	2bf0      	cmp	r3, #240	; 0xf0
   13a82:	bf0c      	ite	eq
   13a84:	2004      	moveq	r0, #4
   13a86:	2000      	movne	r0, #0
   13a88:	4770      	bx	lr
        return 2;
   13a8a:	2002      	movs	r0, #2
   13a8c:	4770      	bx	lr
        return 3;
   13a8e:	2003      	movs	r0, #3
}
   13a90:	4770      	bx	lr

00013a92 <lv_txt_unicode_to_utf8>:
 * @param letter_uni an Unicode letter
 * @return UTF-8 coded character in Little Endian to be compatible with C chars (e.g. 'Á', 'Ű')
 */
static uint32_t lv_txt_unicode_to_utf8(uint32_t letter_uni)
{
    if(letter_uni < 128) return letter_uni;
   13a92:	287f      	cmp	r0, #127	; 0x7f
   13a94:	d916      	bls.n	13ac4 <lv_txt_unicode_to_utf8+0x32>
{
   13a96:	b082      	sub	sp, #8
    uint8_t bytes[4];

    if(letter_uni < 0x0800) {
   13a98:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   13a9c:	d213      	bcs.n	13ac6 <lv_txt_unicode_to_utf8+0x34>
        bytes[0] = ((letter_uni >> 6) & 0x1F) | 0xC0;
   13a9e:	f3c0 1384 	ubfx	r3, r0, #6, #5
   13aa2:	f063 033f 	orn	r3, r3, #63	; 0x3f
   13aa6:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 0) & 0x3F) | 0x80;
   13aaa:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   13aae:	f060 007f 	orn	r0, r0, #127	; 0x7f
   13ab2:	f88d 0005 	strb.w	r0, [sp, #5]
        bytes[2] = 0;
   13ab6:	2300      	movs	r3, #0
   13ab8:	f88d 3006 	strb.w	r3, [sp, #6]
        bytes[3] = 0;
   13abc:	f88d 3007 	strb.w	r3, [sp, #7]
        bytes[2] = ((letter_uni >> 6) & 0x3F) | 0x80;
        bytes[3] = ((letter_uni >> 0) & 0x3F) | 0x80;
    }

    uint32_t * res_p = (uint32_t *)bytes;
    return *res_p;
   13ac0:	9801      	ldr	r0, [sp, #4]
}
   13ac2:	b002      	add	sp, #8
   13ac4:	4770      	bx	lr
    else if(letter_uni < 0x010000) {
   13ac6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   13aca:	d215      	bcs.n	13af8 <lv_txt_unicode_to_utf8+0x66>
        bytes[0] = ((letter_uni >> 12) & 0x0F) | 0xE0;
   13acc:	f3c0 3303 	ubfx	r3, r0, #12, #4
   13ad0:	f063 031f 	orn	r3, r3, #31
   13ad4:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 6) & 0x3F) | 0x80;
   13ad8:	f3c0 1385 	ubfx	r3, r0, #6, #6
   13adc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   13ae0:	f88d 3005 	strb.w	r3, [sp, #5]
        bytes[2] = ((letter_uni >> 0) & 0x3F) | 0x80;
   13ae4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   13ae8:	f060 007f 	orn	r0, r0, #127	; 0x7f
   13aec:	f88d 0006 	strb.w	r0, [sp, #6]
        bytes[3] = 0;
   13af0:	2300      	movs	r3, #0
   13af2:	f88d 3007 	strb.w	r3, [sp, #7]
   13af6:	e7e3      	b.n	13ac0 <lv_txt_unicode_to_utf8+0x2e>
    else if(letter_uni < 0x110000) {
   13af8:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   13afc:	d2e0      	bcs.n	13ac0 <lv_txt_unicode_to_utf8+0x2e>
        bytes[0] = ((letter_uni >> 18) & 0x07) | 0xF0;
   13afe:	f3c0 4382 	ubfx	r3, r0, #18, #3
   13b02:	f063 030f 	orn	r3, r3, #15
   13b06:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 12) & 0x3F) | 0x80;
   13b0a:	f3c0 3305 	ubfx	r3, r0, #12, #6
   13b0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   13b12:	f88d 3005 	strb.w	r3, [sp, #5]
        bytes[2] = ((letter_uni >> 6) & 0x3F) | 0x80;
   13b16:	f3c0 1385 	ubfx	r3, r0, #6, #6
   13b1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   13b1e:	f88d 3006 	strb.w	r3, [sp, #6]
        bytes[3] = ((letter_uni >> 0) & 0x3F) | 0x80;
   13b22:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   13b26:	f060 007f 	orn	r0, r0, #127	; 0x7f
   13b2a:	f88d 0007 	strb.w	r0, [sp, #7]
   13b2e:	e7c7      	b.n	13ac0 <lv_txt_unicode_to_utf8+0x2e>

00013b30 <lv_txt_utf8_conv_wc>:
 * Convert a wide character, e.g. 'Á' little endian to be UTF-8 compatible
 * @param c a wide character or a  Little endian number
 * @return `c` in big endian
 */
static uint32_t lv_txt_utf8_conv_wc(uint32_t c)
{
   13b30:	b082      	sub	sp, #8
   13b32:	9001      	str	r0, [sp, #4]
    /*Swap the bytes (UTF-8 is big endian, but the MCUs are little endian)*/
    if((c & 0x80) != 0) {
   13b34:	f010 0f80 	tst.w	r0, #128	; 0x80
   13b38:	d017      	beq.n	13b6a <lv_txt_utf8_conv_wc+0x3a>
        uint32_t swapped;
        uint8_t c8[4];
        _lv_memcpy_small(c8, &c, 4);
        swapped = (c8[0] << 24) + (c8[1] << 16) + (c8[2] << 8) + (c8[3]);
   13b3a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   13b3e:	f89d 2005 	ldrb.w	r2, [sp, #5]
   13b42:	0412      	lsls	r2, r2, #16
   13b44:	eb02 6203 	add.w	r2, r2, r3, lsl #24
   13b48:	f89d 3006 	ldrb.w	r3, [sp, #6]
   13b4c:	eb02 2203 	add.w	r2, r2, r3, lsl #8
   13b50:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13b54:	441a      	add	r2, r3
   13b56:	2304      	movs	r3, #4
        uint8_t i;
        for(i = 0; i < 4; i++) {
            if((swapped & 0xFF) == 0)
   13b58:	f012 0fff 	tst.w	r2, #255	; 0xff
                swapped = (swapped >> 8); /*Ignore leading zeros (they were in the end originally)*/
   13b5c:	bf08      	it	eq
   13b5e:	0a12      	lsreq	r2, r2, #8
   13b60:	3b01      	subs	r3, #1
        for(i = 0; i < 4; i++) {
   13b62:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   13b66:	d1f7      	bne.n	13b58 <lv_txt_utf8_conv_wc+0x28>
        }
        c = swapped;
   13b68:	9201      	str	r2, [sp, #4]
    }

    return c;
}
   13b6a:	9801      	ldr	r0, [sp, #4]
   13b6c:	b002      	add	sp, #8
   13b6e:	4770      	bx	lr

00013b70 <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
   13b70:	b470      	push	{r4, r5, r6}
   13b72:	b083      	sub	sp, #12
     * */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
   13b74:	2300      	movs	r3, #0
   13b76:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
   13b78:	460c      	mov	r4, r1
   13b7a:	b151      	cbz	r1, 13b92 <lv_txt_utf8_next+0x22>

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
   13b7c:	6822      	ldr	r2, [r4, #0]
   13b7e:	5c83      	ldrb	r3, [r0, r2]
   13b80:	f013 0f80 	tst.w	r3, #128	; 0x80
   13b84:	d107      	bne.n	13b96 <lv_txt_utf8_next+0x26>
        result = txt[*i];
   13b86:	4618      	mov	r0, r3
        (*i)++;
   13b88:	3201      	adds	r2, #1
   13b8a:	6022      	str	r2, [r4, #0]
        else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
   13b8c:	b003      	add	sp, #12
   13b8e:	bc70      	pop	{r4, r5, r6}
   13b90:	4770      	bx	lr
    if(i == NULL) i = &i_tmp;
   13b92:	ac01      	add	r4, sp, #4
   13b94:	e7f2      	b.n	13b7c <lv_txt_utf8_next+0xc>
        if((txt[*i] & 0xE0) == 0xC0) {
   13b96:	f003 01e0 	and.w	r1, r3, #224	; 0xe0
   13b9a:	29c0      	cmp	r1, #192	; 0xc0
   13b9c:	d00b      	beq.n	13bb6 <lv_txt_utf8_next+0x46>
        else if((txt[*i] & 0xF0) == 0xE0) {
   13b9e:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
   13ba2:	29e0      	cmp	r1, #224	; 0xe0
   13ba4:	d019      	beq.n	13bda <lv_txt_utf8_next+0x6a>
        else if((txt[*i] & 0xF8) == 0xF0) {
   13ba6:	f003 01f8 	and.w	r1, r3, #248	; 0xf8
   13baa:	29f0      	cmp	r1, #240	; 0xf0
   13bac:	d033      	beq.n	13c16 <lv_txt_utf8_next+0xa6>
            (*i)++; /*Not UTF-8 char. Go the next.*/
   13bae:	3201      	adds	r2, #1
   13bb0:	6022      	str	r2, [r4, #0]
    uint32_t result = 0;
   13bb2:	2000      	movs	r0, #0
   13bb4:	e7ea      	b.n	13b8c <lv_txt_utf8_next+0x1c>
            (*i)++;
   13bb6:	1c51      	adds	r1, r2, #1
   13bb8:	6021      	str	r1, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   13bba:	5c40      	ldrb	r0, [r0, r1]
   13bbc:	f000 01c0 	and.w	r1, r0, #192	; 0xc0
   13bc0:	2980      	cmp	r1, #128	; 0x80
   13bc2:	d001      	beq.n	13bc8 <lv_txt_utf8_next+0x58>
   13bc4:	2000      	movs	r0, #0
   13bc6:	e7e1      	b.n	13b8c <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
   13bc8:	019b      	lsls	r3, r3, #6
   13bca:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
            result += (txt[*i] & 0x3F);
   13bce:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   13bd2:	4418      	add	r0, r3
            (*i)++;
   13bd4:	3202      	adds	r2, #2
   13bd6:	6022      	str	r2, [r4, #0]
   13bd8:	e7d8      	b.n	13b8c <lv_txt_utf8_next+0x1c>
            (*i)++;
   13bda:	1c51      	adds	r1, r2, #1
   13bdc:	6021      	str	r1, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   13bde:	5c41      	ldrb	r1, [r0, r1]
   13be0:	f001 05c0 	and.w	r5, r1, #192	; 0xc0
   13be4:	2d80      	cmp	r5, #128	; 0x80
   13be6:	d001      	beq.n	13bec <lv_txt_utf8_next+0x7c>
   13be8:	2000      	movs	r0, #0
   13bea:	e7cf      	b.n	13b8c <lv_txt_utf8_next+0x1c>
            (*i)++;
   13bec:	1c95      	adds	r5, r2, #2
   13bee:	6025      	str	r5, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   13bf0:	5d40      	ldrb	r0, [r0, r5]
   13bf2:	f000 05c0 	and.w	r5, r0, #192	; 0xc0
   13bf6:	2d80      	cmp	r5, #128	; 0x80
   13bf8:	d001      	beq.n	13bfe <lv_txt_utf8_next+0x8e>
   13bfa:	2000      	movs	r0, #0
   13bfc:	e7c6      	b.n	13b8c <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
   13bfe:	031b      	lsls	r3, r3, #12
   13c00:	b29b      	uxth	r3, r3
            result += (txt[*i] & 0x3F);
   13c02:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   13c06:	4403      	add	r3, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
   13c08:	0188      	lsls	r0, r1, #6
   13c0a:	f400 607c 	and.w	r0, r0, #4032	; 0xfc0
            result += (txt[*i] & 0x3F);
   13c0e:	4418      	add	r0, r3
            (*i)++;
   13c10:	3203      	adds	r2, #3
   13c12:	6022      	str	r2, [r4, #0]
   13c14:	e7ba      	b.n	13b8c <lv_txt_utf8_next+0x1c>
            (*i)++;
   13c16:	1c51      	adds	r1, r2, #1
   13c18:	6021      	str	r1, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   13c1a:	5c41      	ldrb	r1, [r0, r1]
   13c1c:	f001 05c0 	and.w	r5, r1, #192	; 0xc0
   13c20:	2d80      	cmp	r5, #128	; 0x80
   13c22:	d001      	beq.n	13c28 <lv_txt_utf8_next+0xb8>
   13c24:	2000      	movs	r0, #0
   13c26:	e7b1      	b.n	13b8c <lv_txt_utf8_next+0x1c>
            (*i)++;
   13c28:	1c95      	adds	r5, r2, #2
   13c2a:	6025      	str	r5, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   13c2c:	5d45      	ldrb	r5, [r0, r5]
   13c2e:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
   13c32:	2e80      	cmp	r6, #128	; 0x80
   13c34:	d001      	beq.n	13c3a <lv_txt_utf8_next+0xca>
   13c36:	2000      	movs	r0, #0
   13c38:	e7a8      	b.n	13b8c <lv_txt_utf8_next+0x1c>
            (*i)++;
   13c3a:	1cd6      	adds	r6, r2, #3
   13c3c:	6026      	str	r6, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   13c3e:	5d86      	ldrb	r6, [r0, r6]
   13c40:	f006 00c0 	and.w	r0, r6, #192	; 0xc0
   13c44:	2880      	cmp	r0, #128	; 0x80
   13c46:	d001      	beq.n	13c4c <lv_txt_utf8_next+0xdc>
   13c48:	2000      	movs	r0, #0
   13c4a:	e79f      	b.n	13b8c <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
   13c4c:	049b      	lsls	r3, r3, #18
   13c4e:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
   13c52:	0309      	lsls	r1, r1, #12
   13c54:	f401 307c 	and.w	r0, r1, #258048	; 0x3f000
   13c58:	4303      	orrs	r3, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
   13c5a:	01a8      	lsls	r0, r5, #6
   13c5c:	f400 607c 	and.w	r0, r0, #4032	; 0xfc0
            result += txt[*i] & 0x3F;
   13c60:	f006 063f 	and.w	r6, r6, #63	; 0x3f
   13c64:	4430      	add	r0, r6
   13c66:	4418      	add	r0, r3
            (*i)++;
   13c68:	3204      	adds	r2, #4
   13c6a:	6022      	str	r2, [r4, #0]
   13c6c:	e78e      	b.n	13b8c <lv_txt_utf8_next+0x1c>
	...

00013c70 <lv_txt_utf8_prev>:
 * @param i start byte index in 'txt' where to start. After the call it will point to the previous
 * UTF-8 char in 'txt'.
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_prev(const char * txt, uint32_t * i)
{
   13c70:	b5f0      	push	{r4, r5, r6, r7, lr}
   13c72:	b083      	sub	sp, #12
   13c74:	4606      	mov	r6, r0
   13c76:	460d      	mov	r5, r1
    uint8_t c_size;
    uint8_t cnt = 0;

    /*Try to find a !0 long UTF-8 char by stepping one character back*/
    (*i)--;
   13c78:	680b      	ldr	r3, [r1, #0]
   13c7a:	3b01      	subs	r3, #1
   13c7c:	600b      	str	r3, [r1, #0]
   13c7e:	2404      	movs	r4, #4
    do {
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/

        c_size = _lv_txt_encoded_size(&txt[*i]);
   13c80:	4f0e      	ldr	r7, [pc, #56]	; (13cbc <lv_txt_utf8_prev+0x4c>)
   13c82:	e005      	b.n	13c90 <lv_txt_utf8_prev+0x20>
        if(c_size == 0) {
            if(*i != 0)
                (*i)--;
   13c84:	3801      	subs	r0, #1
   13c86:	6028      	str	r0, [r5, #0]
   13c88:	1e63      	subs	r3, r4, #1
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
   13c8a:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
   13c8e:	d008      	beq.n	13ca2 <lv_txt_utf8_prev+0x32>
        c_size = _lv_txt_encoded_size(&txt[*i]);
   13c90:	6828      	ldr	r0, [r5, #0]
   13c92:	4430      	add	r0, r6
   13c94:	683b      	ldr	r3, [r7, #0]
   13c96:	4798      	blx	r3
        if(c_size == 0) {
   13c98:	b928      	cbnz	r0, 13ca6 <lv_txt_utf8_prev+0x36>
            if(*i != 0)
   13c9a:	6828      	ldr	r0, [r5, #0]
   13c9c:	2800      	cmp	r0, #0
   13c9e:	d1f1      	bne.n	13c84 <lv_txt_utf8_prev+0x14>
   13ca0:	e009      	b.n	13cb6 <lv_txt_utf8_prev+0x46>
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
   13ca2:	2000      	movs	r0, #0
   13ca4:	e007      	b.n	13cb6 <lv_txt_utf8_prev+0x46>
                return 0;
        }
        cnt++;
    } while(c_size == 0);

    uint32_t i_tmp  = *i;
   13ca6:	682b      	ldr	r3, [r5, #0]
   13ca8:	a902      	add	r1, sp, #8
   13caa:	f841 3d04 	str.w	r3, [r1, #-4]!
    uint32_t letter = _lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
   13cae:	4b03      	ldr	r3, [pc, #12]	; (13cbc <lv_txt_utf8_prev+0x4c>)
   13cb0:	685b      	ldr	r3, [r3, #4]
   13cb2:	4630      	mov	r0, r6
   13cb4:	4798      	blx	r3

    return letter;
}
   13cb6:	b003      	add	sp, #12
   13cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13cba:	bf00      	nop
   13cbc:	20000054 	.word	0x20000054

00013cc0 <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
   13cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t i;
    uint32_t byte_cnt = 0;
    for(i = 0; i < utf8_id; i++) {
   13cc4:	460e      	mov	r6, r1
   13cc6:	b191      	cbz	r1, 13cee <lv_txt_utf8_get_byte_id+0x2e>
   13cc8:	4607      	mov	r7, r0
   13cca:	2400      	movs	r4, #0
   13ccc:	4625      	mov	r5, r4
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
   13cce:	f8df 8024 	ldr.w	r8, [pc, #36]	; 13cf4 <lv_txt_utf8_get_byte_id+0x34>
   13cd2:	1938      	adds	r0, r7, r4
   13cd4:	f8d8 3000 	ldr.w	r3, [r8]
   13cd8:	4798      	blx	r3
        byte_cnt += c_size > 0 ? c_size : 1;
   13cda:	2800      	cmp	r0, #0
   13cdc:	bf08      	it	eq
   13cde:	2001      	moveq	r0, #1
   13ce0:	4404      	add	r4, r0
    for(i = 0; i < utf8_id; i++) {
   13ce2:	3501      	adds	r5, #1
   13ce4:	42ae      	cmp	r6, r5
   13ce6:	d1f4      	bne.n	13cd2 <lv_txt_utf8_get_byte_id+0x12>
    }

    return byte_cnt;
}
   13ce8:	4620      	mov	r0, r4
   13cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t byte_cnt = 0;
   13cee:	460c      	mov	r4, r1
    return byte_cnt;
   13cf0:	e7fa      	b.n	13ce8 <lv_txt_utf8_get_byte_id+0x28>
   13cf2:	bf00      	nop
   13cf4:	20000054 	.word	0x20000054

00013cf8 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
   13cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
   13cfa:	b083      	sub	sp, #12
    uint32_t i        = 0;
   13cfc:	2300      	movs	r3, #0
   13cfe:	9301      	str	r3, [sp, #4]
    uint32_t char_cnt = 0;

    while(i < byte_id) {
   13d00:	460d      	mov	r5, r1
   13d02:	b169      	cbz	r1, 13d20 <lv_txt_utf8_get_char_id+0x28>
   13d04:	4606      	mov	r6, r0
   13d06:	461c      	mov	r4, r3
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
   13d08:	4f06      	ldr	r7, [pc, #24]	; (13d24 <lv_txt_utf8_get_char_id+0x2c>)
   13d0a:	a901      	add	r1, sp, #4
   13d0c:	4630      	mov	r0, r6
   13d0e:	687b      	ldr	r3, [r7, #4]
   13d10:	4798      	blx	r3
        char_cnt++;
   13d12:	3401      	adds	r4, #1
    while(i < byte_id) {
   13d14:	9b01      	ldr	r3, [sp, #4]
   13d16:	42ab      	cmp	r3, r5
   13d18:	d3f7      	bcc.n	13d0a <lv_txt_utf8_get_char_id+0x12>
    }

    return char_cnt;
}
   13d1a:	4620      	mov	r0, r4
   13d1c:	b003      	add	sp, #12
   13d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t char_cnt = 0;
   13d20:	460c      	mov	r4, r1
    return char_cnt;
   13d22:	e7fa      	b.n	13d1a <lv_txt_utf8_get_char_id+0x22>
   13d24:	20000054 	.word	0x20000054

00013d28 <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
   13d28:	b570      	push	{r4, r5, r6, lr}
   13d2a:	b082      	sub	sp, #8
    uint32_t len = 0;
    uint32_t i   = 0;
   13d2c:	2300      	movs	r3, #0
   13d2e:	9301      	str	r3, [sp, #4]

    while(txt[i] != '\0') {
   13d30:	7803      	ldrb	r3, [r0, #0]
   13d32:	b173      	cbz	r3, 13d52 <lv_txt_utf8_get_length+0x2a>
   13d34:	4604      	mov	r4, r0
   13d36:	2500      	movs	r5, #0
        _lv_txt_encoded_next(txt, &i);
   13d38:	4e07      	ldr	r6, [pc, #28]	; (13d58 <lv_txt_utf8_get_length+0x30>)
   13d3a:	a901      	add	r1, sp, #4
   13d3c:	4620      	mov	r0, r4
   13d3e:	6873      	ldr	r3, [r6, #4]
   13d40:	4798      	blx	r3
        len++;
   13d42:	3501      	adds	r5, #1
    while(txt[i] != '\0') {
   13d44:	9b01      	ldr	r3, [sp, #4]
   13d46:	5ce3      	ldrb	r3, [r4, r3]
   13d48:	2b00      	cmp	r3, #0
   13d4a:	d1f6      	bne.n	13d3a <lv_txt_utf8_get_length+0x12>
    }

    return len;
}
   13d4c:	4628      	mov	r0, r5
   13d4e:	b002      	add	sp, #8
   13d50:	bd70      	pop	{r4, r5, r6, pc}
    uint32_t len = 0;
   13d52:	2500      	movs	r5, #0
    return len;
   13d54:	e7fa      	b.n	13d4c <lv_txt_utf8_get_length+0x24>
   13d56:	bf00      	nop
   13d58:	20000054 	.word	0x20000054

00013d5c <_lv_txt_is_cmd>:
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
   13d5c:	2923      	cmp	r1, #35	; 0x23
   13d5e:	d004      	beq.n	13d6a <_lv_txt_is_cmd+0xe>
    if(*state == LV_TXT_CMD_STATE_PAR) {
   13d60:	7803      	ldrb	r3, [r0, #0]
   13d62:	2b01      	cmp	r3, #1
   13d64:	d015      	beq.n	13d92 <_lv_txt_is_cmd+0x36>
    bool ret = false;
   13d66:	2000      	movs	r0, #0
   13d68:	4770      	bx	lr
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
   13d6a:	7803      	ldrb	r3, [r0, #0]
   13d6c:	b91b      	cbnz	r3, 13d76 <_lv_txt_is_cmd+0x1a>
            *state = LV_TXT_CMD_STATE_PAR;
   13d6e:	2301      	movs	r3, #1
   13d70:	7003      	strb	r3, [r0, #0]
        ret = true;
   13d72:	4618      	mov	r0, r3
   13d74:	4770      	bx	lr
        else if(*state == LV_TXT_CMD_STATE_PAR) {
   13d76:	2b01      	cmp	r3, #1
   13d78:	d003      	beq.n	13d82 <_lv_txt_is_cmd+0x26>
        else if(*state == LV_TXT_CMD_STATE_IN) {
   13d7a:	2b02      	cmp	r3, #2
   13d7c:	d005      	beq.n	13d8a <_lv_txt_is_cmd+0x2e>
    bool ret = false;
   13d7e:	2000      	movs	r0, #0
}
   13d80:	4770      	bx	lr
            *state = LV_TXT_CMD_STATE_WAIT;
   13d82:	2300      	movs	r3, #0
   13d84:	7003      	strb	r3, [r0, #0]
    bool ret = false;
   13d86:	4618      	mov	r0, r3
   13d88:	4770      	bx	lr
            *state = LV_TXT_CMD_STATE_WAIT;
   13d8a:	2300      	movs	r3, #0
   13d8c:	7003      	strb	r3, [r0, #0]
            ret    = true;
   13d8e:	2001      	movs	r0, #1
   13d90:	4770      	bx	lr
        if(c == ' ') {
   13d92:	2920      	cmp	r1, #32
   13d94:	d103      	bne.n	13d9e <_lv_txt_is_cmd+0x42>
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
   13d96:	2302      	movs	r3, #2
   13d98:	7003      	strb	r3, [r0, #0]
        ret = true;
   13d9a:	2001      	movs	r0, #1
   13d9c:	4770      	bx	lr
   13d9e:	2001      	movs	r0, #1
   13da0:	4770      	bx	lr
	...

00013da4 <_lv_txt_get_next_line>:
{
   13da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13da8:	b091      	sub	sp, #68	; 0x44
   13daa:	9105      	str	r1, [sp, #20]
   13dac:	9206      	str	r2, [sp, #24]
   13dae:	9307      	str	r3, [sp, #28]
   13db0:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
   13db4:	9304      	str	r3, [sp, #16]
    if(txt == NULL) return 0;
   13db6:	9008      	str	r0, [sp, #32]
   13db8:	2800      	cmp	r0, #0
   13dba:	f000 80f0 	beq.w	13f9e <_lv_txt_get_next_line+0x1fa>
    if(font == NULL) return 0;
   13dbe:	2900      	cmp	r1, #0
   13dc0:	f000 80ef 	beq.w	13fa2 <_lv_txt_get_next_line+0x1fe>
    if((flag & LV_TXT_FLAG_EXPAND) || (flag & LV_TXT_FLAG_FIT)) {
   13dc4:	f013 0f12 	tst.w	r3, #18
   13dc8:	d017      	beq.n	13dfa <_lv_txt_get_next_line+0x56>
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
   13dca:	7803      	ldrb	r3, [r0, #0]
   13dcc:	2b0a      	cmp	r3, #10
   13dce:	f000 80ea 	beq.w	13fa6 <_lv_txt_get_next_line+0x202>
   13dd2:	2b0d      	cmp	r3, #13
   13dd4:	f000 80ed 	beq.w	13fb2 <_lv_txt_get_next_line+0x20e>
   13dd8:	2b00      	cmp	r3, #0
   13dda:	f000 80ec 	beq.w	13fb6 <_lv_txt_get_next_line+0x212>
   13dde:	4601      	mov	r1, r0
   13de0:	2200      	movs	r2, #0
   13de2:	3201      	adds	r2, #1
   13de4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   13de8:	2b0a      	cmp	r3, #10
   13dea:	f000 80dd 	beq.w	13fa8 <_lv_txt_get_next_line+0x204>
   13dee:	2b0d      	cmp	r3, #13
   13df0:	f000 80da 	beq.w	13fa8 <_lv_txt_get_next_line+0x204>
   13df4:	2b00      	cmp	r3, #0
   13df6:	d1f4      	bne.n	13de2 <_lv_txt_get_next_line+0x3e>
   13df8:	e0d7      	b.n	13faa <_lv_txt_get_next_line+0x206>
   13dfa:	9b04      	ldr	r3, [sp, #16]
   13dfc:	f003 0302 	and.w	r3, r3, #2
   13e00:	461a      	mov	r2, r3
   13e02:	930b      	str	r3, [sp, #44]	; 0x2c
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   13e04:	f647 4318 	movw	r3, #31768	; 0x7c18
   13e08:	9907      	ldr	r1, [sp, #28]
   13e0a:	2a00      	cmp	r2, #0
   13e0c:	bf18      	it	ne
   13e0e:	4619      	movne	r1, r3
   13e10:	9107      	str	r1, [sp, #28]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
   13e12:	2300      	movs	r3, #0
   13e14:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
    uint32_t i = 0;                                        /* Iterating index into txt */
   13e18:	930e      	str	r3, [sp, #56]	; 0x38
    letter = _lv_txt_encoded_next(txt, &i_next);
   13e1a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 13fc8 <_lv_txt_get_next_line+0x224>
{
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
   13e1e:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 13fcc <_lv_txt_get_next_line+0x228>
    while(txt[i] != '\0' && max_width > 0) {
   13e22:	e078      	b.n	13f16 <_lv_txt_get_next_line+0x172>
        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
   13e24:	9a01      	ldr	r2, [sp, #4]
   13e26:	4621      	mov	r1, r4
   13e28:	9805      	ldr	r0, [sp, #20]
   13e2a:	4b64      	ldr	r3, [pc, #400]	; (13fbc <_lv_txt_get_next_line+0x218>)
   13e2c:	4798      	blx	r3
        cur_w += letter_w;
   13e2e:	4405      	add	r5, r0
   13e30:	b2ad      	uxth	r5, r5
        if(letter_w > 0) {
   13e32:	b200      	sxth	r0, r0
   13e34:	2800      	cmp	r0, #0
   13e36:	dd02      	ble.n	13e3e <_lv_txt_get_next_line+0x9a>
            cur_w += letter_space;
   13e38:	9b06      	ldr	r3, [sp, #24]
   13e3a:	441d      	add	r5, r3
   13e3c:	b2ad      	uxth	r5, r5
   13e3e:	b22d      	sxth	r5, r5
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
   13e40:	f1b7 3fff 	cmp.w	r7, #4294967295
   13e44:	d038      	beq.n	13eb8 <_lv_txt_get_next_line+0x114>
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
   13e46:	f1a4 020a 	sub.w	r2, r4, #10
   13e4a:	2a16      	cmp	r2, #22
   13e4c:	d83b      	bhi.n	13ec6 <_lv_txt_get_next_line+0x122>
   13e4e:	4b5c      	ldr	r3, [pc, #368]	; (13fc0 <_lv_txt_get_next_line+0x21c>)
   13e50:	40d3      	lsrs	r3, r2
   13e52:	f013 0f01 	tst.w	r3, #1
   13e56:	d139      	bne.n	13ecc <_lv_txt_get_next_line+0x128>
   13e58:	2301      	movs	r3, #1
   13e5a:	222c      	movs	r2, #44	; 0x2c
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
   13e5c:	4294      	cmp	r4, r2
   13e5e:	d035      	beq.n	13ecc <_lv_txt_get_next_line+0x128>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
   13e60:	3301      	adds	r3, #1
   13e62:	b2db      	uxtb	r3, r3
   13e64:	f81a 2003 	ldrb.w	r2, [sl, r3]
   13e68:	2a00      	cmp	r2, #0
   13e6a:	d1f7      	bne.n	13e5c <_lv_txt_get_next_line+0xb8>
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
   13e6c:	f1b7 3fff 	cmp.w	r7, #4294967295
   13e70:	bf08      	it	eq
   13e72:	46ab      	moveq	fp, r5
        i = i_next;
   13e74:	9e0c      	ldr	r6, [sp, #48]	; 0x30
        i_next = i_next_next;
   13e76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13e78:	930c      	str	r3, [sp, #48]	; 0x30
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
   13e7a:	9b03      	ldr	r3, [sp, #12]
   13e7c:	9302      	str	r3, [sp, #8]
   13e7e:	9c01      	ldr	r4, [sp, #4]
    while(txt[i] != '\0') {
   13e80:	f818 3006 	ldrb.w	r3, [r8, r6]
   13e84:	2b00      	cmp	r3, #0
   13e86:	d06e      	beq.n	13f66 <_lv_txt_get_next_line+0x1c2>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
   13e88:	f8d9 3004 	ldr.w	r3, [r9, #4]
   13e8c:	a90d      	add	r1, sp, #52	; 0x34
   13e8e:	4640      	mov	r0, r8
   13e90:	4798      	blx	r3
   13e92:	9001      	str	r0, [sp, #4]
        word_len++;
   13e94:	9b02      	ldr	r3, [sp, #8]
   13e96:	3301      	adds	r3, #1
   13e98:	9303      	str	r3, [sp, #12]
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   13e9a:	9b04      	ldr	r3, [sp, #16]
   13e9c:	f013 0f01 	tst.w	r3, #1
   13ea0:	d0c0      	beq.n	13e24 <_lv_txt_get_next_line+0x80>
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
   13ea2:	4621      	mov	r1, r4
   13ea4:	f10d 003f 	add.w	r0, sp, #63	; 0x3f
   13ea8:	4b46      	ldr	r3, [pc, #280]	; (13fc4 <_lv_txt_get_next_line+0x220>)
   13eaa:	4798      	blx	r3
   13eac:	2800      	cmp	r0, #0
   13eae:	d0b9      	beq.n	13e24 <_lv_txt_get_next_line+0x80>
                i = i_next;
   13eb0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
                i_next = i_next_next;
   13eb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13eb4:	930c      	str	r3, [sp, #48]	; 0x30
   13eb6:	e7e0      	b.n	13e7a <_lv_txt_get_next_line+0xd6>
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
   13eb8:	9b06      	ldr	r3, [sp, #24]
   13eba:	1aeb      	subs	r3, r5, r3
   13ebc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13ebe:	4293      	cmp	r3, r2
   13ec0:	bfc8      	it	gt
   13ec2:	4637      	movgt	r7, r6
   13ec4:	e7bf      	b.n	13e46 <_lv_txt_get_next_line+0xa2>
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
   13ec6:	2301      	movs	r3, #1
   13ec8:	222c      	movs	r2, #44	; 0x2c
   13eca:	e7c7      	b.n	13e5c <_lv_txt_get_next_line+0xb8>
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
   13ecc:	2e00      	cmp	r6, #0
   13ece:	d14a      	bne.n	13f66 <_lv_txt_get_next_line+0x1c2>
   13ed0:	f1b7 3fff 	cmp.w	r7, #4294967295
   13ed4:	d14a      	bne.n	13f6c <_lv_txt_get_next_line+0x1c8>
   13ed6:	46ab      	mov	fp, r5
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
   13ed8:	9b02      	ldr	r3, [sp, #8]
   13eda:	b123      	cbz	r3, 13ee6 <_lv_txt_get_next_line+0x142>
   13edc:	2c0d      	cmp	r4, #13
   13ede:	d103      	bne.n	13ee8 <_lv_txt_get_next_line+0x144>
   13ee0:	9b01      	ldr	r3, [sp, #4]
   13ee2:	2b0a      	cmp	r3, #10
   13ee4:	d100      	bne.n	13ee8 <_lv_txt_get_next_line+0x144>
   13ee6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
        return i;
   13ee8:	b2b6      	uxth	r6, r6
        max_width -= word_w;
   13eea:	9b07      	ldr	r3, [sp, #28]
   13eec:	eba3 0b0b 	sub.w	fp, r3, fp
   13ef0:	fa0f f38b 	sxth.w	r3, fp
   13ef4:	9307      	str	r3, [sp, #28]
        if(advance == 0) {
   13ef6:	2e00      	cmp	r6, #0
   13ef8:	d03a      	beq.n	13f70 <_lv_txt_get_next_line+0x1cc>
        i += advance;
   13efa:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   13efc:	443e      	add	r6, r7
   13efe:	960e      	str	r6, [sp, #56]	; 0x38
        if(txt[0] == '\n' || txt[0] == '\r') break;
   13f00:	9a08      	ldr	r2, [sp, #32]
   13f02:	7813      	ldrb	r3, [r2, #0]
   13f04:	2b0a      	cmp	r3, #10
   13f06:	d03f      	beq.n	13f88 <_lv_txt_get_next_line+0x1e4>
   13f08:	2b0d      	cmp	r3, #13
   13f0a:	d03d      	beq.n	13f88 <_lv_txt_get_next_line+0x1e4>
        if(txt[i] == '\n' || txt[i] == '\r') {
   13f0c:	5d93      	ldrb	r3, [r2, r6]
   13f0e:	2b0a      	cmp	r3, #10
   13f10:	d038      	beq.n	13f84 <_lv_txt_get_next_line+0x1e0>
   13f12:	2b0d      	cmp	r3, #13
   13f14:	d036      	beq.n	13f84 <_lv_txt_get_next_line+0x1e0>
    while(txt[i] != '\0' && max_width > 0) {
   13f16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13f18:	930a      	str	r3, [sp, #40]	; 0x28
   13f1a:	9908      	ldr	r1, [sp, #32]
   13f1c:	eb01 0803 	add.w	r8, r1, r3
   13f20:	5ccb      	ldrb	r3, [r1, r3]
   13f22:	2b00      	cmp	r3, #0
   13f24:	d030      	beq.n	13f88 <_lv_txt_get_next_line+0x1e4>
   13f26:	9b07      	ldr	r3, [sp, #28]
   13f28:	2b00      	cmp	r3, #0
   13f2a:	dd2d      	ble.n	13f88 <_lv_txt_get_next_line+0x1e4>
    if(txt == NULL || txt[0] == '\0') return 0;
   13f2c:	f1b8 0f00 	cmp.w	r8, #0
   13f30:	d01e      	beq.n	13f70 <_lv_txt_get_next_line+0x1cc>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   13f32:	f647 4318 	movw	r3, #31768	; 0x7c18
   13f36:	9a07      	ldr	r2, [sp, #28]
   13f38:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13f3a:	2900      	cmp	r1, #0
   13f3c:	bf08      	it	eq
   13f3e:	4613      	moveq	r3, r2
   13f40:	9309      	str	r3, [sp, #36]	; 0x24
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
   13f42:	2600      	movs	r6, #0
   13f44:	960c      	str	r6, [sp, #48]	; 0x30
   13f46:	960d      	str	r6, [sp, #52]	; 0x34
    letter = _lv_txt_encoded_next(txt, &i_next);
   13f48:	f8d9 3004 	ldr.w	r3, [r9, #4]
   13f4c:	a90c      	add	r1, sp, #48	; 0x30
   13f4e:	4640      	mov	r0, r8
   13f50:	4798      	blx	r3
   13f52:	4604      	mov	r4, r0
    i_next_next = i_next;
   13f54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13f56:	930d      	str	r3, [sp, #52]	; 0x34
        uint32_t word_w = 0;
   13f58:	46b3      	mov	fp, r6
    uint32_t break_index = NO_BREAK_FOUND; /* only used for "long" words */
   13f5a:	f04f 37ff 	mov.w	r7, #4294967295
    uint32_t word_len = 0;   /* Number of characters in the transversed word */
   13f5e:	9602      	str	r6, [sp, #8]
    lv_coord_t cur_w = 0;  /* Pixel Width of transversed string */
   13f60:	4635      	mov	r5, r6
    uint32_t letter_next = 0; /* Letter at i_next */
   13f62:	9601      	str	r6, [sp, #4]
   13f64:	e78c      	b.n	13e80 <_lv_txt_get_next_line+0xdc>
    if(break_index == NO_BREAK_FOUND) {
   13f66:	f1b7 3fff 	cmp.w	r7, #4294967295
   13f6a:	d0b5      	beq.n	13ed8 <_lv_txt_get_next_line+0x134>
    if(force) return break_index;
   13f6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13f6e:	b13b      	cbz	r3, 13f80 <_lv_txt_get_next_line+0x1dc>
            if(i == 0) _lv_txt_encoded_next(txt, &i); // prevent inf loops
   13f70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13f72:	b95b      	cbnz	r3, 13f8c <_lv_txt_get_next_line+0x1e8>
   13f74:	4b14      	ldr	r3, [pc, #80]	; (13fc8 <_lv_txt_get_next_line+0x224>)
   13f76:	685b      	ldr	r3, [r3, #4]
   13f78:	a90e      	add	r1, sp, #56	; 0x38
   13f7a:	9808      	ldr	r0, [sp, #32]
   13f7c:	4798      	blx	r3
   13f7e:	e003      	b.n	13f88 <_lv_txt_get_next_line+0x1e4>
    if(force) return break_index;
   13f80:	b2be      	uxth	r6, r7
   13f82:	e7b2      	b.n	13eea <_lv_txt_get_next_line+0x146>
            i++;  /* Include the following newline in the current line */
   13f84:	3601      	adds	r6, #1
   13f86:	960e      	str	r6, [sp, #56]	; 0x38
    if(i == 0) {
   13f88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13f8a:	b113      	cbz	r3, 13f92 <_lv_txt_get_next_line+0x1ee>
    return i;
   13f8c:	f8bd 0038 	ldrh.w	r0, [sp, #56]	; 0x38
   13f90:	e00c      	b.n	13fac <_lv_txt_get_next_line+0x208>
        _lv_txt_encoded_next(txt, &i);
   13f92:	4b0d      	ldr	r3, [pc, #52]	; (13fc8 <_lv_txt_get_next_line+0x224>)
   13f94:	685b      	ldr	r3, [r3, #4]
   13f96:	a90e      	add	r1, sp, #56	; 0x38
   13f98:	9808      	ldr	r0, [sp, #32]
   13f9a:	4798      	blx	r3
   13f9c:	e7f6      	b.n	13f8c <_lv_txt_get_next_line+0x1e8>
    if(txt == NULL) return 0;
   13f9e:	2000      	movs	r0, #0
   13fa0:	e004      	b.n	13fac <_lv_txt_get_next_line+0x208>
    if(font == NULL) return 0;
   13fa2:	2000      	movs	r0, #0
   13fa4:	e002      	b.n	13fac <_lv_txt_get_next_line+0x208>
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
   13fa6:	2200      	movs	r2, #0
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
   13fa8:	3201      	adds	r2, #1
        return i;
   13faa:	b290      	uxth	r0, r2
}
   13fac:	b011      	add	sp, #68	; 0x44
   13fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
   13fb2:	2200      	movs	r2, #0
   13fb4:	e7f8      	b.n	13fa8 <_lv_txt_get_next_line+0x204>
   13fb6:	2200      	movs	r2, #0
   13fb8:	e7f7      	b.n	13faa <_lv_txt_get_next_line+0x206>
   13fba:	bf00      	nop
   13fbc:	00010055 	.word	0x00010055
   13fc0:	00400009 	.word	0x00400009
   13fc4:	00013d5d 	.word	0x00013d5d
   13fc8:	20000054 	.word	0x20000054
   13fcc:	00029508 	.word	0x00029508

00013fd0 <_lv_txt_get_width>:
{
   13fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fd4:	b085      	sub	sp, #20
    if(txt == NULL) return 0;
   13fd6:	2800      	cmp	r0, #0
   13fd8:	d040      	beq.n	1405c <_lv_txt_get_width+0x8c>
   13fda:	4605      	mov	r5, r0
    if(font == NULL) return 0;
   13fdc:	2a00      	cmp	r2, #0
   13fde:	d03f      	beq.n	14060 <_lv_txt_get_width+0x90>
    uint32_t i                   = 0;
   13fe0:	2000      	movs	r0, #0
   13fe2:	9003      	str	r0, [sp, #12]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
   13fe4:	f88d 000b 	strb.w	r0, [sp, #11]
    if(length != 0) {
   13fe8:	b149      	cbz	r1, 13ffe <_lv_txt_get_width+0x2e>
   13fea:	469b      	mov	fp, r3
   13fec:	9201      	str	r2, [sp, #4]
   13fee:	4689      	mov	r9, r1
   13ff0:	2400      	movs	r4, #0
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
   13ff2:	4f1c      	ldr	r7, [pc, #112]	; (14064 <_lv_txt_get_width+0x94>)
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   13ff4:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   13ff8:	f00a 0a01 	and.w	sl, sl, #1
   13ffc:	e00c      	b.n	14018 <_lv_txt_get_width+0x48>
    lv_coord_t width             = 0;
   13ffe:	4604      	mov	r4, r0
   14000:	e028      	b.n	14054 <_lv_txt_get_width+0x84>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
   14002:	4642      	mov	r2, r8
   14004:	4631      	mov	r1, r6
   14006:	9801      	ldr	r0, [sp, #4]
   14008:	4b17      	ldr	r3, [pc, #92]	; (14068 <_lv_txt_get_width+0x98>)
   1400a:	4798      	blx	r3
            if(char_width > 0) {
   1400c:	b203      	sxth	r3, r0
   1400e:	2b00      	cmp	r3, #0
   14010:	dd02      	ble.n	14018 <_lv_txt_get_width+0x48>
                width += letter_space;
   14012:	445c      	add	r4, fp
   14014:	4404      	add	r4, r0
   14016:	b224      	sxth	r4, r4
        while(i < length) {
   14018:	9b03      	ldr	r3, [sp, #12]
   1401a:	4599      	cmp	r9, r3
   1401c:	d915      	bls.n	1404a <_lv_txt_get_width+0x7a>
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
   1401e:	687b      	ldr	r3, [r7, #4]
   14020:	a903      	add	r1, sp, #12
   14022:	4628      	mov	r0, r5
   14024:	4798      	blx	r3
   14026:	4606      	mov	r6, r0
            uint32_t letter_next = _lv_txt_encoded_next(&txt[i], NULL);
   14028:	687b      	ldr	r3, [r7, #4]
   1402a:	2100      	movs	r1, #0
   1402c:	9803      	ldr	r0, [sp, #12]
   1402e:	4428      	add	r0, r5
   14030:	4798      	blx	r3
   14032:	4680      	mov	r8, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   14034:	f1ba 0f00 	cmp.w	sl, #0
   14038:	d0e3      	beq.n	14002 <_lv_txt_get_width+0x32>
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
   1403a:	4631      	mov	r1, r6
   1403c:	f10d 000b 	add.w	r0, sp, #11
   14040:	4b0a      	ldr	r3, [pc, #40]	; (1406c <_lv_txt_get_width+0x9c>)
   14042:	4798      	blx	r3
   14044:	2800      	cmp	r0, #0
   14046:	d1e7      	bne.n	14018 <_lv_txt_get_width+0x48>
   14048:	e7db      	b.n	14002 <_lv_txt_get_width+0x32>
        if(width > 0) {
   1404a:	2c00      	cmp	r4, #0
   1404c:	dd02      	ble.n	14054 <_lv_txt_get_width+0x84>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
   1404e:	eba4 040b 	sub.w	r4, r4, fp
   14052:	b224      	sxth	r4, r4
}
   14054:	4620      	mov	r0, r4
   14056:	b005      	add	sp, #20
   14058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(txt == NULL) return 0;
   1405c:	2400      	movs	r4, #0
   1405e:	e7f9      	b.n	14054 <_lv_txt_get_width+0x84>
    if(font == NULL) return 0;
   14060:	2400      	movs	r4, #0
   14062:	e7f7      	b.n	14054 <_lv_txt_get_width+0x84>
   14064:	20000054 	.word	0x20000054
   14068:	00010055 	.word	0x00010055
   1406c:	00013d5d 	.word	0x00013d5d

00014070 <_lv_txt_get_size>:
{
   14070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14074:	b089      	sub	sp, #36	; 0x24
   14076:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	; 0x48
   1407a:	9406      	str	r4, [sp, #24]
   1407c:	f9bd 504c 	ldrsh.w	r5, [sp, #76]	; 0x4c
   14080:	f89d 8050 	ldrb.w	r8, [sp, #80]	; 0x50
    size_res->x = 0;
   14084:	2400      	movs	r4, #0
   14086:	8004      	strh	r4, [r0, #0]
    size_res->y = 0;
   14088:	8044      	strh	r4, [r0, #2]
    if(text == NULL) return;
   1408a:	2900      	cmp	r1, #0
   1408c:	d05b      	beq.n	14146 <_lv_txt_get_size+0xd6>
   1408e:	460f      	mov	r7, r1
    if(font == NULL) return;
   14090:	2a00      	cmp	r2, #0
   14092:	d058      	beq.n	14146 <_lv_txt_get_size+0xd6>
   14094:	9303      	str	r3, [sp, #12]
   14096:	4611      	mov	r1, r2
   14098:	9202      	str	r2, [sp, #8]
   1409a:	4604      	mov	r4, r0
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   1409c:	f008 0302 	and.w	r3, r8, #2
   140a0:	f647 4218 	movw	r2, #31768	; 0x7c18
   140a4:	2b00      	cmp	r3, #0
   140a6:	bf18      	it	ne
   140a8:	4615      	movne	r5, r2
   140aa:	9504      	str	r5, [sp, #16]
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
   140ac:	f9b1 2008 	ldrsh.w	r2, [r1, #8]
   140b0:	9207      	str	r2, [sp, #28]
    uint16_t letter_height = lv_font_get_line_height(font);
   140b2:	fa1f fa82 	uxth.w	sl, r2
    while(text[line_start] != '\0') {
   140b6:	783b      	ldrb	r3, [r7, #0]
   140b8:	2b00      	cmp	r3, #0
   140ba:	d04c      	beq.n	14156 <_lv_txt_get_size+0xe6>
   140bc:	463e      	mov	r6, r7
   140be:	2500      	movs	r5, #0
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
   140c0:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 14174 <_lv_txt_get_size+0x104>
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
   140c4:	9b06      	ldr	r3, [sp, #24]
   140c6:	449a      	add	sl, r3
   140c8:	fa1f f98a 	uxth.w	r9, sl
   140cc:	4647      	mov	r7, r8
   140ce:	46b0      	mov	r8, r6
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
   140d0:	9700      	str	r7, [sp, #0]
   140d2:	9b04      	ldr	r3, [sp, #16]
   140d4:	9a03      	ldr	r2, [sp, #12]
   140d6:	9902      	ldr	r1, [sp, #8]
   140d8:	4630      	mov	r0, r6
   140da:	47d8      	blx	fp
   140dc:	4405      	add	r5, r0
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
   140de:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   140e2:	eb0a 0203 	add.w	r2, sl, r3
   140e6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   140ea:	d224      	bcs.n	14136 <_lv_txt_get_size+0xc6>
   140ec:	f8cd 9014 	str.w	r9, [sp, #20]
            size_res->y += line_space;
   140f0:	444b      	add	r3, r9
   140f2:	8063      	strh	r3, [r4, #2]
        lv_coord_t act_line_length = _lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
   140f4:	9700      	str	r7, [sp, #0]
   140f6:	9b03      	ldr	r3, [sp, #12]
   140f8:	9a02      	ldr	r2, [sp, #8]
   140fa:	4601      	mov	r1, r0
   140fc:	4630      	mov	r0, r6
   140fe:	4e18      	ldr	r6, [pc, #96]	; (14160 <_lv_txt_get_size+0xf0>)
   14100:	47b0      	blx	r6
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
   14102:	f9b4 3000 	ldrsh.w	r3, [r4]
   14106:	4298      	cmp	r0, r3
   14108:	bfb8      	it	lt
   1410a:	4618      	movlt	r0, r3
   1410c:	8020      	strh	r0, [r4, #0]
    while(text[line_start] != '\0') {
   1410e:	eb08 0605 	add.w	r6, r8, r5
   14112:	f818 3005 	ldrb.w	r3, [r8, r5]
   14116:	2b00      	cmp	r3, #0
   14118:	d1da      	bne.n	140d0 <_lv_txt_get_size+0x60>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
   1411a:	b12d      	cbz	r5, 14128 <_lv_txt_get_size+0xb8>
   1411c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   14120:	2b0a      	cmp	r3, #10
   14122:	d013      	beq.n	1414c <_lv_txt_get_size+0xdc>
   14124:	2b0d      	cmp	r3, #13
   14126:	d011      	beq.n	1414c <_lv_txt_get_size+0xdc>
    if(size_res->y == 0)
   14128:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   1412c:	b19b      	cbz	r3, 14156 <_lv_txt_get_size+0xe6>
        size_res->y -= line_space;
   1412e:	9a06      	ldr	r2, [sp, #24]
   14130:	1a9b      	subs	r3, r3, r2
   14132:	8063      	strh	r3, [r4, #2]
   14134:	e007      	b.n	14146 <_lv_txt_get_size+0xd6>
            LV_LOG_WARN("lv_txt_get_size: integer overflow while calculating text height");
   14136:	4b0b      	ldr	r3, [pc, #44]	; (14164 <_lv_txt_get_size+0xf4>)
   14138:	9300      	str	r3, [sp, #0]
   1413a:	4b0b      	ldr	r3, [pc, #44]	; (14168 <_lv_txt_get_size+0xf8>)
   1413c:	2271      	movs	r2, #113	; 0x71
   1413e:	490b      	ldr	r1, [pc, #44]	; (1416c <_lv_txt_get_size+0xfc>)
   14140:	2002      	movs	r0, #2
   14142:	4c0b      	ldr	r4, [pc, #44]	; (14170 <_lv_txt_get_size+0x100>)
   14144:	47a0      	blx	r4
}
   14146:	b009      	add	sp, #36	; 0x24
   14148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        size_res->y += letter_height + line_space;
   1414c:	8863      	ldrh	r3, [r4, #2]
   1414e:	9a05      	ldr	r2, [sp, #20]
   14150:	441a      	add	r2, r3
   14152:	8062      	strh	r2, [r4, #2]
   14154:	e7e8      	b.n	14128 <_lv_txt_get_size+0xb8>
        size_res->y = letter_height;
   14156:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   1415a:	8063      	strh	r3, [r4, #2]
   1415c:	e7f3      	b.n	14146 <_lv_txt_get_size+0xd6>
   1415e:	bf00      	nop
   14160:	00013fd1 	.word	0x00013fd1
   14164:	00029538 	.word	0x00029538
   14168:	000294f4 	.word	0x000294f4
   1416c:	00029510 	.word	0x00029510
   14170:	00012251 	.word	0x00012251
   14174:	00013da5 	.word	0x00013da5

00014178 <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
   14178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1417c:	4681      	mov	r9, r0
   1417e:	468a      	mov	sl, r1
   14180:	461f      	mov	r7, r3
   14182:	f8dd 8020 	ldr.w	r8, [sp, #32]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
   14186:	4614      	mov	r4, r2
   14188:	b932      	cbnz	r2, 14198 <_lv_utils_bsearch+0x20>
        }
        else {
            return (char *)middle;
        }
    }
    return NULL;
   1418a:	2000      	movs	r0, #0
   1418c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if(c < 0) {
   14190:	2800      	cmp	r0, #0
   14192:	da14      	bge.n	141be <_lv_utils_bsearch+0x46>
            n /= 2;
   14194:	462c      	mov	r4, r5
    for(middle = base; n != 0;) {
   14196:	b17c      	cbz	r4, 141b8 <_lv_utils_bsearch+0x40>
        middle += (n / 2) * size;
   14198:	0865      	lsrs	r5, r4, #1
   1419a:	fb07 a605 	mla	r6, r7, r5, sl
        if((c = (*cmp)(key, middle)) > 0) {
   1419e:	4631      	mov	r1, r6
   141a0:	4648      	mov	r0, r9
   141a2:	47c0      	blx	r8
   141a4:	2800      	cmp	r0, #0
   141a6:	ddf3      	ble.n	14190 <_lv_utils_bsearch+0x18>
            n    = (n / 2) - ((n & 1) == 0);
   141a8:	f084 0401 	eor.w	r4, r4, #1
   141ac:	f004 0401 	and.w	r4, r4, #1
   141b0:	1b2c      	subs	r4, r5, r4
            base = (middle += size);
   141b2:	eb06 0a07 	add.w	sl, r6, r7
   141b6:	e7ee      	b.n	14196 <_lv_utils_bsearch+0x1e>
    return NULL;
   141b8:	2000      	movs	r0, #0
   141ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        middle += (n / 2) * size;
   141be:	4630      	mov	r0, r6
}
   141c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000141c4 <lv_theme_set_act>:
 * From now, all the created objects will use styles from this theme by default
 * @param th pointer to theme (return value of: 'lv_theme_init_xxx()')
 */
void lv_theme_set_act(lv_theme_t * th)
{
    act_theme = th;
   141c4:	4b01      	ldr	r3, [pc, #4]	; (141cc <lv_theme_set_act+0x8>)
   141c6:	6018      	str	r0, [r3, #0]
   141c8:	4770      	bx	lr
   141ca:	bf00      	nop
   141cc:	2000c5d0 	.word	0x2000c5d0

000141d0 <lv_theme_get_font_normal>:
 * Get the normal font of the theme
 * @return pointer to the font
 */
const lv_font_t * lv_theme_get_font_normal(void)
{
    return act_theme->font_normal;
   141d0:	4b01      	ldr	r3, [pc, #4]	; (141d8 <lv_theme_get_font_normal+0x8>)
   141d2:	681b      	ldr	r3, [r3, #0]
}
   141d4:	68d8      	ldr	r0, [r3, #12]
   141d6:	4770      	bx	lr
   141d8:	2000c5d0 	.word	0x2000c5d0

000141dc <lv_theme_apply>:
{
    return act_theme->flags;
}

void lv_theme_apply(lv_obj_t * obj, lv_theme_style_t name)
{
   141dc:	b508      	push	{r3, lr}
    act_theme->apply_xcb(obj, name);
   141de:	4b02      	ldr	r3, [pc, #8]	; (141e8 <lv_theme_apply+0xc>)
   141e0:	681b      	ldr	r3, [r3, #0]
   141e2:	681b      	ldr	r3, [r3, #0]
   141e4:	4798      	blx	r3
   141e6:	bd08      	pop	{r3, pc}
   141e8:	2000c5d0 	.word	0x2000c5d0

000141ec <theme_apply>:
    return &theme;
}


static void theme_apply(lv_obj_t * obj, lv_theme_style_t name)
{
   141ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   141f0:	4604      	mov	r4, r0
    lv_style_list_t * list;

    switch(name) {
   141f2:	3901      	subs	r1, #1
   141f4:	2927      	cmp	r1, #39	; 0x27
   141f6:	d834      	bhi.n	14262 <theme_apply+0x76>
   141f8:	e8df f011 	tbh	[pc, r1, lsl #1]
   141fc:	00390028 	.word	0x00390028
   14200:	00a100ec 	.word	0x00a100ec
   14204:	00600053 	.word	0x00600053
   14208:	00d803a3 	.word	0x00d803a3
   1420c:	02b20144 	.word	0x02b20144
   14210:	03cc0046 	.word	0x03cc0046
   14214:	03fe0273 	.word	0x03fe0273
   14218:	00e000dc 	.word	0x00e000dc
   1421c:	00e40081 	.word	0x00e40081
   14220:	00e80193 	.word	0x00e80193
   14224:	02660247 	.word	0x02660247
   14228:	016a03e3 	.word	0x016a03e3
   1422c:	023f017c 	.word	0x023f017c
   14230:	022301a0 	.word	0x022301a0
   14234:	0375011f 	.word	0x0375011f
   14238:	01080391 	.word	0x01080391
   1423c:	02e000b8 	.word	0x02e000b8
   14240:	01f401c9 	.word	0x01f401c9
   14244:	02040347 	.word	0x02040347
   14248:	033a0312 	.word	0x033a0312
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
   1424c:	2100      	movs	r1, #0
   1424e:	4b9b      	ldr	r3, [pc, #620]	; (144bc <theme_apply+0x2d0>)
   14250:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
   14252:	2100      	movs	r1, #0
   14254:	4620      	mov	r0, r4
   14256:	4b9a      	ldr	r3, [pc, #616]	; (144c0 <theme_apply+0x2d4>)
   14258:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->scr);
   1425a:	4b9a      	ldr	r3, [pc, #616]	; (144c4 <theme_apply+0x2d8>)
   1425c:	6819      	ldr	r1, [r3, #0]
   1425e:	4b9a      	ldr	r3, [pc, #616]	; (144c8 <theme_apply+0x2dc>)
   14260:	4798      	blx	r3
#endif
        default:
            break;
    }

    lv_obj_refresh_style(obj, LV_STYLE_PROP_ALL);
   14262:	21ff      	movs	r1, #255	; 0xff
   14264:	4620      	mov	r0, r4
   14266:	4b99      	ldr	r3, [pc, #612]	; (144cc <theme_apply+0x2e0>)
   14268:	4798      	blx	r3
   1426a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
   1426e:	2100      	movs	r1, #0
   14270:	4b92      	ldr	r3, [pc, #584]	; (144bc <theme_apply+0x2d0>)
   14272:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
   14274:	2100      	movs	r1, #0
   14276:	4620      	mov	r0, r4
   14278:	4b91      	ldr	r3, [pc, #580]	; (144c0 <theme_apply+0x2d4>)
   1427a:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->bg);
   1427c:	4b91      	ldr	r3, [pc, #580]	; (144c4 <theme_apply+0x2d8>)
   1427e:	6819      	ldr	r1, [r3, #0]
   14280:	3104      	adds	r1, #4
   14282:	4b91      	ldr	r3, [pc, #580]	; (144c8 <theme_apply+0x2dc>)
   14284:	4798      	blx	r3
            break;
   14286:	e7ec      	b.n	14262 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
   14288:	2100      	movs	r1, #0
   1428a:	4b8c      	ldr	r3, [pc, #560]	; (144bc <theme_apply+0x2d0>)
   1428c:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_CONT_PART_MAIN);
   1428e:	2100      	movs	r1, #0
   14290:	4620      	mov	r0, r4
   14292:	4b8b      	ldr	r3, [pc, #556]	; (144c0 <theme_apply+0x2d4>)
   14294:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->bg);
   14296:	4b8b      	ldr	r3, [pc, #556]	; (144c4 <theme_apply+0x2d8>)
   14298:	6819      	ldr	r1, [r3, #0]
   1429a:	3104      	adds	r1, #4
   1429c:	4b8a      	ldr	r3, [pc, #552]	; (144c8 <theme_apply+0x2dc>)
   1429e:	4798      	blx	r3
            break;
   142a0:	e7df      	b.n	14262 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
   142a2:	2100      	movs	r1, #0
   142a4:	4b85      	ldr	r3, [pc, #532]	; (144bc <theme_apply+0x2d0>)
   142a6:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
   142a8:	2100      	movs	r1, #0
   142aa:	4620      	mov	r0, r4
   142ac:	4b84      	ldr	r3, [pc, #528]	; (144c0 <theme_apply+0x2d4>)
   142ae:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->btn);
   142b0:	4b84      	ldr	r3, [pc, #528]	; (144c4 <theme_apply+0x2d8>)
   142b2:	6819      	ldr	r1, [r3, #0]
   142b4:	3110      	adds	r1, #16
   142b6:	4b84      	ldr	r3, [pc, #528]	; (144c8 <theme_apply+0x2dc>)
   142b8:	4798      	blx	r3
            break;
   142ba:	e7d2      	b.n	14262 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_BTNMATRIX_PART_BG);
   142bc:	2100      	movs	r1, #0
   142be:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 144bc <theme_apply+0x2d0>
   142c2:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BG);
   142c4:	2100      	movs	r1, #0
   142c6:	4620      	mov	r0, r4
   142c8:	4f7d      	ldr	r7, [pc, #500]	; (144c0 <theme_apply+0x2d4>)
   142ca:	47b8      	blx	r7
   142cc:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bg);
   142ce:	4e7d      	ldr	r6, [pc, #500]	; (144c4 <theme_apply+0x2d8>)
   142d0:	6831      	ldr	r1, [r6, #0]
   142d2:	3104      	adds	r1, #4
   142d4:	4d7c      	ldr	r5, [pc, #496]	; (144c8 <theme_apply+0x2dc>)
   142d6:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
   142d8:	6831      	ldr	r1, [r6, #0]
   142da:	3118      	adds	r1, #24
   142dc:	4648      	mov	r0, r9
   142de:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_BTNMATRIX_PART_BTN);
   142e0:	2101      	movs	r1, #1
   142e2:	4620      	mov	r0, r4
   142e4:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BTN);
   142e6:	2101      	movs	r1, #1
   142e8:	4620      	mov	r0, r4
   142ea:	47b8      	blx	r7
   142ec:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
   142ee:	6831      	ldr	r1, [r6, #0]
   142f0:	3104      	adds	r1, #4
   142f2:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
   142f4:	6831      	ldr	r1, [r6, #0]
   142f6:	3108      	adds	r1, #8
   142f8:	4638      	mov	r0, r7
   142fa:	47a8      	blx	r5
            break;
   142fc:	e7b1      	b.n	14262 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_KEYBOARD_PART_BG);
   142fe:	2100      	movs	r1, #0
   14300:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 144bc <theme_apply+0x2d0>
   14304:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_KEYBOARD_PART_BG);
   14306:	2100      	movs	r1, #0
   14308:	4620      	mov	r0, r4
   1430a:	4f6d      	ldr	r7, [pc, #436]	; (144c0 <theme_apply+0x2d4>)
   1430c:	47b8      	blx	r7
   1430e:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->scr);
   14310:	4e6c      	ldr	r6, [pc, #432]	; (144c4 <theme_apply+0x2d8>)
   14312:	6831      	ldr	r1, [r6, #0]
   14314:	4d6c      	ldr	r5, [pc, #432]	; (144c8 <theme_apply+0x2dc>)
   14316:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->kb_bg);
   14318:	6831      	ldr	r1, [r6, #0]
   1431a:	3168      	adds	r1, #104	; 0x68
   1431c:	4648      	mov	r0, r9
   1431e:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_KEYBOARD_PART_BTN);
   14320:	2101      	movs	r1, #1
   14322:	4620      	mov	r0, r4
   14324:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_KEYBOARD_PART_BTN);
   14326:	2101      	movs	r1, #1
   14328:	4620      	mov	r0, r4
   1432a:	47b8      	blx	r7
   1432c:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
   1432e:	6831      	ldr	r1, [r6, #0]
   14330:	3104      	adds	r1, #4
   14332:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
   14334:	6831      	ldr	r1, [r6, #0]
   14336:	3108      	adds	r1, #8
   14338:	4638      	mov	r0, r7
   1433a:	47a8      	blx	r5
            break;
   1433c:	e791      	b.n	14262 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_BAR_PART_BG);
   1433e:	2100      	movs	r1, #0
   14340:	f8df 8178 	ldr.w	r8, [pc, #376]	; 144bc <theme_apply+0x2d0>
   14344:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_BAR_PART_BG);
   14346:	2100      	movs	r1, #0
   14348:	4620      	mov	r0, r4
   1434a:	4f5d      	ldr	r7, [pc, #372]	; (144c0 <theme_apply+0x2d4>)
   1434c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_bg);
   1434e:	4e5d      	ldr	r6, [pc, #372]	; (144c4 <theme_apply+0x2d8>)
   14350:	6831      	ldr	r1, [r6, #0]
   14352:	3124      	adds	r1, #36	; 0x24
   14354:	4d5c      	ldr	r5, [pc, #368]	; (144c8 <theme_apply+0x2dc>)
   14356:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_BAR_PART_INDIC);
   14358:	2101      	movs	r1, #1
   1435a:	4620      	mov	r0, r4
   1435c:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_BAR_PART_INDIC);
   1435e:	2101      	movs	r1, #1
   14360:	4620      	mov	r0, r4
   14362:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_indic);
   14364:	6831      	ldr	r1, [r6, #0]
   14366:	3128      	adds	r1, #40	; 0x28
   14368:	47a8      	blx	r5
            break;
   1436a:	e77a      	b.n	14262 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_BG);
   1436c:	2100      	movs	r1, #0
   1436e:	f8df 814c 	ldr.w	r8, [pc, #332]	; 144bc <theme_apply+0x2d0>
   14372:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_BG);
   14374:	2100      	movs	r1, #0
   14376:	4620      	mov	r0, r4
   14378:	4f51      	ldr	r7, [pc, #324]	; (144c0 <theme_apply+0x2d4>)
   1437a:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_bg);
   1437c:	4e51      	ldr	r6, [pc, #324]	; (144c4 <theme_apply+0x2d8>)
   1437e:	6831      	ldr	r1, [r6, #0]
   14380:	3124      	adds	r1, #36	; 0x24
   14382:	4d51      	ldr	r5, [pc, #324]	; (144c8 <theme_apply+0x2dc>)
   14384:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_INDIC);
   14386:	2101      	movs	r1, #1
   14388:	4620      	mov	r0, r4
   1438a:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_INDIC);
   1438c:	2101      	movs	r1, #1
   1438e:	4620      	mov	r0, r4
   14390:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_indic);
   14392:	6831      	ldr	r1, [r6, #0]
   14394:	3128      	adds	r1, #40	; 0x28
   14396:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_KNOB);
   14398:	2102      	movs	r1, #2
   1439a:	4620      	mov	r0, r4
   1439c:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_KNOB);
   1439e:	2102      	movs	r1, #2
   143a0:	4620      	mov	r0, r4
   143a2:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sw_knob);
   143a4:	6831      	ldr	r1, [r6, #0]
   143a6:	319c      	adds	r1, #156	; 0x9c
   143a8:	47a8      	blx	r5
            break;
   143aa:	e75a      	b.n	14262 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_CANVAS_PART_MAIN);
   143ac:	2100      	movs	r1, #0
   143ae:	4b43      	ldr	r3, [pc, #268]	; (144bc <theme_apply+0x2d0>)
   143b0:	4798      	blx	r3
            break;
   143b2:	e756      	b.n	14262 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_IMG_PART_MAIN);
   143b4:	2100      	movs	r1, #0
   143b6:	4b41      	ldr	r3, [pc, #260]	; (144bc <theme_apply+0x2d0>)
   143b8:	4798      	blx	r3
            break;
   143ba:	e752      	b.n	14262 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_IMG_PART_MAIN);
   143bc:	2100      	movs	r1, #0
   143be:	4b3f      	ldr	r3, [pc, #252]	; (144bc <theme_apply+0x2d0>)
   143c0:	4798      	blx	r3
            break;
   143c2:	e74e      	b.n	14262 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_LABEL_PART_MAIN);
   143c4:	2100      	movs	r1, #0
   143c6:	4b3d      	ldr	r3, [pc, #244]	; (144bc <theme_apply+0x2d0>)
   143c8:	4798      	blx	r3
            break;
   143ca:	e74a      	b.n	14262 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_LABEL_PART_MAIN);
   143cc:	2100      	movs	r1, #0
   143ce:	4b3b      	ldr	r3, [pc, #236]	; (144bc <theme_apply+0x2d0>)
   143d0:	4798      	blx	r3
            break;
   143d2:	e746      	b.n	14262 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_ARC_PART_BG);
   143d4:	2100      	movs	r1, #0
   143d6:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 144bc <theme_apply+0x2d0>
   143da:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_ARC_PART_BG);
   143dc:	2100      	movs	r1, #0
   143de:	4620      	mov	r0, r4
   143e0:	4f37      	ldr	r7, [pc, #220]	; (144c0 <theme_apply+0x2d4>)
   143e2:	47b8      	blx	r7
   143e4:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bg);
   143e6:	4e37      	ldr	r6, [pc, #220]	; (144c4 <theme_apply+0x2d8>)
   143e8:	6831      	ldr	r1, [r6, #0]
   143ea:	3104      	adds	r1, #4
   143ec:	4d36      	ldr	r5, [pc, #216]	; (144c8 <theme_apply+0x2dc>)
   143ee:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->arc_bg);
   143f0:	6831      	ldr	r1, [r6, #0]
   143f2:	3120      	adds	r1, #32
   143f4:	4648      	mov	r0, r9
   143f6:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_ARC_PART_INDIC);
   143f8:	2101      	movs	r1, #1
   143fa:	4620      	mov	r0, r4
   143fc:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_ARC_PART_INDIC);
   143fe:	2101      	movs	r1, #1
   14400:	4620      	mov	r0, r4
   14402:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->arc_indic);
   14404:	6831      	ldr	r1, [r6, #0]
   14406:	311c      	adds	r1, #28
   14408:	47a8      	blx	r5
            break;
   1440a:	e72a      	b.n	14262 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_SPINNER_PART_BG);
   1440c:	2100      	movs	r1, #0
   1440e:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 144bc <theme_apply+0x2d0>
   14412:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SPINNER_PART_BG);
   14414:	2100      	movs	r1, #0
   14416:	4620      	mov	r0, r4
   14418:	4f29      	ldr	r7, [pc, #164]	; (144c0 <theme_apply+0x2d4>)
   1441a:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->arc_bg);
   1441c:	4e29      	ldr	r6, [pc, #164]	; (144c4 <theme_apply+0x2d8>)
   1441e:	6831      	ldr	r1, [r6, #0]
   14420:	3120      	adds	r1, #32
   14422:	4d29      	ldr	r5, [pc, #164]	; (144c8 <theme_apply+0x2dc>)
   14424:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SPINNER_PART_INDIC);
   14426:	2101      	movs	r1, #1
   14428:	4620      	mov	r0, r4
   1442a:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SPINNER_PART_INDIC);
   1442c:	2101      	movs	r1, #1
   1442e:	4620      	mov	r0, r4
   14430:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->arc_indic);
   14432:	6831      	ldr	r1, [r6, #0]
   14434:	311c      	adds	r1, #28
   14436:	47a8      	blx	r5
            break;
   14438:	e713      	b.n	14262 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_BG);
   1443a:	2100      	movs	r1, #0
   1443c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 144bc <theme_apply+0x2d0>
   14440:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_BG);
   14442:	2100      	movs	r1, #0
   14444:	4620      	mov	r0, r4
   14446:	4f1e      	ldr	r7, [pc, #120]	; (144c0 <theme_apply+0x2d4>)
   14448:	47b8      	blx	r7
   1444a:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bar_bg);
   1444c:	4e1d      	ldr	r6, [pc, #116]	; (144c4 <theme_apply+0x2d8>)
   1444e:	6831      	ldr	r1, [r6, #0]
   14450:	3124      	adds	r1, #36	; 0x24
   14452:	4d1d      	ldr	r5, [pc, #116]	; (144c8 <theme_apply+0x2dc>)
   14454:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->slider_bg);
   14456:	6831      	ldr	r1, [r6, #0]
   14458:	3194      	adds	r1, #148	; 0x94
   1445a:	4648      	mov	r0, r9
   1445c:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_INDIC);
   1445e:	2101      	movs	r1, #1
   14460:	4620      	mov	r0, r4
   14462:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_INDIC);
   14464:	2101      	movs	r1, #1
   14466:	4620      	mov	r0, r4
   14468:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_indic);
   1446a:	6831      	ldr	r1, [r6, #0]
   1446c:	3128      	adds	r1, #40	; 0x28
   1446e:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_KNOB);
   14470:	2102      	movs	r1, #2
   14472:	4620      	mov	r0, r4
   14474:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_KNOB);
   14476:	2102      	movs	r1, #2
   14478:	4620      	mov	r0, r4
   1447a:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->slider_knob);
   1447c:	6831      	ldr	r1, [r6, #0]
   1447e:	3190      	adds	r1, #144	; 0x90
   14480:	47a8      	blx	r5
            break;
   14482:	e6ee      	b.n	14262 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_CHECKBOX_PART_BG);
   14484:	2100      	movs	r1, #0
   14486:	f8df 8034 	ldr.w	r8, [pc, #52]	; 144bc <theme_apply+0x2d0>
   1448a:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BG);
   1448c:	2100      	movs	r1, #0
   1448e:	4620      	mov	r0, r4
   14490:	4f0b      	ldr	r7, [pc, #44]	; (144c0 <theme_apply+0x2d4>)
   14492:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->cb_bg);
   14494:	4e0b      	ldr	r6, [pc, #44]	; (144c4 <theme_apply+0x2d8>)
   14496:	6831      	ldr	r1, [r6, #0]
   14498:	314c      	adds	r1, #76	; 0x4c
   1449a:	4d0b      	ldr	r5, [pc, #44]	; (144c8 <theme_apply+0x2dc>)
   1449c:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CHECKBOX_PART_BULLET);
   1449e:	2140      	movs	r1, #64	; 0x40
   144a0:	4620      	mov	r0, r4
   144a2:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BULLET);
   144a4:	2140      	movs	r1, #64	; 0x40
   144a6:	4620      	mov	r0, r4
   144a8:	47b8      	blx	r7
   144aa:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->btn);
   144ac:	6831      	ldr	r1, [r6, #0]
   144ae:	3110      	adds	r1, #16
   144b0:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->cb_bullet);
   144b2:	6831      	ldr	r1, [r6, #0]
   144b4:	3150      	adds	r1, #80	; 0x50
   144b6:	4638      	mov	r0, r7
   144b8:	47a8      	blx	r5
            break;
   144ba:	e6d2      	b.n	14262 <theme_apply+0x76>
   144bc:	000030c1 	.word	0x000030c1
   144c0:	00002ff1 	.word	0x00002ff1
   144c4:	2000c5d4 	.word	0x2000c5d4
   144c8:	000065cd 	.word	0x000065cd
   144cc:	00003a8d 	.word	0x00003a8d
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BG);
   144d0:	2100      	movs	r1, #0
   144d2:	4b9f      	ldr	r3, [pc, #636]	; (14750 <theme_apply+0x564>)
   144d4:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BG);
   144d6:	2100      	movs	r1, #0
   144d8:	4620      	mov	r0, r4
   144da:	4b9e      	ldr	r3, [pc, #632]	; (14754 <theme_apply+0x568>)
   144dc:	4798      	blx	r3
   144de:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
   144e0:	4e9d      	ldr	r6, [pc, #628]	; (14758 <theme_apply+0x56c>)
   144e2:	6831      	ldr	r1, [r6, #0]
   144e4:	3104      	adds	r1, #4
   144e6:	4d9d      	ldr	r5, [pc, #628]	; (1475c <theme_apply+0x570>)
   144e8:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->mbox_bg);
   144ea:	6831      	ldr	r1, [r6, #0]
   144ec:	317c      	adds	r1, #124	; 0x7c
   144ee:	4638      	mov	r0, r7
   144f0:	47a8      	blx	r5
            break;
   144f2:	e6b6      	b.n	14262 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BTN_BG);
   144f4:	2140      	movs	r1, #64	; 0x40
   144f6:	f8df 8258 	ldr.w	r8, [pc, #600]	; 14750 <theme_apply+0x564>
   144fa:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BTN_BG);
   144fc:	2140      	movs	r1, #64	; 0x40
   144fe:	4620      	mov	r0, r4
   14500:	4f94      	ldr	r7, [pc, #592]	; (14754 <theme_apply+0x568>)
   14502:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->pad_small);
   14504:	4e94      	ldr	r6, [pc, #592]	; (14758 <theme_apply+0x56c>)
   14506:	6831      	ldr	r1, [r6, #0]
   14508:	3118      	adds	r1, #24
   1450a:	4d94      	ldr	r5, [pc, #592]	; (1475c <theme_apply+0x570>)
   1450c:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BTN);
   1450e:	2141      	movs	r1, #65	; 0x41
   14510:	4620      	mov	r0, r4
   14512:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BTN);
   14514:	2141      	movs	r1, #65	; 0x41
   14516:	4620      	mov	r0, r4
   14518:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->btn);
   1451a:	6831      	ldr	r1, [r6, #0]
   1451c:	3110      	adds	r1, #16
   1451e:	47a8      	blx	r5
            break;
   14520:	e69f      	b.n	14262 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_LED_PART_MAIN);
   14522:	2100      	movs	r1, #0
   14524:	4b8a      	ldr	r3, [pc, #552]	; (14750 <theme_apply+0x564>)
   14526:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_LED_PART_MAIN);
   14528:	2100      	movs	r1, #0
   1452a:	4620      	mov	r0, r4
   1452c:	4b89      	ldr	r3, [pc, #548]	; (14754 <theme_apply+0x568>)
   1452e:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->led);
   14530:	4b89      	ldr	r3, [pc, #548]	; (14758 <theme_apply+0x56c>)
   14532:	6819      	ldr	r1, [r3, #0]
   14534:	316c      	adds	r1, #108	; 0x6c
   14536:	4b89      	ldr	r3, [pc, #548]	; (1475c <theme_apply+0x570>)
   14538:	4798      	blx	r3
            break;
   1453a:	e692      	b.n	14262 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_PAGE_PART_BG);
   1453c:	2100      	movs	r1, #0
   1453e:	f8df 8210 	ldr.w	r8, [pc, #528]	; 14750 <theme_apply+0x564>
   14542:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_BG);
   14544:	2100      	movs	r1, #0
   14546:	4620      	mov	r0, r4
   14548:	4f82      	ldr	r7, [pc, #520]	; (14754 <theme_apply+0x568>)
   1454a:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bg);
   1454c:	4e82      	ldr	r6, [pc, #520]	; (14758 <theme_apply+0x56c>)
   1454e:	6831      	ldr	r1, [r6, #0]
   14550:	3104      	adds	r1, #4
   14552:	4d82      	ldr	r5, [pc, #520]	; (1475c <theme_apply+0x570>)
   14554:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLABLE);
   14556:	2140      	movs	r1, #64	; 0x40
   14558:	4620      	mov	r0, r4
   1455a:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLABLE);
   1455c:	2140      	movs	r1, #64	; 0x40
   1455e:	4620      	mov	r0, r4
   14560:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->pad_inner);
   14562:	6831      	ldr	r1, [r6, #0]
   14564:	3114      	adds	r1, #20
   14566:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLBAR);
   14568:	2101      	movs	r1, #1
   1456a:	4620      	mov	r0, r4
   1456c:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLBAR);
   1456e:	2101      	movs	r1, #1
   14570:	4620      	mov	r0, r4
   14572:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
   14574:	6831      	ldr	r1, [r6, #0]
   14576:	3180      	adds	r1, #128	; 0x80
   14578:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_PAGE_PART_EDGE_FLASH);
   1457a:	2102      	movs	r1, #2
   1457c:	4620      	mov	r0, r4
   1457e:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_EDGE_FLASH);
   14580:	2102      	movs	r1, #2
   14582:	4620      	mov	r0, r4
   14584:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->edge_flash);
   14586:	6831      	ldr	r1, [r6, #0]
   14588:	3184      	adds	r1, #132	; 0x84
   1458a:	47a8      	blx	r5
            break;
   1458c:	e669      	b.n	14262 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_BG);
   1458e:	2100      	movs	r1, #0
   14590:	4d6f      	ldr	r5, [pc, #444]	; (14750 <theme_apply+0x564>)
   14592:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_BG);
   14594:	2100      	movs	r1, #0
   14596:	4620      	mov	r0, r4
   14598:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 14754 <theme_apply+0x568>
   1459c:	47c0      	blx	r8
            _lv_style_list_add_style(list, &styles->scr);
   1459e:	4f6e      	ldr	r7, [pc, #440]	; (14758 <theme_apply+0x56c>)
   145a0:	6839      	ldr	r1, [r7, #0]
   145a2:	4e6e      	ldr	r6, [pc, #440]	; (1475c <theme_apply+0x570>)
   145a4:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_BG_SCRLLABLE);
   145a6:	2140      	movs	r1, #64	; 0x40
   145a8:	4620      	mov	r0, r4
   145aa:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_TAB_BG);
   145ac:	2141      	movs	r1, #65	; 0x41
   145ae:	4620      	mov	r0, r4
   145b0:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_TAB_BG);
   145b2:	2141      	movs	r1, #65	; 0x41
   145b4:	4620      	mov	r0, r4
   145b6:	47c0      	blx	r8
            _lv_style_list_add_style(list, &styles->tabview_btns_bg);
   145b8:	6839      	ldr	r1, [r7, #0]
   145ba:	31a8      	adds	r1, #168	; 0xa8
   145bc:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_INDIC);
   145be:	2143      	movs	r1, #67	; 0x43
   145c0:	4620      	mov	r0, r4
   145c2:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_INDIC);
   145c4:	2143      	movs	r1, #67	; 0x43
   145c6:	4620      	mov	r0, r4
   145c8:	47c0      	blx	r8
            _lv_style_list_add_style(list, &styles->tabview_indic);
   145ca:	6839      	ldr	r1, [r7, #0]
   145cc:	31ac      	adds	r1, #172	; 0xac
   145ce:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_TAB_BTN);
   145d0:	2142      	movs	r1, #66	; 0x42
   145d2:	4620      	mov	r0, r4
   145d4:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_TAB_BTN);
   145d6:	2142      	movs	r1, #66	; 0x42
   145d8:	4620      	mov	r0, r4
   145da:	47c0      	blx	r8
            _lv_style_list_add_style(list, &styles->tabview_btns);
   145dc:	6839      	ldr	r1, [r7, #0]
   145de:	31a4      	adds	r1, #164	; 0xa4
   145e0:	47b0      	blx	r6
            break;
   145e2:	e63e      	b.n	14262 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_PAGE_PART_BG);
   145e4:	2100      	movs	r1, #0
   145e6:	4d5a      	ldr	r5, [pc, #360]	; (14750 <theme_apply+0x564>)
   145e8:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLABLE);
   145ea:	2140      	movs	r1, #64	; 0x40
   145ec:	4620      	mov	r0, r4
   145ee:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLABLE);
   145f0:	2140      	movs	r1, #64	; 0x40
   145f2:	4620      	mov	r0, r4
   145f4:	4b57      	ldr	r3, [pc, #348]	; (14754 <theme_apply+0x568>)
   145f6:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->tabview_page_scrl);
   145f8:	4b57      	ldr	r3, [pc, #348]	; (14758 <theme_apply+0x56c>)
   145fa:	6819      	ldr	r1, [r3, #0]
   145fc:	31b0      	adds	r1, #176	; 0xb0
   145fe:	4b57      	ldr	r3, [pc, #348]	; (1475c <theme_apply+0x570>)
   14600:	4798      	blx	r3
            break;
   14602:	e62e      	b.n	14262 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_BG);
   14604:	2100      	movs	r1, #0
   14606:	f8df 8148 	ldr.w	r8, [pc, #328]	; 14750 <theme_apply+0x564>
   1460a:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_BG);
   1460c:	2100      	movs	r1, #0
   1460e:	4620      	mov	r0, r4
   14610:	4f50      	ldr	r7, [pc, #320]	; (14754 <theme_apply+0x568>)
   14612:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->scr);
   14614:	4e50      	ldr	r6, [pc, #320]	; (14758 <theme_apply+0x56c>)
   14616:	6831      	ldr	r1, [r6, #0]
   14618:	4d50      	ldr	r5, [pc, #320]	; (1475c <theme_apply+0x570>)
   1461a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_SCROLLBAR);
   1461c:	2101      	movs	r1, #1
   1461e:	4620      	mov	r0, r4
   14620:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_SCROLLBAR);
   14622:	2101      	movs	r1, #1
   14624:	4620      	mov	r0, r4
   14626:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
   14628:	6831      	ldr	r1, [r6, #0]
   1462a:	3180      	adds	r1, #128	; 0x80
   1462c:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_EDGE_FLASH);
   1462e:	2102      	movs	r1, #2
   14630:	4620      	mov	r0, r4
   14632:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_EDGE_FLASH);
   14634:	2102      	movs	r1, #2
   14636:	4620      	mov	r0, r4
   14638:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->edge_flash);
   1463a:	6831      	ldr	r1, [r6, #0]
   1463c:	3184      	adds	r1, #132	; 0x84
   1463e:	47a8      	blx	r5
            break;
   14640:	e60f      	b.n	14262 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_ROLLER_PART_BG);
   14642:	2100      	movs	r1, #0
   14644:	f8df 8108 	ldr.w	r8, [pc, #264]	; 14750 <theme_apply+0x564>
   14648:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_ROLLER_PART_BG);
   1464a:	2100      	movs	r1, #0
   1464c:	4620      	mov	r0, r4
   1464e:	4f41      	ldr	r7, [pc, #260]	; (14754 <theme_apply+0x568>)
   14650:	47b8      	blx	r7
   14652:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bg);
   14654:	4e40      	ldr	r6, [pc, #256]	; (14758 <theme_apply+0x56c>)
   14656:	6831      	ldr	r1, [r6, #0]
   14658:	3104      	adds	r1, #4
   1465a:	4d40      	ldr	r5, [pc, #256]	; (1475c <theme_apply+0x570>)
   1465c:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->roller_bg);
   1465e:	6831      	ldr	r1, [r6, #0]
   14660:	3188      	adds	r1, #136	; 0x88
   14662:	4648      	mov	r0, r9
   14664:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_ROLLER_PART_SELECTED);
   14666:	2103      	movs	r1, #3
   14668:	4620      	mov	r0, r4
   1466a:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_ROLLER_PART_SELECTED);
   1466c:	2103      	movs	r1, #3
   1466e:	4620      	mov	r0, r4
   14670:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->roller_sel);
   14672:	6831      	ldr	r1, [r6, #0]
   14674:	318c      	adds	r1, #140	; 0x8c
   14676:	47a8      	blx	r5
            break;
   14678:	e5f3      	b.n	14262 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_OBJMASK_PART_MAIN);
   1467a:	2100      	movs	r1, #0
   1467c:	4b34      	ldr	r3, [pc, #208]	; (14750 <theme_apply+0x564>)
   1467e:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_OBJMASK_PART_MAIN);
   14680:	2100      	movs	r1, #0
   14682:	4620      	mov	r0, r4
   14684:	4b33      	ldr	r3, [pc, #204]	; (14754 <theme_apply+0x568>)
   14686:	4798      	blx	r3
            break;
   14688:	e5eb      	b.n	14262 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_LIST_PART_BG);
   1468a:	2100      	movs	r1, #0
   1468c:	4f30      	ldr	r7, [pc, #192]	; (14750 <theme_apply+0x564>)
   1468e:	47b8      	blx	r7
            list = lv_obj_get_style_list(obj, LV_LIST_PART_BG);
   14690:	2100      	movs	r1, #0
   14692:	4620      	mov	r0, r4
   14694:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 14754 <theme_apply+0x568>
   14698:	47c0      	blx	r8
   1469a:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bg);
   1469c:	4e2e      	ldr	r6, [pc, #184]	; (14758 <theme_apply+0x56c>)
   1469e:	6831      	ldr	r1, [r6, #0]
   146a0:	3104      	adds	r1, #4
   146a2:	4d2e      	ldr	r5, [pc, #184]	; (1475c <theme_apply+0x570>)
   146a4:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->list_bg);
   146a6:	6831      	ldr	r1, [r6, #0]
   146a8:	3174      	adds	r1, #116	; 0x74
   146aa:	4648      	mov	r0, r9
   146ac:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_LIST_PART_SCROLLABLE);
   146ae:	2140      	movs	r1, #64	; 0x40
   146b0:	4620      	mov	r0, r4
   146b2:	47b8      	blx	r7
            lv_obj_clean_style_list(obj, LV_LIST_PART_SCROLLBAR);
   146b4:	2101      	movs	r1, #1
   146b6:	4620      	mov	r0, r4
   146b8:	47b8      	blx	r7
            list = lv_obj_get_style_list(obj, LV_LIST_PART_SCROLLBAR);
   146ba:	2101      	movs	r1, #1
   146bc:	4620      	mov	r0, r4
   146be:	47c0      	blx	r8
            _lv_style_list_add_style(list, &styles->sb);
   146c0:	6831      	ldr	r1, [r6, #0]
   146c2:	3180      	adds	r1, #128	; 0x80
   146c4:	47a8      	blx	r5
            break;
   146c6:	e5cc      	b.n	14262 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
   146c8:	2100      	movs	r1, #0
   146ca:	4b21      	ldr	r3, [pc, #132]	; (14750 <theme_apply+0x564>)
   146cc:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
   146ce:	2100      	movs	r1, #0
   146d0:	4620      	mov	r0, r4
   146d2:	4b20      	ldr	r3, [pc, #128]	; (14754 <theme_apply+0x568>)
   146d4:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->list_btn);
   146d6:	4b20      	ldr	r3, [pc, #128]	; (14758 <theme_apply+0x56c>)
   146d8:	6819      	ldr	r1, [r3, #0]
   146da:	3178      	adds	r1, #120	; 0x78
   146dc:	4b1f      	ldr	r3, [pc, #124]	; (1475c <theme_apply+0x570>)
   146de:	4798      	blx	r3
            break;
   146e0:	e5bf      	b.n	14262 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_MAIN);
   146e2:	2100      	movs	r1, #0
   146e4:	f8df 8068 	ldr.w	r8, [pc, #104]	; 14750 <theme_apply+0x564>
   146e8:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_MAIN);
   146ea:	2100      	movs	r1, #0
   146ec:	4620      	mov	r0, r4
   146ee:	4f19      	ldr	r7, [pc, #100]	; (14754 <theme_apply+0x568>)
   146f0:	47b8      	blx	r7
   146f2:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bg);
   146f4:	4e18      	ldr	r6, [pc, #96]	; (14758 <theme_apply+0x56c>)
   146f6:	6831      	ldr	r1, [r6, #0]
   146f8:	3104      	adds	r1, #4
   146fa:	4d18      	ldr	r5, [pc, #96]	; (1475c <theme_apply+0x570>)
   146fc:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
   146fe:	6831      	ldr	r1, [r6, #0]
   14700:	3108      	adds	r1, #8
   14702:	4648      	mov	r0, r9
   14704:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
   14706:	6831      	ldr	r1, [r6, #0]
   14708:	3118      	adds	r1, #24
   1470a:	4648      	mov	r0, r9
   1470c:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_LIST);
   1470e:	2140      	movs	r1, #64	; 0x40
   14710:	4620      	mov	r0, r4
   14712:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_LIST);
   14714:	2140      	movs	r1, #64	; 0x40
   14716:	4620      	mov	r0, r4
   14718:	47b8      	blx	r7
   1471a:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bg);
   1471c:	6831      	ldr	r1, [r6, #0]
   1471e:	3104      	adds	r1, #4
   14720:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->ddlist_page);
   14722:	6831      	ldr	r1, [r6, #0]
   14724:	3154      	adds	r1, #84	; 0x54
   14726:	4648      	mov	r0, r9
   14728:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_SCROLLBAR);
   1472a:	2141      	movs	r1, #65	; 0x41
   1472c:	4620      	mov	r0, r4
   1472e:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_SCROLLBAR);
   14730:	2141      	movs	r1, #65	; 0x41
   14732:	4620      	mov	r0, r4
   14734:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
   14736:	6831      	ldr	r1, [r6, #0]
   14738:	3180      	adds	r1, #128	; 0x80
   1473a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_SELECTED);
   1473c:	2142      	movs	r1, #66	; 0x42
   1473e:	4620      	mov	r0, r4
   14740:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_SELECTED);
   14742:	2142      	movs	r1, #66	; 0x42
   14744:	4620      	mov	r0, r4
   14746:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->ddlist_sel);
   14748:	6831      	ldr	r1, [r6, #0]
   1474a:	3158      	adds	r1, #88	; 0x58
   1474c:	47a8      	blx	r5
            break;
   1474e:	e588      	b.n	14262 <theme_apply+0x76>
   14750:	000030c1 	.word	0x000030c1
   14754:	00002ff1 	.word	0x00002ff1
   14758:	2000c5d4 	.word	0x2000c5d4
   1475c:	000065cd 	.word	0x000065cd
            lv_obj_clean_style_list(obj, LV_CHART_PART_BG);
   14760:	2100      	movs	r1, #0
   14762:	f8df 8290 	ldr.w	r8, [pc, #656]	; 149f4 <theme_apply+0x808>
   14766:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CHART_PART_BG);
   14768:	2100      	movs	r1, #0
   1476a:	4620      	mov	r0, r4
   1476c:	4f9e      	ldr	r7, [pc, #632]	; (149e8 <theme_apply+0x7fc>)
   1476e:	47b8      	blx	r7
   14770:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bg);
   14772:	4e9e      	ldr	r6, [pc, #632]	; (149ec <theme_apply+0x800>)
   14774:	6831      	ldr	r1, [r6, #0]
   14776:	3104      	adds	r1, #4
   14778:	4d9d      	ldr	r5, [pc, #628]	; (149f0 <theme_apply+0x804>)
   1477a:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->chart_bg);
   1477c:	6831      	ldr	r1, [r6, #0]
   1477e:	3140      	adds	r1, #64	; 0x40
   14780:	4648      	mov	r0, r9
   14782:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
   14784:	6831      	ldr	r1, [r6, #0]
   14786:	3118      	adds	r1, #24
   14788:	4648      	mov	r0, r9
   1478a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CHART_PART_SERIES_BG);
   1478c:	2101      	movs	r1, #1
   1478e:	4620      	mov	r0, r4
   14790:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES_BG);
   14792:	2101      	movs	r1, #1
   14794:	4620      	mov	r0, r4
   14796:	47b8      	blx	r7
   14798:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->pad_small);
   1479a:	6831      	ldr	r1, [r6, #0]
   1479c:	3118      	adds	r1, #24
   1479e:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->chart_series_bg);
   147a0:	6831      	ldr	r1, [r6, #0]
   147a2:	3144      	adds	r1, #68	; 0x44
   147a4:	4648      	mov	r0, r9
   147a6:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CHART_PART_SERIES);
   147a8:	2102      	movs	r1, #2
   147aa:	4620      	mov	r0, r4
   147ac:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES);
   147ae:	2102      	movs	r1, #2
   147b0:	4620      	mov	r0, r4
   147b2:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->chart_series);
   147b4:	6831      	ldr	r1, [r6, #0]
   147b6:	3148      	adds	r1, #72	; 0x48
   147b8:	47a8      	blx	r5
            break;
   147ba:	e552      	b.n	14262 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_TABLE_PART_BG);
   147bc:	2100      	movs	r1, #0
   147be:	f8df 8234 	ldr.w	r8, [pc, #564]	; 149f4 <theme_apply+0x808>
   147c2:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TABLE_PART_BG);
   147c4:	2100      	movs	r1, #0
   147c6:	4620      	mov	r0, r4
   147c8:	4f87      	ldr	r7, [pc, #540]	; (149e8 <theme_apply+0x7fc>)
   147ca:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bg);
   147cc:	4e87      	ldr	r6, [pc, #540]	; (149ec <theme_apply+0x800>)
   147ce:	6831      	ldr	r1, [r6, #0]
   147d0:	3104      	adds	r1, #4
   147d2:	4d87      	ldr	r5, [pc, #540]	; (149f0 <theme_apply+0x804>)
   147d4:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL1);
   147d6:	2101      	movs	r1, #1
   147d8:	4620      	mov	r0, r4
   147da:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TABLE_PART_CELL1);
   147dc:	2101      	movs	r1, #1
   147de:	4620      	mov	r0, r4
   147e0:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->table_cell);
   147e2:	6831      	ldr	r1, [r6, #0]
   147e4:	31a0      	adds	r1, #160	; 0xa0
   147e6:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL2);
   147e8:	2102      	movs	r1, #2
   147ea:	4620      	mov	r0, r4
   147ec:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TABLE_PART_CELL2);
   147ee:	2102      	movs	r1, #2
   147f0:	4620      	mov	r0, r4
   147f2:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->table_cell);
   147f4:	6831      	ldr	r1, [r6, #0]
   147f6:	31a0      	adds	r1, #160	; 0xa0
   147f8:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL3);
   147fa:	2103      	movs	r1, #3
   147fc:	4620      	mov	r0, r4
   147fe:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TABLE_PART_CELL3);
   14800:	2103      	movs	r1, #3
   14802:	4620      	mov	r0, r4
   14804:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->table_cell);
   14806:	6831      	ldr	r1, [r6, #0]
   14808:	31a0      	adds	r1, #160	; 0xa0
   1480a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL4);
   1480c:	2104      	movs	r1, #4
   1480e:	4620      	mov	r0, r4
   14810:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TABLE_PART_CELL4);
   14812:	2104      	movs	r1, #4
   14814:	4620      	mov	r0, r4
   14816:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->table_cell);
   14818:	6831      	ldr	r1, [r6, #0]
   1481a:	31a0      	adds	r1, #160	; 0xa0
   1481c:	47a8      	blx	r5
            break;
   1481e:	e520      	b.n	14262 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_WIN_PART_BG);
   14820:	2100      	movs	r1, #0
   14822:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 149f4 <theme_apply+0x808>
   14826:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_WIN_PART_BG);
   14828:	2100      	movs	r1, #0
   1482a:	4620      	mov	r0, r4
   1482c:	4f6e      	ldr	r7, [pc, #440]	; (149e8 <theme_apply+0x7fc>)
   1482e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->scr);
   14830:	4e6e      	ldr	r6, [pc, #440]	; (149ec <theme_apply+0x800>)
   14832:	6831      	ldr	r1, [r6, #0]
   14834:	4d6e      	ldr	r5, [pc, #440]	; (149f0 <theme_apply+0x804>)
   14836:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_WIN_PART_SCROLLBAR);
   14838:	2142      	movs	r1, #66	; 0x42
   1483a:	4620      	mov	r0, r4
   1483c:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_WIN_PART_SCROLLBAR);
   1483e:	2142      	movs	r1, #66	; 0x42
   14840:	4620      	mov	r0, r4
   14842:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
   14844:	6831      	ldr	r1, [r6, #0]
   14846:	3180      	adds	r1, #128	; 0x80
   14848:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
   1484a:	2141      	movs	r1, #65	; 0x41
   1484c:	4620      	mov	r0, r4
   1484e:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
   14850:	2141      	movs	r1, #65	; 0x41
   14852:	4620      	mov	r0, r4
   14854:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_page_scrl);
   14856:	6831      	ldr	r1, [r6, #0]
   14858:	31b0      	adds	r1, #176	; 0xb0
   1485a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_WIN_PART_HEADER);
   1485c:	2140      	movs	r1, #64	; 0x40
   1485e:	4620      	mov	r0, r4
   14860:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_WIN_PART_HEADER);
   14862:	2140      	movs	r1, #64	; 0x40
   14864:	4620      	mov	r0, r4
   14866:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_btns_bg);
   14868:	6831      	ldr	r1, [r6, #0]
   1486a:	31a8      	adds	r1, #168	; 0xa8
   1486c:	47a8      	blx	r5
            break;
   1486e:	e4f8      	b.n	14262 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
   14870:	2100      	movs	r1, #0
   14872:	4b60      	ldr	r3, [pc, #384]	; (149f4 <theme_apply+0x808>)
   14874:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
   14876:	2100      	movs	r1, #0
   14878:	4620      	mov	r0, r4
   1487a:	4b5b      	ldr	r3, [pc, #364]	; (149e8 <theme_apply+0x7fc>)
   1487c:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->tabview_btns);
   1487e:	4b5b      	ldr	r3, [pc, #364]	; (149ec <theme_apply+0x800>)
   14880:	6819      	ldr	r1, [r3, #0]
   14882:	31a4      	adds	r1, #164	; 0xa4
   14884:	4b5a      	ldr	r3, [pc, #360]	; (149f0 <theme_apply+0x804>)
   14886:	4798      	blx	r3
            break;
   14888:	e4eb      	b.n	14262 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_BG);
   1488a:	2100      	movs	r1, #0
   1488c:	f8df 8164 	ldr.w	r8, [pc, #356]	; 149f4 <theme_apply+0x808>
   14890:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_BG);
   14892:	2100      	movs	r1, #0
   14894:	4620      	mov	r0, r4
   14896:	4f54      	ldr	r7, [pc, #336]	; (149e8 <theme_apply+0x7fc>)
   14898:	47b8      	blx	r7
   1489a:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bg);
   1489c:	4e53      	ldr	r6, [pc, #332]	; (149ec <theme_apply+0x800>)
   1489e:	6831      	ldr	r1, [r6, #0]
   148a0:	3104      	adds	r1, #4
   148a2:	4d53      	ldr	r5, [pc, #332]	; (149f0 <theme_apply+0x804>)
   148a4:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
   148a6:	6831      	ldr	r1, [r6, #0]
   148a8:	3118      	adds	r1, #24
   148aa:	4648      	mov	r0, r9
   148ac:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_PLACEHOLDER);
   148ae:	2104      	movs	r1, #4
   148b0:	4620      	mov	r0, r4
   148b2:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_PLACEHOLDER);
   148b4:	2104      	movs	r1, #4
   148b6:	4620      	mov	r0, r4
   148b8:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->ta_placeholder);
   148ba:	6831      	ldr	r1, [r6, #0]
   148bc:	31b8      	adds	r1, #184	; 0xb8
   148be:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_CURSOR);
   148c0:	2103      	movs	r1, #3
   148c2:	4620      	mov	r0, r4
   148c4:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_CURSOR);
   148c6:	2103      	movs	r1, #3
   148c8:	4620      	mov	r0, r4
   148ca:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->ta_cursor);
   148cc:	6831      	ldr	r1, [r6, #0]
   148ce:	31b4      	adds	r1, #180	; 0xb4
   148d0:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_SCROLLBAR);
   148d2:	2101      	movs	r1, #1
   148d4:	4620      	mov	r0, r4
   148d6:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_SCROLLBAR);
   148d8:	2101      	movs	r1, #1
   148da:	4620      	mov	r0, r4
   148dc:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
   148de:	6831      	ldr	r1, [r6, #0]
   148e0:	3180      	adds	r1, #128	; 0x80
   148e2:	47a8      	blx	r5
            break;
   148e4:	e4bd      	b.n	14262 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_SPINBOX_PART_BG);
   148e6:	2100      	movs	r1, #0
   148e8:	f8df 8108 	ldr.w	r8, [pc, #264]	; 149f4 <theme_apply+0x808>
   148ec:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SPINBOX_PART_BG);
   148ee:	2100      	movs	r1, #0
   148f0:	4620      	mov	r0, r4
   148f2:	4f3d      	ldr	r7, [pc, #244]	; (149e8 <theme_apply+0x7fc>)
   148f4:	47b8      	blx	r7
   148f6:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bg);
   148f8:	4e3c      	ldr	r6, [pc, #240]	; (149ec <theme_apply+0x800>)
   148fa:	6831      	ldr	r1, [r6, #0]
   148fc:	3104      	adds	r1, #4
   148fe:	4d3c      	ldr	r5, [pc, #240]	; (149f0 <theme_apply+0x804>)
   14900:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
   14902:	6831      	ldr	r1, [r6, #0]
   14904:	3118      	adds	r1, #24
   14906:	4648      	mov	r0, r9
   14908:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SPINBOX_PART_CURSOR);
   1490a:	2103      	movs	r1, #3
   1490c:	4620      	mov	r0, r4
   1490e:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SPINBOX_PART_CURSOR);
   14910:	2103      	movs	r1, #3
   14912:	4620      	mov	r0, r4
   14914:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->spinbox_cursor);
   14916:	6831      	ldr	r1, [r6, #0]
   14918:	3198      	adds	r1, #152	; 0x98
   1491a:	47a8      	blx	r5
            break;
   1491c:	e4a1      	b.n	14262 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
   1491e:	2100      	movs	r1, #0
   14920:	4b34      	ldr	r3, [pc, #208]	; (149f4 <theme_apply+0x808>)
   14922:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
   14924:	2100      	movs	r1, #0
   14926:	4620      	mov	r0, r4
   14928:	4b2f      	ldr	r3, [pc, #188]	; (149e8 <theme_apply+0x7fc>)
   1492a:	4798      	blx	r3
   1492c:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
   1492e:	4e2f      	ldr	r6, [pc, #188]	; (149ec <theme_apply+0x800>)
   14930:	6831      	ldr	r1, [r6, #0]
   14932:	3104      	adds	r1, #4
   14934:	4d2e      	ldr	r5, [pc, #184]	; (149f0 <theme_apply+0x804>)
   14936:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
   14938:	6831      	ldr	r1, [r6, #0]
   1493a:	3108      	adds	r1, #8
   1493c:	4638      	mov	r0, r7
   1493e:	47a8      	blx	r5
            break;
   14940:	e48f      	b.n	14262 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_BG);
   14942:	2100      	movs	r1, #0
   14944:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 149f4 <theme_apply+0x808>
   14948:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_BG);
   1494a:	2100      	movs	r1, #0
   1494c:	4620      	mov	r0, r4
   1494e:	4f26      	ldr	r7, [pc, #152]	; (149e8 <theme_apply+0x7fc>)
   14950:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bg);
   14952:	4e26      	ldr	r6, [pc, #152]	; (149ec <theme_apply+0x800>)
   14954:	6831      	ldr	r1, [r6, #0]
   14956:	3104      	adds	r1, #4
   14958:	4d25      	ldr	r5, [pc, #148]	; (149f0 <theme_apply+0x804>)
   1495a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_DATE);
   1495c:	2103      	movs	r1, #3
   1495e:	4620      	mov	r0, r4
   14960:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_DATE);
   14962:	2103      	movs	r1, #3
   14964:	4620      	mov	r0, r4
   14966:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->calendar_date_nums);
   14968:	6831      	ldr	r1, [r6, #0]
   1496a:	312c      	adds	r1, #44	; 0x2c
   1496c:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_HEADER);
   1496e:	2101      	movs	r1, #1
   14970:	4620      	mov	r0, r4
   14972:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_HEADER);
   14974:	2101      	movs	r1, #1
   14976:	4620      	mov	r0, r4
   14978:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->calendar_header);
   1497a:	6831      	ldr	r1, [r6, #0]
   1497c:	3130      	adds	r1, #48	; 0x30
   1497e:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_DAY_NAMES);
   14980:	2102      	movs	r1, #2
   14982:	4620      	mov	r0, r4
   14984:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_DAY_NAMES);
   14986:	2102      	movs	r1, #2
   14988:	4620      	mov	r0, r4
   1498a:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->calendar_daynames);
   1498c:	6831      	ldr	r1, [r6, #0]
   1498e:	3134      	adds	r1, #52	; 0x34
   14990:	47a8      	blx	r5
            break;
   14992:	e466      	b.n	14262 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_CPICKER_PART_MAIN);
   14994:	2100      	movs	r1, #0
   14996:	f8df 805c 	ldr.w	r8, [pc, #92]	; 149f4 <theme_apply+0x808>
   1499a:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_MAIN);
   1499c:	2100      	movs	r1, #0
   1499e:	4620      	mov	r0, r4
   149a0:	4f11      	ldr	r7, [pc, #68]	; (149e8 <theme_apply+0x7fc>)
   149a2:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->cpicker_bg);
   149a4:	4e11      	ldr	r6, [pc, #68]	; (149ec <theme_apply+0x800>)
   149a6:	6831      	ldr	r1, [r6, #0]
   149a8:	3138      	adds	r1, #56	; 0x38
   149aa:	4d11      	ldr	r5, [pc, #68]	; (149f0 <theme_apply+0x804>)
   149ac:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CPICKER_PART_KNOB);
   149ae:	2101      	movs	r1, #1
   149b0:	4620      	mov	r0, r4
   149b2:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_KNOB);
   149b4:	2101      	movs	r1, #1
   149b6:	4620      	mov	r0, r4
   149b8:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->cpicker_indic);
   149ba:	6831      	ldr	r1, [r6, #0]
   149bc:	313c      	adds	r1, #60	; 0x3c
   149be:	47a8      	blx	r5
            break;
   149c0:	e44f      	b.n	14262 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_LINEMETER_PART_MAIN);
   149c2:	2100      	movs	r1, #0
   149c4:	4b0b      	ldr	r3, [pc, #44]	; (149f4 <theme_apply+0x808>)
   149c6:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_LINEMETER_PART_MAIN);
   149c8:	2100      	movs	r1, #0
   149ca:	4620      	mov	r0, r4
   149cc:	4b06      	ldr	r3, [pc, #24]	; (149e8 <theme_apply+0x7fc>)
   149ce:	4798      	blx	r3
   149d0:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
   149d2:	4e06      	ldr	r6, [pc, #24]	; (149ec <theme_apply+0x800>)
   149d4:	6831      	ldr	r1, [r6, #0]
   149d6:	3104      	adds	r1, #4
   149d8:	4d05      	ldr	r5, [pc, #20]	; (149f0 <theme_apply+0x804>)
   149da:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->lmeter);
   149dc:	6831      	ldr	r1, [r6, #0]
   149de:	3170      	adds	r1, #112	; 0x70
   149e0:	4638      	mov	r0, r7
   149e2:	47a8      	blx	r5
            break;
   149e4:	e43d      	b.n	14262 <theme_apply+0x76>
   149e6:	bf00      	nop
   149e8:	00002ff1 	.word	0x00002ff1
   149ec:	2000c5d4 	.word	0x2000c5d4
   149f0:	000065cd 	.word	0x000065cd
   149f4:	000030c1 	.word	0x000030c1
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_MAIN);
   149f8:	2100      	movs	r1, #0
   149fa:	f8df 8054 	ldr.w	r8, [pc, #84]	; 14a50 <theme_apply+0x864>
   149fe:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_MAIN);
   14a00:	2100      	movs	r1, #0
   14a02:	4620      	mov	r0, r4
   14a04:	4f0f      	ldr	r7, [pc, #60]	; (14a44 <theme_apply+0x858>)
   14a06:	47b8      	blx	r7
   14a08:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bg);
   14a0a:	4e0f      	ldr	r6, [pc, #60]	; (14a48 <theme_apply+0x85c>)
   14a0c:	6831      	ldr	r1, [r6, #0]
   14a0e:	3104      	adds	r1, #4
   14a10:	4d0e      	ldr	r5, [pc, #56]	; (14a4c <theme_apply+0x860>)
   14a12:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->gauge_main);
   14a14:	6831      	ldr	r1, [r6, #0]
   14a16:	315c      	adds	r1, #92	; 0x5c
   14a18:	4648      	mov	r0, r9
   14a1a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_MAJOR);
   14a1c:	2101      	movs	r1, #1
   14a1e:	4620      	mov	r0, r4
   14a20:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_MAJOR);
   14a22:	2101      	movs	r1, #1
   14a24:	4620      	mov	r0, r4
   14a26:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->gauge_strong);
   14a28:	6831      	ldr	r1, [r6, #0]
   14a2a:	3160      	adds	r1, #96	; 0x60
   14a2c:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_NEEDLE);
   14a2e:	2102      	movs	r1, #2
   14a30:	4620      	mov	r0, r4
   14a32:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_NEEDLE);
   14a34:	2102      	movs	r1, #2
   14a36:	4620      	mov	r0, r4
   14a38:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->gauge_needle);
   14a3a:	6831      	ldr	r1, [r6, #0]
   14a3c:	3164      	adds	r1, #100	; 0x64
   14a3e:	47a8      	blx	r5
            break;
   14a40:	e40f      	b.n	14262 <theme_apply+0x76>
   14a42:	bf00      	nop
   14a44:	00002ff1 	.word	0x00002ff1
   14a48:	2000c5d4 	.word	0x2000c5d4
   14a4c:	000065cd 	.word	0x000065cd
   14a50:	000030c1 	.word	0x000030c1

00014a54 <style_init_reset>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void style_init_reset(lv_style_t * style)
{
   14a54:	b508      	push	{r3, lr}
    if(inited) lv_style_reset(style);
   14a56:	4b04      	ldr	r3, [pc, #16]	; (14a68 <style_init_reset+0x14>)
   14a58:	791b      	ldrb	r3, [r3, #4]
   14a5a:	b913      	cbnz	r3, 14a62 <style_init_reset+0xe>
    else lv_style_init(style);
   14a5c:	4b03      	ldr	r3, [pc, #12]	; (14a6c <style_init_reset+0x18>)
   14a5e:	4798      	blx	r3
   14a60:	bd08      	pop	{r3, pc}
    if(inited) lv_style_reset(style);
   14a62:	4b03      	ldr	r3, [pc, #12]	; (14a70 <style_init_reset+0x1c>)
   14a64:	4798      	blx	r3
   14a66:	bd08      	pop	{r3, pc}
   14a68:	2000c5d4 	.word	0x2000c5d4
   14a6c:	000064cd 	.word	0x000064cd
   14a70:	00006759 	.word	0x00006759

00014a74 <basic_init>:
{
   14a74:	b570      	push	{r4, r5, r6, lr}
    style_init_reset(&styles->scr);
   14a76:	4cb3      	ldr	r4, [pc, #716]	; (14d44 <basic_init+0x2d0>)
   14a78:	6820      	ldr	r0, [r4, #0]
   14a7a:	4bb3      	ldr	r3, [pc, #716]	; (14d48 <basic_init+0x2d4>)
   14a7c:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   14a7e:	22ff      	movs	r2, #255	; 0xff
   14a80:	212c      	movs	r1, #44	; 0x2c
   14a82:	6820      	ldr	r0, [r4, #0]
   14a84:	4bb1      	ldr	r3, [pc, #708]	; (14d4c <basic_init+0x2d8>)
   14a86:	4798      	blx	r3
    lv_style_set_bg_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR);
   14a88:	6a23      	ldr	r3, [r4, #32]
   14a8a:	f013 0302 	ands.w	r3, r3, #2
   14a8e:	bf14      	ite	ne
   14a90:	211d      	movne	r1, #29
   14a92:	2108      	moveq	r1, #8
   14a94:	2b00      	cmp	r3, #0
   14a96:	bf15      	itete	ne
   14a98:	203b      	movne	r0, #59	; 0x3b
   14a9a:	2012      	moveq	r0, #18
   14a9c:	231e      	movne	r3, #30
   14a9e:	230b      	moveq	r3, #11
   14aa0:	f04f 0200 	mov.w	r2, #0
   14aa4:	f363 0204 	bfi	r2, r3, #0, #5
   14aa8:	f360 124a 	bfi	r2, r0, #5, #6
   14aac:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   14ab0:	2129      	movs	r1, #41	; 0x29
   14ab2:	6820      	ldr	r0, [r4, #0]
   14ab4:	4ba6      	ldr	r3, [pc, #664]	; (14d50 <basic_init+0x2dc>)
   14ab6:	4798      	blx	r3
    lv_style_set_text_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
   14ab8:	4620      	mov	r0, r4
   14aba:	6a23      	ldr	r3, [r4, #32]
   14abc:	f013 0302 	ands.w	r3, r3, #2
   14ac0:	bf14      	ite	ne
   14ac2:	2107      	movne	r1, #7
   14ac4:	211c      	moveq	r1, #28
   14ac6:	2b00      	cmp	r3, #0
   14ac8:	bf15      	itete	ne
   14aca:	240f      	movne	r4, #15
   14acc:	243a      	moveq	r4, #58	; 0x3a
   14ace:	2308      	movne	r3, #8
   14ad0:	231d      	moveq	r3, #29
   14ad2:	f04f 0200 	mov.w	r2, #0
   14ad6:	f363 0204 	bfi	r2, r3, #0, #5
   14ada:	f364 124a 	bfi	r2, r4, #5, #6
   14ade:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   14ae2:	f248 0189 	movw	r1, #32905	; 0x8089
   14ae6:	6800      	ldr	r0, [r0, #0]
   14ae8:	4b99      	ldr	r3, [pc, #612]	; (14d50 <basic_init+0x2dc>)
   14aea:	4798      	blx	r3
    lv_style_set_value_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
   14aec:	4895      	ldr	r0, [pc, #596]	; (14d44 <basic_init+0x2d0>)
   14aee:	6a03      	ldr	r3, [r0, #32]
   14af0:	f013 0302 	ands.w	r3, r3, #2
   14af4:	bf14      	ite	ne
   14af6:	2107      	movne	r1, #7
   14af8:	211c      	moveq	r1, #28
   14afa:	2b00      	cmp	r3, #0
   14afc:	bf15      	itete	ne
   14afe:	240f      	movne	r4, #15
   14b00:	243a      	moveq	r4, #58	; 0x3a
   14b02:	2308      	movne	r3, #8
   14b04:	231d      	moveq	r3, #29
   14b06:	f04f 0200 	mov.w	r2, #0
   14b0a:	f363 0204 	bfi	r2, r3, #0, #5
   14b0e:	f364 124a 	bfi	r2, r4, #5, #6
   14b12:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   14b16:	2179      	movs	r1, #121	; 0x79
   14b18:	6800      	ldr	r0, [r0, #0]
   14b1a:	4b8d      	ldr	r3, [pc, #564]	; (14d50 <basic_init+0x2dc>)
   14b1c:	4798      	blx	r3
    lv_style_set_text_font(&styles->scr, LV_STATE_DEFAULT, theme.font_normal);
   14b1e:	4c89      	ldr	r4, [pc, #548]	; (14d44 <basic_init+0x2d0>)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   14b20:	6962      	ldr	r2, [r4, #20]
   14b22:	f248 018e 	movw	r1, #32910	; 0x808e
   14b26:	6820      	ldr	r0, [r4, #0]
   14b28:	4d8a      	ldr	r5, [pc, #552]	; (14d54 <basic_init+0x2e0>)
   14b2a:	47a8      	blx	r5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
   14b2c:	6962      	ldr	r2, [r4, #20]
   14b2e:	217e      	movs	r1, #126	; 0x7e
   14b30:	6820      	ldr	r0, [r4, #0]
   14b32:	47a8      	blx	r5
    style_init_reset(&styles->bg);
   14b34:	6820      	ldr	r0, [r4, #0]
   14b36:	3004      	adds	r0, #4
   14b38:	4b83      	ldr	r3, [pc, #524]	; (14d48 <basic_init+0x2d4>)
   14b3a:	4798      	blx	r3
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, LV_DPX(8));
   14b3c:	6824      	ldr	r4, [r4, #0]
   14b3e:	3404      	adds	r4, #4
   14b40:	2000      	movs	r0, #0
   14b42:	4b85      	ldr	r3, [pc, #532]	; (14d58 <basic_init+0x2e4>)
   14b44:	4798      	blx	r3
   14b46:	300a      	adds	r0, #10
   14b48:	00c0      	lsls	r0, r0, #3
   14b4a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14b4e:	f280 8646 	bge.w	157de <basic_init+0xd6a>
   14b52:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   14b54:	2101      	movs	r1, #1
   14b56:	4620      	mov	r0, r4
   14b58:	4b80      	ldr	r3, [pc, #512]	; (14d5c <basic_init+0x2e8>)
   14b5a:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->bg, LV_STATE_DEFAULT, LV_OPA_COVER);
   14b5c:	4c79      	ldr	r4, [pc, #484]	; (14d44 <basic_init+0x2d0>)
   14b5e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   14b60:	22ff      	movs	r2, #255	; 0xff
   14b62:	212c      	movs	r1, #44	; 0x2c
   14b64:	3004      	adds	r0, #4
   14b66:	4b79      	ldr	r3, [pc, #484]	; (14d4c <basic_init+0x2d8>)
   14b68:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG);
   14b6a:	6820      	ldr	r0, [r4, #0]
   14b6c:	3004      	adds	r0, #4
   14b6e:	6a23      	ldr	r3, [r4, #32]
   14b70:	f013 0f02 	tst.w	r3, #2
   14b74:	f040 8641 	bne.w	157fa <basic_init+0xd86>
   14b78:	230b      	movs	r3, #11
   14b7a:	2118      	movs	r1, #24
   14b7c:	240e      	movs	r4, #14
   14b7e:	f04f 0200 	mov.w	r2, #0
   14b82:	f364 0204 	bfi	r2, r4, #0, #5
   14b86:	f361 124a 	bfi	r2, r1, #5, #6
   14b8a:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   14b8e:	2129      	movs	r1, #41	; 0x29
   14b90:	4b6f      	ldr	r3, [pc, #444]	; (14d50 <basic_init+0x2dc>)
   14b92:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
   14b94:	4b6b      	ldr	r3, [pc, #428]	; (14d44 <basic_init+0x2d0>)
   14b96:	6818      	ldr	r0, [r3, #0]
   14b98:	6a1b      	ldr	r3, [r3, #32]
   14b9a:	f013 0302 	ands.w	r3, r3, #2
   14b9e:	bf14      	ite	ne
   14ba0:	211a      	movne	r1, #26
   14ba2:	2110      	moveq	r1, #16
   14ba4:	2b00      	cmp	r3, #0
   14ba6:	bf15      	itete	ne
   14ba8:	2437      	movne	r4, #55	; 0x37
   14baa:	2422      	moveq	r4, #34	; 0x22
   14bac:	231c      	movne	r3, #28
   14bae:	2312      	moveq	r3, #18
   14bb0:	f04f 0200 	mov.w	r2, #0
   14bb4:	f363 0204 	bfi	r2, r3, #0, #5
   14bb8:	f364 124a 	bfi	r2, r4, #5, #6
   14bbc:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   14bc0:	2139      	movs	r1, #57	; 0x39
   14bc2:	3004      	adds	r0, #4
   14bc4:	4d62      	ldr	r5, [pc, #392]	; (14d50 <basic_init+0x2dc>)
   14bc6:	47a8      	blx	r5
    lv_style_set_border_color(&styles->bg, LV_STATE_FOCUSED, theme.color_primary);
   14bc8:	4c5e      	ldr	r4, [pc, #376]	; (14d44 <basic_init+0x2d0>)
   14bca:	6820      	ldr	r0, [r4, #0]
   14bcc:	89a2      	ldrh	r2, [r4, #12]
   14bce:	f240 2139 	movw	r1, #569	; 0x239
   14bd2:	3004      	adds	r0, #4
   14bd4:	47a8      	blx	r5
    lv_style_set_border_color(&styles->bg, LV_STATE_EDITED, theme.color_secondary);
   14bd6:	6820      	ldr	r0, [r4, #0]
   14bd8:	89e2      	ldrh	r2, [r4, #14]
   14bda:	f240 4139 	movw	r1, #1081	; 0x439
   14bde:	3004      	adds	r0, #4
   14be0:	47a8      	blx	r5
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
   14be2:	6824      	ldr	r4, [r4, #0]
   14be4:	3404      	adds	r4, #4
   14be6:	2000      	movs	r0, #0
   14be8:	4b5b      	ldr	r3, [pc, #364]	; (14d58 <basic_init+0x2e4>)
   14bea:	4798      	blx	r3
   14bec:	3028      	adds	r0, #40	; 0x28
   14bee:	0040      	lsls	r0, r0, #1
   14bf0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14bf4:	f280 8606 	bge.w	15804 <basic_init+0xd90>
   14bf8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   14bfa:	2130      	movs	r1, #48	; 0x30
   14bfc:	4620      	mov	r0, r4
   14bfe:	4d57      	ldr	r5, [pc, #348]	; (14d5c <basic_init+0x2e8>)
   14c00:	47a8      	blx	r5
    lv_style_set_border_post(&styles->bg, LV_STATE_DEFAULT, true);
   14c02:	4c50      	ldr	r4, [pc, #320]	; (14d44 <basic_init+0x2d0>)
   14c04:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
   14c06:	2201      	movs	r2, #1
   14c08:	2133      	movs	r1, #51	; 0x33
   14c0a:	3004      	adds	r0, #4
   14c0c:	47a8      	blx	r5
    lv_style_set_text_font(&styles->bg, LV_STATE_DEFAULT, theme.font_normal);
   14c0e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   14c10:	6962      	ldr	r2, [r4, #20]
   14c12:	f248 018e 	movw	r1, #32910	; 0x808e
   14c16:	3004      	adds	r0, #4
   14c18:	4b4e      	ldr	r3, [pc, #312]	; (14d54 <basic_init+0x2e0>)
   14c1a:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   14c1c:	6820      	ldr	r0, [r4, #0]
   14c1e:	3004      	adds	r0, #4
   14c20:	6a23      	ldr	r3, [r4, #32]
   14c22:	f013 0f02 	tst.w	r3, #2
   14c26:	f040 85fb 	bne.w	15820 <basic_init+0xdac>
   14c2a:	231f      	movs	r3, #31
   14c2c:	213f      	movs	r1, #63	; 0x3f
   14c2e:	461c      	mov	r4, r3
   14c30:	f04f 0200 	mov.w	r2, #0
   14c34:	f364 0204 	bfi	r2, r4, #0, #5
   14c38:	f361 124a 	bfi	r2, r1, #5, #6
   14c3c:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   14c40:	f248 0189 	movw	r1, #32905	; 0x8089
   14c44:	4b42      	ldr	r3, [pc, #264]	; (14d50 <basic_init+0x2dc>)
   14c46:	4798      	blx	r3
    lv_style_set_value_font(&styles->bg, LV_STATE_DEFAULT, theme.font_normal);
   14c48:	4c3e      	ldr	r4, [pc, #248]	; (14d44 <basic_init+0x2d0>)
   14c4a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
   14c4c:	6962      	ldr	r2, [r4, #20]
   14c4e:	217e      	movs	r1, #126	; 0x7e
   14c50:	3004      	adds	r0, #4
   14c52:	4b40      	ldr	r3, [pc, #256]	; (14d54 <basic_init+0x2e0>)
   14c54:	4798      	blx	r3
    lv_style_set_value_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   14c56:	6820      	ldr	r0, [r4, #0]
   14c58:	3004      	adds	r0, #4
   14c5a:	6a23      	ldr	r3, [r4, #32]
   14c5c:	f013 0f02 	tst.w	r3, #2
   14c60:	f040 85e3 	bne.w	1582a <basic_init+0xdb6>
   14c64:	231f      	movs	r3, #31
   14c66:	213f      	movs	r1, #63	; 0x3f
   14c68:	461c      	mov	r4, r3
   14c6a:	f04f 0200 	mov.w	r2, #0
   14c6e:	f364 0204 	bfi	r2, r4, #0, #5
   14c72:	f361 124a 	bfi	r2, r1, #5, #6
   14c76:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   14c7a:	2179      	movs	r1, #121	; 0x79
   14c7c:	4b34      	ldr	r3, [pc, #208]	; (14d50 <basic_init+0x2dc>)
   14c7e:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   14c80:	4b30      	ldr	r3, [pc, #192]	; (14d44 <basic_init+0x2d0>)
   14c82:	6818      	ldr	r0, [r3, #0]
   14c84:	3004      	adds	r0, #4
   14c86:	6a1b      	ldr	r3, [r3, #32]
   14c88:	f013 0f02 	tst.w	r3, #2
   14c8c:	f040 85d2 	bne.w	15834 <basic_init+0xdc0>
   14c90:	231f      	movs	r3, #31
   14c92:	213f      	movs	r1, #63	; 0x3f
   14c94:	461c      	mov	r4, r3
   14c96:	f04f 0200 	mov.w	r2, #0
   14c9a:	f364 0204 	bfi	r2, r4, #0, #5
   14c9e:	f361 124a 	bfi	r2, r1, #5, #6
   14ca2:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   14ca6:	f248 01a9 	movw	r1, #32937	; 0x80a9
   14caa:	4b29      	ldr	r3, [pc, #164]	; (14d50 <basic_init+0x2dc>)
   14cac:	4798      	blx	r3
    lv_style_set_line_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   14cae:	4b25      	ldr	r3, [pc, #148]	; (14d44 <basic_init+0x2d0>)
   14cb0:	6818      	ldr	r0, [r3, #0]
   14cb2:	3004      	adds	r0, #4
   14cb4:	6a1b      	ldr	r3, [r3, #32]
   14cb6:	f013 0f02 	tst.w	r3, #2
   14cba:	f040 85c0 	bne.w	1583e <basic_init+0xdca>
   14cbe:	231f      	movs	r3, #31
   14cc0:	213f      	movs	r1, #63	; 0x3f
   14cc2:	461c      	mov	r4, r3
   14cc4:	f04f 0200 	mov.w	r2, #0
   14cc8:	f364 0204 	bfi	r2, r4, #0, #5
   14ccc:	f361 124a 	bfi	r2, r1, #5, #6
   14cd0:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   14cd4:	2199      	movs	r1, #153	; 0x99
   14cd6:	4b1e      	ldr	r3, [pc, #120]	; (14d50 <basic_init+0x2dc>)
   14cd8:	4798      	blx	r3
    lv_style_set_line_width(&styles->bg, LV_STATE_DEFAULT, 1);
   14cda:	4c1a      	ldr	r4, [pc, #104]	; (14d44 <basic_init+0x2d0>)
   14cdc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   14cde:	2201      	movs	r2, #1
   14ce0:	2190      	movs	r1, #144	; 0x90
   14ce2:	3004      	adds	r0, #4
   14ce4:	4b1d      	ldr	r3, [pc, #116]	; (14d5c <basic_init+0x2e8>)
   14ce6:	4798      	blx	r3
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   14ce8:	6825      	ldr	r5, [r4, #0]
   14cea:	3504      	adds	r5, #4
   14cec:	2000      	movs	r0, #0
   14cee:	4b1c      	ldr	r3, [pc, #112]	; (14d60 <basic_init+0x2ec>)
   14cf0:	4798      	blx	r3
   14cf2:	2801      	cmp	r0, #1
   14cf4:	f240 85a8 	bls.w	15848 <basic_init+0xdd4>
   14cf8:	2000      	movs	r0, #0
   14cfa:	4b17      	ldr	r3, [pc, #92]	; (14d58 <basic_init+0x2e4>)
   14cfc:	4798      	blx	r3
   14cfe:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   14d02:	0040      	lsls	r0, r0, #1
   14d04:	3050      	adds	r0, #80	; 0x50
   14d06:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14d0a:	f280 85b8 	bge.w	1587e <basic_init+0xe0a>
   14d0e:	2401      	movs	r4, #1
   14d10:	2000      	movs	r0, #0
   14d12:	4b11      	ldr	r3, [pc, #68]	; (14d58 <basic_init+0x2e4>)
   14d14:	4798      	blx	r3
   14d16:	3028      	adds	r0, #40	; 0x28
   14d18:	0040      	lsls	r0, r0, #1
   14d1a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14d1e:	f280 85be 	bge.w	1589e <basic_init+0xe2a>
   14d22:	2201      	movs	r2, #1
   14d24:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   14d26:	b212      	sxth	r2, r2
   14d28:	2112      	movs	r1, #18
   14d2a:	4628      	mov	r0, r5
   14d2c:	4b0b      	ldr	r3, [pc, #44]	; (14d5c <basic_init+0x2e8>)
   14d2e:	4798      	blx	r3
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   14d30:	4b04      	ldr	r3, [pc, #16]	; (14d44 <basic_init+0x2d0>)
   14d32:	681d      	ldr	r5, [r3, #0]
   14d34:	3504      	adds	r5, #4
   14d36:	2000      	movs	r0, #0
   14d38:	4b09      	ldr	r3, [pc, #36]	; (14d60 <basic_init+0x2ec>)
   14d3a:	4798      	blx	r3
   14d3c:	2801      	cmp	r0, #1
   14d3e:	f240 85bc 	bls.w	158ba <basic_init+0xe46>
   14d42:	e00f      	b.n	14d64 <basic_init+0x2f0>
   14d44:	2000c5d4 	.word	0x2000c5d4
   14d48:	00014a55 	.word	0x00014a55
   14d4c:	00006b5d 	.word	0x00006b5d
   14d50:	00006a19 	.word	0x00006a19
   14d54:	00006c8d 	.word	0x00006c8d
   14d58:	00010f31 	.word	0x00010f31
   14d5c:	000068d5 	.word	0x000068d5
   14d60:	00010f4d 	.word	0x00010f4d
   14d64:	2000      	movs	r0, #0
   14d66:	4bb1      	ldr	r3, [pc, #708]	; (1502c <basic_init+0x5b8>)
   14d68:	4798      	blx	r3
   14d6a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   14d6e:	0040      	lsls	r0, r0, #1
   14d70:	3050      	adds	r0, #80	; 0x50
   14d72:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14d76:	f280 85bb 	bge.w	158f0 <basic_init+0xe7c>
   14d7a:	2401      	movs	r4, #1
   14d7c:	2000      	movs	r0, #0
   14d7e:	4bab      	ldr	r3, [pc, #684]	; (1502c <basic_init+0x5b8>)
   14d80:	4798      	blx	r3
   14d82:	3028      	adds	r0, #40	; 0x28
   14d84:	0040      	lsls	r0, r0, #1
   14d86:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14d8a:	f280 85c1 	bge.w	15910 <basic_init+0xe9c>
   14d8e:	2201      	movs	r2, #1
   14d90:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   14d92:	b212      	sxth	r2, r2
   14d94:	2113      	movs	r1, #19
   14d96:	4628      	mov	r0, r5
   14d98:	4ba5      	ldr	r3, [pc, #660]	; (15030 <basic_init+0x5bc>)
   14d9a:	4798      	blx	r3
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   14d9c:	4ba5      	ldr	r3, [pc, #660]	; (15034 <basic_init+0x5c0>)
   14d9e:	681d      	ldr	r5, [r3, #0]
   14da0:	3504      	adds	r5, #4
   14da2:	2000      	movs	r0, #0
   14da4:	4ba4      	ldr	r3, [pc, #656]	; (15038 <basic_init+0x5c4>)
   14da6:	4798      	blx	r3
   14da8:	2801      	cmp	r0, #1
   14daa:	f240 85bf 	bls.w	1592c <basic_init+0xeb8>
   14dae:	2000      	movs	r0, #0
   14db0:	4b9e      	ldr	r3, [pc, #632]	; (1502c <basic_init+0x5b8>)
   14db2:	4798      	blx	r3
   14db4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   14db8:	0040      	lsls	r0, r0, #1
   14dba:	3050      	adds	r0, #80	; 0x50
   14dbc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14dc0:	f280 85cf 	bge.w	15962 <basic_init+0xeee>
   14dc4:	2401      	movs	r4, #1
   14dc6:	2000      	movs	r0, #0
   14dc8:	4b98      	ldr	r3, [pc, #608]	; (1502c <basic_init+0x5b8>)
   14dca:	4798      	blx	r3
   14dcc:	3028      	adds	r0, #40	; 0x28
   14dce:	0040      	lsls	r0, r0, #1
   14dd0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14dd4:	f280 85d5 	bge.w	15982 <basic_init+0xf0e>
   14dd8:	2201      	movs	r2, #1
   14dda:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   14ddc:	b212      	sxth	r2, r2
   14dde:	2110      	movs	r1, #16
   14de0:	4628      	mov	r0, r5
   14de2:	4b93      	ldr	r3, [pc, #588]	; (15030 <basic_init+0x5bc>)
   14de4:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   14de6:	4b93      	ldr	r3, [pc, #588]	; (15034 <basic_init+0x5c0>)
   14de8:	681d      	ldr	r5, [r3, #0]
   14dea:	3504      	adds	r5, #4
   14dec:	2000      	movs	r0, #0
   14dee:	4b92      	ldr	r3, [pc, #584]	; (15038 <basic_init+0x5c4>)
   14df0:	4798      	blx	r3
   14df2:	2801      	cmp	r0, #1
   14df4:	f240 85d3 	bls.w	1599e <basic_init+0xf2a>
   14df8:	2000      	movs	r0, #0
   14dfa:	4b8c      	ldr	r3, [pc, #560]	; (1502c <basic_init+0x5b8>)
   14dfc:	4798      	blx	r3
   14dfe:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   14e02:	0040      	lsls	r0, r0, #1
   14e04:	3050      	adds	r0, #80	; 0x50
   14e06:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14e0a:	f280 85f4 	bge.w	159f6 <basic_init+0xf82>
   14e0e:	2401      	movs	r4, #1
   14e10:	2000      	movs	r0, #0
   14e12:	4b86      	ldr	r3, [pc, #536]	; (1502c <basic_init+0x5b8>)
   14e14:	4798      	blx	r3
   14e16:	3028      	adds	r0, #40	; 0x28
   14e18:	0040      	lsls	r0, r0, #1
   14e1a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14e1e:	f280 85fa 	bge.w	15a16 <basic_init+0xfa2>
   14e22:	2201      	movs	r2, #1
   14e24:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   14e26:	b212      	sxth	r2, r2
   14e28:	2111      	movs	r1, #17
   14e2a:	4628      	mov	r0, r5
   14e2c:	4b80      	ldr	r3, [pc, #512]	; (15030 <basic_init+0x5bc>)
   14e2e:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
   14e30:	4b80      	ldr	r3, [pc, #512]	; (15034 <basic_init+0x5c0>)
   14e32:	681c      	ldr	r4, [r3, #0]
   14e34:	3404      	adds	r4, #4
   14e36:	2000      	movs	r0, #0
   14e38:	4b7f      	ldr	r3, [pc, #508]	; (15038 <basic_init+0x5c4>)
   14e3a:	4798      	blx	r3
   14e3c:	2801      	cmp	r0, #1
   14e3e:	f240 85f8 	bls.w	15a32 <basic_init+0xfbe>
   14e42:	2000      	movs	r0, #0
   14e44:	4b79      	ldr	r3, [pc, #484]	; (1502c <basic_init+0x5b8>)
   14e46:	4798      	blx	r3
   14e48:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   14e4c:	0040      	lsls	r0, r0, #1
   14e4e:	3050      	adds	r0, #80	; 0x50
   14e50:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14e54:	f280 8608 	bge.w	15a68 <basic_init+0xff4>
   14e58:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   14e5a:	2114      	movs	r1, #20
   14e5c:	4620      	mov	r0, r4
   14e5e:	4d74      	ldr	r5, [pc, #464]	; (15030 <basic_init+0x5bc>)
   14e60:	47a8      	blx	r5
    lv_style_set_transition_time(&styles->bg, LV_STATE_DEFAULT, TRANSITION_TIME);
   14e62:	4c74      	ldr	r4, [pc, #464]	; (15034 <basic_init+0x5c0>)
   14e64:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
   14e66:	2296      	movs	r2, #150	; 0x96
   14e68:	21b0      	movs	r1, #176	; 0xb0
   14e6a:	3004      	adds	r0, #4
   14e6c:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->bg, LV_STATE_DEFAULT, LV_STYLE_BORDER_COLOR);
   14e6e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_2, transition_prop_2, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
   14e70:	2239      	movs	r2, #57	; 0x39
   14e72:	21b7      	movs	r1, #183	; 0xb7
   14e74:	3004      	adds	r0, #4
   14e76:	47a8      	blx	r5
    style_init_reset(&styles->bg_sec);
   14e78:	6820      	ldr	r0, [r4, #0]
   14e7a:	300c      	adds	r0, #12
   14e7c:	4b6f      	ldr	r3, [pc, #444]	; (1503c <basic_init+0x5c8>)
   14e7e:	4798      	blx	r3
    lv_style_copy(&styles->bg_sec, &styles->bg);
   14e80:	6820      	ldr	r0, [r4, #0]
   14e82:	1d01      	adds	r1, r0, #4
   14e84:	300c      	adds	r0, #12
   14e86:	4b6e      	ldr	r3, [pc, #440]	; (15040 <basic_init+0x5cc>)
   14e88:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC);
   14e8a:	6820      	ldr	r0, [r4, #0]
   14e8c:	6a23      	ldr	r3, [r4, #32]
   14e8e:	f013 0302 	ands.w	r3, r3, #2
   14e92:	bf14      	ite	ne
   14e94:	211a      	movne	r1, #26
   14e96:	2108      	moveq	r1, #8
   14e98:	2b00      	cmp	r3, #0
   14e9a:	bf15      	itete	ne
   14e9c:	2435      	movne	r4, #53	; 0x35
   14e9e:	2412      	moveq	r4, #18
   14ea0:	231b      	movne	r3, #27
   14ea2:	2309      	moveq	r3, #9
   14ea4:	f04f 0200 	mov.w	r2, #0
   14ea8:	f363 0204 	bfi	r2, r3, #0, #5
   14eac:	f364 124a 	bfi	r2, r4, #5, #6
   14eb0:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   14eb4:	2129      	movs	r1, #41	; 0x29
   14eb6:	300c      	adds	r0, #12
   14eb8:	4b62      	ldr	r3, [pc, #392]	; (15044 <basic_init+0x5d0>)
   14eba:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_BORDER);
   14ebc:	4b5d      	ldr	r3, [pc, #372]	; (15034 <basic_init+0x5c0>)
   14ebe:	6818      	ldr	r0, [r3, #0]
   14ec0:	300c      	adds	r0, #12
   14ec2:	6a1b      	ldr	r3, [r3, #32]
   14ec4:	f013 0f02 	tst.w	r3, #2
   14ec8:	f040 85de 	bne.w	15a88 <basic_init+0x1014>
   14ecc:	2308      	movs	r3, #8
   14ece:	2110      	movs	r1, #16
   14ed0:	461c      	mov	r4, r3
   14ed2:	f04f 0200 	mov.w	r2, #0
   14ed6:	f364 0204 	bfi	r2, r4, #0, #5
   14eda:	f361 124a 	bfi	r2, r1, #5, #6
   14ede:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   14ee2:	2139      	movs	r1, #57	; 0x39
   14ee4:	4b57      	ldr	r3, [pc, #348]	; (15044 <basic_init+0x5d0>)
   14ee6:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
   14ee8:	4b52      	ldr	r3, [pc, #328]	; (15034 <basic_init+0x5c0>)
   14eea:	6818      	ldr	r0, [r3, #0]
   14eec:	6a1b      	ldr	r3, [r3, #32]
   14eee:	f013 0302 	ands.w	r3, r3, #2
   14ef2:	bf14      	ite	ne
   14ef4:	2106      	movne	r1, #6
   14ef6:	2114      	moveq	r1, #20
   14ef8:	2b00      	cmp	r3, #0
   14efa:	bf15      	itete	ne
   14efc:	2410      	movne	r4, #16
   14efe:	242a      	moveq	r4, #42	; 0x2a
   14f00:	2309      	movne	r3, #9
   14f02:	2315      	moveq	r3, #21
   14f04:	f04f 0200 	mov.w	r2, #0
   14f08:	f363 0204 	bfi	r2, r3, #0, #5
   14f0c:	f364 124a 	bfi	r2, r4, #5, #6
   14f10:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   14f14:	f248 0189 	movw	r1, #32905	; 0x8089
   14f18:	300c      	adds	r0, #12
   14f1a:	4b4a      	ldr	r3, [pc, #296]	; (15044 <basic_init+0x5d0>)
   14f1c:	4798      	blx	r3
    lv_style_set_value_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
   14f1e:	4b45      	ldr	r3, [pc, #276]	; (15034 <basic_init+0x5c0>)
   14f20:	6818      	ldr	r0, [r3, #0]
   14f22:	6a1b      	ldr	r3, [r3, #32]
   14f24:	f013 0302 	ands.w	r3, r3, #2
   14f28:	bf14      	ite	ne
   14f2a:	2106      	movne	r1, #6
   14f2c:	2114      	moveq	r1, #20
   14f2e:	2b00      	cmp	r3, #0
   14f30:	bf15      	itete	ne
   14f32:	2410      	movne	r4, #16
   14f34:	242a      	moveq	r4, #42	; 0x2a
   14f36:	2309      	movne	r3, #9
   14f38:	2315      	moveq	r3, #21
   14f3a:	f04f 0200 	mov.w	r2, #0
   14f3e:	f363 0204 	bfi	r2, r3, #0, #5
   14f42:	f364 124a 	bfi	r2, r4, #5, #6
   14f46:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   14f4a:	2179      	movs	r1, #121	; 0x79
   14f4c:	300c      	adds	r0, #12
   14f4e:	4b3d      	ldr	r3, [pc, #244]	; (15044 <basic_init+0x5d0>)
   14f50:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
   14f52:	4b38      	ldr	r3, [pc, #224]	; (15034 <basic_init+0x5c0>)
   14f54:	6818      	ldr	r0, [r3, #0]
   14f56:	6a1b      	ldr	r3, [r3, #32]
   14f58:	f013 0302 	ands.w	r3, r3, #2
   14f5c:	bf14      	ite	ne
   14f5e:	2106      	movne	r1, #6
   14f60:	2114      	moveq	r1, #20
   14f62:	2b00      	cmp	r3, #0
   14f64:	bf15      	itete	ne
   14f66:	2410      	movne	r4, #16
   14f68:	242a      	moveq	r4, #42	; 0x2a
   14f6a:	2309      	movne	r3, #9
   14f6c:	2315      	moveq	r3, #21
   14f6e:	f04f 0200 	mov.w	r2, #0
   14f72:	f363 0204 	bfi	r2, r3, #0, #5
   14f76:	f364 124a 	bfi	r2, r4, #5, #6
   14f7a:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   14f7e:	f248 01a9 	movw	r1, #32937	; 0x80a9
   14f82:	300c      	adds	r0, #12
   14f84:	4b2f      	ldr	r3, [pc, #188]	; (15044 <basic_init+0x5d0>)
   14f86:	4798      	blx	r3
    lv_style_set_line_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
   14f88:	4b2a      	ldr	r3, [pc, #168]	; (15034 <basic_init+0x5c0>)
   14f8a:	6818      	ldr	r0, [r3, #0]
   14f8c:	6a1b      	ldr	r3, [r3, #32]
   14f8e:	f013 0302 	ands.w	r3, r3, #2
   14f92:	bf14      	ite	ne
   14f94:	2106      	movne	r1, #6
   14f96:	2114      	moveq	r1, #20
   14f98:	2b00      	cmp	r3, #0
   14f9a:	bf15      	itete	ne
   14f9c:	2410      	movne	r4, #16
   14f9e:	242a      	moveq	r4, #42	; 0x2a
   14fa0:	2309      	movne	r3, #9
   14fa2:	2315      	moveq	r3, #21
   14fa4:	f04f 0200 	mov.w	r2, #0
   14fa8:	f363 0204 	bfi	r2, r3, #0, #5
   14fac:	f364 124a 	bfi	r2, r4, #5, #6
   14fb0:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   14fb4:	2199      	movs	r1, #153	; 0x99
   14fb6:	300c      	adds	r0, #12
   14fb8:	4b22      	ldr	r3, [pc, #136]	; (15044 <basic_init+0x5d0>)
   14fba:	4798      	blx	r3
    style_init_reset(&styles->bg_click);
   14fbc:	4c1d      	ldr	r4, [pc, #116]	; (15034 <basic_init+0x5c0>)
   14fbe:	6820      	ldr	r0, [r4, #0]
   14fc0:	3008      	adds	r0, #8
   14fc2:	4b1e      	ldr	r3, [pc, #120]	; (1503c <basic_init+0x5c8>)
   14fc4:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_PR);
   14fc6:	6820      	ldr	r0, [r4, #0]
   14fc8:	3008      	adds	r0, #8
   14fca:	6a23      	ldr	r3, [r4, #32]
   14fcc:	f013 0f02 	tst.w	r3, #2
   14fd0:	f040 855f 	bne.w	15a92 <basic_init+0x101e>
   14fd4:	2309      	movs	r3, #9
   14fd6:	2113      	movs	r1, #19
   14fd8:	240a      	movs	r4, #10
   14fda:	f04f 0200 	mov.w	r2, #0
   14fde:	f364 0204 	bfi	r2, r4, #0, #5
   14fe2:	f361 124a 	bfi	r2, r1, #5, #6
   14fe6:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   14fea:	f241 0129 	movw	r1, #4137	; 0x1029
   14fee:	4d15      	ldr	r5, [pc, #84]	; (15044 <basic_init+0x5d0>)
   14ff0:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_CHK);
   14ff2:	4c10      	ldr	r4, [pc, #64]	; (15034 <basic_init+0x5c0>)
   14ff4:	6820      	ldr	r0, [r4, #0]
   14ff6:	89a2      	ldrh	r2, [r4, #12]
   14ff8:	f240 1129 	movw	r1, #297	; 0x129
   14ffc:	3008      	adds	r0, #8
   14ffe:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_PR_CHK);
   15000:	6826      	ldr	r6, [r4, #0]
   15002:	3608      	adds	r6, #8
   15004:	2133      	movs	r1, #51	; 0x33
   15006:	89a0      	ldrh	r0, [r4, #12]
   15008:	4b0f      	ldr	r3, [pc, #60]	; (15048 <basic_init+0x5d4>)
   1500a:	4798      	blx	r3
   1500c:	4602      	mov	r2, r0
   1500e:	f241 1129 	movw	r1, #4393	; 0x1129
   15012:	4630      	mov	r0, r6
   15014:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_DIS);
   15016:	6820      	ldr	r0, [r4, #0]
   15018:	3008      	adds	r0, #8
   1501a:	6a23      	ldr	r3, [r4, #32]
   1501c:	f013 0f02 	tst.w	r3, #2
   15020:	f040 853c 	bne.w	15a9c <basic_init+0x1028>
   15024:	230b      	movs	r3, #11
   15026:	2118      	movs	r1, #24
   15028:	240e      	movs	r4, #14
   1502a:	e00f      	b.n	1504c <basic_init+0x5d8>
   1502c:	00010f31 	.word	0x00010f31
   15030:	000068d5 	.word	0x000068d5
   15034:	2000c5d4 	.word	0x2000c5d4
   15038:	00010f4d 	.word	0x00010f4d
   1503c:	00014a55 	.word	0x00014a55
   15040:	000067ad 	.word	0x000067ad
   15044:	00006a19 	.word	0x00006a19
   15048:	00011bf7 	.word	0x00011bf7
   1504c:	f04f 0200 	mov.w	r2, #0
   15050:	f364 0204 	bfi	r2, r4, #0, #5
   15054:	f361 124a 	bfi	r2, r1, #5, #6
   15058:	f363 22cf 	bfi	r2, r3, #11, #5
   1505c:	f242 0129 	movw	r1, #8233	; 0x2029
   15060:	4ebb      	ldr	r6, [pc, #748]	; (15350 <basic_init+0x8dc>)
   15062:	47b0      	blx	r6
    lv_style_set_border_width(&styles->bg_click, LV_STATE_CHECKED, 0);
   15064:	4cbb      	ldr	r4, [pc, #748]	; (15354 <basic_init+0x8e0>)
   15066:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   15068:	2200      	movs	r2, #0
   1506a:	f44f 7198 	mov.w	r1, #304	; 0x130
   1506e:	3008      	adds	r0, #8
   15070:	4bb9      	ldr	r3, [pc, #740]	; (15358 <basic_init+0x8e4>)
   15072:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_FOCUSED | LV_STATE_PRESSED, lv_color_darken(theme.color_primary,
   15074:	6825      	ldr	r5, [r4, #0]
   15076:	3508      	adds	r5, #8
   15078:	2133      	movs	r1, #51	; 0x33
   1507a:	89a0      	ldrh	r0, [r4, #12]
   1507c:	4bb7      	ldr	r3, [pc, #732]	; (1535c <basic_init+0x8e8>)
   1507e:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   15080:	4602      	mov	r2, r0
   15082:	f241 2139 	movw	r1, #4665	; 0x1239
   15086:	4628      	mov	r0, r5
   15088:	47b0      	blx	r6
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_BORDER_PR);
   1508a:	6820      	ldr	r0, [r4, #0]
   1508c:	3008      	adds	r0, #8
   1508e:	6a23      	ldr	r3, [r4, #32]
   15090:	f013 0f02 	tst.w	r3, #2
   15094:	f040 8507 	bne.w	15aa6 <basic_init+0x1032>
   15098:	230b      	movs	r3, #11
   1509a:	2119      	movs	r1, #25
   1509c:	240d      	movs	r4, #13
   1509e:	f04f 0200 	mov.w	r2, #0
   150a2:	f364 0204 	bfi	r2, r4, #0, #5
   150a6:	f361 124a 	bfi	r2, r1, #5, #6
   150aa:	f363 22cf 	bfi	r2, r3, #11, #5
   150ae:	f241 0139 	movw	r1, #4153	; 0x1039
   150b2:	4ba7      	ldr	r3, [pc, #668]	; (15350 <basic_init+0x8dc>)
   150b4:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_BORDER_CHK);
   150b6:	4ba7      	ldr	r3, [pc, #668]	; (15354 <basic_init+0x8e0>)
   150b8:	6818      	ldr	r0, [r3, #0]
   150ba:	6a1b      	ldr	r3, [r3, #32]
   150bc:	f013 0302 	ands.w	r3, r3, #2
   150c0:	bf14      	ite	ne
   150c2:	2107      	movne	r1, #7
   150c4:	210b      	moveq	r1, #11
   150c6:	2b00      	cmp	r3, #0
   150c8:	bf15      	itete	ne
   150ca:	240f      	movne	r4, #15
   150cc:	2419      	moveq	r4, #25
   150ce:	2308      	movne	r3, #8
   150d0:	230d      	moveq	r3, #13
   150d2:	f04f 0200 	mov.w	r2, #0
   150d6:	f363 0204 	bfi	r2, r3, #0, #5
   150da:	f364 124a 	bfi	r2, r4, #5, #6
   150de:	f361 22cf 	bfi	r2, r1, #11, #5
   150e2:	f240 1139 	movw	r1, #313	; 0x139
   150e6:	3008      	adds	r0, #8
   150e8:	4b99      	ldr	r3, [pc, #612]	; (15350 <basic_init+0x8dc>)
   150ea:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_BORDER_CHK_PR);
   150ec:	4b99      	ldr	r3, [pc, #612]	; (15354 <basic_init+0x8e0>)
   150ee:	6818      	ldr	r0, [r3, #0]
   150f0:	6a1b      	ldr	r3, [r3, #32]
   150f2:	f013 0302 	ands.w	r3, r3, #2
   150f6:	bf14      	ite	ne
   150f8:	2107      	movne	r1, #7
   150fa:	210b      	moveq	r1, #11
   150fc:	2b00      	cmp	r3, #0
   150fe:	bf15      	itete	ne
   15100:	240f      	movne	r4, #15
   15102:	2419      	moveq	r4, #25
   15104:	2308      	movne	r3, #8
   15106:	230d      	moveq	r3, #13
   15108:	f04f 0200 	mov.w	r2, #0
   1510c:	f363 0204 	bfi	r2, r3, #0, #5
   15110:	f364 124a 	bfi	r2, r4, #5, #6
   15114:	f361 22cf 	bfi	r2, r1, #11, #5
   15118:	f241 1139 	movw	r1, #4409	; 0x1139
   1511c:	3008      	adds	r0, #8
   1511e:	4b8c      	ldr	r3, [pc, #560]	; (15350 <basic_init+0x8dc>)
   15120:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_BORDER_DIS);
   15122:	4b8c      	ldr	r3, [pc, #560]	; (15354 <basic_init+0x8e0>)
   15124:	6818      	ldr	r0, [r3, #0]
   15126:	6a1b      	ldr	r3, [r3, #32]
   15128:	f013 0302 	ands.w	r3, r3, #2
   1512c:	bf14      	ite	ne
   1512e:	211a      	movne	r1, #26
   15130:	210b      	moveq	r1, #11
   15132:	2b00      	cmp	r3, #0
   15134:	bf15      	itete	ne
   15136:	2437      	movne	r4, #55	; 0x37
   15138:	2419      	moveq	r4, #25
   1513a:	231c      	movne	r3, #28
   1513c:	230d      	moveq	r3, #13
   1513e:	f04f 0200 	mov.w	r2, #0
   15142:	f363 0204 	bfi	r2, r3, #0, #5
   15146:	f364 124a 	bfi	r2, r4, #5, #6
   1514a:	f361 22cf 	bfi	r2, r1, #11, #5
   1514e:	f242 0139 	movw	r1, #8249	; 0x2039
   15152:	3008      	adds	r0, #8
   15154:	4b7e      	ldr	r3, [pc, #504]	; (15350 <basic_init+0x8dc>)
   15156:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
   15158:	4b7e      	ldr	r3, [pc, #504]	; (15354 <basic_init+0x8e0>)
   1515a:	6818      	ldr	r0, [r3, #0]
   1515c:	3008      	adds	r0, #8
   1515e:	6a1b      	ldr	r3, [r3, #32]
   15160:	f013 0f02 	tst.w	r3, #2
   15164:	f040 84a4 	bne.w	15ab0 <basic_init+0x103c>
   15168:	231f      	movs	r3, #31
   1516a:	213f      	movs	r1, #63	; 0x3f
   1516c:	461c      	mov	r4, r3
   1516e:	f04f 0200 	mov.w	r2, #0
   15172:	f364 0204 	bfi	r2, r4, #0, #5
   15176:	f361 124a 	bfi	r2, r1, #5, #6
   1517a:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   1517e:	f249 0189 	movw	r1, #37001	; 0x9089
   15182:	4d73      	ldr	r5, [pc, #460]	; (15350 <basic_init+0x8dc>)
   15184:	47a8      	blx	r5
    lv_style_set_text_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
   15186:	4c73      	ldr	r4, [pc, #460]	; (15354 <basic_init+0x8e0>)
   15188:	6820      	ldr	r0, [r4, #0]
   1518a:	f04f 32ff 	mov.w	r2, #4294967295
   1518e:	f248 1189 	movw	r1, #33161	; 0x8189
   15192:	3008      	adds	r0, #8
   15194:	47a8      	blx	r5
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
   15196:	6820      	ldr	r0, [r4, #0]
   15198:	f04f 32ff 	mov.w	r2, #4294967295
   1519c:	f249 1189 	movw	r1, #37257	; 0x9189
   151a0:	3008      	adds	r0, #8
   151a2:	47a8      	blx	r5
    lv_style_set_text_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
   151a4:	6820      	ldr	r0, [r4, #0]
   151a6:	6a23      	ldr	r3, [r4, #32]
   151a8:	f013 0302 	ands.w	r3, r3, #2
   151ac:	bf14      	ite	ne
   151ae:	212a      	movne	r1, #42	; 0x2a
   151b0:	2126      	moveq	r1, #38	; 0x26
   151b2:	2b00      	cmp	r3, #0
   151b4:	bf14      	ite	ne
   151b6:	2315      	movne	r3, #21
   151b8:	2313      	moveq	r3, #19
   151ba:	f04f 0200 	mov.w	r2, #0
   151be:	f363 0204 	bfi	r2, r3, #0, #5
   151c2:	f361 124a 	bfi	r2, r1, #5, #6
   151c6:	f363 22cf 	bfi	r2, r3, #11, #5
   151ca:	f24a 0189 	movw	r1, #41097	; 0xa089
   151ce:	3008      	adds	r0, #8
   151d0:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
   151d2:	6820      	ldr	r0, [r4, #0]
   151d4:	3008      	adds	r0, #8
   151d6:	6a23      	ldr	r3, [r4, #32]
   151d8:	f013 0f02 	tst.w	r3, #2
   151dc:	f040 846d 	bne.w	15aba <basic_init+0x1046>
   151e0:	231f      	movs	r3, #31
   151e2:	213f      	movs	r1, #63	; 0x3f
   151e4:	461c      	mov	r4, r3
   151e6:	f04f 0200 	mov.w	r2, #0
   151ea:	f364 0204 	bfi	r2, r4, #0, #5
   151ee:	f361 124a 	bfi	r2, r1, #5, #6
   151f2:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   151f6:	f249 01a9 	movw	r1, #37033	; 0x90a9
   151fa:	4d55      	ldr	r5, [pc, #340]	; (15350 <basic_init+0x8dc>)
   151fc:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
   151fe:	4c55      	ldr	r4, [pc, #340]	; (15354 <basic_init+0x8e0>)
   15200:	6820      	ldr	r0, [r4, #0]
   15202:	f04f 32ff 	mov.w	r2, #4294967295
   15206:	f248 11a9 	movw	r1, #33193	; 0x81a9
   1520a:	3008      	adds	r0, #8
   1520c:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
   1520e:	6820      	ldr	r0, [r4, #0]
   15210:	f04f 32ff 	mov.w	r2, #4294967295
   15214:	f249 11a9 	movw	r1, #37289	; 0x91a9
   15218:	3008      	adds	r0, #8
   1521a:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
   1521c:	6820      	ldr	r0, [r4, #0]
   1521e:	6a23      	ldr	r3, [r4, #32]
   15220:	f013 0302 	ands.w	r3, r3, #2
   15224:	bf14      	ite	ne
   15226:	212a      	movne	r1, #42	; 0x2a
   15228:	2126      	moveq	r1, #38	; 0x26
   1522a:	2b00      	cmp	r3, #0
   1522c:	bf14      	ite	ne
   1522e:	2315      	movne	r3, #21
   15230:	2313      	moveq	r3, #19
   15232:	f04f 0200 	mov.w	r2, #0
   15236:	f363 0204 	bfi	r2, r3, #0, #5
   1523a:	f361 124a 	bfi	r2, r1, #5, #6
   1523e:	f363 22cf 	bfi	r2, r3, #11, #5
   15242:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
   15246:	3008      	adds	r0, #8
   15248:	47a8      	blx	r5
    lv_style_set_transition_prop_5(&styles->bg_click, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
   1524a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
   1524c:	2229      	movs	r2, #41	; 0x29
   1524e:	21b6      	movs	r1, #182	; 0xb6
   15250:	3008      	adds	r0, #8
   15252:	4d41      	ldr	r5, [pc, #260]	; (15358 <basic_init+0x8e4>)
   15254:	47a8      	blx	r5
    style_init_reset(&styles->btn);
   15256:	6820      	ldr	r0, [r4, #0]
   15258:	3010      	adds	r0, #16
   1525a:	4b41      	ldr	r3, [pc, #260]	; (15360 <basic_init+0x8ec>)
   1525c:	4798      	blx	r3
    lv_style_set_radius(&styles->btn, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   1525e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   15260:	f647 72ff 	movw	r2, #32767	; 0x7fff
   15264:	2101      	movs	r1, #1
   15266:	3010      	adds	r0, #16
   15268:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_COVER);
   1526a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   1526c:	22ff      	movs	r2, #255	; 0xff
   1526e:	212c      	movs	r1, #44	; 0x2c
   15270:	3010      	adds	r0, #16
   15272:	4b3c      	ldr	r3, [pc, #240]	; (15364 <basic_init+0x8f0>)
   15274:	4798      	blx	r3
    lv_style_set_bg_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN);
   15276:	6820      	ldr	r0, [r4, #0]
   15278:	3010      	adds	r0, #16
   1527a:	6a23      	ldr	r3, [r4, #32]
   1527c:	f013 0f02 	tst.w	r3, #2
   15280:	f040 8420 	bne.w	15ac4 <basic_init+0x1050>
   15284:	230b      	movs	r3, #11
   15286:	2118      	movs	r1, #24
   15288:	240e      	movs	r4, #14
   1528a:	f04f 0200 	mov.w	r2, #0
   1528e:	f364 0204 	bfi	r2, r4, #0, #5
   15292:	f361 124a 	bfi	r2, r1, #5, #6
   15296:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   1529a:	2129      	movs	r1, #41	; 0x29
   1529c:	4b2c      	ldr	r3, [pc, #176]	; (15350 <basic_init+0x8dc>)
   1529e:	4798      	blx	r3
    lv_style_set_bg_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_PR);
   152a0:	4b2c      	ldr	r3, [pc, #176]	; (15354 <basic_init+0x8e0>)
   152a2:	6818      	ldr	r0, [r3, #0]
   152a4:	3010      	adds	r0, #16
   152a6:	6a1b      	ldr	r3, [r3, #32]
   152a8:	f013 0f02 	tst.w	r3, #2
   152ac:	f000 840f 	beq.w	15ace <basic_init+0x105a>
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
   152b0:	4928      	ldr	r1, [pc, #160]	; (15354 <basic_init+0x8e0>)
   152b2:	7b4b      	ldrb	r3, [r1, #13]
   152b4:	08db      	lsrs	r3, r3, #3
   152b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   152ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   152be:	f641 35da 	movw	r5, #7130	; 0x1bda
   152c2:	442b      	add	r3, r5
   152c4:	eb03 2203 	add.w	r2, r3, r3, lsl #8
   152c8:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
   152cc:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
   152d0:	898a      	ldrh	r2, [r1, #12]
   152d2:	f3c2 1245 	ubfx	r2, r2, #5, #6
   152d6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   152da:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   152de:	f502 5262 	add.w	r2, r2, #14464	; 0x3880
   152e2:	321a      	adds	r2, #26
   152e4:	eb02 2402 	add.w	r4, r2, r2, lsl #8
   152e8:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
   152ec:	f3c2 54c5 	ubfx	r4, r2, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
   152f0:	7b09      	ldrb	r1, [r1, #12]
   152f2:	f001 011f 	and.w	r1, r1, #31
   152f6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   152fa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   152fe:	4429      	add	r1, r5
   15300:	eb01 2201 	add.w	r2, r1, r1, lsl #8
   15304:	eb01 11c2 	add.w	r1, r1, r2, lsl #7
   15308:	f3c1 51c4 	ubfx	r1, r1, #23, #5
   1530c:	f04f 0200 	mov.w	r2, #0
   15310:	f361 0204 	bfi	r2, r1, #0, #5
   15314:	f364 124a 	bfi	r2, r4, #5, #6
   15318:	f363 22cf 	bfi	r2, r3, #11, #5
   1531c:	f241 0129 	movw	r1, #4137	; 0x1029
   15320:	4d0b      	ldr	r5, [pc, #44]	; (15350 <basic_init+0x8dc>)
   15322:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED, COLOR_BTN_CHK);
   15324:	4c0b      	ldr	r4, [pc, #44]	; (15354 <basic_init+0x8e0>)
   15326:	6820      	ldr	r0, [r4, #0]
   15328:	89a2      	ldrh	r2, [r4, #12]
   1532a:	f240 1129 	movw	r1, #297	; 0x129
   1532e:	3010      	adds	r0, #16
   15330:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, COLOR_BTN_CHK_PR);
   15332:	6826      	ldr	r6, [r4, #0]
   15334:	3610      	adds	r6, #16
   15336:	214c      	movs	r1, #76	; 0x4c
   15338:	89a0      	ldrh	r0, [r4, #12]
   1533a:	4b08      	ldr	r3, [pc, #32]	; (1535c <basic_init+0x8e8>)
   1533c:	4798      	blx	r3
   1533e:	4602      	mov	r2, r0
   15340:	f241 1129 	movw	r1, #4393	; 0x1129
   15344:	4630      	mov	r0, r6
   15346:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN);
   15348:	6820      	ldr	r0, [r4, #0]
   1534a:	3010      	adds	r0, #16
   1534c:	6a23      	ldr	r3, [r4, #32]
   1534e:	e00b      	b.n	15368 <basic_init+0x8f4>
   15350:	00006a19 	.word	0x00006a19
   15354:	2000c5d4 	.word	0x2000c5d4
   15358:	000068d5 	.word	0x000068d5
   1535c:	00011bf7 	.word	0x00011bf7
   15360:	00014a55 	.word	0x00014a55
   15364:	00006b5d 	.word	0x00006b5d
   15368:	f013 0f02 	tst.w	r3, #2
   1536c:	f040 83d9 	bne.w	15b22 <basic_init+0x10ae>
   15370:	230b      	movs	r3, #11
   15372:	2118      	movs	r1, #24
   15374:	240e      	movs	r4, #14
   15376:	f04f 0200 	mov.w	r2, #0
   1537a:	f364 0204 	bfi	r2, r4, #0, #5
   1537e:	f361 124a 	bfi	r2, r1, #5, #6
   15382:	f363 22cf 	bfi	r2, r3, #11, #5
   15386:	f242 0129 	movw	r1, #8233	; 0x2029
   1538a:	4bc6      	ldr	r3, [pc, #792]	; (156a4 <basic_init+0xc30>)
   1538c:	4798      	blx	r3
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED | LV_STATE_CHECKED, COLOR_BTN_DIS);
   1538e:	4bc6      	ldr	r3, [pc, #792]	; (156a8 <basic_init+0xc34>)
   15390:	6818      	ldr	r0, [r3, #0]
   15392:	6a1b      	ldr	r3, [r3, #32]
   15394:	f013 0302 	ands.w	r3, r3, #2
   15398:	bf14      	ite	ne
   1539a:	2133      	movne	r1, #51	; 0x33
   1539c:	2122      	moveq	r1, #34	; 0x22
   1539e:	2b00      	cmp	r3, #0
   153a0:	bf14      	ite	ne
   153a2:	2319      	movne	r3, #25
   153a4:	2311      	moveq	r3, #17
   153a6:	f04f 0200 	mov.w	r2, #0
   153aa:	f363 0204 	bfi	r2, r3, #0, #5
   153ae:	f361 124a 	bfi	r2, r1, #5, #6
   153b2:	f363 22cf 	bfi	r2, r3, #11, #5
   153b6:	f242 1129 	movw	r1, #8489	; 0x2129
   153ba:	3010      	adds	r0, #16
   153bc:	4db9      	ldr	r5, [pc, #740]	; (156a4 <basic_init+0xc30>)
   153be:	47a8      	blx	r5
    lv_style_set_border_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN_BORDER);
   153c0:	4cb9      	ldr	r4, [pc, #740]	; (156a8 <basic_init+0xc34>)
   153c2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   153c4:	89a2      	ldrh	r2, [r4, #12]
   153c6:	2139      	movs	r1, #57	; 0x39
   153c8:	3010      	adds	r0, #16
   153ca:	47a8      	blx	r5
    lv_style_set_border_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_BORDER_PR);
   153cc:	6820      	ldr	r0, [r4, #0]
   153ce:	89a2      	ldrh	r2, [r4, #12]
   153d0:	f241 0139 	movw	r1, #4153	; 0x1039
   153d4:	3010      	adds	r0, #16
   153d6:	47a8      	blx	r5
    lv_style_set_border_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN_BORDER_INA);
   153d8:	6820      	ldr	r0, [r4, #0]
   153da:	6a23      	ldr	r3, [r4, #32]
   153dc:	f013 0302 	ands.w	r3, r3, #2
   153e0:	bf14      	ite	ne
   153e2:	2122      	movne	r1, #34	; 0x22
   153e4:	2110      	moveq	r1, #16
   153e6:	2b00      	cmp	r3, #0
   153e8:	bf14      	ite	ne
   153ea:	2311      	movne	r3, #17
   153ec:	2308      	moveq	r3, #8
   153ee:	f04f 0200 	mov.w	r2, #0
   153f2:	f363 0204 	bfi	r2, r3, #0, #5
   153f6:	f361 124a 	bfi	r2, r1, #5, #6
   153fa:	f363 22cf 	bfi	r2, r3, #11, #5
   153fe:	f242 0139 	movw	r1, #8249	; 0x2039
   15402:	3010      	adds	r0, #16
   15404:	47a8      	blx	r5
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
   15406:	6824      	ldr	r4, [r4, #0]
   15408:	3410      	adds	r4, #16
   1540a:	2000      	movs	r0, #0
   1540c:	4ba7      	ldr	r3, [pc, #668]	; (156ac <basic_init+0xc38>)
   1540e:	4798      	blx	r3
   15410:	3028      	adds	r0, #40	; 0x28
   15412:	0040      	lsls	r0, r0, #1
   15414:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15418:	f280 8387 	bge.w	15b2a <basic_init+0x10b6>
   1541c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   1541e:	2130      	movs	r1, #48	; 0x30
   15420:	4620      	mov	r0, r4
   15422:	4ba3      	ldr	r3, [pc, #652]	; (156b0 <basic_init+0xc3c>)
   15424:	4798      	blx	r3
    lv_style_set_border_opa(&styles->btn, LV_STATE_CHECKED, LV_OPA_TRANSP);
   15426:	4ca0      	ldr	r4, [pc, #640]	; (156a8 <basic_init+0xc34>)
   15428:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
   1542a:	2200      	movs	r2, #0
   1542c:	f44f 719e 	mov.w	r1, #316	; 0x13c
   15430:	3010      	adds	r0, #16
   15432:	4ba0      	ldr	r3, [pc, #640]	; (156b4 <basic_init+0xc40>)
   15434:	4798      	blx	r3
    lv_style_set_text_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
   15436:	6820      	ldr	r0, [r4, #0]
   15438:	3010      	adds	r0, #16
   1543a:	6a23      	ldr	r3, [r4, #32]
   1543c:	f013 0f02 	tst.w	r3, #2
   15440:	f040 8380 	bne.w	15b44 <basic_init+0x10d0>
   15444:	231f      	movs	r3, #31
   15446:	213f      	movs	r1, #63	; 0x3f
   15448:	461c      	mov	r4, r3
   1544a:	f04f 0200 	mov.w	r2, #0
   1544e:	f364 0204 	bfi	r2, r4, #0, #5
   15452:	f361 124a 	bfi	r2, r1, #5, #6
   15456:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   1545a:	f248 0189 	movw	r1, #32905	; 0x8089
   1545e:	4b91      	ldr	r3, [pc, #580]	; (156a4 <basic_init+0xc30>)
   15460:	4798      	blx	r3
    lv_style_set_text_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
   15462:	4b91      	ldr	r3, [pc, #580]	; (156a8 <basic_init+0xc34>)
   15464:	6818      	ldr	r0, [r3, #0]
   15466:	3010      	adds	r0, #16
   15468:	6a1b      	ldr	r3, [r3, #32]
   1546a:	f013 0f02 	tst.w	r3, #2
   1546e:	f040 836d 	bne.w	15b4c <basic_init+0x10d8>
   15472:	231f      	movs	r3, #31
   15474:	213f      	movs	r1, #63	; 0x3f
   15476:	461c      	mov	r4, r3
   15478:	f04f 0200 	mov.w	r2, #0
   1547c:	f364 0204 	bfi	r2, r4, #0, #5
   15480:	f361 124a 	bfi	r2, r1, #5, #6
   15484:	f363 22cf 	bfi	r2, r3, #11, #5
   15488:	f249 0189 	movw	r1, #37001	; 0x9089
   1548c:	4d85      	ldr	r5, [pc, #532]	; (156a4 <basic_init+0xc30>)
   1548e:	47a8      	blx	r5
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
   15490:	4c85      	ldr	r4, [pc, #532]	; (156a8 <basic_init+0xc34>)
   15492:	6820      	ldr	r0, [r4, #0]
   15494:	f04f 32ff 	mov.w	r2, #4294967295
   15498:	f248 1189 	movw	r1, #33161	; 0x8189
   1549c:	3010      	adds	r0, #16
   1549e:	47a8      	blx	r5
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
   154a0:	6820      	ldr	r0, [r4, #0]
   154a2:	f04f 32ff 	mov.w	r2, #4294967295
   154a6:	f249 1189 	movw	r1, #37257	; 0x9189
   154aa:	3010      	adds	r0, #16
   154ac:	47a8      	blx	r5
    lv_style_set_text_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
   154ae:	6820      	ldr	r0, [r4, #0]
   154b0:	2311      	movs	r3, #17
   154b2:	f04f 0200 	mov.w	r2, #0
   154b6:	f363 0204 	bfi	r2, r3, #0, #5
   154ba:	2122      	movs	r1, #34	; 0x22
   154bc:	f361 124a 	bfi	r2, r1, #5, #6
   154c0:	f363 22cf 	bfi	r2, r3, #11, #5
   154c4:	f24a 0189 	movw	r1, #41097	; 0xa089
   154c8:	3010      	adds	r0, #16
   154ca:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
   154cc:	6820      	ldr	r0, [r4, #0]
   154ce:	3010      	adds	r0, #16
   154d0:	6a23      	ldr	r3, [r4, #32]
   154d2:	f013 0f02 	tst.w	r3, #2
   154d6:	f040 833d 	bne.w	15b54 <basic_init+0x10e0>
   154da:	231f      	movs	r3, #31
   154dc:	213f      	movs	r1, #63	; 0x3f
   154de:	461c      	mov	r4, r3
   154e0:	f04f 0200 	mov.w	r2, #0
   154e4:	f364 0204 	bfi	r2, r4, #0, #5
   154e8:	f361 124a 	bfi	r2, r1, #5, #6
   154ec:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   154f0:	f248 01a9 	movw	r1, #32937	; 0x80a9
   154f4:	4b6b      	ldr	r3, [pc, #428]	; (156a4 <basic_init+0xc30>)
   154f6:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
   154f8:	4b6b      	ldr	r3, [pc, #428]	; (156a8 <basic_init+0xc34>)
   154fa:	6818      	ldr	r0, [r3, #0]
   154fc:	3010      	adds	r0, #16
   154fe:	6a1b      	ldr	r3, [r3, #32]
   15500:	f013 0f02 	tst.w	r3, #2
   15504:	f040 832a 	bne.w	15b5c <basic_init+0x10e8>
   15508:	231f      	movs	r3, #31
   1550a:	213f      	movs	r1, #63	; 0x3f
   1550c:	461c      	mov	r4, r3
   1550e:	f04f 0200 	mov.w	r2, #0
   15512:	f364 0204 	bfi	r2, r4, #0, #5
   15516:	f361 124a 	bfi	r2, r1, #5, #6
   1551a:	f363 22cf 	bfi	r2, r3, #11, #5
   1551e:	f249 01a9 	movw	r1, #37033	; 0x90a9
   15522:	4d60      	ldr	r5, [pc, #384]	; (156a4 <basic_init+0xc30>)
   15524:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, lv_color_hex(0xffffff));
   15526:	4c60      	ldr	r4, [pc, #384]	; (156a8 <basic_init+0xc34>)
   15528:	6820      	ldr	r0, [r4, #0]
   1552a:	f04f 32ff 	mov.w	r2, #4294967295
   1552e:	f249 01a9 	movw	r1, #37033	; 0x90a9
   15532:	3010      	adds	r0, #16
   15534:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
   15536:	6820      	ldr	r0, [r4, #0]
   15538:	f04f 32ff 	mov.w	r2, #4294967295
   1553c:	f249 11a9 	movw	r1, #37289	; 0x91a9
   15540:	3010      	adds	r0, #16
   15542:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
   15544:	6820      	ldr	r0, [r4, #0]
   15546:	2311      	movs	r3, #17
   15548:	f04f 0200 	mov.w	r2, #0
   1554c:	f363 0204 	bfi	r2, r3, #0, #5
   15550:	2122      	movs	r1, #34	; 0x22
   15552:	f361 124a 	bfi	r2, r1, #5, #6
   15556:	f363 22cf 	bfi	r2, r3, #11, #5
   1555a:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
   1555e:	3010      	adds	r0, #16
   15560:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
   15562:	6820      	ldr	r0, [r4, #0]
   15564:	3010      	adds	r0, #16
   15566:	6a23      	ldr	r3, [r4, #32]
   15568:	f013 0f02 	tst.w	r3, #2
   1556c:	f040 82fa 	bne.w	15b64 <basic_init+0x10f0>
   15570:	231f      	movs	r3, #31
   15572:	213f      	movs	r1, #63	; 0x3f
   15574:	461c      	mov	r4, r3
   15576:	f04f 0200 	mov.w	r2, #0
   1557a:	f364 0204 	bfi	r2, r4, #0, #5
   1557e:	f361 124a 	bfi	r2, r1, #5, #6
   15582:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   15586:	2179      	movs	r1, #121	; 0x79
   15588:	4b46      	ldr	r3, [pc, #280]	; (156a4 <basic_init+0xc30>)
   1558a:	4798      	blx	r3
    lv_style_set_value_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
   1558c:	4b46      	ldr	r3, [pc, #280]	; (156a8 <basic_init+0xc34>)
   1558e:	6818      	ldr	r0, [r3, #0]
   15590:	3010      	adds	r0, #16
   15592:	6a1b      	ldr	r3, [r3, #32]
   15594:	f013 0f02 	tst.w	r3, #2
   15598:	f040 82e8 	bne.w	15b6c <basic_init+0x10f8>
   1559c:	231f      	movs	r3, #31
   1559e:	213f      	movs	r1, #63	; 0x3f
   155a0:	461c      	mov	r4, r3
   155a2:	f04f 0200 	mov.w	r2, #0
   155a6:	f364 0204 	bfi	r2, r4, #0, #5
   155aa:	f361 124a 	bfi	r2, r1, #5, #6
   155ae:	f363 22cf 	bfi	r2, r3, #11, #5
   155b2:	f241 0179 	movw	r1, #4217	; 0x1079
   155b6:	4d3b      	ldr	r5, [pc, #236]	; (156a4 <basic_init+0xc30>)
   155b8:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
   155ba:	4c3b      	ldr	r4, [pc, #236]	; (156a8 <basic_init+0xc34>)
   155bc:	6820      	ldr	r0, [r4, #0]
   155be:	f04f 32ff 	mov.w	r2, #4294967295
   155c2:	f240 1179 	movw	r1, #377	; 0x179
   155c6:	3010      	adds	r0, #16
   155c8:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
   155ca:	6820      	ldr	r0, [r4, #0]
   155cc:	f04f 32ff 	mov.w	r2, #4294967295
   155d0:	f241 1179 	movw	r1, #4473	; 0x1179
   155d4:	3010      	adds	r0, #16
   155d6:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
   155d8:	6820      	ldr	r0, [r4, #0]
   155da:	2311      	movs	r3, #17
   155dc:	f04f 0200 	mov.w	r2, #0
   155e0:	f363 0204 	bfi	r2, r3, #0, #5
   155e4:	2122      	movs	r1, #34	; 0x22
   155e6:	f361 124a 	bfi	r2, r1, #5, #6
   155ea:	f363 22cf 	bfi	r2, r3, #11, #5
   155ee:	f242 0179 	movw	r1, #8313	; 0x2079
   155f2:	3010      	adds	r0, #16
   155f4:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
   155f6:	6824      	ldr	r4, [r4, #0]
   155f8:	3410      	adds	r4, #16
   155fa:	2000      	movs	r0, #0
   155fc:	4b2b      	ldr	r3, [pc, #172]	; (156ac <basic_init+0xc38>)
   155fe:	4798      	blx	r3
   15600:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15604:	00c0      	lsls	r0, r0, #3
   15606:	3050      	adds	r0, #80	; 0x50
   15608:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1560c:	f280 82b2 	bge.w	15b74 <basic_init+0x1100>
   15610:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   15612:	2112      	movs	r1, #18
   15614:	4620      	mov	r0, r4
   15616:	4b26      	ldr	r3, [pc, #152]	; (156b0 <basic_init+0xc3c>)
   15618:	4798      	blx	r3
    lv_style_set_pad_right(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
   1561a:	4b23      	ldr	r3, [pc, #140]	; (156a8 <basic_init+0xc34>)
   1561c:	681c      	ldr	r4, [r3, #0]
   1561e:	3410      	adds	r4, #16
   15620:	2000      	movs	r0, #0
   15622:	4b22      	ldr	r3, [pc, #136]	; (156ac <basic_init+0xc38>)
   15624:	4798      	blx	r3
   15626:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1562a:	00c0      	lsls	r0, r0, #3
   1562c:	3050      	adds	r0, #80	; 0x50
   1562e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15632:	f280 82ae 	bge.w	15b92 <basic_init+0x111e>
   15636:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   15638:	2113      	movs	r1, #19
   1563a:	4620      	mov	r0, r4
   1563c:	4b1c      	ldr	r3, [pc, #112]	; (156b0 <basic_init+0xc3c>)
   1563e:	4798      	blx	r3
    lv_style_set_pad_top(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
   15640:	4b19      	ldr	r3, [pc, #100]	; (156a8 <basic_init+0xc34>)
   15642:	681c      	ldr	r4, [r3, #0]
   15644:	3410      	adds	r4, #16
   15646:	2000      	movs	r0, #0
   15648:	4b18      	ldr	r3, [pc, #96]	; (156ac <basic_init+0xc38>)
   1564a:	4798      	blx	r3
   1564c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15650:	3050      	adds	r0, #80	; 0x50
   15652:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15656:	f280 82ab 	bge.w	15bb0 <basic_init+0x113c>
   1565a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   1565c:	2110      	movs	r1, #16
   1565e:	4620      	mov	r0, r4
   15660:	4b13      	ldr	r3, [pc, #76]	; (156b0 <basic_init+0xc3c>)
   15662:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
   15664:	4b10      	ldr	r3, [pc, #64]	; (156a8 <basic_init+0xc34>)
   15666:	681c      	ldr	r4, [r3, #0]
   15668:	3410      	adds	r4, #16
   1566a:	2000      	movs	r0, #0
   1566c:	4b0f      	ldr	r3, [pc, #60]	; (156ac <basic_init+0xc38>)
   1566e:	4798      	blx	r3
   15670:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15674:	3050      	adds	r0, #80	; 0x50
   15676:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1567a:	f280 82a7 	bge.w	15bcc <basic_init+0x1158>
   1567e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   15680:	2111      	movs	r1, #17
   15682:	4620      	mov	r0, r4
   15684:	4b0a      	ldr	r3, [pc, #40]	; (156b0 <basic_init+0xc3c>)
   15686:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->btn, LV_STATE_DEFAULT, LV_DPX(20));
   15688:	4b07      	ldr	r3, [pc, #28]	; (156a8 <basic_init+0xc34>)
   1568a:	681c      	ldr	r4, [r3, #0]
   1568c:	3410      	adds	r4, #16
   1568e:	2000      	movs	r0, #0
   15690:	4b06      	ldr	r3, [pc, #24]	; (156ac <basic_init+0xc38>)
   15692:	4798      	blx	r3
   15694:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15698:	0080      	lsls	r0, r0, #2
   1569a:	3050      	adds	r0, #80	; 0x50
   1569c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   156a0:	e00a      	b.n	156b8 <basic_init+0xc44>
   156a2:	bf00      	nop
   156a4:	00006a19 	.word	0x00006a19
   156a8:	2000c5d4 	.word	0x2000c5d4
   156ac:	00010f31 	.word	0x00010f31
   156b0:	000068d5 	.word	0x000068d5
   156b4:	00006b5d 	.word	0x00006b5d
   156b8:	f280 8296 	bge.w	15be8 <basic_init+0x1174>
   156bc:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   156be:	2114      	movs	r1, #20
   156c0:	4620      	mov	r0, r4
   156c2:	4dbd      	ldr	r5, [pc, #756]	; (159b8 <basic_init+0xf44>)
   156c4:	47a8      	blx	r5
    lv_style_set_outline_width(&styles->btn, LV_STATE_DEFAULT, 3);
   156c6:	4cbd      	ldr	r4, [pc, #756]	; (159bc <basic_init+0xf48>)
   156c8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
   156ca:	2203      	movs	r2, #3
   156cc:	2140      	movs	r1, #64	; 0x40
   156ce:	3010      	adds	r0, #16
   156d0:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_0);
   156d2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
   156d4:	2200      	movs	r2, #0
   156d6:	214c      	movs	r1, #76	; 0x4c
   156d8:	3010      	adds	r0, #16
   156da:	4eb9      	ldr	r6, [pc, #740]	; (159c0 <basic_init+0xf4c>)
   156dc:	47b0      	blx	r6
    lv_style_set_outline_opa(&styles->btn, LV_STATE_FOCUSED, LV_OPA_50);
   156de:	6820      	ldr	r0, [r4, #0]
   156e0:	227f      	movs	r2, #127	; 0x7f
   156e2:	f44f 7113 	mov.w	r1, #588	; 0x24c
   156e6:	3010      	adds	r0, #16
   156e8:	47b0      	blx	r6
    lv_style_set_outline_color(&styles->btn, LV_STATE_DEFAULT, theme.color_primary);
   156ea:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
   156ec:	89a2      	ldrh	r2, [r4, #12]
   156ee:	2149      	movs	r1, #73	; 0x49
   156f0:	3010      	adds	r0, #16
   156f2:	4eb4      	ldr	r6, [pc, #720]	; (159c4 <basic_init+0xf50>)
   156f4:	47b0      	blx	r6
    lv_style_set_outline_color(&styles->btn, LV_STATE_EDITED, theme.color_secondary);
   156f6:	6820      	ldr	r0, [r4, #0]
   156f8:	89e2      	ldrh	r2, [r4, #14]
   156fa:	f240 4149 	movw	r1, #1097	; 0x449
   156fe:	3010      	adds	r0, #16
   15700:	47b0      	blx	r6
    lv_style_set_transition_time(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
   15702:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
   15704:	2296      	movs	r2, #150	; 0x96
   15706:	21b0      	movs	r1, #176	; 0xb0
   15708:	3010      	adds	r0, #16
   1570a:	47a8      	blx	r5
    lv_style_set_transition_prop_4(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BORDER_OPA);
   1570c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
   1570e:	223c      	movs	r2, #60	; 0x3c
   15710:	21b5      	movs	r1, #181	; 0xb5
   15712:	3010      	adds	r0, #16
   15714:	47a8      	blx	r5
    lv_style_set_transition_prop_5(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
   15716:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
   15718:	2229      	movs	r2, #41	; 0x29
   1571a:	21b6      	movs	r1, #182	; 0xb6
   1571c:	3010      	adds	r0, #16
   1571e:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
   15720:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
   15722:	224c      	movs	r2, #76	; 0x4c
   15724:	21b7      	movs	r1, #183	; 0xb7
   15726:	3010      	adds	r0, #16
   15728:	47a8      	blx	r5
    lv_style_set_transition_delay(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
   1572a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
   1572c:	2296      	movs	r2, #150	; 0x96
   1572e:	21b1      	movs	r1, #177	; 0xb1
   15730:	3010      	adds	r0, #16
   15732:	47a8      	blx	r5
    lv_style_set_transition_delay(&styles->btn, LV_STATE_PRESSED, 0);
   15734:	6820      	ldr	r0, [r4, #0]
   15736:	2200      	movs	r2, #0
   15738:	f241 01b1 	movw	r1, #4273	; 0x10b1
   1573c:	3010      	adds	r0, #16
   1573e:	47a8      	blx	r5
    style_init_reset(&styles->pad_inner);
   15740:	6820      	ldr	r0, [r4, #0]
   15742:	3014      	adds	r0, #20
   15744:	4ba0      	ldr	r3, [pc, #640]	; (159c8 <basic_init+0xf54>)
   15746:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
   15748:	6824      	ldr	r4, [r4, #0]
   1574a:	3414      	adds	r4, #20
                           lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(20) : LV_DPX(40));
   1574c:	2000      	movs	r0, #0
   1574e:	4b9f      	ldr	r3, [pc, #636]	; (159cc <basic_init+0xf58>)
   15750:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
   15752:	2832      	cmp	r0, #50	; 0x32
   15754:	f200 8266 	bhi.w	15c24 <basic_init+0x11b0>
                           lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(20) : LV_DPX(40));
   15758:	2000      	movs	r0, #0
   1575a:	4b9d      	ldr	r3, [pc, #628]	; (159d0 <basic_init+0xf5c>)
   1575c:	4798      	blx	r3
   1575e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15762:	0080      	lsls	r0, r0, #2
   15764:	3050      	adds	r0, #80	; 0x50
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
   15766:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1576a:	f280 824c 	bge.w	15c06 <basic_init+0x1192>
   1576e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   15770:	2114      	movs	r1, #20
   15772:	4620      	mov	r0, r4
   15774:	4b90      	ldr	r3, [pc, #576]	; (159b8 <basic_init+0xf44>)
   15776:	4798      	blx	r3
    style_init_reset(&styles->pad_small);
   15778:	4b90      	ldr	r3, [pc, #576]	; (159bc <basic_init+0xf48>)
   1577a:	6818      	ldr	r0, [r3, #0]
   1577c:	3018      	adds	r0, #24
   1577e:	4b92      	ldr	r3, [pc, #584]	; (159c8 <basic_init+0xf54>)
   15780:	4798      	blx	r3
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(10) : LV_DPX(20);
   15782:	2000      	movs	r0, #0
   15784:	4b91      	ldr	r3, [pc, #580]	; (159cc <basic_init+0xf58>)
   15786:	4798      	blx	r3
   15788:	2832      	cmp	r0, #50	; 0x32
   1578a:	f200 8275 	bhi.w	15c78 <basic_init+0x1204>
   1578e:	2000      	movs	r0, #0
   15790:	4b8f      	ldr	r3, [pc, #572]	; (159d0 <basic_init+0xf5c>)
   15792:	4798      	blx	r3
   15794:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15798:	0040      	lsls	r0, r0, #1
   1579a:	3050      	adds	r0, #80	; 0x50
   1579c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   157a0:	f280 825b 	bge.w	15c5a <basic_init+0x11e6>
   157a4:	2401      	movs	r4, #1
    lv_style_set_pad_left(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
   157a6:	4e85      	ldr	r6, [pc, #532]	; (159bc <basic_init+0xf48>)
   157a8:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   157aa:	4622      	mov	r2, r4
   157ac:	2112      	movs	r1, #18
   157ae:	3018      	adds	r0, #24
   157b0:	4d81      	ldr	r5, [pc, #516]	; (159b8 <basic_init+0xf44>)
   157b2:	47a8      	blx	r5
    lv_style_set_pad_right(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
   157b4:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   157b6:	4622      	mov	r2, r4
   157b8:	2113      	movs	r1, #19
   157ba:	3018      	adds	r0, #24
   157bc:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
   157be:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   157c0:	4622      	mov	r2, r4
   157c2:	2110      	movs	r1, #16
   157c4:	3018      	adds	r0, #24
   157c6:	47a8      	blx	r5
    lv_style_set_pad_bottom(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
   157c8:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   157ca:	4622      	mov	r2, r4
   157cc:	2111      	movs	r1, #17
   157ce:	3018      	adds	r0, #24
   157d0:	47a8      	blx	r5
    lv_style_set_pad_inner(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
   157d2:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   157d4:	4622      	mov	r2, r4
   157d6:	2114      	movs	r1, #20
   157d8:	3018      	adds	r0, #24
   157da:	47a8      	blx	r5
   157dc:	bd70      	pop	{r4, r5, r6, pc}
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, LV_DPX(8));
   157de:	2000      	movs	r0, #0
   157e0:	4b7b      	ldr	r3, [pc, #492]	; (159d0 <basic_init+0xf5c>)
   157e2:	4798      	blx	r3
   157e4:	300a      	adds	r0, #10
   157e6:	00c0      	lsls	r0, r0, #3
   157e8:	4b7a      	ldr	r3, [pc, #488]	; (159d4 <basic_init+0xf60>)
   157ea:	fb83 2300 	smull	r2, r3, r3, r0
   157ee:	17c2      	asrs	r2, r0, #31
   157f0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   157f4:	b212      	sxth	r2, r2
   157f6:	f7ff b9ad 	b.w	14b54 <basic_init+0xe0>
   157fa:	231f      	movs	r3, #31
   157fc:	213f      	movs	r1, #63	; 0x3f
   157fe:	461c      	mov	r4, r3
   15800:	f7ff b9bd 	b.w	14b7e <basic_init+0x10a>
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
   15804:	2000      	movs	r0, #0
   15806:	4b72      	ldr	r3, [pc, #456]	; (159d0 <basic_init+0xf5c>)
   15808:	4798      	blx	r3
   1580a:	3028      	adds	r0, #40	; 0x28
   1580c:	0040      	lsls	r0, r0, #1
   1580e:	4b71      	ldr	r3, [pc, #452]	; (159d4 <basic_init+0xf60>)
   15810:	fb83 2300 	smull	r2, r3, r3, r0
   15814:	17c2      	asrs	r2, r0, #31
   15816:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   1581a:	b212      	sxth	r2, r2
   1581c:	f7ff b9ed 	b.w	14bfa <basic_init+0x186>
   15820:	2307      	movs	r3, #7
   15822:	210f      	movs	r1, #15
   15824:	2408      	movs	r4, #8
   15826:	f7ff ba03 	b.w	14c30 <basic_init+0x1bc>
   1582a:	2307      	movs	r3, #7
   1582c:	210f      	movs	r1, #15
   1582e:	2408      	movs	r4, #8
   15830:	f7ff ba1b 	b.w	14c6a <basic_init+0x1f6>
   15834:	2307      	movs	r3, #7
   15836:	210f      	movs	r1, #15
   15838:	2408      	movs	r4, #8
   1583a:	f7ff ba2c 	b.w	14c96 <basic_init+0x222>
   1583e:	2307      	movs	r3, #7
   15840:	210f      	movs	r1, #15
   15842:	2408      	movs	r4, #8
   15844:	f7ff ba3e 	b.w	14cc4 <basic_init+0x250>
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   15848:	2000      	movs	r0, #0
   1584a:	4b61      	ldr	r3, [pc, #388]	; (159d0 <basic_init+0xf5c>)
   1584c:	4798      	blx	r3
   1584e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15852:	3050      	adds	r0, #80	; 0x50
   15854:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15858:	da02      	bge.n	15860 <basic_init+0xdec>
   1585a:	2401      	movs	r4, #1
   1585c:	f7ff ba58 	b.w	14d10 <basic_init+0x29c>
   15860:	2000      	movs	r0, #0
   15862:	4b5b      	ldr	r3, [pc, #364]	; (159d0 <basic_init+0xf5c>)
   15864:	4798      	blx	r3
   15866:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1586a:	3050      	adds	r0, #80	; 0x50
   1586c:	4a59      	ldr	r2, [pc, #356]	; (159d4 <basic_init+0xf60>)
   1586e:	fb82 3200 	smull	r3, r2, r2, r0
   15872:	17c4      	asrs	r4, r0, #31
   15874:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
   15878:	b2a4      	uxth	r4, r4
   1587a:	f7ff ba49 	b.w	14d10 <basic_init+0x29c>
   1587e:	2000      	movs	r0, #0
   15880:	4b53      	ldr	r3, [pc, #332]	; (159d0 <basic_init+0xf5c>)
   15882:	4798      	blx	r3
   15884:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15888:	0040      	lsls	r0, r0, #1
   1588a:	3050      	adds	r0, #80	; 0x50
   1588c:	4a51      	ldr	r2, [pc, #324]	; (159d4 <basic_init+0xf60>)
   1588e:	fb82 3200 	smull	r3, r2, r2, r0
   15892:	17c4      	asrs	r4, r0, #31
   15894:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
   15898:	b2a4      	uxth	r4, r4
   1589a:	f7ff ba39 	b.w	14d10 <basic_init+0x29c>
   1589e:	2000      	movs	r0, #0
   158a0:	4b4b      	ldr	r3, [pc, #300]	; (159d0 <basic_init+0xf5c>)
   158a2:	4798      	blx	r3
   158a4:	3028      	adds	r0, #40	; 0x28
   158a6:	0040      	lsls	r0, r0, #1
   158a8:	4b4a      	ldr	r3, [pc, #296]	; (159d4 <basic_init+0xf60>)
   158aa:	fb83 2300 	smull	r2, r3, r3, r0
   158ae:	17c2      	asrs	r2, r0, #31
   158b0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   158b4:	b292      	uxth	r2, r2
   158b6:	f7ff ba35 	b.w	14d24 <basic_init+0x2b0>
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   158ba:	2000      	movs	r0, #0
   158bc:	4b44      	ldr	r3, [pc, #272]	; (159d0 <basic_init+0xf5c>)
   158be:	4798      	blx	r3
   158c0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   158c4:	3050      	adds	r0, #80	; 0x50
   158c6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   158ca:	da02      	bge.n	158d2 <basic_init+0xe5e>
   158cc:	2401      	movs	r4, #1
   158ce:	f7ff ba55 	b.w	14d7c <basic_init+0x308>
   158d2:	2000      	movs	r0, #0
   158d4:	4b3e      	ldr	r3, [pc, #248]	; (159d0 <basic_init+0xf5c>)
   158d6:	4798      	blx	r3
   158d8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   158dc:	3050      	adds	r0, #80	; 0x50
   158de:	4a3d      	ldr	r2, [pc, #244]	; (159d4 <basic_init+0xf60>)
   158e0:	fb82 3200 	smull	r3, r2, r2, r0
   158e4:	17c4      	asrs	r4, r0, #31
   158e6:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
   158ea:	b2a4      	uxth	r4, r4
   158ec:	f7ff ba46 	b.w	14d7c <basic_init+0x308>
   158f0:	2000      	movs	r0, #0
   158f2:	4b37      	ldr	r3, [pc, #220]	; (159d0 <basic_init+0xf5c>)
   158f4:	4798      	blx	r3
   158f6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   158fa:	0040      	lsls	r0, r0, #1
   158fc:	3050      	adds	r0, #80	; 0x50
   158fe:	4a35      	ldr	r2, [pc, #212]	; (159d4 <basic_init+0xf60>)
   15900:	fb82 3200 	smull	r3, r2, r2, r0
   15904:	17c4      	asrs	r4, r0, #31
   15906:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
   1590a:	b2a4      	uxth	r4, r4
   1590c:	f7ff ba36 	b.w	14d7c <basic_init+0x308>
   15910:	2000      	movs	r0, #0
   15912:	4b2f      	ldr	r3, [pc, #188]	; (159d0 <basic_init+0xf5c>)
   15914:	4798      	blx	r3
   15916:	3028      	adds	r0, #40	; 0x28
   15918:	0040      	lsls	r0, r0, #1
   1591a:	4b2e      	ldr	r3, [pc, #184]	; (159d4 <basic_init+0xf60>)
   1591c:	fb83 2300 	smull	r2, r3, r3, r0
   15920:	17c2      	asrs	r2, r0, #31
   15922:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   15926:	b292      	uxth	r2, r2
   15928:	f7ff ba32 	b.w	14d90 <basic_init+0x31c>
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   1592c:	2000      	movs	r0, #0
   1592e:	4b28      	ldr	r3, [pc, #160]	; (159d0 <basic_init+0xf5c>)
   15930:	4798      	blx	r3
   15932:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15936:	3050      	adds	r0, #80	; 0x50
   15938:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1593c:	da02      	bge.n	15944 <basic_init+0xed0>
   1593e:	2401      	movs	r4, #1
   15940:	f7ff ba41 	b.w	14dc6 <basic_init+0x352>
   15944:	2000      	movs	r0, #0
   15946:	4b22      	ldr	r3, [pc, #136]	; (159d0 <basic_init+0xf5c>)
   15948:	4798      	blx	r3
   1594a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1594e:	3050      	adds	r0, #80	; 0x50
   15950:	4a20      	ldr	r2, [pc, #128]	; (159d4 <basic_init+0xf60>)
   15952:	fb82 3200 	smull	r3, r2, r2, r0
   15956:	17c4      	asrs	r4, r0, #31
   15958:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
   1595c:	b2a4      	uxth	r4, r4
   1595e:	f7ff ba32 	b.w	14dc6 <basic_init+0x352>
   15962:	2000      	movs	r0, #0
   15964:	4b1a      	ldr	r3, [pc, #104]	; (159d0 <basic_init+0xf5c>)
   15966:	4798      	blx	r3
   15968:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1596c:	0040      	lsls	r0, r0, #1
   1596e:	3050      	adds	r0, #80	; 0x50
   15970:	4a18      	ldr	r2, [pc, #96]	; (159d4 <basic_init+0xf60>)
   15972:	fb82 3200 	smull	r3, r2, r2, r0
   15976:	17c4      	asrs	r4, r0, #31
   15978:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
   1597c:	b2a4      	uxth	r4, r4
   1597e:	f7ff ba22 	b.w	14dc6 <basic_init+0x352>
   15982:	2000      	movs	r0, #0
   15984:	4b12      	ldr	r3, [pc, #72]	; (159d0 <basic_init+0xf5c>)
   15986:	4798      	blx	r3
   15988:	3028      	adds	r0, #40	; 0x28
   1598a:	0040      	lsls	r0, r0, #1
   1598c:	4b11      	ldr	r3, [pc, #68]	; (159d4 <basic_init+0xf60>)
   1598e:	fb83 2300 	smull	r2, r3, r3, r0
   15992:	17c2      	asrs	r2, r0, #31
   15994:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   15998:	b292      	uxth	r2, r2
   1599a:	f7ff ba1e 	b.w	14dda <basic_init+0x366>
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   1599e:	2000      	movs	r0, #0
   159a0:	4b0b      	ldr	r3, [pc, #44]	; (159d0 <basic_init+0xf5c>)
   159a2:	4798      	blx	r3
   159a4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   159a8:	3050      	adds	r0, #80	; 0x50
   159aa:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   159ae:	da13      	bge.n	159d8 <basic_init+0xf64>
   159b0:	2401      	movs	r4, #1
   159b2:	f7ff ba2d 	b.w	14e10 <basic_init+0x39c>
   159b6:	bf00      	nop
   159b8:	000068d5 	.word	0x000068d5
   159bc:	2000c5d4 	.word	0x2000c5d4
   159c0:	00006b5d 	.word	0x00006b5d
   159c4:	00006a19 	.word	0x00006a19
   159c8:	00014a55 	.word	0x00014a55
   159cc:	00010f4d 	.word	0x00010f4d
   159d0:	00010f31 	.word	0x00010f31
   159d4:	66666667 	.word	0x66666667
   159d8:	2000      	movs	r0, #0
   159da:	4bb5      	ldr	r3, [pc, #724]	; (15cb0 <basic_init+0x123c>)
   159dc:	4798      	blx	r3
   159de:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   159e2:	3050      	adds	r0, #80	; 0x50
   159e4:	4ab3      	ldr	r2, [pc, #716]	; (15cb4 <basic_init+0x1240>)
   159e6:	fb82 3200 	smull	r3, r2, r2, r0
   159ea:	17c4      	asrs	r4, r0, #31
   159ec:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
   159f0:	b2a4      	uxth	r4, r4
   159f2:	f7ff ba0d 	b.w	14e10 <basic_init+0x39c>
   159f6:	2000      	movs	r0, #0
   159f8:	4bad      	ldr	r3, [pc, #692]	; (15cb0 <basic_init+0x123c>)
   159fa:	4798      	blx	r3
   159fc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15a00:	0040      	lsls	r0, r0, #1
   15a02:	3050      	adds	r0, #80	; 0x50
   15a04:	4aab      	ldr	r2, [pc, #684]	; (15cb4 <basic_init+0x1240>)
   15a06:	fb82 3200 	smull	r3, r2, r2, r0
   15a0a:	17c4      	asrs	r4, r0, #31
   15a0c:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
   15a10:	b2a4      	uxth	r4, r4
   15a12:	f7ff b9fd 	b.w	14e10 <basic_init+0x39c>
   15a16:	2000      	movs	r0, #0
   15a18:	4ba5      	ldr	r3, [pc, #660]	; (15cb0 <basic_init+0x123c>)
   15a1a:	4798      	blx	r3
   15a1c:	3028      	adds	r0, #40	; 0x28
   15a1e:	0040      	lsls	r0, r0, #1
   15a20:	4ba4      	ldr	r3, [pc, #656]	; (15cb4 <basic_init+0x1240>)
   15a22:	fb83 2300 	smull	r2, r3, r3, r0
   15a26:	17c2      	asrs	r2, r0, #31
   15a28:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   15a2c:	b292      	uxth	r2, r2
   15a2e:	f7ff b9f9 	b.w	14e24 <basic_init+0x3b0>
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
   15a32:	2000      	movs	r0, #0
   15a34:	4b9e      	ldr	r3, [pc, #632]	; (15cb0 <basic_init+0x123c>)
   15a36:	4798      	blx	r3
   15a38:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15a3c:	3050      	adds	r0, #80	; 0x50
   15a3e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15a42:	da02      	bge.n	15a4a <basic_init+0xfd6>
   15a44:	2201      	movs	r2, #1
   15a46:	f7ff ba08 	b.w	14e5a <basic_init+0x3e6>
   15a4a:	2000      	movs	r0, #0
   15a4c:	4b98      	ldr	r3, [pc, #608]	; (15cb0 <basic_init+0x123c>)
   15a4e:	4798      	blx	r3
   15a50:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15a54:	3050      	adds	r0, #80	; 0x50
   15a56:	4b97      	ldr	r3, [pc, #604]	; (15cb4 <basic_init+0x1240>)
   15a58:	fb83 2300 	smull	r2, r3, r3, r0
   15a5c:	17c2      	asrs	r2, r0, #31
   15a5e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   15a62:	b212      	sxth	r2, r2
   15a64:	f7ff b9f9 	b.w	14e5a <basic_init+0x3e6>
   15a68:	2000      	movs	r0, #0
   15a6a:	4b91      	ldr	r3, [pc, #580]	; (15cb0 <basic_init+0x123c>)
   15a6c:	4798      	blx	r3
   15a6e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15a72:	0040      	lsls	r0, r0, #1
   15a74:	3050      	adds	r0, #80	; 0x50
   15a76:	4b8f      	ldr	r3, [pc, #572]	; (15cb4 <basic_init+0x1240>)
   15a78:	fb83 2300 	smull	r2, r3, r3, r0
   15a7c:	17c2      	asrs	r2, r0, #31
   15a7e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   15a82:	b212      	sxth	r2, r2
   15a84:	f7ff b9e9 	b.w	14e5a <basic_init+0x3e6>
   15a88:	231b      	movs	r3, #27
   15a8a:	2139      	movs	r1, #57	; 0x39
   15a8c:	241d      	movs	r4, #29
   15a8e:	f7ff ba20 	b.w	14ed2 <basic_init+0x45e>
   15a92:	231d      	movs	r3, #29
   15a94:	213b      	movs	r1, #59	; 0x3b
   15a96:	461c      	mov	r4, r3
   15a98:	f7ff ba9f 	b.w	14fda <basic_init+0x566>
   15a9c:	231f      	movs	r3, #31
   15a9e:	213f      	movs	r1, #63	; 0x3f
   15aa0:	461c      	mov	r4, r3
   15aa2:	f7ff bad3 	b.w	1504c <basic_init+0x5d8>
   15aa6:	2319      	movs	r3, #25
   15aa8:	2133      	movs	r1, #51	; 0x33
   15aaa:	461c      	mov	r4, r3
   15aac:	f7ff baf7 	b.w	1509e <basic_init+0x62a>
   15ab0:	2307      	movs	r3, #7
   15ab2:	210f      	movs	r1, #15
   15ab4:	2408      	movs	r4, #8
   15ab6:	f7ff bb5a 	b.w	1516e <basic_init+0x6fa>
   15aba:	2307      	movs	r3, #7
   15abc:	210f      	movs	r1, #15
   15abe:	2408      	movs	r4, #8
   15ac0:	f7ff bb91 	b.w	151e6 <basic_init+0x772>
   15ac4:	231f      	movs	r3, #31
   15ac6:	213f      	movs	r1, #63	; 0x3f
   15ac8:	461c      	mov	r4, r3
   15aca:	f7ff bbde 	b.w	1528a <basic_init+0x816>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
   15ace:	4d7a      	ldr	r5, [pc, #488]	; (15cb8 <basic_init+0x1244>)
   15ad0:	7b6b      	ldrb	r3, [r5, #13]
   15ad2:	08db      	lsrs	r3, r3, #3
   15ad4:	214c      	movs	r1, #76	; 0x4c
   15ad6:	fb01 f303 	mul.w	r3, r1, r3
   15ada:	f203 73b1 	addw	r3, r3, #1969	; 0x7b1
   15ade:	eb03 2203 	add.w	r2, r3, r3, lsl #8
   15ae2:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
   15ae6:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
   15aea:	89ac      	ldrh	r4, [r5, #12]
   15aec:	f3c4 1445 	ubfx	r4, r4, #5, #6
   15af0:	f241 02c8 	movw	r2, #4296	; 0x10c8
   15af4:	fb01 2404 	mla	r4, r1, r4, r2
   15af8:	eb04 2204 	add.w	r2, r4, r4, lsl #8
   15afc:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
   15b00:	f3c4 54c5 	ubfx	r4, r4, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
   15b04:	7b2a      	ldrb	r2, [r5, #12]
   15b06:	f002 021f 	and.w	r2, r2, #31
   15b0a:	fb01 f102 	mul.w	r1, r1, r2
   15b0e:	f601 11ca 	addw	r1, r1, #2506	; 0x9ca
   15b12:	eb01 2201 	add.w	r2, r1, r1, lsl #8
   15b16:	eb01 11c2 	add.w	r1, r1, r2, lsl #7
   15b1a:	f3c1 51c4 	ubfx	r1, r1, #23, #5
   15b1e:	f7ff bbf5 	b.w	1530c <basic_init+0x898>
   15b22:	231f      	movs	r3, #31
   15b24:	213f      	movs	r1, #63	; 0x3f
   15b26:	461c      	mov	r4, r3
   15b28:	e425      	b.n	15376 <basic_init+0x902>
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
   15b2a:	2000      	movs	r0, #0
   15b2c:	4b60      	ldr	r3, [pc, #384]	; (15cb0 <basic_init+0x123c>)
   15b2e:	4798      	blx	r3
   15b30:	3028      	adds	r0, #40	; 0x28
   15b32:	0040      	lsls	r0, r0, #1
   15b34:	4b5f      	ldr	r3, [pc, #380]	; (15cb4 <basic_init+0x1240>)
   15b36:	fb83 2300 	smull	r2, r3, r3, r0
   15b3a:	17c2      	asrs	r2, r0, #31
   15b3c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   15b40:	b212      	sxth	r2, r2
   15b42:	e46c      	b.n	1541e <basic_init+0x9aa>
   15b44:	2306      	movs	r3, #6
   15b46:	2110      	movs	r1, #16
   15b48:	2409      	movs	r4, #9
   15b4a:	e47e      	b.n	1544a <basic_init+0x9d6>
   15b4c:	2306      	movs	r3, #6
   15b4e:	2110      	movs	r1, #16
   15b50:	2409      	movs	r4, #9
   15b52:	e491      	b.n	15478 <basic_init+0xa04>
   15b54:	2306      	movs	r3, #6
   15b56:	2110      	movs	r1, #16
   15b58:	2409      	movs	r4, #9
   15b5a:	e4c1      	b.n	154e0 <basic_init+0xa6c>
   15b5c:	2306      	movs	r3, #6
   15b5e:	2110      	movs	r1, #16
   15b60:	2409      	movs	r4, #9
   15b62:	e4d4      	b.n	1550e <basic_init+0xa9a>
   15b64:	2306      	movs	r3, #6
   15b66:	2110      	movs	r1, #16
   15b68:	2409      	movs	r4, #9
   15b6a:	e504      	b.n	15576 <basic_init+0xb02>
   15b6c:	2306      	movs	r3, #6
   15b6e:	2110      	movs	r1, #16
   15b70:	2409      	movs	r4, #9
   15b72:	e516      	b.n	155a2 <basic_init+0xb2e>
    lv_style_set_pad_left(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
   15b74:	2000      	movs	r0, #0
   15b76:	4b4e      	ldr	r3, [pc, #312]	; (15cb0 <basic_init+0x123c>)
   15b78:	4798      	blx	r3
   15b7a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15b7e:	00c0      	lsls	r0, r0, #3
   15b80:	3050      	adds	r0, #80	; 0x50
   15b82:	4b4c      	ldr	r3, [pc, #304]	; (15cb4 <basic_init+0x1240>)
   15b84:	fb83 2300 	smull	r2, r3, r3, r0
   15b88:	17c2      	asrs	r2, r0, #31
   15b8a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   15b8e:	b212      	sxth	r2, r2
   15b90:	e53f      	b.n	15612 <basic_init+0xb9e>
    lv_style_set_pad_right(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
   15b92:	2000      	movs	r0, #0
   15b94:	4b46      	ldr	r3, [pc, #280]	; (15cb0 <basic_init+0x123c>)
   15b96:	4798      	blx	r3
   15b98:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15b9c:	00c0      	lsls	r0, r0, #3
   15b9e:	3050      	adds	r0, #80	; 0x50
   15ba0:	4b44      	ldr	r3, [pc, #272]	; (15cb4 <basic_init+0x1240>)
   15ba2:	fb83 2300 	smull	r2, r3, r3, r0
   15ba6:	17c2      	asrs	r2, r0, #31
   15ba8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   15bac:	b212      	sxth	r2, r2
   15bae:	e543      	b.n	15638 <basic_init+0xbc4>
    lv_style_set_pad_top(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
   15bb0:	2000      	movs	r0, #0
   15bb2:	4b3f      	ldr	r3, [pc, #252]	; (15cb0 <basic_init+0x123c>)
   15bb4:	4798      	blx	r3
   15bb6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15bba:	3050      	adds	r0, #80	; 0x50
   15bbc:	4b3d      	ldr	r3, [pc, #244]	; (15cb4 <basic_init+0x1240>)
   15bbe:	fb83 2300 	smull	r2, r3, r3, r0
   15bc2:	17c2      	asrs	r2, r0, #31
   15bc4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   15bc8:	b212      	sxth	r2, r2
   15bca:	e547      	b.n	1565c <basic_init+0xbe8>
    lv_style_set_pad_bottom(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
   15bcc:	2000      	movs	r0, #0
   15bce:	4b38      	ldr	r3, [pc, #224]	; (15cb0 <basic_init+0x123c>)
   15bd0:	4798      	blx	r3
   15bd2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15bd6:	3050      	adds	r0, #80	; 0x50
   15bd8:	4b36      	ldr	r3, [pc, #216]	; (15cb4 <basic_init+0x1240>)
   15bda:	fb83 2300 	smull	r2, r3, r3, r0
   15bde:	17c2      	asrs	r2, r0, #31
   15be0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   15be4:	b212      	sxth	r2, r2
   15be6:	e54b      	b.n	15680 <basic_init+0xc0c>
    lv_style_set_pad_inner(&styles->btn, LV_STATE_DEFAULT, LV_DPX(20));
   15be8:	2000      	movs	r0, #0
   15bea:	4b31      	ldr	r3, [pc, #196]	; (15cb0 <basic_init+0x123c>)
   15bec:	4798      	blx	r3
   15bee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15bf2:	0080      	lsls	r0, r0, #2
   15bf4:	3050      	adds	r0, #80	; 0x50
   15bf6:	4b2f      	ldr	r3, [pc, #188]	; (15cb4 <basic_init+0x1240>)
   15bf8:	fb83 2300 	smull	r2, r3, r3, r0
   15bfc:	17c2      	asrs	r2, r0, #31
   15bfe:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   15c02:	b212      	sxth	r2, r2
   15c04:	e55b      	b.n	156be <basic_init+0xc4a>
                           lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(20) : LV_DPX(40));
   15c06:	2000      	movs	r0, #0
   15c08:	4b29      	ldr	r3, [pc, #164]	; (15cb0 <basic_init+0x123c>)
   15c0a:	4798      	blx	r3
   15c0c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15c10:	0080      	lsls	r0, r0, #2
   15c12:	3050      	adds	r0, #80	; 0x50
   15c14:	4b27      	ldr	r3, [pc, #156]	; (15cb4 <basic_init+0x1240>)
   15c16:	fb83 2300 	smull	r2, r3, r3, r0
   15c1a:	17c2      	asrs	r2, r0, #31
   15c1c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
   15c20:	b212      	sxth	r2, r2
   15c22:	e5a5      	b.n	15770 <basic_init+0xcfc>
                           lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(20) : LV_DPX(40));
   15c24:	2000      	movs	r0, #0
   15c26:	4b22      	ldr	r3, [pc, #136]	; (15cb0 <basic_init+0x123c>)
   15c28:	4798      	blx	r3
   15c2a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15c2e:	00c0      	lsls	r0, r0, #3
   15c30:	3050      	adds	r0, #80	; 0x50
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
   15c32:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15c36:	da01      	bge.n	15c3c <basic_init+0x11c8>
   15c38:	2201      	movs	r2, #1
   15c3a:	e599      	b.n	15770 <basic_init+0xcfc>
                           lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(20) : LV_DPX(40));
   15c3c:	2000      	movs	r0, #0
   15c3e:	4b1c      	ldr	r3, [pc, #112]	; (15cb0 <basic_init+0x123c>)
   15c40:	4798      	blx	r3
   15c42:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15c46:	00c0      	lsls	r0, r0, #3
   15c48:	3050      	adds	r0, #80	; 0x50
   15c4a:	4b1a      	ldr	r3, [pc, #104]	; (15cb4 <basic_init+0x1240>)
   15c4c:	fb83 2300 	smull	r2, r3, r3, r0
   15c50:	17c2      	asrs	r2, r0, #31
   15c52:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
   15c56:	b212      	sxth	r2, r2
   15c58:	e58a      	b.n	15770 <basic_init+0xcfc>
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(10) : LV_DPX(20);
   15c5a:	2000      	movs	r0, #0
   15c5c:	4b14      	ldr	r3, [pc, #80]	; (15cb0 <basic_init+0x123c>)
   15c5e:	4798      	blx	r3
   15c60:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15c64:	0040      	lsls	r0, r0, #1
   15c66:	3050      	adds	r0, #80	; 0x50
   15c68:	4b12      	ldr	r3, [pc, #72]	; (15cb4 <basic_init+0x1240>)
   15c6a:	fb83 2300 	smull	r2, r3, r3, r0
   15c6e:	17c4      	asrs	r4, r0, #31
   15c70:	ebc4 14a3 	rsb	r4, r4, r3, asr #6
   15c74:	b224      	sxth	r4, r4
   15c76:	e596      	b.n	157a6 <basic_init+0xd32>
   15c78:	2000      	movs	r0, #0
   15c7a:	4b0d      	ldr	r3, [pc, #52]	; (15cb0 <basic_init+0x123c>)
   15c7c:	4798      	blx	r3
   15c7e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15c82:	0080      	lsls	r0, r0, #2
   15c84:	3050      	adds	r0, #80	; 0x50
   15c86:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15c8a:	da01      	bge.n	15c90 <basic_init+0x121c>
   15c8c:	2401      	movs	r4, #1
   15c8e:	e58a      	b.n	157a6 <basic_init+0xd32>
   15c90:	2000      	movs	r0, #0
   15c92:	4b07      	ldr	r3, [pc, #28]	; (15cb0 <basic_init+0x123c>)
   15c94:	4798      	blx	r3
   15c96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15c9a:	0080      	lsls	r0, r0, #2
   15c9c:	3050      	adds	r0, #80	; 0x50
   15c9e:	4b05      	ldr	r3, [pc, #20]	; (15cb4 <basic_init+0x1240>)
   15ca0:	fb83 2300 	smull	r2, r3, r3, r0
   15ca4:	17c4      	asrs	r4, r0, #31
   15ca6:	ebc4 14a3 	rsb	r4, r4, r3, asr #6
   15caa:	b224      	sxth	r4, r4
   15cac:	e57b      	b.n	157a6 <basic_init+0xd32>
   15cae:	bf00      	nop
   15cb0:	00010f31 	.word	0x00010f31
   15cb4:	66666667 	.word	0x66666667
   15cb8:	2000c5d4 	.word	0x2000c5d4

00015cbc <bar_init>:
{
   15cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->bar_bg);
   15cbe:	4c54      	ldr	r4, [pc, #336]	; (15e10 <bar_init+0x154>)
   15cc0:	6820      	ldr	r0, [r4, #0]
   15cc2:	3024      	adds	r0, #36	; 0x24
   15cc4:	4b53      	ldr	r3, [pc, #332]	; (15e14 <bar_init+0x158>)
   15cc6:	4798      	blx	r3
    lv_style_set_radius(&styles->bar_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   15cc8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   15cca:	f647 72ff 	movw	r2, #32767	; 0x7fff
   15cce:	2101      	movs	r1, #1
   15cd0:	3024      	adds	r0, #36	; 0x24
   15cd2:	4b51      	ldr	r3, [pc, #324]	; (15e18 <bar_init+0x15c>)
   15cd4:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
   15cd6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   15cd8:	22ff      	movs	r2, #255	; 0xff
   15cda:	212c      	movs	r1, #44	; 0x2c
   15cdc:	3024      	adds	r0, #36	; 0x24
   15cde:	4b4f      	ldr	r3, [pc, #316]	; (15e1c <bar_init+0x160>)
   15ce0:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bar_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
   15ce2:	6820      	ldr	r0, [r4, #0]
   15ce4:	6a23      	ldr	r3, [r4, #32]
   15ce6:	f013 0302 	ands.w	r3, r3, #2
   15cea:	bf14      	ite	ne
   15cec:	211a      	movne	r1, #26
   15cee:	2108      	moveq	r1, #8
   15cf0:	2b00      	cmp	r3, #0
   15cf2:	bf15      	itete	ne
   15cf4:	2435      	movne	r4, #53	; 0x35
   15cf6:	2412      	moveq	r4, #18
   15cf8:	231b      	movne	r3, #27
   15cfa:	2309      	moveq	r3, #9
   15cfc:	f04f 0200 	mov.w	r2, #0
   15d00:	f363 0204 	bfi	r2, r3, #0, #5
   15d04:	f364 124a 	bfi	r2, r4, #5, #6
   15d08:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   15d0c:	2129      	movs	r1, #41	; 0x29
   15d0e:	3024      	adds	r0, #36	; 0x24
   15d10:	4b43      	ldr	r3, [pc, #268]	; (15e20 <bar_init+0x164>)
   15d12:	4798      	blx	r3
    lv_style_set_value_color(&styles->bar_bg, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
   15d14:	4b3e      	ldr	r3, [pc, #248]	; (15e10 <bar_init+0x154>)
   15d16:	6818      	ldr	r0, [r3, #0]
   15d18:	3024      	adds	r0, #36	; 0x24
   15d1a:	6a1b      	ldr	r3, [r3, #32]
   15d1c:	f013 0f02 	tst.w	r3, #2
   15d20:	d16d      	bne.n	15dfe <bar_init+0x142>
   15d22:	231f      	movs	r3, #31
   15d24:	213f      	movs	r1, #63	; 0x3f
   15d26:	461c      	mov	r4, r3
   15d28:	f04f 0200 	mov.w	r2, #0
   15d2c:	f364 0204 	bfi	r2, r4, #0, #5
   15d30:	f361 124a 	bfi	r2, r1, #5, #6
   15d34:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   15d38:	2179      	movs	r1, #121	; 0x79
   15d3a:	4d39      	ldr	r5, [pc, #228]	; (15e20 <bar_init+0x164>)
   15d3c:	47a8      	blx	r5
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_DEFAULT, theme.color_primary);
   15d3e:	4c34      	ldr	r4, [pc, #208]	; (15e10 <bar_init+0x154>)
   15d40:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
   15d42:	89a2      	ldrh	r2, [r4, #12]
   15d44:	2149      	movs	r1, #73	; 0x49
   15d46:	3024      	adds	r0, #36	; 0x24
   15d48:	47a8      	blx	r5
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_EDITED, theme.color_secondary);
   15d4a:	6820      	ldr	r0, [r4, #0]
   15d4c:	89e2      	ldrh	r2, [r4, #14]
   15d4e:	f240 4149 	movw	r1, #1097	; 0x449
   15d52:	3024      	adds	r0, #36	; 0x24
   15d54:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
   15d56:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
   15d58:	2200      	movs	r2, #0
   15d5a:	214c      	movs	r1, #76	; 0x4c
   15d5c:	3024      	adds	r0, #36	; 0x24
   15d5e:	4f2f      	ldr	r7, [pc, #188]	; (15e1c <bar_init+0x160>)
   15d60:	47b8      	blx	r7
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_FOCUSED, LV_OPA_50);
   15d62:	6820      	ldr	r0, [r4, #0]
   15d64:	227f      	movs	r2, #127	; 0x7f
   15d66:	f44f 7113 	mov.w	r1, #588	; 0x24c
   15d6a:	3024      	adds	r0, #36	; 0x24
   15d6c:	47b8      	blx	r7
    lv_style_set_outline_width(&styles->bar_bg, LV_STATE_DEFAULT, 3);
   15d6e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
   15d70:	2203      	movs	r2, #3
   15d72:	2140      	movs	r1, #64	; 0x40
   15d74:	3024      	adds	r0, #36	; 0x24
   15d76:	4e28      	ldr	r6, [pc, #160]	; (15e18 <bar_init+0x15c>)
   15d78:	47b0      	blx	r6
    lv_style_set_transition_time(&styles->bar_bg, LV_STATE_DEFAULT, TRANSITION_TIME);
   15d7a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
   15d7c:	2296      	movs	r2, #150	; 0x96
   15d7e:	21b0      	movs	r1, #176	; 0xb0
   15d80:	3024      	adds	r0, #36	; 0x24
   15d82:	47b0      	blx	r6
    lv_style_set_transition_prop_6(&styles->bar_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
   15d84:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
   15d86:	224c      	movs	r2, #76	; 0x4c
   15d88:	21b7      	movs	r1, #183	; 0xb7
   15d8a:	3024      	adds	r0, #36	; 0x24
   15d8c:	47b0      	blx	r6
    style_init_reset(&styles->bar_indic);
   15d8e:	6820      	ldr	r0, [r4, #0]
   15d90:	3028      	adds	r0, #40	; 0x28
   15d92:	4b20      	ldr	r3, [pc, #128]	; (15e14 <bar_init+0x158>)
   15d94:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->bar_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
   15d96:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   15d98:	22ff      	movs	r2, #255	; 0xff
   15d9a:	212c      	movs	r1, #44	; 0x2c
   15d9c:	3028      	adds	r0, #40	; 0x28
   15d9e:	47b8      	blx	r7
    lv_style_set_radius(&styles->bar_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   15da0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   15da2:	f647 72ff 	movw	r2, #32767	; 0x7fff
   15da6:	2101      	movs	r1, #1
   15da8:	3028      	adds	r0, #40	; 0x28
   15daa:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DEFAULT, theme.color_primary);
   15dac:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   15dae:	89a2      	ldrh	r2, [r4, #12]
   15db0:	2129      	movs	r1, #41	; 0x29
   15db2:	3028      	adds	r0, #40	; 0x28
   15db4:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DISABLED, lv_color_hex3(0x888));
   15db6:	6820      	ldr	r0, [r4, #0]
   15db8:	2311      	movs	r3, #17
   15dba:	f04f 0200 	mov.w	r2, #0
   15dbe:	f363 0204 	bfi	r2, r3, #0, #5
   15dc2:	2122      	movs	r1, #34	; 0x22
   15dc4:	f361 124a 	bfi	r2, r1, #5, #6
   15dc8:	f363 22cf 	bfi	r2, r3, #11, #5
   15dcc:	f242 0129 	movw	r1, #8233	; 0x2029
   15dd0:	3028      	adds	r0, #40	; 0x28
   15dd2:	47a8      	blx	r5
    lv_style_set_value_color(&styles->bar_indic, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x41404f) : LV_COLOR_WHITE);
   15dd4:	6820      	ldr	r0, [r4, #0]
   15dd6:	3028      	adds	r0, #40	; 0x28
   15dd8:	6a23      	ldr	r3, [r4, #32]
   15dda:	f013 0f02 	tst.w	r3, #2
   15dde:	d112      	bne.n	15e06 <bar_init+0x14a>
   15de0:	231f      	movs	r3, #31
   15de2:	213f      	movs	r1, #63	; 0x3f
   15de4:	461c      	mov	r4, r3
   15de6:	f04f 0200 	mov.w	r2, #0
   15dea:	f364 0204 	bfi	r2, r4, #0, #5
   15dee:	f361 124a 	bfi	r2, r1, #5, #6
   15df2:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   15df6:	2179      	movs	r1, #121	; 0x79
   15df8:	4b09      	ldr	r3, [pc, #36]	; (15e20 <bar_init+0x164>)
   15dfa:	4798      	blx	r3
   15dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15dfe:	2306      	movs	r3, #6
   15e00:	2110      	movs	r1, #16
   15e02:	2409      	movs	r4, #9
   15e04:	e790      	b.n	15d28 <bar_init+0x6c>
   15e06:	2308      	movs	r3, #8
   15e08:	2110      	movs	r1, #16
   15e0a:	2409      	movs	r4, #9
   15e0c:	e7eb      	b.n	15de6 <bar_init+0x12a>
   15e0e:	bf00      	nop
   15e10:	2000c5d4 	.word	0x2000c5d4
   15e14:	00014a55 	.word	0x00014a55
   15e18:	000068d5 	.word	0x000068d5
   15e1c:	00006b5d 	.word	0x00006b5d
   15e20:	00006a19 	.word	0x00006a19

00015e24 <slider_init>:
{
   15e24:	b510      	push	{r4, lr}
    style_init_reset(&styles->slider_knob);
   15e26:	4ca0      	ldr	r4, [pc, #640]	; (160a8 <slider_init+0x284>)
   15e28:	6820      	ldr	r0, [r4, #0]
   15e2a:	3090      	adds	r0, #144	; 0x90
   15e2c:	4b9f      	ldr	r3, [pc, #636]	; (160ac <slider_init+0x288>)
   15e2e:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->slider_knob, LV_STATE_DEFAULT, LV_OPA_COVER);
   15e30:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   15e32:	22ff      	movs	r2, #255	; 0xff
   15e34:	212c      	movs	r1, #44	; 0x2c
   15e36:	3090      	adds	r0, #144	; 0x90
   15e38:	4b9d      	ldr	r3, [pc, #628]	; (160b0 <slider_init+0x28c>)
   15e3a:	4798      	blx	r3
    lv_style_set_bg_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? theme.color_primary : LV_COLOR_WHITE);
   15e3c:	6820      	ldr	r0, [r4, #0]
   15e3e:	3090      	adds	r0, #144	; 0x90
   15e40:	6a23      	ldr	r3, [r4, #32]
   15e42:	f013 0f02 	tst.w	r3, #2
   15e46:	bf19      	ittee	ne
   15e48:	4623      	movne	r3, r4
   15e4a:	899a      	ldrhne	r2, [r3, #12]
   15e4c:	4b99      	ldreq	r3, [pc, #612]	; (160b4 <slider_init+0x290>)
   15e4e:	881a      	ldrheq	r2, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   15e50:	2129      	movs	r1, #41	; 0x29
   15e52:	4b99      	ldr	r3, [pc, #612]	; (160b8 <slider_init+0x294>)
   15e54:	4798      	blx	r3
    lv_style_set_value_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
   15e56:	4b94      	ldr	r3, [pc, #592]	; (160a8 <slider_init+0x284>)
   15e58:	6818      	ldr	r0, [r3, #0]
   15e5a:	3090      	adds	r0, #144	; 0x90
   15e5c:	6a1b      	ldr	r3, [r3, #32]
   15e5e:	f013 0f02 	tst.w	r3, #2
   15e62:	f040 80a9 	bne.w	15fb8 <slider_init+0x194>
   15e66:	231f      	movs	r3, #31
   15e68:	213f      	movs	r1, #63	; 0x3f
   15e6a:	461c      	mov	r4, r3
   15e6c:	f04f 0200 	mov.w	r2, #0
   15e70:	f364 0204 	bfi	r2, r4, #0, #5
   15e74:	f361 124a 	bfi	r2, r1, #5, #6
   15e78:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   15e7c:	2179      	movs	r1, #121	; 0x79
   15e7e:	4b8e      	ldr	r3, [pc, #568]	; (160b8 <slider_init+0x294>)
   15e80:	4798      	blx	r3
    lv_style_set_radius(&styles->slider_knob, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   15e82:	4c89      	ldr	r4, [pc, #548]	; (160a8 <slider_init+0x284>)
   15e84:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   15e86:	f647 72ff 	movw	r2, #32767	; 0x7fff
   15e8a:	2101      	movs	r1, #1
   15e8c:	3090      	adds	r0, #144	; 0x90
   15e8e:	4b8b      	ldr	r3, [pc, #556]	; (160bc <slider_init+0x298>)
   15e90:	4798      	blx	r3
    lv_style_set_pad_left(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
   15e92:	6824      	ldr	r4, [r4, #0]
   15e94:	3490      	adds	r4, #144	; 0x90
   15e96:	2000      	movs	r0, #0
   15e98:	4b89      	ldr	r3, [pc, #548]	; (160c0 <slider_init+0x29c>)
   15e9a:	4798      	blx	r3
   15e9c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   15ea0:	3050      	adds	r0, #80	; 0x50
   15ea2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15ea6:	f280 808b 	bge.w	15fc0 <slider_init+0x19c>
   15eaa:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   15eac:	2112      	movs	r1, #18
   15eae:	4620      	mov	r0, r4
   15eb0:	4b82      	ldr	r3, [pc, #520]	; (160bc <slider_init+0x298>)
   15eb2:	4798      	blx	r3
    lv_style_set_pad_right(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
   15eb4:	4b7c      	ldr	r3, [pc, #496]	; (160a8 <slider_init+0x284>)
   15eb6:	681c      	ldr	r4, [r3, #0]
   15eb8:	3490      	adds	r4, #144	; 0x90
   15eba:	2000      	movs	r0, #0
   15ebc:	4b80      	ldr	r3, [pc, #512]	; (160c0 <slider_init+0x29c>)
   15ebe:	4798      	blx	r3
   15ec0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   15ec4:	3050      	adds	r0, #80	; 0x50
   15ec6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15eca:	f280 8087 	bge.w	15fdc <slider_init+0x1b8>
   15ece:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   15ed0:	2113      	movs	r1, #19
   15ed2:	4620      	mov	r0, r4
   15ed4:	4b79      	ldr	r3, [pc, #484]	; (160bc <slider_init+0x298>)
   15ed6:	4798      	blx	r3
    lv_style_set_pad_top(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
   15ed8:	4b73      	ldr	r3, [pc, #460]	; (160a8 <slider_init+0x284>)
   15eda:	681c      	ldr	r4, [r3, #0]
   15edc:	3490      	adds	r4, #144	; 0x90
   15ede:	2000      	movs	r0, #0
   15ee0:	4b77      	ldr	r3, [pc, #476]	; (160c0 <slider_init+0x29c>)
   15ee2:	4798      	blx	r3
   15ee4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   15ee8:	3050      	adds	r0, #80	; 0x50
   15eea:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15eee:	f280 8083 	bge.w	15ff8 <slider_init+0x1d4>
   15ef2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   15ef4:	2110      	movs	r1, #16
   15ef6:	4620      	mov	r0, r4
   15ef8:	4b70      	ldr	r3, [pc, #448]	; (160bc <slider_init+0x298>)
   15efa:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
   15efc:	4b6a      	ldr	r3, [pc, #424]	; (160a8 <slider_init+0x284>)
   15efe:	681c      	ldr	r4, [r3, #0]
   15f00:	3490      	adds	r4, #144	; 0x90
   15f02:	2000      	movs	r0, #0
   15f04:	4b6e      	ldr	r3, [pc, #440]	; (160c0 <slider_init+0x29c>)
   15f06:	4798      	blx	r3
   15f08:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   15f0c:	3050      	adds	r0, #80	; 0x50
   15f0e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15f12:	da7f      	bge.n	16014 <slider_init+0x1f0>
   15f14:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   15f16:	2111      	movs	r1, #17
   15f18:	4620      	mov	r0, r4
   15f1a:	4b68      	ldr	r3, [pc, #416]	; (160bc <slider_init+0x298>)
   15f1c:	4798      	blx	r3
    style_init_reset(&styles->slider_bg);
   15f1e:	4c62      	ldr	r4, [pc, #392]	; (160a8 <slider_init+0x284>)
   15f20:	6820      	ldr	r0, [r4, #0]
   15f22:	3094      	adds	r0, #148	; 0x94
   15f24:	4b61      	ldr	r3, [pc, #388]	; (160ac <slider_init+0x288>)
   15f26:	4798      	blx	r3
    lv_style_set_margin_left(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
   15f28:	6824      	ldr	r4, [r4, #0]
   15f2a:	3494      	adds	r4, #148	; 0x94
   15f2c:	2000      	movs	r0, #0
   15f2e:	4b64      	ldr	r3, [pc, #400]	; (160c0 <slider_init+0x29c>)
   15f30:	4798      	blx	r3
   15f32:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15f36:	0040      	lsls	r0, r0, #1
   15f38:	3050      	adds	r0, #80	; 0x50
   15f3a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15f3e:	da77      	bge.n	16030 <slider_init+0x20c>
   15f40:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
   15f42:	2117      	movs	r1, #23
   15f44:	4620      	mov	r0, r4
   15f46:	4b5d      	ldr	r3, [pc, #372]	; (160bc <slider_init+0x298>)
   15f48:	4798      	blx	r3
    lv_style_set_margin_right(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
   15f4a:	4b57      	ldr	r3, [pc, #348]	; (160a8 <slider_init+0x284>)
   15f4c:	681c      	ldr	r4, [r3, #0]
   15f4e:	3494      	adds	r4, #148	; 0x94
   15f50:	2000      	movs	r0, #0
   15f52:	4b5b      	ldr	r3, [pc, #364]	; (160c0 <slider_init+0x29c>)
   15f54:	4798      	blx	r3
   15f56:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15f5a:	0040      	lsls	r0, r0, #1
   15f5c:	3050      	adds	r0, #80	; 0x50
   15f5e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15f62:	da74      	bge.n	1604e <slider_init+0x22a>
   15f64:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
   15f66:	2118      	movs	r1, #24
   15f68:	4620      	mov	r0, r4
   15f6a:	4b54      	ldr	r3, [pc, #336]	; (160bc <slider_init+0x298>)
   15f6c:	4798      	blx	r3
    lv_style_set_margin_top(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
   15f6e:	4b4e      	ldr	r3, [pc, #312]	; (160a8 <slider_init+0x284>)
   15f70:	681c      	ldr	r4, [r3, #0]
   15f72:	3494      	adds	r4, #148	; 0x94
   15f74:	2000      	movs	r0, #0
   15f76:	4b52      	ldr	r3, [pc, #328]	; (160c0 <slider_init+0x29c>)
   15f78:	4798      	blx	r3
   15f7a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15f7e:	0040      	lsls	r0, r0, #1
   15f80:	3050      	adds	r0, #80	; 0x50
   15f82:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15f86:	da71      	bge.n	1606c <slider_init+0x248>
   15f88:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
   15f8a:	2115      	movs	r1, #21
   15f8c:	4620      	mov	r0, r4
   15f8e:	4b4b      	ldr	r3, [pc, #300]	; (160bc <slider_init+0x298>)
   15f90:	4798      	blx	r3
    lv_style_set_margin_bottom(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
   15f92:	4b45      	ldr	r3, [pc, #276]	; (160a8 <slider_init+0x284>)
   15f94:	681c      	ldr	r4, [r3, #0]
   15f96:	3494      	adds	r4, #148	; 0x94
   15f98:	2000      	movs	r0, #0
   15f9a:	4b49      	ldr	r3, [pc, #292]	; (160c0 <slider_init+0x29c>)
   15f9c:	4798      	blx	r3
   15f9e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15fa2:	0040      	lsls	r0, r0, #1
   15fa4:	3050      	adds	r0, #80	; 0x50
   15fa6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15faa:	da6e      	bge.n	1608a <slider_init+0x266>
   15fac:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
   15fae:	2116      	movs	r1, #22
   15fb0:	4620      	mov	r0, r4
   15fb2:	4b42      	ldr	r3, [pc, #264]	; (160bc <slider_init+0x298>)
   15fb4:	4798      	blx	r3
   15fb6:	bd10      	pop	{r4, pc}
   15fb8:	2306      	movs	r3, #6
   15fba:	2110      	movs	r1, #16
   15fbc:	2409      	movs	r4, #9
   15fbe:	e755      	b.n	15e6c <slider_init+0x48>
    lv_style_set_pad_left(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
   15fc0:	2000      	movs	r0, #0
   15fc2:	4b3f      	ldr	r3, [pc, #252]	; (160c0 <slider_init+0x29c>)
   15fc4:	4798      	blx	r3
   15fc6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   15fca:	3050      	adds	r0, #80	; 0x50
   15fcc:	4b3d      	ldr	r3, [pc, #244]	; (160c4 <slider_init+0x2a0>)
   15fce:	fb83 2300 	smull	r2, r3, r3, r0
   15fd2:	17c2      	asrs	r2, r0, #31
   15fd4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   15fd8:	b212      	sxth	r2, r2
   15fda:	e767      	b.n	15eac <slider_init+0x88>
    lv_style_set_pad_right(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
   15fdc:	2000      	movs	r0, #0
   15fde:	4b38      	ldr	r3, [pc, #224]	; (160c0 <slider_init+0x29c>)
   15fe0:	4798      	blx	r3
   15fe2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   15fe6:	3050      	adds	r0, #80	; 0x50
   15fe8:	4b36      	ldr	r3, [pc, #216]	; (160c4 <slider_init+0x2a0>)
   15fea:	fb83 2300 	smull	r2, r3, r3, r0
   15fee:	17c2      	asrs	r2, r0, #31
   15ff0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   15ff4:	b212      	sxth	r2, r2
   15ff6:	e76b      	b.n	15ed0 <slider_init+0xac>
    lv_style_set_pad_top(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
   15ff8:	2000      	movs	r0, #0
   15ffa:	4b31      	ldr	r3, [pc, #196]	; (160c0 <slider_init+0x29c>)
   15ffc:	4798      	blx	r3
   15ffe:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   16002:	3050      	adds	r0, #80	; 0x50
   16004:	4b2f      	ldr	r3, [pc, #188]	; (160c4 <slider_init+0x2a0>)
   16006:	fb83 2300 	smull	r2, r3, r3, r0
   1600a:	17c2      	asrs	r2, r0, #31
   1600c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   16010:	b212      	sxth	r2, r2
   16012:	e76f      	b.n	15ef4 <slider_init+0xd0>
    lv_style_set_pad_bottom(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
   16014:	2000      	movs	r0, #0
   16016:	4b2a      	ldr	r3, [pc, #168]	; (160c0 <slider_init+0x29c>)
   16018:	4798      	blx	r3
   1601a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1601e:	3050      	adds	r0, #80	; 0x50
   16020:	4b28      	ldr	r3, [pc, #160]	; (160c4 <slider_init+0x2a0>)
   16022:	fb83 2300 	smull	r2, r3, r3, r0
   16026:	17c2      	asrs	r2, r0, #31
   16028:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   1602c:	b212      	sxth	r2, r2
   1602e:	e772      	b.n	15f16 <slider_init+0xf2>
    lv_style_set_margin_left(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
   16030:	2000      	movs	r0, #0
   16032:	4b23      	ldr	r3, [pc, #140]	; (160c0 <slider_init+0x29c>)
   16034:	4798      	blx	r3
   16036:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1603a:	0040      	lsls	r0, r0, #1
   1603c:	3050      	adds	r0, #80	; 0x50
   1603e:	4b21      	ldr	r3, [pc, #132]	; (160c4 <slider_init+0x2a0>)
   16040:	fb83 2300 	smull	r2, r3, r3, r0
   16044:	17c2      	asrs	r2, r0, #31
   16046:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   1604a:	b212      	sxth	r2, r2
   1604c:	e779      	b.n	15f42 <slider_init+0x11e>
    lv_style_set_margin_right(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
   1604e:	2000      	movs	r0, #0
   16050:	4b1b      	ldr	r3, [pc, #108]	; (160c0 <slider_init+0x29c>)
   16052:	4798      	blx	r3
   16054:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16058:	0040      	lsls	r0, r0, #1
   1605a:	3050      	adds	r0, #80	; 0x50
   1605c:	4b19      	ldr	r3, [pc, #100]	; (160c4 <slider_init+0x2a0>)
   1605e:	fb83 2300 	smull	r2, r3, r3, r0
   16062:	17c2      	asrs	r2, r0, #31
   16064:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   16068:	b212      	sxth	r2, r2
   1606a:	e77c      	b.n	15f66 <slider_init+0x142>
    lv_style_set_margin_top(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
   1606c:	2000      	movs	r0, #0
   1606e:	4b14      	ldr	r3, [pc, #80]	; (160c0 <slider_init+0x29c>)
   16070:	4798      	blx	r3
   16072:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16076:	0040      	lsls	r0, r0, #1
   16078:	3050      	adds	r0, #80	; 0x50
   1607a:	4b12      	ldr	r3, [pc, #72]	; (160c4 <slider_init+0x2a0>)
   1607c:	fb83 2300 	smull	r2, r3, r3, r0
   16080:	17c2      	asrs	r2, r0, #31
   16082:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   16086:	b212      	sxth	r2, r2
   16088:	e77f      	b.n	15f8a <slider_init+0x166>
    lv_style_set_margin_bottom(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
   1608a:	2000      	movs	r0, #0
   1608c:	4b0c      	ldr	r3, [pc, #48]	; (160c0 <slider_init+0x29c>)
   1608e:	4798      	blx	r3
   16090:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16094:	0040      	lsls	r0, r0, #1
   16096:	3050      	adds	r0, #80	; 0x50
   16098:	4b0a      	ldr	r3, [pc, #40]	; (160c4 <slider_init+0x2a0>)
   1609a:	fb83 2300 	smull	r2, r3, r3, r0
   1609e:	17c2      	asrs	r2, r0, #31
   160a0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   160a4:	b212      	sxth	r2, r2
   160a6:	e782      	b.n	15fae <slider_init+0x18a>
   160a8:	2000c5d4 	.word	0x2000c5d4
   160ac:	00014a55 	.word	0x00014a55
   160b0:	00006b5d 	.word	0x00006b5d
   160b4:	00029578 	.word	0x00029578
   160b8:	00006a19 	.word	0x00006a19
   160bc:	000068d5 	.word	0x000068d5
   160c0:	00010f31 	.word	0x00010f31
   160c4:	66666667 	.word	0x66666667

000160c8 <switch_init>:
{
   160c8:	b510      	push	{r4, lr}
    style_init_reset(&styles->sw_knob);
   160ca:	4c48      	ldr	r4, [pc, #288]	; (161ec <switch_init+0x124>)
   160cc:	6820      	ldr	r0, [r4, #0]
   160ce:	309c      	adds	r0, #156	; 0x9c
   160d0:	4b47      	ldr	r3, [pc, #284]	; (161f0 <switch_init+0x128>)
   160d2:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->sw_knob, LV_STATE_DEFAULT, LV_OPA_COVER);
   160d4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   160d6:	22ff      	movs	r2, #255	; 0xff
   160d8:	212c      	movs	r1, #44	; 0x2c
   160da:	309c      	adds	r0, #156	; 0x9c
   160dc:	4b45      	ldr	r3, [pc, #276]	; (161f4 <switch_init+0x12c>)
   160de:	4798      	blx	r3
    lv_style_set_bg_color(&styles->sw_knob, LV_STATE_DEFAULT, LV_COLOR_WHITE);
   160e0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   160e2:	4b45      	ldr	r3, [pc, #276]	; (161f8 <switch_init+0x130>)
   160e4:	881a      	ldrh	r2, [r3, #0]
   160e6:	2129      	movs	r1, #41	; 0x29
   160e8:	309c      	adds	r0, #156	; 0x9c
   160ea:	4b44      	ldr	r3, [pc, #272]	; (161fc <switch_init+0x134>)
   160ec:	4798      	blx	r3
    lv_style_set_radius(&styles->sw_knob, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   160ee:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   160f0:	f647 72ff 	movw	r2, #32767	; 0x7fff
   160f4:	2101      	movs	r1, #1
   160f6:	309c      	adds	r0, #156	; 0x9c
   160f8:	4b41      	ldr	r3, [pc, #260]	; (16200 <switch_init+0x138>)
   160fa:	4798      	blx	r3
    lv_style_set_pad_top(&styles->sw_knob, LV_STATE_DEFAULT,    - LV_DPX(4));
   160fc:	6824      	ldr	r4, [r4, #0]
   160fe:	349c      	adds	r4, #156	; 0x9c
   16100:	2000      	movs	r0, #0
   16102:	4b40      	ldr	r3, [pc, #256]	; (16204 <switch_init+0x13c>)
   16104:	4798      	blx	r3
   16106:	3014      	adds	r0, #20
   16108:	0080      	lsls	r0, r0, #2
   1610a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1610e:	da39      	bge.n	16184 <switch_init+0xbc>
   16110:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   16114:	2110      	movs	r1, #16
   16116:	4620      	mov	r0, r4
   16118:	4b39      	ldr	r3, [pc, #228]	; (16200 <switch_init+0x138>)
   1611a:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->sw_knob, LV_STATE_DEFAULT, - LV_DPX(4));
   1611c:	4b33      	ldr	r3, [pc, #204]	; (161ec <switch_init+0x124>)
   1611e:	681c      	ldr	r4, [r3, #0]
   16120:	349c      	adds	r4, #156	; 0x9c
   16122:	2000      	movs	r0, #0
   16124:	4b37      	ldr	r3, [pc, #220]	; (16204 <switch_init+0x13c>)
   16126:	4798      	blx	r3
   16128:	3014      	adds	r0, #20
   1612a:	0080      	lsls	r0, r0, #2
   1612c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16130:	da35      	bge.n	1619e <switch_init+0xd6>
   16132:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   16136:	2111      	movs	r1, #17
   16138:	4620      	mov	r0, r4
   1613a:	4b31      	ldr	r3, [pc, #196]	; (16200 <switch_init+0x138>)
   1613c:	4798      	blx	r3
    lv_style_set_pad_left(&styles->sw_knob, LV_STATE_DEFAULT,   - LV_DPX(4));
   1613e:	4b2b      	ldr	r3, [pc, #172]	; (161ec <switch_init+0x124>)
   16140:	681c      	ldr	r4, [r3, #0]
   16142:	349c      	adds	r4, #156	; 0x9c
   16144:	2000      	movs	r0, #0
   16146:	4b2f      	ldr	r3, [pc, #188]	; (16204 <switch_init+0x13c>)
   16148:	4798      	blx	r3
   1614a:	3014      	adds	r0, #20
   1614c:	0080      	lsls	r0, r0, #2
   1614e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16152:	da31      	bge.n	161b8 <switch_init+0xf0>
   16154:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   16158:	2112      	movs	r1, #18
   1615a:	4620      	mov	r0, r4
   1615c:	4b28      	ldr	r3, [pc, #160]	; (16200 <switch_init+0x138>)
   1615e:	4798      	blx	r3
    lv_style_set_pad_right(&styles->sw_knob, LV_STATE_DEFAULT,  - LV_DPX(4));
   16160:	4b22      	ldr	r3, [pc, #136]	; (161ec <switch_init+0x124>)
   16162:	681c      	ldr	r4, [r3, #0]
   16164:	349c      	adds	r4, #156	; 0x9c
   16166:	2000      	movs	r0, #0
   16168:	4b26      	ldr	r3, [pc, #152]	; (16204 <switch_init+0x13c>)
   1616a:	4798      	blx	r3
   1616c:	3014      	adds	r0, #20
   1616e:	0080      	lsls	r0, r0, #2
   16170:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16174:	da2d      	bge.n	161d2 <switch_init+0x10a>
   16176:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   1617a:	2113      	movs	r1, #19
   1617c:	4620      	mov	r0, r4
   1617e:	4b20      	ldr	r3, [pc, #128]	; (16200 <switch_init+0x138>)
   16180:	4798      	blx	r3
   16182:	bd10      	pop	{r4, pc}
    lv_style_set_pad_top(&styles->sw_knob, LV_STATE_DEFAULT,    - LV_DPX(4));
   16184:	2000      	movs	r0, #0
   16186:	4b1f      	ldr	r3, [pc, #124]	; (16204 <switch_init+0x13c>)
   16188:	4798      	blx	r3
   1618a:	3014      	adds	r0, #20
   1618c:	0080      	lsls	r0, r0, #2
   1618e:	4b1e      	ldr	r3, [pc, #120]	; (16208 <switch_init+0x140>)
   16190:	fb83 2300 	smull	r2, r3, r3, r0
   16194:	17c2      	asrs	r2, r0, #31
   16196:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
   1619a:	b212      	sxth	r2, r2
   1619c:	e7ba      	b.n	16114 <switch_init+0x4c>
    lv_style_set_pad_bottom(&styles->sw_knob, LV_STATE_DEFAULT, - LV_DPX(4));
   1619e:	2000      	movs	r0, #0
   161a0:	4b18      	ldr	r3, [pc, #96]	; (16204 <switch_init+0x13c>)
   161a2:	4798      	blx	r3
   161a4:	3014      	adds	r0, #20
   161a6:	0080      	lsls	r0, r0, #2
   161a8:	4b17      	ldr	r3, [pc, #92]	; (16208 <switch_init+0x140>)
   161aa:	fb83 2300 	smull	r2, r3, r3, r0
   161ae:	17c2      	asrs	r2, r0, #31
   161b0:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
   161b4:	b212      	sxth	r2, r2
   161b6:	e7be      	b.n	16136 <switch_init+0x6e>
    lv_style_set_pad_left(&styles->sw_knob, LV_STATE_DEFAULT,   - LV_DPX(4));
   161b8:	2000      	movs	r0, #0
   161ba:	4b12      	ldr	r3, [pc, #72]	; (16204 <switch_init+0x13c>)
   161bc:	4798      	blx	r3
   161be:	3014      	adds	r0, #20
   161c0:	0080      	lsls	r0, r0, #2
   161c2:	4b11      	ldr	r3, [pc, #68]	; (16208 <switch_init+0x140>)
   161c4:	fb83 2300 	smull	r2, r3, r3, r0
   161c8:	17c2      	asrs	r2, r0, #31
   161ca:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
   161ce:	b212      	sxth	r2, r2
   161d0:	e7c2      	b.n	16158 <switch_init+0x90>
    lv_style_set_pad_right(&styles->sw_knob, LV_STATE_DEFAULT,  - LV_DPX(4));
   161d2:	2000      	movs	r0, #0
   161d4:	4b0b      	ldr	r3, [pc, #44]	; (16204 <switch_init+0x13c>)
   161d6:	4798      	blx	r3
   161d8:	3014      	adds	r0, #20
   161da:	0080      	lsls	r0, r0, #2
   161dc:	4b0a      	ldr	r3, [pc, #40]	; (16208 <switch_init+0x140>)
   161de:	fb83 2300 	smull	r2, r3, r3, r0
   161e2:	17c2      	asrs	r2, r0, #31
   161e4:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
   161e8:	b212      	sxth	r2, r2
   161ea:	e7c6      	b.n	1617a <switch_init+0xb2>
   161ec:	2000c5d4 	.word	0x2000c5d4
   161f0:	00014a55 	.word	0x00014a55
   161f4:	00006b5d 	.word	0x00006b5d
   161f8:	00029578 	.word	0x00029578
   161fc:	00006a19 	.word	0x00006a19
   16200:	000068d5 	.word	0x000068d5
   16204:	00010f31 	.word	0x00010f31
   16208:	66666667 	.word	0x66666667

0001620c <linemeter_init>:
{
   1620c:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->lmeter);
   1620e:	4c88      	ldr	r4, [pc, #544]	; (16430 <linemeter_init+0x224>)
   16210:	6820      	ldr	r0, [r4, #0]
   16212:	3070      	adds	r0, #112	; 0x70
   16214:	4b87      	ldr	r3, [pc, #540]	; (16434 <linemeter_init+0x228>)
   16216:	4798      	blx	r3
    lv_style_set_radius(&styles->lmeter, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   16218:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   1621a:	f647 72ff 	movw	r2, #32767	; 0x7fff
   1621e:	2101      	movs	r1, #1
   16220:	3070      	adds	r0, #112	; 0x70
   16222:	4b85      	ldr	r3, [pc, #532]	; (16438 <linemeter_init+0x22c>)
   16224:	4798      	blx	r3
    lv_style_set_pad_left(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
   16226:	6824      	ldr	r4, [r4, #0]
   16228:	3470      	adds	r4, #112	; 0x70
   1622a:	2000      	movs	r0, #0
   1622c:	4b83      	ldr	r3, [pc, #524]	; (1643c <linemeter_init+0x230>)
   1622e:	4798      	blx	r3
   16230:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16234:	0080      	lsls	r0, r0, #2
   16236:	3050      	adds	r0, #80	; 0x50
   16238:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1623c:	f280 808e 	bge.w	1635c <linemeter_init+0x150>
   16240:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   16242:	2112      	movs	r1, #18
   16244:	4620      	mov	r0, r4
   16246:	4b7c      	ldr	r3, [pc, #496]	; (16438 <linemeter_init+0x22c>)
   16248:	4798      	blx	r3
    lv_style_set_pad_right(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
   1624a:	4b79      	ldr	r3, [pc, #484]	; (16430 <linemeter_init+0x224>)
   1624c:	681c      	ldr	r4, [r3, #0]
   1624e:	3470      	adds	r4, #112	; 0x70
   16250:	2000      	movs	r0, #0
   16252:	4b7a      	ldr	r3, [pc, #488]	; (1643c <linemeter_init+0x230>)
   16254:	4798      	blx	r3
   16256:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1625a:	0080      	lsls	r0, r0, #2
   1625c:	3050      	adds	r0, #80	; 0x50
   1625e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16262:	f280 808a 	bge.w	1637a <linemeter_init+0x16e>
   16266:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   16268:	2113      	movs	r1, #19
   1626a:	4620      	mov	r0, r4
   1626c:	4b72      	ldr	r3, [pc, #456]	; (16438 <linemeter_init+0x22c>)
   1626e:	4798      	blx	r3
    lv_style_set_pad_top(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
   16270:	4b6f      	ldr	r3, [pc, #444]	; (16430 <linemeter_init+0x224>)
   16272:	681c      	ldr	r4, [r3, #0]
   16274:	3470      	adds	r4, #112	; 0x70
   16276:	2000      	movs	r0, #0
   16278:	4b70      	ldr	r3, [pc, #448]	; (1643c <linemeter_init+0x230>)
   1627a:	4798      	blx	r3
   1627c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16280:	0080      	lsls	r0, r0, #2
   16282:	3050      	adds	r0, #80	; 0x50
   16284:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16288:	f280 8086 	bge.w	16398 <linemeter_init+0x18c>
   1628c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   1628e:	2110      	movs	r1, #16
   16290:	4620      	mov	r0, r4
   16292:	4b69      	ldr	r3, [pc, #420]	; (16438 <linemeter_init+0x22c>)
   16294:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(30));
   16296:	4b66      	ldr	r3, [pc, #408]	; (16430 <linemeter_init+0x224>)
   16298:	681c      	ldr	r4, [r3, #0]
   1629a:	3470      	adds	r4, #112	; 0x70
   1629c:	2000      	movs	r0, #0
   1629e:	4b67      	ldr	r3, [pc, #412]	; (1643c <linemeter_init+0x230>)
   162a0:	4798      	blx	r3
   162a2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   162a6:	0040      	lsls	r0, r0, #1
   162a8:	3050      	adds	r0, #80	; 0x50
   162aa:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   162ae:	f280 8082 	bge.w	163b6 <linemeter_init+0x1aa>
   162b2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   162b4:	2114      	movs	r1, #20
   162b6:	4620      	mov	r0, r4
   162b8:	4b5f      	ldr	r3, [pc, #380]	; (16438 <linemeter_init+0x22c>)
   162ba:	4798      	blx	r3
    lv_style_set_scale_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(25));
   162bc:	4b5c      	ldr	r3, [pc, #368]	; (16430 <linemeter_init+0x224>)
   162be:	681c      	ldr	r4, [r3, #0]
   162c0:	3470      	adds	r4, #112	; 0x70
   162c2:	2000      	movs	r0, #0
   162c4:	4b5d      	ldr	r3, [pc, #372]	; (1643c <linemeter_init+0x230>)
   162c6:	4798      	blx	r3
   162c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   162cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   162d0:	3050      	adds	r0, #80	; 0x50
   162d2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   162d6:	da7d      	bge.n	163d4 <linemeter_init+0x1c8>
   162d8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr, scalar)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
   162da:	21c0      	movs	r1, #192	; 0xc0
   162dc:	4620      	mov	r0, r4
   162de:	4b56      	ldr	r3, [pc, #344]	; (16438 <linemeter_init+0x22c>)
   162e0:	4798      	blx	r3
    lv_style_set_line_color(&styles->lmeter, LV_STATE_DEFAULT, theme.color_primary);
   162e2:	4c53      	ldr	r4, [pc, #332]	; (16430 <linemeter_init+0x224>)
   162e4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   162e6:	89a2      	ldrh	r2, [r4, #12]
   162e8:	2199      	movs	r1, #153	; 0x99
   162ea:	3070      	adds	r0, #112	; 0x70
   162ec:	4d54      	ldr	r5, [pc, #336]	; (16440 <linemeter_init+0x234>)
   162ee:	47a8      	blx	r5
    lv_style_set_scale_grad_color(&styles->lmeter, LV_STATE_DEFAULT, theme.color_primary);
   162f0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
   162f2:	89a2      	ldrh	r2, [r4, #12]
   162f4:	21c9      	movs	r1, #201	; 0xc9
   162f6:	3070      	adds	r0, #112	; 0x70
   162f8:	47a8      	blx	r5
    lv_style_set_scale_end_color(&styles->lmeter, LV_STATE_DEFAULT, lv_color_hex3(0x888));
   162fa:	6820      	ldr	r0, [r4, #0]
   162fc:	2311      	movs	r3, #17
   162fe:	f04f 0200 	mov.w	r2, #0
   16302:	f363 0204 	bfi	r2, r3, #0, #5
   16306:	2122      	movs	r1, #34	; 0x22
   16308:	f361 124a 	bfi	r2, r1, #5, #6
   1630c:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
   16310:	21ca      	movs	r1, #202	; 0xca
   16312:	3070      	adds	r0, #112	; 0x70
   16314:	47a8      	blx	r5
    lv_style_set_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(10));
   16316:	6824      	ldr	r4, [r4, #0]
   16318:	3470      	adds	r4, #112	; 0x70
   1631a:	2000      	movs	r0, #0
   1631c:	4b47      	ldr	r3, [pc, #284]	; (1643c <linemeter_init+0x230>)
   1631e:	4798      	blx	r3
   16320:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16324:	0040      	lsls	r0, r0, #1
   16326:	3050      	adds	r0, #80	; 0x50
   16328:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1632c:	da62      	bge.n	163f4 <linemeter_init+0x1e8>
   1632e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   16330:	2190      	movs	r1, #144	; 0x90
   16332:	4620      	mov	r0, r4
   16334:	4b40      	ldr	r3, [pc, #256]	; (16438 <linemeter_init+0x22c>)
   16336:	4798      	blx	r3
    lv_style_set_scale_end_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(7));
   16338:	4b3d      	ldr	r3, [pc, #244]	; (16430 <linemeter_init+0x224>)
   1633a:	681c      	ldr	r4, [r3, #0]
   1633c:	3470      	adds	r4, #112	; 0x70
   1633e:	2000      	movs	r0, #0
   16340:	4b3e      	ldr	r3, [pc, #248]	; (1643c <linemeter_init+0x230>)
   16342:	4798      	blx	r3
   16344:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   16348:	3050      	adds	r0, #80	; 0x50
   1634a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1634e:	da60      	bge.n	16412 <linemeter_init+0x206>
   16350:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
   16352:	21c3      	movs	r1, #195	; 0xc3
   16354:	4620      	mov	r0, r4
   16356:	4b38      	ldr	r3, [pc, #224]	; (16438 <linemeter_init+0x22c>)
   16358:	4798      	blx	r3
   1635a:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_pad_left(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
   1635c:	2000      	movs	r0, #0
   1635e:	4b37      	ldr	r3, [pc, #220]	; (1643c <linemeter_init+0x230>)
   16360:	4798      	blx	r3
   16362:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16366:	0080      	lsls	r0, r0, #2
   16368:	3050      	adds	r0, #80	; 0x50
   1636a:	4b36      	ldr	r3, [pc, #216]	; (16444 <linemeter_init+0x238>)
   1636c:	fb83 2300 	smull	r2, r3, r3, r0
   16370:	17c2      	asrs	r2, r0, #31
   16372:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   16376:	b212      	sxth	r2, r2
   16378:	e763      	b.n	16242 <linemeter_init+0x36>
    lv_style_set_pad_right(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
   1637a:	2000      	movs	r0, #0
   1637c:	4b2f      	ldr	r3, [pc, #188]	; (1643c <linemeter_init+0x230>)
   1637e:	4798      	blx	r3
   16380:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16384:	0080      	lsls	r0, r0, #2
   16386:	3050      	adds	r0, #80	; 0x50
   16388:	4b2e      	ldr	r3, [pc, #184]	; (16444 <linemeter_init+0x238>)
   1638a:	fb83 2300 	smull	r2, r3, r3, r0
   1638e:	17c2      	asrs	r2, r0, #31
   16390:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   16394:	b212      	sxth	r2, r2
   16396:	e767      	b.n	16268 <linemeter_init+0x5c>
    lv_style_set_pad_top(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
   16398:	2000      	movs	r0, #0
   1639a:	4b28      	ldr	r3, [pc, #160]	; (1643c <linemeter_init+0x230>)
   1639c:	4798      	blx	r3
   1639e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   163a2:	0080      	lsls	r0, r0, #2
   163a4:	3050      	adds	r0, #80	; 0x50
   163a6:	4b27      	ldr	r3, [pc, #156]	; (16444 <linemeter_init+0x238>)
   163a8:	fb83 2300 	smull	r2, r3, r3, r0
   163ac:	17c2      	asrs	r2, r0, #31
   163ae:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   163b2:	b212      	sxth	r2, r2
   163b4:	e76b      	b.n	1628e <linemeter_init+0x82>
    lv_style_set_pad_inner(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(30));
   163b6:	2000      	movs	r0, #0
   163b8:	4b20      	ldr	r3, [pc, #128]	; (1643c <linemeter_init+0x230>)
   163ba:	4798      	blx	r3
   163bc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   163c0:	0040      	lsls	r0, r0, #1
   163c2:	3050      	adds	r0, #80	; 0x50
   163c4:	4b1f      	ldr	r3, [pc, #124]	; (16444 <linemeter_init+0x238>)
   163c6:	fb83 2300 	smull	r2, r3, r3, r0
   163ca:	17c2      	asrs	r2, r0, #31
   163cc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   163d0:	b212      	sxth	r2, r2
   163d2:	e76f      	b.n	162b4 <linemeter_init+0xa8>
    lv_style_set_scale_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(25));
   163d4:	2000      	movs	r0, #0
   163d6:	4b19      	ldr	r3, [pc, #100]	; (1643c <linemeter_init+0x230>)
   163d8:	4798      	blx	r3
   163da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   163de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   163e2:	3050      	adds	r0, #80	; 0x50
   163e4:	4b17      	ldr	r3, [pc, #92]	; (16444 <linemeter_init+0x238>)
   163e6:	fb83 2300 	smull	r2, r3, r3, r0
   163ea:	17c2      	asrs	r2, r0, #31
   163ec:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   163f0:	b212      	sxth	r2, r2
   163f2:	e772      	b.n	162da <linemeter_init+0xce>
    lv_style_set_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(10));
   163f4:	2000      	movs	r0, #0
   163f6:	4b11      	ldr	r3, [pc, #68]	; (1643c <linemeter_init+0x230>)
   163f8:	4798      	blx	r3
   163fa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   163fe:	0040      	lsls	r0, r0, #1
   16400:	3050      	adds	r0, #80	; 0x50
   16402:	4b10      	ldr	r3, [pc, #64]	; (16444 <linemeter_init+0x238>)
   16404:	fb83 2300 	smull	r2, r3, r3, r0
   16408:	17c2      	asrs	r2, r0, #31
   1640a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   1640e:	b212      	sxth	r2, r2
   16410:	e78e      	b.n	16330 <linemeter_init+0x124>
    lv_style_set_scale_end_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(7));
   16412:	2000      	movs	r0, #0
   16414:	4b09      	ldr	r3, [pc, #36]	; (1643c <linemeter_init+0x230>)
   16416:	4798      	blx	r3
   16418:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1641c:	3050      	adds	r0, #80	; 0x50
   1641e:	4b09      	ldr	r3, [pc, #36]	; (16444 <linemeter_init+0x238>)
   16420:	fb83 2300 	smull	r2, r3, r3, r0
   16424:	17c2      	asrs	r2, r0, #31
   16426:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   1642a:	b212      	sxth	r2, r2
   1642c:	e791      	b.n	16352 <linemeter_init+0x146>
   1642e:	bf00      	nop
   16430:	2000c5d4 	.word	0x2000c5d4
   16434:	00014a55 	.word	0x00014a55
   16438:	000068d5 	.word	0x000068d5
   1643c:	00010f31 	.word	0x00010f31
   16440:	00006a19 	.word	0x00006a19
   16444:	66666667 	.word	0x66666667

00016448 <gauge_init>:
{
   16448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->gauge_main);
   1644a:	4cc0      	ldr	r4, [pc, #768]	; (1674c <gauge_init+0x304>)
   1644c:	6820      	ldr	r0, [r4, #0]
   1644e:	305c      	adds	r0, #92	; 0x5c
   16450:	4bbf      	ldr	r3, [pc, #764]	; (16750 <gauge_init+0x308>)
   16452:	4798      	blx	r3
    lv_style_set_line_color(&styles->gauge_main, LV_STATE_DEFAULT, lv_color_hex3(0x888));
   16454:	6820      	ldr	r0, [r4, #0]
   16456:	2511      	movs	r5, #17
   16458:	f04f 0200 	mov.w	r2, #0
   1645c:	f365 0204 	bfi	r2, r5, #0, #5
   16460:	2722      	movs	r7, #34	; 0x22
   16462:	f367 124a 	bfi	r2, r7, #5, #6
   16466:	f365 22cf 	bfi	r2, r5, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   1646a:	2199      	movs	r1, #153	; 0x99
   1646c:	305c      	adds	r0, #92	; 0x5c
   1646e:	4eb9      	ldr	r6, [pc, #740]	; (16754 <gauge_init+0x30c>)
   16470:	47b0      	blx	r6
    lv_style_set_scale_grad_color(&styles->gauge_main, LV_STATE_DEFAULT, lv_color_hex3(0x888));
   16472:	6820      	ldr	r0, [r4, #0]
   16474:	f04f 0200 	mov.w	r2, #0
   16478:	f365 0204 	bfi	r2, r5, #0, #5
   1647c:	f367 124a 	bfi	r2, r7, #5, #6
   16480:	f365 22cf 	bfi	r2, r5, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
   16484:	21c9      	movs	r1, #201	; 0xc9
   16486:	305c      	adds	r0, #92	; 0x5c
   16488:	47b0      	blx	r6
    lv_style_set_scale_end_color(&styles->gauge_main, LV_STATE_DEFAULT, theme.color_primary);
   1648a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
   1648c:	89a2      	ldrh	r2, [r4, #12]
   1648e:	21ca      	movs	r1, #202	; 0xca
   16490:	305c      	adds	r0, #92	; 0x5c
   16492:	47b0      	blx	r6
    lv_style_set_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(5));
   16494:	6824      	ldr	r4, [r4, #0]
   16496:	345c      	adds	r4, #92	; 0x5c
   16498:	2000      	movs	r0, #0
   1649a:	4baf      	ldr	r3, [pc, #700]	; (16758 <gauge_init+0x310>)
   1649c:	4798      	blx	r3
   1649e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   164a2:	3050      	adds	r0, #80	; 0x50
   164a4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   164a8:	f280 8168 	bge.w	1677c <gauge_init+0x334>
   164ac:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   164ae:	2190      	movs	r1, #144	; 0x90
   164b0:	4620      	mov	r0, r4
   164b2:	4baa      	ldr	r3, [pc, #680]	; (1675c <gauge_init+0x314>)
   164b4:	4798      	blx	r3
    lv_style_set_scale_end_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(4));
   164b6:	4ba5      	ldr	r3, [pc, #660]	; (1674c <gauge_init+0x304>)
   164b8:	681c      	ldr	r4, [r3, #0]
   164ba:	345c      	adds	r4, #92	; 0x5c
   164bc:	2000      	movs	r0, #0
   164be:	4ba6      	ldr	r3, [pc, #664]	; (16758 <gauge_init+0x310>)
   164c0:	4798      	blx	r3
   164c2:	3014      	adds	r0, #20
   164c4:	0080      	lsls	r0, r0, #2
   164c6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   164ca:	f280 8165 	bge.w	16798 <gauge_init+0x350>
   164ce:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
   164d0:	21c3      	movs	r1, #195	; 0xc3
   164d2:	4620      	mov	r0, r4
   164d4:	4ba1      	ldr	r3, [pc, #644]	; (1675c <gauge_init+0x314>)
   164d6:	4798      	blx	r3
    lv_style_set_scale_end_border_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(8));
   164d8:	4b9c      	ldr	r3, [pc, #624]	; (1674c <gauge_init+0x304>)
   164da:	681c      	ldr	r4, [r3, #0]
   164dc:	345c      	adds	r4, #92	; 0x5c
   164de:	2000      	movs	r0, #0
   164e0:	4b9d      	ldr	r3, [pc, #628]	; (16758 <gauge_init+0x310>)
   164e2:	4798      	blx	r3
   164e4:	300a      	adds	r0, #10
   164e6:	00c0      	lsls	r0, r0, #3
   164e8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   164ec:	f280 8161 	bge.w	167b2 <gauge_init+0x36a>
   164f0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
   164f2:	21c2      	movs	r1, #194	; 0xc2
   164f4:	4620      	mov	r0, r4
   164f6:	4b99      	ldr	r3, [pc, #612]	; (1675c <gauge_init+0x314>)
   164f8:	4798      	blx	r3
    lv_style_set_pad_left(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
   164fa:	4b94      	ldr	r3, [pc, #592]	; (1674c <gauge_init+0x304>)
   164fc:	681c      	ldr	r4, [r3, #0]
   164fe:	345c      	adds	r4, #92	; 0x5c
   16500:	2000      	movs	r0, #0
   16502:	4b95      	ldr	r3, [pc, #596]	; (16758 <gauge_init+0x310>)
   16504:	4798      	blx	r3
   16506:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1650a:	0080      	lsls	r0, r0, #2
   1650c:	3050      	adds	r0, #80	; 0x50
   1650e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16512:	f280 815b 	bge.w	167cc <gauge_init+0x384>
   16516:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   16518:	2112      	movs	r1, #18
   1651a:	4620      	mov	r0, r4
   1651c:	4b8f      	ldr	r3, [pc, #572]	; (1675c <gauge_init+0x314>)
   1651e:	4798      	blx	r3
    lv_style_set_pad_right(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
   16520:	4b8a      	ldr	r3, [pc, #552]	; (1674c <gauge_init+0x304>)
   16522:	681c      	ldr	r4, [r3, #0]
   16524:	345c      	adds	r4, #92	; 0x5c
   16526:	2000      	movs	r0, #0
   16528:	4b8b      	ldr	r3, [pc, #556]	; (16758 <gauge_init+0x310>)
   1652a:	4798      	blx	r3
   1652c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16530:	0080      	lsls	r0, r0, #2
   16532:	3050      	adds	r0, #80	; 0x50
   16534:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16538:	f280 8157 	bge.w	167ea <gauge_init+0x3a2>
   1653c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   1653e:	2113      	movs	r1, #19
   16540:	4620      	mov	r0, r4
   16542:	4b86      	ldr	r3, [pc, #536]	; (1675c <gauge_init+0x314>)
   16544:	4798      	blx	r3
    lv_style_set_pad_top(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
   16546:	4b81      	ldr	r3, [pc, #516]	; (1674c <gauge_init+0x304>)
   16548:	681c      	ldr	r4, [r3, #0]
   1654a:	345c      	adds	r4, #92	; 0x5c
   1654c:	2000      	movs	r0, #0
   1654e:	4b82      	ldr	r3, [pc, #520]	; (16758 <gauge_init+0x310>)
   16550:	4798      	blx	r3
   16552:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16556:	0080      	lsls	r0, r0, #2
   16558:	3050      	adds	r0, #80	; 0x50
   1655a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1655e:	f280 8153 	bge.w	16808 <gauge_init+0x3c0>
   16562:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   16564:	2110      	movs	r1, #16
   16566:	4620      	mov	r0, r4
   16568:	4b7c      	ldr	r3, [pc, #496]	; (1675c <gauge_init+0x314>)
   1656a:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
   1656c:	4b77      	ldr	r3, [pc, #476]	; (1674c <gauge_init+0x304>)
   1656e:	681c      	ldr	r4, [r3, #0]
   16570:	345c      	adds	r4, #92	; 0x5c
   16572:	2000      	movs	r0, #0
   16574:	4b78      	ldr	r3, [pc, #480]	; (16758 <gauge_init+0x310>)
   16576:	4798      	blx	r3
   16578:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1657c:	0080      	lsls	r0, r0, #2
   1657e:	3050      	adds	r0, #80	; 0x50
   16580:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16584:	f280 814f 	bge.w	16826 <gauge_init+0x3de>
   16588:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   1658a:	2114      	movs	r1, #20
   1658c:	4620      	mov	r0, r4
   1658e:	4b73      	ldr	r3, [pc, #460]	; (1675c <gauge_init+0x314>)
   16590:	4798      	blx	r3
    lv_style_set_scale_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(15));
   16592:	4b6e      	ldr	r3, [pc, #440]	; (1674c <gauge_init+0x304>)
   16594:	681c      	ldr	r4, [r3, #0]
   16596:	345c      	adds	r4, #92	; 0x5c
   16598:	2000      	movs	r0, #0
   1659a:	4b6f      	ldr	r3, [pc, #444]	; (16758 <gauge_init+0x310>)
   1659c:	4798      	blx	r3
   1659e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   165a2:	3050      	adds	r0, #80	; 0x50
   165a4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   165a8:	f280 814c 	bge.w	16844 <gauge_init+0x3fc>
   165ac:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
   165ae:	21c0      	movs	r1, #192	; 0xc0
   165b0:	4620      	mov	r0, r4
   165b2:	4d6a      	ldr	r5, [pc, #424]	; (1675c <gauge_init+0x314>)
   165b4:	47a8      	blx	r5
    lv_style_set_radius(&styles->gauge_main, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   165b6:	4c65      	ldr	r4, [pc, #404]	; (1674c <gauge_init+0x304>)
   165b8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   165ba:	f647 72ff 	movw	r2, #32767	; 0x7fff
   165be:	2101      	movs	r1, #1
   165c0:	305c      	adds	r0, #92	; 0x5c
   165c2:	47a8      	blx	r5
    style_init_reset(&styles->gauge_strong);
   165c4:	6820      	ldr	r0, [r4, #0]
   165c6:	3060      	adds	r0, #96	; 0x60
   165c8:	4b61      	ldr	r3, [pc, #388]	; (16750 <gauge_init+0x308>)
   165ca:	4798      	blx	r3
    lv_style_set_line_color(&styles->gauge_strong, LV_STATE_DEFAULT, lv_color_hex3(0x888));
   165cc:	6820      	ldr	r0, [r4, #0]
   165ce:	2511      	movs	r5, #17
   165d0:	f04f 0200 	mov.w	r2, #0
   165d4:	f365 0204 	bfi	r2, r5, #0, #5
   165d8:	2722      	movs	r7, #34	; 0x22
   165da:	f367 124a 	bfi	r2, r7, #5, #6
   165de:	f365 22cf 	bfi	r2, r5, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   165e2:	2199      	movs	r1, #153	; 0x99
   165e4:	3060      	adds	r0, #96	; 0x60
   165e6:	4e5b      	ldr	r6, [pc, #364]	; (16754 <gauge_init+0x30c>)
   165e8:	47b0      	blx	r6
    lv_style_set_scale_grad_color(&styles->gauge_strong, LV_STATE_DEFAULT, lv_color_hex3(0x888));
   165ea:	6820      	ldr	r0, [r4, #0]
   165ec:	f04f 0200 	mov.w	r2, #0
   165f0:	f365 0204 	bfi	r2, r5, #0, #5
   165f4:	f367 124a 	bfi	r2, r7, #5, #6
   165f8:	f365 22cf 	bfi	r2, r5, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
   165fc:	21c9      	movs	r1, #201	; 0xc9
   165fe:	3060      	adds	r0, #96	; 0x60
   16600:	47b0      	blx	r6
    lv_style_set_scale_end_color(&styles->gauge_strong, LV_STATE_DEFAULT, theme.color_primary);
   16602:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
   16604:	89a2      	ldrh	r2, [r4, #12]
   16606:	21ca      	movs	r1, #202	; 0xca
   16608:	3060      	adds	r0, #96	; 0x60
   1660a:	47b0      	blx	r6
    lv_style_set_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
   1660c:	6824      	ldr	r4, [r4, #0]
   1660e:	3460      	adds	r4, #96	; 0x60
   16610:	2000      	movs	r0, #0
   16612:	4b51      	ldr	r3, [pc, #324]	; (16758 <gauge_init+0x310>)
   16614:	4798      	blx	r3
   16616:	300a      	adds	r0, #10
   16618:	00c0      	lsls	r0, r0, #3
   1661a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1661e:	f280 811f 	bge.w	16860 <gauge_init+0x418>
   16622:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   16624:	2190      	movs	r1, #144	; 0x90
   16626:	4620      	mov	r0, r4
   16628:	4b4c      	ldr	r3, [pc, #304]	; (1675c <gauge_init+0x314>)
   1662a:	4798      	blx	r3
    lv_style_set_scale_end_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
   1662c:	4b47      	ldr	r3, [pc, #284]	; (1674c <gauge_init+0x304>)
   1662e:	681c      	ldr	r4, [r3, #0]
   16630:	3460      	adds	r4, #96	; 0x60
   16632:	2000      	movs	r0, #0
   16634:	4b48      	ldr	r3, [pc, #288]	; (16758 <gauge_init+0x310>)
   16636:	4798      	blx	r3
   16638:	300a      	adds	r0, #10
   1663a:	00c0      	lsls	r0, r0, #3
   1663c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16640:	f280 811b 	bge.w	1687a <gauge_init+0x432>
   16644:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
   16646:	21c3      	movs	r1, #195	; 0xc3
   16648:	4620      	mov	r0, r4
   1664a:	4b44      	ldr	r3, [pc, #272]	; (1675c <gauge_init+0x314>)
   1664c:	4798      	blx	r3
    lv_style_set_scale_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(25));
   1664e:	4b3f      	ldr	r3, [pc, #252]	; (1674c <gauge_init+0x304>)
   16650:	681c      	ldr	r4, [r3, #0]
   16652:	3460      	adds	r4, #96	; 0x60
   16654:	2000      	movs	r0, #0
   16656:	4b40      	ldr	r3, [pc, #256]	; (16758 <gauge_init+0x310>)
   16658:	4798      	blx	r3
   1665a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1665e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16662:	3050      	adds	r0, #80	; 0x50
   16664:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16668:	f280 8114 	bge.w	16894 <gauge_init+0x44c>
   1666c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
   1666e:	21c0      	movs	r1, #192	; 0xc0
   16670:	4620      	mov	r0, r4
   16672:	4b3a      	ldr	r3, [pc, #232]	; (1675c <gauge_init+0x314>)
   16674:	4798      	blx	r3
    style_init_reset(&styles->gauge_needle);
   16676:	4c35      	ldr	r4, [pc, #212]	; (1674c <gauge_init+0x304>)
   16678:	6820      	ldr	r0, [r4, #0]
   1667a:	3064      	adds	r0, #100	; 0x64
   1667c:	4b34      	ldr	r3, [pc, #208]	; (16750 <gauge_init+0x308>)
   1667e:	4798      	blx	r3
    lv_style_set_line_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
   16680:	6820      	ldr	r0, [r4, #0]
   16682:	3064      	adds	r0, #100	; 0x64
   16684:	6a23      	ldr	r3, [r4, #32]
   16686:	f013 0f02 	tst.w	r3, #2
   1668a:	f040 8113 	bne.w	168b4 <gauge_init+0x46c>
   1668e:	231f      	movs	r3, #31
   16690:	213f      	movs	r1, #63	; 0x3f
   16692:	461c      	mov	r4, r3
   16694:	f04f 0200 	mov.w	r2, #0
   16698:	f364 0204 	bfi	r2, r4, #0, #5
   1669c:	f361 124a 	bfi	r2, r1, #5, #6
   166a0:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   166a4:	2199      	movs	r1, #153	; 0x99
   166a6:	4b2b      	ldr	r3, [pc, #172]	; (16754 <gauge_init+0x30c>)
   166a8:	4798      	blx	r3
    lv_style_set_line_width(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(8));
   166aa:	4b28      	ldr	r3, [pc, #160]	; (1674c <gauge_init+0x304>)
   166ac:	681c      	ldr	r4, [r3, #0]
   166ae:	3464      	adds	r4, #100	; 0x64
   166b0:	2000      	movs	r0, #0
   166b2:	4b29      	ldr	r3, [pc, #164]	; (16758 <gauge_init+0x310>)
   166b4:	4798      	blx	r3
   166b6:	300a      	adds	r0, #10
   166b8:	00c0      	lsls	r0, r0, #3
   166ba:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   166be:	f280 80fd 	bge.w	168bc <gauge_init+0x474>
   166c2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   166c4:	2190      	movs	r1, #144	; 0x90
   166c6:	4620      	mov	r0, r4
   166c8:	4b24      	ldr	r3, [pc, #144]	; (1675c <gauge_init+0x314>)
   166ca:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->gauge_needle, LV_STATE_DEFAULT, LV_OPA_COVER);
   166cc:	4c1f      	ldr	r4, [pc, #124]	; (1674c <gauge_init+0x304>)
   166ce:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   166d0:	22ff      	movs	r2, #255	; 0xff
   166d2:	212c      	movs	r1, #44	; 0x2c
   166d4:	3064      	adds	r0, #100	; 0x64
   166d6:	4b22      	ldr	r3, [pc, #136]	; (16760 <gauge_init+0x318>)
   166d8:	4798      	blx	r3
    lv_style_set_bg_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
   166da:	6820      	ldr	r0, [r4, #0]
   166dc:	3064      	adds	r0, #100	; 0x64
   166de:	6a23      	ldr	r3, [r4, #32]
   166e0:	f013 0f02 	tst.w	r3, #2
   166e4:	f040 80f7 	bne.w	168d6 <gauge_init+0x48e>
   166e8:	231f      	movs	r3, #31
   166ea:	213f      	movs	r1, #63	; 0x3f
   166ec:	461c      	mov	r4, r3
   166ee:	f04f 0200 	mov.w	r2, #0
   166f2:	f364 0204 	bfi	r2, r4, #0, #5
   166f6:	f361 124a 	bfi	r2, r1, #5, #6
   166fa:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   166fe:	2129      	movs	r1, #41	; 0x29
   16700:	4b14      	ldr	r3, [pc, #80]	; (16754 <gauge_init+0x30c>)
   16702:	4798      	blx	r3
    lv_style_set_radius(&styles->gauge_needle, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   16704:	4c11      	ldr	r4, [pc, #68]	; (1674c <gauge_init+0x304>)
   16706:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   16708:	f647 72ff 	movw	r2, #32767	; 0x7fff
   1670c:	2101      	movs	r1, #1
   1670e:	3064      	adds	r0, #100	; 0x64
   16710:	4b12      	ldr	r3, [pc, #72]	; (1675c <gauge_init+0x314>)
   16712:	4798      	blx	r3
    lv_style_set_size(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(30));
   16714:	6824      	ldr	r4, [r4, #0]
   16716:	3464      	adds	r4, #100	; 0x64
   16718:	2000      	movs	r0, #0
   1671a:	4b0f      	ldr	r3, [pc, #60]	; (16758 <gauge_init+0x310>)
   1671c:	4798      	blx	r3
   1671e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16722:	0040      	lsls	r0, r0, #1
   16724:	3050      	adds	r0, #80	; 0x50
   16726:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1672a:	f280 80d8 	bge.w	168de <gauge_init+0x496>
   1672e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
   16730:	2103      	movs	r1, #3
   16732:	4620      	mov	r0, r4
   16734:	4b09      	ldr	r3, [pc, #36]	; (1675c <gauge_init+0x314>)
   16736:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(10));
   16738:	4b04      	ldr	r3, [pc, #16]	; (1674c <gauge_init+0x304>)
   1673a:	681c      	ldr	r4, [r3, #0]
   1673c:	3464      	adds	r4, #100	; 0x64
   1673e:	2000      	movs	r0, #0
   16740:	4b05      	ldr	r3, [pc, #20]	; (16758 <gauge_init+0x310>)
   16742:	4798      	blx	r3
   16744:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16748:	e00c      	b.n	16764 <gauge_init+0x31c>
   1674a:	bf00      	nop
   1674c:	2000c5d4 	.word	0x2000c5d4
   16750:	00014a55 	.word	0x00014a55
   16754:	00006a19 	.word	0x00006a19
   16758:	00010f31 	.word	0x00010f31
   1675c:	000068d5 	.word	0x000068d5
   16760:	00006b5d 	.word	0x00006b5d
   16764:	0040      	lsls	r0, r0, #1
   16766:	3050      	adds	r0, #80	; 0x50
   16768:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1676c:	f280 80c6 	bge.w	168fc <gauge_init+0x4b4>
   16770:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   16772:	2114      	movs	r1, #20
   16774:	4620      	mov	r0, r4
   16776:	4b69      	ldr	r3, [pc, #420]	; (1691c <gauge_init+0x4d4>)
   16778:	4798      	blx	r3
   1677a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_set_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(5));
   1677c:	2000      	movs	r0, #0
   1677e:	4b68      	ldr	r3, [pc, #416]	; (16920 <gauge_init+0x4d8>)
   16780:	4798      	blx	r3
   16782:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16786:	3050      	adds	r0, #80	; 0x50
   16788:	4b66      	ldr	r3, [pc, #408]	; (16924 <gauge_init+0x4dc>)
   1678a:	fb83 2300 	smull	r2, r3, r3, r0
   1678e:	17c2      	asrs	r2, r0, #31
   16790:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   16794:	b212      	sxth	r2, r2
   16796:	e68a      	b.n	164ae <gauge_init+0x66>
    lv_style_set_scale_end_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(4));
   16798:	2000      	movs	r0, #0
   1679a:	4b61      	ldr	r3, [pc, #388]	; (16920 <gauge_init+0x4d8>)
   1679c:	4798      	blx	r3
   1679e:	3014      	adds	r0, #20
   167a0:	0080      	lsls	r0, r0, #2
   167a2:	4b60      	ldr	r3, [pc, #384]	; (16924 <gauge_init+0x4dc>)
   167a4:	fb83 2300 	smull	r2, r3, r3, r0
   167a8:	17c2      	asrs	r2, r0, #31
   167aa:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   167ae:	b212      	sxth	r2, r2
   167b0:	e68e      	b.n	164d0 <gauge_init+0x88>
    lv_style_set_scale_end_border_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(8));
   167b2:	2000      	movs	r0, #0
   167b4:	4b5a      	ldr	r3, [pc, #360]	; (16920 <gauge_init+0x4d8>)
   167b6:	4798      	blx	r3
   167b8:	300a      	adds	r0, #10
   167ba:	00c0      	lsls	r0, r0, #3
   167bc:	4b59      	ldr	r3, [pc, #356]	; (16924 <gauge_init+0x4dc>)
   167be:	fb83 2300 	smull	r2, r3, r3, r0
   167c2:	17c2      	asrs	r2, r0, #31
   167c4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   167c8:	b212      	sxth	r2, r2
   167ca:	e692      	b.n	164f2 <gauge_init+0xaa>
    lv_style_set_pad_left(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
   167cc:	2000      	movs	r0, #0
   167ce:	4b54      	ldr	r3, [pc, #336]	; (16920 <gauge_init+0x4d8>)
   167d0:	4798      	blx	r3
   167d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   167d6:	0080      	lsls	r0, r0, #2
   167d8:	3050      	adds	r0, #80	; 0x50
   167da:	4b52      	ldr	r3, [pc, #328]	; (16924 <gauge_init+0x4dc>)
   167dc:	fb83 2300 	smull	r2, r3, r3, r0
   167e0:	17c2      	asrs	r2, r0, #31
   167e2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   167e6:	b212      	sxth	r2, r2
   167e8:	e696      	b.n	16518 <gauge_init+0xd0>
    lv_style_set_pad_right(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
   167ea:	2000      	movs	r0, #0
   167ec:	4b4c      	ldr	r3, [pc, #304]	; (16920 <gauge_init+0x4d8>)
   167ee:	4798      	blx	r3
   167f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   167f4:	0080      	lsls	r0, r0, #2
   167f6:	3050      	adds	r0, #80	; 0x50
   167f8:	4b4a      	ldr	r3, [pc, #296]	; (16924 <gauge_init+0x4dc>)
   167fa:	fb83 2300 	smull	r2, r3, r3, r0
   167fe:	17c2      	asrs	r2, r0, #31
   16800:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   16804:	b212      	sxth	r2, r2
   16806:	e69a      	b.n	1653e <gauge_init+0xf6>
    lv_style_set_pad_top(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
   16808:	2000      	movs	r0, #0
   1680a:	4b45      	ldr	r3, [pc, #276]	; (16920 <gauge_init+0x4d8>)
   1680c:	4798      	blx	r3
   1680e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16812:	0080      	lsls	r0, r0, #2
   16814:	3050      	adds	r0, #80	; 0x50
   16816:	4b43      	ldr	r3, [pc, #268]	; (16924 <gauge_init+0x4dc>)
   16818:	fb83 2300 	smull	r2, r3, r3, r0
   1681c:	17c2      	asrs	r2, r0, #31
   1681e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   16822:	b212      	sxth	r2, r2
   16824:	e69e      	b.n	16564 <gauge_init+0x11c>
    lv_style_set_pad_inner(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
   16826:	2000      	movs	r0, #0
   16828:	4b3d      	ldr	r3, [pc, #244]	; (16920 <gauge_init+0x4d8>)
   1682a:	4798      	blx	r3
   1682c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16830:	0080      	lsls	r0, r0, #2
   16832:	3050      	adds	r0, #80	; 0x50
   16834:	4b3b      	ldr	r3, [pc, #236]	; (16924 <gauge_init+0x4dc>)
   16836:	fb83 2300 	smull	r2, r3, r3, r0
   1683a:	17c2      	asrs	r2, r0, #31
   1683c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   16840:	b212      	sxth	r2, r2
   16842:	e6a2      	b.n	1658a <gauge_init+0x142>
    lv_style_set_scale_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(15));
   16844:	2000      	movs	r0, #0
   16846:	4b36      	ldr	r3, [pc, #216]	; (16920 <gauge_init+0x4d8>)
   16848:	4798      	blx	r3
   1684a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1684e:	3050      	adds	r0, #80	; 0x50
   16850:	4b34      	ldr	r3, [pc, #208]	; (16924 <gauge_init+0x4dc>)
   16852:	fb83 2300 	smull	r2, r3, r3, r0
   16856:	17c2      	asrs	r2, r0, #31
   16858:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   1685c:	b212      	sxth	r2, r2
   1685e:	e6a6      	b.n	165ae <gauge_init+0x166>
    lv_style_set_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
   16860:	2000      	movs	r0, #0
   16862:	4b2f      	ldr	r3, [pc, #188]	; (16920 <gauge_init+0x4d8>)
   16864:	4798      	blx	r3
   16866:	300a      	adds	r0, #10
   16868:	00c0      	lsls	r0, r0, #3
   1686a:	4b2e      	ldr	r3, [pc, #184]	; (16924 <gauge_init+0x4dc>)
   1686c:	fb83 2300 	smull	r2, r3, r3, r0
   16870:	17c2      	asrs	r2, r0, #31
   16872:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   16876:	b212      	sxth	r2, r2
   16878:	e6d4      	b.n	16624 <gauge_init+0x1dc>
    lv_style_set_scale_end_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
   1687a:	2000      	movs	r0, #0
   1687c:	4b28      	ldr	r3, [pc, #160]	; (16920 <gauge_init+0x4d8>)
   1687e:	4798      	blx	r3
   16880:	300a      	adds	r0, #10
   16882:	00c0      	lsls	r0, r0, #3
   16884:	4b27      	ldr	r3, [pc, #156]	; (16924 <gauge_init+0x4dc>)
   16886:	fb83 2300 	smull	r2, r3, r3, r0
   1688a:	17c2      	asrs	r2, r0, #31
   1688c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   16890:	b212      	sxth	r2, r2
   16892:	e6d8      	b.n	16646 <gauge_init+0x1fe>
    lv_style_set_scale_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(25));
   16894:	2000      	movs	r0, #0
   16896:	4b22      	ldr	r3, [pc, #136]	; (16920 <gauge_init+0x4d8>)
   16898:	4798      	blx	r3
   1689a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1689e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   168a2:	3050      	adds	r0, #80	; 0x50
   168a4:	4b1f      	ldr	r3, [pc, #124]	; (16924 <gauge_init+0x4dc>)
   168a6:	fb83 2300 	smull	r2, r3, r3, r0
   168aa:	17c2      	asrs	r2, r0, #31
   168ac:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   168b0:	b212      	sxth	r2, r2
   168b2:	e6dc      	b.n	1666e <gauge_init+0x226>
   168b4:	2308      	movs	r3, #8
   168b6:	2112      	movs	r1, #18
   168b8:	240b      	movs	r4, #11
   168ba:	e6eb      	b.n	16694 <gauge_init+0x24c>
    lv_style_set_line_width(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(8));
   168bc:	2000      	movs	r0, #0
   168be:	4b18      	ldr	r3, [pc, #96]	; (16920 <gauge_init+0x4d8>)
   168c0:	4798      	blx	r3
   168c2:	300a      	adds	r0, #10
   168c4:	00c0      	lsls	r0, r0, #3
   168c6:	4b17      	ldr	r3, [pc, #92]	; (16924 <gauge_init+0x4dc>)
   168c8:	fb83 2300 	smull	r2, r3, r3, r0
   168cc:	17c2      	asrs	r2, r0, #31
   168ce:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   168d2:	b212      	sxth	r2, r2
   168d4:	e6f6      	b.n	166c4 <gauge_init+0x27c>
   168d6:	2308      	movs	r3, #8
   168d8:	2112      	movs	r1, #18
   168da:	240b      	movs	r4, #11
   168dc:	e707      	b.n	166ee <gauge_init+0x2a6>
    lv_style_set_size(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(30));
   168de:	2000      	movs	r0, #0
   168e0:	4b0f      	ldr	r3, [pc, #60]	; (16920 <gauge_init+0x4d8>)
   168e2:	4798      	blx	r3
   168e4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   168e8:	0040      	lsls	r0, r0, #1
   168ea:	3050      	adds	r0, #80	; 0x50
   168ec:	4b0d      	ldr	r3, [pc, #52]	; (16924 <gauge_init+0x4dc>)
   168ee:	fb83 2300 	smull	r2, r3, r3, r0
   168f2:	17c2      	asrs	r2, r0, #31
   168f4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   168f8:	b212      	sxth	r2, r2
   168fa:	e719      	b.n	16730 <gauge_init+0x2e8>
    lv_style_set_pad_inner(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(10));
   168fc:	2000      	movs	r0, #0
   168fe:	4b08      	ldr	r3, [pc, #32]	; (16920 <gauge_init+0x4d8>)
   16900:	4798      	blx	r3
   16902:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16906:	0040      	lsls	r0, r0, #1
   16908:	3050      	adds	r0, #80	; 0x50
   1690a:	4b06      	ldr	r3, [pc, #24]	; (16924 <gauge_init+0x4dc>)
   1690c:	fb83 2300 	smull	r2, r3, r3, r0
   16910:	17c2      	asrs	r2, r0, #31
   16912:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   16916:	b212      	sxth	r2, r2
   16918:	e72b      	b.n	16772 <gauge_init+0x32a>
   1691a:	bf00      	nop
   1691c:	000068d5 	.word	0x000068d5
   16920:	00010f31 	.word	0x00010f31
   16924:	66666667 	.word	0x66666667

00016928 <arc_init>:
{
   16928:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->arc_indic);
   1692a:	4c3d      	ldr	r4, [pc, #244]	; (16a20 <arc_init+0xf8>)
   1692c:	6820      	ldr	r0, [r4, #0]
   1692e:	301c      	adds	r0, #28
   16930:	4b3c      	ldr	r3, [pc, #240]	; (16a24 <arc_init+0xfc>)
   16932:	4798      	blx	r3
    lv_style_set_line_color(&styles->arc_indic, LV_STATE_DEFAULT, theme.color_primary);
   16934:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   16936:	89a2      	ldrh	r2, [r4, #12]
   16938:	2199      	movs	r1, #153	; 0x99
   1693a:	301c      	adds	r0, #28
   1693c:	4b3a      	ldr	r3, [pc, #232]	; (16a28 <arc_init+0x100>)
   1693e:	4798      	blx	r3
    lv_style_set_line_width(&styles->arc_indic, LV_STATE_DEFAULT, LV_DPX(25));
   16940:	6824      	ldr	r4, [r4, #0]
   16942:	341c      	adds	r4, #28
   16944:	2000      	movs	r0, #0
   16946:	4b39      	ldr	r3, [pc, #228]	; (16a2c <arc_init+0x104>)
   16948:	4798      	blx	r3
   1694a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1694e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16952:	3050      	adds	r0, #80	; 0x50
   16954:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16958:	da41      	bge.n	169de <arc_init+0xb6>
   1695a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   1695c:	2190      	movs	r1, #144	; 0x90
   1695e:	4620      	mov	r0, r4
   16960:	4d33      	ldr	r5, [pc, #204]	; (16a30 <arc_init+0x108>)
   16962:	47a8      	blx	r5
    lv_style_set_line_rounded(&styles->arc_indic, LV_STATE_DEFAULT, true);
   16964:	4c2e      	ldr	r4, [pc, #184]	; (16a20 <arc_init+0xf8>)
   16966:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
   16968:	2201      	movs	r2, #1
   1696a:	2194      	movs	r1, #148	; 0x94
   1696c:	301c      	adds	r0, #28
   1696e:	47a8      	blx	r5
    style_init_reset(&styles->arc_bg);
   16970:	6820      	ldr	r0, [r4, #0]
   16972:	3020      	adds	r0, #32
   16974:	4b2b      	ldr	r3, [pc, #172]	; (16a24 <arc_init+0xfc>)
   16976:	4798      	blx	r3
    lv_style_set_line_color(&styles->arc_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
   16978:	6820      	ldr	r0, [r4, #0]
   1697a:	6a23      	ldr	r3, [r4, #32]
   1697c:	f013 0302 	ands.w	r3, r3, #2
   16980:	bf14      	ite	ne
   16982:	211a      	movne	r1, #26
   16984:	2108      	moveq	r1, #8
   16986:	2b00      	cmp	r3, #0
   16988:	bf15      	itete	ne
   1698a:	2435      	movne	r4, #53	; 0x35
   1698c:	2412      	moveq	r4, #18
   1698e:	231b      	movne	r3, #27
   16990:	2309      	moveq	r3, #9
   16992:	f04f 0200 	mov.w	r2, #0
   16996:	f363 0204 	bfi	r2, r3, #0, #5
   1699a:	f364 124a 	bfi	r2, r4, #5, #6
   1699e:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   169a2:	2199      	movs	r1, #153	; 0x99
   169a4:	3020      	adds	r0, #32
   169a6:	4b20      	ldr	r3, [pc, #128]	; (16a28 <arc_init+0x100>)
   169a8:	4798      	blx	r3
    lv_style_set_line_width(&styles->arc_bg, LV_STATE_DEFAULT, LV_DPX(25));
   169aa:	4b1d      	ldr	r3, [pc, #116]	; (16a20 <arc_init+0xf8>)
   169ac:	681c      	ldr	r4, [r3, #0]
   169ae:	3420      	adds	r4, #32
   169b0:	2000      	movs	r0, #0
   169b2:	4b1e      	ldr	r3, [pc, #120]	; (16a2c <arc_init+0x104>)
   169b4:	4798      	blx	r3
   169b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   169ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   169be:	3050      	adds	r0, #80	; 0x50
   169c0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   169c4:	da1b      	bge.n	169fe <arc_init+0xd6>
   169c6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   169c8:	2190      	movs	r1, #144	; 0x90
   169ca:	4620      	mov	r0, r4
   169cc:	4c18      	ldr	r4, [pc, #96]	; (16a30 <arc_init+0x108>)
   169ce:	47a0      	blx	r4
    lv_style_set_line_rounded(&styles->arc_bg, LV_STATE_DEFAULT, true);
   169d0:	4b13      	ldr	r3, [pc, #76]	; (16a20 <arc_init+0xf8>)
   169d2:	6818      	ldr	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
   169d4:	2201      	movs	r2, #1
   169d6:	2194      	movs	r1, #148	; 0x94
   169d8:	3020      	adds	r0, #32
   169da:	47a0      	blx	r4
   169dc:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_line_width(&styles->arc_indic, LV_STATE_DEFAULT, LV_DPX(25));
   169de:	2000      	movs	r0, #0
   169e0:	4b12      	ldr	r3, [pc, #72]	; (16a2c <arc_init+0x104>)
   169e2:	4798      	blx	r3
   169e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   169e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   169ec:	3050      	adds	r0, #80	; 0x50
   169ee:	4b11      	ldr	r3, [pc, #68]	; (16a34 <arc_init+0x10c>)
   169f0:	fb83 2300 	smull	r2, r3, r3, r0
   169f4:	17c2      	asrs	r2, r0, #31
   169f6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   169fa:	b212      	sxth	r2, r2
   169fc:	e7ae      	b.n	1695c <arc_init+0x34>
    lv_style_set_line_width(&styles->arc_bg, LV_STATE_DEFAULT, LV_DPX(25));
   169fe:	2000      	movs	r0, #0
   16a00:	4b0a      	ldr	r3, [pc, #40]	; (16a2c <arc_init+0x104>)
   16a02:	4798      	blx	r3
   16a04:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16a08:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16a0c:	3050      	adds	r0, #80	; 0x50
   16a0e:	4b09      	ldr	r3, [pc, #36]	; (16a34 <arc_init+0x10c>)
   16a10:	fb83 2300 	smull	r2, r3, r3, r0
   16a14:	17c2      	asrs	r2, r0, #31
   16a16:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   16a1a:	b212      	sxth	r2, r2
   16a1c:	e7d4      	b.n	169c8 <arc_init+0xa0>
   16a1e:	bf00      	nop
   16a20:	2000c5d4 	.word	0x2000c5d4
   16a24:	00014a55 	.word	0x00014a55
   16a28:	00006a19 	.word	0x00006a19
   16a2c:	00010f31 	.word	0x00010f31
   16a30:	000068d5 	.word	0x000068d5
   16a34:	66666667 	.word	0x66666667

00016a38 <led_init>:
{
   16a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->led);
   16a3a:	4c38      	ldr	r4, [pc, #224]	; (16b1c <led_init+0xe4>)
   16a3c:	6820      	ldr	r0, [r4, #0]
   16a3e:	306c      	adds	r0, #108	; 0x6c
   16a40:	4b37      	ldr	r3, [pc, #220]	; (16b20 <led_init+0xe8>)
   16a42:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->led, LV_STATE_DEFAULT, LV_OPA_COVER);
   16a44:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   16a46:	22ff      	movs	r2, #255	; 0xff
   16a48:	212c      	movs	r1, #44	; 0x2c
   16a4a:	306c      	adds	r0, #108	; 0x6c
   16a4c:	4d35      	ldr	r5, [pc, #212]	; (16b24 <led_init+0xec>)
   16a4e:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->led, LV_STATE_DEFAULT, theme.color_primary);
   16a50:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   16a52:	89a2      	ldrh	r2, [r4, #12]
   16a54:	2129      	movs	r1, #41	; 0x29
   16a56:	306c      	adds	r0, #108	; 0x6c
   16a58:	4f33      	ldr	r7, [pc, #204]	; (16b28 <led_init+0xf0>)
   16a5a:	47b8      	blx	r7
    lv_style_set_border_width(&styles->led, LV_STATE_DEFAULT, 2);
   16a5c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   16a5e:	2202      	movs	r2, #2
   16a60:	2130      	movs	r1, #48	; 0x30
   16a62:	306c      	adds	r0, #108	; 0x6c
   16a64:	4e31      	ldr	r6, [pc, #196]	; (16b2c <led_init+0xf4>)
   16a66:	47b0      	blx	r6
    lv_style_set_border_opa(&styles->led, LV_STATE_DEFAULT, LV_OPA_50);
   16a68:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
   16a6a:	227f      	movs	r2, #127	; 0x7f
   16a6c:	213c      	movs	r1, #60	; 0x3c
   16a6e:	306c      	adds	r0, #108	; 0x6c
   16a70:	47a8      	blx	r5
    lv_style_set_border_color(&styles->led, LV_STATE_DEFAULT, lv_color_lighten(theme.color_primary, LV_OPA_30));
   16a72:	6825      	ldr	r5, [r4, #0]
   16a74:	356c      	adds	r5, #108	; 0x6c
   16a76:	214c      	movs	r1, #76	; 0x4c
   16a78:	89a0      	ldrh	r0, [r4, #12]
   16a7a:	4b2d      	ldr	r3, [pc, #180]	; (16b30 <led_init+0xf8>)
   16a7c:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   16a7e:	4602      	mov	r2, r0
   16a80:	2139      	movs	r1, #57	; 0x39
   16a82:	4628      	mov	r0, r5
   16a84:	47b8      	blx	r7
    lv_style_set_radius(&styles->led, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   16a86:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   16a88:	f647 72ff 	movw	r2, #32767	; 0x7fff
   16a8c:	2101      	movs	r1, #1
   16a8e:	306c      	adds	r0, #108	; 0x6c
   16a90:	47b0      	blx	r6
    lv_style_set_shadow_width(&styles->led, LV_STATE_DEFAULT, LV_DPX(15));
   16a92:	6824      	ldr	r4, [r4, #0]
   16a94:	346c      	adds	r4, #108	; 0x6c
   16a96:	2000      	movs	r0, #0
   16a98:	4b26      	ldr	r3, [pc, #152]	; (16b34 <led_init+0xfc>)
   16a9a:	4798      	blx	r3
   16a9c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16aa0:	3050      	adds	r0, #80	; 0x50
   16aa2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16aa6:	da1c      	bge.n	16ae2 <led_init+0xaa>
   16aa8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
   16aaa:	2150      	movs	r1, #80	; 0x50
   16aac:	4620      	mov	r0, r4
   16aae:	4b1f      	ldr	r3, [pc, #124]	; (16b2c <led_init+0xf4>)
   16ab0:	4798      	blx	r3
    lv_style_set_shadow_color(&styles->led, LV_STATE_DEFAULT, theme.color_primary);
   16ab2:	4c1a      	ldr	r4, [pc, #104]	; (16b1c <led_init+0xe4>)
   16ab4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
   16ab6:	89a2      	ldrh	r2, [r4, #12]
   16ab8:	2159      	movs	r1, #89	; 0x59
   16aba:	306c      	adds	r0, #108	; 0x6c
   16abc:	4b1a      	ldr	r3, [pc, #104]	; (16b28 <led_init+0xf0>)
   16abe:	4798      	blx	r3
    lv_style_set_shadow_spread(&styles->led, LV_STATE_DEFAULT, LV_DPX(5));
   16ac0:	6824      	ldr	r4, [r4, #0]
   16ac2:	346c      	adds	r4, #108	; 0x6c
   16ac4:	2000      	movs	r0, #0
   16ac6:	4b1b      	ldr	r3, [pc, #108]	; (16b34 <led_init+0xfc>)
   16ac8:	4798      	blx	r3
   16aca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16ace:	3050      	adds	r0, #80	; 0x50
   16ad0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16ad4:	da13      	bge.n	16afe <led_init+0xc6>
   16ad6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
   16ad8:	2153      	movs	r1, #83	; 0x53
   16ada:	4620      	mov	r0, r4
   16adc:	4b13      	ldr	r3, [pc, #76]	; (16b2c <led_init+0xf4>)
   16ade:	4798      	blx	r3
   16ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_set_shadow_width(&styles->led, LV_STATE_DEFAULT, LV_DPX(15));
   16ae2:	2000      	movs	r0, #0
   16ae4:	4b13      	ldr	r3, [pc, #76]	; (16b34 <led_init+0xfc>)
   16ae6:	4798      	blx	r3
   16ae8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16aec:	3050      	adds	r0, #80	; 0x50
   16aee:	4b12      	ldr	r3, [pc, #72]	; (16b38 <led_init+0x100>)
   16af0:	fb83 2300 	smull	r2, r3, r3, r0
   16af4:	17c2      	asrs	r2, r0, #31
   16af6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   16afa:	b212      	sxth	r2, r2
   16afc:	e7d5      	b.n	16aaa <led_init+0x72>
    lv_style_set_shadow_spread(&styles->led, LV_STATE_DEFAULT, LV_DPX(5));
   16afe:	2000      	movs	r0, #0
   16b00:	4b0c      	ldr	r3, [pc, #48]	; (16b34 <led_init+0xfc>)
   16b02:	4798      	blx	r3
   16b04:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16b08:	3050      	adds	r0, #80	; 0x50
   16b0a:	4b0b      	ldr	r3, [pc, #44]	; (16b38 <led_init+0x100>)
   16b0c:	fb83 2300 	smull	r2, r3, r3, r0
   16b10:	17c2      	asrs	r2, r0, #31
   16b12:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   16b16:	b212      	sxth	r2, r2
   16b18:	e7de      	b.n	16ad8 <led_init+0xa0>
   16b1a:	bf00      	nop
   16b1c:	2000c5d4 	.word	0x2000c5d4
   16b20:	00014a55 	.word	0x00014a55
   16b24:	00006b5d 	.word	0x00006b5d
   16b28:	00006a19 	.word	0x00006a19
   16b2c:	000068d5 	.word	0x000068d5
   16b30:	00011b9b 	.word	0x00011b9b
   16b34:	00010f31 	.word	0x00010f31
   16b38:	66666667 	.word	0x66666667

00016b3c <lv_theme_material_init>:
{
   16b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16b40:	4680      	mov	r8, r0
   16b42:	460f      	mov	r7, r1
   16b44:	4615      	mov	r5, r2
   16b46:	461e      	mov	r6, r3
    if(!inited) {
   16b48:	4bb2      	ldr	r3, [pc, #712]	; (16e14 <lv_theme_material_init+0x2d8>)
   16b4a:	791b      	ldrb	r3, [r3, #4]
   16b4c:	2b00      	cmp	r3, #0
   16b4e:	f001 8369 	beq.w	18224 <lv_theme_material_init+0x16e8>
    theme.color_primary = color_primary;
   16b52:	4cb0      	ldr	r4, [pc, #704]	; (16e14 <lv_theme_material_init+0x2d8>)
   16b54:	f8a4 800c 	strh.w	r8, [r4, #12]
    theme.color_secondary = color_secondary;
   16b58:	81e7      	strh	r7, [r4, #14]
    theme.font_small = font_small;
   16b5a:	6126      	str	r6, [r4, #16]
    theme.font_normal = font_normal;
   16b5c:	9b06      	ldr	r3, [sp, #24]
   16b5e:	6163      	str	r3, [r4, #20]
    theme.font_subtitle = font_subtitle;
   16b60:	9b07      	ldr	r3, [sp, #28]
   16b62:	61a3      	str	r3, [r4, #24]
    theme.font_title = font_title;
   16b64:	9b08      	ldr	r3, [sp, #32]
   16b66:	61e3      	str	r3, [r4, #28]
    theme.flags = flags;
   16b68:	6225      	str	r5, [r4, #32]
    basic_init();
   16b6a:	4bab      	ldr	r3, [pc, #684]	; (16e18 <lv_theme_material_init+0x2dc>)
   16b6c:	4798      	blx	r3
    bar_init();
   16b6e:	4bab      	ldr	r3, [pc, #684]	; (16e1c <lv_theme_material_init+0x2e0>)
   16b70:	4798      	blx	r3
    led_init();
   16b72:	4bab      	ldr	r3, [pc, #684]	; (16e20 <lv_theme_material_init+0x2e4>)
   16b74:	4798      	blx	r3
    slider_init();
   16b76:	4bab      	ldr	r3, [pc, #684]	; (16e24 <lv_theme_material_init+0x2e8>)
   16b78:	4798      	blx	r3
    switch_init();
   16b7a:	4bab      	ldr	r3, [pc, #684]	; (16e28 <lv_theme_material_init+0x2ec>)
   16b7c:	4798      	blx	r3
    linemeter_init();
   16b7e:	4bab      	ldr	r3, [pc, #684]	; (16e2c <lv_theme_material_init+0x2f0>)
   16b80:	4798      	blx	r3
    gauge_init();
   16b82:	4bab      	ldr	r3, [pc, #684]	; (16e30 <lv_theme_material_init+0x2f4>)
   16b84:	4798      	blx	r3
    arc_init();
   16b86:	4bab      	ldr	r3, [pc, #684]	; (16e34 <lv_theme_material_init+0x2f8>)
   16b88:	4798      	blx	r3
    style_init_reset(&styles->chart_bg);
   16b8a:	6820      	ldr	r0, [r4, #0]
   16b8c:	3040      	adds	r0, #64	; 0x40
   16b8e:	4baa      	ldr	r3, [pc, #680]	; (16e38 <lv_theme_material_init+0x2fc>)
   16b90:	4798      	blx	r3
    lv_style_set_text_color(&styles->chart_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
   16b92:	6820      	ldr	r0, [r4, #0]
   16b94:	3040      	adds	r0, #64	; 0x40
   16b96:	6a23      	ldr	r3, [r4, #32]
   16b98:	f013 0f02 	tst.w	r3, #2
   16b9c:	f041 834b 	bne.w	18236 <lv_theme_material_init+0x16fa>
   16ba0:	2314      	movs	r3, #20
   16ba2:	212b      	movs	r1, #43	; 0x2b
   16ba4:	2417      	movs	r4, #23
   16ba6:	f04f 0200 	mov.w	r2, #0
   16baa:	f364 0204 	bfi	r2, r4, #0, #5
   16bae:	f361 124a 	bfi	r2, r1, #5, #6
   16bb2:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   16bb6:	f248 0189 	movw	r1, #32905	; 0x8089
   16bba:	4ba0      	ldr	r3, [pc, #640]	; (16e3c <lv_theme_material_init+0x300>)
   16bbc:	4798      	blx	r3
    style_init_reset(&styles->chart_series_bg);
   16bbe:	4c95      	ldr	r4, [pc, #596]	; (16e14 <lv_theme_material_init+0x2d8>)
   16bc0:	6820      	ldr	r0, [r4, #0]
   16bc2:	3044      	adds	r0, #68	; 0x44
   16bc4:	4b9c      	ldr	r3, [pc, #624]	; (16e38 <lv_theme_material_init+0x2fc>)
   16bc6:	4798      	blx	r3
    lv_style_set_line_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(1));
   16bc8:	6824      	ldr	r4, [r4, #0]
   16bca:	3444      	adds	r4, #68	; 0x44
   16bcc:	2000      	movs	r0, #0
   16bce:	4b9c      	ldr	r3, [pc, #624]	; (16e40 <lv_theme_material_init+0x304>)
   16bd0:	4798      	blx	r3
   16bd2:	3050      	adds	r0, #80	; 0x50
   16bd4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16bd8:	f281 8332 	bge.w	18240 <lv_theme_material_init+0x1704>
   16bdc:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   16bde:	2190      	movs	r1, #144	; 0x90
   16be0:	4620      	mov	r0, r4
   16be2:	4b98      	ldr	r3, [pc, #608]	; (16e44 <lv_theme_material_init+0x308>)
   16be4:	4798      	blx	r3
    lv_style_set_line_dash_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
   16be6:	4b8b      	ldr	r3, [pc, #556]	; (16e14 <lv_theme_material_init+0x2d8>)
   16be8:	681c      	ldr	r4, [r3, #0]
   16bea:	3444      	adds	r4, #68	; 0x44
   16bec:	2000      	movs	r0, #0
   16bee:	4b94      	ldr	r3, [pc, #592]	; (16e40 <lv_theme_material_init+0x304>)
   16bf0:	4798      	blx	r3
   16bf2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16bf6:	0040      	lsls	r0, r0, #1
   16bf8:	3050      	adds	r0, #80	; 0x50
   16bfa:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16bfe:	f281 832c 	bge.w	1825a <lv_theme_material_init+0x171e>
   16c02:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_WIDTH, line_dash_width, lv_style_int_t, _int, scalar)
   16c04:	2192      	movs	r1, #146	; 0x92
   16c06:	4620      	mov	r0, r4
   16c08:	4b8e      	ldr	r3, [pc, #568]	; (16e44 <lv_theme_material_init+0x308>)
   16c0a:	4798      	blx	r3
    lv_style_set_line_dash_gap(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
   16c0c:	4b81      	ldr	r3, [pc, #516]	; (16e14 <lv_theme_material_init+0x2d8>)
   16c0e:	681c      	ldr	r4, [r3, #0]
   16c10:	3444      	adds	r4, #68	; 0x44
   16c12:	2000      	movs	r0, #0
   16c14:	4b8a      	ldr	r3, [pc, #552]	; (16e40 <lv_theme_material_init+0x304>)
   16c16:	4798      	blx	r3
   16c18:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16c1c:	0040      	lsls	r0, r0, #1
   16c1e:	3050      	adds	r0, #80	; 0x50
   16c20:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16c24:	f281 8329 	bge.w	1827a <lv_theme_material_init+0x173e>
   16c28:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
   16c2a:	2193      	movs	r1, #147	; 0x93
   16c2c:	4620      	mov	r0, r4
   16c2e:	4b85      	ldr	r3, [pc, #532]	; (16e44 <lv_theme_material_init+0x308>)
   16c30:	4798      	blx	r3
    lv_style_set_line_color(&styles->chart_series_bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
   16c32:	4b78      	ldr	r3, [pc, #480]	; (16e14 <lv_theme_material_init+0x2d8>)
   16c34:	6818      	ldr	r0, [r3, #0]
   16c36:	6a1b      	ldr	r3, [r3, #32]
   16c38:	f013 0302 	ands.w	r3, r3, #2
   16c3c:	bf14      	ite	ne
   16c3e:	211a      	movne	r1, #26
   16c40:	2110      	moveq	r1, #16
   16c42:	2b00      	cmp	r3, #0
   16c44:	bf15      	itete	ne
   16c46:	2437      	movne	r4, #55	; 0x37
   16c48:	2422      	moveq	r4, #34	; 0x22
   16c4a:	231c      	movne	r3, #28
   16c4c:	2312      	moveq	r3, #18
   16c4e:	f04f 0200 	mov.w	r2, #0
   16c52:	f363 0204 	bfi	r2, r3, #0, #5
   16c56:	f364 124a 	bfi	r2, r4, #5, #6
   16c5a:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   16c5e:	2199      	movs	r1, #153	; 0x99
   16c60:	3044      	adds	r0, #68	; 0x44
   16c62:	4b76      	ldr	r3, [pc, #472]	; (16e3c <lv_theme_material_init+0x300>)
   16c64:	4798      	blx	r3
    style_init_reset(&styles->chart_series);
   16c66:	4c6b      	ldr	r4, [pc, #428]	; (16e14 <lv_theme_material_init+0x2d8>)
   16c68:	6820      	ldr	r0, [r4, #0]
   16c6a:	3048      	adds	r0, #72	; 0x48
   16c6c:	4b72      	ldr	r3, [pc, #456]	; (16e38 <lv_theme_material_init+0x2fc>)
   16c6e:	4798      	blx	r3
    lv_style_set_line_width(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(3));
   16c70:	6824      	ldr	r4, [r4, #0]
   16c72:	3448      	adds	r4, #72	; 0x48
   16c74:	2000      	movs	r0, #0
   16c76:	4b72      	ldr	r3, [pc, #456]	; (16e40 <lv_theme_material_init+0x304>)
   16c78:	4798      	blx	r3
   16c7a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16c7e:	3050      	adds	r0, #80	; 0x50
   16c80:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16c84:	f281 8309 	bge.w	1829a <lv_theme_material_init+0x175e>
   16c88:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   16c8a:	2190      	movs	r1, #144	; 0x90
   16c8c:	4620      	mov	r0, r4
   16c8e:	4b6d      	ldr	r3, [pc, #436]	; (16e44 <lv_theme_material_init+0x308>)
   16c90:	4798      	blx	r3
    lv_style_set_size(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(4));
   16c92:	4b60      	ldr	r3, [pc, #384]	; (16e14 <lv_theme_material_init+0x2d8>)
   16c94:	681c      	ldr	r4, [r3, #0]
   16c96:	3448      	adds	r4, #72	; 0x48
   16c98:	2000      	movs	r0, #0
   16c9a:	4b69      	ldr	r3, [pc, #420]	; (16e40 <lv_theme_material_init+0x304>)
   16c9c:	4798      	blx	r3
   16c9e:	3014      	adds	r0, #20
   16ca0:	0080      	lsls	r0, r0, #2
   16ca2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16ca6:	f281 8307 	bge.w	182b8 <lv_theme_material_init+0x177c>
   16caa:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
   16cac:	2103      	movs	r1, #3
   16cae:	4620      	mov	r0, r4
   16cb0:	4b64      	ldr	r3, [pc, #400]	; (16e44 <lv_theme_material_init+0x308>)
   16cb2:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(2));     /*Space between columns*/
   16cb4:	4b57      	ldr	r3, [pc, #348]	; (16e14 <lv_theme_material_init+0x2d8>)
   16cb6:	681c      	ldr	r4, [r3, #0]
   16cb8:	3448      	adds	r4, #72	; 0x48
   16cba:	2000      	movs	r0, #0
   16cbc:	4b60      	ldr	r3, [pc, #384]	; (16e40 <lv_theme_material_init+0x304>)
   16cbe:	4798      	blx	r3
   16cc0:	3028      	adds	r0, #40	; 0x28
   16cc2:	0040      	lsls	r0, r0, #1
   16cc4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16cc8:	f281 8304 	bge.w	182d4 <lv_theme_material_init+0x1798>
   16ccc:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   16cce:	2114      	movs	r1, #20
   16cd0:	4620      	mov	r0, r4
   16cd2:	4b5c      	ldr	r3, [pc, #368]	; (16e44 <lv_theme_material_init+0x308>)
   16cd4:	4798      	blx	r3
    lv_style_set_radius(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(1));
   16cd6:	4b4f      	ldr	r3, [pc, #316]	; (16e14 <lv_theme_material_init+0x2d8>)
   16cd8:	681c      	ldr	r4, [r3, #0]
   16cda:	3448      	adds	r4, #72	; 0x48
   16cdc:	2000      	movs	r0, #0
   16cde:	4b58      	ldr	r3, [pc, #352]	; (16e40 <lv_theme_material_init+0x304>)
   16ce0:	4798      	blx	r3
   16ce2:	3050      	adds	r0, #80	; 0x50
   16ce4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16ce8:	f281 8302 	bge.w	182f0 <lv_theme_material_init+0x17b4>
   16cec:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   16cee:	2101      	movs	r1, #1
   16cf0:	4620      	mov	r0, r4
   16cf2:	4b54      	ldr	r3, [pc, #336]	; (16e44 <lv_theme_material_init+0x308>)
   16cf4:	4798      	blx	r3
    style_init_reset(&styles->calendar_header);
   16cf6:	4c47      	ldr	r4, [pc, #284]	; (16e14 <lv_theme_material_init+0x2d8>)
   16cf8:	6820      	ldr	r0, [r4, #0]
   16cfa:	3030      	adds	r0, #48	; 0x30
   16cfc:	4b4e      	ldr	r3, [pc, #312]	; (16e38 <lv_theme_material_init+0x2fc>)
   16cfe:	4798      	blx	r3
    lv_style_set_pad_top(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
   16d00:	6824      	ldr	r4, [r4, #0]
   16d02:	3430      	adds	r4, #48	; 0x30
   16d04:	2000      	movs	r0, #0
   16d06:	4b50      	ldr	r3, [pc, #320]	; (16e48 <lv_theme_material_init+0x30c>)
   16d08:	4798      	blx	r3
   16d0a:	2801      	cmp	r0, #1
   16d0c:	f241 82fd 	bls.w	1830a <lv_theme_material_init+0x17ce>
   16d10:	2000      	movs	r0, #0
   16d12:	4b4b      	ldr	r3, [pc, #300]	; (16e40 <lv_theme_material_init+0x304>)
   16d14:	4798      	blx	r3
   16d16:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16d1a:	0040      	lsls	r0, r0, #1
   16d1c:	3050      	adds	r0, #80	; 0x50
   16d1e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16d22:	f281 830d 	bge.w	18340 <lv_theme_material_init+0x1804>
   16d26:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   16d28:	2110      	movs	r1, #16
   16d2a:	4620      	mov	r0, r4
   16d2c:	4b45      	ldr	r3, [pc, #276]	; (16e44 <lv_theme_material_init+0x308>)
   16d2e:	4798      	blx	r3
    lv_style_set_pad_left(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
   16d30:	4b38      	ldr	r3, [pc, #224]	; (16e14 <lv_theme_material_init+0x2d8>)
   16d32:	681c      	ldr	r4, [r3, #0]
   16d34:	3430      	adds	r4, #48	; 0x30
   16d36:	2000      	movs	r0, #0
   16d38:	4b43      	ldr	r3, [pc, #268]	; (16e48 <lv_theme_material_init+0x30c>)
   16d3a:	4798      	blx	r3
   16d3c:	2801      	cmp	r0, #1
   16d3e:	f241 830f 	bls.w	18360 <lv_theme_material_init+0x1824>
   16d42:	2000      	movs	r0, #0
   16d44:	4b3e      	ldr	r3, [pc, #248]	; (16e40 <lv_theme_material_init+0x304>)
   16d46:	4798      	blx	r3
   16d48:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16d4c:	0040      	lsls	r0, r0, #1
   16d4e:	3050      	adds	r0, #80	; 0x50
   16d50:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16d54:	f281 8336 	bge.w	183c4 <lv_theme_material_init+0x1888>
   16d58:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   16d5a:	2112      	movs	r1, #18
   16d5c:	4620      	mov	r0, r4
   16d5e:	4b39      	ldr	r3, [pc, #228]	; (16e44 <lv_theme_material_init+0x308>)
   16d60:	4798      	blx	r3
    lv_style_set_pad_right(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
   16d62:	4b2c      	ldr	r3, [pc, #176]	; (16e14 <lv_theme_material_init+0x2d8>)
   16d64:	681c      	ldr	r4, [r3, #0]
   16d66:	3430      	adds	r4, #48	; 0x30
   16d68:	2000      	movs	r0, #0
   16d6a:	4b37      	ldr	r3, [pc, #220]	; (16e48 <lv_theme_material_init+0x30c>)
   16d6c:	4798      	blx	r3
   16d6e:	2801      	cmp	r0, #1
   16d70:	f241 8338 	bls.w	183e4 <lv_theme_material_init+0x18a8>
   16d74:	2000      	movs	r0, #0
   16d76:	4b32      	ldr	r3, [pc, #200]	; (16e40 <lv_theme_material_init+0x304>)
   16d78:	4798      	blx	r3
   16d7a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16d7e:	0040      	lsls	r0, r0, #1
   16d80:	3050      	adds	r0, #80	; 0x50
   16d82:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16d86:	f281 8348 	bge.w	1841a <lv_theme_material_init+0x18de>
   16d8a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   16d8c:	2113      	movs	r1, #19
   16d8e:	4620      	mov	r0, r4
   16d90:	4b2c      	ldr	r3, [pc, #176]	; (16e44 <lv_theme_material_init+0x308>)
   16d92:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
   16d94:	4b1f      	ldr	r3, [pc, #124]	; (16e14 <lv_theme_material_init+0x2d8>)
   16d96:	681c      	ldr	r4, [r3, #0]
   16d98:	3430      	adds	r4, #48	; 0x30
   16d9a:	2000      	movs	r0, #0
   16d9c:	4b2a      	ldr	r3, [pc, #168]	; (16e48 <lv_theme_material_init+0x30c>)
   16d9e:	4798      	blx	r3
   16da0:	2801      	cmp	r0, #1
   16da2:	f241 834a 	bls.w	1843a <lv_theme_material_init+0x18fe>
   16da6:	2000      	movs	r0, #0
   16da8:	4b25      	ldr	r3, [pc, #148]	; (16e40 <lv_theme_material_init+0x304>)
   16daa:	4798      	blx	r3
   16dac:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16db0:	0040      	lsls	r0, r0, #1
   16db2:	3050      	adds	r0, #80	; 0x50
   16db4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16db8:	f281 835a 	bge.w	18470 <lv_theme_material_init+0x1934>
   16dbc:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   16dbe:	2111      	movs	r1, #17
   16dc0:	4620      	mov	r0, r4
   16dc2:	4b20      	ldr	r3, [pc, #128]	; (16e44 <lv_theme_material_init+0x308>)
   16dc4:	4798      	blx	r3
    lv_style_set_text_color(&styles->calendar_header, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x888888) : LV_COLOR_WHITE);
   16dc6:	4b13      	ldr	r3, [pc, #76]	; (16e14 <lv_theme_material_init+0x2d8>)
   16dc8:	6818      	ldr	r0, [r3, #0]
   16dca:	6a1b      	ldr	r3, [r3, #32]
   16dcc:	f013 0302 	ands.w	r3, r3, #2
   16dd0:	bf14      	ite	ne
   16dd2:	2122      	movne	r1, #34	; 0x22
   16dd4:	213f      	moveq	r1, #63	; 0x3f
   16dd6:	2b00      	cmp	r3, #0
   16dd8:	bf14      	ite	ne
   16dda:	2311      	movne	r3, #17
   16ddc:	231f      	moveq	r3, #31
   16dde:	f04f 0200 	mov.w	r2, #0
   16de2:	f363 0204 	bfi	r2, r3, #0, #5
   16de6:	f361 124a 	bfi	r2, r1, #5, #6
   16dea:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   16dee:	f249 0189 	movw	r1, #37001	; 0x9089
   16df2:	3030      	adds	r0, #48	; 0x30
   16df4:	4b11      	ldr	r3, [pc, #68]	; (16e3c <lv_theme_material_init+0x300>)
   16df6:	4798      	blx	r3
    style_init_reset(&styles->calendar_daynames);
   16df8:	4c06      	ldr	r4, [pc, #24]	; (16e14 <lv_theme_material_init+0x2d8>)
   16dfa:	6820      	ldr	r0, [r4, #0]
   16dfc:	3034      	adds	r0, #52	; 0x34
   16dfe:	4b0e      	ldr	r3, [pc, #56]	; (16e38 <lv_theme_material_init+0x2fc>)
   16e00:	4798      	blx	r3
    lv_style_set_text_color(&styles->calendar_daynames, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex3(0xeee));
   16e02:	6820      	ldr	r0, [r4, #0]
   16e04:	3034      	adds	r0, #52	; 0x34
   16e06:	6a23      	ldr	r3, [r4, #32]
   16e08:	f013 0f02 	tst.w	r3, #2
   16e0c:	f041 8340 	bne.w	18490 <lv_theme_material_init+0x1954>
   16e10:	e01c      	b.n	16e4c <lv_theme_material_init+0x310>
   16e12:	bf00      	nop
   16e14:	2000c5d4 	.word	0x2000c5d4
   16e18:	00014a75 	.word	0x00014a75
   16e1c:	00015cbd 	.word	0x00015cbd
   16e20:	00016a39 	.word	0x00016a39
   16e24:	00015e25 	.word	0x00015e25
   16e28:	000160c9 	.word	0x000160c9
   16e2c:	0001620d 	.word	0x0001620d
   16e30:	00016449 	.word	0x00016449
   16e34:	00016929 	.word	0x00016929
   16e38:	00014a55 	.word	0x00014a55
   16e3c:	00006a19 	.word	0x00006a19
   16e40:	00010f31 	.word	0x00010f31
   16e44:	000068d5 	.word	0x000068d5
   16e48:	00010f4d 	.word	0x00010f4d
   16e4c:	231d      	movs	r3, #29
   16e4e:	213b      	movs	r1, #59	; 0x3b
   16e50:	461c      	mov	r4, r3
   16e52:	f04f 0200 	mov.w	r2, #0
   16e56:	f364 0204 	bfi	r2, r4, #0, #5
   16e5a:	f361 124a 	bfi	r2, r1, #5, #6
   16e5e:	f363 22cf 	bfi	r2, r3, #11, #5
   16e62:	f248 0189 	movw	r1, #32905	; 0x8089
   16e66:	4bb8      	ldr	r3, [pc, #736]	; (17148 <lv_theme_material_init+0x60c>)
   16e68:	4798      	blx	r3
    lv_style_set_pad_left(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
   16e6a:	4bb8      	ldr	r3, [pc, #736]	; (1714c <lv_theme_material_init+0x610>)
   16e6c:	681c      	ldr	r4, [r3, #0]
   16e6e:	3434      	adds	r4, #52	; 0x34
   16e70:	2000      	movs	r0, #0
   16e72:	4bb7      	ldr	r3, [pc, #732]	; (17150 <lv_theme_material_init+0x614>)
   16e74:	4798      	blx	r3
   16e76:	2801      	cmp	r0, #1
   16e78:	f241 830f 	bls.w	1849a <lv_theme_material_init+0x195e>
   16e7c:	2000      	movs	r0, #0
   16e7e:	4bb5      	ldr	r3, [pc, #724]	; (17154 <lv_theme_material_init+0x618>)
   16e80:	4798      	blx	r3
   16e82:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16e86:	0040      	lsls	r0, r0, #1
   16e88:	3050      	adds	r0, #80	; 0x50
   16e8a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16e8e:	f281 831f 	bge.w	184d0 <lv_theme_material_init+0x1994>
   16e92:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   16e94:	2112      	movs	r1, #18
   16e96:	4620      	mov	r0, r4
   16e98:	4baf      	ldr	r3, [pc, #700]	; (17158 <lv_theme_material_init+0x61c>)
   16e9a:	4798      	blx	r3
    lv_style_set_pad_right(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
   16e9c:	4bab      	ldr	r3, [pc, #684]	; (1714c <lv_theme_material_init+0x610>)
   16e9e:	681c      	ldr	r4, [r3, #0]
   16ea0:	3434      	adds	r4, #52	; 0x34
   16ea2:	2000      	movs	r0, #0
   16ea4:	4baa      	ldr	r3, [pc, #680]	; (17150 <lv_theme_material_init+0x614>)
   16ea6:	4798      	blx	r3
   16ea8:	2801      	cmp	r0, #1
   16eaa:	f241 8321 	bls.w	184f0 <lv_theme_material_init+0x19b4>
   16eae:	2000      	movs	r0, #0
   16eb0:	4ba8      	ldr	r3, [pc, #672]	; (17154 <lv_theme_material_init+0x618>)
   16eb2:	4798      	blx	r3
   16eb4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16eb8:	0040      	lsls	r0, r0, #1
   16eba:	3050      	adds	r0, #80	; 0x50
   16ebc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16ec0:	f281 8331 	bge.w	18526 <lv_theme_material_init+0x19ea>
   16ec4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   16ec6:	2113      	movs	r1, #19
   16ec8:	4620      	mov	r0, r4
   16eca:	4ba3      	ldr	r3, [pc, #652]	; (17158 <lv_theme_material_init+0x61c>)
   16ecc:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
   16ece:	4b9f      	ldr	r3, [pc, #636]	; (1714c <lv_theme_material_init+0x610>)
   16ed0:	681c      	ldr	r4, [r3, #0]
   16ed2:	3434      	adds	r4, #52	; 0x34
   16ed4:	2000      	movs	r0, #0
   16ed6:	4b9e      	ldr	r3, [pc, #632]	; (17150 <lv_theme_material_init+0x614>)
   16ed8:	4798      	blx	r3
   16eda:	2801      	cmp	r0, #1
   16edc:	f241 8333 	bls.w	18546 <lv_theme_material_init+0x1a0a>
   16ee0:	2000      	movs	r0, #0
   16ee2:	4b9c      	ldr	r3, [pc, #624]	; (17154 <lv_theme_material_init+0x618>)
   16ee4:	4798      	blx	r3
   16ee6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16eea:	0040      	lsls	r0, r0, #1
   16eec:	3050      	adds	r0, #80	; 0x50
   16eee:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16ef2:	f281 8343 	bge.w	1857c <lv_theme_material_init+0x1a40>
   16ef6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   16ef8:	2111      	movs	r1, #17
   16efa:	4620      	mov	r0, r4
   16efc:	4b96      	ldr	r3, [pc, #600]	; (17158 <lv_theme_material_init+0x61c>)
   16efe:	4798      	blx	r3
    style_init_reset(&styles->calendar_date_nums);
   16f00:	4c92      	ldr	r4, [pc, #584]	; (1714c <lv_theme_material_init+0x610>)
   16f02:	6820      	ldr	r0, [r4, #0]
   16f04:	302c      	adds	r0, #44	; 0x2c
   16f06:	4b95      	ldr	r3, [pc, #596]	; (1715c <lv_theme_material_init+0x620>)
   16f08:	4798      	blx	r3
    lv_style_set_radius(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(4));
   16f0a:	6824      	ldr	r4, [r4, #0]
   16f0c:	342c      	adds	r4, #44	; 0x2c
   16f0e:	2000      	movs	r0, #0
   16f10:	4b90      	ldr	r3, [pc, #576]	; (17154 <lv_theme_material_init+0x618>)
   16f12:	4798      	blx	r3
   16f14:	3014      	adds	r0, #20
   16f16:	0080      	lsls	r0, r0, #2
   16f18:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16f1c:	f281 833e 	bge.w	1859c <lv_theme_material_init+0x1a60>
   16f20:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   16f22:	2101      	movs	r1, #1
   16f24:	4620      	mov	r0, r4
   16f26:	4b8c      	ldr	r3, [pc, #560]	; (17158 <lv_theme_material_init+0x61c>)
   16f28:	4798      	blx	r3
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
   16f2a:	4b88      	ldr	r3, [pc, #544]	; (1714c <lv_theme_material_init+0x610>)
   16f2c:	6818      	ldr	r0, [r3, #0]
   16f2e:	302c      	adds	r0, #44	; 0x2c
   16f30:	6a1b      	ldr	r3, [r3, #32]
   16f32:	f013 0f02 	tst.w	r3, #2
   16f36:	f041 833f 	bne.w	185b8 <lv_theme_material_init+0x1a7c>
   16f3a:	231f      	movs	r3, #31
   16f3c:	213f      	movs	r1, #63	; 0x3f
   16f3e:	461c      	mov	r4, r3
   16f40:	f04f 0200 	mov.w	r2, #0
   16f44:	f364 0204 	bfi	r2, r4, #0, #5
   16f48:	f361 124a 	bfi	r2, r1, #5, #6
   16f4c:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   16f50:	f248 1189 	movw	r1, #33161	; 0x8189
   16f54:	4b7c      	ldr	r3, [pc, #496]	; (17148 <lv_theme_material_init+0x60c>)
   16f56:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_CHECKED, IS_LIGHT ? LV_OPA_20 : LV_OPA_40);
   16f58:	4b7c      	ldr	r3, [pc, #496]	; (1714c <lv_theme_material_init+0x610>)
   16f5a:	6818      	ldr	r0, [r3, #0]
   16f5c:	6a1b      	ldr	r3, [r3, #32]
   16f5e:	f013 0f02 	tst.w	r3, #2
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   16f62:	bf14      	ite	ne
   16f64:	2233      	movne	r2, #51	; 0x33
   16f66:	2266      	moveq	r2, #102	; 0x66
   16f68:	f44f 7196 	mov.w	r1, #300	; 0x12c
   16f6c:	302c      	adds	r0, #44	; 0x2c
   16f6e:	4d7c      	ldr	r5, [pc, #496]	; (17160 <lv_theme_material_init+0x624>)
   16f70:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_PRESSED, LV_OPA_20);
   16f72:	4c76      	ldr	r4, [pc, #472]	; (1714c <lv_theme_material_init+0x610>)
   16f74:	6820      	ldr	r0, [r4, #0]
   16f76:	2233      	movs	r2, #51	; 0x33
   16f78:	f241 012c 	movw	r1, #4140	; 0x102c
   16f7c:	302c      	adds	r0, #44	; 0x2c
   16f7e:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_FOCUSED, LV_OPA_COVER);
   16f80:	6820      	ldr	r0, [r4, #0]
   16f82:	22ff      	movs	r2, #255	; 0xff
   16f84:	f44f 710b 	mov.w	r1, #556	; 0x22c
   16f88:	302c      	adds	r0, #44	; 0x2c
   16f8a:	47a8      	blx	r5
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_FOCUSED, LV_COLOR_WHITE);
   16f8c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   16f8e:	4b75      	ldr	r3, [pc, #468]	; (17164 <lv_theme_material_init+0x628>)
   16f90:	881a      	ldrh	r2, [r3, #0]
   16f92:	f248 2189 	movw	r1, #33417	; 0x8289
   16f96:	302c      	adds	r0, #44	; 0x2c
   16f98:	4d6b      	ldr	r5, [pc, #428]	; (17148 <lv_theme_material_init+0x60c>)
   16f9a:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_FOCUSED, theme.color_primary);
   16f9c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   16f9e:	89a2      	ldrh	r2, [r4, #12]
   16fa0:	f240 2129 	movw	r1, #553	; 0x229
   16fa4:	302c      	adds	r0, #44	; 0x2c
   16fa6:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x666666) : LV_COLOR_WHITE);
   16fa8:	6820      	ldr	r0, [r4, #0]
   16faa:	6a23      	ldr	r3, [r4, #32]
   16fac:	f013 0302 	ands.w	r3, r3, #2
   16fb0:	bf14      	ite	ne
   16fb2:	2119      	movne	r1, #25
   16fb4:	213f      	moveq	r1, #63	; 0x3f
   16fb6:	2b00      	cmp	r3, #0
   16fb8:	bf14      	ite	ne
   16fba:	230c      	movne	r3, #12
   16fbc:	231f      	moveq	r3, #31
   16fbe:	f04f 0200 	mov.w	r2, #0
   16fc2:	f363 0204 	bfi	r2, r3, #0, #5
   16fc6:	f361 124a 	bfi	r2, r1, #5, #6
   16fca:	f363 22cf 	bfi	r2, r3, #11, #5
   16fce:	2129      	movs	r1, #41	; 0x29
   16fd0:	302c      	adds	r0, #44	; 0x2c
   16fd2:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_CHECKED, theme.color_primary);
   16fd4:	6820      	ldr	r0, [r4, #0]
   16fd6:	89a2      	ldrh	r2, [r4, #12]
   16fd8:	f240 1129 	movw	r1, #297	; 0x129
   16fdc:	302c      	adds	r0, #44	; 0x2c
   16fde:	47a8      	blx	r5
    lv_style_set_border_width(&styles->calendar_date_nums, LV_STATE_CHECKED, 2);
   16fe0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   16fe2:	2202      	movs	r2, #2
   16fe4:	f44f 7198 	mov.w	r1, #304	; 0x130
   16fe8:	302c      	adds	r0, #44	; 0x2c
   16fea:	4e5b      	ldr	r6, [pc, #364]	; (17158 <lv_theme_material_init+0x61c>)
   16fec:	47b0      	blx	r6
    lv_style_set_border_side(&styles->calendar_date_nums, LV_STATE_CHECKED, LV_BORDER_SIDE_LEFT);
   16fee:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
   16ff0:	2204      	movs	r2, #4
   16ff2:	f240 1131 	movw	r1, #305	; 0x131
   16ff6:	302c      	adds	r0, #44	; 0x2c
   16ff8:	47b0      	blx	r6
    lv_style_set_border_color(&styles->calendar_date_nums, LV_STATE_CHECKED, theme.color_primary);
   16ffa:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   16ffc:	89a2      	ldrh	r2, [r4, #12]
   16ffe:	f240 1139 	movw	r1, #313	; 0x139
   17002:	302c      	adds	r0, #44	; 0x2c
   17004:	47a8      	blx	r5
    lv_style_set_pad_inner(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(3));
   17006:	6824      	ldr	r4, [r4, #0]
   17008:	342c      	adds	r4, #44	; 0x2c
   1700a:	2000      	movs	r0, #0
   1700c:	4b51      	ldr	r3, [pc, #324]	; (17154 <lv_theme_material_init+0x618>)
   1700e:	4798      	blx	r3
   17010:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17014:	3050      	adds	r0, #80	; 0x50
   17016:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1701a:	f281 82d2 	bge.w	185c2 <lv_theme_material_init+0x1a86>
   1701e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   17020:	2114      	movs	r1, #20
   17022:	4620      	mov	r0, r4
   17024:	4b4c      	ldr	r3, [pc, #304]	; (17158 <lv_theme_material_init+0x61c>)
   17026:	4798      	blx	r3
    lv_style_set_pad_left(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
   17028:	4b48      	ldr	r3, [pc, #288]	; (1714c <lv_theme_material_init+0x610>)
   1702a:	681c      	ldr	r4, [r3, #0]
   1702c:	342c      	adds	r4, #44	; 0x2c
   1702e:	2000      	movs	r0, #0
   17030:	4b47      	ldr	r3, [pc, #284]	; (17150 <lv_theme_material_init+0x614>)
   17032:	4798      	blx	r3
   17034:	2801      	cmp	r0, #1
   17036:	f241 82d3 	bls.w	185e0 <lv_theme_material_init+0x1aa4>
   1703a:	2000      	movs	r0, #0
   1703c:	4b45      	ldr	r3, [pc, #276]	; (17154 <lv_theme_material_init+0x618>)
   1703e:	4798      	blx	r3
   17040:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   17044:	0040      	lsls	r0, r0, #1
   17046:	3050      	adds	r0, #80	; 0x50
   17048:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1704c:	f281 82e3 	bge.w	18616 <lv_theme_material_init+0x1ada>
   17050:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   17052:	2112      	movs	r1, #18
   17054:	4620      	mov	r0, r4
   17056:	4b40      	ldr	r3, [pc, #256]	; (17158 <lv_theme_material_init+0x61c>)
   17058:	4798      	blx	r3
    lv_style_set_pad_right(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
   1705a:	4b3c      	ldr	r3, [pc, #240]	; (1714c <lv_theme_material_init+0x610>)
   1705c:	681c      	ldr	r4, [r3, #0]
   1705e:	342c      	adds	r4, #44	; 0x2c
   17060:	2000      	movs	r0, #0
   17062:	4b3b      	ldr	r3, [pc, #236]	; (17150 <lv_theme_material_init+0x614>)
   17064:	4798      	blx	r3
   17066:	2801      	cmp	r0, #1
   17068:	f241 82e5 	bls.w	18636 <lv_theme_material_init+0x1afa>
   1706c:	2000      	movs	r0, #0
   1706e:	4b39      	ldr	r3, [pc, #228]	; (17154 <lv_theme_material_init+0x618>)
   17070:	4798      	blx	r3
   17072:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   17076:	0040      	lsls	r0, r0, #1
   17078:	3050      	adds	r0, #80	; 0x50
   1707a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1707e:	f281 82f5 	bge.w	1866c <lv_theme_material_init+0x1b30>
   17082:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   17084:	2113      	movs	r1, #19
   17086:	4620      	mov	r0, r4
   17088:	4b33      	ldr	r3, [pc, #204]	; (17158 <lv_theme_material_init+0x61c>)
   1708a:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
   1708c:	4b2f      	ldr	r3, [pc, #188]	; (1714c <lv_theme_material_init+0x610>)
   1708e:	681c      	ldr	r4, [r3, #0]
   17090:	342c      	adds	r4, #44	; 0x2c
   17092:	2000      	movs	r0, #0
   17094:	4b2e      	ldr	r3, [pc, #184]	; (17150 <lv_theme_material_init+0x614>)
   17096:	4798      	blx	r3
   17098:	2801      	cmp	r0, #1
   1709a:	f241 82f7 	bls.w	1868c <lv_theme_material_init+0x1b50>
   1709e:	2000      	movs	r0, #0
   170a0:	4b2c      	ldr	r3, [pc, #176]	; (17154 <lv_theme_material_init+0x618>)
   170a2:	4798      	blx	r3
   170a4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   170a8:	0040      	lsls	r0, r0, #1
   170aa:	3050      	adds	r0, #80	; 0x50
   170ac:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   170b0:	f281 8307 	bge.w	186c2 <lv_theme_material_init+0x1b86>
   170b4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   170b6:	2111      	movs	r1, #17
   170b8:	4620      	mov	r0, r4
   170ba:	4b27      	ldr	r3, [pc, #156]	; (17158 <lv_theme_material_init+0x61c>)
   170bc:	4798      	blx	r3
    style_init_reset(&styles->cpicker_bg);
   170be:	4c23      	ldr	r4, [pc, #140]	; (1714c <lv_theme_material_init+0x610>)
   170c0:	6820      	ldr	r0, [r4, #0]
   170c2:	3038      	adds	r0, #56	; 0x38
   170c4:	4b25      	ldr	r3, [pc, #148]	; (1715c <lv_theme_material_init+0x620>)
   170c6:	4798      	blx	r3
    lv_style_set_scale_width(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(30));
   170c8:	6824      	ldr	r4, [r4, #0]
   170ca:	3438      	adds	r4, #56	; 0x38
   170cc:	2000      	movs	r0, #0
   170ce:	4b21      	ldr	r3, [pc, #132]	; (17154 <lv_theme_material_init+0x618>)
   170d0:	4798      	blx	r3
   170d2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   170d6:	0040      	lsls	r0, r0, #1
   170d8:	3050      	adds	r0, #80	; 0x50
   170da:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   170de:	f281 8305 	bge.w	186ec <lv_theme_material_init+0x1bb0>
   170e2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
   170e4:	21c0      	movs	r1, #192	; 0xc0
   170e6:	4620      	mov	r0, r4
   170e8:	4b1b      	ldr	r3, [pc, #108]	; (17158 <lv_theme_material_init+0x61c>)
   170ea:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
   170ec:	4c17      	ldr	r4, [pc, #92]	; (1714c <lv_theme_material_init+0x610>)
   170ee:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   170f0:	22ff      	movs	r2, #255	; 0xff
   170f2:	212c      	movs	r1, #44	; 0x2c
   170f4:	3038      	adds	r0, #56	; 0x38
   170f6:	4b1a      	ldr	r3, [pc, #104]	; (17160 <lv_theme_material_init+0x624>)
   170f8:	4798      	blx	r3
    lv_style_set_bg_color(&styles->cpicker_bg, LV_STATE_DEFAULT, COLOR_SCR);
   170fa:	6820      	ldr	r0, [r4, #0]
   170fc:	6a23      	ldr	r3, [r4, #32]
   170fe:	f013 0302 	ands.w	r3, r3, #2
   17102:	bf14      	ite	ne
   17104:	211d      	movne	r1, #29
   17106:	2108      	moveq	r1, #8
   17108:	2b00      	cmp	r3, #0
   1710a:	bf15      	itete	ne
   1710c:	243b      	movne	r4, #59	; 0x3b
   1710e:	2412      	moveq	r4, #18
   17110:	231e      	movne	r3, #30
   17112:	230b      	moveq	r3, #11
   17114:	f04f 0200 	mov.w	r2, #0
   17118:	f363 0204 	bfi	r2, r3, #0, #5
   1711c:	f364 124a 	bfi	r2, r4, #5, #6
   17120:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   17124:	2129      	movs	r1, #41	; 0x29
   17126:	3038      	adds	r0, #56	; 0x38
   17128:	4b07      	ldr	r3, [pc, #28]	; (17148 <lv_theme_material_init+0x60c>)
   1712a:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(20));
   1712c:	4b07      	ldr	r3, [pc, #28]	; (1714c <lv_theme_material_init+0x610>)
   1712e:	681c      	ldr	r4, [r3, #0]
   17130:	3438      	adds	r4, #56	; 0x38
   17132:	2000      	movs	r0, #0
   17134:	4b07      	ldr	r3, [pc, #28]	; (17154 <lv_theme_material_init+0x618>)
   17136:	4798      	blx	r3
   17138:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1713c:	0080      	lsls	r0, r0, #2
   1713e:	3050      	adds	r0, #80	; 0x50
   17140:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17144:	e010      	b.n	17168 <lv_theme_material_init+0x62c>
   17146:	bf00      	nop
   17148:	00006a19 	.word	0x00006a19
   1714c:	2000c5d4 	.word	0x2000c5d4
   17150:	00010f4d 	.word	0x00010f4d
   17154:	00010f31 	.word	0x00010f31
   17158:	000068d5 	.word	0x000068d5
   1715c:	00014a55 	.word	0x00014a55
   17160:	00006b5d 	.word	0x00006b5d
   17164:	00029578 	.word	0x00029578
   17168:	f281 82d0 	bge.w	1870c <lv_theme_material_init+0x1bd0>
   1716c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   1716e:	2114      	movs	r1, #20
   17170:	4620      	mov	r0, r4
   17172:	4eb6      	ldr	r6, [pc, #728]	; (1744c <lv_theme_material_init+0x910>)
   17174:	47b0      	blx	r6
    lv_style_set_radius(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   17176:	4cb6      	ldr	r4, [pc, #728]	; (17450 <lv_theme_material_init+0x914>)
   17178:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   1717a:	f647 72ff 	movw	r2, #32767	; 0x7fff
   1717e:	2101      	movs	r1, #1
   17180:	3038      	adds	r0, #56	; 0x38
   17182:	47b0      	blx	r6
    style_init_reset(&styles->cpicker_indic);
   17184:	6820      	ldr	r0, [r4, #0]
   17186:	303c      	adds	r0, #60	; 0x3c
   17188:	4bb2      	ldr	r3, [pc, #712]	; (17454 <lv_theme_material_init+0x918>)
   1718a:	4798      	blx	r3
    lv_style_set_radius(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   1718c:	6820      	ldr	r0, [r4, #0]
   1718e:	f647 72ff 	movw	r2, #32767	; 0x7fff
   17192:	2101      	movs	r1, #1
   17194:	303c      	adds	r0, #60	; 0x3c
   17196:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_COLOR_WHITE);
   17198:	6820      	ldr	r0, [r4, #0]
   1719a:	4faf      	ldr	r7, [pc, #700]	; (17458 <lv_theme_material_init+0x91c>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   1719c:	883a      	ldrh	r2, [r7, #0]
   1719e:	2129      	movs	r1, #41	; 0x29
   171a0:	303c      	adds	r0, #60	; 0x3c
   171a2:	4dae      	ldr	r5, [pc, #696]	; (1745c <lv_theme_material_init+0x920>)
   171a4:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
   171a6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   171a8:	22ff      	movs	r2, #255	; 0xff
   171aa:	212c      	movs	r1, #44	; 0x2c
   171ac:	303c      	adds	r0, #60	; 0x3c
   171ae:	4bac      	ldr	r3, [pc, #688]	; (17460 <lv_theme_material_init+0x924>)
   171b0:	4798      	blx	r3
    lv_style_set_border_width(&styles->cpicker_indic, LV_STATE_DEFAULT, 2);
   171b2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   171b4:	2202      	movs	r2, #2
   171b6:	2130      	movs	r1, #48	; 0x30
   171b8:	303c      	adds	r0, #60	; 0x3c
   171ba:	47b0      	blx	r6
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_COLOR_GRAY);
   171bc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   171be:	88ba      	ldrh	r2, [r7, #4]
   171c0:	2139      	movs	r1, #57	; 0x39
   171c2:	303c      	adds	r0, #60	; 0x3c
   171c4:	47a8      	blx	r5
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_FOCUSED, theme.color_primary);
   171c6:	6820      	ldr	r0, [r4, #0]
   171c8:	89a2      	ldrh	r2, [r4, #12]
   171ca:	f240 2139 	movw	r1, #569	; 0x239
   171ce:	303c      	adds	r0, #60	; 0x3c
   171d0:	47a8      	blx	r5
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_EDITED, theme.color_secondary);
   171d2:	6820      	ldr	r0, [r4, #0]
   171d4:	89e2      	ldrh	r2, [r4, #14]
   171d6:	f240 4139 	movw	r1, #1081	; 0x439
   171da:	303c      	adds	r0, #60	; 0x3c
   171dc:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
   171de:	6824      	ldr	r4, [r4, #0]
   171e0:	343c      	adds	r4, #60	; 0x3c
   171e2:	2000      	movs	r0, #0
   171e4:	4b9f      	ldr	r3, [pc, #636]	; (17464 <lv_theme_material_init+0x928>)
   171e6:	4798      	blx	r3
   171e8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   171ec:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   171f0:	3050      	adds	r0, #80	; 0x50
   171f2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   171f6:	f281 8299 	bge.w	1872c <lv_theme_material_init+0x1bf0>
   171fa:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   171fc:	2112      	movs	r1, #18
   171fe:	4620      	mov	r0, r4
   17200:	4b92      	ldr	r3, [pc, #584]	; (1744c <lv_theme_material_init+0x910>)
   17202:	4798      	blx	r3
    lv_style_set_pad_right(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
   17204:	4b92      	ldr	r3, [pc, #584]	; (17450 <lv_theme_material_init+0x914>)
   17206:	681c      	ldr	r4, [r3, #0]
   17208:	343c      	adds	r4, #60	; 0x3c
   1720a:	2000      	movs	r0, #0
   1720c:	4b95      	ldr	r3, [pc, #596]	; (17464 <lv_theme_material_init+0x928>)
   1720e:	4798      	blx	r3
   17210:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   17214:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   17218:	3050      	adds	r0, #80	; 0x50
   1721a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1721e:	f281 8296 	bge.w	1874e <lv_theme_material_init+0x1c12>
   17222:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   17224:	2113      	movs	r1, #19
   17226:	4620      	mov	r0, r4
   17228:	4b88      	ldr	r3, [pc, #544]	; (1744c <lv_theme_material_init+0x910>)
   1722a:	4798      	blx	r3
    lv_style_set_pad_top(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
   1722c:	4b88      	ldr	r3, [pc, #544]	; (17450 <lv_theme_material_init+0x914>)
   1722e:	681c      	ldr	r4, [r3, #0]
   17230:	343c      	adds	r4, #60	; 0x3c
   17232:	2000      	movs	r0, #0
   17234:	4b8b      	ldr	r3, [pc, #556]	; (17464 <lv_theme_material_init+0x928>)
   17236:	4798      	blx	r3
   17238:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1723c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   17240:	3050      	adds	r0, #80	; 0x50
   17242:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17246:	f281 8293 	bge.w	18770 <lv_theme_material_init+0x1c34>
   1724a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   1724c:	2110      	movs	r1, #16
   1724e:	4620      	mov	r0, r4
   17250:	4b7e      	ldr	r3, [pc, #504]	; (1744c <lv_theme_material_init+0x910>)
   17252:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
   17254:	4b7e      	ldr	r3, [pc, #504]	; (17450 <lv_theme_material_init+0x914>)
   17256:	681c      	ldr	r4, [r3, #0]
   17258:	343c      	adds	r4, #60	; 0x3c
   1725a:	2000      	movs	r0, #0
   1725c:	4b81      	ldr	r3, [pc, #516]	; (17464 <lv_theme_material_init+0x928>)
   1725e:	4798      	blx	r3
   17260:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   17264:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   17268:	3050      	adds	r0, #80	; 0x50
   1726a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1726e:	f281 8290 	bge.w	18792 <lv_theme_material_init+0x1c56>
   17272:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   17274:	2111      	movs	r1, #17
   17276:	4620      	mov	r0, r4
   17278:	4b74      	ldr	r3, [pc, #464]	; (1744c <lv_theme_material_init+0x910>)
   1727a:	4798      	blx	r3
    style_init_reset(&styles->cb_bg);
   1727c:	4c74      	ldr	r4, [pc, #464]	; (17450 <lv_theme_material_init+0x914>)
   1727e:	6820      	ldr	r0, [r4, #0]
   17280:	304c      	adds	r0, #76	; 0x4c
   17282:	4b74      	ldr	r3, [pc, #464]	; (17454 <lv_theme_material_init+0x918>)
   17284:	4798      	blx	r3
    lv_style_set_radius(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(4));
   17286:	6824      	ldr	r4, [r4, #0]
   17288:	344c      	adds	r4, #76	; 0x4c
   1728a:	2000      	movs	r0, #0
   1728c:	4b75      	ldr	r3, [pc, #468]	; (17464 <lv_theme_material_init+0x928>)
   1728e:	4798      	blx	r3
   17290:	3014      	adds	r0, #20
   17292:	0080      	lsls	r0, r0, #2
   17294:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17298:	f281 828c 	bge.w	187b4 <lv_theme_material_init+0x1c78>
   1729c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   1729e:	2101      	movs	r1, #1
   172a0:	4620      	mov	r0, r4
   172a2:	4b6a      	ldr	r3, [pc, #424]	; (1744c <lv_theme_material_init+0x910>)
   172a4:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
   172a6:	4b6a      	ldr	r3, [pc, #424]	; (17450 <lv_theme_material_init+0x914>)
   172a8:	681c      	ldr	r4, [r3, #0]
   172aa:	344c      	adds	r4, #76	; 0x4c
   172ac:	2000      	movs	r0, #0
   172ae:	4b6d      	ldr	r3, [pc, #436]	; (17464 <lv_theme_material_init+0x928>)
   172b0:	4798      	blx	r3
   172b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   172b6:	0040      	lsls	r0, r0, #1
   172b8:	3050      	adds	r0, #80	; 0x50
   172ba:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   172be:	f281 8287 	bge.w	187d0 <lv_theme_material_init+0x1c94>
   172c2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   172c4:	2114      	movs	r1, #20
   172c6:	4620      	mov	r0, r4
   172c8:	4b60      	ldr	r3, [pc, #384]	; (1744c <lv_theme_material_init+0x910>)
   172ca:	4798      	blx	r3
    lv_style_set_outline_color(&styles->cb_bg, LV_STATE_DEFAULT, theme.color_primary);
   172cc:	4c60      	ldr	r4, [pc, #384]	; (17450 <lv_theme_material_init+0x914>)
   172ce:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
   172d0:	89a2      	ldrh	r2, [r4, #12]
   172d2:	2149      	movs	r1, #73	; 0x49
   172d4:	304c      	adds	r0, #76	; 0x4c
   172d6:	4b61      	ldr	r3, [pc, #388]	; (1745c <lv_theme_material_init+0x920>)
   172d8:	4798      	blx	r3
    lv_style_set_outline_opa(&styles->cb_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
   172da:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
   172dc:	2200      	movs	r2, #0
   172de:	214c      	movs	r1, #76	; 0x4c
   172e0:	4408      	add	r0, r1
   172e2:	4d5f      	ldr	r5, [pc, #380]	; (17460 <lv_theme_material_init+0x924>)
   172e4:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->cb_bg, LV_STATE_FOCUSED, LV_OPA_50);
   172e6:	6820      	ldr	r0, [r4, #0]
   172e8:	227f      	movs	r2, #127	; 0x7f
   172ea:	f44f 7113 	mov.w	r1, #588	; 0x24c
   172ee:	304c      	adds	r0, #76	; 0x4c
   172f0:	47a8      	blx	r5
    lv_style_set_outline_width(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(3));
   172f2:	6824      	ldr	r4, [r4, #0]
   172f4:	344c      	adds	r4, #76	; 0x4c
   172f6:	2000      	movs	r0, #0
   172f8:	4b5a      	ldr	r3, [pc, #360]	; (17464 <lv_theme_material_init+0x928>)
   172fa:	4798      	blx	r3
   172fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17300:	3050      	adds	r0, #80	; 0x50
   17302:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17306:	f281 8273 	bge.w	187f0 <lv_theme_material_init+0x1cb4>
   1730a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
   1730c:	2140      	movs	r1, #64	; 0x40
   1730e:	4620      	mov	r0, r4
   17310:	4b4e      	ldr	r3, [pc, #312]	; (1744c <lv_theme_material_init+0x910>)
   17312:	4798      	blx	r3
    lv_style_set_outline_pad(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
   17314:	4b4e      	ldr	r3, [pc, #312]	; (17450 <lv_theme_material_init+0x914>)
   17316:	681c      	ldr	r4, [r3, #0]
   17318:	344c      	adds	r4, #76	; 0x4c
   1731a:	2000      	movs	r0, #0
   1731c:	4b51      	ldr	r3, [pc, #324]	; (17464 <lv_theme_material_init+0x928>)
   1731e:	4798      	blx	r3
   17320:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   17324:	0040      	lsls	r0, r0, #1
   17326:	3050      	adds	r0, #80	; 0x50
   17328:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1732c:	f281 826f 	bge.w	1880e <lv_theme_material_init+0x1cd2>
   17330:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
   17332:	2141      	movs	r1, #65	; 0x41
   17334:	4620      	mov	r0, r4
   17336:	4d45      	ldr	r5, [pc, #276]	; (1744c <lv_theme_material_init+0x910>)
   17338:	47a8      	blx	r5
    lv_style_set_transition_time(&styles->cb_bg, LV_STATE_DEFAULT, TRANSITION_TIME);
   1733a:	4c45      	ldr	r4, [pc, #276]	; (17450 <lv_theme_material_init+0x914>)
   1733c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
   1733e:	2296      	movs	r2, #150	; 0x96
   17340:	21b0      	movs	r1, #176	; 0xb0
   17342:	304c      	adds	r0, #76	; 0x4c
   17344:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->cb_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
   17346:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
   17348:	224c      	movs	r2, #76	; 0x4c
   1734a:	21b7      	movs	r1, #183	; 0xb7
   1734c:	4410      	add	r0, r2
   1734e:	47a8      	blx	r5
    style_init_reset(&styles->cb_bullet);
   17350:	6820      	ldr	r0, [r4, #0]
   17352:	3050      	adds	r0, #80	; 0x50
   17354:	4b3f      	ldr	r3, [pc, #252]	; (17454 <lv_theme_material_init+0x918>)
   17356:	4798      	blx	r3
    lv_style_set_outline_opa(&styles->cb_bullet, LV_STATE_FOCUSED, LV_OPA_TRANSP);
   17358:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
   1735a:	2200      	movs	r2, #0
   1735c:	f44f 7113 	mov.w	r1, #588	; 0x24c
   17360:	3050      	adds	r0, #80	; 0x50
   17362:	4b3f      	ldr	r3, [pc, #252]	; (17460 <lv_theme_material_init+0x924>)
   17364:	4798      	blx	r3
    lv_style_set_radius(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(4));
   17366:	6824      	ldr	r4, [r4, #0]
   17368:	3450      	adds	r4, #80	; 0x50
   1736a:	2000      	movs	r0, #0
   1736c:	4b3d      	ldr	r3, [pc, #244]	; (17464 <lv_theme_material_init+0x928>)
   1736e:	4798      	blx	r3
   17370:	3014      	adds	r0, #20
   17372:	0080      	lsls	r0, r0, #2
   17374:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17378:	f281 8259 	bge.w	1882e <lv_theme_material_init+0x1cf2>
   1737c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   1737e:	2101      	movs	r1, #1
   17380:	4620      	mov	r0, r4
   17382:	4b32      	ldr	r3, [pc, #200]	; (1744c <lv_theme_material_init+0x910>)
   17384:	4798      	blx	r3
    lv_style_set_pattern_image(&styles->cb_bullet, LV_STATE_CHECKED, LV_SYMBOL_OK);
   17386:	4c32      	ldr	r4, [pc, #200]	; (17450 <lv_theme_material_init+0x914>)
   17388:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
   1738a:	4a37      	ldr	r2, [pc, #220]	; (17468 <lv_theme_material_init+0x92c>)
   1738c:	f44f 71b7 	mov.w	r1, #366	; 0x16e
   17390:	3050      	adds	r0, #80	; 0x50
   17392:	4d36      	ldr	r5, [pc, #216]	; (1746c <lv_theme_material_init+0x930>)
   17394:	47a8      	blx	r5
    lv_style_set_pattern_recolor(&styles->cb_bullet, LV_STATE_CHECKED, LV_COLOR_WHITE);
   17396:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
   17398:	4b2f      	ldr	r3, [pc, #188]	; (17458 <lv_theme_material_init+0x91c>)
   1739a:	881a      	ldrh	r2, [r3, #0]
   1739c:	f240 1169 	movw	r1, #361	; 0x169
   173a0:	3050      	adds	r0, #80	; 0x50
   173a2:	4b2e      	ldr	r3, [pc, #184]	; (1745c <lv_theme_material_init+0x920>)
   173a4:	4798      	blx	r3
    lv_style_set_text_font(&styles->cb_bullet, LV_STATE_CHECKED, theme.font_small);
   173a6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   173a8:	6922      	ldr	r2, [r4, #16]
   173aa:	f248 118e 	movw	r1, #33166	; 0x818e
   173ae:	3050      	adds	r0, #80	; 0x50
   173b0:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   173b2:	6824      	ldr	r4, [r4, #0]
   173b4:	3450      	adds	r4, #80	; 0x50
   173b6:	2000      	movs	r0, #0
   173b8:	4b2a      	ldr	r3, [pc, #168]	; (17464 <lv_theme_material_init+0x928>)
   173ba:	4798      	blx	r3
   173bc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   173c0:	3050      	adds	r0, #80	; 0x50
   173c2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   173c6:	f281 8240 	bge.w	1884a <lv_theme_material_init+0x1d0e>
   173ca:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   173cc:	2112      	movs	r1, #18
   173ce:	4620      	mov	r0, r4
   173d0:	4b1e      	ldr	r3, [pc, #120]	; (1744c <lv_theme_material_init+0x910>)
   173d2:	4798      	blx	r3
    lv_style_set_pad_right(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   173d4:	4b1e      	ldr	r3, [pc, #120]	; (17450 <lv_theme_material_init+0x914>)
   173d6:	681c      	ldr	r4, [r3, #0]
   173d8:	3450      	adds	r4, #80	; 0x50
   173da:	2000      	movs	r0, #0
   173dc:	4b21      	ldr	r3, [pc, #132]	; (17464 <lv_theme_material_init+0x928>)
   173de:	4798      	blx	r3
   173e0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   173e4:	3050      	adds	r0, #80	; 0x50
   173e6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   173ea:	f281 823d 	bge.w	18868 <lv_theme_material_init+0x1d2c>
   173ee:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   173f0:	2113      	movs	r1, #19
   173f2:	4620      	mov	r0, r4
   173f4:	4b15      	ldr	r3, [pc, #84]	; (1744c <lv_theme_material_init+0x910>)
   173f6:	4798      	blx	r3
    lv_style_set_pad_top(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   173f8:	4b15      	ldr	r3, [pc, #84]	; (17450 <lv_theme_material_init+0x914>)
   173fa:	681c      	ldr	r4, [r3, #0]
   173fc:	3450      	adds	r4, #80	; 0x50
   173fe:	2000      	movs	r0, #0
   17400:	4b18      	ldr	r3, [pc, #96]	; (17464 <lv_theme_material_init+0x928>)
   17402:	4798      	blx	r3
   17404:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17408:	3050      	adds	r0, #80	; 0x50
   1740a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1740e:	f281 823a 	bge.w	18886 <lv_theme_material_init+0x1d4a>
   17412:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   17414:	2110      	movs	r1, #16
   17416:	4620      	mov	r0, r4
   17418:	4b0c      	ldr	r3, [pc, #48]	; (1744c <lv_theme_material_init+0x910>)
   1741a:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   1741c:	4b0c      	ldr	r3, [pc, #48]	; (17450 <lv_theme_material_init+0x914>)
   1741e:	681c      	ldr	r4, [r3, #0]
   17420:	3450      	adds	r4, #80	; 0x50
   17422:	2000      	movs	r0, #0
   17424:	4b0f      	ldr	r3, [pc, #60]	; (17464 <lv_theme_material_init+0x928>)
   17426:	4798      	blx	r3
   17428:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1742c:	3050      	adds	r0, #80	; 0x50
   1742e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17432:	f281 8237 	bge.w	188a4 <lv_theme_material_init+0x1d68>
   17436:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   17438:	2111      	movs	r1, #17
   1743a:	4620      	mov	r0, r4
   1743c:	4d03      	ldr	r5, [pc, #12]	; (1744c <lv_theme_material_init+0x910>)
   1743e:	47a8      	blx	r5
    style_init_reset(&styles->kb_bg);
   17440:	4c03      	ldr	r4, [pc, #12]	; (17450 <lv_theme_material_init+0x914>)
   17442:	6820      	ldr	r0, [r4, #0]
   17444:	3068      	adds	r0, #104	; 0x68
   17446:	4b03      	ldr	r3, [pc, #12]	; (17454 <lv_theme_material_init+0x918>)
   17448:	4798      	blx	r3
   1744a:	e011      	b.n	17470 <lv_theme_material_init+0x934>
   1744c:	000068d5 	.word	0x000068d5
   17450:	2000c5d4 	.word	0x2000c5d4
   17454:	00014a55 	.word	0x00014a55
   17458:	00029578 	.word	0x00029578
   1745c:	00006a19 	.word	0x00006a19
   17460:	00006b5d 	.word	0x00006b5d
   17464:	00010f31 	.word	0x00010f31
   17468:	00029580 	.word	0x00029580
   1746c:	00006c8d 	.word	0x00006c8d
    lv_style_set_radius(&styles->kb_bg, LV_STATE_DEFAULT, 0);
   17470:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   17472:	2200      	movs	r2, #0
   17474:	2101      	movs	r1, #1
   17476:	3068      	adds	r0, #104	; 0x68
   17478:	47a8      	blx	r5
    lv_style_set_border_width(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(4));
   1747a:	6824      	ldr	r4, [r4, #0]
   1747c:	3468      	adds	r4, #104	; 0x68
   1747e:	2000      	movs	r0, #0
   17480:	4bb5      	ldr	r3, [pc, #724]	; (17758 <lv_theme_material_init+0xc1c>)
   17482:	4798      	blx	r3
   17484:	3014      	adds	r0, #20
   17486:	0080      	lsls	r0, r0, #2
   17488:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1748c:	f281 8219 	bge.w	188c2 <lv_theme_material_init+0x1d86>
   17490:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   17492:	2130      	movs	r1, #48	; 0x30
   17494:	4620      	mov	r0, r4
   17496:	4db1      	ldr	r5, [pc, #708]	; (1775c <lv_theme_material_init+0xc20>)
   17498:	47a8      	blx	r5
    lv_style_set_border_side(&styles->kb_bg, LV_STATE_DEFAULT, LV_BORDER_SIDE_TOP);
   1749a:	4cb1      	ldr	r4, [pc, #708]	; (17760 <lv_theme_material_init+0xc24>)
   1749c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
   1749e:	2202      	movs	r2, #2
   174a0:	2131      	movs	r1, #49	; 0x31
   174a2:	3068      	adds	r0, #104	; 0x68
   174a4:	47a8      	blx	r5
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT : LV_COLOR_BLACK);
   174a6:	6820      	ldr	r0, [r4, #0]
   174a8:	3068      	adds	r0, #104	; 0x68
   174aa:	6a23      	ldr	r3, [r4, #32]
   174ac:	f013 0f02 	tst.w	r3, #2
   174b0:	f041 8215 	bne.w	188de <lv_theme_material_init+0x1da2>
   174b4:	2300      	movs	r3, #0
   174b6:	4619      	mov	r1, r3
   174b8:	461c      	mov	r4, r3
   174ba:	f04f 0200 	mov.w	r2, #0
   174be:	f364 0204 	bfi	r2, r4, #0, #5
   174c2:	f361 124a 	bfi	r2, r1, #5, #6
   174c6:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   174ca:	2139      	movs	r1, #57	; 0x39
   174cc:	4da5      	ldr	r5, [pc, #660]	; (17764 <lv_theme_material_init+0xc28>)
   174ce:	47a8      	blx	r5
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_EDITED, theme.color_secondary);
   174d0:	4ca3      	ldr	r4, [pc, #652]	; (17760 <lv_theme_material_init+0xc24>)
   174d2:	6820      	ldr	r0, [r4, #0]
   174d4:	89e2      	ldrh	r2, [r4, #14]
   174d6:	f240 4139 	movw	r1, #1081	; 0x439
   174da:	3068      	adds	r0, #104	; 0x68
   174dc:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
   174de:	6824      	ldr	r4, [r4, #0]
   174e0:	3468      	adds	r4, #104	; 0x68
   174e2:	2000      	movs	r0, #0
   174e4:	4b9c      	ldr	r3, [pc, #624]	; (17758 <lv_theme_material_init+0xc1c>)
   174e6:	4798      	blx	r3
   174e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   174ec:	3050      	adds	r0, #80	; 0x50
   174ee:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   174f2:	f281 81f9 	bge.w	188e8 <lv_theme_material_init+0x1dac>
   174f6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   174f8:	2112      	movs	r1, #18
   174fa:	4620      	mov	r0, r4
   174fc:	4b97      	ldr	r3, [pc, #604]	; (1775c <lv_theme_material_init+0xc20>)
   174fe:	4798      	blx	r3
    lv_style_set_pad_right(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
   17500:	4b97      	ldr	r3, [pc, #604]	; (17760 <lv_theme_material_init+0xc24>)
   17502:	681c      	ldr	r4, [r3, #0]
   17504:	3468      	adds	r4, #104	; 0x68
   17506:	2000      	movs	r0, #0
   17508:	4b93      	ldr	r3, [pc, #588]	; (17758 <lv_theme_material_init+0xc1c>)
   1750a:	4798      	blx	r3
   1750c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   17510:	3050      	adds	r0, #80	; 0x50
   17512:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17516:	f281 81f6 	bge.w	18906 <lv_theme_material_init+0x1dca>
   1751a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   1751c:	2113      	movs	r1, #19
   1751e:	4620      	mov	r0, r4
   17520:	4b8e      	ldr	r3, [pc, #568]	; (1775c <lv_theme_material_init+0xc20>)
   17522:	4798      	blx	r3
    lv_style_set_pad_top(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
   17524:	4b8e      	ldr	r3, [pc, #568]	; (17760 <lv_theme_material_init+0xc24>)
   17526:	681c      	ldr	r4, [r3, #0]
   17528:	3468      	adds	r4, #104	; 0x68
   1752a:	2000      	movs	r0, #0
   1752c:	4b8a      	ldr	r3, [pc, #552]	; (17758 <lv_theme_material_init+0xc1c>)
   1752e:	4798      	blx	r3
   17530:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   17534:	3050      	adds	r0, #80	; 0x50
   17536:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1753a:	f281 81f3 	bge.w	18924 <lv_theme_material_init+0x1de8>
   1753e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   17540:	2110      	movs	r1, #16
   17542:	4620      	mov	r0, r4
   17544:	4b85      	ldr	r3, [pc, #532]	; (1775c <lv_theme_material_init+0xc20>)
   17546:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
   17548:	4b85      	ldr	r3, [pc, #532]	; (17760 <lv_theme_material_init+0xc24>)
   1754a:	681c      	ldr	r4, [r3, #0]
   1754c:	3468      	adds	r4, #104	; 0x68
   1754e:	2000      	movs	r0, #0
   17550:	4b81      	ldr	r3, [pc, #516]	; (17758 <lv_theme_material_init+0xc1c>)
   17552:	4798      	blx	r3
   17554:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   17558:	3050      	adds	r0, #80	; 0x50
   1755a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1755e:	f281 81f0 	bge.w	18942 <lv_theme_material_init+0x1e06>
   17562:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   17564:	2111      	movs	r1, #17
   17566:	4620      	mov	r0, r4
   17568:	4b7c      	ldr	r3, [pc, #496]	; (1775c <lv_theme_material_init+0xc20>)
   1756a:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(3));
   1756c:	4b7c      	ldr	r3, [pc, #496]	; (17760 <lv_theme_material_init+0xc24>)
   1756e:	681c      	ldr	r4, [r3, #0]
   17570:	3468      	adds	r4, #104	; 0x68
   17572:	2000      	movs	r0, #0
   17574:	4b78      	ldr	r3, [pc, #480]	; (17758 <lv_theme_material_init+0xc1c>)
   17576:	4798      	blx	r3
   17578:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1757c:	3050      	adds	r0, #80	; 0x50
   1757e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17582:	f281 81ed 	bge.w	18960 <lv_theme_material_init+0x1e24>
   17586:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   17588:	2114      	movs	r1, #20
   1758a:	4620      	mov	r0, r4
   1758c:	4b73      	ldr	r3, [pc, #460]	; (1775c <lv_theme_material_init+0xc20>)
   1758e:	4798      	blx	r3
    style_init_reset(&styles->mbox_bg);
   17590:	4c73      	ldr	r4, [pc, #460]	; (17760 <lv_theme_material_init+0xc24>)
   17592:	6820      	ldr	r0, [r4, #0]
   17594:	307c      	adds	r0, #124	; 0x7c
   17596:	4b74      	ldr	r3, [pc, #464]	; (17768 <lv_theme_material_init+0xc2c>)
   17598:	4798      	blx	r3
    lv_style_set_shadow_width(&styles->mbox_bg, LV_STATE_DEFAULT, LV_DPX(50));
   1759a:	6824      	ldr	r4, [r4, #0]
   1759c:	347c      	adds	r4, #124	; 0x7c
   1759e:	2000      	movs	r0, #0
   175a0:	4b6d      	ldr	r3, [pc, #436]	; (17758 <lv_theme_material_init+0xc1c>)
   175a2:	4798      	blx	r3
   175a4:	2332      	movs	r3, #50	; 0x32
   175a6:	fb03 f000 	mul.w	r0, r3, r0
   175aa:	3050      	adds	r0, #80	; 0x50
   175ac:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   175b0:	f281 81e5 	bge.w	1897e <lv_theme_material_init+0x1e42>
   175b4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
   175b6:	2150      	movs	r1, #80	; 0x50
   175b8:	4620      	mov	r0, r4
   175ba:	4b68      	ldr	r3, [pc, #416]	; (1775c <lv_theme_material_init+0xc20>)
   175bc:	4798      	blx	r3
    lv_style_set_shadow_color(&styles->mbox_bg, LV_STATE_DEFAULT, IS_LIGHT ? LV_COLOR_SILVER : lv_color_hex3(0x999));
   175be:	4b68      	ldr	r3, [pc, #416]	; (17760 <lv_theme_material_init+0xc24>)
   175c0:	6818      	ldr	r0, [r3, #0]
   175c2:	6a1b      	ldr	r3, [r3, #32]
   175c4:	f013 0302 	ands.w	r3, r3, #2
   175c8:	bf0c      	ite	eq
   175ca:	2126      	moveq	r1, #38	; 0x26
   175cc:	2130      	movne	r1, #48	; 0x30
   175ce:	2b00      	cmp	r3, #0
   175d0:	bf0c      	ite	eq
   175d2:	2313      	moveq	r3, #19
   175d4:	2318      	movne	r3, #24
   175d6:	f04f 0200 	mov.w	r2, #0
   175da:	f363 0204 	bfi	r2, r3, #0, #5
   175de:	f361 124a 	bfi	r2, r1, #5, #6
   175e2:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
   175e6:	2159      	movs	r1, #89	; 0x59
   175e8:	307c      	adds	r0, #124	; 0x7c
   175ea:	4b5e      	ldr	r3, [pc, #376]	; (17764 <lv_theme_material_init+0xc28>)
   175ec:	4798      	blx	r3
    style_init_reset(&styles->sb);
   175ee:	4c5c      	ldr	r4, [pc, #368]	; (17760 <lv_theme_material_init+0xc24>)
   175f0:	6820      	ldr	r0, [r4, #0]
   175f2:	3080      	adds	r0, #128	; 0x80
   175f4:	4b5c      	ldr	r3, [pc, #368]	; (17768 <lv_theme_material_init+0xc2c>)
   175f6:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->sb, LV_STATE_DEFAULT, LV_OPA_COVER);
   175f8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   175fa:	22ff      	movs	r2, #255	; 0xff
   175fc:	212c      	movs	r1, #44	; 0x2c
   175fe:	3080      	adds	r0, #128	; 0x80
   17600:	4b5a      	ldr	r3, [pc, #360]	; (1776c <lv_theme_material_init+0xc30>)
   17602:	4798      	blx	r3
    lv_style_set_bg_color(&styles->sb, LV_STATE_DEFAULT, (IS_LIGHT ? lv_color_hex(0xcccfd1) : lv_color_hex(0x777f85)));
   17604:	6820      	ldr	r0, [r4, #0]
   17606:	6a23      	ldr	r3, [r4, #32]
   17608:	f013 0302 	ands.w	r3, r3, #2
   1760c:	bf14      	ite	ne
   1760e:	2119      	movne	r1, #25
   17610:	210e      	moveq	r1, #14
   17612:	2b00      	cmp	r3, #0
   17614:	bf15      	itete	ne
   17616:	2433      	movne	r4, #51	; 0x33
   17618:	241f      	moveq	r4, #31
   1761a:	231a      	movne	r3, #26
   1761c:	2310      	moveq	r3, #16
   1761e:	f04f 0200 	mov.w	r2, #0
   17622:	f363 0204 	bfi	r2, r3, #0, #5
   17626:	f364 124a 	bfi	r2, r4, #5, #6
   1762a:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   1762e:	2129      	movs	r1, #41	; 0x29
   17630:	3080      	adds	r0, #128	; 0x80
   17632:	4b4c      	ldr	r3, [pc, #304]	; (17764 <lv_theme_material_init+0xc28>)
   17634:	4798      	blx	r3
    lv_style_set_radius(&styles->sb, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   17636:	4c4a      	ldr	r4, [pc, #296]	; (17760 <lv_theme_material_init+0xc24>)
   17638:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   1763a:	f647 72ff 	movw	r2, #32767	; 0x7fff
   1763e:	2101      	movs	r1, #1
   17640:	3080      	adds	r0, #128	; 0x80
   17642:	4b46      	ldr	r3, [pc, #280]	; (1775c <lv_theme_material_init+0xc20>)
   17644:	4798      	blx	r3
    lv_style_set_size(&styles->sb, LV_STATE_DEFAULT, LV_DPX(7));
   17646:	6824      	ldr	r4, [r4, #0]
   17648:	3480      	adds	r4, #128	; 0x80
   1764a:	2000      	movs	r0, #0
   1764c:	4b42      	ldr	r3, [pc, #264]	; (17758 <lv_theme_material_init+0xc1c>)
   1764e:	4798      	blx	r3
   17650:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   17654:	3050      	adds	r0, #80	; 0x50
   17656:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1765a:	f281 81a0 	bge.w	1899e <lv_theme_material_init+0x1e62>
   1765e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
   17660:	2103      	movs	r1, #3
   17662:	4620      	mov	r0, r4
   17664:	4b3d      	ldr	r3, [pc, #244]	; (1775c <lv_theme_material_init+0xc20>)
   17666:	4798      	blx	r3
    lv_style_set_pad_right(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
   17668:	4b3d      	ldr	r3, [pc, #244]	; (17760 <lv_theme_material_init+0xc24>)
   1766a:	681c      	ldr	r4, [r3, #0]
   1766c:	3480      	adds	r4, #128	; 0x80
   1766e:	2000      	movs	r0, #0
   17670:	4b39      	ldr	r3, [pc, #228]	; (17758 <lv_theme_material_init+0xc1c>)
   17672:	4798      	blx	r3
   17674:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   17678:	3050      	adds	r0, #80	; 0x50
   1767a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1767e:	f281 819d 	bge.w	189bc <lv_theme_material_init+0x1e80>
   17682:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   17684:	2113      	movs	r1, #19
   17686:	4620      	mov	r0, r4
   17688:	4b34      	ldr	r3, [pc, #208]	; (1775c <lv_theme_material_init+0xc20>)
   1768a:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
   1768c:	4b34      	ldr	r3, [pc, #208]	; (17760 <lv_theme_material_init+0xc24>)
   1768e:	681c      	ldr	r4, [r3, #0]
   17690:	3480      	adds	r4, #128	; 0x80
   17692:	2000      	movs	r0, #0
   17694:	4b30      	ldr	r3, [pc, #192]	; (17758 <lv_theme_material_init+0xc1c>)
   17696:	4798      	blx	r3
   17698:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1769c:	3050      	adds	r0, #80	; 0x50
   1769e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   176a2:	f281 819a 	bge.w	189da <lv_theme_material_init+0x1e9e>
   176a6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   176a8:	2111      	movs	r1, #17
   176aa:	4620      	mov	r0, r4
   176ac:	4b2b      	ldr	r3, [pc, #172]	; (1775c <lv_theme_material_init+0xc20>)
   176ae:	4798      	blx	r3
    style_init_reset(&styles->edge_flash);
   176b0:	4c2b      	ldr	r4, [pc, #172]	; (17760 <lv_theme_material_init+0xc24>)
   176b2:	6820      	ldr	r0, [r4, #0]
   176b4:	3084      	adds	r0, #132	; 0x84
   176b6:	4d2c      	ldr	r5, [pc, #176]	; (17768 <lv_theme_material_init+0xc2c>)
   176b8:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->edge_flash, LV_STATE_DEFAULT, LV_OPA_COVER);
   176ba:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   176bc:	22ff      	movs	r2, #255	; 0xff
   176be:	212c      	movs	r1, #44	; 0x2c
   176c0:	3084      	adds	r0, #132	; 0x84
   176c2:	4b2a      	ldr	r3, [pc, #168]	; (1776c <lv_theme_material_init+0xc30>)
   176c4:	4798      	blx	r3
    lv_style_set_bg_color(&styles->edge_flash, LV_STATE_DEFAULT,  lv_color_hex3(0x888));
   176c6:	6820      	ldr	r0, [r4, #0]
   176c8:	2311      	movs	r3, #17
   176ca:	f04f 0200 	mov.w	r2, #0
   176ce:	f363 0204 	bfi	r2, r3, #0, #5
   176d2:	2122      	movs	r1, #34	; 0x22
   176d4:	f361 124a 	bfi	r2, r1, #5, #6
   176d8:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   176dc:	2129      	movs	r1, #41	; 0x29
   176de:	3084      	adds	r0, #132	; 0x84
   176e0:	4b20      	ldr	r3, [pc, #128]	; (17764 <lv_theme_material_init+0xc28>)
   176e2:	4798      	blx	r3
    style_init_reset(&styles->ta_cursor);
   176e4:	6820      	ldr	r0, [r4, #0]
   176e6:	30b4      	adds	r0, #180	; 0xb4
   176e8:	47a8      	blx	r5
    lv_style_set_border_color(&styles->ta_cursor, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
   176ea:	6820      	ldr	r0, [r4, #0]
   176ec:	6a23      	ldr	r3, [r4, #32]
   176ee:	f013 0302 	ands.w	r3, r3, #2
   176f2:	bf14      	ite	ne
   176f4:	2106      	movne	r1, #6
   176f6:	2114      	moveq	r1, #20
   176f8:	2b00      	cmp	r3, #0
   176fa:	bf15      	itete	ne
   176fc:	2410      	movne	r4, #16
   176fe:	242a      	moveq	r4, #42	; 0x2a
   17700:	2309      	movne	r3, #9
   17702:	2315      	moveq	r3, #21
   17704:	f04f 0200 	mov.w	r2, #0
   17708:	f363 0204 	bfi	r2, r3, #0, #5
   1770c:	f364 124a 	bfi	r2, r4, #5, #6
   17710:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   17714:	2139      	movs	r1, #57	; 0x39
   17716:	30b4      	adds	r0, #180	; 0xb4
   17718:	4b12      	ldr	r3, [pc, #72]	; (17764 <lv_theme_material_init+0xc28>)
   1771a:	4798      	blx	r3
    lv_style_set_border_width(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(2));
   1771c:	4b10      	ldr	r3, [pc, #64]	; (17760 <lv_theme_material_init+0xc24>)
   1771e:	681c      	ldr	r4, [r3, #0]
   17720:	34b4      	adds	r4, #180	; 0xb4
   17722:	2000      	movs	r0, #0
   17724:	4b0c      	ldr	r3, [pc, #48]	; (17758 <lv_theme_material_init+0xc1c>)
   17726:	4798      	blx	r3
   17728:	3028      	adds	r0, #40	; 0x28
   1772a:	0040      	lsls	r0, r0, #1
   1772c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17730:	f281 8162 	bge.w	189f8 <lv_theme_material_init+0x1ebc>
   17734:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   17736:	2130      	movs	r1, #48	; 0x30
   17738:	4620      	mov	r0, r4
   1773a:	4b08      	ldr	r3, [pc, #32]	; (1775c <lv_theme_material_init+0xc20>)
   1773c:	4798      	blx	r3
    lv_style_set_pad_left(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(1));
   1773e:	4b08      	ldr	r3, [pc, #32]	; (17760 <lv_theme_material_init+0xc24>)
   17740:	681c      	ldr	r4, [r3, #0]
   17742:	34b4      	adds	r4, #180	; 0xb4
   17744:	2000      	movs	r0, #0
   17746:	4b04      	ldr	r3, [pc, #16]	; (17758 <lv_theme_material_init+0xc1c>)
   17748:	4798      	blx	r3
   1774a:	3050      	adds	r0, #80	; 0x50
   1774c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17750:	f281 8164 	bge.w	18a1c <lv_theme_material_init+0x1ee0>
   17754:	2201      	movs	r2, #1
   17756:	e00b      	b.n	17770 <lv_theme_material_init+0xc34>
   17758:	00010f31 	.word	0x00010f31
   1775c:	000068d5 	.word	0x000068d5
   17760:	2000c5d4 	.word	0x2000c5d4
   17764:	00006a19 	.word	0x00006a19
   17768:	00014a55 	.word	0x00014a55
   1776c:	00006b5d 	.word	0x00006b5d
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   17770:	2112      	movs	r1, #18
   17772:	4620      	mov	r0, r4
   17774:	4dba      	ldr	r5, [pc, #744]	; (17a60 <lv_theme_material_init+0xf24>)
   17776:	47a8      	blx	r5
    lv_style_set_border_side(&styles->ta_cursor, LV_STATE_DEFAULT, LV_BORDER_SIDE_LEFT);
   17778:	4cba      	ldr	r4, [pc, #744]	; (17a64 <lv_theme_material_init+0xf28>)
   1777a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
   1777c:	2204      	movs	r2, #4
   1777e:	2131      	movs	r1, #49	; 0x31
   17780:	30b4      	adds	r0, #180	; 0xb4
   17782:	47a8      	blx	r5
    style_init_reset(&styles->ta_placeholder);
   17784:	6820      	ldr	r0, [r4, #0]
   17786:	30b8      	adds	r0, #184	; 0xb8
   17788:	4bb7      	ldr	r3, [pc, #732]	; (17a68 <lv_theme_material_init+0xf2c>)
   1778a:	4798      	blx	r3
    lv_style_set_text_color(&styles->ta_placeholder, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
   1778c:	6820      	ldr	r0, [r4, #0]
   1778e:	30b8      	adds	r0, #184	; 0xb8
   17790:	6a23      	ldr	r3, [r4, #32]
   17792:	f013 0f02 	tst.w	r3, #2
   17796:	f041 814e 	bne.w	18a36 <lv_theme_material_init+0x1efa>
   1779a:	2314      	movs	r3, #20
   1779c:	212b      	movs	r1, #43	; 0x2b
   1779e:	2417      	movs	r4, #23
   177a0:	f04f 0200 	mov.w	r2, #0
   177a4:	f364 0204 	bfi	r2, r4, #0, #5
   177a8:	f361 124a 	bfi	r2, r1, #5, #6
   177ac:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   177b0:	f248 0189 	movw	r1, #32905	; 0x8089
   177b4:	4dad      	ldr	r5, [pc, #692]	; (17a6c <lv_theme_material_init+0xf30>)
   177b6:	47a8      	blx	r5
    style_init_reset(&styles->spinbox_cursor);
   177b8:	4caa      	ldr	r4, [pc, #680]	; (17a64 <lv_theme_material_init+0xf28>)
   177ba:	6820      	ldr	r0, [r4, #0]
   177bc:	3098      	adds	r0, #152	; 0x98
   177be:	4baa      	ldr	r3, [pc, #680]	; (17a68 <lv_theme_material_init+0xf2c>)
   177c0:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_OPA_COVER);
   177c2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   177c4:	22ff      	movs	r2, #255	; 0xff
   177c6:	212c      	movs	r1, #44	; 0x2c
   177c8:	3098      	adds	r0, #152	; 0x98
   177ca:	4ba9      	ldr	r3, [pc, #676]	; (17a70 <lv_theme_material_init+0xf34>)
   177cc:	4798      	blx	r3
    lv_style_set_bg_color(&styles->spinbox_cursor, LV_STATE_DEFAULT, theme.color_primary);
   177ce:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   177d0:	89a2      	ldrh	r2, [r4, #12]
   177d2:	2129      	movs	r1, #41	; 0x29
   177d4:	3098      	adds	r0, #152	; 0x98
   177d6:	47a8      	blx	r5
    lv_style_set_text_color(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_COLOR_WHITE);
   177d8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   177da:	4ba6      	ldr	r3, [pc, #664]	; (17a74 <lv_theme_material_init+0xf38>)
   177dc:	881a      	ldrh	r2, [r3, #0]
   177de:	f248 0189 	movw	r1, #32905	; 0x8089
   177e2:	3098      	adds	r0, #152	; 0x98
   177e4:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
   177e6:	6824      	ldr	r4, [r4, #0]
   177e8:	3498      	adds	r4, #152	; 0x98
   177ea:	2000      	movs	r0, #0
   177ec:	4ba2      	ldr	r3, [pc, #648]	; (17a78 <lv_theme_material_init+0xf3c>)
   177ee:	4798      	blx	r3
   177f0:	2364      	movs	r3, #100	; 0x64
   177f2:	fb03 f000 	mul.w	r0, r3, r0
   177f6:	3050      	adds	r0, #80	; 0x50
   177f8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   177fc:	f281 8120 	bge.w	18a40 <lv_theme_material_init+0x1f04>
   17800:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   17802:	2110      	movs	r1, #16
   17804:	4620      	mov	r0, r4
   17806:	4b96      	ldr	r3, [pc, #600]	; (17a60 <lv_theme_material_init+0xf24>)
   17808:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
   1780a:	4b96      	ldr	r3, [pc, #600]	; (17a64 <lv_theme_material_init+0xf28>)
   1780c:	681c      	ldr	r4, [r3, #0]
   1780e:	3498      	adds	r4, #152	; 0x98
   17810:	2000      	movs	r0, #0
   17812:	4b99      	ldr	r3, [pc, #612]	; (17a78 <lv_theme_material_init+0xf3c>)
   17814:	4798      	blx	r3
   17816:	2364      	movs	r3, #100	; 0x64
   17818:	fb03 f000 	mul.w	r0, r3, r0
   1781c:	3050      	adds	r0, #80	; 0x50
   1781e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17822:	f281 811d 	bge.w	18a60 <lv_theme_material_init+0x1f24>
   17826:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   17828:	2111      	movs	r1, #17
   1782a:	4620      	mov	r0, r4
   1782c:	4d8c      	ldr	r5, [pc, #560]	; (17a60 <lv_theme_material_init+0xf24>)
   1782e:	47a8      	blx	r5
    style_init_reset(&styles->list_bg);
   17830:	4c8c      	ldr	r4, [pc, #560]	; (17a64 <lv_theme_material_init+0xf28>)
   17832:	6820      	ldr	r0, [r4, #0]
   17834:	3074      	adds	r0, #116	; 0x74
   17836:	4e8c      	ldr	r6, [pc, #560]	; (17a68 <lv_theme_material_init+0xf2c>)
   17838:	47b0      	blx	r6
    lv_style_set_clip_corner(&styles->list_bg, LV_STATE_DEFAULT, true);
   1783a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
   1783c:	2201      	movs	r2, #1
   1783e:	2102      	movs	r1, #2
   17840:	3074      	adds	r0, #116	; 0x74
   17842:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->list_bg, LV_STATE_DEFAULT, 0);
   17844:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   17846:	2200      	movs	r2, #0
   17848:	2112      	movs	r1, #18
   1784a:	3074      	adds	r0, #116	; 0x74
   1784c:	47a8      	blx	r5
    lv_style_set_pad_right(&styles->list_bg, LV_STATE_DEFAULT, 0);
   1784e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   17850:	2200      	movs	r2, #0
   17852:	2113      	movs	r1, #19
   17854:	3074      	adds	r0, #116	; 0x74
   17856:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->list_bg, LV_STATE_DEFAULT, 0);
   17858:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   1785a:	2200      	movs	r2, #0
   1785c:	2110      	movs	r1, #16
   1785e:	3074      	adds	r0, #116	; 0x74
   17860:	47a8      	blx	r5
    lv_style_set_pad_bottom(&styles->list_bg, LV_STATE_DEFAULT, 0);
   17862:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   17864:	2200      	movs	r2, #0
   17866:	2111      	movs	r1, #17
   17868:	3074      	adds	r0, #116	; 0x74
   1786a:	47a8      	blx	r5
    lv_style_set_pad_inner(&styles->list_bg, LV_STATE_DEFAULT, 0);
   1786c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   1786e:	2200      	movs	r2, #0
   17870:	2114      	movs	r1, #20
   17872:	3074      	adds	r0, #116	; 0x74
   17874:	47a8      	blx	r5
    style_init_reset(&styles->list_btn);
   17876:	6820      	ldr	r0, [r4, #0]
   17878:	3078      	adds	r0, #120	; 0x78
   1787a:	47b0      	blx	r6
    lv_style_set_bg_opa(&styles->list_btn, LV_STATE_DEFAULT, LV_OPA_COVER);
   1787c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   1787e:	22ff      	movs	r2, #255	; 0xff
   17880:	212c      	movs	r1, #44	; 0x2c
   17882:	3078      	adds	r0, #120	; 0x78
   17884:	4b7a      	ldr	r3, [pc, #488]	; (17a70 <lv_theme_material_init+0xf34>)
   17886:	4798      	blx	r3
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG);
   17888:	6820      	ldr	r0, [r4, #0]
   1788a:	3078      	adds	r0, #120	; 0x78
   1788c:	6a23      	ldr	r3, [r4, #32]
   1788e:	f013 0f02 	tst.w	r3, #2
   17892:	f041 80f5 	bne.w	18a80 <lv_theme_material_init+0x1f44>
   17896:	230b      	movs	r3, #11
   17898:	2118      	movs	r1, #24
   1789a:	240e      	movs	r4, #14
   1789c:	f04f 0200 	mov.w	r2, #0
   178a0:	f364 0204 	bfi	r2, r4, #0, #5
   178a4:	f361 124a 	bfi	r2, r1, #5, #6
   178a8:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   178ac:	2129      	movs	r1, #41	; 0x29
   178ae:	4b6f      	ldr	r3, [pc, #444]	; (17a6c <lv_theme_material_init+0xf30>)
   178b0:	4798      	blx	r3
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_PRESSED, COLOR_BG_PR);
   178b2:	4b6c      	ldr	r3, [pc, #432]	; (17a64 <lv_theme_material_init+0xf28>)
   178b4:	6818      	ldr	r0, [r3, #0]
   178b6:	3078      	adds	r0, #120	; 0x78
   178b8:	6a1b      	ldr	r3, [r3, #32]
   178ba:	f013 0f02 	tst.w	r3, #2
   178be:	f041 80e4 	bne.w	18a8a <lv_theme_material_init+0x1f4e>
   178c2:	2309      	movs	r3, #9
   178c4:	2113      	movs	r1, #19
   178c6:	240a      	movs	r4, #10
   178c8:	f04f 0200 	mov.w	r2, #0
   178cc:	f364 0204 	bfi	r2, r4, #0, #5
   178d0:	f361 124a 	bfi	r2, r1, #5, #6
   178d4:	f363 22cf 	bfi	r2, r3, #11, #5
   178d8:	f241 0129 	movw	r1, #4137	; 0x1029
   178dc:	4b63      	ldr	r3, [pc, #396]	; (17a6c <lv_theme_material_init+0xf30>)
   178de:	4798      	blx	r3
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_DIS);
   178e0:	4b60      	ldr	r3, [pc, #384]	; (17a64 <lv_theme_material_init+0xf28>)
   178e2:	6818      	ldr	r0, [r3, #0]
   178e4:	3078      	adds	r0, #120	; 0x78
   178e6:	6a1b      	ldr	r3, [r3, #32]
   178e8:	f013 0f02 	tst.w	r3, #2
   178ec:	f041 80d2 	bne.w	18a94 <lv_theme_material_init+0x1f58>
   178f0:	230b      	movs	r3, #11
   178f2:	2118      	movs	r1, #24
   178f4:	240e      	movs	r4, #14
   178f6:	f04f 0200 	mov.w	r2, #0
   178fa:	f364 0204 	bfi	r2, r4, #0, #5
   178fe:	f361 124a 	bfi	r2, r1, #5, #6
   17902:	f363 22cf 	bfi	r2, r3, #11, #5
   17906:	f242 0129 	movw	r1, #8233	; 0x2029
   1790a:	4d58      	ldr	r5, [pc, #352]	; (17a6c <lv_theme_material_init+0xf30>)
   1790c:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_CHK);
   1790e:	4c55      	ldr	r4, [pc, #340]	; (17a64 <lv_theme_material_init+0xf28>)
   17910:	6820      	ldr	r0, [r4, #0]
   17912:	89a2      	ldrh	r2, [r4, #12]
   17914:	f240 1129 	movw	r1, #297	; 0x129
   17918:	3078      	adds	r0, #120	; 0x78
   1791a:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_CHECKED | LV_STATE_PRESSED, COLOR_BG_PR_CHK);
   1791c:	6826      	ldr	r6, [r4, #0]
   1791e:	3678      	adds	r6, #120	; 0x78
   17920:	2133      	movs	r1, #51	; 0x33
   17922:	89a0      	ldrh	r0, [r4, #12]
   17924:	4b55      	ldr	r3, [pc, #340]	; (17a7c <lv_theme_material_init+0xf40>)
   17926:	4798      	blx	r3
   17928:	4602      	mov	r2, r0
   1792a:	f241 1129 	movw	r1, #4393	; 0x1129
   1792e:	4630      	mov	r0, r6
   17930:	47a8      	blx	r5
    lv_style_set_text_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   17932:	6820      	ldr	r0, [r4, #0]
   17934:	3078      	adds	r0, #120	; 0x78
   17936:	6a23      	ldr	r3, [r4, #32]
   17938:	f013 0f02 	tst.w	r3, #2
   1793c:	f041 80af 	bne.w	18a9e <lv_theme_material_init+0x1f62>
   17940:	231f      	movs	r3, #31
   17942:	213f      	movs	r1, #63	; 0x3f
   17944:	461c      	mov	r4, r3
   17946:	f04f 0200 	mov.w	r2, #0
   1794a:	f364 0204 	bfi	r2, r4, #0, #5
   1794e:	f361 124a 	bfi	r2, r1, #5, #6
   17952:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   17956:	f248 0189 	movw	r1, #32905	; 0x8089
   1795a:	4d44      	ldr	r5, [pc, #272]	; (17a6c <lv_theme_material_init+0xf30>)
   1795c:	47a8      	blx	r5
    lv_style_set_text_color(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
   1795e:	4c41      	ldr	r4, [pc, #260]	; (17a64 <lv_theme_material_init+0xf28>)
   17960:	6820      	ldr	r0, [r4, #0]
   17962:	f04f 32ff 	mov.w	r2, #4294967295
   17966:	f248 1189 	movw	r1, #33161	; 0x8189
   1796a:	3078      	adds	r0, #120	; 0x78
   1796c:	47a8      	blx	r5
    lv_style_set_text_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
   1796e:	6820      	ldr	r0, [r4, #0]
   17970:	6a23      	ldr	r3, [r4, #32]
   17972:	f013 0302 	ands.w	r3, r3, #2
   17976:	bf14      	ite	ne
   17978:	212a      	movne	r1, #42	; 0x2a
   1797a:	2126      	moveq	r1, #38	; 0x26
   1797c:	2b00      	cmp	r3, #0
   1797e:	bf14      	ite	ne
   17980:	2315      	movne	r3, #21
   17982:	2313      	moveq	r3, #19
   17984:	f04f 0200 	mov.w	r2, #0
   17988:	f363 0204 	bfi	r2, r3, #0, #5
   1798c:	f361 124a 	bfi	r2, r1, #5, #6
   17990:	f363 22cf 	bfi	r2, r3, #11, #5
   17994:	f24a 0189 	movw	r1, #41097	; 0xa089
   17998:	3078      	adds	r0, #120	; 0x78
   1799a:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   1799c:	6820      	ldr	r0, [r4, #0]
   1799e:	3078      	adds	r0, #120	; 0x78
   179a0:	6a23      	ldr	r3, [r4, #32]
   179a2:	f013 0f02 	tst.w	r3, #2
   179a6:	f041 807f 	bne.w	18aa8 <lv_theme_material_init+0x1f6c>
   179aa:	231f      	movs	r3, #31
   179ac:	213f      	movs	r1, #63	; 0x3f
   179ae:	461c      	mov	r4, r3
   179b0:	f04f 0200 	mov.w	r2, #0
   179b4:	f364 0204 	bfi	r2, r4, #0, #5
   179b8:	f361 124a 	bfi	r2, r1, #5, #6
   179bc:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   179c0:	f248 01a9 	movw	r1, #32937	; 0x80a9
   179c4:	4d29      	ldr	r5, [pc, #164]	; (17a6c <lv_theme_material_init+0xf30>)
   179c6:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
   179c8:	4c26      	ldr	r4, [pc, #152]	; (17a64 <lv_theme_material_init+0xf28>)
   179ca:	6820      	ldr	r0, [r4, #0]
   179cc:	f04f 32ff 	mov.w	r2, #4294967295
   179d0:	f248 11a9 	movw	r1, #33193	; 0x81a9
   179d4:	3078      	adds	r0, #120	; 0x78
   179d6:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
   179d8:	6820      	ldr	r0, [r4, #0]
   179da:	6a23      	ldr	r3, [r4, #32]
   179dc:	f013 0302 	ands.w	r3, r3, #2
   179e0:	bf14      	ite	ne
   179e2:	212a      	movne	r1, #42	; 0x2a
   179e4:	2126      	moveq	r1, #38	; 0x26
   179e6:	2b00      	cmp	r3, #0
   179e8:	bf14      	ite	ne
   179ea:	2315      	movne	r3, #21
   179ec:	2313      	moveq	r3, #19
   179ee:	f04f 0200 	mov.w	r2, #0
   179f2:	f363 0204 	bfi	r2, r3, #0, #5
   179f6:	f361 124a 	bfi	r2, r1, #5, #6
   179fa:	f363 22cf 	bfi	r2, r3, #11, #5
   179fe:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
   17a02:	3078      	adds	r0, #120	; 0x78
   17a04:	47a8      	blx	r5
    lv_style_set_border_side(&styles->list_btn, LV_STATE_DEFAULT, LV_BORDER_SIDE_BOTTOM);
   17a06:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
   17a08:	2201      	movs	r2, #1
   17a0a:	2131      	movs	r1, #49	; 0x31
   17a0c:	3078      	adds	r0, #120	; 0x78
   17a0e:	4b14      	ldr	r3, [pc, #80]	; (17a60 <lv_theme_material_init+0xf24>)
   17a10:	4798      	blx	r3
    lv_style_set_border_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_BORDER);
   17a12:	6820      	ldr	r0, [r4, #0]
   17a14:	6a23      	ldr	r3, [r4, #32]
   17a16:	f013 0302 	ands.w	r3, r3, #2
   17a1a:	bf14      	ite	ne
   17a1c:	211a      	movne	r1, #26
   17a1e:	2110      	moveq	r1, #16
   17a20:	2b00      	cmp	r3, #0
   17a22:	bf15      	itete	ne
   17a24:	2437      	movne	r4, #55	; 0x37
   17a26:	2422      	moveq	r4, #34	; 0x22
   17a28:	231c      	movne	r3, #28
   17a2a:	2312      	moveq	r3, #18
   17a2c:	f04f 0200 	mov.w	r2, #0
   17a30:	f363 0204 	bfi	r2, r3, #0, #5
   17a34:	f364 124a 	bfi	r2, r4, #5, #6
   17a38:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   17a3c:	2139      	movs	r1, #57	; 0x39
   17a3e:	3078      	adds	r0, #120	; 0x78
   17a40:	47a8      	blx	r5
    lv_style_set_border_color(&styles->list_btn, LV_STATE_FOCUSED, theme.color_primary);
   17a42:	4c08      	ldr	r4, [pc, #32]	; (17a64 <lv_theme_material_init+0xf28>)
   17a44:	6820      	ldr	r0, [r4, #0]
   17a46:	89a2      	ldrh	r2, [r4, #12]
   17a48:	f240 2139 	movw	r1, #569	; 0x239
   17a4c:	3078      	adds	r0, #120	; 0x78
   17a4e:	47a8      	blx	r5
    lv_style_set_border_width(&styles->list_btn, LV_STATE_DEFAULT, 1);
   17a50:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   17a52:	2201      	movs	r2, #1
   17a54:	2130      	movs	r1, #48	; 0x30
   17a56:	3078      	adds	r0, #120	; 0x78
   17a58:	4b01      	ldr	r3, [pc, #4]	; (17a60 <lv_theme_material_init+0xf24>)
   17a5a:	4798      	blx	r3
   17a5c:	e010      	b.n	17a80 <lv_theme_material_init+0xf44>
   17a5e:	bf00      	nop
   17a60:	000068d5 	.word	0x000068d5
   17a64:	2000c5d4 	.word	0x2000c5d4
   17a68:	00014a55 	.word	0x00014a55
   17a6c:	00006a19 	.word	0x00006a19
   17a70:	00006b5d 	.word	0x00006b5d
   17a74:	00029578 	.word	0x00029578
   17a78:	00010f31 	.word	0x00010f31
   17a7c:	00011bf7 	.word	0x00011bf7
    lv_style_set_pad_left(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   17a80:	6824      	ldr	r4, [r4, #0]
   17a82:	3478      	adds	r4, #120	; 0x78
   17a84:	2000      	movs	r0, #0
   17a86:	4bba      	ldr	r3, [pc, #744]	; (17d70 <lv_theme_material_init+0x1234>)
   17a88:	4798      	blx	r3
   17a8a:	2801      	cmp	r0, #1
   17a8c:	f241 8011 	bls.w	18ab2 <lv_theme_material_init+0x1f76>
   17a90:	2000      	movs	r0, #0
   17a92:	4bb8      	ldr	r3, [pc, #736]	; (17d74 <lv_theme_material_init+0x1238>)
   17a94:	4798      	blx	r3
   17a96:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   17a9a:	0040      	lsls	r0, r0, #1
   17a9c:	3050      	adds	r0, #80	; 0x50
   17a9e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17aa2:	f281 8021 	bge.w	18ae8 <lv_theme_material_init+0x1fac>
   17aa6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   17aa8:	2112      	movs	r1, #18
   17aaa:	4620      	mov	r0, r4
   17aac:	4bb2      	ldr	r3, [pc, #712]	; (17d78 <lv_theme_material_init+0x123c>)
   17aae:	4798      	blx	r3
    lv_style_set_pad_right(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   17ab0:	4bb2      	ldr	r3, [pc, #712]	; (17d7c <lv_theme_material_init+0x1240>)
   17ab2:	681c      	ldr	r4, [r3, #0]
   17ab4:	3478      	adds	r4, #120	; 0x78
   17ab6:	2000      	movs	r0, #0
   17ab8:	4bad      	ldr	r3, [pc, #692]	; (17d70 <lv_theme_material_init+0x1234>)
   17aba:	4798      	blx	r3
   17abc:	2801      	cmp	r0, #1
   17abe:	f241 8023 	bls.w	18b08 <lv_theme_material_init+0x1fcc>
   17ac2:	2000      	movs	r0, #0
   17ac4:	4bab      	ldr	r3, [pc, #684]	; (17d74 <lv_theme_material_init+0x1238>)
   17ac6:	4798      	blx	r3
   17ac8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   17acc:	0040      	lsls	r0, r0, #1
   17ace:	3050      	adds	r0, #80	; 0x50
   17ad0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17ad4:	f281 8033 	bge.w	18b3e <lv_theme_material_init+0x2002>
   17ad8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   17ada:	2113      	movs	r1, #19
   17adc:	4620      	mov	r0, r4
   17ade:	4ba6      	ldr	r3, [pc, #664]	; (17d78 <lv_theme_material_init+0x123c>)
   17ae0:	4798      	blx	r3
    lv_style_set_pad_top(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   17ae2:	4ba6      	ldr	r3, [pc, #664]	; (17d7c <lv_theme_material_init+0x1240>)
   17ae4:	681c      	ldr	r4, [r3, #0]
   17ae6:	3478      	adds	r4, #120	; 0x78
   17ae8:	2000      	movs	r0, #0
   17aea:	4ba1      	ldr	r3, [pc, #644]	; (17d70 <lv_theme_material_init+0x1234>)
   17aec:	4798      	blx	r3
   17aee:	2801      	cmp	r0, #1
   17af0:	f241 8035 	bls.w	18b5e <lv_theme_material_init+0x2022>
   17af4:	2000      	movs	r0, #0
   17af6:	4b9f      	ldr	r3, [pc, #636]	; (17d74 <lv_theme_material_init+0x1238>)
   17af8:	4798      	blx	r3
   17afa:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   17afe:	0040      	lsls	r0, r0, #1
   17b00:	3050      	adds	r0, #80	; 0x50
   17b02:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17b06:	f281 8045 	bge.w	18b94 <lv_theme_material_init+0x2058>
   17b0a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   17b0c:	2110      	movs	r1, #16
   17b0e:	4620      	mov	r0, r4
   17b10:	4b99      	ldr	r3, [pc, #612]	; (17d78 <lv_theme_material_init+0x123c>)
   17b12:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   17b14:	4b99      	ldr	r3, [pc, #612]	; (17d7c <lv_theme_material_init+0x1240>)
   17b16:	681c      	ldr	r4, [r3, #0]
   17b18:	3478      	adds	r4, #120	; 0x78
   17b1a:	2000      	movs	r0, #0
   17b1c:	4b94      	ldr	r3, [pc, #592]	; (17d70 <lv_theme_material_init+0x1234>)
   17b1e:	4798      	blx	r3
   17b20:	2801      	cmp	r0, #1
   17b22:	f241 8047 	bls.w	18bb4 <lv_theme_material_init+0x2078>
   17b26:	2000      	movs	r0, #0
   17b28:	4b92      	ldr	r3, [pc, #584]	; (17d74 <lv_theme_material_init+0x1238>)
   17b2a:	4798      	blx	r3
   17b2c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   17b30:	0040      	lsls	r0, r0, #1
   17b32:	3050      	adds	r0, #80	; 0x50
   17b34:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17b38:	f281 8057 	bge.w	18bea <lv_theme_material_init+0x20ae>
   17b3c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   17b3e:	2111      	movs	r1, #17
   17b40:	4620      	mov	r0, r4
   17b42:	4b8d      	ldr	r3, [pc, #564]	; (17d78 <lv_theme_material_init+0x123c>)
   17b44:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   17b46:	4b8d      	ldr	r3, [pc, #564]	; (17d7c <lv_theme_material_init+0x1240>)
   17b48:	681c      	ldr	r4, [r3, #0]
   17b4a:	3478      	adds	r4, #120	; 0x78
   17b4c:	2000      	movs	r0, #0
   17b4e:	4b88      	ldr	r3, [pc, #544]	; (17d70 <lv_theme_material_init+0x1234>)
   17b50:	4798      	blx	r3
   17b52:	2801      	cmp	r0, #1
   17b54:	f241 8059 	bls.w	18c0a <lv_theme_material_init+0x20ce>
   17b58:	2000      	movs	r0, #0
   17b5a:	4b86      	ldr	r3, [pc, #536]	; (17d74 <lv_theme_material_init+0x1238>)
   17b5c:	4798      	blx	r3
   17b5e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   17b62:	0040      	lsls	r0, r0, #1
   17b64:	3050      	adds	r0, #80	; 0x50
   17b66:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17b6a:	f281 8069 	bge.w	18c40 <lv_theme_material_init+0x2104>
   17b6e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   17b70:	2114      	movs	r1, #20
   17b72:	4620      	mov	r0, r4
   17b74:	4b80      	ldr	r3, [pc, #512]	; (17d78 <lv_theme_material_init+0x123c>)
   17b76:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DEFAULT, - PAD_DEF);
   17b78:	4b80      	ldr	r3, [pc, #512]	; (17d7c <lv_theme_material_init+0x1240>)
   17b7a:	681c      	ldr	r4, [r3, #0]
   17b7c:	3478      	adds	r4, #120	; 0x78
   17b7e:	2000      	movs	r0, #0
   17b80:	4b7b      	ldr	r3, [pc, #492]	; (17d70 <lv_theme_material_init+0x1234>)
   17b82:	4798      	blx	r3
   17b84:	2801      	cmp	r0, #1
   17b86:	f241 806b 	bls.w	18c60 <lv_theme_material_init+0x2124>
   17b8a:	2000      	movs	r0, #0
   17b8c:	4b79      	ldr	r3, [pc, #484]	; (17d74 <lv_theme_material_init+0x1238>)
   17b8e:	4798      	blx	r3
   17b90:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   17b94:	0040      	lsls	r0, r0, #1
   17b96:	3050      	adds	r0, #80	; 0x50
   17b98:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17b9c:	f281 807c 	bge.w	18c98 <lv_theme_material_init+0x215c>
   17ba0:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   17ba4:	2104      	movs	r1, #4
   17ba6:	4620      	mov	r0, r4
   17ba8:	4d73      	ldr	r5, [pc, #460]	; (17d78 <lv_theme_material_init+0x123c>)
   17baa:	47a8      	blx	r5
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_PRESSED, 0);
   17bac:	4c73      	ldr	r4, [pc, #460]	; (17d7c <lv_theme_material_init+0x1240>)
   17bae:	6820      	ldr	r0, [r4, #0]
   17bb0:	2200      	movs	r2, #0
   17bb2:	f241 0104 	movw	r1, #4100	; 0x1004
   17bb6:	3078      	adds	r0, #120	; 0x78
   17bb8:	47a8      	blx	r5
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_CHECKED, 0);
   17bba:	6820      	ldr	r0, [r4, #0]
   17bbc:	2200      	movs	r2, #0
   17bbe:	f44f 7182 	mov.w	r1, #260	; 0x104
   17bc2:	3078      	adds	r0, #120	; 0x78
   17bc4:	47a8      	blx	r5
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DISABLED, 0);
   17bc6:	6820      	ldr	r0, [r4, #0]
   17bc8:	2200      	movs	r2, #0
   17bca:	f242 0104 	movw	r1, #8196	; 0x2004
   17bce:	3078      	adds	r0, #120	; 0x78
   17bd0:	47a8      	blx	r5
    lv_style_set_transition_time(&styles->list_btn, LV_STATE_DEFAULT, TRANSITION_TIME);
   17bd2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
   17bd4:	2296      	movs	r2, #150	; 0x96
   17bd6:	21b0      	movs	r1, #176	; 0xb0
   17bd8:	3078      	adds	r0, #120	; 0x78
   17bda:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->list_btn, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
   17bdc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
   17bde:	2229      	movs	r2, #41	; 0x29
   17be0:	21b7      	movs	r1, #183	; 0xb7
   17be2:	3078      	adds	r0, #120	; 0x78
   17be4:	47a8      	blx	r5
    lv_style_set_transition_prop_5(&styles->list_btn, LV_STATE_DEFAULT, LV_STYLE_TRANSFORM_WIDTH);
   17be6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
   17be8:	2204      	movs	r2, #4
   17bea:	21b6      	movs	r1, #182	; 0xb6
   17bec:	3078      	adds	r0, #120	; 0x78
   17bee:	47a8      	blx	r5
    style_init_reset(&styles->ddlist_page);
   17bf0:	6820      	ldr	r0, [r4, #0]
   17bf2:	3054      	adds	r0, #84	; 0x54
   17bf4:	4b62      	ldr	r3, [pc, #392]	; (17d80 <lv_theme_material_init+0x1244>)
   17bf6:	4798      	blx	r3
    lv_style_set_text_line_space(&styles->ddlist_page, LV_STATE_DEFAULT, LV_DPX(20));
   17bf8:	6824      	ldr	r4, [r4, #0]
   17bfa:	3454      	adds	r4, #84	; 0x54
   17bfc:	2000      	movs	r0, #0
   17bfe:	4b5d      	ldr	r3, [pc, #372]	; (17d74 <lv_theme_material_init+0x1238>)
   17c00:	4798      	blx	r3
   17c02:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   17c06:	0080      	lsls	r0, r0, #2
   17c08:	3050      	adds	r0, #80	; 0x50
   17c0a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17c0e:	f281 8053 	bge.w	18cb8 <lv_theme_material_init+0x217c>
   17c12:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   17c14:	f248 0181 	movw	r1, #32897	; 0x8081
   17c18:	4620      	mov	r0, r4
   17c1a:	4d57      	ldr	r5, [pc, #348]	; (17d78 <lv_theme_material_init+0x123c>)
   17c1c:	47a8      	blx	r5
    lv_style_set_clip_corner(&styles->ddlist_page, LV_STATE_DEFAULT, true);
   17c1e:	4c57      	ldr	r4, [pc, #348]	; (17d7c <lv_theme_material_init+0x1240>)
   17c20:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
   17c22:	2201      	movs	r2, #1
   17c24:	2102      	movs	r1, #2
   17c26:	3054      	adds	r0, #84	; 0x54
   17c28:	47a8      	blx	r5
    style_init_reset(&styles->ddlist_sel);
   17c2a:	6820      	ldr	r0, [r4, #0]
   17c2c:	3058      	adds	r0, #88	; 0x58
   17c2e:	4b54      	ldr	r3, [pc, #336]	; (17d80 <lv_theme_material_init+0x1244>)
   17c30:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->ddlist_sel, LV_STATE_DEFAULT, LV_OPA_COVER);
   17c32:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   17c34:	22ff      	movs	r2, #255	; 0xff
   17c36:	212c      	movs	r1, #44	; 0x2c
   17c38:	3058      	adds	r0, #88	; 0x58
   17c3a:	4b52      	ldr	r3, [pc, #328]	; (17d84 <lv_theme_material_init+0x1248>)
   17c3c:	4798      	blx	r3
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_DEFAULT, theme.color_primary);
   17c3e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   17c40:	89a2      	ldrh	r2, [r4, #12]
   17c42:	2129      	movs	r1, #41	; 0x29
   17c44:	3058      	adds	r0, #88	; 0x58
   17c46:	4d50      	ldr	r5, [pc, #320]	; (17d88 <lv_theme_material_init+0x124c>)
   17c48:	47a8      	blx	r5
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex3(0xfff) : lv_color_hex3(0xfff));
   17c4a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   17c4c:	f04f 32ff 	mov.w	r2, #4294967295
   17c50:	f248 0189 	movw	r1, #32905	; 0x8089
   17c54:	3058      	adds	r0, #88	; 0x58
   17c56:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_PR);
   17c58:	6820      	ldr	r0, [r4, #0]
   17c5a:	3058      	adds	r0, #88	; 0x58
   17c5c:	6a23      	ldr	r3, [r4, #32]
   17c5e:	f013 0f02 	tst.w	r3, #2
   17c62:	f041 8039 	bne.w	18cd8 <lv_theme_material_init+0x219c>
   17c66:	2309      	movs	r3, #9
   17c68:	2113      	movs	r1, #19
   17c6a:	240a      	movs	r4, #10
   17c6c:	f04f 0200 	mov.w	r2, #0
   17c70:	f364 0204 	bfi	r2, r4, #0, #5
   17c74:	f361 124a 	bfi	r2, r1, #5, #6
   17c78:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   17c7c:	f241 0129 	movw	r1, #4137	; 0x1029
   17c80:	4b41      	ldr	r3, [pc, #260]	; (17d88 <lv_theme_material_init+0x124c>)
   17c82:	4798      	blx	r3
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
   17c84:	4b3d      	ldr	r3, [pc, #244]	; (17d7c <lv_theme_material_init+0x1240>)
   17c86:	6818      	ldr	r0, [r3, #0]
   17c88:	3058      	adds	r0, #88	; 0x58
   17c8a:	6a1b      	ldr	r3, [r3, #32]
   17c8c:	f013 0f02 	tst.w	r3, #2
   17c90:	f041 8027 	bne.w	18ce2 <lv_theme_material_init+0x21a6>
   17c94:	231f      	movs	r3, #31
   17c96:	213f      	movs	r1, #63	; 0x3f
   17c98:	461c      	mov	r4, r3
   17c9a:	f04f 0200 	mov.w	r2, #0
   17c9e:	f364 0204 	bfi	r2, r4, #0, #5
   17ca2:	f361 124a 	bfi	r2, r1, #5, #6
   17ca6:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   17caa:	f249 0189 	movw	r1, #37001	; 0x9089
   17cae:	4b36      	ldr	r3, [pc, #216]	; (17d88 <lv_theme_material_init+0x124c>)
   17cb0:	4798      	blx	r3
    style_init_reset(&styles->roller_bg);
   17cb2:	4c32      	ldr	r4, [pc, #200]	; (17d7c <lv_theme_material_init+0x1240>)
   17cb4:	6820      	ldr	r0, [r4, #0]
   17cb6:	3088      	adds	r0, #136	; 0x88
   17cb8:	4b31      	ldr	r3, [pc, #196]	; (17d80 <lv_theme_material_init+0x1244>)
   17cba:	4798      	blx	r3
    lv_style_set_text_line_space(&styles->roller_bg, LV_STATE_DEFAULT, LV_DPX(25));
   17cbc:	6824      	ldr	r4, [r4, #0]
   17cbe:	3488      	adds	r4, #136	; 0x88
   17cc0:	2000      	movs	r0, #0
   17cc2:	4b2c      	ldr	r3, [pc, #176]	; (17d74 <lv_theme_material_init+0x1238>)
   17cc4:	4798      	blx	r3
   17cc6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   17cca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   17cce:	3050      	adds	r0, #80	; 0x50
   17cd0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17cd4:	f281 800a 	bge.w	18cec <lv_theme_material_init+0x21b0>
   17cd8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   17cda:	f248 0181 	movw	r1, #32897	; 0x8081
   17cde:	4620      	mov	r0, r4
   17ce0:	4b25      	ldr	r3, [pc, #148]	; (17d78 <lv_theme_material_init+0x123c>)
   17ce2:	4798      	blx	r3
    style_init_reset(&styles->roller_sel);
   17ce4:	4c25      	ldr	r4, [pc, #148]	; (17d7c <lv_theme_material_init+0x1240>)
   17ce6:	6820      	ldr	r0, [r4, #0]
   17ce8:	308c      	adds	r0, #140	; 0x8c
   17cea:	4e25      	ldr	r6, [pc, #148]	; (17d80 <lv_theme_material_init+0x1244>)
   17cec:	47b0      	blx	r6
    lv_style_set_bg_opa(&styles->roller_sel, LV_STATE_DEFAULT, LV_OPA_COVER);
   17cee:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   17cf0:	22ff      	movs	r2, #255	; 0xff
   17cf2:	212c      	movs	r1, #44	; 0x2c
   17cf4:	308c      	adds	r0, #140	; 0x8c
   17cf6:	4d23      	ldr	r5, [pc, #140]	; (17d84 <lv_theme_material_init+0x1248>)
   17cf8:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->roller_sel, LV_STATE_DEFAULT, theme.color_primary);
   17cfa:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   17cfc:	89a2      	ldrh	r2, [r4, #12]
   17cfe:	2129      	movs	r1, #41	; 0x29
   17d00:	308c      	adds	r0, #140	; 0x8c
   17d02:	4f21      	ldr	r7, [pc, #132]	; (17d88 <lv_theme_material_init+0x124c>)
   17d04:	47b8      	blx	r7
    lv_style_set_text_color(&styles->roller_sel, LV_STATE_DEFAULT, LV_COLOR_WHITE);
   17d06:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   17d08:	4b20      	ldr	r3, [pc, #128]	; (17d8c <lv_theme_material_init+0x1250>)
   17d0a:	881a      	ldrh	r2, [r3, #0]
   17d0c:	f248 0189 	movw	r1, #32905	; 0x8089
   17d10:	308c      	adds	r0, #140	; 0x8c
   17d12:	47b8      	blx	r7
    style_init_reset(&styles->tabview_btns_bg);
   17d14:	6820      	ldr	r0, [r4, #0]
   17d16:	30a8      	adds	r0, #168	; 0xa8
   17d18:	47b0      	blx	r6
    lv_style_set_bg_opa(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
   17d1a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   17d1c:	22ff      	movs	r2, #255	; 0xff
   17d1e:	212c      	movs	r1, #44	; 0x2c
   17d20:	30a8      	adds	r0, #168	; 0xa8
   17d22:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_BG);
   17d24:	6820      	ldr	r0, [r4, #0]
   17d26:	30a8      	adds	r0, #168	; 0xa8
   17d28:	6a23      	ldr	r3, [r4, #32]
   17d2a:	f013 0f02 	tst.w	r3, #2
   17d2e:	f040 87ee 	bne.w	18d0e <lv_theme_material_init+0x21d2>
   17d32:	230b      	movs	r3, #11
   17d34:	2118      	movs	r1, #24
   17d36:	240e      	movs	r4, #14
   17d38:	f04f 0200 	mov.w	r2, #0
   17d3c:	f364 0204 	bfi	r2, r4, #0, #5
   17d40:	f361 124a 	bfi	r2, r1, #5, #6
   17d44:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   17d48:	2129      	movs	r1, #41	; 0x29
   17d4a:	4b0f      	ldr	r3, [pc, #60]	; (17d88 <lv_theme_material_init+0x124c>)
   17d4c:	4798      	blx	r3
    lv_style_set_border_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT,
   17d4e:	4b0b      	ldr	r3, [pc, #44]	; (17d7c <lv_theme_material_init+0x1240>)
   17d50:	6818      	ldr	r0, [r3, #0]
                              IS_LIGHT ? lv_color_hex(0xe4eaf0) : lv_color_hex(0x3b3e42));
   17d52:	6a1b      	ldr	r3, [r3, #32]
    lv_style_set_border_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT,
   17d54:	f013 0302 	ands.w	r3, r3, #2
   17d58:	bf14      	ite	ne
   17d5a:	211c      	movne	r1, #28
   17d5c:	2107      	moveq	r1, #7
   17d5e:	2b00      	cmp	r3, #0
   17d60:	bf15      	itete	ne
   17d62:	243a      	movne	r4, #58	; 0x3a
   17d64:	240f      	moveq	r4, #15
   17d66:	231e      	movne	r3, #30
   17d68:	2308      	moveq	r3, #8
   17d6a:	f04f 0200 	mov.w	r2, #0
   17d6e:	e00f      	b.n	17d90 <lv_theme_material_init+0x1254>
   17d70:	00010f4d 	.word	0x00010f4d
   17d74:	00010f31 	.word	0x00010f31
   17d78:	000068d5 	.word	0x000068d5
   17d7c:	2000c5d4 	.word	0x2000c5d4
   17d80:	00014a55 	.word	0x00014a55
   17d84:	00006b5d 	.word	0x00006b5d
   17d88:	00006a19 	.word	0x00006a19
   17d8c:	00029578 	.word	0x00029578
   17d90:	f363 0204 	bfi	r2, r3, #0, #5
   17d94:	f364 124a 	bfi	r2, r4, #5, #6
   17d98:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   17d9c:	2139      	movs	r1, #57	; 0x39
   17d9e:	30a8      	adds	r0, #168	; 0xa8
   17da0:	4bb6      	ldr	r3, [pc, #728]	; (1807c <lv_theme_material_init+0x1540>)
   17da2:	4798      	blx	r3
    lv_style_set_border_width(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(5));
   17da4:	4bb6      	ldr	r3, [pc, #728]	; (18080 <lv_theme_material_init+0x1544>)
   17da6:	681c      	ldr	r4, [r3, #0]
   17da8:	34a8      	adds	r4, #168	; 0xa8
   17daa:	2000      	movs	r0, #0
   17dac:	4bb5      	ldr	r3, [pc, #724]	; (18084 <lv_theme_material_init+0x1548>)
   17dae:	4798      	blx	r3
   17db0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   17db4:	3050      	adds	r0, #80	; 0x50
   17db6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17dba:	f280 87ad 	bge.w	18d18 <lv_theme_material_init+0x21dc>
   17dbe:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   17dc0:	2130      	movs	r1, #48	; 0x30
   17dc2:	4620      	mov	r0, r4
   17dc4:	4db0      	ldr	r5, [pc, #704]	; (18088 <lv_theme_material_init+0x154c>)
   17dc6:	47a8      	blx	r5
    lv_style_set_border_side(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_BORDER_SIDE_BOTTOM);
   17dc8:	4cad      	ldr	r4, [pc, #692]	; (18080 <lv_theme_material_init+0x1544>)
   17dca:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
   17dcc:	2201      	movs	r2, #1
   17dce:	2131      	movs	r1, #49	; 0x31
   17dd0:	30a8      	adds	r0, #168	; 0xa8
   17dd2:	47a8      	blx	r5
    lv_style_set_text_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
   17dd4:	6820      	ldr	r0, [r4, #0]
   17dd6:	6a23      	ldr	r3, [r4, #32]
   17dd8:	f013 0302 	ands.w	r3, r3, #2
   17ddc:	bf14      	ite	ne
   17dde:	2107      	movne	r1, #7
   17de0:	211c      	moveq	r1, #28
   17de2:	2b00      	cmp	r3, #0
   17de4:	bf15      	itete	ne
   17de6:	240f      	movne	r4, #15
   17de8:	243a      	moveq	r4, #58	; 0x3a
   17dea:	2308      	movne	r3, #8
   17dec:	231d      	moveq	r3, #29
   17dee:	f04f 0200 	mov.w	r2, #0
   17df2:	f363 0204 	bfi	r2, r3, #0, #5
   17df6:	f364 124a 	bfi	r2, r4, #5, #6
   17dfa:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   17dfe:	f248 0189 	movw	r1, #32905	; 0x8089
   17e02:	30a8      	adds	r0, #168	; 0xa8
   17e04:	4d9d      	ldr	r5, [pc, #628]	; (1807c <lv_theme_material_init+0x1540>)
   17e06:	47a8      	blx	r5
    lv_style_set_text_font(&styles->tabview_btns_bg, LV_STATE_DEFAULT, theme.font_normal);
   17e08:	4c9d      	ldr	r4, [pc, #628]	; (18080 <lv_theme_material_init+0x1544>)
   17e0a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   17e0c:	6962      	ldr	r2, [r4, #20]
   17e0e:	f248 018e 	movw	r1, #32910	; 0x808e
   17e12:	30a8      	adds	r0, #168	; 0xa8
   17e14:	4b9d      	ldr	r3, [pc, #628]	; (1808c <lv_theme_material_init+0x1550>)
   17e16:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->tabview_btns_bg, LV_STATE_DEFAULT, lv_color_hex(0x979a9f));
   17e18:	6820      	ldr	r0, [r4, #0]
   17e1a:	f04f 0200 	mov.w	r2, #0
   17e1e:	2313      	movs	r3, #19
   17e20:	f363 0204 	bfi	r2, r3, #0, #5
   17e24:	2326      	movs	r3, #38	; 0x26
   17e26:	f363 124a 	bfi	r2, r3, #5, #6
   17e2a:	2312      	movs	r3, #18
   17e2c:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   17e30:	f248 01a9 	movw	r1, #32937	; 0x80a9
   17e34:	30a8      	adds	r0, #168	; 0xa8
   17e36:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
   17e38:	6824      	ldr	r4, [r4, #0]
   17e3a:	34a8      	adds	r4, #168	; 0xa8
   17e3c:	2000      	movs	r0, #0
   17e3e:	4b91      	ldr	r3, [pc, #580]	; (18084 <lv_theme_material_init+0x1548>)
   17e40:	4798      	blx	r3
   17e42:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   17e46:	3050      	adds	r0, #80	; 0x50
   17e48:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17e4c:	f280 8773 	bge.w	18d36 <lv_theme_material_init+0x21fa>
   17e50:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   17e52:	2110      	movs	r1, #16
   17e54:	4620      	mov	r0, r4
   17e56:	4b8c      	ldr	r3, [pc, #560]	; (18088 <lv_theme_material_init+0x154c>)
   17e58:	4798      	blx	r3
    lv_style_set_pad_left(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
   17e5a:	4b89      	ldr	r3, [pc, #548]	; (18080 <lv_theme_material_init+0x1544>)
   17e5c:	681c      	ldr	r4, [r3, #0]
   17e5e:	34a8      	adds	r4, #168	; 0xa8
   17e60:	2000      	movs	r0, #0
   17e62:	4b88      	ldr	r3, [pc, #544]	; (18084 <lv_theme_material_init+0x1548>)
   17e64:	4798      	blx	r3
   17e66:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   17e6a:	3050      	adds	r0, #80	; 0x50
   17e6c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17e70:	f280 8774 	bge.w	18d5c <lv_theme_material_init+0x2220>
   17e74:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   17e76:	2112      	movs	r1, #18
   17e78:	4620      	mov	r0, r4
   17e7a:	4b83      	ldr	r3, [pc, #524]	; (18088 <lv_theme_material_init+0x154c>)
   17e7c:	4798      	blx	r3
    lv_style_set_pad_right(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
   17e7e:	4b80      	ldr	r3, [pc, #512]	; (18080 <lv_theme_material_init+0x1544>)
   17e80:	681c      	ldr	r4, [r3, #0]
   17e82:	34a8      	adds	r4, #168	; 0xa8
   17e84:	2000      	movs	r0, #0
   17e86:	4b7f      	ldr	r3, [pc, #508]	; (18084 <lv_theme_material_init+0x1548>)
   17e88:	4798      	blx	r3
   17e8a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   17e8e:	3050      	adds	r0, #80	; 0x50
   17e90:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17e94:	f280 8771 	bge.w	18d7a <lv_theme_material_init+0x223e>
   17e98:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   17e9a:	2113      	movs	r1, #19
   17e9c:	4620      	mov	r0, r4
   17e9e:	4b7a      	ldr	r3, [pc, #488]	; (18088 <lv_theme_material_init+0x154c>)
   17ea0:	4798      	blx	r3
    style_init_reset(&styles->tabview_btns);
   17ea2:	4c77      	ldr	r4, [pc, #476]	; (18080 <lv_theme_material_init+0x1544>)
   17ea4:	6820      	ldr	r0, [r4, #0]
   17ea6:	30a4      	adds	r0, #164	; 0xa4
   17ea8:	4b79      	ldr	r3, [pc, #484]	; (18090 <lv_theme_material_init+0x1554>)
   17eaa:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->tabview_btns, LV_STATE_PRESSED, LV_OPA_50);
   17eac:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   17eae:	227f      	movs	r2, #127	; 0x7f
   17eb0:	f241 012c 	movw	r1, #4140	; 0x102c
   17eb4:	30a4      	adds	r0, #164	; 0xa4
   17eb6:	4b77      	ldr	r3, [pc, #476]	; (18094 <lv_theme_material_init+0x1558>)
   17eb8:	4798      	blx	r3
    lv_style_set_bg_color(&styles->tabview_btns, LV_STATE_PRESSED, lv_color_hex3(0x888));
   17eba:	6820      	ldr	r0, [r4, #0]
   17ebc:	2311      	movs	r3, #17
   17ebe:	f04f 0200 	mov.w	r2, #0
   17ec2:	f363 0204 	bfi	r2, r3, #0, #5
   17ec6:	2122      	movs	r1, #34	; 0x22
   17ec8:	f361 124a 	bfi	r2, r1, #5, #6
   17ecc:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   17ed0:	f241 0129 	movw	r1, #4137	; 0x1029
   17ed4:	30a4      	adds	r0, #164	; 0xa4
   17ed6:	4b69      	ldr	r3, [pc, #420]	; (1807c <lv_theme_material_init+0x1540>)
   17ed8:	4798      	blx	r3
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_CHECKED, COLOR_SCR_TEXT);
   17eda:	6820      	ldr	r0, [r4, #0]
   17edc:	6a23      	ldr	r3, [r4, #32]
   17ede:	f013 0302 	ands.w	r3, r3, #2
   17ee2:	bf14      	ite	ne
   17ee4:	2107      	movne	r1, #7
   17ee6:	211c      	moveq	r1, #28
   17ee8:	2b00      	cmp	r3, #0
   17eea:	bf15      	itete	ne
   17eec:	240f      	movne	r4, #15
   17eee:	243a      	moveq	r4, #58	; 0x3a
   17ef0:	2308      	movne	r3, #8
   17ef2:	231d      	moveq	r3, #29
   17ef4:	f04f 0200 	mov.w	r2, #0
   17ef8:	f363 0204 	bfi	r2, r3, #0, #5
   17efc:	f364 124a 	bfi	r2, r4, #5, #6
   17f00:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   17f04:	f248 1189 	movw	r1, #33161	; 0x8189
   17f08:	30a4      	adds	r0, #164	; 0xa4
   17f0a:	4b5c      	ldr	r3, [pc, #368]	; (1807c <lv_theme_material_init+0x1540>)
   17f0c:	4798      	blx	r3
    lv_style_set_pad_top(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
   17f0e:	4b5c      	ldr	r3, [pc, #368]	; (18080 <lv_theme_material_init+0x1544>)
   17f10:	681c      	ldr	r4, [r3, #0]
   17f12:	34a4      	adds	r4, #164	; 0xa4
   17f14:	2000      	movs	r0, #0
   17f16:	4b5b      	ldr	r3, [pc, #364]	; (18084 <lv_theme_material_init+0x1548>)
   17f18:	4798      	blx	r3
   17f1a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   17f1e:	0080      	lsls	r0, r0, #2
   17f20:	3050      	adds	r0, #80	; 0x50
   17f22:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17f26:	f280 8737 	bge.w	18d98 <lv_theme_material_init+0x225c>
   17f2a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   17f2c:	2110      	movs	r1, #16
   17f2e:	4620      	mov	r0, r4
   17f30:	4b55      	ldr	r3, [pc, #340]	; (18088 <lv_theme_material_init+0x154c>)
   17f32:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
   17f34:	4b52      	ldr	r3, [pc, #328]	; (18080 <lv_theme_material_init+0x1544>)
   17f36:	681c      	ldr	r4, [r3, #0]
   17f38:	34a4      	adds	r4, #164	; 0xa4
   17f3a:	2000      	movs	r0, #0
   17f3c:	4b51      	ldr	r3, [pc, #324]	; (18084 <lv_theme_material_init+0x1548>)
   17f3e:	4798      	blx	r3
   17f40:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   17f44:	0080      	lsls	r0, r0, #2
   17f46:	3050      	adds	r0, #80	; 0x50
   17f48:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17f4c:	f280 8734 	bge.w	18db8 <lv_theme_material_init+0x227c>
   17f50:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   17f52:	2111      	movs	r1, #17
   17f54:	4620      	mov	r0, r4
   17f56:	4b4c      	ldr	r3, [pc, #304]	; (18088 <lv_theme_material_init+0x154c>)
   17f58:	4798      	blx	r3
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_FOCUSED, theme.color_primary);
   17f5a:	4c49      	ldr	r4, [pc, #292]	; (18080 <lv_theme_material_init+0x1544>)
   17f5c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   17f5e:	89a2      	ldrh	r2, [r4, #12]
   17f60:	f248 2189 	movw	r1, #33417	; 0x8289
   17f64:	30a4      	adds	r0, #164	; 0xa4
   17f66:	4d45      	ldr	r5, [pc, #276]	; (1807c <lv_theme_material_init+0x1540>)
   17f68:	47a8      	blx	r5
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_EDITED, theme.color_secondary);
   17f6a:	6820      	ldr	r0, [r4, #0]
   17f6c:	89e2      	ldrh	r2, [r4, #14]
   17f6e:	f248 4189 	movw	r1, #33929	; 0x8489
   17f72:	30a4      	adds	r0, #164	; 0xa4
   17f74:	47a8      	blx	r5
    style_init_reset(&styles->tabview_indic);
   17f76:	6820      	ldr	r0, [r4, #0]
   17f78:	30ac      	adds	r0, #172	; 0xac
   17f7a:	4b45      	ldr	r3, [pc, #276]	; (18090 <lv_theme_material_init+0x1554>)
   17f7c:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->tabview_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
   17f7e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   17f80:	22ff      	movs	r2, #255	; 0xff
   17f82:	212c      	movs	r1, #44	; 0x2c
   17f84:	30ac      	adds	r0, #172	; 0xac
   17f86:	4b43      	ldr	r3, [pc, #268]	; (18094 <lv_theme_material_init+0x1558>)
   17f88:	4798      	blx	r3
    lv_style_set_bg_color(&styles->tabview_indic, LV_STATE_DEFAULT, theme.color_primary);
   17f8a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   17f8c:	89a2      	ldrh	r2, [r4, #12]
   17f8e:	2129      	movs	r1, #41	; 0x29
   17f90:	30ac      	adds	r0, #172	; 0xac
   17f92:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->tabview_indic, LV_STATE_EDITED, theme.color_secondary);
   17f94:	6820      	ldr	r0, [r4, #0]
   17f96:	89e2      	ldrh	r2, [r4, #14]
   17f98:	f240 4129 	movw	r1, #1065	; 0x429
   17f9c:	30ac      	adds	r0, #172	; 0xac
   17f9e:	47a8      	blx	r5
    lv_style_set_size(&styles->tabview_indic, LV_STATE_DEFAULT, LV_DPX(5));
   17fa0:	6824      	ldr	r4, [r4, #0]
   17fa2:	34ac      	adds	r4, #172	; 0xac
   17fa4:	2000      	movs	r0, #0
   17fa6:	4b37      	ldr	r3, [pc, #220]	; (18084 <lv_theme_material_init+0x1548>)
   17fa8:	4798      	blx	r3
   17faa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   17fae:	3050      	adds	r0, #80	; 0x50
   17fb0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17fb4:	f280 8710 	bge.w	18dd8 <lv_theme_material_init+0x229c>
   17fb8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
   17fba:	2103      	movs	r1, #3
   17fbc:	4620      	mov	r0, r4
   17fbe:	4d32      	ldr	r5, [pc, #200]	; (18088 <lv_theme_material_init+0x154c>)
   17fc0:	47a8      	blx	r5
    lv_style_set_radius(&styles->tabview_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   17fc2:	4c2f      	ldr	r4, [pc, #188]	; (18080 <lv_theme_material_init+0x1544>)
   17fc4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   17fc6:	f647 72ff 	movw	r2, #32767	; 0x7fff
   17fca:	2101      	movs	r1, #1
   17fcc:	30ac      	adds	r0, #172	; 0xac
   17fce:	47a8      	blx	r5
    style_init_reset(&styles->tabview_page_scrl);
   17fd0:	6820      	ldr	r0, [r4, #0]
   17fd2:	30b0      	adds	r0, #176	; 0xb0
   17fd4:	4b2e      	ldr	r3, [pc, #184]	; (18090 <lv_theme_material_init+0x1554>)
   17fd6:	4798      	blx	r3
    lv_style_set_pad_top(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   17fd8:	6824      	ldr	r4, [r4, #0]
   17fda:	34b0      	adds	r4, #176	; 0xb0
   17fdc:	2000      	movs	r0, #0
   17fde:	4b2e      	ldr	r3, [pc, #184]	; (18098 <lv_theme_material_init+0x155c>)
   17fe0:	4798      	blx	r3
   17fe2:	2801      	cmp	r0, #1
   17fe4:	f240 8707 	bls.w	18df6 <lv_theme_material_init+0x22ba>
   17fe8:	2000      	movs	r0, #0
   17fea:	4b26      	ldr	r3, [pc, #152]	; (18084 <lv_theme_material_init+0x1548>)
   17fec:	4798      	blx	r3
   17fee:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   17ff2:	0040      	lsls	r0, r0, #1
   17ff4:	3050      	adds	r0, #80	; 0x50
   17ff6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17ffa:	f280 8717 	bge.w	18e2c <lv_theme_material_init+0x22f0>
   17ffe:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   18000:	2110      	movs	r1, #16
   18002:	4620      	mov	r0, r4
   18004:	4b20      	ldr	r3, [pc, #128]	; (18088 <lv_theme_material_init+0x154c>)
   18006:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   18008:	4b1d      	ldr	r3, [pc, #116]	; (18080 <lv_theme_material_init+0x1544>)
   1800a:	681c      	ldr	r4, [r3, #0]
   1800c:	34b0      	adds	r4, #176	; 0xb0
   1800e:	2000      	movs	r0, #0
   18010:	4b21      	ldr	r3, [pc, #132]	; (18098 <lv_theme_material_init+0x155c>)
   18012:	4798      	blx	r3
   18014:	2801      	cmp	r0, #1
   18016:	f240 8719 	bls.w	18e4c <lv_theme_material_init+0x2310>
   1801a:	2000      	movs	r0, #0
   1801c:	4b19      	ldr	r3, [pc, #100]	; (18084 <lv_theme_material_init+0x1548>)
   1801e:	4798      	blx	r3
   18020:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18024:	0040      	lsls	r0, r0, #1
   18026:	3050      	adds	r0, #80	; 0x50
   18028:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1802c:	f280 8729 	bge.w	18e82 <lv_theme_material_init+0x2346>
   18030:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   18032:	2111      	movs	r1, #17
   18034:	4620      	mov	r0, r4
   18036:	4b14      	ldr	r3, [pc, #80]	; (18088 <lv_theme_material_init+0x154c>)
   18038:	4798      	blx	r3
    lv_style_set_pad_left(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   1803a:	4b11      	ldr	r3, [pc, #68]	; (18080 <lv_theme_material_init+0x1544>)
   1803c:	681c      	ldr	r4, [r3, #0]
   1803e:	34b0      	adds	r4, #176	; 0xb0
   18040:	2000      	movs	r0, #0
   18042:	4b15      	ldr	r3, [pc, #84]	; (18098 <lv_theme_material_init+0x155c>)
   18044:	4798      	blx	r3
   18046:	2801      	cmp	r0, #1
   18048:	f240 872b 	bls.w	18ea2 <lv_theme_material_init+0x2366>
   1804c:	2000      	movs	r0, #0
   1804e:	4b0d      	ldr	r3, [pc, #52]	; (18084 <lv_theme_material_init+0x1548>)
   18050:	4798      	blx	r3
   18052:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18056:	0040      	lsls	r0, r0, #1
   18058:	3050      	adds	r0, #80	; 0x50
   1805a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1805e:	f280 873b 	bge.w	18ed8 <lv_theme_material_init+0x239c>
   18062:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   18064:	2112      	movs	r1, #18
   18066:	4620      	mov	r0, r4
   18068:	4b07      	ldr	r3, [pc, #28]	; (18088 <lv_theme_material_init+0x154c>)
   1806a:	4798      	blx	r3
    lv_style_set_pad_right(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   1806c:	4b04      	ldr	r3, [pc, #16]	; (18080 <lv_theme_material_init+0x1544>)
   1806e:	681c      	ldr	r4, [r3, #0]
   18070:	34b0      	adds	r4, #176	; 0xb0
   18072:	2000      	movs	r0, #0
   18074:	4b08      	ldr	r3, [pc, #32]	; (18098 <lv_theme_material_init+0x155c>)
   18076:	4798      	blx	r3
   18078:	2801      	cmp	r0, #1
   1807a:	e00f      	b.n	1809c <lv_theme_material_init+0x1560>
   1807c:	00006a19 	.word	0x00006a19
   18080:	2000c5d4 	.word	0x2000c5d4
   18084:	00010f31 	.word	0x00010f31
   18088:	000068d5 	.word	0x000068d5
   1808c:	00006c8d 	.word	0x00006c8d
   18090:	00014a55 	.word	0x00014a55
   18094:	00006b5d 	.word	0x00006b5d
   18098:	00010f4d 	.word	0x00010f4d
   1809c:	f240 872c 	bls.w	18ef8 <lv_theme_material_init+0x23bc>
   180a0:	2000      	movs	r0, #0
   180a2:	4bbd      	ldr	r3, [pc, #756]	; (18398 <lv_theme_material_init+0x185c>)
   180a4:	4798      	blx	r3
   180a6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   180aa:	0040      	lsls	r0, r0, #1
   180ac:	3050      	adds	r0, #80	; 0x50
   180ae:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   180b2:	f280 873c 	bge.w	18f2e <lv_theme_material_init+0x23f2>
   180b6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   180b8:	2113      	movs	r1, #19
   180ba:	4620      	mov	r0, r4
   180bc:	4bb7      	ldr	r3, [pc, #732]	; (1839c <lv_theme_material_init+0x1860>)
   180be:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   180c0:	4bb7      	ldr	r3, [pc, #732]	; (183a0 <lv_theme_material_init+0x1864>)
   180c2:	681c      	ldr	r4, [r3, #0]
   180c4:	34b0      	adds	r4, #176	; 0xb0
   180c6:	2000      	movs	r0, #0
   180c8:	4bb6      	ldr	r3, [pc, #728]	; (183a4 <lv_theme_material_init+0x1868>)
   180ca:	4798      	blx	r3
   180cc:	2801      	cmp	r0, #1
   180ce:	f240 873e 	bls.w	18f4e <lv_theme_material_init+0x2412>
   180d2:	2000      	movs	r0, #0
   180d4:	4bb0      	ldr	r3, [pc, #704]	; (18398 <lv_theme_material_init+0x185c>)
   180d6:	4798      	blx	r3
   180d8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   180dc:	0040      	lsls	r0, r0, #1
   180de:	3050      	adds	r0, #80	; 0x50
   180e0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   180e4:	f280 874e 	bge.w	18f84 <lv_theme_material_init+0x2448>
   180e8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   180ea:	2114      	movs	r1, #20
   180ec:	4620      	mov	r0, r4
   180ee:	4bab      	ldr	r3, [pc, #684]	; (1839c <lv_theme_material_init+0x1860>)
   180f0:	4798      	blx	r3
    style_init_reset(&styles->table_cell);
   180f2:	4cab      	ldr	r4, [pc, #684]	; (183a0 <lv_theme_material_init+0x1864>)
   180f4:	6820      	ldr	r0, [r4, #0]
   180f6:	30a0      	adds	r0, #160	; 0xa0
   180f8:	4bab      	ldr	r3, [pc, #684]	; (183a8 <lv_theme_material_init+0x186c>)
   180fa:	4798      	blx	r3
    lv_style_set_border_color(&styles->table_cell, LV_STATE_DEFAULT, COLOR_BG_BORDER);
   180fc:	6820      	ldr	r0, [r4, #0]
   180fe:	6a23      	ldr	r3, [r4, #32]
   18100:	f013 0302 	ands.w	r3, r3, #2
   18104:	bf14      	ite	ne
   18106:	211a      	movne	r1, #26
   18108:	2110      	moveq	r1, #16
   1810a:	2b00      	cmp	r3, #0
   1810c:	bf15      	itete	ne
   1810e:	2437      	movne	r4, #55	; 0x37
   18110:	2422      	moveq	r4, #34	; 0x22
   18112:	231c      	movne	r3, #28
   18114:	2312      	moveq	r3, #18
   18116:	f04f 0200 	mov.w	r2, #0
   1811a:	f363 0204 	bfi	r2, r3, #0, #5
   1811e:	f364 124a 	bfi	r2, r4, #5, #6
   18122:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   18126:	2139      	movs	r1, #57	; 0x39
   18128:	30a0      	adds	r0, #160	; 0xa0
   1812a:	4ba0      	ldr	r3, [pc, #640]	; (183ac <lv_theme_material_init+0x1870>)
   1812c:	4798      	blx	r3
    lv_style_set_border_width(&styles->table_cell, LV_STATE_DEFAULT, 1);
   1812e:	4c9c      	ldr	r4, [pc, #624]	; (183a0 <lv_theme_material_init+0x1864>)
   18130:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   18132:	2201      	movs	r2, #1
   18134:	2130      	movs	r1, #48	; 0x30
   18136:	30a0      	adds	r0, #160	; 0xa0
   18138:	4d98      	ldr	r5, [pc, #608]	; (1839c <lv_theme_material_init+0x1860>)
   1813a:	47a8      	blx	r5
    lv_style_set_border_side(&styles->table_cell, LV_STATE_DEFAULT, LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM);
   1813c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
   1813e:	2203      	movs	r2, #3
   18140:	2131      	movs	r1, #49	; 0x31
   18142:	30a0      	adds	r0, #160	; 0xa0
   18144:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
   18146:	6824      	ldr	r4, [r4, #0]
   18148:	34a0      	adds	r4, #160	; 0xa0
   1814a:	2000      	movs	r0, #0
   1814c:	4b95      	ldr	r3, [pc, #596]	; (183a4 <lv_theme_material_init+0x1868>)
   1814e:	4798      	blx	r3
   18150:	2801      	cmp	r0, #1
   18152:	f240 8727 	bls.w	18fa4 <lv_theme_material_init+0x2468>
   18156:	2000      	movs	r0, #0
   18158:	4b8f      	ldr	r3, [pc, #572]	; (18398 <lv_theme_material_init+0x185c>)
   1815a:	4798      	blx	r3
   1815c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18160:	0040      	lsls	r0, r0, #1
   18162:	3050      	adds	r0, #80	; 0x50
   18164:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   18168:	f280 8737 	bge.w	18fda <lv_theme_material_init+0x249e>
   1816c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   1816e:	2112      	movs	r1, #18
   18170:	4620      	mov	r0, r4
   18172:	4b8a      	ldr	r3, [pc, #552]	; (1839c <lv_theme_material_init+0x1860>)
   18174:	4798      	blx	r3
    lv_style_set_pad_right(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
   18176:	4b8a      	ldr	r3, [pc, #552]	; (183a0 <lv_theme_material_init+0x1864>)
   18178:	681c      	ldr	r4, [r3, #0]
   1817a:	34a0      	adds	r4, #160	; 0xa0
   1817c:	2000      	movs	r0, #0
   1817e:	4b89      	ldr	r3, [pc, #548]	; (183a4 <lv_theme_material_init+0x1868>)
   18180:	4798      	blx	r3
   18182:	2801      	cmp	r0, #1
   18184:	f240 8739 	bls.w	18ffa <lv_theme_material_init+0x24be>
   18188:	2000      	movs	r0, #0
   1818a:	4b83      	ldr	r3, [pc, #524]	; (18398 <lv_theme_material_init+0x185c>)
   1818c:	4798      	blx	r3
   1818e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18192:	0040      	lsls	r0, r0, #1
   18194:	3050      	adds	r0, #80	; 0x50
   18196:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1819a:	f280 8749 	bge.w	19030 <lv_theme_material_init+0x24f4>
   1819e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   181a0:	2113      	movs	r1, #19
   181a2:	4620      	mov	r0, r4
   181a4:	4b7d      	ldr	r3, [pc, #500]	; (1839c <lv_theme_material_init+0x1860>)
   181a6:	4798      	blx	r3
    lv_style_set_pad_top(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
   181a8:	4b7d      	ldr	r3, [pc, #500]	; (183a0 <lv_theme_material_init+0x1864>)
   181aa:	681c      	ldr	r4, [r3, #0]
   181ac:	34a0      	adds	r4, #160	; 0xa0
   181ae:	2000      	movs	r0, #0
   181b0:	4b7c      	ldr	r3, [pc, #496]	; (183a4 <lv_theme_material_init+0x1868>)
   181b2:	4798      	blx	r3
   181b4:	2801      	cmp	r0, #1
   181b6:	f240 874b 	bls.w	19050 <lv_theme_material_init+0x2514>
   181ba:	2000      	movs	r0, #0
   181bc:	4b76      	ldr	r3, [pc, #472]	; (18398 <lv_theme_material_init+0x185c>)
   181be:	4798      	blx	r3
   181c0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   181c4:	0040      	lsls	r0, r0, #1
   181c6:	3050      	adds	r0, #80	; 0x50
   181c8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   181cc:	f280 8760 	bge.w	19090 <lv_theme_material_init+0x2554>
   181d0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   181d2:	2110      	movs	r1, #16
   181d4:	4620      	mov	r0, r4
   181d6:	4b71      	ldr	r3, [pc, #452]	; (1839c <lv_theme_material_init+0x1860>)
   181d8:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
   181da:	4b71      	ldr	r3, [pc, #452]	; (183a0 <lv_theme_material_init+0x1864>)
   181dc:	681c      	ldr	r4, [r3, #0]
   181de:	34a0      	adds	r4, #160	; 0xa0
   181e0:	2000      	movs	r0, #0
   181e2:	4b70      	ldr	r3, [pc, #448]	; (183a4 <lv_theme_material_init+0x1868>)
   181e4:	4798      	blx	r3
   181e6:	2801      	cmp	r0, #1
   181e8:	f240 8762 	bls.w	190b0 <lv_theme_material_init+0x2574>
   181ec:	2000      	movs	r0, #0
   181ee:	4b6a      	ldr	r3, [pc, #424]	; (18398 <lv_theme_material_init+0x185c>)
   181f0:	4798      	blx	r3
   181f2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   181f6:	0040      	lsls	r0, r0, #1
   181f8:	3050      	adds	r0, #80	; 0x50
   181fa:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   181fe:	f280 8772 	bge.w	190e6 <lv_theme_material_init+0x25aa>
   18202:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   18204:	2111      	movs	r1, #17
   18206:	4620      	mov	r0, r4
   18208:	4b64      	ldr	r3, [pc, #400]	; (1839c <lv_theme_material_init+0x1860>)
   1820a:	4798      	blx	r3
    theme.apply_xcb = theme_apply;
   1820c:	4c64      	ldr	r4, [pc, #400]	; (183a0 <lv_theme_material_init+0x1864>)
   1820e:	4b68      	ldr	r3, [pc, #416]	; (183b0 <lv_theme_material_init+0x1874>)
   18210:	60a3      	str	r3, [r4, #8]
    inited = true;
   18212:	2301      	movs	r3, #1
   18214:	7123      	strb	r3, [r4, #4]
    lv_obj_report_style_mod(NULL);
   18216:	2000      	movs	r0, #0
   18218:	4b66      	ldr	r3, [pc, #408]	; (183b4 <lv_theme_material_init+0x1878>)
   1821a:	4798      	blx	r3
}
   1821c:	f104 0008 	add.w	r0, r4, #8
   18220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        LV_GC_ROOT(_lv_theme_material_styles) = lv_mem_alloc(sizeof(theme_styles_t));
   18224:	20bc      	movs	r0, #188	; 0xbc
   18226:	4b64      	ldr	r3, [pc, #400]	; (183b8 <lv_theme_material_init+0x187c>)
   18228:	4798      	blx	r3
   1822a:	4b64      	ldr	r3, [pc, #400]	; (183bc <lv_theme_material_init+0x1880>)
   1822c:	6018      	str	r0, [r3, #0]
        styles = (theme_styles_t *)LV_GC_ROOT(_lv_theme_material_styles);
   1822e:	4b5c      	ldr	r3, [pc, #368]	; (183a0 <lv_theme_material_init+0x1864>)
   18230:	6018      	str	r0, [r3, #0]
   18232:	f7fe bc8e 	b.w	16b52 <lv_theme_material_init+0x16>
    lv_style_set_text_color(&styles->chart_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
   18236:	2315      	movs	r3, #21
   18238:	212a      	movs	r1, #42	; 0x2a
   1823a:	461c      	mov	r4, r3
   1823c:	f7fe bcb3 	b.w	16ba6 <lv_theme_material_init+0x6a>
    lv_style_set_line_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(1));
   18240:	2000      	movs	r0, #0
   18242:	4b55      	ldr	r3, [pc, #340]	; (18398 <lv_theme_material_init+0x185c>)
   18244:	4798      	blx	r3
   18246:	3050      	adds	r0, #80	; 0x50
   18248:	4b5d      	ldr	r3, [pc, #372]	; (183c0 <lv_theme_material_init+0x1884>)
   1824a:	fb83 2300 	smull	r2, r3, r3, r0
   1824e:	17c2      	asrs	r2, r0, #31
   18250:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18254:	b212      	sxth	r2, r2
   18256:	f7fe bcc2 	b.w	16bde <lv_theme_material_init+0xa2>
    lv_style_set_line_dash_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
   1825a:	2000      	movs	r0, #0
   1825c:	4b4e      	ldr	r3, [pc, #312]	; (18398 <lv_theme_material_init+0x185c>)
   1825e:	4798      	blx	r3
   18260:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18264:	0040      	lsls	r0, r0, #1
   18266:	3050      	adds	r0, #80	; 0x50
   18268:	4b55      	ldr	r3, [pc, #340]	; (183c0 <lv_theme_material_init+0x1884>)
   1826a:	fb83 2300 	smull	r2, r3, r3, r0
   1826e:	17c2      	asrs	r2, r0, #31
   18270:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18274:	b212      	sxth	r2, r2
   18276:	f7fe bcc5 	b.w	16c04 <lv_theme_material_init+0xc8>
    lv_style_set_line_dash_gap(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
   1827a:	2000      	movs	r0, #0
   1827c:	4b46      	ldr	r3, [pc, #280]	; (18398 <lv_theme_material_init+0x185c>)
   1827e:	4798      	blx	r3
   18280:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18284:	0040      	lsls	r0, r0, #1
   18286:	3050      	adds	r0, #80	; 0x50
   18288:	4b4d      	ldr	r3, [pc, #308]	; (183c0 <lv_theme_material_init+0x1884>)
   1828a:	fb83 2300 	smull	r2, r3, r3, r0
   1828e:	17c2      	asrs	r2, r0, #31
   18290:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18294:	b212      	sxth	r2, r2
   18296:	f7fe bcc8 	b.w	16c2a <lv_theme_material_init+0xee>
    lv_style_set_line_width(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(3));
   1829a:	2000      	movs	r0, #0
   1829c:	4b3e      	ldr	r3, [pc, #248]	; (18398 <lv_theme_material_init+0x185c>)
   1829e:	4798      	blx	r3
   182a0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   182a4:	3050      	adds	r0, #80	; 0x50
   182a6:	4b46      	ldr	r3, [pc, #280]	; (183c0 <lv_theme_material_init+0x1884>)
   182a8:	fb83 2300 	smull	r2, r3, r3, r0
   182ac:	17c2      	asrs	r2, r0, #31
   182ae:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   182b2:	b212      	sxth	r2, r2
   182b4:	f7fe bce9 	b.w	16c8a <lv_theme_material_init+0x14e>
    lv_style_set_size(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(4));
   182b8:	2000      	movs	r0, #0
   182ba:	4b37      	ldr	r3, [pc, #220]	; (18398 <lv_theme_material_init+0x185c>)
   182bc:	4798      	blx	r3
   182be:	3014      	adds	r0, #20
   182c0:	0080      	lsls	r0, r0, #2
   182c2:	4b3f      	ldr	r3, [pc, #252]	; (183c0 <lv_theme_material_init+0x1884>)
   182c4:	fb83 2300 	smull	r2, r3, r3, r0
   182c8:	17c2      	asrs	r2, r0, #31
   182ca:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   182ce:	b212      	sxth	r2, r2
   182d0:	f7fe bcec 	b.w	16cac <lv_theme_material_init+0x170>
    lv_style_set_pad_inner(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(2));     /*Space between columns*/
   182d4:	2000      	movs	r0, #0
   182d6:	4b30      	ldr	r3, [pc, #192]	; (18398 <lv_theme_material_init+0x185c>)
   182d8:	4798      	blx	r3
   182da:	3028      	adds	r0, #40	; 0x28
   182dc:	0040      	lsls	r0, r0, #1
   182de:	4b38      	ldr	r3, [pc, #224]	; (183c0 <lv_theme_material_init+0x1884>)
   182e0:	fb83 2300 	smull	r2, r3, r3, r0
   182e4:	17c2      	asrs	r2, r0, #31
   182e6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   182ea:	b212      	sxth	r2, r2
   182ec:	f7fe bcef 	b.w	16cce <lv_theme_material_init+0x192>
    lv_style_set_radius(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(1));
   182f0:	2000      	movs	r0, #0
   182f2:	4b29      	ldr	r3, [pc, #164]	; (18398 <lv_theme_material_init+0x185c>)
   182f4:	4798      	blx	r3
   182f6:	3050      	adds	r0, #80	; 0x50
   182f8:	4b31      	ldr	r3, [pc, #196]	; (183c0 <lv_theme_material_init+0x1884>)
   182fa:	fb83 2300 	smull	r2, r3, r3, r0
   182fe:	17c2      	asrs	r2, r0, #31
   18300:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18304:	b212      	sxth	r2, r2
   18306:	f7fe bcf2 	b.w	16cee <lv_theme_material_init+0x1b2>
    lv_style_set_pad_top(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
   1830a:	2000      	movs	r0, #0
   1830c:	4b22      	ldr	r3, [pc, #136]	; (18398 <lv_theme_material_init+0x185c>)
   1830e:	4798      	blx	r3
   18310:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18314:	3050      	adds	r0, #80	; 0x50
   18316:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1831a:	da02      	bge.n	18322 <lv_theme_material_init+0x17e6>
   1831c:	2201      	movs	r2, #1
   1831e:	f7fe bd03 	b.w	16d28 <lv_theme_material_init+0x1ec>
   18322:	2000      	movs	r0, #0
   18324:	4b1c      	ldr	r3, [pc, #112]	; (18398 <lv_theme_material_init+0x185c>)
   18326:	4798      	blx	r3
   18328:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1832c:	3050      	adds	r0, #80	; 0x50
   1832e:	4b24      	ldr	r3, [pc, #144]	; (183c0 <lv_theme_material_init+0x1884>)
   18330:	fb83 2300 	smull	r2, r3, r3, r0
   18334:	17c2      	asrs	r2, r0, #31
   18336:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   1833a:	b212      	sxth	r2, r2
   1833c:	f7fe bcf4 	b.w	16d28 <lv_theme_material_init+0x1ec>
   18340:	2000      	movs	r0, #0
   18342:	4b15      	ldr	r3, [pc, #84]	; (18398 <lv_theme_material_init+0x185c>)
   18344:	4798      	blx	r3
   18346:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1834a:	0040      	lsls	r0, r0, #1
   1834c:	3050      	adds	r0, #80	; 0x50
   1834e:	4b1c      	ldr	r3, [pc, #112]	; (183c0 <lv_theme_material_init+0x1884>)
   18350:	fb83 2300 	smull	r2, r3, r3, r0
   18354:	17c2      	asrs	r2, r0, #31
   18356:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   1835a:	b212      	sxth	r2, r2
   1835c:	f7fe bce4 	b.w	16d28 <lv_theme_material_init+0x1ec>
    lv_style_set_pad_left(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
   18360:	2000      	movs	r0, #0
   18362:	4b0d      	ldr	r3, [pc, #52]	; (18398 <lv_theme_material_init+0x185c>)
   18364:	4798      	blx	r3
   18366:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1836a:	3050      	adds	r0, #80	; 0x50
   1836c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   18370:	da02      	bge.n	18378 <lv_theme_material_init+0x183c>
   18372:	2201      	movs	r2, #1
   18374:	f7fe bcf1 	b.w	16d5a <lv_theme_material_init+0x21e>
   18378:	2000      	movs	r0, #0
   1837a:	4b07      	ldr	r3, [pc, #28]	; (18398 <lv_theme_material_init+0x185c>)
   1837c:	4798      	blx	r3
   1837e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18382:	3050      	adds	r0, #80	; 0x50
   18384:	4b0e      	ldr	r3, [pc, #56]	; (183c0 <lv_theme_material_init+0x1884>)
   18386:	fb83 2300 	smull	r2, r3, r3, r0
   1838a:	17c2      	asrs	r2, r0, #31
   1838c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18390:	b212      	sxth	r2, r2
   18392:	f7fe bce2 	b.w	16d5a <lv_theme_material_init+0x21e>
   18396:	bf00      	nop
   18398:	00010f31 	.word	0x00010f31
   1839c:	000068d5 	.word	0x000068d5
   183a0:	2000c5d4 	.word	0x2000c5d4
   183a4:	00010f4d 	.word	0x00010f4d
   183a8:	00014a55 	.word	0x00014a55
   183ac:	00006a19 	.word	0x00006a19
   183b0:	000141ed 	.word	0x000141ed
   183b4:	00003c49 	.word	0x00003c49
   183b8:	000123d1 	.word	0x000123d1
   183bc:	2000c744 	.word	0x2000c744
   183c0:	66666667 	.word	0x66666667
   183c4:	2000      	movs	r0, #0
   183c6:	4bc7      	ldr	r3, [pc, #796]	; (186e4 <lv_theme_material_init+0x1ba8>)
   183c8:	4798      	blx	r3
   183ca:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   183ce:	0040      	lsls	r0, r0, #1
   183d0:	3050      	adds	r0, #80	; 0x50
   183d2:	4bc5      	ldr	r3, [pc, #788]	; (186e8 <lv_theme_material_init+0x1bac>)
   183d4:	fb83 2300 	smull	r2, r3, r3, r0
   183d8:	17c2      	asrs	r2, r0, #31
   183da:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   183de:	b212      	sxth	r2, r2
   183e0:	f7fe bcbb 	b.w	16d5a <lv_theme_material_init+0x21e>
    lv_style_set_pad_right(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
   183e4:	2000      	movs	r0, #0
   183e6:	4bbf      	ldr	r3, [pc, #764]	; (186e4 <lv_theme_material_init+0x1ba8>)
   183e8:	4798      	blx	r3
   183ea:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   183ee:	3050      	adds	r0, #80	; 0x50
   183f0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   183f4:	da02      	bge.n	183fc <lv_theme_material_init+0x18c0>
   183f6:	2201      	movs	r2, #1
   183f8:	f7fe bcc8 	b.w	16d8c <lv_theme_material_init+0x250>
   183fc:	2000      	movs	r0, #0
   183fe:	4bb9      	ldr	r3, [pc, #740]	; (186e4 <lv_theme_material_init+0x1ba8>)
   18400:	4798      	blx	r3
   18402:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18406:	3050      	adds	r0, #80	; 0x50
   18408:	4bb7      	ldr	r3, [pc, #732]	; (186e8 <lv_theme_material_init+0x1bac>)
   1840a:	fb83 2300 	smull	r2, r3, r3, r0
   1840e:	17c2      	asrs	r2, r0, #31
   18410:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18414:	b212      	sxth	r2, r2
   18416:	f7fe bcb9 	b.w	16d8c <lv_theme_material_init+0x250>
   1841a:	2000      	movs	r0, #0
   1841c:	4bb1      	ldr	r3, [pc, #708]	; (186e4 <lv_theme_material_init+0x1ba8>)
   1841e:	4798      	blx	r3
   18420:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18424:	0040      	lsls	r0, r0, #1
   18426:	3050      	adds	r0, #80	; 0x50
   18428:	4baf      	ldr	r3, [pc, #700]	; (186e8 <lv_theme_material_init+0x1bac>)
   1842a:	fb83 2300 	smull	r2, r3, r3, r0
   1842e:	17c2      	asrs	r2, r0, #31
   18430:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18434:	b212      	sxth	r2, r2
   18436:	f7fe bca9 	b.w	16d8c <lv_theme_material_init+0x250>
    lv_style_set_pad_bottom(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
   1843a:	2000      	movs	r0, #0
   1843c:	4ba9      	ldr	r3, [pc, #676]	; (186e4 <lv_theme_material_init+0x1ba8>)
   1843e:	4798      	blx	r3
   18440:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18444:	3050      	adds	r0, #80	; 0x50
   18446:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1844a:	da02      	bge.n	18452 <lv_theme_material_init+0x1916>
   1844c:	2201      	movs	r2, #1
   1844e:	f7fe bcb6 	b.w	16dbe <lv_theme_material_init+0x282>
   18452:	2000      	movs	r0, #0
   18454:	4ba3      	ldr	r3, [pc, #652]	; (186e4 <lv_theme_material_init+0x1ba8>)
   18456:	4798      	blx	r3
   18458:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1845c:	3050      	adds	r0, #80	; 0x50
   1845e:	4ba2      	ldr	r3, [pc, #648]	; (186e8 <lv_theme_material_init+0x1bac>)
   18460:	fb83 2300 	smull	r2, r3, r3, r0
   18464:	17c2      	asrs	r2, r0, #31
   18466:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   1846a:	b212      	sxth	r2, r2
   1846c:	f7fe bca7 	b.w	16dbe <lv_theme_material_init+0x282>
   18470:	2000      	movs	r0, #0
   18472:	4b9c      	ldr	r3, [pc, #624]	; (186e4 <lv_theme_material_init+0x1ba8>)
   18474:	4798      	blx	r3
   18476:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1847a:	0040      	lsls	r0, r0, #1
   1847c:	3050      	adds	r0, #80	; 0x50
   1847e:	4b9a      	ldr	r3, [pc, #616]	; (186e8 <lv_theme_material_init+0x1bac>)
   18480:	fb83 2300 	smull	r2, r3, r3, r0
   18484:	17c2      	asrs	r2, r0, #31
   18486:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   1848a:	b212      	sxth	r2, r2
   1848c:	f7fe bc97 	b.w	16dbe <lv_theme_material_init+0x282>
    lv_style_set_text_color(&styles->calendar_daynames, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex3(0xeee));
   18490:	2306      	movs	r3, #6
   18492:	2110      	movs	r1, #16
   18494:	2409      	movs	r4, #9
   18496:	f7fe bcdc 	b.w	16e52 <lv_theme_material_init+0x316>
    lv_style_set_pad_left(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
   1849a:	2000      	movs	r0, #0
   1849c:	4b91      	ldr	r3, [pc, #580]	; (186e4 <lv_theme_material_init+0x1ba8>)
   1849e:	4798      	blx	r3
   184a0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   184a4:	3050      	adds	r0, #80	; 0x50
   184a6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   184aa:	da02      	bge.n	184b2 <lv_theme_material_init+0x1976>
   184ac:	2201      	movs	r2, #1
   184ae:	f7fe bcf1 	b.w	16e94 <lv_theme_material_init+0x358>
   184b2:	2000      	movs	r0, #0
   184b4:	4b8b      	ldr	r3, [pc, #556]	; (186e4 <lv_theme_material_init+0x1ba8>)
   184b6:	4798      	blx	r3
   184b8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   184bc:	3050      	adds	r0, #80	; 0x50
   184be:	4b8a      	ldr	r3, [pc, #552]	; (186e8 <lv_theme_material_init+0x1bac>)
   184c0:	fb83 2300 	smull	r2, r3, r3, r0
   184c4:	17c2      	asrs	r2, r0, #31
   184c6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   184ca:	b212      	sxth	r2, r2
   184cc:	f7fe bce2 	b.w	16e94 <lv_theme_material_init+0x358>
   184d0:	2000      	movs	r0, #0
   184d2:	4b84      	ldr	r3, [pc, #528]	; (186e4 <lv_theme_material_init+0x1ba8>)
   184d4:	4798      	blx	r3
   184d6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   184da:	0040      	lsls	r0, r0, #1
   184dc:	3050      	adds	r0, #80	; 0x50
   184de:	4b82      	ldr	r3, [pc, #520]	; (186e8 <lv_theme_material_init+0x1bac>)
   184e0:	fb83 2300 	smull	r2, r3, r3, r0
   184e4:	17c2      	asrs	r2, r0, #31
   184e6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   184ea:	b212      	sxth	r2, r2
   184ec:	f7fe bcd2 	b.w	16e94 <lv_theme_material_init+0x358>
    lv_style_set_pad_right(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
   184f0:	2000      	movs	r0, #0
   184f2:	4b7c      	ldr	r3, [pc, #496]	; (186e4 <lv_theme_material_init+0x1ba8>)
   184f4:	4798      	blx	r3
   184f6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   184fa:	3050      	adds	r0, #80	; 0x50
   184fc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   18500:	da02      	bge.n	18508 <lv_theme_material_init+0x19cc>
   18502:	2201      	movs	r2, #1
   18504:	f7fe bcdf 	b.w	16ec6 <lv_theme_material_init+0x38a>
   18508:	2000      	movs	r0, #0
   1850a:	4b76      	ldr	r3, [pc, #472]	; (186e4 <lv_theme_material_init+0x1ba8>)
   1850c:	4798      	blx	r3
   1850e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18512:	3050      	adds	r0, #80	; 0x50
   18514:	4b74      	ldr	r3, [pc, #464]	; (186e8 <lv_theme_material_init+0x1bac>)
   18516:	fb83 2300 	smull	r2, r3, r3, r0
   1851a:	17c2      	asrs	r2, r0, #31
   1851c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18520:	b212      	sxth	r2, r2
   18522:	f7fe bcd0 	b.w	16ec6 <lv_theme_material_init+0x38a>
   18526:	2000      	movs	r0, #0
   18528:	4b6e      	ldr	r3, [pc, #440]	; (186e4 <lv_theme_material_init+0x1ba8>)
   1852a:	4798      	blx	r3
   1852c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18530:	0040      	lsls	r0, r0, #1
   18532:	3050      	adds	r0, #80	; 0x50
   18534:	4b6c      	ldr	r3, [pc, #432]	; (186e8 <lv_theme_material_init+0x1bac>)
   18536:	fb83 2300 	smull	r2, r3, r3, r0
   1853a:	17c2      	asrs	r2, r0, #31
   1853c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18540:	b212      	sxth	r2, r2
   18542:	f7fe bcc0 	b.w	16ec6 <lv_theme_material_init+0x38a>
    lv_style_set_pad_bottom(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
   18546:	2000      	movs	r0, #0
   18548:	4b66      	ldr	r3, [pc, #408]	; (186e4 <lv_theme_material_init+0x1ba8>)
   1854a:	4798      	blx	r3
   1854c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18550:	3050      	adds	r0, #80	; 0x50
   18552:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   18556:	da02      	bge.n	1855e <lv_theme_material_init+0x1a22>
   18558:	2201      	movs	r2, #1
   1855a:	f7fe bccd 	b.w	16ef8 <lv_theme_material_init+0x3bc>
   1855e:	2000      	movs	r0, #0
   18560:	4b60      	ldr	r3, [pc, #384]	; (186e4 <lv_theme_material_init+0x1ba8>)
   18562:	4798      	blx	r3
   18564:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18568:	3050      	adds	r0, #80	; 0x50
   1856a:	4b5f      	ldr	r3, [pc, #380]	; (186e8 <lv_theme_material_init+0x1bac>)
   1856c:	fb83 2300 	smull	r2, r3, r3, r0
   18570:	17c2      	asrs	r2, r0, #31
   18572:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18576:	b212      	sxth	r2, r2
   18578:	f7fe bcbe 	b.w	16ef8 <lv_theme_material_init+0x3bc>
   1857c:	2000      	movs	r0, #0
   1857e:	4b59      	ldr	r3, [pc, #356]	; (186e4 <lv_theme_material_init+0x1ba8>)
   18580:	4798      	blx	r3
   18582:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18586:	0040      	lsls	r0, r0, #1
   18588:	3050      	adds	r0, #80	; 0x50
   1858a:	4b57      	ldr	r3, [pc, #348]	; (186e8 <lv_theme_material_init+0x1bac>)
   1858c:	fb83 2300 	smull	r2, r3, r3, r0
   18590:	17c2      	asrs	r2, r0, #31
   18592:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18596:	b212      	sxth	r2, r2
   18598:	f7fe bcae 	b.w	16ef8 <lv_theme_material_init+0x3bc>
    lv_style_set_radius(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(4));
   1859c:	2000      	movs	r0, #0
   1859e:	4b51      	ldr	r3, [pc, #324]	; (186e4 <lv_theme_material_init+0x1ba8>)
   185a0:	4798      	blx	r3
   185a2:	3014      	adds	r0, #20
   185a4:	0080      	lsls	r0, r0, #2
   185a6:	4b50      	ldr	r3, [pc, #320]	; (186e8 <lv_theme_material_init+0x1bac>)
   185a8:	fb83 2300 	smull	r2, r3, r3, r0
   185ac:	17c2      	asrs	r2, r0, #31
   185ae:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   185b2:	b212      	sxth	r2, r2
   185b4:	f7fe bcb5 	b.w	16f22 <lv_theme_material_init+0x3e6>
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
   185b8:	2306      	movs	r3, #6
   185ba:	2110      	movs	r1, #16
   185bc:	2409      	movs	r4, #9
   185be:	f7fe bcbf 	b.w	16f40 <lv_theme_material_init+0x404>
    lv_style_set_pad_inner(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(3));
   185c2:	2000      	movs	r0, #0
   185c4:	4b47      	ldr	r3, [pc, #284]	; (186e4 <lv_theme_material_init+0x1ba8>)
   185c6:	4798      	blx	r3
   185c8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   185cc:	3050      	adds	r0, #80	; 0x50
   185ce:	4b46      	ldr	r3, [pc, #280]	; (186e8 <lv_theme_material_init+0x1bac>)
   185d0:	fb83 2300 	smull	r2, r3, r3, r0
   185d4:	17c2      	asrs	r2, r0, #31
   185d6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   185da:	b212      	sxth	r2, r2
   185dc:	f7fe bd20 	b.w	17020 <lv_theme_material_init+0x4e4>
    lv_style_set_pad_left(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
   185e0:	2000      	movs	r0, #0
   185e2:	4b40      	ldr	r3, [pc, #256]	; (186e4 <lv_theme_material_init+0x1ba8>)
   185e4:	4798      	blx	r3
   185e6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   185ea:	3050      	adds	r0, #80	; 0x50
   185ec:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   185f0:	da02      	bge.n	185f8 <lv_theme_material_init+0x1abc>
   185f2:	2201      	movs	r2, #1
   185f4:	f7fe bd2d 	b.w	17052 <lv_theme_material_init+0x516>
   185f8:	2000      	movs	r0, #0
   185fa:	4b3a      	ldr	r3, [pc, #232]	; (186e4 <lv_theme_material_init+0x1ba8>)
   185fc:	4798      	blx	r3
   185fe:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18602:	3050      	adds	r0, #80	; 0x50
   18604:	4b38      	ldr	r3, [pc, #224]	; (186e8 <lv_theme_material_init+0x1bac>)
   18606:	fb83 2300 	smull	r2, r3, r3, r0
   1860a:	17c2      	asrs	r2, r0, #31
   1860c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18610:	b212      	sxth	r2, r2
   18612:	f7fe bd1e 	b.w	17052 <lv_theme_material_init+0x516>
   18616:	2000      	movs	r0, #0
   18618:	4b32      	ldr	r3, [pc, #200]	; (186e4 <lv_theme_material_init+0x1ba8>)
   1861a:	4798      	blx	r3
   1861c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18620:	0040      	lsls	r0, r0, #1
   18622:	3050      	adds	r0, #80	; 0x50
   18624:	4b30      	ldr	r3, [pc, #192]	; (186e8 <lv_theme_material_init+0x1bac>)
   18626:	fb83 2300 	smull	r2, r3, r3, r0
   1862a:	17c2      	asrs	r2, r0, #31
   1862c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18630:	b212      	sxth	r2, r2
   18632:	f7fe bd0e 	b.w	17052 <lv_theme_material_init+0x516>
    lv_style_set_pad_right(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
   18636:	2000      	movs	r0, #0
   18638:	4b2a      	ldr	r3, [pc, #168]	; (186e4 <lv_theme_material_init+0x1ba8>)
   1863a:	4798      	blx	r3
   1863c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18640:	3050      	adds	r0, #80	; 0x50
   18642:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   18646:	da02      	bge.n	1864e <lv_theme_material_init+0x1b12>
   18648:	2201      	movs	r2, #1
   1864a:	f7fe bd1b 	b.w	17084 <lv_theme_material_init+0x548>
   1864e:	2000      	movs	r0, #0
   18650:	4b24      	ldr	r3, [pc, #144]	; (186e4 <lv_theme_material_init+0x1ba8>)
   18652:	4798      	blx	r3
   18654:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18658:	3050      	adds	r0, #80	; 0x50
   1865a:	4b23      	ldr	r3, [pc, #140]	; (186e8 <lv_theme_material_init+0x1bac>)
   1865c:	fb83 2300 	smull	r2, r3, r3, r0
   18660:	17c2      	asrs	r2, r0, #31
   18662:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18666:	b212      	sxth	r2, r2
   18668:	f7fe bd0c 	b.w	17084 <lv_theme_material_init+0x548>
   1866c:	2000      	movs	r0, #0
   1866e:	4b1d      	ldr	r3, [pc, #116]	; (186e4 <lv_theme_material_init+0x1ba8>)
   18670:	4798      	blx	r3
   18672:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18676:	0040      	lsls	r0, r0, #1
   18678:	3050      	adds	r0, #80	; 0x50
   1867a:	4b1b      	ldr	r3, [pc, #108]	; (186e8 <lv_theme_material_init+0x1bac>)
   1867c:	fb83 2300 	smull	r2, r3, r3, r0
   18680:	17c2      	asrs	r2, r0, #31
   18682:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18686:	b212      	sxth	r2, r2
   18688:	f7fe bcfc 	b.w	17084 <lv_theme_material_init+0x548>
    lv_style_set_pad_bottom(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
   1868c:	2000      	movs	r0, #0
   1868e:	4b15      	ldr	r3, [pc, #84]	; (186e4 <lv_theme_material_init+0x1ba8>)
   18690:	4798      	blx	r3
   18692:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18696:	3050      	adds	r0, #80	; 0x50
   18698:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1869c:	da02      	bge.n	186a4 <lv_theme_material_init+0x1b68>
   1869e:	2201      	movs	r2, #1
   186a0:	f7fe bd09 	b.w	170b6 <lv_theme_material_init+0x57a>
   186a4:	2000      	movs	r0, #0
   186a6:	4b0f      	ldr	r3, [pc, #60]	; (186e4 <lv_theme_material_init+0x1ba8>)
   186a8:	4798      	blx	r3
   186aa:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   186ae:	3050      	adds	r0, #80	; 0x50
   186b0:	4b0d      	ldr	r3, [pc, #52]	; (186e8 <lv_theme_material_init+0x1bac>)
   186b2:	fb83 2300 	smull	r2, r3, r3, r0
   186b6:	17c2      	asrs	r2, r0, #31
   186b8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   186bc:	b212      	sxth	r2, r2
   186be:	f7fe bcfa 	b.w	170b6 <lv_theme_material_init+0x57a>
   186c2:	2000      	movs	r0, #0
   186c4:	4b07      	ldr	r3, [pc, #28]	; (186e4 <lv_theme_material_init+0x1ba8>)
   186c6:	4798      	blx	r3
   186c8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   186cc:	0040      	lsls	r0, r0, #1
   186ce:	3050      	adds	r0, #80	; 0x50
   186d0:	4b05      	ldr	r3, [pc, #20]	; (186e8 <lv_theme_material_init+0x1bac>)
   186d2:	fb83 2300 	smull	r2, r3, r3, r0
   186d6:	17c2      	asrs	r2, r0, #31
   186d8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   186dc:	b212      	sxth	r2, r2
   186de:	f7fe bcea 	b.w	170b6 <lv_theme_material_init+0x57a>
   186e2:	bf00      	nop
   186e4:	00010f31 	.word	0x00010f31
   186e8:	66666667 	.word	0x66666667
    lv_style_set_scale_width(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(30));
   186ec:	2000      	movs	r0, #0
   186ee:	4bc9      	ldr	r3, [pc, #804]	; (18a14 <lv_theme_material_init+0x1ed8>)
   186f0:	4798      	blx	r3
   186f2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   186f6:	0040      	lsls	r0, r0, #1
   186f8:	3050      	adds	r0, #80	; 0x50
   186fa:	4bc7      	ldr	r3, [pc, #796]	; (18a18 <lv_theme_material_init+0x1edc>)
   186fc:	fb83 2300 	smull	r2, r3, r3, r0
   18700:	17c2      	asrs	r2, r0, #31
   18702:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18706:	b212      	sxth	r2, r2
   18708:	f7fe bcec 	b.w	170e4 <lv_theme_material_init+0x5a8>
    lv_style_set_pad_inner(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(20));
   1870c:	2000      	movs	r0, #0
   1870e:	4bc1      	ldr	r3, [pc, #772]	; (18a14 <lv_theme_material_init+0x1ed8>)
   18710:	4798      	blx	r3
   18712:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18716:	0080      	lsls	r0, r0, #2
   18718:	3050      	adds	r0, #80	; 0x50
   1871a:	4bbf      	ldr	r3, [pc, #764]	; (18a18 <lv_theme_material_init+0x1edc>)
   1871c:	fb83 2300 	smull	r2, r3, r3, r0
   18720:	17c2      	asrs	r2, r0, #31
   18722:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18726:	b212      	sxth	r2, r2
   18728:	f7fe bd21 	b.w	1716e <lv_theme_material_init+0x632>
    lv_style_set_pad_left(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
   1872c:	2000      	movs	r0, #0
   1872e:	4bb9      	ldr	r3, [pc, #740]	; (18a14 <lv_theme_material_init+0x1ed8>)
   18730:	4798      	blx	r3
   18732:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   18736:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   1873a:	3050      	adds	r0, #80	; 0x50
   1873c:	4bb6      	ldr	r3, [pc, #728]	; (18a18 <lv_theme_material_init+0x1edc>)
   1873e:	fb83 2300 	smull	r2, r3, r3, r0
   18742:	17c2      	asrs	r2, r0, #31
   18744:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18748:	b212      	sxth	r2, r2
   1874a:	f7fe bd57 	b.w	171fc <lv_theme_material_init+0x6c0>
    lv_style_set_pad_right(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
   1874e:	2000      	movs	r0, #0
   18750:	4bb0      	ldr	r3, [pc, #704]	; (18a14 <lv_theme_material_init+0x1ed8>)
   18752:	4798      	blx	r3
   18754:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   18758:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   1875c:	3050      	adds	r0, #80	; 0x50
   1875e:	4bae      	ldr	r3, [pc, #696]	; (18a18 <lv_theme_material_init+0x1edc>)
   18760:	fb83 2300 	smull	r2, r3, r3, r0
   18764:	17c2      	asrs	r2, r0, #31
   18766:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   1876a:	b212      	sxth	r2, r2
   1876c:	f7fe bd5a 	b.w	17224 <lv_theme_material_init+0x6e8>
    lv_style_set_pad_top(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
   18770:	2000      	movs	r0, #0
   18772:	4ba8      	ldr	r3, [pc, #672]	; (18a14 <lv_theme_material_init+0x1ed8>)
   18774:	4798      	blx	r3
   18776:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   1877a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   1877e:	3050      	adds	r0, #80	; 0x50
   18780:	4ba5      	ldr	r3, [pc, #660]	; (18a18 <lv_theme_material_init+0x1edc>)
   18782:	fb83 2300 	smull	r2, r3, r3, r0
   18786:	17c2      	asrs	r2, r0, #31
   18788:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   1878c:	b212      	sxth	r2, r2
   1878e:	f7fe bd5d 	b.w	1724c <lv_theme_material_init+0x710>
    lv_style_set_pad_bottom(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
   18792:	2000      	movs	r0, #0
   18794:	4b9f      	ldr	r3, [pc, #636]	; (18a14 <lv_theme_material_init+0x1ed8>)
   18796:	4798      	blx	r3
   18798:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   1879c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   187a0:	3050      	adds	r0, #80	; 0x50
   187a2:	4b9d      	ldr	r3, [pc, #628]	; (18a18 <lv_theme_material_init+0x1edc>)
   187a4:	fb83 2300 	smull	r2, r3, r3, r0
   187a8:	17c2      	asrs	r2, r0, #31
   187aa:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   187ae:	b212      	sxth	r2, r2
   187b0:	f7fe bd60 	b.w	17274 <lv_theme_material_init+0x738>
    lv_style_set_radius(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(4));
   187b4:	2000      	movs	r0, #0
   187b6:	4b97      	ldr	r3, [pc, #604]	; (18a14 <lv_theme_material_init+0x1ed8>)
   187b8:	4798      	blx	r3
   187ba:	3014      	adds	r0, #20
   187bc:	0080      	lsls	r0, r0, #2
   187be:	4b96      	ldr	r3, [pc, #600]	; (18a18 <lv_theme_material_init+0x1edc>)
   187c0:	fb83 2300 	smull	r2, r3, r3, r0
   187c4:	17c2      	asrs	r2, r0, #31
   187c6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   187ca:	b212      	sxth	r2, r2
   187cc:	f7fe bd67 	b.w	1729e <lv_theme_material_init+0x762>
    lv_style_set_pad_inner(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
   187d0:	2000      	movs	r0, #0
   187d2:	4b90      	ldr	r3, [pc, #576]	; (18a14 <lv_theme_material_init+0x1ed8>)
   187d4:	4798      	blx	r3
   187d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   187da:	0040      	lsls	r0, r0, #1
   187dc:	3050      	adds	r0, #80	; 0x50
   187de:	4b8e      	ldr	r3, [pc, #568]	; (18a18 <lv_theme_material_init+0x1edc>)
   187e0:	fb83 2300 	smull	r2, r3, r3, r0
   187e4:	17c2      	asrs	r2, r0, #31
   187e6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   187ea:	b212      	sxth	r2, r2
   187ec:	f7fe bd6a 	b.w	172c4 <lv_theme_material_init+0x788>
    lv_style_set_outline_width(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(3));
   187f0:	2000      	movs	r0, #0
   187f2:	4b88      	ldr	r3, [pc, #544]	; (18a14 <lv_theme_material_init+0x1ed8>)
   187f4:	4798      	blx	r3
   187f6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   187fa:	3050      	adds	r0, #80	; 0x50
   187fc:	4b86      	ldr	r3, [pc, #536]	; (18a18 <lv_theme_material_init+0x1edc>)
   187fe:	fb83 2300 	smull	r2, r3, r3, r0
   18802:	17c2      	asrs	r2, r0, #31
   18804:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18808:	b212      	sxth	r2, r2
   1880a:	f7fe bd7f 	b.w	1730c <lv_theme_material_init+0x7d0>
    lv_style_set_outline_pad(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
   1880e:	2000      	movs	r0, #0
   18810:	4b80      	ldr	r3, [pc, #512]	; (18a14 <lv_theme_material_init+0x1ed8>)
   18812:	4798      	blx	r3
   18814:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18818:	0040      	lsls	r0, r0, #1
   1881a:	3050      	adds	r0, #80	; 0x50
   1881c:	4b7e      	ldr	r3, [pc, #504]	; (18a18 <lv_theme_material_init+0x1edc>)
   1881e:	fb83 2300 	smull	r2, r3, r3, r0
   18822:	17c2      	asrs	r2, r0, #31
   18824:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18828:	b212      	sxth	r2, r2
   1882a:	f7fe bd82 	b.w	17332 <lv_theme_material_init+0x7f6>
    lv_style_set_radius(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(4));
   1882e:	2000      	movs	r0, #0
   18830:	4b78      	ldr	r3, [pc, #480]	; (18a14 <lv_theme_material_init+0x1ed8>)
   18832:	4798      	blx	r3
   18834:	3014      	adds	r0, #20
   18836:	0080      	lsls	r0, r0, #2
   18838:	4b77      	ldr	r3, [pc, #476]	; (18a18 <lv_theme_material_init+0x1edc>)
   1883a:	fb83 2300 	smull	r2, r3, r3, r0
   1883e:	17c2      	asrs	r2, r0, #31
   18840:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18844:	b212      	sxth	r2, r2
   18846:	f7fe bd9a 	b.w	1737e <lv_theme_material_init+0x842>
    lv_style_set_pad_left(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   1884a:	2000      	movs	r0, #0
   1884c:	4b71      	ldr	r3, [pc, #452]	; (18a14 <lv_theme_material_init+0x1ed8>)
   1884e:	4798      	blx	r3
   18850:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   18854:	3050      	adds	r0, #80	; 0x50
   18856:	4b70      	ldr	r3, [pc, #448]	; (18a18 <lv_theme_material_init+0x1edc>)
   18858:	fb83 2300 	smull	r2, r3, r3, r0
   1885c:	17c2      	asrs	r2, r0, #31
   1885e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18862:	b212      	sxth	r2, r2
   18864:	f7fe bdb2 	b.w	173cc <lv_theme_material_init+0x890>
    lv_style_set_pad_right(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   18868:	2000      	movs	r0, #0
   1886a:	4b6a      	ldr	r3, [pc, #424]	; (18a14 <lv_theme_material_init+0x1ed8>)
   1886c:	4798      	blx	r3
   1886e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   18872:	3050      	adds	r0, #80	; 0x50
   18874:	4b68      	ldr	r3, [pc, #416]	; (18a18 <lv_theme_material_init+0x1edc>)
   18876:	fb83 2300 	smull	r2, r3, r3, r0
   1887a:	17c2      	asrs	r2, r0, #31
   1887c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18880:	b212      	sxth	r2, r2
   18882:	f7fe bdb5 	b.w	173f0 <lv_theme_material_init+0x8b4>
    lv_style_set_pad_top(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   18886:	2000      	movs	r0, #0
   18888:	4b62      	ldr	r3, [pc, #392]	; (18a14 <lv_theme_material_init+0x1ed8>)
   1888a:	4798      	blx	r3
   1888c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   18890:	3050      	adds	r0, #80	; 0x50
   18892:	4b61      	ldr	r3, [pc, #388]	; (18a18 <lv_theme_material_init+0x1edc>)
   18894:	fb83 2300 	smull	r2, r3, r3, r0
   18898:	17c2      	asrs	r2, r0, #31
   1889a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   1889e:	b212      	sxth	r2, r2
   188a0:	f7fe bdb8 	b.w	17414 <lv_theme_material_init+0x8d8>
    lv_style_set_pad_bottom(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   188a4:	2000      	movs	r0, #0
   188a6:	4b5b      	ldr	r3, [pc, #364]	; (18a14 <lv_theme_material_init+0x1ed8>)
   188a8:	4798      	blx	r3
   188aa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   188ae:	3050      	adds	r0, #80	; 0x50
   188b0:	4b59      	ldr	r3, [pc, #356]	; (18a18 <lv_theme_material_init+0x1edc>)
   188b2:	fb83 2300 	smull	r2, r3, r3, r0
   188b6:	17c2      	asrs	r2, r0, #31
   188b8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   188bc:	b212      	sxth	r2, r2
   188be:	f7fe bdbb 	b.w	17438 <lv_theme_material_init+0x8fc>
    lv_style_set_border_width(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(4));
   188c2:	2000      	movs	r0, #0
   188c4:	4b53      	ldr	r3, [pc, #332]	; (18a14 <lv_theme_material_init+0x1ed8>)
   188c6:	4798      	blx	r3
   188c8:	3014      	adds	r0, #20
   188ca:	0080      	lsls	r0, r0, #2
   188cc:	4b52      	ldr	r3, [pc, #328]	; (18a18 <lv_theme_material_init+0x1edc>)
   188ce:	fb83 2300 	smull	r2, r3, r3, r0
   188d2:	17c2      	asrs	r2, r0, #31
   188d4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   188d8:	b212      	sxth	r2, r2
   188da:	f7fe bdda 	b.w	17492 <lv_theme_material_init+0x956>
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT : LV_COLOR_BLACK);
   188de:	2307      	movs	r3, #7
   188e0:	210f      	movs	r1, #15
   188e2:	2408      	movs	r4, #8
   188e4:	f7fe bde9 	b.w	174ba <lv_theme_material_init+0x97e>
    lv_style_set_pad_left(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
   188e8:	2000      	movs	r0, #0
   188ea:	4b4a      	ldr	r3, [pc, #296]	; (18a14 <lv_theme_material_init+0x1ed8>)
   188ec:	4798      	blx	r3
   188ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   188f2:	3050      	adds	r0, #80	; 0x50
   188f4:	4b48      	ldr	r3, [pc, #288]	; (18a18 <lv_theme_material_init+0x1edc>)
   188f6:	fb83 2300 	smull	r2, r3, r3, r0
   188fa:	17c2      	asrs	r2, r0, #31
   188fc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18900:	b212      	sxth	r2, r2
   18902:	f7fe bdf9 	b.w	174f8 <lv_theme_material_init+0x9bc>
    lv_style_set_pad_right(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
   18906:	2000      	movs	r0, #0
   18908:	4b42      	ldr	r3, [pc, #264]	; (18a14 <lv_theme_material_init+0x1ed8>)
   1890a:	4798      	blx	r3
   1890c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18910:	3050      	adds	r0, #80	; 0x50
   18912:	4b41      	ldr	r3, [pc, #260]	; (18a18 <lv_theme_material_init+0x1edc>)
   18914:	fb83 2300 	smull	r2, r3, r3, r0
   18918:	17c2      	asrs	r2, r0, #31
   1891a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   1891e:	b212      	sxth	r2, r2
   18920:	f7fe bdfc 	b.w	1751c <lv_theme_material_init+0x9e0>
    lv_style_set_pad_top(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
   18924:	2000      	movs	r0, #0
   18926:	4b3b      	ldr	r3, [pc, #236]	; (18a14 <lv_theme_material_init+0x1ed8>)
   18928:	4798      	blx	r3
   1892a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1892e:	3050      	adds	r0, #80	; 0x50
   18930:	4b39      	ldr	r3, [pc, #228]	; (18a18 <lv_theme_material_init+0x1edc>)
   18932:	fb83 2300 	smull	r2, r3, r3, r0
   18936:	17c2      	asrs	r2, r0, #31
   18938:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   1893c:	b212      	sxth	r2, r2
   1893e:	f7fe bdff 	b.w	17540 <lv_theme_material_init+0xa04>
    lv_style_set_pad_bottom(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
   18942:	2000      	movs	r0, #0
   18944:	4b33      	ldr	r3, [pc, #204]	; (18a14 <lv_theme_material_init+0x1ed8>)
   18946:	4798      	blx	r3
   18948:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1894c:	3050      	adds	r0, #80	; 0x50
   1894e:	4b32      	ldr	r3, [pc, #200]	; (18a18 <lv_theme_material_init+0x1edc>)
   18950:	fb83 2300 	smull	r2, r3, r3, r0
   18954:	17c2      	asrs	r2, r0, #31
   18956:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   1895a:	b212      	sxth	r2, r2
   1895c:	f7fe be02 	b.w	17564 <lv_theme_material_init+0xa28>
    lv_style_set_pad_inner(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(3));
   18960:	2000      	movs	r0, #0
   18962:	4b2c      	ldr	r3, [pc, #176]	; (18a14 <lv_theme_material_init+0x1ed8>)
   18964:	4798      	blx	r3
   18966:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1896a:	3050      	adds	r0, #80	; 0x50
   1896c:	4b2a      	ldr	r3, [pc, #168]	; (18a18 <lv_theme_material_init+0x1edc>)
   1896e:	fb83 2300 	smull	r2, r3, r3, r0
   18972:	17c2      	asrs	r2, r0, #31
   18974:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18978:	b212      	sxth	r2, r2
   1897a:	f7fe be05 	b.w	17588 <lv_theme_material_init+0xa4c>
    lv_style_set_shadow_width(&styles->mbox_bg, LV_STATE_DEFAULT, LV_DPX(50));
   1897e:	2000      	movs	r0, #0
   18980:	4b24      	ldr	r3, [pc, #144]	; (18a14 <lv_theme_material_init+0x1ed8>)
   18982:	4798      	blx	r3
   18984:	2232      	movs	r2, #50	; 0x32
   18986:	fb02 f000 	mul.w	r0, r2, r0
   1898a:	3050      	adds	r0, #80	; 0x50
   1898c:	4b22      	ldr	r3, [pc, #136]	; (18a18 <lv_theme_material_init+0x1edc>)
   1898e:	fb83 2300 	smull	r2, r3, r3, r0
   18992:	17c2      	asrs	r2, r0, #31
   18994:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18998:	b212      	sxth	r2, r2
   1899a:	f7fe be0c 	b.w	175b6 <lv_theme_material_init+0xa7a>
    lv_style_set_size(&styles->sb, LV_STATE_DEFAULT, LV_DPX(7));
   1899e:	2000      	movs	r0, #0
   189a0:	4b1c      	ldr	r3, [pc, #112]	; (18a14 <lv_theme_material_init+0x1ed8>)
   189a2:	4798      	blx	r3
   189a4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   189a8:	3050      	adds	r0, #80	; 0x50
   189aa:	4b1b      	ldr	r3, [pc, #108]	; (18a18 <lv_theme_material_init+0x1edc>)
   189ac:	fb83 2300 	smull	r2, r3, r3, r0
   189b0:	17c2      	asrs	r2, r0, #31
   189b2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   189b6:	b212      	sxth	r2, r2
   189b8:	f7fe be52 	b.w	17660 <lv_theme_material_init+0xb24>
    lv_style_set_pad_right(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
   189bc:	2000      	movs	r0, #0
   189be:	4b15      	ldr	r3, [pc, #84]	; (18a14 <lv_theme_material_init+0x1ed8>)
   189c0:	4798      	blx	r3
   189c2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   189c6:	3050      	adds	r0, #80	; 0x50
   189c8:	4b13      	ldr	r3, [pc, #76]	; (18a18 <lv_theme_material_init+0x1edc>)
   189ca:	fb83 2300 	smull	r2, r3, r3, r0
   189ce:	17c2      	asrs	r2, r0, #31
   189d0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   189d4:	b212      	sxth	r2, r2
   189d6:	f7fe be55 	b.w	17684 <lv_theme_material_init+0xb48>
    lv_style_set_pad_bottom(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
   189da:	2000      	movs	r0, #0
   189dc:	4b0d      	ldr	r3, [pc, #52]	; (18a14 <lv_theme_material_init+0x1ed8>)
   189de:	4798      	blx	r3
   189e0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   189e4:	3050      	adds	r0, #80	; 0x50
   189e6:	4b0c      	ldr	r3, [pc, #48]	; (18a18 <lv_theme_material_init+0x1edc>)
   189e8:	fb83 2300 	smull	r2, r3, r3, r0
   189ec:	17c2      	asrs	r2, r0, #31
   189ee:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   189f2:	b212      	sxth	r2, r2
   189f4:	f7fe be58 	b.w	176a8 <lv_theme_material_init+0xb6c>
    lv_style_set_border_width(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(2));
   189f8:	2000      	movs	r0, #0
   189fa:	4b06      	ldr	r3, [pc, #24]	; (18a14 <lv_theme_material_init+0x1ed8>)
   189fc:	4798      	blx	r3
   189fe:	3028      	adds	r0, #40	; 0x28
   18a00:	0040      	lsls	r0, r0, #1
   18a02:	4b05      	ldr	r3, [pc, #20]	; (18a18 <lv_theme_material_init+0x1edc>)
   18a04:	fb83 2300 	smull	r2, r3, r3, r0
   18a08:	17c2      	asrs	r2, r0, #31
   18a0a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18a0e:	b212      	sxth	r2, r2
   18a10:	f7fe be91 	b.w	17736 <lv_theme_material_init+0xbfa>
   18a14:	00010f31 	.word	0x00010f31
   18a18:	66666667 	.word	0x66666667
    lv_style_set_pad_left(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(1));
   18a1c:	2000      	movs	r0, #0
   18a1e:	4bcd      	ldr	r3, [pc, #820]	; (18d54 <lv_theme_material_init+0x2218>)
   18a20:	4798      	blx	r3
   18a22:	3050      	adds	r0, #80	; 0x50
   18a24:	4bcc      	ldr	r3, [pc, #816]	; (18d58 <lv_theme_material_init+0x221c>)
   18a26:	fb83 2300 	smull	r2, r3, r3, r0
   18a2a:	17c2      	asrs	r2, r0, #31
   18a2c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18a30:	b212      	sxth	r2, r2
   18a32:	f7fe be9d 	b.w	17770 <lv_theme_material_init+0xc34>
    lv_style_set_text_color(&styles->ta_placeholder, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
   18a36:	2315      	movs	r3, #21
   18a38:	212a      	movs	r1, #42	; 0x2a
   18a3a:	461c      	mov	r4, r3
   18a3c:	f7fe beb0 	b.w	177a0 <lv_theme_material_init+0xc64>
    lv_style_set_pad_top(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
   18a40:	2000      	movs	r0, #0
   18a42:	4bc4      	ldr	r3, [pc, #784]	; (18d54 <lv_theme_material_init+0x2218>)
   18a44:	4798      	blx	r3
   18a46:	2264      	movs	r2, #100	; 0x64
   18a48:	fb02 f000 	mul.w	r0, r2, r0
   18a4c:	3050      	adds	r0, #80	; 0x50
   18a4e:	4bc2      	ldr	r3, [pc, #776]	; (18d58 <lv_theme_material_init+0x221c>)
   18a50:	fb83 2300 	smull	r2, r3, r3, r0
   18a54:	17c2      	asrs	r2, r0, #31
   18a56:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18a5a:	b212      	sxth	r2, r2
   18a5c:	f7fe bed1 	b.w	17802 <lv_theme_material_init+0xcc6>
    lv_style_set_pad_bottom(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
   18a60:	2000      	movs	r0, #0
   18a62:	4bbc      	ldr	r3, [pc, #752]	; (18d54 <lv_theme_material_init+0x2218>)
   18a64:	4798      	blx	r3
   18a66:	2264      	movs	r2, #100	; 0x64
   18a68:	fb02 f000 	mul.w	r0, r2, r0
   18a6c:	3050      	adds	r0, #80	; 0x50
   18a6e:	4bba      	ldr	r3, [pc, #744]	; (18d58 <lv_theme_material_init+0x221c>)
   18a70:	fb83 2300 	smull	r2, r3, r3, r0
   18a74:	17c2      	asrs	r2, r0, #31
   18a76:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18a7a:	b212      	sxth	r2, r2
   18a7c:	f7fe bed4 	b.w	17828 <lv_theme_material_init+0xcec>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG);
   18a80:	231f      	movs	r3, #31
   18a82:	213f      	movs	r1, #63	; 0x3f
   18a84:	461c      	mov	r4, r3
   18a86:	f7fe bf09 	b.w	1789c <lv_theme_material_init+0xd60>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_PRESSED, COLOR_BG_PR);
   18a8a:	231d      	movs	r3, #29
   18a8c:	213b      	movs	r1, #59	; 0x3b
   18a8e:	461c      	mov	r4, r3
   18a90:	f7fe bf1a 	b.w	178c8 <lv_theme_material_init+0xd8c>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_DIS);
   18a94:	231f      	movs	r3, #31
   18a96:	213f      	movs	r1, #63	; 0x3f
   18a98:	461c      	mov	r4, r3
   18a9a:	f7fe bf2c 	b.w	178f6 <lv_theme_material_init+0xdba>
    lv_style_set_text_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   18a9e:	2307      	movs	r3, #7
   18aa0:	210f      	movs	r1, #15
   18aa2:	2408      	movs	r4, #8
   18aa4:	f7fe bf4f 	b.w	17946 <lv_theme_material_init+0xe0a>
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   18aa8:	2307      	movs	r3, #7
   18aaa:	210f      	movs	r1, #15
   18aac:	2408      	movs	r4, #8
   18aae:	f7fe bf7f 	b.w	179b0 <lv_theme_material_init+0xe74>
    lv_style_set_pad_left(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   18ab2:	2000      	movs	r0, #0
   18ab4:	4ba7      	ldr	r3, [pc, #668]	; (18d54 <lv_theme_material_init+0x2218>)
   18ab6:	4798      	blx	r3
   18ab8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18abc:	3050      	adds	r0, #80	; 0x50
   18abe:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   18ac2:	da02      	bge.n	18aca <lv_theme_material_init+0x1f8e>
   18ac4:	2201      	movs	r2, #1
   18ac6:	f7fe bfef 	b.w	17aa8 <lv_theme_material_init+0xf6c>
   18aca:	2000      	movs	r0, #0
   18acc:	4ba1      	ldr	r3, [pc, #644]	; (18d54 <lv_theme_material_init+0x2218>)
   18ace:	4798      	blx	r3
   18ad0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18ad4:	3050      	adds	r0, #80	; 0x50
   18ad6:	4ba0      	ldr	r3, [pc, #640]	; (18d58 <lv_theme_material_init+0x221c>)
   18ad8:	fb83 2300 	smull	r2, r3, r3, r0
   18adc:	17c2      	asrs	r2, r0, #31
   18ade:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18ae2:	b212      	sxth	r2, r2
   18ae4:	f7fe bfe0 	b.w	17aa8 <lv_theme_material_init+0xf6c>
   18ae8:	2000      	movs	r0, #0
   18aea:	4b9a      	ldr	r3, [pc, #616]	; (18d54 <lv_theme_material_init+0x2218>)
   18aec:	4798      	blx	r3
   18aee:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18af2:	0040      	lsls	r0, r0, #1
   18af4:	3050      	adds	r0, #80	; 0x50
   18af6:	4b98      	ldr	r3, [pc, #608]	; (18d58 <lv_theme_material_init+0x221c>)
   18af8:	fb83 2300 	smull	r2, r3, r3, r0
   18afc:	17c2      	asrs	r2, r0, #31
   18afe:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18b02:	b212      	sxth	r2, r2
   18b04:	f7fe bfd0 	b.w	17aa8 <lv_theme_material_init+0xf6c>
    lv_style_set_pad_right(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   18b08:	2000      	movs	r0, #0
   18b0a:	4b92      	ldr	r3, [pc, #584]	; (18d54 <lv_theme_material_init+0x2218>)
   18b0c:	4798      	blx	r3
   18b0e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18b12:	3050      	adds	r0, #80	; 0x50
   18b14:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   18b18:	da02      	bge.n	18b20 <lv_theme_material_init+0x1fe4>
   18b1a:	2201      	movs	r2, #1
   18b1c:	f7fe bfdd 	b.w	17ada <lv_theme_material_init+0xf9e>
   18b20:	2000      	movs	r0, #0
   18b22:	4b8c      	ldr	r3, [pc, #560]	; (18d54 <lv_theme_material_init+0x2218>)
   18b24:	4798      	blx	r3
   18b26:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18b2a:	3050      	adds	r0, #80	; 0x50
   18b2c:	4b8a      	ldr	r3, [pc, #552]	; (18d58 <lv_theme_material_init+0x221c>)
   18b2e:	fb83 2300 	smull	r2, r3, r3, r0
   18b32:	17c2      	asrs	r2, r0, #31
   18b34:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18b38:	b212      	sxth	r2, r2
   18b3a:	f7fe bfce 	b.w	17ada <lv_theme_material_init+0xf9e>
   18b3e:	2000      	movs	r0, #0
   18b40:	4b84      	ldr	r3, [pc, #528]	; (18d54 <lv_theme_material_init+0x2218>)
   18b42:	4798      	blx	r3
   18b44:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18b48:	0040      	lsls	r0, r0, #1
   18b4a:	3050      	adds	r0, #80	; 0x50
   18b4c:	4b82      	ldr	r3, [pc, #520]	; (18d58 <lv_theme_material_init+0x221c>)
   18b4e:	fb83 2300 	smull	r2, r3, r3, r0
   18b52:	17c2      	asrs	r2, r0, #31
   18b54:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18b58:	b212      	sxth	r2, r2
   18b5a:	f7fe bfbe 	b.w	17ada <lv_theme_material_init+0xf9e>
    lv_style_set_pad_top(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   18b5e:	2000      	movs	r0, #0
   18b60:	4b7c      	ldr	r3, [pc, #496]	; (18d54 <lv_theme_material_init+0x2218>)
   18b62:	4798      	blx	r3
   18b64:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18b68:	3050      	adds	r0, #80	; 0x50
   18b6a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   18b6e:	da02      	bge.n	18b76 <lv_theme_material_init+0x203a>
   18b70:	2201      	movs	r2, #1
   18b72:	f7fe bfcb 	b.w	17b0c <lv_theme_material_init+0xfd0>
   18b76:	2000      	movs	r0, #0
   18b78:	4b76      	ldr	r3, [pc, #472]	; (18d54 <lv_theme_material_init+0x2218>)
   18b7a:	4798      	blx	r3
   18b7c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18b80:	3050      	adds	r0, #80	; 0x50
   18b82:	4b75      	ldr	r3, [pc, #468]	; (18d58 <lv_theme_material_init+0x221c>)
   18b84:	fb83 2300 	smull	r2, r3, r3, r0
   18b88:	17c2      	asrs	r2, r0, #31
   18b8a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18b8e:	b212      	sxth	r2, r2
   18b90:	f7fe bfbc 	b.w	17b0c <lv_theme_material_init+0xfd0>
   18b94:	2000      	movs	r0, #0
   18b96:	4b6f      	ldr	r3, [pc, #444]	; (18d54 <lv_theme_material_init+0x2218>)
   18b98:	4798      	blx	r3
   18b9a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18b9e:	0040      	lsls	r0, r0, #1
   18ba0:	3050      	adds	r0, #80	; 0x50
   18ba2:	4b6d      	ldr	r3, [pc, #436]	; (18d58 <lv_theme_material_init+0x221c>)
   18ba4:	fb83 2300 	smull	r2, r3, r3, r0
   18ba8:	17c2      	asrs	r2, r0, #31
   18baa:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18bae:	b212      	sxth	r2, r2
   18bb0:	f7fe bfac 	b.w	17b0c <lv_theme_material_init+0xfd0>
    lv_style_set_pad_bottom(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   18bb4:	2000      	movs	r0, #0
   18bb6:	4b67      	ldr	r3, [pc, #412]	; (18d54 <lv_theme_material_init+0x2218>)
   18bb8:	4798      	blx	r3
   18bba:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18bbe:	3050      	adds	r0, #80	; 0x50
   18bc0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   18bc4:	da02      	bge.n	18bcc <lv_theme_material_init+0x2090>
   18bc6:	2201      	movs	r2, #1
   18bc8:	f7fe bfb9 	b.w	17b3e <lv_theme_material_init+0x1002>
   18bcc:	2000      	movs	r0, #0
   18bce:	4b61      	ldr	r3, [pc, #388]	; (18d54 <lv_theme_material_init+0x2218>)
   18bd0:	4798      	blx	r3
   18bd2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18bd6:	3050      	adds	r0, #80	; 0x50
   18bd8:	4b5f      	ldr	r3, [pc, #380]	; (18d58 <lv_theme_material_init+0x221c>)
   18bda:	fb83 2300 	smull	r2, r3, r3, r0
   18bde:	17c2      	asrs	r2, r0, #31
   18be0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18be4:	b212      	sxth	r2, r2
   18be6:	f7fe bfaa 	b.w	17b3e <lv_theme_material_init+0x1002>
   18bea:	2000      	movs	r0, #0
   18bec:	4b59      	ldr	r3, [pc, #356]	; (18d54 <lv_theme_material_init+0x2218>)
   18bee:	4798      	blx	r3
   18bf0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18bf4:	0040      	lsls	r0, r0, #1
   18bf6:	3050      	adds	r0, #80	; 0x50
   18bf8:	4b57      	ldr	r3, [pc, #348]	; (18d58 <lv_theme_material_init+0x221c>)
   18bfa:	fb83 2300 	smull	r2, r3, r3, r0
   18bfe:	17c2      	asrs	r2, r0, #31
   18c00:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18c04:	b212      	sxth	r2, r2
   18c06:	f7fe bf9a 	b.w	17b3e <lv_theme_material_init+0x1002>
    lv_style_set_pad_inner(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   18c0a:	2000      	movs	r0, #0
   18c0c:	4b51      	ldr	r3, [pc, #324]	; (18d54 <lv_theme_material_init+0x2218>)
   18c0e:	4798      	blx	r3
   18c10:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18c14:	3050      	adds	r0, #80	; 0x50
   18c16:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   18c1a:	da02      	bge.n	18c22 <lv_theme_material_init+0x20e6>
   18c1c:	2201      	movs	r2, #1
   18c1e:	f7fe bfa7 	b.w	17b70 <lv_theme_material_init+0x1034>
   18c22:	2000      	movs	r0, #0
   18c24:	4b4b      	ldr	r3, [pc, #300]	; (18d54 <lv_theme_material_init+0x2218>)
   18c26:	4798      	blx	r3
   18c28:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18c2c:	3050      	adds	r0, #80	; 0x50
   18c2e:	4b4a      	ldr	r3, [pc, #296]	; (18d58 <lv_theme_material_init+0x221c>)
   18c30:	fb83 2300 	smull	r2, r3, r3, r0
   18c34:	17c2      	asrs	r2, r0, #31
   18c36:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18c3a:	b212      	sxth	r2, r2
   18c3c:	f7fe bf98 	b.w	17b70 <lv_theme_material_init+0x1034>
   18c40:	2000      	movs	r0, #0
   18c42:	4b44      	ldr	r3, [pc, #272]	; (18d54 <lv_theme_material_init+0x2218>)
   18c44:	4798      	blx	r3
   18c46:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18c4a:	0040      	lsls	r0, r0, #1
   18c4c:	3050      	adds	r0, #80	; 0x50
   18c4e:	4b42      	ldr	r3, [pc, #264]	; (18d58 <lv_theme_material_init+0x221c>)
   18c50:	fb83 2300 	smull	r2, r3, r3, r0
   18c54:	17c2      	asrs	r2, r0, #31
   18c56:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18c5a:	b212      	sxth	r2, r2
   18c5c:	f7fe bf88 	b.w	17b70 <lv_theme_material_init+0x1034>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DEFAULT, - PAD_DEF);
   18c60:	2000      	movs	r0, #0
   18c62:	4b3c      	ldr	r3, [pc, #240]	; (18d54 <lv_theme_material_init+0x2218>)
   18c64:	4798      	blx	r3
   18c66:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18c6a:	3050      	adds	r0, #80	; 0x50
   18c6c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   18c70:	da03      	bge.n	18c7a <lv_theme_material_init+0x213e>
   18c72:	f04f 32ff 	mov.w	r2, #4294967295
   18c76:	f7fe bf95 	b.w	17ba4 <lv_theme_material_init+0x1068>
   18c7a:	2000      	movs	r0, #0
   18c7c:	4b35      	ldr	r3, [pc, #212]	; (18d54 <lv_theme_material_init+0x2218>)
   18c7e:	4798      	blx	r3
   18c80:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18c84:	3050      	adds	r0, #80	; 0x50
   18c86:	4b34      	ldr	r3, [pc, #208]	; (18d58 <lv_theme_material_init+0x221c>)
   18c88:	fb83 2300 	smull	r2, r3, r3, r0
   18c8c:	17c2      	asrs	r2, r0, #31
   18c8e:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
   18c92:	b212      	sxth	r2, r2
   18c94:	f7fe bf86 	b.w	17ba4 <lv_theme_material_init+0x1068>
   18c98:	2000      	movs	r0, #0
   18c9a:	4b2e      	ldr	r3, [pc, #184]	; (18d54 <lv_theme_material_init+0x2218>)
   18c9c:	4798      	blx	r3
   18c9e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18ca2:	0040      	lsls	r0, r0, #1
   18ca4:	3050      	adds	r0, #80	; 0x50
   18ca6:	4b2c      	ldr	r3, [pc, #176]	; (18d58 <lv_theme_material_init+0x221c>)
   18ca8:	fb83 2300 	smull	r2, r3, r3, r0
   18cac:	17c2      	asrs	r2, r0, #31
   18cae:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
   18cb2:	b212      	sxth	r2, r2
   18cb4:	f7fe bf76 	b.w	17ba4 <lv_theme_material_init+0x1068>
    lv_style_set_text_line_space(&styles->ddlist_page, LV_STATE_DEFAULT, LV_DPX(20));
   18cb8:	2000      	movs	r0, #0
   18cba:	4b26      	ldr	r3, [pc, #152]	; (18d54 <lv_theme_material_init+0x2218>)
   18cbc:	4798      	blx	r3
   18cbe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18cc2:	0080      	lsls	r0, r0, #2
   18cc4:	3050      	adds	r0, #80	; 0x50
   18cc6:	4b24      	ldr	r3, [pc, #144]	; (18d58 <lv_theme_material_init+0x221c>)
   18cc8:	fb83 2300 	smull	r2, r3, r3, r0
   18ccc:	17c2      	asrs	r2, r0, #31
   18cce:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18cd2:	b212      	sxth	r2, r2
   18cd4:	f7fe bf9e 	b.w	17c14 <lv_theme_material_init+0x10d8>
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_PR);
   18cd8:	231d      	movs	r3, #29
   18cda:	213b      	movs	r1, #59	; 0x3b
   18cdc:	461c      	mov	r4, r3
   18cde:	f7fe bfc5 	b.w	17c6c <lv_theme_material_init+0x1130>
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
   18ce2:	2307      	movs	r3, #7
   18ce4:	210f      	movs	r1, #15
   18ce6:	2408      	movs	r4, #8
   18ce8:	f7fe bfd7 	b.w	17c9a <lv_theme_material_init+0x115e>
    lv_style_set_text_line_space(&styles->roller_bg, LV_STATE_DEFAULT, LV_DPX(25));
   18cec:	2000      	movs	r0, #0
   18cee:	4b19      	ldr	r3, [pc, #100]	; (18d54 <lv_theme_material_init+0x2218>)
   18cf0:	4798      	blx	r3
   18cf2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18cf6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18cfa:	3050      	adds	r0, #80	; 0x50
   18cfc:	4b16      	ldr	r3, [pc, #88]	; (18d58 <lv_theme_material_init+0x221c>)
   18cfe:	fb83 2300 	smull	r2, r3, r3, r0
   18d02:	17c2      	asrs	r2, r0, #31
   18d04:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18d08:	b212      	sxth	r2, r2
   18d0a:	f7fe bfe6 	b.w	17cda <lv_theme_material_init+0x119e>
    lv_style_set_bg_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_BG);
   18d0e:	231f      	movs	r3, #31
   18d10:	213f      	movs	r1, #63	; 0x3f
   18d12:	461c      	mov	r4, r3
   18d14:	f7ff b810 	b.w	17d38 <lv_theme_material_init+0x11fc>
    lv_style_set_border_width(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(5));
   18d18:	2000      	movs	r0, #0
   18d1a:	4b0e      	ldr	r3, [pc, #56]	; (18d54 <lv_theme_material_init+0x2218>)
   18d1c:	4798      	blx	r3
   18d1e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18d22:	3050      	adds	r0, #80	; 0x50
   18d24:	4b0c      	ldr	r3, [pc, #48]	; (18d58 <lv_theme_material_init+0x221c>)
   18d26:	fb83 2300 	smull	r2, r3, r3, r0
   18d2a:	17c2      	asrs	r2, r0, #31
   18d2c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18d30:	b212      	sxth	r2, r2
   18d32:	f7ff b845 	b.w	17dc0 <lv_theme_material_init+0x1284>
    lv_style_set_pad_top(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
   18d36:	2000      	movs	r0, #0
   18d38:	4b06      	ldr	r3, [pc, #24]	; (18d54 <lv_theme_material_init+0x2218>)
   18d3a:	4798      	blx	r3
   18d3c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   18d40:	3050      	adds	r0, #80	; 0x50
   18d42:	4b05      	ldr	r3, [pc, #20]	; (18d58 <lv_theme_material_init+0x221c>)
   18d44:	fb83 2300 	smull	r2, r3, r3, r0
   18d48:	17c2      	asrs	r2, r0, #31
   18d4a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18d4e:	b212      	sxth	r2, r2
   18d50:	f7ff b87f 	b.w	17e52 <lv_theme_material_init+0x1316>
   18d54:	00010f31 	.word	0x00010f31
   18d58:	66666667 	.word	0x66666667
    lv_style_set_pad_left(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
   18d5c:	2000      	movs	r0, #0
   18d5e:	4bca      	ldr	r3, [pc, #808]	; (19088 <lv_theme_material_init+0x254c>)
   18d60:	4798      	blx	r3
   18d62:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   18d66:	3050      	adds	r0, #80	; 0x50
   18d68:	4bc8      	ldr	r3, [pc, #800]	; (1908c <lv_theme_material_init+0x2550>)
   18d6a:	fb83 2300 	smull	r2, r3, r3, r0
   18d6e:	17c2      	asrs	r2, r0, #31
   18d70:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18d74:	b212      	sxth	r2, r2
   18d76:	f7ff b87e 	b.w	17e76 <lv_theme_material_init+0x133a>
    lv_style_set_pad_right(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
   18d7a:	2000      	movs	r0, #0
   18d7c:	4bc2      	ldr	r3, [pc, #776]	; (19088 <lv_theme_material_init+0x254c>)
   18d7e:	4798      	blx	r3
   18d80:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   18d84:	3050      	adds	r0, #80	; 0x50
   18d86:	4bc1      	ldr	r3, [pc, #772]	; (1908c <lv_theme_material_init+0x2550>)
   18d88:	fb83 2300 	smull	r2, r3, r3, r0
   18d8c:	17c2      	asrs	r2, r0, #31
   18d8e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18d92:	b212      	sxth	r2, r2
   18d94:	f7ff b881 	b.w	17e9a <lv_theme_material_init+0x135e>
    lv_style_set_pad_top(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
   18d98:	2000      	movs	r0, #0
   18d9a:	4bbb      	ldr	r3, [pc, #748]	; (19088 <lv_theme_material_init+0x254c>)
   18d9c:	4798      	blx	r3
   18d9e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18da2:	0080      	lsls	r0, r0, #2
   18da4:	3050      	adds	r0, #80	; 0x50
   18da6:	4bb9      	ldr	r3, [pc, #740]	; (1908c <lv_theme_material_init+0x2550>)
   18da8:	fb83 2300 	smull	r2, r3, r3, r0
   18dac:	17c2      	asrs	r2, r0, #31
   18dae:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18db2:	b212      	sxth	r2, r2
   18db4:	f7ff b8ba 	b.w	17f2c <lv_theme_material_init+0x13f0>
    lv_style_set_pad_bottom(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
   18db8:	2000      	movs	r0, #0
   18dba:	4bb3      	ldr	r3, [pc, #716]	; (19088 <lv_theme_material_init+0x254c>)
   18dbc:	4798      	blx	r3
   18dbe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18dc2:	0080      	lsls	r0, r0, #2
   18dc4:	3050      	adds	r0, #80	; 0x50
   18dc6:	4bb1      	ldr	r3, [pc, #708]	; (1908c <lv_theme_material_init+0x2550>)
   18dc8:	fb83 2300 	smull	r2, r3, r3, r0
   18dcc:	17c2      	asrs	r2, r0, #31
   18dce:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18dd2:	b212      	sxth	r2, r2
   18dd4:	f7ff b8bd 	b.w	17f52 <lv_theme_material_init+0x1416>
    lv_style_set_size(&styles->tabview_indic, LV_STATE_DEFAULT, LV_DPX(5));
   18dd8:	2000      	movs	r0, #0
   18dda:	4bab      	ldr	r3, [pc, #684]	; (19088 <lv_theme_material_init+0x254c>)
   18ddc:	4798      	blx	r3
   18dde:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18de2:	3050      	adds	r0, #80	; 0x50
   18de4:	4ba9      	ldr	r3, [pc, #676]	; (1908c <lv_theme_material_init+0x2550>)
   18de6:	fb83 2300 	smull	r2, r3, r3, r0
   18dea:	17c2      	asrs	r2, r0, #31
   18dec:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18df0:	b212      	sxth	r2, r2
   18df2:	f7ff b8e2 	b.w	17fba <lv_theme_material_init+0x147e>
    lv_style_set_pad_top(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   18df6:	2000      	movs	r0, #0
   18df8:	4ba3      	ldr	r3, [pc, #652]	; (19088 <lv_theme_material_init+0x254c>)
   18dfa:	4798      	blx	r3
   18dfc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18e00:	3050      	adds	r0, #80	; 0x50
   18e02:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   18e06:	da02      	bge.n	18e0e <lv_theme_material_init+0x22d2>
   18e08:	2201      	movs	r2, #1
   18e0a:	f7ff b8f9 	b.w	18000 <lv_theme_material_init+0x14c4>
   18e0e:	2000      	movs	r0, #0
   18e10:	4b9d      	ldr	r3, [pc, #628]	; (19088 <lv_theme_material_init+0x254c>)
   18e12:	4798      	blx	r3
   18e14:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18e18:	3050      	adds	r0, #80	; 0x50
   18e1a:	4b9c      	ldr	r3, [pc, #624]	; (1908c <lv_theme_material_init+0x2550>)
   18e1c:	fb83 2300 	smull	r2, r3, r3, r0
   18e20:	17c2      	asrs	r2, r0, #31
   18e22:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18e26:	b212      	sxth	r2, r2
   18e28:	f7ff b8ea 	b.w	18000 <lv_theme_material_init+0x14c4>
   18e2c:	2000      	movs	r0, #0
   18e2e:	4b96      	ldr	r3, [pc, #600]	; (19088 <lv_theme_material_init+0x254c>)
   18e30:	4798      	blx	r3
   18e32:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18e36:	0040      	lsls	r0, r0, #1
   18e38:	3050      	adds	r0, #80	; 0x50
   18e3a:	4b94      	ldr	r3, [pc, #592]	; (1908c <lv_theme_material_init+0x2550>)
   18e3c:	fb83 2300 	smull	r2, r3, r3, r0
   18e40:	17c2      	asrs	r2, r0, #31
   18e42:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18e46:	b212      	sxth	r2, r2
   18e48:	f7ff b8da 	b.w	18000 <lv_theme_material_init+0x14c4>
    lv_style_set_pad_bottom(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   18e4c:	2000      	movs	r0, #0
   18e4e:	4b8e      	ldr	r3, [pc, #568]	; (19088 <lv_theme_material_init+0x254c>)
   18e50:	4798      	blx	r3
   18e52:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18e56:	3050      	adds	r0, #80	; 0x50
   18e58:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   18e5c:	da02      	bge.n	18e64 <lv_theme_material_init+0x2328>
   18e5e:	2201      	movs	r2, #1
   18e60:	f7ff b8e7 	b.w	18032 <lv_theme_material_init+0x14f6>
   18e64:	2000      	movs	r0, #0
   18e66:	4b88      	ldr	r3, [pc, #544]	; (19088 <lv_theme_material_init+0x254c>)
   18e68:	4798      	blx	r3
   18e6a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18e6e:	3050      	adds	r0, #80	; 0x50
   18e70:	4b86      	ldr	r3, [pc, #536]	; (1908c <lv_theme_material_init+0x2550>)
   18e72:	fb83 2300 	smull	r2, r3, r3, r0
   18e76:	17c2      	asrs	r2, r0, #31
   18e78:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18e7c:	b212      	sxth	r2, r2
   18e7e:	f7ff b8d8 	b.w	18032 <lv_theme_material_init+0x14f6>
   18e82:	2000      	movs	r0, #0
   18e84:	4b80      	ldr	r3, [pc, #512]	; (19088 <lv_theme_material_init+0x254c>)
   18e86:	4798      	blx	r3
   18e88:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18e8c:	0040      	lsls	r0, r0, #1
   18e8e:	3050      	adds	r0, #80	; 0x50
   18e90:	4b7e      	ldr	r3, [pc, #504]	; (1908c <lv_theme_material_init+0x2550>)
   18e92:	fb83 2300 	smull	r2, r3, r3, r0
   18e96:	17c2      	asrs	r2, r0, #31
   18e98:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18e9c:	b212      	sxth	r2, r2
   18e9e:	f7ff b8c8 	b.w	18032 <lv_theme_material_init+0x14f6>
    lv_style_set_pad_left(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   18ea2:	2000      	movs	r0, #0
   18ea4:	4b78      	ldr	r3, [pc, #480]	; (19088 <lv_theme_material_init+0x254c>)
   18ea6:	4798      	blx	r3
   18ea8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18eac:	3050      	adds	r0, #80	; 0x50
   18eae:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   18eb2:	da02      	bge.n	18eba <lv_theme_material_init+0x237e>
   18eb4:	2201      	movs	r2, #1
   18eb6:	f7ff b8d5 	b.w	18064 <lv_theme_material_init+0x1528>
   18eba:	2000      	movs	r0, #0
   18ebc:	4b72      	ldr	r3, [pc, #456]	; (19088 <lv_theme_material_init+0x254c>)
   18ebe:	4798      	blx	r3
   18ec0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18ec4:	3050      	adds	r0, #80	; 0x50
   18ec6:	4b71      	ldr	r3, [pc, #452]	; (1908c <lv_theme_material_init+0x2550>)
   18ec8:	fb83 2300 	smull	r2, r3, r3, r0
   18ecc:	17c2      	asrs	r2, r0, #31
   18ece:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18ed2:	b212      	sxth	r2, r2
   18ed4:	f7ff b8c6 	b.w	18064 <lv_theme_material_init+0x1528>
   18ed8:	2000      	movs	r0, #0
   18eda:	4b6b      	ldr	r3, [pc, #428]	; (19088 <lv_theme_material_init+0x254c>)
   18edc:	4798      	blx	r3
   18ede:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18ee2:	0040      	lsls	r0, r0, #1
   18ee4:	3050      	adds	r0, #80	; 0x50
   18ee6:	4b69      	ldr	r3, [pc, #420]	; (1908c <lv_theme_material_init+0x2550>)
   18ee8:	fb83 2300 	smull	r2, r3, r3, r0
   18eec:	17c2      	asrs	r2, r0, #31
   18eee:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18ef2:	b212      	sxth	r2, r2
   18ef4:	f7ff b8b6 	b.w	18064 <lv_theme_material_init+0x1528>
    lv_style_set_pad_right(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   18ef8:	2000      	movs	r0, #0
   18efa:	4b63      	ldr	r3, [pc, #396]	; (19088 <lv_theme_material_init+0x254c>)
   18efc:	4798      	blx	r3
   18efe:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18f02:	3050      	adds	r0, #80	; 0x50
   18f04:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   18f08:	da02      	bge.n	18f10 <lv_theme_material_init+0x23d4>
   18f0a:	2201      	movs	r2, #1
   18f0c:	f7ff b8d4 	b.w	180b8 <lv_theme_material_init+0x157c>
   18f10:	2000      	movs	r0, #0
   18f12:	4b5d      	ldr	r3, [pc, #372]	; (19088 <lv_theme_material_init+0x254c>)
   18f14:	4798      	blx	r3
   18f16:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18f1a:	3050      	adds	r0, #80	; 0x50
   18f1c:	4b5b      	ldr	r3, [pc, #364]	; (1908c <lv_theme_material_init+0x2550>)
   18f1e:	fb83 2300 	smull	r2, r3, r3, r0
   18f22:	17c2      	asrs	r2, r0, #31
   18f24:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18f28:	b212      	sxth	r2, r2
   18f2a:	f7ff b8c5 	b.w	180b8 <lv_theme_material_init+0x157c>
   18f2e:	2000      	movs	r0, #0
   18f30:	4b55      	ldr	r3, [pc, #340]	; (19088 <lv_theme_material_init+0x254c>)
   18f32:	4798      	blx	r3
   18f34:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18f38:	0040      	lsls	r0, r0, #1
   18f3a:	3050      	adds	r0, #80	; 0x50
   18f3c:	4b53      	ldr	r3, [pc, #332]	; (1908c <lv_theme_material_init+0x2550>)
   18f3e:	fb83 2300 	smull	r2, r3, r3, r0
   18f42:	17c2      	asrs	r2, r0, #31
   18f44:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18f48:	b212      	sxth	r2, r2
   18f4a:	f7ff b8b5 	b.w	180b8 <lv_theme_material_init+0x157c>
    lv_style_set_pad_inner(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   18f4e:	2000      	movs	r0, #0
   18f50:	4b4d      	ldr	r3, [pc, #308]	; (19088 <lv_theme_material_init+0x254c>)
   18f52:	4798      	blx	r3
   18f54:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18f58:	3050      	adds	r0, #80	; 0x50
   18f5a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   18f5e:	da02      	bge.n	18f66 <lv_theme_material_init+0x242a>
   18f60:	2201      	movs	r2, #1
   18f62:	f7ff b8c2 	b.w	180ea <lv_theme_material_init+0x15ae>
   18f66:	2000      	movs	r0, #0
   18f68:	4b47      	ldr	r3, [pc, #284]	; (19088 <lv_theme_material_init+0x254c>)
   18f6a:	4798      	blx	r3
   18f6c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18f70:	3050      	adds	r0, #80	; 0x50
   18f72:	4b46      	ldr	r3, [pc, #280]	; (1908c <lv_theme_material_init+0x2550>)
   18f74:	fb83 2300 	smull	r2, r3, r3, r0
   18f78:	17c2      	asrs	r2, r0, #31
   18f7a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18f7e:	b212      	sxth	r2, r2
   18f80:	f7ff b8b3 	b.w	180ea <lv_theme_material_init+0x15ae>
   18f84:	2000      	movs	r0, #0
   18f86:	4b40      	ldr	r3, [pc, #256]	; (19088 <lv_theme_material_init+0x254c>)
   18f88:	4798      	blx	r3
   18f8a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18f8e:	0040      	lsls	r0, r0, #1
   18f90:	3050      	adds	r0, #80	; 0x50
   18f92:	4b3e      	ldr	r3, [pc, #248]	; (1908c <lv_theme_material_init+0x2550>)
   18f94:	fb83 2300 	smull	r2, r3, r3, r0
   18f98:	17c2      	asrs	r2, r0, #31
   18f9a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18f9e:	b212      	sxth	r2, r2
   18fa0:	f7ff b8a3 	b.w	180ea <lv_theme_material_init+0x15ae>
    lv_style_set_pad_left(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
   18fa4:	2000      	movs	r0, #0
   18fa6:	4b38      	ldr	r3, [pc, #224]	; (19088 <lv_theme_material_init+0x254c>)
   18fa8:	4798      	blx	r3
   18faa:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18fae:	3050      	adds	r0, #80	; 0x50
   18fb0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   18fb4:	da02      	bge.n	18fbc <lv_theme_material_init+0x2480>
   18fb6:	2201      	movs	r2, #1
   18fb8:	f7ff b8d9 	b.w	1816e <lv_theme_material_init+0x1632>
   18fbc:	2000      	movs	r0, #0
   18fbe:	4b32      	ldr	r3, [pc, #200]	; (19088 <lv_theme_material_init+0x254c>)
   18fc0:	4798      	blx	r3
   18fc2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18fc6:	3050      	adds	r0, #80	; 0x50
   18fc8:	4b30      	ldr	r3, [pc, #192]	; (1908c <lv_theme_material_init+0x2550>)
   18fca:	fb83 2300 	smull	r2, r3, r3, r0
   18fce:	17c2      	asrs	r2, r0, #31
   18fd0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18fd4:	b212      	sxth	r2, r2
   18fd6:	f7ff b8ca 	b.w	1816e <lv_theme_material_init+0x1632>
   18fda:	2000      	movs	r0, #0
   18fdc:	4b2a      	ldr	r3, [pc, #168]	; (19088 <lv_theme_material_init+0x254c>)
   18fde:	4798      	blx	r3
   18fe0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18fe4:	0040      	lsls	r0, r0, #1
   18fe6:	3050      	adds	r0, #80	; 0x50
   18fe8:	4b28      	ldr	r3, [pc, #160]	; (1908c <lv_theme_material_init+0x2550>)
   18fea:	fb83 2300 	smull	r2, r3, r3, r0
   18fee:	17c2      	asrs	r2, r0, #31
   18ff0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18ff4:	b212      	sxth	r2, r2
   18ff6:	f7ff b8ba 	b.w	1816e <lv_theme_material_init+0x1632>
    lv_style_set_pad_right(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
   18ffa:	2000      	movs	r0, #0
   18ffc:	4b22      	ldr	r3, [pc, #136]	; (19088 <lv_theme_material_init+0x254c>)
   18ffe:	4798      	blx	r3
   19000:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   19004:	3050      	adds	r0, #80	; 0x50
   19006:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1900a:	da02      	bge.n	19012 <lv_theme_material_init+0x24d6>
   1900c:	2201      	movs	r2, #1
   1900e:	f7ff b8c7 	b.w	181a0 <lv_theme_material_init+0x1664>
   19012:	2000      	movs	r0, #0
   19014:	4b1c      	ldr	r3, [pc, #112]	; (19088 <lv_theme_material_init+0x254c>)
   19016:	4798      	blx	r3
   19018:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1901c:	3050      	adds	r0, #80	; 0x50
   1901e:	4b1b      	ldr	r3, [pc, #108]	; (1908c <lv_theme_material_init+0x2550>)
   19020:	fb83 2300 	smull	r2, r3, r3, r0
   19024:	17c2      	asrs	r2, r0, #31
   19026:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   1902a:	b212      	sxth	r2, r2
   1902c:	f7ff b8b8 	b.w	181a0 <lv_theme_material_init+0x1664>
   19030:	2000      	movs	r0, #0
   19032:	4b15      	ldr	r3, [pc, #84]	; (19088 <lv_theme_material_init+0x254c>)
   19034:	4798      	blx	r3
   19036:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1903a:	0040      	lsls	r0, r0, #1
   1903c:	3050      	adds	r0, #80	; 0x50
   1903e:	4b13      	ldr	r3, [pc, #76]	; (1908c <lv_theme_material_init+0x2550>)
   19040:	fb83 2300 	smull	r2, r3, r3, r0
   19044:	17c2      	asrs	r2, r0, #31
   19046:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   1904a:	b212      	sxth	r2, r2
   1904c:	f7ff b8a8 	b.w	181a0 <lv_theme_material_init+0x1664>
    lv_style_set_pad_top(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
   19050:	2000      	movs	r0, #0
   19052:	4b0d      	ldr	r3, [pc, #52]	; (19088 <lv_theme_material_init+0x254c>)
   19054:	4798      	blx	r3
   19056:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1905a:	3050      	adds	r0, #80	; 0x50
   1905c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   19060:	da02      	bge.n	19068 <lv_theme_material_init+0x252c>
   19062:	2201      	movs	r2, #1
   19064:	f7ff b8b5 	b.w	181d2 <lv_theme_material_init+0x1696>
   19068:	2000      	movs	r0, #0
   1906a:	4b07      	ldr	r3, [pc, #28]	; (19088 <lv_theme_material_init+0x254c>)
   1906c:	4798      	blx	r3
   1906e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   19072:	3050      	adds	r0, #80	; 0x50
   19074:	4b05      	ldr	r3, [pc, #20]	; (1908c <lv_theme_material_init+0x2550>)
   19076:	fb83 2300 	smull	r2, r3, r3, r0
   1907a:	17c2      	asrs	r2, r0, #31
   1907c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   19080:	b212      	sxth	r2, r2
   19082:	f7ff b8a6 	b.w	181d2 <lv_theme_material_init+0x1696>
   19086:	bf00      	nop
   19088:	00010f31 	.word	0x00010f31
   1908c:	66666667 	.word	0x66666667
   19090:	2000      	movs	r0, #0
   19092:	4b1d      	ldr	r3, [pc, #116]	; (19108 <lv_theme_material_init+0x25cc>)
   19094:	4798      	blx	r3
   19096:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1909a:	0040      	lsls	r0, r0, #1
   1909c:	3050      	adds	r0, #80	; 0x50
   1909e:	4b1b      	ldr	r3, [pc, #108]	; (1910c <lv_theme_material_init+0x25d0>)
   190a0:	fb83 2300 	smull	r2, r3, r3, r0
   190a4:	17c2      	asrs	r2, r0, #31
   190a6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   190aa:	b212      	sxth	r2, r2
   190ac:	f7ff b891 	b.w	181d2 <lv_theme_material_init+0x1696>
    lv_style_set_pad_bottom(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
   190b0:	2000      	movs	r0, #0
   190b2:	4b15      	ldr	r3, [pc, #84]	; (19108 <lv_theme_material_init+0x25cc>)
   190b4:	4798      	blx	r3
   190b6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   190ba:	3050      	adds	r0, #80	; 0x50
   190bc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   190c0:	da02      	bge.n	190c8 <lv_theme_material_init+0x258c>
   190c2:	2201      	movs	r2, #1
   190c4:	f7ff b89e 	b.w	18204 <lv_theme_material_init+0x16c8>
   190c8:	2000      	movs	r0, #0
   190ca:	4b0f      	ldr	r3, [pc, #60]	; (19108 <lv_theme_material_init+0x25cc>)
   190cc:	4798      	blx	r3
   190ce:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   190d2:	3050      	adds	r0, #80	; 0x50
   190d4:	4b0d      	ldr	r3, [pc, #52]	; (1910c <lv_theme_material_init+0x25d0>)
   190d6:	fb83 2300 	smull	r2, r3, r3, r0
   190da:	17c2      	asrs	r2, r0, #31
   190dc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   190e0:	b212      	sxth	r2, r2
   190e2:	f7ff b88f 	b.w	18204 <lv_theme_material_init+0x16c8>
   190e6:	2000      	movs	r0, #0
   190e8:	4b07      	ldr	r3, [pc, #28]	; (19108 <lv_theme_material_init+0x25cc>)
   190ea:	4798      	blx	r3
   190ec:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   190f0:	0040      	lsls	r0, r0, #1
   190f2:	3050      	adds	r0, #80	; 0x50
   190f4:	4b05      	ldr	r3, [pc, #20]	; (1910c <lv_theme_material_init+0x25d0>)
   190f6:	fb83 2300 	smull	r2, r3, r3, r0
   190fa:	17c2      	asrs	r2, r0, #31
   190fc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   19100:	b212      	sxth	r2, r2
   19102:	f7ff b87f 	b.w	18204 <lv_theme_material_init+0x16c8>
   19106:	bf00      	nop
   19108:	00010f31 	.word	0x00010f31
   1910c:	66666667 	.word	0x66666667

00019110 <lv_img_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return an element of `lv_design_res_t`
 */
static lv_design_res_t lv_img_design(lv_obj_t * img, const lv_area_t * clip_area, lv_design_mode_t mode)
{
   19110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19114:	b0a4      	sub	sp, #144	; 0x90
   19116:	4607      	mov	r7, r0
   19118:	460e      	mov	r6, r1
   1911a:	4614      	mov	r4, r2
    lv_img_ext_t * ext       = lv_obj_get_ext_attr(img);
   1911c:	4bb5      	ldr	r3, [pc, #724]	; (193f4 <lv_img_design+0x2e4>)
   1911e:	4798      	blx	r3
   19120:	4605      	mov	r5, r0

    if(mode == LV_DESIGN_COVER_CHK) {
   19122:	2c02      	cmp	r4, #2
   19124:	d00d      	beq.n	19142 <lv_img_design+0x32>

        if(lv_obj_get_style_image_opa(img, LV_IMG_PART_MAIN) != LV_OPA_COVER) return LV_DESIGN_RES_NOT_COVER;

        return LV_DESIGN_RES_COVER;
    }
    else if(mode == LV_DESIGN_DRAW_MAIN) {
   19126:	2c00      	cmp	r4, #0
   19128:	f040 81fa 	bne.w	19520 <lv_img_design+0x410>
        if(ext->h == 0 || ext->w == 0) return true;
   1912c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   19130:	2b00      	cmp	r3, #0
   19132:	f000 81f3 	beq.w	1951c <lv_img_design+0x40c>
   19136:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   1913a:	2b00      	cmp	r3, #0
   1913c:	d173      	bne.n	19226 <lv_img_design+0x116>
   1913e:	2001      	movs	r0, #1
   19140:	e1f1      	b.n	19526 <lv_img_design+0x416>
    _OBJ_GET_STYLE_##scalar(prop_name, func_name, value_type, style_type)                                               \
    _OBJ_SET_STYLE_LOCAL_##scalar(prop_name, func_name, value_type, style_type)                                         \
    _OBJ_SET_STYLE_##scalar(prop_name, func_name, value_type, style_type)

_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
   19142:	2202      	movs	r2, #2
   19144:	2100      	movs	r1, #0
   19146:	4638      	mov	r0, r7
   19148:	4bab      	ldr	r3, [pc, #684]	; (193f8 <lv_img_design+0x2e8>)
   1914a:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(img, LV_IMG_PART_MAIN)) return LV_DESIGN_RES_MASKED;
   1914c:	b108      	cbz	r0, 19152 <lv_img_design+0x42>
   1914e:	2003      	movs	r0, #3
   19150:	e1e9      	b.n	19526 <lv_img_design+0x416>
        if(ext->src_type == LV_IMG_SRC_UNKNOWN || ext->src_type == LV_IMG_SRC_SYMBOL) return LV_DESIGN_RES_NOT_COVER;
   19152:	7d2a      	ldrb	r2, [r5, #20]
   19154:	f002 0303 	and.w	r3, r2, #3
   19158:	3b02      	subs	r3, #2
   1915a:	b2db      	uxtb	r3, r3
   1915c:	2b01      	cmp	r3, #1
   1915e:	f240 820f 	bls.w	19580 <lv_img_design+0x470>
        if(ext->cf != LV_IMG_CF_TRUE_COLOR && ext->cf != LV_IMG_CF_RAW) return LV_DESIGN_RES_NOT_COVER;
   19162:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
   19166:	2a20      	cmp	r2, #32
   19168:	d003      	beq.n	19172 <lv_img_design+0x62>
   1916a:	2a08      	cmp	r2, #8
   1916c:	d001      	beq.n	19172 <lv_img_design+0x62>
   1916e:	2002      	movs	r0, #2
   19170:	e1d9      	b.n	19526 <lv_img_design+0x416>
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
   19172:	2206      	movs	r2, #6
   19174:	2100      	movs	r1, #0
   19176:	4638      	mov	r0, r7
   19178:	4b9f      	ldr	r3, [pc, #636]	; (193f8 <lv_img_design+0x2e8>)
   1917a:	4798      	blx	r3
        angle_final += ext->angle;
   1917c:	89ab      	ldrh	r3, [r5, #12]
        if(angle_final == 0) return LV_DESIGN_RES_NOT_COVER;
   1917e:	42c3      	cmn	r3, r0
   19180:	d101      	bne.n	19186 <lv_img_design+0x76>
   19182:	2002      	movs	r0, #2
   19184:	e1cf      	b.n	19526 <lv_img_design+0x416>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
   19186:	2207      	movs	r2, #7
   19188:	2100      	movs	r1, #0
   1918a:	4638      	mov	r0, r7
   1918c:	4b9a      	ldr	r3, [pc, #616]	; (193f8 <lv_img_design+0x2e8>)
   1918e:	4798      	blx	r3
        zoom_final = (zoom_final * ext->zoom) >> 8;
   19190:	8a6b      	ldrh	r3, [r5, #18]
   19192:	fb00 f303 	mul.w	r3, r0, r3
   19196:	121b      	asrs	r3, r3, #8
        if(zoom_final != LV_IMG_ZOOM_NONE) {
   19198:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1919c:	d008      	beq.n	191b0 <lv_img_design+0xa0>
            if(_lv_area_is_in(clip_area, &img->coords, 0) == false) return LV_DESIGN_RES_NOT_COVER;
   1919e:	2200      	movs	r2, #0
   191a0:	f107 0110 	add.w	r1, r7, #16
   191a4:	4630      	mov	r0, r6
   191a6:	4b95      	ldr	r3, [pc, #596]	; (193fc <lv_img_design+0x2ec>)
   191a8:	4798      	blx	r3
   191aa:	bb88      	cbnz	r0, 19210 <lv_img_design+0x100>
   191ac:	2002      	movs	r0, #2
   191ae:	e1ba      	b.n	19526 <lv_img_design+0x416>
            _lv_img_buf_get_transformed_area(&a, lv_obj_get_width(img), lv_obj_get_height(img), 0, zoom_final, &ext->pivot);
   191b0:	4638      	mov	r0, r7
   191b2:	4b93      	ldr	r3, [pc, #588]	; (19400 <lv_img_design+0x2f0>)
   191b4:	4798      	blx	r3
   191b6:	4604      	mov	r4, r0
   191b8:	4638      	mov	r0, r7
   191ba:	4b92      	ldr	r3, [pc, #584]	; (19404 <lv_img_design+0x2f4>)
   191bc:	4798      	blx	r3
   191be:	350e      	adds	r5, #14
   191c0:	9501      	str	r5, [sp, #4]
   191c2:	f44f 7380 	mov.w	r3, #256	; 0x100
   191c6:	9300      	str	r3, [sp, #0]
   191c8:	2300      	movs	r3, #0
   191ca:	4602      	mov	r2, r0
   191cc:	4621      	mov	r1, r4
   191ce:	a80f      	add	r0, sp, #60	; 0x3c
   191d0:	4c8d      	ldr	r4, [pc, #564]	; (19408 <lv_img_design+0x2f8>)
   191d2:	47a0      	blx	r4
            a.x1 += img->coords.x1;
   191d4:	8a3a      	ldrh	r2, [r7, #16]
   191d6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   191da:	4413      	add	r3, r2
   191dc:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
            a.y1 += img->coords.y1;
   191e0:	8a7b      	ldrh	r3, [r7, #18]
   191e2:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
   191e6:	4419      	add	r1, r3
   191e8:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
            a.x2 += img->coords.x1;
   191ec:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
   191f0:	440a      	add	r2, r1
   191f2:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
            a.y2 += img->coords.y1;
   191f6:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
   191fa:	4413      	add	r3, r2
   191fc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            if(_lv_area_is_in(clip_area, &a, 0) == false) return LV_DESIGN_RES_NOT_COVER;
   19200:	2200      	movs	r2, #0
   19202:	a90f      	add	r1, sp, #60	; 0x3c
   19204:	4630      	mov	r0, r6
   19206:	4b7d      	ldr	r3, [pc, #500]	; (193fc <lv_img_design+0x2ec>)
   19208:	4798      	blx	r3
   1920a:	b908      	cbnz	r0, 19210 <lv_img_design+0x100>
   1920c:	2002      	movs	r0, #2
   1920e:	e18a      	b.n	19526 <lv_img_design+0x416>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
   19210:	f248 02ac 	movw	r2, #32940	; 0x80ac
   19214:	2100      	movs	r1, #0
   19216:	4638      	mov	r0, r7
   19218:	4b7c      	ldr	r3, [pc, #496]	; (1940c <lv_img_design+0x2fc>)
   1921a:	4798      	blx	r3
        return LV_DESIGN_RES_COVER;
   1921c:	28ff      	cmp	r0, #255	; 0xff
   1921e:	bf14      	ite	ne
   19220:	2002      	movne	r0, #2
   19222:	2001      	moveq	r0, #1
   19224:	e17f      	b.n	19526 <lv_img_design+0x416>
        lv_area_t img_coords;

        lv_obj_get_coords(img, &img_coords);
   19226:	a902      	add	r1, sp, #8
   19228:	4638      	mov	r0, r7
   1922a:	4b79      	ldr	r3, [pc, #484]	; (19410 <lv_img_design+0x300>)
   1922c:	4798      	blx	r3

        lv_draw_rect_dsc_t bg_dsc;
        lv_draw_rect_dsc_init(&bg_dsc);
   1922e:	a80f      	add	r0, sp, #60	; 0x3c
   19230:	4b78      	ldr	r3, [pc, #480]	; (19414 <lv_img_design+0x304>)
   19232:	4798      	blx	r3
        lv_obj_init_draw_rect_dsc(img, LV_IMG_PART_MAIN, &bg_dsc);
   19234:	aa0f      	add	r2, sp, #60	; 0x3c
   19236:	2100      	movs	r1, #0
   19238:	4638      	mov	r0, r7
   1923a:	4b77      	ldr	r3, [pc, #476]	; (19418 <lv_img_design+0x308>)
   1923c:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
   1923e:	2233      	movs	r2, #51	; 0x33
   19240:	2100      	movs	r1, #0
   19242:	4638      	mov	r0, r7
   19244:	4b6c      	ldr	r3, [pc, #432]	; (193f8 <lv_img_design+0x2e8>)
   19246:	4798      	blx	r3

        /*If the border is drawn later disable loading its properties*/
        if(lv_obj_get_style_border_post(img, LV_OBJ_PART_MAIN)) {
   19248:	b110      	cbz	r0, 19250 <lv_img_design+0x140>
            bg_dsc.border_opa = LV_OPA_TRANSP;
   1924a:	2300      	movs	r3, #0
   1924c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
   19250:	2207      	movs	r2, #7
   19252:	2100      	movs	r1, #0
   19254:	4638      	mov	r0, r7
   19256:	4b68      	ldr	r3, [pc, #416]	; (193f8 <lv_img_design+0x2e8>)
   19258:	4798      	blx	r3
        }


        int32_t zoom_final = lv_obj_get_style_transform_zoom(img, LV_IMG_PART_MAIN);
        zoom_final = (zoom_final * ext->zoom) >> 8;
   1925a:	8a6b      	ldrh	r3, [r5, #18]
   1925c:	fb00 f003 	mul.w	r0, r0, r3

        if(zoom_final == 0) return LV_DESIGN_RES_OK;
   19260:	1204      	asrs	r4, r0, #8
   19262:	d101      	bne.n	19268 <lv_img_design+0x158>
   19264:	2000      	movs	r0, #0
   19266:	e15e      	b.n	19526 <lv_img_design+0x416>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
   19268:	2206      	movs	r2, #6
   1926a:	2100      	movs	r1, #0
   1926c:	4638      	mov	r0, r7
   1926e:	f8df 8188 	ldr.w	r8, [pc, #392]	; 193f8 <lv_img_design+0x2e8>
   19272:	47c0      	blx	r8

        int32_t angle_final = lv_obj_get_style_transform_angle(img, LV_IMG_PART_MAIN);
        angle_final += ext->angle;
   19274:	f8b5 900c 	ldrh.w	r9, [r5, #12]
   19278:	4481      	add	r9, r0

        lv_area_t bg_coords;
        _lv_img_buf_get_transformed_area(&bg_coords, lv_area_get_width(&img_coords), lv_area_get_height(&img_coords),
   1927a:	b2a4      	uxth	r4, r4
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1927c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   19280:	3201      	adds	r2, #1
   19282:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   19286:	1ad2      	subs	r2, r2, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   19288:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   1928c:	3101      	adds	r1, #1
   1928e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   19292:	1ac9      	subs	r1, r1, r3
   19294:	f105 030e 	add.w	r3, r5, #14
   19298:	9301      	str	r3, [sp, #4]
   1929a:	9400      	str	r4, [sp, #0]
   1929c:	fa0f f389 	sxth.w	r3, r9
   192a0:	b212      	sxth	r2, r2
   192a2:	b209      	sxth	r1, r1
   192a4:	a804      	add	r0, sp, #16
   192a6:	f8df a160 	ldr.w	sl, [pc, #352]	; 19408 <lv_img_design+0x2f8>
   192aa:	47d0      	blx	sl
                                         angle_final, zoom_final, &ext->pivot);
        bg_coords.x1 += img_coords.x1;
   192ac:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   192b0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   192b4:	4413      	add	r3, r2
   192b6:	f8ad 3010 	strh.w	r3, [sp, #16]
        bg_coords.y1 += img_coords.y1;
   192ba:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   192be:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   192c2:	4419      	add	r1, r3
   192c4:	f8ad 1012 	strh.w	r1, [sp, #18]
        bg_coords.x2 += img_coords.x1;
   192c8:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   192cc:	440a      	add	r2, r1
   192ce:	f8ad 2014 	strh.w	r2, [sp, #20]
        bg_coords.y2 += img_coords.y1;
   192d2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   192d6:	4413      	add	r3, r2
   192d8:	f8ad 3016 	strh.w	r3, [sp, #22]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   192dc:	2212      	movs	r2, #18
   192de:	2100      	movs	r1, #0
   192e0:	4638      	mov	r0, r7
   192e2:	47c0      	blx	r8
        bg_coords.x1 -= lv_obj_get_style_pad_left(img, LV_IMG_PART_MAIN);
   192e4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   192e8:	1a18      	subs	r0, r3, r0
   192ea:	f8ad 0010 	strh.w	r0, [sp, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   192ee:	2213      	movs	r2, #19
   192f0:	2100      	movs	r1, #0
   192f2:	4638      	mov	r0, r7
   192f4:	47c0      	blx	r8
        bg_coords.x2 += lv_obj_get_style_pad_right(img, LV_IMG_PART_MAIN);
   192f6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   192fa:	4418      	add	r0, r3
   192fc:	f8ad 0014 	strh.w	r0, [sp, #20]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   19300:	2210      	movs	r2, #16
   19302:	2100      	movs	r1, #0
   19304:	4638      	mov	r0, r7
   19306:	47c0      	blx	r8
        bg_coords.y1 -= lv_obj_get_style_pad_top(img, LV_IMG_PART_MAIN);
   19308:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1930c:	1a18      	subs	r0, r3, r0
   1930e:	f8ad 0012 	strh.w	r0, [sp, #18]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   19312:	2211      	movs	r2, #17
   19314:	2100      	movs	r1, #0
   19316:	4638      	mov	r0, r7
   19318:	47c0      	blx	r8
        bg_coords.y2 += lv_obj_get_style_pad_bottom(img, LV_IMG_PART_MAIN);
   1931a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1931e:	4418      	add	r0, r3
   19320:	f8ad 0016 	strh.w	r0, [sp, #22]

        lv_draw_rect(&bg_coords, clip_area, &bg_dsc);
   19324:	aa0f      	add	r2, sp, #60	; 0x3c
   19326:	4631      	mov	r1, r6
   19328:	a804      	add	r0, sp, #16
   1932a:	4b3c      	ldr	r3, [pc, #240]	; (1941c <lv_img_design+0x30c>)
   1932c:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
   1932e:	2202      	movs	r2, #2
   19330:	2100      	movs	r1, #0
   19332:	4638      	mov	r0, r7
   19334:	47c0      	blx	r8

        if(lv_obj_get_style_clip_corner(img, LV_OBJ_PART_MAIN)) {
   19336:	b9c8      	cbnz	r0, 1936c <lv_img_design+0x25c>
            lv_draw_mask_radius_init(mp, &bg_coords, r, false);
            /*Add the mask and use `img+8` as custom id. Don't use `obj` directly because it might be used by the user*/
            lv_draw_mask_add(mp, img + 8);
        }

        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_VARIABLE) {
   19338:	7d2b      	ldrb	r3, [r5, #20]
   1933a:	f003 0303 	and.w	r3, r3, #3
   1933e:	2b01      	cmp	r3, #1
   19340:	d92a      	bls.n	19398 <lv_img_design+0x288>
                for(; cords_tmp.x1 <= img_coords.x2; cords_tmp.x1 += ext->w, cords_tmp.x2 += ext->w) {
                    lv_draw_img(&cords_tmp, clip_area, ext->src, &img_dsc);
                }
            }
        }
        else if(ext->src_type == LV_IMG_SRC_SYMBOL) {
   19342:	2b02      	cmp	r3, #2
   19344:	f000 80d1 	beq.w	194ea <lv_img_design+0x3da>
            label_dsc.color = lv_obj_get_style_image_recolor(img, LV_IMG_PART_MAIN);
            lv_draw_label(&img_coords, clip_area, &label_dsc, ext->src, NULL);
        }
        else {
            /*Trigger the error handler of image drawer*/
            LV_LOG_WARN("lv_img_design: image source type is unknown");
   19348:	4b35      	ldr	r3, [pc, #212]	; (19420 <lv_img_design+0x310>)
   1934a:	9300      	str	r3, [sp, #0]
   1934c:	4b35      	ldr	r3, [pc, #212]	; (19424 <lv_img_design+0x314>)
   1934e:	f240 22bb 	movw	r2, #699	; 0x2bb
   19352:	4935      	ldr	r1, [pc, #212]	; (19428 <lv_img_design+0x318>)
   19354:	2002      	movs	r0, #2
   19356:	4c35      	ldr	r4, [pc, #212]	; (1942c <lv_img_design+0x31c>)
   19358:	47a0      	blx	r4
            lv_draw_img(&img->coords, clip_area, NULL, NULL);
   1935a:	2300      	movs	r3, #0
   1935c:	461a      	mov	r2, r3
   1935e:	4631      	mov	r1, r6
   19360:	f107 0010 	add.w	r0, r7, #16
   19364:	4c32      	ldr	r4, [pc, #200]	; (19430 <lv_img_design+0x320>)
   19366:	47a0      	blx	r4
            lv_obj_init_draw_rect_dsc(img, LV_OBJ_PART_MAIN, &draw_dsc);
            lv_draw_rect(&img->coords, clip_area, &draw_dsc);
        }
    }

    return LV_DESIGN_RES_OK;
   19368:	2000      	movs	r0, #0
   1936a:	e0dc      	b.n	19526 <lv_img_design+0x416>
            lv_draw_mask_radius_param_t * mp = _lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
   1936c:	201c      	movs	r0, #28
   1936e:	4b31      	ldr	r3, [pc, #196]	; (19434 <lv_img_design+0x324>)
   19370:	4798      	blx	r3
   19372:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   19374:	2201      	movs	r2, #1
   19376:	2100      	movs	r1, #0
   19378:	4638      	mov	r0, r7
   1937a:	4b1f      	ldr	r3, [pc, #124]	; (193f8 <lv_img_design+0x2e8>)
   1937c:	4798      	blx	r3
            lv_draw_mask_radius_init(mp, &bg_coords, r, false);
   1937e:	2300      	movs	r3, #0
   19380:	4602      	mov	r2, r0
   19382:	a904      	add	r1, sp, #16
   19384:	4640      	mov	r0, r8
   19386:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 19444 <lv_img_design+0x334>
   1938a:	47d0      	blx	sl
            lv_draw_mask_add(mp, img + 8);
   1938c:	f507 7118 	add.w	r1, r7, #608	; 0x260
   19390:	4640      	mov	r0, r8
   19392:	4b29      	ldr	r3, [pc, #164]	; (19438 <lv_img_design+0x328>)
   19394:	4798      	blx	r3
   19396:	e7cf      	b.n	19338 <lv_img_design+0x228>
            img_coords.x1 += ext->offset.x;
   19398:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   1939c:	88ab      	ldrh	r3, [r5, #4]
   1939e:	441a      	add	r2, r3
   193a0:	b292      	uxth	r2, r2
   193a2:	b210      	sxth	r0, r2
   193a4:	f8ad 0008 	strh.w	r0, [sp, #8]
            img_coords.y1 += ext->offset.y;
   193a8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   193ac:	88e9      	ldrh	r1, [r5, #6]
   193ae:	440b      	add	r3, r1
   193b0:	b29b      	uxth	r3, r3
   193b2:	b219      	sxth	r1, r3
   193b4:	f8ad 100a 	strh.w	r1, [sp, #10]
            if(img_coords.x1 > img->coords.x1) img_coords.x1 -= ext->w;
   193b8:	f9b7 e010 	ldrsh.w	lr, [r7, #16]
   193bc:	4586      	cmp	lr, r0
   193be:	da03      	bge.n	193c8 <lv_img_design+0x2b8>
   193c0:	8928      	ldrh	r0, [r5, #8]
   193c2:	1a12      	subs	r2, r2, r0
   193c4:	f8ad 2008 	strh.w	r2, [sp, #8]
            if(img_coords.y1 > img->coords.y1) img_coords.y1 -= ext->h;
   193c8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
   193cc:	428a      	cmp	r2, r1
   193ce:	da03      	bge.n	193d8 <lv_img_design+0x2c8>
   193d0:	896a      	ldrh	r2, [r5, #10]
   193d2:	1a9b      	subs	r3, r3, r2
   193d4:	f8ad 300a 	strh.w	r3, [sp, #10]
            lv_draw_img_dsc_init(&img_dsc);
   193d8:	a808      	add	r0, sp, #32
   193da:	4b18      	ldr	r3, [pc, #96]	; (1943c <lv_img_design+0x32c>)
   193dc:	4798      	blx	r3
            lv_obj_init_draw_img_dsc(img, LV_IMG_PART_MAIN, &img_dsc);
   193de:	aa08      	add	r2, sp, #32
   193e0:	2100      	movs	r1, #0
   193e2:	4638      	mov	r0, r7
   193e4:	4b16      	ldr	r3, [pc, #88]	; (19440 <lv_img_design+0x330>)
   193e6:	4798      	blx	r3
            img_dsc.zoom = zoom_final;
   193e8:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
            if(img_dsc.zoom == 0) return LV_DESIGN_RES_OK;
   193ec:	bb64      	cbnz	r4, 19448 <lv_img_design+0x338>
   193ee:	2000      	movs	r0, #0
   193f0:	e099      	b.n	19526 <lv_img_design+0x416>
   193f2:	bf00      	nop
   193f4:	00004d91 	.word	0x00004d91
   193f8:	000044c9 	.word	0x000044c9
   193fc:	00011761 	.word	0x00011761
   19400:	00002f51 	.word	0x00002f51
   19404:	00002fa1 	.word	0x00002fa1
   19408:	0000ec59 	.word	0x0000ec59
   1940c:	00004601 	.word	0x00004601
   19410:	00002e35 	.word	0x00002e35
   19414:	0000c25d 	.word	0x0000c25d
   19418:	000050b9 	.word	0x000050b9
   1941c:	0000c325 	.word	0x0000c325
   19420:	000250d4 	.word	0x000250d4
   19424:	00029584 	.word	0x00029584
   19428:	000296ac 	.word	0x000296ac
   1942c:	00012251 	.word	0x00012251
   19430:	000096dd 	.word	0x000096dd
   19434:	00012931 	.word	0x00012931
   19438:	0000bdb5 	.word	0x0000bdb5
   1943c:	00009639 	.word	0x00009639
   19440:	0000575d 	.word	0x0000575d
   19444:	0000c021 	.word	0x0000c021
            img_dsc.angle = angle_final;
   19448:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
            img_dsc.pivot.x = ext->pivot.x;
   1944c:	89eb      	ldrh	r3, [r5, #14]
   1944e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
            img_dsc.pivot.y = ext->pivot.y;
   19452:	8a2b      	ldrh	r3, [r5, #16]
   19454:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
            img_dsc.antialias = ext->antialias;
   19458:	7d6a      	ldrb	r2, [r5, #21]
   1945a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   1945e:	f362 0300 	bfi	r3, r2, #0, #1
   19462:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
            cords_tmp.y1 = img_coords.y1;
   19466:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
   1946a:	f8ad 301a 	strh.w	r3, [sp, #26]
            cords_tmp.y2 = img_coords.y1 + ext->h - 1;
   1946e:	1e5a      	subs	r2, r3, #1
   19470:	8969      	ldrh	r1, [r5, #10]
   19472:	440a      	add	r2, r1
   19474:	f8ad 201e 	strh.w	r2, [sp, #30]
            for(; cords_tmp.y1 <= img_coords.y2; cords_tmp.y1 += ext->h, cords_tmp.y2 += ext->h) {
   19478:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
   1947c:	429a      	cmp	r2, r3
   1947e:	f6ff af73 	blt.w	19368 <lv_img_design+0x258>
                    lv_draw_img(&cords_tmp, clip_area, ext->src, &img_dsc);
   19482:	4c40      	ldr	r4, [pc, #256]	; (19584 <lv_img_design+0x474>)
                cords_tmp.x1 = img_coords.x1;
   19484:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
   19488:	f8ad 3018 	strh.w	r3, [sp, #24]
                cords_tmp.x2 = img_coords.x1 + ext->w - 1;
   1948c:	1e5a      	subs	r2, r3, #1
   1948e:	8929      	ldrh	r1, [r5, #8]
   19490:	440a      	add	r2, r1
   19492:	f8ad 201c 	strh.w	r2, [sp, #28]
                for(; cords_tmp.x1 <= img_coords.x2; cords_tmp.x1 += ext->w, cords_tmp.x2 += ext->w) {
   19496:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
   1949a:	429a      	cmp	r2, r3
   1949c:	db14      	blt.n	194c8 <lv_img_design+0x3b8>
                    lv_draw_img(&cords_tmp, clip_area, ext->src, &img_dsc);
   1949e:	ab08      	add	r3, sp, #32
   194a0:	682a      	ldr	r2, [r5, #0]
   194a2:	4631      	mov	r1, r6
   194a4:	a806      	add	r0, sp, #24
   194a6:	47a0      	blx	r4
                for(; cords_tmp.x1 <= img_coords.x2; cords_tmp.x1 += ext->w, cords_tmp.x2 += ext->w) {
   194a8:	892a      	ldrh	r2, [r5, #8]
   194aa:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   194ae:	4413      	add	r3, r2
   194b0:	b21b      	sxth	r3, r3
   194b2:	f8ad 3018 	strh.w	r3, [sp, #24]
   194b6:	f8bd 101c 	ldrh.w	r1, [sp, #28]
   194ba:	440a      	add	r2, r1
   194bc:	f8ad 201c 	strh.w	r2, [sp, #28]
   194c0:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
   194c4:	429a      	cmp	r2, r3
   194c6:	daea      	bge.n	1949e <lv_img_design+0x38e>
            for(; cords_tmp.y1 <= img_coords.y2; cords_tmp.y1 += ext->h, cords_tmp.y2 += ext->h) {
   194c8:	896a      	ldrh	r2, [r5, #10]
   194ca:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   194ce:	4413      	add	r3, r2
   194d0:	b21b      	sxth	r3, r3
   194d2:	f8ad 301a 	strh.w	r3, [sp, #26]
   194d6:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   194da:	440a      	add	r2, r1
   194dc:	f8ad 201e 	strh.w	r2, [sp, #30]
   194e0:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
   194e4:	429a      	cmp	r2, r3
   194e6:	dacd      	bge.n	19484 <lv_img_design+0x374>
   194e8:	e73e      	b.n	19368 <lv_img_design+0x258>
            lv_draw_label_dsc_init(&label_dsc);
   194ea:	a808      	add	r0, sp, #32
   194ec:	4b26      	ldr	r3, [pc, #152]	; (19588 <lv_img_design+0x478>)
   194ee:	4798      	blx	r3
            lv_obj_init_draw_label_dsc(img, LV_IMG_PART_MAIN, &label_dsc);
   194f0:	aa08      	add	r2, sp, #32
   194f2:	2100      	movs	r1, #0
   194f4:	4638      	mov	r0, r7
   194f6:	4b25      	ldr	r3, [pc, #148]	; (1958c <lv_img_design+0x47c>)
   194f8:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   194fa:	f248 02a9 	movw	r2, #32937	; 0x80a9
   194fe:	2100      	movs	r1, #0
   19500:	4638      	mov	r0, r7
   19502:	4b23      	ldr	r3, [pc, #140]	; (19590 <lv_img_design+0x480>)
   19504:	4798      	blx	r3
            label_dsc.color = lv_obj_get_style_image_recolor(img, LV_IMG_PART_MAIN);
   19506:	f8ad 0020 	strh.w	r0, [sp, #32]
            lv_draw_label(&img_coords, clip_area, &label_dsc, ext->src, NULL);
   1950a:	682b      	ldr	r3, [r5, #0]
   1950c:	2200      	movs	r2, #0
   1950e:	9200      	str	r2, [sp, #0]
   19510:	aa08      	add	r2, sp, #32
   19512:	4631      	mov	r1, r6
   19514:	a802      	add	r0, sp, #8
   19516:	4c1f      	ldr	r4, [pc, #124]	; (19594 <lv_img_design+0x484>)
   19518:	47a0      	blx	r4
   1951a:	e725      	b.n	19368 <lv_img_design+0x258>
        if(ext->h == 0 || ext->w == 0) return true;
   1951c:	2001      	movs	r0, #1
   1951e:	e002      	b.n	19526 <lv_img_design+0x416>
    else if(mode == LV_DESIGN_DRAW_POST) {
   19520:	2c01      	cmp	r4, #1
   19522:	d003      	beq.n	1952c <lv_img_design+0x41c>
    return LV_DESIGN_RES_OK;
   19524:	2000      	movs	r0, #0
}
   19526:	b024      	add	sp, #144	; 0x90
   19528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
   1952c:	2202      	movs	r2, #2
   1952e:	2100      	movs	r1, #0
   19530:	4638      	mov	r0, r7
   19532:	4b19      	ldr	r3, [pc, #100]	; (19598 <lv_img_design+0x488>)
   19534:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(img, LV_OBJ_PART_MAIN)) {
   19536:	b950      	cbnz	r0, 1954e <lv_img_design+0x43e>
        lv_draw_rect_dsc_init(&draw_dsc);
   19538:	a80f      	add	r0, sp, #60	; 0x3c
   1953a:	4b18      	ldr	r3, [pc, #96]	; (1959c <lv_img_design+0x48c>)
   1953c:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
   1953e:	2233      	movs	r2, #51	; 0x33
   19540:	2100      	movs	r1, #0
   19542:	4638      	mov	r0, r7
   19544:	4b14      	ldr	r3, [pc, #80]	; (19598 <lv_img_design+0x488>)
   19546:	4798      	blx	r3
        if(lv_obj_get_style_border_post(img, LV_OBJ_PART_MAIN)) {
   19548:	b940      	cbnz	r0, 1955c <lv_img_design+0x44c>
    return LV_DESIGN_RES_OK;
   1954a:	2000      	movs	r0, #0
   1954c:	e7eb      	b.n	19526 <lv_img_design+0x416>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(img + 8);
   1954e:	f507 7018 	add.w	r0, r7, #608	; 0x260
   19552:	4b13      	ldr	r3, [pc, #76]	; (195a0 <lv_img_design+0x490>)
   19554:	4798      	blx	r3
            _lv_mem_buf_release(param);
   19556:	4b13      	ldr	r3, [pc, #76]	; (195a4 <lv_img_design+0x494>)
   19558:	4798      	blx	r3
   1955a:	e7ed      	b.n	19538 <lv_img_design+0x428>
            draw_dsc.bg_opa = LV_OPA_TRANSP;
   1955c:	2100      	movs	r1, #0
   1955e:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
            draw_dsc.pattern_opa = LV_OPA_TRANSP;
   19562:	f88d 1072 	strb.w	r1, [sp, #114]	; 0x72
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
   19566:	f88d 1064 	strb.w	r1, [sp, #100]	; 0x64
            lv_obj_init_draw_rect_dsc(img, LV_OBJ_PART_MAIN, &draw_dsc);
   1956a:	aa0f      	add	r2, sp, #60	; 0x3c
   1956c:	4638      	mov	r0, r7
   1956e:	4b0e      	ldr	r3, [pc, #56]	; (195a8 <lv_img_design+0x498>)
   19570:	4798      	blx	r3
            lv_draw_rect(&img->coords, clip_area, &draw_dsc);
   19572:	aa0f      	add	r2, sp, #60	; 0x3c
   19574:	4631      	mov	r1, r6
   19576:	f107 0010 	add.w	r0, r7, #16
   1957a:	4b0c      	ldr	r3, [pc, #48]	; (195ac <lv_img_design+0x49c>)
   1957c:	4798      	blx	r3
   1957e:	e7e4      	b.n	1954a <lv_img_design+0x43a>
        if(ext->src_type == LV_IMG_SRC_UNKNOWN || ext->src_type == LV_IMG_SRC_SYMBOL) return LV_DESIGN_RES_NOT_COVER;
   19580:	2002      	movs	r0, #2
   19582:	e7d0      	b.n	19526 <lv_img_design+0x416>
   19584:	000096dd 	.word	0x000096dd
   19588:	000099c1 	.word	0x000099c1
   1958c:	000056a5 	.word	0x000056a5
   19590:	00004575 	.word	0x00004575
   19594:	00009a19 	.word	0x00009a19
   19598:	000044c9 	.word	0x000044c9
   1959c:	0000c25d 	.word	0x0000c25d
   195a0:	0000be85 	.word	0x0000be85
   195a4:	00012565 	.word	0x00012565
   195a8:	000050b9 	.word	0x000050b9
   195ac:	0000c325 	.word	0x0000c325

000195b0 <lv_img_get_auto_size>:
{
   195b0:	b530      	push	{r4, r5, lr}
   195b2:	b083      	sub	sp, #12
   195b4:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(img, LV_OBJX_NAME);
   195b6:	4b0c      	ldr	r3, [pc, #48]	; (195e8 <lv_img_get_auto_size+0x38>)
   195b8:	4798      	blx	r3
   195ba:	b968      	cbnz	r0, 195d8 <lv_img_get_auto_size+0x28>
   195bc:	4b0b      	ldr	r3, [pc, #44]	; (195ec <lv_img_get_auto_size+0x3c>)
   195be:	9300      	str	r3, [sp, #0]
   195c0:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
   195c4:	490a      	ldr	r1, [pc, #40]	; (195f0 <lv_img_get_auto_size+0x40>)
   195c6:	2003      	movs	r0, #3
   195c8:	4d0a      	ldr	r5, [pc, #40]	; (195f4 <lv_img_get_auto_size+0x44>)
   195ca:	47a8      	blx	r5
   195cc:	4622      	mov	r2, r4
   195ce:	2300      	movs	r3, #0
   195d0:	4809      	ldr	r0, [pc, #36]	; (195f8 <lv_img_get_auto_size+0x48>)
   195d2:	490a      	ldr	r1, [pc, #40]	; (195fc <lv_img_get_auto_size+0x4c>)
   195d4:	4788      	blx	r1
   195d6:	e7fe      	b.n	195d6 <lv_img_get_auto_size+0x26>
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
   195d8:	4620      	mov	r0, r4
   195da:	4b09      	ldr	r3, [pc, #36]	; (19600 <lv_img_get_auto_size+0x50>)
   195dc:	4798      	blx	r3
    return ext->auto_size == 0 ? false : true;
   195de:	7d00      	ldrb	r0, [r0, #20]
}
   195e0:	f3c0 0080 	ubfx	r0, r0, #2, #1
   195e4:	b003      	add	sp, #12
   195e6:	bd30      	pop	{r4, r5, pc}
   195e8:	000022a5 	.word	0x000022a5
   195ec:	000295fc 	.word	0x000295fc
   195f0:	000296ac 	.word	0x000296ac
   195f4:	00012251 	.word	0x00012251
   195f8:	00024830 	.word	0x00024830
   195fc:	000022ad 	.word	0x000022ad
   19600:	00004d91 	.word	0x00004d91

00019604 <lv_img_set_src>:
{
   19604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19608:	b086      	sub	sp, #24
   1960a:	4605      	mov	r5, r0
   1960c:	460e      	mov	r6, r1
    LV_ASSERT_OBJ(img, LV_OBJX_NAME);
   1960e:	4b7c      	ldr	r3, [pc, #496]	; (19800 <lv_img_set_src+0x1fc>)
   19610:	4798      	blx	r3
   19612:	b960      	cbnz	r0, 1962e <lv_img_set_src+0x2a>
   19614:	4b7b      	ldr	r3, [pc, #492]	; (19804 <lv_img_set_src+0x200>)
   19616:	9300      	str	r3, [sp, #0]
   19618:	228f      	movs	r2, #143	; 0x8f
   1961a:	497b      	ldr	r1, [pc, #492]	; (19808 <lv_img_set_src+0x204>)
   1961c:	2003      	movs	r0, #3
   1961e:	4c7b      	ldr	r4, [pc, #492]	; (1980c <lv_img_set_src+0x208>)
   19620:	47a0      	blx	r4
   19622:	462a      	mov	r2, r5
   19624:	2300      	movs	r3, #0
   19626:	487a      	ldr	r0, [pc, #488]	; (19810 <lv_img_set_src+0x20c>)
   19628:	497a      	ldr	r1, [pc, #488]	; (19814 <lv_img_set_src+0x210>)
   1962a:	4788      	blx	r1
   1962c:	e7fe      	b.n	1962c <lv_img_set_src+0x28>
    lv_img_src_t src_type = lv_img_src_get_type(src_img);
   1962e:	4630      	mov	r0, r6
   19630:	4b79      	ldr	r3, [pc, #484]	; (19818 <lv_img_set_src+0x214>)
   19632:	4798      	blx	r3
   19634:	4607      	mov	r7, r0
    lv_img_ext_t * ext    = lv_obj_get_ext_attr(img);
   19636:	4628      	mov	r0, r5
   19638:	4b78      	ldr	r3, [pc, #480]	; (1981c <lv_img_set_src+0x218>)
   1963a:	4798      	blx	r3
   1963c:	4604      	mov	r4, r0
    switch(src_type) {
   1963e:	2f02      	cmp	r7, #2
   19640:	d83a      	bhi.n	196b8 <lv_img_set_src+0xb4>
    if(src_type == LV_IMG_SRC_UNKNOWN) {
   19642:	2f03      	cmp	r7, #3
   19644:	d042      	beq.n	196cc <lv_img_set_src+0xc8>
    lv_img_decoder_get_info(src_img, &header);
   19646:	a905      	add	r1, sp, #20
   19648:	4630      	mov	r0, r6
   1964a:	4b75      	ldr	r3, [pc, #468]	; (19820 <lv_img_set_src+0x21c>)
   1964c:	4798      	blx	r3
    if(src_type == LV_IMG_SRC_VARIABLE) {
   1964e:	2f00      	cmp	r7, #0
   19650:	d055      	beq.n	196fe <lv_img_set_src+0xfa>
    else if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_SYMBOL) {
   19652:	1e7b      	subs	r3, r7, #1
   19654:	b2db      	uxtb	r3, r3
   19656:	2b01      	cmp	r3, #1
   19658:	d966      	bls.n	19728 <lv_img_set_src+0x124>
    if(src_type == LV_IMG_SRC_SYMBOL) {
   1965a:	2f02      	cmp	r7, #2
   1965c:	f000 8099 	beq.w	19792 <lv_img_set_src+0x18e>
    ext->src_type = src_type;
   19660:	7d21      	ldrb	r1, [r4, #20]
   19662:	f367 0101 	bfi	r1, r7, #0, #2
    ext->w        = header.w;
   19666:	9a05      	ldr	r2, [sp, #20]
   19668:	f3c2 228a 	ubfx	r2, r2, #10, #11
   1966c:	8122      	strh	r2, [r4, #8]
    ext->h        = header.h;
   1966e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   19672:	f3c3 134a 	ubfx	r3, r3, #5, #11
   19676:	8163      	strh	r3, [r4, #10]
    ext->cf       = header.cf;
   19678:	f89d 0014 	ldrb.w	r0, [sp, #20]
   1967c:	f360 01c7 	bfi	r1, r0, #3, #5
   19680:	7521      	strb	r1, [r4, #20]
    ext->pivot.x = header.w / 2;
   19682:	f3c2 0249 	ubfx	r2, r2, #1, #10
   19686:	81e2      	strh	r2, [r4, #14]
    ext->pivot.y = header.h / 2;
   19688:	f3c3 0349 	ubfx	r3, r3, #1, #10
   1968c:	8223      	strh	r3, [r4, #16]
    if(lv_img_get_auto_size(img) != false) {
   1968e:	4628      	mov	r0, r5
   19690:	4b64      	ldr	r3, [pc, #400]	; (19824 <lv_img_set_src+0x220>)
   19692:	4798      	blx	r3
   19694:	2800      	cmp	r0, #0
   19696:	f040 80aa 	bne.w	197ee <lv_img_set_src+0x1ea>
    if(ext->angle || ext->zoom != LV_IMG_ZOOM_NONE) lv_obj_refresh_ext_draw_pad(img);
   1969a:	89a3      	ldrh	r3, [r4, #12]
   1969c:	b91b      	cbnz	r3, 196a6 <lv_img_set_src+0xa2>
   1969e:	8a63      	ldrh	r3, [r4, #18]
   196a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   196a4:	d002      	beq.n	196ac <lv_img_set_src+0xa8>
   196a6:	4628      	mov	r0, r5
   196a8:	4b5f      	ldr	r3, [pc, #380]	; (19828 <lv_img_set_src+0x224>)
   196aa:	4798      	blx	r3
    lv_obj_invalidate(img);
   196ac:	4628      	mov	r0, r5
   196ae:	4b5f      	ldr	r3, [pc, #380]	; (1982c <lv_img_set_src+0x228>)
   196b0:	4798      	blx	r3
}
   196b2:	b006      	add	sp, #24
   196b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            LV_LOG_WARN("lv_img_set_src: unknown type");
   196b8:	4b5d      	ldr	r3, [pc, #372]	; (19830 <lv_img_set_src+0x22c>)
   196ba:	9300      	str	r3, [sp, #0]
   196bc:	4b51      	ldr	r3, [pc, #324]	; (19804 <lv_img_set_src+0x200>)
   196be:	22a0      	movs	r2, #160	; 0xa0
   196c0:	4951      	ldr	r1, [pc, #324]	; (19808 <lv_img_set_src+0x204>)
   196c2:	2002      	movs	r0, #2
   196c4:	f8df 8144 	ldr.w	r8, [pc, #324]	; 1980c <lv_img_set_src+0x208>
   196c8:	47c0      	blx	r8
   196ca:	e7ba      	b.n	19642 <lv_img_set_src+0x3e>
        LV_LOG_WARN("lv_img_set_src: unknown image type");
   196cc:	4b59      	ldr	r3, [pc, #356]	; (19834 <lv_img_set_src+0x230>)
   196ce:	9300      	str	r3, [sp, #0]
   196d0:	4b4c      	ldr	r3, [pc, #304]	; (19804 <lv_img_set_src+0x200>)
   196d2:	22a6      	movs	r2, #166	; 0xa6
   196d4:	494c      	ldr	r1, [pc, #304]	; (19808 <lv_img_set_src+0x204>)
   196d6:	2002      	movs	r0, #2
   196d8:	4d4c      	ldr	r5, [pc, #304]	; (1980c <lv_img_set_src+0x208>)
   196da:	47a8      	blx	r5
        if(ext->src_type == LV_IMG_SRC_SYMBOL || ext->src_type == LV_IMG_SRC_FILE) {
   196dc:	7d23      	ldrb	r3, [r4, #20]
   196de:	f003 0303 	and.w	r3, r3, #3
   196e2:	3b01      	subs	r3, #1
   196e4:	b2db      	uxtb	r3, r3
   196e6:	2b01      	cmp	r3, #1
   196e8:	d802      	bhi.n	196f0 <lv_img_set_src+0xec>
            lv_mem_free(ext->src);
   196ea:	6820      	ldr	r0, [r4, #0]
   196ec:	4b52      	ldr	r3, [pc, #328]	; (19838 <lv_img_set_src+0x234>)
   196ee:	4798      	blx	r3
        ext->src      = NULL;
   196f0:	2300      	movs	r3, #0
   196f2:	6023      	str	r3, [r4, #0]
        ext->src_type = LV_IMG_SRC_UNKNOWN;
   196f4:	7d23      	ldrb	r3, [r4, #20]
   196f6:	f043 0303 	orr.w	r3, r3, #3
   196fa:	7523      	strb	r3, [r4, #20]
        return;
   196fc:	e7d9      	b.n	196b2 <lv_img_set_src+0xae>
        LV_LOG_INFO("lv_img_set_src:  `LV_IMG_SRC_VARIABLE` type found");
   196fe:	4b4f      	ldr	r3, [pc, #316]	; (1983c <lv_img_set_src+0x238>)
   19700:	9300      	str	r3, [sp, #0]
   19702:	4b40      	ldr	r3, [pc, #256]	; (19804 <lv_img_set_src+0x200>)
   19704:	22b4      	movs	r2, #180	; 0xb4
   19706:	4940      	ldr	r1, [pc, #256]	; (19808 <lv_img_set_src+0x204>)
   19708:	2001      	movs	r0, #1
   1970a:	f8df 8100 	ldr.w	r8, [pc, #256]	; 1980c <lv_img_set_src+0x208>
   1970e:	47c0      	blx	r8
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
   19710:	7d23      	ldrb	r3, [r4, #20]
   19712:	f003 0303 	and.w	r3, r3, #3
   19716:	3b01      	subs	r3, #1
   19718:	b2db      	uxtb	r3, r3
   1971a:	2b01      	cmp	r3, #1
   1971c:	d802      	bhi.n	19724 <lv_img_set_src+0x120>
            lv_mem_free(ext->src);
   1971e:	6820      	ldr	r0, [r4, #0]
   19720:	4b45      	ldr	r3, [pc, #276]	; (19838 <lv_img_set_src+0x234>)
   19722:	4798      	blx	r3
        ext->src = src_img;
   19724:	6026      	str	r6, [r4, #0]
   19726:	e79b      	b.n	19660 <lv_img_set_src+0x5c>
        if(ext->src != src_img) {
   19728:	f8d4 8000 	ldr.w	r8, [r4]
   1972c:	4546      	cmp	r6, r8
   1972e:	d094      	beq.n	1965a <lv_img_set_src+0x56>
            if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
   19730:	7d23      	ldrb	r3, [r4, #20]
   19732:	f003 0303 	and.w	r3, r3, #3
   19736:	3b01      	subs	r3, #1
   19738:	b2db      	uxtb	r3, r3
            const void * old_src = NULL;
   1973a:	2b02      	cmp	r3, #2
   1973c:	bf28      	it	cs
   1973e:	f04f 0800 	movcs.w	r8, #0
            char * new_str = lv_mem_alloc(strlen(src_img) + 1);
   19742:	4630      	mov	r0, r6
   19744:	4b3e      	ldr	r3, [pc, #248]	; (19840 <lv_img_set_src+0x23c>)
   19746:	4798      	blx	r3
   19748:	3001      	adds	r0, #1
   1974a:	4b3e      	ldr	r3, [pc, #248]	; (19844 <lv_img_set_src+0x240>)
   1974c:	4798      	blx	r3
   1974e:	4681      	mov	r9, r0
            LV_ASSERT_MEM(new_str);
   19750:	4b2b      	ldr	r3, [pc, #172]	; (19800 <lv_img_set_src+0x1fc>)
   19752:	4798      	blx	r3
   19754:	b960      	cbnz	r0, 19770 <lv_img_set_src+0x16c>
   19756:	4b2b      	ldr	r3, [pc, #172]	; (19804 <lv_img_set_src+0x200>)
   19758:	9300      	str	r3, [sp, #0]
   1975a:	22c7      	movs	r2, #199	; 0xc7
   1975c:	492a      	ldr	r1, [pc, #168]	; (19808 <lv_img_set_src+0x204>)
   1975e:	2003      	movs	r0, #3
   19760:	4c2a      	ldr	r4, [pc, #168]	; (1980c <lv_img_set_src+0x208>)
   19762:	47a0      	blx	r4
   19764:	464a      	mov	r2, r9
   19766:	2300      	movs	r3, #0
   19768:	4837      	ldr	r0, [pc, #220]	; (19848 <lv_img_set_src+0x244>)
   1976a:	492a      	ldr	r1, [pc, #168]	; (19814 <lv_img_set_src+0x210>)
   1976c:	4788      	blx	r1
   1976e:	e7fe      	b.n	1976e <lv_img_set_src+0x16a>
            if(new_str == NULL) return;
   19770:	f1b9 0f00 	cmp.w	r9, #0
   19774:	d09d      	beq.n	196b2 <lv_img_set_src+0xae>
            strcpy(new_str, src_img);
   19776:	4631      	mov	r1, r6
   19778:	4648      	mov	r0, r9
   1977a:	4b34      	ldr	r3, [pc, #208]	; (1984c <lv_img_set_src+0x248>)
   1977c:	4798      	blx	r3
            ext->src = new_str;
   1977e:	f8c4 9000 	str.w	r9, [r4]
            if(old_src) lv_mem_free(old_src);
   19782:	f1b8 0f00 	cmp.w	r8, #0
   19786:	f43f af68 	beq.w	1965a <lv_img_set_src+0x56>
   1978a:	4640      	mov	r0, r8
   1978c:	4b2a      	ldr	r3, [pc, #168]	; (19838 <lv_img_set_src+0x234>)
   1978e:	4798      	blx	r3
   19790:	e763      	b.n	1965a <lv_img_set_src+0x56>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   19792:	f248 028e 	movw	r2, #32910	; 0x808e
   19796:	2100      	movs	r1, #0
   19798:	4628      	mov	r0, r5
   1979a:	4b2d      	ldr	r3, [pc, #180]	; (19850 <lv_img_set_src+0x24c>)
   1979c:	4798      	blx	r3
   1979e:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
   197a0:	f248 0280 	movw	r2, #32896	; 0x8080
   197a4:	2100      	movs	r1, #0
   197a6:	4628      	mov	r0, r5
   197a8:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 1985c <lv_img_set_src+0x258>
   197ac:	47c0      	blx	r8
   197ae:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   197b0:	f248 0281 	movw	r2, #32897	; 0x8081
   197b4:	2100      	movs	r1, #0
   197b6:	4628      	mov	r0, r5
   197b8:	47c0      	blx	r8
        _lv_txt_get_size(&size, src_img, font, letter_space, line_space,
   197ba:	2300      	movs	r3, #0
   197bc:	9302      	str	r3, [sp, #8]
   197be:	f647 4318 	movw	r3, #31768	; 0x7c18
   197c2:	9301      	str	r3, [sp, #4]
   197c4:	9000      	str	r0, [sp, #0]
   197c6:	4653      	mov	r3, sl
   197c8:	464a      	mov	r2, r9
   197ca:	4631      	mov	r1, r6
   197cc:	a804      	add	r0, sp, #16
   197ce:	4e21      	ldr	r6, [pc, #132]	; (19854 <lv_img_set_src+0x250>)
   197d0:	47b0      	blx	r6
        header.w = size.x;
   197d2:	9b05      	ldr	r3, [sp, #20]
   197d4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   197d8:	f362 2394 	bfi	r3, r2, #10, #11
   197dc:	9305      	str	r3, [sp, #20]
        header.h = size.y;
   197de:	0c1b      	lsrs	r3, r3, #16
   197e0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   197e4:	f362 134f 	bfi	r3, r2, #5, #11
   197e8:	f8ad 3016 	strh.w	r3, [sp, #22]
   197ec:	e738      	b.n	19660 <lv_img_set_src+0x5c>
        lv_obj_set_size(img, ext->w, ext->h);
   197ee:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   197f2:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   197f6:	4628      	mov	r0, r5
   197f8:	4b17      	ldr	r3, [pc, #92]	; (19858 <lv_img_set_src+0x254>)
   197fa:	4798      	blx	r3
   197fc:	e74d      	b.n	1969a <lv_img_set_src+0x96>
   197fe:	bf00      	nop
   19800:	000022a5 	.word	0x000022a5
   19804:	00029614 	.word	0x00029614
   19808:	000296ac 	.word	0x000296ac
   1980c:	00012251 	.word	0x00012251
   19810:	00024830 	.word	0x00024830
   19814:	000022ad 	.word	0x000022ad
   19818:	0000995d 	.word	0x0000995d
   1981c:	00004d91 	.word	0x00004d91
   19820:	0000fde1 	.word	0x0000fde1
   19824:	000195b1 	.word	0x000195b1
   19828:	00002c21 	.word	0x00002c21
   1982c:	00003315 	.word	0x00003315
   19830:	000296d8 	.word	0x000296d8
   19834:	000296f8 	.word	0x000296f8
   19838:	000124b9 	.word	0x000124b9
   1983c:	0002971c 	.word	0x0002971c
   19840:	0001b513 	.word	0x0001b513
   19844:	000123d1 	.word	0x000123d1
   19848:	00023fcc 	.word	0x00023fcc
   1984c:	0001b503 	.word	0x0001b503
   19850:	00004695 	.word	0x00004695
   19854:	00014071 	.word	0x00014071
   19858:	00004295 	.word	0x00004295
   1985c:	000044c9 	.word	0x000044c9

00019860 <lv_img_create>:
{
   19860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19864:	b082      	sub	sp, #8
   19866:	4680      	mov	r8, r0
   19868:	460f      	mov	r7, r1
    lv_obj_t * img = lv_obj_create(par, copy);
   1986a:	4b58      	ldr	r3, [pc, #352]	; (199cc <lv_img_create+0x16c>)
   1986c:	4798      	blx	r3
   1986e:	4605      	mov	r5, r0
    LV_ASSERT_MEM(img);
   19870:	4b57      	ldr	r3, [pc, #348]	; (199d0 <lv_img_create+0x170>)
   19872:	4798      	blx	r3
   19874:	b1d0      	cbz	r0, 198ac <lv_img_create+0x4c>
    if(img == NULL) return NULL;
   19876:	2d00      	cmp	r5, #0
   19878:	f000 8086 	beq.w	19988 <lv_img_create+0x128>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(img);
   1987c:	4b55      	ldr	r3, [pc, #340]	; (199d4 <lv_img_create+0x174>)
   1987e:	681b      	ldr	r3, [r3, #0]
   19880:	b30b      	cbz	r3, 198c6 <lv_img_create+0x66>
    lv_img_ext_t * ext = lv_obj_allocate_ext_attr(img, sizeof(lv_img_ext_t));
   19882:	2118      	movs	r1, #24
   19884:	4628      	mov	r0, r5
   19886:	4b54      	ldr	r3, [pc, #336]	; (199d8 <lv_img_create+0x178>)
   19888:	4798      	blx	r3
   1988a:	4604      	mov	r4, r0
    LV_ASSERT_MEM(ext);
   1988c:	4b50      	ldr	r3, [pc, #320]	; (199d0 <lv_img_create+0x170>)
   1988e:	4798      	blx	r3
   19890:	b9f8      	cbnz	r0, 198d2 <lv_img_create+0x72>
   19892:	4b52      	ldr	r3, [pc, #328]	; (199dc <lv_img_create+0x17c>)
   19894:	9300      	str	r3, [sp, #0]
   19896:	2249      	movs	r2, #73	; 0x49
   19898:	4951      	ldr	r1, [pc, #324]	; (199e0 <lv_img_create+0x180>)
   1989a:	2003      	movs	r0, #3
   1989c:	4d51      	ldr	r5, [pc, #324]	; (199e4 <lv_img_create+0x184>)
   1989e:	47a8      	blx	r5
   198a0:	4622      	mov	r2, r4
   198a2:	2300      	movs	r3, #0
   198a4:	4850      	ldr	r0, [pc, #320]	; (199e8 <lv_img_create+0x188>)
   198a6:	4951      	ldr	r1, [pc, #324]	; (199ec <lv_img_create+0x18c>)
   198a8:	4788      	blx	r1
   198aa:	e7fe      	b.n	198aa <lv_img_create+0x4a>
    LV_ASSERT_MEM(img);
   198ac:	4b4b      	ldr	r3, [pc, #300]	; (199dc <lv_img_create+0x17c>)
   198ae:	9300      	str	r3, [sp, #0]
   198b0:	2242      	movs	r2, #66	; 0x42
   198b2:	494b      	ldr	r1, [pc, #300]	; (199e0 <lv_img_create+0x180>)
   198b4:	2003      	movs	r0, #3
   198b6:	4c4b      	ldr	r4, [pc, #300]	; (199e4 <lv_img_create+0x184>)
   198b8:	47a0      	blx	r4
   198ba:	462a      	mov	r2, r5
   198bc:	2300      	movs	r3, #0
   198be:	484a      	ldr	r0, [pc, #296]	; (199e8 <lv_img_create+0x188>)
   198c0:	494a      	ldr	r1, [pc, #296]	; (199ec <lv_img_create+0x18c>)
   198c2:	4788      	blx	r1
   198c4:	e7fe      	b.n	198c4 <lv_img_create+0x64>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(img);
   198c6:	4628      	mov	r0, r5
   198c8:	4b49      	ldr	r3, [pc, #292]	; (199f0 <lv_img_create+0x190>)
   198ca:	4798      	blx	r3
   198cc:	4b41      	ldr	r3, [pc, #260]	; (199d4 <lv_img_create+0x174>)
   198ce:	6018      	str	r0, [r3, #0]
   198d0:	e7d7      	b.n	19882 <lv_img_create+0x22>
    if(ext == NULL) {
   198d2:	2c00      	cmp	r4, #0
   198d4:	d05c      	beq.n	19990 <lv_img_create+0x130>
    ext->src       = NULL;
   198d6:	2600      	movs	r6, #0
   198d8:	6026      	str	r6, [r4, #0]
    ext->src_type  = LV_IMG_SRC_UNKNOWN;
   198da:	7d23      	ldrb	r3, [r4, #20]
    ext->cf        = LV_IMG_CF_UNKNOWN;
   198dc:	f043 0303 	orr.w	r3, r3, #3
   198e0:	f366 03c7 	bfi	r3, r6, #3, #5
   198e4:	7523      	strb	r3, [r4, #20]
    ext->w         = lv_obj_get_width(img);
   198e6:	4628      	mov	r0, r5
   198e8:	4b42      	ldr	r3, [pc, #264]	; (199f4 <lv_img_create+0x194>)
   198ea:	4798      	blx	r3
   198ec:	8120      	strh	r0, [r4, #8]
    ext->h         = lv_obj_get_height(img);
   198ee:	4628      	mov	r0, r5
   198f0:	4b41      	ldr	r3, [pc, #260]	; (199f8 <lv_img_create+0x198>)
   198f2:	4798      	blx	r3
   198f4:	8160      	strh	r0, [r4, #10]
    ext->angle = 0;
   198f6:	81a6      	strh	r6, [r4, #12]
    ext->zoom = LV_IMG_ZOOM_NONE;
   198f8:	f44f 7380 	mov.w	r3, #256	; 0x100
   198fc:	8263      	strh	r3, [r4, #18]
    ext->antialias = LV_ANTIALIAS ? 1 : 0;
   198fe:	7d63      	ldrb	r3, [r4, #21]
   19900:	f043 0301 	orr.w	r3, r3, #1
   19904:	7563      	strb	r3, [r4, #21]
    ext->auto_size = 1;
   19906:	7d23      	ldrb	r3, [r4, #20]
   19908:	f043 0304 	orr.w	r3, r3, #4
   1990c:	7523      	strb	r3, [r4, #20]
    ext->offset.x  = 0;
   1990e:	80a6      	strh	r6, [r4, #4]
    ext->offset.y  = 0;
   19910:	80e6      	strh	r6, [r4, #6]
    ext->pivot.x = 0;
   19912:	81e6      	strh	r6, [r4, #14]
    ext->pivot.y = 0;
   19914:	8226      	strh	r6, [r4, #16]
    lv_obj_set_signal_cb(img, lv_img_signal);
   19916:	4939      	ldr	r1, [pc, #228]	; (199fc <lv_img_create+0x19c>)
   19918:	4628      	mov	r0, r5
   1991a:	4b39      	ldr	r3, [pc, #228]	; (19a00 <lv_img_create+0x1a0>)
   1991c:	4798      	blx	r3
    lv_obj_set_design_cb(img, lv_img_design);
   1991e:	4939      	ldr	r1, [pc, #228]	; (19a04 <lv_img_create+0x1a4>)
   19920:	4628      	mov	r0, r5
   19922:	4b39      	ldr	r3, [pc, #228]	; (19a08 <lv_img_create+0x1a8>)
   19924:	4798      	blx	r3
    if(copy == NULL) {
   19926:	2f00      	cmp	r7, #0
   19928:	d037      	beq.n	1999a <lv_img_create+0x13a>
        lv_img_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
   1992a:	4638      	mov	r0, r7
   1992c:	4b37      	ldr	r3, [pc, #220]	; (19a0c <lv_img_create+0x1ac>)
   1992e:	4798      	blx	r3
        ext->auto_size     = copy_ext->auto_size;
   19930:	7d03      	ldrb	r3, [r0, #20]
   19932:	f3c3 0380 	ubfx	r3, r3, #2, #1
   19936:	7d22      	ldrb	r2, [r4, #20]
   19938:	f363 0282 	bfi	r2, r3, #2, #1
   1993c:	7522      	strb	r2, [r4, #20]
        ext->zoom          = copy_ext->zoom;
   1993e:	8a43      	ldrh	r3, [r0, #18]
   19940:	8263      	strh	r3, [r4, #18]
        ext->angle         = copy_ext->angle;
   19942:	8983      	ldrh	r3, [r0, #12]
   19944:	81a3      	strh	r3, [r4, #12]
        ext->antialias     = copy_ext->antialias;
   19946:	7d42      	ldrb	r2, [r0, #21]
   19948:	7d63      	ldrb	r3, [r4, #21]
   1994a:	f362 0300 	bfi	r3, r2, #0, #1
   1994e:	7563      	strb	r3, [r4, #21]
        ext->offset.x     = copy_ext->offset.x;
   19950:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   19954:	80a3      	strh	r3, [r4, #4]
        ext->offset.y     = copy_ext->offset.y;
   19956:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   1995a:	80e3      	strh	r3, [r4, #6]
        ext->pivot.x     = copy_ext->pivot.x;
   1995c:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   19960:	81e3      	strh	r3, [r4, #14]
        ext->pivot.y     = copy_ext->pivot.y;
   19962:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
   19966:	8223      	strh	r3, [r4, #16]
        lv_img_set_src(img, copy_ext->src);
   19968:	6801      	ldr	r1, [r0, #0]
   1996a:	4628      	mov	r0, r5
   1996c:	4b28      	ldr	r3, [pc, #160]	; (19a10 <lv_img_create+0x1b0>)
   1996e:	4798      	blx	r3
        lv_obj_refresh_style(img, LV_STYLE_PROP_ALL);
   19970:	21ff      	movs	r1, #255	; 0xff
   19972:	4628      	mov	r0, r5
   19974:	4b27      	ldr	r3, [pc, #156]	; (19a14 <lv_img_create+0x1b4>)
   19976:	4798      	blx	r3
    LV_LOG_INFO("image created");
   19978:	4b27      	ldr	r3, [pc, #156]	; (19a18 <lv_img_create+0x1b8>)
   1997a:	9300      	str	r3, [sp, #0]
   1997c:	4b17      	ldr	r3, [pc, #92]	; (199dc <lv_img_create+0x17c>)
   1997e:	227f      	movs	r2, #127	; 0x7f
   19980:	4917      	ldr	r1, [pc, #92]	; (199e0 <lv_img_create+0x180>)
   19982:	2001      	movs	r0, #1
   19984:	4c17      	ldr	r4, [pc, #92]	; (199e4 <lv_img_create+0x184>)
   19986:	47a0      	blx	r4
}
   19988:	4628      	mov	r0, r5
   1998a:	b002      	add	sp, #8
   1998c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_obj_del(img);
   19990:	4628      	mov	r0, r5
   19992:	4b22      	ldr	r3, [pc, #136]	; (19a1c <lv_img_create+0x1bc>)
   19994:	4798      	blx	r3
        return NULL;
   19996:	2500      	movs	r5, #0
   19998:	e7f6      	b.n	19988 <lv_img_create+0x128>
        lv_theme_apply(img, LV_THEME_IMAGE);
   1999a:	210f      	movs	r1, #15
   1999c:	4628      	mov	r0, r5
   1999e:	4b20      	ldr	r3, [pc, #128]	; (19a20 <lv_img_create+0x1c0>)
   199a0:	4798      	blx	r3
        lv_obj_set_click(img, false);
   199a2:	4631      	mov	r1, r6
   199a4:	4628      	mov	r0, r5
   199a6:	4b1f      	ldr	r3, [pc, #124]	; (19a24 <lv_img_create+0x1c4>)
   199a8:	4798      	blx	r3
        lv_obj_set_adv_hittest(img, true); /*Images have fast hit-testing*/
   199aa:	2101      	movs	r1, #1
   199ac:	4628      	mov	r0, r5
   199ae:	4b1e      	ldr	r3, [pc, #120]	; (19a28 <lv_img_create+0x1c8>)
   199b0:	4798      	blx	r3
        if(par != NULL) {
   199b2:	f1b8 0f00 	cmp.w	r8, #0
   199b6:	d004      	beq.n	199c2 <lv_img_create+0x162>
            ext->auto_size = 1;
   199b8:	7d23      	ldrb	r3, [r4, #20]
   199ba:	f043 0304 	orr.w	r3, r3, #4
   199be:	7523      	strb	r3, [r4, #20]
   199c0:	e7da      	b.n	19978 <lv_img_create+0x118>
            ext->auto_size = 0;
   199c2:	7d23      	ldrb	r3, [r4, #20]
   199c4:	f36f 0382 	bfc	r3, #2, #1
   199c8:	7523      	strb	r3, [r4, #20]
   199ca:	e7d5      	b.n	19978 <lv_img_create+0x118>
   199cc:	00003e19 	.word	0x00003e19
   199d0:	000022a5 	.word	0x000022a5
   199d4:	2000c5f8 	.word	0x2000c5f8
   199d8:	00002bc5 	.word	0x00002bc5
   199dc:	00029624 	.word	0x00029624
   199e0:	000296ac 	.word	0x000296ac
   199e4:	00012251 	.word	0x00012251
   199e8:	00023fcc 	.word	0x00023fcc
   199ec:	000022ad 	.word	0x000022ad
   199f0:	00004d49 	.word	0x00004d49
   199f4:	00002f51 	.word	0x00002f51
   199f8:	00002fa1 	.word	0x00002fa1
   199fc:	00019a2d 	.word	0x00019a2d
   19a00:	00002b21 	.word	0x00002b21
   19a04:	00019111 	.word	0x00019111
   19a08:	00002b7d 	.word	0x00002b7d
   19a0c:	00004d91 	.word	0x00004d91
   19a10:	00019605 	.word	0x00019605
   19a14:	00003a8d 	.word	0x00003a8d
   19a18:	00029750 	.word	0x00029750
   19a1c:	00004f59 	.word	0x00004f59
   19a20:	000141dd 	.word	0x000141dd
   19a24:	00002995 	.word	0x00002995
   19a28:	00002941 	.word	0x00002941

00019a2c <lv_img_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_img_signal(lv_obj_t * img, lv_signal_t sign, void * param)
{
   19a2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19a30:	b085      	sub	sp, #20
   19a32:	4607      	mov	r7, r0
   19a34:	4615      	mov	r5, r2
    lv_res_t res;
    if(sign == LV_SIGNAL_GET_STYLE) {
   19a36:	2908      	cmp	r1, #8
   19a38:	d021      	beq.n	19a7e <lv_img_signal+0x52>
   19a3a:	460c      	mov	r4, r1
        if(info->result != NULL) return LV_RES_OK;
        else return ancestor_signal(img, sign, param);
    }

    /* Include the ancient signal function */
    res = ancestor_signal(img, sign, param);
   19a3c:	4b88      	ldr	r3, [pc, #544]	; (19c60 <lv_img_signal+0x234>)
   19a3e:	681b      	ldr	r3, [r3, #0]
   19a40:	4798      	blx	r3
   19a42:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
   19a44:	2801      	cmp	r0, #1
   19a46:	d121      	bne.n	19a8c <lv_img_signal+0x60>

    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
   19a48:	2c07      	cmp	r4, #7
   19a4a:	d02d      	beq.n	19aa8 <lv_img_signal+0x7c>

    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
   19a4c:	4638      	mov	r0, r7
   19a4e:	4b85      	ldr	r3, [pc, #532]	; (19c64 <lv_img_signal+0x238>)
   19a50:	4798      	blx	r3
   19a52:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CLEANUP) {
   19a54:	bb74      	cbnz	r4, 19ab4 <lv_img_signal+0x88>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
   19a56:	7d03      	ldrb	r3, [r0, #20]
   19a58:	f003 0303 	and.w	r3, r3, #3
   19a5c:	3b01      	subs	r3, #1
   19a5e:	b2db      	uxtb	r3, r3
   19a60:	2b01      	cmp	r3, #1
   19a62:	d813      	bhi.n	19a8c <lv_img_signal+0x60>
            lv_mem_free(ext->src);
   19a64:	6800      	ldr	r0, [r0, #0]
   19a66:	4b80      	ldr	r3, [pc, #512]	; (19c68 <lv_img_signal+0x23c>)
   19a68:	4798      	blx	r3
            ext->src      = NULL;
   19a6a:	2300      	movs	r3, #0
   19a6c:	f8c8 3000 	str.w	r3, [r8]
            ext->src_type = LV_IMG_SRC_UNKNOWN;
   19a70:	f898 3014 	ldrb.w	r3, [r8, #20]
   19a74:	f043 0303 	orr.w	r3, r3, #3
   19a78:	f888 3014 	strb.w	r3, [r8, #20]
   19a7c:	e006      	b.n	19a8c <lv_img_signal+0x60>


static lv_style_list_t * lv_img_get_style(lv_obj_t * img, uint8_t type)
{
    lv_style_list_t * style_dsc_p;
    switch(type) {
   19a7e:	7813      	ldrb	r3, [r2, #0]
   19a80:	b943      	cbnz	r3, 19a94 <lv_img_signal+0x68>
        case LV_IMG_PART_MAIN:
            style_dsc_p = &img->style_list;
   19a82:	f100 0328 	add.w	r3, r0, #40	; 0x28
        info->result = lv_img_get_style(img, info->part);
   19a86:	606b      	str	r3, [r5, #4]
        if(info->result != NULL) return LV_RES_OK;
   19a88:	2601      	movs	r6, #1
   19a8a:	b12b      	cbz	r3, 19a98 <lv_img_signal+0x6c>
}
   19a8c:	4630      	mov	r0, r6
   19a8e:	b005      	add	sp, #20
   19a90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            break;
        default:
            style_dsc_p = NULL;
   19a94:	2300      	movs	r3, #0
   19a96:	e7f6      	b.n	19a86 <lv_img_signal+0x5a>
        else return ancestor_signal(img, sign, param);
   19a98:	4b71      	ldr	r3, [pc, #452]	; (19c60 <lv_img_signal+0x234>)
   19a9a:	681b      	ldr	r3, [r3, #0]
   19a9c:	462a      	mov	r2, r5
   19a9e:	2108      	movs	r1, #8
   19aa0:	4638      	mov	r0, r7
   19aa2:	4798      	blx	r3
   19aa4:	4606      	mov	r6, r0
   19aa6:	e7f1      	b.n	19a8c <lv_img_signal+0x60>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
   19aa8:	4970      	ldr	r1, [pc, #448]	; (19c6c <lv_img_signal+0x240>)
   19aaa:	4628      	mov	r0, r5
   19aac:	4b70      	ldr	r3, [pc, #448]	; (19c70 <lv_img_signal+0x244>)
   19aae:	4798      	blx	r3
   19ab0:	4606      	mov	r6, r0
   19ab2:	e7eb      	b.n	19a8c <lv_img_signal+0x60>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
   19ab4:	2c04      	cmp	r4, #4
   19ab6:	d053      	beq.n	19b60 <lv_img_signal+0x134>
    else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
   19ab8:	2c06      	cmp	r4, #6
   19aba:	d05b      	beq.n	19b74 <lv_img_signal+0x148>
    else if(sign == LV_SIGNAL_HIT_TEST) {
   19abc:	2c0a      	cmp	r4, #10
   19abe:	d1e5      	bne.n	19a8c <lv_img_signal+0x60>
        if(ext->zoom != 256 && ext->angle == 0) {
   19ac0:	8a43      	ldrh	r3, [r0, #18]
   19ac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   19ac6:	f000 80c5 	beq.w	19c54 <lv_img_signal+0x228>
   19aca:	8982      	ldrh	r2, [r0, #12]
   19acc:	2a00      	cmp	r2, #0
   19ace:	f040 80c1 	bne.w	19c54 <lv_img_signal+0x228>
   19ad2:	8aba      	ldrh	r2, [r7, #20]
   19ad4:	3201      	adds	r2, #1
   19ad6:	8a39      	ldrh	r1, [r7, #16]
   19ad8:	1a52      	subs	r2, r2, r1
            lv_coord_t scaled_width = (origin_width * ext->zoom + 255) / 256;
   19ada:	b212      	sxth	r2, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   19adc:	8af9      	ldrh	r1, [r7, #22]
   19ade:	3101      	adds	r1, #1
   19ae0:	8a78      	ldrh	r0, [r7, #18]
   19ae2:	1a09      	subs	r1, r1, r0
            lv_coord_t scaled_height = (origin_height * ext->zoom + 255) / 256;
   19ae4:	b209      	sxth	r1, r1
            lv_coord_t scaled_width = (origin_width * ext->zoom + 255) / 256;
   19ae6:	fb03 f002 	mul.w	r0, r3, r2
   19aea:	30ff      	adds	r0, #255	; 0xff
   19aec:	bf48      	it	mi
   19aee:	30ff      	addmi	r0, #255	; 0xff
            lv_coord_t width_offset = (origin_width - scaled_width) / 2;
   19af0:	f340 200f 	sbfx	r0, r0, #8, #16
   19af4:	1a12      	subs	r2, r2, r0
   19af6:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   19afa:	1054      	asrs	r4, r2, #1
            lv_coord_t scaled_height = (origin_height * ext->zoom + 255) / 256;
   19afc:	fb01 f303 	mul.w	r3, r1, r3
   19b00:	33ff      	adds	r3, #255	; 0xff
   19b02:	bf48      	it	mi
   19b04:	33ff      	addmi	r3, #255	; 0xff
            lv_coord_t height_offset = (origin_height - scaled_height) / 2;
   19b06:	f343 230f 	sbfx	r3, r3, #8, #16
   19b0a:	1acb      	subs	r3, r1, r3
   19b0c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   19b10:	1058      	asrs	r0, r3, #1
   19b12:	f107 030f 	add.w	r3, r7, #15
   19b16:	3717      	adds	r7, #23
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
   19b18:	aa02      	add	r2, sp, #8
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
   19b1a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
   19b1e:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
   19b22:	42bb      	cmp	r3, r7
   19b24:	d1f9      	bne.n	19b1a <lv_img_signal+0xee>
            coords.x1 += width_offset;
   19b26:	b2a2      	uxth	r2, r4
   19b28:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   19b2c:	4413      	add	r3, r2
   19b2e:	f8ad 3008 	strh.w	r3, [sp, #8]
            coords.x2 -= width_offset;
   19b32:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   19b36:	1a9a      	subs	r2, r3, r2
   19b38:	f8ad 200c 	strh.w	r2, [sp, #12]
            coords.y1 += height_offset;
   19b3c:	b283      	uxth	r3, r0
   19b3e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   19b42:	441a      	add	r2, r3
   19b44:	f8ad 200a 	strh.w	r2, [sp, #10]
            coords.y2 -= height_offset;
   19b48:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   19b4c:	1ad3      	subs	r3, r2, r3
   19b4e:	f8ad 300e 	strh.w	r3, [sp, #14]
            info->result = _lv_area_is_point_on(&coords, info->point, 0);
   19b52:	2200      	movs	r2, #0
   19b54:	6829      	ldr	r1, [r5, #0]
   19b56:	a802      	add	r0, sp, #8
   19b58:	4b46      	ldr	r3, [pc, #280]	; (19c74 <lv_img_signal+0x248>)
   19b5a:	4798      	blx	r3
   19b5c:	7128      	strb	r0, [r5, #4]
        if(ext->zoom != 256 && ext->angle == 0) {
   19b5e:	e795      	b.n	19a8c <lv_img_signal+0x60>
        if(ext->src_type == LV_IMG_SRC_SYMBOL) {
   19b60:	7d03      	ldrb	r3, [r0, #20]
   19b62:	f003 0303 	and.w	r3, r3, #3
   19b66:	2b02      	cmp	r3, #2
   19b68:	d190      	bne.n	19a8c <lv_img_signal+0x60>
            lv_img_set_src(img, ext->src);
   19b6a:	6801      	ldr	r1, [r0, #0]
   19b6c:	4638      	mov	r0, r7
   19b6e:	4b42      	ldr	r3, [pc, #264]	; (19c78 <lv_img_signal+0x24c>)
   19b70:	4798      	blx	r3
   19b72:	e78b      	b.n	19a8c <lv_img_signal+0x60>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
   19b74:	2207      	movs	r2, #7
   19b76:	2100      	movs	r1, #0
   19b78:	4638      	mov	r0, r7
   19b7a:	4d40      	ldr	r5, [pc, #256]	; (19c7c <lv_img_signal+0x250>)
   19b7c:	47a8      	blx	r5
        transf_zoom = (transf_zoom * ext->zoom) >> 8;
   19b7e:	f8b8 3012 	ldrh.w	r3, [r8, #18]
   19b82:	fb00 f303 	mul.w	r3, r0, r3
   19b86:	121c      	asrs	r4, r3, #8
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
   19b88:	2206      	movs	r2, #6
   19b8a:	2100      	movs	r1, #0
   19b8c:	4638      	mov	r0, r7
   19b8e:	47a8      	blx	r5
        transf_angle += ext->angle;
   19b90:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   19b94:	4403      	add	r3, r0
   19b96:	b21b      	sxth	r3, r3
        if(transf_angle || transf_zoom != LV_IMG_ZOOM_NONE) {
   19b98:	b91b      	cbnz	r3, 19ba2 <lv_img_signal+0x176>
   19b9a:	b222      	sxth	r2, r4
   19b9c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   19ba0:	d031      	beq.n	19c06 <lv_img_signal+0x1da>
            _lv_img_buf_get_transformed_area(&a, ext->w, ext->h, transf_angle, transf_zoom, &ext->pivot);
   19ba2:	f9b8 200a 	ldrsh.w	r2, [r8, #10]
   19ba6:	f9b8 1008 	ldrsh.w	r1, [r8, #8]
   19baa:	f108 000e 	add.w	r0, r8, #14
   19bae:	9001      	str	r0, [sp, #4]
   19bb0:	b2a4      	uxth	r4, r4
   19bb2:	9400      	str	r4, [sp, #0]
   19bb4:	a802      	add	r0, sp, #8
   19bb6:	4c32      	ldr	r4, [pc, #200]	; (19c80 <lv_img_signal+0x254>)
   19bb8:	47a0      	blx	r4
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori - a.x1);
   19bba:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
   19bbe:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
   19bc2:	1acb      	subs	r3, r1, r3
   19bc4:	428b      	cmp	r3, r1
   19bc6:	bfb8      	it	lt
   19bc8:	460b      	movlt	r3, r1
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori - a.y1);
   19bca:	b21b      	sxth	r3, r3
   19bcc:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
   19bd0:	1a8a      	subs	r2, r1, r2
   19bd2:	4293      	cmp	r3, r2
   19bd4:	bfb8      	it	lt
   19bd6:	4613      	movlt	r3, r2
   19bd8:	b21b      	sxth	r3, r3
   19bda:	867b      	strh	r3, [r7, #50]	; 0x32
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori + a.x2 - ext->w);
   19bdc:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
   19be0:	440a      	add	r2, r1
   19be2:	f9b8 0008 	ldrsh.w	r0, [r8, #8]
   19be6:	1a12      	subs	r2, r2, r0
   19be8:	4293      	cmp	r3, r2
   19bea:	bfb8      	it	lt
   19bec:	4613      	movlt	r3, r2
   19bee:	b21b      	sxth	r3, r3
   19bf0:	867b      	strh	r3, [r7, #50]	; 0x32
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori + a.y2 - ext->h);
   19bf2:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
   19bf6:	440a      	add	r2, r1
   19bf8:	f9b8 100a 	ldrsh.w	r1, [r8, #10]
   19bfc:	1a52      	subs	r2, r2, r1
   19bfe:	4293      	cmp	r3, r2
   19c00:	bfb8      	it	lt
   19c02:	4613      	movlt	r3, r2
   19c04:	867b      	strh	r3, [r7, #50]	; 0x32
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   19c06:	2212      	movs	r2, #18
   19c08:	2100      	movs	r1, #0
   19c0a:	4638      	mov	r0, r7
   19c0c:	f8df 806c 	ldr.w	r8, [pc, #108]	; 19c7c <lv_img_signal+0x250>
   19c10:	47c0      	blx	r8
   19c12:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   19c14:	2213      	movs	r2, #19
   19c16:	2100      	movs	r1, #0
   19c18:	4638      	mov	r0, r7
   19c1a:	47c0      	blx	r8
   19c1c:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   19c1e:	2210      	movs	r2, #16
   19c20:	2100      	movs	r1, #0
   19c22:	4638      	mov	r0, r7
   19c24:	47c0      	blx	r8
   19c26:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   19c28:	2211      	movs	r2, #17
   19c2a:	2100      	movs	r1, #0
   19c2c:	4638      	mov	r0, r7
   19c2e:	47c0      	blx	r8
        img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, right);
   19c30:	454c      	cmp	r4, r9
   19c32:	bfb8      	it	lt
   19c34:	464c      	movlt	r4, r9
   19c36:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
   19c3a:	b222      	sxth	r2, r4
        img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, top);
   19c3c:	4293      	cmp	r3, r2
   19c3e:	bfb8      	it	lt
   19c40:	4613      	movlt	r3, r2
   19c42:	42ab      	cmp	r3, r5
   19c44:	bfb8      	it	lt
   19c46:	462b      	movlt	r3, r5
        img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, bottom);
   19c48:	b21b      	sxth	r3, r3
   19c4a:	4298      	cmp	r0, r3
   19c4c:	bfb8      	it	lt
   19c4e:	4618      	movlt	r0, r3
   19c50:	8678      	strh	r0, [r7, #50]	; 0x32
   19c52:	e71b      	b.n	19a8c <lv_img_signal+0x60>
            info->result = lv_obj_is_point_on_coords(img, info->point);
   19c54:	6829      	ldr	r1, [r5, #0]
   19c56:	4638      	mov	r0, r7
   19c58:	4b0a      	ldr	r3, [pc, #40]	; (19c84 <lv_img_signal+0x258>)
   19c5a:	4798      	blx	r3
   19c5c:	7128      	strb	r0, [r5, #4]
   19c5e:	e715      	b.n	19a8c <lv_img_signal+0x60>
   19c60:	2000c5f8 	.word	0x2000c5f8
   19c64:	00004d91 	.word	0x00004d91
   19c68:	000124b9 	.word	0x000124b9
   19c6c:	00029760 	.word	0x00029760
   19c70:	00005089 	.word	0x00005089
   19c74:	000115ad 	.word	0x000115ad
   19c78:	00019605 	.word	0x00019605
   19c7c:	000044c9 	.word	0x000044c9
   19c80:	0000ec59 	.word	0x0000ec59
   19c84:	00005049 	.word	0x00005049

00019c88 <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * label)
{
   19c88:	b510      	push	{r4, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   19c8a:	4b09      	ldr	r3, [pc, #36]	; (19cb0 <lv_label_dot_tmp_free+0x28>)
   19c8c:	4798      	blx	r3
   19c8e:	4604      	mov	r4, r0
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
   19c90:	7c43      	ldrb	r3, [r0, #17]
   19c92:	f013 0f01 	tst.w	r3, #1
   19c96:	d003      	beq.n	19ca0 <lv_label_dot_tmp_free+0x18>
   19c98:	6840      	ldr	r0, [r0, #4]
   19c9a:	b108      	cbz	r0, 19ca0 <lv_label_dot_tmp_free+0x18>
        lv_mem_free(ext->dot.tmp_ptr);
   19c9c:	4b05      	ldr	r3, [pc, #20]	; (19cb4 <lv_label_dot_tmp_free+0x2c>)
   19c9e:	4798      	blx	r3
    }
    ext->dot_tmp_alloc = false;
   19ca0:	7c63      	ldrb	r3, [r4, #17]
   19ca2:	f36f 0300 	bfc	r3, #0, #1
   19ca6:	7463      	strb	r3, [r4, #17]
    ext->dot.tmp_ptr   = NULL;
   19ca8:	2300      	movs	r3, #0
   19caa:	6063      	str	r3, [r4, #4]
   19cac:	bd10      	pop	{r4, pc}
   19cae:	bf00      	nop
   19cb0:	00004d91 	.word	0x00004d91
   19cb4:	000124b9 	.word	0x000124b9

00019cb8 <lv_label_revert_dots>:
{
   19cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19cba:	4607      	mov	r7, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   19cbc:	4b1e      	ldr	r3, [pc, #120]	; (19d38 <lv_label_revert_dots+0x80>)
   19cbe:	4798      	blx	r3
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
   19cc0:	7c03      	ldrb	r3, [r0, #16]
   19cc2:	f003 0307 	and.w	r3, r3, #7
   19cc6:	2b02      	cmp	r3, #2
   19cc8:	d000      	beq.n	19ccc <lv_label_revert_dots+0x14>
   19cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19ccc:	4604      	mov	r4, r0
    if(ext->dot_end == LV_LABEL_DOT_END_INV) return;
   19cce:	8901      	ldrh	r1, [r0, #8]
   19cd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19cd4:	4299      	cmp	r1, r3
   19cd6:	d0f8      	beq.n	19cca <lv_label_revert_dots+0x12>
    uint32_t byte_i   = _lv_txt_encoded_get_byte_id(ext->text, letter_i);
   19cd8:	4b18      	ldr	r3, [pc, #96]	; (19d3c <lv_label_revert_dots+0x84>)
   19cda:	681b      	ldr	r3, [r3, #0]
   19cdc:	3903      	subs	r1, #3
   19cde:	6800      	ldr	r0, [r0, #0]
   19ce0:	4798      	blx	r3
   19ce2:	4606      	mov	r6, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   19ce4:	4638      	mov	r0, r7
   19ce6:	4b14      	ldr	r3, [pc, #80]	; (19d38 <lv_label_revert_dots+0x80>)
   19ce8:	4798      	blx	r3
    if(ext->dot_tmp_alloc) {
   19cea:	7c43      	ldrb	r3, [r0, #17]
   19cec:	f013 0f01 	tst.w	r3, #1
        return ext->dot.tmp_ptr;
   19cf0:	bf14      	ite	ne
   19cf2:	6840      	ldrne	r0, [r0, #4]
        return ext->dot.tmp;
   19cf4:	3004      	addeq	r0, #4
    while(ext->text[byte_i + i] != '\0') {
   19cf6:	6823      	ldr	r3, [r4, #0]
   19cf8:	eb03 0e06 	add.w	lr, r3, r6
   19cfc:	5d9b      	ldrb	r3, [r3, r6]
   19cfe:	b1c3      	cbz	r3, 19d32 <lv_label_revert_dots+0x7a>
   19d00:	2500      	movs	r5, #0
   19d02:	462b      	mov	r3, r5
        ext->text[byte_i + i] = dot_tmp[i];
   19d04:	5d42      	ldrb	r2, [r0, r5]
   19d06:	f88e 2000 	strb.w	r2, [lr]
        i++;
   19d0a:	3301      	adds	r3, #1
   19d0c:	b2db      	uxtb	r3, r3
    while(ext->text[byte_i + i] != '\0') {
   19d0e:	461d      	mov	r5, r3
   19d10:	18f2      	adds	r2, r6, r3
   19d12:	6821      	ldr	r1, [r4, #0]
   19d14:	eb01 0e02 	add.w	lr, r1, r2
   19d18:	5c8a      	ldrb	r2, [r1, r2]
   19d1a:	2a00      	cmp	r2, #0
   19d1c:	d1f2      	bne.n	19d04 <lv_label_revert_dots+0x4c>
    ext->text[byte_i + i] = dot_tmp[i];
   19d1e:	5d43      	ldrb	r3, [r0, r5]
   19d20:	f88e 3000 	strb.w	r3, [lr]
    lv_label_dot_tmp_free(label);
   19d24:	4638      	mov	r0, r7
   19d26:	4b06      	ldr	r3, [pc, #24]	; (19d40 <lv_label_revert_dots+0x88>)
   19d28:	4798      	blx	r3
    ext->dot_end = LV_LABEL_DOT_END_INV;
   19d2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19d2e:	8123      	strh	r3, [r4, #8]
   19d30:	e7cb      	b.n	19cca <lv_label_revert_dots+0x12>
    while(ext->text[byte_i + i] != '\0') {
   19d32:	2500      	movs	r5, #0
   19d34:	e7f3      	b.n	19d1e <lv_label_revert_dots+0x66>
   19d36:	bf00      	nop
   19d38:	00004d91 	.word	0x00004d91
   19d3c:	2000005c 	.word	0x2000005c
   19d40:	00019c89 	.word	0x00019c89

00019d44 <lv_label_set_offset_y>:
{
   19d44:	b538      	push	{r3, r4, r5, lr}
   19d46:	4604      	mov	r4, r0
   19d48:	460d      	mov	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   19d4a:	4b03      	ldr	r3, [pc, #12]	; (19d58 <lv_label_set_offset_y+0x14>)
   19d4c:	4798      	blx	r3
    ext->offset.y        = y;
   19d4e:	81c5      	strh	r5, [r0, #14]
    lv_obj_invalidate(label);
   19d50:	4620      	mov	r0, r4
   19d52:	4b02      	ldr	r3, [pc, #8]	; (19d5c <lv_label_set_offset_y+0x18>)
   19d54:	4798      	blx	r3
   19d56:	bd38      	pop	{r3, r4, r5, pc}
   19d58:	00004d91 	.word	0x00004d91
   19d5c:	00003315 	.word	0x00003315

00019d60 <lv_label_set_offset_x>:
{
   19d60:	b538      	push	{r3, r4, r5, lr}
   19d62:	4604      	mov	r4, r0
   19d64:	460d      	mov	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   19d66:	4b03      	ldr	r3, [pc, #12]	; (19d74 <lv_label_set_offset_x+0x14>)
   19d68:	4798      	blx	r3
    ext->offset.x        = x;
   19d6a:	8185      	strh	r5, [r0, #12]
    lv_obj_invalidate(label);
   19d6c:	4620      	mov	r0, r4
   19d6e:	4b02      	ldr	r3, [pc, #8]	; (19d78 <lv_label_set_offset_x+0x18>)
   19d70:	4798      	blx	r3
   19d72:	bd38      	pop	{r3, r4, r5, pc}
   19d74:	00004d91 	.word	0x00004d91
   19d78:	00003315 	.word	0x00003315

00019d7c <get_txt_coords>:
}

static void get_txt_coords(const lv_obj_t * label, lv_area_t * area)
{
   19d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19d80:	4606      	mov	r6, r0
   19d82:	460c      	mov	r4, r1
    lv_obj_get_coords(label, area);
   19d84:	4b12      	ldr	r3, [pc, #72]	; (19dd0 <get_txt_coords+0x54>)
   19d86:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   19d88:	2212      	movs	r2, #18
   19d8a:	2100      	movs	r1, #0
   19d8c:	4630      	mov	r0, r6
   19d8e:	4d11      	ldr	r5, [pc, #68]	; (19dd4 <get_txt_coords+0x58>)
   19d90:	47a8      	blx	r5
   19d92:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   19d94:	2213      	movs	r2, #19
   19d96:	2100      	movs	r1, #0
   19d98:	4630      	mov	r0, r6
   19d9a:	47a8      	blx	r5
   19d9c:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   19d9e:	2210      	movs	r2, #16
   19da0:	2100      	movs	r1, #0
   19da2:	4630      	mov	r0, r6
   19da4:	47a8      	blx	r5
   19da6:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   19da8:	2211      	movs	r2, #17
   19daa:	2100      	movs	r1, #0
   19dac:	4630      	mov	r0, r6
   19dae:	47a8      	blx	r5

    lv_coord_t left   = lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN);
    lv_coord_t right  = lv_obj_get_style_pad_right(label, LV_LABEL_PART_MAIN);
    lv_coord_t top    = lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN);
    lv_coord_t bottom = lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
    area->x1 += left;
   19db0:	8823      	ldrh	r3, [r4, #0]
   19db2:	4498      	add	r8, r3
   19db4:	f8a4 8000 	strh.w	r8, [r4]
    area->x2 -= right;
   19db8:	88a3      	ldrh	r3, [r4, #4]
   19dba:	eba3 0309 	sub.w	r3, r3, r9
   19dbe:	80a3      	strh	r3, [r4, #4]
    area->y1 += top;
   19dc0:	8863      	ldrh	r3, [r4, #2]
   19dc2:	441f      	add	r7, r3
   19dc4:	8067      	strh	r7, [r4, #2]
    area->y2 -= bottom;
   19dc6:	88e3      	ldrh	r3, [r4, #6]
   19dc8:	1a18      	subs	r0, r3, r0
   19dca:	80e0      	strh	r0, [r4, #6]
   19dcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19dd0:	00002e35 	.word	0x00002e35
   19dd4:	000044c9 	.word	0x000044c9

00019dd8 <lv_label_set_dot_tmp>:
{
   19dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   19dda:	b083      	sub	sp, #12
   19ddc:	4606      	mov	r6, r0
   19dde:	460f      	mov	r7, r1
   19de0:	4615      	mov	r5, r2
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   19de2:	4b18      	ldr	r3, [pc, #96]	; (19e44 <lv_label_set_dot_tmp+0x6c>)
   19de4:	4798      	blx	r3
   19de6:	4604      	mov	r4, r0
    lv_label_dot_tmp_free(label); /* Deallocate any existing space */
   19de8:	4630      	mov	r0, r6
   19dea:	4b17      	ldr	r3, [pc, #92]	; (19e48 <lv_label_set_dot_tmp+0x70>)
   19dec:	4798      	blx	r3
    if(len > sizeof(char *)) {
   19dee:	2d04      	cmp	r5, #4
   19df0:	d91c      	bls.n	19e2c <lv_label_set_dot_tmp+0x54>
        ext->dot.tmp_ptr = lv_mem_alloc(len + 1);
   19df2:	1c68      	adds	r0, r5, #1
   19df4:	4b15      	ldr	r3, [pc, #84]	; (19e4c <lv_label_set_dot_tmp+0x74>)
   19df6:	4798      	blx	r3
   19df8:	6060      	str	r0, [r4, #4]
        if(ext->dot.tmp_ptr == NULL) {
   19dfa:	b160      	cbz	r0, 19e16 <lv_label_set_dot_tmp+0x3e>
        _lv_memcpy(ext->dot.tmp_ptr, data, len);
   19dfc:	462a      	mov	r2, r5
   19dfe:	4639      	mov	r1, r7
   19e00:	4b13      	ldr	r3, [pc, #76]	; (19e50 <lv_label_set_dot_tmp+0x78>)
   19e02:	4798      	blx	r3
        ext->dot.tmp_ptr[len] = '\0';
   19e04:	6863      	ldr	r3, [r4, #4]
   19e06:	2200      	movs	r2, #0
   19e08:	555a      	strb	r2, [r3, r5]
        ext->dot_tmp_alloc    = true;
   19e0a:	7c63      	ldrb	r3, [r4, #17]
   19e0c:	f043 0301 	orr.w	r3, r3, #1
   19e10:	7463      	strb	r3, [r4, #17]
    return true;
   19e12:	2001      	movs	r0, #1
   19e14:	e014      	b.n	19e40 <lv_label_set_dot_tmp+0x68>
            LV_LOG_ERROR("Failed to allocate memory for dot_tmp_ptr");
   19e16:	4b0f      	ldr	r3, [pc, #60]	; (19e54 <lv_label_set_dot_tmp+0x7c>)
   19e18:	9300      	str	r3, [sp, #0]
   19e1a:	4b0f      	ldr	r3, [pc, #60]	; (19e58 <lv_label_set_dot_tmp+0x80>)
   19e1c:	f240 52b5 	movw	r2, #1461	; 0x5b5
   19e20:	490e      	ldr	r1, [pc, #56]	; (19e5c <lv_label_set_dot_tmp+0x84>)
   19e22:	2003      	movs	r0, #3
   19e24:	4c0e      	ldr	r4, [pc, #56]	; (19e60 <lv_label_set_dot_tmp+0x88>)
   19e26:	47a0      	blx	r4
            return false;
   19e28:	2000      	movs	r0, #0
   19e2a:	e009      	b.n	19e40 <lv_label_set_dot_tmp+0x68>
        ext->dot_tmp_alloc = false;
   19e2c:	7c63      	ldrb	r3, [r4, #17]
   19e2e:	f36f 0300 	bfc	r3, #0, #1
   19e32:	7463      	strb	r3, [r4, #17]
        _lv_memcpy(ext->dot.tmp, data, len);
   19e34:	462a      	mov	r2, r5
   19e36:	4639      	mov	r1, r7
   19e38:	1d20      	adds	r0, r4, #4
   19e3a:	4b05      	ldr	r3, [pc, #20]	; (19e50 <lv_label_set_dot_tmp+0x78>)
   19e3c:	4798      	blx	r3
    return true;
   19e3e:	2001      	movs	r0, #1
}
   19e40:	b003      	add	sp, #12
   19e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19e44:	00004d91 	.word	0x00004d91
   19e48:	00019c89 	.word	0x00019c89
   19e4c:	000123d1 	.word	0x000123d1
   19e50:	00012649 	.word	0x00012649
   19e54:	000299b8 	.word	0x000299b8
   19e58:	00029768 	.word	0x00029768
   19e5c:	00029988 	.word	0x00029988
   19e60:	00012251 	.word	0x00012251

00019e64 <lv_label_set_align>:
{
   19e64:	b530      	push	{r4, r5, lr}
   19e66:	b083      	sub	sp, #12
   19e68:	4604      	mov	r4, r0
   19e6a:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   19e6c:	4b10      	ldr	r3, [pc, #64]	; (19eb0 <lv_label_set_align+0x4c>)
   19e6e:	4798      	blx	r3
   19e70:	b968      	cbnz	r0, 19e8e <lv_label_set_align+0x2a>
   19e72:	4b10      	ldr	r3, [pc, #64]	; (19eb4 <lv_label_set_align+0x50>)
   19e74:	9300      	str	r3, [sp, #0]
   19e76:	f44f 72c4 	mov.w	r2, #392	; 0x188
   19e7a:	490f      	ldr	r1, [pc, #60]	; (19eb8 <lv_label_set_align+0x54>)
   19e7c:	2003      	movs	r0, #3
   19e7e:	4d0f      	ldr	r5, [pc, #60]	; (19ebc <lv_label_set_align+0x58>)
   19e80:	47a8      	blx	r5
   19e82:	4622      	mov	r2, r4
   19e84:	2300      	movs	r3, #0
   19e86:	480e      	ldr	r0, [pc, #56]	; (19ec0 <lv_label_set_align+0x5c>)
   19e88:	490e      	ldr	r1, [pc, #56]	; (19ec4 <lv_label_set_align+0x60>)
   19e8a:	4788      	blx	r1
   19e8c:	e7fe      	b.n	19e8c <lv_label_set_align+0x28>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   19e8e:	4620      	mov	r0, r4
   19e90:	4b0d      	ldr	r3, [pc, #52]	; (19ec8 <lv_label_set_align+0x64>)
   19e92:	4798      	blx	r3
    if(ext->align == align) return;
   19e94:	7c03      	ldrb	r3, [r0, #16]
   19e96:	f3c3 1301 	ubfx	r3, r3, #4, #2
   19e9a:	42ab      	cmp	r3, r5
   19e9c:	d006      	beq.n	19eac <lv_label_set_align+0x48>
    ext->align = align;
   19e9e:	7c03      	ldrb	r3, [r0, #16]
   19ea0:	f365 1305 	bfi	r3, r5, #4, #2
   19ea4:	7403      	strb	r3, [r0, #16]
    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
   19ea6:	4620      	mov	r0, r4
   19ea8:	4b08      	ldr	r3, [pc, #32]	; (19ecc <lv_label_set_align+0x68>)
   19eaa:	4798      	blx	r3
}
   19eac:	b003      	add	sp, #12
   19eae:	bd30      	pop	{r4, r5, pc}
   19eb0:	000022a5 	.word	0x000022a5
   19eb4:	00029780 	.word	0x00029780
   19eb8:	00029988 	.word	0x00029988
   19ebc:	00012251 	.word	0x00012251
   19ec0:	00024830 	.word	0x00024830
   19ec4:	000022ad 	.word	0x000022ad
   19ec8:	00004d91 	.word	0x00004d91
   19ecc:	00003315 	.word	0x00003315

00019ed0 <lv_label_get_text>:
{
   19ed0:	b530      	push	{r4, r5, lr}
   19ed2:	b083      	sub	sp, #12
   19ed4:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   19ed6:	4b0b      	ldr	r3, [pc, #44]	; (19f04 <lv_label_get_text+0x34>)
   19ed8:	4798      	blx	r3
   19eda:	b968      	cbnz	r0, 19ef8 <lv_label_get_text+0x28>
   19edc:	4b0a      	ldr	r3, [pc, #40]	; (19f08 <lv_label_get_text+0x38>)
   19ede:	9300      	str	r3, [sp, #0]
   19ee0:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
   19ee4:	4909      	ldr	r1, [pc, #36]	; (19f0c <lv_label_get_text+0x3c>)
   19ee6:	2003      	movs	r0, #3
   19ee8:	4d09      	ldr	r5, [pc, #36]	; (19f10 <lv_label_get_text+0x40>)
   19eea:	47a8      	blx	r5
   19eec:	4622      	mov	r2, r4
   19eee:	2300      	movs	r3, #0
   19ef0:	4808      	ldr	r0, [pc, #32]	; (19f14 <lv_label_get_text+0x44>)
   19ef2:	4909      	ldr	r1, [pc, #36]	; (19f18 <lv_label_get_text+0x48>)
   19ef4:	4788      	blx	r1
   19ef6:	e7fe      	b.n	19ef6 <lv_label_get_text+0x26>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   19ef8:	4620      	mov	r0, r4
   19efa:	4b08      	ldr	r3, [pc, #32]	; (19f1c <lv_label_get_text+0x4c>)
   19efc:	4798      	blx	r3
}
   19efe:	6800      	ldr	r0, [r0, #0]
   19f00:	b003      	add	sp, #12
   19f02:	bd30      	pop	{r4, r5, pc}
   19f04:	000022a5 	.word	0x000022a5
   19f08:	000297cc 	.word	0x000297cc
   19f0c:	00029988 	.word	0x00029988
   19f10:	00012251 	.word	0x00012251
   19f14:	00024830 	.word	0x00024830
   19f18:	000022ad 	.word	0x000022ad
   19f1c:	00004d91 	.word	0x00004d91

00019f20 <lv_label_get_long_mode>:
{
   19f20:	b530      	push	{r4, r5, lr}
   19f22:	b083      	sub	sp, #12
   19f24:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   19f26:	4b0c      	ldr	r3, [pc, #48]	; (19f58 <lv_label_get_long_mode+0x38>)
   19f28:	4798      	blx	r3
   19f2a:	b968      	cbnz	r0, 19f48 <lv_label_get_long_mode+0x28>
   19f2c:	4b0b      	ldr	r3, [pc, #44]	; (19f5c <lv_label_get_long_mode+0x3c>)
   19f2e:	9300      	str	r3, [sp, #0]
   19f30:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
   19f34:	490a      	ldr	r1, [pc, #40]	; (19f60 <lv_label_get_long_mode+0x40>)
   19f36:	2003      	movs	r0, #3
   19f38:	4d0a      	ldr	r5, [pc, #40]	; (19f64 <lv_label_get_long_mode+0x44>)
   19f3a:	47a8      	blx	r5
   19f3c:	4622      	mov	r2, r4
   19f3e:	2300      	movs	r3, #0
   19f40:	4809      	ldr	r0, [pc, #36]	; (19f68 <lv_label_get_long_mode+0x48>)
   19f42:	490a      	ldr	r1, [pc, #40]	; (19f6c <lv_label_get_long_mode+0x4c>)
   19f44:	4788      	blx	r1
   19f46:	e7fe      	b.n	19f46 <lv_label_get_long_mode+0x26>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   19f48:	4620      	mov	r0, r4
   19f4a:	4b09      	ldr	r3, [pc, #36]	; (19f70 <lv_label_get_long_mode+0x50>)
   19f4c:	4798      	blx	r3
    return ext->long_mode;
   19f4e:	7c00      	ldrb	r0, [r0, #16]
}
   19f50:	f000 0007 	and.w	r0, r0, #7
   19f54:	b003      	add	sp, #12
   19f56:	bd30      	pop	{r4, r5, pc}
   19f58:	000022a5 	.word	0x000022a5
   19f5c:	000297e0 	.word	0x000297e0
   19f60:	00029988 	.word	0x00029988
   19f64:	00012251 	.word	0x00012251
   19f68:	00024830 	.word	0x00024830
   19f6c:	000022ad 	.word	0x000022ad
   19f70:	00004d91 	.word	0x00004d91

00019f74 <lv_label_get_align>:
{
   19f74:	b530      	push	{r4, r5, lr}
   19f76:	b083      	sub	sp, #12
   19f78:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   19f7a:	4b0e      	ldr	r3, [pc, #56]	; (19fb4 <lv_label_get_align+0x40>)
   19f7c:	4798      	blx	r3
   19f7e:	b968      	cbnz	r0, 19f9c <lv_label_get_align+0x28>
   19f80:	4b0d      	ldr	r3, [pc, #52]	; (19fb8 <lv_label_get_align+0x44>)
   19f82:	9300      	str	r3, [sp, #0]
   19f84:	f240 12ff 	movw	r2, #511	; 0x1ff
   19f88:	490c      	ldr	r1, [pc, #48]	; (19fbc <lv_label_get_align+0x48>)
   19f8a:	2003      	movs	r0, #3
   19f8c:	4d0c      	ldr	r5, [pc, #48]	; (19fc0 <lv_label_get_align+0x4c>)
   19f8e:	47a8      	blx	r5
   19f90:	4622      	mov	r2, r4
   19f92:	2300      	movs	r3, #0
   19f94:	480b      	ldr	r0, [pc, #44]	; (19fc4 <lv_label_get_align+0x50>)
   19f96:	490c      	ldr	r1, [pc, #48]	; (19fc8 <lv_label_get_align+0x54>)
   19f98:	4788      	blx	r1
   19f9a:	e7fe      	b.n	19f9a <lv_label_get_align+0x26>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   19f9c:	4620      	mov	r0, r4
   19f9e:	4b0b      	ldr	r3, [pc, #44]	; (19fcc <lv_label_get_align+0x58>)
   19fa0:	4798      	blx	r3
    lv_label_align_t align = ext->align;
   19fa2:	7c00      	ldrb	r0, [r0, #16]
   19fa4:	f3c0 1001 	ubfx	r0, r0, #4, #2
        align = LV_LABEL_ALIGN_LEFT;
   19fa8:	2803      	cmp	r0, #3
}
   19faa:	bf08      	it	eq
   19fac:	2000      	moveq	r0, #0
   19fae:	b003      	add	sp, #12
   19fb0:	bd30      	pop	{r4, r5, pc}
   19fb2:	bf00      	nop
   19fb4:	000022a5 	.word	0x000022a5
   19fb8:	000297f8 	.word	0x000297f8
   19fbc:	00029988 	.word	0x00029988
   19fc0:	00012251 	.word	0x00012251
   19fc4:	00024830 	.word	0x00024830
   19fc8:	000022ad 	.word	0x000022ad
   19fcc:	00004d91 	.word	0x00004d91

00019fd0 <lv_label_get_recolor>:
{
   19fd0:	b530      	push	{r4, r5, lr}
   19fd2:	b083      	sub	sp, #12
   19fd4:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   19fd6:	4b0c      	ldr	r3, [pc, #48]	; (1a008 <lv_label_get_recolor+0x38>)
   19fd8:	4798      	blx	r3
   19fda:	b968      	cbnz	r0, 19ff8 <lv_label_get_recolor+0x28>
   19fdc:	4b0b      	ldr	r3, [pc, #44]	; (1a00c <lv_label_get_recolor+0x3c>)
   19fde:	9300      	str	r3, [sp, #0]
   19fe0:	f240 221b 	movw	r2, #539	; 0x21b
   19fe4:	490a      	ldr	r1, [pc, #40]	; (1a010 <lv_label_get_recolor+0x40>)
   19fe6:	2003      	movs	r0, #3
   19fe8:	4d0a      	ldr	r5, [pc, #40]	; (1a014 <lv_label_get_recolor+0x44>)
   19fea:	47a8      	blx	r5
   19fec:	4622      	mov	r2, r4
   19fee:	2300      	movs	r3, #0
   19ff0:	4809      	ldr	r0, [pc, #36]	; (1a018 <lv_label_get_recolor+0x48>)
   19ff2:	490a      	ldr	r1, [pc, #40]	; (1a01c <lv_label_get_recolor+0x4c>)
   19ff4:	4788      	blx	r1
   19ff6:	e7fe      	b.n	19ff6 <lv_label_get_recolor+0x26>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   19ff8:	4620      	mov	r0, r4
   19ffa:	4b09      	ldr	r3, [pc, #36]	; (1a020 <lv_label_get_recolor+0x50>)
   19ffc:	4798      	blx	r3
    return ext->recolor == 0 ? false : true;
   19ffe:	7c00      	ldrb	r0, [r0, #16]
}
   1a000:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1a004:	b003      	add	sp, #12
   1a006:	bd30      	pop	{r4, r5, pc}
   1a008:	000022a5 	.word	0x000022a5
   1a00c:	0002980c 	.word	0x0002980c
   1a010:	00029988 	.word	0x00029988
   1a014:	00012251 	.word	0x00012251
   1a018:	00024830 	.word	0x00024830
   1a01c:	000022ad 	.word	0x000022ad
   1a020:	00004d91 	.word	0x00004d91

0001a024 <lv_label_get_letter_on>:
{
   1a024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a028:	b08f      	sub	sp, #60	; 0x3c
   1a02a:	4605      	mov	r5, r0
   1a02c:	9105      	str	r1, [sp, #20]
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   1a02e:	4b9e      	ldr	r3, [pc, #632]	; (1a2a8 <lv_label_get_letter_on+0x284>)
   1a030:	4798      	blx	r3
   1a032:	b968      	cbnz	r0, 1a050 <lv_label_get_letter_on+0x2c>
   1a034:	4b9d      	ldr	r3, [pc, #628]	; (1a2ac <lv_label_get_letter_on+0x288>)
   1a036:	9300      	str	r3, [sp, #0]
   1a038:	f240 22a5 	movw	r2, #677	; 0x2a5
   1a03c:	499c      	ldr	r1, [pc, #624]	; (1a2b0 <lv_label_get_letter_on+0x28c>)
   1a03e:	2003      	movs	r0, #3
   1a040:	4c9c      	ldr	r4, [pc, #624]	; (1a2b4 <lv_label_get_letter_on+0x290>)
   1a042:	47a0      	blx	r4
   1a044:	462a      	mov	r2, r5
   1a046:	2300      	movs	r3, #0
   1a048:	489b      	ldr	r0, [pc, #620]	; (1a2b8 <lv_label_get_letter_on+0x294>)
   1a04a:	499c      	ldr	r1, [pc, #624]	; (1a2bc <lv_label_get_letter_on+0x298>)
   1a04c:	4788      	blx	r1
   1a04e:	e7fe      	b.n	1a04e <lv_label_get_letter_on+0x2a>
    LV_ASSERT_NULL(pos);
   1a050:	9e05      	ldr	r6, [sp, #20]
   1a052:	4630      	mov	r0, r6
   1a054:	4b94      	ldr	r3, [pc, #592]	; (1a2a8 <lv_label_get_letter_on+0x284>)
   1a056:	4798      	blx	r3
   1a058:	b968      	cbnz	r0, 1a076 <lv_label_get_letter_on+0x52>
   1a05a:	4b94      	ldr	r3, [pc, #592]	; (1a2ac <lv_label_get_letter_on+0x288>)
   1a05c:	9300      	str	r3, [sp, #0]
   1a05e:	f240 22a6 	movw	r2, #678	; 0x2a6
   1a062:	4993      	ldr	r1, [pc, #588]	; (1a2b0 <lv_label_get_letter_on+0x28c>)
   1a064:	2003      	movs	r0, #3
   1a066:	4c93      	ldr	r4, [pc, #588]	; (1a2b4 <lv_label_get_letter_on+0x290>)
   1a068:	47a0      	blx	r4
   1a06a:	4632      	mov	r2, r6
   1a06c:	2300      	movs	r3, #0
   1a06e:	4892      	ldr	r0, [pc, #584]	; (1a2b8 <lv_label_get_letter_on+0x294>)
   1a070:	4992      	ldr	r1, [pc, #584]	; (1a2bc <lv_label_get_letter_on+0x298>)
   1a072:	4788      	blx	r1
   1a074:	e7fe      	b.n	1a074 <lv_label_get_letter_on+0x50>
    get_txt_coords(label, &txt_coords);
   1a076:	a90c      	add	r1, sp, #48	; 0x30
   1a078:	4628      	mov	r0, r5
   1a07a:	4b91      	ldr	r3, [pc, #580]	; (1a2c0 <lv_label_get_letter_on+0x29c>)
   1a07c:	4798      	blx	r3
    const char * txt         = lv_label_get_text(label);
   1a07e:	4628      	mov	r0, r5
   1a080:	4b90      	ldr	r3, [pc, #576]	; (1a2c4 <lv_label_get_letter_on+0x2a0>)
   1a082:	4798      	blx	r3
   1a084:	4607      	mov	r7, r0
    lv_label_ext_t * ext     = lv_obj_get_ext_attr(label);
   1a086:	4628      	mov	r0, r5
   1a088:	4b8f      	ldr	r3, [pc, #572]	; (1a2c8 <lv_label_get_letter_on+0x2a4>)
   1a08a:	4798      	blx	r3
   1a08c:	4606      	mov	r6, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1a08e:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   1a092:	3301      	adds	r3, #1
   1a094:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   1a098:	1a9b      	subs	r3, r3, r2
   1a09a:	b21b      	sxth	r3, r3
   1a09c:	9306      	str	r3, [sp, #24]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   1a09e:	f248 028e 	movw	r2, #32910	; 0x808e
   1a0a2:	2100      	movs	r1, #0
   1a0a4:	4628      	mov	r0, r5
   1a0a6:	4b89      	ldr	r3, [pc, #548]	; (1a2cc <lv_label_get_letter_on+0x2a8>)
   1a0a8:	4798      	blx	r3
   1a0aa:	4681      	mov	r9, r0
   1a0ac:	9003      	str	r0, [sp, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   1a0ae:	f248 0281 	movw	r2, #32897	; 0x8081
   1a0b2:	2100      	movs	r1, #0
   1a0b4:	4628      	mov	r0, r5
   1a0b6:	f8df 8230 	ldr.w	r8, [pc, #560]	; 1a2e8 <lv_label_get_letter_on+0x2c4>
   1a0ba:	47c0      	blx	r8
   1a0bc:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
   1a0be:	f248 0280 	movw	r2, #32896	; 0x8080
   1a0c2:	2100      	movs	r1, #0
   1a0c4:	4628      	mov	r0, r5
   1a0c6:	47c0      	blx	r8
   1a0c8:	9004      	str	r0, [sp, #16]
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
   1a0ca:	f9b9 b008 	ldrsh.w	fp, [r9, #8]
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
   1a0ce:	7c33      	ldrb	r3, [r6, #16]
    lv_txt_flag_t flag       = LV_TXT_FLAG_NONE;
   1a0d0:	f3c3 1680 	ubfx	r6, r3, #6, #1
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
   1a0d4:	f013 0f80 	tst.w	r3, #128	; 0x80
   1a0d8:	bf18      	it	ne
   1a0da:	f046 0602 	orrne.w	r6, r6, #2
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
   1a0de:	f013 0f07 	tst.w	r3, #7
   1a0e2:	bf08      	it	eq
   1a0e4:	f046 0610 	orreq.w	r6, r6, #16
    lv_label_align_t align = lv_label_get_align(label);
   1a0e8:	4628      	mov	r0, r5
   1a0ea:	4b79      	ldr	r3, [pc, #484]	; (1a2d0 <lv_label_get_letter_on+0x2ac>)
   1a0ec:	4798      	blx	r3
   1a0ee:	4682      	mov	sl, r0
    if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
   1a0f0:	2801      	cmp	r0, #1
   1a0f2:	d137      	bne.n	1a164 <lv_label_get_letter_on+0x140>
   1a0f4:	f046 0604 	orr.w	r6, r6, #4
    while(txt[line_start] != '\0') {
   1a0f8:	783b      	ldrb	r3, [r7, #0]
   1a0fa:	2b00      	cmp	r3, #0
   1a0fc:	d13a      	bne.n	1a174 <lv_label_get_letter_on+0x150>
   1a0fe:	46b8      	mov	r8, r7
   1a100:	2500      	movs	r5, #0
   1a102:	462c      	mov	r4, r5
        line_w = _lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
   1a104:	1b61      	subs	r1, r4, r5
   1a106:	9600      	str	r6, [sp, #0]
   1a108:	9b04      	ldr	r3, [sp, #16]
   1a10a:	9a03      	ldr	r2, [sp, #12]
   1a10c:	b289      	uxth	r1, r1
   1a10e:	4640      	mov	r0, r8
   1a110:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 1a2ec <lv_label_get_letter_on+0x2c8>
   1a114:	47c8      	blx	r9
   1a116:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   1a11a:	3301      	adds	r3, #1
   1a11c:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   1a120:	1a9b      	subs	r3, r3, r2
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
   1a122:	b21b      	sxth	r3, r3
   1a124:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   1a128:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   1a12c:	ea4f 0960 	mov.w	r9, r0, asr #1
   1a130:	ebc9 0363 	rsb	r3, r9, r3, asr #1
   1a134:	fa0f f983 	sxth.w	r9, r3
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
   1a138:	2300      	movs	r3, #0
   1a13a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    uint32_t i = 0;
   1a13e:	930a      	str	r3, [sp, #40]	; 0x28
    if(new_line_start > 0) {
   1a140:	2c00      	cmp	r4, #0
   1a142:	f040 80a1 	bne.w	1a288 <lv_label_get_letter_on+0x264>
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
   1a146:	4e63      	ldr	r6, [pc, #396]	; (1a2d4 <lv_label_get_letter_on+0x2b0>)
   1a148:	6833      	ldr	r3, [r6, #0]
   1a14a:	990a      	ldr	r1, [sp, #40]	; 0x28
   1a14c:	4640      	mov	r0, r8
   1a14e:	4798      	blx	r3
   1a150:	4604      	mov	r4, r0
    return  logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
   1a152:	6833      	ldr	r3, [r6, #0]
   1a154:	4629      	mov	r1, r5
   1a156:	4638      	mov	r0, r7
   1a158:	4798      	blx	r3
   1a15a:	4420      	add	r0, r4
   1a15c:	b280      	uxth	r0, r0
}
   1a15e:	b00f      	add	sp, #60	; 0x3c
   1a160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
   1a164:	2802      	cmp	r0, #2
   1a166:	f040 8096 	bne.w	1a296 <lv_label_get_letter_on+0x272>
   1a16a:	f046 0608 	orr.w	r6, r6, #8
    while(txt[line_start] != '\0') {
   1a16e:	783b      	ldrb	r3, [r7, #0]
   1a170:	2b00      	cmp	r3, #0
   1a172:	d048      	beq.n	1a206 <lv_label_get_letter_on+0x1e2>
{
   1a174:	46b8      	mov	r8, r7
   1a176:	f04f 0900 	mov.w	r9, #0
   1a17a:	464d      	mov	r5, r9
        y += letter_height + line_space;
   1a17c:	eb0b 0304 	add.w	r3, fp, r4
   1a180:	9307      	str	r3, [sp, #28]
   1a182:	e009      	b.n	1a198 <lv_label_get_letter_on+0x174>
   1a184:	9b07      	ldr	r3, [sp, #28]
   1a186:	4499      	add	r9, r3
   1a188:	fa0f f989 	sxth.w	r9, r9
    while(txt[line_start] != '\0') {
   1a18c:	eb07 0800 	add.w	r8, r7, r0
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
   1a190:	4605      	mov	r5, r0
    while(txt[line_start] != '\0') {
   1a192:	5c3b      	ldrb	r3, [r7, r0]
   1a194:	2b00      	cmp	r3, #0
   1a196:	d034      	beq.n	1a202 <lv_label_get_letter_on+0x1de>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
   1a198:	9600      	str	r6, [sp, #0]
   1a19a:	9b06      	ldr	r3, [sp, #24]
   1a19c:	9a04      	ldr	r2, [sp, #16]
   1a19e:	9903      	ldr	r1, [sp, #12]
   1a1a0:	4640      	mov	r0, r8
   1a1a2:	4c4d      	ldr	r4, [pc, #308]	; (1a2d8 <lv_label_get_letter_on+0x2b4>)
   1a1a4:	47a0      	blx	r4
   1a1a6:	4428      	add	r0, r5
        if(pos->y <= y + letter_height) {
   1a1a8:	9b05      	ldr	r3, [sp, #20]
   1a1aa:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   1a1ae:	eb09 030b 	add.w	r3, r9, fp
   1a1b2:	429a      	cmp	r2, r3
   1a1b4:	dce6      	bgt.n	1a184 <lv_label_get_letter_on+0x160>
   1a1b6:	4604      	mov	r4, r0
            uint32_t tmp = new_line_start;
   1a1b8:	a90e      	add	r1, sp, #56	; 0x38
   1a1ba:	f841 0d14 	str.w	r0, [r1, #-20]!
            letter = _lv_txt_encoded_prev(txt, &tmp);
   1a1be:	4b47      	ldr	r3, [pc, #284]	; (1a2dc <lv_label_get_letter_on+0x2b8>)
   1a1c0:	681b      	ldr	r3, [r3, #0]
   1a1c2:	4638      	mov	r0, r7
   1a1c4:	4798      	blx	r3
            if(letter != '\n' && txt[new_line_start] == '\0') new_line_start++;
   1a1c6:	280a      	cmp	r0, #10
   1a1c8:	d002      	beq.n	1a1d0 <lv_label_get_letter_on+0x1ac>
   1a1ca:	5d3b      	ldrb	r3, [r7, r4]
   1a1cc:	b903      	cbnz	r3, 1a1d0 <lv_label_get_letter_on+0x1ac>
   1a1ce:	3401      	adds	r4, #1
    if(align == LV_LABEL_ALIGN_CENTER) {
   1a1d0:	f1ba 0f01 	cmp.w	sl, #1
   1a1d4:	d096      	beq.n	1a104 <lv_label_get_letter_on+0xe0>
    else if(align == LV_LABEL_ALIGN_RIGHT) {
   1a1d6:	f1ba 0f02 	cmp.w	sl, #2
   1a1da:	d118      	bne.n	1a20e <lv_label_get_letter_on+0x1ea>
        line_w = _lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
   1a1dc:	1b61      	subs	r1, r4, r5
   1a1de:	9600      	str	r6, [sp, #0]
   1a1e0:	9b04      	ldr	r3, [sp, #16]
   1a1e2:	9a03      	ldr	r2, [sp, #12]
   1a1e4:	b289      	uxth	r1, r1
   1a1e6:	4640      	mov	r0, r8
   1a1e8:	f8df 9100 	ldr.w	r9, [pc, #256]	; 1a2ec <lv_label_get_letter_on+0x2c8>
   1a1ec:	47c8      	blx	r9
   1a1ee:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   1a1f2:	3301      	adds	r3, #1
   1a1f4:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   1a1f8:	1a9b      	subs	r3, r3, r2
        x += lv_area_get_width(&txt_coords) - line_w;
   1a1fa:	1a1b      	subs	r3, r3, r0
   1a1fc:	fa0f f983 	sxth.w	r9, r3
   1a200:	e79a      	b.n	1a138 <lv_label_get_letter_on+0x114>
   1a202:	4604      	mov	r4, r0
   1a204:	e7e4      	b.n	1a1d0 <lv_label_get_letter_on+0x1ac>
    while(txt[line_start] != '\0') {
   1a206:	46b8      	mov	r8, r7
   1a208:	2500      	movs	r5, #0
   1a20a:	462c      	mov	r4, r5
   1a20c:	e7e6      	b.n	1a1dc <lv_label_get_letter_on+0x1b8>
    lv_coord_t x = 0;
   1a20e:	f04f 0900 	mov.w	r9, #0
   1a212:	e791      	b.n	1a138 <lv_label_get_letter_on+0x114>
            x += lv_font_get_glyph_width(font, letter, letter_next);
   1a214:	9a07      	ldr	r2, [sp, #28]
   1a216:	9906      	ldr	r1, [sp, #24]
   1a218:	9803      	ldr	r0, [sp, #12]
   1a21a:	4b31      	ldr	r3, [pc, #196]	; (1a2e0 <lv_label_get_letter_on+0x2bc>)
   1a21c:	4798      	blx	r3
   1a21e:	eb00 0309 	add.w	r3, r0, r9
   1a222:	b29b      	uxth	r3, r3
            if(pos->x < x || i + line_start == new_line_start ||  txt[i + line_start] == '\0') {
   1a224:	9a05      	ldr	r2, [sp, #20]
   1a226:	f9b2 1000 	ldrsh.w	r1, [r2]
   1a22a:	b21a      	sxth	r2, r3
   1a22c:	4291      	cmp	r1, r2
   1a22e:	db28      	blt.n	1a282 <lv_label_get_letter_on+0x25e>
   1a230:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1a232:	1951      	adds	r1, r2, r5
   1a234:	42a1      	cmp	r1, r4
   1a236:	d024      	beq.n	1a282 <lv_label_get_letter_on+0x25e>
   1a238:	5c79      	ldrb	r1, [r7, r1]
   1a23a:	b311      	cbz	r1, 1a282 <lv_label_get_letter_on+0x25e>
            x += letter_space;
   1a23c:	9904      	ldr	r1, [sp, #16]
   1a23e:	440b      	add	r3, r1
   1a240:	fa0f f983 	sxth.w	r9, r3
            i_act = i;
   1a244:	4693      	mov	fp, r2
        while(i + line_start < new_line_start) {
   1a246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a248:	442b      	add	r3, r5
   1a24a:	42a3      	cmp	r3, r4
   1a24c:	f4bf af7b 	bcs.w	1a146 <lv_label_get_letter_on+0x122>
            uint32_t letter = _lv_txt_encoded_next(bidi_txt, &i);
   1a250:	f8da 3000 	ldr.w	r3, [sl]
   1a254:	a90a      	add	r1, sp, #40	; 0x28
   1a256:	4640      	mov	r0, r8
   1a258:	4798      	blx	r3
   1a25a:	9006      	str	r0, [sp, #24]
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
   1a25c:	f8da 3000 	ldr.w	r3, [sl]
   1a260:	2100      	movs	r1, #0
   1a262:	980a      	ldr	r0, [sp, #40]	; 0x28
   1a264:	4440      	add	r0, r8
   1a266:	4798      	blx	r3
   1a268:	9007      	str	r0, [sp, #28]
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1a26a:	2e00      	cmp	r6, #0
   1a26c:	d0d2      	beq.n	1a214 <lv_label_get_letter_on+0x1f0>
                if(_lv_txt_is_cmd(&cmd_state, bidi_txt[i]) != false) {
   1a26e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a270:	f818 1003 	ldrb.w	r1, [r8, r3]
   1a274:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
   1a278:	4b1a      	ldr	r3, [pc, #104]	; (1a2e4 <lv_label_get_letter_on+0x2c0>)
   1a27a:	4798      	blx	r3
   1a27c:	2800      	cmp	r0, #0
   1a27e:	d1e2      	bne.n	1a246 <lv_label_get_letter_on+0x222>
   1a280:	e7c8      	b.n	1a214 <lv_label_get_letter_on+0x1f0>
                i = i_act;
   1a282:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
                break;
   1a286:	e75e      	b.n	1a146 <lv_label_get_letter_on+0x122>
   1a288:	f04f 0b00 	mov.w	fp, #0
            uint32_t letter = _lv_txt_encoded_next(bidi_txt, &i);
   1a28c:	f8df a060 	ldr.w	sl, [pc, #96]	; 1a2f0 <lv_label_get_letter_on+0x2cc>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1a290:	f006 0601 	and.w	r6, r6, #1
   1a294:	e7d7      	b.n	1a246 <lv_label_get_letter_on+0x222>
    while(txt[line_start] != '\0') {
   1a296:	783b      	ldrb	r3, [r7, #0]
   1a298:	2b00      	cmp	r3, #0
   1a29a:	f47f af6b 	bne.w	1a174 <lv_label_get_letter_on+0x150>
   1a29e:	46b8      	mov	r8, r7
   1a2a0:	2500      	movs	r5, #0
   1a2a2:	462c      	mov	r4, r5
    lv_coord_t x = 0;
   1a2a4:	46a9      	mov	r9, r5
   1a2a6:	e747      	b.n	1a138 <lv_label_get_letter_on+0x114>
   1a2a8:	000022a5 	.word	0x000022a5
   1a2ac:	00029854 	.word	0x00029854
   1a2b0:	00029988 	.word	0x00029988
   1a2b4:	00012251 	.word	0x00012251
   1a2b8:	00024830 	.word	0x00024830
   1a2bc:	000022ad 	.word	0x000022ad
   1a2c0:	00019d7d 	.word	0x00019d7d
   1a2c4:	00019ed1 	.word	0x00019ed1
   1a2c8:	00004d91 	.word	0x00004d91
   1a2cc:	00004695 	.word	0x00004695
   1a2d0:	00019f75 	.word	0x00019f75
   1a2d4:	20000064 	.word	0x20000064
   1a2d8:	00013da5 	.word	0x00013da5
   1a2dc:	20000068 	.word	0x20000068
   1a2e0:	00010055 	.word	0x00010055
   1a2e4:	00013d5d 	.word	0x00013d5d
   1a2e8:	000044c9 	.word	0x000044c9
   1a2ec:	00013fd1 	.word	0x00013fd1
   1a2f0:	20000058 	.word	0x20000058

0001a2f4 <lv_label_refr_text>:
{
   1a2f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a2f8:	b099      	sub	sp, #100	; 0x64
   1a2fa:	4604      	mov	r4, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1a2fc:	4baf      	ldr	r3, [pc, #700]	; (1a5bc <lv_label_refr_text+0x2c8>)
   1a2fe:	4798      	blx	r3
    if(ext->text == NULL) return;
   1a300:	6803      	ldr	r3, [r0, #0]
   1a302:	2b00      	cmp	r3, #0
   1a304:	d048      	beq.n	1a398 <lv_label_refr_text+0xa4>
   1a306:	4605      	mov	r5, r0
    get_txt_coords(label, &txt_coords);
   1a308:	a916      	add	r1, sp, #88	; 0x58
   1a30a:	4620      	mov	r0, r4
   1a30c:	4bac      	ldr	r3, [pc, #688]	; (1a5c0 <lv_label_refr_text+0x2cc>)
   1a30e:	4798      	blx	r3
   1a310:	f8bd 605c 	ldrh.w	r6, [sp, #92]	; 0x5c
   1a314:	3601      	adds	r6, #1
   1a316:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   1a31a:	1af6      	subs	r6, r6, r3
   1a31c:	b236      	sxth	r6, r6
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   1a31e:	f248 028e 	movw	r2, #32910	; 0x808e
   1a322:	2100      	movs	r1, #0
   1a324:	4620      	mov	r0, r4
   1a326:	4ba7      	ldr	r3, [pc, #668]	; (1a5c4 <lv_label_refr_text+0x2d0>)
   1a328:	4798      	blx	r3
   1a32a:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   1a32c:	f248 0281 	movw	r2, #32897	; 0x8081
   1a330:	2100      	movs	r1, #0
   1a332:	4620      	mov	r0, r4
   1a334:	4fa4      	ldr	r7, [pc, #656]	; (1a5c8 <lv_label_refr_text+0x2d4>)
   1a336:	47b8      	blx	r7
   1a338:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
   1a33a:	f248 0280 	movw	r2, #32896	; 0x8080
   1a33e:	2100      	movs	r1, #0
   1a340:	4620      	mov	r0, r4
   1a342:	47b8      	blx	r7
   1a344:	4607      	mov	r7, r0
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
   1a346:	7c2b      	ldrb	r3, [r5, #16]
    lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
   1a348:	f3c3 1280 	ubfx	r2, r3, #6, #1
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
   1a34c:	f013 0f80 	tst.w	r3, #128	; 0x80
   1a350:	bf18      	it	ne
   1a352:	f042 0202 	orrne.w	r2, r2, #2
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
   1a356:	f013 0f07 	tst.w	r3, #7
   1a35a:	bf08      	it	eq
   1a35c:	f042 0210 	orreq.w	r2, r2, #16
    _lv_txt_get_size(&size, ext->text, font, letter_space, line_space, max_w, flag);
   1a360:	6829      	ldr	r1, [r5, #0]
   1a362:	9202      	str	r2, [sp, #8]
   1a364:	9601      	str	r6, [sp, #4]
   1a366:	f8cd 9000 	str.w	r9, [sp]
   1a36a:	4603      	mov	r3, r0
   1a36c:	4642      	mov	r2, r8
   1a36e:	a815      	add	r0, sp, #84	; 0x54
   1a370:	4e96      	ldr	r6, [pc, #600]	; (1a5cc <lv_label_refr_text+0x2d8>)
   1a372:	47b0      	blx	r6
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
   1a374:	7c2b      	ldrb	r3, [r5, #16]
   1a376:	f013 0307 	ands.w	r3, r3, #7
   1a37a:	d010      	beq.n	1a39e <lv_label_refr_text+0xaa>
    else if(ext->long_mode == LV_LABEL_LONG_SROLL) {
   1a37c:	2b03      	cmp	r3, #3
   1a37e:	d034      	beq.n	1a3ea <lv_label_refr_text+0xf6>
    else if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
   1a380:	2b04      	cmp	r3, #4
   1a382:	f000 80d7 	beq.w	1a534 <lv_label_refr_text+0x240>
    else if(ext->long_mode == LV_LABEL_LONG_DOT) {
   1a386:	2b02      	cmp	r3, #2
   1a388:	f000 816d 	beq.w	1a666 <lv_label_refr_text+0x372>
    else if(ext->long_mode == LV_LABEL_LONG_BREAK) {
   1a38c:	2b01      	cmp	r3, #1
   1a38e:	f000 81fe 	beq.w	1a78e <lv_label_refr_text+0x49a>
    lv_obj_invalidate(label);
   1a392:	4620      	mov	r0, r4
   1a394:	4b8e      	ldr	r3, [pc, #568]	; (1a5d0 <lv_label_refr_text+0x2dc>)
   1a396:	4798      	blx	r3
}
   1a398:	b019      	add	sp, #100	; 0x64
   1a39a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   1a39e:	2212      	movs	r2, #18
   1a3a0:	2100      	movs	r1, #0
   1a3a2:	4620      	mov	r0, r4
   1a3a4:	4e88      	ldr	r6, [pc, #544]	; (1a5c8 <lv_label_refr_text+0x2d4>)
   1a3a6:	47b0      	blx	r6
   1a3a8:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   1a3aa:	2213      	movs	r2, #19
   1a3ac:	2100      	movs	r1, #0
   1a3ae:	4620      	mov	r0, r4
   1a3b0:	47b0      	blx	r6
        size.x += lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_right(label, LV_LABEL_PART_MAIN);
   1a3b2:	4428      	add	r0, r5
   1a3b4:	f8bd 5054 	ldrh.w	r5, [sp, #84]	; 0x54
   1a3b8:	4428      	add	r0, r5
   1a3ba:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   1a3be:	2210      	movs	r2, #16
   1a3c0:	2100      	movs	r1, #0
   1a3c2:	4620      	mov	r0, r4
   1a3c4:	47b0      	blx	r6
   1a3c6:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   1a3c8:	2211      	movs	r2, #17
   1a3ca:	2100      	movs	r1, #0
   1a3cc:	4620      	mov	r0, r4
   1a3ce:	47b0      	blx	r6
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
   1a3d0:	182a      	adds	r2, r5, r0
   1a3d2:	f8bd 0056 	ldrh.w	r0, [sp, #86]	; 0x56
   1a3d6:	4402      	add	r2, r0
   1a3d8:	b212      	sxth	r2, r2
   1a3da:	f8ad 2056 	strh.w	r2, [sp, #86]	; 0x56
        lv_obj_set_size(label, size.x, size.y);
   1a3de:	f9bd 1054 	ldrsh.w	r1, [sp, #84]	; 0x54
   1a3e2:	4620      	mov	r0, r4
   1a3e4:	4b7b      	ldr	r3, [pc, #492]	; (1a5d4 <lv_label_refr_text+0x2e0>)
   1a3e6:	4798      	blx	r3
   1a3e8:	e7d3      	b.n	1a392 <lv_label_refr_text+0x9e>
        lv_anim_init(&a);
   1a3ea:	a805      	add	r0, sp, #20
   1a3ec:	4b7a      	ldr	r3, [pc, #488]	; (1a5d8 <lv_label_refr_text+0x2e4>)
   1a3ee:	4798      	blx	r3
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param var pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
    a->var     = var;
   1a3f0:	9405      	str	r4, [sp, #20]
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param cnt repeat count or `LV_ANIM_REPEAT_INFINITE` for infinite repetition. 0: to disable repetition.
 */
static inline void lv_anim_set_repeat_count(lv_anim_t * a, uint16_t cnt)
{
    a->repeat_cnt       = cnt;
   1a3f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a3f6:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        lv_anim_set_playback_delay(&a, (((lv_font_get_glyph_width(font, ' ', ' ') + letter_space) * 1000) /
   1a3fa:	2220      	movs	r2, #32
   1a3fc:	4611      	mov	r1, r2
   1a3fe:	4640      	mov	r0, r8
   1a400:	4b76      	ldr	r3, [pc, #472]	; (1a5dc <lv_label_refr_text+0x2e8>)
   1a402:	4798      	blx	r3
   1a404:	4438      	add	r0, r7
   1a406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1a40a:	fb03 f300 	mul.w	r3, r3, r0
                                        ext->anim_speed) *
   1a40e:	8968      	ldrh	r0, [r5, #10]
        lv_anim_set_playback_delay(&a, (((lv_font_get_glyph_width(font, ' ', ' ') + letter_space) * 1000) /
   1a410:	fb93 f3f0 	sdiv	r3, r3, r0
   1a414:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    a->playback_delay = delay;
   1a418:	b29b      	uxth	r3, r3
   1a41a:	930f      	str	r3, [sp, #60]	; 0x3c
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param delay delay in milliseconds before repeating the animation.
 */
static inline void lv_anim_set_repeat_delay(lv_anim_t * a, uint16_t delay)
{
    a->repeat_delay = delay;
   1a41c:	9311      	str	r3, [sp, #68]	; 0x44
        if(size.x > lv_area_get_width(&txt_coords)) {
   1a41e:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
   1a422:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
   1a426:	3301      	adds	r3, #1
   1a428:	f8bd 1058 	ldrh.w	r1, [sp, #88]	; 0x58
   1a42c:	1a5b      	subs	r3, r3, r1
   1a42e:	b29b      	uxth	r3, r3
   1a430:	b219      	sxth	r1, r3
   1a432:	428a      	cmp	r2, r1
   1a434:	dd37      	ble.n	1a4a6 <lv_label_refr_text+0x1b2>
            lv_anim_set_values(&a, 0, lv_area_get_width(&txt_coords) - size.x);
   1a436:	1a9b      	subs	r3, r3, r2
   1a438:	b21a      	sxth	r2, r3
    a->start = start;
   1a43a:	2100      	movs	r1, #0
   1a43c:	910b      	str	r1, [sp, #44]	; 0x2c
    a->end   = end;
   1a43e:	920c      	str	r2, [sp, #48]	; 0x30
    a->exec_cb = exec_cb;
   1a440:	4e67      	ldr	r6, [pc, #412]	; (1a5e0 <lv_label_refr_text+0x2ec>)
   1a442:	9606      	str	r6, [sp, #24]
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
   1a444:	8968      	ldrh	r0, [r5, #10]
   1a446:	4b67      	ldr	r3, [pc, #412]	; (1a5e4 <lv_label_refr_text+0x2f0>)
   1a448:	4798      	blx	r3
    a->time     = duration;
   1a44a:	900d      	str	r0, [sp, #52]	; 0x34
   1a44c:	9010      	str	r0, [sp, #64]	; 0x40
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
   1a44e:	4631      	mov	r1, r6
   1a450:	4620      	mov	r0, r4
   1a452:	4b65      	ldr	r3, [pc, #404]	; (1a5e8 <lv_label_refr_text+0x2f4>)
   1a454:	4798      	blx	r3
            if(anim_cur) {
   1a456:	b318      	cbz	r0, 1a4a0 <lv_label_refr_text+0x1ac>
                act_time = anim_cur->act_time;
   1a458:	6a42      	ldr	r2, [r0, #36]	; 0x24
                playback_now = anim_cur->playback_now;
   1a45a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   1a45e:	f003 0301 	and.w	r3, r3, #1
            if(act_time < a.time) {
   1a462:	990d      	ldr	r1, [sp, #52]	; 0x34
   1a464:	428a      	cmp	r2, r1
   1a466:	da11      	bge.n	1a48c <lv_label_refr_text+0x198>
                a.act_time = act_time;      /*To keep the old position*/
   1a468:	920e      	str	r2, [sp, #56]	; 0x38
                a.early_apply = 0;
   1a46a:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   1a46e:	f36f 0200 	bfc	r2, #0, #1
   1a472:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
                if(playback_now) {
   1a476:	b14b      	cbz	r3, 1a48c <lv_label_refr_text+0x198>
                    a.playback_now = 1;
   1a478:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   1a47c:	f043 0301 	orr.w	r3, r3, #1
   1a480:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
                    tmp      = a.start;
   1a484:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                    a.start = a.end;
   1a486:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1a488:	920b      	str	r2, [sp, #44]	; 0x2c
                    a.end   = tmp;
   1a48a:	930c      	str	r3, [sp, #48]	; 0x30
            lv_anim_start(&a);
   1a48c:	a805      	add	r0, sp, #20
   1a48e:	4b57      	ldr	r3, [pc, #348]	; (1a5ec <lv_label_refr_text+0x2f8>)
   1a490:	4798      	blx	r3
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
   1a492:	4957      	ldr	r1, [pc, #348]	; (1a5f0 <lv_label_refr_text+0x2fc>)
   1a494:	4620      	mov	r0, r4
   1a496:	4b57      	ldr	r3, [pc, #348]	; (1a5f4 <lv_label_refr_text+0x300>)
   1a498:	4798      	blx	r3
            ext->offset.y = 0;
   1a49a:	2300      	movs	r3, #0
   1a49c:	81eb      	strh	r3, [r5, #14]
   1a49e:	e778      	b.n	1a392 <lv_label_refr_text+0x9e>
            bool playback_now = false;
   1a4a0:	2300      	movs	r3, #0
            int32_t act_time = 0;
   1a4a2:	461a      	mov	r2, r3
   1a4a4:	e7dd      	b.n	1a462 <lv_label_refr_text+0x16e>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
   1a4a6:	494e      	ldr	r1, [pc, #312]	; (1a5e0 <lv_label_refr_text+0x2ec>)
   1a4a8:	4620      	mov	r0, r4
   1a4aa:	4b52      	ldr	r3, [pc, #328]	; (1a5f4 <lv_label_refr_text+0x300>)
   1a4ac:	4798      	blx	r3
            ext->offset.x = 0;
   1a4ae:	2300      	movs	r3, #0
   1a4b0:	81ab      	strh	r3, [r5, #12]
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
   1a4b2:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	; 0x56
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1a4b6:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
   1a4ba:	3301      	adds	r3, #1
   1a4bc:	f8bd 105a 	ldrh.w	r1, [sp, #90]	; 0x5a
   1a4c0:	1a5b      	subs	r3, r3, r1
   1a4c2:	b29b      	uxth	r3, r3
   1a4c4:	b219      	sxth	r1, r3
   1a4c6:	428a      	cmp	r2, r1
   1a4c8:	dde3      	ble.n	1a492 <lv_label_refr_text+0x19e>
            lv_anim_set_values(&a, 0, lv_area_get_height(&txt_coords) - size.y - (lv_font_get_line_height(font)));
   1a4ca:	1a9a      	subs	r2, r3, r2
   1a4cc:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1a4d0:	1ad2      	subs	r2, r2, r3
   1a4d2:	b212      	sxth	r2, r2
    a->start = start;
   1a4d4:	2100      	movs	r1, #0
   1a4d6:	910b      	str	r1, [sp, #44]	; 0x2c
    a->end   = end;
   1a4d8:	920c      	str	r2, [sp, #48]	; 0x30
    a->exec_cb = exec_cb;
   1a4da:	4e45      	ldr	r6, [pc, #276]	; (1a5f0 <lv_label_refr_text+0x2fc>)
   1a4dc:	9606      	str	r6, [sp, #24]
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
   1a4de:	8968      	ldrh	r0, [r5, #10]
   1a4e0:	4b40      	ldr	r3, [pc, #256]	; (1a5e4 <lv_label_refr_text+0x2f0>)
   1a4e2:	4798      	blx	r3
    a->time     = duration;
   1a4e4:	900d      	str	r0, [sp, #52]	; 0x34
   1a4e6:	9010      	str	r0, [sp, #64]	; 0x40
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
   1a4e8:	4631      	mov	r1, r6
   1a4ea:	4620      	mov	r0, r4
   1a4ec:	4b3e      	ldr	r3, [pc, #248]	; (1a5e8 <lv_label_refr_text+0x2f4>)
   1a4ee:	4798      	blx	r3
            if(anim_cur) {
   1a4f0:	b1e8      	cbz	r0, 1a52e <lv_label_refr_text+0x23a>
                act_time = anim_cur->act_time;
   1a4f2:	6a42      	ldr	r2, [r0, #36]	; 0x24
                playback_now = anim_cur->playback_now;
   1a4f4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   1a4f8:	f003 0301 	and.w	r3, r3, #1
            if(act_time < a.time) {
   1a4fc:	990d      	ldr	r1, [sp, #52]	; 0x34
   1a4fe:	428a      	cmp	r2, r1
   1a500:	da11      	bge.n	1a526 <lv_label_refr_text+0x232>
                a.act_time = act_time;      /*To keep the old position*/
   1a502:	920e      	str	r2, [sp, #56]	; 0x38
                a.early_apply = 0;
   1a504:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   1a508:	f36f 0200 	bfc	r2, #0, #1
   1a50c:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
                if(playback_now) {
   1a510:	b14b      	cbz	r3, 1a526 <lv_label_refr_text+0x232>
                    a.playback_now = 1;
   1a512:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   1a516:	f043 0301 	orr.w	r3, r3, #1
   1a51a:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
                    tmp      = a.start;
   1a51e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                    a.start = a.end;
   1a520:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1a522:	920b      	str	r2, [sp, #44]	; 0x2c
                    a.end   = tmp;
   1a524:	930c      	str	r3, [sp, #48]	; 0x30
            lv_anim_start(&a);
   1a526:	a805      	add	r0, sp, #20
   1a528:	4b30      	ldr	r3, [pc, #192]	; (1a5ec <lv_label_refr_text+0x2f8>)
   1a52a:	4798      	blx	r3
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
   1a52c:	e731      	b.n	1a392 <lv_label_refr_text+0x9e>
            bool playback_now = false;
   1a52e:	2300      	movs	r3, #0
            int32_t act_time = 0;
   1a530:	461a      	mov	r2, r3
   1a532:	e7e3      	b.n	1a4fc <lv_label_refr_text+0x208>
        lv_anim_init(&a);
   1a534:	a805      	add	r0, sp, #20
   1a536:	4b28      	ldr	r3, [pc, #160]	; (1a5d8 <lv_label_refr_text+0x2e4>)
   1a538:	4798      	blx	r3
    a->var     = var;
   1a53a:	9405      	str	r4, [sp, #20]
    a->repeat_cnt       = cnt;
   1a53c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a540:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1a544:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
   1a548:	3301      	adds	r3, #1
   1a54a:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
   1a54e:	1a9b      	subs	r3, r3, r2
        if(size.x > lv_area_get_width(&txt_coords)) {
   1a550:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
   1a554:	b21b      	sxth	r3, r3
   1a556:	429a      	cmp	r2, r3
   1a558:	dd50      	ble.n	1a5fc <lv_label_refr_text+0x308>
            lv_anim_set_values(&a, 0, -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT);
   1a55a:	2220      	movs	r2, #32
   1a55c:	4611      	mov	r1, r2
   1a55e:	4640      	mov	r0, r8
   1a560:	4b1e      	ldr	r3, [pc, #120]	; (1a5dc <lv_label_refr_text+0x2e8>)
   1a562:	4798      	blx	r3
   1a564:	ebc0 3380 	rsb	r3, r0, r0, lsl #14
   1a568:	eb00 0283 	add.w	r2, r0, r3, lsl #2
   1a56c:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
   1a570:	1ad2      	subs	r2, r2, r3
   1a572:	b212      	sxth	r2, r2
    a->start = start;
   1a574:	2100      	movs	r1, #0
   1a576:	910b      	str	r1, [sp, #44]	; 0x2c
    a->end   = end;
   1a578:	920c      	str	r2, [sp, #48]	; 0x30
    a->exec_cb = exec_cb;
   1a57a:	4e19      	ldr	r6, [pc, #100]	; (1a5e0 <lv_label_refr_text+0x2ec>)
   1a57c:	9606      	str	r6, [sp, #24]
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
   1a57e:	8968      	ldrh	r0, [r5, #10]
   1a580:	4b18      	ldr	r3, [pc, #96]	; (1a5e4 <lv_label_refr_text+0x2f0>)
   1a582:	4798      	blx	r3
    a->time     = duration;
   1a584:	900d      	str	r0, [sp, #52]	; 0x34
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
   1a586:	4631      	mov	r1, r6
   1a588:	4620      	mov	r0, r4
   1a58a:	4b17      	ldr	r3, [pc, #92]	; (1a5e8 <lv_label_refr_text+0x2f4>)
   1a58c:	4798      	blx	r3
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
   1a58e:	2800      	cmp	r0, #0
   1a590:	d032      	beq.n	1a5f8 <lv_label_refr_text+0x304>
   1a592:	6a43      	ldr	r3, [r0, #36]	; 0x24
            if(act_time < a.time) {
   1a594:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1a596:	4293      	cmp	r3, r2
   1a598:	da06      	bge.n	1a5a8 <lv_label_refr_text+0x2b4>
                a.act_time = act_time;      /*To keep the old position*/
   1a59a:	930e      	str	r3, [sp, #56]	; 0x38
                a.early_apply = 0;
   1a59c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1a5a0:	f36f 0300 	bfc	r3, #0, #1
   1a5a4:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
            lv_anim_start(&a);
   1a5a8:	a805      	add	r0, sp, #20
   1a5aa:	4b10      	ldr	r3, [pc, #64]	; (1a5ec <lv_label_refr_text+0x2f8>)
   1a5ac:	4798      	blx	r3
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
   1a5ae:	4910      	ldr	r1, [pc, #64]	; (1a5f0 <lv_label_refr_text+0x2fc>)
   1a5b0:	4620      	mov	r0, r4
   1a5b2:	4b10      	ldr	r3, [pc, #64]	; (1a5f4 <lv_label_refr_text+0x300>)
   1a5b4:	4798      	blx	r3
            ext->offset.y = 0;
   1a5b6:	2300      	movs	r3, #0
   1a5b8:	81eb      	strh	r3, [r5, #14]
   1a5ba:	e6ea      	b.n	1a392 <lv_label_refr_text+0x9e>
   1a5bc:	00004d91 	.word	0x00004d91
   1a5c0:	00019d7d 	.word	0x00019d7d
   1a5c4:	00004695 	.word	0x00004695
   1a5c8:	000044c9 	.word	0x000044c9
   1a5cc:	00014071 	.word	0x00014071
   1a5d0:	00003315 	.word	0x00003315
   1a5d4:	00004295 	.word	0x00004295
   1a5d8:	000112d9 	.word	0x000112d9
   1a5dc:	00010055 	.word	0x00010055
   1a5e0:	00019d61 	.word	0x00019d61
   1a5e4:	00011485 	.word	0x00011485
   1a5e8:	00011449 	.word	0x00011449
   1a5ec:	00011395 	.word	0x00011395
   1a5f0:	00019d45 	.word	0x00019d45
   1a5f4:	0001131d 	.word	0x0001131d
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
   1a5f8:	2300      	movs	r3, #0
   1a5fa:	e7cb      	b.n	1a594 <lv_label_refr_text+0x2a0>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
   1a5fc:	496e      	ldr	r1, [pc, #440]	; (1a7b8 <lv_label_refr_text+0x4c4>)
   1a5fe:	4620      	mov	r0, r4
   1a600:	4b6e      	ldr	r3, [pc, #440]	; (1a7bc <lv_label_refr_text+0x4c8>)
   1a602:	4798      	blx	r3
            ext->offset.x = 0;
   1a604:	2300      	movs	r3, #0
   1a606:	81ab      	strh	r3, [r5, #12]
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
   1a608:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	; 0x56
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1a60c:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
   1a610:	3301      	adds	r3, #1
   1a612:	f8bd 105a 	ldrh.w	r1, [sp, #90]	; 0x5a
   1a616:	1a5b      	subs	r3, r3, r1
   1a618:	b21b      	sxth	r3, r3
   1a61a:	429a      	cmp	r2, r3
   1a61c:	ddc7      	ble.n	1a5ae <lv_label_refr_text+0x2ba>
            lv_anim_set_values(&a, 0, -size.y - (lv_font_get_line_height(font)));
   1a61e:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1a622:	441a      	add	r2, r3
   1a624:	4252      	negs	r2, r2
   1a626:	b212      	sxth	r2, r2
    a->start = start;
   1a628:	2100      	movs	r1, #0
   1a62a:	910b      	str	r1, [sp, #44]	; 0x2c
    a->end   = end;
   1a62c:	920c      	str	r2, [sp, #48]	; 0x30
    a->exec_cb = exec_cb;
   1a62e:	4e64      	ldr	r6, [pc, #400]	; (1a7c0 <lv_label_refr_text+0x4cc>)
   1a630:	9606      	str	r6, [sp, #24]
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
   1a632:	8968      	ldrh	r0, [r5, #10]
   1a634:	4b63      	ldr	r3, [pc, #396]	; (1a7c4 <lv_label_refr_text+0x4d0>)
   1a636:	4798      	blx	r3
    a->time     = duration;
   1a638:	900d      	str	r0, [sp, #52]	; 0x34
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
   1a63a:	4631      	mov	r1, r6
   1a63c:	4620      	mov	r0, r4
   1a63e:	4b62      	ldr	r3, [pc, #392]	; (1a7c8 <lv_label_refr_text+0x4d4>)
   1a640:	4798      	blx	r3
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
   1a642:	b170      	cbz	r0, 1a662 <lv_label_refr_text+0x36e>
   1a644:	6a43      	ldr	r3, [r0, #36]	; 0x24
            if(act_time < a.time) {
   1a646:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1a648:	4293      	cmp	r3, r2
   1a64a:	da06      	bge.n	1a65a <lv_label_refr_text+0x366>
                a.act_time = act_time;      /*To keep the old position*/
   1a64c:	930e      	str	r3, [sp, #56]	; 0x38
                a.early_apply = 0;
   1a64e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1a652:	f36f 0300 	bfc	r3, #0, #1
   1a656:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
            lv_anim_start(&a);
   1a65a:	a805      	add	r0, sp, #20
   1a65c:	4b5b      	ldr	r3, [pc, #364]	; (1a7cc <lv_label_refr_text+0x4d8>)
   1a65e:	4798      	blx	r3
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
   1a660:	e697      	b.n	1a392 <lv_label_refr_text+0x9e>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
   1a662:	2300      	movs	r3, #0
   1a664:	e7ef      	b.n	1a646 <lv_label_refr_text+0x352>
   1a666:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
   1a66a:	3301      	adds	r3, #1
   1a66c:	f8bd 205a 	ldrh.w	r2, [sp, #90]	; 0x5a
   1a670:	1a9b      	subs	r3, r3, r2
        if(size.y <= lv_area_get_height(&txt_coords)) { /*No dots are required, the text is short enough*/
   1a672:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	; 0x56
   1a676:	b21b      	sxth	r3, r3
   1a678:	429a      	cmp	r2, r3
   1a67a:	dc03      	bgt.n	1a684 <lv_label_refr_text+0x390>
            ext->dot_end = LV_LABEL_DOT_END_INV;
   1a67c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a680:	812b      	strh	r3, [r5, #8]
   1a682:	e686      	b.n	1a392 <lv_label_refr_text+0x9e>
        else if(_lv_txt_get_encoded_length(ext->text) <= LV_LABEL_DOT_NUM) {   /*Don't turn to dots all the characters*/
   1a684:	4b52      	ldr	r3, [pc, #328]	; (1a7d0 <lv_label_refr_text+0x4dc>)
   1a686:	681b      	ldr	r3, [r3, #0]
   1a688:	6828      	ldr	r0, [r5, #0]
   1a68a:	4798      	blx	r3
   1a68c:	2803      	cmp	r0, #3
   1a68e:	d803      	bhi.n	1a698 <lv_label_refr_text+0x3a4>
            ext->dot_end = LV_LABEL_DOT_END_INV;
   1a690:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a694:	812b      	strh	r3, [r5, #8]
   1a696:	e67c      	b.n	1a392 <lv_label_refr_text+0x9e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1a698:	f8bd 605c 	ldrh.w	r6, [sp, #92]	; 0x5c
   1a69c:	3601      	adds	r6, #1
   1a69e:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   1a6a2:	1af6      	subs	r6, r6, r3
   1a6a4:	b2b6      	uxth	r6, r6
                  (lv_font_get_glyph_width(font, '.', '.') + letter_space) *
   1a6a6:	222e      	movs	r2, #46	; 0x2e
   1a6a8:	4611      	mov	r1, r2
   1a6aa:	4640      	mov	r0, r8
   1a6ac:	4b49      	ldr	r3, [pc, #292]	; (1a7d4 <lv_label_refr_text+0x4e0>)
   1a6ae:	4798      	blx	r3
   1a6b0:	4438      	add	r0, r7
            p.x = lv_area_get_width(&txt_coords) -
   1a6b2:	ebc0 3380 	rsb	r3, r0, r0, lsl #14
   1a6b6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1a6ba:	4430      	add	r0, r6
   1a6bc:	f8ad 0010 	strh.w	r0, [sp, #16]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1a6c0:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
   1a6c4:	3301      	adds	r3, #1
   1a6c6:	f8bd 205a 	ldrh.w	r2, [sp, #90]	; 0x5a
   1a6ca:	1a9b      	subs	r3, r3, r2
   1a6cc:	b29b      	uxth	r3, r3
            p.y -= p.y %
   1a6ce:	b218      	sxth	r0, r3
                   (lv_font_get_line_height(font) + line_space); /*Round down to the last line*/
   1a6d0:	f9b8 2008 	ldrsh.w	r2, [r8, #8]
   1a6d4:	444a      	add	r2, r9
            p.y -= p.y %
   1a6d6:	fb90 f1f2 	sdiv	r1, r0, r2
   1a6da:	fb02 0211 	mls	r2, r2, r1, r0
   1a6de:	1a9b      	subs	r3, r3, r2
            p.y -= line_space;                                               /*Trim the last line space*/
   1a6e0:	eba3 0909 	sub.w	r9, r3, r9
   1a6e4:	f8ad 9012 	strh.w	r9, [sp, #18]
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
   1a6e8:	a904      	add	r1, sp, #16
   1a6ea:	4620      	mov	r0, r4
   1a6ec:	4b3a      	ldr	r3, [pc, #232]	; (1a7d8 <lv_label_refr_text+0x4e4>)
   1a6ee:	4798      	blx	r3
   1a6f0:	4680      	mov	r8, r0
   1a6f2:	4607      	mov	r7, r0
            size_t txt_len = strlen(ext->text);
   1a6f4:	682e      	ldr	r6, [r5, #0]
   1a6f6:	4630      	mov	r0, r6
   1a6f8:	4b38      	ldr	r3, [pc, #224]	; (1a7dc <lv_label_refr_text+0x4e8>)
   1a6fa:	4798      	blx	r3
   1a6fc:	4681      	mov	r9, r0
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(ext->text, letter_id);
   1a6fe:	4b38      	ldr	r3, [pc, #224]	; (1a7e0 <lv_label_refr_text+0x4ec>)
   1a700:	681b      	ldr	r3, [r3, #0]
   1a702:	4641      	mov	r1, r8
   1a704:	4630      	mov	r0, r6
   1a706:	4798      	blx	r3
   1a708:	4606      	mov	r6, r0
   1a70a:	9005      	str	r0, [sp, #20]
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
   1a70c:	f100 0803 	add.w	r8, r0, #3
   1a710:	45c1      	cmp	r9, r8
   1a712:	d20e      	bcs.n	1a732 <lv_label_refr_text+0x43e>
                byte_id -= _lv_txt_encoded_size(&ext->text[byte_id]);
   1a714:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 1a7f4 <lv_label_refr_text+0x500>
   1a718:	6828      	ldr	r0, [r5, #0]
   1a71a:	4430      	add	r0, r6
   1a71c:	f8da 3000 	ldr.w	r3, [sl]
   1a720:	4798      	blx	r3
   1a722:	9e05      	ldr	r6, [sp, #20]
   1a724:	1a36      	subs	r6, r6, r0
   1a726:	9605      	str	r6, [sp, #20]
                letter_id--;
   1a728:	3f01      	subs	r7, #1
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
   1a72a:	f106 0803 	add.w	r8, r6, #3
   1a72e:	45c1      	cmp	r9, r8
   1a730:	d3f2      	bcc.n	1a718 <lv_label_refr_text+0x424>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
   1a732:	f04f 0a04 	mov.w	sl, #4
   1a736:	f04f 0900 	mov.w	r9, #0
                len += _lv_txt_encoded_size(&ext->text[byte_id]);
   1a73a:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 1a7f4 <lv_label_refr_text+0x500>
   1a73e:	6828      	ldr	r0, [r5, #0]
   1a740:	9b05      	ldr	r3, [sp, #20]
   1a742:	4418      	add	r0, r3
   1a744:	f8db 3000 	ldr.w	r3, [fp]
   1a748:	4798      	blx	r3
   1a74a:	4481      	add	r9, r0
   1a74c:	fa5f f989 	uxtb.w	r9, r9
                _lv_txt_encoded_next(ext->text, &byte_id);
   1a750:	a905      	add	r1, sp, #20
   1a752:	6828      	ldr	r0, [r5, #0]
   1a754:	4b23      	ldr	r3, [pc, #140]	; (1a7e4 <lv_label_refr_text+0x4f0>)
   1a756:	681b      	ldr	r3, [r3, #0]
   1a758:	4798      	blx	r3
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
   1a75a:	f1ba 0a01 	subs.w	sl, sl, #1
   1a75e:	d1ee      	bne.n	1a73e <lv_label_refr_text+0x44a>
            if(lv_label_set_dot_tmp(label, &ext->text[byte_id_ori], len)) {
   1a760:	6829      	ldr	r1, [r5, #0]
   1a762:	464a      	mov	r2, r9
   1a764:	4431      	add	r1, r6
   1a766:	4620      	mov	r0, r4
   1a768:	4b1f      	ldr	r3, [pc, #124]	; (1a7e8 <lv_label_refr_text+0x4f4>)
   1a76a:	4798      	blx	r3
   1a76c:	2800      	cmp	r0, #0
   1a76e:	f43f ae10 	beq.w	1a392 <lv_label_refr_text+0x9e>
   1a772:	1cf1      	adds	r1, r6, #3
                    ext->text[byte_id_ori + i] = '.';
   1a774:	222e      	movs	r2, #46	; 0x2e
   1a776:	682b      	ldr	r3, [r5, #0]
   1a778:	559a      	strb	r2, [r3, r6]
   1a77a:	3601      	adds	r6, #1
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
   1a77c:	428e      	cmp	r6, r1
   1a77e:	d1fa      	bne.n	1a776 <lv_label_refr_text+0x482>
                ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
   1a780:	682b      	ldr	r3, [r5, #0]
   1a782:	2200      	movs	r2, #0
   1a784:	f803 2008 	strb.w	r2, [r3, r8]
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
   1a788:	3703      	adds	r7, #3
   1a78a:	812f      	strh	r7, [r5, #8]
   1a78c:	e601      	b.n	1a392 <lv_label_refr_text+0x9e>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   1a78e:	2210      	movs	r2, #16
   1a790:	2100      	movs	r1, #0
   1a792:	4620      	mov	r0, r4
   1a794:	4e15      	ldr	r6, [pc, #84]	; (1a7ec <lv_label_refr_text+0x4f8>)
   1a796:	47b0      	blx	r6
   1a798:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   1a79a:	2211      	movs	r2, #17
   1a79c:	2100      	movs	r1, #0
   1a79e:	4620      	mov	r0, r4
   1a7a0:	47b0      	blx	r6
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
   1a7a2:	1829      	adds	r1, r5, r0
   1a7a4:	f8bd 0056 	ldrh.w	r0, [sp, #86]	; 0x56
   1a7a8:	4401      	add	r1, r0
   1a7aa:	b209      	sxth	r1, r1
   1a7ac:	f8ad 1056 	strh.w	r1, [sp, #86]	; 0x56
        lv_obj_set_height(label, size.y);
   1a7b0:	4620      	mov	r0, r4
   1a7b2:	4b0f      	ldr	r3, [pc, #60]	; (1a7f0 <lv_label_refr_text+0x4fc>)
   1a7b4:	4798      	blx	r3
   1a7b6:	e5ec      	b.n	1a392 <lv_label_refr_text+0x9e>
   1a7b8:	00019d61 	.word	0x00019d61
   1a7bc:	0001131d 	.word	0x0001131d
   1a7c0:	00019d45 	.word	0x00019d45
   1a7c4:	00011485 	.word	0x00011485
   1a7c8:	00011449 	.word	0x00011449
   1a7cc:	00011395 	.word	0x00011395
   1a7d0:	20000060 	.word	0x20000060
   1a7d4:	00010055 	.word	0x00010055
   1a7d8:	0001a025 	.word	0x0001a025
   1a7dc:	0001b513 	.word	0x0001b513
   1a7e0:	2000005c 	.word	0x2000005c
   1a7e4:	20000058 	.word	0x20000058
   1a7e8:	00019dd9 	.word	0x00019dd9
   1a7ec:	000044c9 	.word	0x000044c9
   1a7f0:	000043a9 	.word	0x000043a9
   1a7f4:	20000054 	.word	0x20000054

0001a7f8 <lv_label_set_text>:
{
   1a7f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a7fa:	b083      	sub	sp, #12
   1a7fc:	4606      	mov	r6, r0
   1a7fe:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   1a800:	4b40      	ldr	r3, [pc, #256]	; (1a904 <lv_label_set_text+0x10c>)
   1a802:	4798      	blx	r3
   1a804:	b960      	cbnz	r0, 1a820 <lv_label_set_text+0x28>
   1a806:	4b40      	ldr	r3, [pc, #256]	; (1a908 <lv_label_set_text+0x110>)
   1a808:	9300      	str	r3, [sp, #0]
   1a80a:	22b8      	movs	r2, #184	; 0xb8
   1a80c:	493f      	ldr	r1, [pc, #252]	; (1a90c <lv_label_set_text+0x114>)
   1a80e:	2003      	movs	r0, #3
   1a810:	4c3f      	ldr	r4, [pc, #252]	; (1a910 <lv_label_set_text+0x118>)
   1a812:	47a0      	blx	r4
   1a814:	4632      	mov	r2, r6
   1a816:	2300      	movs	r3, #0
   1a818:	483e      	ldr	r0, [pc, #248]	; (1a914 <lv_label_set_text+0x11c>)
   1a81a:	493f      	ldr	r1, [pc, #252]	; (1a918 <lv_label_set_text+0x120>)
   1a81c:	4788      	blx	r1
   1a81e:	e7fe      	b.n	1a81e <lv_label_set_text+0x26>
    lv_obj_invalidate(label);
   1a820:	4630      	mov	r0, r6
   1a822:	4b3e      	ldr	r3, [pc, #248]	; (1a91c <lv_label_set_text+0x124>)
   1a824:	4798      	blx	r3
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1a826:	4630      	mov	r0, r6
   1a828:	4b3d      	ldr	r3, [pc, #244]	; (1a920 <lv_label_set_text+0x128>)
   1a82a:	4798      	blx	r3
   1a82c:	4604      	mov	r4, r0
    if(text == NULL) {
   1a82e:	b305      	cbz	r5, 1a872 <lv_label_set_text+0x7a>
    LV_ASSERT_STR(text);
   1a830:	4628      	mov	r0, r5
   1a832:	4b34      	ldr	r3, [pc, #208]	; (1a904 <lv_label_set_text+0x10c>)
   1a834:	4798      	blx	r3
   1a836:	b308      	cbz	r0, 1a87c <lv_label_set_text+0x84>
    if(ext->text == text && ext->static_txt == 0) {
   1a838:	6827      	ldr	r7, [r4, #0]
   1a83a:	42bd      	cmp	r5, r7
   1a83c:	d02b      	beq.n	1a896 <lv_label_set_text+0x9e>
        if(ext->text != NULL && ext->static_txt == 0) {
   1a83e:	b11f      	cbz	r7, 1a848 <lv_label_set_text+0x50>
   1a840:	7c23      	ldrb	r3, [r4, #16]
   1a842:	f013 0f08 	tst.w	r3, #8
   1a846:	d049      	beq.n	1a8dc <lv_label_set_text+0xe4>
        size_t len = strlen(text) + 1;
   1a848:	4628      	mov	r0, r5
   1a84a:	4b36      	ldr	r3, [pc, #216]	; (1a924 <lv_label_set_text+0x12c>)
   1a84c:	4798      	blx	r3
        ext->text = lv_mem_alloc(len);
   1a84e:	3001      	adds	r0, #1
   1a850:	4b35      	ldr	r3, [pc, #212]	; (1a928 <lv_label_set_text+0x130>)
   1a852:	4798      	blx	r3
   1a854:	6020      	str	r0, [r4, #0]
        LV_ASSERT_MEM(ext->text);
   1a856:	4b2b      	ldr	r3, [pc, #172]	; (1a904 <lv_label_set_text+0x10c>)
   1a858:	4798      	blx	r3
   1a85a:	2800      	cmp	r0, #0
   1a85c:	d044      	beq.n	1a8e8 <lv_label_set_text+0xf0>
        if(ext->text == NULL) return;
   1a85e:	6820      	ldr	r0, [r4, #0]
   1a860:	b150      	cbz	r0, 1a878 <lv_label_set_text+0x80>
        strcpy(ext->text, text);
   1a862:	4629      	mov	r1, r5
   1a864:	4b31      	ldr	r3, [pc, #196]	; (1a92c <lv_label_set_text+0x134>)
   1a866:	4798      	blx	r3
        ext->static_txt = 0;
   1a868:	7c23      	ldrb	r3, [r4, #16]
   1a86a:	f36f 03c3 	bfc	r3, #3, #1
   1a86e:	7423      	strb	r3, [r4, #16]
   1a870:	e030      	b.n	1a8d4 <lv_label_set_text+0xdc>
        lv_label_refr_text(label);
   1a872:	4630      	mov	r0, r6
   1a874:	4b2e      	ldr	r3, [pc, #184]	; (1a930 <lv_label_set_text+0x138>)
   1a876:	4798      	blx	r3
}
   1a878:	b003      	add	sp, #12
   1a87a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LV_ASSERT_STR(text);
   1a87c:	4b22      	ldr	r3, [pc, #136]	; (1a908 <lv_label_set_text+0x110>)
   1a87e:	9300      	str	r3, [sp, #0]
   1a880:	22c4      	movs	r2, #196	; 0xc4
   1a882:	4922      	ldr	r1, [pc, #136]	; (1a90c <lv_label_set_text+0x114>)
   1a884:	2003      	movs	r0, #3
   1a886:	4c22      	ldr	r4, [pc, #136]	; (1a910 <lv_label_set_text+0x118>)
   1a888:	47a0      	blx	r4
   1a88a:	462a      	mov	r2, r5
   1a88c:	2300      	movs	r3, #0
   1a88e:	4821      	ldr	r0, [pc, #132]	; (1a914 <lv_label_set_text+0x11c>)
   1a890:	4921      	ldr	r1, [pc, #132]	; (1a918 <lv_label_set_text+0x120>)
   1a892:	4788      	blx	r1
   1a894:	e7fe      	b.n	1a894 <lv_label_set_text+0x9c>
    if(ext->text == text && ext->static_txt == 0) {
   1a896:	7c23      	ldrb	r3, [r4, #16]
   1a898:	f013 0f08 	tst.w	r3, #8
   1a89c:	d1d4      	bne.n	1a848 <lv_label_set_text+0x50>
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
   1a89e:	4638      	mov	r0, r7
   1a8a0:	4b20      	ldr	r3, [pc, #128]	; (1a924 <lv_label_set_text+0x12c>)
   1a8a2:	4798      	blx	r3
   1a8a4:	1c41      	adds	r1, r0, #1
   1a8a6:	4638      	mov	r0, r7
   1a8a8:	4b22      	ldr	r3, [pc, #136]	; (1a934 <lv_label_set_text+0x13c>)
   1a8aa:	4798      	blx	r3
   1a8ac:	6020      	str	r0, [r4, #0]
        LV_ASSERT_MEM(ext->text);
   1a8ae:	4b15      	ldr	r3, [pc, #84]	; (1a904 <lv_label_set_text+0x10c>)
   1a8b0:	4798      	blx	r3
   1a8b2:	b960      	cbnz	r0, 1a8ce <lv_label_set_text+0xd6>
   1a8b4:	4b14      	ldr	r3, [pc, #80]	; (1a908 <lv_label_set_text+0x110>)
   1a8b6:	9300      	str	r3, [sp, #0]
   1a8b8:	22d5      	movs	r2, #213	; 0xd5
   1a8ba:	4914      	ldr	r1, [pc, #80]	; (1a90c <lv_label_set_text+0x114>)
   1a8bc:	2003      	movs	r0, #3
   1a8be:	4d14      	ldr	r5, [pc, #80]	; (1a910 <lv_label_set_text+0x118>)
   1a8c0:	47a8      	blx	r5
   1a8c2:	6822      	ldr	r2, [r4, #0]
   1a8c4:	2300      	movs	r3, #0
   1a8c6:	481c      	ldr	r0, [pc, #112]	; (1a938 <lv_label_set_text+0x140>)
   1a8c8:	4913      	ldr	r1, [pc, #76]	; (1a918 <lv_label_set_text+0x120>)
   1a8ca:	4788      	blx	r1
   1a8cc:	e7fe      	b.n	1a8cc <lv_label_set_text+0xd4>
        if(ext->text == NULL) return;
   1a8ce:	6823      	ldr	r3, [r4, #0]
   1a8d0:	2b00      	cmp	r3, #0
   1a8d2:	d0d1      	beq.n	1a878 <lv_label_set_text+0x80>
    lv_label_refr_text(label);
   1a8d4:	4630      	mov	r0, r6
   1a8d6:	4b16      	ldr	r3, [pc, #88]	; (1a930 <lv_label_set_text+0x138>)
   1a8d8:	4798      	blx	r3
   1a8da:	e7cd      	b.n	1a878 <lv_label_set_text+0x80>
            lv_mem_free(ext->text);
   1a8dc:	4638      	mov	r0, r7
   1a8de:	4b17      	ldr	r3, [pc, #92]	; (1a93c <lv_label_set_text+0x144>)
   1a8e0:	4798      	blx	r3
            ext->text = NULL;
   1a8e2:	2300      	movs	r3, #0
   1a8e4:	6023      	str	r3, [r4, #0]
   1a8e6:	e7af      	b.n	1a848 <lv_label_set_text+0x50>
        LV_ASSERT_MEM(ext->text);
   1a8e8:	4b07      	ldr	r3, [pc, #28]	; (1a908 <lv_label_set_text+0x110>)
   1a8ea:	9300      	str	r3, [sp, #0]
   1a8ec:	22ee      	movs	r2, #238	; 0xee
   1a8ee:	4907      	ldr	r1, [pc, #28]	; (1a90c <lv_label_set_text+0x114>)
   1a8f0:	2003      	movs	r0, #3
   1a8f2:	4d07      	ldr	r5, [pc, #28]	; (1a910 <lv_label_set_text+0x118>)
   1a8f4:	47a8      	blx	r5
   1a8f6:	6822      	ldr	r2, [r4, #0]
   1a8f8:	2300      	movs	r3, #0
   1a8fa:	480f      	ldr	r0, [pc, #60]	; (1a938 <lv_label_set_text+0x140>)
   1a8fc:	4906      	ldr	r1, [pc, #24]	; (1a918 <lv_label_set_text+0x120>)
   1a8fe:	4788      	blx	r1
   1a900:	e7fe      	b.n	1a900 <lv_label_set_text+0x108>
   1a902:	bf00      	nop
   1a904:	000022a5 	.word	0x000022a5
   1a908:	0002986c 	.word	0x0002986c
   1a90c:	00029988 	.word	0x00029988
   1a910:	00012251 	.word	0x00012251
   1a914:	00024830 	.word	0x00024830
   1a918:	000022ad 	.word	0x000022ad
   1a91c:	00003315 	.word	0x00003315
   1a920:	00004d91 	.word	0x00004d91
   1a924:	0001b513 	.word	0x0001b513
   1a928:	000123d1 	.word	0x000123d1
   1a92c:	0001b503 	.word	0x0001b503
   1a930:	0001a2f5 	.word	0x0001a2f5
   1a934:	0001288d 	.word	0x0001288d
   1a938:	00023fcc 	.word	0x00023fcc
   1a93c:	000124b9 	.word	0x000124b9

0001a940 <lv_label_set_text_static>:
{
   1a940:	b570      	push	{r4, r5, r6, lr}
   1a942:	b082      	sub	sp, #8
   1a944:	4605      	mov	r5, r0
   1a946:	460e      	mov	r6, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   1a948:	4b14      	ldr	r3, [pc, #80]	; (1a99c <lv_label_set_text_static+0x5c>)
   1a94a:	4798      	blx	r3
   1a94c:	b968      	cbnz	r0, 1a96a <lv_label_set_text_static+0x2a>
   1a94e:	4b14      	ldr	r3, [pc, #80]	; (1a9a0 <lv_label_set_text_static+0x60>)
   1a950:	9300      	str	r3, [sp, #0]
   1a952:	f44f 72a6 	mov.w	r2, #332	; 0x14c
   1a956:	4913      	ldr	r1, [pc, #76]	; (1a9a4 <lv_label_set_text_static+0x64>)
   1a958:	2003      	movs	r0, #3
   1a95a:	4c13      	ldr	r4, [pc, #76]	; (1a9a8 <lv_label_set_text_static+0x68>)
   1a95c:	47a0      	blx	r4
   1a95e:	462a      	mov	r2, r5
   1a960:	2300      	movs	r3, #0
   1a962:	4812      	ldr	r0, [pc, #72]	; (1a9ac <lv_label_set_text_static+0x6c>)
   1a964:	4912      	ldr	r1, [pc, #72]	; (1a9b0 <lv_label_set_text_static+0x70>)
   1a966:	4788      	blx	r1
   1a968:	e7fe      	b.n	1a968 <lv_label_set_text_static+0x28>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1a96a:	4628      	mov	r0, r5
   1a96c:	4b11      	ldr	r3, [pc, #68]	; (1a9b4 <lv_label_set_text_static+0x74>)
   1a96e:	4798      	blx	r3
   1a970:	4604      	mov	r4, r0
    if(ext->static_txt == 0 && ext->text != NULL) {
   1a972:	7c03      	ldrb	r3, [r0, #16]
   1a974:	f013 0f08 	tst.w	r3, #8
   1a978:	d105      	bne.n	1a986 <lv_label_set_text_static+0x46>
   1a97a:	6800      	ldr	r0, [r0, #0]
   1a97c:	b118      	cbz	r0, 1a986 <lv_label_set_text_static+0x46>
        lv_mem_free(ext->text);
   1a97e:	4b0e      	ldr	r3, [pc, #56]	; (1a9b8 <lv_label_set_text_static+0x78>)
   1a980:	4798      	blx	r3
        ext->text = NULL;
   1a982:	2300      	movs	r3, #0
   1a984:	6023      	str	r3, [r4, #0]
    if(text != NULL) {
   1a986:	b126      	cbz	r6, 1a992 <lv_label_set_text_static+0x52>
        ext->static_txt = 1;
   1a988:	7c23      	ldrb	r3, [r4, #16]
   1a98a:	f043 0308 	orr.w	r3, r3, #8
   1a98e:	7423      	strb	r3, [r4, #16]
        ext->text       = (char *)text;
   1a990:	6026      	str	r6, [r4, #0]
    lv_label_refr_text(label);
   1a992:	4628      	mov	r0, r5
   1a994:	4b09      	ldr	r3, [pc, #36]	; (1a9bc <lv_label_set_text_static+0x7c>)
   1a996:	4798      	blx	r3
}
   1a998:	b002      	add	sp, #8
   1a99a:	bd70      	pop	{r4, r5, r6, pc}
   1a99c:	000022a5 	.word	0x000022a5
   1a9a0:	00029898 	.word	0x00029898
   1a9a4:	00029988 	.word	0x00029988
   1a9a8:	00012251 	.word	0x00012251
   1a9ac:	00024830 	.word	0x00024830
   1a9b0:	000022ad 	.word	0x000022ad
   1a9b4:	00004d91 	.word	0x00004d91
   1a9b8:	000124b9 	.word	0x000124b9
   1a9bc:	0001a2f5 	.word	0x0001a2f5

0001a9c0 <lv_label_set_long_mode>:
{
   1a9c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a9c2:	b083      	sub	sp, #12
   1a9c4:	4605      	mov	r5, r0
   1a9c6:	460f      	mov	r7, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   1a9c8:	4b22      	ldr	r3, [pc, #136]	; (1aa54 <lv_label_set_long_mode+0x94>)
   1a9ca:	4798      	blx	r3
   1a9cc:	b968      	cbnz	r0, 1a9ea <lv_label_set_long_mode+0x2a>
   1a9ce:	4b22      	ldr	r3, [pc, #136]	; (1aa58 <lv_label_set_long_mode+0x98>)
   1a9d0:	9300      	str	r3, [sp, #0]
   1a9d2:	f240 1265 	movw	r2, #357	; 0x165
   1a9d6:	4921      	ldr	r1, [pc, #132]	; (1aa5c <lv_label_set_long_mode+0x9c>)
   1a9d8:	2003      	movs	r0, #3
   1a9da:	4c21      	ldr	r4, [pc, #132]	; (1aa60 <lv_label_set_long_mode+0xa0>)
   1a9dc:	47a0      	blx	r4
   1a9de:	462a      	mov	r2, r5
   1a9e0:	2300      	movs	r3, #0
   1a9e2:	4820      	ldr	r0, [pc, #128]	; (1aa64 <lv_label_set_long_mode+0xa4>)
   1a9e4:	4920      	ldr	r1, [pc, #128]	; (1aa68 <lv_label_set_long_mode+0xa8>)
   1a9e6:	4788      	blx	r1
   1a9e8:	e7fe      	b.n	1a9e8 <lv_label_set_long_mode+0x28>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1a9ea:	4628      	mov	r0, r5
   1a9ec:	4b1f      	ldr	r3, [pc, #124]	; (1aa6c <lv_label_set_long_mode+0xac>)
   1a9ee:	4798      	blx	r3
   1a9f0:	4604      	mov	r4, r0
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_x);
   1a9f2:	491f      	ldr	r1, [pc, #124]	; (1aa70 <lv_label_set_long_mode+0xb0>)
   1a9f4:	4628      	mov	r0, r5
   1a9f6:	4e1f      	ldr	r6, [pc, #124]	; (1aa74 <lv_label_set_long_mode+0xb4>)
   1a9f8:	47b0      	blx	r6
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_y);
   1a9fa:	491f      	ldr	r1, [pc, #124]	; (1aa78 <lv_label_set_long_mode+0xb8>)
   1a9fc:	4628      	mov	r0, r5
   1a9fe:	47b0      	blx	r6
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
   1aa00:	491e      	ldr	r1, [pc, #120]	; (1aa7c <lv_label_set_long_mode+0xbc>)
   1aa02:	4628      	mov	r0, r5
   1aa04:	47b0      	blx	r6
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
   1aa06:	491e      	ldr	r1, [pc, #120]	; (1aa80 <lv_label_set_long_mode+0xc0>)
   1aa08:	4628      	mov	r0, r5
   1aa0a:	47b0      	blx	r6
    ext->offset.x = 0;
   1aa0c:	2300      	movs	r3, #0
   1aa0e:	81a3      	strh	r3, [r4, #12]
    ext->offset.y = 0;
   1aa10:	81e3      	strh	r3, [r4, #14]
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
   1aa12:	1efb      	subs	r3, r7, #3
   1aa14:	b2db      	uxtb	r3, r3
   1aa16:	2b02      	cmp	r3, #2
        ext->expand = 1;
   1aa18:	7c23      	ldrb	r3, [r4, #16]
   1aa1a:	bf94      	ite	ls
   1aa1c:	f043 0380 	orrls.w	r3, r3, #128	; 0x80
        ext->expand = 0;
   1aa20:	f36f 13c7 	bfchi	r3, #7, #1
   1aa24:	7423      	strb	r3, [r4, #16]
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
   1aa26:	7c23      	ldrb	r3, [r4, #16]
   1aa28:	f003 0307 	and.w	r3, r3, #7
   1aa2c:	2b02      	cmp	r3, #2
   1aa2e:	d008      	beq.n	1aa42 <lv_label_set_long_mode+0x82>
    ext->long_mode = long_mode;
   1aa30:	7c23      	ldrb	r3, [r4, #16]
   1aa32:	f367 0302 	bfi	r3, r7, #0, #3
   1aa36:	7423      	strb	r3, [r4, #16]
    lv_label_refr_text(label);
   1aa38:	4628      	mov	r0, r5
   1aa3a:	4b12      	ldr	r3, [pc, #72]	; (1aa84 <lv_label_set_long_mode+0xc4>)
   1aa3c:	4798      	blx	r3
}
   1aa3e:	b003      	add	sp, #12
   1aa40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
   1aa42:	8922      	ldrh	r2, [r4, #8]
   1aa44:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1aa48:	429a      	cmp	r2, r3
   1aa4a:	d0f1      	beq.n	1aa30 <lv_label_set_long_mode+0x70>
        lv_label_revert_dots(label);
   1aa4c:	4628      	mov	r0, r5
   1aa4e:	4b0e      	ldr	r3, [pc, #56]	; (1aa88 <lv_label_set_long_mode+0xc8>)
   1aa50:	4798      	blx	r3
   1aa52:	e7ed      	b.n	1aa30 <lv_label_set_long_mode+0x70>
   1aa54:	000022a5 	.word	0x000022a5
   1aa58:	000298b4 	.word	0x000298b4
   1aa5c:	00029988 	.word	0x00029988
   1aa60:	00012251 	.word	0x00012251
   1aa64:	00024830 	.word	0x00024830
   1aa68:	000022ad 	.word	0x000022ad
   1aa6c:	00004d91 	.word	0x00004d91
   1aa70:	0000351d 	.word	0x0000351d
   1aa74:	0001131d 	.word	0x0001131d
   1aa78:	0000357d 	.word	0x0000357d
   1aa7c:	00019d61 	.word	0x00019d61
   1aa80:	00019d45 	.word	0x00019d45
   1aa84:	0001a2f5 	.word	0x0001a2f5
   1aa88:	00019cb9 	.word	0x00019cb9

0001aa8c <lv_label_set_recolor>:
{
   1aa8c:	b530      	push	{r4, r5, lr}
   1aa8e:	b083      	sub	sp, #12
   1aa90:	4604      	mov	r4, r0
   1aa92:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   1aa94:	4b10      	ldr	r3, [pc, #64]	; (1aad8 <lv_label_set_recolor+0x4c>)
   1aa96:	4798      	blx	r3
   1aa98:	b968      	cbnz	r0, 1aab6 <lv_label_set_recolor+0x2a>
   1aa9a:	4b10      	ldr	r3, [pc, #64]	; (1aadc <lv_label_set_recolor+0x50>)
   1aa9c:	9300      	str	r3, [sp, #0]
   1aa9e:	f44f 72cd 	mov.w	r2, #410	; 0x19a
   1aaa2:	490f      	ldr	r1, [pc, #60]	; (1aae0 <lv_label_set_recolor+0x54>)
   1aaa4:	2003      	movs	r0, #3
   1aaa6:	4d0f      	ldr	r5, [pc, #60]	; (1aae4 <lv_label_set_recolor+0x58>)
   1aaa8:	47a8      	blx	r5
   1aaaa:	4622      	mov	r2, r4
   1aaac:	2300      	movs	r3, #0
   1aaae:	480e      	ldr	r0, [pc, #56]	; (1aae8 <lv_label_set_recolor+0x5c>)
   1aab0:	490e      	ldr	r1, [pc, #56]	; (1aaec <lv_label_set_recolor+0x60>)
   1aab2:	4788      	blx	r1
   1aab4:	e7fe      	b.n	1aab4 <lv_label_set_recolor+0x28>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1aab6:	4620      	mov	r0, r4
   1aab8:	4b0d      	ldr	r3, [pc, #52]	; (1aaf0 <lv_label_set_recolor+0x64>)
   1aaba:	4798      	blx	r3
    if(ext->recolor == en) return;
   1aabc:	7c03      	ldrb	r3, [r0, #16]
   1aabe:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1aac2:	42ab      	cmp	r3, r5
   1aac4:	d006      	beq.n	1aad4 <lv_label_set_recolor+0x48>
    ext->recolor = en == false ? 0 : 1;
   1aac6:	7c03      	ldrb	r3, [r0, #16]
   1aac8:	f365 1386 	bfi	r3, r5, #6, #1
   1aacc:	7403      	strb	r3, [r0, #16]
    lv_label_refr_text(label); /*Refresh the text because the potential colo codes in text needs to
   1aace:	4620      	mov	r0, r4
   1aad0:	4b08      	ldr	r3, [pc, #32]	; (1aaf4 <lv_label_set_recolor+0x68>)
   1aad2:	4798      	blx	r3
}
   1aad4:	b003      	add	sp, #12
   1aad6:	bd30      	pop	{r4, r5, pc}
   1aad8:	000022a5 	.word	0x000022a5
   1aadc:	000298cc 	.word	0x000298cc
   1aae0:	00029988 	.word	0x00029988
   1aae4:	00012251 	.word	0x00012251
   1aae8:	00024830 	.word	0x00024830
   1aaec:	000022ad 	.word	0x000022ad
   1aaf0:	00004d91 	.word	0x00004d91
   1aaf4:	0001a2f5 	.word	0x0001a2f5

0001aaf8 <lv_label_create>:
{
   1aaf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aafc:	b082      	sub	sp, #8
   1aafe:	460f      	mov	r7, r1
    lv_obj_t * new_label = lv_obj_create(par, copy);
   1ab00:	4b79      	ldr	r3, [pc, #484]	; (1ace8 <lv_label_create+0x1f0>)
   1ab02:	4798      	blx	r3
   1ab04:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_label);
   1ab06:	4b79      	ldr	r3, [pc, #484]	; (1acec <lv_label_create+0x1f4>)
   1ab08:	4798      	blx	r3
   1ab0a:	b1e8      	cbz	r0, 1ab48 <lv_label_create+0x50>
    if(new_label == NULL) return NULL;
   1ab0c:	2c00      	cmp	r4, #0
   1ab0e:	f000 809a 	beq.w	1ac46 <lv_label_create+0x14e>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_label);
   1ab12:	4b77      	ldr	r3, [pc, #476]	; (1acf0 <lv_label_create+0x1f8>)
   1ab14:	681b      	ldr	r3, [r3, #0]
   1ab16:	b323      	cbz	r3, 1ab62 <lv_label_create+0x6a>
    lv_obj_allocate_ext_attr(new_label, sizeof(lv_label_ext_t));
   1ab18:	2114      	movs	r1, #20
   1ab1a:	4620      	mov	r0, r4
   1ab1c:	4b75      	ldr	r3, [pc, #468]	; (1acf4 <lv_label_create+0x1fc>)
   1ab1e:	4798      	blx	r3
    lv_label_ext_t * ext = lv_obj_get_ext_attr(new_label);
   1ab20:	4620      	mov	r0, r4
   1ab22:	4b75      	ldr	r3, [pc, #468]	; (1acf8 <lv_label_create+0x200>)
   1ab24:	4798      	blx	r3
   1ab26:	4605      	mov	r5, r0
    LV_ASSERT_MEM(ext);
   1ab28:	4b70      	ldr	r3, [pc, #448]	; (1acec <lv_label_create+0x1f4>)
   1ab2a:	4798      	blx	r3
   1ab2c:	b9f8      	cbnz	r0, 1ab6e <lv_label_create+0x76>
   1ab2e:	4b73      	ldr	r3, [pc, #460]	; (1acfc <lv_label_create+0x204>)
   1ab30:	9300      	str	r3, [sp, #0]
   1ab32:	225d      	movs	r2, #93	; 0x5d
   1ab34:	4972      	ldr	r1, [pc, #456]	; (1ad00 <lv_label_create+0x208>)
   1ab36:	2003      	movs	r0, #3
   1ab38:	4c72      	ldr	r4, [pc, #456]	; (1ad04 <lv_label_create+0x20c>)
   1ab3a:	47a0      	blx	r4
   1ab3c:	462a      	mov	r2, r5
   1ab3e:	2300      	movs	r3, #0
   1ab40:	4871      	ldr	r0, [pc, #452]	; (1ad08 <lv_label_create+0x210>)
   1ab42:	4972      	ldr	r1, [pc, #456]	; (1ad0c <lv_label_create+0x214>)
   1ab44:	4788      	blx	r1
   1ab46:	e7fe      	b.n	1ab46 <lv_label_create+0x4e>
    LV_ASSERT_MEM(new_label);
   1ab48:	4b6c      	ldr	r3, [pc, #432]	; (1acfc <lv_label_create+0x204>)
   1ab4a:	9300      	str	r3, [sp, #0]
   1ab4c:	2254      	movs	r2, #84	; 0x54
   1ab4e:	496c      	ldr	r1, [pc, #432]	; (1ad00 <lv_label_create+0x208>)
   1ab50:	2003      	movs	r0, #3
   1ab52:	4d6c      	ldr	r5, [pc, #432]	; (1ad04 <lv_label_create+0x20c>)
   1ab54:	47a8      	blx	r5
   1ab56:	4622      	mov	r2, r4
   1ab58:	2300      	movs	r3, #0
   1ab5a:	486b      	ldr	r0, [pc, #428]	; (1ad08 <lv_label_create+0x210>)
   1ab5c:	496b      	ldr	r1, [pc, #428]	; (1ad0c <lv_label_create+0x214>)
   1ab5e:	4788      	blx	r1
   1ab60:	e7fe      	b.n	1ab60 <lv_label_create+0x68>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_label);
   1ab62:	4620      	mov	r0, r4
   1ab64:	4b6a      	ldr	r3, [pc, #424]	; (1ad10 <lv_label_create+0x218>)
   1ab66:	4798      	blx	r3
   1ab68:	4b61      	ldr	r3, [pc, #388]	; (1acf0 <lv_label_create+0x1f8>)
   1ab6a:	6018      	str	r0, [r3, #0]
   1ab6c:	e7d4      	b.n	1ab18 <lv_label_create+0x20>
    if(ext == NULL) {
   1ab6e:	2d00      	cmp	r5, #0
   1ab70:	d06d      	beq.n	1ac4e <lv_label_create+0x156>
    ext->text       = NULL;
   1ab72:	2300      	movs	r3, #0
   1ab74:	602b      	str	r3, [r5, #0]
    ext->static_txt = 0;
   1ab76:	7c2a      	ldrb	r2, [r5, #16]
    ext->align      = LV_LABEL_ALIGN_AUTO;
   1ab78:	f002 02b7 	and.w	r2, r2, #183	; 0xb7
    ext->dot_end    = LV_LABEL_DOT_END_INV;
   1ab7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1ab80:	8129      	strh	r1, [r5, #8]
    ext->long_mode  = LV_LABEL_LONG_EXPAND;
   1ab82:	f042 0230 	orr.w	r2, r2, #48	; 0x30
   1ab86:	f363 0202 	bfi	r2, r3, #0, #3
   1ab8a:	742a      	strb	r2, [r5, #16]
    ext->anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
   1ab8c:	2219      	movs	r2, #25
   1ab8e:	816a      	strh	r2, [r5, #10]
    ext->offset.x = 0;
   1ab90:	81ab      	strh	r3, [r5, #12]
    ext->offset.y = 0;
   1ab92:	81eb      	strh	r3, [r5, #14]
    ext->dot.tmp_ptr   = NULL;
   1ab94:	606b      	str	r3, [r5, #4]
    ext->dot_tmp_alloc = 0;
   1ab96:	7c6a      	ldrb	r2, [r5, #17]
   1ab98:	f363 0200 	bfi	r2, r3, #0, #1
   1ab9c:	746a      	strb	r2, [r5, #17]
    lv_obj_set_design_cb(new_label, lv_label_design);
   1ab9e:	495d      	ldr	r1, [pc, #372]	; (1ad14 <lv_label_create+0x21c>)
   1aba0:	4620      	mov	r0, r4
   1aba2:	4b5d      	ldr	r3, [pc, #372]	; (1ad18 <lv_label_create+0x220>)
   1aba4:	4798      	blx	r3
    lv_obj_set_signal_cb(new_label, lv_label_signal);
   1aba6:	495d      	ldr	r1, [pc, #372]	; (1ad1c <lv_label_create+0x224>)
   1aba8:	4620      	mov	r0, r4
   1abaa:	4b5d      	ldr	r3, [pc, #372]	; (1ad20 <lv_label_create+0x228>)
   1abac:	4798      	blx	r3
    if(copy == NULL) {
   1abae:	2f00      	cmp	r7, #0
   1abb0:	d052      	beq.n	1ac58 <lv_label_create+0x160>
        lv_label_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
   1abb2:	4638      	mov	r0, r7
   1abb4:	4b50      	ldr	r3, [pc, #320]	; (1acf8 <lv_label_create+0x200>)
   1abb6:	4798      	blx	r3
   1abb8:	4606      	mov	r6, r0
        lv_label_set_long_mode(new_label, lv_label_get_long_mode(copy));
   1abba:	4638      	mov	r0, r7
   1abbc:	4b59      	ldr	r3, [pc, #356]	; (1ad24 <lv_label_create+0x22c>)
   1abbe:	4798      	blx	r3
   1abc0:	4601      	mov	r1, r0
   1abc2:	4620      	mov	r0, r4
   1abc4:	4b58      	ldr	r3, [pc, #352]	; (1ad28 <lv_label_create+0x230>)
   1abc6:	4798      	blx	r3
        lv_label_set_recolor(new_label, lv_label_get_recolor(copy));
   1abc8:	4638      	mov	r0, r7
   1abca:	4b58      	ldr	r3, [pc, #352]	; (1ad2c <lv_label_create+0x234>)
   1abcc:	4798      	blx	r3
   1abce:	4601      	mov	r1, r0
   1abd0:	4620      	mov	r0, r4
   1abd2:	4b57      	ldr	r3, [pc, #348]	; (1ad30 <lv_label_create+0x238>)
   1abd4:	4798      	blx	r3
        lv_label_set_align(new_label, lv_label_get_align(copy));
   1abd6:	4638      	mov	r0, r7
   1abd8:	4b56      	ldr	r3, [pc, #344]	; (1ad34 <lv_label_create+0x23c>)
   1abda:	4798      	blx	r3
   1abdc:	4601      	mov	r1, r0
   1abde:	4620      	mov	r0, r4
   1abe0:	4b55      	ldr	r3, [pc, #340]	; (1ad38 <lv_label_create+0x240>)
   1abe2:	4798      	blx	r3
        if(copy_ext->static_txt == 0)
   1abe4:	7c33      	ldrb	r3, [r6, #16]
   1abe6:	f013 0f08 	tst.w	r3, #8
   1abea:	d146      	bne.n	1ac7a <lv_label_create+0x182>
            lv_label_set_text(new_label, lv_label_get_text(copy));
   1abec:	4638      	mov	r0, r7
   1abee:	4b53      	ldr	r3, [pc, #332]	; (1ad3c <lv_label_create+0x244>)
   1abf0:	4798      	blx	r3
   1abf2:	4601      	mov	r1, r0
   1abf4:	4620      	mov	r0, r4
   1abf6:	4b52      	ldr	r3, [pc, #328]	; (1ad40 <lv_label_create+0x248>)
   1abf8:	4798      	blx	r3
        if(copy_ext->long_mode == LV_LABEL_LONG_DOT) {
   1abfa:	7c33      	ldrb	r3, [r6, #16]
   1abfc:	f003 0307 	and.w	r3, r3, #7
   1ac00:	2b02      	cmp	r3, #2
   1ac02:	d042      	beq.n	1ac8a <lv_label_create+0x192>
        if(copy_ext->dot_tmp_alloc && copy_ext->dot.tmp_ptr) {
   1ac04:	7c73      	ldrb	r3, [r6, #17]
   1ac06:	f013 0f01 	tst.w	r3, #1
   1ac0a:	d064      	beq.n	1acd6 <lv_label_create+0x1de>
   1ac0c:	6870      	ldr	r0, [r6, #4]
   1ac0e:	2800      	cmp	r0, #0
   1ac10:	d061      	beq.n	1acd6 <lv_label_create+0x1de>
            uint16_t len = (uint16_t)strlen(copy_ext->dot.tmp_ptr);
   1ac12:	4b4c      	ldr	r3, [pc, #304]	; (1ad44 <lv_label_create+0x24c>)
   1ac14:	4798      	blx	r3
            lv_label_set_dot_tmp(new_label, ext->dot.tmp_ptr, len);
   1ac16:	b282      	uxth	r2, r0
   1ac18:	6869      	ldr	r1, [r5, #4]
   1ac1a:	4620      	mov	r0, r4
   1ac1c:	4b4a      	ldr	r3, [pc, #296]	; (1ad48 <lv_label_create+0x250>)
   1ac1e:	4798      	blx	r3
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
   1ac20:	7c72      	ldrb	r2, [r6, #17]
   1ac22:	7c6b      	ldrb	r3, [r5, #17]
   1ac24:	f362 0300 	bfi	r3, r2, #0, #1
   1ac28:	746b      	strb	r3, [r5, #17]
        ext->dot_end       = copy_ext->dot_end;
   1ac2a:	8933      	ldrh	r3, [r6, #8]
   1ac2c:	812b      	strh	r3, [r5, #8]
        lv_obj_refresh_style(new_label, LV_STYLE_PROP_ALL);
   1ac2e:	21ff      	movs	r1, #255	; 0xff
   1ac30:	4620      	mov	r0, r4
   1ac32:	4b46      	ldr	r3, [pc, #280]	; (1ad4c <lv_label_create+0x254>)
   1ac34:	4798      	blx	r3
    LV_LOG_INFO("label created");
   1ac36:	4b46      	ldr	r3, [pc, #280]	; (1ad50 <lv_label_create+0x258>)
   1ac38:	9300      	str	r3, [sp, #0]
   1ac3a:	4b30      	ldr	r3, [pc, #192]	; (1acfc <lv_label_create+0x204>)
   1ac3c:	22a8      	movs	r2, #168	; 0xa8
   1ac3e:	4930      	ldr	r1, [pc, #192]	; (1ad00 <lv_label_create+0x208>)
   1ac40:	2001      	movs	r0, #1
   1ac42:	4d30      	ldr	r5, [pc, #192]	; (1ad04 <lv_label_create+0x20c>)
   1ac44:	47a8      	blx	r5
}
   1ac46:	4620      	mov	r0, r4
   1ac48:	b002      	add	sp, #8
   1ac4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_obj_del(new_label);
   1ac4e:	4620      	mov	r0, r4
   1ac50:	4b40      	ldr	r3, [pc, #256]	; (1ad54 <lv_label_create+0x25c>)
   1ac52:	4798      	blx	r3
        return NULL;
   1ac54:	2400      	movs	r4, #0
   1ac56:	e7f6      	b.n	1ac46 <lv_label_create+0x14e>
        lv_theme_apply(new_label, LV_THEME_LABEL);
   1ac58:	2112      	movs	r1, #18
   1ac5a:	4620      	mov	r0, r4
   1ac5c:	4b3e      	ldr	r3, [pc, #248]	; (1ad58 <lv_label_create+0x260>)
   1ac5e:	4798      	blx	r3
        lv_obj_set_click(new_label, false);
   1ac60:	2100      	movs	r1, #0
   1ac62:	4620      	mov	r0, r4
   1ac64:	4b3d      	ldr	r3, [pc, #244]	; (1ad5c <lv_label_create+0x264>)
   1ac66:	4798      	blx	r3
        lv_label_set_long_mode(new_label, LV_LABEL_LONG_EXPAND);
   1ac68:	2100      	movs	r1, #0
   1ac6a:	4620      	mov	r0, r4
   1ac6c:	4b2e      	ldr	r3, [pc, #184]	; (1ad28 <lv_label_create+0x230>)
   1ac6e:	4798      	blx	r3
        lv_label_set_text(new_label, "Text");
   1ac70:	493b      	ldr	r1, [pc, #236]	; (1ad60 <lv_label_create+0x268>)
   1ac72:	4620      	mov	r0, r4
   1ac74:	4b32      	ldr	r3, [pc, #200]	; (1ad40 <lv_label_create+0x248>)
   1ac76:	4798      	blx	r3
   1ac78:	e7dd      	b.n	1ac36 <lv_label_create+0x13e>
            lv_label_set_text_static(new_label, lv_label_get_text(copy));
   1ac7a:	4638      	mov	r0, r7
   1ac7c:	4b2f      	ldr	r3, [pc, #188]	; (1ad3c <lv_label_create+0x244>)
   1ac7e:	4798      	blx	r3
   1ac80:	4601      	mov	r1, r0
   1ac82:	4620      	mov	r0, r4
   1ac84:	4b37      	ldr	r3, [pc, #220]	; (1ad64 <lv_label_create+0x26c>)
   1ac86:	4798      	blx	r3
   1ac88:	e7b7      	b.n	1abfa <lv_label_create+0x102>
            ext->text = lv_mem_realloc(ext->text, _lv_mem_get_size(copy_ext->text));
   1ac8a:	682f      	ldr	r7, [r5, #0]
   1ac8c:	6830      	ldr	r0, [r6, #0]
   1ac8e:	4b36      	ldr	r3, [pc, #216]	; (1ad68 <lv_label_create+0x270>)
   1ac90:	4798      	blx	r3
   1ac92:	4601      	mov	r1, r0
   1ac94:	4638      	mov	r0, r7
   1ac96:	4b35      	ldr	r3, [pc, #212]	; (1ad6c <lv_label_create+0x274>)
   1ac98:	4798      	blx	r3
   1ac9a:	6028      	str	r0, [r5, #0]
            LV_ASSERT_MEM(ext->text);
   1ac9c:	4b13      	ldr	r3, [pc, #76]	; (1acec <lv_label_create+0x1f4>)
   1ac9e:	4798      	blx	r3
   1aca0:	b960      	cbnz	r0, 1acbc <lv_label_create+0x1c4>
   1aca2:	4b16      	ldr	r3, [pc, #88]	; (1acfc <lv_label_create+0x204>)
   1aca4:	9300      	str	r3, [sp, #0]
   1aca6:	2295      	movs	r2, #149	; 0x95
   1aca8:	4915      	ldr	r1, [pc, #84]	; (1ad00 <lv_label_create+0x208>)
   1acaa:	2003      	movs	r0, #3
   1acac:	4c15      	ldr	r4, [pc, #84]	; (1ad04 <lv_label_create+0x20c>)
   1acae:	47a0      	blx	r4
   1acb0:	682a      	ldr	r2, [r5, #0]
   1acb2:	2300      	movs	r3, #0
   1acb4:	4814      	ldr	r0, [pc, #80]	; (1ad08 <lv_label_create+0x210>)
   1acb6:	4915      	ldr	r1, [pc, #84]	; (1ad0c <lv_label_create+0x214>)
   1acb8:	4788      	blx	r1
   1acba:	e7fe      	b.n	1acba <lv_label_create+0x1c2>
            if(ext->text == NULL) return NULL;
   1acbc:	682f      	ldr	r7, [r5, #0]
   1acbe:	b187      	cbz	r7, 1ace2 <lv_label_create+0x1ea>
            _lv_memcpy(ext->text, copy_ext->text, _lv_mem_get_size(copy_ext->text));
   1acc0:	f8d6 8000 	ldr.w	r8, [r6]
   1acc4:	4640      	mov	r0, r8
   1acc6:	4b28      	ldr	r3, [pc, #160]	; (1ad68 <lv_label_create+0x270>)
   1acc8:	4798      	blx	r3
   1acca:	4602      	mov	r2, r0
   1accc:	4641      	mov	r1, r8
   1acce:	4638      	mov	r0, r7
   1acd0:	4b27      	ldr	r3, [pc, #156]	; (1ad70 <lv_label_create+0x278>)
   1acd2:	4798      	blx	r3
   1acd4:	e796      	b.n	1ac04 <lv_label_create+0x10c>
            _lv_memcpy(ext->dot.tmp, copy_ext->dot.tmp, sizeof(ext->dot.tmp));
   1acd6:	2204      	movs	r2, #4
   1acd8:	18b1      	adds	r1, r6, r2
   1acda:	18a8      	adds	r0, r5, r2
   1acdc:	4b24      	ldr	r3, [pc, #144]	; (1ad70 <lv_label_create+0x278>)
   1acde:	4798      	blx	r3
   1ace0:	e79e      	b.n	1ac20 <lv_label_create+0x128>
            if(ext->text == NULL) return NULL;
   1ace2:	2400      	movs	r4, #0
   1ace4:	e7af      	b.n	1ac46 <lv_label_create+0x14e>
   1ace6:	bf00      	nop
   1ace8:	00003e19 	.word	0x00003e19
   1acec:	000022a5 	.word	0x000022a5
   1acf0:	2000c5fc 	.word	0x2000c5fc
   1acf4:	00002bc5 	.word	0x00002bc5
   1acf8:	00004d91 	.word	0x00004d91
   1acfc:	000298e4 	.word	0x000298e4
   1ad00:	00029988 	.word	0x00029988
   1ad04:	00012251 	.word	0x00012251
   1ad08:	00023fcc 	.word	0x00023fcc
   1ad0c:	000022ad 	.word	0x000022ad
   1ad10:	00004d49 	.word	0x00004d49
   1ad14:	0001aef5 	.word	0x0001aef5
   1ad18:	00002b7d 	.word	0x00002b7d
   1ad1c:	0001ad75 	.word	0x0001ad75
   1ad20:	00002b21 	.word	0x00002b21
   1ad24:	00019f21 	.word	0x00019f21
   1ad28:	0001a9c1 	.word	0x0001a9c1
   1ad2c:	00019fd1 	.word	0x00019fd1
   1ad30:	0001aa8d 	.word	0x0001aa8d
   1ad34:	00019f75 	.word	0x00019f75
   1ad38:	00019e65 	.word	0x00019e65
   1ad3c:	00019ed1 	.word	0x00019ed1
   1ad40:	0001a7f9 	.word	0x0001a7f9
   1ad44:	0001b513 	.word	0x0001b513
   1ad48:	00019dd9 	.word	0x00019dd9
   1ad4c:	00003a8d 	.word	0x00003a8d
   1ad50:	000299ec 	.word	0x000299ec
   1ad54:	00004f59 	.word	0x00004f59
   1ad58:	000141dd 	.word	0x000141dd
   1ad5c:	00002995 	.word	0x00002995
   1ad60:	000299e4 	.word	0x000299e4
   1ad64:	0001a941 	.word	0x0001a941
   1ad68:	00012545 	.word	0x00012545
   1ad6c:	0001288d 	.word	0x0001288d
   1ad70:	00012649 	.word	0x00012649

0001ad74 <lv_label_signal>:
{
   1ad74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ad78:	4607      	mov	r7, r0
   1ad7a:	4615      	mov	r5, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
   1ad7c:	2908      	cmp	r1, #8
   1ad7e:	d015      	beq.n	1adac <lv_label_signal+0x38>
   1ad80:	460c      	mov	r4, r1
    res = ancestor_signal(label, sign, param);
   1ad82:	4b30      	ldr	r3, [pc, #192]	; (1ae44 <lv_label_signal+0xd0>)
   1ad84:	681b      	ldr	r3, [r3, #0]
   1ad86:	4798      	blx	r3
   1ad88:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
   1ad8a:	2801      	cmp	r0, #1
   1ad8c:	d115      	bne.n	1adba <lv_label_signal+0x46>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
   1ad8e:	2c07      	cmp	r4, #7
   1ad90:	d020      	beq.n	1add4 <lv_label_signal+0x60>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1ad92:	4638      	mov	r0, r7
   1ad94:	4b2c      	ldr	r3, [pc, #176]	; (1ae48 <lv_label_signal+0xd4>)
   1ad96:	4798      	blx	r3
   1ad98:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CLEANUP) {
   1ad9a:	bb44      	cbnz	r4, 1adee <lv_label_signal+0x7a>
        if(ext->static_txt == 0) {
   1ad9c:	7c03      	ldrb	r3, [r0, #16]
   1ad9e:	f013 0f08 	tst.w	r3, #8
   1ada2:	d01d      	beq.n	1ade0 <lv_label_signal+0x6c>
        lv_label_dot_tmp_free(label);
   1ada4:	4638      	mov	r0, r7
   1ada6:	4b29      	ldr	r3, [pc, #164]	; (1ae4c <lv_label_signal+0xd8>)
   1ada8:	4798      	blx	r3
   1adaa:	e006      	b.n	1adba <lv_label_signal+0x46>
    switch(type) {
   1adac:	7813      	ldrb	r3, [r2, #0]
   1adae:	b93b      	cbnz	r3, 1adc0 <lv_label_signal+0x4c>
            style_dsc_p = &label->style_list;
   1adb0:	f100 0328 	add.w	r3, r0, #40	; 0x28
        info->result = lv_label_get_style(label, info->part);
   1adb4:	606b      	str	r3, [r5, #4]
        if(info->result != NULL) return LV_RES_OK;
   1adb6:	2601      	movs	r6, #1
   1adb8:	b123      	cbz	r3, 1adc4 <lv_label_signal+0x50>
}
   1adba:	4630      	mov	r0, r6
   1adbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            style_dsc_p = NULL;
   1adc0:	2300      	movs	r3, #0
   1adc2:	e7f7      	b.n	1adb4 <lv_label_signal+0x40>
        else return ancestor_signal(label, sign, param);
   1adc4:	4b1f      	ldr	r3, [pc, #124]	; (1ae44 <lv_label_signal+0xd0>)
   1adc6:	681b      	ldr	r3, [r3, #0]
   1adc8:	462a      	mov	r2, r5
   1adca:	2108      	movs	r1, #8
   1adcc:	4638      	mov	r0, r7
   1adce:	4798      	blx	r3
   1add0:	4606      	mov	r6, r0
   1add2:	e7f2      	b.n	1adba <lv_label_signal+0x46>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
   1add4:	491e      	ldr	r1, [pc, #120]	; (1ae50 <lv_label_signal+0xdc>)
   1add6:	4628      	mov	r0, r5
   1add8:	4b1e      	ldr	r3, [pc, #120]	; (1ae54 <lv_label_signal+0xe0>)
   1adda:	4798      	blx	r3
   1addc:	4606      	mov	r6, r0
   1adde:	e7ec      	b.n	1adba <lv_label_signal+0x46>
            lv_mem_free(ext->text);
   1ade0:	6800      	ldr	r0, [r0, #0]
   1ade2:	4b1d      	ldr	r3, [pc, #116]	; (1ae58 <lv_label_signal+0xe4>)
   1ade4:	4798      	blx	r3
            ext->text = NULL;
   1ade6:	2300      	movs	r3, #0
   1ade8:	f8c8 3000 	str.w	r3, [r8]
   1adec:	e7da      	b.n	1ada4 <lv_label_signal+0x30>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
   1adee:	2c04      	cmp	r4, #4
   1adf0:	d014      	beq.n	1ae1c <lv_label_signal+0xa8>
    else if(sign == LV_SIGNAL_COORD_CHG) {
   1adf2:	2c02      	cmp	r4, #2
   1adf4:	d1e1      	bne.n	1adba <lv_label_signal+0x46>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1adf6:	88aa      	ldrh	r2, [r5, #4]
   1adf8:	3201      	adds	r2, #1
   1adfa:	882b      	ldrh	r3, [r5, #0]
   1adfc:	1ad2      	subs	r2, r2, r3
   1adfe:	8abb      	ldrh	r3, [r7, #20]
   1ae00:	3301      	adds	r3, #1
   1ae02:	8a39      	ldrh	r1, [r7, #16]
   1ae04:	1a5b      	subs	r3, r3, r1
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
   1ae06:	b292      	uxth	r2, r2
   1ae08:	b29b      	uxth	r3, r3
   1ae0a:	429a      	cmp	r2, r3
   1ae0c:	d00d      	beq.n	1ae2a <lv_label_signal+0xb6>
            lv_label_revert_dots(label);
   1ae0e:	4638      	mov	r0, r7
   1ae10:	4b12      	ldr	r3, [pc, #72]	; (1ae5c <lv_label_signal+0xe8>)
   1ae12:	4798      	blx	r3
            lv_label_refr_text(label);
   1ae14:	4638      	mov	r0, r7
   1ae16:	4b12      	ldr	r3, [pc, #72]	; (1ae60 <lv_label_signal+0xec>)
   1ae18:	4798      	blx	r3
   1ae1a:	e7ce      	b.n	1adba <lv_label_signal+0x46>
        lv_label_revert_dots(label);
   1ae1c:	4638      	mov	r0, r7
   1ae1e:	4b0f      	ldr	r3, [pc, #60]	; (1ae5c <lv_label_signal+0xe8>)
   1ae20:	4798      	blx	r3
        lv_label_refr_text(label);
   1ae22:	4638      	mov	r0, r7
   1ae24:	4b0e      	ldr	r3, [pc, #56]	; (1ae60 <lv_label_signal+0xec>)
   1ae26:	4798      	blx	r3
   1ae28:	e7c7      	b.n	1adba <lv_label_signal+0x46>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1ae2a:	88ea      	ldrh	r2, [r5, #6]
   1ae2c:	3201      	adds	r2, #1
   1ae2e:	886b      	ldrh	r3, [r5, #2]
   1ae30:	1ad2      	subs	r2, r2, r3
   1ae32:	8afb      	ldrh	r3, [r7, #22]
   1ae34:	3301      	adds	r3, #1
   1ae36:	8a79      	ldrh	r1, [r7, #18]
   1ae38:	1a5b      	subs	r3, r3, r1
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
   1ae3a:	b292      	uxth	r2, r2
   1ae3c:	b29b      	uxth	r3, r3
   1ae3e:	429a      	cmp	r2, r3
   1ae40:	d1e5      	bne.n	1ae0e <lv_label_signal+0x9a>
   1ae42:	e7ba      	b.n	1adba <lv_label_signal+0x46>
   1ae44:	2000c5fc 	.word	0x2000c5fc
   1ae48:	00004d91 	.word	0x00004d91
   1ae4c:	00019c89 	.word	0x00019c89
   1ae50:	000299fc 	.word	0x000299fc
   1ae54:	00005089 	.word	0x00005089
   1ae58:	000124b9 	.word	0x000124b9
   1ae5c:	00019cb9 	.word	0x00019cb9
   1ae60:	0001a2f5 	.word	0x0001a2f5

0001ae64 <lv_label_get_text_sel_start>:
{
   1ae64:	b530      	push	{r4, r5, lr}
   1ae66:	b083      	sub	sp, #12
   1ae68:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   1ae6a:	4b0a      	ldr	r3, [pc, #40]	; (1ae94 <lv_label_get_text_sel_start+0x30>)
   1ae6c:	4798      	blx	r3
   1ae6e:	b118      	cbz	r0, 1ae78 <lv_label_get_text_sel_start+0x14>
}
   1ae70:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1ae74:	b003      	add	sp, #12
   1ae76:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   1ae78:	4b07      	ldr	r3, [pc, #28]	; (1ae98 <lv_label_get_text_sel_start+0x34>)
   1ae7a:	9300      	str	r3, [sp, #0]
   1ae7c:	f240 321d 	movw	r2, #797	; 0x31d
   1ae80:	4906      	ldr	r1, [pc, #24]	; (1ae9c <lv_label_get_text_sel_start+0x38>)
   1ae82:	2003      	movs	r0, #3
   1ae84:	4d06      	ldr	r5, [pc, #24]	; (1aea0 <lv_label_get_text_sel_start+0x3c>)
   1ae86:	47a8      	blx	r5
   1ae88:	4622      	mov	r2, r4
   1ae8a:	2300      	movs	r3, #0
   1ae8c:	4805      	ldr	r0, [pc, #20]	; (1aea4 <lv_label_get_text_sel_start+0x40>)
   1ae8e:	4906      	ldr	r1, [pc, #24]	; (1aea8 <lv_label_get_text_sel_start+0x44>)
   1ae90:	4788      	blx	r1
   1ae92:	e7fe      	b.n	1ae92 <lv_label_get_text_sel_start+0x2e>
   1ae94:	000022a5 	.word	0x000022a5
   1ae98:	0002990c 	.word	0x0002990c
   1ae9c:	00029988 	.word	0x00029988
   1aea0:	00012251 	.word	0x00012251
   1aea4:	00024830 	.word	0x00024830
   1aea8:	000022ad 	.word	0x000022ad

0001aeac <lv_label_get_text_sel_end>:
{
   1aeac:	b530      	push	{r4, r5, lr}
   1aeae:	b083      	sub	sp, #12
   1aeb0:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   1aeb2:	4b0a      	ldr	r3, [pc, #40]	; (1aedc <lv_label_get_text_sel_end+0x30>)
   1aeb4:	4798      	blx	r3
   1aeb6:	b118      	cbz	r0, 1aec0 <lv_label_get_text_sel_end+0x14>
}
   1aeb8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1aebc:	b003      	add	sp, #12
   1aebe:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   1aec0:	4b07      	ldr	r3, [pc, #28]	; (1aee0 <lv_label_get_text_sel_end+0x34>)
   1aec2:	9300      	str	r3, [sp, #0]
   1aec4:	f44f 724c 	mov.w	r2, #816	; 0x330
   1aec8:	4906      	ldr	r1, [pc, #24]	; (1aee4 <lv_label_get_text_sel_end+0x38>)
   1aeca:	2003      	movs	r0, #3
   1aecc:	4d06      	ldr	r5, [pc, #24]	; (1aee8 <lv_label_get_text_sel_end+0x3c>)
   1aece:	47a8      	blx	r5
   1aed0:	4622      	mov	r2, r4
   1aed2:	2300      	movs	r3, #0
   1aed4:	4805      	ldr	r0, [pc, #20]	; (1aeec <lv_label_get_text_sel_end+0x40>)
   1aed6:	4906      	ldr	r1, [pc, #24]	; (1aef0 <lv_label_get_text_sel_end+0x44>)
   1aed8:	4788      	blx	r1
   1aeda:	e7fe      	b.n	1aeda <lv_label_get_text_sel_end+0x2e>
   1aedc:	000022a5 	.word	0x000022a5
   1aee0:	00029928 	.word	0x00029928
   1aee4:	00029988 	.word	0x00029988
   1aee8:	00012251 	.word	0x00012251
   1aeec:	00024830 	.word	0x00024830
   1aef0:	000022ad 	.word	0x000022ad

0001aef4 <lv_label_design>:
    if(mode == LV_DESIGN_COVER_CHK)
   1aef4:	2a02      	cmp	r2, #2
   1aef6:	f000 811e 	beq.w	1b136 <lv_label_design+0x242>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
   1aefa:	b10a      	cbz	r2, 1af00 <lv_label_design+0xc>
    return LV_DESIGN_RES_OK;
   1aefc:	2000      	movs	r0, #0
   1aefe:	4770      	bx	lr
{
   1af00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1af04:	b0a9      	sub	sp, #164	; 0xa4
   1af06:	460f      	mov	r7, r1
   1af08:	4605      	mov	r5, r0
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1af0a:	4b8c      	ldr	r3, [pc, #560]	; (1b13c <lv_label_design+0x248>)
   1af0c:	4798      	blx	r3
   1af0e:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   1af10:	2204      	movs	r2, #4
   1af12:	2100      	movs	r1, #0
   1af14:	4628      	mov	r0, r5
   1af16:	4c8a      	ldr	r4, [pc, #552]	; (1b140 <lv_label_design+0x24c>)
   1af18:	47a0      	blx	r4
   1af1a:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   1af1c:	2205      	movs	r2, #5
   1af1e:	2100      	movs	r1, #0
   1af20:	4628      	mov	r0, r5
   1af22:	47a0      	blx	r4
   1af24:	f105 030f 	add.w	r3, r5, #15
   1af28:	f105 0617 	add.w	r6, r5, #23
    uint8_t * d8 = (uint8_t *)dst;
   1af2c:	aa06      	add	r2, sp, #24
        *d8 = *s8;
   1af2e:	f813 4f01 	ldrb.w	r4, [r3, #1]!
   1af32:	f802 4b01 	strb.w	r4, [r2], #1
    while(len) {
   1af36:	42b3      	cmp	r3, r6
   1af38:	d1f9      	bne.n	1af2e <lv_label_design+0x3a>
        bg_coords.x1 -= w;
   1af3a:	fa1f f989 	uxth.w	r9, r9
   1af3e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   1af42:	eba3 0309 	sub.w	r3, r3, r9
   1af46:	f8ad 3018 	strh.w	r3, [sp, #24]
        bg_coords.x2 += w;
   1af4a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   1af4e:	4499      	add	r9, r3
   1af50:	f8ad 901c 	strh.w	r9, [sp, #28]
        bg_coords.y1 -= h;
   1af54:	b280      	uxth	r0, r0
   1af56:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   1af5a:	1a1b      	subs	r3, r3, r0
   1af5c:	f8ad 301a 	strh.w	r3, [sp, #26]
        bg_coords.y2 += h;
   1af60:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   1af64:	4418      	add	r0, r3
   1af66:	f8ad 001e 	strh.w	r0, [sp, #30]
        lv_draw_rect_dsc_init(&draw_rect_dsc);
   1af6a:	a813      	add	r0, sp, #76	; 0x4c
   1af6c:	4b75      	ldr	r3, [pc, #468]	; (1b144 <lv_label_design+0x250>)
   1af6e:	4798      	blx	r3
        lv_obj_init_draw_rect_dsc(label, LV_LABEL_PART_MAIN, &draw_rect_dsc);
   1af70:	aa13      	add	r2, sp, #76	; 0x4c
   1af72:	2100      	movs	r1, #0
   1af74:	4628      	mov	r0, r5
   1af76:	4b74      	ldr	r3, [pc, #464]	; (1b148 <lv_label_design+0x254>)
   1af78:	4798      	blx	r3
        lv_draw_rect(&bg_coords, clip_area, &draw_rect_dsc);
   1af7a:	aa13      	add	r2, sp, #76	; 0x4c
   1af7c:	4639      	mov	r1, r7
   1af7e:	a806      	add	r0, sp, #24
   1af80:	4b72      	ldr	r3, [pc, #456]	; (1b14c <lv_label_design+0x258>)
   1af82:	4798      	blx	r3
        get_txt_coords(label, &txt_coords);
   1af84:	a908      	add	r1, sp, #32
   1af86:	4628      	mov	r0, r5
   1af88:	4b71      	ldr	r3, [pc, #452]	; (1b150 <lv_label_design+0x25c>)
   1af8a:	4798      	blx	r3
        bool is_common = _lv_area_intersect(&txt_clip, clip_area, &txt_coords);
   1af8c:	aa08      	add	r2, sp, #32
   1af8e:	4639      	mov	r1, r7
   1af90:	a80a      	add	r0, sp, #40	; 0x28
   1af92:	4b70      	ldr	r3, [pc, #448]	; (1b154 <lv_label_design+0x260>)
   1af94:	4798      	blx	r3
        if(!is_common) return LV_DESIGN_RES_OK;
   1af96:	b910      	cbnz	r0, 1af9e <lv_label_design+0xaa>
}
   1af98:	b029      	add	sp, #164	; 0xa4
   1af9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        lv_label_align_t align = lv_label_get_align(label);
   1af9e:	4628      	mov	r0, r5
   1afa0:	4b6d      	ldr	r3, [pc, #436]	; (1b158 <lv_label_design+0x264>)
   1afa2:	4798      	blx	r3
        if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
   1afa4:	f898 3010 	ldrb.w	r3, [r8, #16]
        lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
   1afa8:	f3c3 1480 	ubfx	r4, r3, #6, #1
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
   1afac:	f013 0f80 	tst.w	r3, #128	; 0x80
   1afb0:	bf18      	it	ne
   1afb2:	f044 0402 	orrne.w	r4, r4, #2
        if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
   1afb6:	f013 0f07 	tst.w	r3, #7
   1afba:	bf08      	it	eq
   1afbc:	f044 0410 	orreq.w	r4, r4, #16
        if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
   1afc0:	2801      	cmp	r0, #1
   1afc2:	d038      	beq.n	1b036 <lv_label_design+0x142>
        if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
   1afc4:	2802      	cmp	r0, #2
   1afc6:	bf08      	it	eq
   1afc8:	f044 0408 	orreq.w	r4, r4, #8
        lv_draw_label_dsc_init(&label_draw_dsc);
   1afcc:	a80c      	add	r0, sp, #48	; 0x30
   1afce:	4b63      	ldr	r3, [pc, #396]	; (1b15c <lv_label_design+0x268>)
   1afd0:	4798      	blx	r3
        label_draw_dsc.sel_start = lv_label_get_text_sel_start(label);
   1afd2:	4628      	mov	r0, r5
   1afd4:	4b62      	ldr	r3, [pc, #392]	; (1b160 <lv_label_design+0x26c>)
   1afd6:	4798      	blx	r3
   1afd8:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
        label_draw_dsc.sel_end = lv_label_get_text_sel_end(label);
   1afdc:	4628      	mov	r0, r5
   1afde:	4b61      	ldr	r3, [pc, #388]	; (1b164 <lv_label_design+0x270>)
   1afe0:	4798      	blx	r3
   1afe2:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
        label_draw_dsc.ofs_x = ext->offset.x;
   1afe6:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
   1afea:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        label_draw_dsc.ofs_y = ext->offset.y;
   1afee:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
   1aff2:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
        label_draw_dsc.flag = flag;
   1aff6:	f88d 4047 	strb.w	r4, [sp, #71]	; 0x47
        lv_obj_init_draw_label_dsc(label, LV_LABEL_PART_MAIN, &label_draw_dsc);
   1affa:	aa0c      	add	r2, sp, #48	; 0x30
   1affc:	2100      	movs	r1, #0
   1affe:	4628      	mov	r0, r5
   1b000:	4b59      	ldr	r3, [pc, #356]	; (1b168 <lv_label_design+0x274>)
   1b002:	4798      	blx	r3
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
   1b004:	f898 2010 	ldrb.w	r2, [r8, #16]
   1b008:	f002 0307 	and.w	r3, r2, #7
   1b00c:	3b03      	subs	r3, #3
   1b00e:	b2db      	uxtb	r3, r3
   1b010:	2b01      	cmp	r3, #1
   1b012:	d913      	bls.n	1b03c <lv_label_design+0x148>
        lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
   1b014:	f8d8 3000 	ldr.w	r3, [r8]
   1b018:	2200      	movs	r2, #0
   1b01a:	9200      	str	r2, [sp, #0]
   1b01c:	aa0c      	add	r2, sp, #48	; 0x30
   1b01e:	a90a      	add	r1, sp, #40	; 0x28
   1b020:	a808      	add	r0, sp, #32
   1b022:	4d52      	ldr	r5, [pc, #328]	; (1b16c <lv_label_design+0x278>)
   1b024:	47a8      	blx	r5
        if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
   1b026:	f898 3010 	ldrb.w	r3, [r8, #16]
   1b02a:	f003 0307 	and.w	r3, r3, #7
   1b02e:	2b04      	cmp	r3, #4
   1b030:	d02b      	beq.n	1b08a <lv_label_design+0x196>
    return LV_DESIGN_RES_OK;
   1b032:	2000      	movs	r0, #0
   1b034:	e7b0      	b.n	1af98 <lv_label_design+0xa4>
        if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
   1b036:	f044 0404 	orr.w	r4, r4, #4
   1b03a:	e7c7      	b.n	1afcc <lv_label_design+0xd8>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
   1b03c:	f002 0230 	and.w	r2, r2, #48	; 0x30
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
   1b040:	2a10      	cmp	r2, #16
   1b042:	d001      	beq.n	1b048 <lv_label_design+0x154>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
   1b044:	2a20      	cmp	r2, #32
   1b046:	d1e5      	bne.n	1b014 <lv_label_design+0x120>
            _lv_txt_get_size(&size, ext->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
   1b048:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
   1b04c:	f8d8 1000 	ldr.w	r1, [r8]
   1b050:	9402      	str	r4, [sp, #8]
   1b052:	f647 4218 	movw	r2, #31768	; 0x7c18
   1b056:	9201      	str	r2, [sp, #4]
   1b058:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	; 0x3a
   1b05c:	9200      	str	r2, [sp, #0]
   1b05e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1b060:	a805      	add	r0, sp, #20
   1b062:	4d43      	ldr	r5, [pc, #268]	; (1b170 <lv_label_design+0x27c>)
   1b064:	47a8      	blx	r5
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1b066:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   1b06a:	3301      	adds	r3, #1
   1b06c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   1b070:	1a9b      	subs	r3, r3, r2
            if(size.x > lv_area_get_width(&txt_coords)) {
   1b072:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
   1b076:	b21b      	sxth	r3, r3
   1b078:	429a      	cmp	r2, r3
   1b07a:	ddcb      	ble.n	1b014 <lv_label_design+0x120>
                label_draw_dsc.flag &= ~LV_TXT_FLAG_CENTER;
   1b07c:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
   1b080:	f023 030c 	bic.w	r3, r3, #12
   1b084:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
   1b088:	e7c4      	b.n	1b014 <lv_label_design+0x120>
            _lv_txt_get_size(&size, ext->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
   1b08a:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
   1b08e:	f8d8 1000 	ldr.w	r1, [r8]
   1b092:	9402      	str	r4, [sp, #8]
   1b094:	f647 4218 	movw	r2, #31768	; 0x7c18
   1b098:	9201      	str	r2, [sp, #4]
   1b09a:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	; 0x3a
   1b09e:	9200      	str	r2, [sp, #0]
   1b0a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1b0a2:	a805      	add	r0, sp, #20
   1b0a4:	4c32      	ldr	r4, [pc, #200]	; (1b170 <lv_label_design+0x27c>)
   1b0a6:	47a0      	blx	r4
            if(size.x > lv_area_get_width(&txt_coords)) {
   1b0a8:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
   1b0ac:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   1b0b0:	3301      	adds	r3, #1
   1b0b2:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   1b0b6:	1a5b      	subs	r3, r3, r1
   1b0b8:	b21b      	sxth	r3, r3
   1b0ba:	429a      	cmp	r2, r3
   1b0bc:	dc20      	bgt.n	1b100 <lv_label_design+0x20c>
            if(size.y > lv_area_get_height(&txt_coords)) {
   1b0be:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1b0c2:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   1b0c6:	3301      	adds	r3, #1
   1b0c8:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   1b0cc:	1a5b      	subs	r3, r3, r1
   1b0ce:	b21b      	sxth	r3, r3
   1b0d0:	429a      	cmp	r2, r3
   1b0d2:	ddae      	ble.n	1b032 <lv_label_design+0x13e>
                label_draw_dsc.ofs_x = ext->offset.x;
   1b0d4:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
   1b0d8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   1b0dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                label_draw_dsc.ofs_y = ext->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
   1b0de:	891b      	ldrh	r3, [r3, #8]
   1b0e0:	4413      	add	r3, r2
   1b0e2:	f8b8 200e 	ldrh.w	r2, [r8, #14]
   1b0e6:	4413      	add	r3, r2
   1b0e8:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
   1b0ec:	f8d8 3000 	ldr.w	r3, [r8]
   1b0f0:	2200      	movs	r2, #0
   1b0f2:	9200      	str	r2, [sp, #0]
   1b0f4:	aa0c      	add	r2, sp, #48	; 0x30
   1b0f6:	a90a      	add	r1, sp, #40	; 0x28
   1b0f8:	a808      	add	r0, sp, #32
   1b0fa:	4c1c      	ldr	r4, [pc, #112]	; (1b16c <lv_label_design+0x278>)
   1b0fc:	47a0      	blx	r4
   1b0fe:	e798      	b.n	1b032 <lv_label_design+0x13e>
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
   1b100:	f8b8 400c 	ldrh.w	r4, [r8, #12]
   1b104:	4422      	add	r2, r4
   1b106:	b294      	uxth	r4, r2
                                       lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
   1b108:	2220      	movs	r2, #32
   1b10a:	4611      	mov	r1, r2
   1b10c:	980d      	ldr	r0, [sp, #52]	; 0x34
   1b10e:	4b19      	ldr	r3, [pc, #100]	; (1b174 <lv_label_design+0x280>)
   1b110:	4798      	blx	r3
   1b112:	eb00 0040 	add.w	r0, r0, r0, lsl #1
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
   1b116:	4404      	add	r4, r0
   1b118:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
                label_draw_dsc.ofs_y = ext->offset.y;
   1b11c:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
   1b120:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
   1b124:	f8d8 3000 	ldr.w	r3, [r8]
   1b128:	2200      	movs	r2, #0
   1b12a:	9200      	str	r2, [sp, #0]
   1b12c:	aa0c      	add	r2, sp, #48	; 0x30
   1b12e:	a90a      	add	r1, sp, #40	; 0x28
   1b130:	a808      	add	r0, sp, #32
   1b132:	47a8      	blx	r5
   1b134:	e7c3      	b.n	1b0be <lv_label_design+0x1ca>
        return LV_DESIGN_RES_NOT_COVER;
   1b136:	2002      	movs	r0, #2
   1b138:	4770      	bx	lr
   1b13a:	bf00      	nop
   1b13c:	00004d91 	.word	0x00004d91
   1b140:	000044c9 	.word	0x000044c9
   1b144:	0000c25d 	.word	0x0000c25d
   1b148:	000050b9 	.word	0x000050b9
   1b14c:	0000c325 	.word	0x0000c325
   1b150:	00019d7d 	.word	0x00019d7d
   1b154:	0001150d 	.word	0x0001150d
   1b158:	00019f75 	.word	0x00019f75
   1b15c:	000099c1 	.word	0x000099c1
   1b160:	0001ae65 	.word	0x0001ae65
   1b164:	0001aead 	.word	0x0001aead
   1b168:	000056a5 	.word	0x000056a5
   1b16c:	00009a19 	.word	0x00009a19
   1b170:	00014071 	.word	0x00014071
   1b174:	00010055 	.word	0x00010055

0001b178 <__aeabi_uldivmod>:
   1b178:	b953      	cbnz	r3, 1b190 <__aeabi_uldivmod+0x18>
   1b17a:	b94a      	cbnz	r2, 1b190 <__aeabi_uldivmod+0x18>
   1b17c:	2900      	cmp	r1, #0
   1b17e:	bf08      	it	eq
   1b180:	2800      	cmpeq	r0, #0
   1b182:	bf1c      	itt	ne
   1b184:	f04f 31ff 	movne.w	r1, #4294967295
   1b188:	f04f 30ff 	movne.w	r0, #4294967295
   1b18c:	f000 b97a 	b.w	1b484 <__aeabi_idiv0>
   1b190:	f1ad 0c08 	sub.w	ip, sp, #8
   1b194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1b198:	f000 f806 	bl	1b1a8 <__udivmoddi4>
   1b19c:	f8dd e004 	ldr.w	lr, [sp, #4]
   1b1a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1b1a4:	b004      	add	sp, #16
   1b1a6:	4770      	bx	lr

0001b1a8 <__udivmoddi4>:
   1b1a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b1ac:	468c      	mov	ip, r1
   1b1ae:	460d      	mov	r5, r1
   1b1b0:	4604      	mov	r4, r0
   1b1b2:	9e08      	ldr	r6, [sp, #32]
   1b1b4:	2b00      	cmp	r3, #0
   1b1b6:	d151      	bne.n	1b25c <__udivmoddi4+0xb4>
   1b1b8:	428a      	cmp	r2, r1
   1b1ba:	4617      	mov	r7, r2
   1b1bc:	d96d      	bls.n	1b29a <__udivmoddi4+0xf2>
   1b1be:	fab2 fe82 	clz	lr, r2
   1b1c2:	f1be 0f00 	cmp.w	lr, #0
   1b1c6:	d00b      	beq.n	1b1e0 <__udivmoddi4+0x38>
   1b1c8:	f1ce 0c20 	rsb	ip, lr, #32
   1b1cc:	fa01 f50e 	lsl.w	r5, r1, lr
   1b1d0:	fa20 fc0c 	lsr.w	ip, r0, ip
   1b1d4:	fa02 f70e 	lsl.w	r7, r2, lr
   1b1d8:	ea4c 0c05 	orr.w	ip, ip, r5
   1b1dc:	fa00 f40e 	lsl.w	r4, r0, lr
   1b1e0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
   1b1e4:	0c25      	lsrs	r5, r4, #16
   1b1e6:	fbbc f8fa 	udiv	r8, ip, sl
   1b1ea:	fa1f f987 	uxth.w	r9, r7
   1b1ee:	fb0a cc18 	mls	ip, sl, r8, ip
   1b1f2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   1b1f6:	fb08 f309 	mul.w	r3, r8, r9
   1b1fa:	42ab      	cmp	r3, r5
   1b1fc:	d90a      	bls.n	1b214 <__udivmoddi4+0x6c>
   1b1fe:	19ed      	adds	r5, r5, r7
   1b200:	f108 32ff 	add.w	r2, r8, #4294967295
   1b204:	f080 8123 	bcs.w	1b44e <__udivmoddi4+0x2a6>
   1b208:	42ab      	cmp	r3, r5
   1b20a:	f240 8120 	bls.w	1b44e <__udivmoddi4+0x2a6>
   1b20e:	f1a8 0802 	sub.w	r8, r8, #2
   1b212:	443d      	add	r5, r7
   1b214:	1aed      	subs	r5, r5, r3
   1b216:	b2a4      	uxth	r4, r4
   1b218:	fbb5 f0fa 	udiv	r0, r5, sl
   1b21c:	fb0a 5510 	mls	r5, sl, r0, r5
   1b220:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   1b224:	fb00 f909 	mul.w	r9, r0, r9
   1b228:	45a1      	cmp	r9, r4
   1b22a:	d909      	bls.n	1b240 <__udivmoddi4+0x98>
   1b22c:	19e4      	adds	r4, r4, r7
   1b22e:	f100 33ff 	add.w	r3, r0, #4294967295
   1b232:	f080 810a 	bcs.w	1b44a <__udivmoddi4+0x2a2>
   1b236:	45a1      	cmp	r9, r4
   1b238:	f240 8107 	bls.w	1b44a <__udivmoddi4+0x2a2>
   1b23c:	3802      	subs	r0, #2
   1b23e:	443c      	add	r4, r7
   1b240:	eba4 0409 	sub.w	r4, r4, r9
   1b244:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   1b248:	2100      	movs	r1, #0
   1b24a:	2e00      	cmp	r6, #0
   1b24c:	d061      	beq.n	1b312 <__udivmoddi4+0x16a>
   1b24e:	fa24 f40e 	lsr.w	r4, r4, lr
   1b252:	2300      	movs	r3, #0
   1b254:	6034      	str	r4, [r6, #0]
   1b256:	6073      	str	r3, [r6, #4]
   1b258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b25c:	428b      	cmp	r3, r1
   1b25e:	d907      	bls.n	1b270 <__udivmoddi4+0xc8>
   1b260:	2e00      	cmp	r6, #0
   1b262:	d054      	beq.n	1b30e <__udivmoddi4+0x166>
   1b264:	2100      	movs	r1, #0
   1b266:	e886 0021 	stmia.w	r6, {r0, r5}
   1b26a:	4608      	mov	r0, r1
   1b26c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b270:	fab3 f183 	clz	r1, r3
   1b274:	2900      	cmp	r1, #0
   1b276:	f040 808e 	bne.w	1b396 <__udivmoddi4+0x1ee>
   1b27a:	42ab      	cmp	r3, r5
   1b27c:	d302      	bcc.n	1b284 <__udivmoddi4+0xdc>
   1b27e:	4282      	cmp	r2, r0
   1b280:	f200 80fa 	bhi.w	1b478 <__udivmoddi4+0x2d0>
   1b284:	1a84      	subs	r4, r0, r2
   1b286:	eb65 0503 	sbc.w	r5, r5, r3
   1b28a:	2001      	movs	r0, #1
   1b28c:	46ac      	mov	ip, r5
   1b28e:	2e00      	cmp	r6, #0
   1b290:	d03f      	beq.n	1b312 <__udivmoddi4+0x16a>
   1b292:	e886 1010 	stmia.w	r6, {r4, ip}
   1b296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b29a:	b912      	cbnz	r2, 1b2a2 <__udivmoddi4+0xfa>
   1b29c:	2701      	movs	r7, #1
   1b29e:	fbb7 f7f2 	udiv	r7, r7, r2
   1b2a2:	fab7 fe87 	clz	lr, r7
   1b2a6:	f1be 0f00 	cmp.w	lr, #0
   1b2aa:	d134      	bne.n	1b316 <__udivmoddi4+0x16e>
   1b2ac:	1beb      	subs	r3, r5, r7
   1b2ae:	0c3a      	lsrs	r2, r7, #16
   1b2b0:	fa1f fc87 	uxth.w	ip, r7
   1b2b4:	2101      	movs	r1, #1
   1b2b6:	fbb3 f8f2 	udiv	r8, r3, r2
   1b2ba:	0c25      	lsrs	r5, r4, #16
   1b2bc:	fb02 3318 	mls	r3, r2, r8, r3
   1b2c0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1b2c4:	fb0c f308 	mul.w	r3, ip, r8
   1b2c8:	42ab      	cmp	r3, r5
   1b2ca:	d907      	bls.n	1b2dc <__udivmoddi4+0x134>
   1b2cc:	19ed      	adds	r5, r5, r7
   1b2ce:	f108 30ff 	add.w	r0, r8, #4294967295
   1b2d2:	d202      	bcs.n	1b2da <__udivmoddi4+0x132>
   1b2d4:	42ab      	cmp	r3, r5
   1b2d6:	f200 80d1 	bhi.w	1b47c <__udivmoddi4+0x2d4>
   1b2da:	4680      	mov	r8, r0
   1b2dc:	1aed      	subs	r5, r5, r3
   1b2de:	b2a3      	uxth	r3, r4
   1b2e0:	fbb5 f0f2 	udiv	r0, r5, r2
   1b2e4:	fb02 5510 	mls	r5, r2, r0, r5
   1b2e8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   1b2ec:	fb0c fc00 	mul.w	ip, ip, r0
   1b2f0:	45a4      	cmp	ip, r4
   1b2f2:	d907      	bls.n	1b304 <__udivmoddi4+0x15c>
   1b2f4:	19e4      	adds	r4, r4, r7
   1b2f6:	f100 33ff 	add.w	r3, r0, #4294967295
   1b2fa:	d202      	bcs.n	1b302 <__udivmoddi4+0x15a>
   1b2fc:	45a4      	cmp	ip, r4
   1b2fe:	f200 80b8 	bhi.w	1b472 <__udivmoddi4+0x2ca>
   1b302:	4618      	mov	r0, r3
   1b304:	eba4 040c 	sub.w	r4, r4, ip
   1b308:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   1b30c:	e79d      	b.n	1b24a <__udivmoddi4+0xa2>
   1b30e:	4631      	mov	r1, r6
   1b310:	4630      	mov	r0, r6
   1b312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b316:	f1ce 0420 	rsb	r4, lr, #32
   1b31a:	fa05 f30e 	lsl.w	r3, r5, lr
   1b31e:	fa07 f70e 	lsl.w	r7, r7, lr
   1b322:	fa20 f804 	lsr.w	r8, r0, r4
   1b326:	0c3a      	lsrs	r2, r7, #16
   1b328:	fa25 f404 	lsr.w	r4, r5, r4
   1b32c:	ea48 0803 	orr.w	r8, r8, r3
   1b330:	fbb4 f1f2 	udiv	r1, r4, r2
   1b334:	ea4f 4518 	mov.w	r5, r8, lsr #16
   1b338:	fb02 4411 	mls	r4, r2, r1, r4
   1b33c:	fa1f fc87 	uxth.w	ip, r7
   1b340:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
   1b344:	fb01 f30c 	mul.w	r3, r1, ip
   1b348:	42ab      	cmp	r3, r5
   1b34a:	fa00 f40e 	lsl.w	r4, r0, lr
   1b34e:	d909      	bls.n	1b364 <__udivmoddi4+0x1bc>
   1b350:	19ed      	adds	r5, r5, r7
   1b352:	f101 30ff 	add.w	r0, r1, #4294967295
   1b356:	f080 808a 	bcs.w	1b46e <__udivmoddi4+0x2c6>
   1b35a:	42ab      	cmp	r3, r5
   1b35c:	f240 8087 	bls.w	1b46e <__udivmoddi4+0x2c6>
   1b360:	3902      	subs	r1, #2
   1b362:	443d      	add	r5, r7
   1b364:	1aeb      	subs	r3, r5, r3
   1b366:	fa1f f588 	uxth.w	r5, r8
   1b36a:	fbb3 f0f2 	udiv	r0, r3, r2
   1b36e:	fb02 3310 	mls	r3, r2, r0, r3
   1b372:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1b376:	fb00 f30c 	mul.w	r3, r0, ip
   1b37a:	42ab      	cmp	r3, r5
   1b37c:	d907      	bls.n	1b38e <__udivmoddi4+0x1e6>
   1b37e:	19ed      	adds	r5, r5, r7
   1b380:	f100 38ff 	add.w	r8, r0, #4294967295
   1b384:	d26f      	bcs.n	1b466 <__udivmoddi4+0x2be>
   1b386:	42ab      	cmp	r3, r5
   1b388:	d96d      	bls.n	1b466 <__udivmoddi4+0x2be>
   1b38a:	3802      	subs	r0, #2
   1b38c:	443d      	add	r5, r7
   1b38e:	1aeb      	subs	r3, r5, r3
   1b390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   1b394:	e78f      	b.n	1b2b6 <__udivmoddi4+0x10e>
   1b396:	f1c1 0720 	rsb	r7, r1, #32
   1b39a:	fa22 f807 	lsr.w	r8, r2, r7
   1b39e:	408b      	lsls	r3, r1
   1b3a0:	fa05 f401 	lsl.w	r4, r5, r1
   1b3a4:	ea48 0303 	orr.w	r3, r8, r3
   1b3a8:	fa20 fe07 	lsr.w	lr, r0, r7
   1b3ac:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   1b3b0:	40fd      	lsrs	r5, r7
   1b3b2:	ea4e 0e04 	orr.w	lr, lr, r4
   1b3b6:	fbb5 f9fc 	udiv	r9, r5, ip
   1b3ba:	ea4f 441e 	mov.w	r4, lr, lsr #16
   1b3be:	fb0c 5519 	mls	r5, ip, r9, r5
   1b3c2:	fa1f f883 	uxth.w	r8, r3
   1b3c6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   1b3ca:	fb09 f408 	mul.w	r4, r9, r8
   1b3ce:	42ac      	cmp	r4, r5
   1b3d0:	fa02 f201 	lsl.w	r2, r2, r1
   1b3d4:	fa00 fa01 	lsl.w	sl, r0, r1
   1b3d8:	d908      	bls.n	1b3ec <__udivmoddi4+0x244>
   1b3da:	18ed      	adds	r5, r5, r3
   1b3dc:	f109 30ff 	add.w	r0, r9, #4294967295
   1b3e0:	d243      	bcs.n	1b46a <__udivmoddi4+0x2c2>
   1b3e2:	42ac      	cmp	r4, r5
   1b3e4:	d941      	bls.n	1b46a <__udivmoddi4+0x2c2>
   1b3e6:	f1a9 0902 	sub.w	r9, r9, #2
   1b3ea:	441d      	add	r5, r3
   1b3ec:	1b2d      	subs	r5, r5, r4
   1b3ee:	fa1f fe8e 	uxth.w	lr, lr
   1b3f2:	fbb5 f0fc 	udiv	r0, r5, ip
   1b3f6:	fb0c 5510 	mls	r5, ip, r0, r5
   1b3fa:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
   1b3fe:	fb00 f808 	mul.w	r8, r0, r8
   1b402:	45a0      	cmp	r8, r4
   1b404:	d907      	bls.n	1b416 <__udivmoddi4+0x26e>
   1b406:	18e4      	adds	r4, r4, r3
   1b408:	f100 35ff 	add.w	r5, r0, #4294967295
   1b40c:	d229      	bcs.n	1b462 <__udivmoddi4+0x2ba>
   1b40e:	45a0      	cmp	r8, r4
   1b410:	d927      	bls.n	1b462 <__udivmoddi4+0x2ba>
   1b412:	3802      	subs	r0, #2
   1b414:	441c      	add	r4, r3
   1b416:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   1b41a:	eba4 0408 	sub.w	r4, r4, r8
   1b41e:	fba0 8902 	umull	r8, r9, r0, r2
   1b422:	454c      	cmp	r4, r9
   1b424:	46c6      	mov	lr, r8
   1b426:	464d      	mov	r5, r9
   1b428:	d315      	bcc.n	1b456 <__udivmoddi4+0x2ae>
   1b42a:	d012      	beq.n	1b452 <__udivmoddi4+0x2aa>
   1b42c:	b156      	cbz	r6, 1b444 <__udivmoddi4+0x29c>
   1b42e:	ebba 030e 	subs.w	r3, sl, lr
   1b432:	eb64 0405 	sbc.w	r4, r4, r5
   1b436:	fa04 f707 	lsl.w	r7, r4, r7
   1b43a:	40cb      	lsrs	r3, r1
   1b43c:	431f      	orrs	r7, r3
   1b43e:	40cc      	lsrs	r4, r1
   1b440:	6037      	str	r7, [r6, #0]
   1b442:	6074      	str	r4, [r6, #4]
   1b444:	2100      	movs	r1, #0
   1b446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b44a:	4618      	mov	r0, r3
   1b44c:	e6f8      	b.n	1b240 <__udivmoddi4+0x98>
   1b44e:	4690      	mov	r8, r2
   1b450:	e6e0      	b.n	1b214 <__udivmoddi4+0x6c>
   1b452:	45c2      	cmp	sl, r8
   1b454:	d2ea      	bcs.n	1b42c <__udivmoddi4+0x284>
   1b456:	ebb8 0e02 	subs.w	lr, r8, r2
   1b45a:	eb69 0503 	sbc.w	r5, r9, r3
   1b45e:	3801      	subs	r0, #1
   1b460:	e7e4      	b.n	1b42c <__udivmoddi4+0x284>
   1b462:	4628      	mov	r0, r5
   1b464:	e7d7      	b.n	1b416 <__udivmoddi4+0x26e>
   1b466:	4640      	mov	r0, r8
   1b468:	e791      	b.n	1b38e <__udivmoddi4+0x1e6>
   1b46a:	4681      	mov	r9, r0
   1b46c:	e7be      	b.n	1b3ec <__udivmoddi4+0x244>
   1b46e:	4601      	mov	r1, r0
   1b470:	e778      	b.n	1b364 <__udivmoddi4+0x1bc>
   1b472:	3802      	subs	r0, #2
   1b474:	443c      	add	r4, r7
   1b476:	e745      	b.n	1b304 <__udivmoddi4+0x15c>
   1b478:	4608      	mov	r0, r1
   1b47a:	e708      	b.n	1b28e <__udivmoddi4+0xe6>
   1b47c:	f1a8 0802 	sub.w	r8, r8, #2
   1b480:	443d      	add	r5, r7
   1b482:	e72b      	b.n	1b2dc <__udivmoddi4+0x134>

0001b484 <__aeabi_idiv0>:
   1b484:	4770      	bx	lr
   1b486:	bf00      	nop

0001b488 <__libc_init_array>:
   1b488:	b570      	push	{r4, r5, r6, lr}
   1b48a:	4e0d      	ldr	r6, [pc, #52]	; (1b4c0 <__libc_init_array+0x38>)
   1b48c:	4c0d      	ldr	r4, [pc, #52]	; (1b4c4 <__libc_init_array+0x3c>)
   1b48e:	1ba4      	subs	r4, r4, r6
   1b490:	10a4      	asrs	r4, r4, #2
   1b492:	2500      	movs	r5, #0
   1b494:	42a5      	cmp	r5, r4
   1b496:	d109      	bne.n	1b4ac <__libc_init_array+0x24>
   1b498:	4e0b      	ldr	r6, [pc, #44]	; (1b4c8 <__libc_init_array+0x40>)
   1b49a:	4c0c      	ldr	r4, [pc, #48]	; (1b4cc <__libc_init_array+0x44>)
   1b49c:	f00e fab4 	bl	29a08 <_init>
   1b4a0:	1ba4      	subs	r4, r4, r6
   1b4a2:	10a4      	asrs	r4, r4, #2
   1b4a4:	2500      	movs	r5, #0
   1b4a6:	42a5      	cmp	r5, r4
   1b4a8:	d105      	bne.n	1b4b6 <__libc_init_array+0x2e>
   1b4aa:	bd70      	pop	{r4, r5, r6, pc}
   1b4ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   1b4b0:	4798      	blx	r3
   1b4b2:	3501      	adds	r5, #1
   1b4b4:	e7ee      	b.n	1b494 <__libc_init_array+0xc>
   1b4b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   1b4ba:	4798      	blx	r3
   1b4bc:	3501      	adds	r5, #1
   1b4be:	e7f2      	b.n	1b4a6 <__libc_init_array+0x1e>
   1b4c0:	00029a14 	.word	0x00029a14
   1b4c4:	00029a14 	.word	0x00029a14
   1b4c8:	00029a14 	.word	0x00029a14
   1b4cc:	00029a18 	.word	0x00029a18

0001b4d0 <memcmp>:
   1b4d0:	b510      	push	{r4, lr}
   1b4d2:	3901      	subs	r1, #1
   1b4d4:	4402      	add	r2, r0
   1b4d6:	4290      	cmp	r0, r2
   1b4d8:	d101      	bne.n	1b4de <memcmp+0xe>
   1b4da:	2000      	movs	r0, #0
   1b4dc:	bd10      	pop	{r4, pc}
   1b4de:	f810 3b01 	ldrb.w	r3, [r0], #1
   1b4e2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1b4e6:	42a3      	cmp	r3, r4
   1b4e8:	d0f5      	beq.n	1b4d6 <memcmp+0x6>
   1b4ea:	1b18      	subs	r0, r3, r4
   1b4ec:	bd10      	pop	{r4, pc}

0001b4ee <strcmp>:
   1b4ee:	f810 2b01 	ldrb.w	r2, [r0], #1
   1b4f2:	f811 3b01 	ldrb.w	r3, [r1], #1
   1b4f6:	2a01      	cmp	r2, #1
   1b4f8:	bf28      	it	cs
   1b4fa:	429a      	cmpcs	r2, r3
   1b4fc:	d0f7      	beq.n	1b4ee <strcmp>
   1b4fe:	1ad0      	subs	r0, r2, r3
   1b500:	4770      	bx	lr

0001b502 <strcpy>:
   1b502:	4603      	mov	r3, r0
   1b504:	f811 2b01 	ldrb.w	r2, [r1], #1
   1b508:	f803 2b01 	strb.w	r2, [r3], #1
   1b50c:	2a00      	cmp	r2, #0
   1b50e:	d1f9      	bne.n	1b504 <strcpy+0x2>
   1b510:	4770      	bx	lr

0001b512 <strlen>:
   1b512:	4603      	mov	r3, r0
   1b514:	f813 2b01 	ldrb.w	r2, [r3], #1
   1b518:	2a00      	cmp	r2, #0
   1b51a:	d1fb      	bne.n	1b514 <strlen+0x2>
   1b51c:	1a18      	subs	r0, r3, r0
   1b51e:	3801      	subs	r0, #1
   1b520:	4770      	bx	lr
	...

0001b524 <hornet>:
   1b524:	e40a 1662 855b 0000 b530 0001               ..b.[...0...

0001b530 <hornet_map>:
   1b530:	060b ff07 882c ffac 1f25 ff87 5139 ff89     ....,...%...9Q..
   1b540:	c46d ffdc 8348 ffc8 5632 ffc6 434d ff46     m...H...2V..MCF.
   1b550:	0a16 ff48 a25c ffbc 2d38 ffc2 6c67 ff8b     ..H.\...8-..gl..
   1b560:	272d ff48 3622 ff89 6d41 ffc7 8576 ffc3     -'H."6..Am..v...
   1b570:	a49a ffc6 3520 ffa5 2621 ff69 5139 ffa9     .... 5..!&i.9Q..
   1b580:	e2a9 ffe8 242e ff26 6e40 ffe9 8843 ffe9     .....$&.@n..C...
   1b590:	a64b ffae 3848 ff87 c4c9 ffc5 6e33 ffa8     K...H8......3n..
   1b5a0:	646a ff69 5640 ffe4 342e ff69 0917 ff28     jdi.@V...4i...(.
   1b5b0:	554e ffa8 a996 ffe7 8383 ff83 101b ff67     NU............g.
   1b5c0:	8880 ff9e 6e60 ffc7 a65f ffe7 9647 ffe9     ....`n.._...G...
   1b5d0:	8779 ffe6 202e ffa9 4527 ff69 4335 ff8a     y.... ..'Ei.5C..
   1b5e0:	6f64 ffa7 3329 ff49 b5af ffc0 575f ff89     do..)3I....._W..
   1b5f0:	5543 ffc7 462d ffa9 9789 ff9f 603f ffab     CU..-F......?`..
   1b600:	2c1d ff88 7948 ffc9 151b ff27 9482 ffc6     .,..Hy....'.....
   1b610:	282f ff69 b669 ffe6 d484 ffdf 151b ff48     /(i.i.........H.
   1b620:	9364 ffc8 6e5b ffe6 4715 ffc1 c4bc ffe4     d...[n...G......
   1b630:	371e ff98 6343 ffc6 e4e8 ffe1 542a ff73     .7..Cc......*Ts.
   1b640:	3a3e ff67 532b ffb7 2b32 ff87 8a60 ffe6     >:g.+S..2+..`...
   1b650:	141e ff19 8448 ffd6 373f ff38 9964 ffea     ....H...?78.d...
   1b660:	9881 ffd6 5f47 ff87 2621 ff59 161a ff37     ....G_..!&Y...7.
   1b670:	5550 ffe6 6e77 ff88 a894 ffd8 7a73 ffa9     PU..wn......sz..
   1b680:	1922 ff57 a872 ffeb f3de fff6 a59e ffa3     ".W.r...........
   1b690:	3d49 ffe0 1c24 ff67 8c94 ffa2 6254 ffa8     I=..$.g.....Tb..
   1b6a0:	c483 ffec 6e48 ffd7 473f ffa9 3a38 ffa9     ....Hn..?G..8:..
   1b6b0:	d4d6 ffd5 7937 ffa7 6254 ffe7 5861 ff59     ....7y..Tb..aXY.
   1b6c0:	4648 ff88 b4a7 ffd6 999a ffb0 5036 ff9b     HF..........6P..
   1b6d0:	2620 ff78 2328 ff39 b5b4 ffb3 7a45 ffe7      &x.(#9.....Ez..
   1b6e0:	b596 ffe8 3331 ff59 7a46 ffd8 9aa2 ffc1     ....13Y.Fz......
   1b6f0:	0c16 ff16 887e ffb1 6263 ff88 7679 ff79     ....~...cb..yvy.
   1b700:	2930 ff76 3d43 ffc1 3c30 ff97 362d ff79     0)v.C=..0<..-6y.
   1b710:	474c ff67 4530 ff99 b560 ffbf 975f fff7     LGg.0E..`..._...
   1b720:	624b ffd7 875c ffc9 2d18 ff95 7959 ffe8     Kb..\....-..Yy..
   1b730:	4945 ffc0 968f ff94 9729 ff9c ddae ffeb     EI......).......
   1b740:	aa64 ffc0 9a78 ffe9 ead1 fff3 6232 ffc5     d...x.......2b..
   1b750:	343e ffd8 5a61 ff68 9842 ffda 643e fff1     >4..aZh.B...>d..
   1b760:	8678 ff92 b859 ffd8 7a62 ffc6 dcdd ffe4     x...Y...bz......
   1b770:	7c7c ff86 4a54 ff57 a94f ffda 8a7b ffd5     ||..TJW.O...{...
   1b780:	a9a4 ffaf a57b ffd9 cdcd ffd6 6b6f ff76     ....{.......okv.
   1b790:	d27c ffec b894 fff7 9931 ffa9 766c ff84     |.......1...lv..
   1b7a0:	cb82 ffe1 5019 ffd8 b57b fff5 6d49 ffb9     .....P..{...Im..
   1b7b0:	7947 ffbb 2b34 ffac 895e ffd7 8654 ffa4     Gy..4+..^...T...
   1b7c0:	2129 ff97 0c18 ff57 aaaf ffc3 e6bf ffed     )!....W.........
   1b7d0:	ac64 ffac 0815 ff37 a55c fff9 4432 ff7b     d.....7.\...2D{.
   1b7e0:	bcbf ffc1 9b7e fff6 575a ff78 6e5f ffb7     ....~...ZWx._n..
   1b7f0:	614b ff99 7a64 ffb9 1a22 ff77 4747 ff99     Ka..dz..".w.GG..
   1b800:	6266 ff98 8745 fff6 a996 fff6 121c ff77     fb..E.........w.
   1b810:	964c fff7 544a ffd8 c7b6 fffb 3a40 ff78     L...JT......@:x.
   1b820:	875f fffa a67a fff5 8b97 ffae 484a ff78     _...z.......JHx.
   1b830:	d7bb fff8 faf8 fffb c89a fff2 ebeb ffee     ................
   1b840:	6e49 fffb 624f ffb7 6459 fffb 7965 ffd9     In..Ob..Yd..ey..
   1b850:	3930 ff88 3747 ff97 3942 ff48 1825 ff29     09..G7..B9H.%.).
   1b860:	da9b ffe4 1725 ff48 9d99 ffd7 1825 ff38     ....%.H.....%.8.
   1b870:	5652 fff7 5249 ff99 bcb4 ffe5 373e ff5a     RV..IR......>7Z.
   1b880:	944c ff98 9566 ffd9 d2d4 fffc 584e ffb7     L...f.......NX..
   1b890:	595d ff97 343f ffc3 494b ffdc 786b ff95     ]Y..?4..KI..kx..
   1b8a0:	613b ffb9 2931 ff98 7a43 fff9 3c46 ffd0     ;a..1)..Cz..F<..
   1b8b0:	785b fffb 7b7b ff99 3c23 ffa6 9d8b ffc7     [x..{{..#<......
   1b8c0:	dbdf ffda 5350 ff88 9b96 ff9f b97a ffea     ....PS......z...
   1b8d0:	553a ffb7 2a2f ff57 aba7 ffd7 babb ffd9     :U../*W.........
   1b8e0:	2938 ff38 8b89 ff8e bb69 ffdb d7a1 ffec     8)8.....i.......
   1b8f0:	b8ab fff8 6f68 ff96 6c51 ffab 6f5d ffd8     ....ho..Ql..]o..
   1b900:	6e5b fffb 7077 ff99 6331 ffd5 4848 ffd1     [n..wp..1c..HH..
   1b910:	5a44 fffc cc73 ffdc 4b54 ff4b 8c7a ffc3     DZ..s...TKK.z...
   1b920:	ac9f ffc6 2c37 ff2b cbcf ffcb 6b6f ff6b     ....7,+.....okk.
   1b930:	7070 7070 7070 7070 7070 7070 4870 7070     pppppppppppppHpp
   1b940:	7070 4848 3648 3636 69cb e90c 442d 7744     ppHHH666.i..-DDw
   1b950:	12e9 7712 79c8 1331 3113 c876 79c8 1331     ...w.y1..1v..y1.
   1b960:	3131 e2e2 40e2 407e e2e2 40e2 31e2 25c5     11...@~@...@.1.%
   1b970:	85a2 30c7 b35e 0d76 4646 4646 40dd 4040     ...0^.v.FFFF.@@@
   1b980:	5e5f d113 2bb3 5f76 765f c876 40c8 9ca2     _^...+v__vv..@..
   1b990:	c156 e714 39bd bd04 3ae7 9c26 04a7 1404     V....9...:&.....
   1b9a0:	bce7 7be0 efef 8047 3d80 f3bc 4733 569c     ...{..G..=..3G.V
   1b9b0:	c1c1 5c56 9cee 9ce7 39f9 56ef f93a 9c86     ..V\.....9.V:...
   1b9c0:	c785 0e0e 55c7 9ccc e74b c156 a2c2 9f35     .....U..K.V...5.
   1b9d0:	9f9f 9f9f 9f9f 339f 2033 6767 7979 2067     .......33 ggyyg 
   1b9e0:	2020 dc13 6717 1e12 704e 7070 7070 7070       ...g..Nppppppp
   1b9f0:	7070 7070 7070 7048 7070 4848 4848 3636     ppppppHpppHHHH66
   1ba00:	0c36 694e 2d69 2b2b 1e2b 744e c877 3179     6.Nii-+++.Ntw.y1
   1ba10:	315e 7631 c8c8 3179 3113 e231 e2e2 3440     ^11v..y1.11...@4
   1ba20:	3140 e231 d731 9f9f 25c5 c728 5e30 76b3     @11.1....%(.0^.v
   1ba30:	340d 4634 7e46 4040 7640 13b3 b3d1 2b2b     .44FF~@@@v....++
   1ba40:	5f5f 4076 7676 6e40 869c 86c1 3904 f9e7     __v@vv@n.....9..
   1ba50:	3955 559c 869c ee9c 5c14 f4bc ef7b 4783     U9.U.....\..{..G
   1ba60:	5e80 bc62 20f3 0447 c186 c1c1 04f9 c283     .^b.. G.........
   1ba70:	f9e7 9c39 ccc1 a7f9 4b9c 3535 d535 a75c     ..9......K555.\.
   1ba80:	55ef 565c efc1 3cd5 7d7d 7d7d 0505 0505     .U\V...<}}}}....
   1ba90:	9fa0 c59f 3333 3333 3333 dc33 6e17 7713     ....3333333..n.w
   1baa0:	740d 7070 7070 7070 7070 7070 7070 3648     .tppppppppppppH6
   1bab0:	7048 4870 4848 cb36 cb36 4e4e 1e0c bb1e     HppHHH6.6.NN....
   1bac0:	2bb3 4ec8 7777 2bc8 7979 7979 c876 79c8     .+.Nww.+yyyyv..y
   1bad0:	1331 3113 e231 40e2 e240 1331 af33 13c5     1..11..@@.1.3...
   1bae0:	e831 28f3 e8f3 b35e 0d76 3434 4646 7e7e     1..(..^.v.44FF~~
   1baf0:	4040 b376 d113 2bb3 5f2b 7631 7640 4076     @@v....++_1v@vv@
   1bb00:	9c6e 86a7 3a56 e739 553a f955 e726 9c86     n...V:9.:UU.&...
   1bb10:	83ee b59c bce0 83ef 5e4b 7cb3 f3e0 6e13     ........K^.|...n
   1bb20:	86e7 c1c1 3ac1 a73a 55e7 5504 c19c 0483     .....::..U.U....
   1bb30:	e73a 67a2 a2a0 5c55 14a7 5c9e c156 2683     :..g..U\...\V..&
   1bb40:	3cd5 3c3c 3c3c 7d7d 0505 9f35 dc9f 9fdc     .<<<<<}}..5.....
   1bb50:	c5c5 3113 6e0e 3333 0d34 700d 7070 7070     ...1.n334..ppppp
   1bb60:	7070 7070 7070 4870 4836 7070 4848 3648     pppppppH6HppHHH6
   1bb70:	36cb 1e69 0c0c bb79 bbbb c82b 744e c877     .6i...y...+.Ntw.
   1bb80:	c8c8 2b2b c8c8 76c8 3179 1313 3131 3131     ..++...vy1..1111
   1bb90:	76e2 c531 c5af 7613 3176 25e8 41f3 b3e8     .v1....vv1.%.A..
   1bba0:	76b3 340d 3434 3434 4040 5f11 d1b3 b3d1     .v.44444@@._....
   1bbb0:	762b 3131 7676 7676 f340 c2e7 c1c0 04a7     +v11vvvv@.......
   1bbc0:	3a04 5555 2604 86e7 8d3a 9ccc e0b8 c2bc     .:UU.&..:.......
   1bbd0:	4bcc b35e e07c d13d 396e c1a7 c1c1 8383     .K^.|.=.n9......
   1bbe0:	39a7 0426 9c55 14c1 9ee7 9f4b 3564 9985     .9&.U.....K.d5..
   1bbf0:	a75c 9e14 86e7 83c1 d526 7d3c 3c3c 7d3c     \.......&.<}<<<}
   1bc00:	057d a005 9f9f 33dc c5dc 13dc 4579 0d79     }......3....yEy.
   1bc10:	680d 0d74 7070 7070 7070 7070 7070 7070     .ht.pppppppppppp
   1bc20:	4836 7070 4870 3648 cbcb cfcb 6912 2b1e     6HpppHH6.....i.+
   1bc30:	bbbb 2b6d 122b 7774 2bc8 762b c876 c8c8     ..m++.tw.++vv...
   1bc40:	7976 1331 3113 1331 3131 9f13 33af 4079     vy1..11.11...3y@
   1bc50:	7676 790d e8e8 5ee8 b3b3 0d76 3434 3434     vv.y...^..v.4444
   1bc60:	7e34 1140 b35f 1313 7967 3176 7631 7676     4~@._...gyv11vvv
   1bc70:	7676 390e 56ef c1c1 043a 39cc 0426 3926     vv.9.V..:..9&.&9
   1bc80:	ef86 cc8d b89c bce0 cc5c 5e4b 7c64 3dbc     ........\.K^d|.=
   1bc90:	0ed1 a755 c1c1 a7c1 a7cc 26e7 55ee 569c     ..U........&.U.V
   1bca0:	5583 3547 f1b0 2149 3a9c 1414 e79e c186     .UG5..I!.:......
   1bcb0:	2683 3cd5 7d7d 7d7d 057d 3505 a035 dc9f     .&.<}}}}}..55...
   1bcc0:	3333 1313 7979 0d76 3379 1274 7068 7070     33..yyv.y3t.hppp
   1bcd0:	7070 7070 7070 7070 4848 7070 4870 3648     ppppppppHHpppHH6
   1bce0:	cb36 cbcb 3636 c80c bb2b d344 bb79 7412     6...66..+.D.y..t
   1bcf0:	c877 792b 7979 7679 c8c8 3179 1313 1313     w.+yyyyv..y1....
   1bd00:	1331 af9f 13dc 7631 4040 e634 e22c 3131     1.....1v@@4.,.11
   1bd10:	b35e 7679 0d0d 3434 3434 4040 5f11 13b3     ^.yv..4444@@._..
   1bd20:	1313 76b3 315f 7679 76c8 4176 1439 c1c1     ...v_1yv.vvA9...
   1bd30:	ccc1 1404 4be7 26ee a755 8d83 9c3a f4b8     .....K.&U...:...
   1bd40:	e7bc 4bcc b35e bc7c 133d 260e c183 c1c1     ...K^.|.=..&....
   1bd50:	9c83 e7a7 e726 e755 efa7 0e4b f5dc a2f2     ....&.U...K.....
   1bd60:	cc5c 143a e714 ef55 83c1 d526 7d3c a27d     \.:...U...&.<}}.
   1bd70:	7d7d 0505 6e35 9f35 33dc 3113 7979 4076     }}..5n5..3.1yyv@
   1bd80:	3334 c87d 1268 7070 7070 7070 4870 7070     43}.h.pppppppHpp
   1bd90:	7070 7070 7070 4848 cb36 cbcb 36cb 7736     ppppppHH6....66w
   1bda0:	2b76 44bb 1ebb 1ee9 7774 2bc8 7979 3131     v+.D....tw.+yy11
   1bdb0:	c879 79c8 1331 e8e8 9fe8 c5b1 3131 3131     y..y1.......1111
   1bdc0:	0d40 647e 6fc1 5e40 5e5e b35e 0d76 3434     @.~d.o@^^^^.v.44
   1bdd0:	3434 4034 4040 b35f 1313 5e13 3176 3131     444@@@_....^v111
   1bde0:	7631 7676 3941 56ef c1c1 f914 5ca7 397b     1vvvA9.V.....\{9
   1bdf0:	2626 83a7 9c8d 273a e0f4 3a39 804b b9b3     &&....:'..9:K...
   1be00:	3dbc c513 8355 c1c1 83c1 869c 269c 55e7     .=..U........&.U
   1be10:	3ae7 c75c 33dc 33e6 5cd5 3a14 14cc bde7     .:\..3.3.\.:....
   1be20:	865c 26ef 3c3c 7d7d 7d7d 0505 1735 3549     \..&<<}}}}..5.I5
   1be30:	dc9f 1333 7979 0d0d 680d c513 680d 7074     ..3.yy...h...htp
   1be40:	7070 4848 4870 7036 3670 7048 7070 4870     ppHHpH6pp6HppppH
   1be50:	cb48 cbcb cbcb cbcb 7677 bb2b 6d44 771e     H.......wv+.Dm.w
   1be60:	1277 7777 792b 3179 7931 c8c8 1379 e813     w.ww+yy11y..y...
   1be70:	8ec5 d78e e231 31e2 40e2 0240 c1be 40a6     ....1..1.@@....@
   1be80:	5e5e 5e5e 76b3 340d 6834 0d34 4040 5f40     ^^^^.v.44h4.@@@_
   1be90:	135e 1313 5e5e 3131 3131 795e 4176 5c26     ^...^^1111^yvA&\
   1bea0:	c186 a7c1 a7f9 7b9c 4b55 8326 8da7 3a04     .......{UK&....:
   1beb0:	f44b bdf4 7b3a 5e80 e030 5b3d 99af c186     K...:{.^0.=[....
   1bec0:	c1c1 9c14 9c86 554b 5555 4be7 e89f 662c     ......KUUU.K..,f
   1bed0:	4b33 145c cc3a e714 9ebd efcc 7d85 7d3c     3K\.:........}<}
   1bee0:	7d7d 057d 6e05 6e17 9f35 33dc 7913 0d76     }}}..n.n5..3.yv.
   1bef0:	0d0d 7968 7413 7468 7070 7070 7070 4836     ..hy.thtpppppp6H
   1bf00:	7070 3636 7048 4870 3648 cbcb cbcb 69cb     pp66HppHH6.....i
   1bf10:	6936 bb1e d344 bb44 77c8 7777 2b77 792b     6i..D.D..wwww++y
   1bf20:	7979 c8c8 7979 e813 7d8e e825 3113 4040     yy..yy...}%..1@@
   1bf30:	e2e2 4040 fe68 60c1 3176 5e5e b35e 0d76     ..@@h..`v1^^^.v.
   1bf40:	680d bb72 7eb2 11e2 5e5f 1313 e813 315e     .hr..~.._^....^1
   1bf50:	5e31 5ee8 7931 aa87 869e c1c1 f9a7 3aa7     1^.^1y.........:
   1bf60:	267b 4b4b a783 ee26 4b3a f4f4 9cad 307b     {&KK..&.:K....{0
   1bf70:	e85e 17e0 10b1 83c2 c156 a7c1 869c 4b9c     ^.......V......K
   1bf80:	5555 477b dc0e 6613 dc24 5c4b 9ccc cc3a     UU{G...f$.K\..:.
   1bf90:	ade7 5cbd d55c 7d7d 7d7d 7d7d 3505 4917     ...\\.}}}}}}.5.I
   1bfa0:	9f35 dc9f 7913 7679 0d0d 340d 7468 6868     5....yyv...4hthh
   1bfb0:	7068 7070 7070 7070 3670 4870 4836 7048     hpppppppp6pH6HHp
   1bfc0:	4848 cbcb cbcb cbcb cbcb 69cb d32d 2b44     HH.........i-.D+
   1bfd0:	c8ab 770d 7777 2b2b 792b c8c8 7979 9f13     ...www+++y..yy..
   1bfe0:	8e8e d741 31e8 3440 e27e 40e2 e534 5642     ..A..1@4~..@4.BV
   1bff0:	d156 5e5f 5e5e 76b3 0d0d 2eb2 66c1 7e77     V._^^^.v.....fw~
   1c000:	31e2 135e 1313 5ee8 3131 1313 1313 6e31     .1^....^11....1n
   1c010:	e7aa c156 86c1 863a 7bcc 4b4b cc4b 39a7     ..V...:..{KKK..9
   1c020:	f939 e04b 7bc6 7be7 5e30 27dc fc85 5510     9.K..{.{0^.'...U
   1c030:	569c c1c1 f9a7 9c86 4b4b bcad e80e 67dc     .V......KK.....g
   1c040:	b4ac d50e 3a5c 9c9c e7cc 85ad 9e9e 7dd5     ....\:.........}
   1c050:	7d7d 7d7d 057d 4935 3535 dc9f 1333 7979     }}}}}.5I55..3.yy
   1c060:	4076 0d0d 340d 6868 7474 7070 7070 7070     v@...4hhttpppppp
   1c070:	7070 7048 cf48 4836 4870 cb48 cbcb cb15     ppHpH.6HpHH.....
   1c080:	cbcb 0ccb 2d0c 44d3 ab2b 7979 c840 2b77     .....-.D+.yy@.w+
   1c090:	792b 7931 7979 8edc 258e 4141 31d7 7e11     +y1yyy...%AA.1.~
   1c0a0:	7e34 1111 0240 c3e1 c1c3 4053 5e5e b35e     4~..@.....S@^^^.
   1c0b0:	0d76 340d 42bb 42c1 34f1 5e31 1313 1313     v..4.B.B.41^....
   1c0c0:	5e5e 1313 35e8 dcc5 4b27 569c c1c1 3a86     ^^...5..'K.V...:
   1c0d0:	cca7 7b7b 4b4b a73a 2639 4bee c6e0 e7bc     ..{{KK:.9&.K....
   1c0e0:	b97b 8ac5 5255 5b71 ee47 c156 a7c1 86f9     {...URq[G.V.....
   1c0f0:	4b3a bc7b e85d 1313 1ab4 0ed1 e7d5 9c3a     :K{.].........:.
   1c100:	cc9c ad5c 5585 a255 7d7d 7d7d 7d7d 0505     ..\..UU.}}}}}}..
   1c110:	3505 9f9f 13dc 7931 7979 7676 7676 7676     .5....1yyyvvvvvv
   1c120:	0d0d 7012 7070 4870 7070 7070 cf70 36cf     ...ppppHppppp..6
   1c130:	7036 3648 cbcb 69cb 6969 e9cb 77c8 6d44     6pH6...iii...wDm
   1c140:	d344 132b 795e c80d 792b dc13 1313 8eaf     D.+.^y..+y......
   1c150:	c525 2541 e841 11e2 347e 117e 4011 9468     %.A%A...~4~..@h.
   1c160:	c3c3 10c1 5e40 5e5e 76b3 460d b240 c172     ....@^^^.v.F@.r.
   1c170:	c1c1 c894 13e2 1313 5e5e 135e 39e8 dc39     ........^^^..99.
   1c180:	dcdc 9c47 c156 56c1 a7f9 27cc 7bb8 9c27     ..G.V..V...'.{'.
   1c190:	39a7 394b e07b bcc6 7b55 d5f3 3755 20b1     .9K9{...U{..U7. 
   1c1a0:	6ed1 8639 c1c1 f9a7 efa7 bc27 e87f e813     .n9.......'.....
   1c1b0:	6679 13ac 856e f9e7 5c5c 5c3a 85bd d5d5     yf..n...\\:\....
   1c1c0:	7dd5 7d7d 0505 0505 0505 3535 dc35 1313     .}}}......555...
   1c1d0:	7979 7979 7979 7979 7979 c879 7070 7070     yyyyyyyyyyy.pppp
   1c1e0:	7048 7070 3600 cbcf 3636 4848 cb36 cbcb     Hppp.6..66HH6...
   1c1f0:	6969 cb69 c877 bb77 b3bb abab 3113 0d76     iii.w.w......1v.
   1c200:	2bc8 1379 9fc5 9fb1 e813 41d7 e841 e245     .+y........AA.E.
   1c210:	7e11 7e34 1111 6840 c32e c1c3 c896 5e31     .~4~..@h......1^
   1c220:	b35e 0d76 460d 5940 c194 c1c1 d160 2079     ^.v..F@Y....`.y 
   1c230:	b3d1 5eb3 95e8 9f98 3113 4731 869c c1c1     ...^.....11G....
   1c240:	3a56 cca7 bc27 17b8 a79c b839 b8aa d0f4     V:..'.....9.....
   1c250:	9ebc 21b6 b195 205b d1d1 395d c1a7 a7c1     ...!..[ ..]9....
   1c260:	a7f9 273a dc3d 1313 79e8 be1a 47e8 e7ad     ..:'=....y...G..
   1c270:	e79c 3a5c bd5c a285 4bd5 7da2 057d a005     ..\:\....K.}}...
   1c280:	05a0 3505 0e6e 1313 7979 7976 7979 3179     ...5n...yyvyyyy1
   1c290:	315e 5e5e 7079 7070 4848 7070 4870 3600     ^1^^ypppHHpppH.6
   1c2a0:	36cf 48cb cb48 cbcb 6915 6969 69cb c8c8     .6.HH....iii.i..
   1c2b0:	2b1e b3b3 b32b 4076 7940 7979 8e13 138e     .+..+.v@@yyy....
   1c2c0:	7979 3131 4531 3131 e2e2 3440 117e 40e2     yy111E11..@4~..@
   1c2d0:	60c8 c3c3 c3c1 31d1 b313 7679 0d0d 4646     .`.....1..yv..FF
   1c2e0:	7734 c1e4 c1c1 53c3 1379 b3b3 9f5e 9fd5     4w.....Sy...^...
   1c2f0:	1313 3131 0447 c1a7 56c1 a73a 4bcc b8e0     ..11G....V:..K..
   1c300:	e7b5 55a7 bce0 e0b5 adf4 baba c54c b320     ...U........L. .
   1c310:	d1b3 5db3 8326 c1c1 0486 cc83 4127 1313     ...]&.......'A..
   1c320:	1313 e4d8 5db4 adad 9c9e e7e7 5c3a 85bd     .....]......:\..
   1c330:	d5a2 a285 7d7d a005 a0a0 a0a0 9f9f 1333     ....}}........3.
   1c340:	7913 0d2b 7976 3179 3131 795e 7979 7070     .y+.vyy111^yyypp
   1c350:	3648 7048 e969 480c 3670 cb36 4836 cbcb     H6Hpi..Hp66.6H..
   1c360:	15cb 6969 cb69 794e 6d77 abab 2b67 4031     ..iii.Nywm..g+1@
   1c370:	1376 1313 8e33 13af 7979 7979 7979 e231     v...3...yyyyyy1.
   1c380:	e2e2 4011 7e34 e211 e57e 8f42 c342 53c1     ...@4~..~.B.B..S
   1c390:	13e2 b379 0d76 460d 4034 72a4 56c1 c1c1     ..y.v..F4@.r.V..
   1c3a0:	71c1 b379 5eb3 13d7 135e 795e 6e76 a704     .qy..^..^.^yvn..
   1c3b0:	c1c1 f956 1414 e04b b8b5 14e7 6226 bce0     ..V...K.....&b..
   1c3c0:	adbc baba 7cad 5e80 b364 b3d1 265d c1cc     .....|.^d...]&..
   1c3d0:	86c1 cc04 273a 31e8 1331 2479 d860 ad47     ....:'.11.y$`.G.
   1c3e0:	9e85 e79c 9ce7 bd5c a285 85d5 7da2 7d7d     ......\......}}}
   1c3f0:	057d a0a0 a0a0 9f9f 3333 7913 0d0d 760d     }.......33.y...v
   1c400:	3179 5e79 795e 7079 4870 3636 7000 0c0c     y1y^^yyppH66.p..
   1c410:	70cb 3670 4836 cb48 cbcb 6969 6969 4ecb     .pp66HH...iiii.N
   1c420:	e9c8 bb1e 2b64 79b3 1376 c5d7 7d8e 13c5     ....d+.yv....}..
   1c430:	7679 7676 7979 7679 e240 11e2 347e 117e     yvvvyyyv@...~4~.
   1c440:	7ee2 c3e5 e4e4 c1c3 7610 7913 7679 0d0d     .~.......v.yyv..
   1c450:	3434 5f40 6602 c3c1 c1c1 37c1 b3c8 5e5e     44@_.f.....7..^^
   1c460:	5e5e 315e 7676 ee6e c114 56c1 ccf9 4b14     ^^^1vvn....V...K
   1c470:	b5e0 39b5 4b3a bc41 babd adf0 bcbd 80da     ...9:KA.........
   1c480:	645e 20b3 41b3 3a26 c156 0486 9c9c 1317     ^d. .A&:V.......
   1c490:	5e79 c813 6aac adc5 8585 9c39 e7e7 5c9c     y^...j....9....\
   1c4a0:	85bd 4bd5 d5ad 3c7d 3c3c 7d7d 7d7d a0a0     ...K..}<<<}}}}..
   1c4b0:	339f 3333 6733 0d2b 0d0d 7979 5e79 b3b3     .3333g+...yyy^..
   1c4c0:	7070 3636 0070 3600 360c 7048 7070 4848     pp66p..6.6HpppHH
   1c4d0:	cbcb 69cb 6969 cb69 cbcb abe9 642b 1364     ...iiii.....+dd.
   1c4e0:	3179 c513 7d0f 13c5 7913 7676 7976 7979     y1...}...yvvvyyy
   1c4f0:	4076 1140 7e40 7e34 e211 f17e 60c1 c360     v@@.@~4~..~..``.
   1c500:	96c1 1376 7979 0d76 3446 1140 e211 6077     ..v.yyv.F4@...w`
   1c510:	42c3 5656 6fc1 5e0d 5e5e 5e79 765e 5d40     .BVV.o.^^^y^^v@]
   1c520:	cc39 c1c1 f956 14cc e026 b5bc 9c26 8ed5     9...V...&...&...
   1c530:	d699 e0f0 7be0 dae0 5e80 b364 b320 2741     .....{...^d. .A'
   1c540:	86f9 86c1 0404 4904 7913 3113 e4e5 f35a     .......I.y.1..Z.
   1c550:	55bd 5585 e75c 9c9e bd9c d5bd b685 9595     .U.U\...........
   1c560:	2121 216c 5252 5252 e395 b13c 9fa0 1333     !!l!RRRR..<...3.
   1c570:	c879 0d34 7676 b379 36b3 7000 7048 7048     y.4.vvy..6.pHpHp
   1c580:	3670 3636 7070 4870 cb48 15cb 6969 6969     p666pppHH...iiii
   1c590:	69cb e90c 13bb 2064 7920 c513 8e0f d7c5     .i....d  y......
   1c5a0:	1313 7631 7676 7979 4079 1140 4011 347e     ..1vvvyyy@@..@~4
   1c5b0:	1134 02e2 c15a fe60 c1c3 d856 7931 7679     4...Z.`...V.1yyv
   1c5c0:	0d0d 4034 5f11 1131 c12f 8fe4 56c3 66c1     ..4@._1./....V.f
   1c5d0:	5e0d 765e 5e5e 0d76 3941 56cc 56c1 3af9     .^^v^^v.A9.V.V.:
   1c5e0:	26cc e0f4 bdb5 219e ba65 bc9e c6c6 e0bc     .&.....!e.......
   1c5f0:	75da 195e 2064 d7b3 0427 c186 8d86 ee04     .u^.d ..'.......
   1c600:	136e 1379 e179 f542 5547 8555 e755 9e9e     n.y.y.B.GUU.U...
   1c610:	3a3a 9999 f06c d2ba 9521 3c4c 3c3c 7d7d     ::..l...!.L<<<}}
   1c620:	7d7d 4c3c 5252 fbce 139f c879 340d 0d34     }}<LRR....y..44.
   1c630:	7976 4869 0000 4448 000c 3648 4836 7070     vyiH..HD..H66Hpp
   1c640:	4848 cbcb 6969 6969 6915 4e12 2be9 d164     HH..iiii.i.N.+d.
   1c650:	2041 af13 c50f 41d7 e8c5 3113 7679 7976     A .....A...1yvvy
   1c660:	7979 e276 11e2 7e11 3434 e211 6602 96c1     yyv....~44...f..
   1c670:	c31a c1c1 7671 7913 0d76 340d 5f40 315f     ....qv.yv..4@__1
   1c680:	3480 562e 6060 568f 6fc1 5e40 7676 7676     .4.V``.V.o@^vvvv
   1c690:	410d 3a55 c186 f956 ccf9 e026 7bbc ba99     .AU:..V...&..{..
   1c6a0:	0f65 7bbc c6e0 bcc6 dae0 5e75 6419 b320     e..{......u^.d .
   1c6b0:	27d7 a704 86c1 8d8d 0e26 7967 c813 6094     .'......&.gy...`
   1c6c0:	4b5b 5539 554b e75c 8399 c0a7 f0ba 2121     [K9UKU\.......!!
   1c6d0:	3cd5 7d7d a005 a0a0 9fa0 339f f233 4c7d     .<}}.......33.}L
   1c6e0:	5252 337d c876 74c8 7468 70c8 7048 4800     RR}3v..tht.pHp.H
   1c6f0:	e91e 7048 3636 7048 4870 cb48 cbcb 6969     ..Hp66HppHH...ii
   1c700:	0c69 6969 e969 b31e c5c5 b1c5 c593 d713     i.iii...........
   1c710:	4141 e8c5 3113 7676 7979 e279 e2e2 11e2     AA...1vvyyy.....
   1c720:	347e 1134 34e2 c194 1afe c142 acc1 1376     ~44..4....B...v.
   1c730:	7979 0dc8 4034 3111 5e31 64e2 8f42 6096     yy..4@.11^.dB..`
   1c740:	c1c3 71c1 7634 7676 0d76 55e8 a73a 56c1     ...q4vvvv..U:..V
   1c750:	04f9 55cc adbc baba afb6 e020 deb8 c6c6     ...U...... .....
   1c760:	f4bc 7550 195f 2064 e8b3 8d17 5683 8da7     ..Pu_.d .....V..
   1c770:	4b92 130e 3167 6064 c56a 39bd 5555 c29e     .K..g1d`j..9UU..
   1c780:	c0ba a7a7 b6c2 a285 7da2 3505 9f35 9f9f     .........}.55...
   1c790:	9f9f dcc5 3333 3333 b19f 523c f2e3 c82b     ....3333..<R..+.
   1c7a0:	7477 7459 0070 0000 cb00 3669 4870 7036     wtYtp.....i6pH6p
   1c7b0:	7070 4848 69cb e91e 6969 690c 0c69 791e     ppHH.i..ii.ii..y
   1c7c0:	c5d7 9325 c58e e8d7 c5d7 c541 e8d7 3131     ..%.......A...11
   1c7d0:	7979 7979 e276 e2e2 7e11 3434 e240 2e34     yyyyv....~44@.4.
   1c7e0:	fe56 601a c1c1 d1c3 7979 c879 340d e240     V..`....yyy..4@.
   1c7f0:	3131 5e5e e140 96c1 6060 c1c3 71c1 7634     11^^@...``...q4v
   1c800:	c876 e8c8 f926 c1a7 f956 cc04 f0c2 b6ba     v...&...V.......
   1c810:	7f7b 5e20 b8f4 c6de bcc6 d0f4 5f80 6419     {. ^........._.d
   1c820:	b3b3 1713 cc8d a756 278d 7d4b 1333 f576     ......V..'K}3.v.
   1c830:	e642 bd41 e739 c0f0 c2c0 9899 5c14 d5ad     B.A.9........\..
   1c840:	a2a2 3505 a035 dc9f 359f 9fa0 13dc 7913     ...55....5.....y
   1c850:	1367 c533 37a0 b152 0d2b 7477 0012 7070     g.3..7R.+.wt..pp
   1c860:	0c70 3670 4836 0000 7070 4870 6948 e977     p.p66H..pppHHiw.
   1c870:	0c0c 690c 0c69 77e9 2013 4c25 138e c5d7     ...ii..w. %L....
   1c880:	d7e8 c5c5 e8dc 41e8 7913 7979 7679 e240     .......A.yyyyv@.
   1c890:	e2e2 347e 4034 68e2 c3ac 1afe 56fe c1c1     ..~44@.h.....V..
   1c8a0:	7953 7979 0dc8 400d 31e2 e831 315e ac0d     Syyy...@.11.^1..
   1c8b0:	96c3 6060 c1c3 53c1 7646 c8c8 4b5e 14f9     ..``...SFv..^K..
   1c8c0:	5656 9c3a c0a7 bcb6 e0bc b362 62b3 b5b5     VV:.......b..b..
   1c8d0:	c6f4 f4bc f7d0 195f b319 13b3 926b 863a     ......_.....k.:.
   1c8e0:	8da7 2627 67a0 c813 e494 f3e1 ef9e bac0     ..'&.g..........
   1c8f0:	5c99 559e 149c 859c a2a2 05a2 a035 9f9f     .\.U........5...
   1c900:	9f9f 8e35 9fa0 13dc 7979 7976 3313 fbaf     ..5.....yyvy.3..
   1c910:	0f52 462b 4677 7036 4844 4836 3670 7070     R.+FwF6pDH6Hp6pp
   1c920:	7000 7070 6970 6977 1e69 69e9 e90c e94e     .ppppiwii..i..N.
   1c930:	672b 4caf c58e 1313 d7e8 d7d7 e8dc 0edc     +g.L............
   1c940:	79dc 7979 7979 4076 e2e2 40e2 7e0d e240     .yyyyyv@...@.~@.
   1c950:	ac68 fec3 1a1a c142 65c1 b376 c879 0d0d     h.....B..ev.y...
   1c960:	e240 3131 5e5e e231 c3e5 6060 6060 c156     @.11^^1...````V.
   1c970:	b4c1 2b46 31c8 044b 56cc a756 ccc0 e0e7     ..F+.1K..VV.....
   1c980:	def4 62e0 b3b3 b862 f4b5 e0c6 d0f4 5ff7     ...b..b........_
   1c990:	1919 6464 16b3 f992 a786 278d c54b 5e67     ..dd.......'K.g^
   1c9a0:	fe64 f1fe c0bd 5cc0 5555 55e7 0455 9c14     d......\UU.UU...
   1c9b0:	a24b 85d5 3549 9f9f 9f9f a09f 8e35 c5a0     K...I5......5...
   1c9c0:	7913 7979 c840 3367 0faf b152 462b e976     .yyy@.g3..R.+Fv.
   1c9d0:	cb48 0036 7036 7070 7070 3670 7036 e9e9     H.6.6pppppp66p..
   1c9e0:	6d15 2dbb e92d 4e0c 79c8 93af c525 31c5     .m.--..N.y..%..1
   1c9f0:	1379 1313 d7d7 dce8 31e8 7979 7979 7679     y........1yyyyyv
   1ca00:	e2e2 e2e2 7e40 e27e 34e2 c31a 1afe 601a     ....@~~..4.....`
   1ca10:	c1c1 d1c3 7979 0d0d 400d 31e2 5e31 315e     ....yy...@.11^^1
   1ca20:	0d5e c35a 6096 e460 c156 6442 c80d 4b5e     ^.Z..``.V.Bd..^K
   1ca30:	149c c156 e783 2604 f4f4 e0de b3b9 6bb3     ..V....&.......k
   1ca40:	de7b c6c6 f4e0 f7d0 19c9 b319 b364 925d     {...........d.].
   1ca50:	86f9 8d86 6b27 6713 f576 6ae4 ba71 e799     ....'k.gv..jq...
   1ca60:	4b55 3955 5555 14e7 853a 85a2 a2ad 0e35     UKU9UU..:.....5.
   1ca70:	9f35 dc9f 9f9f 358e c59f 7913 7931 0d0d     5......5...y1y..
   1ca80:	c579 fbb1 afea 2b2b cbcb 3600 3670 7070     y.....++...6p6pp
   1ca90:	7070 7070 3648 6948 0ccb 6d1e e90c 77e9     ppppH6Hi...m...w
   1caa0:	c82b 935b 33c5 13d7 7976 1313 d713 e8d7     +.[..3..vy......
   1cab0:	3113 7979 7979 7979 e276 e2e2 4031 3179     .1yyyyyyv...1@y1
   1cac0:	e2e2 fe77 fec3 1a1a c31a c1c1 40be 4079     ..w..........@y@
   1cad0:	340d e240 3131 5e80 315e bb5e 8f60 6096     .4@.11.^^1^.`..`
   1cae0:	e460 c156 7760 130d 83bd 5686 9c56 8d26     `.V.`w.....VV.&.
   1caf0:	f427 c4f4 b9e0 20b3 b517 c6de e0f8 c6f4     '...... ........
   1cb00:	19f7 64bb b3b3 f6b3 0427 86a7 17ee 3116     ...d....'......1
   1cb10:	79b3 6066 b166 4bad 3939 554b 55e7 e755     .yf`f..K99KU.UU.
   1cb20:	cc14 4b55 ad85 35a2 0535 dca0 dcdc 8e35     ..UK...55.....5.
   1cb30:	358e dc9f 1313 7613 3434 c579 4cb1 5b52     .5.....v44y..LR[
   1cb40:	00c8 7036 3636 7070 7070 7070 7048 4870     ..6p66ppppppHppH
   1cb50:	cb48 6de9 1e2d c877 79b3 0ff2 67d1 1320     H..m-.w..y...g .
   1cb60:	c879 5e76 1313 1313 3113 7979 7979 7913     y.v^.....1yyyy.y
   1cb70:	7979 31e2 3131 6edc e245 0de2 c3fe 1afe     yy.111.nE.......
   1cb80:	1a1a c1e4 8fc1 3179 0d76 7e34 3111 5e31     ......y1v.4~.11^
   1cb90:	5e5e 1331 5179 96c3 6060 8f60 c1c1 772e     ^^1.yQ..```....w
   1cba0:	ba37 ccef 5686 27f9 2692 f4f4 e0c4 b3b9     7....V.'.&......
   1cbb0:	3020 dec4 d0c6 f4e0 dac6 bb19 13b3 b3b3      0..............
   1cbc0:	2741 8604 0486 6217 f213 acb4 5afe bc41     A'.....b.....ZA.
   1cbd0:	394b 4b39 e755 5555 cc39 55cc 5555 47ad     K99KU.UU9..UUU.G
   1cbe0:	8e35 8e7d dc9f 35dc 8e8e 3535 31c5 2031     5.}....5..55.11 
   1cbf0:	7613 6834 c579 ea0f b3fb 6970 0036 7070     .v4hy.....pi6.pp
   1cc00:	7070 7070 36cf 7070 3648 0c69 1e0c 7777     pppp.6ppH6i...ww
   1cc10:	792b 0faf 7967 7967 2b79 0dc8 7976 7979     +y..gygyy+..vyyy
   1cc20:	7979 7979 1379 13dc 7931 e279 3131 b80e     yyyyy...1yy.11..
   1cc30:	4041 e2e2 fe0d fec3 1a1a fe1a c1c1 53c1     A@.............S
   1cc40:	7640 3440 4034 31e2 5e5e 3131 e85e acbb     @v@44@.1^^11^...
   1cc50:	968f 6060 4260 c1c1 2ce6 3985 a73a f956     ..```B...,.9:.V.
   1cc60:	2627 e027 c4f4 62e0 b3b3 50b3 c6f4 f4d0     '&'....b...P....
   1cc70:	f4f4 1950 b3bb d7d7 30d1 0417 86a7 1704     ..P......0......
   1cc80:	0f3d 24e3 1a60 41f5 4bbc 2626 4b4b 5539     =..$`..A.K&&KK9U
   1cc90:	3955 14cc 9e39 8555 3547 7d05 3505 dcdc     U9..9.U.G5.}.5..
   1cca0:	359f 8e35 c535 7979 c513 7613 7468 afb3     .55.5.yy...vht..
   1ccb0:	ea37 70f2 3636 7000 7070 7070 cf48 70cb     7..p66.pppppH..p
   1ccc0:	4870 cb69 1e0c 771e c82b 0ff2 2b67 7979     pHi....w+...g+yy
   1ccd0:	1313 c879 0d77 c80d 7979 7979 6779 e8dc     ..y.w...yyyyyg..
   1cce0:	3113 7931 3131 b835 7687 e240 68e2 c3ac     .11y115..v@..h..
   1ccf0:	1afe fe1a 421a c1c1 4096 4076 340d e240     .....B...@v@.4@.
   1cd00:	5e31 3131 5e31 b313 c30b 6096 e460 c3e4     1^111^.....``...
   1cd10:	c1c1 5dae f939 56a7 27f9 2727 f4e0 e0de     ...]9..V.'''....
   1cd20:	b362 1919 f480 50c6 f4f4 d0c6 19c9 6e13     b......P.......n
   1cd30:	d10e 17e8 a704 f986 b6aa 5b52 6066 d8ac     ..........R[f`..
   1cd40:	475d 264b 4b26 554b 5555 cc39 04a7 e704     ]GK&&KKUUU9.....
   1cd50:	a285 0505 057d dc35 9fdc 8e8e 9f8e 7913     ....}.5........y
   1cd60:	1376 c5c5 7613 c868 b120 fb52 0070 7070     v....vh. .R.p.pp
   1cd70:	7070 7000 3836 7048 4870 e948 e90c 7777     pp.p68HppHH...ww
   1cd80:	ab2b fb5b c803 2b2b 2079 7920 77c8 0d0d     +.[...++y  y.w..
   1cd90:	7976 3131 7979 1367 3131 3131 e279 6ee8     vy11yyg.1111y..n
   1cda0:	3145 4040 e2e2 2e34 fec3 fe1a 1afe c1fe     E1@@..4.........
   1cdb0:	c1c1 7e2c 0d40 3434 e240 315e 3131 135e     ..,~@.44@.^111^.
   1cdc0:	2b13 8f2e 6096 e460 c360 42c1 26d8 a7f9     .+...``.`..B.&..
   1cdd0:	f956 2717 e027 bce0 c6bc 19b3 7619 c6d0     V..''........v..
   1cde0:	f450 c6f4 5ec6 5db3 e817 13d1 8d6b 86a7     P....^.]....k...
   1cdf0:	ba83 dc85 fe2b 6afe 6e67 4b4b 2626 4b4b     ....+..jgnKK&&KK
   1ce00:	5555 3955 a7cc f99c 8504 05a2 7d7d 3505     UUU9........}}.5
   1ce10:	dcdc 8e9f a08e 13dc c879 d779 c5c5 0d13     ........y.y.....
   1ce20:	2b74 375b 00e3 0000 0070 cf48 3636 690c     t+[7....p.H.66.i
   1ce30:	7070 3636 e90c 77e9 2b2b 37b0 c8d1 77c8     pp66...w++.7...w
   1ce40:	79c8 2013 c879 0d77 790d 1331 7931 7979     .y. y.w..y1.1yyy
   1ce50:	1379 3113 7931 31e2 3131 4031 e240 34e2     y..11y.1111@@..4
   1ce60:	c32e 1afe 1afe 1afe c142 96c1 400d 3440     ........B....@@4
   1ce70:	4034 3111 3131 5e31 2013 7213 9642 6060     4@.1111^. .rB.``
   1ce80:	e460 56e4 fec1 9861 56a7 173a 2717 b8de     `..V..a..V:..'..
   1ce90:	e0b8 5ec6 bbbb 7519 f7d0 f4c6 c6c6 41f7     ...^...u.......A
   1cea0:	7c6b d1d7 4920 a7ee 1456 164b b4e2 1ae4     k|.. I..V.K.....
   1ceb0:	3166 4b6e 264b 4b26 554b 5555 3a39 3a86     f1nKK&&KKUUU9:.:
   1cec0:	04f9 054b 7d7d 057d dc0e c5e8 a09f 9fc5     ..K.}}}.........
   1ced0:	6705 76c8 c513 d7c5 7479 7977 102c 0000     .g.v....ytwy,...
   1cee0:	7000 0070 1e0c 3636 7070 cb70 cb0c e90c     .pp...66ppp.....
   1cef0:	2b79 37d8 2b5b 0d2b 2b77 1379 7913 0dc8     y+.7[++.w+y..y..
   1cf00:	0d0d 7979 3131 7979 e831 1313 3131 e279     ..yy11yy1...11y.
   1cf10:	31e2 4545 7e76 e211 6a34 fec3 1a1a 1a1a     .1EEv~..4j......
   1cf20:	fe1a c156 2cc1 4034 3434 117e e25f 315f     ..V..,4@44~._._1
   1cf30:	c513 4caf 2eb4 fee4 6060 60e4 c1e4 57c1     ...L....``.`...W
   1cf40:	8609 3a86 1727 b827 deaa c6e0 bbb3 bbbb     ...:'.'.........
   1cf50:	75c9 6280 c6f4 f8c6 c4de d7b9 f220 9c92     .u.b........ ...
   1cf60:	5686 173a 768b 60be e11a 6e31 4b4b 2626     .V:..v.`..1nKK&&
   1cf70:	4b26 5555 3955 863a f93a d5e7 7d05 7d7d     &KUUU9:.:....}}}
   1cf80:	9f05 e8e8 dce8 c5c5 3c8d c879 31c8 5e13     .........<y..1.^
   1cf90:	7679 7474 d119 00e3 7000 cf00 70e9 1e6d     yvtt.....p...pm.
   1cfa0:	7070 7070 e936 0c69 642b 37d8 2b5b 0d2b     pppp6.i.+d.7[++.
   1cfb0:	c8c8 79c8 13b3 c879 0d0d c80d 7979 7979     ...y..y.....yyyy
   1cfc0:	0e13 130e 3131 7931 e2e2 e831 4031 1140     ....111y..1.1@@.
   1cfd0:	34e2 c394 1afe 1a1a fe1a 8f1a c1c1 46e4     .4.............F
   1cfe0:	4040 3434 5f40 5e31 afe8 4c37 130f c372     @@44@_1^..7L..r.
   1cff0:	601a 6060 60e4 c142 81c1 56cc 273a b8b5     .```.`B....V:'..
   1d000:	e0aa e0f4 5ec6 bbbb 7474 5ec9 c6b9 c6c6     .....^..tt.^....
   1d010:	27c4 50b5 5bd7 9c84 a79c f956 8b27 ac76     .'.P.[....V.'.v.
   1d020:	acfe 45b4 4b5d 4b4b 2626 554b 5555 9c55     ...E]KKK&&KUUUU.
   1d030:	3aa7 55e7 7d49 7da2 357d e89f 33dc 1313     .:.UI}.}}5...3..
   1d040:	8d05 7933 0dc8 7676 740d 4674 4674 6f64     ..3y..vv.ttFtFdo
   1d050:	7070 0070 6900 cf1e 700c 4870 3670 69e9     ppp..i...ppHp6.i
   1d060:	b3ab 37d1 2bb1 772b 760d 79c8 2079 7920     ...7.++w.v.yy  y
   1d070:	0dc8 0d0d 79c8 7979 9f79 1335 3131 7931     .....yyyy.5.111y
   1d080:	e276 31e2 4031 7e7e 5f11 9434 fec3 1a1a     v..11@~~._4.....
   1d090:	fe1a fefe c3fe c1c1 0224 3440 4034 e831     ........$.@44@1.
   1d0a0:	4caf 0f4c 13c5 775e 60fe 60fe e460 60e4     .LL...^w.`.``..`
   1d0b0:	c1c3 5742 3a56 b527 b5b8 f4f4 c6f4 bb5e     ..BWV:'.......^.
   1d0c0:	74bb 7438 3019 c6f8 dec6 b592 d7b9 043c     .t8t.0........<.
   1d0d0:	9295 5614 27f9 b41d ace4 d12e 5ddc 4b4b     ...V.'.......]KK
   1d0e0:	264b 4b26 5555 5555 a79c 559c 05a2 7d7d     K&&KUUUU...U..}}
   1d0f0:	7d7d dc8e dce8 6733 a067 79f2 c879 400d     }}....3gg..yy..@
   1d100:	0d76 6868 7474 d846 7010 0070 3648 4800     v.hhttF..pp.H6.H
   1d110:	36e9 7070 0c48 cf36 2b0c 37d1 1393 77b3     .6ppH.6..+.7...w
   1d120:	7777 c80d 1379 c5d7 0d31 0d0d 760d 3179     ww..y...1....vy1
   1d130:	1379 13dc 3179 7979 7679 e240 e2e2 0d40     y...y1yyyv@...@.
   1d140:	117e 34e2 c3e6 1afe 1a1a 1a1a 1afe c160     ~..4..........`.
   1d150:	c3c1 7ebb 4040 c531 4c93 c58e 2033 b313     ...~@@1..L..3 ..
   1d160:	e10d acc3 6060 e460 e4e4 c1c1 94fe 1714     ....```.........
   1d170:	17de c6de c4c6 5ec6 74bb 3874 bb38 f880     .......^.tt88...
   1d180:	c6c6 8dde 7c27 65fb 4171 148a f956 b927     ....'|.eqA..V.'.
   1d190:	e4be 94ac 4131 4b5d 4b4b 2626 4b4b 5555     ....1A]KKK&&KKUU
   1d1a0:	0455 9ccc 494b 7d49 057d 0e05 13e8 13dc     U...KII}}.......
   1d1b0:	6767 7967 7979 c8c8 1331 7613 b246 7459     gggyyy..1..vF.Yt
   1d1c0:	fcb4 7070 3600 44bb 7070 7036 7070 69e9     ..pp.6.Dpp6ppp.i
   1d1d0:	ab0c 0f64 5b4c 2b20 7777 7777 79c8 4113     ..d.L[ +wwww.y.A
   1d1e0:	130e 0d76 0d0d 3179 7931 7979 7979 7979     ..v...y11yyyyyyy
   1d1f0:	7931 4076 e2e2 40e2 7e7e 5f11 5a02 60c3     1yv@...@~~._.Z.`
   1d200:	1aac 1a1a fe1a 1afe c142 94c1 31b2 0f33     ........B....13.
   1d210:	b137 13e8 1313 1313 76b3 e4ab fe1a 6060     7........v....``
   1d220:	e460 4260 c1c1 7ae6 de27 de17 c6c6 f4c4     `.`B...z'.......
   1d230:	bb80 7474 3838 5ebb c6d0 dec6 268d 5221     ..tt88.^.....&!R
   1d240:	d1af 8ae8 56cc 273a ac30 ac60 31be 5ddc     .....V:'0.`..1.]
   1d250:	4b4b 264b 4b26 554b 5555 f9e7 d5e7 49a2     KKK&&KKUUU.....I
   1d260:	057d 8e35 13dc 1313 7913 6767 7967 c879     }.5......ygggyy.
   1d270:	c579 afaf 76d7 5968 b474 70fc 7070 7000     y....vhYt..ppp.p
   1d280:	38e9 7036 4870 3670 1e69 af2b c5ce b320     .86ppHp6i.+... .
   1d290:	77c8 7777 c877 1379 c50e 7613 0d0d 7940     .wwww.y....v..@y
   1d2a0:	3131 7979 7979 7976 3179 7679 e240 e2e2     11yyyyvyy1yv@...
   1d2b0:	7e40 117e 7ee2 c3e1 ac60 1a1a 1a1a 1a1a     @~~..~..`.......
   1d2c0:	fe1a c156 72c1 37c5 13af 3131 5e31 1313     ..V..r.7..111^..
   1d2d0:	b35e 465e e494 60ac 6060 e4e4 c360 c1c1     ^.^F...```..`...
   1d2e0:	178c 17de c6de c4c6 b9f4 7419 3874 7438     ...........tt88t
   1d2f0:	1d5e c6c6 eede b6c2 5e41 5eb3 cc49 3a86     ^.......A^.^I..:
   1d300:	c527 ace4 2c1a dc45 4b5d 4b4b 2626 4b4b     '....,E.]KKK&&KK
   1d310:	554b e755 55e7 49a2 0549 3535 dc35 1313     KUU..U.II.555...
   1d320:	7913 7979 7979 7979 5ec8 7d25 af8e 4613     .yyyyyyy.^%}...F
   1d330:	5959 fcd8 0070 3600 69bb cf36 7070 e936     YY..p..6.i6.pp6.
   1d340:	e936 d1ab afce b320 7777 7777 c877 7976     6..... .wwwww.vy
   1d350:	d713 13d7 0d76 400d 3179 7979 7976 76c8     ....v..@y1yyvy.v
   1d360:	7979 7979 4076 e2e2 40e2 7e7e e240 727e     yyyyv@...@~~@.~r
   1d370:	6042 1aac 1a1a 1a1a 1a1a e41a c1c1 e542     B`............B.
   1d380:	5f31 11e2 5f11 135e 5e13 b3b3 b440 2e42     1_..._^..^..@.B.
   1d390:	60fe 6060 60e4 c160 60c1 deb0 de17 c6c6     .```.``..`......
   1d3a0:	f4c4 1950 7474 3838 b374 c6f7 adf4 9ec2     ..P.tt88t.......
   1d3b0:	8016 b35e 495e 863a 053a 42be ac6a e8d8     ..^.^I:.:..Bj...
   1d3c0:	5d41 4b4b 264b 4b26 4b4b 554b 5555 a24b     A]KKK&&KKKKUUUK.
   1d3d0:	0549 3535 9f8e 13e8 3113 7979 7979 7979     I.55.....1yyyyyy
   1d3e0:	c82b a233 8e7d 138e 5946 d859 70a6 7070     +.3.}...FYY..ppp
   1d3f0:	6900 361e 7070 7070 0ccd ab1e b137 1320     .i.6pppp....7. .
   1d400:	77c8 77c8 c877 b3b3 7979 1313 c831 0d0d     .w.ww...yy..1...
   1d410:	790d 7979 7979 7676 7976 7979 7979 e240     .yyyyyvvvyyyyy@.
   1d420:	e2e2 7e40 117e 7ee2 42e5 1ae4 1aac 1a1a     ..@~~..~.B......
   1d430:	1a1a fe1a e41a c1c1 342e 4011 1111 5e5f     .........4.@.._^
   1d440:	135e 79b3 3179 6019 ac1a 6060 6060 60e4     ^..yy1.`..````.`
   1d450:	c142 32c1 b506 c6de c6c6 50f4 7476 3874     B..2.......Pvtt8
   1d460:	7438 80b3 adc6 9e99 8b27 5ef7 5eb3 f96e     8t......'..^.^n.
   1d470:	3aa7 a6a0 6ae4 132e 0edc 4b5d 4b4b 2626     .:...j....]KKK&&
   1d480:	4b4b 4b4b 5555 4785 0549 3535 3535 139f     KKKKUU.GI.5555..
   1d490:	1313 7679 7976 7979 7679 0579 8ed5 af8e     ..yvvyyyyvy.....
   1d4a0:	685e 7454 a6b4 e970 44bb 7036 7036 cf70     ^hTt..p..D6p6pp.
   1d4b0:	4836 bb6d fb53 d164 772b c8ab c8c8 b379     6Hm.S.d.+w....y.
   1d4c0:	2b79 5e79 795e 77c8 0d0d 2b76 7979 7979     y+y^^y.w..v+yyyy
   1d4d0:	7679 7976 7979 4079 e2e2 40e2 7e7e e211     yvvyyyy@...@~~..
   1d4e0:	ab11 e460 ac1a acac 1a1a 1a1a 1a1a e41a     ..`.............
   1d4f0:	c1c1 025a 115f 5f11 b331 b313 7679 465e     ..Z._.._1...yv^F
   1d500:	e466 fe2e 6060 6060 6060 c156 4dc1 b5b5     f...``````V..M..
   1d510:	c6c6 f4c6 5ec6 74bb 3838 64bb add7 7b99     .....^.t88.d...{
   1d520:	2626 f78b b35e 5d5e a704 a3f9 1a60 666a     &&..^.^]....`.jf
   1d530:	4131 0e0e 4b47 264b 4b26 4b4b 554b 4b55     1A..GKK&&KKKKUUK
   1d540:	49a2 3535 350e dc35 1313 7931 7676 7979     .I55.55...1yvvyy
   1d550:	7979 3376 8ed5 258e 7413 5959 f574 0065     yyv3...%.tYYt.e.
   1d560:	0c48 bbbb 70cf 7070 0ccf 2a0c 104d ab4d     H....ppp...*M.M.
   1d570:	77ab c8ab c8c8 7979 c879 2bc8 7979 c82b     .w....yyy..+yy+.
   1d580:	7777 c80d 2bc8 7979 7979 7676 7979 7679     ww...+yyyyvvyyyv
   1d590:	4040 e2e2 7e40 117e 115f ac77 fe42 acac     @@..@~~._.w.B...
   1d5a0:	acac acac 1a1a 1a1a 42fe c1c1 a4f5 5fe2     .........B....._
   1d5b0:	315f 135e 79b3 7976 7240 6ae4 601a 6060     _1^..yvy@r.j.```
   1d5c0:	6060 60fe c1c1 33ac c6b5 c6c6 f4f4 bb80     ``.`...3........
   1d5d0:	3874 7738 e3d8 bcbd 27c4 8b26 5e80 5eb3     t88w.....'&..^.^
   1d5e0:	ee5d 8da7 4271 1a6a 4553 0e41 470e 4b4b     ]...qBj.SEA..GKK
   1d5f0:	2626 4b4b 4b4b 8555 4947 3535 0e0e 0e0e     &&KKKKU.GI55....
   1d600:	13dc 7931 7676 2b79 2b2b 2b2b c520 8e9f     ..1yvvy+++++ ...
   1d610:	0dc5 7459 3859 65f5 0048 7000 e969 7036     ..YtY8.eH..pi.6p
   1d620:	7070 d336 37ab ab53 77ab 2bab 2b79 c8c8     pp6..7S..w.+y+..
   1d630:	0dc8 7777 792b c82b 0dc8 0d77 c8c8 7979     ..ww+y+...w...yy
   1d640:	7979 7679 7979 7979 4076 4040 40e2 7e7e     yyyvyyyyv@@@.@~~
   1d650:	5f11 34e2 4294 acfe acac acac acac 1aac     ._.4.B..........
   1d660:	1a1a 42fe c1c1 7ee5 5f5f 5e31 b35e 7679     ...B...~__1^^.yv
   1d670:	5f76 febb 2eac 6096 6060 6060 42fe c1c1     v_.....`````.B..
   1d680:	168c c6f4 f4c6 b9c4 7419 3838 e3e5 6b26     .........t88..&k
   1d690:	c4c4 2727 808b b35e f65e 148d a609 9442     ..''..^.^.....B.
   1d6a0:	5b1a 0ee8 350e 4b47 264b 2626 4b4b 554b     .[...5GKK&&&KKKU
   1d6b0:	4785 3535 0e0e 9f0e dc9f 31e8 7679 7979     .G55.......1yvyy
   1d6c0:	c879 c8c8 c8c8 13c8 79dc 7474 a959 f538     y........yttY.8.
   1d6d0:	446f 0c44 0070 4870 3670 0c69 2cab 03e3     oDD.p.pHp6i..,..
   1d6e0:	77ab 2b77 3333 c82b 770d 7777 2bab 7979     .ww+33+..www.+yy
   1d6f0:	c82b 0d0d c80d 7976 7976 7979 7976 7979     +.....vyvyyyvyyy
   1d700:	7679 4040 e240 7e40 117e 11e2 e134 fe42     yv@@@.@~~...4.B.
   1d710:	acac acac acac acac 1a1a 1a1a c3fe 42c1     ...............B
   1d720:	1164 5e31 5e5e 79b3 7676 465e 1a57 1a94     d.1^^^.yvv^FW...
   1d730:	6060 6060 fe60 c160 42c1 f433 c6c6 c4f4     `````.`..B3.....
   1d740:	c98b 3874 102f 35d5 c61d 27c4 8b27 b35e     ..t8/..5...''.^.
   1d750:	5eb3 92f6 71cc fefe ac57 8713 0e0e 4935     .^...q..W.....5I
   1d760:	4b4b 2626 4b26 554b 5555 0e4b 410e dcdc     KK&&&KKUUUK..A..
   1d770:	dcdc 33dc 7613 7976 7913 c82b c8c8 7777     ...3.vvy.y+...ww
   1d780:	c80d 1274 5459 bb3b bebe 0c36 e944 7036     ..t.YT;...6.D.6p
   1d790:	7070 6970 d144 2cce 77ab 2b1e 05a0 c867     pppiD..,.w.+..g.
   1d7a0:	77c8 1e12 ab77 792b 2b79 0dc8 0d0d 79c8     .w..w.+yy+.....y
   1d7b0:	7979 7976 7676 7976 7979 4076 4040 40e2     yyvyvvvyyyv@@@.@
   1d7c0:	7e7e e211 40e2 4272 ac60 acac acac acac     ~~...@rB`.......
   1d7d0:	acac 1aac ac1a c3fe 8fc1 11b3 5e5e b35e     ............^^^.
   1d7e0:	7679 5e76 e146 941a feac 6060 fefe fefe     yvv^F.....``....
   1d7f0:	c142 5ac1 c6b9 c6c6 c4c4 745e a6b4 c553     B..Z......^t..S.
   1d800:	8013 c4c6 2717 5e8b b3b3 f65e f992 42be     .....'.^..^....B
   1d810:	94ac 13a6 0e41 3535 476e 264b 2626 4b4b     ....A.55nGK&&&KK
   1d820:	554b 4b55 e80e 45e8 1345 1313 3113 7676     KUUK...EE....1vv
   1d830:	1379 2b79 c8c8 77c8 7474 5459 0854 543b     y.y+...wttYTT.;T
   1d840:	6f64 00b4 7000 3636 7070 7070 bf69 cefb     do...p66ppppi...
   1d850:	abd1 771e 0533 ab67 77ab 1277 771e 2b77     ...w3.g..ww..ww+
   1d860:	7979 c879 0d0d 760d 7979 7979 7676 7676     yyy....vyyyyvvvv
   1d870:	7979 7679 4040 e2e2 7e40 e27e 3131 72d7     yyyv@@..@~~.11.r
   1d880:	e460 acac acac acac acac acac 1aac ac1a     `...............
   1d890:	c3fe 8fc1 e2b3 5e5e 79b3 7676 405e fe2f     ......^^.yvv^@/.
   1d8a0:	6a94 fe1a fefe fefe fefe c1c1 5ee4 c6c6     .j...........^..
   1d8b0:	dec6 80de a6b4 bbb4 1964 c65e 17c4 8b27     ........d.^...'.
   1d8c0:	b35e 5eb3 2630 a684 9442 66ac 0e45 350e     ^..^0&..B..fE..5
   1d8d0:	6e35 4b47 2626 4b26 554b 5555 6e4b 45e8     5nGK&&&KKUUUKn.E
   1d8e0:	1345 1331 1313 7679 7976 3113 2b79 77c8     E.1...yvvy.1y+.w
   1d8f0:	7474 7459 5974 1259 b459 646f 7036 0000     ttYttYY.Y.od6p..
   1d900:	7000 7070 4469 d2bf 64b1 1e1e 67ab ab2b     .pppiD...d...g+.
   1d910:	77ab 7777 1e12 c877 792b 7979 4076 0d0d     .www..w.+yyyv@..
   1d920:	7976 7979 7679 7676 7676 7979 4076 e240     vyyyyvvvvvyyv@@.
   1d930:	4011 407e c531 4c8e 6a4d ace4 ac2e acac     .@~@1..LMj......
   1d940:	acac acac acac acac acac c3fe 8fc1 5fb3     ..............._
   1d950:	b313 7679 5e5f bf76 941a ac94 1afe fefe     ..yv_^v.........
   1d960:	fefe 421a c1c1 50e1 c6c6 b5de a647 38b4     ...B...P....G..8
   1d970:	1938 c919 c650 2717 5e16 5eb3 305e a326     8...P..'.^.^^0&.
   1d980:	60fe 1ae6 8753 350e 3535 a249 264b 2626     .`..S..555I.K&&&
   1d990:	4b4b 5555 4b55 dc0e 45e8 3131 7979 7931     KKUUUK...E11yy1y
   1d9a0:	7676 1379 1313 2b79 7777 c812 1279 7459     vvy...y+ww..y.Yt
   1d9b0:	7412 bebe e9bb cbe9 7070 7070 6970 53d3     .t......pppppi.S
   1d9c0:	d1ea 1eab 771e 7777 abab 7777 1277 7777     .....www..www.ww
   1d9d0:	2bc8 1379 3113 4076 c80d 7979 7979 7679     .+y..1v@..yyyyyv
   1d9e0:	76c8 7976 7679 4040 e211 76e2 7d13 8e4c     .vvyyv@@...v.}L.
   1d9f0:	0de8 42e6 2eac 2e2e ac2e acac acac acac     ...B............
   1da00:	acac acac c3fe 42c1 76d8 795e 5f76 5f5e     .......B.v^yv_^_
   1da10:	2ebb 9494 1aac fe1a fefe fefe 56fe fec1     .............V..
   1da20:	c65e dec6 ba9e 745b 3838 1919 f719 17c6     ^.....[t88......
   1da30:	1627 b35e 5e5e 1730 e471 e6ac af1a 0e0e     '.^.^^0.q.......
   1da40:	3535 4905 4749 264b 4b26 854b 5555 3547     55.IIGK&&KK.UUG5
   1da50:	0e0e 45dc 3113 7979 c879 76c8 7979 1313     ...E.1yyy..vyy..
   1da60:	c879 7474 7479 5474 3ba9 1019 38f5 6970     y.ttyttT.;...8pi
   1da70:	36cd 3670 0ce9 44e9 2c10 1eab 7712 7777     .6p6...D.,...www
   1da80:	7777 7777 7777 771e c877 792b d713 31e8     wwwwww.ww.+y...1
   1da90:	4076 79c8 7979 7979 c876 7676 7679 4076     v@.yyyyyv.vvyvv@
   1daa0:	31e2 d713 3c8e dc8e e231 0b7e 1a42 2e2e     .1...<..1.~.B...
   1dab0:	2e2e 2e2e 2e2e acac acac acac acac c31a     ................
   1dac0:	c3c1 762c 76b3 5e5f 745f 9494 6a57 1a1a     ..,v.v_^_t..Wj..
   1dad0:	1a1a 1a1a 1afe c1e4 53c1 c4d0 c0ad 5e7b     .........S....{^
   1dae0:	3874 1938 1919 f85f 27b5 5e16 5e5e 415e     t88..._..'.^^^^A
   1daf0:	945d 9442 9457 6e0e 350e 0535 4949 4b47     ].B.W..n.55.IIGK
   1db00:	2626 4b4b 554b a24b 356e 0e35 dc0e 1313     &&KKKUK.n55.....
   1db10:	7979 0dc8 c80d 1379 3113 74c8 7474 1274     yy....y..1.tttt.
   1db20:	5454 b438 6410 0054 7000 0070 e969 d30c     TT8..dT..pp.i...
   1db30:	10f5 44bf 771e 7777 7777 c877 c82b 7777     ...D.wwwwww.+.ww
   1db40:	7777 2bc8 1379 d7c5 795e 7676 7979 7979     ww.+y...^yvvyyyy
   1db50:	7679 76c8 7676 7976 3131 0fdc b14c 3113     yv.vvvvy11..L..1
   1db60:	4031 7e40 febf 2efe 2e2e 2e2e 2e2e 2e2e     1@@~............
   1db70:	acac acac acac acac e4ac c1c1 0d53 5e79     ............S.y^
   1db80:	5f5e 6a46 576a 1a6a 1a1a 1a1a 1a1a 1a1a     ^_FjjWj.........
   1db90:	c1c1 80fe baad 2755 7480 3838 1919 c919     ......U'.t88....
   1dba0:	deda 1627 5e5e 5e80 4141 60fe 94e6 5d66     ..'.^^.^AA.`..f]
   1dbb0:	0e6e 3535 4905 4949 264b 4b26 4b4b a24b     n.55.IIIK&&KKKK.
   1dbc0:	356e 3535 0e35 dc0e 13e8 7679 c80d c8c8     n5555.....yv....
   1dbd0:	792b c879 2bc8 7412 7454 6476 be66 a974     +yy..+.tTtvdf.t.
   1dbe0:	0000 7000 0070 6d36 10bf 44e1 1ee9 c877     ...pp.6m...D..w.
   1dbf0:	c8c8 c8c8 1379 c8b3 7777 c877 7979 d713     ....y...www.yy..
   1dc00:	13c5 7679 7976 7979 7979 7676 7976 3179     ..yvvyyyyyvvvyy1
   1dc10:	3313 4c8e 330f 40e2 e240 4040 7440 606a     .3.L.3.@@.@@@tj`
   1dc20:	2e2e 2e2e 2e2e 2e2e 6a2e 2e6a 6aac acac     .........jj..j..
   1dc30:	2eac 96ac c1c3 0d37 5e31 4631 6a94 6a57     ......7.1^1F.jWj
   1dc40:	1a1a 1a1a 1a1a 1a1a e4ac c1c1 b671 27bc     ............q..'
   1dc50:	b926 3846 4638 1919 5f46 27c4 80c4 8080     &.F88F..F_.'....
   1dc60:	06e8 e4b1 321a 716a 0e6b 3535 4905 4949     .....2jqk.55.III
   1dc70:	a26e 4b4b 474b 4947 0e0e 0e0e 0e0e 0e0e     n.KKKGGI........
   1dc80:	9f0e 13e8 c879 c80d c877 c8c8 7974 74c8     ....y...w...ty.t
   1dc90:	5959 b3c8 a6b4 54b4 69a9 7000 3636 cf70     YY.....T.i.p66p.
   1dca0:	e144 bf6f 4ed3 2b77 b3b3 b379 13b3 13d7     D.o..Nw+..y.....
   1dcb0:	77c8 0d77 79c8 b3b3 c5e8 79e8 7640 7979     .ww..y.....y@vyy
   1dcc0:	7979 7679 7676 1379 8e33 7d4c 31c5 7ee2     yyyvvvy.3.L}.1.~
   1dcd0:	407e 40e2 4040 ed34 2ee4 a694 2e2e 2e2e     ~@.@@@4.........
   1dce0:	6a2e 6a6a 6a6a 6a6a 2e6a 2e2e ac2e c18f     .jjjjjjjj.......
   1dcf0:	b365 5f11 1a19 5794 ac94 1aac 1a1a 1a1a     e.._...W........
   1dd00:	1a1a c11a 1ac1 c441 928a c916 3838 c946     ......A.....88F.
   1dd10:	4619 1dc9 c4de 8030 e830 6645 2e42 ac32     .F....0.0.EfB.2.
   1dd20:	17b1 350e 0535 4905 3549 496e 4949 0e6e     ...55..II5nIIIn.
   1dd30:	e841 4545 4545 e8e8 dcdc dc0e 13e8 c879     A.EEEE........y.
   1dd40:	c8c8 77c8 7777 7767 592b c874 bed1 bb6f     ...wwwgw+Yt...o.
   1dd50:	4f08 700c 0ccb 70cb 780c e16f 2dd3 2b1e     .O.p...p.xo..-.+
   1dd60:	b3b3 d1b3 d1d1 d720 c813 0d77 76c8 135e     ...... ...w..v^.
   1dd70:	1313 e8d7 4079 7976 7979 7976 7676 1379     ....y@vyyyvyvvy.
   1dd80:	37af c5fb 3113 40e2 0d0d e240 4040 7e40     .7...1.@..@.@@@~
   1dd90:	6072 94ac 9494 a6a6 2e2e 6a6a 6a6a 6a6a     r`........jjjjjj
   1dda0:	6a6a 6a6a 2e2e 2e2e c196 538f 5146 326a     jjjj.......SFQj2
   1ddb0:	9457 acac acac acac 1aac 6a1a c142 20c3     W..........jB.. 
   1ddc0:	27c4 6b92 74c9 4674 19c9 1919 1d5f 7cc4     .'.k.ttF...._..|
   1ddd0:	3030 1330 e41a 6694 35a6 0e17 0535 0505     000....f.5..5...
   1dde0:	4949 3535 3535 0e35 dc41 45e8 3131 3131     II55555.A..E1111
   1ddf0:	3131 e813 e8e8 3113 7679 c82b 77c8 2b74     11.....1yv+..wt+
   1de00:	c8c8 7459 7119 b4eb a954 364f 6970 6de9     ..Yt.q..T.O6pi.m
   1de10:	0c36 a6ae 2dae 770c b32b d1b3 1320 d720     6....-.w+... . .
   1de20:	13d7 77c8 c8c8 13c8 e8d7 e813 76e8 7640     ...w.........v@v
   1de30:	7979 7679 7979 3379 37fb 13b1 e231 4040     yyyvyyy3.7..1.@@
   1de40:	0d40 400d 40e2 4040 ab40 1a1a 9494 9494     @..@.@@@@.......
   1de50:	94a6 9494 9494 6a94 6a6a 946a 2e6a 2e2e     .......jjjj.j...
   1de60:	2e2e e4ac fec3 94fe 9457 6a6a acac acac     ........W.jj....
   1de70:	acac acac 1a6a c1c1 1d5a 8d27 5f17 7474     ....j...Z.'.._tt
   1de80:	c946 46c9 7619 b95f b962 30b9 e45b 32fe     F..F.v_.b..0[..2
   1de90:	9494 496e 350e 0505 4905 3549 0e35 0e0e     ..nI.5...II55...
   1dea0:	410e dcdc 45e8 3131 3131 3179 3131 1313     .A...E1111y111..
   1deb0:	3131 1313 7979 74c8 1238 5459 d174 10ea     11..yy.t8.YTt...
   1dec0:	a9bb a94f 7070 0ccf 69e9 240c 2feb 69e9     ..O.pp...i.$./.i
   1ded0:	c81e b32b 13d1 2013 c520 7713 7977 c82b     ..+....  ..wwy+.
   1dee0:	d7b3 d7c5 e8d7 4076 7976 7679 6779 b113     ......v@vyyvyg..
   1def0:	0f4c 1333 4079 e240 40e2 7e0d e240 4040     L.3.y@@..@.~@.@@
   1df00:	4040 e634 9460 9494 9494 9494 9494 9494     @@4.`...........
   1df10:	9494 9494 9494 a694 2e2e a62e ac6a 6060     ............j.``
   1df20:	6060 acfe 6a6a 6a6a 6a6a 6a6a 6a6a 426a     ``..jjjjjjjjjjjB
   1df30:	fec1 b5e8 1792 745e 4674 c9c9 1946 7676     ......^ttF..F.vv
   1df40:	7c80 7c7c be06 ace4 6a5a 1771 0e6e 0535     .|||....Zjq.n.5.
   1df50:	0505 4905 0e35 0e0e 0e0e 0edc 410e e8dc     ...I5........A..
   1df60:	3145 7631 7979 7979 3179 dc13 0edc 2b87     E11vyyyyy1.....+
   1df70:	c874 5974 5954 eb2c cdb4 3ba9 703b 3670     t.tYTY,....;;pp6
   1df80:	0ccf d3cb d210 6db4 0ccf c81e b32b 13d1     .......m....+...
   1df90:	2020 13d7 77c8 7979 792b c513 4141 79e8       ...wyy+y..AA.y
   1dfa0:	7640 7979 1379 37af c5fb 3113 7679 4076     @vyyy..7...1yvv@
   1dfb0:	e2e2 7e40 407e 40e2 4040 7e40 600b 942e     ..@~~@.@@@@~.`..
   1dfc0:	9494 9494 9494 9494 9494 9494 9494 9494     ................
   1dfd0:	a694 a6a6 94a6 9494 ac6a 2eac 6a6a 6a6a     ........j...jjjj
   1dfe0:	6a6a 6a6a 6a6a 946a c31a 5bc1 926b 7517     jjjjjjj....[k..u
   1dff0:	7446 c946 19c9 7619 5e76 4130 e87c 602e     FtF....vv^0A|..`
   1e000:	2494 b1ac 3517 3535 0505 3505 3505 0e0e     .$...555...5.5..
   1e010:	870e dc87 0e0e 4141 4141 e8e8 3131 7679     ......AAAA..11yv
   1e020:	7676 1376 6edc dcb5 7779 7479 5459 a6bb     vvv..n..ywytYT..
   1e030:	386f 3ba9 3b3b 7070 cf36 69cb a678 2f6f     o8.;;;pp6..ix.o/
   1e040:	69e9 e90c c877 b32b d1d1 2020 c813 7977     .i..w.+...  ..wy
   1e050:	79b3 1379 41d7 d741 4031 3176 3313 4cfb     .yy..AA.1@v1.3.L
   1e060:	13b1 7979 7979 4076 4040 40e2 407e e2e2     ..yyyyv@@@.@~@..
   1e070:	4040 4040 ab40 ac1a 9494 9494 9494 9494     @@@@@...........
   1e080:	9494 9494 9494 9494 9494 9494 9494 9494     ................
   1e090:	9494 9494 6a94 6a6a 6a6a 6a6a 6a6a 6a6a     .....jjjjjjjjjjj
   1e0a0:	6a94 c1e4 4166 1726 1980 4646 c9c9 c9c9     .j..fA&...FF....
   1e0b0:	7676 5e5e 7c06 96c5 66fe 2e32 178e 0e0e     vv^^.|...f2.....
   1e0c0:	0535 3505 3535 0e35 870e dcdc 0edc 0e0e     5..5555.........
   1e0d0:	4141 350e 0e35 dc9f 7913 7676 e879 6eb5     AA.55....yvvy..n
   1e0e0:	7933 c877 5412 7138 2feb 543b 3bcd 0c3b     3yw..T8q./;T.;;.
   1e0f0:	cb0c 0070 892d 51a6 0cd3 0c69 1ee9 2bc8     ..p.-..Q..i....+
   1e100:	b32b 13b3 2020 0d79 b3c8 7979 e8b3 41d7     +...  y...yy...A
   1e110:	5e30 6779 b133 0f4c 1333 7679 7979 7679     0^yg3.L.3.yvyyyv
   1e120:	4040 e240 4040 e240 e2e2 4040 e240 e634     @@@.@@@...@@@.4.
   1e130:	94fe 9494 9494 9494 5757 5757 5757 9457     ........WWWWWWW.
   1e140:	9494 9494 9494 9494 9494 9494 9494 9494     ................
   1e150:	9494 9494 6a6a 6a6a 6a6a fe57 96c1 2633     ....jjjjjjW...3&
   1e160:	f727 c9c9 c946 c9c9 7676 3176 e831 7180     '...F...vvv11..q
   1e170:	ace4 5732 0ea6 0e6e 350e 0505 3535 3535     ..2W..n..5..5555
   1e180:	870e dcdc dcdc 0e0e 4141 6b5d a26e a2a2     ........AA]kn...
   1e190:	35a2 13dc 7979 6b5d 7913 742b 5438 b459     .5..yy]k.y+t8TY.
   1e1a0:	e3eb 3bb3 cd54 3b3b 0c44 4870 ec48 a60b     ...;T.;;D.pHH...
   1e1b0:	ecae cf36 0c69 771e 2bc8 2b2b 13b3 b320     ..6.i..w.+++.. .
   1e1c0:	0d0d 7979 7979 e813 4130 20c5 37af af37     ..yyyy..0A. .77.
   1e1d0:	7913 7676 7676 7979 4076 40e2 40e2 e211     .yvvvvyyv@.@.@..
   1e1e0:	3131 40e2 4040 4040 600b 9494 9494 9494     11.@@@@@.`......
   1e1f0:	5757 5757 5757 5757 5757 9494 9494 9494     WWWWWWWWWW......
   1e200:	9494 9494 9494 9494 9494 9457 9494 9494     ..........W.....
   1e210:	9494 5794 c3ac f1c3 2727 5fb9 c95f c9c9     ...W....''.__...
   1e220:	76c9 3176 e85e 31e8 e4a6 2494 6f6a 0e0e     .vv1^..1...$jo..
   1e230:	0e0e 3535 3535 3535 0e0e dcdc dcdc 0edc     ..555555........
   1e240:	410e de0e 496b d5a2 8585 a2d5 e835 5de8     .A..kI......5..]
   1e250:	2b79 c8c8 7474 bb59 6510 79f2 0854 0808     y+..ttY..e.yT...
   1e260:	6908 7070 7036 e12d aea6 0cd3 cbcf 1e69     .ipp6p-.......i.
   1e270:	7777 c8c8 b3c8 13b3 c8b3 c877 7979 7979     ww........w.yyyy
   1e280:	c513 8e25 4c93 20b1 7967 7679 7676 7976     ..%..L. gyyvvvvy
   1e290:	7679 4040 e240 e240 31e2 e231 4040 e240     yv@@@.@..11.@@@.
   1e2a0:	64e2 ac1a 9457 5794 5757 5757 5757 5757     .d..W..WWWWWWWWW
   1e2b0:	5757 5757 9494 9494 9494 9494 5757 5757     WWWW........WWWW
   1e2c0:	5757 5757 5757 5757 9457 9494 9457 c1e4     WWWWWWWWW...W...
   1e2d0:	355a b94b 7575 5f5f c95f 5e76 35dc 31dc     Z5K.uu___.v^.5.1
   1e2e0:	965b 5796 2e24 0e71 0e0e 350e 3535 3535     [..W$.q....55555
   1e2f0:	3535 dc0e dcdc dcdc 0e0e 6b41 0e6b a249     55........Akk.I.
   1e300:	85d5 8585 a2d5 dc35 7913 c876 c877 77c8     ......5..yv.w..w
   1e310:	eb53 b371 a946 0808 0808 36cb 7048 2d70     S.q.F......6Hpp-
   1e320:	a651 d872 0c64 69cb 1ee9 bb77 c8c8 b32b     Q.r.d..i..w...+.
   1e330:	79b3 77c8 c877 7979 1379 93c5 85b6 13c5     .y.ww.yyy.......
   1e340:	7979 7979 4076 7640 7979 4076 4040 e240     yyyyv@@vyyv@@@@.
   1e350:	e2e2 3131 4040 e240 31e2 e640 57fe 5757     ..11@@@..1@..WWW
   1e360:	5757 5757 57e6 5757 5757 5757 5757 5757     WWWW.WWWWWWWWWWW
   1e370:	5757 5757 5757 5757 5757 5757 5757 5757     WWWWWWWWWWWWWWWW
   1e380:	5757 5757 5757 9657 acc1 4b1b 75b9 80b9     WWWWWWW....K.u..
   1e390:	5e5e 5e5f d533 e87d 7131 1ae4 3232 afac     ^^_^3.}.1q..22..
   1e3a0:	0e35 0e0e 350e 3535 3535 0e35 dcdc dcdc     5....555555.....
   1e3b0:	41dc 4141 0e5d 490e d5a2 8585 7dd5 9f8e     .AAA]..I.....}..
   1e3c0:	c5dc 5e13 c879 7720 65e5 d1e3 5976 5412     ...^y. w.e..vY.T
   1e3d0:	0808 693b 0069 4848 9069 ae65 d1e5 69e9     ..;ii.HHi.e....i
   1e3e0:	0c69 1e1e bb77 c8c8 2b2b c8c8 7777 2bc8     i...w...++..ww.+
   1e3f0:	20b3 9333 8521 1325 7979 7979 7679 4040     . 3.!.%.yyyyyv@@
   1e400:	7976 7679 4040 4040 e2e2 31e2 4031 4040     vyyv@@@@...11@@@
   1e410:	31e2 e231 fed8 5794 5757 57e6 e6e6 e6e6     .11....WWW.W....
   1e420:	e6e6 e6e6 e6e6 57e6 e6e6 57e6 5757 5757     .......W...WWWWW
   1e430:	5757 5757 5757 5757 5757 5757 5757 5757     WWWWWWWWWWWWWWWW
   1e440:	c31a b08f 7c4b 6275 8062 5e5e 3c13 dc92     ....K|ubb.^^.<..
   1e450:	31e8 e4a6 242e a666 35c5 0e0e 0e0e 3535     .1...$f..5....55
   1e460:	3535 3535 dc0e dcdc e8e8 4141 4187 0e0e     5555......AA.A..
   1e470:	a249 d5d5 a2d5 dc25 dcd7 9f9f 5e33 13c8     I.....%.....3^..
   1e480:	6f64 b4eb 77b3 7954 0819 3b08 6969 690c     do...wTy...;ii.i
   1e490:	6948 fcf5 0cae 0c44 6969 0c0c 771e bb77     Hi....D.ii...ww.
   1e4a0:	c8ab c82b 7777 c877 d1b3 4caf 2537 41f3     ..+.www....L7%.A
   1e4b0:	795e 7679 7676 4076 7676 7979 4076 4040     ^yyvvvv@vvyyv@@@
   1e4c0:	e240 4040 e2e2 4040 e240 3131 c831 ac2e     @.@@..@@@.111...
   1e4d0:	57e6 e6e6 e6e6 e6e6 e6e6 e6e6 e6e6 e6e6     .W..............
   1e4e0:	e6e6 e6e6 e6e6 e6e6 e6e6 e6e6 57e6 5757     .............WWW
   1e4f0:	5757 5757 5757 5757 6ae6 c142 4924 753d     WWWWWWWW.jB.$I=u
   1e500:	e062 5e7c dc31 dc05 3113 fed1 9496 9424     b.|^1....1....$.
   1e510:	dc66 0e35 0e0e 350e 3535 3535 0e35 dcdc     f.5....555555...
   1e520:	e8dc 41e8 dcdc 41dc 490e a2a2 a2a2 dc8e     ...A...A.I......
   1e530:	1313 9fdc c59f c813 7120 53eb b377 3838     ........ q.Sw.88
   1e540:	c8b3 0808 cb3b 6944 3648 4d69 7152 692d     ....;.DiH6iMRq-i
   1e550:	6969 44e9 e96d 771e 7777 c8ab 77c8 c877     ii.Dm..www...ww.
   1e560:	d179 4cb1 20b1 3013 e841 7979 7679 7676     y..L. .0A.yyyvvv
   1e570:	7640 7976 7679 e2e2 4040 4040 e240 40e2     @vvyyv..@@@@@..@
   1e580:	4040 31e2 3131 e140 57fe e6e6 e6e6 e6e6     @@.111@..W......
   1e590:	e6e6 e6e6 e6e6 3281 3232 e632 e6e6 e6e6     .......2222.....
   1e5a0:	e6e6 e6e6 e6e6 e6e6 e6e6 e6e6 5757 5757     ............WWWW
   1e5b0:	e657 e457 10c1 3d35 6280 7f7f e830 3113     W.W...5=.b..0..1
   1e5c0:	3131 5331 fee4 2432 7194 0e87 0e0e 0e0e     111S..2$.q......
   1e5d0:	3535 3535 3535 dc0e e8dc e8e8 dcdc e8e8     555555..........
   1e5e0:	0e41 a249 a2a2 9f35 13e8 dc13 9f9f 13c5     A.I...5.........
   1e5f0:	b1c8 10eb 59bb 5474 b377 0838 a554 6969     .....YtTw.8.T.ii
   1e600:	69cb 0ccb 521b ca66 0c0c e969 bfbf 6d6d     .i...Rf...i...mm
   1e610:	bb77 7777 c877 c877 5b2b 4cfb 67af 7679     w.www.w.+[.L.gyv
   1e620:	7ce8 3130 7979 7676 4076 7676 7979 4076     .|01yyvvv@vvyyv@
   1e630:	e2e2 4040 4040 e2e2 40e2 e240 31e2 e231     ..@@@@...@@..11.
   1e640:	ac2b 322e e6e6 e6e6 e6e6 e6e6 81e6 5781     +..2...........W
   1e650:	5757 e657 3232 3232 e632 e6e6 e6e6 e6e6     WWW.22222.......
   1e660:	e6e6 e6e6 e6e6 57e6 5757 e6e6 c196 35ac     .......WWW.....5
   1e670:	807f 7f62 6e6b 31e8 3131 e231 6094 32ac     ..b.kn.1111..`.2
   1e680:	6a24 0eb1 0e0e 0e0e 350e 3535 3535 0e35     $j.......555555.
   1e690:	dcdc 45e8 dce8 e8dc dce8 490e a2a2 9f35     ...E.......I..5.
   1e6a0:	33dc 1313 9fdc 209f d179 6565 775b a554     .3..... y.ee[wT.
   1e6b0:	7754 5979 a508 0054 e90c cb36 1b43 a671     TwyY..T...6.C.q.
   1e6c0:	0c78 690c 440c 44e5 77e9 77bb 7777 2b77     x..i.D.D.w.wwww+
   1e6d0:	2c64 0fe3 d15b c879 5e0d 4141 7913 7679     d,..[.y..^AA.yyv
   1e6e0:	7676 7640 7979 7679 e240 e2e2 7e40 4040     vv@vyyyv@...@~@@
   1e6f0:	40e2 4040 4040 3131 7e31 fee1 32e6 3232     .@@@@@111~...222
   1e700:	3232 8132 8181 e6e6 781c 9778 e68c 81e6     222......xx.....
   1e710:	8181 8181 8181 8181 8181 8181 e681 e6e6     ................
   1e720:	57e6 5757 1ae6 96c3 7f9f 7c80 276b 4517     .WWW.......|k'.E
   1e730:	3131 3131 feb3 94fe 3224 c52e 0e0e 0e87     1111....$2......
   1e740:	0e0e 350e 3535 0e35 dc0e e8dc e845 e8dc     ...5555.....E...
   1e750:	e845 0edc a249 0e7d e8dc 1313 dc13 c59f     E...I.}.........
   1e760:	d1b3 ebe3 772c 5474 7438 5454 3b54 3ba5     ....,wtT8tTTT;.;
   1e770:	4870 6970 2a6d ae0c e165 0c44 69cb bfe9     pHpim*..e.D..i..
   1e780:	e944 bb1e 77bb 2b77 b103 53e3 67d1 7979     D....ww+...S.gyy
   1e790:	0dc8 3079 1341 7679 7676 4076 7676 7979     ..y0A.yvvvv@vvyy
   1e7a0:	7679 7640 40e2 7e7e e240 40e2 4011 e240     yv@v.@~~@..@.@@.
   1e7b0:	3131 64e2 2eac 3232 8132 8181 8181 e681     11.d..222.......
   1e7c0:	0091 a91f 543b 9078 81e6 8181 8181 8181     ....;Tx.........
   1e7d0:	8181 8181 8181 8181 e681 e6e6 e6e6 c32e     ................
   1e7e0:	afe4 807f 177c 6e27 3145 3131 f1e2 1ae4     ....|.'nE111....
   1e7f0:	2466 9466 0ee8 870e 0e0e 0e0e 3535 3535     f$f.........5555
   1e800:	0e0e e8dc 4545 dce8 45e8 dce8 350e 35a2     ....EE...E...5.5
   1e810:	e8dc 1333 1313 9f33 13c5 3f37 7453 5459     ..3...3...7?StYT
   1e820:	d174 3820 5408 543b 0054 3600 6d44 48cb     t. 8.T;TT..6Dm.H
   1e830:	102d 2fa6 690c 0c69 4444 1ee9 1e1e 64ab     -../.ii.DD.....d
   1e840:	fbd1 5be3 7967 7979 c879 400d 41e8 7913     ...[gyyyy..@.A.y
   1e850:	7676 7679 7676 7976 7979 4076 e276 7e40     vvyvvvvyyyv@v.@~
   1e860:	407e e2e2 4040 4040 31e2 31e2 2440 e6fe     ~@..@@@@.1.1@$..
   1e870:	3232 8181 8181 8181 36ed 3670 cd4f a93b     22.......6p6O.;.
   1e880:	784f e681 8181 8181 8181 8181 8181 8181     Ox..............
   1e890:	8181 e681 e6e6 94e6 4242 6bb1 5d30 17b8     ........BB.k0]..
   1e8a0:	805d 3131 7e31 6066 32ac 9424 e871 0e0e     ].111~f`.2$.q...
   1e8b0:	8787 0e0e 0e0e 0e35 0e0e dc0e 45e8 4545     ......5......EEE
   1e8c0:	e8e8 4545 0edc 3535 dc35 13dc 3113 3313     ..EE..555....1.3
   1e8d0:	c59f 3ffb bb37 7459 2b77 b3d1 3854 3b54     ...?7.Ytw+..T8T;
   1e8e0:	3808 7070 7070 6936 6936 eb0b 0cbe 6969     .8pppp6i6i....ii
   1e8f0:	6d0c 0c0c 1e1e 6444 37b0 d1fb 2b2b 792b     .m....Dd.7..+++y
   1e900:	2b79 0dc8 5e0d 13d7 7679 7976 7676 7676     y+...^..yvvyvvvv
   1e910:	7979 4076 7640 40e2 4040 e2e2 40e2 4040     yyv@@v.@@@...@@@
   1e920:	e240 e2e2 e231 ac03 8194 8132 8181 8181     @...1.....2.....
   1e930:	2281 7036 361f 4f4f 4f4f ec1f 81ed 81ed     ."6p.6OOOO......
   1e940:	eded eded 8181 8181 8181 8181 e681 e6e6     ................
   1e950:	e457 71c3 416e 1717 7f17 3180 3131 1a79     W..qnA.....111y.
   1e960:	6afe 2424 2c94 0edc 0e0e 4141 0e0e 0e0e     .j$$.,....AA....
   1e970:	0e0e 410e 45dc 4545 e845 4545 e845 0e41     ...A.EEEE.EEE.A.
   1e980:	0e0e dc9f 1313 1313 9f33 3ffb 2be3 3838     ........3..?.+88
   1e990:	2b5b 202b 1212 5419 083b 7077 0070 6dcb     [++ ...T;.wpp..m
   1e9a0:	360c 69cb 3f24 cf72 0c69 690c e90c d864     .6.i$?r.i..i..d.
   1e9b0:	e32c 03b1 c82b 2bc8 7979 c82b 0d0d 1379     ,...+..+yy+...y.
   1e9c0:	7931 7676 7676 7676 7976 7676 4076 e2e2     1yvvvvvvvyvvv@..
   1e9d0:	40e2 e240 3131 40e2 4040 e2e2 e2e2 7e31     .@@.11.@@@....1~
   1e9e0:	1a8c 81e6 8181 8181 81ed 7090 7070 361f     ...........ppp.6
   1e9f0:	3636 3636 6970 81ed eded eded eded eded     6666pi..........
   1ea00:	81ed 8181 8181 e681 57e6 c360 5d37 6e5d     .........W`.7]]n
   1ea10:	476e 067f 3131 b4e2 1a60 2466 9432 8733     nG..11..`.f$2.3.
   1ea20:	0e0e 4187 0e41 0e0e 0e0e 0e0e e8dc e845     ...AA.........E.
   1ea30:	4545 45e8 4531 41e8 0e0e dc0e 13dc 1313     EE.E1E.A........
   1ea40:	3313 3ffb 03fc 7474 d1b3 2b77 5474 7477     .3.?..tt..w+tTwt
   1ea50:	3b54 773b 7070 0c00 366d 3636 2d70 2e6f     T;;wpp..m666p-o.
   1ea60:	cd78 690c 0c69 d8d3 e30f 032c 77c8 c8c8     x..ii.....,..w..
   1ea70:	7979 2b79 0dc8 0d0d 7979 7679 7676 7676     yyy+....yyyvvvvv
   1ea80:	7676 7979 7676 31e2 3131 e2e2 6e45 e245     vvyyvv.111..EnE.
   1ea90:	40e2 e240 3131 31e2 abe2 946a 81ed eded     .@@.11.1..j.....
   1eaa0:	eded 7381 7070 1f70 1f1f 1f1f 7070 ec00     ...sppp.....pp..
   1eab0:	ed81 eded eded eded eded eded 8181 8181     ................
   1eac0:	32e6 96e6 10c3 5d0e 5d06 6e47 3106 7e31     .2.....].]Gn.11~
   1ead0:	e4be 24ac 328c e866 0e0e 8741 4187 0e41     ...$.2f...A..AA.
   1eae0:	0e0e 0e0e dc0e e8dc 45e8 e8e8 3145 e845     .........E..E1E.
   1eaf0:	0e41 0e0e dc5d 1313 1313 3fb1 b065 7477     A...]......?e.wt
   1eb00:	f22b 2bd1 3877 3859 3b12 cd54 7038 7070     +..+w8Y8.;T.8ppp
   1eb10:	4870 7070 3670 d369 a6a6 6978 0c69 bfd3     pHppp6i...xii...
   1eb20:	e3fb 64d8 77c8 c8c8 79c8 7979 c82b 0dc8     ...d.w...yyy+...
   1eb30:	0d0d 7976 7976 7676 7676 7976 7931 3131     ..vyvyvvvvvy1y11
   1eb40:	3131 3131 2745 456b 3131 e2e2 3131 3131     1111E'kE11..1111
   1eb50:	3131 9034 811a eded eded eded 7073 7000     114.........sp.p
   1eb60:	7070 701f 7070 7070 9100 ed81 eded eded     pp.ppppp........
   1eb70:	eded eded eded 8181 8181 e6e6 c360 87fc     ............`...
   1eb80:	3130 475d 806e 3131 ac76 6afe 8c24 be57     01]Gn.11v..j$.W.
   1eb90:	0e45 410e 8787 4141 0e0e 0e0e 0e0e 410e     E..A..AA.......A
   1eba0:	45e8 4545 1345 3131 dce8 5d0e 5dde 1313     .EEEE.11...].]..
   1ebb0:	7913 ebf2 2cd2 192b 2b74 d15b 7777 74d1     .y...,+.t+[.ww.t
   1ebc0:	5454 5454 54cd 7070 0070 7000 7070 4469     TTTT.Tppp..pppiD
   1ebd0:	d3e9 a6a6 6978 bfd3 66be bfe5 1ebb 7777     ....xi...f....ww
   1ebe0:	2bc8 7979 7979 0dc8 0d0d 760d 7679 7979     .+yyyy.....vyvyy
   1ebf0:	4076 7640 3179 3131 3131 4545 1745 0627     v@@vy11111EEE.'.
   1ec00:	3145 3131 31e2 3131 3131 e2e2 5777 ed6a     E111.11111..wWj.
   1ec10:	eded eded 22ed 0048 7070 7070 7070 7070     ....."H.pppppppp
   1ec20:	7070 9770 22ed 2222 2222 eded eded 81ed     ppp.."""""......
   1ec30:	8181 97e6 72e9 a6c3 4531 3031 416e 3180     .....r..1E10nA.1
   1ec40:	d8e2 1a60 2457 9424 e853 0e0e 4141 4141     ..`.W$$.S...AAAA
   1ec50:	0e41 0e0e 0e0e 0e0e e8dc 1345 4513 3113     A.........E..E.1
   1ec60:	4531 41e8 de6b 13dc 7931 ea33 0fd2 2bb3     1E.Ak...1y3....+
   1ec70:	77c8 b374 bb2b 2b77 5474 5454 cdcd 704e     .wt.+.w+tTTT..Np
   1ec80:	7070 7069 7070 6948 e92d 2d0c 2e5a aee1     ppipppHi-..-Z...
   1ec90:	24be 78bf 1ebb 1e1e c877 7979 7979 c879     .$.x....w.yyyyy.
   1eca0:	0dc8 0d0d 7676 7676 7676 7640 7976 3131     ....vvvvvv@vvy11
   1ecb0:	4531 8741 4145 8717 4545 3131 3131 3131     1EA.EA..EE111111
   1ecc0:	3131 e231 40e2 1aae ed32 eded eded cbed     111..@..2.......
   1ecd0:	7000 7070 7070 7070 7070 0070 edec 9090     .pppppppppp.....
   1ece0:	2290 2222 ed22 eded 81ed ca81 081f 6059     ."""".........Y`
   1ecf0:	402e 3131 8745 3106 4031 60be 321a 24e1     .@11E..11@.`.2.$
   1ed00:	5b94 4187 410e 8787 4187 0e0e 410e 0e0e     .[.A.A...A...A..
   1ed10:	dc0e 1345 1313 3113 3131 4545 de41 e85d     ..E....111EEA.].
   1ed20:	3113 5233 0fd2 b333 192b 7477 bb38 382b     .13R..3.+.wt8.+8
   1ed30:	3838 5454 3bcd 1e54 7048 0c00 6944 3636     88TT.;T.Hp..Di66
   1ed40:	cf36 69cb e9cf a6e1 6feb 44ae bbe9 1e1e     6..i.....o.D....
   1ed50:	771e 2bc8 b379 7979 0dc8 0d0d 760d 7679     .w.+y.yy.....vyv
   1ed60:	7676 4076 3176 1313 e813 6e17 45e8 4506     vvv@v1.....n.E.E
   1ed70:	e845 3145 3131 31e2 e231 e2e2 e2e2 b330     E.E111.11.....0.
   1ed80:	aced eded eded eded 004a 7070 7070 7070     ........J.pppppp
   1ed90:	0000 7070 7070 22ff 9090 9090 2290 2222     ..pppp."....."""
   1eda0:	eded 9181 a900 5954 2e96 3140 3131 3131     ......TY..@11111
   1edb0:	3131 ac76 acfe e124 5732 8713 4141 8741     11v...$.2W..AAA.
   1edc0:	8787 0e41 410e 4141 410e 45e8 1313 1313     ..A..AAA.A.E....
   1edd0:	3131 3131 4145 dc0e 13dc e333 0fd2 3333     1111EA....3...33
   1ede0:	2bb3 772b 7777 b377 12bb 5412 cd54 54cd     .++wwww....TT..T
   1edf0:	48cd 7070 6900 0c44 cb69 3636 6936 7244     .Hpp.iD.i.666iDr
   1ee00:	6610 a610 f5be bf72 2bbb c877 792b 7979     .f....r..+w.+yyy
   1ee10:	c8c8 0d0d 0d0d 1379 6713 2013 9f5b afaf     ......y..g. [...
   1ee20:	dc9f aa17 4587 3145 f631 3106 e231 e2e2     .....EE11..11...
   1ee30:	31e2 e2e2 e2e2 e8e2 e5f3 5757 ed22 22ed     .1........WW".."
   1ee40:	63ed 7000 0000 0000 0000 0000 7000 0700     .c.p.........p..
   1ee50:	7322 7373 9073 2290 2222 73ed 7070 3ba9     "ssss..""".spp.;
   1ee60:	9659 40a6 3131 3131 4531 d8e2 1afe e194     Y..@11111E......
   1ee70:	32e1 45be 4141 4141 8787 4187 0e41 4141     .2.EAAAA...AA.AA
   1ee80:	4141 e8dc 1313 1313 3113 3131 3131 dce8     AA.......11111..
   1ee90:	e8dc 52c5 b1d2 3313 b333 2b2b 7777 c8c8     ...R...33.++ww..
   1eea0:	7974 12e8 5454 cdcd e9cd 0069 7070 3600     ty..TT....i.pp.6
   1eeb0:	0cd3 cb6d 6936 aed3 53a6 e5ae 2472 a610     ..m.6i...S..r$..
   1eec0:	e310 0fe3 b1b1 afb1 f2af 5bf2 f2f2 0faf     ...........[....
   1eed0:	0f93 0f0f b10f c5af e833 aa6e 450e 3145     ........3.n..EE1
   1eee0:	f645 3106 3131 4040 e240 e2e2 e2e2 e2e2     E..111@@@.......
   1eef0:	3031 ae41 81ac ed22 2222 4890 0000 0000     10A..."."".H....
   1ef00:	0000 0000 7070 0070 7315 7373 7373 9073     ....ppp..ssssss.
   1ef10:	2290 ed22 00ec 1f70 593b 6660 3140 3131     .""...p.;Y`f@111
   1ef20:	4531 1145 fe24 321a 24e1 5357 8745 4141     1EE.$..2.$WSE.AA
   1ef30:	8741 8787 4141 8741 4141 dc41 45e8 1345     A...AAA.AAA..EE.
   1ef40:	1313 3113 3131 1331 dce8 529f 0fd2 b379     ...1111....R..y.
   1ef50:	3333 2bb3 77c8 2b77 c82b 796b 5454 cdcd     33.+.ww++.kyTT..
   1ef60:	4ecd 36e9 7000 7070 3600 2d2d cb2d aed3     .N.6.ppp.6---...
   1ef70:	24a6 e5ae e9ab 44e9 72bf 7153 e337 cece     .$.....D.rSq7...
   1ef80:	cece 37e3 fb37 0ffb 930f 9f8e 6733 7979     ...77.......3gyy
   1ef90:	7979 27e8 135d 1313 4531 e231 3131 4040     yy.']...1E1.11@@
   1efa0:	4040 e2e2 e2e2 e2e2 4040 5de2 222c 8c2e     @@......@@.],"..
   1efb0:	2222 ed90 00ca 0000 0000 0000 0000 0000     ""..............
   1efc0:	7000 731c 7373 7373 7373 ed90 0089 7070     .p.sssssss....pp
   1efd0:	3b1f e412 4071 3131 3131 4531 6a40 acfe     .;..q@11111E@j..
   1efe0:	e124 9424 455b 4187 4141 0687 8787 dc87     $.$.[E.AAA......
   1eff0:	87e8 dcdc e8dc 4545 4545 8745 3145 3131     ......EEEEE.E111
   1f000:	1331 52c5 0fd2 7913 20b3 b320 bb2b 7777     1..R...y.  .+.ww
   1f010:	b3b3 dcdc 4e12 cd54 cdcd cfe9 7048 7070     .....NT.....Hppp
   1f020:	7070 cb00 2d69 782d 2466 bf78 bbe5 6dd3     pp..i--xf$x....m
   1f030:	2de9 1ee9 1e1e d12b 2020 d120 7967 7979     .-....+.   .gyyy
   1f040:	1379 e8c5 7679 4076 7976 e879 13e8 3131     y...yvv@vyy...11
   1f050:	3131 4040 31e2 40e2 4040 e240 e231 e2e2     11@@.1.@@@@.1...
   1f060:	40e2 9fe2 854c e6bf 9094 9090 7390 0070     .@..L........sp.
	...
   1f078:	0000 6300 9773 7373 7373 7373 eced 7000     ...cs.ssssss...p
   1f088:	1f70 bb08 2c42 31e2 3131 4531 d131 1a1a     p...B,.1111E1...
   1f098:	e194 24e1 1357 e806 4187 8741 0606 e887     ...$W....AA.....
   1f0a8:	e8e8 dcdc dc41 4545 4545 5d45 4516 7631     ....A.EEEEE].E1v
   1f0b8:	7676 e313 0fd2 7913 b379 1313 bb79 7777     vv.....yy...y.ww
   1f0c8:	b3bb 7979 4e1e 544e cdcd cd0c 7069 4848     ..yy.NNT....ipHH
   1f0d8:	7070 4870 3648 782d 6671 d378 4444 bb44     pppHH6-xqfx.DDD.
   1f0e8:	2d44 6d6d e9e9 bb1e 79c8 79b3 c879 0d0d     D-mm.....y.yy...
   1f0f8:	760d dc13 3113 7979 7976 7979 3179 3131     .v...1yyvyyyy111
   1f108:	3131 4040 4040 e2e2 e240 e2e2 3131 40e2     11@@@@..@...11.@
   1f118:	31e2 3cdc 354c 870e 9478 73e6 7390 fa90     .1.<L5..x..s.s..
	...
   1f134:	7307 9797 7397 7373 7390 7070 7070 081f     .s...sss.spppp..
   1f144:	420b 3167 3131 3131 e245 fee1 e61a e1db     .Bg11111E.......
   1f154:	5a32 0631 dce8 8787 0606 0606 e8e8 e8e8     2Z1.............
   1f164:	4141 e8dc 4545 f645 f6de 7631 7676 e379     AA..EEE...1vvvy.
   1f174:	b1eb 7979 7979 b3b3 c8b3 7777 7777 772b     ..yyyy....wwww+w
   1f184:	4e1e 7738 cd54 cfcd 0c69 4870 7048 7070     .N8wT...i.pHHppp
   1f194:	692d d3cb e3db d3ae 440c 6444 d364 d36d     -i.......DDdd.m.
   1f1a4:	e96d 77e9 2b2b b32b 2b79 0dc8 0dc8 e879     m..w+++.y+....y.
   1f1b4:	e8d7 79e8 7676 7676 7979 7979 7679 40e2     ...yvvvvyyyyyv.@
   1f1c4:	4040 e240 31e2 3145 3131 40e2 3340 953c     @@@..1E111.@@3<.
   1f1d4:	dc7d 0e87 7e45 6a89 73ed 7373 ec73 0000     }...E~.j.ssss...
	...
   1f1ec:	4a00 ff97 9797 7397 9073 0063 7070 1f70     .J.....ss.c.ppp.
   1f1fc:	9408 401a 3131 3131 4531 9476 ac1a e124     ...@11111Ev...$.
   1f20c:	57e1 31e1 e806 87e8 06dc e8e8 e830 e8e8     .W.1........0...
   1f21c:	dce8 4141 45e8 41e8 dede 7945 4076 e379     ..AA.E.A..Eyv@y.
   1f22c:	b1eb 7679 2b76 792b c82b 7477 7777 7777     ..yvv++y+.wtwwww
   1f23c:	3877 1ee9 e964 cfcf 0ccf 700c 4848 4870     w8..d......pHHpH
   1f24c:	0c70 ec6d 1089 780b 6969 bf44 44bf bb6d     p.m....xiiD..Dm.
   1f25c:	6dab e9e9 64bb 2b2b 7979 c82b c8c8 790d     .m...d++yy+....y
   1f26c:	41e8 1387 7979 7676 7676 7676 7679 7676     .A..yyvvvvvvyvvv
   1f27c:	7e40 407e 31e2 8745 e231 e2e2 7d13 4c52     @~~@.1E.1....}RL
   1f28c:	139f 0e87 e213 6811 6aff 7322 7373 1573     .......h.j"ssss.
	...
   1f2a4:	0000 97ec ff1c 9797 7373 4a90 7000 7070     ........ss.J.ppp
   1f2b4:	4e1f 53e4 13e2 3131 1331 d131 1a6a 8c6a     .N.S..111.1.j.j.
   1f2c4:	24e1 b494 e831 e8e8 87dc e806 e8e8 e8e8     .$..1...........
   1f2d4:	4545 dce8 e8dc 4545 de16 3141 0d79 e379     EE....EE..A1y.y.
   1f2e4:	2ceb 7676 c8c8 7777 7777 7477 7774 7777     .,vv..wwwwwttwww
   1f2f4:	bb74 e91e 64e9 cf0c cfcf 690c 3648 4848     t....d.....iH6HH
   1f304:	4848 0c36 24ca 7824 692d d369 d3bf 44e9     HH6..$$x-ii....D
   1f314:	64d1 e91e 77e9 2b2b b32b 2b2b c8c8 0d0d     .d...w+++.++....
   1f324:	4131 1341 7979 7676 4076 7676 7676 7979     1AA.yyvvv@vvvvyy
   1f334:	4079 7e7e e240 4545 e231 1331 527d 3595     y@~~@.EE1.1.}R.5
   1f344:	e213 8745 e231 4040 6811 9473 9773 9773     ..E.1.@@.hs.s.s.
   1f354:	1597 0000 0000 0000 0000 ec00 1c97 971c     ................
   1f364:	9797 7373 00cb 7070 7070 e4e1 3176 3131     ..ss..pppp..v111
   1f374:	3131 e245 1af5 e6ac e1db 9424 3ed1 e845     11E.......$..>E.
   1f384:	dce8 e887 45e8 06e8 e8e8 4545 dce8 45e8     .....E....EE...E
   1f394:	de87 13f6 7679 3779 b0fc 0d0d 740d 7774     ....yvy7.....ttw
   1f3a4:	7777 7477 7474 7777 77bb bbbb 0c38 69e9     wwwtttww.w..8..i
   1f3b4:	cfcf 0ccf 48cf 4836 48cb cbcb 9169 8957     .....H6H.H..i.W.
   1f3c4:	0c2d 6969 bf44 e944 6444 1ebb 1e1e 771e     -.iiD.D.Dd.....w
   1f3d4:	2b77 7979 c82b 0dc8 e876 4141 7913 7679     w+yy+...v.AA.yyv
   1f3e4:	4040 7640 7676 7979 3131 4076 4040 e2e2     @@@vvvyy11v@@@..
   1f3f4:	3140 7d33 9552 13a0 3131 31e2 40e2 4040     @13}R...11.1.@@@
   1f404:	4011 1211 5722 ff73 9797 4a97 0000 0000     .@.."Ws....J....
   1f414:	0000 0000 97ec 1c1c 97ff 7397 4897 7070     ...........s.Hpp
   1f424:	7070 60cf 4066 3113 3131 4531 e640 acac     pp.`f@.1111E@...
   1f434:	db24 32e1 e2e6 4545 e8e8 87dc e806 4545     $..2..EE......EE
   1f444:	e8e8 45e8 e845 e8e8 0645 13e8 7631 e367     ...EE...E...1vg.
   1f454:	b0fc 7774 7477 7474 7777 7777 7474 3874     ..twwtttwwwwttt8
   1f464:	2b77 bb77 bbab cde9 cf69 cfcf 69cf 3669     w+w.....i....ii6
   1f474:	cbcb 6d69 6969 e61c ec91 6969 780c d1e5     ..imii....ii.x..
   1f484:	6dab 1e6d 6464 1e1e 771e 792b 2b2b c8c8     .mm.dd...w+y++..
   1f494:	790d 5d30 1341 7679 4076 4040 7676 7976     .y0]A.yvv@@@vvvy
   1f4a4:	3179 7931 4040 3140 9f13 523c 9f4c e231     y11y@@@1..<RL.1.
   1f4b4:	3131 4031 4040 e240 1131 4040 1211 5722     111@@@@.1.@@.."W
   1f4c4:	1c73 1cff 6397 0015 0000 7000 4a00 1c1c     s....c.....p.J..
   1f4d4:	1c1c 97ff 9773 7048 7070 9000 2b42 3131     ....s.Hppp..B+11
   1f4e4:	3131 3131 b331 ac6a e16a e1db 2457 4511     11111.j.j...W$.E
   1f4f4:	4545 dce8 0687 45e8 4545 e8e8 1345 e8e8     EE.....EEE..E...
   1f504:	13e8 3131 765e e367 5bfc c80d c8c8 770d     ..11^vg..[.....w
   1f514:	7777 7777 7777 7774 7777 bb2b 6477 1ebb     wwwwwwtwww+.wd..
   1f524:	cd0c cfcf cfcf cb69 6948 43ec cb2a 97ec     ......i.Hi.C*...
   1f534:	78ed 69d3 6969 e5bf c55b e9bb d1bb 1e64     .x.iii..[.....d.
   1f544:	1ee9 2b77 7979 c879 c80d 415e 41f3 7613     ..w+yyy...^A.A.v
   1f554:	4076 4040 4040 7976 3131 7979 4040 c579     v@@@@@vy11yy@@y.
   1f564:	957d 7d95 79dc 4040 31e2 3131 4040 e240     }..}.y@@.111@@@.
   1f574:	4545 4011 4040 1211 5773 1c97 1c1c 1c1c     EE.@@@..sW......
   1f584:	ec91 0048 0000 1c91 1c89 1c1c 971c 701c     ..H............p
   1f594:	7070 9100 5a42 317e 3131 3131 e231 1af5     pp..BZ~111111...
   1f5a4:	57ac dbdb 948c e2f1 4531 e845 41e8 e887     .W......1EE..A..
   1f5b4:	3145 4545 45e8 1331 1313 3131 7631 e320     E1EE.E1...111v .
   1f5c4:	b0fc c846 c8c8 c8c8 c8c8 77c8 7777 3877     ..F........wwww8
   1f5d4:	2b77 77bb 7477 bbbb e913 cf69 4fcf d369     w+.wwt....i..Oi.
   1f5e4:	0c48 430c 694d eccb 9097 0c2d 780c d32d     H..CMi....-..x-.
   1f5f4:	d8e5 2025 bb1e abd1 4ee9 77e9 7979 7979     ..% .....N.wyyyy
   1f604:	0dc8 5e76 f37c 1341 7676 4040 4040 7640     ..v^|.A.vv@@@@@v
   1f614:	7979 7976 3313 950f 4c52 878e 7e45 407e     yyvy.3..RL..E~~@
   1f624:	4040 31e2 40e2 407e 31e2 4040 4040 4040     @@.1.@~@.1@@@@@@
   1f634:	12e2 e6ff 1c73 891c 1c89 631c 4afa 8907     ....s......c.J..
   1f644:	8989 1c89 1c1c 1c97 0070 0770 1a1a 3174     ........p.p...t1
   1f654:	3131 3131 3131 6640 acac db24 24db d16a     111111@f..$..$j.
   1f664:	3131 4531 e8e8 e8d7 45e8 3145 e831 3145     111E.....EE11.E1
   1f674:	5e5e 795e 7676 fc5b d852 7446 4674 c8c8     ^^^yvv[.R.FttF..
   1f684:	c8c8 c8c8 7777 7777 bb74 772b 7777 7774     ....wwwwt.+wwwtw
   1f694:	dcdc cf1e cfcf 694f 0cd3 2d69 2d4d cbcb     ......Oi..i-M-..
   1f6a4:	97ec d3e1 0c69 bfae 642d af2f 6425 bb1e     ....i...-d/.%d..
   1f6b4:	e91e 1ee9 7977 1379 7913 760d 7c5e 7cf3     ....wyy..y.v^|.|
   1f6c4:	7913 4076 0d0d 400d 7640 5b13 520f ce6c     .yv@...@@v.[.Rl.
   1f6d4:	33b1 8713 e287 7e7e 4040 7640 40e2 7e40     .3....~~@@@v.@@~
   1f6e4:	4040 7e40 4040 4040 4040 68e2 8191 8973     @@@~@@@@@@.h..s.
   1f6f4:	1c1c 6389 6363 6363 8963 1c89 1c1c 1c1c     ...cccccc.......
   1f704:	cb97 89cb 60e6 1178 3131 3131 3131 b331     .....`x.1111111.
   1f714:	6a6a 8c6a dbdb 9432 3179 3131 e845 d7e8     jjj...2.y111E...
   1f724:	45e8 4545 3131 5e31 5e31 5e5e 7679 655b     .EEE111^1^^^yv[e
   1f734:	20e3 46c8 7474 7774 c8c8 77c8 7477 bb74     . .Ftttw...wwtt.
   1f744:	74bb bb77 1e77 7477 0e79 64bb cf0c 36cf     .tw.w.wty..d...6
   1f754:	6969 3648 d32a 48cb 6948 241c 6978 786d     iiH6*..HHi.$ximx
   1f764:	0cd3 e5bf 255b 6dd8 e9e9 e90c 771e dc79     ....[%.m.....wy.
   1f774:	e85d 0d79 5ec8 3d41 e85d 4076 0d40 400d     ].y..^A=].v@@..@
   1f784:	f279 52fb 5265 5b93 7e79 e840 3187 4040     y..ReR.[y~@..1@@
   1f794:	407e 4040 4040 7e40 7e7e 4040 407e 4040     ~@@@@@@~~~@@~@@@
   1f7a4:	4040 4040 3411 73d3 6373 07fa caca 2d2d     @@@@.4.ssc....--
   1f7b4:	2d2d ca2d faca 6363 73ff 7397 fe22 3497     ---...cc.s.s"..4
   1f7c4:	3131 3131 3131 e231 acb4 946a dbdb 57db     1111111...j....W
   1f7d4:	11e6 3131 3131 e845 e8e8 45e8 3145 3131     ..1111E....EE111
   1f7e4:	3131 5e31 7979 65f2 b337 7676 74c8 7474     111^yy.e7.vv.ttt
   1f7f4:	7474 7474 3838 3838 bbbb 7438 7477 c8c8     tttt8888..8twt..
   1f804:	2b77 0c1e bb44 cfcf 0c36 480c 0c69 48cb     w+..D...6..Hi..H
   1f814:	4848 89cb 91e6 0c69 6978 440c 5be5 c55b     HH....i.xi.D.[[.
   1f824:	0cbb e90c 1ee9 33ab 416b 7979 7679 7ce8     .......3kAyyyv.|
   1f834:	f33d 79e8 7979 af33 cefb ce52 5b0f 7631     =..yyy3...R..[1v
   1f844:	7e40 e27e e213 4040 7e40 407e 4040 4040     @~~...@@@~~@@@@@
   1f854:	7e7e 407e 7e7e 7e7e 4040 4040 11e2 597e     ~~~@~~~~@@@@..~Y
   1f864:	d369 7438 4646 6868 0202 0202 46dd 7446     i.8tFFhh.....FFt
   1f874:	cae9 fffa 1a22 6890 e2e2 3131 3131 4531     ...."..h..11111E
   1f884:	5a40 acac f132 e1db e194 3111 3131 4531     @Z..2......1111E
   1f894:	e8e8 e8e8 315e 3131 3131 5e31 79b3 65b1     ....^111111^.y.e
   1f8a4:	7671 c8c8 c8c8 7446 7474 3874 3838 7777     qv....Ftttt888ww
   1f8b4:	7738 3877 771e 87c8 1e2b 0ce9 690c 0c44     8ww8.w..+....iD.
   1f8c4:	cbcb 2d69 480c 6948 4848 7070 5aca ae5a     ..i-.HHiHHpp.ZZ.
   1f8d4:	780c 0c69 e544 5b5b d1c5 1e6d 771e 1377     .xi.D.[[..m..ww.
   1f8e4:	5d6b 7913 3179 41e8 7f3d 9328 fb0f e3e3     k].yy1.A=.(.....
   1f8f4:	fbe3 13f2 7679 4040 4076 347e 407e 7e40     ....yv@@v@~4~@@~
   1f904:	7e7e 7e7e 4040 407e 7e40 7e7e 7e40 7e7e     ~~~~@@~@@~~~@~~~
   1f914:	7e7e 4040 0de2 1212 dd46 1246 cd54 cfcd     ~~@@....F.F.T...
   1f924:	cfcf 4f4f cd4f 5954 dd46 c95f 8938 341c     ..OOO.TYF._.8..4
   1f934:	40e2 31e2 3131 3131 7631 6a6a 246a dbf1     .@.111111vjjj$..
   1f944:	6a8c e2b4 3131 3131 e8e8 e8e8 315e 3131     .j..1111....^111
   1f954:	3131 7931 1379 65fb c82c c8c8 c8c8 46c8     111yy..e,......F
   1f964:	4646 7477 3874 7738 381e 381e 1e38 0e77     FFwtt88w.8.88.w.
   1f974:	1e0e 0ce9 690c 6969 cb69 cbcb 69bb 480c     .....iiii....i.H
   1f984:	0ccb 7070 6970 edca 9065 69ca 440c d1d1     ..pppi..e..i.D..
   1f994:	25d8 bbc5 2bbb 13b3 1616 6713 2067 2825     .%...+.....gg %(
   1f9a4:	b6ad f0f0 4c21 af7d 79d1 0d0d 760d 7979     ....!L}..y...vyy
   1f9b4:	7676 0d40 0d34 4040 7e7e 7e7e 407e 4040     vv@.4.@@~~~~~@@@
   1f9c4:	4040 7e40 7e7e 7e7e 7e7e 407e 68e2 dd74     @@@~~~~~~~~@.ht.
   1f9d4:	74dd cf4e cfcf cfcf cfcf 3636 a936 a9a9     .tN.......666...
   1f9e4:	a9a9 544f c974 745f 3412 e2e2 3131 3131     ..OTt._t.4..1111
   1f9f4:	e231 acd8 946a f1db 24db b394 3131 3131     1...j....$..1111
   1fa04:	3131 e8e8 5ee8 3131 3131 7931 1376 fc37     11...^11111yv.7.
   1fa14:	76f2 c8c8 c8c8 77c8 7774 7746 3874 3838     .v.....wtwFwt888
   1fa24:	3838 3838 3838 1338 2bb5 e96d 0c0c 6969     8888888..+m...ii
   1fa34:	cbcf cbcb 44cb 69cb bbe9 701e 7070 3669     .....D.i...pppi6
   1fa44:	f16d 5a5a 2ce1 b0a0 b4e5 28c7 e55b 5bb4     m.ZZ.,.....([..[
   1fa54:	6b6e 8e8e 4c93 214c b6b6 28ad f37f 1341     nk...LL!...(..A.
   1fa64:	0d40 0d0d 0d0d 7676 7679 4076 340d 400d     @.....vvyvv@.4.@
   1fa74:	7e40 7e7e 407e 4040 4040 4040 4040 7e7e     @~~~~@@@@@@@@@~~
   1fa84:	7e7e 7e7e 117e 744e cd12 5454 cdcd cfcf     ~~~~~.Nt..TT....
   1fa94:	4fcf 4f4f a91f a9a9 a9a9 3b3b 3b3b 1254     .OOO......;;;;T.
   1faa4:	5e76 3419 e2e2 3131 3131 5a40 6a6a f1e6     v^.4..1111@Zjj..
   1fab4:	dbdb 6632 3176 5f31 3131 5e31 5ee8 3131     ..2fv11_111^.^11
   1fac4:	5f31 7676 2076 10e3 765b c8c8 c8c8 77c8     1_vvv ..[v.....w
   1fad4:	7474 7474 7474 1238 384e 4e38 384e 7738     tttttt8.N88NN88w
   1fae4:	336e 441e 0ce9 440c cbe9 cbcb 36cb 48e9     n3.D...D.....6.H
   1faf4:	6948 44e9 7070 3670 d348 cbd3 5378 4c3c     Hi.Dppp6H...xS<L
   1fb04:	be71 f0e3 21f0 7137 6e8e 8e8e 0f0f c793     q....!7q.n......
   1fb14:	4125 7c7c f37c 41f3 7613 0d0d 0d0d 400d     %A|||..A.v.....@
   1fb24:	7976 7676 7e40 0d34 4040 7e7e 7e7e 407e     vyvv@~4.@@~~~~~@
   1fb34:	4040 4040 4040 4040 7e7e 7e7e 7e7e 4040     @@@@@@@@~~~~~~@@
   1fb44:	cf4f 54cd cd4e cdcd cfcf 4f4f a9a9 a9a9     O..TN.....OO....
   1fb54:	a9a9 08a9 3b08 5454 1259 5e46 7e76 3131     .....;TTY.F^v~11
   1fb64:	3131 7631 6a6a 246a dbf1 94db 1124 5f31     111vjjj$....$.1_
   1fb74:	5f5f 3131 135e 5e5e 5f31 7676 5b76 3710     __11^.^^1_vvv[.7
   1fb84:	76d1 c82b c8c8 c8c8 7477 3874 7438 3838     .v+.....wtt88t88
   1fb94:	5412 5454 4e54 3838 132b bbe9 0c6d d30c     .TTTTN88+...m...
   1fba4:	6d44 cbcf cbcb 0c36 7070 cb69 4838 7070     Dm....6.ppi.8Hpp
   1fbb4:	7070 3636 cb48 03ab aebf 5bbf af8e afaf     pp66H......[....
   1fbc4:	2bd1 ab2b 20b3 41d7 5ed7 5e31 41e8 f37c     .++.. .A.^1^.A|.
   1fbd4:	d741 4031 0d0d 0d0d 7640 7676 4076 340d     A.1@....@vvvv@.4
   1fbe4:	4034 7e40 4040 7e7e 4040 4040 4040 e240     4@@~@@~~@@@@@@@.
   1fbf4:	7e40 7e7e 7e7e 407e 0d40 cd4f 1254 cd54     @~~~~~~@@.O.T.T.
   1fc04:	cfcd 4fcf a9a9 a9a9 a9a9 a9a9 0808 543b     ...O..........;T
   1fc14:	5954 7468 74c9 3140 3131 e231 acd8 6a94     TYht.t@1111....j
   1fc24:	f1db e1db b46a 3111 5f5f 5f5f 5e31 5e13     ....j..1____1^.^
   1fc34:	7631 7676 af76 0ffc 7679 c876 c8c8 19c8     1vvvv...yvv.....
   1fc44:	7477 7474 7474 3874 5412 5454 5454 3854     wtttttt8.TTTTTT8
   1fc54:	1e1e 0ce9 0c6d 6969 0c0c cb69 cbcb 36cb     ....m.ii..i....6
   1fc64:	700c 4870 e9cb 00cb 7070 6969 6948 2d0c     .ppH....ppiiHi.-
   1fc74:	6d2d 1ebf 64b3 bb1e 6464 77c8 c877 205e     -m...d..dd.ww.^ 
   1fc84:	b313 0dc8 760d d731 7c7c e841 4076 0d0d     .....v1.||A.v@..
   1fc94:	400d 7640 7676 0d40 3434 4040 4040 7e40     .@@vvv@.44@@@@@~
   1fca4:	407e 7e40 7e7e 407e 4040 7e40 7e7e 7e7e     ~@@~~~~@@@@~~~~~
   1fcb4:	7e40 3411 4ecf 1e4e cd4e cfcd a94f a9a9     @~.4.NN.N...O...
   1fcc4:	a9a9 a9a9 08a9 0808 5454 6859 38dd e268     ........TTYh.8h.
   1fcd4:	31e2 3131 e140 6a6a f157 dbf1 6a24 5fb3     .111@.jjW...$j._
   1fce4:	5f31 5f5f 315f 5e5e 315e 7676 b176 b1fc     1____1^^^1vvv...
   1fcf4:	7679 7679 19c8 4646 7474 3874 7438 3874     yvyv..FFttt88tt8
   1fd04:	5412 5454 5454 5454 e94e 0c0c 690c 6969     .TTTTTTTN....iii
   1fd14:	6969 cf0c cbcb cbcb 4436 7070 7070 360c     ii......6Dpppp.6
   1fd24:	7000 2d70 cb0c 0cd3 cb69 780c d1bb 6d6d     .pp-....i..x..mm
   1fd34:	1e44 c877 c8c8 2bc8 c82b 7477 3468 760d     D.w....++.wth4.v
   1fd44:	4131 417c 31d7 0d76 0d0d 400d 4040 4040     1A|A.1v....@@@@@
   1fd54:	340d 4034 7e40 4040 7e7e 4040 7e7e 7e7e     .44@@~@@~~@@~~~~
   1fd64:	4040 4040 7e7e 7e7e 407e e240 0d31 674e     @@@@~~~~~@@.1.Ng
   1fd74:	3867 cdcd 4fcf a9a9 a9a9 a9a9 a9a9 0808     g8...O..........
   1fd84:	5408 6854 5446 e268 31e2 3131 4031 9494     .TThFTh..1111@..
   1fd94:	246a f1f1 32db 7694 5f5f 5f5f 5f5f 5e31     j$...2.v______1^
   1fda4:	5e5e 765e fb5e 5b10 7976 795e c879 7446     ^^^v^..[vy^yy.Ft
   1fdb4:	7474 7474 1238 3838 5412 5454 cd54 5454     tttt8.88.TTTT.TT
   1fdc4:	4e4e 0c0c 6969 690c 6969 440c 360c cbcb     NN..ii.iii.D.6..
   1fdd4:	cbcb 00bb 0000 0c00 7036 7070 0c2d d3cb     ........6ppp-...
   1fde4:	692d 0c69 bb0c 4441 6de9 1e1e 2b1e 77c8     -ii...AD.m...+.w
   1fdf4:	2bc8 1277 1212 3468 760d 41e8 4141 31e8     .+w...h4.v.AAA.1
   1fe04:	0d76 0d0d 4040 4040 3440 3434 7e7e 7e7e     v...@@@@@444~~~~
   1fe14:	7e7e 7e7e 7e7e 7e7e 7e7e 4040 7e7e 7e34     ~~~~~~~~~~@@~~4~
   1fe24:	7e34 3140 4545 dc31 2b17 544e cdcd a94f     4~@1EE1..+NT..O.
   1fe34:	a9a9 a9a9 a9a9 08a9 0808 b254 54b2 e234     ..........T..T4.
   1fe44:	e2e2 31e2 e231 6ad1 6a57 f1db dbf1 5a32     ...11..jWj....2Z
   1fe54:	5fdd 5f5f 5f5f 5f5f 5e31 5f5e e313 20e3     ._______1^^_... 
   1fe64:	7676 7979 7679 c8c8 7446 7474 3838 1212     vvyyyv..Fttt88..
   1fe74:	5459 1254 cd54 cdcd 54cd 0c4e 6969 0ce9     YTT.T....TN.ii..
   1fe84:	6969 cb69 cbcb cbcb 36cb 4469 0070 0000     iii......6iDp...
   1fe94:	360c 4870 2d70 360c e96d 6969 0c69 f320     .6pHp-.6m.iii. .
   1fea4:	e9d1 e90c 1e1e 64bb 771e c8b3 1212 1212     .......d.w......
   1feb4:	0d34 310d 4141 d741 7913 0d40 0d0d 400d     4..1AAA..y@....@
   1fec4:	0d40 3434 7e34 347e 7e34 3434 7e7e 407e     @.444~~44~44~~~@
   1fed4:	7e7e 3434 347e 3434 347e e27e 4145 87e8     ~~44~444~4~.EA..
   1fee4:	33b5 12e9 cd54 4fcd a9a9 a9a9 a9a9 a9a9     .3..T..O........
   1fef4:	0808 2354 1254 1111 1111 e2e2 3131 e140     ..T#T.......11@.
   1ff04:	946a f157 dbf1 94db 7ef5 5f31 5f5f 5f5f     j.W......~1_____
   1ff14:	315f 315e fcc5 5e37 7676 7676 7676 19c8     _1^1..7^vvvvvv..
   1ff24:	77c8 7474 3838 5938 5959 3854 cd54 cdcd     .wtt888YYYT8T...
   1ff34:	cdcd cd54 6969 0c69 6969 6969 6969 690c     ..T.iii.iiiiii.i
   1ff44:	cbcb 0c48 4844 0070 0c00 4836 4848 cbcb     ..H.DHp...6HHH..
   1ff54:	d3cb 696d 3669 4469 c520 e964 1ee9 1ee9     ..mii6iD .d.....
   1ff64:	ab2b 2bab 74b3 1212 6812 0d77 e879 4141     +..+.t...hw.y.AA
   1ff74:	e8d7 7631 0d40 0d0d 400d 340d 3434 0d0d     ..1v@....@.444..
   1ff84:	3434 3434 7e34 7e0d 407e 347e 3434 3434     44444~.~~@~44444
   1ff94:	7e34 407e 06e2 0e5d 5db5 4ee2 5454 cdcd     4~~@..]..].NTT..
   1ffa4:	4f4f a9a9 a9a9 a9a9 0808 a5a5 676d 11e2     OO..........mg..
   1ffb4:	1111 1111 e2e2 4031 5757 246a f10b dbdb     ......1@WWj$....
   1ffc4:	d86a 5f11 5f5f 765f 5f76 315f eab1 790f     j..____vv__1...y
   1ffd4:	7676 7676 1976 19c8 7419 7474 3838 5912     vvvvv....ttt88.Y
   1ffe4:	5959 5454 cd54 cdcd cdcd cdcd 69cd cf69     YYTTT........ii.
   1fff4:	69cf 6969 6969 0c69 3669 48cb 440c 4870     .iiiiii.i6.H.DpH
   20004:	7070 48cb cb48 48cb cb70 4444 690c 6d36     pp.HH..Hp.DD.i6m
   20014:	6d2d d7d1 6dbb e91e 671e 2bdc c8bb 1277     -m...m...g.+..w.
   20024:	1212 7412 760d e879 d7d7 13e8 4079 4040     ...t.vy.....y@@@
   20034:	7e7e 7e40 3434 407e 347e 3434 7e34 407e     ~~@~44~@~4444~~@
   20044:	347e 1268 3468 347e 3434 407e e831 5d41     ~4h.h4~444~@1.A]
   20054:	6bb5 e231 cd34 cd54 4fcd 4f4f a9a9 a9a9     .k1.4.T..OOO....
   20064:	08a9 0808 1843 1305 1111 1111 1111 e2e2     ....C...........
   20074:	6a64 94e6 0bdb dbf1 948c 5f19 5f5f 765f     dj.........____v
   20084:	7676 3176 65fb 76af 7676 7676 c876 1919     vvv1.e.vvvvvv...
   20094:	1919 7474 3838 1238 5454 5454 cdcd cdcd     ..tt888.TTTT....
   200a4:	cdcd cdcd 0ccd 0c0c 69cb 690c cbcf 69cb     .........i.i...i
   200b4:	0c0c cbcb 0c48 00d3 4870 4848 69cb cb6d     ....H...pHHH.im.
   200c4:	4848 6dcb 690c cbcb d36d 4469 d120 1e1e     HH.m.i..m.iD ...
   200d4:	2be9 336e 7777 1e77 1212 1212 0d68 0d0d     .+n3www.....h...
   200e4:	1379 e8e8 31e8 0d79 1268 1254 5459 5454     y....1y.h.T.YTTT
   200f4:	3468 7e34 347e 4040 6812 dd46 6846 6854     h44~~4@@.hF.FhTh
   20104:	347e 4034 4131 5df3 6b6b e2e8 4040 cdcd     ~44@1A.]kk..@@..
   20114:	cdcd 4f4f 4f3b a9a9 0808 0808 7a6d 9a18     ..OO;O......mz..
   20124:	31a0 1111 1111 e211 f57e e66a 0b57 f10b     .1......~.j.W...
   20134:	24db 3466 5f5f 5f5f 7676 5e40 fce3 7633     .$f4____vv@^..3v
   20144:	7676 7676 c876 c80d c876 7419 3838 1238     vvvvv...v..t888.
   20154:	5454 cd54 3b3b cd3b cdcd cdcd cdcd e90c     TTT.;;;.........
   20164:	cb0c cbcb cbcb 0c69 2d2d 3669 4836 2d0c     ......i.--i66H.-
   20174:	7070 4848 2dcb 2ab0 36cb 7036 3648 3636     ppHH.-.*.66pH666
   20184:	0c69 690c ab0c bbd1 1ee9 33dc 1e77 1e77     i..i.......3w.w.
   20194:	4e12 124e 1212 0d34 0d0d 1379 13e8 68c8     .NN...4...y....h
   201a4:	dd46 a1a1 d9d9 a1d9 dda1 6802 6812 407e     F..........h.h~@
   201b4:	5959 75a1 58df d958 1259 7e7e 06e2 f3f3     YY.u.XX.Y.~~....
   201c4:	5d5d 31e8 4040 547e cdcd 4fcd 3b4f 4f3b     ]].1@@~T...OO;;O
   201d4:	a53b 3b08 3b54 7ad4 9a18 e2dc 1111 1111     ;..;T;.z........
   201e4:	7ee2 94e6 3257 7272 0bf1 e1e6 5fa4 765f     .~..W2rr.....__v
   201f4:	7676 2040 e310 7613 7676 0d0d 7676 0d0d     vv@ ...vvv..vv..
   20204:	7676 77c8 1274 1212 5454 cd54 3bcd 4f4f     vv.wt...TTT..;OO
   20214:	cd3b cdcd cd0c e9cd 2d6d cfcb 6969 cbcb     ;.......m-..ii..
   20224:	cbcb 6969 3636 6948 4869 4848 6936 011b     ..ii66HiiHHH6i..
   20234:	cb2d 3636 7048 3648 cb36 0c69 0c0c 646d     -.66HpH66.i...md
   20244:	4e77 2b77 1eab 1e1e 121e 4e4e 1212 6812     wNw+......NN...h
   20254:	0d0d 400d 120d a168 58df df58 dfdf dfdf     ...@..h..XX.....
   20264:	5858 5858 d958 5902 a5a9 2323 a1a4 df75     XXXXX..Y..##..u.
   20274:	d9df 6868 4511 f3f3 e841 3131 7e40 1240     ..hh.E..A.11@~@.
   20284:	5459 cdcd 3b4f 3b54 3b3b 54a5 543b 43a5     YT..O;T;;;.T;T.C
   20294:	187a 619a e231 1111 1111 6a2b 5732 72db     z..a1.....+j2W.r
   202a4:	f172 940b ddd8 765f 7676 af40 0f65 7676     r....._vvv@.e.vv
   202b4:	7676 0d76 4646 0d46 760d 46c8 3874 5912     vvv.FFF..v.Ft8.Y
   202c4:	5454 5454 3bcd 4f4f 4f4f cd4f 0ccd cdcd     TTTT.;OOOOO.....
   202d4:	0c0c cf6d 0c0c cbcb 69cb 6969 36cb 4836     ..m......iii.66H
   202e4:	6936 4848 cb48 8a43 6943 36cb 7048 6970     6iHHH.C.Ci.6Hppi
   202f4:	0c0c d369 44d3 e90c 77bb 4e4e 2b1e 1e1e     ..i..D...wNN.+..
   20304:	1e1e 1212 4e4e 1212 3474 0d34 5412 f7a1     ....NN..t44..T..
   20314:	f7da dfdf 7575 d975 a1d9 a1a1 d90a 58df     ....uuu........X
   20324:	02d9 a908 b723 a102 dfdf a1d9 3159 6e41     ....#.......Y1An
   20334:	3141 40e2 7e40 6840 6859 cd54 4fcd 5454     A1.@@~@hYhT..OTT
   20344:	cdcd 54cd cd54 59cd d459 187a dc01 11e2     ...TT..YY.z.....
   20354:	1111 727e 326a 7257 722f dbf1 c86a 7611     ..~rj2Wr/r..j..v
   20364:	4076 0f76 f265 7640 7676 7676 460d 4646     v@v.e.@vvvvv.FFF
   20374:	0d46 0d19 7474 1238 5454 5454 cdcd 4f4f     F...tt8.TTTT..OO
   20384:	4fa9 cf4f cdcd cd0c cfcd 69cb 69cb cbcb     .OO........i.i..
   20394:	6969 cbcb 3669 4848 cb48 48cb cb48 050c     ii..i6HHH..HH...
   203a4:	6961 cbcb 4848 cb70 e9d3 0c0c 6dd3 0c44     ai..HHp......mD.
   203b4:	1ee9 4e77 bb0c 1e64 1e1e 381e 4e12 1254     ..wN..d....8.NT.
   203c4:	7774 0d77 744e dadf 75df 5f75 a1a1 a1a1     tww.Nt...uu_....
   203d4:	a4a1 0202 0202 29a4 d9a1 df58 a9b2 b2a5     .......)..X.....
   203e4:	a102 d9df b2a1 3d13 310e 4040 7e7e 0d40     .......=.1@@~~@.
   203f4:	0254 5459 cdcd 59a9 5459 cdcd 5954 cd54     T.YT...YYT..TYT.
   20404:	b254 a877 8218 e21b 1111 0211 94ed 3232     T.w...........22
   20414:	2fe5 0b72 9424 1146 dd40 e35e 1310 76dd     ./r.$.F.@.^....v
   20424:	7640 7676 4676 4646 4646 0d46 7446 1238     @vvvvFFFFFF.Ft8.
   20434:	5454 5454 cdcd 4fcd a9a9 4f4f cdcf cfcd     TTTT...O..OO....
   20444:	cfcf cbcf cb36 6969 cbcb cbcb 6969 cb69     ....6.ii....iii.
   20454:	4848 48cb 4848 43cb 6da0 cbcb 4836 7048     HH.HHH.C.m..6HHp
   20464:	d369 e9e9 0c69 446d 0c0c 77e9 4e4e ab2b     i...i.mD...wNN+.
   20474:	1e1e 7777 1e1e 5412 1212 c877 46cd d9da     ..ww...T..w..F..
   20484:	46dd 59b2 a559 a5a5 a5a5 a5a5 a5a5 23a5     .F.YY..........#
   20494:	b723 a1a4 dfd9 a5a1 b208 a1a4 a1d9 79b2     #..............y
   204a4:	455d 7e40 3434 0d40 0254 54b2 cd54 a94f     ]E@~44@.T..TT.O.
   204b4:	59b2 cd54 5454 5459 54cd 0259 a8e5 1b82     .YT.TTYT.TY.....
   204c4:	e231 1111 5777 3232 e5db 0b2f 320b a45a     1...wW22../..2Z.
   204d4:	4040 655b 7637 40dd 760d 7676 0d76 4646     @@[e7v.@.vvvv.FF
   204e4:	7474 7474 7474 3874 5459 5454 cdcd 4fcd     ttttttt8YTTT...O
   204f4:	a94f 4f1f cf4f 4fcf 4f4f cbcb cb36 69cb     O..OO..OOO..6..i
   20504:	cbcb cbcb 0c69 0c0c 7036 4836 4870 6948     ....i...6p6HpHHi
   20514:	6d43 cb36 4848 7048 7070 1e69 69e9 e90c     Cm6.HHHpppi..i..
   20524:	0ce9 e90c 4e77 2b1e 77bb ab77 1e77 121e     ....wN.+.ww.w...
   20534:	124e 7712 464e ddf7 59b2 5459 0808 a9a9     N..wNF...YYT....
   20544:	a9a9 a9a9 08a9 a508 a5a5 23a5 02b7 d929     ...........#..).
   20554:	46df 23a5 d929 02a1 3112 7e40 7e34 6840     .F.#)....1@~4~@h
   20564:	dd3b 2302 5454 1fcd b254 5459 5454 5954     ;..#TT..T.YTTTTY
   20574:	5459 5954 ddb2 824d 311b e2e2 ae7e ed6a     YTTY..M..1..~.j.
   20584:	7232 2fe5 720b b494 7602 650f 40af dddd     2r./.r...v.e.@..
   20594:	c946 0dc9 4646 b268 74b2 6874 6868 1212     F...FFh..tthhh..
   205a4:	5412 5454 cdcd cfcd a94f 1f1f 4f4f cfcf     .TTT....O...OO..
   205b4:	cf1f 36cb 3636 69cb 69cb 6969 69cb 6969     ...666.i.iii.iii
   205c4:	4836 4848 4848 7000 cb36 4848 4848 7048     6HHHHH.p6.HHHHHp
   205d4:	7070 cf70 0c44 e90c 0cd3 0ccd 7738 1e38     ppp.D.......8w8.
   205e4:	1e77 771e 7764 7777 1212 744e 121e 4675     w..wdwww..Nt..uF
   205f4:	5459 a908 08a9 59a5 02b2 0202 59b2 08a5     YT.....Y.....Y..
   20604:	a9a9 08a9 a5a5 23a5 29b7 d9d9 59b2 a102     .......#.)...Y..
   20614:	b2a4 7e68 3434 4f68 a13b 2302 54a5 3b54     ..h~44hO;..#.TT;
   20624:	b21f 59b2 5454 5454 b259 5454 b754 a102     ...YTTTTY.TTT...
   20634:	6143 1131 68e2 5722 8ced e5e5 7272 9472     Ca1..h"W....rrr.
   20644:	25d1 fcea 7e13 dd40 46dd 4646 e876 80d7     .%...~@..FFFv...
   20654:	5f5e b268 5968 5959 5459 5454 cdcd cfcd     ^_h.hYYYYTTT....
   20664:	4f4f 1fa9 1f1f cf4f 1fcf cbcf 3636 3636     OO....O.....6666
   20674:	cb36 6969 cbcb 3636 4848 4848 4848 0048     6.ii..66HHHHHHH.
   20684:	7000 4870 4848 7070 7070 1f1f 0c36 0ccf     .ppHHHpppp..6...
   20694:	bf6d cde9 4e0c 381e 4e4e 1e4e 2b2b ab77     m....N.8NNN.++w.
   206a4:	1277 5412 4e68 465f a954 081f a1b2 58df     w..ThN_FT......X
   206b4:	5858 5858 5858 5858 d958 02a1 a9a5 a5a9     XXXXXXXXX.......
   206c4:	2323 0223 d9a4 b2a1 5459 a923 5454 1fa9     ###.....YT#.TT..
   206d4:	d959 2302 a5a5 54a5 3ba9 59b2 5454 543b     Y..#...T.;.YTT;T
   206e4:	5954 59b2 543b b723 5fdd 7977 11e2 571e     TY.Y;T#.._wy...W
   206f4:	eded bf51 72e5 5172 afe6 f0d6 3425 40dd     ..Q..rrQ....%4.@
   20704:	6846 5e46 e062 e0e0 c6f4 b9c6 5968 5959     FhF^b.......hYYY
   20714:	5459 5454 cdcd cfcd 4fcf 4f4f 1f1f 4f1f     YTTT.....OOO...O
   20724:	cbcf cb1f 3636 cbcb cb36 69cb cb69 36cb     ....66..6..ii..6
   20734:	4848 4848 4848 4848 0000 0000 7000 7070     HHHHHHHH.....ppp
   20744:	7070 1f70 3636 cf36 d30c cd44 0ccd 4e4e     ppp.666...D...NN
   20754:	4e12 4e54 ab1e bbbb 742b 121e 5454 6854     .NTN....+t..TTTh
   20764:	a9a9 dd54 f775 dff7 d975 a1a1 a1a1 a1a1     ..T.u...u.......
   20774:	0a0a 88d9 5858 02d9 a908 a508 2323 a4b7     ....XX......##..
   20784:	29a1 02a4 23b2 b254 d9d9 23b2 a5a5 a5a5     .)...#T....#....
   20794:	1f54 b2b2 a559 0854 a5a5 5959 54b2 a5a5     T...Y.T...YY.T..
   207a4:	b7b7 75dd 3446 787e 8c57 2f8c e5bf 4d72     ...uF4~xW../..rM
   207b4:	5a8c 216f 3d7c 345e 0234 625e f4f4 3d3d     .Zo!|=^44.^b..==
   207c4:	623d 5062 da50 5959 5459 5454 cdcd 4fcd     =bbPP.YYYTTT...O
   207d4:	4f4f cf4f 364f 1f1f cf1f 7036 3648 cb36     OOO.O6....6pH66.
   207e4:	cbcb cb36 6969 36cb 3636 4848 7048 7070     ..6.ii.666HHHppp
   207f4:	7048 0000 0000 7000 7070 7070 1f1f cf36     Hp.....ppppp..6.
   20804:	0c0c 0c6d 54cd cd54 4e54 544e 7712 7777     ..m..TT.TNNT.www
   20814:	77c8 7712 5974 3b54 54a9 df5f 75df a1d9     .w.wtYT;.T_..u..
   20824:	a1a1 29a1 2929 a1a1 a1a1 2929 a129 d9a1     ...)))....)))...
   20834:	df58 b2dd a523 a5a5 0808 a508 b259 a1dd     X...#.......Y...
   20844:	a4d9 a523 a5a5 a5a5 a9a5 02a5 23b2 54a5     ..#..........#.T
   20854:	a508 23a5 b7b2 08b2 23a5 b7b7 f7dd 08dd     ...#.....#......
   20864:	3273 908c bfbf 72bf 32e5 20e1 80d7 465e     s2.....r.2. ..^F
   20874:	5fb7 f462 62c6 3d3d 6262 5062 da50 c950     ._b..b==bbbPP.P.
   20884:	5454 5454 cdcd cfcd 4f4f cf4f 4fcf 1f36     TTTT....OOO..O6.
   20894:	1f1f 701f 3670 3636 36cb 3636 cbcb cbcb     ...pp666.666....
   208a4:	3636 4836 4848 4870 fafd 7070 0000 0000     666HHHpH..pp....
   208b4:	7000 7070 1f1f 4f1f 0c0c cdcd 54cd 4e54     .ppp...O.....TTN
   208c4:	cd54 5454 7454 2b2b 7777 7412 1277 1274     T.TTTt++ww.tw.t.
   208d4:	46a9 75df a1d9 dda1 a1dd 02dd 0202 0202     .F.u............
   208e4:	b702 a402 29a4 a129 a1a1 d90a d9d9 a1d9     .....)).........
   208f4:	dda1 dddd a1a1 a1a1 2302 a5a5 a5a5 a5a5     .........#......
   20904:	a5a5 02a9 2302 a5a5 0823 a554 b2a5 b259     .....#..#.T...Y.
   20914:	0859 2323 b7b7 dadd 2274 908c ab0b bfbf     Y.##....t"......
   20924:	ae2f e5e6 7640 2302 3002 f4f4 6262 6262     /...@v.#.0..bbbb
   20934:	5062 50b9 5050 dff7 54a1 5454 cdcd 4fcd     bP.PPP...TTT...O
   20944:	4f4f 4f4f 364f 3636 1f1f 1f1f 1f70 36cb     OOOOO666....p..6
   20954:	3636 3636 cb36 36cb cb36 36cb 4848 4848     66666..66..6HHHH
   20964:	fafd 0063 0070 0000 0000 7070 1f70 1f1f     ..c.p.....ppp...
   20974:	cf4f cdcd cdcd 5454 5454 3b54 543b 2b12     O.....TTTTT;;T.+
   20984:	b3b3 74c8 1277 7412 a174 7575 a15f a1a1     ...tw..tt.uu_...
   20994:	02dd 23b2 08a5 0808 0808 a5a5 23a5 b7b7     ...#.........#..
   209a4:	b7b7 a402 dda4 a1a1 a1a1 a1a1 a429 b7b7     ............)...
   209b4:	a523 a5a5 a5a5 a5a5 a5a5 021f 23a4 a523     #............##.
   209c4:	23a5 a508 a5a5 b223 a423 a9b2 2323 b7b7     .#....#.#...##..
   209d4:	d3a4 9081 ae9b bfbb aebf e6ae b274 0223     ............t.#.
   209e4:	6280 62f4 5062 b950 b9b9 6262 f750 a175     .b.bbPP...bbP.u.
   209f4:	b2dd 543b cdcd 3bcd 4f4f 364f 3636 3636     ..;T...;OOO66666
   20a04:	1f36 1f1f 7070 3636 4848 6936 3669 3636     6...pp66HH6ii666
   20a14:	3636 cbcb 4836 4848 0715 fdfa 7000 7070     66..6HHH.....ppp
   20a24:	0070 7000 7070 1f1f cfa9 cdcd 4ee9 54cd     p..ppp.......N.T
   20a34:	5454 cd54 3b3b 123b c877 b3d1 c879 1274     TTT.;;;.w...y.t.
   20a44:	d946 5f75 dda1 a15f a5b2 0808 0808 0808     F.u_.._.........
   20a54:	0808 a508 a5a5 a5a5 23a5 2323 2323 b7b7     .........#####..
   20a64:	b7b7 23b7 a523 a5a5 a5a5 a5a5 a5a5 a5a5     ...##...........
   20a74:	a5a5 b2a9 b2a1 2323 a5a5 0823 a5a5 a5a5     ......##..#.....
   20a84:	b2b2 a123 0868 2323 a5b7 ed63 9797 bbbf     ..#.h.##..c.....
   20a94:	bfbf 72bf 6832 305f 6262 b97c b9b9 f7f7     ...r2h_0bb|.....
   20aa4:	b9f7 b950 5f80 02dd b2b2 3b23 3b3b cdcd     ..P.._....#;;;..
   20ab4:	4f4f 4f4f 3636 3636 1f36 1f70 701f 4870     OOOO66666.p..ppH
   20ac4:	3648 4848 3636 3648 3636 cbcb cbcb cbcb     H6HH66H666......
   20ad4:	0715 fd63 0015 7070 7000 0000 7070 1f70     ..c...pp.p..ppp.
   20ae4:	a91f 4fcf e9cd cdcd 4e54 5454 5454 5454     ...O....TNTTTTTT
   20af4:	1e54 2b77 79b3 7713 7546 a15f dda1 dda1     T.w+.y.wFu_.....
   20b04:	0823 0808 0808 0808 0808 0808 0808 0808     #...............
   20b14:	0808 0808 a508 a5a5 a5a5 a5a5 a5a5 a5a5     ................
   20b24:	a5a5 a5a5 a5a5 a5a5 a5a5 02a9 02d9 2323     ..............##
   20b34:	08a5 59a5 a5a9 a5a5 23a5 b2b2 a123 a5a1     ...Y.....#..#...
   20b44:	23a5 733b 9773 4497 bf44 78bf 9090 f4f7     .#;ss..DD..x....
   20b54:	b962 f7b9 f7f7 daf7 dada 75f7 34c9 b2b2     b..........u.4..
   20b64:	b2b2 a5b2 3b08 3b3b 4f4f 4f4f 364f 3636     .....;;;OOOOO666
   20b74:	3636 701f 3670 7048 7070 4848 4848 4848     66.pp6HpppHHHHHH
   20b84:	cb36 cbcb cbcb 1e0c faec 4a63 0048 0000     6.........cJH...
   20b94:	0070 7000 7000 7070 4fcf 4f4f 4e4f cde9     p..p.ppp.OOOON..
   20ba4:	5454 4e4e 5454 5454 5454 1212 bb77 2b2b     TTNNTTTTTT..w.++
   20bb4:	7546 a1d9 a1a1 a1a1 a5b2 0808 a908 08a9     Fu..............
   20bc4:	a908 0808 0808 0808 0808 0808 a508 a508     ................
   20bd4:	a5a5 a5a5 a5a5 a5a5 a5a5 a5a5 a5a5 a5a5     ................
   20be4:	a9a5 dd08 a4df 2323 a523 23a5 08b2 a5a5     ......###..#....
   20bf4:	a5a5 b7a5 b702 a1b7 02d9 2da5 9722 891c     ...........-"...
   20c04:	441e 7844 ed44 f772 f7b9 f7f7 b9f7 dada     .DDxD.r.........
   20c14:	d9df a4a1 6868 5968 5959 2323 3b08 3b3b     ....hhhYYY##.;;;
   20c24:	4f3b 4f4f 3636 3636 3636 7036 7070 7036     ;OOO6666666ppp6p
   20c34:	7070 7070 4870 4848 3648 69cb 6969 3e0c     pppppHHHH6.iii.>
   20c44:	91ab 4a63 0048 0000 0000 0000 0000 7070     ..cJH.........pp
   20c54:	cfcf cf4f cd4f cd4e 54cd 5454 544e cd54     ..O.O.N..TTTNTT.
   20c64:	543b 4e54 1212 1277 df68 46a1 5459 cd54     ;TTN..w.h..FYTT.
   20c74:	54cd 2323 a9a5 a9a9 a9a9 a9a9 08a9 0808     .T##............
   20c84:	0808 0808 0808 0808 a508 a5a5 a5a5 a5a5     ................
   20c94:	a5a5 a5a5 a5a5 08a5 a9a9 d9b2 a4df 2323     ..............##
   20ca4:	2323 a5a5 0223 a5a9 a5a5 a5a5 b7a5 b202     ##..#...........
   20cb4:	ddb7 a4d9 7391 8989 e978 4444 4444 44ed     .....s..x.DDDD.D
   20cc4:	b975 f7f7 dff7 5f75 a4a1 b702 b2b7 59b2     u.....u_.......Y
   20cd4:	5459 54a5 a93b 3b3b cdcd 4f4f 3636 1f4f     YT.T;.;;..OO66O.
   20ce4:	3636 1f36 1f70 701f 7070 4870 7070 7070     666.p..ppppHpppp
   20cf4:	4848 cb36 0c69 7969 aef6 ec89 0048 0000     HH6.i.iy....H...
   20d04:	0000 0000 0000 7000 cd1f cd1f cdcd 4ecd     .......p.......N
   20d14:	cdcd 5454 5454 5454 3b54 5454 4e54 1212     ..TTTTTTT;TTTN..
   20d24:	d959 a968 1f1f 1f1f 1f1f 701f a5a9 a9a5     Y.h........p....
   20d34:	a9a9 a9a9 a9a9 a9a9 a908 0808 0808 0808     ................
   20d44:	0808 a508 a5a5 a5a5 08a5 a9a9 a9a9 08a9     ................
   20d54:	0254 dfd9 a4d9 2323 2323 a5a5 23a5 08a4     T.....####...#..
   20d64:	a508 a5a5 a5a5 b7a5 b2b2 02b7 1c59 8997     ............Y...
   20d74:	6d89 6de9 d344 2278 dd74 dd02 a1a1 a1a1     .m.mD.x"t.......
   20d84:	dda1 a4a4 0202 b202 5459 54a5 0854 3ba9     ........YT.TT..;
   20d94:	cd3b 4f3b 1f4f 3636 361f 3636 1f70 361f     ;.;OO.66.666p..6
   20da4:	7036 7070 7070 7070 3670 36cb 69cb 770c     6pppppppp6.6.i.w
   20db4:	338b ec91 0048 0000 7000 0000 0000 7000     .3..H....p.....p
   20dc4:	cf70 364f cdcd 4e4f 3b38 54cd 4e54 544e     p.O6..ON8;.TTNNT
   20dd4:	5454 5454 5454 1254 dd54 1f3b 1f1f 1f1f     TTTTTTT.T.;.....
   20de4:	1f1f 1f1f 701f 0870 a9a5 a9a9 a9a9 a9a9     .....pp.........
   20df4:	a9a9 a9a9 0808 0808 0808 0808 0808 08a5     ................
   20e04:	a9a9 b2a5 a1dd d9a1 58d9 d958 a4a1 2323     .........XX...##
   20e14:	2323 a523 a5a5 a4a5 a959 a5a5 a5a5 a5a5     ###.....Y.......
   20e24:	23a5 b2b2 0cb7 8997 7889 e9e9 d36d 89e9     .#.......x..m...
   20e34:	021c dfda b2a1 2323 b7b7 23b7 2323 5423     ......##...####T
   20e44:	5454 3b54 3b3b 3ba9 3b3b 4f3b 1f4f 1f1f     TTT;;;.;;;;OO...
   20e54:	1f36 361f 701f 3670 7036 4870 7070 7070     6..6.pp66ppHpppp
   20e64:	7048 cb70 cf69 6d69 f606 6944 7036 0000     Hpp.i.im..Di6p..
   20e74:	0000 0070 0000 0000 7000 36cd cd1f cdcd     ..p......p.6....
   20e84:	4ee9 4ecd 54cd 5454 5454 5454 5454 5454     .N.N.TTTTTTTTTTT
   20e94:	5954 1f3b 1fa9 1f1f 1f1f 1f1f 1f1f 1f1f     TY;.............
   20ea4:	a970 a9a5 a9a9 a9a9 a9a9 a9a9 a9a9 0808     p...............
   20eb4:	0808 0808 0808 a908 0208 d9a1 5858 5858     ............XXXX
   20ec4:	dfdf d9d9 a4a1 2323 2323 a523 a5a5 a508     ......#####.....
   20ed4:	0202 a51f a5a5 a5a5 a5a5 23a5 e546 97fa     ...........#F...
   20ee4:	8989 e978 e9e9 e96d 911c 2308 a102 a1d9     ..x...m....#....
   20ef4:	b2a4 a523 08a5 0808 543b cd54 3b3b a93b     ..#.....;TT.;;;.
   20f04:	3b3b 1f4f 1f1f 4fa9 704f 1f70 7070 7070     ;;O....OOpp.pppp
   20f14:	7036 7070 7070 7070 3670 7036 6936 d30c     6pppppppp66p6i..
   20f24:	8b67 6979 48cb 0070 0000 0000 0000 0000     g.yi.Hp.........
   20f34:	0000 4f70 4f1f cdcd cd1e 543b 38e9 5454     ..pO.O....;T.8TT
   20f44:	544e 5454 5454 5454 5459 a954 1fa9 1f1f     NTTTTTTTYTT.....
   20f54:	1f1f 1f1f 1f1f 1f1f 1f1f a970 a9a5 a9a9     ..........p.....
   20f64:	a9a9 a9a9 a9a9 a9a9 a9a9 0808 0808 08a9     ................
   20f74:	d9dd d9d9 dfdf d9df d9d9 a1d9 02a1 23b7     ...............#
   20f84:	2323 a523 a5a5 08a5 0223 a9a1 a508 a5a5     ###.....#.......
   20f94:	a5a5 a5a5 e644 6389 8989 2d89 0c0c 6de9     ....D..c...-...m
   20fa4:	ffe9 0a1e dda1 b7b2 02b2 0202 a402 02a4     ................
   20fb4:	59b2 3ba5 a908 3ba9 a9a9 543b ddb2 d9a1     .Y.;...;..;T....
   20fc4:	8888 4f29 1f70 7070 7070 4870 7070 7070     ..)Op.pppppHpppp
   20fd4:	7070 cb48 3636 7869 06e5 0c3e cb69 7048     ppH.66ix..>.i.Hp
	...
   20fec:	0000 7070 7070 4f4f 1e4e cdcd 4e4e bbbb     ..ppppOON...NN..
   20ffc:	4e54 5454 5454 5454 5454 0854 1fa9 1f1f     TNTTTTTTTTT.....
   2100c:	1f1f 1f1f 1f1f 1f1f 1f1f 1f1f a91f a908     ................
   2101c:	a9a9 a9a9 a9a9 a9a9 a9a9 a9a9 08a9 591f     ...............Y
   2102c:	a1d9 d9a1 dfdf dfdf d9d9 a1d9 0229 23b7     ............)..#
   2103c:	2323 a523 a5a5 a5a5 2308 a1b2 a9b2 08a5     ###......#......
   2104c:	a5a5 54a5 e651 69bf 91ff 9189 0c0c 2d0c     ...TQ..i.......-
   2105c:	6d2d 741c 5888 5858 8858 0a0a dda1 b202     -m.t.XXXX.......
   2106c:	ddb2 88d9 d9d9 d90a d9d9 88d9 8888 8888     ................
   2107c:	8888 8888 7029 701f 7070 7070 7070 7070     ....)p.ppppppppp
   2108c:	7070 7048 6936 892d c889 0ce2 cb69 4848     ppHp6i-.....i.HH
   2109c:	0070 0000 0000 0000 0000 7000 7070 3670     p..........pppp6
   210ac:	1ecd 3b38 ab1e 381e 3864 5454 5454 5454     ..8;...8d8TTTTTT
   210bc:	5454 cd54 a9a9 1f1f 1f1f 1f1f 1f1f 1f1f     TTT.............
   210cc:	1f1f 1f1f 1f1f 081f 1f08 a9a9 a9a9 a9a9     ................
   210dc:	a9a9 a9a9 08a9 591f d958 dfd9 df58 d9d9     .......YX...X...
   210ec:	d9d9 a1a1 02a4 2323 2323 a523 a5a5 a5a5     ......#####.....
   210fc:	08a5 b223 a1dd 08a9 08a5 44a5 8ced 0838     ..#........D..8.
   2110c:	1cca 8991 0c91 0c0c 0c2d 63d3 2923 d9a1     ........-..c#)..
   2111c:	88d9 8888 5858 5858 29d9 59b2 a102 d9d9     ....XXXX.).Y....
   2112c:	0ad9 880a 0ad9 0a0a 0a0a 0a0a 0a0a 704f     ..............Op
   2113c:	7070 7070 7070 7070 7070 4870 cb48 89ca     pppppppppppHH...
   2114c:	2d91 4e0d cbcb 4836 7070 0000 0000 0000     .-.N..6Hpp......
   2115c:	0000 0000 7000 3670 cd1f cd38 7977 bb1e     .....pp6..8.wy..
   2116c:	bb1e 54ab 5454 5454 5454 3b54 083b a9a9     ...TTTTTTTT;;...
   2117c:	1f1f 1f1f 1f1f a9a9 1f1f 1f1f 1f1f 1f1f     ................
   2118c:	0800 a9a9 a9a9 a9a9 a9a9 a9a9 a9a9 08a9     ................
   2119c:	dd88 0854 5908 d946 a1d9 a1a1 b7a4 b723     ..T..YF.......#.
   211ac:	2323 a523 a5a5 a5a5 a5a5 2308 02b2 b2d9     ###........#....
   211bc:	081f 5154 bfed a508 63a9 9189 ca63 0ccd     ..TQ.....c..c...
   211cc:	2d0c 910c b791 a4a4 a1a1 0a0a d90a dfd9     .-..............
   211dc:	dfdf 5858 ddd9 6859 a129 a1a1 0a0a 0a0a     ..XX..Yh).......
   211ec:	0a0a a1a1 a1a1 cfdd 3670 7070 7070 7070     ........p6pppppp
   211fc:	7070 7070 ec48 6391 69ca cdcd cbcb 4836     ppppH..c.i....6H
   2120c:	7048 0000 0000 0000 0000 0000 0000 7070     Hp............pp
   2121c:	cd4f 4f4f 0e4e 54c8 1e1e 641e 5438 5454     O.OON..T...d8TTT
   2122c:	5454 5454 3b3b a908 1fa9 1f1f 1f1f 1f1f     TTTT;;..........
   2123c:	a9a9 1f1f 1f1f 1f1f cd1f 08a9 a9a9 a9a9     ................
   2124c:	a9a9 a9a9 a9a9 1fa9 a502 1f00 1f1f 1f1f     ................
   2125c:	dda9 a1d9 b702 2323 a523 a5a5 a5a5 a5a5     ......###.......
   2126c:	a5a5 08a5 b223 a1b2 540a e6d3 4e90 0808     ....#....T...N..
   2127c:	cb08 91ff 6391 690c 0c0c 0c2d 2d63 a4b7     .....c.i..-.c-..
   2128c:	2929 a1a1 a1a1 a1a1 d9d9 88d9 dfd9 d958     ))............X.
   2129c:	59b2 a429 29a4 a1a1 a1a1 dda1 dddd 6846     .Y)..)........Fh
   212ac:	703b 7036 7070 7070 7070 7070 0769 0791     ;p6pppppppppi...
   212bc:	4815 3648 3648 4848 7048 0070 0000 0000     .HH6H6HHHpp.....
   212cc:	0000 0000 7000 7000 7070 cdcd 33cd 12dc     .....p.ppp...3..
   212dc:	4e12 4e4e bbab 5454 5454 5454 3b54 0854     .NNN..TTTTTTT;T.
   212ec:	a9a9 1f1f 1f1f 1f1f 1fa9 1fa9 1f1f 1f1f     ................
   212fc:	1e1f 1213 a9a9 a9a9 a9a9 a9a9 a9a9 1fa9     ................
   2130c:	0808 a900 a9a9 a9a9 1fa9 021f b2a1 2323     ..............##
   2131c:	a523 a5a5 a5a5 a5a5 a5a5 08a5 2308 b2b2     #............#..
   2132c:	80a4 e693 0878 0808 0808 1c4a 6391 6991     ....x.....J..c.i
   2133c:	0c69 0c0c 632d a5cf 23a5 a402 2929 29a1     i...-c...#..)).)
   2134c:	a1a1 a1a1 88d9 d9df 58df cd02 5968 5454     .........X..hYTT
   2135c:	5454 5959 5959 5959 cd54 1f70 7070 7070     TTYYYYYYT.p.pppp
   2136c:	7070 cb70 fa4a ec91 7048 4870 4848 4848     ppp.J...HppHHHHH
   2137c:	4848 7070 0000 0000 0000 0000 0000 0000     HHpp............
   2138c:	7000 3636 1e4f 7779 4e77 54e9 1e54 54ab     .p66O.ywwN.TT..T
   2139c:	5454 5454 5454 5454 a908 1fa9 1f1f 1f1f     TTTTTTTT........
   213ac:	a91f a9a9 1f1f 1f1f 1e1f 6733 4f79 a908     ..........3gyO..
   213bc:	a9a9 1fa9 a9a9 a9a9 a91f 1f1f 1f1f 1f1f     ................
   213cc:	a91f a9a9 dd1f 23dd 2323 a5a5 08a5 08a5     .......###......
   213dc:	a5a5 a5a5 0808 b223 5bb2 ceea a95e 08a9     ......#..[..^...
   213ec:	0808 63a9 9163 ca63 6969 0c0c ca0c a963     ...cc.c.ii....c.
   213fc:	08a5 a5a5 b2a5 a4a4 dddd dda1 a1dd dfd9     ................
   2140c:	d9df dfd9 cd68 b212 59b2 5959 5454 cdcd     ....h....YYYTT..
   2141c:	cdcd 70cf 7070 7070 7070 4acb 0707 cbec     ...ppppppp.J....
   2142c:	7048 7070 4870 4848 4848 4848 0070 0000     HppppHHHHHHHp...
   2143c:	0000 0000 0000 001f 0000 4f70 cd4f 541e     ..........pOO..T
   2144c:	774e 4e4e 544e 3838 5454 5454 5454 5459     NwNNNT88TTTTTTYT
   2145c:	0854 a9a9 1f1f 1f1f 1f1f a9a9 1fa9 1f1f     T...............
   2146c:	121f 1379 3113 a912 a9a9 a9a9 1f1f a9a9     ..y..1..........
   2147c:	1fa9 1fa9 1f1f 1f1f 1f1f a91f 1fa9 a1a9     ................
   2148c:	a5b2 a5a5 0808 0808 0808 0808 0808 2308     ...............#
   2149c:	6619 5ba6 0aa1 0829 a91f 3608 91ff 6391     .f.[..)....6...c
   214ac:	690c 0cec ec2d fa91 a508 a5a5 0808 a508     .i..-...........
   214bc:	02b2 0202 dddd 4646 d9a1 d9df d9d9 cf54     ......FF......T.
   214cc:	54cd 5954 5959 5959 5959 cd54 7070 7070     .TTYYYYYYYT.pppp
   214dc:	4870 ca15 4a07 70cb 0000 7070 7070 4848     pH...J.p..ppppHH
   214ec:	4848 4848 7070 0000 0000 0000 0000 7000     HHHHpp.........p
   214fc:	0070 7000 3b36 4ecf 543b 381e 4e4e 1e54     p..p6;.N;T.8NNT.
   2150c:	5454 5454 5454 5954 3b59 08a5 1fa9 a91f     TTTTTTTYY;......
   2151c:	1f1f a9a9 a9a9 1fa9 121f 0d34 1379 7913     ..........4.y..y
   2152c:	08a9 a9a9 1fa9 1f1f a9a9 a91f 1f1f 1f1f     ................
   2153c:	1f1f 1f1f 1f1f 1fa9 a454 a5a5 0808 0808     ........T.......
   2154c:	0808 0808 a508 cd08 a6f1 7453 2902 0aa1     ..........St.)..
   2155c:	23a1 1f1f ff4a 6391 6991 ec69 2d0c 63ec     .#..J..c.ii..-.c
   2156c:	08ca a5a5 a5a5 3ba5 3b3b b254 6802 dd46     .......;;;T..hF.
   2157c:	5968 d9dd d9df a1d9 cfcf cdcf cdcd cdcd     hY..............
   2158c:	54cd 5454 704f 7070 1548 07ca 154a 7070     .TTTOpppH...J.pp
   2159c:	0070 7070 7070 7070 4848 4848 7070 0070     p.ppppppHHHHppp.
	...
   215b8:	7000 4f1f 3b4e 38cd 5438 544e 5454 544e     .p.ON;.88TNTTTNT
   215c8:	5454 5454 5959 a959 a908 1fa9 1f1f a91f     TTTTYYY.........
   215d8:	a9a9 1fa9 68a9 6868 0d34 1379 1279 0808     .....hhh4.y.y...
   215e8:	a9a9 1fa9 1f1f 1f1f 1fa9 1f1f 1f1f 1f1f     ................
   215f8:	1f1f 1f1f 1fa9 b7b2 08a5 0808 0808 0808     ................
   21608:	0808 4408 66e6 5964 0223 a1a4 0a0a a429     ...D.fdY#.....).
   21618:	faa9 63ff 0763 6969 ecec 0c0c 6963 0808     ...cc.ii....ci..
   21628:	0808 0808 3b3b 3b3b 593b 6868 dd68 5468     ....;;;;;Yhhh.hT
   21638:	d946 a1d9 68d9 cdcb cdcd cdcd cd54 cdcd     F....h......T...
   21648:	4f54 3670 caec 4a07 4815 7070 7070 7000     TOp6...J.Hpppp.p
   21658:	7070 7070 4848 7070 7070 7070 0000 0000     ppppHHpppppp....
   21668:	0000 7000 701f 0000 7000 7070 544f cd3b     ...p.p...pppOT;.
   21678:	3838 4e4e 5454 4e4e 5459 5454 5959 1259     88NNTTNNYTTTYYY.
   21688:	a959 1f1f 1f1f a9a9 1f1f a91f 6854 6868     Y...........Thhh
   21698:	3468 7634 7979 0879 a908 a9a9 1f1f 1f1f     h44vyyy.........
   216a8:	a91f 1f1f 1f1f 1f1f 1f1f 1f1f a91f 3b1f     ...............;
   216b8:	a502 0808 0808 0808 083b 5154 7294 2359     ........;.TQ.rY#
   216c8:	23b2 02b2 a1a4 a1a1 0229 ffec 631c 69ec     .#......)....c.i
   216d8:	ec69 ecec 63ca a5a9 3b08 3b3b 3b3b 3b3b     i....c...;;;;;;;
   216e8:	cd3b 54cd 6868 4668 5468 d974 a1a1 cfa1     ;..ThhhFhTt.....
   216f8:	cdcf cdcd cdcd cdcd cdcd 1536 4aca cbec     ..........6..J..
   21708:	7070 7070 7070 7070 7000 7070 7070 7070     pppppppp.ppppppp
   21718:	4870 7070 0070 0000 0000 0000 7000 001f     pHppp........p..
   21728:	0000 a970 7070 1f1f 38cd 381e 544e 3854     ..p.pp...8.8NTT8
   21738:	541e 5454 5959 1259 1212 3b59 1fa9 1f1f     .TTTYYY...Y;....
   21748:	a91f 593b 6868 68b2 6868 3434 0d0d 310d     ..;Yhh.hhh44...1
   21758:	a912 a9a9 a9a9 1f1f 1f1f 1f08 1f1f 1f1f     ................
   21768:	1f1f 1f1f 1f1f a9a9 021f 0823 0808 3b08     ..........#....;
   21778:	3b3b e678 e9ed a508 b259 2323 02b2 a1a1     ;;x.....Y.##....
   21788:	2929 a529 63ec 6991 ec69 ecec 07ec 1ffa     )))..c.ii.......
   21798:	0808 3b3b 3b4f 3b3b 3b3b cdcd 54cd 6868     ..;;O;;;;;...Thh
   217a8:	68b2 cd68 a168 d9a1 cf54 cfcf cdcd cdcd     .hh.h...T.......
   217b8:	cdcd 36cd 15ec 7048 7070 7070 7070 7070     ...6..Hppppppppp
   217c8:	7070 7070 7070 7070 4870 7048 0070 0000     pppppppppHHpp...
   217d8:	0000 0000 7000 0070 0000 0000 701f 1f70     .....pp......pp.
   217e8:	cd1f 1e38 381e 5454 bb12 5412 5959 5959     ..8..8TT...TYYYY
   217f8:	1259 5912 5959 5959 1259 0d74 680d 6868     Y..YYYYYY.t..hhh
   21808:	6868 3434 3434 0d34 7931 a9a9 a9a9 1fa9     hh44444.1y......
   21818:	1f1f a91f 1fa9 1f1f 1f1f 1f1f 1f1f a9a9     ................
   21828:	364f b259 0808 0808 e908 94e1 3bae 3b08     O6Y..........;.;
   21838:	23a5 23b2 59a5 a4b2 2929 2929 7002 ca69     .#.#.Y..)))).pi.
   21848:	6969 ecec ecec 4a91 4fa9 08a9 3b3b 4f4f     ii.....J.O..;;OO
   21858:	4f4f 3bcf cdcd 54cd b2b2 6868 cd54 a1dd     OO.;...T..hhT...
   21868:	46d9 cfcb cfcf cfcd cfcf cfcd 7070 7070     .F..........pppp
   21878:	7070 7070 4848 7036 7070 7070 7070 7070     ppppHH6ppppppppp
   21888:	4870 7048 7070 0000 0000 0000 0000 0000     pHHppp..........
   21898:	0000 0000 7070 7070 1f1f 383b 3838 544e     ....pppp..;888NT
   218a8:	1254 1277 5959 5959 1259 5968 5959 b259     T.w.YYYYY.hYYYY.
   218b8:	68b2 6834 2bc8 0dc8 6868 3468 3434 3434     .h4h.+..hhh44444
   218c8:	1340 3b13 a9a9 a9a9 1f1f 1f1f 081f 1f1f     @..;............
   218d8:	1f1f 1f1f 1f1f a91f 4f4f 0d1e 3bb2 083b     ........OO...;;.
   218e8:	ae08 90e6 08e9 083b a53b 59a5 a523 b723     ......;.;..Y#.#.
   218f8:	a4b2 2929 2929 cba9 69cf ec69 ecec 63ec     ..))))...ii....c
   21908:	a9ec a94f 4f4f 4f4f 4f4f cf4f cfcf cdcd     ..O.OOOOOOO.....
   21918:	59cd 59b2 68b2 5468 4654 cfa1 cfcf cfcf     .Y.Y.hhTTF......
   21928:	cfcf cdcf 001f 7070 7070 7070 3636 3636     ......pppppp6666
   21938:	7048 0070 0070 7070 7070 7048 7070 0000     Hpp.p.ppppHppp..
	...
   21954:	7000 701f 7070 a91f 543b 5454 1254 3812     .p.ppp..;TTTT..8
   21964:	5959 1212 6812 6812 5959 3468 6868 0d0d     YY...h.hYYh4hh..
   21974:	7468 c8c8 0dc8 6834 3434 3434 4034 e831     ht....4h44444@1.
   21984:	a912 a9a9 1fa9 1f1f 701f 1f08 1f1f 1f1f     .........p......
   21994:	a91f 4fa9 4f4f 161e b245 0854 ed6d 78e6     ...OOO..E.T.m..x
   219a4:	3b3b 083b 3ba9 a5a5 2359 a508 b723 2902     ;;;..;..Y#..#..)
   219b4:	b729 1fa5 69cb 1515 ecec ecec 36fa a9a9     )....i.......6..
   219c4:	4fa9 4f4f 4f4f 4f4f cfcf cfcf cd4f 54cd     .OOOOOOO....O..T
   219d4:	0259 3654 4848 5448 cfcd cfcf cfcf cfcf     Y.T6HHHT........
   219e4:	70cf 7070 7070 4870 3636 4e4f 704f 0070     .ppppppH66ONOpp.
   219f4:	0000 0000 7000 7070 0000 0000 0000 0000     .....ppp........
   21a04:	0000 0000 7070 0000 0000 0000 7070 3b70     ....pp......ppp;
   21a14:	a9a9 543b 5454 5954 1259 5959 6868 6868     ..;TTTTYY.YYhhhh
   21a24:	b268 0db2 3476 c868 680d 6868 0d0d 34c8     h...v4h..hhh...4
   21a34:	0234 3434 3434 3140 c813 a9a9 a91f 1f1f     4.4444@1........
   21a44:	1f1f a91f 1fa9 1f1f a9a9 a9a9 4fa9 0677     .............Ow.
   21a54:	e8b5 4e23 e697 0c51 cd08 3b3b a93b a53b     ..#N..Q...;;;.;.
   21a64:	23a5 a523 b2a5 b702 0008 0000 0000 1536     .##...........6.
   21a74:	1569 ecec fafa 4f1f a9a9 a9a9 4f4f 4f4f     i......O....OOOO
   21a84:	4f4f cfcf cfcf cf4f 59cd 4836 cb36 48cb     OO....O..Y6H6..H
   21a94:	4f36 cfcb cfcf cfcf 36cf 7000 7070 3670     6O.......6.pppp6
   21aa4:	3636 404f 3640 7070 0000 0000 0000 7000     66O@@6pp.......p
   21ab4:	0070 0000 0000 0000 0000 0000 0000 0000     p...............
   21ac4:	0000 7000 0070 7070 a9a9 3b08 5454 5912     ...pp.pp...;TT.Y
   21ad4:	3812 7712 6812 6874 6868 b2b2 130d 3476     .8.w.hthhh....v4
   21ae4:	c876 b268 6868 0d34 3434 3402 3434 4034     v.h.hh4.44.4444@
   21af4:	7979 3b79 1fa9 1f1f 1f1f 701f a9a9 a91f     yyy;.......p....
   21b04:	a9a9 1fa9 cd1f 31c8 f687 bf79 edbe a9d3     .......1..y.....
   21b14:	cd3b 3bcd 083b 3ba9 a5a5 23a5 2308 0802     ;..;;..;...#.#..
	...
   21b2c:	0000 7070 cb70 1f15 a9a9 a9a9 a9a9 4fa9     ..ppp..........O
   21b3c:	4f4f 4f4f cf4f cfcf 59cf 481f 3636 4848     OOOOO....Y.H66HH
   21b4c:	3648 cf4f cfcf 4f4f cf4f 7070 7070 7070     H6O...OOO.pppppp
   21b5c:	4f36 344f 129d 7036 0070 0000 0000 0000     6OO4..6pp.......
   21b6c:	0070 0000 7070 7000 7070 0000 0000 7070     p...pp.ppp....pp
   21b7c:	0000 0000 7070 7000 1f70 4f1f 593b 3838     ....pp.pp..O;Y88
   21b8c:	1212 1277 7477 7412 6868 6868 68b2 340d     ..w.wt.thhhh.h.4
   21b9c:	7634 6876 b2b2 0d68 340d 3434 3434 3434     4vvh..h..4444444
   21bac:	400d af79 08b4 1f1f 1f1f 1f1f 1f1f 1fa9     .@y.............
   21bbc:	a9a9 701f 1e4f 7931 7976 e35b bf5a a94f     ...pO.1yvy[.Z.O.
   21bcc:	3b3b cdcd 3bcd 4f3b a53b a508 b2a5 0023     ;;...;;O;.....#.
	...
   21be4:	0000 7000 a91f 701f 1f4f a94f a9a9 a9a9     ...p...pO.O.....
   21bf4:	4f4f 4f4f 4f4f cb36 594f 481f 3636 4848     OOOOOO6.OY.H66HH
   21c04:	4848 363b cfcf 364f cb36 0048 7070 7070     HH;6..O66.H.pppp
   21c14:	cf36 124f e29d 364f 0070 0000 0000 7000     6.O...O6p......p
   21c24:	0000 0000 7000 4870 7048 7070 0070 0000     .....ppHHpppp...
	...
   21c3c:	7070 1f1f 54a9 3838 3838 7712 7412 5974     pp...T8888.w.ttY
   21c4c:	1268 6868 6868 59b2 b2b2 3468 6834 6868     h.hhhh.Y..h44hhh
   21c5c:	c8c8 340d 0234 3402 f279 fc37 3765 a954     ...44..4y.7.e7T.
   21c6c:	a91f 1f1f 1fa9 a91f 1fa9 4f1f 791e 7913     ...........O.y.y
   21c7c:	d176 65fb 1e0f 3b08 4fa9 cd3b cdcd 4f4f     v..e...;.O;...OO
   21c8c:	3b4f a53b 59a5 00a5 0000 0000 0000 0000     O;;..Y..........
   21c9c:	0000 0000 1f1f 4f1f 1f1f 1f36 361f 3636     .......O..6..666
   21cac:	3636 4f4f 3636 364f 5436 48a9 4836 4848     66OO66O66T.H6HHH
   21cbc:	4848 1fcf 4f36 3636 cb36 0036 7070 7070     HH..6O666.6.pppp
   21ccc:	3670 4ecf 9d3e 3612 7036 7000 0000 0000     p6.N>..66p.p....
   21cdc:	0070 7000 7070 4848 4848 4848 4848 0000     p..pppHHHHHHHH..
	...
   21cf4:	7000 1f70 a91f 7454 3874 1238 1274 7474     .pp...Ttt88.t.tt
   21d04:	5959 68b2 6868 6868 6868 b268 68b2 6868     YY.hhhhhhhh..hhh
   21d14:	0d68 c879 3434 2c2b 2ee3 fbfc 795b c831     h.y.44+,....[y1.
   21d24:	1fa9 a91f 1fa9 a91f 1f1f 1e4f 4513 7931     ..........O..E1y
   21d34:	7167 e365 0dd1 4f74 a908 3b4f cdcd 4fcf     gqe...tO..O;...O
   21d44:	4f4f 3b4f 233b 00a9 0000 0000 0000 0000     OOO;;#..........
   21d54:	0000 0000 1f70 701f a91f 3670 1f1f 361f     ....p..p..p6...6
   21d64:	3636 3636 4f36 364f 3b36 7008 4848 4848     66666OO66;.pHHHH
   21d74:	4848 1f36 4f36 3636 3636 0036 7070 7070     HH6.6O66666.pppp
   21d84:	361f 3b4f 9d40 cde2 4836 0000 7000 7000     .6O;@...6H...p.p
   21d94:	7000 7070 4848 4848 4848 1548 1515 00fd     .pppHHHHHHH.....
   21da4:	7070 0000 0000 7000 7070 7070 361f 54a9     pp.....ppppp.6.T
   21db4:	7412 7474 1212 6812 5974 6859 6868 6868     .ttt...htYYhhhhh
   21dc4:	6868 6868 6868 68b2 3468 0d34 2c79 fce3     hhhhhh.hh44.y,..
   21dd4:	53e3 76d1 4040 7976 7745 1fa9 1f1f 1f1f     .S.v@@vyEw......
   21de4:	4ea9 13c8 13e8 1331 fcaf f2fc 0dc8 0d0d     .N....1.........
   21df4:	a93b a9a9 cd4f cfcd 4f4f a9a9 543b 00a9     ;...O...OO..;T..
	...
   21e0c:	1500 4815 7070 1f00 701f 1fa9 1f1f 3636     ...Hpp...p....66
   21e1c:	1f1f 3636 3636 3636 3b36 703b 4848 4848     ..6666666;;pHHHH
   21e2c:	4848 a936 4f1f 3636 3636 7036 7000 7070     HH6..O66666p.ppp
   21e3c:	3670 4f36 3e12 123e 3636 0070 0000 0000     p66O.>>.66p.....
   21e4c:	7070 4848 4848 1548 1515 fd15 4a4a 0707     ppHHHHH.....JJ..
	...
   21e64:	0000 1f70 1f1f 4f36 543b 7412 1274 1268     ..p...6O;T.tt.h.
   21e74:	340d 5959 6868 740d 7434 6868 6868 b268     .4YYhh.t4thhhhh.
   21e84:	6868 c834 fc53 71fc 0dd1 3434 7676 7676     hh4.S..q..44vvvv
   21e94:	3131 3145 1277 4e54 6777 e8e8 3113 af31     11E1w.TNwg...11.
   21ea4:	6510 7971 0d0d 0d0d 4e0d a9a9 4fa9 cfcf     .eqy.....N...O..
   21eb4:	4fcf a94f a5a9 001f 0000 0000 0000 0000     .OO.............
   21ec4:	0000 cb15 7048 7070 7000 1f1f 70a9 1f1f     ....Hppp.p...p..
   21ed4:	361f 1f36 3636 3636 4f36 703b 4870 4848     .66.66666O;ppHHH
   21ee4:	4848 1f36 3648 3636 3636 7048 7070 7070     HH6.H66666Hppppp
   21ef4:	7070 3636 403b 343e 364f 7048 0000 0000     pp66;@>4O6Hp....
   21f04:	4870 4848 1548 1515 4afd 0707 0707 4a4a     pHHHH....J....JJ
   21f14:	00fd 0000 0000 0000 0000 7070 1f1f 361f     ..........pp...6
   21f24:	3b4f 1254 7474 6812 130d b268 b2b2 0d68     O;T.tt.h..h...h.
   21f34:	6874 3434 6868 6868 6868 712b 6ffc 79b4     th44hhhhhh+q.o.y
   21f44:	0d0d 340d 7634 7679 3176 3131 e813 13e8     ...44vyvv111....
   21f54:	e845 1313 3113 3733 3765 76d1 c876 0d0d     E....137e7.vv...
   21f64:	770d 4f74 a9a9 cf4f cfcf a94f 08a9 0070     .wtO..O...O...p.
	...
   21f7c:	0000 1548 7015 7070 7070 7000 a91f 1f70     ..H..ppppp.p..p.
   21f8c:	1f1f 361f 3636 3636 3636 703b 7070 7000     ...6666666;ppp.p
   21f9c:	4848 3648 4870 4848 4836 0070 7070 7070     HHH6pHHH6Hp.pppp
   21fac:	7070 3670 1236 e23e 36cd 7048 7070 4870     ppp66.>..6HppppH
   21fbc:	4848 4848 1515 4afd 0707 4a07 fd4a 1515     HHHH...J...JJ...
   21fcc:	4848 0000 0000 0000 0000 0000 3670 1f36     HH..........p66.
   21fdc:	4f36 543b 7459 1274 0d74 68c8 5959 68b2     6O;TYtt.t..hYY.h
   21fec:	6868 6868 6834 6868 c8b2 fc53 5b10 6834     hhhh4hhh..S..[4h
   21ffc:	c834 0dc8 3434 7976 3176 3131 1331 1313     4...44vyv1111...
   2200c:	1313 1313 1331 650f 5b10 7679 c876 c80d     ....1..e.[yvv...
   2201c:	770d 7474 1f4e 4f3b cfcf 4f4f a93b 0070     .wttN.;O..OO;.p.
	...
   22034:	0000 1500 15cb 7000 7070 7070 0070 a91f     .......pppppp...
   22044:	3670 3636 3636 3636 3648 704f 1f70 7070     p6666666H6Opp.pp
   22054:	7070 4848 4870 3636 7048 7070 7070 7070     ppHHpH66Hppppppp
   22064:	7070 3670 cf36 e240 36cd 4836 4870 4848     ppp66.@..66HpHHH
   22074:	4848 1548 4afd 0707 4a4a 15fd 1515 4848     HHH..J..JJ....HH
   22084:	4848 0048 0000 0000 0000 0000 0000 1f70     HHH...........p.
   22094:	3670 cd36 5454 5959 7459 7412 5912 6868     p66.TTYYYt.t.Yhh
   220a4:	6868 6868 3468 b268 53c8 7110 7664 3476     hhhhh4h..S.qdvv4
   220b4:	3468 0d0d 340d 0d34 7676 1313 3131 1313     h4...44.vv..11..
   220c4:	1313 3113 af13 eafc 79b1 7979 c876 c8c8     ...1.....yyyv...
   220d4:	0dc8 7477 7474 1fcf cd3b 3bcd 1f3b 0000     ..wttt..;..;;...
	...
   220f0:	1515 0048 7070 7070 7070 0070 1f1f 3670     ..H.ppppppp...p6
   22100:	3636 4836 4f36 70a9 1f70 7070 7070 7070     666H6O.pp.pppppp
   22110:	7070 4870 7070 7000 7070 7070 7070 7070     pppHpp.ppppppppp
   22120:	3636 34cd 36cd 4836 4848 4848 1548 4afd     66.4.66HHHHHH..J
   22130:	074a fd4a 1515 4815 4848 4848 7048 0070     J.J....HHHHHHpp.
   22140:	0000 0000 0000 7000 0000 7000 7070 4f36     .......p...ppp6O
   22150:	cdcd 5454 5959 1212 5974 6868 6868 0d68     ..TTYY..tYhhhhh.
   22160:	6868 77b2 1053 2b24 6868 0d34 3434 3468     hh.wS.$+hh4.44h4
   22170:	3434 3434 4034 3140 3113 3131 1313 1313     44444@@1.111....
   22180:	e35b 0f65 7967 7979 c82b c8c8 77c8 7777     [.e.gyyy+....www
   22190:	3874 7438 7070 4f4f 701f 0000 0000 0000     t88tppOO.p......
	...
   221a8:	1548 4815 7000 7070 7070 7070 7070 0070     H..H.pppppppppp.
   221b8:	7070 361f a936 701f 7070 7070 7070 7070     pp.66..ppppppppp
   221c8:	7070 7070 7070 7070 7070 7070 7070 7070     pppppppppppppppp
   221d8:	4870 cf36 cbcf 48cb 4848 1548 fd15 074a     pH6....HHHH...J.
   221e8:	fd4a 1515 4815 4848 4848 7048 0070 0000     J....HHHHHHpp...
	...
   22200:	0070 7000 7070 4f48 54cf 1212 5959 1212     p..pppHO.T..YY..
   22210:	5974 6859 3434 6834 6868 f174 5310 b2c8     tYYh444hhht..S..
   22220:	6868 6868 3468 3434 6868 3468 3434 400d     hhhhh444hhh444.@
   22230:	1331 3131 3131 3331 65fb 33e3 7979 7679     1.111113.e.3yyyv
   22240:	c876 c8c8 77c8 7979 7477 3838 0038 0000     v....wyywt888...
	...
   22260:	4800 1515 0000 7070 7070 7070 7070 7070     .H....pppppppppp
   22270:	0070 7000 7070 7070 7070 7070 7070 7070     p..ppppppppppppp
   22280:	7070 7070 7070 7070 7070 7070 7070 7070     pppppppppppppppp
   22290:	7070 3648 cb36 cbcb 1515 fd15 074a fd4a     ppH66.......J.J.
   222a0:	1515 4848 4848 4848 7048 0070 0000 0000     ..HHHHHHHpp.....
	...
   222b8:	0000 7000 7070 3670 cdcd 0d12 5968 5959     ...pppp6....hYYY
   222c8:	5959 5959 6868 3468 6868 66e5 2bbe 3468     YYYYhhh4hh.f.+h4
   222d8:	6868 6868 6868 3468 6834 3468 3434 3434     hhhhhhh44hh44444
   222e8:	7634 3131 3131 b113 10fc 79f2 7979 7676     4v1111.....yyyvv
   222f8:	c8c8 c8c8 77c8 45c8 74c8 381e 6938 0000     .....w.E.t.88i..
   22308:	7070 0070 0000 0000 0000 0000 0000 0000     ppp.............
   22318:	0000 1515 0015 7000 7070 7070 7070 7070     .......ppppppppp
   22328:	7070 7070 7070 7070 7070 7070 7070 7070     pppppppppppppppp
   22338:	7070 7070 7070 7070 7070 7070 7070 7070     pppppppppppppppp
   22348:	7070 4848 cbcb cbcb ec15 074a 4a07 15fd     ppHH......J..J..
   22358:	4848 4848 4848 0070 0000 0000 0000 0000     HHHHHHp.........
	...
   22374:	7070 7070 cd4f 4554 5976 5959 5959 5959     ppppO.TEvYYYYYYY
   22384:	5959 6868 2b68 66be 68e5 0d68 3434 6868     YYhhh+.f.hh.44hh
   22394:	6868 6868 6868 3468 0d34 3446 3434 7676     hhhhhhh44.F444vv
   223a4:	7940 e3f2 b1fc 7967 7679 c876 c8c8 c8c8     @y....gyyvv.....
   223b4:	7777 7777 1e77 381e 3838 0048 7000 7070     wwwww..888H..ppp
	...
   223d0:	0000 1570 4815 0000 7070 7070 7070 7070     ..p..H..pppppppp
   223e0:	7070 7070 7070 701f 7070 7070 7070 7070     pppppp.ppppppppp
   223f0:	7070 7070 7070 7070 7070 7070 7070 7070     pppppppppppppppp
   22400:	4848 4848 4848 15cb 074a ca91 694a 4815     HHHHHH..J...Ji.H
   22410:	4848 7048 0000 0000 0000 0000 0000 0000     HHHp............
	...
   2242c:	0000 7070 3636 ab4f 6887 5912 5959 5959     ..pp66O..h.YYYYY
   2243c:	5959 6868 f174 dba6 b274 6868 0d0d 6834     YYhht...t.hh..4h
   2244c:	6868 6868 6868 3468 3434 0d0d 3446 4034     hhhhhhh444..F44@
   2245c:	2c79 e337 67b1 7640 c876 c8c8 c8c8 77c8     y,7..g@vv......w
   2246c:	7777 7777 1e1e 1e1e 3838 000c 0000 7000     wwww....88.....p
	...
   22488:	0000 4800 1515 0070 7000 7070 7070 7070     ...H..p..ppppppp
   22498:	7070 7070 7070 7070 7070 7070 7070 7070     pppppppppppppppp
   224a8:	7070 7070 7070 7070 7070 7070 7070 7070     pppppppppppppppp
   224b8:	4848 4848 cbcb ca15 fa91 ecca e969 4815     HHHH........i..H
   224c8:	4848 0000 0000 0000 0000 0000 0000 0000     HH..............
	...
   224e0:	0000 7000 7070 7000 3636 0c36 77dc 1212     ...ppp.p666..w..
   224f0:	5959 5959 5959 6859 66d1 6466 6868 6868     YYYYYYYh.ffdhhhh
   22500:	0d68 6868 6868 6868 6868 3468 6834 4634     h.hhhhhhhhh44h4F
   22510:	460d 2b34 71f1 f271 7679 7676 c876 c8c8     .F4+.qq.yvvvv...
   22520:	c8c8 7777 7777 7777 1e1e 381e 4e38 cb38     ..wwwwww...88N8.
   22530:	0000 0000 0070 0000 0000 0000 0000 0000     ....p...........
   22540:	0000 0000 1515 0015 0000 7070 7070 7070     ..........pppppp
   22550:	7070 7070 7070 7070 7070 7070 7070 7070     pppppppppppppppp
   22560:	7070 7070 7070 7070 7070 4f36 7070 4870     pppppppppp6OpppH
   22570:	4848 48cb fd48 6307 4a91 1515 e9cb 48e9     HH.HH..c.J.....H
   22580:	7048 0000 0000 0000 0000 0000 0000 0000     Hp..............
	...
   22598:	7000 0000 7070 7070 cf1f 36cf 79ab 4e69     .p..pppp...6.yiN
   225a8:	5454 5454 5959 1259 6553 74f1 6868 6868     TTTTYYY.Se.thhhh
   225b8:	6868 6868 6868 6868 6868 3468 340d 6868     hhhhhhhhhhh4.4hh
   225c8:	4634 b02b f153 0d67 400d 4076 0d0d c80d     4F+.S.g..@v@....
   225d8:	c8c8 7777 7777 1e1e 1e1e 381e e938 e94e     ..wwww.....88.N.
   225e8:	0048 0000 7000 0000 0000 0000 0000 0000     H....p..........
   225f8:	0000 0000 fd00 1548 0000 7000 7070 7070     ......H....ppppp
   22608:	7070 7070 7070 7070 7070 7070 7070 7070     pppppppppppppppp
   22618:	7070 7070 7070 7070 7070 594f 703b 4848     ppppppppppOY;pHH
   22628:	cb48 48cb faec 9163 154a 15cb 69cb 691e     H..H..c.J....i.i
   22638:	7048 0000 0000 0000 0000 0000 0000 0000     Hp..............
	...
   22650:	7000 0070 0000 7070 7070 4f36 1e0c cf69     .pp...pppp6O..i.
   22660:	cdcf 54cd 5954 bb54 5a66 682b 6868 6868     ...TTYT.fZ+hhhhh
   22670:	6834 6868 6868 3468 6834 6868 0d68 340d     4hhhhhh44hhhh..4
   22680:	0d68 b064 2bb0 3446 0d34 0d0d 0d0d 0d0d     h.d..+F44.......
   22690:	c8c8 7777 1e77 1e1e 1e1e 381e e9e9 4ee9     ..www......8...N
   226a0:	000c 0000 0000 0070 0000 0000 0000 0000     ......p.........
   226b0:	0000 0000 4800 15fd 0048 7000 7070 7070     .....H..H..ppppp
   226c0:	7070 7070 7070 7070 7070 7070 7070 7070     pppppppppppppppp
   226d0:	7070 7070 7070 7070 7070 5936 3659 4848     pppppppppp6YY6HH
   226e0:	48cb ec48 1c63 4a63 1515 cbcb cbcb 124e     .HH.c.cJ......N.
   226f0:	7036 0000 0000 0000 0000 0000 0000 0000     6p..............
	...
   22708:	0000 7070 7070 7070 7070 3636 cf36 cfcf     ..pppppppp666...
   22718:	cfcf 59cd 5459 2f54 7294 5959 6812 6868     ...YYTT/.rYY.hhh
   22728:	6868 6834 6868 3468 460d 6874 6868 0d46     hh4hhhh4.FthhhF.
   22738:	c80d 2b2b 4646 4646 3446 0d34 0d0d 0d0d     ..++FFFFF44.....
   22748:	c80d 7777 7777 1e1e 3838 e91e e9e9 4ee9     ..wwww..88.....N
   22758:	cb4e 0000 0000 7000 0000 0000 0000 0000     N......p........
   22768:	0000 0000 0000 1515 7015 0000 7070 7070     .........p..pppp
   22778:	7070 7070 7070 7070 7070 7070 7070 7070     pppppppppppppppp
   22788:	7070 4870 7048 7070 7070 cf48 3654 cb48     pppHHpppppH.T6H.
   22798:	48cb 6315 6397 154a 15cb 4848 3648 1269     .H.c.cJ...HHH6i.
   227a8:	703b 0070 0000 0000 0000 0000 0000 0000     ;pp.............
	...
   227c0:	0000 7070 7070 7070 7070 4f70 364f 3636     ..pppppppppOO666
   227d0:	cf4f 544f 5968 0b54 bf94 59a5 1259 7468     O.OThYT....YY.ht
   227e0:	6868 3468 400d 6868 0d68 7446 6868 7468     hhh4.@hhh.Fthhht
   227f0:	0d0d 7446 6868 4674 6874 4674 3434 0d0d     ..FthhtFthtF44..
   22800:	c80d c80d 7779 1e1e 381e e9e9 e9e9 4ee9     ....yw...8.....N
   22810:	0c0c 0048 0000 0000 0070 0000 0000 0000     ..H.....p.......
   22820:	0000 0000 0000 fd00 1548 0000 7000 7070     ........H....ppp
   22830:	7070 7070 7070 7070 7070 7070 7070 7070     pppppppppppppppp
   22840:	7070 361f 3636 7036 7070 3670 36cf 15cb     pp.6666pppp6.6..
   22850:	1548 7307 4a1c 4815 4848 4848 4848 4e48     H..s.J.HHHHHHHHN
   22860:	3612 0070 0000 0000 0000 0000 0000 0000     .6p.............
	...
   22878:	0000 7070 7070 7070 7070 7070 4f4f 3636     ..ppppppppppOO66
   22888:	3636 cfcf 7454 2438 1e94 5454 5959 1259     66..Tt8$..TTYYY.
   22898:	7474 6868 f640 6831 6868 6868 6874 7468     tthh@.1hhhhhthht
   228a8:	7474 6874 7468 6868 6868 7468 4646 0d46     ttthhthhhhhtFFF.
   228b8:	0d0d 79c8 31f6 3877 e938 e9e9 e9e9 0c0c     ...y.1w88.......
   228c8:	cdcd 0069 0000 0000 7000 0000 0000 0000     ..i......p......
	...
   228e0:	48fd 0015 0000 7070 7070 7070 7070 7070     .H....pppppppppp
   228f0:	7070 7070 7070 7070 7070 3636 3636 4f54     pppppppppp6666TO
   22900:	7070 4870 3636 15cb 4acb 73ff 1507 4848     pppH66...J.s..HH
   22910:	4848 4848 4848 cb48 4f12 7070 0000 0000     HHHHHHH..Opp....
	...
   22930:	0000 7000 7070 7070 1f70 701f 1f70 3636     ...pppppp..pp.66
   22940:	3636 cf36 cdcf 5a4e 38e6 cd3b 593b 5959     666...NZ.8;.;YYY
   22950:	7412 6874 f634 3487 6834 6868 7468 7474     .tth4..44hhhhttt
   22960:	7474 7474 7474 6868 6868 7474 7468 4646     tttttthhhhtthtFF
   22970:	c80d 31c8 f616 1ec8 e91e e9e9 e9e9 cd0c     ...1............
   22980:	cdcd cbcd 0000 0000 0000 0000 0000 0000     ................
   22990:	0000 7070 0070 0000 fd48 4848 0000 4800     ..ppp...H.HH...H
   229a0:	7070 7070 7070 7070 7070 7070 7070 7070     pppppppppppppppp
   229b0:	7070 3636 4f36 5968 4836 4848 cb36 cb15     pp666OhY6HHH6...
   229c0:	6315 6373 4815 4815 4848 4848 4848 4848     .csc.H.HHHHHHHHH
   229d0:	cdcd 7070 0000 0000 0000 0000 0000 0000     ..pp............
	...
   229ec:	1f70 361f 1f1f 3636 1f1f 1f1f 3636 cf36     p..6..66....666.
   229fc:	cfcf 32e9 e932 cd54 3b3b 5954 6859 7474     ...22.T.;;TYYhtt
   22a0c:	7968 3487 6868 6868 6868 7474 6868 6868     hy.4hhhhhhtthhhh
   22a1c:	6874 6868 6868 7474 7468 7474 0d74 79c8     thhhhhtthtttt..y
   22a2c:	165d 7479 e91e e9e9 0c0c cd0c cdcd cdcd     ].yt............
   22a3c:	0048 0000 0000 0000 0000 7000 3636 3636     H..........p6666
   22a4c:	3636 0036 1500 4815 0000 0000 7048 7070     666....H....Hppp
   22a5c:	7070 7070 7070 7070 7070 7070 4870 3648     pppppppppppppHH6
   22a6c:	4f36 3468 484f 4848 1548 1515 73ca 4aff     6Oh4OHHHH....s.J
   22a7c:	1548 4848 4848 7070 7070 4848 cd36 0048     H.HHHHppppHH6.H.
	...
   22aa4:	1f00 361f 3636 3636 3636 3636 3636 3636     ...6666666666666
   22ab4:	cfcb e66d 4e5a 5954 3b54 543b 5959 7412     ..m.ZNTYT;;TYY.t
   22ac4:	6874 3440 6868 6868 6868 6868 6868 6868     th@4hhhhhhhhhhhh
   22ad4:	1268 6812 1212 7474 6874 7468 7474 c80d     h..h..ttthhttt..
   22ae4:	16f6 77e8 e91e 0ce9 0c0c cd0c cdcd cfcd     ...w............
   22af4:	7069 0000 0000 0000 0000 cb00 cfcf 36cb     ip.............6
   22b04:	3636 4870 0070 48fd 0015 0000 4800 7070     66pHp..H.....Hpp
   22b14:	7070 7070 7070 7070 7070 7070 7070 3648     ppppppppppppppH6
   22b24:	3636 7e59 3654 4836 1548 fdcb 901c 15fa     66Y~T66HH.......
   22b34:	1515 4848 4848 7070 7070 7070 3648 0036     ..HHHHppppppH66.
	...
   22b5c:	0000 1f1f 361f 3636 3636 3636 3636 3636     .....66666666666
   22b6c:	4f36 576d 4e24 54cf 5974 3b3b 5954 1259     6OmW$N.TtY;;TYY.
   22b7c:	7474 6874 6868 6868 6812 1268 7474 1274     ttthhhhh.hh.ttt.
   22b8c:	1274 1212 1212 7412 7474 1212 7412 c874     t......ttt...tt.
   22b9c:	1606 c887 381e 0ce9 cd0c cdcd cfcd cfcf     .....8..........
   22bac:	cbcf 0000 0000 0000 0000 3600 cfcf 36cb     ...........6...6
   22bbc:	3636 4836 7048 fd70 4848 0000 0000 7070     666HHpp.HH....pp
   22bcc:	7070 7070 7070 7048 7070 4870 7048 4848     ppppppHppppHHpHH
   22bdc:	3636 7e54 cf68 cb36 15cb 0715 ff73 484a     66T~h.6.....s.JH
   22bec:	4815 4848 7048 7070 7070 7070 7070 7070     .HHHHppppppppppp
	...
   22c14:	0000 1f00 1f1f 361f 3636 3636 3636 3636     .......666666666
   22c24:	3636 57e9 548c cfcd 54cf cd54 3b4f 5954     66.W.T...TT.O;TY
   22c34:	7459 7474 6868 1268 6812 1268 3812 3874     Yttthhh..hh..8t8
   22c44:	1212 1212 1212 1212 3812 1238 1212 7474     .........88...tt
   22c54:	1613 c8f6 381e 0ce9 cdcd cfcd cfcf cfcf     .....8..........
   22c64:	cfcf 0048 0000 0000 0000 7000 cfcf cbcb     ..H........p....
   22c74:	36cb 4836 4848 4870 48fd 0070 0000 7000     .66HHHpH.Hp....p
   22c84:	7070 7070 7070 7070 7070 7070 4870 4848     pppppppppppppHHH
   22c94:	3636 343b cd68 cbcb 4815 1cfd fa22 1515     66;4h....H.."...
   22ca4:	4815 4848 7048 7070 7070 7070 7070 0070     .HHHHpppppppppp.
	...
   22cd0:	361f 1f36 361f 3636 3636 3636 3636 e60c     .66..666666666..
   22ce0:	cded cdcf cfcf cfcf 4fcf 3b4f 1254 3812     .........OO;T..8
   22cf0:	1238 1212 6812 1268 1212 1212 1212 1212     8....hh.........
   22d00:	1212 1212 5959 1212 1212 1212 f60d c8f6     ....YY..........
   22d10:	3838 0ce9 cdcd cfcf cfcf cfcf cfcf 70cf     88.............p
	...
   22d28:	cfcb cbcb 36cb 3636 4848 7048 15fd 0048     .....666HHHp..H.
   22d38:	0000 0000 7070 7070 7070 7070 7070 7070     ....pppppppppppp
   22d48:	7070 4848 3648 68cf 5402 cbcb cbcb 7307     ppHHH6.h.T.....s
   22d58:	fdff 1548 4848 7048 7070 7070 7070 7070     ..H.HHHppppppppp
   22d68:	7070 0070 0000 0000 0000 0000 0000 0000     ppp.............
	...
   22d88:	3600 3636 361f 1f36 1f1f 3636 3636 edcd     .666.66...6666..
   22d98:	0c32 cf4f cfcf cfcf 54cf 3b4f 3b3b 1259     2.O......TO;;;Y.
   22da8:	1212 1212 1212 1268 1259 1212 3838 1212     ......h.Y...88..
   22db8:	1212 5912 5912 5959 5959 5959 0d12 7731     ...Y.YYYYYYY..1w
   22dc8:	4e12 0ce9 cfcd cfcf cfcf cfcf cfcf 36cf     .N.............6
	...
   22de0:	cf70 cbcf 3636 3636 4848 4848 fd70 4848     p...6666HHHHp.HH
   22df0:	0000 0000 7000 7070 7070 4870 7070 7070     .....ppppppHpppp
   22e00:	7070 4870 4848 5936 5402 6969 15cb 2263     pppHHH6Y.Tii..c"
   22e10:	15fa 1515 4848 7048 7070 7070 7070 7070     ....HHHppppppppp
   22e20:	7070 7070 0000 0000 0000 0000 0000 0000     pppp............
	...
   22e40:	0000 1f1f 1f1f 1f36 1f36 1f1f 3636 9bcf     ......6.6...66..
   22e50:	6d57 cf36 cfcf cfcf cfcf 3636 4f36 593b     Wm6.......666O;Y
   22e60:	1212 5912 5959 5912 1212 1212 1212 1212     ...YYY.Y........
   22e70:	1212 5912 5959 5459 5454 5454 5454 4e12     ...YYYYTTTTTTT.N
   22e80:	4e4e cd0c cfcf cfcf cfcf cfcf 36cb cb36     NN...........66.
   22e90:	0048 0000 0000 0000 cb00 cbcf 36cb 4836     H............66H
   22ea0:	4848 4848 4870 48fd 0048 0000 0000 7070     HHHHpH.HH.....pp
   22eb0:	7070 7070 7048 7070 7070 7070 4848 cd48     ppppHpppppppHHH.
   22ec0:	5968 6969 eccb 7397 484a 4815 4848 7070     hYii...sJH.HHHpp
   22ed0:	7070 7070 7070 7070 7070 7070 0070 0000     ppppppppppppp...
	...
   22ef8:	0000 1f00 1f1f 1f1f 1f1f 361f 361f 891f     ...........6.6..
   22f08:	7857 cb1f cbcf cdcf cfcf 54cf 4fcd 3b3b     Wx.........T.O;;
   22f18:	1259 5912 5959 5959 6812 5912 5959 5959     Y..YYYYY.h.YYYYY
   22f28:	5959 5459 5454 5454 5454 5454 5454 5454     YYYTTTTTTTTTTTTT
   22f38:	cd54 cdcd cfcf cfcf cbcf cbcb 36cb 3636     T............666
   22f48:	7036 0000 0000 0000 7000 cbcf 36cb 7036     6p.......p...66p
   22f58:	7070 4848 7048 1515 7048 0000 0000 7000     ppHHHp..Hp.....p
   22f68:	7070 7070 7070 7070 7070 7070 4870 3648     pppppppppppppHH6
   22f78:	5454 1569 cacb 6373 4815 4848 4848 7048     TTi...sc.HHHHHHp
   22f88:	7070 7070 7070 7070 0070 0000 0000 0000     ppppppppp.......
	...
   22fb4:	7070 7070 7070 1f70 361f 2d1f 9781 364f     ppppppp..6.-..O6
   22fc4:	3636 cd4f cfcd cf69 4fcd 4f4f 59cd 1259     66O...i..OOO.YY.
   22fd4:	5959 5959 1259 5912 5959 5454 5454 5454     YYYYY..YYYTTTTTT
   22fe4:	5454 5454 5454 5454 5454 cdcd cdcd cfcd     TTTTTTTTTT......
   22ff4:	cfcf 4f4f 3636 3636 3636 3636 3636 0000     ..OO6666666666..
   23004:	0000 0000 0000 cb36 36cb 4836 7048 4870     ......6..66HHppH
   23014:	4848 fd70 4848 0000 0000 0000 7070 7070     HHp.HH......pppp
   23024:	7070 7070 7070 7070 7070 4848 cf36 cbcb     ppppppppppHH6...
   23034:	6315 ca73 1548 4848 7048 7070 7070 7070     .cs.H.HHHppppppp
   23044:	7070 7070 0070 0000 0000 0000 0000 0000     ppppp...........
	...
   2306c:	7000 7070 7070 7070 1f70 cf1f 2273 1f69     .pppppppp...s"i.
   2307c:	3636 3636 cf4f cd69 4e0c 36cf cf36 5954     6666O.i..N.66.TY
   2308c:	5959 5459 5459 5454 5454 5454 4e54 5454     YYYTYTTTTTTTTNTT
   2309c:	5454 5454 5454 5454 cd3b 3bcd 3b3b 4f4f     TTTTTTTT;..;;;OO
   230ac:	4f4f 364f 3636 3636 3636 3636 3636 0070     OOO66666666666p.
   230bc:	0000 0000 0000 3600 36cb 4836 4848 4848     .......6.66HHHHH
   230cc:	4848 4848 484a 0048 0000 0000 7000 7070     HHHHJHH......ppp
   230dc:	7070 7070 7070 7070 7070 4870 cb48 cbcb     pppppppppppHH...
   230ec:	1cec fd1c 1548 4848 7070 7070 7070 7070     ....H.HHpppppppp
   230fc:	7070 0070 0070 0000 0000 0000 0000 0000     ppp.p...........
	...
   23124:	0000 7070 7070 7070 7070 1f70 ed91 7091     ..ppppppppp....p
   23134:	1f70 3636 cf36 0ccd 2b0c cd2b 4fcf cdcf     p.666....++..O..
   23144:	5454 5454 5454 5454 5454 5454 5454 5454     TTTTTTTTTTTTTTTT
   23154:	5454 5454 cd54 3b54 a9a9 4fa9 a91f 1f1f     TTTTT.T;...O....
   23164:	701f 1f1f 1f1f 361f 1f1f 3636 1f36 0070     .p.....6..666.p.
   23174:	0000 0000 0000 7000 3636 4836 4848 4870     .......p666HHHpH
   23184:	4848 7048 fd48 4848 0000 0000 0000 7048     HHHpH.HH......Hp
   23194:	7048 7070 7070 7070 7070 4870 4848 cbcb     HppppppppppHHH..
   231a4:	1c4a 1563 4848 4848 7070 7070 7070 7070     J.c.HHHHpppppppp
   231b4:	0000 0000 7000 7000 0000 0000 0000 0000     .....p.p........
	...
   231dc:	0000 7000 7070 7070 7070 7070 ff69 361c     ...pppppppppi..6
   231ec:	7070 3670 3636 cdcd ab0c 1e6e 36cf 4f36     ppp666....n..66O
   231fc:	54cf 5454 5454 5454 5454 5454 5454 5454     .TTTTTTTTTTTTTTT
   2320c:	3b3b 3b3b 3b3b a93b 1f1f 701f 7070 7070     ;;;;;;;....ppppp
   2321c:	7070 7070 1f70 701f 7070 7070 7070 7070     ppppp..ppppppppp
	...
   23234:	7070 3636 4870 4848 7070 4848 fd70 4815     pp66pHHHppHHp..H
   23244:	0070 0000 0000 7000 7070 7070 7070 7070     p......ppppppppp
   23254:	7070 4870 4848 48cb 1c4a 4807 4848 7048     pppHHH.HJ..HHHHp
   23264:	0070 0000 7000 0000 0000 0000 7000 0000     p....p.......p..
	...
   23298:	7070 7070 7070 7070 ca70 4aff 7070 7070     ppppppppp..Jpppp
   232a8:	3636 cf36 e9cd 0e6e cf0c 3636 4f36 5454     666...n...666OTT
   232b8:	cd54 3bcd cdcd cdcd cd3b 3b54 3b3b 3b3b     T..;....;.T;;;;;
   232c8:	3b3b 1f3b 701f 7070 7070 7070 7000 0000     ;;;..ppppppp.p..
   232d8:	0000 7070 7070 7070 7070 0070 0000 0000     ..ppppppppp.....
   232e8:	0000 0000 7000 4870 4848 7048 4848 4848     .....ppHHHHpHHHH
   232f8:	0048 48fd 0048 0000 0000 7000 7070 7070     H..HH......ppppp
   23308:	0070 7070 7070 4870 4848 4848 634a 484a     p.pppppHHHHHJcJH
   23318:	4848 7070 0070 0000 7070 0000 0070 0000     HHppp...pp..p...
   23328:	7000 0070 0000 0000 0000 0000 0000 0000     .pp.............
	...
   23350:	7000 7070 7070 7070 3670 9163 7036 7070     .pppppppp6c.6ppp
   23360:	7070 3636 0ccf b567 cdab 36cd 3636 3b4f     pp66..g....666O;
   23370:	3bcd 3b3b 3b3b 3b3b 3b3b 4f3b a94f 1f1f     .;;;;;;;;;;OO...
   23380:	a9a9 701f 7070 7070 7070 0070 0000 0000     ...pppppppp.....
   23390:	0000 0000 7000 0070 0000 0070 0000 0000     .....pp...p.....
   233a0:	0000 0000 0000 7070 4870 7070 7070 7048     ......pppHppppHp
   233b0:	7048 4a70 4848 0000 0000 0000 7000 0070     HppJHH.......pp.
   233c0:	0000 0000 7000 7070 4848 4848 634a 48fd     .....pppHHHHJc.H
   233d0:	4848 7070 7070 0000 0000 0000 0000 0000     HHpppp..........
   233e0:	0000 7070 0070 0000 0000 0000 0000 0000     ..ppp...........
	...
   23408:	0000 7070 7070 7070 7000 63ec 70ec 7070     ..pppppp.p.c.ppp
   23418:	7070 3670 4f36 6e4e 0c87 cf69 7036 4f1f     ppp66ONn..i.6p.O
   23428:	3b3b 3b3b 0808 a908 a91f 70a9 7070 1f70     ;;;;.......pppp.
   23438:	701f 7070 7070 0070 0070 0000 0000 0000     .pppppp.p.......
	...
   2345c:	0000 7000 7070 7070 7070 7070 7070 4800     ...ppppppppppp.H
   2346c:	70fd 0070 0000 0000 0000 0070 0000 0000     .pp.......p.....
   2347c:	0000 7070 4848 4848 fa4a 4815 4848 0070     ..ppHHHHJ..HHHp.
   2348c:	7000 0000 0000 0000 0000 0000 0000 7070     .p............pp
   2349c:	7036 0000 0000 0000 0000 0000 0000 0000     6p..............
	...
   234c0:	0000 7000 7070 0070 0000 4a70 36fa 0000     ...pppp...pJ.6..
   234d0:	0000 7070 3670 2a36 1e6e 4f4f 7036 7070     ..ppp66*n.OO6ppp
   234e0:	4f1f 1f4f a91f 1f1f 0070 7070 7070 7070     .OO.....p.pppppp
   234f0:	7070 7070 7070 0070 0000 0000 0000 0000     ppppppp.........
   23500:	0000 0000 7000 0000 0000 0000 0000 0000     .....p..........
	...
   23518:	7000 7070 7070 7070 7070 0070 1515 0070     .pppppppppp...p.
	...
   23534:	0000 7070 4848 4848 4a4a 4815 4848 0070     ..ppHHHHJJ.HHHp.
	...
   23550:	0000 7070 4f36 0070 0000 0000 0000 0000     ..pp6Op.........
	...
   2357c:	7070 0000 0000 7000 4a4a 0070 0000 7000     pp.....pJJp....p
   2358c:	7070 3636 ab67 4f4f 3636 7070 7070 1f1f     pp66g.OO66pppp..
   2359c:	7070 0070 7000 7070 7070 7070 7070 7070     ppp..ppppppppppp
   235ac:	7070 7070 0000 0000 0000 0000 0000 0000     pppp............
   235bc:	0000 0070 0000 0000 0000 0000 0000 0000     ..p.............
   235cc:	0000 0000 0000 7000 7070 0000 0000 0000     .......ppp......
   235dc:	1500 7048 0000 0000 0000 0000 0000 0000     ..Hp............
   235ec:	0000 7000 4848 4848 4afd 4848 7048 0000     ...pHHHH.JHHHp..
	...
   23608:	0000 7000 3b70 0036 0000 0000 0000 0000     ...pp;6.........
	...
   23634:	7000 0070 0000 0000 4a70 7015 0000 0000     .pp.....pJ.p....
   23644:	7000 7070 4e4f 3636 3636 7070 7070 7070     .pppON6666pppppp
   23654:	7070 7070 0070 0000 7000 7070 7070 7070     ppppp....ppppppp
   23664:	7070 0070 0000 0000 0000 0000 0000 0000     ppp.............
	...
   23694:	0000 0015 0000 0000 0000 0000 0000 0000     ................
   236a4:	0000 7000 4870 4848 fdfd 4848 7048 0000     ...ppHHH..HHHp..
	...
   236c0:	0000 7000 4f70 703b 0000 0000 0000 0000     ...ppO;p........
	...
   236f4:	4800 cb4a 0000 0000 0000 7070 7070 3670     .HJ.......ppppp6
   23704:	701f 7070 7070 7070 7070 7070 7070 0000     .ppppppppppppp..
   23714:	0000 0000 0000 7000 0000 0000 0000 0000     .......p........
	...
   2374c:	0000 4870 0000 0000 0000 0000 0000 0000     ..pH............
   2375c:	0000 0000 4870 4848 fdfd 4848 7048 0000     ....pHHH..HHHp..
	...
   2377c:	1f70 364f 0070 0000 0000 0000 0000 0000     p.O6p...........
	...
   237ac:	0000 fd48 0048 0000 0000 0000 7070 7070     ..H.H.......pppp
   237bc:	7070 7070 0070 7000 7070 7070 7070 0070     ppppp..pppppppp.
	...
   23818:	7070 4848 1515 4848 0070 0000 0000 0000     ppHH..HHp.......
	...
   23834:	7000 4f4f 0070 0000 0000 0000 0000 0000     .pOOp...........
	...
   23864:	0000 4800 4848 0000 0000 0000 0000 7000     ...HHH.........p
   23874:	7070 7070 0070 0000 7000 7070 0070 0000     ppppp....pppp...
	...
   238d0:	7000 4848 1515 4848 0070 0000 0000 0000     .pHH..HHp.......
	...
   238ec:	0000 4f1f 001f 0000 0000 0000 0000 0000     ...O............
	...
   2391c:	0000 7000 4848 7048 0000 0000 0000 0000     ...pHHHp........
   2392c:	0000 7000 0000 0000 0000 7000 0070 0000     ...p.......pp...
	...
   23988:	0000 4870 1515 4848 0070 0000 0000 0000     ..pH..HHp.......
	...
   239a4:	0000 3670 7036 0000 0000 0000 0000 0000     ..p66p..........
	...
   239d8:	4870 4848 0000 0000 0000 0000 0000 0000     pHHH............
	...
   23a40:	0000 7000 1548 7048 0070 0000 0000 0000     ...pH.Hpp.......
	...
   23a5c:	0000 7000 7036 0000 0000 0000 0000 0000     ...p6p..........
	...
   23a8c:	6548 6c6c 206f 6f57 6c72 0064 2e2e 682f     Hello World.../h
   23a9c:	6c70 702f 726f 2f74 7068 5f6c 7067 6f69     pl/port/hpl_gpio
   23aac:	625f 7361 2e65 0068 2e2e 682f 6c61 732f     _base.h.../hal/s
   23abc:	6372 682f 6c61 695f 2e6f 0063 2e2e 682f     rc/hal_io.c.../h
   23acc:	6c61 732f 6372 682f 6c61 745f 6d69 7265     al/src/hal_timer
   23adc:	632e 0000 2e2e 682f 6c61 732f 6372 682f     .c..../hal/src/h
   23aec:	6c61 755f 6173 7472 615f 7973 636e 632e     al_usart_async.c
   23afc:	0000 0000 2e2e 682f 6c61 752f 6974 736c     ....../hal/utils
   23b0c:	732f 6372 752f 6974 736c 6c5f 7369 2e74     /src/utils_list.
   23b1c:	0063 0000 2e2e 682f 6c61 752f 6974 736c     c...../hal/utils
   23b2c:	732f 6372 752f 6974 736c 725f 6e69 6267     /src/utils_ringb
   23b3c:	6675 6566 2e72 0063 3000 4000 3400 4000     uffer.c..0.@.4.@
   23b4c:	2000 4101 4000 4101 0000 4300 0400 4300     . .A.@.A...C...C
   23b5c:	0800 4300 0c00 4300                         ...C...C

00023b64 <_i2cms>:
   23b64:	0003 0000 0014 0020 0100 0000 00ff 0000     ...... .........
   23b74:	0000 00d7 0400 0727 2e2e 682f 6c70 732f     ......'.../hpl/s
   23b84:	7265 6f63 2f6d 7068 5f6c 6573 6372 6d6f     ercom/hpl_sercom
   23b94:	632e 0000 3800 4000 3c00 4000 a000 4101     .c...8.@.<.@...A
   23ba4:	c000 4101 1400 4200 1800 4200 1400 4300     ...A...B...B...C
   23bb4:	1800 4300                                   ...C

00023bb8 <_tcs>:
   23bb8:	0000 006b 0308 0000 0000 0000 3a97 0000     ..k..........:..
   23bc8:	0000 0000 2e2e 682f 6c70 742f 2f63 7068     ....../hpl/tc/hp
   23bd8:	5f6c 6374 632e 0000                         l_tc.c..

00023be0 <__func__.9536>:
   23be0:	766c 645f 6265 6775 635f 6568 6b63 735f     lv_debug_check_s
   23bf0:	7274 0000                                   tr..

00023bf4 <hex.9544>:
   23bf4:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
   23c04:	0000 0000                                   ....

00023c08 <__func__.9554>:
   23c08:	766c 645f 6265 6775 6c5f 676f 655f 7272     lv_debug_log_err
   23c18:	726f 0000 2e2e 742f 6968 6472 6170 7472     or..../thirdpart
   23c28:	2f79 766c 6c67 732f 6372 6c2f 5f76 6f63     y/lvgl/src/lv_co
   23c38:	6572 6c2f 5f76 6564 7562 2e67 0063 0000     re/lv_debug.c...
   23c48:	766c 645f 6265 6775 635f 6568 6b63 735f     lv_debug_check_s
   23c58:	7274 203a 2061 6f6e 2d6e 5341 4943 2049     tr: a non-ASCII 
   23c68:	6863 7261 6820 7361 7220 7065 6165 6574     char has repeate
   23c78:	2064 6f6d 6572 7420 6168 206e 564c 445f     d more than LV_D
   23c88:	4245 4755 535f 5254 4d5f 5841 525f 5045     EBUG_STR_MAX_REP
   23c98:	4145 2054 6974 656d 2973 0000 766c 645f     EAT times)..lv_d
   23ca8:	6265 6775 635f 6568 6b63 735f 7274 203a     ebug_check_str: 
   23cb8:	6e69 6176 696c 2064 6863 7261 6920 206e     invalid char in 
   23cc8:	6874 2065 7473 6972 676e 2820 203c 3031     the string (< 10
   23cd8:	7620 6c61 6575 0029 766c 645f 6265 6775      value).lv_debug
   23ce8:	635f 6568 6b63 735f 7274 203a 7473 6972     _check_str: stri
   23cf8:	676e 6920 2073 6f6c 676e 7265 7420 6168     ng is longer tha
   23d08:	206e 564c 445f 4245 4755 535f 5254 4d5f     n LV_DEBUG_STR_M
   23d18:	5841 4c5f 4e45 5447 0048 0000               AX_LENGTH...

00023d24 <__func__.9507>:
   23d24:	766c 645f 7369 5f70 6567 5f74 6373 5f72     lv_disp_get_scr_
   23d34:	6361 0074                                   act.

00023d38 <__func__.9515>:
   23d38:	766c 645f 7369 5f70 6567 5f74 616c 6579     lv_disp_get_laye
   23d48:	5f72 6f74 0070 0000                         r_top...

00023d50 <__func__.9519>:
   23d50:	766c 645f 7369 5f70 6567 5f74 616c 6579     lv_disp_get_laye
   23d60:	5f72 7973 0073 0000                         r_sys...

00023d68 <__func__.9524>:
   23d68:	766c 645f 7369 5f70 7361 6973 6e67 735f     lv_disp_assign_s
   23d78:	7263 6565 006e 0000                         creen...

00023d80 <__func__.9529>:
   23d80:	766c 645f 7369 5f70 6567 5f74 6e69 6361     lv_disp_get_inac
   23d90:	6974 6576 745f 6d69 0065 0000               tive_time...

00023d9c <__func__.9539>:
   23d9c:	766c 645f 7369 5f70 7274 6769 615f 7463     lv_disp_trig_act
   23dac:	7669 7469 0079 0000                         ivity...

00023db4 <__func__.9543>:
   23db4:	6c5f 5f76 6964 7073 675f 7465 725f 6665     _lv_disp_get_ref
   23dc4:	5f72 6174 6b73 0000 2e2e 742f 6968 6472     r_task..../third
   23dd4:	6170 7472 2f79 766c 6c67 732f 6372 6c2f     party/lvgl/src/l
   23de4:	5f76 6f63 6572 6c2f 5f76 6964 7073 632e     v_core/lv_disp.c
   23df4:	0000 0000 766c 735f 7263 615f 7463 203a     ....lv_scr_act: 
   23e04:	6f6e 6420 7369 6c70 7961 7220 6765 7369     no display regis
   23e14:	6574 6572 2064 6f74 6720 7465 6920 7374     tered to get its
   23e24:	6120 7463 202e 6373 6572 6e65 0000 0000      act. screen....
   23e34:	766c 6c5f 7961 7265 745f 706f 203a 6f6e     lv_layer_top: no
   23e44:	6420 7369 6c70 7961 7220 6765 7369 6574      display registe
   23e54:	6572 2064 6f74 6720 7465 6920 7374 7420     red to get its t
   23e64:	706f 6c20 7961 7265 0000 0000 766c 6c5f     op layer....lv_l
   23e74:	7961 7265 735f 7379 203a 6f6e 6420 7369     ayer_sys: no dis
   23e84:	6c70 7961 7220 6765 7369 6574 6572 2064     play registered 
   23e94:	6f74 6720 7465 6920 7374 7320 7379 202e     to get its sys. 
   23ea4:	616c 6579 0072 0000 766c 645f 7369 5f70     layer...lv_disp_
   23eb4:	7361 6973 6e67 735f 7263 6565 3a6e 7420     assign_screen: t
   23ec4:	7972 7420 206f 7361 6973 6e67 6120 6e20     ry to assign a n
   23ed4:	6e6f 732d 7263 6565 206e 626f 656a 7463     on-screen object
   23ee4:	0000 0000 766c 645f 7369 5f70 6567 5f74     ....lv_disp_get_
   23ef4:	6e69 6361 6974 6576 745f 6d69 3a65 6e20     inactive_time: n
   23f04:	206f 6964 7073 616c 2079 6572 6967 7473     o display regist
   23f14:	7265 6465 0000 0000 766c 645f 7369 5f70     ered....lv_disp_
   23f24:	7274 6769 615f 7463 7669 7469 3a79 6e20     trig_activity: n
   23f34:	206f 6964 7073 616c 2079 6572 6967 7473     o display regist
   23f44:	7265 6465 0000 0000 766c 645f 7369 5f70     ered....lv_disp_
   23f54:	6567 5f74 6572 7266 745f 7361 3a6b 6e20     get_refr_task: n
   23f64:	206f 6964 7073 616c 2079 6572 6967 7473     o display regist
   23f74:	7265 6465 0000 0000                         ered....

00023f7c <__func__.9740>:
   23f7c:	766c 675f 6f72 7075 635f 6572 7461 0065     lv_group_create.

00023f8c <__func__.9754>:
   23f8c:	766c 675f 6f72 7075 615f 6464 6f5f 6a62     lv_group_add_obj
   23f9c:	0000 0000 2e2e 742f 6968 6472 6170 7472     ....../thirdpart
   23fac:	2f79 766c 6c67 732f 6372 6c2f 5f76 6f63     y/lvgl/src/lv_co
   23fbc:	6572 6c2f 5f76 7267 756f 2e70 0063 0000     re/lv_group.c...
   23fcc:	754f 2074 666f 6d20 6d65 726f 0079 0000     Out of memory...
   23fdc:	766c 675f 6f72 7075 615f 6464 6f5f 6a62     lv_group_add_obj
   23fec:	203a 6874 2065 626f 656a 7463 6920 2073     : the object is 
   23ffc:	6c61 6572 6461 2079 6461 6564 2064 6f74     already added to
   2400c:	7420 6968 2073 7267 756f 0070 766c 675f      this group.lv_g
   2401c:	6f72 7075 615f 6464 6f5f 6a62 203a 7361     roup_add_obj: as
   2402c:	6973 6e67 6f20 6a62 6365 2074 6f74 6120     sign object to a
   2403c:	206e 746f 6568 2072 7267 756f 0070 0000     n other group...

0002404c <__func__.9914>:
   2404c:	766c 695f 696e 0074                         lv_init.

00024054 <__func__.9921>:
   24054:	766c 645f 6965 696e 0074 0000               lv_deinit...

00024060 <__func__.9946>:
   24060:	766c 6f5f 6a62 645f 6c65 615f 7973 636e     lv_obj_del_async
   24070:	0000 0000                                   ....

00024074 <__func__.10139>:
   24074:	766c 6f5f 6a62 735f 7465 615f 7475 5f6f     lv_obj_set_auto_
   24084:	6572 6c61 6769 006e                         realign.

0002408c <__func__.10148>:
   2408c:	766c 6f5f 6a62 735f 7465 655f 7478 635f     lv_obj_set_ext_c
   2409c:	696c 6b63 615f 6572 0061 0000               lick_area...

000240a8 <__func__.10276>:
   240a8:	766c 6f5f 6a62 735f 7465 615f 7664 685f     lv_obj_set_adv_h
   240b8:	7469 6574 7473 0000                         ittest..

000240c0 <__func__.10282>:
   240c0:	766c 6f5f 6a62 735f 7465 635f 696c 6b63     lv_obj_set_click
   240d0:	0000 0000                                   ....

000240d4 <__func__.10288>:
   240d4:	766c 6f5f 6a62 735f 7465 745f 706f 0000     lv_obj_set_top..

000240e4 <__func__.10294>:
   240e4:	766c 6f5f 6a62 735f 7465 645f 6172 0067     lv_obj_set_drag.

000240f4 <__func__.10300>:
   240f4:	766c 6f5f 6a62 735f 7465 645f 6172 5f67     lv_obj_set_drag_
   24104:	6964 0072                                   dir.

00024108 <__func__.10306>:
   24108:	766c 6f5f 6a62 735f 7465 645f 6172 5f67     lv_obj_set_drag_
   24118:	6874 6f72 0077 0000                         throw...

00024120 <__func__.10312>:
   24120:	766c 6f5f 6a62 735f 7465 645f 6172 5f67     lv_obj_set_drag_
   24130:	6170 6572 746e 0000                         parent..

00024138 <__func__.10322>:
   24138:	766c 6f5f 6a62 735f 7465 705f 7261 6e65     lv_obj_set_paren
   24148:	5f74 7665 6e65 0074                         t_event.

00024150 <__func__.10333>:
   24150:	766c 6f5f 6a62 615f 6464 705f 6f72 6574     lv_obj_add_prote
   24160:	7463 0000                                   ct..

00024164 <__func__.10339>:
   24164:	766c 6f5f 6a62 635f 656c 7261 705f 6f72     lv_obj_clear_pro
   24174:	6574 7463 0000 0000                         tect....

0002417c <__func__.10390>:
   2417c:	766c 6f5f 6a62 735f 7465 655f 6576 746e     lv_obj_set_event
   2418c:	635f 0062                                   _cb.

00024190 <__func__.10406>:
   24190:	766c 655f 6576 746e 735f 6e65 5f64 7566     lv_event_send_fu
   241a0:	636e 0000                                   nc..

000241a4 <__func__.10397>:
   241a4:	766c 655f 6576 746e 735f 6e65 0064 0000     lv_event_send...

000241b4 <__func__.10419>:
   241b4:	766c 6f5f 6a62 735f 7465 735f 6769 616e     lv_obj_set_signa
   241c4:	5f6c 6263 0000 0000                         l_cb....

000241cc <__func__.10431>:
   241cc:	766c 6f5f 6a62 735f 7465 645f 7365 6769     lv_obj_set_desig
   241dc:	5f6e 6263 0000 0000                         n_cb....

000241e4 <__func__.10437>:
   241e4:	766c 6f5f 6a62 615f 6c6c 636f 7461 5f65     lv_obj_allocate_
   241f4:	7865 5f74 7461 7274 0000 0000               ext_attr....

00024200 <__func__.10443>:
   24200:	766c 6f5f 6a62 725f 6665 6572 6873 655f     lv_obj_refresh_e
   24210:	7478 645f 6172 5f77 6170 0064               xt_draw_pad.

0002421c <__func__.10471>:
   2421c:	766c 6f5f 6a62 675f 7465 705f 7261 6e65     lv_obj_get_paren
   2422c:	0074 0000                                   t...

00024230 <__func__.10448>:
   24230:	766c 6f5f 6a62 675f 7465 735f 7263 6565     lv_obj_get_scree
   24240:	006e 0000                                   n...

00024244 <__func__.10457>:
   24244:	766c 6f5f 6a62 675f 7465 645f 7369 0070     lv_obj_get_disp.

00024254 <__func__.10477>:
   24254:	766c 6f5f 6a62 675f 7465 635f 6968 646c     lv_obj_get_child
   24264:	0000 0000                                   ....

00024268 <__func__.10328>:
   24268:	766c 6f5f 6a62 735f 7465 625f 7361 5f65     lv_obj_set_base_
   24278:	6964 0072                                   dir.

0002427c <__func__.10484>:
   2427c:	766c 6f5f 6a62 675f 7465 635f 6968 646c     lv_obj_get_child
   2428c:	625f 6361 006b 0000                         _back...

00024294 <__func__.10490>:
   24294:	766c 6f5f 6a62 635f 756f 746e 635f 6968     lv_obj_count_chi
   242a4:	646c 6572 006e 0000                         ldren...

000242ac <__func__.10500>:
   242ac:	766c 6f5f 6a62 635f 756f 746e 635f 6968     lv_obj_count_chi
   242bc:	646c 6572 5f6e 6572 7563 7372 7669 0065     ldren_recursive.

000242cc <__func__.10511>:
   242cc:	766c 6f5f 6a62 675f 7465 635f 6f6f 6472     lv_obj_get_coord
   242dc:	0073 0000                                   s...

000242e0 <__func__.10524>:
   242e0:	766c 6f5f 6a62 675f 7465 785f 0000 0000     lv_obj_get_x....

000242f0 <__func__.10531>:
   242f0:	766c 6f5f 6a62 675f 7465 795f 0000 0000     lv_obj_get_y....

00024300 <__func__.10538>:
   24300:	766c 6f5f 6a62 675f 7465 775f 6469 6874     lv_obj_get_width
   24310:	0000 0000                                   ....

00024314 <__func__.10543>:
   24314:	766c 6f5f 6a62 675f 7465 685f 6965 6867     lv_obj_get_heigh
   24324:	0074 0000                                   t...

00024328 <__func__.10588>:
   24328:	766c 6f5f 6a62 675f 7465 615f 7475 5f6f     lv_obj_get_auto_
   24338:	6572 6c61 6769 006e                         realign.

00024340 <__func__.10593>:
   24340:	766c 6f5f 6a62 675f 7465 655f 7478 635f     lv_obj_get_ext_c
   24350:	696c 6b63 705f 6461 6c5f 6665 0074 0000     lick_pad_left...

00024360 <__func__.10598>:
   24360:	766c 6f5f 6a62 675f 7465 655f 7478 635f     lv_obj_get_ext_c
   24370:	696c 6b63 705f 6461 725f 6769 7468 0000     lick_pad_right..

00024380 <__func__.10603>:
   24380:	766c 6f5f 6a62 675f 7465 655f 7478 635f     lv_obj_get_ext_c
   24390:	696c 6b63 705f 6461 745f 706f 0000 0000     lick_pad_top....

000243a0 <__func__.10608>:
   243a0:	766c 6f5f 6a62 675f 7465 655f 7478 635f     lv_obj_get_ext_c
   243b0:	696c 6b63 705f 6461 625f 746f 6f74 006d     lick_pad_bottom.

000243c0 <__func__.10613>:
   243c0:	766c 6f5f 6a62 675f 7465 655f 7478 645f     lv_obj_get_ext_d
   243d0:	6172 5f77 6170 0064                         raw_pad.

000243d8 <__func__.10162>:
   243d8:	766c 6f5f 6a62 635f 656c 6e61 735f 7974     lv_obj_clean_sty
   243e8:	656c 6c5f 7369 0074                         le_list.

000243f0 <__func__.10700>:
   243f0:	766c 6f5f 6a62 675f 7465 6c5f 636f 6c61     lv_obj_get_local
   24400:	735f 7974 656c 0000                         _style..

00024408 <__func__.10200>:
   24408:	766c 6f5f 6a62 725f 6d65 766f 5f65 7473     lv_obj_remove_st
   24418:	6c79 5f65 6f6c 6163 5f6c 7270 706f 0000     yle_local_prop..

00024428 <__func__.10706>:
   24428:	766c 6f5f 6a62 675f 7465 685f 6469 6564     lv_obj_get_hidde
   24438:	006e 0000                                   n...

0002443c <__func__.9962>:
   2443c:	766c 6f5f 6a62 695f 766e 6c61 6469 7461     lv_obj_invalidat
   2444c:	5f65 7261 6165 0000                         e_area..

00024454 <__func__.9977>:
   24454:	766c 6f5f 6a62 695f 766e 6c61 6469 7461     lv_obj_invalidat
   24464:	0065 0000                                   e...

00024468 <__func__.9995>:
   24468:	766c 6f5f 6a62 6d5f 766f 5f65 6f66 6572     lv_obj_move_fore
   24478:	7267 756f 646e 0000                         ground..

00024480 <__func__.10001>:
   24480:	766c 6f5f 6a62 6d5f 766f 5f65 6162 6b63     lv_obj_move_back
   24490:	7267 756f 646e 0000                         ground..

00024498 <__func__.10009>:
   24498:	766c 6f5f 6a62 735f 7465 705f 736f 0000     lv_obj_set_pos..

000244a8 <__func__.10018>:
   244a8:	766c 6f5f 6a62 735f 7465 785f 0000 0000     lv_obj_set_x....

000244b8 <__func__.10024>:
   244b8:	766c 6f5f 6a62 735f 7465 795f 0000 0000     lv_obj_set_y....

000244c8 <__func__.10082>:
   244c8:	766c 6f5f 6a62 615f 696c 6e67 0000 0000     lv_obj_align....

000244d8 <__func__.10096>:
   244d8:	766c 6f5f 6a62 615f 696c 6e67 6f5f 6972     lv_obj_align_ori
   244e8:	6f67 0000                                   go..

000244ec <__func__.10133>:
   244ec:	766c 6f5f 6a62 725f 6165 696c 6e67 0000     lv_obj_realign..

000244fc <__func__.10207>:
   244fc:	766c 6f5f 6a62 725f 6665 6572 6873 735f     lv_obj_refresh_s
   2450c:	7974 656c 0000 0000                         tyle....

00024514 <__func__.10156>:
   24514:	766c 6f5f 6a62 615f 6464 735f 7974 656c     lv_obj_add_style
   24524:	0000 0000                                   ....

00024528 <__func__.10269>:
   24528:	766c 6f5f 6a62 735f 7465 685f 6469 6564     lv_obj_set_hidde
   24538:	006e 0000                                   n...

0002453c <__func__.10711>:
   2453c:	766c 6f5f 6a62 675f 7465 615f 7664 685f     lv_obj_get_adv_h
   2454c:	7469 6574 7473 0000                         ittest..

00024554 <__func__.10716>:
   24554:	766c 6f5f 6a62 675f 7465 635f 696c 6b63     lv_obj_get_click
   24564:	0000 0000                                   ....

00024568 <__func__.10721>:
   24568:	766c 6f5f 6a62 675f 7465 745f 706f 0000     lv_obj_get_top..

00024578 <__func__.10726>:
   24578:	766c 6f5f 6a62 675f 7465 645f 6172 0067     lv_obj_get_drag.

00024588 <__func__.10731>:
   24588:	766c 6f5f 6a62 675f 7465 645f 6172 5f67     lv_obj_get_drag_
   24598:	6964 0072                                   dir.

0002459c <__func__.10736>:
   2459c:	766c 6f5f 6a62 675f 7465 645f 6172 5f67     lv_obj_get_drag_
   245ac:	6874 6f72 0077 0000                         throw...

000245b4 <__func__.10747>:
   245b4:	766c 6f5f 6a62 675f 7465 705f 7261 6e65     lv_obj_get_paren
   245c4:	5f74 7665 6e65 0074                         t_event.

000245cc <__func__.10752>:
   245cc:	766c 6f5f 6a62 675f 7465 625f 7361 5f65     lv_obj_get_base_
   245dc:	6964 0072                                   dir.

000245e0 <__func__.9928>:
   245e0:	766c 6f5f 6a62 635f 6572 7461 0065 0000     lv_obj_create...

000245f0 <__func__.9985>:
   245f0:	766c 6f5f 6a62 735f 7465 705f 7261 6e65     lv_obj_set_paren
   24600:	0074 0000                                   t...

00024604 <__func__.10031>:
   24604:	766c 6f5f 6a62 735f 7465 735f 7a69 0065     lv_obj_set_size.

00024614 <__func__.10043>:
   24614:	766c 6f5f 6a62 735f 7465 775f 6469 6874     lv_obj_set_width
   24624:	0000 0000                                   ....

00024628 <__func__.10049>:
   24628:	766c 6f5f 6a62 735f 7465 685f 6965 6867     lv_obj_set_heigh
   24638:	0074 0000                                   t...

0002463c <__func__.10757>:
   2463c:	766c 6f5f 6a62 675f 7465 705f 6f72 6574     lv_obj_get_prote
   2464c:	7463 0000                                   ct..

00024650 <__func__.10763>:
   24650:	766c 6f5f 6a62 695f 5f73 7270 746f 6365     lv_obj_is_protec
   24660:	6574 0064                                   ted.

00024664 <__func__.10769>:
   24664:	766c 6f5f 6a62 675f 7465 735f 6174 6574     lv_obj_get_state
   24674:	0000 0000                                   ....

00024678 <__func__.10548>:
   24678:	766c 6f5f 6a62 675f 7465 775f 6469 6874     lv_obj_get_width
   24688:	665f 7469 0000 0000                         _fit....

00024690 <__func__.10555>:
   24690:	766c 6f5f 6a62 675f 7465 685f 6965 6867     lv_obj_get_heigh
   246a0:	5f74 6966 0074 0000                         t_fit...

000246a8 <__func__.10517>:
   246a8:	766c 6f5f 6a62 675f 7465 695f 6e6e 7265     lv_obj_get_inner
   246b8:	635f 6f6f 6472 0073 ffff 0000               _coords.....

000246c4 <__func__.10345>:
   246c4:	766c 6f5f 6a62 735f 7465 735f 6174 6574     lv_obj_set_state
   246d4:	0000 0000                                   ....

000246d8 <__func__.11002>:
   246d8:	7274 6e61 5f73 7263 6165 6574 0000 0000     trans_create....

000246e8 <__func__.10368>:
   246e8:	766c 6f5f 6a62 615f 6464 735f 6174 6574     lv_obj_add_state
   246f8:	0000 0000                                   ....

000246fc <__func__.10375>:
   246fc:	766c 6f5f 6a62 635f 656c 7261 735f 6174     lv_obj_clear_sta
   2470c:	6574 0000                                   te..

00024710 <__func__.10775>:
   24710:	766c 6f5f 6a62 675f 7465 735f 6769 616e     lv_obj_get_signa
   24720:	5f6c 6263 0000 0000                         l_cb....

00024728 <__func__.10780>:
   24728:	766c 6f5f 6a62 675f 7465 645f 7365 6769     lv_obj_get_desig
   24738:	5f6e 6263 0000 0000                         n_cb....

00024740 <__func__.10785>:
   24740:	766c 6f5f 6a62 675f 7465 655f 6576 746e     lv_obj_get_event
   24750:	635f 0062                                   _cb.

00024754 <__func__.10790>:
   24754:	766c 6f5f 6a62 675f 7465 655f 7478 615f     lv_obj_get_ext_a
   24764:	7474 0072                                   ttr.

00024768 <__func__.10796>:
   24768:	766c 6f5f 6a62 675f 7465 745f 7079 0065     lv_obj_get_type.

00024778 <__func__.10811>:
   24778:	766c 6f5f 6a62 675f 7465 675f 6f72 7075     lv_obj_get_group
   24788:	0000 0000                                   ....

0002478c <__func__.9935>:
   2478c:	766c 6f5f 6a62 645f 6c65 0000               lv_obj_del..

00024798 <__func__.10901>:
   24798:	766c 6f5f 6a62 645f 6c65 615f 7973 636e     lv_obj_del_async
   247a8:	635f 0062                                   _cb.

000247ac <__func__.9951>:
   247ac:	766c 6f5f 6a62 635f 656c 6e61 0000 0000     lv_obj_clean....

000247bc <__func__.10816>:
   247bc:	766c 6f5f 6a62 695f 5f73 6f66 7563 6573     lv_obj_is_focuse
   247cc:	0064 0000 2e2e 742f 6968 6472 6170 7472     d...../thirdpart
   247dc:	2f79 766c 6c67 732f 6372 6c2f 5f76 6f63     y/lvgl/src/lv_co
   247ec:	6572 6c2f 5f76 626f 2e6a 0063 766c 695f     re/lv_obj.c.lv_i
   247fc:	696e 3a74 6120 726c 6165 7964 6920 696e     nit: already ini
   2480c:	6574 0064 766c 695f 696e 2074 6572 6461     ted.lv_init read
   2481c:	0079 0000 766c 645f 6965 696e 2074 6f64     y...lv_deinit do
   2482c:	656e 0000 554e 4c4c 7020 696f 746e 7265     ne..NULL pointer
   2483c:	0000 0000 766c 735f 7263 675f 7465 645f     ....lv_scr_get_d
   2484c:	7369 3a70 7320 7263 6565 206e 6f6e 2074     isp: screen not 
   2485c:	6f66 6e75 0064 0000 766c 6f5f 6a62 735f     found...lv_obj_s
   2486c:	7465 625f 7361 5f65 6964 3a72 6920 766e     et_base_dir: inv
   2487c:	6c61 6469 6220 7361 2065 6964 0072 0000     alid base dir...
   2488c:	766c 6f5f 6a62 635f 656c 6e61 735f 7974     lv_obj_clean_sty
   2489c:	656c 6c5f 7369 3a74 6320 6e61 7427 6620     le_list: can't f
   248ac:	6e69 2064 7473 6c79 2065 6977 6874 6020     ind style with `
   248bc:	6170 7472 0060 0000 766c 6f5f 6a62 735f     part`...lv_obj_s
   248cc:	7465 705f 736f 203a 6f6e 2074 6863 6e61     et_pos: not chan
   248dc:	6967 676e 7020 736f 7469 6f69 206e 666f     ging position of
   248ec:	7320 7263 6565 206e 626f 656a 7463 0000      screen object..
   248fc:	766c 6f5f 6a62 615f 6464 735f 7974 656c     lv_obj_add_style
   2490c:	203a 6163 276e 2074 6966 646e 7320 7974     : can't find sty
   2491c:	656c 7720 7469 2068 7460 7079 6065 0000     le with `type`..
   2492c:	766c 6f5f 6a62 635f 6572 7461 3a65 6e20     lv_obj_create: n
   2493c:	746f 6420 7369 6c70 7961 6320 6572 7461     ot display creat
   2494c:	6465 7420 206f 6f73 6620 7261 202e 6f4e     ed to so far. No
   2495c:	7020 616c 6563 7420 206f 7361 6973 6e67      place to assign
   2496c:	7420 6568 6e20 7765 7320 7263 6565 006e      the new screen.
   2497c:	624f 656a 7463 6320 6572 7461 2065 6572     Object create re
   2498c:	6461 0079 6143 276e 2074 6573 2074 6874     ady.Can't set th
   2499c:	2065 6170 6572 746e 6f20 2066 2061 6373     e parent of a sc
   249ac:	6572 6e65 0000 0000 6143 276e 2074 6573     reen....Can't se
   249bc:	2074 6170 6572 746e 3d20 203d 554e 4c4c     t parent == NULL
   249cc:	7420 206f 6e61 6f20 6a62 6365 0074 0000      to an object...
   249dc:	766c 6f5f 6a62 0000                         lv_obj..

000249e4 <__func__.9738>:
   249e4:	766c 725f 6665 5f72 7261 6165 0000 0000     lv_refr_area....
   249f4:	2e2e 742f 6968 6472 6170 7472 2f79 766c     ../thirdparty/lv
   24a04:	6c67 732f 6372 6c2f 5f76 6f63 6572 6c2f     gl/src/lv_core/l
   24a14:	5f76 6572 7266 632e 0000 0000 6143 276e     v_refr.c....Can'
   24a24:	2074 6573 2074 4456 2042 6568 6769 7468     t set VDB height
   24a34:	7520 6973 676e 7420 6568 7220 756f 646e      using the round
   24a44:	6620 6e75 7463 6f69 2e6e 2820 7257 6e6f      function. (Wron
   24a54:	2067 6f72 6e75 5f64 6263 6f20 2072 6f74     g round_cb or to
   24a64:	7320 616d 6c6c 5620 4244 0029                small VDB).

00024a70 <__func__.9549>:
   24a70:	6c5f 5f76 7473 6c79 5f65 696c 7473 725f     _lv_style_list_r
   24a80:	6d65 766f 5f65 7473 6c79 0065               emove_style.

00024a8c <__func__.9532>:
   24a8c:	6c5f 5f76 7473 6c79 5f65 696c 7473 615f     _lv_style_list_a
   24a9c:	6464 735f 7974 656c 0000 0000               dd_style....

00024aa8 <__func__.9777>:
   24aa8:	6567 5f74 6c61 6f6c 5f63 6f6c 6163 5f6c     get_alloc_local_
   24ab8:	7473 6c79 0065 0000                         style...

00024ac0 <__func__.9583>:
   24ac0:	6c5f 5f76 7473 6c79 5f65 6573 5f74 6e69     _lv_style_set_in
   24ad0:	0074 0000                                   t...

00024ad4 <__func__.9597>:
   24ad4:	6c5f 5f76 7473 6c79 5f65 6573 5f74 6f63     _lv_style_set_co
   24ae4:	6f6c 0072                                   lor.

00024ae8 <__func__.9611>:
   24ae8:	6c5f 5f76 7473 6c79 5f65 6573 5f74 706f     _lv_style_set_op
   24af8:	0061 0000                                   a...

00024afc <__func__.9625>:
   24afc:	6c5f 5f76 7473 6c79 5f65 6573 5f74 7470     _lv_style_set_pt
   24b0c:	0072 0000                                   r...

00024b10 <__func__.9673>:
   24b10:	6c5f 5f76 7473 6c79 5f65 696c 7473 615f     _lv_style_list_a
   24b20:	6464 745f 6172 736e 735f 7974 656c 0000     dd_trans_style..
   24b30:	2e2e 742f 6968 6472 6170 7472 2f79 766c     ../thirdparty/lv
   24b40:	6c67 732f 6372 6c2f 5f76 6f63 6572 6c2f     gl/src/lv_core/l
   24b50:	5f76 7473 6c79 2e65 0063 0000 766c 735f     v_style.c...lv_s
   24b60:	7974 656c 6c5f 7369 5f74 6572 6f6d 6576     tyle_list_remove
   24b70:	735f 7974 656c 203a 6f63 6c75 6e64 7427     _style: couldn't
   24b80:	7220 6165 6c6c 636f 7461 2065 6c63 7361      reallocate clas
   24b90:	2073 696c 7473 0000 766c 735f 7974 656c     s list..lv_style
   24ba0:	6c5f 7369 5f74 6461 5f64 7473 6c79 3a65     _list_add_style:
   24bb0:	6320 756f 646c 276e 2074 6461 2064 6874      couldn't add th
   24bc0:	2065 6c63 7361 0073 6567 5f74 6f6c 6163     e class.get_loca
   24bd0:	5f6c 7473 6c79 3a65 6320 756f 646c 276e     l_style: couldn'
   24be0:	2074 7263 6165 6574 6c20 636f 6c61 7320     t create local s
   24bf0:	7974 656c 0000 0000 766c 735f 7974 656c     tyle....lv_style
   24c00:	6c5f 7369 5f74 6461 5f64 7274 6e61 5f73     _list_add_trans_
   24c10:	7473 6c79 3a65 6320 756f 646c 276e 2074     style: couldn't 
   24c20:	7263 6165 6574 7420 6172 736e 7469 6f69     create transitio
   24c30:	206e 7473 6c79 0065                         n style.

00024c38 <__func__.9728>:
   24c38:	6966 6c6c 625f 656c 646e 6465 0000 0000     fill_blended....

00024c48 <__func__.9860>:
   24c48:	616d 5f70 6c62 6e65 6564 0064 2e2e 742f     map_blended.../t
   24c58:	6968 6472 6170 7472 2f79 766c 6c67 732f     hirdparty/lvgl/s
   24c68:	6372 6c2f 5f76 7264 7761 6c2f 5f76 7264     rc/lv_draw/lv_dr
   24c78:	7761 625f 656c 646e 632e 0000 6966 6c6c     aw_blend.c..fill
   24c88:	625f 656c 646e 6465 203a 6e75 7573 7070     _blended: unsupp
   24c98:	726f 6574 2064 6c62 6e65 2064 6f6d 6564     orted blend mode
   24ca8:	0000 0000 ffff 0000                         ........

00024cb0 <__func__.9554>:
   24cb0:	766c 645f 6172 5f77 6d69 0067               lv_draw_img.

00024cbc <__func__.9618>:
   24cbc:	766c 695f 676d 645f 6172 5f77 6f63 6572     lv_img_draw_core
   24ccc:	0000 0000 2e2e 742f 6968 6472 6170 7472     ....../thirdpart
   24cdc:	2f79 766c 6c67 732f 6372 6c2f 5f76 7264     y/lvgl/src/lv_dr
   24cec:	7761 6c2f 5f76 7264 7761 695f 676d 632e     aw/lv_draw_img.c
   24cfc:	0000 0000 6d49 6761 2065 7264 7761 203a     ....Image draw: 
   24d0c:	7273 2063 7369 4e20 4c55 004c 6f4e 640a     src is NULL.No.d
   24d1c:	7461 0061 6d49 6761 2065 7264 7761 6520     ata.Image draw e
   24d2c:	7272 726f 0000 0000 6d49 6761 2065 7264     rror....Image dr
   24d3c:	7761 6320 6e61 7427 7220 6165 2064 6874     aw can't read th
   24d4c:	2065 696c 656e 0000                         e line..

00024d54 <_lv_bpp1_opa_table>:
   24d54:	ff00 0000                                   ....

00024d58 <_lv_bpp2_opa_table>:
   24d58:	5500 ffaa                                   .U..

00024d5c <_lv_bpp4_opa_table>:
   24d5c:	1100 3322 5544 7766 9988 bbaa ddcc ffee     .."3DUfw........

00024d6c <_lv_bpp8_opa_table>:
   24d6c:	0100 0302 0504 0706 0908 0b0a 0d0c 0f0e     ................
   24d7c:	1110 1312 1514 1716 1918 1b1a 1d1c 1f1e     ................
   24d8c:	2120 2322 2524 2726 2928 2b2a 2d2c 2f2e      !"#$%&'()*+,-./
   24d9c:	3130 3332 3534 3736 3938 3b3a 3d3c 3f3e     0123456789:;<=>?
   24dac:	4140 4342 4544 4746 4948 4b4a 4d4c 4f4e     @ABCDEFGHIJKLMNO
   24dbc:	5150 5352 5554 5756 5958 5b5a 5d5c 5f5e     PQRSTUVWXYZ[\]^_
   24dcc:	6160 6362 6564 6766 6968 6b6a 6d6c 6f6e     `abcdefghijklmno
   24ddc:	7170 7372 7574 7776 7978 7b7a 7d7c 7f7e     pqrstuvwxyz{|}~.
   24dec:	8180 8382 8584 8786 8988 8b8a 8d8c 8f8e     ................
   24dfc:	9190 9392 9594 9796 9998 9b9a 9d9c 9f9e     ................
   24e0c:	a1a0 a3a2 a5a4 a7a6 a9a8 abaa adac afae     ................
   24e1c:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
   24e2c:	c1c0 c3c2 c5c4 c7c6 c9c8 cbca cdcc cfce     ................
   24e3c:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
   24e4c:	e1e0 e3e2 e5e4 e7e6 e9e8 ebea edec efee     ................
   24e5c:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................

00024e6c <__func__.9614>:
   24e6c:	766c 645f 6172 5f77 656c 7474 7265 0000     lv_draw_letter..

00024e7c <__func__.9696>:
   24e7c:	7264 7761 6c5f 7465 6574 5f72 7573 7062     draw_letter_subp
   24e8c:	0078 0000                                   x...

00024e90 <__func__.9641>:
   24e90:	7264 7761 6c5f 7465 6574 5f72 6f6e 6d72     draw_letter_norm
   24ea0:	6c61 0000                                   al..

00024ea4 <_lv_bpp3_opa_table>:
   24ea4:	2400 6d49 b692 ffdb 2e2e 742f 6968 6472     .$Im....../third
   24eb4:	6170 7472 2f79 766c 6c67 732f 6372 6c2f     party/lvgl/src/l
   24ec4:	5f76 7264 7761 6c2f 5f76 7264 7761 6c5f     v_draw/lv_draw_l
   24ed4:	6261 6c65 632e 0000 766c 645f 6172 5f77     abel.c..lv_draw_
   24ee4:	656c 7474 7265 203a 6f66 746e 6920 2073     letter: font is 
   24ef4:	554e 4c4c 0000 0000 766c 645f 6172 5f77     NULL....lv_draw_
   24f04:	656c 7474 7265 203a 6c67 7079 2068 7364     letter: glyph ds
   24f14:	2e63 6e20 746f 6620 756f 646e 0000 0000     c. not found....
   24f24:	766c 645f 6172 5f77 656c 7474 7265 203a     lv_draw_letter: 
   24f34:	6863 7261 6361 6574 2772 2073 6962 6d74     character's bitm
   24f44:	7061 6e20 746f 6620 756f 646e 0000 0000     ap not found....
   24f54:	766c 645f 6172 5f77 656c 7474 7265 203a     lv_draw_letter: 
   24f64:	6e69 6176 696c 2064 7062 2070 6f6e 2074     invalid bpp not 
   24f74:	6f66 6e75 0064 0000 766c 645f 6172 5f77     found...lv_draw_
   24f84:	656c 7474 7265 203a 6e69 6176 696c 2064     letter: invalid 
   24f94:	7062 0070                                   bpp.

00024f98 <wcorr.10369>:
   24f98:	8080 8180 8281 8382 8584 8786 8a89 8d8c     ................
   24fa8:	918f 9593 9997 9e9b a2a0 a7a5 adaa b2af     ................
   24fb8:	00b5 0000                                   ....

00024fbc <__func__.9580>:
   24fbc:	766c 645f 6172 5f77 616d 6b73 615f 6464     lv_draw_mask_add
   24fcc:	0000 0000                                   ....

00024fd0 <__func__.9645>:
   24fd0:	766c 645f 6172 5f77 616d 6b73 615f 676e     lv_draw_mask_ang
   24fe0:	656c 695f 696e 0074 2e2e 742f 6968 6472     le_init.../third
   24ff0:	6170 7472 2f79 766c 6c67 732f 6372 6c2f     party/lvgl/src/l
   25000:	5f76 7264 7761 6c2f 5f76 7264 7761 6d5f     v_draw/lv_draw_m
   25010:	7361 2e6b 0063 0000 766c 6d5f 7361 5f6b     ask.c...lv_mask_
   25020:	6461 3a64 6e20 206f 6c70 6361 2065 6f74     add: no place to
   25030:	6120 6464 7420 6568 6d20 7361 006b 0000      add the mask...
   25040:	6e55 7865 6570 7463 6465 7320 6174 7472     Unexpected start
   25050:	615f 676e 656c 0000 6e55 7865 6570 7463     _angle..Unexpect
   25060:	6465 6520 646e 615f 676e 656c 0000 0000     ed end_angle....
   25070:	ffff 0000                                   ....

00025074 <__func__.9886>:
   25074:	7264 7761 705f 7461 6574 6e72 0000 0000     draw_pattern....
   25084:	2e2e 742f 6968 6472 6170 7472 2f79 766c     ../thirdparty/lv
   25094:	6c67 732f 6372 6c2f 5f76 7264 7761 6c2f     gl/src/lv_draw/l
   250a4:	5f76 7264 7761 725f 6365 2e74 0063 0000     v_draw_rect.c...
   250b4:	7264 7761 695f 676d 203a 6163 276e 2074     draw_img: can't 
   250c4:	6567 2074 6d69 6761 2065 6e69 6f66 0000     get image info..
   250d4:	766c 695f 676d 645f 7365 6769 3a6e 6920     lv_img_design: i
   250e4:	616d 6567 7320 756f 6372 2065 7974 6570     mage source type
   250f4:	6920 2073 6e75 6e6b 776f 006e 1100 3322      is unknown..."3
   25104:	5544 7766 9988 bbaa ddcc ffee               DUfw........

00025110 <__func__.7156>:
   25110:	766c 695f 676d 625f 6675 735f 7465 705f     lv_img_buf_set_p
   25120:	6c61 7465 6574 0000                         alette..

00025128 <__func__.9528>:
   25128:	6c5f 5f76 6d69 5f67 6163 6863 5f65 706f     _lv_img_cache_op
   25138:	6e65 0000                                   en..

0002513c <__func__.9548>:
   2513c:	766c 695f 676d 635f 6361 6568 735f 7465     lv_img_cache_set
   2514c:	735f 7a69 0065 0000 2e2e 742f 6968 6472     _size...../third
   2515c:	6170 7472 2f79 766c 6c67 732f 6372 6c2f     party/lvgl/src/l
   2516c:	5f76 7264 7761 6c2f 5f76 6d69 5f67 6163     v_draw/lv_img_ca
   2517c:	6863 2e65 0063 0000 766c 695f 676d 635f     che.c...lv_img_c
   2518c:	6361 6568 6f5f 6570 3a6e 7420 6568 6320     ache_open: the c
   2519c:	6361 6568 7320 7a69 2065 7369 3020 0000     ache size is 0..
   251ac:	6d69 6761 2065 7264 7761 203a 6163 6863     image draw: cach
   251bc:	2065 696d 7373 202c 6c63 736f 2065 6e61     e miss, close an
   251cc:	2064 6572 7375 2065 6e61 6520 746e 7972     d reuse an entry
   251dc:	0000 0000 6d69 6761 2065 7264 7761 203a     ....image draw: 
   251ec:	6163 6863 2065 696d 7373 202c 6163 6863     cache miss, cach
   251fc:	6465 7420 206f 6e61 6520 706d 7974 6520     ed to an empty e
   2520c:	746e 7972 0000 0000 6d49 6761 2065 7264     ntry....Image dr
   2521c:	7761 6320 6e61 6f6e 2074 706f 6e65 7420     aw cannot open t
   2522c:	6568 6920 616d 6567 7220 7365 756f 6372     he image resourc
   2523c:	0065 0000                                   e...

00025240 <__func__.9619>:
   25240:	766c 695f 676d 645f 6365 646f 7265 625f     lv_img_decoder_b
   25250:	6975 746c 695f 5f6e 6e69 6f66 0000 0000     uilt_in_info....

00025260 <__func__.9626>:
   25260:	766c 695f 676d 645f 6365 646f 7265 625f     lv_img_decoder_b
   25270:	6975 746c 695f 5f6e 706f 6e65 0000 0000     uilt_in_open....

00025280 <__func__.9673>:
   25280:	766c 695f 676d 645f 6365 646f 7265 625f     lv_img_decoder_b
   25290:	6975 746c 695f 5f6e 696c 656e 745f 7572     uilt_in_line_tru
   252a0:	5f65 6f63 6f6c 0072 1100 3322 5544 7766     e_color..."3DUfw
   252b0:	9988 bbaa ddcc ffee                         ........

000252b8 <__func__.9656>:
   252b8:	766c 695f 676d 645f 6365 646f 7265 625f     lv_img_decoder_b
   252c8:	6975 746c 695f 5f6e 6572 6461 6c5f 6e69     uilt_in_read_lin
   252d8:	0065 0000                                   e...

000252dc <__func__.9588>:
   252dc:	766c 695f 676d 645f 6365 646f 7265 635f     lv_img_decoder_c
   252ec:	6572 7461 0065 0000                         reate...

000252f4 <__func__.9550>:
   252f4:	6c5f 5f76 6d69 5f67 6564 6f63 6564 5f72     _lv_img_decoder_
   25304:	6e69 7469 0000 0000 2e2e 742f 6968 6472     init....../third
   25314:	6170 7472 2f79 766c 6c67 732f 6372 6c2f     party/lvgl/src/l
   25324:	5f76 7264 7761 6c2f 5f76 6d69 5f67 6564     v_draw/lv_img_de
   25334:	6f63 6564 2e72 0063 6d49 6761 2065 6567     coder.c.Image ge
   25344:	2074 6e69 6f66 6720 7465 7220 6165 2064     t info get read 
   25354:	6966 656c 6820 6165 6564 0072 6d49 6761     file header.Imag
   25364:	2065 6567 2074 6e69 6f66 6620 756f 646e     e get info found
   25374:	7520 6b6e 6f6e 6e77 7320 6372 7420 7079      unknown src typ
   25384:	0065 0000 6962 006e 7542 6c69 2d74 6e69     e...bin.Built-in
   25394:	6920 616d 6567 6420 6365 646f 7265 6320      image decoder c
   253a4:	6e61 7427 6f20 6570 206e 6874 2065 6966     an't open the fi
   253b4:	656c 0000 6d69 5f67 6564 6f63 6564 5f72     le..img_decoder_
   253c4:	7562 6c69 5f74 6e69 6f5f 6570 3a6e 6f20     built_in_open: o
   253d4:	7475 6f20 2066 656d 6f6d 7972 0000 0000     ut of memory....
   253e4:	6d49 6761 2065 6564 6f63 6564 2072 706f     Image decoder op
   253f4:	6e65 203a 6e75 6e6b 776f 206e 6f63 6f6c     en: unknown colo
   25404:	2072 6f66 6d72 7461 0000 0000 7542 6c69     r format....Buil
   25414:	2d74 6e69 6920 616d 6567 6420 6365 646f     t-in image decod
   25424:	7265 7320 6565 206b 6166 6c69 6465 0000     er seek failed..
   25434:	7542 6c69 2d74 6e69 6920 616d 6567 6420     Built-in image d
   25444:	6365 646f 7265 7220 6165 2064 6166 6c69     ecoder read fail
   25454:	6465 0000 7542 6c69 2d74 6e69 6920 616d     ed..Built-in ima
   25464:	6567 6420 6365 646f 7265 7220 6165 2064     ge decoder read 
   25474:	6f6e 2074 7573 7070 726f 7374 7420 6568     not supports the
   25484:	6320 6c6f 726f 6620 726f 616d 0074 0000      color format...
   25494:	766c 695f 676d 645f 6365 646f 7265 695f     lv_img_decoder_i
   254a4:	696e 3a74 6f20 7475 6f20 2066 656d 6f6d     nit: out of memo
   254b4:	7972 0000                                   ry..

000254b8 <__func__.9652>:
   254b8:	766c 665f 6e6f 5f74 6567 5f74 6962 6d74     lv_font_get_bitm
   254c8:	7061 665f 746d 745f 7478 0000 2e2e 742f     ap_fmt_txt..../t
   254d8:	6968 6472 6170 7472 2f79 766c 6c67 732f     hirdparty/lvgl/s
   254e8:	6372 6c2f 5f76 6f66 746e 6c2f 5f76 6f66     rc/lv_font/lv_fo
   254f8:	746e 665f 746d 745f 7478 632e 0000 0000     nt_fmt_txt.c....

00025508 <kern_classes>:
   25508:	5518 0002 6164 0002 60c8 0002 313d 0000     .U..da...`..=1..

00025518 <kern_class_values>:
   25518:	0100 0000 0000 0000 0100 0000 0003 0000     ................
   25528:	0200 0000 0000 0000 0000 0000 0000 0000     ................
   25538:	0000 0001 0000 0000 0000 0000 0000 0000     ................
   25548:	0100 000c fa07 0000 0000 f1f2 0c02 0406     ................
   25558:	02f6 010d 030b 0008 0000 0000 0000 0000     ................
   25568:	0000 020f 00fe 0000 0000 0000 0000 0000     ................
   25578:	0500 f800 0000 0000 fb00 0504 0000 00fd     ................
   25588:	03fe fd00 fd00 fbff 0000 0000 00fd fd00     ................
   25598:	00fc fd00 fb00 0000 0000 0000 0000 fd00     ................
   255a8:	00fd 00fc 00f9 00e1 fb00 0500 0008 fb00     ................
   255b8:	0303 0508 05fc 0000 00f1 0000 0000 0000     ................
   255c8:	0000 0000 00f7 0000 0000 0000 0000 0000     ................
   255d8:	0000 f900 f3fd f600 00fe 0000 0100 000a     ................
   255e8:	fef8 01ff fc00 0000 edfe 0000 0000 0000     ................
   255f8:	0000 0000 ec00 0afe 0000 0000 0000 0000     ................
   25608:	0000 0000 00f6 0000 0000 0000 0000 0800     ................
   25618:	0300 0000 00fb 0000 0000 0000 0000 0000     ................
   25628:	0000 0000 0000 020a 0001 0000 0000 0000     ................
	...
   25658:	00f7 0000 0000 0000 0000 0000 0000 0000     ................
   25668:	0000 0000 0000 0200 0305 fd08 0000 fd05     ................
   25678:	ddf8 0702 0105 00fd 0009 0008 0008 00e8     ................
   25688:	08fd 0800 05fd 0003 0100 00fd fc00 0014     ................
   25698:	0014 0008 030b 0804 0000 f700 0000 0000     ................
   256a8:	fe01 0200 fdfb 02fb fd00 0000 f600 0000     ................
	...
   256c0:	ef00 0000 0000 0000 0000 0000 0000 0000     ................
   256d0:	0100 00f2 00f0 0000 fe00 1900 fdfd 0303     ................
   256e0:	00fe 03fd 0000 00f2 0000 0000 0000 0000     ................
   256f0:	0000 00e7 0003 0000 0000 0000 0000 0000     ................
   25700:	f000 0f00 0000 00f7 0008 e7ef fbef 0008     ................
   25710:	ef00 0300 00fa 00fc 0000 0000 0000 0000     ................
   25720:	0000 0700 e108 0000 0000 0000 0000 0000     ................
   25730:	0000 000c 0002 0000 0000 0202 fbfd ff00     ................
   25740:	fdff 0000 00fe 0000 00fb 00fe fbfa fa00     ................
   25750:	f8f8 00fb 00fb 00fb 0000 fe00 0000 0003     ................
   25760:	fd02 0100 0000 0300 00fe 0000 03fe ff03     ................
   25770:	0000 fb00 ff00 0000 0000 0100 0300 00fe     ................
   25780:	00fd 00fc fe00 0800 0000 00fd 0000 0000     ................
   25790:	01ff fefe 0000 00fd 00fd 0000 0000 0000     ................
   257a0:	0000 ffff fd00 00fd 0000 0000 0001 fe00     ................
   257b0:	fd00 fdfd 0000 0000 0000 0000 fe00 0000     ................
   257c0:	0000 fdfe fc00 f800 f8fe 0005 fb00 0503     ................
   257d0:	0007 fffa 00fd f4ff fe03 f202 0003 0100     ................
   257e0:	00f3 fef2 feea f300 0500 0007 0003 0000     ................
   257f0:	0100 fb00 00fd 00f8 0000 00fd 0000 00fd     ................
   25800:	0000 0000 ffff ff00 00fd 0000 0000 0000     ................
   25810:	fdfd fe00 fefd 0000 00fd 0000 0000 0000     ................
   25820:	0000 0000 fefe fd00 fe00 fb00 0003 fd00     ................
   25830:	0301 0003 0000 0000 fe00 0000 0000 0200     ................
   25840:	0000 00fd fefd 00fd 0000 0000 0000 0002     ................
   25850:	00fe 0000 fd00 00fc 00fb fe08 f801 0000     ................
   25860:	f307 f5f3 03fb fe00 fbef fb00 fb00 fb04     ................
   25870:	00f0 00f9 0100 02ff 00fe 0003 f6f8 f300     ................
   25880:	fbfa f8fa f9fd fbff 02f9 0100 fd00 0000     ................
   25890:	0200 0300 0000 0000 0000 0000 0000 fd00     ................
   258a0:	ff00 ff00 00fd fafc fffa f800 0000 0000     ................
   258b0:	0000 00fe 0000 0100 00fe 0000 0003 0000     ................
   258c0:	0000 0000 0c00 0000 0000 0000 0002 0000     ................
   258d0:	00fd 0000 0000 0000 0000 0000 00fb 0003     ................
	...
   258ec:	00fe 0000 00fb 0000 f300 00f8 0000 f3fc     ................
   258fc:	0000 03fd f900 0000 0000 0000 0000 0000     ................
   2590c:	00fc fb00 0000 0000 0000 0000 0000 0000     ................
   2591c:	0003 00fb 0000 0300 0200 fbfb fd00 fdfd     ................
   2592c:	0000 0000 0000 00f8 00fd fdfc fa00 f8fa     ................
   2593c:	00fe 00fb 00f8 0000 1400 0000 0001 fd00     ................
   2594c:	0300 f500 0000 0000 e800 08fb fe08 00f5     ................
   2595c:	fc03 f300 fdff ee03 03fd 0400 fcf7 f8f7     ................
   2596c:	00f5 f100 0f00 0000 00ff 0000 ffff f9fd     ................
   2597c:	fff8 00e8 0000 0000 0000 0000 0001 0000     ................
	...
   25998:	fd00 ff00 fcfd 0000 00fb 00fd 0000 0000     ................
	...
   259b0:	0000 00ff 00fb 0500 03ff fa00 fe03 f9ff     ................
   259c0:	00fd fdfd 00fe fcfc 0000 fffe fcfe 00fd     ................
   259d0:	fd00 0300 00fe 00fa 0000 00fb 00fc fcfc     ................
   259e0:	0003 0000 0000 0000 fb00 0003 00fc fdfe     ................
   259f0:	fef8 fefe feff fffd 0000 0000 fd00 fefe     ................
   25a00:	0000 0000 fe03 fe00 0000 fe00 fefd fdfe     ................
   25a10:	00fe 0a02 00ff 00f9 05fe fd00 fdf5 0004     ................
   25a20:	f400 03fc 02fc fe00 f8fe fc00 0001 fc00     ................
   25a30:	0000 0300 fb03 00fb fdfc fdfc 00fd 01fc     ................
   25a40:	fcfb 0008 0000 0000 0000 0000 0003 0000     ................
	...
   25a64:	00fc 0000 0000 0000 0000 0000 0000 0000     ................
	...
   25a90:	00fe 0000 0000 0000 0000 0000 0000 0000     ................
	...
   25aac:	0000 fdfe 0000 0000 0000 0000 0000 0000     ................
   25abc:	00fc fd00 0000 fdfd 0000 0000 00fd 0000     ................
   25acc:	ff00 0000 0000 fe00 0000 0000 00fc 00fb     ................
   25adc:	0000 00f8 fa02 0105 f4fe 0000 fdfa f600     ................
   25aec:	f9fa 0000 fdf5 f6f6 00f4 00f9 1102 00fd     ................
   25afc:	fdfa fdff f9fc f7fb faf6 00fd fe00 0100     ................
   25b0c:	0000 feee 0608 f7fa 0100 00f8 fef3 05fd     ................
   25b1c:	fde8 0001 ef00 f3fd edfd 0000 00ee 010f     ................
   25b2c:	fe00 0000 0000 feff fef6 ef00 0000 0000     ................
   25b3c:	00f8 00fe f9ff 00f4 ff00 f8fc 00fd 00fe     ................
   25b4c:	0000 f400 f8fd fef8 fafc fcfd fb00 f8fe     ................
   25b5c:	00fc fbfd fbfd 0100 fe00 00f8 0005 00fb     ................
   25b6c:	0000 0300 0200 0afb fd00 fdfd 0000 0000     ................
   25b7c:	0000 00f8 00fd fdfc fa00 f8fa 00fe 02fb     ................
   25b8c:	000a 0000 1400 0000 0001 fd00 0300 0000     ................
   25b9c:	0000 0000 0000 00ff 0000 0000 fbfe 0000     ................
   25bac:	0000 ff00 0000 fd00 00fd fb00 00fd fb00     ................
   25bbc:	0400 00ff 0000 0000 0100 0000 0000 0504     ................
   25bcc:	fe02 f800 00fc f808 fbf8 0afb 0305 feea     ................
   25bdc:	fd05 fd00 fd03 00f7 03fd fefd fef8 0000     ................
   25bec:	0508 f900 f200 07fd f6fd fd01 f8f8 0afd     ................
   25bfc:	0003 00fc 00f9 0802 f7fa faf6 0008 ed01     ................
   25c0c:	03fe fefc 00fa f7fa fcfc 00fe fa00 fdfb     ................
   25c1c:	0800 fd06 00f2 fcf2 f700 fff1 fcf8 f9f8     ................
   25c2c:	0007 fd00 fb00 00fe fbfd 0400 03f8 0000     ................
   25c3c:	00f2 fafd fefc faf8 faf8 f800 fafd f8fb     ................
   25c4c:	00fd 0100 fc0c f800 00fd fbfd f9fa f6f9     ................
   25c5c:	fbfd 0005 00fc fdf3 0502 f7f8 f8fb fd08     ................
   25c6c:	e801 05fb fcfa 00f7 f5f8 fdfd fdfe f8fb     ................
   25c7c:	00ff 0800 fe07 00ef faf1 f606 fbef f5f7     ................
   25c8c:	f8f3 0005 0000 fd00 0000 fd03 0205 05fb     ................
   25c9c:	0000 fff8 ff00 0100 fe01 0000 0000 0000     ................
   25cac:	00fd 0000 0200 0108 fd00 0000 0000 fefe     ................
   25cbc:	00fd 0000 0201 0000 0000 0002 00fe 000a     ................
   25ccc:	0105 fd01 0500 0000 0200 0000 0000 0000     ................
   25cdc:	0000 0000 0800 0700 0000 0000 0000 0000     ................
   25cec:	0000 0000 0000 00f1 04fd 0800 0000 0319     ................
   25cfc:	fbfb 0303 01fe 00f3 0c00 00f1 0000 0000     ................
   25d0c:	0000 0000 0000 0aef 0024 0000 0000 0000     ........$.......
   25d1c:	0000 0000 f100 0000 0000 0000 0000 0000     ................
	...
   25d3c:	00fc fb00 00fe 0000 0000 0000 0000 0000     ................
	...
   25d54:	00fe 00f9 0100 0000 2103 fefb 0708 03f9     .........!......
   25d64:	0000 0303 00fd 0000 0000 0000 0000 0000     ................
   25d74:	07df 0000 0000 0000 0000 0000 0000 0000     ................
   25d84:	0000 f900 0000 f900 0000 0000 fffa 0000     ................
   25d94:	fa00 fd00 f400 0000 0000 0000 0000 0000     ................
   25da4:	ef00 0000 0000 0001 0000 0000 fd00 0000     ................
   25db4:	00fb 00fc 00f9 0000 03fc 00fd f900 fafd     ................
   25dc4:	0000 00f9 00fd 00f4 00fd eb00 f6fb f7fd     ................
   25dd4:	0000 00ef fff9 0000 0000 0000 0000 fbfc     ................
   25de4:	fcfe 0000 0000 00fa 03fa 05fd fe00 fefa     ................
   25df4:	fbfc fd00 feff f902 00ff 0000 fee9 00fc     ................
   25e04:	00fa f4fe 00fe fe00 00fe 0000 0200 fe00     ................
   25e14:	fefc 0004 0000 0000 0000 0000 0000 0000     ................
	...
   25e40:	0000 0003 0000 0000 fa00 fe00 0000 fb00     ................
   25e50:	0003 0000 fdf9 00fb f900 fd00 f400 0000     ................
   25e60:	0000 00e7 f7fb 00f3 ef00 fe00 00fc 0000     ................
   25e70:	0000 0000 fd00 fffc 01fc 0000 fd04 0800     ................
   25e80:	fd0d f8fd 0d03 0604 03f9 030b 0607 0007     ................
	...
   25e98:	0000 0c10 fdfb fe00 0b14 0014 0000 0003     ................
   25ea8:	0900 0000 00fc 0000 0000 0000 0000 00fe     ................
   25eb8:	0000 0000 0000 0400 0000 0000 fdea f6fe     ................
   25ec8:	00f3 ef00 0000 0000 0000 0000 0000 0000     ................
   25ed8:	0000 0000 fc00 0000 0000 0000 0000 fe00     ................
	...
   25ef0:	0004 0000 ea00 fefd f3f6 0000 00f6 0000     ................
	...
   25f10:	00fe 0000 03fa fd00 0502 f803 ff00 03fe     ................
   25f20:	0200 0000 0000 00fa fefe 00fb f6fe 1000     ................
   25f30:	00fd fefa fe00 00fc f9fd fdfb 0000 fc00     ................
	...
   25f48:	fe00 0000 0000 0000 0000 0004 0000 ea00     ................
   25f58:	fefd f3f6 0000 00ef 0000 0000 0d00 0000     ................
	...
   25f70:	00fc fdf8 08fe fdfe 01f6 01fe f9fe 0601     ................
   25f80:	0201 0201 f6fa 00fd fbf6 f5f9 00f6 fbfc     ................
   25f90:	fdfd fefe fefd fe00 04ff 0400 00fe 0008     ................
	...
   25fa8:	0000 fe00 fdfd 0000 00f9 00ff 00fc 0000     ................
	...
   25fc0:	00f1 0000 0000 0000 0000 0000 fdfd fd00     ................
   25fd0:	0000 0000 00fe fc00 03fd fc00 fefb f900     ................
   25fe0:	fafe fdfe fc00 0000 0000 0000 0000 0000     ................
   25ff0:	ef00 0800 0000 00fb 0000 fd00 fd00 0000     ................
   26000:	00ff fe00 fa00 0000 fd0b f8f8 0302 ff03     ................
   26010:	02f9 0204 0208 fe08 00f9 f600 0000 f9f8     ................
   26020:	0000 00fb fcfd fc00 fc00 fe00 0004 f8fe     ................
   26030:	09fd 0000 00fe 00fb 0300 00fa fd03 0002     ................
   26040:	f800 fe00 00ff 03fd 00fe 0000 fdf6 00fa     ................
   26050:	00f8 f400 0900 00fd 00fb 0002 00fd f8fd     ................
   26060:	fd00 0003 0000 fe00 0000 fd03 0001 fd00     ................
   26070:	00fe 00fd 0000 0000 0000 0000 0000 0000     ................
   26080:	0000 0000 00f0 0006 fe00 0000 0000 0001     ................
   26090:	fdfd 0000 0500 0600 0000 0000 f000 01f1     ................
   260a0:	080b f604 0b02 0900 0500 0000 0000 0000     ................
   260b0:	0000 0000 0e00 0000 0000 0000 0000 0000     ................
	...

000260c8 <kern_right_class_mapping>:
   260c8:	0000 0201 0300 0504 0602 0807 0a09 0a09     ................
   260d8:	0c0b 0e0d 100f 0c11 1312 1514 0015 0000     ................
   260e8:	1716 1918 1917 1919 1917 1a19 1919 1919     ................
   260f8:	1917 1917 1b03 1d1c 1e1d 201f 2221 0023     ........... !"#.
   26108:	0024 2625 2727 0027 2627 2928 2626 2a2a     $.%&'''.'&()&&**
   26118:	2a27 2a27 2c2b 2e2d 2f2e 302e 0000 0923     '*'*+,-../.0..#.
   26128:	0931 0000 0000 0000 0000 0000 0000 0000     1...............
	...

00026164 <kern_left_class_mapping>:
   26164:	0000 0201 0300 0504 0602 0807 0a09 0a09     ................
   26174:	0c0b 0d00 0f0e 1110 1312 140c 0014 0000     ................
   26184:	1615 1817 1619 1b1a 1d1c 1e1d 201f 1d1d     ............. ..
   26194:	2116 2322 2403 251e 2625 2827 2a29 002b     .!"#.$.%%&'()*+.
   261a4:	002c 2e2d 302f 3231 2d33 3434 3035 2d2d     ,.-./0123-4450--
   261b4:	2e2e 3736 3938 3a33 3b3a 3c3a 0029 0900     ..67893::;:<)...
   261c4:	093d 0000 0000 0000 0000 0000 0000 0000     =...............
	...

00026200 <cmaps>:
   26200:	0020 0000 005f 0001 0000 0000 0000 0000      ..._...........
   26210:	0000 0000 00b0 0000 f7f3 0060 6228 0002     ..........`.(b..
   26220:	0000 0000 003b 0002                         ....;...

00026228 <unicode_list_1>:
   26228:	0000 1f72 ef51 ef58 ef5b ef5c ef5d ef61     ..r.Q.X.[.\.].a.
   26238:	ef63 ef65 ef69 ef6c ef71 ef76 ef77 ef78     c.e.i.l.q.v.w.x.
   26248:	ef8e ef98 ef9b ef9c ef9d efa1 efa2 efa3     ................
   26258:	efa4 efb7 efb8 efbe efc0 efc1 efc4 efc7     ................
   26268:	efc8 efc9 efcb efe3 efe5 f014 f015 f017     ................
   26278:	f037 f03a f043 f06c f074 f0ab f13b f190     7.:.C.l.t...;...
   26288:	f191 f192 f193 f194 f1d7 f1e3 f23d f254     ............=.T.
   26298:	f4aa f712 f7f2 0000                         ........

000262a0 <glyph_dsc>:
	...
   262a8:	0000 0450 0000 0000 0000 0450 0c03 0001     ..P.......P.....
   262b8:	0012 0640 0505 0701 001f 0b40 0c0b 0000     ..@.......@.....
   262c8:	0061 09f0 100a fe00 00b1 0d80 0c0d 0000     a...............
   262d8:	00ff 0b00 0d0b ff00 0147 0360 0502 0701     ........G.`.....
   262e8:	014c 0560 0f04 fd01 016a 0570 0f04 fd00     L.`.....j.p.....
   262f8:	0188 0660 0707 0500 01a1 0950 0808 0201     ..`.......P.....
   26308:	01c1 03a0 0503 fe00 01c9 0620 0306 0300     .......... .....
   26318:	01d2 03a0 0303 0000 01d7 05a0 1008 feff     ................
   26328:	0217 0ab0 0c0a 0000 0253 05f0 0c05 0000     ........S.......
   26338:	0271 0930 0c09 0000 02a7 0920 0c09 0000     q.0....... .....
   26348:	02dd 0ab0 0c0b 0000 031f 0930 0c09 0000     ..........0.....
   26358:	0355 09e0 0c0a 0000 0391 0990 0c09 0000     U...............
   26368:	03c7 0a50 0c0a 0000 0403 09e0 0c0a 0000     ..P.............
   26378:	043f 03a0 0903 0000 044d 03a0 0c03 fd00     ?.......M.......
   26388:	045f 0950 0808 0201 047f 0950 0608 0301     _.P.......P.....
   26398:	0497 0950 0808 0201 04b7 0930 0c09 0000     ..P.......0.....
   263a8:	04ed 1090 0f10 fd00 0565 0bb0 0c0d 00ff     ........e.......
   263b8:	05b3 0c20 0c0b 0001 05f5 0b90 0c0b 0000     .. .............
   263c8:	0637 0d30 0c0c 0001 067f 0ac0 0c09 0001     7.0.............
   263d8:	06b5 0a30 0c09 0001 06eb 0c60 0c0c 0000     ..0.......`.....
   263e8:	0733 0d00 0c0b 0001 0775 04f0 0c03 0001     3.......u.......
   263f8:	0787 0830 0c08 00ff 07b7 0b80 0c0b 0001     ..0.............
   26408:	07f9 0980 0c09 0001 082f 0f40 0c0d 0001     ......../.@.....
   26418:	087d 0d00 0c0b 0001 08bf 0d70 0c0d 0000     }.........p.....
   26428:	090d 0b90 0c0a 0001 0949 0d70 0f0e fd00     ........I.p.....
   26438:	09b2 0ba0 0c0a 0001 09ee 09f0 0c0a 0000     ................
   26448:	0a2a 0960 0c0a 0000 0a66 0ca0 0c0b 0001     *.`.....f.......
   26458:	0aa8 0b60 0c0d 00ff 0af6 1200 0c12 0000     ..`.............
   26468:	0b62 0ac0 0c0b 0000 0ba4 0a60 0c0c 00ff     b.........`.....
   26478:	0bec 0a80 0c0b 0000 0c2e 0550 0f05 fd01     ..........P.....
   26488:	0c54 05a0 1008 feff 0c94 0550 0f04 fd00     T.........P.....
   26498:	0cb2 0950 0708 0201 0cce 0800 0208 fe00     ..P.............
   264a8:	0cd6 09a0 0205 0a01 0cdb 0990 0909 0000     ................
   264b8:	0d04 0af0 0c0a 0001 0d40 0920 0909 0000     ........@. .....
   264c8:	0d69 0af0 0c0a 0000 0da5 09d0 090a 0000     i...............
   264d8:	0dd2 05a0 0c07 0000 0dfc 0b10 0c0a fd00     ................
   264e8:	0e38 0ae0 0c09 0001 0e6e 0470 0c03 0001     8.......n.p.....
   264f8:	0e80 0490 0f06 fdfe 0ead 09e0 0c09 0001     ................
   26508:	0ee3 0470 0c02 0001 0eef 10f0 090f 0001     ..p.............
   26518:	0f33 0ae0 0909 0001 0f5c 0a30 090a 0000     3.......\.0.....
   26528:	0f89 0af0 0c0a fd01 0fc5 0af0 0c0a fd00     ................
   26538:	1001 0690 0906 0001 101c 0800 0908 0000     ................
   26548:	1040 06a0 0b07 0000 1067 0ad0 0909 0001     @.......g.......
   26558:	1090 08f0 090a 00ff 10bd 0e60 090f 0000     ..........`.....
   26568:	1101 08d0 0909 0000 112a 08f0 0c0a fdff     ........*.......
   26578:	1166 0850 0908 0000 118a 05a0 0f06 fd00     f.P.............
   26588:	11b7 04d0 0f03 fd01 11ce 05a0 0f05 fd00     ................
   26598:	11f4 0950 0509 0400 120b 06b0 0606 0600     ..P.............
   265a8:	121d 0500 0403 0301 1223 1000 1110 fe00     ........#.......
   265b8:	12ab 1000 0c10 0000 130b 1000 0e10 ff00     ................
   265c8:	137b 1000 0c10 0000 13db 0b00 0c0b 0000     {...............
   265d8:	141d 1000 1010 fe00 149d 1000 1010 fe00     ................
   265e8:	151d 1200 0e12 ff00 159b 1000 1010 fe00     ................
   265f8:	161b 1200 0c12 0000 1687 1000 1010 fe00     ................
   26608:	1707 0800 0e08 ff00 173f 0c00 0e0c ff00     ........?.......
   26618:	1793 1200 1012 fe00 1823 1000 0c10 0000     ........#.......
   26628:	1883 0e00 100a fe02 18d3 0e00 120e fd00     ................
   26638:	1951 0e00 0f0e ff00 19ba 0e00 0e0e ff00     Q...............
   26648:	1a1c 0e00 100a fe02 1a6c 0e00 0e10 ffff     ........l.......
   26658:	1adc 0a00 0e0a ff00 1b22 0a00 0e0a ff00     ........".......
   26668:	1b68 0e00 0e0e ff00 1bca 0e00 040e 0400     h...............
   26678:	1be6 1200 0c12 0000 1c52 1400 1014 fe00     ........R.......
   26688:	1cf2 1200 1014 feff 1d92 1000 1010 fe00     ................
   26698:	1e12 0e00 0a0e 0100 1e58 0e00 0a0e 0100     ........X.......
   266a8:	1e9e 1400 0e14 ff00 1f2a 1000 0c10 0000     ........*.......
   266b8:	1f8a 1000 1010 fe00 200a 1000 1111 feff     ......... ......
   266c8:	209b 0e00 0e0f ff00 2104 0e00 100e fe00     . .......!......
   266d8:	2174 0e00 0e0e ff00 21d6 0a00 100c feff     t!.......!......
   266e8:	2236 0e00 100e fe00 22a6 0e00 100e fe00     6"......."......
   266f8:	2316 1200 0c12 0000 2382 1000 1212 fdff     .#.......#......
   26708:	2424 0c00 100c fe00 2484 1400 0f14 ff00     $$.......$......
   26718:	251a 1400 0a14 0100 257e 1400 0a14 0100     .%......~%......
   26728:	25e2 1400 0a14 0100 2646 1400 0a14 0100     .%......F&......
   26738:	26aa 1400 0a14 0100 270e 1400 0e15 ff00     .&.......'......
   26748:	27a1 0e00 100c fe01 2801 0e00 100e fe00     .'.......(......
   26758:	2871 1000 1111 fdff 2902 1400 0c14 0000     q(.......)......
   26768:	297a 0c00 100c fe00 29da 1020 0b11 0100     z).......) .....

00026778 <gylph_bitmap>:
   26778:	0bbf aff0 e00a 089e 8cd0 c007 0000 bf10     ................
   26788:	e01a 1ff5 513f e4f3 3e0f f240 0872 0010     ....?Q...>@.r...
   26798:	c005 e003 0000 007a 005c 0900 0780 01a0     ......z.\.......
   267a8:	ffff ffff 03fd 733e 833c 0030 00f2 00c5     ......>s<.0.....
   267b8:	0f00 0e10 0030 f002 f200 9f00 ffff ffff     ....0...........
   267c8:	3841 36c3 30e3 8900 5c00 0000 700a a007     A8.6.0...\...p..
   267d8:	0000 7900 0000 0000 0079 0000 ff5c 20e9     ...y....y...\.. 
   267e8:	fc06 9ebc 0e90 79b0 1000 800f 0079 0d00     .......y....y...
   267f8:	79f5 0000 ef03 50fd 0000 cf06 40fe 0000     .y.....P.....@..
   26808:	5e79 00f1 7900 f305 0007 0779 2ff1 bce9     y^...y....y../..
   26818:	a0af ae03 d7ff 0000 7900 0000 0000 0079     .........y....y.
   26828:	0300 80de 0500 00d0 0ce4 0150 00e3 004c     ..........P...L.
   26838:	005a 00a9 a006 c004 004e 4c00 5a00 500d     Z.......N..L.Z.P
   26848:	0000 1ce4 a058 0000 ce03 e173 e93c 0000     ....X.....s.<...
   26858:	d600 400e 00a8 7c00 c003 d003 2e00 3c20     ...@...|...... <
   26868:	3d00 0b00 0070 09e2 0680 00d0 dd04 00a0     .=..p...........
   26878:	ef09 00b1 0900 3ce4 00a0 d900 7d00 0000     .......<.....}..
   26888:	c00c a01c 0000 ae3f 00c1 0100 c0df 0000     ......?.........
   26898:	eb03 708f 0018 00db 657f 3ff0 0040 ea8f     ...p.....e.?@...
   268a8:	f703 0000 70cf f90b cf66 40bf df08 30ea     .....p..f..@...0
   268b8:	00a5 0000 0000 f500 e4f5 72e4 da00 f205     ...........r....
   268c8:	c00b 700f 403f 205f 106f 007f 106f 205f     ...p?@_ o...o._ 
   268d8:	403f 700f c00b f205 da00 303f b00c f106     ?@.p......?0....
   268e8:	f601 e900 bc00 ad00 ae00 ad00 bc00 e900     ................
   268f8:	f601 f106 b00c 303f 4a00 0600 a474 2ba0     ......?0.J..t..+
   26908:	e5ff 7f00 20fb 6b7b 008d a004 0000 0013     ..... {k........
   26918:	0000 1005 0000 500f 0000 500f 0100 511f     .......P...P...Q
   26928:	ef10 ffff 34f3 744f 0040 500f 0000 500f     .....4Ot@..P...P
   26938:	0900 fd52 a00b 0fc5 0100 1011 ff1f 04f3     ..R.............
   26948:	4044 1203 1efc 0090 0500 00f1 0a00 00b0     D@..............
   26958:	0f00 0060 5f00 0010 ab00 0000 f600 0000     ..`.._..........
   26968:	f105 0000 b00a 0000 600f 0000 104f 0000     .........`..O...
   26978:	00ac 0000 00f6 0400 00f1 0a00 00c0 0e00     ................
   26988:	0060 4f00 0010 0000 ef08 00c5 cf00 cfa8     `..O............
   26998:	0770 00f5 f20a c00d 0100 1ff8 0080 dc00     p...............
   269a8:	603f 0000 3fbd 0060 bd00 801f 0000 0ddc     ?`...?`.........
   269b8:	00c0 f801 f507 0a00 00f2 a8cf 70cf 0800     .............p..
   269c8:	c5ef ef00 36ff f37a 5f00 0530 00f3 305f     .....6z.._0..._0
   269d8:	f305 5f00 0530 00f3 305f f305 5f00 0530     ..._0..._0..._0.
   269e8:	04f3 fdbe 0770 98fd 90cf 0028 bf00 0000     ....p.....(.....
   269f8:	0700 00f2 0000 00af 0000 804f 0000 c03f     ..........O...?.
   26a08:	0000 c13e 0000 c12e 0000 d12e 0000 f82e     ..>.............
   26a18:	7777 ff46 ffff 6ffa ffff 02ff 7777 b09f     wwF....o....ww..
   26a28:	0000 e10c 0000 f309 0000 f605 0000 df00     ................
   26a38:	10e9 0400 fd59 0000 0600 00f4 0000 643f     ....Y.........?d
   26a48:	0040 f308 c9bf fb8c 7c00 d7ff 0000 0100     @........|......
   26a58:	00eb 0000 be00 0010 0000 506f 0000 2f00     ..........oP.../
   26a68:	0090 0000 d00c 0000 0800 01f3 00d5 f803     ................
   26a78:	2f00 0060 22ed f723 6f21 ffff ffff 5581     ./`.."#.!o.....U
   26a88:	5655 52f9 0000 2f00 0060 0000 f602 0500     UV.R.../`.......
   26a98:	ffff 00ff 777f 7077 e008 0000 ad00 0000     .....wwp........
   26aa8:	0b00 10c2 0000 ffdf 30fb 5504 ff68 0020     .........0.Uh. .
   26ab8:	0400 00f8 0000 920f 0050 f605 d98f fd8a     ........P.......
   26ac8:	5b10 e9ef 0010 ce05 60fc 9f00 8bc8 0570     .[.......`....p.
   26ad8:	00f8 0000 d00c 0000 1f00 0080 0000 682f     ............../h
   26ae8:	faef 3f10 64ee d08f f12f 0600 0ef4 00c0     ...?.d../.......
   26af8:	f602 f109 0600 01f3 86de b09f 1900 d8ef     ................
   26b08:	8f00 ffff e8ff 77f7 fc77 008f 4f00 9055     .......ww....OU.
   26b18:	0b00 00e0 0200 00f8 0000 109f 0000 b00f     ................
   26b28:	0000 f406 0000 dd00 0000 3f00 0070 0a00     ...........?p...
   26b38:	00f1 0100 00f9 0000 ff5c 00d7 fc06 af76     ........\.....v.
   26b48:	0ca0 00d0 f109 c00d 0700 07f2 11f7 c05e     ..............^.
   26b58:	bf00 feff 0910 54f9 d07e 802f 0400 4ff6     .......T~./....O
   26b68:	0050 f800 a01f 0500 09f6 76fb d0af 6c00     P..........v...l
   26b78:	d8ff 0010 fd8e 0080 f80c fc68 5f00 0050     ..........h.._P.
   26b88:	703f 008f 0e00 7fc0 0030 f01f d41f cf13     ?p......0.......
   26b98:	04f1 ffef f0a9 0200 0a31 00f0 0000 a00e     ........1.......
   26ba8:	0000 9f00 0930 8da7 00f7 df07 40eb 1e00     ....0........@..
   26bb8:	fc92 1003 0000 0000 1203 1efc 1e90 fc92     ................
   26bc8:	1003 0000 0000 0100 1fe9 a8d0 300e 00a0     .............0..
   26bd8:	0000 0042 7d01 03f3 e89f bf10 00b5 ee00     ..B..}..........
   26be8:	0081 1700 b4df 0000 af04 00d2 0100 ef82     ................
   26bf8:	ffff 45f3 5555 0051 0000 0100 1111 ef10     ...EUUQ.........
   26c08:	ffff 34f3 4444 5040 0000 ef00 0092 0600     ...4DD@P........
   26c18:	b5cf 0000 9f03 00e2 6c00 02f3 e99e bf20     .........l.... .
   26c28:	00c6 9300 0000 0400 fdbe 0770 77fc a0bf     ..........p..w..
   26c38:	0027 cf00 0000 0900 00f0 0100 00ea 0100     '...............
   26c48:	10dd 0000 10ce 0000 603f 0000 3001 0000     ........?`...0..
   26c58:	0100 0000 0600 00f5 0000 405f 0000 1700     .........._@....
   26c68:	fdce 00b5 0000 fb05 2353 c27d 0000 406e     ........S#}...n@
   26c78:	0000 8e00 0210 01f4 faae 493f 0ab0 1e90     ..........?I....
   26c88:	5be6 40ef 0fe3 8f30 0010 40af 1f98 d900     .[.@..0....@....
   26c98:	0000 403f 3f6a e800 0000 401f 1f5c d900     ..?@j?.....@\...
   26ca8:	0000 403f 0f6a 8f30 0010 40af 0a98 1e90     ..?@j.0....@....
   26cb8:	5ad6 a6de 03f2 01f3 faaf ee16 0050 406e     .Z..........P.n@
   26cc8:	0000 0000 0000 fb06 2353 0075 0000 1700     ........S#u.....
   26cd8:	fdce 00a3 0000 0200 00fd 0000 0000 f49f     ................
   26ce8:	0000 0000 9e0f 00b0 0000 f206 207f 0000     ............. ..
   26cf8:	dc00 f801 0000 4f00 0b60 00e0 0b00 00f0     .......O`.......
   26d08:	604f 0100 11fa ed11 0000 ff8f ffff 00f3     O`..............
   26d18:	c40e 4444 a04f f406 0000 af00 cd10 0000     ..DDO...........
   26d28:	0200 5ff8 ffff 40eb f805 5755 40df 405f     ..._...@..UW.@_@
   26d38:	0100 05fa 00f4 0f00 5fa0 1151 f43a ff05     ........._Q.:...
   26d48:	ffff 00fa 745f 5944 05fa 00f4 0800 5ff2     ...._tDY......._
   26d58:	0040 5f00 f445 0000 f209 855f 6a55 05fb     @.._E....._.Uj..
   26d68:	ffff d7ff 0000 8d02 b4fe 0400 b8ff f99d     ................
   26d78:	fd02 0020 5008 20bf 0000 0f00 00a0 0000     .. ..P. ........
   26d88:	f602 0000 0000 602f 0000 0000 00fa 0000     ....../`........
   26d98:	0b00 00f2 0000 2f00 00d2 8500 5f00 89fb     ......./....._..
   26da8:	80df 2900 ebdf 5f40 ffff 30ea 5f00 7797     ...)..@_...0._.w
   26db8:	f89e 5f00 0040 af00 5f60 0040 0d00 5fe0     ..._@...`_@...._
   26dc8:	0040 0600 5ff4 0040 0300 5ff6 0040 0300     @...._@...._@...
   26dd8:	5ff6 0040 0600 5ff4 0040 0d00 5fe0 0040     ._@...._@...._@.
   26de8:	af00 5f60 7797 f89e 5f00 ffff 30ea 5f00     ..`_.w..._...0._
   26df8:	ffff 95ff 77f9 7477 405f 0000 f405 0000     .....wwt_@......
   26e08:	5f00 1151 0511 ffff e0ff 745f 4444 f405     ._Q......._tDD..
   26e18:	0000 5f00 0040 0500 00f4 0000 975f 7777     ..._@......._.ww
   26e28:	ff65 ffff 5ffd ffff 95ff 77f9 7477 405f     e...._.....wwt_@
   26e38:	0000 f405 0000 5f00 0040 0500 22f5 1022     ......._@...."".
   26e48:	ff5f feff f805 5555 5f40 0040 0500 00f4     _.....UU@_@.....
   26e58:	0000 405f 0000 f405 0000 0000 8d01 b5fe     .._@............
   26e68:	0000 fb4f df89 02b0 20fd 0600 0b60 00f2     ..O...... ..`...
   26e78:	0000 0f00 00a0 0000 2f00 0060 0000 2f00     ........./`..../
   26e88:	0060 0900 0ff0 00a0 0900 0bf0 00f2 0900     `...............
   26e98:	02f0 20fd 0a00 00f0 fb4f df89 00c0 8d02     ... ....O.......
   26ea8:	c6fe 5f00 0040 4f00 f455 0000 f504 405f     ..._@..OU....._@
   26eb8:	0000 554f 00f4 0400 5ff5 2252 5f22 ff55     ..OU....._R""_U.
   26ec8:	ffff f5ff 855f 5555 558f 00f4 0400 5ff5     ...._.UU.U....._
   26ed8:	0040 4f00 f455 0000 f504 405f 0000 554f     @..OU....._@..OU
   26ee8:	00f4 0400 5ff5 f445 455f 5ff4 f445 455f     ....._E._E._E._E
   26ef8:	5ff4 f445 455f 00f4 ffff 00fa 7777 00fa     ._E._E......ww..
   26f08:	0000 00fa 0000 00fa 0000 00fa 0000 00fa     ................
   26f18:	0000 00fa 0000 00fa 0000 07f9 0320 0df6     ............ ...
   26f28:	8ee9 01f1 fbae 5f30 0040 eb02 f405 0100     ......0_@.......
   26f38:	00ec 405f de01 0510 00f4 20ce 5f00 bf40     .._@....... ._@.
   26f48:	0030 f405 909f 0000 cf5f 40ef 0500 91ff     0......._..@....
   26f58:	10ee 5f00 03a0 00fc f405 0600 00f8 405f     ..._.........._@
   26f68:	0900 05f5 00f4 0c00 5ff2 0040 0500 00f4     ........._@.....
   26f78:	0000 405f 0000 f405 0000 5f00 0040 0500     .._@......._@...
   26f88:	00f4 0000 405f 0000 f405 0000 5f00 0040     ...._@......._@.
   26f98:	0500 00f4 0000 975f 7777 ff25 ffff 5ff5     ......_.ww%...._
   26fa8:	0040 0000 951e 00fc 0000 f908 f55f 0000     @..........._...
   26fb8:	ff02 fd95 00e0 ae00 5ff9 705f 3f00 955f     .........__p.?_.
   26fc8:	8ff3 0b10 f9c0 315f 04e9 0ff3 f395 f207     ......_1........
   26fd8:	00db 5ff9 0d30 20ef 950f 00f3 905f f900     ..._0.. ...._...
   26fe8:	305f 7100 0f00 f395 0000 0000 5ff9 0050     _0.q........._P.
   26ff8:	4f00 ff55 0020 f504 fd5f 0000 554f f9fa     .OU. ..._...OU..
   27008:	0400 5ff5 f54a 4f00 f455 f20d f504 405f     ..._J..OU....._@
   27018:	d02f 554f 00f4 946f 5ff5 0040 afaf f455     /.OU..o.._@...U.
   27028:	0000 f5df 405f 0200 55ff 00f4 0600 00f5     ...._@...U......
   27038:	8d01 b5fe 0000 ff04 9eb8 00fa fd02 0020     .............. .
   27048:	f908 bf00 0020 0a00 0ff2 00a0 0000 723f     .... .........?r
   27058:	00f6 0000 f900 602f 0000 0f00 fa90 0000     ....../`........
   27068:	0300 0bf7 00f2 0000 20af d22f 0000 908f     ......... /.....
   27078:	4f00 89fb a0ef 0000 df28 50eb 5f00 ffff     .O......(..P._..
   27088:	00d7 975f bf78 5fc0 0040 f607 405f 0000     .._.x.._@..._@..
   27098:	5ffa 0040 fa00 405f 0300 5ff8 2362 f16e     ._@..._@..._b#n.
   270a8:	ff5f fdff 5f30 5485 0020 405f 0000 5f00     _...0_.T ._@..._
   270b8:	0040 0000 405f 0000 0000 8d01 b5fe 0000     @..._@..........
   270c8:	4e00 89fb a0ef 0200 20fd 0800 00f9 f20a     .N....... ......
   270d8:	0000 af00 0f20 00a0 0000 703f 602f 0000     .... .....?p/`..
   270e8:	0f00 2f90 0060 0000 900f 901f 0000 2f00     .../`........../
   270f8:	0b70 00f1 0000 20af fc03 0010 f907 0000     p...... ........
   27108:	fa6f df78 00b0 0300 ffae 00c5 0000 0000     o.x.............
   27118:	d43e b015 0000 0200 ffbf 0080 0000 0100     >...............
   27128:	0031 ff5f d7ff 5f00 7897 c0bf 405f 0700     1._...._.x.._@..
   27138:	5ff6 0040 fa00 405f 0000 5ffa 0040 f803     ._@..._@..._@...
   27148:	525f 6e23 5fe1 ffff 30fc 855f f955 5f00     _R#n._...0_.U.._
   27158:	0040 407f 405f 0c00 5fe0 0040 f902 5c00     @..@_@..._@....\
   27168:	d9ef 0720 87fc 90af c00e 0100 0f10 0080     .. .............
   27178:	0000 f50d 0000 0300 eaef 0050 0500 feae     ..........P.....
   27188:	0040 0000 f14e 0000 0500 08f3 0000 f208     @...N...........
   27198:	fa2f bf77 02a0 ff9d 00c7 ffff ffff 67f5     /.w............g
   271a8:	fb78 7277 0100 00f7 0000 f701 0000 0100     x.wr............
   271b8:	00f7 0000 f701 0000 0100 00f7 0000 f701     ................
   271c8:	0000 0100 00f7 0000 f701 0000 0100 00f7     ................
   271d8:	0000 f701 0000 306f 0000 168f 00f3 0800     ......o0........
   271e8:	6ff1 0030 8f00 f316 0000 f108 306f 0000     .o0.........o0..
   271f8:	168f 00f3 0800 6ff1 0030 8f00 f405 0000     .......o0.......
   27208:	f009 703f 0000 00cd 20de 5f00 0480 a8ff     ..?p..... ._....
   27218:	d0bf 0300 fdbe 0081 e00c 0000 6f00 6f30     .............o0o
   27228:	0050 0c00 00c0 00fb 0300 00f6 f209 0000     P...............
   27238:	00ae 2f00 0080 901f 0000 00ce f207 0000     .../............
   27248:	f605 db00 0000 0e00 4fc0 0050 0000 3b8f     .........OP....;
   27258:	00e0 0000 fb02 00f8 0000 0b00 10ff 0000     ................
   27268:	0000 b04f 0000 405f 0000 00df 0200 0ff5     ..O..._@........
   27278:	0090 ff02 0040 f007 e00b 0700 90fe 0c00     ....@...........
   27288:	06b0 00f3 aa0c 00e0 601f f801 1f00 f354     .........`....T.
   27298:	6f00 0010 00cd 107f 00f8 00cc 7f00 cb20     .o............ .
   272a8:	ad00 f701 0000 712f 00f6 265f 00f2 0d00     ....../q.._&....
   272b8:	f1c6 0f00 d07b 0000 fd08 00c0 df0b 0080     ....{...........
   272c8:	0300 70ff 0600 30ff 0000 ef00 0020 fe01     ...p...0.... ...
   272d8:	0000 903f 0000 00cd 408f 7f00 0030 10de     ..?......@..0...
   272e8:	802f 0300 0cfa 00d0 0700 f3fb 0000 0c00     /...............
   272f8:	00f8 0000 ef01 00c0 0000 7fbf 0070 6f00     ............p..o
   27308:	af60 0020 b02f ed01 0c00 00f1 f804 f607     `. ./...........
   27318:	0000 f309 e00c 0000 f207 f703 0000 901f     ................
   27328:	af00 0010 109e 1f00 02a0 00f6 0800 0bf3     ................
   27338:	00d0 0000 4fec 0040 0000 fb5f 0000 0000     .....O@..._.....
   27348:	f20c 0000 0000 f009 0000 0000 f009 0000     ................
   27358:	0000 f009 0000 0000 f009 0000 ff3f ffff     ............?...
   27368:	01fd 7777 bf77 0090 0000 c01e 0000 0c00     ..www...........
   27378:	00f2 0000 f508 0000 0400 00f9 0000 ec01     ................
   27388:	0000 0000 20cf 0000 8f00 0050 0000 904f     ..... ....P...O.
   27398:	0000 1e00 77f8 7777 ff05 ffff f0ff ff5f     .....www......_.
   273a8:	f705 5f50 0530 00f3 305f f305 5f00 0530     ..P_0..._0..._0.
   273b8:	00f3 305f f305 5f00 0530 00f3 305f f705     .._0..._0..._0..
   273c8:	5f50 00ff 007e 0000 401f 0000 900c 0000     P_..~....@......
   273d8:	e007 0000 f402 0000 c900 0000 7e00 0000     .............~..
   273e8:	2f00 0040 0c00 0090 0700 00e0 0200 00f3     ./@.............
   273f8:	0000 00d9 0000 007e 0000 302f 0000 900d     ......~.../0....
   27408:	0000 e007 fabf ea35 ea00 ea00 ea00 ea00     ......5.........
   27418:	ea00 ea00 ea00 ea00 ea00 ea00 ea00 ea35     ..............5.
   27428:	fabf 2f00 0080 9d00 00e0 f300 00d5 d006     .../............
   27438:	007b 600c 201f 103f 800b 009a e004 ffff     {..`. ?.........
   27448:	ffff 1111 1111 f607 0300 01e7 fd9e 0080     ................
   27458:	87ce 90af 0002 af00 0000 0600 02f2 ffbe     ................
   27468:	20ff 42ec f227 502f 7f00 ec20 7f42 02f2     . .B'./P.. .B...
   27478:	fbbf 206f 008f 0000 8f00 0000 0000 008f     ..o ............
   27488:	0000 8f00 fe2b 00b3 ec8f ef78 8f30 00a0     ....+.....x.0...
   27498:	c01e 208f 0700 8ff1 0000 f305 208f 0700     ... ......... ..
   274a8:	8ff1 00a0 d01e ec8f ef78 8e30 fe2b 00b3     ........x.0.+...
   274b8:	3a00 c4ef 4f00 7cd8 0df4 00d0 1307 00f6     .:...O.|........
   274c8:	0000 304f 0000 f603 0000 0d00 00d0 1006     ..O0............
   274d8:	d74f f47c 3a00 c4ef 0000 0000 f701 0000     O.|..:..........
   274e8:	0100 00f7 0000 f701 3b00 a3ff 04f7 87fd     .........;......
   274f8:	f7ce d00e 0b00 3ff7 0060 f703 304f 0100     .......?`...O0..
   27508:	3ff7 0050 f703 c00e 0a00 04f7 65fc f7be     .?P..........e..
   27518:	3b00 b2ff 00f7 fe3b 00a2 fc04 ee67 0e20     .;....;.....g. .
   27528:	00c0 a01e 503f 0700 4ff0 ffff f1ff 723f     ....?P...O....?r
   27538:	2222 0e20 00c0 0002 fd04 af87 0050 ef3a     "" .........P.:.
   27548:	00d6 5d00 00fc b52f 0470 00f3 ff0c a0ff     ...]../.p.......
   27558:	f748 0053 305f 0500 00f3 5f00 0030 f305     H.S._0....._0...
   27568:	0000 305f 0500 00f3 5f00 0030 3b00 b2ff     .._0....._0..;..
   27578:	04e9 87fe f9cf d10e 0a00 3ff9 0060 f901     ...........?`...
   27588:	404f 0000 3ff9 0060 f901 d00e 0900 04f9     O@...?`.........
   27598:	87fd f8cf 3b00 b3ff 00f7 0000 f405 e909     .....;..........
   275a8:	af77 01b0 ff7c 00d8 008f 0000 f008 0000     w...|...........
   275b8:	8f00 0000 0800 bff2 10ea fb8f fd89 f808     ................
   275c8:	0600 8ff4 0010 781f 00f0 f800 008f 0f00     .......x........
   275d8:	f088 0000 8ff8 0000 880f 00f0 f800 1a9e     ................
   275e8:	00f2 f008 088f 8ff0 f008 088f 8ff0 f008     ................
   275f8:	0700 00e2 f309 0000 0000 f107 0700 00f1     ................
   27608:	f107 0700 00f1 f107 0700 00f1 f107 0700     ................
   27618:	00f1 f107 0800 18f0 c06e fc3e 8f20 0000     ........n.>. ...
   27628:	0800 00f0 0000 008f 0000 f008 1d00 8fd1     ................
   27638:	1d00 08e2 1df0 00e2 2d8f 00f3 fe08 70ff     .........-.....p
   27648:	8f00 bfe2 0830 01f2 10ee 008f fb03 f008     ....0...........
   27658:	0700 8ff7 8f8f 8f8f 8f8f 8f8f 8f8f 8e8f     ................
   27668:	fe3c 3b91 a2fe ff08 9f96 c6cf d08f 708f     <..;...........p
   27678:	9f00 00c0 585f 00f1 f605 0100 8ff7 0000     ...._X..........
   27688:	404f 0f00 f088 0400 00f4 f800 008f 4f00     O@.............O
   27698:	0040 880f 00f0 f404 0000 8ff8 0000 404f     @.............O@
   276a8:	0f00 8e80 fe3b 08a1 a6ff d08f 808f 6f00     ....;..........o
   276b8:	f148 0100 8ff7 0000 880f 00f0 f800 008f     H...............
   276c8:	0f00 f088 0000 8ff8 0000 800f 3b00 c4ef     .............;..
   276d8:	0400 87fd 60cf d00e 0b00 3ff1 0060 f503     .....`.....?`...
   276e8:	304f 0100 3ff7 0060 f503 d00e 0b00 04f1     O0...?`.........
   276f8:	77fd 60cf 3b00 c4ef 8e00 fe3b 00b3 fb8f     .w.`.;....;.....
   27708:	df57 8f30 0090 c00d 108f 0700 8ff1 0000     W.0.............
   27718:	f305 208f 0700 8ff1 00a0 d01e ec8f ef78     ... ..........x.
   27728:	8f30 fe2b 00b3 008f 0000 8f00 0000 0000     0.+.............
   27738:	008f 0000 0000 ff3b f7a2 fd04 de87 0ef7     ......;.........
   27748:	00d0 f70b 603f 0300 4ff7 0030 f701 603f     ....?`...O0...?`
   27758:	0300 0ef7 00d0 f70b fd04 ce77 00f7 ff3b     ..........w...;.
   27768:	f7a3 0000 0100 00f7 0000 f701 0000 0100     ................
   27778:	8ef7 f02b ed8f 8f90 00a0 208f 8f00 0000     ..+........ ....
   27788:	008f 8f00 0000 008f 8f00 0000 ae02 91fd     ................
   27798:	d71e d069 304f 0000 b42f 0010 ef06 60fd     ..i.O0../......`
   277a8:	0100 f55b 0001 f700 a75f f36b df19 40ec     ..[....._.k....@
   277b8:	f305 0000 305f cf00 faff 8f04 3075 f305     ...._0......u0..
   277c8:	0000 305f 0500 00f3 5f00 0030 f404 0000     .._0....._0.....
   277d8:	c61f 0080 fc5d ae10 0000 5a2f 00e0 f502     ....]...../Z....
   277e8:	00ae 2f00 e05a 0200 aef5 0000 592f 00f0     .../Z......./Y..
   277f8:	f504 306f af00 ee51 bf76 02f5 fbbe 503f     ..o0..Q.v.....?P
   27808:	c00d 0000 06cb 00f2 f502 f900 0900 00e0     ................
   27818:	009e 800f 2f00 6f60 0010 c00c 00cb 0500     ...../`o........
   27828:	f4f6 0000 ef00 00d0 0000 708f bb00 0000     ...........p....
   27838:	109f 4f00 f116 0e00 00f6 c009 600f fc05     ...O.........`..
   27848:	00b0 00f6 00ac 5fab 5f10 0510 0ff1 f750     ......._._....P.
   27858:	b00a 0f00 f076 c009 00f5 ac00 00ba 8f4f     ....v.........O.
   27868:	0000 ff04 0040 a0ef 0000 e00e 0800 00f4     ....@...........
   27878:	4f00 0070 209f 308f 505f cd00 902e 0200     .Op.. .0_P......
   27888:	d0ff 0000 f60a 0000 fd04 00e1 eb01 c00d     ................
   27898:	be00 3f10 6f80 0040 407f c00d 0000 06cb     ...?.o@..@......
   278a8:	00f3 f402 ea00 0900 00d0 108f 701f 1f00     .............p..
   278b8:	7f70 0010 e00a 00d9 0300 f2f9 0000 cf00     p...............
   278c8:	00b0 0000 406f 0000 ad00 0000 791c 00f5     ....o@.......y..
   278d8:	1a00 70ee 0000 ff4f f9ff 5515 f45b 0000     ...p..O....U[...
   278e8:	804f 0100 00ec 0b00 00e1 8f00 0040 f704     O...........@...
   278f8:	0000 e51e 5355 ff5f fcff 2c00 00f5 61af     ....US_....,...a
   27908:	cc00 0000 00db db00 0000 00db ea02 1f00     ................
   27918:	00f4 fa05 0000 00db db00 0000 00db cc00     ................
   27928:	0000 61af 2c00 5ff5 f115 155f 5ff1 f115     ...a.,._.._.._..
   27938:	155f 5ff1 f115 155f 5ff1 f115 105f 80be     _.._.._.._.._...
   27948:	af03 0140 00f6 701f f701 1f00 0070 00f9     ..@....p....p...
   27958:	fb0a fb00 1f20 0170 00f7 701f f601 af03     .... .p....p....
   27968:	be40 0090 0000 0000 3d00 00e4 0cb5 f586     @........=......
   27978:	201e 03f0 90ef 0002 1000 0200 90ce 400d     . .............@
   27988:	3b89 0e00 003b 0d0e 8940 ce02 0090 f808     .;..;...@.......
   27998:	e7ef 00f7 0000 0000 0000 0000 0000 0000     ................
   279a8:	4900 00dc 0000 1600 ffbf 00ff 0300 ff8d     .I..............
   279b8:	ffff 00ff cf00 ffff ffff 00ff ff00 ffff     ................
   279c8:	c7ff 00ff ff00 eaff 0051 00ff ff00 0083     ........Q.......
   279d8:	0000 00ff ff00 0000 0000 00ff ff00 0000     ................
   279e8:	0000 00ff ff00 0000 0000 00ff ff00 0000     ................
   279f8:	ff2b 00ff ff00 0000 ffdf 2bff ffff 0000     +..........+....
   27a08:	ffdf dffd ffff 0000 ff2b dfb2 fdff 0000     ........+.......
   27a18:	0000 2b00 b2ff 0000 0000 d000 ff0f ffff     ...+............
   27a28:	f0ff ff0d c8ff 8888 ff8c f0ff 800f 0000     ................
   27a38:	f008 f00f 800f 0000 f008 ff0f 80ff 0000     ................
   27a48:	ff08 f0ff ec0f cccc f0ce f00f ec0f cccc     ................
   27a58:	f0ce ff0f 80ff 0000 ff08 f0ff 800f 0000     ................
   27a68:	f008 f00f 800f 0000 f008 ff0f c8ff 8888     ................
   27a78:	ff8c d0ff ff0f ffff f0ff df0d 73ff ffff     .............s..
   27a88:	ffff fffd a5ff ffff ffff ffff a5ff ffff     ................
   27a98:	ffff dfff 73ff ffff ffff 00fd 0000 0000     .....s..........
   27aa8:	0000 df00 73ff ffff ffff fffd a5ff ffff     .....s..........
   27ab8:	ffff ffff a5ff ffff ffff dfff 73ff ffff     .............s..
   27ac8:	ffff 00fd 0000 0000 0000 df00 73ff ffff     .............s..
   27ad8:	ffff fffd a5ff ffff ffff ffff a5ff ffff     ................
   27ae8:	ffff dfff 73ff ffff ffff 00fd 0000 0000     .....s..........
   27af8:	0a00 00b1 0000 0000 bf00 00fc 0000 0000     ................
   27b08:	ff0b 00fb 0000 0000 ffbf 1bc0 00a0 0b00     ................
   27b18:	fcff cf00 00fb bf00 c0ff bf00 b0ff ff0b     ................
   27b28:	00fc 0c00 fbff ffbf 00c0 0000 ffcf fbff     ................
   27b38:	0000 0000 ff0c b0ff 0000 0000 bf00 00fb     ................
   27b48:	0000 0000 0b00 00b0 0000 0300 0000 0300     ................
   27b58:	fc08 0010 f81c fcff 1c10 f5ff fcff ff2c     ..............,.
   27b68:	05f5 ffff f5ff 0500 ffff 00f5 1d00 fdff     ................
   27b78:	0010 ff1c fcff 1c10 f9ff fcff ff1c 05f5     ................
   27b88:	fcff f5df 0500 d1ff 00a4 0400 00a1 0000     ................
   27b98:	e04f 0000 0000 1002 f16f 1003 0000 d05f     O.......o....._.
   27ba8:	f16f d13f 0300 f1ff f16f fd5f 0d00 40ff     o.?.....o._....@
   27bb8:	f16f ff09 4f70 00f7 f16f cf00 9fe0 00f0     o...pO..o.......
   27bc8:	f16f 5f00 bff3 00c0 f16f 2f00 bff5 00c0     o.._....o../....
   27bd8:	e04f 1f00 aff6 00e0 0000 4f00 6ff4 00f4     O..........O.o..
   27be8:	0000 af00 0ff0 10fe 0000 ff05 06a0 d3ff     ................
   27bf8:	0000 ff7f 0020 ff9f beda f4ff 0000 ff06     .... ...........
   27c08:	ffff 30fd 0000 1700 cabd 0050 0000 0000     ...0......P.....
   27c18:	b88b 0000 0000 0000 ffff 0000 0000 0630     ..............0.
   27c28:	ffff 0360 0400 dffd ffff effd 0d40 ffff     ..`.........@...
   27c38:	ffff ffff 4fd0 ffff 9ff9 ffff 08f4 ffff     .....O..........
   27c48:	0220 ffff 0080 f9ff 0000 ff9f 0000 f9ff      ...............
   27c58:	0000 ff9f 0800 ffff 0220 ffff 4f80 ffff     ........ ....O..
   27c68:	9ff9 ffff 0df4 ffff ffff ffff 04d0 dffe     ................
   27c78:	ffff dffd 0040 0630 ffff 0360 0000 0000     ....@.0...`.....
   27c88:	ffff 0000 0000 0000 b88b 0000 0000 0000     ................
   27c98:	dd03 3f30 00f3 0000 6f00 f5ff f44f 0000     ..0?.....o..O...
   27ca8:	0900 99ff bfff 00f4 0100 f6bf 6f22 f4ff     ............"o..
   27cb8:	0000 fe2d ff35 ef53 00f4 ff04 8fc1 f8ff     ..-.5.S.........
   27cc8:	fe2d 7f40 1afa ffff a1ff f7af 82cf ffdf     -.@.............
   27cd8:	ffff 28fd 14fc ff0e ffff ffff 41e0 0f00     ...(.........A..
   27ce8:	ffff ffff f0ff 0000 ff0f 00f9 ff8f 00f0     ................
   27cf8:	0f00 f8ff 8f00 f0ff 0000 ff0f 00f8 ff8f     ................
   27d08:	00f0 0e00 f6ff 6f00 e0ff 0000 0000 fddf     .......o........
   27d18:	0000 0000 0000 ffff 0000 0000 0000 ffff     ................
   27d28:	0000 0000 0000 ffff 0000 0000 0000 ffff     ................
   27d38:	0000 0000 0000 ffff 0000 0000 ff4f ffff     ............O...
   27d48:	f4ff 0000 ff0b ffff b0ff 0000 bf00 ffff     ................
   27d58:	00fb 0000 0b00 ffff 00b0 0000 0000 fbbf     ................
   27d68:	0000 df00 fcff b11b ffcf fffd ffff 2cc2     ...............,
   27d78:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   27d88:	e0f0 dfff ffff ffff ffff 00fd ef04 ffff     ................
   27d98:	feff 0040 1e00 ffff ffff e1ff 0000 b0af     ..@.............
   27da8:	0000 0b00 00fa ff05 0010 0000 ff01 1e50     ..............P.
   27db8:	00f6 0000 0000 e16f b0af 0000 0000 0b00     ......o.........
   27dc8:	fffa ffff 0080 ff08 ffff ffff f1ff 1f00     ................
   27dd8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   27de8:	ffff ffff ffff ffff ffff ffff ffff ff8f     ................
   27df8:	ffff ffff ffff 00f8 0600 dabd 0250 00ff     ............P...
   27e08:	ef05 ffff 42fe 00ff ff7f 7ba7 f9ff 05ff     .....B.....{....
   27e18:	c1ff 0000 ff2c 0eff 00fc 0200 df22 5fff     ....,.......".._
   27e28:	00f2 0f00 ffff 8fff 00b0 0f00 ffff 00ff     ................
	...
   27e44:	0000 ff00 ffff 00f0 0b00 fff8 ffff 00f0     ................
   27e54:	2f00 fff4 22fd 0020 cf00 ffe0 c2ff 0000     ./..." .........
   27e64:	ff2c ff40 ff9f 6ab7 f7ff ff00 df24 ffff     ,.@....j....$...
   27e74:	50fe ff00 0520 dbac 0060 0000 0000 0000     .P.. ...`.......
   27e84:	0000 008d 0800 00ff 8f00 dfff ffff ffff     ................
   27e94:	ffff ffff ffff ffff ffff ffff ffff dfff     ................
   27ea4:	ffff 00ff 8f00 00ff 0800 00ff 0000 008d     ................
	...
   27ec0:	008d 0000 0800 00ff 0000 8f00 00ff cf00     ................
   27ed0:	ffff 01ff ff50 ffff 06ff fff7 ffff 00ff     ....P...........
   27ee0:	ffbe ffff 00ff ffae ffff 05ff dff8 ffff     ................
   27ef0:	02ff 0060 9f00 00ff 0000 0900 00ff 0000     ..`.............
   27f00:	0000 009e 0000 0000 0000 0000 0000 0000     ................
   27f10:	0600 0010 0000 0000 0000 d21f 0000 0000     ................
   27f20:	008d 0300 10ee 0000 ff08 0a00 2fb1 00b0     ............./..
   27f30:	8f00 00ff fc05 f407 ffdf ffff 5002 605f     .............P_`
   27f40:	fff9 ffff 06ff 0df7 bdc0 ffff ffff ae00     ................
   27f50:	f009 ff9f ffff 00ff 09ae 8ff0 ffff ffff     ................
   27f60:	f706 c00d dfad ffff 02ff 5f50 e960 0000     ..........P_`...
   27f70:	ff8f 0500 06fc 00f4 0800 00ff b10a b02f     ............../.
   27f80:	0000 8d00 0000 ee02 0010 0000 0000 1f00     ................
   27f90:	00d2 0000 0000 0000 1006 8f00 ffff ffff     ................
   27fa0:	ffff fff8 fffc ffff ffff ffff 2f20 ffff     ............ /..
   27fb0:	ffff fcff 0c00 ffff ffee ffff 2f20 feff     ............ /..
   27fc0:	ef22 ffff fffc e2ff 2e00 ffff 4efe 20fe     "............N. 
   27fd0:	0200 ffff 02e2 00c2 0000 ffff 0020 0000     ............ ...
   27fe0:	0000 ffff 0000 0000 0000 ffff ffff ffff     ................
   27ff0:	ffff 8fff ffff ffff ffff 00f8 0000 0000     ................
   28000:	30ff 0100 ffcc 0040 ff2d 40ff ef03 ffff     .0....@.-..@....
   28010:	3f40 ffff 44ff ffff ffff ff9f ffff ffff     @?...D..........
   28020:	ffff ffff ffff ffff afff ffff ffff ff45     ..............E.
   28030:	ffff 40ff ff4f ffff 0340 ffef 40ff 2e00     ...@O...@....@..
   28040:	ffff 0030 cc01 0000 0000 0000 0000 0000     ..0.............
   28050:	0000 918f 0000 0000 ff00 70ff 0000 0000     ...........p....
   28060:	ffff 40fd 0000 ff00 ffff 10fa 0000 ffff     ...@............
   28070:	ffff 00f7 ff00 ffff ffff 00d5 ffff ffff     ................
   28080:	ffff ffb2 ffff ffff fdff ffff ffff ffff     ................
   28090:	fffd ffff ffff b2ff ffff ffff d5ff ff00     ................
   280a0:	ffff f7ff 0000 ffff faff 0010 ff00 fdff     ................
   280b0:	0040 0000 ffff 0070 0000 8e00 00a1 0000     @.....p.........
	...
   280d0:	ff8f 00f8 ff8f fff8 ffff ff00 ffff ffff     ................
   280e0:	00ff ffff ffff ffff ff00 ffff ffff 00ff     ................
   280f0:	ffff ffff ffff ff00 ffff ffff 00ff ffff     ................
   28100:	ffff ffff ff00 ffff ffff 00ff ffff ffff     ................
   28110:	ffff ff00 ffff ffff 00ff ffff ffff ffff     ................
   28120:	ff00 ffff ffff 00ff ffff 7fff f7ff 7f00     ................
   28130:	f7ff ff8f ffff ffff fff8 ffff ffff ffff     ................
   28140:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28150:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28160:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28170:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28180:	ffff ffff ffff ffff ffff ffff 8fff ffff     ................
   28190:	ffff f8ff 0000 0000 cc00 0010 ff03 d2ff     ................
   281a0:	0400 ffff 30fe ff04 ffff 04f4 ffff ffff     .....0..........
   281b0:	ff54 ffff f9ff ffff ffff ffff ffff ffff     T...............
   281c0:	ffff ffff fff9 ffff 44ff ffff f3ff ff04     .........D......
   281d0:	feff 0430 ffff 00d2 ff04 10cc 0300 00ff     ..0.............
   281e0:	0000 0000 0000 2d00 00d2 0000 0000 ef01     .......-........
   281f0:	10fe 0000 0000 ff1d d1ff 0000 0000 ffcf     ................
   28200:	fcff 0000 0b00 ffff ffff 00b0 af00 ffff     ................
   28210:	ffff 00fa ff09 ffff ffff 90ff ff0f ffff     ................
   28220:	ffff f0ff ff08 ffff ffff 80ff 0000 0000     ................
   28230:	0000 0000 ff0c ffff ffff c0ff ff0f ffff     ................
   28240:	ffff f0ff ff0f ffff ffff f0ff ff0c ffff     ................
   28250:	ffff c0ff 0000 1a00 0040 0100 f0df 0000     ........@.......
   28260:	ff1d 00a0 df01 00fa 1d00 a0ff 0100 fadf     ................
   28270:	0000 ff0c 00a0 0d00 80ff 0000 df01 00f8     ................
   28280:	0000 ff1d 0080 0100 f8df 0000 1d00 80ff     ................
   28290:	0000 df01 00f0 0000 501b a104 0000 0f00     .........P......
   282a0:	10fd 0000 ff0a 00d1 0000 fdaf 0010 0a00     ................
   282b0:	d1ff 0000 af00 10fd 0000 ff0a 00c0 0800     ................
   282c0:	d0ff 0000 fd8f 0010 ff08 00d1 8f00 10fd     ................
   282d0:	0800 d1ff 0000 fd0f 0010 0500 00b1 0000     ................
   282e0:	0000 ff04 0040 0000 0800 80ff 0000 0000     ....@...........
   282f0:	ff08 0080 0000 0800 80ff 0000 0000 ff08     ................
   28300:	0080 4800 8c88 c8ff 8488 ffff ffff ffff     ...H............
   28310:	ffff ffff ffff ffff 8848 ff8c 88c8 0084     ........H.......
   28320:	0800 80ff 0000 0000 ff08 0080 0000 0800     ................
   28330:	80ff 0000 0000 ff08 0080 0000 0400 40ff     ...............@
   28340:	0000 4414 4444 4444 ef41 ffff ffff feff     ...DDDDDA.......
   28350:	ffff ffff ffff 7bff bbbb bbbb b7bb 0000     .......{........
   28360:	ad05 daff 0050 0000 df04 88fc fdcf 0040     ....P.........@.
   28370:	7f00 40fe 0400 f7ef 0700 f4ff 9e00 4f80     ...@...........O
   28380:	70ff ff4f 00c0 f8af ff0c dff4 80ff ff9a     .pO.............
   28390:	08fe fdff ffdf ef80 feff ff08 4ffd c0ff     .............O..
   283a0:	ff8f 0cf8 f4ff ff07 08f4 80ee ff4f 0070     ............O.p.
   283b0:	fe7f 0040 ef04 00f8 0400 fcdf cf88 40fd     ..@............@
   283c0:	0000 0500 ffad 50da 0000 208c 0000 0000     .......P... ....
   283d0:	0000 0000 e4df 0000 0000 0000 0000 ff1b     ................
   283e0:	4980 fddf 00a5 0000 7f00 ffff 8cd8 d4ff     .I..............
   283f0:	0000 0400 f8ef 0000 ff4e 0070 0000 ff1c     ........N.p.....
   28400:	e869 ff04 00f7 e304 9f00 fffe cf80 40ff     i..............@
   28410:	ff0d 0570 ffff 8fe0 d0ff ff0d 00f7 ff2d     ..p...........-.
   28420:	8fe0 d0ff ff04 00fc af00 cff8 30ff 7f00     .............0..
   28430:	40ff 0600 ffff 00f7 0800 f4ff 0000 ff3e     .@............>.
   28440:	00a0 0000 ff4d 82c8 bf01 00f7 0000 5a00     ....M..........Z
   28450:	fcdf 0810 a0ff 0000 0000 0000 0000 fd4e     ..............N.
	...
   28468:	c802 0000 0000 d22d 0000 0000 0000 0000     ......-.........
   28478:	fbbf 0000 0000 0000 0500 ffff 0050 0000     ............P...
   28488:	0000 0d00 ffff 00d0 0000 0000 7f00 ffff     ................
   28498:	00f7 0000 0000 ff01 8dd8 10ff 0000 0000     ................
   284a8:	ff0a 0aa0 a0ff 0000 0000 ff3f 0bb0 f3ff     ..........?.....
   284b8:	0000 0000 ffcf 0cc0 fcff 0000 0500 ffff     ................
   284c8:	0dd0 ffff 0050 0e00 ffff 9ff9 ffff 00e0     ....P...........
   284d8:	8f00 ffff 2ee2 ffff 00f8 ff02 ffff 0990     ................
   284e8:	ffff 10ff ff0a ffff 3ee3 ffff a0ff ff0f     .........>......
   284f8:	ffff ffff ffff f0ff ff08 ffff ffff ffff     ................
   28508:	80ff 0000 0000 0000 0000 0000 0000 0000     ................
   28518:	00d8 0000 0000 0000 80ff ffff 0070 ff07     ............p...
   28528:	f8ff ffff 00f6 ff6f fdff 8e78 15ff e8ff     ......o...x.....
   28538:	e2ff 0200 4fe5 20fe 20fe 0000 ff13 00f3     .....O. . ......
   28548:	0052 0000 ff3f 0031 0052 0200 f4ef 205e     R...?.1.R.....^ 
   28558:	20fe 8e78 51ff e8ff e2ff ffff 00f6 ff6f     . x..Q........o.
   28568:	fdff ffff 0070 ff07 f8ff 0000 0000 0000     ....p...........
   28578:	80ff 0000 0000 0000 00d8 0000 0000 0000     ................
	...
   28590:	0000 0100 10dd 0000 0000 ff1d 00d1 0000     ................
   285a0:	df01 fdff 0010 1d00 99ff d1ff 0100 f9df     ................
   285b0:	9f00 10fd ff1d 0090 ff09 bfd1 00f9 0000     ................
   285c0:	fb9f 905f 0000 0900 00f5 0000 0000 0000     .._.............
   285d0:	0000 0000 0000 5f00 0090 0000 f509 f9bf     ......._........
   285e0:	0000 9f00 1dfb 90ff 0900 d1ff df01 00f9     ................
   285f0:	fd9f 0010 ff1d ff99 00d1 0100 ffdf 10fd     ................
   28600:	0000 1d00 d1ff 0000 0000 dd01 0010 0000     ................
	...
   28620:	1d00 00d1 0000 0000 0000 df01 10fd ffef     ................
   28630:	ffff 00d0 ff1d d1ff ffaf ffff 00f0 cfcf     ................
   28640:	fcfc 0000 0f00 00f0 1f6b b6f1 0000 0f00     ........k.......
   28650:	00f0 0f00 00f0 0000 0f00 00f0 0f00 00f0     ................
   28660:	0000 0f00 00f0 0f00 00f0 0000 1f6b b6f1     ............k...
   28670:	0f00 00f0 0000 cfcf fcfc 0f00 ffff faff     ................
   28680:	ff1d d1ff 0d00 ffff feff df01 10fd 0000     ................
   28690:	0000 0000 1d00 00d1 0000 0000 0000 0000     ................
   286a0:	0000 ff8f e2ff 0000 0000 ffff feff 0020     .............. .
   286b0:	0000 ffff ffff ffff f8ff ffff ffff ffff     ................
   286c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   286d0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   286e0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   286f0:	ffff ffff ffff ffff ffff ff8f ffff ffff     ................
   28700:	f8ff 0000 0b00 00b0 0000 0000 bf00 00fb     ................
   28710:	0000 0000 ff0b b0ff 0000 0000 ffbf fbff     ................
   28720:	0000 0b00 ffff ffff 00b0 4f00 ffff ffff     ...........O....
   28730:	00f4 0000 ff00 00ff 0000 0000 ff00 00ff     ................
   28740:	0000 0000 ff00 00ff 0000 0000 ff00 00ff     ................
   28750:	0000 0000 ff00 00ff 0000 ffdf dff0 0ffd     ................
   28760:	fdff ffff 00f9 9f00 ffff ffff ffff ffff     ................
   28770:	ffff ffff ffff f0ff ffe0 ffdf ffff ffff     ................
   28780:	fdff 0000 0000 0000 0000 0000 0000 0000     ................
   28790:	ea0a 0062 0000 0000 ff02 f0ff 0000 0000     ..b.............
   287a0:	9f00 ffff 0000 0000 0f00 ffff 00d0 0000     ................
   287b0:	0200 ffff 00fb 0000 0000 ef03 70ff 0000     .............p..
   287c0:	0000 0400 f2ff 0000 0000 0000 fbbf 0000     ................
   287d0:	0000 0000 ff6f 0030 0200 0000 ff4f 0090     ....o.0.....O...
   287e0:	8f02 00f3 ff6f 00d0 ff0a e4ff ffbf 00d1     ....o...........
   287f0:	ef00 ffff ffff 00d1 0a00 ffff ffff 0090     ................
   28800:	0000 ff6f fbff 0030 0000 ff02 72db 0000     ..o...0......r..
   28810:	0000 0800 80ee 0000 6106 ff08 80ff 2d00     .........a.....-
   28820:	d0ff 33ef 00fe ff2e 0ef3 3ff3 2ee0 f3ff     ...3.......?....
   28830:	8f00 ffff ff6e 00f3 8e00 ffff f3ff 0000     ....n...........
   28840:	0200 ffef 00f3 0000 2e00 ffff 0030 0800     ............0...
   28850:	ffef ffff 0030 ff08 f6ff ffef 0030 33ef     ....0.......0..3
   28860:	02fe ffef 0e30 3ff3 02e0 ffef 8f30 f8ff     ....0..?....0...
   28870:	0200 fddf 8e00 00e8 0000 1066 0000 ffdf     ..........f.....
   28880:	0dff 0020 ff00 ffff e20f 0000 ffff 0fff     .. .............
   28890:	dffd fff0 ffff 0020 f0ff ffff ffff ffff     ...... .........
   288a0:	fff0 ffff ffff f0ff ffff ffff ffff fff0     ................
   288b0:	ffff ffff f0ff ffff ffff ffff fff0 ffff     ................
   288c0:	ffff f0ff ffff ffff ffff fff0 ffff ffff     ................
   288d0:	f0ff ffdf ffff fffd 00f9 0000 0000 ffff     ................
   288e0:	ffff 00ff df00 ffff fdff 0000 ff8f ffff     ................
   288f0:	c2ff ff00 ffff ffff 20fe 00ff 0000 ff01     ......... ......
   28900:	ffe2 0000 0000 fcff 00ff 0000 ff00 ffff     ................
   28910:	0000 0000 ffff ffff ffff ffff ffff ffff     ................
   28920:	ffff ffff ffff 11fb ffbf ffff f1ff 1f00     ................
   28930:	ffff ffff 00f1 ff1f ffff fbff bf11 ffff     ................
   28940:	ffff ffff ffff 8fff ffff ffff f8ff df00     ................
   28950:	fdff 0000 ff01 fcff 0000 ff03 f7ff 0000     ................
   28960:	ff06 f2ff 0000 ff08 d0ff 0000 ff0a ffff     ................
   28970:	d0ff ff0c ffff a0ff ff0e ffff 20ff ff0d     ............. ..
   28980:	ffff 00f8 0000 ff0a 00e0 0000 ff0e 0050     ..............P.
   28990:	0000 fc2f 0000 0000 f35f 0000 0000 a09f     ../....._.......
   289a0:	0000 0000 10df 0000 0000 00d7 0000 0400     ................
   289b0:	40ee 0000 df00 99ff fdff 0000 ffff ff99     .@..............
   289c0:	00ff ff00 ffff ffff 0000 ffff 0090 0000     ................
   289d0:	ff00 0dff ffff 200d ffff ff0f 0fff ffe2     ....... ........
   289e0:	0fff ffff fd0f ffff ff0f 20ff ff00 0fff     ........... ....
   289f0:	ffff ffff ffff ff0f ffff ffff 0fff ffff     ................
   28a00:	ffff ffdf ff0f ffff 00ff 0f00 ffff ffff     ................
   28a10:	0000 ff0f ffff 00ff 0d00 ffff fdff 0000     ................
   28a20:	cc00 0000 0000 0200 30ff 0000 0100 ffbf     .........0......
   28a30:	20fc 0000 ff1e ffff 00e1 9f00 ffff f8ff     . ..............
   28a40:	0000 ffef ffff 00fd ff00 ffff ffff 0100     ................
   28a50:	ffff ffff 00ff ff03 ffff ffff 0830 ffff     ............0...
   28a60:	ffff 80ff ff1e ffff ffff cfe1 ffff ffff     ................
   28a70:	fcff ffcf ffff ffff 00fc 0000 0000 0000     ................
   28a80:	0000 ff0e 00e0 0000 0400 40ee 0000 ff8f     ...........@....
   28a90:	ffff ffff ffff fff8 ffff ffff ffff ffff     ................
   28aa0:	00ff 0ff0 f000 000f ffff f000 000f 0ff0     ................
   28ab0:	ff00 ffff ffff ffff ffff ffff 08f8 8880     ................
   28ac0:	8008 ff8f f8ff 8008 0888 8f80 ffff ffff     ................
   28ad0:	ffff ffff ffff 00ff 00f0 0000 000f ffff     ................
   28ae0:	f000 0000 0f00 ff00 ffff ffff ffff ffff     ................
   28af0:	8fff ffff ffff ffff f8ff 0000 0000 0000     ................
	...
   28b08:	0300 70af 0000 0000 0400 ffcf 00f0 0000     ...p............
   28b18:	0600 ffdf a0ff 0000 1700 ffef ffff 0030     ..............0.
   28b28:	1800 ffff ffff 00fc 2a00 ffff ffff f4ff     .........*......
   28b38:	0800 ffff ffff ffff 00d0 ff0f ffff ffff     ................
   28b48:	60ff 0800 ffff ffff feff 0000 0000 0000     .`..............
   28b58:	ffff 00f7 0000 0000 ff00 f1ff 0000 0000     ................
   28b68:	0000 ffff 0080 0000 0000 ff00 10ff 0000     ................
   28b78:	0000 0000 faff 0000 0000 0000 ff00 00f2     ................
   28b88:	0000 0000 0000 808f 0000 0000 0000 0000     ................
   28b98:	0000 0000 ffdf f0ff 00d2 ffff f0ff 20fe     ............... 
   28ba8:	ffff f0ff e2ff ffff f0ff fdff ffff f2ff     ................
   28bb8:	0000 ffff ffff ffff ffff ffff ffff ffff     ................
   28bc8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28bd8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   28be8:	ffff ffff ffff ffff ffff ffff ffff ffdf     ................
   28bf8:	ffff fdff 0000 0000 0000 0000 0000 0000     ................
   28c08:	9c04 feef 40c9 0000 0700 ffef ffff feff     .....@..........
   28c18:	0070 df04 fcff 8aa8 ffcf 40fd ff6f 00d5     p..........@o...
   28c28:	0000 5d00 f6ff f6cf 0000 0000 0000 fc6f     ...]..........o.
   28c38:	301a 5a00 fddf 00a5 a103 0000 ff4d ffff     .0.Z........M...
   28c48:	d4ff 0000 0500 feff 8aa8 ffef 0050 0100     ............P...
   28c58:	70df 0000 fd07 0010 0000 0012 0000 2100     .p.............!
   28c68:	0000 0000 0000 e44e 0000 0000 0000 0000     ......N.........
   28c78:	feef 0000 0000 0000 0000 feef 0000 0000     ................
   28c88:	0000 0000 e44e 0000 0000 ff8f ffff ffff     ....N...........
   28c98:	ffff 80ff ffff ffff ffff ffff f0ff 00ff     ................
   28ca8:	0000 0000 0000 fd0f 0fff ffff ffff ffff     ................
   28cb8:	ff0f 0fff ffff ffff ffff ff00 0fff ffff     ................
   28cc8:	ffff ffff ff00 0fff ffff ffff ffff ff0f     ................
   28cd8:	00ff 0000 0000 0000 fd0f ffff ffff ffff     ................
   28ce8:	ffff f0ff ff8f ffff ffff ffff 80ff ff8f     ................
   28cf8:	ffff ffff ffff 80ff ffff ffff ffff ffff     ................
   28d08:	f0ff 00ff 0000 0000 0000 fd0f 0fff ffff     ................
   28d18:	ffff 00f0 ff0f 0fff ffff ffff 00f0 ff00     ................
   28d28:	0fff ffff ffff 00f0 ff00 0fff ffff ffff     ................
   28d38:	00f0 ff0f 00ff 0000 0000 0000 fd0f ffff     ................
   28d48:	ffff ffff ffff f0ff ff8f ffff ffff ffff     ................
   28d58:	80ff ff8f ffff ffff ffff 80ff ffff ffff     ................
   28d68:	ffff ffff f0ff 00ff 0000 0000 0000 fd0f     ................
   28d78:	0fff ffff 00ff 0000 ff0f 0fff ffff 00ff     ................
   28d88:	0000 ff00 0fff ffff 00ff 0000 ff00 0fff     ................
   28d98:	ffff 00ff 0000 ff0f 00ff 0000 0000 0000     ................
   28da8:	fd0f ffff ffff ffff ffff f0ff ff8f ffff     ................
   28db8:	ffff ffff 80ff ff8f ffff ffff ffff 80ff     ................
   28dc8:	ffff ffff ffff ffff f0ff 00ff 0000 0000     ................
   28dd8:	0000 fd0f 0fff f0ff 0000 0000 ff0f 0fff     ................
   28de8:	f0ff 0000 0000 ff00 0fff f0ff 0000 0000     ................
   28df8:	ff00 0fff f0ff 0000 0000 ff0f 00ff 0000     ................
   28e08:	0000 0000 fd0f ffff ffff ffff ffff f0ff     ................
   28e18:	ff8f ffff ffff ffff 80ff ff8f ffff ffff     ................
   28e28:	ffff 80ff ffff ffff ffff ffff f0ff 00ff     ................
   28e38:	0000 0000 0000 fd0f 00ff 0000 0000 0000     ................
   28e48:	ff0f 00ff 0000 0000 0000 ff00 00ff 0000     ................
   28e58:	0000 0000 ff00 00ff 0000 0000 0000 ff0f     ................
   28e68:	00ff 0000 0000 0000 fd0f ffff ffff ffff     ................
   28e78:	ffff f0ff ff8f ffff ffff ffff 80ff 0000     ................
   28e88:	0000 0100 0000 0000 0000 0000 0700 10fd     ................
   28e98:	0000 0000 0000 cf01 f5ff 0000 0000 0000     ................
   28ea8:	b900 fe29 0010 0000 0000 3f00 0210 0000     ..)........?....
   28eb8:	0000 df03 0a80 0090 0000 7003 df00 77ff     ...........p...w
   28ec8:	55f7 5555 8f55 0fd3 fdff dfcc ccdc cdcc     .UUUU...........
   28ed8:	b0ff fe8f 0010 00aa 0000 404d 4600 0010     ..........M@.F..
   28ee8:	f201 3302 0010 0000 0000 0900 cfb1 00f9     ...3............
   28ef8:	0000 0000 0000 ff0a 90ff 0000 0000 0000     ................
   28f08:	0000 f9bf 0000 0000 0000 0000 2201 0000     ............."..
   28f18:	0000 df18 92fd 0200 fbef ffef 0d30 faff     ............0...
   28f28:	ff2e 4fe0 faff ff03 9ff5 fafa 4f35 cffa     ...O........5O..
   28f38:	8ac0 0b3d effd 03fb 8f12 fffe b0ff ff06     ..=.............
   28f48:	ffff d1ff ff08 efff 11fd 9f10 dfff 59d1     ...............Y
   28f58:	0b3b affd fad7 1d38 5ffb faff df01 0df7     ;.....8.._......
   28f68:	faff ff1d 03f1 fcef ffdf 0050 df18 a3fe     ..........P.....
   28f78:	0000 7f00 f7ff 0000 ffef ffff ffff effe     ................
   28f88:	ffff ffff feff 0000 0000 0000 0f00 ffff     ................
   28f98:	ffff f0ff ff0f ffff ffff 0ff0 9ff9 f999     ................
   28fa8:	f09f f80f 888f 8ff8 0ff0 8ff8 f888 f08f     ................
   28fb8:	f80f 888f 8ff8 0ff0 8ff8 f888 f08f f80f     ................
   28fc8:	888f 8ff8 0ff0 8ff8 f888 f08f f90f 999f     ................
   28fd8:	9ff9 0ff0 ffff ffff f0ff ff08 ffff ffff     ................
   28fe8:	0080 0000 0000 7f00 00a0 0000 0000 8f00     ................
   28ff8:	b0ff 0000 0000 0d00 ffff 00a0 0000 8a00     ................
   29008:	ff1d 00ff 0000 8f00 1dfa 70ff 0000 8f00     ...........p....
   29018:	faff 801d 0000 8f00 ffff 00fa 0000 8f00     ................
   29028:	ffff 80ff 0000 8f00 ffff 80ff 0000 8f00     ................
   29038:	ffff 80ff 0000 8f00 ffff 80ff 0000 6f00     ...............o
   29048:	ffff 80ff 0000 0b00 ffff 80ff 0000 0000     ................
   29058:	ffdf 80ff 0000 0000 ff0e 80ff 0000 0000     ................
   29068:	de00 60db 0000 0000 0000 0000 0000 0000     ...`............
   29078:	0000 0000 ff1b ffff ffff e4ff 0100 ffdf     ................
   29088:	ffff ffff feff 1d00 ffff effa affe ffff     ................
   29098:	df01 ffff 2ea0 0ae2 ffff ff1d ffff 02e2     ................
   290a8:	2e20 ffff ffcf ffff 20fe ef02 ffff ffcf      ........ ......
   290b8:	ffff 20fe ef02 ffff ff1d ffff 02e2 2e20     ... .......... .
   290c8:	ffff df01 ffff 2ea0 0ae2 ffff 1d00 ffff     ................
   290d8:	effa affe ffff 0100 ffdf ffff ffff feff     ................
   290e8:	0000 ff1b ffff ffff e4ff 0800 ffff e4ff     ................
   290f8:	8f00 ffff feff f808 0b0f ff40 f88f 0b0f     ..........@.....
   29108:	ff40 f8ff 0b0f ff40 ffff ffff ffff ffff     @.....@.........
   29118:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   29128:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   29138:	ffff ffff ffff ffff ffff ffff ffff ffef     ................
   29148:	ffff feff ff4e ffff e4ff 0000 0000 0000     ....N...........
   29158:	0100 0000 0000 0000 0300 00e0 1000 0000     ................
   29168:	0200 10ef bf00 0000 0000 f17f cf00 00f1     ................
   29178:	0000 ff07 cf11 77ff 7777 bf77 cff1 ffff     .......wwww.....
   29188:	ffff ffff 17ff ffff ffff ffff e0ff ff07     ................
   29198:	00f1 0000 0000 0600 10ff 0000 0000 0000     ................
   291a8:	a005 0000 0000 0000                         ........

000291b0 <__func__.9667>:
   291b0:	766c 645f 7369 5f70 7264 5f76 6572 6967     lv_disp_drv_regi
   291c0:	7473 7265 0000 0000 2e2e 742f 6968 6472     ster....../third
   291d0:	6170 7472 2f79 766c 6c67 732f 6372 6c2f     party/lvgl/src/l
   291e0:	5f76 6168 2f6c 766c 685f 6c61 645f 7369     v_hal/lv_hal_dis
   291f0:	2e70 0063                                   p.c.

000291f4 <lv_anim_path_def>:
   291f4:	1075 0001 0000 0000                         u.......

000291fc <__func__.9543>:
   291fc:	766c 615f 696e 5f6d 7473 7261 0074 0000     lv_anim_start...
   2920c:	2e2e 742f 6968 6472 6170 7472 2f79 766c     ../thirdparty/lv
   2921c:	6c67 732f 6372 6c2f 5f76 696d 6373 6c2f     gl/src/lv_misc/l
   2922c:	5f76 6e61 6d69 632e 0000 0000               v_anim.c....

00029238 <__func__.9631>:
   29238:	766c 665f 5f73 7264 5f76 6572 6967 7473     lv_fs_drv_regist
   29248:	7265 0000                                   er..

0002924c <__func__.9538>:
   2924c:	766c 665f 5f73 706f 6e65 0000               lv_fs_open..

00029258 <__func__.9602>:
   29258:	766c 665f 5f73 6964 5f72 706f 6e65 0000     lv_fs_dir_open..
   29268:	2e2e 742f 6968 6472 6170 7472 2f79 766c     ../thirdparty/lv
   29278:	6c67 732f 6372 6c2f 5f76 696d 6373 6c2f     gl/src/lv_misc/l
   29288:	5f76 7366 632e 0000                         v_fs.c..

00029290 <sin0_90_table>:
   29290:	0000 023c 0478 06b3 08ee 0b28 0d61 0f99     ..<.x.....(.a...
   292a0:	11d0 1406 163a 186c 1a9d 1ccb 1ef7 2121     ....:.l.......!!
   292b0:	2348 256c 278e 29ac 2bc7 2ddf 2ff3 3203     H#l%.'.).+.-./.2
   292c0:	3410 3618 381c 3a1c 3c17 3e0e 3fff 41ec     .4.6.8.:.<.>.?.A
   292d0:	43d4 45b6 4793 496a 4b3c 4d08 4ecd 508d     .C.E.GjI<K.M.N.P
   292e0:	5246 53f9 55a5 574b 58ea 5a82 5c13 5d9c     FR.S.UKW.X.Z.\.]
   292f0:	5f1f 609a 620d 6379 64dd 6639 678d 68d9     ._.`.byc.d9f.g.h
   29300:	6a1d 6b59 6c8c 6db7 6ed9 6ff3 7104 720c     .jYk.l.m.n.o.q.r
   29310:	730b 7401 74ee 75d2 76ad 777f 7847 7906     .s.t.t.u.v.wGx.y
   29320:	79bb 7a67 7b0a 7ba2 7c32 7cb7 7d33 7da5     .ygz.{.{2|.|3}.}
   29330:	7e0d 7e6c 7ec0 7f0b 7f4b 7f82 7faf 7fd2     .~l~.~..K.......
   29340:	7feb 7ffa 7fff 0000                         ........

00029348 <__func__.7222>:
   29348:	766c 6d5f 6d65 615f 6c6c 636f 0000 0000     lv_mem_alloc....

00029358 <__func__.7297>:
   29358:	6c5f 5f76 656d 5f6d 7562 5f66 6572 656c     _lv_mem_buf_rele
   29368:	7361 0065                                   ase.

0002936c <__func__.7240>:
   2936c:	766c 6d5f 6d65 725f 6165 6c6c 636f 0000     lv_mem_realloc..

0002937c <__func__.7283>:
   2937c:	6c5f 5f76 656d 5f6d 7562 5f66 6567 0074     _lv_mem_buf_get.
   2938c:	2e2e 742f 6968 6472 6170 7472 2f79 766c     ../thirdparty/lv
   2939c:	6c67 732f 6372 6c2f 5f76 696d 6373 6c2f     gl/src/lv_misc/l
   293ac:	5f76 656d 2e6d 0063 6f43 6c75 6e64 7427     v_mem.c.Couldn't
   293bc:	6120 6c6c 636f 7461 2065 656d 6f6d 7972      allocate memory
   293cc:	0000 0000 766c 6d5f 6d65 625f 6675 725f     ....lv_mem_buf_r
   293dc:	6c65 6165 6573 203a 2070 7369 6e20 746f     elease: p is not
   293ec:	6120 6b20 6f6e 6e77 6220 6675 6566 0072      a known buffer.
   293fc:	766c 6d5f 6d65 625f 6675 675f 7465 203a     lv_mem_buf_get: 
   2940c:	754f 2074 666f 6d20 6d65 726f 2c79 6320     Out of memory, c
   2941c:	6e61 7427 6120 6c6c 636f 7461 2065 2061     an't allocate a 
   2942c:	656e 2077 6220 6675 6566 2072 6928 636e     new  buffer (inc
   2943c:	6572 7361 2065 6f79 7275 4c20 5f56 454d     rease your LV_ME
   2944c:	5f4d 4953 455a 682f 6165 2070 6973 657a     M_SIZE/heap size
   2945c:	0029 0000 766c 6d5f 6d65 625f 6675 675f     )...lv_mem_buf_g
   2946c:	7465 203a 6f6e 6620 6572 2065 7562 6666     et: no free buff
   2947c:	7265 202e 6e49 7263 6165 6573 4c20 5f56     er. Increase LV_
   2948c:	5244 5741 425f 4655 4d5f 5841 4e5f 4d55     DRAW_BUF_MAX_NUM
   2949c:	002e 0000                                   ....

000294a0 <__func__.9561>:
   294a0:	766c 745f 7361 5f6b 7263 6165 6574 625f     lv_task_create_b
   294b0:	7361 6369 0000 0000                         asic....

000294b8 <__func__.9574>:
   294b8:	766c 745f 7361 5f6b 7263 6165 6574 0000     lv_task_create..
   294c8:	2e2e 742f 6968 6472 6170 7472 2f79 766c     ../thirdparty/lv
   294d8:	6c67 732f 6372 6c2f 5f76 696d 6373 6c2f     gl/src/lv_misc/l
   294e8:	5f76 6174 6b73 632e 0000 0000               v_task.c....

000294f4 <__func__.6088>:
   294f4:	6c5f 5f76 7874 5f74 6567 5f74 6973 657a     _lv_txt_get_size
   29504:	0000 0000 2c20 3b2e 2d3a 005f 2e2e 742f     .... ,.;:-_.../t
   29514:	6968 6472 6170 7472 2f79 766c 6c67 732f     hirdparty/lvgl/s
   29524:	6372 6c2f 5f76 696d 6373 6c2f 5f76 7874     rc/lv_misc/lv_tx
   29534:	2e74 0063 766c 745f 7478 675f 7465 735f     t.c.lv_txt_get_s
   29544:	7a69 3a65 6920 746e 6765 7265 6f20 6576     ize: integer ove
   29554:	6672 6f6c 2077 6877 6c69 2065 6163 636c     rflow while calc
   29564:	6c75 7461 6e69 2067 6574 7478 6820 6965     ulating text hei
   29574:	6867 0074 ffff 0000 8410 0000 80ef 008c     ght.............

00029584 <__func__.9965>:
   29584:	766c 695f 676d 645f 7365 6769 006e 0000     lv_img_design...

00029594 <__func__.9838>:
   29594:	766c 695f 676d 735f 7465 615f 7475 5f6f     lv_img_set_auto_
   295a4:	6973 657a 0000 0000                         size....

000295ac <__func__.9845>:
   295ac:	766c 695f 676d 735f 7465 6f5f 6666 6573     lv_img_set_offse
   295bc:	5f74 0078                                   t_x.

000295c0 <__func__.9852>:
   295c0:	766c 695f 676d 735f 7465 6f5f 6666 6573     lv_img_set_offse
   295d0:	5f74 0079                                   t_y.

000295d4 <__func__.9888>:
   295d4:	766c 695f 676d 675f 7465 735f 6372 0000     lv_img_get_src..

000295e4 <__func__.9894>:
   295e4:	766c 695f 676d 675f 7465 665f 6c69 5f65     lv_img_get_file_
   295f4:	616e 656d 0000 0000                         name....

000295fc <__func__.9900>:
   295fc:	766c 695f 676d 675f 7465 615f 7475 5f6f     lv_img_get_auto_
   2960c:	6973 657a 0000 0000                         size....

00029614 <__func__.9817>:
   29614:	766c 695f 676d 735f 7465 735f 6372 0000     lv_img_set_src..

00029624 <__func__.9808>:
   29624:	766c 695f 676d 635f 6572 7461 0065 0000     lv_img_create...

00029634 <__func__.9906>:
   29634:	766c 695f 676d 675f 7465 6f5f 6666 6573     lv_img_get_offse
   29644:	5f74 0078                                   t_x.

00029648 <__func__.9912>:
   29648:	766c 695f 676d 675f 7465 6f5f 6666 6573     lv_img_get_offse
   29658:	5f74 0079                                   t_y.

0002965c <__func__.9919>:
   2965c:	766c 695f 676d 675f 7465 705f 7669 746f     lv_img_get_pivot
   2966c:	0000 0000                                   ....

00029670 <__func__.9925>:
   29670:	766c 695f 676d 675f 7465 615f 676e 656c     lv_img_get_angle
   29680:	0000 0000                                   ....

00029684 <__func__.9931>:
   29684:	766c 695f 676d 675f 7465 7a5f 6f6f 006d     lv_img_get_zoom.

00029694 <__func__.9937>:
   29694:	766c 695f 676d 675f 7465 615f 746e 6169     lv_img_get_antia
   296a4:	696c 7361 0000 0000 2e2e 742f 6968 6472     lias....../third
   296b4:	6170 7472 2f79 766c 6c67 732f 6372 6c2f     party/lvgl/src/l
   296c4:	5f76 6977 6764 7465 2f73 766c 695f 676d     v_widgets/lv_img
   296d4:	632e 0000 766c 695f 676d 735f 7465 735f     .c..lv_img_set_s
   296e4:	6372 203a 6e75 6e6b 776f 206e 7974 6570     rc: unknown type
   296f4:	0000 0000 766c 695f 676d 735f 7465 735f     ....lv_img_set_s
   29704:	6372 203a 6e75 6e6b 776f 206e 6d69 6761     rc: unknown imag
   29714:	2065 7974 6570 0000 766c 695f 676d 735f     e type..lv_img_s
   29724:	7465 735f 6372 203a 6020 564c 495f 474d     et_src:  `LV_IMG
   29734:	535f 4352 565f 5241 4149 4c42 6045 7420     _SRC_VARIABLE` t
   29744:	7079 2065 6f66 6e75 0064 0000 6d69 6761     ype found...imag
   29754:	2065 7263 6165 6574 0064 0000 766c 695f     e created...lv_i
   29764:	676d 0000                                   mg..

00029768 <__func__.10208>:
   29768:	766c 6c5f 6261 6c65 735f 7465 645f 746f     lv_label_set_dot
   29778:	745f 706d 0000 0000                         _tmp....

00029780 <__func__.9902>:
   29780:	766c 6c5f 6261 6c65 735f 7465 615f 696c     lv_label_set_ali
   29790:	6e67 0000                                   gn..

00029794 <__func__.9923>:
   29794:	766c 6c5f 6261 6c65 735f 7465 745f 7865     lv_label_set_tex
   297a4:	5f74 6573 5f6c 7473 7261 0074               t_sel_start.

000297b0 <__func__.9929>:
   297b0:	766c 6c5f 6261 6c65 735f 7465 745f 7865     lv_label_set_tex
   297c0:	5f74 6573 5f6c 6e65 0064 0000               t_sel_end...

000297cc <__func__.9934>:
   297cc:	766c 6c5f 6261 6c65 675f 7465 745f 7865     lv_label_get_tex
   297dc:	0074 0000                                   t...

000297e0 <__func__.9940>:
   297e0:	766c 6c5f 6261 6c65 675f 7465 6c5f 6e6f     lv_label_get_lon
   297f0:	5f67 6f6d 6564 0000                         g_mode..

000297f8 <__func__.9946>:
   297f8:	766c 6c5f 6261 6c65 675f 7465 615f 696c     lv_label_get_ali
   29808:	6e67 0000                                   gn..

0002980c <__func__.9953>:
   2980c:	766c 6c5f 6261 6c65 675f 7465 725f 6365     lv_label_get_rec
   2981c:	6c6f 726f 0000 0000                         olor....

00029824 <__func__.9959>:
   29824:	766c 6c5f 6261 6c65 675f 7465 615f 696e     lv_label_get_ani
   29834:	5f6d 7073 6565 0064                         m_speed.

0002983c <__func__.9967>:
   2983c:	766c 6c5f 6261 6c65 675f 7465 6c5f 7465     lv_label_get_let
   2984c:	6574 5f72 6f70 0073                         ter_pos.

00029854 <__func__.9996>:
   29854:	766c 6c5f 6261 6c65 675f 7465 6c5f 7465     lv_label_get_let
   29864:	6574 5f72 6e6f 0000                         ter_on..

0002986c <__func__.9865>:
   2986c:	766c 6c5f 6261 6c65 735f 7465 745f 7865     lv_label_set_tex
   2987c:	0074 0000                                   t...

00029880 <__func__.9876>:
   29880:	766c 6c5f 6261 6c65 735f 7465 745f 7865     lv_label_set_tex
   29890:	5f74 6d66 0074 0000                         t_fmt...

00029898 <__func__.9888>:
   29898:	766c 6c5f 6261 6c65 735f 7465 745f 7865     lv_label_set_tex
   298a8:	5f74 7473 7461 6369 0000 0000               t_static....

000298b4 <__func__.9895>:
   298b4:	766c 6c5f 6261 6c65 735f 7465 6c5f 6e6f     lv_label_set_lon
   298c4:	5f67 6f6d 6564 0000                         g_mode..

000298cc <__func__.9909>:
   298cc:	766c 6c5f 6261 6c65 735f 7465 725f 6365     lv_label_set_rec
   298dc:	6c6f 726f 0000 0000                         olor....

000298e4 <__func__.9854>:
   298e4:	766c 6c5f 6261 6c65 635f 6572 7461 0065     lv_label_create.

000298f4 <__func__.9916>:
   298f4:	766c 6c5f 6261 6c65 735f 7465 615f 696e     lv_label_set_ani
   29904:	5f6d 7073 6565 0064                         m_speed.

0002990c <__func__.10033>:
   2990c:	766c 6c5f 6261 6c65 675f 7465 745f 7865     lv_label_get_tex
   2991c:	5f74 6573 5f6c 7473 7261 0074               t_sel_start.

00029928 <__func__.10038>:
   29928:	766c 6c5f 6261 6c65 675f 7465 745f 7865     lv_label_get_tex
   29938:	5f74 6573 5f6c 6e65 0064 0000               t_sel_end...

00029944 <__func__.10044>:
   29944:	766c 6c5f 6261 6c65 695f 5f73 6863 7261     lv_label_is_char
   29954:	755f 646e 7265 705f 736f 0000               _under_pos..

00029960 <__func__.10089>:
   29960:	766c 6c5f 6261 6c65 695f 736e 745f 7865     lv_label_ins_tex
   29970:	0074 0000                                   t...

00029974 <__func__.10102>:
   29974:	766c 6c5f 6261 6c65 635f 7475 745f 7865     lv_label_cut_tex
   29984:	0074 0000 2e2e 742f 6968 6472 6170 7472     t...../thirdpart
   29994:	2f79 766c 6c67 732f 6372 6c2f 5f76 6977     y/lvgl/src/lv_wi
   299a4:	6764 7465 2f73 766c 6c5f 6261 6c65 632e     dgets/lv_label.c
   299b4:	0000 0000 6146 6c69 6465 7420 206f 6c61     ....Failed to al
   299c4:	6f6c 6163 6574 6d20 6d65 726f 2079 6f66     locate memory fo
   299d4:	2072 6f64 5f74 6d74 5f70 7470 0072 0000     r dot_tmp_ptr...
   299e4:	6554 7478 0000 0000 616c 6562 206c 7263     Text....label cr
   299f4:	6165 6574 0064 0000 766c 6c5f 6261 6c65     eated...lv_label
   29a04:	0000 0000                                   ....

00029a08 <_init>:
   29a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29a0a:	bf00      	nop
   29a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   29a0e:	bc08      	pop	{r3}
   29a10:	469e      	mov	lr, r3
   29a12:	4770      	bx	lr

00029a14 <__init_array_start>:
   29a14:	00000289 	.word	0x00000289

00029a18 <_fini>:
   29a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29a1a:	bf00      	nop
   29a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   29a1e:	bc08      	pop	{r3}
   29a20:	469e      	mov	lr, r3
   29a22:	4770      	bx	lr

00029a24 <__fini_array_start>:
   29a24:	00000265 	.word	0x00000265
