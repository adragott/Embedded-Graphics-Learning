
project_oracle_test_prj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001b7ac  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000074  20000000  0001b7ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00030074  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00030074  2**0
                  CONTENTS
  4 .bss          0000ad94  20000078  0001b828  00030078  2**3
                  ALLOC
  5 .stack        00010004  2000ae0c  000265bc  00030078  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000300a2  2**0
                  CONTENTS, READONLY
  8 .debug_info   0009112a  00000000  00000000  000300fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000bbf0  00000000  00000000  000c1225  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0004734f  00000000  00000000  000cce15  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001e30  00000000  00000000  00114164  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003ac0  00000000  00000000  00115f94  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003fae1  00000000  00000000  00119a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00038a51  00000000  00000000  00159535  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0012a2e2  00000000  00000000  00191f86  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005900  00000000  00000000  002bc268  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_gc_clear_roots(void)
{
       0:	10 ae 01 20 19 0f 00 00 15 0f 00 00 15 0f 00 00     ... ............
#define LV_CLEAR_ROOT(root_type, root_name) _lv_memset_00(&LV_GC_ROOT(root_name), sizeof(LV_GC_ROOT(root_name)));
    LV_ITERATE_ROOTS(LV_CLEAR_ROOT)
      10:	15 0f 00 00 15 0f 00 00 15 0f 00 00 00 00 00 00     ................
	...
      2c:	15 0f 00 00 15 0f 00 00 00 00 00 00 15 0f 00 00     ................
      3c:	15 0f 00 00 15 0f 00 00 15 0f 00 00 15 0f 00 00     ................
      4c:	15 0f 00 00 15 0f 00 00 15 0f 00 00 15 0f 00 00     ................
      5c:	15 0f 00 00 15 0f 00 00 15 0f 00 00 15 0f 00 00     ................
      6c:	15 0f 00 00 15 0f 00 00 15 0f 00 00 15 0f 00 00     ................
      7c:	15 0f 00 00 15 0f 00 00 15 0f 00 00 15 0f 00 00     ................
      8c:	15 0f 00 00 15 0f 00 00 15 0f 00 00 15 0f 00 00     ................
      9c:	15 0f 00 00 15 0f 00 00 15 0f 00 00 15 0f 00 00     ................
      ac:	15 0f 00 00 15 0f 00 00 15 0f 00 00 15 0f 00 00     ................
      bc:	15 0f 00 00 15 0f 00 00 15 0f 00 00 15 0f 00 00     ................
      cc:	15 0f 00 00 15 0f 00 00 15 0f 00 00 15 0f 00 00     ................
      dc:	15 0f 00 00 15 0f 00 00 15 0f 00 00 00 00 00 00     ................
	...
      f4:	21 1d 00 00 15 0f 00 00 15 0f 00 00 15 0f 00 00     !...............
     104:	15 0f 00 00 15 0f 00 00 15 0f 00 00 15 0f 00 00     ................
     114:	15 0f 00 00 d1 25 00 00 e5 25 00 00 f9 25 00 00     .....%...%...%..
     124:	0d 26 00 00 15 0f 00 00 15 0f 00 00 15 0f 00 00     .&..............
     134:	15 0f 00 00 15 0f 00 00 15 0f 00 00 15 0f 00 00     ................
     144:	15 0f 00 00 15 0f 00 00 15 0f 00 00 15 0f 00 00     ................
     154:	15 0f 00 00 15 0f 00 00 15 0f 00 00 15 0f 00 00     ................
     164:	15 0f 00 00 15 0f 00 00 15 0f 00 00 15 0f 00 00     ................
     174:	15 0f 00 00 15 0f 00 00 15 0f 00 00 15 0f 00 00     ................
     184:	15 0f 00 00 15 0f 00 00 15 0f 00 00 15 0f 00 00     ................
     194:	15 0f 00 00 15 0f 00 00 15 0f 00 00 15 0f 00 00     ................
     1a4:	15 0f 00 00 15 0f 00 00 15 0f 00 00 15 0f 00 00     ................
     1b4:	15 0f 00 00 15 0f 00 00 15 0f 00 00 15 0f 00 00     ................
     1c4:	15 0f 00 00 15 0f 00 00 15 0f 00 00 15 0f 00 00     ................
     1d4:	15 0f 00 00 15 0f 00 00 15 0f 00 00 15 0f 00 00     ................
     1e4:	15 0f 00 00 15 0f 00 00 95 28 00 00 15 0f 00 00     .........(......
     1f4:	15 0f 00 00 15 0f 00 00 15 0f 00 00 15 0f 00 00     ................
     204:	15 0f 00 00 15 0f 00 00 15 0f 00 00 15 0f 00 00     ................
     214:	15 0f 00 00 15 0f 00 00 15 0f 00 00 15 0f 00 00     ................
     224:	15 0f 00 00 15 0f 00 00 15 0f 00 00 15 0f 00 00     ................
     234:	15 0f 00 00 15 0f 00 00 15 0f 00 00 15 0f 00 00     ................
     244:	15 0f 00 00 15 0f 00 00 15 0f 00 00 15 0f 00 00     ................
     254:	15 0f 00 00 15 0f 00 00 15 0f 00 00 15 0f 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000078 	.word	0x20000078
     280:	00000000 	.word	0x00000000
     284:	0001b7ac 	.word	0x0001b7ac

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0001b7ac 	.word	0x0001b7ac
     2c4:	2000007c 	.word	0x2000007c
     2c8:	0001b7ac 	.word	0x0001b7ac
     2cc:	00000000 	.word	0x00000000

000002d0 <ssd1963_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void ssd1963_init(void)
{
     2d0:	b570      	push	{r4, r5, r6, lr}
	asm volatile("nop");
     2d2:	bf00      	nop
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2d4:	4c8a      	ldr	r4, [pc, #552]	; (500 <ssd1963_init+0x230>)
     2d6:	2640      	movs	r6, #64	; 0x40
     2d8:	6166      	str	r6, [r4, #20]
    LV_DRV_DISP_CMD_DATA(SSD1963_CMD_MODE);
	asm volatile("nop");
     2da:	bf00      	nop
     2dc:	2310      	movs	r3, #16
     2de:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	LV_DRV_DISP_RST(1);
	asm volatile("nop");
     2e2:	bf00      	nop
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     2e4:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
	LV_DRV_DISP_RST(0);
	asm volatile("nop");
     2e8:	bf00      	nop
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2ea:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	LV_DRV_DISP_RST(1);
	asm volatile("nop");
     2ee:	bf00      	nop
    cmd_mode = true;
     2f0:	4d84      	ldr	r5, [pc, #528]	; (504 <ssd1963_init+0x234>)
     2f2:	2301      	movs	r3, #1
     2f4:	702b      	strb	r3, [r5, #0]

    LV_DRV_DELAY_MS(250);
     2f6:	20fa      	movs	r0, #250	; 0xfa
     2f8:	4b83      	ldr	r3, [pc, #524]	; (508 <ssd1963_init+0x238>)
     2fa:	4798      	blx	r3
     2fc:	6166      	str	r6, [r4, #20]
/**
 * Command mode
 */
static inline void ssd1963_cmd_mode(void)
{
    if(cmd_mode == false) {
     2fe:	782b      	ldrb	r3, [r5, #0]
     300:	b91b      	cbnz	r3, 30a <ssd1963_init+0x3a>
     302:	4623      	mov	r3, r4
     304:	615e      	str	r6, [r3, #20]
        LV_DRV_DISP_CMD_DATA(SSD1963_CMD_MODE);
        cmd_mode = true;
     306:	2201      	movs	r2, #1
     308:	702a      	strb	r2, [r5, #0]
static inline void ssd1963_cmd(uint8_t cmd)
{

    LV_DRV_DISP_PAR_CS(0);
    ssd1963_cmd_mode();
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     30a:	22e2      	movs	r2, #226	; 0xe2
     30c:	497f      	ldr	r1, [pc, #508]	; (50c <ssd1963_init+0x23c>)
     30e:	4880      	ldr	r0, [pc, #512]	; (510 <ssd1963_init+0x240>)
     310:	4b80      	ldr	r3, [pc, #512]	; (514 <ssd1963_init+0x244>)
     312:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     314:	4b7a      	ldr	r3, [pc, #488]	; (500 <ssd1963_init+0x230>)
     316:	2240      	movs	r2, #64	; 0x40
     318:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     31a:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     31c:	4b79      	ldr	r3, [pc, #484]	; (504 <ssd1963_init+0x234>)
     31e:	781b      	ldrb	r3, [r3, #0]
     320:	b123      	cbz	r3, 32c <ssd1963_init+0x5c>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     322:	4b77      	ldr	r3, [pc, #476]	; (500 <ssd1963_init+0x230>)
     324:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     326:	2200      	movs	r2, #0
     328:	4b76      	ldr	r3, [pc, #472]	; (504 <ssd1963_init+0x234>)
     32a:	701a      	strb	r2, [r3, #0]
static inline void ssd1963_data(uint8_t data)
{

    LV_DRV_DISP_PAR_CS(0);
    ssd1963_data_mode();
    LV_DRV_DISP_PAR_WR_WORD(data);
     32c:	2223      	movs	r2, #35	; 0x23
     32e:	4977      	ldr	r1, [pc, #476]	; (50c <ssd1963_init+0x23c>)
     330:	4877      	ldr	r0, [pc, #476]	; (510 <ssd1963_init+0x240>)
     332:	4b78      	ldr	r3, [pc, #480]	; (514 <ssd1963_init+0x244>)
     334:	4798      	blx	r3
     336:	4b72      	ldr	r3, [pc, #456]	; (500 <ssd1963_init+0x230>)
     338:	2240      	movs	r2, #64	; 0x40
     33a:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     33c:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     33e:	4b71      	ldr	r3, [pc, #452]	; (504 <ssd1963_init+0x234>)
     340:	781b      	ldrb	r3, [r3, #0]
     342:	b123      	cbz	r3, 34e <ssd1963_init+0x7e>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     344:	4b6e      	ldr	r3, [pc, #440]	; (500 <ssd1963_init+0x230>)
     346:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     348:	2200      	movs	r2, #0
     34a:	4b6e      	ldr	r3, [pc, #440]	; (504 <ssd1963_init+0x234>)
     34c:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     34e:	2202      	movs	r2, #2
     350:	496e      	ldr	r1, [pc, #440]	; (50c <ssd1963_init+0x23c>)
     352:	486f      	ldr	r0, [pc, #444]	; (510 <ssd1963_init+0x240>)
     354:	4b6f      	ldr	r3, [pc, #444]	; (514 <ssd1963_init+0x244>)
     356:	4798      	blx	r3
     358:	4b69      	ldr	r3, [pc, #420]	; (500 <ssd1963_init+0x230>)
     35a:	2240      	movs	r2, #64	; 0x40
     35c:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     35e:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     360:	4b68      	ldr	r3, [pc, #416]	; (504 <ssd1963_init+0x234>)
     362:	781b      	ldrb	r3, [r3, #0]
     364:	b123      	cbz	r3, 370 <ssd1963_init+0xa0>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     366:	4b66      	ldr	r3, [pc, #408]	; (500 <ssd1963_init+0x230>)
     368:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     36a:	2200      	movs	r2, #0
     36c:	4b65      	ldr	r3, [pc, #404]	; (504 <ssd1963_init+0x234>)
     36e:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     370:	2204      	movs	r2, #4
     372:	4966      	ldr	r1, [pc, #408]	; (50c <ssd1963_init+0x23c>)
     374:	4866      	ldr	r0, [pc, #408]	; (510 <ssd1963_init+0x240>)
     376:	4b67      	ldr	r3, [pc, #412]	; (514 <ssd1963_init+0x244>)
     378:	4798      	blx	r3
     37a:	4b61      	ldr	r3, [pc, #388]	; (500 <ssd1963_init+0x230>)
     37c:	2240      	movs	r2, #64	; 0x40
     37e:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     380:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     382:	4b60      	ldr	r3, [pc, #384]	; (504 <ssd1963_init+0x234>)
     384:	781b      	ldrb	r3, [r3, #0]
     386:	b923      	cbnz	r3, 392 <ssd1963_init+0xc2>
     388:	4b5d      	ldr	r3, [pc, #372]	; (500 <ssd1963_init+0x230>)
     38a:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     38c:	2201      	movs	r2, #1
     38e:	4b5d      	ldr	r3, [pc, #372]	; (504 <ssd1963_init+0x234>)
     390:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     392:	22e0      	movs	r2, #224	; 0xe0
     394:	495d      	ldr	r1, [pc, #372]	; (50c <ssd1963_init+0x23c>)
     396:	485e      	ldr	r0, [pc, #376]	; (510 <ssd1963_init+0x240>)
     398:	4b5e      	ldr	r3, [pc, #376]	; (514 <ssd1963_init+0x244>)
     39a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     39c:	4b58      	ldr	r3, [pc, #352]	; (500 <ssd1963_init+0x230>)
     39e:	2240      	movs	r2, #64	; 0x40
     3a0:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3a2:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     3a4:	4b57      	ldr	r3, [pc, #348]	; (504 <ssd1963_init+0x234>)
     3a6:	781b      	ldrb	r3, [r3, #0]
     3a8:	b123      	cbz	r3, 3b4 <ssd1963_init+0xe4>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3aa:	4b55      	ldr	r3, [pc, #340]	; (500 <ssd1963_init+0x230>)
     3ac:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     3ae:	2200      	movs	r2, #0
     3b0:	4b54      	ldr	r3, [pc, #336]	; (504 <ssd1963_init+0x234>)
     3b2:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     3b4:	2201      	movs	r2, #1
     3b6:	4955      	ldr	r1, [pc, #340]	; (50c <ssd1963_init+0x23c>)
     3b8:	4855      	ldr	r0, [pc, #340]	; (510 <ssd1963_init+0x240>)
     3ba:	4b56      	ldr	r3, [pc, #344]	; (514 <ssd1963_init+0x244>)
     3bc:	4798      	blx	r3
     3be:	4c50      	ldr	r4, [pc, #320]	; (500 <ssd1963_init+0x230>)
     3c0:	2540      	movs	r5, #64	; 0x40
     3c2:	61a5      	str	r5, [r4, #24]
    LV_DRV_DELAY_MS(1);
     3c4:	2001      	movs	r0, #1
     3c6:	4b50      	ldr	r3, [pc, #320]	; (508 <ssd1963_init+0x238>)
     3c8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3ca:	6165      	str	r5, [r4, #20]
    if(cmd_mode == false) {
     3cc:	4b4d      	ldr	r3, [pc, #308]	; (504 <ssd1963_init+0x234>)
     3ce:	781b      	ldrb	r3, [r3, #0]
     3d0:	b923      	cbnz	r3, 3dc <ssd1963_init+0x10c>
     3d2:	4623      	mov	r3, r4
     3d4:	615d      	str	r5, [r3, #20]
        cmd_mode = true;
     3d6:	2201      	movs	r2, #1
     3d8:	4b4a      	ldr	r3, [pc, #296]	; (504 <ssd1963_init+0x234>)
     3da:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     3dc:	22e0      	movs	r2, #224	; 0xe0
     3de:	494b      	ldr	r1, [pc, #300]	; (50c <ssd1963_init+0x23c>)
     3e0:	484b      	ldr	r0, [pc, #300]	; (510 <ssd1963_init+0x240>)
     3e2:	4b4c      	ldr	r3, [pc, #304]	; (514 <ssd1963_init+0x244>)
     3e4:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3e6:	4b46      	ldr	r3, [pc, #280]	; (500 <ssd1963_init+0x230>)
     3e8:	2240      	movs	r2, #64	; 0x40
     3ea:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3ec:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     3ee:	4b45      	ldr	r3, [pc, #276]	; (504 <ssd1963_init+0x234>)
     3f0:	781b      	ldrb	r3, [r3, #0]
     3f2:	b123      	cbz	r3, 3fe <ssd1963_init+0x12e>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3f4:	4b42      	ldr	r3, [pc, #264]	; (500 <ssd1963_init+0x230>)
     3f6:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     3f8:	2200      	movs	r2, #0
     3fa:	4b42      	ldr	r3, [pc, #264]	; (504 <ssd1963_init+0x234>)
     3fc:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     3fe:	2203      	movs	r2, #3
     400:	4942      	ldr	r1, [pc, #264]	; (50c <ssd1963_init+0x23c>)
     402:	4843      	ldr	r0, [pc, #268]	; (510 <ssd1963_init+0x240>)
     404:	4b43      	ldr	r3, [pc, #268]	; (514 <ssd1963_init+0x244>)
     406:	4798      	blx	r3
     408:	4c3d      	ldr	r4, [pc, #244]	; (500 <ssd1963_init+0x230>)
     40a:	2540      	movs	r5, #64	; 0x40
     40c:	61a5      	str	r5, [r4, #24]
    LV_DRV_DELAY_MS(1);
     40e:	2001      	movs	r0, #1
     410:	4b3d      	ldr	r3, [pc, #244]	; (508 <ssd1963_init+0x238>)
     412:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     414:	6165      	str	r5, [r4, #20]
    if(cmd_mode == false) {
     416:	4b3b      	ldr	r3, [pc, #236]	; (504 <ssd1963_init+0x234>)
     418:	781b      	ldrb	r3, [r3, #0]
     41a:	b923      	cbnz	r3, 426 <ssd1963_init+0x156>
     41c:	4623      	mov	r3, r4
     41e:	615d      	str	r5, [r3, #20]
        cmd_mode = true;
     420:	2201      	movs	r2, #1
     422:	4b38      	ldr	r3, [pc, #224]	; (504 <ssd1963_init+0x234>)
     424:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     426:	2201      	movs	r2, #1
     428:	4938      	ldr	r1, [pc, #224]	; (50c <ssd1963_init+0x23c>)
     42a:	4839      	ldr	r0, [pc, #228]	; (510 <ssd1963_init+0x240>)
     42c:	4b39      	ldr	r3, [pc, #228]	; (514 <ssd1963_init+0x244>)
     42e:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     430:	4c33      	ldr	r4, [pc, #204]	; (500 <ssd1963_init+0x230>)
     432:	2540      	movs	r5, #64	; 0x40
     434:	61a5      	str	r5, [r4, #24]
    LV_DRV_DELAY_MS(1);
     436:	2001      	movs	r0, #1
     438:	4b33      	ldr	r3, [pc, #204]	; (508 <ssd1963_init+0x238>)
     43a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     43c:	6165      	str	r5, [r4, #20]
    if(cmd_mode == false) {
     43e:	4b31      	ldr	r3, [pc, #196]	; (504 <ssd1963_init+0x234>)
     440:	781b      	ldrb	r3, [r3, #0]
     442:	b923      	cbnz	r3, 44e <ssd1963_init+0x17e>
     444:	4623      	mov	r3, r4
     446:	615d      	str	r5, [r3, #20]
        cmd_mode = true;
     448:	2201      	movs	r2, #1
     44a:	4b2e      	ldr	r3, [pc, #184]	; (504 <ssd1963_init+0x234>)
     44c:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     44e:	22e6      	movs	r2, #230	; 0xe6
     450:	492e      	ldr	r1, [pc, #184]	; (50c <ssd1963_init+0x23c>)
     452:	482f      	ldr	r0, [pc, #188]	; (510 <ssd1963_init+0x240>)
     454:	4b2f      	ldr	r3, [pc, #188]	; (514 <ssd1963_init+0x244>)
     456:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     458:	4b29      	ldr	r3, [pc, #164]	; (500 <ssd1963_init+0x230>)
     45a:	2240      	movs	r2, #64	; 0x40
     45c:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     45e:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     460:	4b28      	ldr	r3, [pc, #160]	; (504 <ssd1963_init+0x234>)
     462:	781b      	ldrb	r3, [r3, #0]
     464:	b123      	cbz	r3, 470 <ssd1963_init+0x1a0>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     466:	4b26      	ldr	r3, [pc, #152]	; (500 <ssd1963_init+0x230>)
     468:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     46a:	2200      	movs	r2, #0
     46c:	4b25      	ldr	r3, [pc, #148]	; (504 <ssd1963_init+0x234>)
     46e:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     470:	2201      	movs	r2, #1
     472:	4926      	ldr	r1, [pc, #152]	; (50c <ssd1963_init+0x23c>)
     474:	4826      	ldr	r0, [pc, #152]	; (510 <ssd1963_init+0x240>)
     476:	4b27      	ldr	r3, [pc, #156]	; (514 <ssd1963_init+0x244>)
     478:	4798      	blx	r3
     47a:	4b21      	ldr	r3, [pc, #132]	; (500 <ssd1963_init+0x230>)
     47c:	2240      	movs	r2, #64	; 0x40
     47e:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     480:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     482:	4b20      	ldr	r3, [pc, #128]	; (504 <ssd1963_init+0x234>)
     484:	781b      	ldrb	r3, [r3, #0]
     486:	b123      	cbz	r3, 492 <ssd1963_init+0x1c2>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     488:	4b1d      	ldr	r3, [pc, #116]	; (500 <ssd1963_init+0x230>)
     48a:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     48c:	2200      	movs	r2, #0
     48e:	4b1d      	ldr	r3, [pc, #116]	; (504 <ssd1963_init+0x234>)
     490:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     492:	2233      	movs	r2, #51	; 0x33
     494:	491d      	ldr	r1, [pc, #116]	; (50c <ssd1963_init+0x23c>)
     496:	481e      	ldr	r0, [pc, #120]	; (510 <ssd1963_init+0x240>)
     498:	4b1e      	ldr	r3, [pc, #120]	; (514 <ssd1963_init+0x244>)
     49a:	4798      	blx	r3
     49c:	4b18      	ldr	r3, [pc, #96]	; (500 <ssd1963_init+0x230>)
     49e:	2240      	movs	r2, #64	; 0x40
     4a0:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4a2:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     4a4:	4b17      	ldr	r3, [pc, #92]	; (504 <ssd1963_init+0x234>)
     4a6:	781b      	ldrb	r3, [r3, #0]
     4a8:	b123      	cbz	r3, 4b4 <ssd1963_init+0x1e4>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     4aa:	4b15      	ldr	r3, [pc, #84]	; (500 <ssd1963_init+0x230>)
     4ac:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     4ae:	2200      	movs	r2, #0
     4b0:	4b14      	ldr	r3, [pc, #80]	; (504 <ssd1963_init+0x234>)
     4b2:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     4b4:	2233      	movs	r2, #51	; 0x33
     4b6:	4915      	ldr	r1, [pc, #84]	; (50c <ssd1963_init+0x23c>)
     4b8:	4815      	ldr	r0, [pc, #84]	; (510 <ssd1963_init+0x240>)
     4ba:	4b16      	ldr	r3, [pc, #88]	; (514 <ssd1963_init+0x244>)
     4bc:	4798      	blx	r3
     4be:	4b10      	ldr	r3, [pc, #64]	; (500 <ssd1963_init+0x230>)
     4c0:	2240      	movs	r2, #64	; 0x40
     4c2:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4c4:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     4c6:	4b0f      	ldr	r3, [pc, #60]	; (504 <ssd1963_init+0x234>)
     4c8:	781b      	ldrb	r3, [r3, #0]
     4ca:	b923      	cbnz	r3, 4d6 <ssd1963_init+0x206>
     4cc:	4b0c      	ldr	r3, [pc, #48]	; (500 <ssd1963_init+0x230>)
     4ce:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     4d0:	2201      	movs	r2, #1
     4d2:	4b0c      	ldr	r3, [pc, #48]	; (504 <ssd1963_init+0x234>)
     4d4:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     4d6:	22b0      	movs	r2, #176	; 0xb0
     4d8:	490c      	ldr	r1, [pc, #48]	; (50c <ssd1963_init+0x23c>)
     4da:	480d      	ldr	r0, [pc, #52]	; (510 <ssd1963_init+0x240>)
     4dc:	4b0d      	ldr	r3, [pc, #52]	; (514 <ssd1963_init+0x244>)
     4de:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     4e0:	4b07      	ldr	r3, [pc, #28]	; (500 <ssd1963_init+0x230>)
     4e2:	2240      	movs	r2, #64	; 0x40
     4e4:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4e6:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     4e8:	4b06      	ldr	r3, [pc, #24]	; (504 <ssd1963_init+0x234>)
     4ea:	781b      	ldrb	r3, [r3, #0]
     4ec:	b123      	cbz	r3, 4f8 <ssd1963_init+0x228>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     4ee:	4b04      	ldr	r3, [pc, #16]	; (500 <ssd1963_init+0x230>)
     4f0:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     4f2:	2200      	movs	r2, #0
     4f4:	4b03      	ldr	r3, [pc, #12]	; (504 <ssd1963_init+0x234>)
     4f6:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     4f8:	2220      	movs	r2, #32
     4fa:	4904      	ldr	r1, [pc, #16]	; (50c <ssd1963_init+0x23c>)
     4fc:	e00c      	b.n	518 <ssd1963_init+0x248>
     4fe:	bf00      	nop
     500:	41008000 	.word	0x41008000
     504:	20000000 	.word	0x20000000
     508:	00001535 	.word	0x00001535
     50c:	1c03c3f7 	.word	0x1c03c3f7
     510:	41008080 	.word	0x41008080
     514:	00000fb1 	.word	0x00000fb1
     518:	4888      	ldr	r0, [pc, #544]	; (73c <ssd1963_init+0x46c>)
     51a:	4b89      	ldr	r3, [pc, #548]	; (740 <ssd1963_init+0x470>)
     51c:	4798      	blx	r3
     51e:	4b89      	ldr	r3, [pc, #548]	; (744 <ssd1963_init+0x474>)
     520:	2240      	movs	r2, #64	; 0x40
     522:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     524:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     526:	4b88      	ldr	r3, [pc, #544]	; (748 <ssd1963_init+0x478>)
     528:	781b      	ldrb	r3, [r3, #0]
     52a:	b123      	cbz	r3, 536 <ssd1963_init+0x266>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     52c:	4b85      	ldr	r3, [pc, #532]	; (744 <ssd1963_init+0x474>)
     52e:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     530:	2200      	movs	r2, #0
     532:	4b85      	ldr	r3, [pc, #532]	; (748 <ssd1963_init+0x478>)
     534:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     536:	2200      	movs	r2, #0
     538:	4984      	ldr	r1, [pc, #528]	; (74c <ssd1963_init+0x47c>)
     53a:	4880      	ldr	r0, [pc, #512]	; (73c <ssd1963_init+0x46c>)
     53c:	4b80      	ldr	r3, [pc, #512]	; (740 <ssd1963_init+0x470>)
     53e:	4798      	blx	r3
     540:	4c80      	ldr	r4, [pc, #512]	; (744 <ssd1963_init+0x474>)
     542:	2540      	movs	r5, #64	; 0x40
     544:	61a5      	str	r5, [r4, #24]
    ssd1963_data(((SSD1963_HOR_RES - 1) >> 8) & 0X00FF); //Set HDP
     546:	4b82      	ldr	r3, [pc, #520]	; (750 <ssd1963_init+0x480>)
     548:	4798      	blx	r3
     54a:	4b82      	ldr	r3, [pc, #520]	; (754 <ssd1963_init+0x484>)
     54c:	4798      	blx	r3
     54e:	1e42      	subs	r2, r0, #1
     550:	1212      	asrs	r2, r2, #8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     552:	6165      	str	r5, [r4, #20]
    if(cmd_mode != false) {
     554:	4b7c      	ldr	r3, [pc, #496]	; (748 <ssd1963_init+0x478>)
     556:	781b      	ldrb	r3, [r3, #0]
     558:	b123      	cbz	r3, 564 <ssd1963_init+0x294>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     55a:	4623      	mov	r3, r4
     55c:	619d      	str	r5, [r3, #24]
        cmd_mode = false;
     55e:	2100      	movs	r1, #0
     560:	4b79      	ldr	r3, [pc, #484]	; (748 <ssd1963_init+0x478>)
     562:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     564:	b2d2      	uxtb	r2, r2
     566:	4979      	ldr	r1, [pc, #484]	; (74c <ssd1963_init+0x47c>)
     568:	4874      	ldr	r0, [pc, #464]	; (73c <ssd1963_init+0x46c>)
     56a:	4b75      	ldr	r3, [pc, #468]	; (740 <ssd1963_init+0x470>)
     56c:	4798      	blx	r3
     56e:	4c75      	ldr	r4, [pc, #468]	; (744 <ssd1963_init+0x474>)
     570:	2540      	movs	r5, #64	; 0x40
     572:	61a5      	str	r5, [r4, #24]
    ssd1963_data((SSD1963_HOR_RES - 1) & 0X00FF);
     574:	4b76      	ldr	r3, [pc, #472]	; (750 <ssd1963_init+0x480>)
     576:	4798      	blx	r3
     578:	4b76      	ldr	r3, [pc, #472]	; (754 <ssd1963_init+0x484>)
     57a:	4798      	blx	r3
     57c:	1e42      	subs	r2, r0, #1
     57e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     580:	6165      	str	r5, [r4, #20]
    if(cmd_mode != false) {
     582:	4b71      	ldr	r3, [pc, #452]	; (748 <ssd1963_init+0x478>)
     584:	781b      	ldrb	r3, [r3, #0]
     586:	b123      	cbz	r3, 592 <ssd1963_init+0x2c2>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     588:	4623      	mov	r3, r4
     58a:	619d      	str	r5, [r3, #24]
        cmd_mode = false;
     58c:	2100      	movs	r1, #0
     58e:	4b6e      	ldr	r3, [pc, #440]	; (748 <ssd1963_init+0x478>)
     590:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     592:	496e      	ldr	r1, [pc, #440]	; (74c <ssd1963_init+0x47c>)
     594:	4869      	ldr	r0, [pc, #420]	; (73c <ssd1963_init+0x46c>)
     596:	4b6a      	ldr	r3, [pc, #424]	; (740 <ssd1963_init+0x470>)
     598:	4798      	blx	r3
     59a:	4c6a      	ldr	r4, [pc, #424]	; (744 <ssd1963_init+0x474>)
     59c:	2540      	movs	r5, #64	; 0x40
     59e:	61a5      	str	r5, [r4, #24]
    ssd1963_data(((SSD1963_VER_RES - 1) >> 8) & 0X00FF); //Set VDP
     5a0:	4b6b      	ldr	r3, [pc, #428]	; (750 <ssd1963_init+0x480>)
     5a2:	4798      	blx	r3
     5a4:	4b6c      	ldr	r3, [pc, #432]	; (758 <ssd1963_init+0x488>)
     5a6:	4798      	blx	r3
     5a8:	1e42      	subs	r2, r0, #1
     5aa:	1212      	asrs	r2, r2, #8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5ac:	6165      	str	r5, [r4, #20]
    if(cmd_mode != false) {
     5ae:	4b66      	ldr	r3, [pc, #408]	; (748 <ssd1963_init+0x478>)
     5b0:	781b      	ldrb	r3, [r3, #0]
     5b2:	b123      	cbz	r3, 5be <ssd1963_init+0x2ee>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     5b4:	4623      	mov	r3, r4
     5b6:	619d      	str	r5, [r3, #24]
        cmd_mode = false;
     5b8:	2100      	movs	r1, #0
     5ba:	4b63      	ldr	r3, [pc, #396]	; (748 <ssd1963_init+0x478>)
     5bc:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     5be:	b2d2      	uxtb	r2, r2
     5c0:	4962      	ldr	r1, [pc, #392]	; (74c <ssd1963_init+0x47c>)
     5c2:	485e      	ldr	r0, [pc, #376]	; (73c <ssd1963_init+0x46c>)
     5c4:	4b5e      	ldr	r3, [pc, #376]	; (740 <ssd1963_init+0x470>)
     5c6:	4798      	blx	r3
     5c8:	4c5e      	ldr	r4, [pc, #376]	; (744 <ssd1963_init+0x474>)
     5ca:	2540      	movs	r5, #64	; 0x40
     5cc:	61a5      	str	r5, [r4, #24]
    ssd1963_data((SSD1963_VER_RES - 1) & 0X00FF);
     5ce:	4b60      	ldr	r3, [pc, #384]	; (750 <ssd1963_init+0x480>)
     5d0:	4798      	blx	r3
     5d2:	4b61      	ldr	r3, [pc, #388]	; (758 <ssd1963_init+0x488>)
     5d4:	4798      	blx	r3
     5d6:	1e42      	subs	r2, r0, #1
     5d8:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5da:	6165      	str	r5, [r4, #20]
    if(cmd_mode != false) {
     5dc:	4b5a      	ldr	r3, [pc, #360]	; (748 <ssd1963_init+0x478>)
     5de:	781b      	ldrb	r3, [r3, #0]
     5e0:	b123      	cbz	r3, 5ec <ssd1963_init+0x31c>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     5e2:	4623      	mov	r3, r4
     5e4:	619d      	str	r5, [r3, #24]
        cmd_mode = false;
     5e6:	2100      	movs	r1, #0
     5e8:	4b57      	ldr	r3, [pc, #348]	; (748 <ssd1963_init+0x478>)
     5ea:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     5ec:	4957      	ldr	r1, [pc, #348]	; (74c <ssd1963_init+0x47c>)
     5ee:	4853      	ldr	r0, [pc, #332]	; (73c <ssd1963_init+0x46c>)
     5f0:	4b53      	ldr	r3, [pc, #332]	; (740 <ssd1963_init+0x470>)
     5f2:	4798      	blx	r3
     5f4:	4b53      	ldr	r3, [pc, #332]	; (744 <ssd1963_init+0x474>)
     5f6:	2240      	movs	r2, #64	; 0x40
     5f8:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5fa:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     5fc:	4b52      	ldr	r3, [pc, #328]	; (748 <ssd1963_init+0x478>)
     5fe:	781b      	ldrb	r3, [r3, #0]
     600:	b123      	cbz	r3, 60c <ssd1963_init+0x33c>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     602:	4b50      	ldr	r3, [pc, #320]	; (744 <ssd1963_init+0x474>)
     604:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     606:	2200      	movs	r2, #0
     608:	4b4f      	ldr	r3, [pc, #316]	; (748 <ssd1963_init+0x478>)
     60a:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     60c:	2200      	movs	r2, #0
     60e:	494f      	ldr	r1, [pc, #316]	; (74c <ssd1963_init+0x47c>)
     610:	484a      	ldr	r0, [pc, #296]	; (73c <ssd1963_init+0x46c>)
     612:	4b4b      	ldr	r3, [pc, #300]	; (740 <ssd1963_init+0x470>)
     614:	4798      	blx	r3
     616:	4c4b      	ldr	r4, [pc, #300]	; (744 <ssd1963_init+0x474>)
     618:	2540      	movs	r5, #64	; 0x40
     61a:	61a5      	str	r5, [r4, #24]
    LV_DRV_DELAY_MS(1);//Delay10us(5);
     61c:	2001      	movs	r0, #1
     61e:	4b4f      	ldr	r3, [pc, #316]	; (75c <ssd1963_init+0x48c>)
     620:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     622:	6165      	str	r5, [r4, #20]
    if(cmd_mode == false) {
     624:	4b48      	ldr	r3, [pc, #288]	; (748 <ssd1963_init+0x478>)
     626:	781b      	ldrb	r3, [r3, #0]
     628:	b923      	cbnz	r3, 634 <ssd1963_init+0x364>
     62a:	4623      	mov	r3, r4
     62c:	615d      	str	r5, [r3, #20]
        cmd_mode = true;
     62e:	2201      	movs	r2, #1
     630:	4b45      	ldr	r3, [pc, #276]	; (748 <ssd1963_init+0x478>)
     632:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     634:	22b4      	movs	r2, #180	; 0xb4
     636:	4945      	ldr	r1, [pc, #276]	; (74c <ssd1963_init+0x47c>)
     638:	4840      	ldr	r0, [pc, #256]	; (73c <ssd1963_init+0x46c>)
     63a:	4b41      	ldr	r3, [pc, #260]	; (740 <ssd1963_init+0x470>)
     63c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     63e:	4b41      	ldr	r3, [pc, #260]	; (744 <ssd1963_init+0x474>)
     640:	2240      	movs	r2, #64	; 0x40
     642:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     644:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     646:	4b40      	ldr	r3, [pc, #256]	; (748 <ssd1963_init+0x478>)
     648:	781b      	ldrb	r3, [r3, #0]
     64a:	b123      	cbz	r3, 656 <ssd1963_init+0x386>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     64c:	4b3d      	ldr	r3, [pc, #244]	; (744 <ssd1963_init+0x474>)
     64e:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     650:	2200      	movs	r2, #0
     652:	4b3d      	ldr	r3, [pc, #244]	; (748 <ssd1963_init+0x478>)
     654:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     656:	2202      	movs	r2, #2
     658:	493c      	ldr	r1, [pc, #240]	; (74c <ssd1963_init+0x47c>)
     65a:	4838      	ldr	r0, [pc, #224]	; (73c <ssd1963_init+0x46c>)
     65c:	4b38      	ldr	r3, [pc, #224]	; (740 <ssd1963_init+0x470>)
     65e:	4798      	blx	r3
     660:	4b38      	ldr	r3, [pc, #224]	; (744 <ssd1963_init+0x474>)
     662:	2240      	movs	r2, #64	; 0x40
     664:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     666:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     668:	4b37      	ldr	r3, [pc, #220]	; (748 <ssd1963_init+0x478>)
     66a:	781b      	ldrb	r3, [r3, #0]
     66c:	b123      	cbz	r3, 678 <ssd1963_init+0x3a8>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     66e:	4b35      	ldr	r3, [pc, #212]	; (744 <ssd1963_init+0x474>)
     670:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     672:	2200      	movs	r2, #0
     674:	4b34      	ldr	r3, [pc, #208]	; (748 <ssd1963_init+0x478>)
     676:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     678:	220d      	movs	r2, #13
     67a:	4934      	ldr	r1, [pc, #208]	; (74c <ssd1963_init+0x47c>)
     67c:	482f      	ldr	r0, [pc, #188]	; (73c <ssd1963_init+0x46c>)
     67e:	4b30      	ldr	r3, [pc, #192]	; (740 <ssd1963_init+0x470>)
     680:	4798      	blx	r3
     682:	4b30      	ldr	r3, [pc, #192]	; (744 <ssd1963_init+0x474>)
     684:	2240      	movs	r2, #64	; 0x40
     686:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     688:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     68a:	4b2f      	ldr	r3, [pc, #188]	; (748 <ssd1963_init+0x478>)
     68c:	781b      	ldrb	r3, [r3, #0]
     68e:	b123      	cbz	r3, 69a <ssd1963_init+0x3ca>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     690:	4b2c      	ldr	r3, [pc, #176]	; (744 <ssd1963_init+0x474>)
     692:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     694:	2200      	movs	r2, #0
     696:	4b2c      	ldr	r3, [pc, #176]	; (748 <ssd1963_init+0x478>)
     698:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     69a:	2201      	movs	r2, #1
     69c:	492b      	ldr	r1, [pc, #172]	; (74c <ssd1963_init+0x47c>)
     69e:	4827      	ldr	r0, [pc, #156]	; (73c <ssd1963_init+0x46c>)
     6a0:	4b27      	ldr	r3, [pc, #156]	; (740 <ssd1963_init+0x470>)
     6a2:	4798      	blx	r3
     6a4:	4b27      	ldr	r3, [pc, #156]	; (744 <ssd1963_init+0x474>)
     6a6:	2240      	movs	r2, #64	; 0x40
     6a8:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     6aa:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     6ac:	4b26      	ldr	r3, [pc, #152]	; (748 <ssd1963_init+0x478>)
     6ae:	781b      	ldrb	r3, [r3, #0]
     6b0:	b123      	cbz	r3, 6bc <ssd1963_init+0x3ec>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     6b2:	4b24      	ldr	r3, [pc, #144]	; (744 <ssd1963_init+0x474>)
     6b4:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     6b6:	2200      	movs	r2, #0
     6b8:	4b23      	ldr	r3, [pc, #140]	; (748 <ssd1963_init+0x478>)
     6ba:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     6bc:	22e0      	movs	r2, #224	; 0xe0
     6be:	4923      	ldr	r1, [pc, #140]	; (74c <ssd1963_init+0x47c>)
     6c0:	481e      	ldr	r0, [pc, #120]	; (73c <ssd1963_init+0x46c>)
     6c2:	4b1f      	ldr	r3, [pc, #124]	; (740 <ssd1963_init+0x470>)
     6c4:	4798      	blx	r3
     6c6:	4b1f      	ldr	r3, [pc, #124]	; (744 <ssd1963_init+0x474>)
     6c8:	2240      	movs	r2, #64	; 0x40
     6ca:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     6cc:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     6ce:	4b1e      	ldr	r3, [pc, #120]	; (748 <ssd1963_init+0x478>)
     6d0:	781b      	ldrb	r3, [r3, #0]
     6d2:	b123      	cbz	r3, 6de <ssd1963_init+0x40e>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     6d4:	4b1b      	ldr	r3, [pc, #108]	; (744 <ssd1963_init+0x474>)
     6d6:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     6d8:	2200      	movs	r2, #0
     6da:	4b1b      	ldr	r3, [pc, #108]	; (748 <ssd1963_init+0x478>)
     6dc:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     6de:	2205      	movs	r2, #5
     6e0:	491a      	ldr	r1, [pc, #104]	; (74c <ssd1963_init+0x47c>)
     6e2:	4816      	ldr	r0, [pc, #88]	; (73c <ssd1963_init+0x46c>)
     6e4:	4b16      	ldr	r3, [pc, #88]	; (740 <ssd1963_init+0x470>)
     6e6:	4798      	blx	r3
     6e8:	4b16      	ldr	r3, [pc, #88]	; (744 <ssd1963_init+0x474>)
     6ea:	2240      	movs	r2, #64	; 0x40
     6ec:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     6ee:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     6f0:	4b15      	ldr	r3, [pc, #84]	; (748 <ssd1963_init+0x478>)
     6f2:	781b      	ldrb	r3, [r3, #0]
     6f4:	b123      	cbz	r3, 700 <ssd1963_init+0x430>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     6f6:	4b13      	ldr	r3, [pc, #76]	; (744 <ssd1963_init+0x474>)
     6f8:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     6fa:	2200      	movs	r2, #0
     6fc:	4b12      	ldr	r3, [pc, #72]	; (748 <ssd1963_init+0x478>)
     6fe:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     700:	2200      	movs	r2, #0
     702:	4912      	ldr	r1, [pc, #72]	; (74c <ssd1963_init+0x47c>)
     704:	480d      	ldr	r0, [pc, #52]	; (73c <ssd1963_init+0x46c>)
     706:	4b0e      	ldr	r3, [pc, #56]	; (740 <ssd1963_init+0x470>)
     708:	4798      	blx	r3
     70a:	4b0e      	ldr	r3, [pc, #56]	; (744 <ssd1963_init+0x474>)
     70c:	2240      	movs	r2, #64	; 0x40
     70e:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     710:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     712:	4b0d      	ldr	r3, [pc, #52]	; (748 <ssd1963_init+0x478>)
     714:	781b      	ldrb	r3, [r3, #0]
     716:	b123      	cbz	r3, 722 <ssd1963_init+0x452>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     718:	4b0a      	ldr	r3, [pc, #40]	; (744 <ssd1963_init+0x474>)
     71a:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     71c:	2200      	movs	r2, #0
     71e:	4b0a      	ldr	r3, [pc, #40]	; (748 <ssd1963_init+0x478>)
     720:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     722:	2228      	movs	r2, #40	; 0x28
     724:	4909      	ldr	r1, [pc, #36]	; (74c <ssd1963_init+0x47c>)
     726:	4805      	ldr	r0, [pc, #20]	; (73c <ssd1963_init+0x46c>)
     728:	4b05      	ldr	r3, [pc, #20]	; (740 <ssd1963_init+0x470>)
     72a:	4798      	blx	r3
     72c:	4b05      	ldr	r3, [pc, #20]	; (744 <ssd1963_init+0x474>)
     72e:	2240      	movs	r2, #64	; 0x40
     730:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     732:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     734:	4b04      	ldr	r3, [pc, #16]	; (748 <ssd1963_init+0x478>)
     736:	781b      	ldrb	r3, [r3, #0]
     738:	e012      	b.n	760 <ssd1963_init+0x490>
     73a:	bf00      	nop
     73c:	41008080 	.word	0x41008080
     740:	00000fb1 	.word	0x00000fb1
     744:	41008000 	.word	0x41008000
     748:	20000000 	.word	0x20000000
     74c:	1c03c3f7 	.word	0x1c03c3f7
     750:	00010161 	.word	0x00010161
     754:	0001016d 	.word	0x0001016d
     758:	00010195 	.word	0x00010195
     75c:	00001535 	.word	0x00001535
     760:	b123      	cbz	r3, 76c <ssd1963_init+0x49c>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     762:	4b88      	ldr	r3, [pc, #544]	; (984 <ssd1963_init+0x6b4>)
     764:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     766:	2200      	movs	r2, #0
     768:	4b87      	ldr	r3, [pc, #540]	; (988 <ssd1963_init+0x6b8>)
     76a:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     76c:	2200      	movs	r2, #0
     76e:	4987      	ldr	r1, [pc, #540]	; (98c <ssd1963_init+0x6bc>)
     770:	4887      	ldr	r0, [pc, #540]	; (990 <ssd1963_init+0x6c0>)
     772:	4b88      	ldr	r3, [pc, #544]	; (994 <ssd1963_init+0x6c4>)
     774:	4798      	blx	r3
     776:	4b83      	ldr	r3, [pc, #524]	; (984 <ssd1963_init+0x6b4>)
     778:	2240      	movs	r2, #64	; 0x40
     77a:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     77c:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     77e:	4b82      	ldr	r3, [pc, #520]	; (988 <ssd1963_init+0x6b8>)
     780:	781b      	ldrb	r3, [r3, #0]
     782:	b923      	cbnz	r3, 78e <ssd1963_init+0x4be>
     784:	4b7f      	ldr	r3, [pc, #508]	; (984 <ssd1963_init+0x6b4>)
     786:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     788:	2201      	movs	r2, #1
     78a:	4b7f      	ldr	r3, [pc, #508]	; (988 <ssd1963_init+0x6b8>)
     78c:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     78e:	22b6      	movs	r2, #182	; 0xb6
     790:	497e      	ldr	r1, [pc, #504]	; (98c <ssd1963_init+0x6bc>)
     792:	487f      	ldr	r0, [pc, #508]	; (990 <ssd1963_init+0x6c0>)
     794:	4b7f      	ldr	r3, [pc, #508]	; (994 <ssd1963_init+0x6c4>)
     796:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     798:	4b7a      	ldr	r3, [pc, #488]	; (984 <ssd1963_init+0x6b4>)
     79a:	2240      	movs	r2, #64	; 0x40
     79c:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     79e:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     7a0:	4b79      	ldr	r3, [pc, #484]	; (988 <ssd1963_init+0x6b8>)
     7a2:	781b      	ldrb	r3, [r3, #0]
     7a4:	b123      	cbz	r3, 7b0 <ssd1963_init+0x4e0>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     7a6:	4b77      	ldr	r3, [pc, #476]	; (984 <ssd1963_init+0x6b4>)
     7a8:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     7aa:	2200      	movs	r2, #0
     7ac:	4b76      	ldr	r3, [pc, #472]	; (988 <ssd1963_init+0x6b8>)
     7ae:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     7b0:	2201      	movs	r2, #1
     7b2:	4976      	ldr	r1, [pc, #472]	; (98c <ssd1963_init+0x6bc>)
     7b4:	4876      	ldr	r0, [pc, #472]	; (990 <ssd1963_init+0x6c0>)
     7b6:	4b77      	ldr	r3, [pc, #476]	; (994 <ssd1963_init+0x6c4>)
     7b8:	4798      	blx	r3
     7ba:	4b72      	ldr	r3, [pc, #456]	; (984 <ssd1963_init+0x6b4>)
     7bc:	2240      	movs	r2, #64	; 0x40
     7be:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7c0:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     7c2:	4b71      	ldr	r3, [pc, #452]	; (988 <ssd1963_init+0x6b8>)
     7c4:	781b      	ldrb	r3, [r3, #0]
     7c6:	b123      	cbz	r3, 7d2 <ssd1963_init+0x502>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     7c8:	4b6e      	ldr	r3, [pc, #440]	; (984 <ssd1963_init+0x6b4>)
     7ca:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     7cc:	2200      	movs	r2, #0
     7ce:	4b6e      	ldr	r3, [pc, #440]	; (988 <ssd1963_init+0x6b8>)
     7d0:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     7d2:	2220      	movs	r2, #32
     7d4:	496d      	ldr	r1, [pc, #436]	; (98c <ssd1963_init+0x6bc>)
     7d6:	486e      	ldr	r0, [pc, #440]	; (990 <ssd1963_init+0x6c0>)
     7d8:	4b6e      	ldr	r3, [pc, #440]	; (994 <ssd1963_init+0x6c4>)
     7da:	4798      	blx	r3
     7dc:	4b69      	ldr	r3, [pc, #420]	; (984 <ssd1963_init+0x6b4>)
     7de:	2240      	movs	r2, #64	; 0x40
     7e0:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7e2:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     7e4:	4b68      	ldr	r3, [pc, #416]	; (988 <ssd1963_init+0x6b8>)
     7e6:	781b      	ldrb	r3, [r3, #0]
     7e8:	b123      	cbz	r3, 7f4 <ssd1963_init+0x524>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     7ea:	4b66      	ldr	r3, [pc, #408]	; (984 <ssd1963_init+0x6b4>)
     7ec:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     7ee:	2200      	movs	r2, #0
     7f0:	4b65      	ldr	r3, [pc, #404]	; (988 <ssd1963_init+0x6b8>)
     7f2:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     7f4:	2201      	movs	r2, #1
     7f6:	4965      	ldr	r1, [pc, #404]	; (98c <ssd1963_init+0x6bc>)
     7f8:	4865      	ldr	r0, [pc, #404]	; (990 <ssd1963_init+0x6c0>)
     7fa:	4b66      	ldr	r3, [pc, #408]	; (994 <ssd1963_init+0x6c4>)
     7fc:	4798      	blx	r3
     7fe:	4b61      	ldr	r3, [pc, #388]	; (984 <ssd1963_init+0x6b4>)
     800:	2240      	movs	r2, #64	; 0x40
     802:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     804:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     806:	4b60      	ldr	r3, [pc, #384]	; (988 <ssd1963_init+0x6b8>)
     808:	781b      	ldrb	r3, [r3, #0]
     80a:	b123      	cbz	r3, 816 <ssd1963_init+0x546>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     80c:	4b5d      	ldr	r3, [pc, #372]	; (984 <ssd1963_init+0x6b4>)
     80e:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     810:	2200      	movs	r2, #0
     812:	4b5d      	ldr	r3, [pc, #372]	; (988 <ssd1963_init+0x6b8>)
     814:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     816:	2210      	movs	r2, #16
     818:	495c      	ldr	r1, [pc, #368]	; (98c <ssd1963_init+0x6bc>)
     81a:	485d      	ldr	r0, [pc, #372]	; (990 <ssd1963_init+0x6c0>)
     81c:	4b5d      	ldr	r3, [pc, #372]	; (994 <ssd1963_init+0x6c4>)
     81e:	4798      	blx	r3
     820:	4b58      	ldr	r3, [pc, #352]	; (984 <ssd1963_init+0x6b4>)
     822:	2240      	movs	r2, #64	; 0x40
     824:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     826:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     828:	4b57      	ldr	r3, [pc, #348]	; (988 <ssd1963_init+0x6b8>)
     82a:	781b      	ldrb	r3, [r3, #0]
     82c:	b123      	cbz	r3, 838 <ssd1963_init+0x568>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     82e:	4b55      	ldr	r3, [pc, #340]	; (984 <ssd1963_init+0x6b4>)
     830:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     832:	2200      	movs	r2, #0
     834:	4b54      	ldr	r3, [pc, #336]	; (988 <ssd1963_init+0x6b8>)
     836:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     838:	2208      	movs	r2, #8
     83a:	4954      	ldr	r1, [pc, #336]	; (98c <ssd1963_init+0x6bc>)
     83c:	4854      	ldr	r0, [pc, #336]	; (990 <ssd1963_init+0x6c0>)
     83e:	4b55      	ldr	r3, [pc, #340]	; (994 <ssd1963_init+0x6c4>)
     840:	4798      	blx	r3
     842:	4b50      	ldr	r3, [pc, #320]	; (984 <ssd1963_init+0x6b4>)
     844:	2240      	movs	r2, #64	; 0x40
     846:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     848:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     84a:	4b4f      	ldr	r3, [pc, #316]	; (988 <ssd1963_init+0x6b8>)
     84c:	781b      	ldrb	r3, [r3, #0]
     84e:	b123      	cbz	r3, 85a <ssd1963_init+0x58a>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     850:	4b4c      	ldr	r3, [pc, #304]	; (984 <ssd1963_init+0x6b4>)
     852:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     854:	2200      	movs	r2, #0
     856:	4b4c      	ldr	r3, [pc, #304]	; (988 <ssd1963_init+0x6b8>)
     858:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     85a:	2200      	movs	r2, #0
     85c:	494b      	ldr	r1, [pc, #300]	; (98c <ssd1963_init+0x6bc>)
     85e:	484c      	ldr	r0, [pc, #304]	; (990 <ssd1963_init+0x6c0>)
     860:	4b4c      	ldr	r3, [pc, #304]	; (994 <ssd1963_init+0x6c4>)
     862:	4798      	blx	r3
     864:	4b47      	ldr	r3, [pc, #284]	; (984 <ssd1963_init+0x6b4>)
     866:	2240      	movs	r2, #64	; 0x40
     868:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     86a:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     86c:	4b46      	ldr	r3, [pc, #280]	; (988 <ssd1963_init+0x6b8>)
     86e:	781b      	ldrb	r3, [r3, #0]
     870:	b123      	cbz	r3, 87c <ssd1963_init+0x5ac>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     872:	4b44      	ldr	r3, [pc, #272]	; (984 <ssd1963_init+0x6b4>)
     874:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     876:	2200      	movs	r2, #0
     878:	4b43      	ldr	r3, [pc, #268]	; (988 <ssd1963_init+0x6b8>)
     87a:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     87c:	2208      	movs	r2, #8
     87e:	4943      	ldr	r1, [pc, #268]	; (98c <ssd1963_init+0x6bc>)
     880:	4843      	ldr	r0, [pc, #268]	; (990 <ssd1963_init+0x6c0>)
     882:	4b44      	ldr	r3, [pc, #272]	; (994 <ssd1963_init+0x6c4>)
     884:	4798      	blx	r3
     886:	4b3f      	ldr	r3, [pc, #252]	; (984 <ssd1963_init+0x6b4>)
     888:	2240      	movs	r2, #64	; 0x40
     88a:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     88c:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     88e:	4b3e      	ldr	r3, [pc, #248]	; (988 <ssd1963_init+0x6b8>)
     890:	781b      	ldrb	r3, [r3, #0]
     892:	b923      	cbnz	r3, 89e <ssd1963_init+0x5ce>
     894:	4b3b      	ldr	r3, [pc, #236]	; (984 <ssd1963_init+0x6b4>)
     896:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     898:	2201      	movs	r2, #1
     89a:	4b3b      	ldr	r3, [pc, #236]	; (988 <ssd1963_init+0x6b8>)
     89c:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     89e:	22b8      	movs	r2, #184	; 0xb8
     8a0:	493a      	ldr	r1, [pc, #232]	; (98c <ssd1963_init+0x6bc>)
     8a2:	483b      	ldr	r0, [pc, #236]	; (990 <ssd1963_init+0x6c0>)
     8a4:	4b3b      	ldr	r3, [pc, #236]	; (994 <ssd1963_init+0x6c4>)
     8a6:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     8a8:	4b36      	ldr	r3, [pc, #216]	; (984 <ssd1963_init+0x6b4>)
     8aa:	2240      	movs	r2, #64	; 0x40
     8ac:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8ae:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     8b0:	4b35      	ldr	r3, [pc, #212]	; (988 <ssd1963_init+0x6b8>)
     8b2:	781b      	ldrb	r3, [r3, #0]
     8b4:	b123      	cbz	r3, 8c0 <ssd1963_init+0x5f0>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     8b6:	4b33      	ldr	r3, [pc, #204]	; (984 <ssd1963_init+0x6b4>)
     8b8:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     8ba:	2200      	movs	r2, #0
     8bc:	4b32      	ldr	r3, [pc, #200]	; (988 <ssd1963_init+0x6b8>)
     8be:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     8c0:	220f      	movs	r2, #15
     8c2:	4932      	ldr	r1, [pc, #200]	; (98c <ssd1963_init+0x6bc>)
     8c4:	4832      	ldr	r0, [pc, #200]	; (990 <ssd1963_init+0x6c0>)
     8c6:	4b33      	ldr	r3, [pc, #204]	; (994 <ssd1963_init+0x6c4>)
     8c8:	4798      	blx	r3
     8ca:	4b2e      	ldr	r3, [pc, #184]	; (984 <ssd1963_init+0x6b4>)
     8cc:	2240      	movs	r2, #64	; 0x40
     8ce:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8d0:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     8d2:	4b2d      	ldr	r3, [pc, #180]	; (988 <ssd1963_init+0x6b8>)
     8d4:	781b      	ldrb	r3, [r3, #0]
     8d6:	b123      	cbz	r3, 8e2 <ssd1963_init+0x612>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     8d8:	4b2a      	ldr	r3, [pc, #168]	; (984 <ssd1963_init+0x6b4>)
     8da:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     8dc:	2200      	movs	r2, #0
     8de:	4b2a      	ldr	r3, [pc, #168]	; (988 <ssd1963_init+0x6b8>)
     8e0:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     8e2:	2201      	movs	r2, #1
     8e4:	4929      	ldr	r1, [pc, #164]	; (98c <ssd1963_init+0x6bc>)
     8e6:	482a      	ldr	r0, [pc, #168]	; (990 <ssd1963_init+0x6c0>)
     8e8:	4b2a      	ldr	r3, [pc, #168]	; (994 <ssd1963_init+0x6c4>)
     8ea:	4798      	blx	r3
     8ec:	4b25      	ldr	r3, [pc, #148]	; (984 <ssd1963_init+0x6b4>)
     8ee:	2240      	movs	r2, #64	; 0x40
     8f0:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8f2:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     8f4:	4b24      	ldr	r3, [pc, #144]	; (988 <ssd1963_init+0x6b8>)
     8f6:	781b      	ldrb	r3, [r3, #0]
     8f8:	b923      	cbnz	r3, 904 <ssd1963_init+0x634>
     8fa:	4b22      	ldr	r3, [pc, #136]	; (984 <ssd1963_init+0x6b4>)
     8fc:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     8fe:	2201      	movs	r2, #1
     900:	4b21      	ldr	r3, [pc, #132]	; (988 <ssd1963_init+0x6b8>)
     902:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     904:	22ba      	movs	r2, #186	; 0xba
     906:	4921      	ldr	r1, [pc, #132]	; (98c <ssd1963_init+0x6bc>)
     908:	4821      	ldr	r0, [pc, #132]	; (990 <ssd1963_init+0x6c0>)
     90a:	4b22      	ldr	r3, [pc, #136]	; (994 <ssd1963_init+0x6c4>)
     90c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     90e:	4b1d      	ldr	r3, [pc, #116]	; (984 <ssd1963_init+0x6b4>)
     910:	2240      	movs	r2, #64	; 0x40
     912:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     914:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     916:	4b1c      	ldr	r3, [pc, #112]	; (988 <ssd1963_init+0x6b8>)
     918:	781b      	ldrb	r3, [r3, #0]
     91a:	b123      	cbz	r3, 926 <ssd1963_init+0x656>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     91c:	4b19      	ldr	r3, [pc, #100]	; (984 <ssd1963_init+0x6b4>)
     91e:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     920:	2200      	movs	r2, #0
     922:	4b19      	ldr	r3, [pc, #100]	; (988 <ssd1963_init+0x6b8>)
     924:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     926:	2201      	movs	r2, #1
     928:	4918      	ldr	r1, [pc, #96]	; (98c <ssd1963_init+0x6bc>)
     92a:	4819      	ldr	r0, [pc, #100]	; (990 <ssd1963_init+0x6c0>)
     92c:	4b19      	ldr	r3, [pc, #100]	; (994 <ssd1963_init+0x6c4>)
     92e:	4798      	blx	r3
     930:	4b14      	ldr	r3, [pc, #80]	; (984 <ssd1963_init+0x6b4>)
     932:	2240      	movs	r2, #64	; 0x40
     934:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     936:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     938:	4b13      	ldr	r3, [pc, #76]	; (988 <ssd1963_init+0x6b8>)
     93a:	781b      	ldrb	r3, [r3, #0]
     93c:	b923      	cbnz	r3, 948 <ssd1963_init+0x678>
     93e:	4b11      	ldr	r3, [pc, #68]	; (984 <ssd1963_init+0x6b4>)
     940:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     942:	2201      	movs	r2, #1
     944:	4b10      	ldr	r3, [pc, #64]	; (988 <ssd1963_init+0x6b8>)
     946:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     948:	2236      	movs	r2, #54	; 0x36
     94a:	4910      	ldr	r1, [pc, #64]	; (98c <ssd1963_init+0x6bc>)
     94c:	4810      	ldr	r0, [pc, #64]	; (990 <ssd1963_init+0x6c0>)
     94e:	4b11      	ldr	r3, [pc, #68]	; (994 <ssd1963_init+0x6c4>)
     950:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     952:	4b0c      	ldr	r3, [pc, #48]	; (984 <ssd1963_init+0x6b4>)
     954:	2240      	movs	r2, #64	; 0x40
     956:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     958:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     95a:	4b0b      	ldr	r3, [pc, #44]	; (988 <ssd1963_init+0x6b8>)
     95c:	781b      	ldrb	r3, [r3, #0]
     95e:	b123      	cbz	r3, 96a <ssd1963_init+0x69a>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     960:	4b08      	ldr	r3, [pc, #32]	; (984 <ssd1963_init+0x6b4>)
     962:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     964:	2200      	movs	r2, #0
     966:	4b08      	ldr	r3, [pc, #32]	; (988 <ssd1963_init+0x6b8>)
     968:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     96a:	2208      	movs	r2, #8
     96c:	4907      	ldr	r1, [pc, #28]	; (98c <ssd1963_init+0x6bc>)
     96e:	4808      	ldr	r0, [pc, #32]	; (990 <ssd1963_init+0x6c0>)
     970:	4b08      	ldr	r3, [pc, #32]	; (994 <ssd1963_init+0x6c4>)
     972:	4798      	blx	r3
     974:	4b03      	ldr	r3, [pc, #12]	; (984 <ssd1963_init+0x6b4>)
     976:	2240      	movs	r2, #64	; 0x40
     978:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     97a:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     97c:	4b02      	ldr	r3, [pc, #8]	; (988 <ssd1963_init+0x6b8>)
     97e:	781b      	ldrb	r3, [r3, #0]
     980:	e00a      	b.n	998 <ssd1963_init+0x6c8>
     982:	bf00      	nop
     984:	41008000 	.word	0x41008000
     988:	20000000 	.word	0x20000000
     98c:	1c03c3f7 	.word	0x1c03c3f7
     990:	41008080 	.word	0x41008080
     994:	00000fb1 	.word	0x00000fb1
     998:	b923      	cbnz	r3, 9a4 <ssd1963_init+0x6d4>
     99a:	4b88      	ldr	r3, [pc, #544]	; (bbc <ssd1963_init+0x8ec>)
     99c:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     99e:	2201      	movs	r2, #1
     9a0:	4b87      	ldr	r3, [pc, #540]	; (bc0 <ssd1963_init+0x8f0>)
     9a2:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     9a4:	223a      	movs	r2, #58	; 0x3a
     9a6:	4987      	ldr	r1, [pc, #540]	; (bc4 <ssd1963_init+0x8f4>)
     9a8:	4887      	ldr	r0, [pc, #540]	; (bc8 <ssd1963_init+0x8f8>)
     9aa:	4b88      	ldr	r3, [pc, #544]	; (bcc <ssd1963_init+0x8fc>)
     9ac:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     9ae:	4b83      	ldr	r3, [pc, #524]	; (bbc <ssd1963_init+0x8ec>)
     9b0:	2240      	movs	r2, #64	; 0x40
     9b2:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9b4:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     9b6:	4b82      	ldr	r3, [pc, #520]	; (bc0 <ssd1963_init+0x8f0>)
     9b8:	781b      	ldrb	r3, [r3, #0]
     9ba:	b123      	cbz	r3, 9c6 <ssd1963_init+0x6f6>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     9bc:	4b7f      	ldr	r3, [pc, #508]	; (bbc <ssd1963_init+0x8ec>)
     9be:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     9c0:	2200      	movs	r2, #0
     9c2:	4b7f      	ldr	r3, [pc, #508]	; (bc0 <ssd1963_init+0x8f0>)
     9c4:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     9c6:	2250      	movs	r2, #80	; 0x50
     9c8:	497e      	ldr	r1, [pc, #504]	; (bc4 <ssd1963_init+0x8f4>)
     9ca:	487f      	ldr	r0, [pc, #508]	; (bc8 <ssd1963_init+0x8f8>)
     9cc:	4b7f      	ldr	r3, [pc, #508]	; (bcc <ssd1963_init+0x8fc>)
     9ce:	4798      	blx	r3
     9d0:	4b7a      	ldr	r3, [pc, #488]	; (bbc <ssd1963_init+0x8ec>)
     9d2:	2240      	movs	r2, #64	; 0x40
     9d4:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9d6:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     9d8:	4b79      	ldr	r3, [pc, #484]	; (bc0 <ssd1963_init+0x8f0>)
     9da:	781b      	ldrb	r3, [r3, #0]
     9dc:	b923      	cbnz	r3, 9e8 <ssd1963_init+0x718>
     9de:	4b77      	ldr	r3, [pc, #476]	; (bbc <ssd1963_init+0x8ec>)
     9e0:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     9e2:	2201      	movs	r2, #1
     9e4:	4b76      	ldr	r3, [pc, #472]	; (bc0 <ssd1963_init+0x8f0>)
     9e6:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     9e8:	22f0      	movs	r2, #240	; 0xf0
     9ea:	4976      	ldr	r1, [pc, #472]	; (bc4 <ssd1963_init+0x8f4>)
     9ec:	4876      	ldr	r0, [pc, #472]	; (bc8 <ssd1963_init+0x8f8>)
     9ee:	4b77      	ldr	r3, [pc, #476]	; (bcc <ssd1963_init+0x8fc>)
     9f0:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     9f2:	4b72      	ldr	r3, [pc, #456]	; (bbc <ssd1963_init+0x8ec>)
     9f4:	2240      	movs	r2, #64	; 0x40
     9f6:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9f8:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     9fa:	4b71      	ldr	r3, [pc, #452]	; (bc0 <ssd1963_init+0x8f0>)
     9fc:	781b      	ldrb	r3, [r3, #0]
     9fe:	b123      	cbz	r3, a0a <ssd1963_init+0x73a>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a00:	4b6e      	ldr	r3, [pc, #440]	; (bbc <ssd1963_init+0x8ec>)
     a02:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     a04:	2200      	movs	r2, #0
     a06:	4b6e      	ldr	r3, [pc, #440]	; (bc0 <ssd1963_init+0x8f0>)
     a08:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     a0a:	2203      	movs	r2, #3
     a0c:	496d      	ldr	r1, [pc, #436]	; (bc4 <ssd1963_init+0x8f4>)
     a0e:	486e      	ldr	r0, [pc, #440]	; (bc8 <ssd1963_init+0x8f8>)
     a10:	4b6e      	ldr	r3, [pc, #440]	; (bcc <ssd1963_init+0x8fc>)
     a12:	4798      	blx	r3
     a14:	4b69      	ldr	r3, [pc, #420]	; (bbc <ssd1963_init+0x8ec>)
     a16:	2240      	movs	r2, #64	; 0x40
     a18:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a1a:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     a1c:	4b68      	ldr	r3, [pc, #416]	; (bc0 <ssd1963_init+0x8f0>)
     a1e:	781b      	ldrb	r3, [r3, #0]
     a20:	b923      	cbnz	r3, a2c <ssd1963_init+0x75c>
     a22:	4b66      	ldr	r3, [pc, #408]	; (bbc <ssd1963_init+0x8ec>)
     a24:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     a26:	2201      	movs	r2, #1
     a28:	4b65      	ldr	r3, [pc, #404]	; (bc0 <ssd1963_init+0x8f0>)
     a2a:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     a2c:	22bc      	movs	r2, #188	; 0xbc
     a2e:	4965      	ldr	r1, [pc, #404]	; (bc4 <ssd1963_init+0x8f4>)
     a30:	4865      	ldr	r0, [pc, #404]	; (bc8 <ssd1963_init+0x8f8>)
     a32:	4b66      	ldr	r3, [pc, #408]	; (bcc <ssd1963_init+0x8fc>)
     a34:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a36:	4b61      	ldr	r3, [pc, #388]	; (bbc <ssd1963_init+0x8ec>)
     a38:	2240      	movs	r2, #64	; 0x40
     a3a:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a3c:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     a3e:	4b60      	ldr	r3, [pc, #384]	; (bc0 <ssd1963_init+0x8f0>)
     a40:	781b      	ldrb	r3, [r3, #0]
     a42:	b123      	cbz	r3, a4e <ssd1963_init+0x77e>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a44:	4b5d      	ldr	r3, [pc, #372]	; (bbc <ssd1963_init+0x8ec>)
     a46:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     a48:	2200      	movs	r2, #0
     a4a:	4b5d      	ldr	r3, [pc, #372]	; (bc0 <ssd1963_init+0x8f0>)
     a4c:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     a4e:	2240      	movs	r2, #64	; 0x40
     a50:	495c      	ldr	r1, [pc, #368]	; (bc4 <ssd1963_init+0x8f4>)
     a52:	485d      	ldr	r0, [pc, #372]	; (bc8 <ssd1963_init+0x8f8>)
     a54:	4b5d      	ldr	r3, [pc, #372]	; (bcc <ssd1963_init+0x8fc>)
     a56:	4798      	blx	r3
     a58:	4b58      	ldr	r3, [pc, #352]	; (bbc <ssd1963_init+0x8ec>)
     a5a:	2240      	movs	r2, #64	; 0x40
     a5c:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a5e:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     a60:	4b57      	ldr	r3, [pc, #348]	; (bc0 <ssd1963_init+0x8f0>)
     a62:	781b      	ldrb	r3, [r3, #0]
     a64:	b123      	cbz	r3, a70 <ssd1963_init+0x7a0>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a66:	4b55      	ldr	r3, [pc, #340]	; (bbc <ssd1963_init+0x8ec>)
     a68:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     a6a:	2200      	movs	r2, #0
     a6c:	4b54      	ldr	r3, [pc, #336]	; (bc0 <ssd1963_init+0x8f0>)
     a6e:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     a70:	2280      	movs	r2, #128	; 0x80
     a72:	4954      	ldr	r1, [pc, #336]	; (bc4 <ssd1963_init+0x8f4>)
     a74:	4854      	ldr	r0, [pc, #336]	; (bc8 <ssd1963_init+0x8f8>)
     a76:	4b55      	ldr	r3, [pc, #340]	; (bcc <ssd1963_init+0x8fc>)
     a78:	4798      	blx	r3
     a7a:	4b50      	ldr	r3, [pc, #320]	; (bbc <ssd1963_init+0x8ec>)
     a7c:	2240      	movs	r2, #64	; 0x40
     a7e:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a80:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     a82:	4b4f      	ldr	r3, [pc, #316]	; (bc0 <ssd1963_init+0x8f0>)
     a84:	781b      	ldrb	r3, [r3, #0]
     a86:	b123      	cbz	r3, a92 <ssd1963_init+0x7c2>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a88:	4b4c      	ldr	r3, [pc, #304]	; (bbc <ssd1963_init+0x8ec>)
     a8a:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     a8c:	2200      	movs	r2, #0
     a8e:	4b4c      	ldr	r3, [pc, #304]	; (bc0 <ssd1963_init+0x8f0>)
     a90:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     a92:	2240      	movs	r2, #64	; 0x40
     a94:	494b      	ldr	r1, [pc, #300]	; (bc4 <ssd1963_init+0x8f4>)
     a96:	484c      	ldr	r0, [pc, #304]	; (bc8 <ssd1963_init+0x8f8>)
     a98:	4b4c      	ldr	r3, [pc, #304]	; (bcc <ssd1963_init+0x8fc>)
     a9a:	4798      	blx	r3
     a9c:	4b47      	ldr	r3, [pc, #284]	; (bbc <ssd1963_init+0x8ec>)
     a9e:	2240      	movs	r2, #64	; 0x40
     aa0:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     aa2:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     aa4:	4b46      	ldr	r3, [pc, #280]	; (bc0 <ssd1963_init+0x8f0>)
     aa6:	781b      	ldrb	r3, [r3, #0]
     aa8:	b123      	cbz	r3, ab4 <ssd1963_init+0x7e4>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     aaa:	4b44      	ldr	r3, [pc, #272]	; (bbc <ssd1963_init+0x8ec>)
     aac:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     aae:	2200      	movs	r2, #0
     ab0:	4b43      	ldr	r3, [pc, #268]	; (bc0 <ssd1963_init+0x8f0>)
     ab2:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     ab4:	2201      	movs	r2, #1
     ab6:	4943      	ldr	r1, [pc, #268]	; (bc4 <ssd1963_init+0x8f4>)
     ab8:	4843      	ldr	r0, [pc, #268]	; (bc8 <ssd1963_init+0x8f8>)
     aba:	4b44      	ldr	r3, [pc, #272]	; (bcc <ssd1963_init+0x8fc>)
     abc:	4798      	blx	r3
     abe:	4c3f      	ldr	r4, [pc, #252]	; (bbc <ssd1963_init+0x8ec>)
     ac0:	2540      	movs	r5, #64	; 0x40
     ac2:	61a5      	str	r5, [r4, #24]
    LV_DRV_DELAY_MS(1);
     ac4:	2001      	movs	r0, #1
     ac6:	4b42      	ldr	r3, [pc, #264]	; (bd0 <ssd1963_init+0x900>)
     ac8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     aca:	6165      	str	r5, [r4, #20]
    if(cmd_mode == false) {
     acc:	4b3c      	ldr	r3, [pc, #240]	; (bc0 <ssd1963_init+0x8f0>)
     ace:	781b      	ldrb	r3, [r3, #0]
     ad0:	b923      	cbnz	r3, adc <ssd1963_init+0x80c>
     ad2:	4623      	mov	r3, r4
     ad4:	615d      	str	r5, [r3, #20]
        cmd_mode = true;
     ad6:	2201      	movs	r2, #1
     ad8:	4b39      	ldr	r3, [pc, #228]	; (bc0 <ssd1963_init+0x8f0>)
     ada:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     adc:	2229      	movs	r2, #41	; 0x29
     ade:	4939      	ldr	r1, [pc, #228]	; (bc4 <ssd1963_init+0x8f4>)
     ae0:	4839      	ldr	r0, [pc, #228]	; (bc8 <ssd1963_init+0x8f8>)
     ae2:	4b3a      	ldr	r3, [pc, #232]	; (bcc <ssd1963_init+0x8fc>)
     ae4:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     ae6:	4b35      	ldr	r3, [pc, #212]	; (bbc <ssd1963_init+0x8ec>)
     ae8:	2240      	movs	r2, #64	; 0x40
     aea:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     aec:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     aee:	4b34      	ldr	r3, [pc, #208]	; (bc0 <ssd1963_init+0x8f0>)
     af0:	781b      	ldrb	r3, [r3, #0]
     af2:	b923      	cbnz	r3, afe <ssd1963_init+0x82e>
     af4:	4b31      	ldr	r3, [pc, #196]	; (bbc <ssd1963_init+0x8ec>)
     af6:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     af8:	2201      	movs	r2, #1
     afa:	4b31      	ldr	r3, [pc, #196]	; (bc0 <ssd1963_init+0x8f0>)
     afc:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     afe:	22be      	movs	r2, #190	; 0xbe
     b00:	4930      	ldr	r1, [pc, #192]	; (bc4 <ssd1963_init+0x8f4>)
     b02:	4831      	ldr	r0, [pc, #196]	; (bc8 <ssd1963_init+0x8f8>)
     b04:	4b31      	ldr	r3, [pc, #196]	; (bcc <ssd1963_init+0x8fc>)
     b06:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b08:	4b2c      	ldr	r3, [pc, #176]	; (bbc <ssd1963_init+0x8ec>)
     b0a:	2240      	movs	r2, #64	; 0x40
     b0c:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b0e:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     b10:	4b2b      	ldr	r3, [pc, #172]	; (bc0 <ssd1963_init+0x8f0>)
     b12:	781b      	ldrb	r3, [r3, #0]
     b14:	b123      	cbz	r3, b20 <ssd1963_init+0x850>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b16:	4b29      	ldr	r3, [pc, #164]	; (bbc <ssd1963_init+0x8ec>)
     b18:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     b1a:	2200      	movs	r2, #0
     b1c:	4b28      	ldr	r3, [pc, #160]	; (bc0 <ssd1963_init+0x8f0>)
     b1e:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     b20:	2206      	movs	r2, #6
     b22:	4928      	ldr	r1, [pc, #160]	; (bc4 <ssd1963_init+0x8f4>)
     b24:	4828      	ldr	r0, [pc, #160]	; (bc8 <ssd1963_init+0x8f8>)
     b26:	4b29      	ldr	r3, [pc, #164]	; (bcc <ssd1963_init+0x8fc>)
     b28:	4798      	blx	r3
     b2a:	4b24      	ldr	r3, [pc, #144]	; (bbc <ssd1963_init+0x8ec>)
     b2c:	2240      	movs	r2, #64	; 0x40
     b2e:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b30:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     b32:	4b23      	ldr	r3, [pc, #140]	; (bc0 <ssd1963_init+0x8f0>)
     b34:	781b      	ldrb	r3, [r3, #0]
     b36:	b123      	cbz	r3, b42 <ssd1963_init+0x872>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b38:	4b20      	ldr	r3, [pc, #128]	; (bbc <ssd1963_init+0x8ec>)
     b3a:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     b3c:	2200      	movs	r2, #0
     b3e:	4b20      	ldr	r3, [pc, #128]	; (bc0 <ssd1963_init+0x8f0>)
     b40:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     b42:	2280      	movs	r2, #128	; 0x80
     b44:	491f      	ldr	r1, [pc, #124]	; (bc4 <ssd1963_init+0x8f4>)
     b46:	4820      	ldr	r0, [pc, #128]	; (bc8 <ssd1963_init+0x8f8>)
     b48:	4b20      	ldr	r3, [pc, #128]	; (bcc <ssd1963_init+0x8fc>)
     b4a:	4798      	blx	r3
     b4c:	4b1b      	ldr	r3, [pc, #108]	; (bbc <ssd1963_init+0x8ec>)
     b4e:	2240      	movs	r2, #64	; 0x40
     b50:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b52:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     b54:	4b1a      	ldr	r3, [pc, #104]	; (bc0 <ssd1963_init+0x8f0>)
     b56:	781b      	ldrb	r3, [r3, #0]
     b58:	b123      	cbz	r3, b64 <ssd1963_init+0x894>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b5a:	4b18      	ldr	r3, [pc, #96]	; (bbc <ssd1963_init+0x8ec>)
     b5c:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     b5e:	2200      	movs	r2, #0
     b60:	4b17      	ldr	r3, [pc, #92]	; (bc0 <ssd1963_init+0x8f0>)
     b62:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     b64:	2201      	movs	r2, #1
     b66:	4917      	ldr	r1, [pc, #92]	; (bc4 <ssd1963_init+0x8f4>)
     b68:	4817      	ldr	r0, [pc, #92]	; (bc8 <ssd1963_init+0x8f8>)
     b6a:	4b18      	ldr	r3, [pc, #96]	; (bcc <ssd1963_init+0x8fc>)
     b6c:	4798      	blx	r3
     b6e:	4b13      	ldr	r3, [pc, #76]	; (bbc <ssd1963_init+0x8ec>)
     b70:	2240      	movs	r2, #64	; 0x40
     b72:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b74:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     b76:	4b12      	ldr	r3, [pc, #72]	; (bc0 <ssd1963_init+0x8f0>)
     b78:	781b      	ldrb	r3, [r3, #0]
     b7a:	b123      	cbz	r3, b86 <ssd1963_init+0x8b6>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b7c:	4b0f      	ldr	r3, [pc, #60]	; (bbc <ssd1963_init+0x8ec>)
     b7e:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     b80:	2200      	movs	r2, #0
     b82:	4b0f      	ldr	r3, [pc, #60]	; (bc0 <ssd1963_init+0x8f0>)
     b84:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     b86:	22f0      	movs	r2, #240	; 0xf0
     b88:	490e      	ldr	r1, [pc, #56]	; (bc4 <ssd1963_init+0x8f4>)
     b8a:	480f      	ldr	r0, [pc, #60]	; (bc8 <ssd1963_init+0x8f8>)
     b8c:	4b0f      	ldr	r3, [pc, #60]	; (bcc <ssd1963_init+0x8fc>)
     b8e:	4798      	blx	r3
     b90:	4b0a      	ldr	r3, [pc, #40]	; (bbc <ssd1963_init+0x8ec>)
     b92:	2240      	movs	r2, #64	; 0x40
     b94:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b96:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     b98:	4b09      	ldr	r3, [pc, #36]	; (bc0 <ssd1963_init+0x8f0>)
     b9a:	781b      	ldrb	r3, [r3, #0]
     b9c:	b123      	cbz	r3, ba8 <ssd1963_init+0x8d8>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b9e:	4b07      	ldr	r3, [pc, #28]	; (bbc <ssd1963_init+0x8ec>)
     ba0:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     ba2:	2200      	movs	r2, #0
     ba4:	4b06      	ldr	r3, [pc, #24]	; (bc0 <ssd1963_init+0x8f0>)
     ba6:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     ba8:	2200      	movs	r2, #0
     baa:	4906      	ldr	r1, [pc, #24]	; (bc4 <ssd1963_init+0x8f4>)
     bac:	4806      	ldr	r0, [pc, #24]	; (bc8 <ssd1963_init+0x8f8>)
     bae:	4b07      	ldr	r3, [pc, #28]	; (bcc <ssd1963_init+0x8fc>)
     bb0:	4798      	blx	r3
     bb2:	4b02      	ldr	r3, [pc, #8]	; (bbc <ssd1963_init+0x8ec>)
     bb4:	2240      	movs	r2, #64	; 0x40
     bb6:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     bb8:	615a      	str	r2, [r3, #20]
     bba:	e00b      	b.n	bd4 <ssd1963_init+0x904>
     bbc:	41008000 	.word	0x41008000
     bc0:	20000000 	.word	0x20000000
     bc4:	1c03c3f7 	.word	0x1c03c3f7
     bc8:	41008080 	.word	0x41008080
     bcc:	00000fb1 	.word	0x00000fb1
     bd0:	00001535 	.word	0x00001535
    if(cmd_mode != false) {
     bd4:	4b1a      	ldr	r3, [pc, #104]	; (c40 <ssd1963_init+0x970>)
     bd6:	781b      	ldrb	r3, [r3, #0]
     bd8:	b123      	cbz	r3, be4 <ssd1963_init+0x914>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     bda:	4b1a      	ldr	r3, [pc, #104]	; (c44 <ssd1963_init+0x974>)
     bdc:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     bde:	2200      	movs	r2, #0
     be0:	4b17      	ldr	r3, [pc, #92]	; (c40 <ssd1963_init+0x970>)
     be2:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     be4:	2200      	movs	r2, #0
     be6:	4918      	ldr	r1, [pc, #96]	; (c48 <ssd1963_init+0x978>)
     be8:	4818      	ldr	r0, [pc, #96]	; (c4c <ssd1963_init+0x97c>)
     bea:	4b19      	ldr	r3, [pc, #100]	; (c50 <ssd1963_init+0x980>)
     bec:	4798      	blx	r3
     bee:	4b15      	ldr	r3, [pc, #84]	; (c44 <ssd1963_init+0x974>)
     bf0:	2240      	movs	r2, #64	; 0x40
     bf2:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     bf4:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     bf6:	4b12      	ldr	r3, [pc, #72]	; (c40 <ssd1963_init+0x970>)
     bf8:	781b      	ldrb	r3, [r3, #0]
     bfa:	b923      	cbnz	r3, c06 <ssd1963_init+0x936>
     bfc:	4b11      	ldr	r3, [pc, #68]	; (c44 <ssd1963_init+0x974>)
     bfe:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     c00:	2201      	movs	r2, #1
     c02:	4b0f      	ldr	r3, [pc, #60]	; (c40 <ssd1963_init+0x970>)
     c04:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     c06:	22d0      	movs	r2, #208	; 0xd0
     c08:	490f      	ldr	r1, [pc, #60]	; (c48 <ssd1963_init+0x978>)
     c0a:	4810      	ldr	r0, [pc, #64]	; (c4c <ssd1963_init+0x97c>)
     c0c:	4b10      	ldr	r3, [pc, #64]	; (c50 <ssd1963_init+0x980>)
     c0e:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     c10:	4b0c      	ldr	r3, [pc, #48]	; (c44 <ssd1963_init+0x974>)
     c12:	2240      	movs	r2, #64	; 0x40
     c14:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c16:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     c18:	4b09      	ldr	r3, [pc, #36]	; (c40 <ssd1963_init+0x970>)
     c1a:	781b      	ldrb	r3, [r3, #0]
     c1c:	b123      	cbz	r3, c28 <ssd1963_init+0x958>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     c1e:	4b09      	ldr	r3, [pc, #36]	; (c44 <ssd1963_init+0x974>)
     c20:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     c22:	2200      	movs	r2, #0
     c24:	4b06      	ldr	r3, [pc, #24]	; (c40 <ssd1963_init+0x970>)
     c26:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     c28:	220d      	movs	r2, #13
     c2a:	4907      	ldr	r1, [pc, #28]	; (c48 <ssd1963_init+0x978>)
     c2c:	4807      	ldr	r0, [pc, #28]	; (c4c <ssd1963_init+0x97c>)
     c2e:	4b08      	ldr	r3, [pc, #32]	; (c50 <ssd1963_init+0x980>)
     c30:	4798      	blx	r3
     c32:	2240      	movs	r2, #64	; 0x40
     c34:	4b03      	ldr	r3, [pc, #12]	; (c44 <ssd1963_init+0x974>)
     c36:	619a      	str	r2, [r3, #24]
    LV_DRV_DELAY_MS(30);
     c38:	201e      	movs	r0, #30
     c3a:	4b06      	ldr	r3, [pc, #24]	; (c54 <ssd1963_init+0x984>)
     c3c:	4798      	blx	r3
     c3e:	bd70      	pop	{r4, r5, r6, pc}
     c40:	20000000 	.word	0x20000000
     c44:	41008000 	.word	0x41008000
     c48:	1c03c3f7 	.word	0x1c03c3f7
     c4c:	41008080 	.word	0x41008080
     c50:	00000fb1 	.word	0x00000fb1
     c54:	00001535 	.word	0x00001535

00000c58 <ssd1963_flush>:
{
     c58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(area->x2 < 0) return;
     c5c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
     c60:	2b00      	cmp	r3, #0
     c62:	db0f      	blt.n	c84 <ssd1963_flush+0x2c>
     c64:	4681      	mov	r9, r0
     c66:	468a      	mov	sl, r1
     c68:	4615      	mov	r5, r2
    if(area->y2 < 0) return;
     c6a:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
     c6e:	2b00      	cmp	r3, #0
     c70:	db08      	blt.n	c84 <ssd1963_flush+0x2c>
    if(area->x1 > SSD1963_HOR_RES - 1) return;
     c72:	f9b1 4000 	ldrsh.w	r4, [r1]
     c76:	4b93      	ldr	r3, [pc, #588]	; (ec4 <ssd1963_flush+0x26c>)
     c78:	4798      	blx	r3
     c7a:	4b93      	ldr	r3, [pc, #588]	; (ec8 <ssd1963_flush+0x270>)
     c7c:	4798      	blx	r3
     c7e:	3801      	subs	r0, #1
     c80:	4284      	cmp	r4, r0
     c82:	dd01      	ble.n	c88 <ssd1963_flush+0x30>
     c84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(area->y1 > SSD1963_VER_RES - 1) return;
     c88:	f9ba 4002 	ldrsh.w	r4, [sl, #2]
     c8c:	4b8d      	ldr	r3, [pc, #564]	; (ec4 <ssd1963_flush+0x26c>)
     c8e:	4798      	blx	r3
     c90:	4b8e      	ldr	r3, [pc, #568]	; (ecc <ssd1963_flush+0x274>)
     c92:	4798      	blx	r3
     c94:	3801      	subs	r0, #1
     c96:	4284      	cmp	r4, r0
     c98:	dcf4      	bgt.n	c84 <ssd1963_flush+0x2c>
    int32_t act_x1 = area->x1 < 0 ? 0 : area->x1;
     c9a:	f9ba 6000 	ldrsh.w	r6, [sl]
     c9e:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    int32_t act_y1 = area->y1 < 0 ? 0 : area->y1;
     ca2:	f9ba 4002 	ldrsh.w	r4, [sl, #2]
     ca6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
     caa:	46a3      	mov	fp, r4
    int32_t act_x2 = area->x2 > SSD1963_HOR_RES - 1 ? SSD1963_HOR_RES - 1 : area->x2;
     cac:	f9ba 7004 	ldrsh.w	r7, [sl, #4]
     cb0:	4b84      	ldr	r3, [pc, #528]	; (ec4 <ssd1963_flush+0x26c>)
     cb2:	4798      	blx	r3
     cb4:	4b84      	ldr	r3, [pc, #528]	; (ec8 <ssd1963_flush+0x270>)
     cb6:	4798      	blx	r3
     cb8:	3801      	subs	r0, #1
     cba:	4287      	cmp	r7, r0
     cbc:	f300 8116 	bgt.w	eec <ssd1963_flush+0x294>
     cc0:	f9ba 7004 	ldrsh.w	r7, [sl, #4]
    int32_t act_y2 = area->y2 > SSD1963_VER_RES - 1 ? SSD1963_VER_RES - 1 : area->y2;
     cc4:	f9ba 8006 	ldrsh.w	r8, [sl, #6]
     cc8:	4b7e      	ldr	r3, [pc, #504]	; (ec4 <ssd1963_flush+0x26c>)
     cca:	4798      	blx	r3
     ccc:	4b7f      	ldr	r3, [pc, #508]	; (ecc <ssd1963_flush+0x274>)
     cce:	4798      	blx	r3
     cd0:	3801      	subs	r0, #1
     cd2:	4580      	cmp	r8, r0
     cd4:	f300 8110 	bgt.w	ef8 <ssd1963_flush+0x2a0>
     cd8:	f9ba 8006 	ldrsh.w	r8, [sl, #6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     cdc:	2240      	movs	r2, #64	; 0x40
     cde:	4b7c      	ldr	r3, [pc, #496]	; (ed0 <ssd1963_flush+0x278>)
     ce0:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     ce2:	4b7c      	ldr	r3, [pc, #496]	; (ed4 <ssd1963_flush+0x27c>)
     ce4:	781b      	ldrb	r3, [r3, #0]
     ce6:	b923      	cbnz	r3, cf2 <ssd1963_flush+0x9a>
     ce8:	4b79      	ldr	r3, [pc, #484]	; (ed0 <ssd1963_flush+0x278>)
     cea:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     cec:	2201      	movs	r2, #1
     cee:	4b79      	ldr	r3, [pc, #484]	; (ed4 <ssd1963_flush+0x27c>)
     cf0:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     cf2:	222a      	movs	r2, #42	; 0x2a
     cf4:	4978      	ldr	r1, [pc, #480]	; (ed8 <ssd1963_flush+0x280>)
     cf6:	4879      	ldr	r0, [pc, #484]	; (edc <ssd1963_flush+0x284>)
     cf8:	4b79      	ldr	r3, [pc, #484]	; (ee0 <ssd1963_flush+0x288>)
     cfa:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     cfc:	4b74      	ldr	r3, [pc, #464]	; (ed0 <ssd1963_flush+0x278>)
     cfe:	2140      	movs	r1, #64	; 0x40
     d00:	6199      	str	r1, [r3, #24]
    ssd1963_data(act_x1 >> 8);
     d02:	1232      	asrs	r2, r6, #8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d04:	6159      	str	r1, [r3, #20]
    if(cmd_mode != false) {
     d06:	4b73      	ldr	r3, [pc, #460]	; (ed4 <ssd1963_flush+0x27c>)
     d08:	781b      	ldrb	r3, [r3, #0]
     d0a:	b123      	cbz	r3, d16 <ssd1963_flush+0xbe>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d0c:	4b70      	ldr	r3, [pc, #448]	; (ed0 <ssd1963_flush+0x278>)
     d0e:	6199      	str	r1, [r3, #24]
        cmd_mode = false;
     d10:	2100      	movs	r1, #0
     d12:	4b70      	ldr	r3, [pc, #448]	; (ed4 <ssd1963_flush+0x27c>)
     d14:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     d16:	b2d2      	uxtb	r2, r2
     d18:	496f      	ldr	r1, [pc, #444]	; (ed8 <ssd1963_flush+0x280>)
     d1a:	4870      	ldr	r0, [pc, #448]	; (edc <ssd1963_flush+0x284>)
     d1c:	4b70      	ldr	r3, [pc, #448]	; (ee0 <ssd1963_flush+0x288>)
     d1e:	4798      	blx	r3
     d20:	4b6b      	ldr	r3, [pc, #428]	; (ed0 <ssd1963_flush+0x278>)
     d22:	2140      	movs	r1, #64	; 0x40
     d24:	6199      	str	r1, [r3, #24]
    ssd1963_data(0x00FF & act_x1);
     d26:	b2f2      	uxtb	r2, r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d28:	6159      	str	r1, [r3, #20]
    if(cmd_mode != false) {
     d2a:	4b6a      	ldr	r3, [pc, #424]	; (ed4 <ssd1963_flush+0x27c>)
     d2c:	781b      	ldrb	r3, [r3, #0]
     d2e:	b123      	cbz	r3, d3a <ssd1963_flush+0xe2>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d30:	4b67      	ldr	r3, [pc, #412]	; (ed0 <ssd1963_flush+0x278>)
     d32:	6199      	str	r1, [r3, #24]
        cmd_mode = false;
     d34:	2100      	movs	r1, #0
     d36:	4b67      	ldr	r3, [pc, #412]	; (ed4 <ssd1963_flush+0x27c>)
     d38:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     d3a:	4967      	ldr	r1, [pc, #412]	; (ed8 <ssd1963_flush+0x280>)
     d3c:	4867      	ldr	r0, [pc, #412]	; (edc <ssd1963_flush+0x284>)
     d3e:	4b68      	ldr	r3, [pc, #416]	; (ee0 <ssd1963_flush+0x288>)
     d40:	4798      	blx	r3
     d42:	4b63      	ldr	r3, [pc, #396]	; (ed0 <ssd1963_flush+0x278>)
     d44:	2140      	movs	r1, #64	; 0x40
     d46:	6199      	str	r1, [r3, #24]
    ssd1963_data(act_x2 >> 8);
     d48:	123a      	asrs	r2, r7, #8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d4a:	6159      	str	r1, [r3, #20]
    if(cmd_mode != false) {
     d4c:	4b61      	ldr	r3, [pc, #388]	; (ed4 <ssd1963_flush+0x27c>)
     d4e:	781b      	ldrb	r3, [r3, #0]
     d50:	b123      	cbz	r3, d5c <ssd1963_flush+0x104>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d52:	4b5f      	ldr	r3, [pc, #380]	; (ed0 <ssd1963_flush+0x278>)
     d54:	6199      	str	r1, [r3, #24]
        cmd_mode = false;
     d56:	2100      	movs	r1, #0
     d58:	4b5e      	ldr	r3, [pc, #376]	; (ed4 <ssd1963_flush+0x27c>)
     d5a:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     d5c:	b2d2      	uxtb	r2, r2
     d5e:	495e      	ldr	r1, [pc, #376]	; (ed8 <ssd1963_flush+0x280>)
     d60:	485e      	ldr	r0, [pc, #376]	; (edc <ssd1963_flush+0x284>)
     d62:	4b5f      	ldr	r3, [pc, #380]	; (ee0 <ssd1963_flush+0x288>)
     d64:	4798      	blx	r3
     d66:	4b5a      	ldr	r3, [pc, #360]	; (ed0 <ssd1963_flush+0x278>)
     d68:	2240      	movs	r2, #64	; 0x40
     d6a:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d6c:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     d6e:	4b59      	ldr	r3, [pc, #356]	; (ed4 <ssd1963_flush+0x27c>)
     d70:	781b      	ldrb	r3, [r3, #0]
     d72:	b123      	cbz	r3, d7e <ssd1963_flush+0x126>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d74:	4b56      	ldr	r3, [pc, #344]	; (ed0 <ssd1963_flush+0x278>)
     d76:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     d78:	2200      	movs	r2, #0
     d7a:	4b56      	ldr	r3, [pc, #344]	; (ed4 <ssd1963_flush+0x27c>)
     d7c:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     d7e:	b2fa      	uxtb	r2, r7
     d80:	4955      	ldr	r1, [pc, #340]	; (ed8 <ssd1963_flush+0x280>)
     d82:	4856      	ldr	r0, [pc, #344]	; (edc <ssd1963_flush+0x284>)
     d84:	4b56      	ldr	r3, [pc, #344]	; (ee0 <ssd1963_flush+0x288>)
     d86:	4798      	blx	r3
     d88:	4b51      	ldr	r3, [pc, #324]	; (ed0 <ssd1963_flush+0x278>)
     d8a:	2240      	movs	r2, #64	; 0x40
     d8c:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d8e:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     d90:	4b50      	ldr	r3, [pc, #320]	; (ed4 <ssd1963_flush+0x27c>)
     d92:	781b      	ldrb	r3, [r3, #0]
     d94:	b923      	cbnz	r3, da0 <ssd1963_flush+0x148>
     d96:	4b4e      	ldr	r3, [pc, #312]	; (ed0 <ssd1963_flush+0x278>)
     d98:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     d9a:	2201      	movs	r2, #1
     d9c:	4b4d      	ldr	r3, [pc, #308]	; (ed4 <ssd1963_flush+0x27c>)
     d9e:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     da0:	222b      	movs	r2, #43	; 0x2b
     da2:	494d      	ldr	r1, [pc, #308]	; (ed8 <ssd1963_flush+0x280>)
     da4:	484d      	ldr	r0, [pc, #308]	; (edc <ssd1963_flush+0x284>)
     da6:	4b4e      	ldr	r3, [pc, #312]	; (ee0 <ssd1963_flush+0x288>)
     da8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     daa:	4b49      	ldr	r3, [pc, #292]	; (ed0 <ssd1963_flush+0x278>)
     dac:	2140      	movs	r1, #64	; 0x40
     dae:	6199      	str	r1, [r3, #24]
    ssd1963_data(act_y1 >> 8);
     db0:	ea4f 222b 	mov.w	r2, fp, asr #8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     db4:	6159      	str	r1, [r3, #20]
    if(cmd_mode != false) {
     db6:	4b47      	ldr	r3, [pc, #284]	; (ed4 <ssd1963_flush+0x27c>)
     db8:	781b      	ldrb	r3, [r3, #0]
     dba:	b123      	cbz	r3, dc6 <ssd1963_flush+0x16e>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     dbc:	4b44      	ldr	r3, [pc, #272]	; (ed0 <ssd1963_flush+0x278>)
     dbe:	6199      	str	r1, [r3, #24]
        cmd_mode = false;
     dc0:	2100      	movs	r1, #0
     dc2:	4b44      	ldr	r3, [pc, #272]	; (ed4 <ssd1963_flush+0x27c>)
     dc4:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     dc6:	b2d2      	uxtb	r2, r2
     dc8:	4943      	ldr	r1, [pc, #268]	; (ed8 <ssd1963_flush+0x280>)
     dca:	4844      	ldr	r0, [pc, #272]	; (edc <ssd1963_flush+0x284>)
     dcc:	4b44      	ldr	r3, [pc, #272]	; (ee0 <ssd1963_flush+0x288>)
     dce:	4798      	blx	r3
     dd0:	4b3f      	ldr	r3, [pc, #252]	; (ed0 <ssd1963_flush+0x278>)
     dd2:	2140      	movs	r1, #64	; 0x40
     dd4:	6199      	str	r1, [r3, #24]
    ssd1963_data(0x00FF & act_y1);
     dd6:	b2e2      	uxtb	r2, r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     dd8:	6159      	str	r1, [r3, #20]
    if(cmd_mode != false) {
     dda:	4b3e      	ldr	r3, [pc, #248]	; (ed4 <ssd1963_flush+0x27c>)
     ddc:	781b      	ldrb	r3, [r3, #0]
     dde:	b123      	cbz	r3, dea <ssd1963_flush+0x192>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     de0:	4b3b      	ldr	r3, [pc, #236]	; (ed0 <ssd1963_flush+0x278>)
     de2:	6199      	str	r1, [r3, #24]
        cmd_mode = false;
     de4:	2100      	movs	r1, #0
     de6:	4b3b      	ldr	r3, [pc, #236]	; (ed4 <ssd1963_flush+0x27c>)
     de8:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     dea:	493b      	ldr	r1, [pc, #236]	; (ed8 <ssd1963_flush+0x280>)
     dec:	483b      	ldr	r0, [pc, #236]	; (edc <ssd1963_flush+0x284>)
     dee:	4b3c      	ldr	r3, [pc, #240]	; (ee0 <ssd1963_flush+0x288>)
     df0:	4798      	blx	r3
     df2:	4b37      	ldr	r3, [pc, #220]	; (ed0 <ssd1963_flush+0x278>)
     df4:	2140      	movs	r1, #64	; 0x40
     df6:	6199      	str	r1, [r3, #24]
    ssd1963_data(act_y2 >> 8);
     df8:	ea4f 2228 	mov.w	r2, r8, asr #8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     dfc:	6159      	str	r1, [r3, #20]
    if(cmd_mode != false) {
     dfe:	4b35      	ldr	r3, [pc, #212]	; (ed4 <ssd1963_flush+0x27c>)
     e00:	781b      	ldrb	r3, [r3, #0]
     e02:	b123      	cbz	r3, e0e <ssd1963_flush+0x1b6>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     e04:	4b32      	ldr	r3, [pc, #200]	; (ed0 <ssd1963_flush+0x278>)
     e06:	6199      	str	r1, [r3, #24]
        cmd_mode = false;
     e08:	2100      	movs	r1, #0
     e0a:	4b32      	ldr	r3, [pc, #200]	; (ed4 <ssd1963_flush+0x27c>)
     e0c:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     e0e:	b2d2      	uxtb	r2, r2
     e10:	4931      	ldr	r1, [pc, #196]	; (ed8 <ssd1963_flush+0x280>)
     e12:	4832      	ldr	r0, [pc, #200]	; (edc <ssd1963_flush+0x284>)
     e14:	4b32      	ldr	r3, [pc, #200]	; (ee0 <ssd1963_flush+0x288>)
     e16:	4798      	blx	r3
     e18:	4b2d      	ldr	r3, [pc, #180]	; (ed0 <ssd1963_flush+0x278>)
     e1a:	2240      	movs	r2, #64	; 0x40
     e1c:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e1e:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     e20:	4b2c      	ldr	r3, [pc, #176]	; (ed4 <ssd1963_flush+0x27c>)
     e22:	781b      	ldrb	r3, [r3, #0]
     e24:	b123      	cbz	r3, e30 <ssd1963_flush+0x1d8>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     e26:	4b2a      	ldr	r3, [pc, #168]	; (ed0 <ssd1963_flush+0x278>)
     e28:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     e2a:	2200      	movs	r2, #0
     e2c:	4b29      	ldr	r3, [pc, #164]	; (ed4 <ssd1963_flush+0x27c>)
     e2e:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     e30:	fa5f f288 	uxtb.w	r2, r8
     e34:	4928      	ldr	r1, [pc, #160]	; (ed8 <ssd1963_flush+0x280>)
     e36:	4829      	ldr	r0, [pc, #164]	; (edc <ssd1963_flush+0x284>)
     e38:	4b29      	ldr	r3, [pc, #164]	; (ee0 <ssd1963_flush+0x288>)
     e3a:	4798      	blx	r3
     e3c:	4b24      	ldr	r3, [pc, #144]	; (ed0 <ssd1963_flush+0x278>)
     e3e:	2240      	movs	r2, #64	; 0x40
     e40:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e42:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     e44:	4b23      	ldr	r3, [pc, #140]	; (ed4 <ssd1963_flush+0x27c>)
     e46:	781b      	ldrb	r3, [r3, #0]
     e48:	b923      	cbnz	r3, e54 <ssd1963_flush+0x1fc>
     e4a:	4b21      	ldr	r3, [pc, #132]	; (ed0 <ssd1963_flush+0x278>)
     e4c:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     e4e:	2201      	movs	r2, #1
     e50:	4b20      	ldr	r3, [pc, #128]	; (ed4 <ssd1963_flush+0x27c>)
     e52:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     e54:	222c      	movs	r2, #44	; 0x2c
     e56:	4920      	ldr	r1, [pc, #128]	; (ed8 <ssd1963_flush+0x280>)
     e58:	4820      	ldr	r0, [pc, #128]	; (edc <ssd1963_flush+0x284>)
     e5a:	4b21      	ldr	r3, [pc, #132]	; (ee0 <ssd1963_flush+0x288>)
     e5c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     e5e:	2240      	movs	r2, #64	; 0x40
     e60:	4b1b      	ldr	r3, [pc, #108]	; (ed0 <ssd1963_flush+0x278>)
     e62:	619a      	str	r2, [r3, #24]
    uint16_t full_w = area->x2 - area->x1 + 1;
     e64:	f8ba 3004 	ldrh.w	r3, [sl, #4]
     e68:	3301      	adds	r3, #1
     e6a:	f8ba 2000 	ldrh.w	r2, [sl]
     e6e:	1a9b      	subs	r3, r3, r2
     e70:	b29b      	uxth	r3, r3
    if(cmd_mode != false) {
     e72:	4a18      	ldr	r2, [pc, #96]	; (ed4 <ssd1963_flush+0x27c>)
     e74:	7812      	ldrb	r2, [r2, #0]
     e76:	b12a      	cbz	r2, e84 <ssd1963_flush+0x22c>
     e78:	2140      	movs	r1, #64	; 0x40
     e7a:	4a15      	ldr	r2, [pc, #84]	; (ed0 <ssd1963_flush+0x278>)
     e7c:	6191      	str	r1, [r2, #24]
        cmd_mode = false;
     e7e:	2100      	movs	r1, #0
     e80:	4a14      	ldr	r2, [pc, #80]	; (ed4 <ssd1963_flush+0x27c>)
     e82:	7011      	strb	r1, [r2, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e84:	2140      	movs	r1, #64	; 0x40
     e86:	4a12      	ldr	r2, [pc, #72]	; (ed0 <ssd1963_flush+0x278>)
     e88:	6151      	str	r1, [r2, #20]
    uint16_t act_w = act_x2 - act_x1 + 1;
     e8a:	f1c6 0601 	rsb	r6, r6, #1
     e8e:	443e      	add	r6, r7
     e90:	b2b6      	uxth	r6, r6
    for(i = act_y1; i <= act_y2; i++) {
     e92:	45d8      	cmp	r8, fp
     e94:	db0e      	blt.n	eb4 <ssd1963_flush+0x25c>
        color_p += full_w;
     e96:	005f      	lsls	r7, r3, #1
        LV_DRV_DISP_PAR_WR_ARRAY((uint16_t *)color_p, act_w);
     e98:	f8df b03c 	ldr.w	fp, [pc, #60]	; ed8 <ssd1963_flush+0x280>
     e9c:	f8df a048 	ldr.w	sl, [pc, #72]	; ee8 <ssd1963_flush+0x290>
     ea0:	4633      	mov	r3, r6
     ea2:	462a      	mov	r2, r5
     ea4:	4659      	mov	r1, fp
     ea6:	480d      	ldr	r0, [pc, #52]	; (edc <ssd1963_flush+0x284>)
     ea8:	47d0      	blx	sl
        color_p += full_w;
     eaa:	443d      	add	r5, r7
     eac:	3401      	adds	r4, #1
     eae:	b224      	sxth	r4, r4
    for(i = act_y1; i <= act_y2; i++) {
     eb0:	45a0      	cmp	r8, r4
     eb2:	daf5      	bge.n	ea0 <ssd1963_flush+0x248>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     eb4:	2240      	movs	r2, #64	; 0x40
     eb6:	4b06      	ldr	r3, [pc, #24]	; (ed0 <ssd1963_flush+0x278>)
     eb8:	619a      	str	r2, [r3, #24]
    lv_disp_flush_ready(disp_drv);
     eba:	4648      	mov	r0, r9
     ebc:	4b09      	ldr	r3, [pc, #36]	; (ee4 <ssd1963_flush+0x28c>)
     ebe:	4798      	blx	r3
     ec0:	e6e0      	b.n	c84 <ssd1963_flush+0x2c>
     ec2:	bf00      	nop
     ec4:	00010161 	.word	0x00010161
     ec8:	0001016d 	.word	0x0001016d
     ecc:	00010195 	.word	0x00010195
     ed0:	41008000 	.word	0x41008000
     ed4:	20000000 	.word	0x20000000
     ed8:	1c03c3f7 	.word	0x1c03c3f7
     edc:	41008080 	.word	0x41008080
     ee0:	00000fb1 	.word	0x00000fb1
     ee4:	0001022d 	.word	0x0001022d
     ee8:	00000fdd 	.word	0x00000fdd
    int32_t act_x2 = area->x2 > SSD1963_HOR_RES - 1 ? SSD1963_HOR_RES - 1 : area->x2;
     eec:	4b06      	ldr	r3, [pc, #24]	; (f08 <ssd1963_flush+0x2b0>)
     eee:	4798      	blx	r3
     ef0:	4b06      	ldr	r3, [pc, #24]	; (f0c <ssd1963_flush+0x2b4>)
     ef2:	4798      	blx	r3
     ef4:	1e47      	subs	r7, r0, #1
     ef6:	e6e5      	b.n	cc4 <ssd1963_flush+0x6c>
    int32_t act_y2 = area->y2 > SSD1963_VER_RES - 1 ? SSD1963_VER_RES - 1 : area->y2;
     ef8:	4b03      	ldr	r3, [pc, #12]	; (f08 <ssd1963_flush+0x2b0>)
     efa:	4798      	blx	r3
     efc:	4b04      	ldr	r3, [pc, #16]	; (f10 <ssd1963_flush+0x2b8>)
     efe:	4798      	blx	r3
     f00:	f100 38ff 	add.w	r8, r0, #4294967295
     f04:	e6ea      	b.n	cdc <ssd1963_flush+0x84>
     f06:	bf00      	nop
     f08:	00010161 	.word	0x00010161
     f0c:	0001016d 	.word	0x0001016d
     f10:	00010195 	.word	0x00010195

00000f14 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     f14:	e7fe      	b.n	f14 <Dummy_Handler>
	...

00000f18 <Reset_Handler>:
{
     f18:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     f1a:	4b1c      	ldr	r3, [pc, #112]	; (f8c <Reset_Handler+0x74>)
     f1c:	4a1c      	ldr	r2, [pc, #112]	; (f90 <Reset_Handler+0x78>)
     f1e:	429a      	cmp	r2, r3
     f20:	d010      	beq.n	f44 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     f22:	4b1c      	ldr	r3, [pc, #112]	; (f94 <Reset_Handler+0x7c>)
     f24:	4a19      	ldr	r2, [pc, #100]	; (f8c <Reset_Handler+0x74>)
     f26:	429a      	cmp	r2, r3
     f28:	d20c      	bcs.n	f44 <Reset_Handler+0x2c>
     f2a:	3b01      	subs	r3, #1
     f2c:	1a9b      	subs	r3, r3, r2
     f2e:	f023 0303 	bic.w	r3, r3, #3
     f32:	3304      	adds	r3, #4
     f34:	4413      	add	r3, r2
     f36:	4916      	ldr	r1, [pc, #88]	; (f90 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     f38:	f851 0b04 	ldr.w	r0, [r1], #4
     f3c:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     f40:	429a      	cmp	r2, r3
     f42:	d1f9      	bne.n	f38 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     f44:	4b14      	ldr	r3, [pc, #80]	; (f98 <Reset_Handler+0x80>)
     f46:	4a15      	ldr	r2, [pc, #84]	; (f9c <Reset_Handler+0x84>)
     f48:	429a      	cmp	r2, r3
     f4a:	d20a      	bcs.n	f62 <Reset_Handler+0x4a>
     f4c:	3b01      	subs	r3, #1
     f4e:	1a9b      	subs	r3, r3, r2
     f50:	f023 0303 	bic.w	r3, r3, #3
     f54:	3304      	adds	r3, #4
     f56:	4413      	add	r3, r2
                *pDest++ = 0;
     f58:	2100      	movs	r1, #0
     f5a:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     f5e:	4293      	cmp	r3, r2
     f60:	d1fb      	bne.n	f5a <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     f62:	4b0f      	ldr	r3, [pc, #60]	; (fa0 <Reset_Handler+0x88>)
     f64:	4a0f      	ldr	r2, [pc, #60]	; (fa4 <Reset_Handler+0x8c>)
     f66:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     f6a:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     f6c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     f70:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     f74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     f78:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     f7c:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     f80:	4b09      	ldr	r3, [pc, #36]	; (fa8 <Reset_Handler+0x90>)
     f82:	4798      	blx	r3
        main();
     f84:	4b09      	ldr	r3, [pc, #36]	; (fac <Reset_Handler+0x94>)
     f86:	4798      	blx	r3
     f88:	e7fe      	b.n	f88 <Reset_Handler+0x70>
     f8a:	bf00      	nop
     f8c:	20000000 	.word	0x20000000
     f90:	0001b7ac 	.word	0x0001b7ac
     f94:	20000074 	.word	0x20000074
     f98:	2000ae0c 	.word	0x2000ae0c
     f9c:	20000078 	.word	0x20000078
     fa0:	e000ed00 	.word	0xe000ed00
     fa4:	00000000 	.word	0x00000000
     fa8:	0001766d 	.word	0x0001766d
     fac:	000028b5 	.word	0x000028b5

00000fb0 <p_gpio_parallel_write>:
	gpio_set_pin_level(SSD1963_TFT_WR, 1);

}

void p_gpio_parallel_write(PortGroup* group, uint32_t mask, uint32_t data)
{
     fb0:	b570      	push	{r4, r5, r6, lr}
}

void p_gpio_set_port_data(PortGroup* const port, const uint32_t mask, const uint32_t data)
{
	uint32_t dword = (uint32_t)(SSD1963_TFT_DATA_FIX(data));
	port->OUTSET.reg = (mask & data);
     fb2:	ea01 0302 	and.w	r3, r1, r2
     fb6:	6183      	str	r3, [r0, #24]
	port->OUTCLR.reg = (mask & ~data);
     fb8:	ea21 0102 	bic.w	r1, r1, r2
     fbc:	6141      	str	r1, [r0, #20]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     fbe:	4d05      	ldr	r5, [pc, #20]	; (fd4 <p_gpio_parallel_write+0x24>)
     fc0:	2680      	movs	r6, #128	; 0x80
     fc2:	616e      	str	r6, [r5, #20]
	delay_us(1);
     fc4:	2001      	movs	r0, #1
     fc6:	4c04      	ldr	r4, [pc, #16]	; (fd8 <p_gpio_parallel_write+0x28>)
     fc8:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     fca:	61ae      	str	r6, [r5, #24]
	delay_us(1);
     fcc:	2001      	movs	r0, #1
     fce:	47a0      	blx	r4
     fd0:	bd70      	pop	{r4, r5, r6, pc}
     fd2:	bf00      	nop
     fd4:	41008000 	.word	0x41008000
     fd8:	00001515 	.word	0x00001515

00000fdc <p_gpio_parallel_write_arr>:
	for(int ind = 0; ind < len; ind++)
     fdc:	b18b      	cbz	r3, 1002 <p_gpio_parallel_write_arr+0x26>
{
     fde:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     fe2:	461d      	mov	r5, r3
     fe4:	4690      	mov	r8, r2
     fe6:	460f      	mov	r7, r1
     fe8:	4606      	mov	r6, r0
	for(int ind = 0; ind < len; ind++)
     fea:	2400      	movs	r4, #0
		p_gpio_parallel_write(group, mask, data);
     fec:	f8df 9014 	ldr.w	r9, [pc, #20]	; 1004 <p_gpio_parallel_write_arr+0x28>
     ff0:	4642      	mov	r2, r8
     ff2:	4639      	mov	r1, r7
     ff4:	4630      	mov	r0, r6
     ff6:	47c8      	blx	r9
	for(int ind = 0; ind < len; ind++)
     ff8:	3401      	adds	r4, #1
     ffa:	42ac      	cmp	r4, r5
     ffc:	d1f8      	bne.n	ff0 <p_gpio_parallel_write_arr+0x14>
     ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1002:	4770      	bx	lr
    1004:	00000fb1 	.word	0x00000fb1

00001008 <p_gpio_set_port_group_config>:
}

void p_gpio_set_port_group_config(enum gpio_port port, const uint32_t mask, p_port_config* config)
{
    1008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    100c:	b083      	sub	sp, #12
    100e:	468b      	mov	fp, r1
    1010:	9200      	str	r2, [sp, #0]
	for(uint8_t i = 0; i < 32; i++)
	{
		if(mask & (1UL << i))
		{
			uint32_t _gpio_pin = GPIO(port, i);
    1012:	0140      	lsls	r0, r0, #5
    1014:	b2c3      	uxtb	r3, r0
    1016:	9301      	str	r3, [sp, #4]
    1018:	2600      	movs	r6, #0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    101a:	f8df 9194 	ldr.w	r9, [pc, #404]	; 11b0 <p_gpio_set_port_group_config+0x1a8>
    101e:	e065      	b.n	10ec <p_gpio_set_port_group_config+0xe4>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1020:	eb09 13c7 	add.w	r3, r9, r7, lsl #7
    1024:	605d      	str	r5, [r3, #4]
                                       const enum gpio_direction direction)
{
	switch (direction) {
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    1026:	b2aa      	uxth	r2, r5
    1028:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    102c:	629a      	str	r2, [r3, #40]	; 0x28
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    102e:	0c2a      	lsrs	r2, r5, #16
		hri_port_write_WRCONFIG_reg(
    1030:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    1034:	629a      	str	r2, [r3, #40]	; 0x28
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
	switch (pull_mode) {
    1036:	9b00      	ldr	r3, [sp, #0]
    1038:	781b      	ldrb	r3, [r3, #0]
    103a:	2b01      	cmp	r3, #1
    103c:	d077      	beq.n	112e <p_gpio_set_port_group_config+0x126>
    103e:	b323      	cbz	r3, 108a <p_gpio_set_port_group_config+0x82>
    1040:	2b02      	cmp	r3, #2
    1042:	f000 8084 	beq.w	114e <p_gpio_set_port_group_config+0x146>
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
		break;

	default:
		ASSERT(false);
    1046:	2289      	movs	r2, #137	; 0x89
    1048:	4957      	ldr	r1, [pc, #348]	; (11a8 <p_gpio_set_port_group_config+0x1a0>)
    104a:	2000      	movs	r0, #0
    104c:	4b57      	ldr	r3, [pc, #348]	; (11ac <p_gpio_set_port_group_config+0x1a4>)
    104e:	4798      	blx	r3
    1050:	e024      	b.n	109c <p_gpio_set_port_group_config+0x94>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1052:	eb09 12c7 	add.w	r2, r9, r7, lsl #7
    1056:	6055      	str	r5, [r2, #4]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    1058:	b2ab      	uxth	r3, r5
    105a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    105e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1062:	6293      	str	r3, [r2, #40]	; 0x28
		                                | ((mask & 0xffff0000) >> 16));
    1064:	0c2b      	lsrs	r3, r5, #16
		hri_port_write_WRCONFIG_reg(PORT,
    1066:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    106a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    106e:	6293      	str	r3, [r2, #40]	; 0x28
    1070:	e7e1      	b.n	1036 <p_gpio_set_port_group_config+0x2e>
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1072:	eb09 13c7 	add.w	r3, r9, r7, lsl #7
    1076:	609d      	str	r5, [r3, #8]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    1078:	b2aa      	uxth	r2, r5
    107a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    107e:	629a      	str	r2, [r3, #40]	; 0x28
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1080:	0c2a      	lsrs	r2, r5, #16
		hri_port_write_WRCONFIG_reg(
    1082:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    1086:	629a      	str	r2, [r3, #40]	; 0x28
    1088:	e7d5      	b.n	1036 <p_gpio_set_port_group_config+0x2e>
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    108a:	eb09 13c7 	add.w	r3, r9, r7, lsl #7
    108e:	4443      	add	r3, r8
    1090:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    1094:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    1098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			gpio_set_pin_direction(_gpio_pin, config->direction);
			gpio_set_pin_pull_mode(_gpio_pin, config->pull_mode);
			gpio_set_pin_function(_gpio_pin, config->function);
    109c:	9b00      	ldr	r3, [sp, #0]
    109e:	685a      	ldr	r2, [r3, #4]
/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
	uint8_t port = GPIO_PORT(gpio);
    10a0:	0964      	lsrs	r4, r4, #5
	uint8_t pin  = GPIO_PIN(gpio);

	if (function == GPIO_PIN_FUNCTION_OFF) {
    10a2:	f1b2 3fff 	cmp.w	r2, #4294967295
    10a6:	d062      	beq.n	116e <p_gpio_set_port_group_config+0x166>
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    10a8:	b2e4      	uxtb	r4, r4
    10aa:	eb09 11c4 	add.w	r1, r9, r4, lsl #7
    10ae:	4441      	add	r1, r8
    10b0:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
	tmp &= ~PORT_PINCFG_PMUXEN;
    10b4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    10b8:	f043 0301 	orr.w	r3, r3, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    10bc:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);

	} else {
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);

		if (pin & 1) {
    10c0:	f01a 0f01 	tst.w	sl, #1
    10c4:	d15e      	bne.n	1184 <p_gpio_set_port_group_config+0x17c>
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    10c6:	eb09 14c4 	add.w	r4, r9, r4, lsl #7
    10ca:	eb04 0858 	add.w	r8, r4, r8, lsr #1
    10ce:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    10d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    10d6:	f002 020f 	and.w	r2, r2, #15
    10da:	431a      	orrs	r2, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    10dc:	f888 2030 	strb.w	r2, [r8, #48]	; 0x30
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    10e0:	eb09 17c7 	add.w	r7, r9, r7, lsl #7
    10e4:	617d      	str	r5, [r7, #20]
    10e6:	3601      	adds	r6, #1
	for(uint8_t i = 0; i < 32; i++)
    10e8:	2e20      	cmp	r6, #32
    10ea:	d059      	beq.n	11a0 <p_gpio_set_port_group_config+0x198>
    10ec:	b2f4      	uxtb	r4, r6
		if(mask & (1UL << i))
    10ee:	fa2b f306 	lsr.w	r3, fp, r6
    10f2:	f013 0f01 	tst.w	r3, #1
    10f6:	d0f6      	beq.n	10e6 <p_gpio_set_port_group_config+0xde>
			uint32_t _gpio_pin = GPIO(port, i);
    10f8:	f004 041f 	and.w	r4, r4, #31
    10fc:	9b01      	ldr	r3, [sp, #4]
    10fe:	441c      	add	r4, r3
			gpio_set_pin_direction(_gpio_pin, config->direction);
    1100:	fa5f fa84 	uxtb.w	sl, r4
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    1104:	ea4f 175a 	mov.w	r7, sl, lsr #5
    1108:	f00a 081f 	and.w	r8, sl, #31
    110c:	2501      	movs	r5, #1
    110e:	fa05 f508 	lsl.w	r5, r5, r8
	switch (direction) {
    1112:	9b00      	ldr	r3, [sp, #0]
    1114:	785b      	ldrb	r3, [r3, #1]
    1116:	2b01      	cmp	r3, #1
    1118:	d09b      	beq.n	1052 <p_gpio_set_port_group_config+0x4a>
    111a:	2b00      	cmp	r3, #0
    111c:	d080      	beq.n	1020 <p_gpio_set_port_group_config+0x18>
    111e:	2b02      	cmp	r3, #2
    1120:	d0a7      	beq.n	1072 <p_gpio_set_port_group_config+0x6a>
		ASSERT(false);
    1122:	2246      	movs	r2, #70	; 0x46
    1124:	4920      	ldr	r1, [pc, #128]	; (11a8 <p_gpio_set_port_group_config+0x1a0>)
    1126:	2000      	movs	r0, #0
    1128:	4b20      	ldr	r3, [pc, #128]	; (11ac <p_gpio_set_port_group_config+0x1a4>)
    112a:	4798      	blx	r3
    112c:	e783      	b.n	1036 <p_gpio_set_port_group_config+0x2e>
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    112e:	2301      	movs	r3, #1
    1130:	fa03 f308 	lsl.w	r3, r3, r8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1134:	eb09 12c7 	add.w	r2, r9, r7, lsl #7
    1138:	6053      	str	r3, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    113a:	eb02 0008 	add.w	r0, r2, r8
    113e:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    1142:	f041 0104 	orr.w	r1, r1, #4
    1146:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    114a:	6193      	str	r3, [r2, #24]
    114c:	e7a6      	b.n	109c <p_gpio_set_port_group_config+0x94>
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    114e:	2301      	movs	r3, #1
    1150:	fa03 f308 	lsl.w	r3, r3, r8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1154:	eb09 12c7 	add.w	r2, r9, r7, lsl #7
    1158:	6053      	str	r3, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    115a:	eb02 0008 	add.w	r0, r2, r8
    115e:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    1162:	f041 0104 	orr.w	r1, r1, #4
    1166:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    116a:	6153      	str	r3, [r2, #20]
    116c:	e796      	b.n	109c <p_gpio_set_port_group_config+0x94>
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    116e:	b2e4      	uxtb	r4, r4
    1170:	eb09 14c4 	add.w	r4, r9, r4, lsl #7
    1174:	44a0      	add	r8, r4
    1176:	f898 3040 	ldrb.w	r3, [r8, #64]	; 0x40
	tmp &= ~PORT_PINCFG_PMUXEN;
    117a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    117e:	f888 3040 	strb.w	r3, [r8, #64]	; 0x40
    1182:	e7ad      	b.n	10e0 <p_gpio_set_port_group_config+0xd8>
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1184:	eb09 14c4 	add.w	r4, r9, r4, lsl #7
    1188:	eb04 0858 	add.w	r8, r4, r8, lsr #1
    118c:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1190:	f003 030f 	and.w	r3, r3, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1194:	ea43 1202 	orr.w	r2, r3, r2, lsl #4
    1198:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    119a:	f888 2030 	strb.w	r2, [r8, #48]	; 0x30
    119e:	e79f      	b.n	10e0 <p_gpio_set_port_group_config+0xd8>
			gpio_set_pin_level(_gpio_pin, 0);
		}
		
	}
}
    11a0:	b003      	add	sp, #12
    11a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11a6:	bf00      	nop
    11a8:	00017708 	.word	0x00017708
    11ac:	00001a89 	.word	0x00001a89
    11b0:	41008000 	.word	0x41008000

000011b4 <p_gpio_init>:
{
    11b4:	b570      	push	{r4, r5, r6, lr}
    11b6:	b082      	sub	sp, #8
	memset(&data_config, 0, sizeof(data_config));
    11b8:	2300      	movs	r3, #0
    11ba:	9300      	str	r3, [sp, #0]
	data_config.direction = GPIO_DIRECTION_OUT;
    11bc:	2302      	movs	r3, #2
    11be:	f88d 3001 	strb.w	r3, [sp, #1]
	data_config.pull_mode = GPIO_PULL_DOWN;
    11c2:	f88d 3000 	strb.w	r3, [sp]
	data_config.function = GPIO_PIN_FUNCTION_OFF;
    11c6:	f04f 33ff 	mov.w	r3, #4294967295
    11ca:	9301      	str	r3, [sp, #4]
	p_gpio_set_port_group_config(SSD1963_TFT_DATA_PORT, SSD1963_TFT_DATA_MASK, &data_config);
    11cc:	466a      	mov	r2, sp
    11ce:	4946      	ldr	r1, [pc, #280]	; (12e8 <p_gpio_init+0x134>)
    11d0:	2001      	movs	r0, #1
    11d2:	4b46      	ldr	r3, [pc, #280]	; (12ec <p_gpio_init+0x138>)
    11d4:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    11d6:	4b46      	ldr	r3, [pc, #280]	; (12f0 <p_gpio_init+0x13c>)
    11d8:	2240      	movs	r2, #64	; 0x40
    11da:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    11dc:	4e45      	ldr	r6, [pc, #276]	; (12f4 <p_gpio_init+0x140>)
    11de:	629e      	str	r6, [r3, #40]	; 0x28
    11e0:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    11e4:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    11e6:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    11e8:	f893 0046 	ldrb.w	r0, [r3, #70]	; 0x46
    11ec:	f040 0004 	orr.w	r0, r0, #4
    11f0:	f883 0046 	strb.w	r0, [r3, #70]	; 0x46
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    11f4:	619a      	str	r2, [r3, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    11f6:	f893 0046 	ldrb.w	r0, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
    11fa:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    11fe:	f883 0046 	strb.w	r0, [r3, #70]	; 0x46
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1202:	2510      	movs	r5, #16
    1204:	f8c3 5108 	str.w	r5, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1208:	483b      	ldr	r0, [pc, #236]	; (12f8 <p_gpio_init+0x144>)
    120a:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
    120e:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1212:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1216:	f893 0144 	ldrb.w	r0, [r3, #324]	; 0x144
    121a:	f040 0004 	orr.w	r0, r0, #4
    121e:	f883 0144 	strb.w	r0, [r3, #324]	; 0x144
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1222:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1226:	f893 0144 	ldrb.w	r0, [r3, #324]	; 0x144
	tmp &= ~PORT_PINCFG_PMUXEN;
    122a:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    122e:	f883 0144 	strb.w	r0, [r3, #324]	; 0x144
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1232:	2408      	movs	r4, #8
    1234:	609c      	str	r4, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1236:	4831      	ldr	r0, [pc, #196]	; (12fc <p_gpio_init+0x148>)
    1238:	6298      	str	r0, [r3, #40]	; 0x28
    123a:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    123c:	605c      	str	r4, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    123e:	f893 0043 	ldrb.w	r0, [r3, #67]	; 0x43
    1242:	f040 0004 	orr.w	r0, r0, #4
    1246:	f883 0043 	strb.w	r0, [r3, #67]	; 0x43
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    124a:	615c      	str	r4, [r3, #20]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    124c:	f893 0043 	ldrb.w	r0, [r3, #67]	; 0x43
	tmp &= ~PORT_PINCFG_PMUXEN;
    1250:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1254:	f883 0043 	strb.w	r0, [r3, #67]	; 0x43
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1258:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    125a:	629e      	str	r6, [r3, #40]	; 0x28
    125c:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    125e:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1260:	f893 0046 	ldrb.w	r0, [r3, #70]	; 0x46
    1264:	f040 0004 	orr.w	r0, r0, #4
    1268:	f883 0046 	strb.w	r0, [r3, #70]	; 0x46
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    126c:	615a      	str	r2, [r3, #20]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    126e:	f893 0046 	ldrb.w	r0, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
    1272:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1276:	f883 0046 	strb.w	r0, [r3, #70]	; 0x46
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    127a:	2080      	movs	r0, #128	; 0x80
    127c:	6098      	str	r0, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    127e:	3640      	adds	r6, #64	; 0x40
    1280:	629e      	str	r6, [r3, #40]	; 0x28
    1282:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1284:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1286:	f893 1047 	ldrb.w	r1, [r3, #71]	; 0x47
    128a:	f041 0104 	orr.w	r1, r1, #4
    128e:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1292:	6158      	str	r0, [r3, #20]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1294:	f893 1047 	ldrb.w	r1, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
    1298:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    129c:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    12a0:	f44f 7180 	mov.w	r1, #256	; 0x100
    12a4:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    12a8:	f506 3600 	add.w	r6, r6, #131072	; 0x20000
    12ac:	3680      	adds	r6, #128	; 0x80
    12ae:	f8c3 61a8 	str.w	r6, [r3, #424]	; 0x1a8
    12b2:	4e13      	ldr	r6, [pc, #76]	; (1300 <p_gpio_init+0x14c>)
    12b4:	f8c3 61a8 	str.w	r6, [r3, #424]	; 0x1a8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    12b8:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    12bc:	f893 61c8 	ldrb.w	r6, [r3, #456]	; 0x1c8
    12c0:	f046 0604 	orr.w	r6, r6, #4
    12c4:	f883 61c8 	strb.w	r6, [r3, #456]	; 0x1c8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    12c8:	f8c3 1194 	str.w	r1, [r3, #404]	; 0x194
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    12cc:	f893 11c8 	ldrb.w	r1, [r3, #456]	; 0x1c8
	tmp &= ~PORT_PINCFG_PMUXEN;
    12d0:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    12d4:	f883 11c8 	strb.w	r1, [r3, #456]	; 0x1c8
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    12d8:	619a      	str	r2, [r3, #24]
    12da:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
    12de:	619c      	str	r4, [r3, #24]
    12e0:	619a      	str	r2, [r3, #24]
    12e2:	6198      	str	r0, [r3, #24]
}
    12e4:	b002      	add	sp, #8
    12e6:	bd70      	pop	{r4, r5, r6, pc}
    12e8:	1c03c3f7 	.word	0x1c03c3f7
    12ec:	00001009 	.word	0x00001009
    12f0:	41008000 	.word	0x41008000
    12f4:	40000040 	.word	0x40000040
    12f8:	40000010 	.word	0x40000010
    12fc:	40000008 	.word	0x40000008
    1300:	c0020000 	.word	0xc0020000

00001304 <p_i2c_init>:
#include "p_i2c.h"

struct i2c_m_sync_desc p_i2c_master;

void p_i2c_init(void)
{
    1304:	b508      	push	{r3, lr}
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    1306:	4b1f      	ldr	r3, [pc, #124]	; (1384 <p_i2c_init+0x80>)
    1308:	2240      	movs	r2, #64	; 0x40
    130a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    130e:	2243      	movs	r2, #67	; 0x43
    1310:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBBMASK_SERCOM3_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
    1314:	4a1c      	ldr	r2, [pc, #112]	; (1388 <p_i2c_init+0x84>)
    1316:	6993      	ldr	r3, [r2, #24]
    1318:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    131c:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_SLOW, CONF_GCLK_SERCOM3_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
	
	i2c_m_sync_init(&p_i2c_master, I2C_MASTER_SERCOM);
    131e:	491b      	ldr	r1, [pc, #108]	; (138c <p_i2c_init+0x88>)
    1320:	481b      	ldr	r0, [pc, #108]	; (1390 <p_i2c_init+0x8c>)
    1322:	4b1c      	ldr	r3, [pc, #112]	; (1394 <p_i2c_init+0x90>)
    1324:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1326:	4b1c      	ldr	r3, [pc, #112]	; (1398 <p_i2c_init+0x94>)
    1328:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
    132c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    1330:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1334:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
    1338:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    133c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1340:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1344:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1348:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    134c:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1350:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1354:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
    1358:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    135c:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1360:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
    1364:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1368:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    136c:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1370:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1374:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1378:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    137c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
    1380:	bd08      	pop	{r3, pc}
    1382:	bf00      	nop
    1384:	40001c00 	.word	0x40001c00
    1388:	40000800 	.word	0x40000800
    138c:	41014000 	.word	0x41014000
    1390:	2000abf8 	.word	0x2000abf8
    1394:	000015b5 	.word	0x000015b5
    1398:	41008000 	.word	0x41008000

0000139c <TIMER_0_task1_cb>:
static volatile uint64_t sys_time = 0;
/**
 * Example of using TIMER_0.
 */
static void TIMER_0_task1_cb(const struct timer_task *const timer_task)
{
    139c:	b508      	push	{r3, lr}
	sys_time++;
    139e:	4906      	ldr	r1, [pc, #24]	; (13b8 <TIMER_0_task1_cb+0x1c>)
    13a0:	e9d1 2300 	ldrd	r2, r3, [r1]
    13a4:	3201      	adds	r2, #1
    13a6:	f143 0300 	adc.w	r3, r3, #0
    13aa:	e9c1 2300 	strd	r2, r3, [r1]
	lv_tick_inc(1);
    13ae:	2001      	movs	r0, #1
    13b0:	4b02      	ldr	r3, [pc, #8]	; (13bc <TIMER_0_task1_cb+0x20>)
    13b2:	4798      	blx	r3
    13b4:	bd08      	pop	{r3, pc}
    13b6:	bf00      	nop
    13b8:	20000098 	.word	0x20000098
    13bc:	000102c5 	.word	0x000102c5

000013c0 <p_tcc_init>:
	//timer_add_task(&p_tcc_inst, &TIMER_0_task2);
	timer_start(&p_tcc_inst);
}

void p_tcc_init(void)
{
    13c0:	b510      	push	{r4, lr}
	delay_init(SysTick);
    13c2:	4811      	ldr	r0, [pc, #68]	; (1408 <p_tcc_init+0x48>)
    13c4:	4b11      	ldr	r3, [pc, #68]	; (140c <p_tcc_init+0x4c>)
    13c6:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    13c8:	4a11      	ldr	r2, [pc, #68]	; (1410 <p_tcc_init+0x50>)
    13ca:	6953      	ldr	r3, [r2, #20]
    13cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    13d0:	6153      	str	r3, [r2, #20]
    13d2:	2240      	movs	r2, #64	; 0x40
    13d4:	4b0f      	ldr	r3, [pc, #60]	; (1414 <p_tcc_init+0x54>)
    13d6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	timer_init(&p_tcc_inst, TC0, _tc_get_timer());
    13da:	4b0f      	ldr	r3, [pc, #60]	; (1418 <p_tcc_init+0x58>)
    13dc:	4798      	blx	r3
    13de:	4c0f      	ldr	r4, [pc, #60]	; (141c <p_tcc_init+0x5c>)
    13e0:	4602      	mov	r2, r0
    13e2:	490f      	ldr	r1, [pc, #60]	; (1420 <p_tcc_init+0x60>)
    13e4:	4620      	mov	r0, r4
    13e6:	4b0f      	ldr	r3, [pc, #60]	; (1424 <p_tcc_init+0x64>)
    13e8:	4798      	blx	r3
	
	TIMER_0_task1.interval = 1;
    13ea:	490f      	ldr	r1, [pc, #60]	; (1428 <p_tcc_init+0x68>)
    13ec:	2301      	movs	r3, #1
    13ee:	610b      	str	r3, [r1, #16]
	TIMER_0_task1.cb       = TIMER_0_task1_cb;
    13f0:	4a0e      	ldr	r2, [pc, #56]	; (142c <p_tcc_init+0x6c>)
    13f2:	614a      	str	r2, [r1, #20]
	TIMER_0_task1.mode     = TIMER_TASK_REPEAT;
    13f4:	760b      	strb	r3, [r1, #24]
	//TIMER_0_task2.interval = 200;
	//TIMER_0_task2.cb       = TIMER_0_task2_cb;
	//TIMER_0_task2.mode     = TIMER_TASK_REPEAT;

	timer_add_task(&p_tcc_inst, &TIMER_0_task1);
    13f6:	3108      	adds	r1, #8
    13f8:	4620      	mov	r0, r4
    13fa:	4b0d      	ldr	r3, [pc, #52]	; (1430 <p_tcc_init+0x70>)
    13fc:	4798      	blx	r3
	//timer_add_task(&p_tcc_inst, &TIMER_0_task2);
	timer_start(&p_tcc_inst);
    13fe:	4620      	mov	r0, r4
    1400:	4b0c      	ldr	r3, [pc, #48]	; (1434 <p_tcc_init+0x74>)
    1402:	4798      	blx	r3
    1404:	bd10      	pop	{r4, pc}
    1406:	bf00      	nop
    1408:	e000e010 	.word	0xe000e010
    140c:	00001501 	.word	0x00001501
    1410:	40000800 	.word	0x40000800
    1414:	40001c00 	.word	0x40001c00
    1418:	0000284f 	.word	0x0000284f
    141c:	2000ac18 	.word	0x2000ac18
    1420:	40003800 	.word	0x40003800
    1424:	000016fd 	.word	0x000016fd
    1428:	20000098 	.word	0x20000098
    142c:	0000139d 	.word	0x0000139d
    1430:	00001775 	.word	0x00001775
    1434:	00001739 	.word	0x00001739

00001438 <p_usart_init>:
static uint8_t example_USART_0[12] = "Hello World!";

static uint8_t debug_buffer[DEBUG_MAX_BUFFER_SIZE];
static uint8_t debug_rx_buff[DEBUG_USART_EX_BUFF_SIZE];
void p_usart_init(void)
{
    1438:	b530      	push	{r4, r5, lr}
    143a:	b083      	sub	sp, #12
    143c:	4b1f      	ldr	r3, [pc, #124]	; (14bc <p_usart_init+0x84>)
    143e:	2240      	movs	r2, #64	; 0x40
    1440:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    1444:	2243      	movs	r2, #67	; 0x43
    1446:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
    144a:	4a1d      	ldr	r2, [pc, #116]	; (14c0 <p_usart_init+0x88>)
    144c:	6993      	ldr	r3, [r2, #24]
    144e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1452:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_SLOW, CONF_GCLK_SERCOM2_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
	
	usart_async_init(&p_usart_debug_inst, USART_DEBUG_SERCOM, debug_rx_buff, DEBUG_USART_EX_BUFF_SIZE, (void*)NULL);
    1454:	4c1b      	ldr	r4, [pc, #108]	; (14c4 <p_usart_init+0x8c>)
    1456:	2300      	movs	r3, #0
    1458:	9300      	str	r3, [sp, #0]
    145a:	2310      	movs	r3, #16
    145c:	4a1a      	ldr	r2, [pc, #104]	; (14c8 <p_usart_init+0x90>)
    145e:	491b      	ldr	r1, [pc, #108]	; (14cc <p_usart_init+0x94>)
    1460:	4620      	mov	r0, r4
    1462:	4d1b      	ldr	r5, [pc, #108]	; (14d0 <p_usart_init+0x98>)
    1464:	47a8      	blx	r5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1466:	4b1b      	ldr	r3, [pc, #108]	; (14d4 <p_usart_init+0x9c>)
    1468:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
    146c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1470:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1474:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1478:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    147c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    1480:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1484:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1488:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
    148c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1490:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1494:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1498:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    149c:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    14a0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    14a4:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	
	// port init
	gpio_set_pin_function(USART_DEBUG_RX, USART_DEBUG_RX_MUX);
	gpio_set_pin_function(USART_DEBUG_TX, USART_DEBUG_TX_MUX);
	
	usart_async_enable(&p_usart_debug_inst);
    14a8:	4620      	mov	r0, r4
    14aa:	4b0b      	ldr	r3, [pc, #44]	; (14d8 <p_usart_init+0xa0>)
    14ac:	4798      	blx	r3
	
	io_write(&p_usart_debug_inst.io, example_USART_0, 12);
    14ae:	220c      	movs	r2, #12
    14b0:	490a      	ldr	r1, [pc, #40]	; (14dc <p_usart_init+0xa4>)
    14b2:	4620      	mov	r0, r4
    14b4:	4b0a      	ldr	r3, [pc, #40]	; (14e0 <p_usart_init+0xa8>)
    14b6:	4798      	blx	r3
	
	
}
    14b8:	b003      	add	sp, #12
    14ba:	bd30      	pop	{r4, r5, pc}
    14bc:	40001c00 	.word	0x40001c00
    14c0:	40000800 	.word	0x40000800
    14c4:	2000ac34 	.word	0x2000ac34
    14c8:	200000b4 	.word	0x200000b4
    14cc:	41012000 	.word	0x41012000
    14d0:	000019cd 	.word	0x000019cd
    14d4:	41008000 	.word	0x41008000
    14d8:	00001a5d 	.word	0x00001a5d
    14dc:	20000004 	.word	0x20000004
    14e0:	000015f5 	.word	0x000015f5

000014e4 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    14e4:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    14e8:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    14ea:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    14ec:	f3bf 8f5f 	dmb	sy
    14f0:	4770      	bx	lr

000014f2 <atomic_leave_critical>:
    14f2:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    14f6:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    14f8:	f383 8810 	msr	PRIMASK, r3
    14fc:	4770      	bx	lr
	...

00001500 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    1500:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    1502:	4b02      	ldr	r3, [pc, #8]	; (150c <delay_init+0xc>)
    1504:	6018      	str	r0, [r3, #0]
    1506:	4b02      	ldr	r3, [pc, #8]	; (1510 <delay_init+0x10>)
    1508:	4798      	blx	r3
    150a:	bd08      	pop	{r3, pc}
    150c:	200000c4 	.word	0x200000c4
    1510:	00001c3d 	.word	0x00001c3d

00001514 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    1514:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    1516:	4b04      	ldr	r3, [pc, #16]	; (1528 <delay_us+0x14>)
    1518:	681c      	ldr	r4, [r3, #0]
    151a:	4b04      	ldr	r3, [pc, #16]	; (152c <delay_us+0x18>)
    151c:	4798      	blx	r3
    151e:	4601      	mov	r1, r0
    1520:	4620      	mov	r0, r4
    1522:	4b03      	ldr	r3, [pc, #12]	; (1530 <delay_us+0x1c>)
    1524:	4798      	blx	r3
    1526:	bd10      	pop	{r4, pc}
    1528:	200000c4 	.word	0x200000c4
    152c:	00001c05 	.word	0x00001c05
    1530:	00001c41 	.word	0x00001c41

00001534 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1534:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1536:	4b04      	ldr	r3, [pc, #16]	; (1548 <delay_ms+0x14>)
    1538:	681c      	ldr	r4, [r3, #0]
    153a:	4b04      	ldr	r3, [pc, #16]	; (154c <delay_ms+0x18>)
    153c:	4798      	blx	r3
    153e:	4601      	mov	r1, r0
    1540:	4620      	mov	r0, r4
    1542:	4b03      	ldr	r3, [pc, #12]	; (1550 <delay_ms+0x1c>)
    1544:	4798      	blx	r3
    1546:	bd10      	pop	{r4, pc}
    1548:	200000c4 	.word	0x200000c4
    154c:	00001c1d 	.word	0x00001c1d
    1550:	00001c41 	.word	0x00001c41

00001554 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    1554:	b510      	push	{r4, lr}
    1556:	b084      	sub	sp, #16
    1558:	4614      	mov	r4, r2
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    155a:	8903      	ldrh	r3, [r0, #8]
    155c:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    1560:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    1562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1566:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    156a:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    156c:	a901      	add	r1, sp, #4
    156e:	3814      	subs	r0, #20
    1570:	4b03      	ldr	r3, [pc, #12]	; (1580 <i2c_m_sync_write+0x2c>)
    1572:	4798      	blx	r3
	if (ret) {
		return ret;
	}

	return n;
}
    1574:	2800      	cmp	r0, #0
    1576:	bf08      	it	eq
    1578:	4620      	moveq	r0, r4
    157a:	b004      	add	sp, #16
    157c:	bd10      	pop	{r4, pc}
    157e:	bf00      	nop
    1580:	000020b5 	.word	0x000020b5

00001584 <i2c_m_sync_read>:
{
    1584:	b510      	push	{r4, lr}
    1586:	b084      	sub	sp, #16
    1588:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
    158a:	8903      	ldrh	r3, [r0, #8]
    158c:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    1590:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    1592:	f248 0301 	movw	r3, #32769	; 0x8001
    1596:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    159a:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    159c:	a901      	add	r1, sp, #4
    159e:	3814      	subs	r0, #20
    15a0:	4b03      	ldr	r3, [pc, #12]	; (15b0 <i2c_m_sync_read+0x2c>)
    15a2:	4798      	blx	r3
}
    15a4:	2800      	cmp	r0, #0
    15a6:	bf08      	it	eq
    15a8:	4620      	moveq	r0, r4
    15aa:	b004      	add	sp, #16
    15ac:	bd10      	pop	{r4, pc}
    15ae:	bf00      	nop
    15b0:	000020b5 	.word	0x000020b5

000015b4 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    15b4:	b538      	push	{r3, r4, r5, lr}
    15b6:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
    15b8:	4604      	mov	r4, r0
    15ba:	225e      	movs	r2, #94	; 0x5e
    15bc:	4908      	ldr	r1, [pc, #32]	; (15e0 <i2c_m_sync_init+0x2c>)
    15be:	3000      	adds	r0, #0
    15c0:	bf18      	it	ne
    15c2:	2001      	movne	r0, #1
    15c4:	4b07      	ldr	r3, [pc, #28]	; (15e4 <i2c_m_sync_init+0x30>)
    15c6:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    15c8:	4629      	mov	r1, r5
    15ca:	4620      	mov	r0, r4
    15cc:	4b06      	ldr	r3, [pc, #24]	; (15e8 <i2c_m_sync_init+0x34>)
    15ce:	4798      	blx	r3
	if (init_status) {
    15d0:	4603      	mov	r3, r0
    15d2:	b918      	cbnz	r0, 15dc <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    15d4:	4a05      	ldr	r2, [pc, #20]	; (15ec <i2c_m_sync_init+0x38>)
    15d6:	61a2      	str	r2, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
    15d8:	4a05      	ldr	r2, [pc, #20]	; (15f0 <i2c_m_sync_init+0x3c>)
    15da:	6162      	str	r2, [r4, #20]

	return ERR_NONE;
}
    15dc:	4618      	mov	r0, r3
    15de:	bd38      	pop	{r3, r4, r5, pc}
    15e0:	00017724 	.word	0x00017724
    15e4:	00001a89 	.word	0x00001a89
    15e8:	00002085 	.word	0x00002085
    15ec:	00001585 	.word	0x00001585
    15f0:	00001555 	.word	0x00001555

000015f4 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    15f4:	b570      	push	{r4, r5, r6, lr}
    15f6:	460d      	mov	r5, r1
    15f8:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    15fa:	4604      	mov	r4, r0
    15fc:	b160      	cbz	r0, 1618 <io_write+0x24>
    15fe:	1c08      	adds	r0, r1, #0
    1600:	bf18      	it	ne
    1602:	2001      	movne	r0, #1
    1604:	2234      	movs	r2, #52	; 0x34
    1606:	4905      	ldr	r1, [pc, #20]	; (161c <io_write+0x28>)
    1608:	4b05      	ldr	r3, [pc, #20]	; (1620 <io_write+0x2c>)
    160a:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    160c:	6823      	ldr	r3, [r4, #0]
    160e:	4632      	mov	r2, r6
    1610:	4629      	mov	r1, r5
    1612:	4620      	mov	r0, r4
    1614:	4798      	blx	r3
}
    1616:	bd70      	pop	{r4, r5, r6, pc}
    1618:	2000      	movs	r0, #0
    161a:	e7f3      	b.n	1604 <io_write+0x10>
    161c:	00017740 	.word	0x00017740
    1620:	00001a89 	.word	0x00001a89

00001624 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    1624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1626:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    1628:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    162a:	b12f      	cbz	r7, 1638 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    162c:	688d      	ldr	r5, [r1, #8]
    162e:	463c      	mov	r4, r7
    1630:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1632:	f1c2 0e01 	rsb	lr, r2, #1
    1636:	e00b      	b.n	1650 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    1638:	4b0e      	ldr	r3, [pc, #56]	; (1674 <timer_add_timer_task+0x50>)
    163a:	4798      	blx	r3
		return;
    163c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    163e:	4473      	add	r3, lr
    1640:	68a0      	ldr	r0, [r4, #8]
    1642:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    1644:	42ab      	cmp	r3, r5
    1646:	d20a      	bcs.n	165e <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    1648:	6823      	ldr	r3, [r4, #0]
    164a:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    164c:	b153      	cbz	r3, 1664 <timer_add_timer_task+0x40>
    164e:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    1650:	6863      	ldr	r3, [r4, #4]
    1652:	4293      	cmp	r3, r2
    1654:	d8f3      	bhi.n	163e <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    1656:	68a0      	ldr	r0, [r4, #8]
    1658:	4403      	add	r3, r0
    165a:	1a9b      	subs	r3, r3, r2
    165c:	e7f2      	b.n	1644 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    165e:	42a7      	cmp	r7, r4
    1660:	d004      	beq.n	166c <timer_add_timer_task+0x48>
    1662:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    1664:	4620      	mov	r0, r4
    1666:	4b04      	ldr	r3, [pc, #16]	; (1678 <timer_add_timer_task+0x54>)
    1668:	4798      	blx	r3
    166a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    166c:	4660      	mov	r0, ip
    166e:	4b01      	ldr	r3, [pc, #4]	; (1674 <timer_add_timer_task+0x50>)
    1670:	4798      	blx	r3
    1672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1674:	00001ab1 	.word	0x00001ab1
    1678:	00001add 	.word	0x00001add

0000167c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    167c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    1680:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    1682:	6907      	ldr	r7, [r0, #16]
    1684:	3701      	adds	r7, #1
    1686:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1688:	7e03      	ldrb	r3, [r0, #24]
    168a:	f013 0f01 	tst.w	r3, #1
    168e:	d113      	bne.n	16b8 <timer_process_counted+0x3c>
    1690:	7e03      	ldrb	r3, [r0, #24]
    1692:	f013 0f02 	tst.w	r3, #2
    1696:	d10f      	bne.n	16b8 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    1698:	b354      	cbz	r4, 16f0 <timer_process_counted+0x74>
    169a:	6863      	ldr	r3, [r4, #4]
    169c:	1afb      	subs	r3, r7, r3
    169e:	68a2      	ldr	r2, [r4, #8]
    16a0:	4293      	cmp	r3, r2
    16a2:	d307      	bcc.n	16b4 <timer_process_counted+0x38>
    16a4:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    16a6:	f100 0814 	add.w	r8, r0, #20
    16aa:	f8df 9048 	ldr.w	r9, [pc, #72]	; 16f4 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    16ae:	f8df a048 	ldr.w	sl, [pc, #72]	; 16f8 <timer_process_counted+0x7c>
    16b2:	e012      	b.n	16da <timer_process_counted+0x5e>
    16b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    16b8:	7e03      	ldrb	r3, [r0, #24]
    16ba:	f043 0302 	orr.w	r3, r3, #2
    16be:	7603      	strb	r3, [r0, #24]
		return;
    16c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    16c4:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    16c6:	68e3      	ldr	r3, [r4, #12]
    16c8:	4620      	mov	r0, r4
    16ca:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    16cc:	b185      	cbz	r5, 16f0 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    16ce:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    16d0:	686b      	ldr	r3, [r5, #4]
    16d2:	1afb      	subs	r3, r7, r3
    16d4:	68aa      	ldr	r2, [r5, #8]
    16d6:	4293      	cmp	r3, r2
    16d8:	d30a      	bcc.n	16f0 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    16da:	4640      	mov	r0, r8
    16dc:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    16de:	7c23      	ldrb	r3, [r4, #16]
    16e0:	2b01      	cmp	r3, #1
    16e2:	d1ef      	bne.n	16c4 <timer_process_counted+0x48>
			tmp->time_label = time;
    16e4:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    16e6:	463a      	mov	r2, r7
    16e8:	4621      	mov	r1, r4
    16ea:	4640      	mov	r0, r8
    16ec:	47d0      	blx	sl
    16ee:	e7e9      	b.n	16c4 <timer_process_counted+0x48>
    16f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    16f4:	00001ae5 	.word	0x00001ae5
    16f8:	00001625 	.word	0x00001625

000016fc <timer_init>:
{
    16fc:	b538      	push	{r3, r4, r5, lr}
    16fe:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    1700:	4604      	mov	r4, r0
    1702:	b178      	cbz	r0, 1724 <timer_init+0x28>
    1704:	1c08      	adds	r0, r1, #0
    1706:	bf18      	it	ne
    1708:	2001      	movne	r0, #1
    170a:	223b      	movs	r2, #59	; 0x3b
    170c:	4906      	ldr	r1, [pc, #24]	; (1728 <timer_init+0x2c>)
    170e:	4b07      	ldr	r3, [pc, #28]	; (172c <timer_init+0x30>)
    1710:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    1712:	4629      	mov	r1, r5
    1714:	4620      	mov	r0, r4
    1716:	4b06      	ldr	r3, [pc, #24]	; (1730 <timer_init+0x34>)
    1718:	4798      	blx	r3
	descr->time                           = 0;
    171a:	2000      	movs	r0, #0
    171c:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    171e:	4b05      	ldr	r3, [pc, #20]	; (1734 <timer_init+0x38>)
    1720:	6023      	str	r3, [r4, #0]
}
    1722:	bd38      	pop	{r3, r4, r5, pc}
    1724:	2000      	movs	r0, #0
    1726:	e7f0      	b.n	170a <timer_init+0xe>
    1728:	00017754 	.word	0x00017754
    172c:	00001a89 	.word	0x00001a89
    1730:	00002681 	.word	0x00002681
    1734:	0000167d 	.word	0x0000167d

00001738 <timer_start>:
{
    1738:	b510      	push	{r4, lr}
	ASSERT(descr);
    173a:	4604      	mov	r4, r0
    173c:	2253      	movs	r2, #83	; 0x53
    173e:	4909      	ldr	r1, [pc, #36]	; (1764 <timer_start+0x2c>)
    1740:	3000      	adds	r0, #0
    1742:	bf18      	it	ne
    1744:	2001      	movne	r0, #1
    1746:	4b08      	ldr	r3, [pc, #32]	; (1768 <timer_start+0x30>)
    1748:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    174a:	4620      	mov	r0, r4
    174c:	4b07      	ldr	r3, [pc, #28]	; (176c <timer_start+0x34>)
    174e:	4798      	blx	r3
    1750:	b920      	cbnz	r0, 175c <timer_start+0x24>
	_timer_start(&descr->device);
    1752:	4620      	mov	r0, r4
    1754:	4b06      	ldr	r3, [pc, #24]	; (1770 <timer_start+0x38>)
    1756:	4798      	blx	r3
	return ERR_NONE;
    1758:	2000      	movs	r0, #0
    175a:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    175c:	f06f 0010 	mvn.w	r0, #16
}
    1760:	bd10      	pop	{r4, pc}
    1762:	bf00      	nop
    1764:	00017754 	.word	0x00017754
    1768:	00001a89 	.word	0x00001a89
    176c:	0000283d 	.word	0x0000283d
    1770:	00002829 	.word	0x00002829

00001774 <timer_add_task>:
{
    1774:	b570      	push	{r4, r5, r6, lr}
    1776:	b082      	sub	sp, #8
    1778:	460d      	mov	r5, r1
	ASSERT(descr && task);
    177a:	4604      	mov	r4, r0
    177c:	b318      	cbz	r0, 17c6 <timer_add_task+0x52>
    177e:	1c08      	adds	r0, r1, #0
    1780:	bf18      	it	ne
    1782:	2001      	movne	r0, #1
    1784:	227a      	movs	r2, #122	; 0x7a
    1786:	491e      	ldr	r1, [pc, #120]	; (1800 <timer_add_task+0x8c>)
    1788:	4b1e      	ldr	r3, [pc, #120]	; (1804 <timer_add_task+0x90>)
    178a:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    178c:	7e23      	ldrb	r3, [r4, #24]
    178e:	f043 0301 	orr.w	r3, r3, #1
    1792:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
    1794:	f104 0614 	add.w	r6, r4, #20
    1798:	4629      	mov	r1, r5
    179a:	4630      	mov	r0, r6
    179c:	4b1a      	ldr	r3, [pc, #104]	; (1808 <timer_add_task+0x94>)
    179e:	4798      	blx	r3
    17a0:	b998      	cbnz	r0, 17ca <timer_add_task+0x56>
	task->time_label = descr->time;
    17a2:	6923      	ldr	r3, [r4, #16]
    17a4:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    17a6:	6922      	ldr	r2, [r4, #16]
    17a8:	4629      	mov	r1, r5
    17aa:	4630      	mov	r0, r6
    17ac:	4b17      	ldr	r3, [pc, #92]	; (180c <timer_add_task+0x98>)
    17ae:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    17b0:	7e23      	ldrb	r3, [r4, #24]
    17b2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    17b6:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    17b8:	7e23      	ldrb	r3, [r4, #24]
    17ba:	f013 0f02 	tst.w	r3, #2
    17be:	d110      	bne.n	17e2 <timer_add_task+0x6e>
	return ERR_NONE;
    17c0:	2000      	movs	r0, #0
}
    17c2:	b002      	add	sp, #8
    17c4:	bd70      	pop	{r4, r5, r6, pc}
    17c6:	2000      	movs	r0, #0
    17c8:	e7dc      	b.n	1784 <timer_add_task+0x10>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    17ca:	7e23      	ldrb	r3, [r4, #24]
    17cc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    17d0:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    17d2:	227f      	movs	r2, #127	; 0x7f
    17d4:	490a      	ldr	r1, [pc, #40]	; (1800 <timer_add_task+0x8c>)
    17d6:	2000      	movs	r0, #0
    17d8:	4b0a      	ldr	r3, [pc, #40]	; (1804 <timer_add_task+0x90>)
    17da:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    17dc:	f06f 0011 	mvn.w	r0, #17
    17e0:	e7ef      	b.n	17c2 <timer_add_task+0x4e>
		CRITICAL_SECTION_ENTER()
    17e2:	a801      	add	r0, sp, #4
    17e4:	4b0a      	ldr	r3, [pc, #40]	; (1810 <timer_add_task+0x9c>)
    17e6:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    17e8:	7e23      	ldrb	r3, [r4, #24]
    17ea:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    17ee:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    17f0:	4620      	mov	r0, r4
    17f2:	4b08      	ldr	r3, [pc, #32]	; (1814 <timer_add_task+0xa0>)
    17f4:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    17f6:	a801      	add	r0, sp, #4
    17f8:	4b07      	ldr	r3, [pc, #28]	; (1818 <timer_add_task+0xa4>)
    17fa:	4798      	blx	r3
	return ERR_NONE;
    17fc:	2000      	movs	r0, #0
    17fe:	e7e0      	b.n	17c2 <timer_add_task+0x4e>
    1800:	00017754 	.word	0x00017754
    1804:	00001a89 	.word	0x00001a89
    1808:	00001a8f 	.word	0x00001a8f
    180c:	00001625 	.word	0x00001625
    1810:	000014e5 	.word	0x000014e5
    1814:	00002855 	.word	0x00002855
    1818:	000014f3 	.word	0x000014f3

0000181c <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    181c:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    181e:	2300      	movs	r3, #0
    1820:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    1822:	69c3      	ldr	r3, [r0, #28]
    1824:	b11b      	cbz	r3, 182e <usart_transmission_complete+0x12>
    1826:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
    182a:	4610      	mov	r0, r2
    182c:	4798      	blx	r3
    182e:	bd08      	pop	{r3, pc}

00001830 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    1830:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    1832:	2300      	movs	r3, #0
    1834:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    1836:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1838:	b11b      	cbz	r3, 1842 <usart_error+0x12>
    183a:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
    183e:	4610      	mov	r0, r2
    1840:	4798      	blx	r3
    1842:	bd08      	pop	{r3, pc}

00001844 <usart_fill_rx_buffer>:
{
    1844:	b538      	push	{r3, r4, r5, lr}
    1846:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1848:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    184c:	302c      	adds	r0, #44	; 0x2c
    184e:	4b03      	ldr	r3, [pc, #12]	; (185c <usart_fill_rx_buffer+0x18>)
    1850:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    1852:	6a23      	ldr	r3, [r4, #32]
    1854:	b10b      	cbz	r3, 185a <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    1856:	4628      	mov	r0, r5
    1858:	4798      	blx	r3
    185a:	bd38      	pop	{r3, r4, r5, pc}
    185c:	00001b85 	.word	0x00001b85

00001860 <usart_async_write>:
{
    1860:	b570      	push	{r4, r5, r6, lr}
    1862:	460e      	mov	r6, r1
    1864:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
    1866:	4604      	mov	r4, r0
    1868:	b1e0      	cbz	r0, 18a4 <usart_async_write+0x44>
    186a:	b1e9      	cbz	r1, 18a8 <usart_async_write+0x48>
    186c:	1c10      	adds	r0, r2, #0
    186e:	bf18      	it	ne
    1870:	2001      	movne	r0, #1
    1872:	f240 123b 	movw	r2, #315	; 0x13b
    1876:	490f      	ldr	r1, [pc, #60]	; (18b4 <usart_async_write+0x54>)
    1878:	4b0f      	ldr	r3, [pc, #60]	; (18b8 <usart_async_write+0x58>)
    187a:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    187c:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    1880:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    1884:	429a      	cmp	r2, r3
    1886:	d111      	bne.n	18ac <usart_async_write+0x4c>
	descr->tx_buffer        = (uint8_t *)buf;
    1888:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    188a:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
    188e:	2300      	movs	r3, #0
    1890:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    1894:	2301      	movs	r3, #1
    1896:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    1898:	f104 0008 	add.w	r0, r4, #8
    189c:	4b07      	ldr	r3, [pc, #28]	; (18bc <usart_async_write+0x5c>)
    189e:	4798      	blx	r3
	return (int32_t)length;
    18a0:	4628      	mov	r0, r5
    18a2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    18a4:	2000      	movs	r0, #0
    18a6:	e7e4      	b.n	1872 <usart_async_write+0x12>
    18a8:	2000      	movs	r0, #0
    18aa:	e7e2      	b.n	1872 <usart_async_write+0x12>
		return ERR_NO_RESOURCE;
    18ac:	f06f 001b 	mvn.w	r0, #27
}
    18b0:	bd70      	pop	{r4, r5, r6, pc}
    18b2:	bf00      	nop
    18b4:	0001776c 	.word	0x0001776c
    18b8:	00001a89 	.word	0x00001a89
    18bc:	00002073 	.word	0x00002073

000018c0 <usart_process_byte_sent>:
{
    18c0:	b510      	push	{r4, lr}
    18c2:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    18c4:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    18c6:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    18ca:	429a      	cmp	r2, r3
    18cc:	d009      	beq.n	18e2 <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    18ce:	6c02      	ldr	r2, [r0, #64]	; 0x40
    18d0:	1c59      	adds	r1, r3, #1
    18d2:	8781      	strh	r1, [r0, #60]	; 0x3c
    18d4:	5cd1      	ldrb	r1, [r2, r3]
    18d6:	4b04      	ldr	r3, [pc, #16]	; (18e8 <usart_process_byte_sent+0x28>)
    18d8:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    18da:	4620      	mov	r0, r4
    18dc:	4b03      	ldr	r3, [pc, #12]	; (18ec <usart_process_byte_sent+0x2c>)
    18de:	4798      	blx	r3
    18e0:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    18e2:	4b03      	ldr	r3, [pc, #12]	; (18f0 <usart_process_byte_sent+0x30>)
    18e4:	4798      	blx	r3
    18e6:	bd10      	pop	{r4, pc}
    18e8:	0000206d 	.word	0x0000206d
    18ec:	00002073 	.word	0x00002073
    18f0:	0000207b 	.word	0x0000207b

000018f4 <usart_async_read>:
{
    18f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    18f8:	b082      	sub	sp, #8
    18fa:	460f      	mov	r7, r1
    18fc:	4690      	mov	r8, r2
	ASSERT(descr && buf && length);
    18fe:	4606      	mov	r6, r0
    1900:	b1a0      	cbz	r0, 192c <usart_async_read+0x38>
    1902:	b199      	cbz	r1, 192c <usart_async_read+0x38>
    1904:	2a00      	cmp	r2, #0
    1906:	d12d      	bne.n	1964 <usart_async_read+0x70>
    1908:	f44f 72ac 	mov.w	r2, #344	; 0x158
    190c:	4929      	ldr	r1, [pc, #164]	; (19b4 <usart_async_read+0xc0>)
    190e:	2000      	movs	r0, #0
    1910:	4b29      	ldr	r3, [pc, #164]	; (19b8 <usart_async_read+0xc4>)
    1912:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1914:	a801      	add	r0, sp, #4
    1916:	4b29      	ldr	r3, [pc, #164]	; (19bc <usart_async_read+0xc8>)
    1918:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    191a:	f106 0034 	add.w	r0, r6, #52	; 0x34
    191e:	4b28      	ldr	r3, [pc, #160]	; (19c0 <usart_async_read+0xcc>)
    1920:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    1922:	a801      	add	r0, sp, #4
    1924:	4b27      	ldr	r3, [pc, #156]	; (19c4 <usart_async_read+0xd0>)
    1926:	4798      	blx	r3
	uint16_t                       was_read = 0;
    1928:	2500      	movs	r5, #0
	return (int32_t)was_read;
    192a:	e03e      	b.n	19aa <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    192c:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1930:	4920      	ldr	r1, [pc, #128]	; (19b4 <usart_async_read+0xc0>)
    1932:	2000      	movs	r0, #0
    1934:	4b20      	ldr	r3, [pc, #128]	; (19b8 <usart_async_read+0xc4>)
    1936:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1938:	a801      	add	r0, sp, #4
    193a:	4b20      	ldr	r3, [pc, #128]	; (19bc <usart_async_read+0xc8>)
    193c:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    193e:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    1942:	4650      	mov	r0, sl
    1944:	4b1e      	ldr	r3, [pc, #120]	; (19c0 <usart_async_read+0xcc>)
    1946:	4798      	blx	r3
    1948:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    194a:	a801      	add	r0, sp, #4
    194c:	4b1d      	ldr	r3, [pc, #116]	; (19c4 <usart_async_read+0xd0>)
    194e:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    1950:	f1b9 0f00 	cmp.w	r9, #0
    1954:	d004      	beq.n	1960 <usart_async_read+0x6c>
    1956:	f1b8 0f00 	cmp.w	r8, #0
    195a:	d119      	bne.n	1990 <usart_async_read+0x9c>
	uint16_t                       was_read = 0;
    195c:	2500      	movs	r5, #0
    195e:	e024      	b.n	19aa <usart_async_read+0xb6>
    1960:	2500      	movs	r5, #0
    1962:	e022      	b.n	19aa <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    1964:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1968:	4912      	ldr	r1, [pc, #72]	; (19b4 <usart_async_read+0xc0>)
    196a:	2001      	movs	r0, #1
    196c:	4b12      	ldr	r3, [pc, #72]	; (19b8 <usart_async_read+0xc4>)
    196e:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1970:	a801      	add	r0, sp, #4
    1972:	4b12      	ldr	r3, [pc, #72]	; (19bc <usart_async_read+0xc8>)
    1974:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1976:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    197a:	4650      	mov	r0, sl
    197c:	4b10      	ldr	r3, [pc, #64]	; (19c0 <usart_async_read+0xcc>)
    197e:	4798      	blx	r3
    1980:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    1982:	a801      	add	r0, sp, #4
    1984:	4b0f      	ldr	r3, [pc, #60]	; (19c4 <usart_async_read+0xd0>)
    1986:	4798      	blx	r3
	uint16_t                       was_read = 0;
    1988:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
    198a:	f1b9 0f00 	cmp.w	r9, #0
    198e:	d00c      	beq.n	19aa <usart_async_read+0xb6>
{
    1990:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    1992:	4e0d      	ldr	r6, [pc, #52]	; (19c8 <usart_async_read+0xd4>)
    1994:	1c60      	adds	r0, r4, #1
    1996:	b285      	uxth	r5, r0
    1998:	1939      	adds	r1, r7, r4
    199a:	4650      	mov	r0, sl
    199c:	47b0      	blx	r6
    199e:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
    19a0:	454c      	cmp	r4, r9
    19a2:	d202      	bcs.n	19aa <usart_async_read+0xb6>
    19a4:	b2a3      	uxth	r3, r4
    19a6:	4598      	cmp	r8, r3
    19a8:	d8f4      	bhi.n	1994 <usart_async_read+0xa0>
}
    19aa:	4628      	mov	r0, r5
    19ac:	b002      	add	sp, #8
    19ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    19b2:	bf00      	nop
    19b4:	0001776c 	.word	0x0001776c
    19b8:	00001a89 	.word	0x00001a89
    19bc:	000014e5 	.word	0x000014e5
    19c0:	00001bc5 	.word	0x00001bc5
    19c4:	000014f3 	.word	0x000014f3
    19c8:	00001b41 	.word	0x00001b41

000019cc <usart_async_init>:
{
    19cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    19ce:	460d      	mov	r5, r1
    19d0:	4616      	mov	r6, r2
    19d2:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    19d4:	4604      	mov	r4, r0
    19d6:	b320      	cbz	r0, 1a22 <usart_async_init+0x56>
    19d8:	b329      	cbz	r1, 1a26 <usart_async_init+0x5a>
    19da:	b332      	cbz	r2, 1a2a <usart_async_init+0x5e>
    19dc:	1c18      	adds	r0, r3, #0
    19de:	bf18      	it	ne
    19e0:	2001      	movne	r0, #1
    19e2:	223a      	movs	r2, #58	; 0x3a
    19e4:	4913      	ldr	r1, [pc, #76]	; (1a34 <usart_async_init+0x68>)
    19e6:	4b14      	ldr	r3, [pc, #80]	; (1a38 <usart_async_init+0x6c>)
    19e8:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    19ea:	463a      	mov	r2, r7
    19ec:	4631      	mov	r1, r6
    19ee:	f104 0034 	add.w	r0, r4, #52	; 0x34
    19f2:	4b12      	ldr	r3, [pc, #72]	; (1a3c <usart_async_init+0x70>)
    19f4:	4798      	blx	r3
    19f6:	b9d0      	cbnz	r0, 1a2e <usart_async_init+0x62>
	init_status = _usart_async_init(&descr->device, hw);
    19f8:	4629      	mov	r1, r5
    19fa:	f104 0008 	add.w	r0, r4, #8
    19fe:	4b10      	ldr	r3, [pc, #64]	; (1a40 <usart_async_init+0x74>)
    1a00:	4798      	blx	r3
	if (init_status) {
    1a02:	4603      	mov	r3, r0
    1a04:	b958      	cbnz	r0, 1a1e <usart_async_init+0x52>
	descr->io.read  = usart_async_read;
    1a06:	4a0f      	ldr	r2, [pc, #60]	; (1a44 <usart_async_init+0x78>)
    1a08:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    1a0a:	4a0f      	ldr	r2, [pc, #60]	; (1a48 <usart_async_init+0x7c>)
    1a0c:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    1a0e:	4a0f      	ldr	r2, [pc, #60]	; (1a4c <usart_async_init+0x80>)
    1a10:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    1a12:	4a0f      	ldr	r2, [pc, #60]	; (1a50 <usart_async_init+0x84>)
    1a14:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    1a16:	4a0f      	ldr	r2, [pc, #60]	; (1a54 <usart_async_init+0x88>)
    1a18:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    1a1a:	4a0f      	ldr	r2, [pc, #60]	; (1a58 <usart_async_init+0x8c>)
    1a1c:	6162      	str	r2, [r4, #20]
}
    1a1e:	4618      	mov	r0, r3
    1a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1a22:	2000      	movs	r0, #0
    1a24:	e7dd      	b.n	19e2 <usart_async_init+0x16>
    1a26:	2000      	movs	r0, #0
    1a28:	e7db      	b.n	19e2 <usart_async_init+0x16>
    1a2a:	2000      	movs	r0, #0
    1a2c:	e7d9      	b.n	19e2 <usart_async_init+0x16>
		return ERR_INVALID_ARG;
    1a2e:	f06f 030c 	mvn.w	r3, #12
    1a32:	e7f4      	b.n	1a1e <usart_async_init+0x52>
    1a34:	0001776c 	.word	0x0001776c
    1a38:	00001a89 	.word	0x00001a89
    1a3c:	00001af1 	.word	0x00001af1
    1a40:	00001fd5 	.word	0x00001fd5
    1a44:	000018f5 	.word	0x000018f5
    1a48:	00001861 	.word	0x00001861
    1a4c:	000018c1 	.word	0x000018c1
    1a50:	00001845 	.word	0x00001845
    1a54:	0000181d 	.word	0x0000181d
    1a58:	00001831 	.word	0x00001831

00001a5c <usart_async_enable>:
{
    1a5c:	b510      	push	{r4, lr}
	ASSERT(descr);
    1a5e:	4604      	mov	r4, r0
    1a60:	2261      	movs	r2, #97	; 0x61
    1a62:	4906      	ldr	r1, [pc, #24]	; (1a7c <usart_async_enable+0x20>)
    1a64:	3000      	adds	r0, #0
    1a66:	bf18      	it	ne
    1a68:	2001      	movne	r0, #1
    1a6a:	4b05      	ldr	r3, [pc, #20]	; (1a80 <usart_async_enable+0x24>)
    1a6c:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    1a6e:	f104 0008 	add.w	r0, r4, #8
    1a72:	4b04      	ldr	r3, [pc, #16]	; (1a84 <usart_async_enable+0x28>)
    1a74:	4798      	blx	r3
}
    1a76:	2000      	movs	r0, #0
    1a78:	bd10      	pop	{r4, pc}
    1a7a:	bf00      	nop
    1a7c:	0001776c 	.word	0x0001776c
    1a80:	00001a89 	.word	0x00001a89
    1a84:	00002059 	.word	0x00002059

00001a88 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1a88:	b900      	cbnz	r0, 1a8c <assert+0x4>
		__asm("BKPT #0");
    1a8a:	be00      	bkpt	0x0000
    1a8c:	4770      	bx	lr

00001a8e <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1a8e:	6803      	ldr	r3, [r0, #0]
    1a90:	b14b      	cbz	r3, 1aa6 <is_list_element+0x18>
		if (it == element) {
    1a92:	428b      	cmp	r3, r1
    1a94:	d009      	beq.n	1aaa <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    1a96:	681b      	ldr	r3, [r3, #0]
    1a98:	b11b      	cbz	r3, 1aa2 <is_list_element+0x14>
		if (it == element) {
    1a9a:	4299      	cmp	r1, r3
    1a9c:	d1fb      	bne.n	1a96 <is_list_element+0x8>
			return true;
    1a9e:	2001      	movs	r0, #1
		}
	}

	return false;
}
    1aa0:	4770      	bx	lr
	return false;
    1aa2:	2000      	movs	r0, #0
    1aa4:	4770      	bx	lr
    1aa6:	2000      	movs	r0, #0
    1aa8:	4770      	bx	lr
			return true;
    1aaa:	2001      	movs	r0, #1
    1aac:	4770      	bx	lr
	...

00001ab0 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1ab0:	b538      	push	{r3, r4, r5, lr}
    1ab2:	4604      	mov	r4, r0
    1ab4:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    1ab6:	4b06      	ldr	r3, [pc, #24]	; (1ad0 <list_insert_as_head+0x20>)
    1ab8:	4798      	blx	r3
    1aba:	f080 0001 	eor.w	r0, r0, #1
    1abe:	2239      	movs	r2, #57	; 0x39
    1ac0:	4904      	ldr	r1, [pc, #16]	; (1ad4 <list_insert_as_head+0x24>)
    1ac2:	b2c0      	uxtb	r0, r0
    1ac4:	4b04      	ldr	r3, [pc, #16]	; (1ad8 <list_insert_as_head+0x28>)
    1ac6:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1ac8:	6823      	ldr	r3, [r4, #0]
    1aca:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    1acc:	6025      	str	r5, [r4, #0]
    1ace:	bd38      	pop	{r3, r4, r5, pc}
    1ad0:	00001a8f 	.word	0x00001a8f
    1ad4:	0001778c 	.word	0x0001778c
    1ad8:	00001a89 	.word	0x00001a89

00001adc <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1adc:	6803      	ldr	r3, [r0, #0]
    1ade:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    1ae0:	6001      	str	r1, [r0, #0]
    1ae2:	4770      	bx	lr

00001ae4 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    1ae4:	6803      	ldr	r3, [r0, #0]
    1ae6:	b10b      	cbz	r3, 1aec <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    1ae8:	681a      	ldr	r2, [r3, #0]
    1aea:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    1aec:	4618      	mov	r0, r3
    1aee:	4770      	bx	lr

00001af0 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    1af0:	b570      	push	{r4, r5, r6, lr}
    1af2:	460e      	mov	r6, r1
    1af4:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    1af6:	4604      	mov	r4, r0
    1af8:	b178      	cbz	r0, 1b1a <ringbuffer_init+0x2a>
    1afa:	b181      	cbz	r1, 1b1e <ringbuffer_init+0x2e>
    1afc:	b1a2      	cbz	r2, 1b28 <ringbuffer_init+0x38>
    1afe:	2001      	movs	r0, #1
    1b00:	2228      	movs	r2, #40	; 0x28
    1b02:	490d      	ldr	r1, [pc, #52]	; (1b38 <ringbuffer_init+0x48>)
    1b04:	4b0d      	ldr	r3, [pc, #52]	; (1b3c <ringbuffer_init+0x4c>)
    1b06:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    1b08:	1e6b      	subs	r3, r5, #1
    1b0a:	421d      	tst	r5, r3
    1b0c:	d109      	bne.n	1b22 <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    1b0e:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    1b10:	2000      	movs	r0, #0
    1b12:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    1b14:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    1b16:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    1b18:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    1b1a:	2000      	movs	r0, #0
    1b1c:	e7f0      	b.n	1b00 <ringbuffer_init+0x10>
    1b1e:	2000      	movs	r0, #0
    1b20:	e7ee      	b.n	1b00 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    1b22:	f06f 000c 	mvn.w	r0, #12
    1b26:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    1b28:	2228      	movs	r2, #40	; 0x28
    1b2a:	4903      	ldr	r1, [pc, #12]	; (1b38 <ringbuffer_init+0x48>)
    1b2c:	2000      	movs	r0, #0
    1b2e:	4b03      	ldr	r3, [pc, #12]	; (1b3c <ringbuffer_init+0x4c>)
    1b30:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    1b32:	1e6b      	subs	r3, r5, #1
    1b34:	e7eb      	b.n	1b0e <ringbuffer_init+0x1e>
    1b36:	bf00      	nop
    1b38:	000177ac 	.word	0x000177ac
    1b3c:	00001a89 	.word	0x00001a89

00001b40 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    1b40:	b538      	push	{r3, r4, r5, lr}
    1b42:	460d      	mov	r5, r1
	ASSERT(rb && data);
    1b44:	4604      	mov	r4, r0
    1b46:	b1a0      	cbz	r0, 1b72 <ringbuffer_get+0x32>
    1b48:	1c08      	adds	r0, r1, #0
    1b4a:	bf18      	it	ne
    1b4c:	2001      	movne	r0, #1
    1b4e:	2240      	movs	r2, #64	; 0x40
    1b50:	490a      	ldr	r1, [pc, #40]	; (1b7c <ringbuffer_get+0x3c>)
    1b52:	4b0b      	ldr	r3, [pc, #44]	; (1b80 <ringbuffer_get+0x40>)
    1b54:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    1b56:	68a3      	ldr	r3, [r4, #8]
    1b58:	68e2      	ldr	r2, [r4, #12]
    1b5a:	429a      	cmp	r2, r3
    1b5c:	d00b      	beq.n	1b76 <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    1b5e:	6862      	ldr	r2, [r4, #4]
    1b60:	4013      	ands	r3, r2
    1b62:	6822      	ldr	r2, [r4, #0]
    1b64:	5cd3      	ldrb	r3, [r2, r3]
    1b66:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    1b68:	68a3      	ldr	r3, [r4, #8]
    1b6a:	3301      	adds	r3, #1
    1b6c:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    1b6e:	2000      	movs	r0, #0
    1b70:	bd38      	pop	{r3, r4, r5, pc}
    1b72:	2000      	movs	r0, #0
    1b74:	e7eb      	b.n	1b4e <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    1b76:	f06f 0009 	mvn.w	r0, #9
}
    1b7a:	bd38      	pop	{r3, r4, r5, pc}
    1b7c:	000177ac 	.word	0x000177ac
    1b80:	00001a89 	.word	0x00001a89

00001b84 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    1b84:	b538      	push	{r3, r4, r5, lr}
    1b86:	460d      	mov	r5, r1
	ASSERT(rb);
    1b88:	4604      	mov	r4, r0
    1b8a:	2251      	movs	r2, #81	; 0x51
    1b8c:	490b      	ldr	r1, [pc, #44]	; (1bbc <ringbuffer_put+0x38>)
    1b8e:	3000      	adds	r0, #0
    1b90:	bf18      	it	ne
    1b92:	2001      	movne	r0, #1
    1b94:	4b0a      	ldr	r3, [pc, #40]	; (1bc0 <ringbuffer_put+0x3c>)
    1b96:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    1b98:	68e3      	ldr	r3, [r4, #12]
    1b9a:	6862      	ldr	r2, [r4, #4]
    1b9c:	4013      	ands	r3, r2
    1b9e:	6822      	ldr	r2, [r4, #0]
    1ba0:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    1ba2:	68e3      	ldr	r3, [r4, #12]
    1ba4:	6861      	ldr	r1, [r4, #4]
    1ba6:	68a2      	ldr	r2, [r4, #8]
    1ba8:	1a9a      	subs	r2, r3, r2
    1baa:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    1bac:	bf84      	itt	hi
    1bae:	1a59      	subhi	r1, r3, r1
    1bb0:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    1bb2:	3301      	adds	r3, #1
    1bb4:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    1bb6:	2000      	movs	r0, #0
    1bb8:	bd38      	pop	{r3, r4, r5, pc}
    1bba:	bf00      	nop
    1bbc:	000177ac 	.word	0x000177ac
    1bc0:	00001a89 	.word	0x00001a89

00001bc4 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    1bc4:	b510      	push	{r4, lr}
	ASSERT(rb);
    1bc6:	4604      	mov	r4, r0
    1bc8:	2267      	movs	r2, #103	; 0x67
    1bca:	4905      	ldr	r1, [pc, #20]	; (1be0 <ringbuffer_num+0x1c>)
    1bcc:	3000      	adds	r0, #0
    1bce:	bf18      	it	ne
    1bd0:	2001      	movne	r0, #1
    1bd2:	4b04      	ldr	r3, [pc, #16]	; (1be4 <ringbuffer_num+0x20>)
    1bd4:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    1bd6:	68e0      	ldr	r0, [r4, #12]
    1bd8:	68a3      	ldr	r3, [r4, #8]
}
    1bda:	1ac0      	subs	r0, r0, r3
    1bdc:	bd10      	pop	{r4, pc}
    1bde:	bf00      	nop
    1be0:	000177ac 	.word	0x000177ac
    1be4:	00001a89 	.word	0x00001a89

00001be8 <_irq_set>:
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1be8:	0943      	lsrs	r3, r0, #5
    1bea:	f000 001f 	and.w	r0, r0, #31
    1bee:	2201      	movs	r2, #1
    1bf0:	fa02 f000 	lsl.w	r0, r2, r0
    1bf4:	3340      	adds	r3, #64	; 0x40
    1bf6:	4a02      	ldr	r2, [pc, #8]	; (1c00 <_irq_set+0x18>)
    1bf8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1bfc:	4770      	bx	lr
    1bfe:	bf00      	nop
    1c00:	e000e100 	.word	0xe000e100

00001c04 <_get_cycles_for_us>:
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    1c04:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1c08:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    1c0c:	3002      	adds	r0, #2
    1c0e:	4b02      	ldr	r3, [pc, #8]	; (1c18 <_get_cycles_for_us+0x14>)
    1c10:	fba3 3000 	umull	r3, r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1c14:	0840      	lsrs	r0, r0, #1
    1c16:	4770      	bx	lr
    1c18:	aaaaaaab 	.word	0xaaaaaaab

00001c1c <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    1c1c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1c20:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    1c24:	3002      	adds	r0, #2
    1c26:	4b04      	ldr	r3, [pc, #16]	; (1c38 <_get_cycles_for_ms+0x1c>)
    1c28:	fba3 3000 	umull	r3, r0, r3, r0
    1c2c:	0840      	lsrs	r0, r0, #1
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    1c32:	fb03 f000 	mul.w	r0, r3, r0
    1c36:	4770      	bx	lr
    1c38:	aaaaaaab 	.word	0xaaaaaaab

00001c3c <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    1c3c:	4770      	bx	lr
	...

00001c40 <_delay_cycles>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    1c40:	3901      	subs	r1, #1
    1c42:	d8fd      	bhi.n	1c40 <_delay_cycles>
    1c44:	4770      	bx	lr
    1c46:	bf00      	nop

00001c48 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1c48:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    1c4a:	4a09      	ldr	r2, [pc, #36]	; (1c70 <_init_chip+0x28>)
    1c4c:	8813      	ldrh	r3, [r2, #0]
    1c4e:	b29b      	uxth	r3, r3
    1c50:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    1c54:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    1c56:	4b07      	ldr	r3, [pc, #28]	; (1c74 <_init_chip+0x2c>)
    1c58:	4798      	blx	r3
	_oscctrl_init_sources();
    1c5a:	4b07      	ldr	r3, [pc, #28]	; (1c78 <_init_chip+0x30>)
    1c5c:	4798      	blx	r3
	_mclk_init();
    1c5e:	4b07      	ldr	r3, [pc, #28]	; (1c7c <_init_chip+0x34>)
    1c60:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    1c62:	4b07      	ldr	r3, [pc, #28]	; (1c80 <_init_chip+0x38>)
    1c64:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1c66:	f640 70ff 	movw	r0, #4095	; 0xfff
    1c6a:	4b06      	ldr	r3, [pc, #24]	; (1c84 <_init_chip+0x3c>)
    1c6c:	4798      	blx	r3
    1c6e:	bd08      	pop	{r3, pc}
    1c70:	41004000 	.word	0x41004000
    1c74:	00001cb9 	.word	0x00001cb9
    1c78:	00001cd9 	.word	0x00001cd9
    1c7c:	00001cad 	.word	0x00001cad
    1c80:	00001cdd 	.word	0x00001cdd
    1c84:	00001c89 	.word	0x00001c89

00001c88 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1c88:	f010 0f01 	tst.w	r0, #1
    1c8c:	d008      	beq.n	1ca0 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1c8e:	4a05      	ldr	r2, [pc, #20]	; (1ca4 <_gclk_init_generators_by_fref+0x1c>)
    1c90:	4b05      	ldr	r3, [pc, #20]	; (1ca8 <_gclk_init_generators_by_fref+0x20>)
    1c92:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1c94:	4619      	mov	r1, r3
    1c96:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1c9a:	684b      	ldr	r3, [r1, #4]
    1c9c:	4213      	tst	r3, r2
    1c9e:	d1fc      	bne.n	1c9a <_gclk_init_generators_by_fref+0x12>
    1ca0:	4770      	bx	lr
    1ca2:	bf00      	nop
    1ca4:	00010107 	.word	0x00010107
    1ca8:	40001c00 	.word	0x40001c00

00001cac <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1cac:	2201      	movs	r2, #1
    1cae:	4b01      	ldr	r3, [pc, #4]	; (1cb4 <_mclk_init+0x8>)
    1cb0:	715a      	strb	r2, [r3, #5]
    1cb2:	4770      	bx	lr
    1cb4:	40000800 	.word	0x40000800

00001cb8 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    1cb8:	4b06      	ldr	r3, [pc, #24]	; (1cd4 <_osc32kctrl_init_sources+0x1c>)
    1cba:	f242 328e 	movw	r2, #9102	; 0x238e
    1cbe:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    1cc0:	2200      	movs	r2, #0
    1cc2:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    1cc4:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1cc6:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1cc8:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1ccc:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1cce:	2201      	movs	r2, #1
    1cd0:	741a      	strb	r2, [r3, #16]
    1cd2:	4770      	bx	lr
    1cd4:	40001400 	.word	0x40001400

00001cd8 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    1cd8:	4770      	bx	lr
	...

00001cdc <_oscctrl_init_referenced_generators>:

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    1cdc:	4a0e      	ldr	r2, [pc, #56]	; (1d18 <_oscctrl_init_referenced_generators+0x3c>)
    1cde:	4b0f      	ldr	r3, [pc, #60]	; (1d1c <_oscctrl_init_referenced_generators+0x40>)
    1ce0:	635a      	str	r2, [r3, #52]	; 0x34
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1ce2:	461a      	mov	r2, r3
    1ce4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    1ce6:	f013 0f06 	tst.w	r3, #6
    1cea:	d1fb      	bne.n	1ce4 <_oscctrl_init_referenced_generators+0x8>

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    1cec:	4b0b      	ldr	r3, [pc, #44]	; (1d1c <_oscctrl_init_referenced_generators+0x40>)
    1cee:	f44f 6202 	mov.w	r2, #2080	; 0x820
    1cf2:	639a      	str	r2, [r3, #56]	; 0x38
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    1cf4:	2202      	movs	r2, #2
    1cf6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1cfa:	461a      	mov	r2, r3
    1cfc:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    1cfe:	f013 0f02 	tst.w	r3, #2
    1d02:	d1fb      	bne.n	1cfc <_oscctrl_init_referenced_generators+0x20>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    1d04:	4b05      	ldr	r3, [pc, #20]	; (1d1c <_oscctrl_init_referenced_generators+0x40>)
    1d06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    1d08:	f012 0f01 	tst.w	r2, #1
    1d0c:	d103      	bne.n	1d16 <_oscctrl_init_referenced_generators+0x3a>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    1d0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    1d10:	f012 0f02 	tst.w	r2, #2
    1d14:	d0f7      	beq.n	1d06 <_oscctrl_init_referenced_generators+0x2a>
    1d16:	4770      	bx	lr
    1d18:	00010e4d 	.word	0x00010e4d
    1d1c:	40001000 	.word	0x40001000

00001d20 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    1d20:	b500      	push	{lr}
    1d22:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    1d24:	4b0d      	ldr	r3, [pc, #52]	; (1d5c <RAMECC_Handler+0x3c>)
    1d26:	789b      	ldrb	r3, [r3, #2]
    1d28:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    1d2a:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    1d2c:	9b01      	ldr	r3, [sp, #4]
    1d2e:	f013 0f02 	tst.w	r3, #2
    1d32:	d006      	beq.n	1d42 <RAMECC_Handler+0x22>
    1d34:	4b0a      	ldr	r3, [pc, #40]	; (1d60 <RAMECC_Handler+0x40>)
    1d36:	681b      	ldr	r3, [r3, #0]
    1d38:	b11b      	cbz	r3, 1d42 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    1d3a:	4a08      	ldr	r2, [pc, #32]	; (1d5c <RAMECC_Handler+0x3c>)
    1d3c:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1d3e:	4798      	blx	r3
    1d40:	e009      	b.n	1d56 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    1d42:	9b01      	ldr	r3, [sp, #4]
    1d44:	f013 0f01 	tst.w	r3, #1
    1d48:	d005      	beq.n	1d56 <RAMECC_Handler+0x36>
    1d4a:	4b05      	ldr	r3, [pc, #20]	; (1d60 <RAMECC_Handler+0x40>)
    1d4c:	685b      	ldr	r3, [r3, #4]
    1d4e:	b113      	cbz	r3, 1d56 <RAMECC_Handler+0x36>
    1d50:	4a02      	ldr	r2, [pc, #8]	; (1d5c <RAMECC_Handler+0x3c>)
    1d52:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1d54:	4798      	blx	r3
	} else {
		return;
	}
}
    1d56:	b003      	add	sp, #12
    1d58:	f85d fb04 	ldr.w	pc, [sp], #4
    1d5c:	41020000 	.word	0x41020000
    1d60:	2000ac84 	.word	0x2000ac84

00001d64 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1d64:	b470      	push	{r4, r5, r6}
    1d66:	b089      	sub	sp, #36	; 0x24
    1d68:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1d6a:	466c      	mov	r4, sp
    1d6c:	4d0d      	ldr	r5, [pc, #52]	; (1da4 <_sercom_get_hardware_index+0x40>)
    1d6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1d70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1d72:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1d76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1d7a:	9b00      	ldr	r3, [sp, #0]
    1d7c:	42b3      	cmp	r3, r6
    1d7e:	d00d      	beq.n	1d9c <_sercom_get_hardware_index+0x38>
    1d80:	4631      	mov	r1, r6
    1d82:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1d84:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1d86:	f853 2b04 	ldr.w	r2, [r3], #4
    1d8a:	428a      	cmp	r2, r1
    1d8c:	d007      	beq.n	1d9e <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1d8e:	3001      	adds	r0, #1
    1d90:	2808      	cmp	r0, #8
    1d92:	d1f8      	bne.n	1d86 <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    1d94:	2000      	movs	r0, #0
}
    1d96:	b009      	add	sp, #36	; 0x24
    1d98:	bc70      	pop	{r4, r5, r6}
    1d9a:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1d9c:	2000      	movs	r0, #0
			return i;
    1d9e:	b2c0      	uxtb	r0, r0
    1da0:	e7f9      	b.n	1d96 <_sercom_get_hardware_index+0x32>
    1da2:	bf00      	nop
    1da4:	000177d0 	.word	0x000177d0

00001da8 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    1da8:	b510      	push	{r4, lr}
	void *hw = device->hw;
    1daa:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1dac:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    1dae:	f013 0f01 	tst.w	r3, #1
    1db2:	d003      	beq.n	1dbc <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    1db4:	7da3      	ldrb	r3, [r4, #22]
    1db6:	f013 0f01 	tst.w	r3, #1
    1dba:	d112      	bne.n	1de2 <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1dbc:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    1dbe:	f013 0f02 	tst.w	r3, #2
    1dc2:	d003      	beq.n	1dcc <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    1dc4:	7da3      	ldrb	r3, [r4, #22]
    1dc6:	f013 0f02 	tst.w	r3, #2
    1dca:	d10f      	bne.n	1dec <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1dcc:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    1dce:	f013 0f04 	tst.w	r3, #4
    1dd2:	d015      	beq.n	1e00 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    1dd4:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    1dd6:	f003 0337 	and.w	r3, r3, #55	; 0x37
    1dda:	b163      	cbz	r3, 1df6 <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1ddc:	23ff      	movs	r3, #255	; 0xff
    1dde:	8363      	strh	r3, [r4, #26]
    1de0:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    1de2:	2301      	movs	r3, #1
    1de4:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    1de6:	6803      	ldr	r3, [r0, #0]
    1de8:	4798      	blx	r3
    1dea:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    1dec:	2302      	movs	r3, #2
    1dee:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    1df0:	6883      	ldr	r3, [r0, #8]
    1df2:	4798      	blx	r3
    1df4:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    1df6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    1df8:	6843      	ldr	r3, [r0, #4]
    1dfa:	b2c9      	uxtb	r1, r1
    1dfc:	4798      	blx	r3
    1dfe:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    1e00:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    1e02:	09db      	lsrs	r3, r3, #7
    1e04:	d100      	bne.n	1e08 <_sercom_usart_interrupt_handler+0x60>
    1e06:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    1e08:	2380      	movs	r3, #128	; 0x80
    1e0a:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    1e0c:	68c3      	ldr	r3, [r0, #12]
    1e0e:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    1e10:	8b63      	ldrh	r3, [r4, #26]
    1e12:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1e14:	8363      	strh	r3, [r4, #26]
    1e16:	e7f6      	b.n	1e06 <_sercom_usart_interrupt_handler+0x5e>

00001e18 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    1e18:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    1e1a:	4b03      	ldr	r3, [pc, #12]	; (1e28 <_sercom_get_irq_num+0x10>)
    1e1c:	4798      	blx	r3
    1e1e:	0080      	lsls	r0, r0, #2
    1e20:	302e      	adds	r0, #46	; 0x2e
}
    1e22:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    1e26:	bd08      	pop	{r3, pc}
    1e28:	00001d65 	.word	0x00001d65

00001e2c <_usart_init>:
{
    1e2c:	b510      	push	{r4, lr}
    1e2e:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1e30:	4b21      	ldr	r3, [pc, #132]	; (1eb8 <_usart_init+0x8c>)
    1e32:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    1e34:	2802      	cmp	r0, #2
    1e36:	d005      	beq.n	1e44 <_usart_init+0x18>
	ASSERT(false);
    1e38:	f240 226b 	movw	r2, #619	; 0x26b
    1e3c:	491f      	ldr	r1, [pc, #124]	; (1ebc <_usart_init+0x90>)
    1e3e:	2000      	movs	r0, #0
    1e40:	4b1f      	ldr	r3, [pc, #124]	; (1ec0 <_usart_init+0x94>)
    1e42:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1e44:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1e46:	f013 0f01 	tst.w	r3, #1
    1e4a:	d119      	bne.n	1e80 <_usart_init+0x54>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1e4c:	69e3      	ldr	r3, [r4, #28]
    1e4e:	f013 0f03 	tst.w	r3, #3
    1e52:	d1fb      	bne.n	1e4c <_usart_init+0x20>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1e54:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    1e56:	f013 0f02 	tst.w	r3, #2
    1e5a:	d00b      	beq.n	1e74 <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1e5c:	6823      	ldr	r3, [r4, #0]
    1e5e:	f023 0302 	bic.w	r3, r3, #2
    1e62:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1e64:	69e3      	ldr	r3, [r4, #28]
    1e66:	f013 0f03 	tst.w	r3, #3
    1e6a:	d1fb      	bne.n	1e64 <_usart_init+0x38>
    1e6c:	69e3      	ldr	r3, [r4, #28]
    1e6e:	f013 0f02 	tst.w	r3, #2
    1e72:	d1fb      	bne.n	1e6c <_usart_init+0x40>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1e74:	2305      	movs	r3, #5
    1e76:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1e78:	69e3      	ldr	r3, [r4, #28]
    1e7a:	f013 0f03 	tst.w	r3, #3
    1e7e:	d1fb      	bne.n	1e78 <_usart_init+0x4c>
    1e80:	69e3      	ldr	r3, [r4, #28]
    1e82:	f013 0f01 	tst.w	r3, #1
    1e86:	d1fb      	bne.n	1e80 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1e88:	4b0e      	ldr	r3, [pc, #56]	; (1ec4 <_usart_init+0x98>)
    1e8a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1e8c:	69e3      	ldr	r3, [r4, #28]
    1e8e:	f013 0f03 	tst.w	r3, #3
    1e92:	d1fb      	bne.n	1e8c <_usart_init+0x60>
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1e94:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    1e98:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1e9a:	69e3      	ldr	r3, [r4, #28]
    1e9c:	f013 0f1f 	tst.w	r3, #31
    1ea0:	d1fb      	bne.n	1e9a <_usart_init+0x6e>
	((Sercom *)hw)->USART.CTRLC.reg = data;
    1ea2:	4b09      	ldr	r3, [pc, #36]	; (1ec8 <_usart_init+0x9c>)
    1ea4:	60a3      	str	r3, [r4, #8]
	((Sercom *)hw)->USART.BAUD.reg = data;
    1ea6:	f64f 4311 	movw	r3, #64529	; 0xfc11
    1eaa:	81a3      	strh	r3, [r4, #12]
	((Sercom *)hw)->USART.RXPL.reg = data;
    1eac:	2000      	movs	r0, #0
    1eae:	73a0      	strb	r0, [r4, #14]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1eb0:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
    1eb4:	bd10      	pop	{r4, pc}
    1eb6:	bf00      	nop
    1eb8:	00001d65 	.word	0x00001d65
    1ebc:	00017808 	.word	0x00017808
    1ec0:	00001a89 	.word	0x00001a89
    1ec4:	40100004 	.word	0x40100004
    1ec8:	00700002 	.word	0x00700002

00001ecc <_get_i2cm_index>:
{
    1ecc:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1ece:	4b07      	ldr	r3, [pc, #28]	; (1eec <_get_i2cm_index+0x20>)
    1ed0:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
    1ed2:	2803      	cmp	r0, #3
    1ed4:	d008      	beq.n	1ee8 <_get_i2cm_index+0x1c>
	ASSERT(false);
    1ed6:	f240 32ce 	movw	r2, #974	; 0x3ce
    1eda:	4905      	ldr	r1, [pc, #20]	; (1ef0 <_get_i2cm_index+0x24>)
    1edc:	2000      	movs	r0, #0
    1ede:	4b05      	ldr	r3, [pc, #20]	; (1ef4 <_get_i2cm_index+0x28>)
    1ee0:	4798      	blx	r3
	return -1;
    1ee2:	f04f 30ff 	mov.w	r0, #4294967295
}
    1ee6:	bd08      	pop	{r3, pc}
			return i;
    1ee8:	2000      	movs	r0, #0
    1eea:	bd08      	pop	{r3, pc}
    1eec:	00001d65 	.word	0x00001d65
    1ef0:	00017808 	.word	0x00017808
    1ef4:	00001a89 	.word	0x00001a89

00001ef8 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    1ef8:	b538      	push	{r3, r4, r5, lr}
    1efa:	4605      	mov	r5, r0
    1efc:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    1efe:	4608      	mov	r0, r1
    1f00:	4b32      	ldr	r3, [pc, #200]	; (1fcc <_i2c_m_sync_init_impl+0xd4>)
    1f02:	4798      	blx	r3
    1f04:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    1f06:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    1f08:	f013 0f01 	tst.w	r3, #1
    1f0c:	d122      	bne.n	1f54 <_i2c_m_sync_init_impl+0x5c>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    1f0e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1f12:	4a2f      	ldr	r2, [pc, #188]	; (1fd0 <_i2c_m_sync_init_impl+0xd8>)
    1f14:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1f18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1f1a:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f1e:	69e3      	ldr	r3, [r4, #28]
    1f20:	f013 0f03 	tst.w	r3, #3
    1f24:	d1fb      	bne.n	1f1e <_i2c_m_sync_init_impl+0x26>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1f26:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    1f28:	f013 0f02 	tst.w	r3, #2
    1f2c:	d00b      	beq.n	1f46 <_i2c_m_sync_init_impl+0x4e>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    1f2e:	6823      	ldr	r3, [r4, #0]
    1f30:	f023 0302 	bic.w	r3, r3, #2
    1f34:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f36:	69e3      	ldr	r3, [r4, #28]
    1f38:	f013 0f03 	tst.w	r3, #3
    1f3c:	d1fb      	bne.n	1f36 <_i2c_m_sync_init_impl+0x3e>
    1f3e:	69e3      	ldr	r3, [r4, #28]
    1f40:	f013 0f02 	tst.w	r3, #2
    1f44:	d1fb      	bne.n	1f3e <_i2c_m_sync_init_impl+0x46>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    1f46:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    1f4a:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f4c:	69e3      	ldr	r3, [r4, #28]
    1f4e:	f013 0f03 	tst.w	r3, #3
    1f52:	d1fb      	bne.n	1f4c <_i2c_m_sync_init_impl+0x54>
    1f54:	69e3      	ldr	r3, [r4, #28]
    1f56:	f013 0f01 	tst.w	r3, #1
    1f5a:	d1fb      	bne.n	1f54 <_i2c_m_sync_init_impl+0x5c>
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    1f5c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1f60:	4a1b      	ldr	r2, [pc, #108]	; (1fd0 <_i2c_m_sync_init_impl+0xd8>)
    1f62:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1f66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    1f68:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f6a:	69e3      	ldr	r3, [r4, #28]
    1f6c:	f013 0f03 	tst.w	r3, #3
    1f70:	d1fb      	bne.n	1f6a <_i2c_m_sync_init_impl+0x72>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    1f72:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1f76:	4916      	ldr	r1, [pc, #88]	; (1fd0 <_i2c_m_sync_init_impl+0xd8>)
    1f78:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    1f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    1f7e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f80:	69e3      	ldr	r3, [r4, #28]
    1f82:	f013 0f04 	tst.w	r3, #4
    1f86:	d1fb      	bne.n	1f80 <_i2c_m_sync_init_impl+0x88>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    1f88:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1f8c:	4910      	ldr	r1, [pc, #64]	; (1fd0 <_i2c_m_sync_init_impl+0xd8>)
    1f8e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    1f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    1f94:	60e3      	str	r3, [r4, #12]

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    1f96:	f3c2 6301 	ubfx	r3, r2, #24, #2
    1f9a:	81ab      	strh	r3, [r5, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    1f9c:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    1f9e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    1fa2:	2b01      	cmp	r3, #1
    1fa4:	bf94      	ite	ls
    1fa6:	2300      	movls	r3, #0
    1fa8:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    1faa:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    1fae:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1fb0:	69e3      	ldr	r3, [r4, #28]
    1fb2:	f013 0f04 	tst.w	r3, #4
    1fb6:	d1fb      	bne.n	1fb0 <_i2c_m_sync_init_impl+0xb8>

	service->trise = _i2cms[i].trise;
    1fb8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1fbc:	4b04      	ldr	r3, [pc, #16]	; (1fd0 <_i2c_m_sync_init_impl+0xd8>)
    1fbe:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    1fc2:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    1fc4:	81eb      	strh	r3, [r5, #14]

	return ERR_NONE;
}
    1fc6:	2000      	movs	r0, #0
    1fc8:	bd38      	pop	{r3, r4, r5, pc}
    1fca:	bf00      	nop
    1fcc:	00001ecd 	.word	0x00001ecd
    1fd0:	000177d0 	.word	0x000177d0

00001fd4 <_usart_async_init>:
{
    1fd4:	b570      	push	{r4, r5, r6, lr}
    1fd6:	460d      	mov	r5, r1
	ASSERT(device);
    1fd8:	4606      	mov	r6, r0
    1fda:	22cb      	movs	r2, #203	; 0xcb
    1fdc:	4918      	ldr	r1, [pc, #96]	; (2040 <_usart_async_init+0x6c>)
    1fde:	3000      	adds	r0, #0
    1fe0:	bf18      	it	ne
    1fe2:	2001      	movne	r0, #1
    1fe4:	4b17      	ldr	r3, [pc, #92]	; (2044 <_usart_async_init+0x70>)
    1fe6:	4798      	blx	r3
	init_status = _usart_init(hw);
    1fe8:	4628      	mov	r0, r5
    1fea:	4b17      	ldr	r3, [pc, #92]	; (2048 <_usart_async_init+0x74>)
    1fec:	4798      	blx	r3
	if (init_status) {
    1fee:	4604      	mov	r4, r0
    1ff0:	b108      	cbz	r0, 1ff6 <_usart_async_init+0x22>
}
    1ff2:	4620      	mov	r0, r4
    1ff4:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    1ff6:	61b5      	str	r5, [r6, #24]
	if (hw == SERCOM2) {
    1ff8:	4b14      	ldr	r3, [pc, #80]	; (204c <_usart_async_init+0x78>)
    1ffa:	429d      	cmp	r5, r3
		_sercom2_dev = (struct _usart_async_device *)dev;
    1ffc:	bf04      	itt	eq
    1ffe:	4b14      	ldreq	r3, [pc, #80]	; (2050 <_usart_async_init+0x7c>)
    2000:	601e      	streq	r6, [r3, #0]
	uint8_t irq = _sercom_get_irq_num(hw);
    2002:	4628      	mov	r0, r5
    2004:	4b13      	ldr	r3, [pc, #76]	; (2054 <_usart_async_init+0x80>)
    2006:	4798      	blx	r3
    2008:	1d01      	adds	r1, r0, #4
    200a:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    200c:	2501      	movs	r5, #1
    200e:	f000 021f 	and.w	r2, r0, #31
    2012:	fa05 f202 	lsl.w	r2, r5, r2
    2016:	0943      	lsrs	r3, r0, #5
    2018:	009b      	lsls	r3, r3, #2
    201a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    201e:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2022:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2026:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    202a:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    202e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2032:	601a      	str	r2, [r3, #0]
		irq++;
    2034:	3001      	adds	r0, #1
    2036:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    2038:	4281      	cmp	r1, r0
    203a:	d1e8      	bne.n	200e <_usart_async_init+0x3a>
    203c:	e7d9      	b.n	1ff2 <_usart_async_init+0x1e>
    203e:	bf00      	nop
    2040:	00017808 	.word	0x00017808
    2044:	00001a89 	.word	0x00001a89
    2048:	00001e2d 	.word	0x00001e2d
    204c:	41012000 	.word	0x41012000
    2050:	200000c8 	.word	0x200000c8
    2054:	00001e19 	.word	0x00001e19

00002058 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    2058:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    205a:	6813      	ldr	r3, [r2, #0]
    205c:	f043 0302 	orr.w	r3, r3, #2
    2060:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2062:	69d3      	ldr	r3, [r2, #28]
    2064:	f013 0f03 	tst.w	r3, #3
    2068:	d1fb      	bne.n	2062 <_usart_async_enable+0xa>
}
    206a:	4770      	bx	lr

0000206c <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    206c:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    206e:	6299      	str	r1, [r3, #40]	; 0x28
    2070:	4770      	bx	lr

00002072 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    2072:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    2074:	2201      	movs	r2, #1
    2076:	759a      	strb	r2, [r3, #22]
    2078:	4770      	bx	lr

0000207a <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    207a:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    207c:	2202      	movs	r2, #2
    207e:	759a      	strb	r2, [r3, #22]
    2080:	4770      	bx	lr
	...

00002084 <_i2c_m_sync_init>:
{
    2084:	b538      	push	{r3, r4, r5, lr}
    2086:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    2088:	4604      	mov	r4, r0
    208a:	f44f 62a8 	mov.w	r2, #1344	; 0x540
    208e:	4906      	ldr	r1, [pc, #24]	; (20a8 <_i2c_m_sync_init+0x24>)
    2090:	3000      	adds	r0, #0
    2092:	bf18      	it	ne
    2094:	2001      	movne	r0, #1
    2096:	4b05      	ldr	r3, [pc, #20]	; (20ac <_i2c_m_sync_init+0x28>)
    2098:	4798      	blx	r3
	i2c_dev->hw = hw;
    209a:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    209c:	4629      	mov	r1, r5
    209e:	4620      	mov	r0, r4
    20a0:	4b03      	ldr	r3, [pc, #12]	; (20b0 <_i2c_m_sync_init+0x2c>)
    20a2:	4798      	blx	r3
}
    20a4:	bd38      	pop	{r3, r4, r5, pc}
    20a6:	bf00      	nop
    20a8:	00017808 	.word	0x00017808
    20ac:	00001a89 	.word	0x00001a89
    20b0:	00001ef9 	.word	0x00001ef9

000020b4 <_i2c_m_sync_transfer>:
{
    20b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    20b8:	4605      	mov	r5, r0
    20ba:	460e      	mov	r6, r1
	void *   hw = i2c_dev->hw;
    20bc:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    20be:	f110 0800 	adds.w	r8, r0, #0
    20c2:	bf18      	it	ne
    20c4:	f04f 0801 	movne.w	r8, #1
    20c8:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 2390 <_i2c_m_sync_transfer+0x2dc>
    20cc:	f44f 62bf 	mov.w	r2, #1528	; 0x5f8
    20d0:	4649      	mov	r1, r9
    20d2:	4640      	mov	r0, r8
    20d4:	4fad      	ldr	r7, [pc, #692]	; (238c <_i2c_m_sync_transfer+0x2d8>)
    20d6:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    20d8:	6928      	ldr	r0, [r5, #16]
    20da:	f240 52f9 	movw	r2, #1529	; 0x5f9
    20de:	4649      	mov	r1, r9
    20e0:	3000      	adds	r0, #0
    20e2:	bf18      	it	ne
    20e4:	2001      	movne	r0, #1
    20e6:	47b8      	blx	r7
	ASSERT(msg);
    20e8:	f240 52fa 	movw	r2, #1530	; 0x5fa
    20ec:	4649      	mov	r1, r9
    20ee:	1c30      	adds	r0, r6, #0
    20f0:	bf18      	it	ne
    20f2:	2001      	movne	r0, #1
    20f4:	47b8      	blx	r7
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    20f6:	886b      	ldrh	r3, [r5, #2]
    20f8:	f413 7f80 	tst.w	r3, #256	; 0x100
    20fc:	f040 8218 	bne.w	2530 <_i2c_m_sync_transfer+0x47c>
	msg->flags |= I2C_M_BUSY;
    2100:	8873      	ldrh	r3, [r6, #2]
    2102:	b29b      	uxth	r3, r3
    2104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2108:	8073      	strh	r3, [r6, #2]
	i2c_dev->service.msg = *msg;
    210a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    210e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    2112:	6863      	ldr	r3, [r4, #4]
    2114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2118:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    211a:	69e3      	ldr	r3, [r4, #28]
    211c:	f013 0f04 	tst.w	r3, #4
    2120:	d1fb      	bne.n	211a <_i2c_m_sync_transfer+0x66>
	void *             hw    = i2c_dev->hw;
    2122:	692f      	ldr	r7, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    2124:	f8d7 9000 	ldr.w	r9, [r7]
	ASSERT(i2c_dev);
    2128:	f240 52cd 	movw	r2, #1485	; 0x5cd
    212c:	4998      	ldr	r1, [pc, #608]	; (2390 <_i2c_m_sync_transfer+0x2dc>)
    212e:	4640      	mov	r0, r8
    2130:	4b96      	ldr	r3, [pc, #600]	; (238c <_i2c_m_sync_transfer+0x2d8>)
    2132:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    2134:	686b      	ldr	r3, [r5, #4]
    2136:	2b01      	cmp	r3, #1
    2138:	d05e      	beq.n	21f8 <_i2c_m_sync_transfer+0x144>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    213a:	687b      	ldr	r3, [r7, #4]
    213c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    2140:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2142:	69fb      	ldr	r3, [r7, #28]
    2144:	f013 0f04 	tst.w	r3, #4
    2148:	d1fb      	bne.n	2142 <_i2c_m_sync_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    214a:	882b      	ldrh	r3, [r5, #0]
    214c:	f413 6f80 	tst.w	r3, #1024	; 0x400
    2150:	d05e      	beq.n	2210 <_i2c_m_sync_transfer+0x15c>
		if (msg->flags & I2C_M_RD) {
    2152:	886a      	ldrh	r2, [r5, #2]
    2154:	f012 0f01 	tst.w	r2, #1
    2158:	d004      	beq.n	2164 <_i2c_m_sync_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    215a:	886a      	ldrh	r2, [r5, #2]
    215c:	b292      	uxth	r2, r2
    215e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    2162:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    2164:	f240 72fe 	movw	r2, #2046	; 0x7fe
    2168:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    216c:	69fb      	ldr	r3, [r7, #28]
    216e:	f013 0f04 	tst.w	r3, #4
    2172:	d1fb      	bne.n	216c <_i2c_m_sync_transfer+0xb8>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    2174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    217a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    217e:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    2180:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2182:	69fb      	ldr	r3, [r7, #28]
    2184:	f013 0f04 	tst.w	r3, #4
    2188:	d1fb      	bne.n	2182 <_i2c_m_sync_transfer+0xce>
	void *   hw      = i2c_dev->hw;
    218a:	6929      	ldr	r1, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    218c:	7e0b      	ldrb	r3, [r1, #24]
    218e:	b2db      	uxtb	r3, r3
    2190:	f64f 72ff 	movw	r2, #65535	; 0xffff
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    2194:	f013 0f03 	tst.w	r3, #3
    2198:	d103      	bne.n	21a2 <_i2c_m_sync_transfer+0xee>
    219a:	7e0b      	ldrb	r3, [r1, #24]
    219c:	b2db      	uxtb	r3, r3
		if (timeout-- == 0) {
    219e:	3a01      	subs	r2, #1
    21a0:	d1f8      	bne.n	2194 <_i2c_m_sync_transfer+0xe0>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    21a2:	6839      	ldr	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    21a4:	69fa      	ldr	r2, [r7, #28]
    21a6:	f012 0f04 	tst.w	r2, #4
    21aa:	d1fb      	bne.n	21a4 <_i2c_m_sync_transfer+0xf0>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    21ac:	8b7a      	ldrh	r2, [r7, #26]
    21ae:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
    21b0:	f013 0f01 	tst.w	r3, #1
    21b4:	f000 80a3 	beq.w	22fe <_i2c_m_sync_transfer+0x24a>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    21b8:	f012 0f02 	tst.w	r2, #2
    21bc:	d03c      	beq.n	2238 <_i2c_m_sync_transfer+0x184>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    21be:	2301      	movs	r3, #1
    21c0:	763b      	strb	r3, [r7, #24]
			msg->flags |= I2C_M_FAIL;
    21c2:	886b      	ldrh	r3, [r5, #2]
    21c4:	b29b      	uxth	r3, r3
    21c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    21ca:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    21cc:	886b      	ldrh	r3, [r5, #2]
    21ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    21d2:	041b      	lsls	r3, r3, #16
    21d4:	0c1b      	lsrs	r3, r3, #16
    21d6:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    21d8:	f002 0201 	and.w	r2, r2, #1
			return I2C_ERR_BAD_ADDRESS;
    21dc:	2a00      	cmp	r2, #0
    21de:	bf14      	ite	ne
    21e0:	f06f 0004 	mvnne.w	r0, #4
    21e4:	f06f 0003 	mvneq.w	r0, #3
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    21e8:	886b      	ldrh	r3, [r5, #2]
    21ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    21ee:	041b      	lsls	r3, r3, #16
    21f0:	0c1b      	lsrs	r3, r3, #16
    21f2:	806b      	strh	r3, [r5, #2]
		return ret;
    21f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (msg->len == 1 && sclsm) {
    21f8:	f019 6f00 	tst.w	r9, #134217728	; 0x8000000
    21fc:	d09d      	beq.n	213a <_i2c_m_sync_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    21fe:	687b      	ldr	r3, [r7, #4]
    2200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    2204:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2206:	69fb      	ldr	r3, [r7, #28]
    2208:	f013 0f04 	tst.w	r3, #4
    220c:	d1fb      	bne.n	2206 <_i2c_m_sync_transfer+0x152>
    220e:	e79c      	b.n	214a <_i2c_m_sync_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    2210:	8869      	ldrh	r1, [r5, #2]
    2212:	005a      	lsls	r2, r3, #1
    2214:	b2d2      	uxtb	r2, r2
    2216:	f001 0301 	and.w	r3, r1, #1
    221a:	431a      	orrs	r2, r3
    221c:	69fb      	ldr	r3, [r7, #28]
    221e:	f013 0f04 	tst.w	r3, #4
    2222:	d1fb      	bne.n	221c <_i2c_m_sync_transfer+0x168>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    2224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    2226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    222a:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    222c:	627a      	str	r2, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    222e:	69fb      	ldr	r3, [r7, #28]
    2230:	f013 0f04 	tst.w	r3, #4
    2234:	d1fb      	bne.n	222e <_i2c_m_sync_transfer+0x17a>
    2236:	e7a8      	b.n	218a <_i2c_m_sync_transfer+0xd6>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    2238:	f012 0f04 	tst.w	r2, #4
    223c:	d11d      	bne.n	227a <_i2c_m_sync_transfer+0x1c6>
			if (msg->flags & I2C_M_TEN) {
    223e:	886b      	ldrh	r3, [r5, #2]
    2240:	f413 6f80 	tst.w	r3, #1024	; 0x400
    2244:	d037      	beq.n	22b6 <_i2c_m_sync_transfer+0x202>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    2246:	882b      	ldrh	r3, [r5, #0]
    2248:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    224a:	f003 0206 	and.w	r2, r3, #6
    224e:	69fb      	ldr	r3, [r7, #28]
    2250:	f013 0f04 	tst.w	r3, #4
    2254:	d1fb      	bne.n	224e <_i2c_m_sync_transfer+0x19a>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    2256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2258:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    225c:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    2260:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    2262:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2264:	69fb      	ldr	r3, [r7, #28]
    2266:	f013 0f04 	tst.w	r3, #4
    226a:	d1fb      	bne.n	2264 <_i2c_m_sync_transfer+0x1b0>
				msg->flags &= ~I2C_M_TEN;
    226c:	886b      	ldrh	r3, [r5, #2]
    226e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    2272:	041b      	lsls	r3, r3, #16
    2274:	0c1b      	lsrs	r3, r3, #16
    2276:	806b      	strh	r3, [r5, #2]
    2278:	e069      	b.n	234e <_i2c_m_sync_transfer+0x29a>
				if (msg->len > 0) {
    227a:	686b      	ldr	r3, [r5, #4]
    227c:	2b00      	cmp	r3, #0
    227e:	dd04      	ble.n	228a <_i2c_m_sync_transfer+0x1d6>
					msg->flags |= I2C_M_FAIL;
    2280:	886b      	ldrh	r3, [r5, #2]
    2282:	b29b      	uxth	r3, r3
    2284:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    2288:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    228a:	886b      	ldrh	r3, [r5, #2]
    228c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2290:	d108      	bne.n	22a4 <_i2c_m_sync_transfer+0x1f0>
				msg->flags &= ~I2C_M_BUSY;
    2292:	886b      	ldrh	r3, [r5, #2]
    2294:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2298:	041b      	lsls	r3, r3, #16
    229a:	0c1b      	lsrs	r3, r3, #16
    229c:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    229e:	f06f 0001 	mvn.w	r0, #1
    22a2:	e7a1      	b.n	21e8 <_i2c_m_sync_transfer+0x134>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    22a4:	687b      	ldr	r3, [r7, #4]
    22a6:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    22aa:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    22ac:	69fb      	ldr	r3, [r7, #28]
    22ae:	f013 0f04 	tst.w	r3, #4
    22b2:	d1fb      	bne.n	22ac <_i2c_m_sync_transfer+0x1f8>
    22b4:	e7ed      	b.n	2292 <_i2c_m_sync_transfer+0x1de>
			if (msg->len == 0) {
    22b6:	686b      	ldr	r3, [r5, #4]
    22b8:	b99b      	cbnz	r3, 22e2 <_i2c_m_sync_transfer+0x22e>
				if (msg->flags & I2C_M_STOP) {
    22ba:	886b      	ldrh	r3, [r5, #2]
    22bc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    22c0:	d106      	bne.n	22d0 <_i2c_m_sync_transfer+0x21c>
				msg->flags &= ~I2C_M_BUSY;
    22c2:	886b      	ldrh	r3, [r5, #2]
    22c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    22c8:	041b      	lsls	r3, r3, #16
    22ca:	0c1b      	lsrs	r3, r3, #16
    22cc:	806b      	strh	r3, [r5, #2]
    22ce:	e03e      	b.n	234e <_i2c_m_sync_transfer+0x29a>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    22d0:	687b      	ldr	r3, [r7, #4]
    22d2:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    22d6:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    22d8:	69fb      	ldr	r3, [r7, #28]
    22da:	f013 0f04 	tst.w	r3, #4
    22de:	d1fb      	bne.n	22d8 <_i2c_m_sync_transfer+0x224>
    22e0:	e7ef      	b.n	22c2 <_i2c_m_sync_transfer+0x20e>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    22e2:	68ab      	ldr	r3, [r5, #8]
    22e4:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    22e6:	62bb      	str	r3, [r7, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    22e8:	69fb      	ldr	r3, [r7, #28]
    22ea:	f013 0f04 	tst.w	r3, #4
    22ee:	d1fb      	bne.n	22e8 <_i2c_m_sync_transfer+0x234>
				msg->buffer++;
    22f0:	68ab      	ldr	r3, [r5, #8]
    22f2:	3301      	adds	r3, #1
    22f4:	60ab      	str	r3, [r5, #8]
				msg->len--;
    22f6:	686b      	ldr	r3, [r5, #4]
    22f8:	3b01      	subs	r3, #1
    22fa:	606b      	str	r3, [r5, #4]
    22fc:	e027      	b.n	234e <_i2c_m_sync_transfer+0x29a>
	} else if (flags & SB_FLAG) {
    22fe:	f013 0f02 	tst.w	r3, #2
    2302:	d024      	beq.n	234e <_i2c_m_sync_transfer+0x29a>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    2304:	686b      	ldr	r3, [r5, #4]
    2306:	2b00      	cmp	r3, #0
    2308:	d03a      	beq.n	2380 <_i2c_m_sync_transfer+0x2cc>
    230a:	f012 0f04 	tst.w	r2, #4
    230e:	d137      	bne.n	2380 <_i2c_m_sync_transfer+0x2cc>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    2310:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    2314:	3b01      	subs	r3, #1
    2316:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    2318:	2b00      	cmp	r3, #0
    231a:	f040 810d 	bne.w	2538 <_i2c_m_sync_transfer+0x484>
    231e:	2900      	cmp	r1, #0
    2320:	f000 8110 	beq.w	2544 <_i2c_m_sync_transfer+0x490>
				if (msg->flags & I2C_M_STOP) {
    2324:	886b      	ldrh	r3, [r5, #2]
    2326:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    232a:	d118      	bne.n	235e <_i2c_m_sync_transfer+0x2aa>
				msg->flags &= ~I2C_M_BUSY;
    232c:	886b      	ldrh	r3, [r5, #2]
    232e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2332:	041b      	lsls	r3, r3, #16
    2334:	0c1b      	lsrs	r3, r3, #16
    2336:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    2338:	68aa      	ldr	r2, [r5, #8]
    233a:	1c53      	adds	r3, r2, #1
    233c:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    233e:	69fb      	ldr	r3, [r7, #28]
    2340:	f013 0f04 	tst.w	r3, #4
    2344:	d1fb      	bne.n	233e <_i2c_m_sync_transfer+0x28a>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    2346:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2348:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    234a:	2302      	movs	r3, #2
    234c:	763b      	strb	r3, [r7, #24]
			return I2C_NACK;
    234e:	2200      	movs	r2, #0
	return I2C_OK;
    2350:	4610      	mov	r0, r2
    2352:	2702      	movs	r7, #2
			return I2C_NACK;
    2354:	f06f 0c01 	mvn.w	ip, #1
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    2358:	f04f 0e01 	mov.w	lr, #1
    235c:	e0b0      	b.n	24c0 <_i2c_m_sync_transfer+0x40c>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    235e:	687b      	ldr	r3, [r7, #4]
    2360:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2364:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2366:	69fb      	ldr	r3, [r7, #28]
    2368:	f013 0f04 	tst.w	r3, #4
    236c:	d1fb      	bne.n	2366 <_i2c_m_sync_transfer+0x2b2>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    236e:	687b      	ldr	r3, [r7, #4]
    2370:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    2374:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2376:	69fb      	ldr	r3, [r7, #28]
    2378:	f013 0f04 	tst.w	r3, #4
    237c:	d1fb      	bne.n	2376 <_i2c_m_sync_transfer+0x2c2>
    237e:	e7d5      	b.n	232c <_i2c_m_sync_transfer+0x278>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    2380:	2302      	movs	r3, #2
    2382:	763b      	strb	r3, [r7, #24]
    2384:	f06f 0001 	mvn.w	r0, #1
    2388:	e72e      	b.n	21e8 <_i2c_m_sync_transfer+0x134>
    238a:	bf00      	nop
    238c:	00001a89 	.word	0x00001a89
    2390:	00017808 	.word	0x00017808
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    2394:	6863      	ldr	r3, [r4, #4]
    2396:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    239a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    239c:	69e3      	ldr	r3, [r4, #28]
    239e:	f013 0f04 	tst.w	r3, #4
    23a2:	d1fb      	bne.n	239c <_i2c_m_sync_transfer+0x2e8>
    23a4:	e0a1      	b.n	24ea <_i2c_m_sync_transfer+0x436>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    23a6:	f012 0f04 	tst.w	r2, #4
    23aa:	d11e      	bne.n	23ea <_i2c_m_sync_transfer+0x336>
			if (msg->flags & I2C_M_TEN) {
    23ac:	886b      	ldrh	r3, [r5, #2]
    23ae:	f413 6f80 	tst.w	r3, #1024	; 0x400
    23b2:	d037      	beq.n	2424 <_i2c_m_sync_transfer+0x370>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    23b4:	882b      	ldrh	r3, [r5, #0]
    23b6:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    23b8:	f003 0206 	and.w	r2, r3, #6
    23bc:	69e3      	ldr	r3, [r4, #28]
    23be:	f013 0f04 	tst.w	r3, #4
    23c2:	d1fb      	bne.n	23bc <_i2c_m_sync_transfer+0x308>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    23c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    23c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    23ca:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    23ce:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    23d0:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    23d2:	69e3      	ldr	r3, [r4, #28]
    23d4:	f013 0f04 	tst.w	r3, #4
    23d8:	d1fb      	bne.n	23d2 <_i2c_m_sync_transfer+0x31e>
				msg->flags &= ~I2C_M_TEN;
    23da:	886b      	ldrh	r3, [r5, #2]
    23dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    23e0:	041b      	lsls	r3, r3, #16
    23e2:	0c1b      	lsrs	r3, r3, #16
    23e4:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    23e6:	4602      	mov	r2, r0
    23e8:	e06a      	b.n	24c0 <_i2c_m_sync_transfer+0x40c>
				if (msg->len > 0) {
    23ea:	686b      	ldr	r3, [r5, #4]
    23ec:	2b00      	cmp	r3, #0
    23ee:	dd04      	ble.n	23fa <_i2c_m_sync_transfer+0x346>
					msg->flags |= I2C_M_FAIL;
    23f0:	886b      	ldrh	r3, [r5, #2]
    23f2:	b29b      	uxth	r3, r3
    23f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    23f8:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    23fa:	886b      	ldrh	r3, [r5, #2]
    23fc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2400:	d107      	bne.n	2412 <_i2c_m_sync_transfer+0x35e>
				msg->flags &= ~I2C_M_BUSY;
    2402:	886b      	ldrh	r3, [r5, #2]
    2404:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2408:	041b      	lsls	r3, r3, #16
    240a:	0c1b      	lsrs	r3, r3, #16
    240c:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    240e:	4662      	mov	r2, ip
    2410:	e056      	b.n	24c0 <_i2c_m_sync_transfer+0x40c>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    2412:	6863      	ldr	r3, [r4, #4]
    2414:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    2418:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    241a:	69e3      	ldr	r3, [r4, #28]
    241c:	f013 0f04 	tst.w	r3, #4
    2420:	d1fb      	bne.n	241a <_i2c_m_sync_transfer+0x366>
    2422:	e7ee      	b.n	2402 <_i2c_m_sync_transfer+0x34e>
			if (msg->len == 0) {
    2424:	686b      	ldr	r3, [r5, #4]
    2426:	b9a3      	cbnz	r3, 2452 <_i2c_m_sync_transfer+0x39e>
				if (msg->flags & I2C_M_STOP) {
    2428:	886b      	ldrh	r3, [r5, #2]
    242a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    242e:	d107      	bne.n	2440 <_i2c_m_sync_transfer+0x38c>
				msg->flags &= ~I2C_M_BUSY;
    2430:	886b      	ldrh	r3, [r5, #2]
    2432:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2436:	041b      	lsls	r3, r3, #16
    2438:	0c1b      	lsrs	r3, r3, #16
    243a:	806b      	strh	r3, [r5, #2]
			return I2C_OK;
    243c:	4602      	mov	r2, r0
    243e:	e03f      	b.n	24c0 <_i2c_m_sync_transfer+0x40c>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    2440:	6863      	ldr	r3, [r4, #4]
    2442:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    2446:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2448:	69e3      	ldr	r3, [r4, #28]
    244a:	f013 0f04 	tst.w	r3, #4
    244e:	d1fb      	bne.n	2448 <_i2c_m_sync_transfer+0x394>
    2450:	e7ee      	b.n	2430 <_i2c_m_sync_transfer+0x37c>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    2452:	68ab      	ldr	r3, [r5, #8]
    2454:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    2456:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2458:	69e3      	ldr	r3, [r4, #28]
    245a:	f013 0f04 	tst.w	r3, #4
    245e:	d1fb      	bne.n	2458 <_i2c_m_sync_transfer+0x3a4>
				msg->buffer++;
    2460:	68ab      	ldr	r3, [r5, #8]
    2462:	3301      	adds	r3, #1
    2464:	60ab      	str	r3, [r5, #8]
				msg->len--;
    2466:	686b      	ldr	r3, [r5, #4]
    2468:	3b01      	subs	r3, #1
    246a:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    246c:	4602      	mov	r2, r0
    246e:	e027      	b.n	24c0 <_i2c_m_sync_transfer+0x40c>
	} else if (flags & SB_FLAG) {
    2470:	f013 0f02 	tst.w	r3, #2
    2474:	d057      	beq.n	2526 <_i2c_m_sync_transfer+0x472>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    2476:	686b      	ldr	r3, [r5, #4]
    2478:	2b00      	cmp	r3, #0
    247a:	d051      	beq.n	2520 <_i2c_m_sync_transfer+0x46c>
    247c:	f012 0f04 	tst.w	r2, #4
    2480:	d14e      	bne.n	2520 <_i2c_m_sync_transfer+0x46c>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    2482:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    2486:	3b01      	subs	r3, #1
    2488:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    248a:	2b00      	cmp	r3, #0
    248c:	f040 808c 	bne.w	25a8 <_i2c_m_sync_transfer+0x4f4>
    2490:	2900      	cmp	r1, #0
    2492:	f000 808f 	beq.w	25b4 <_i2c_m_sync_transfer+0x500>
				if (msg->flags & I2C_M_STOP) {
    2496:	886b      	ldrh	r3, [r5, #2]
    2498:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    249c:	d12f      	bne.n	24fe <_i2c_m_sync_transfer+0x44a>
				msg->flags &= ~I2C_M_BUSY;
    249e:	886b      	ldrh	r3, [r5, #2]
    24a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    24a4:	041b      	lsls	r3, r3, #16
    24a6:	0c1b      	lsrs	r3, r3, #16
    24a8:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    24aa:	68aa      	ldr	r2, [r5, #8]
    24ac:	1c53      	adds	r3, r2, #1
    24ae:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    24b0:	69e3      	ldr	r3, [r4, #28]
    24b2:	f013 0f04 	tst.w	r3, #4
    24b6:	d1fb      	bne.n	24b0 <_i2c_m_sync_transfer+0x3fc>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    24b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    24ba:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    24bc:	7627      	strb	r7, [r4, #24]
	return I2C_OK;
    24be:	4602      	mov	r2, r0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    24c0:	886b      	ldrh	r3, [r5, #2]
    24c2:	f413 7f80 	tst.w	r3, #256	; 0x100
    24c6:	d030      	beq.n	252a <_i2c_m_sync_transfer+0x476>
	void *   hw      = i2c_dev->hw;
    24c8:	6929      	ldr	r1, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    24ca:	7e0b      	ldrb	r3, [r1, #24]
    24cc:	b2db      	uxtb	r3, r3
    24ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    24d2:	f013 0f03 	tst.w	r3, #3
    24d6:	d142      	bne.n	255e <_i2c_m_sync_transfer+0x4aa>
    24d8:	7e0b      	ldrb	r3, [r1, #24]
    24da:	b2db      	uxtb	r3, r3
		if (timeout-- == 0) {
    24dc:	3a01      	subs	r2, #1
    24de:	d1f8      	bne.n	24d2 <_i2c_m_sync_transfer+0x41e>
			if (msg->flags & I2C_M_STOP) {
    24e0:	8873      	ldrh	r3, [r6, #2]
    24e2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    24e6:	f47f af55 	bne.w	2394 <_i2c_m_sync_transfer+0x2e0>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    24ea:	886b      	ldrh	r3, [r5, #2]
    24ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    24f0:	041b      	lsls	r3, r3, #16
    24f2:	0c1b      	lsrs	r3, r3, #16
    24f4:	806b      	strh	r3, [r5, #2]
			return I2C_ERR_BUS;
    24f6:	f06f 0004 	mvn.w	r0, #4
			return ret;
    24fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    24fe:	6863      	ldr	r3, [r4, #4]
    2500:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2504:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2506:	69e3      	ldr	r3, [r4, #28]
    2508:	f013 0f04 	tst.w	r3, #4
    250c:	d1fb      	bne.n	2506 <_i2c_m_sync_transfer+0x452>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    250e:	6863      	ldr	r3, [r4, #4]
    2510:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    2514:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2516:	69e3      	ldr	r3, [r4, #28]
    2518:	f013 0f04 	tst.w	r3, #4
    251c:	d1fb      	bne.n	2516 <_i2c_m_sync_transfer+0x462>
    251e:	e7be      	b.n	249e <_i2c_m_sync_transfer+0x3ea>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    2520:	7627      	strb	r7, [r4, #24]
			return I2C_NACK;
    2522:	4662      	mov	r2, ip
    2524:	e7cc      	b.n	24c0 <_i2c_m_sync_transfer+0x40c>
	return I2C_OK;
    2526:	4602      	mov	r2, r0
    2528:	e7ca      	b.n	24c0 <_i2c_m_sync_transfer+0x40c>
    252a:	4610      	mov	r0, r2
    252c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return I2C_ERR_BUSY;
    2530:	f06f 0005 	mvn.w	r0, #5
    2534:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    2538:	2b01      	cmp	r3, #1
    253a:	f47f aefd 	bne.w	2338 <_i2c_m_sync_transfer+0x284>
    253e:	2900      	cmp	r1, #0
    2540:	f43f aefa 	beq.w	2338 <_i2c_m_sync_transfer+0x284>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    2544:	687b      	ldr	r3, [r7, #4]
    2546:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    254a:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    254c:	69fb      	ldr	r3, [r7, #28]
    254e:	f013 0f04 	tst.w	r3, #4
    2552:	d1fb      	bne.n	254c <_i2c_m_sync_transfer+0x498>
			if (msg->len == 0) {
    2554:	686b      	ldr	r3, [r5, #4]
    2556:	2b00      	cmp	r3, #0
    2558:	f43f aee4 	beq.w	2324 <_i2c_m_sync_transfer+0x270>
    255c:	e6ec      	b.n	2338 <_i2c_m_sync_transfer+0x284>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    255e:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2560:	69e2      	ldr	r2, [r4, #28]
    2562:	f012 0f04 	tst.w	r2, #4
    2566:	d1fb      	bne.n	2560 <_i2c_m_sync_transfer+0x4ac>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    2568:	8b62      	ldrh	r2, [r4, #26]
    256a:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
    256c:	f013 0f01 	tst.w	r3, #1
    2570:	f43f af7e 	beq.w	2470 <_i2c_m_sync_transfer+0x3bc>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    2574:	f012 0f02 	tst.w	r2, #2
    2578:	f43f af15 	beq.w	23a6 <_i2c_m_sync_transfer+0x2f2>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    257c:	f884 e018 	strb.w	lr, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    2580:	886b      	ldrh	r3, [r5, #2]
    2582:	b29b      	uxth	r3, r3
    2584:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    2588:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    258a:	886b      	ldrh	r3, [r5, #2]
    258c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2590:	041b      	lsls	r3, r3, #16
    2592:	0c1b      	lsrs	r3, r3, #16
    2594:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    2596:	f002 0201 	and.w	r2, r2, #1
			return I2C_ERR_BAD_ADDRESS;
    259a:	2a00      	cmp	r2, #0
    259c:	bf14      	ite	ne
    259e:	f06f 0204 	mvnne.w	r2, #4
    25a2:	f06f 0203 	mvneq.w	r2, #3
    25a6:	e78b      	b.n	24c0 <_i2c_m_sync_transfer+0x40c>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    25a8:	2b01      	cmp	r3, #1
    25aa:	f47f af7e 	bne.w	24aa <_i2c_m_sync_transfer+0x3f6>
    25ae:	2900      	cmp	r1, #0
    25b0:	f43f af7b 	beq.w	24aa <_i2c_m_sync_transfer+0x3f6>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    25b4:	6863      	ldr	r3, [r4, #4]
    25b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    25ba:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    25bc:	69e3      	ldr	r3, [r4, #28]
    25be:	f013 0f04 	tst.w	r3, #4
    25c2:	d1fb      	bne.n	25bc <_i2c_m_sync_transfer+0x508>
			if (msg->len == 0) {
    25c4:	686b      	ldr	r3, [r5, #4]
    25c6:	2b00      	cmp	r3, #0
    25c8:	f43f af65 	beq.w	2496 <_i2c_m_sync_transfer+0x3e2>
    25cc:	e76d      	b.n	24aa <_i2c_m_sync_transfer+0x3f6>
    25ce:	bf00      	nop

000025d0 <SERCOM2_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_0_Handler(void)
{
    25d0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    25d2:	4b02      	ldr	r3, [pc, #8]	; (25dc <SERCOM2_0_Handler+0xc>)
    25d4:	6818      	ldr	r0, [r3, #0]
    25d6:	4b02      	ldr	r3, [pc, #8]	; (25e0 <SERCOM2_0_Handler+0x10>)
    25d8:	4798      	blx	r3
    25da:	bd08      	pop	{r3, pc}
    25dc:	200000c8 	.word	0x200000c8
    25e0:	00001da9 	.word	0x00001da9

000025e4 <SERCOM2_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_1_Handler(void)
{
    25e4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    25e6:	4b02      	ldr	r3, [pc, #8]	; (25f0 <SERCOM2_1_Handler+0xc>)
    25e8:	6818      	ldr	r0, [r3, #0]
    25ea:	4b02      	ldr	r3, [pc, #8]	; (25f4 <SERCOM2_1_Handler+0x10>)
    25ec:	4798      	blx	r3
    25ee:	bd08      	pop	{r3, pc}
    25f0:	200000c8 	.word	0x200000c8
    25f4:	00001da9 	.word	0x00001da9

000025f8 <SERCOM2_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_2_Handler(void)
{
    25f8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    25fa:	4b02      	ldr	r3, [pc, #8]	; (2604 <SERCOM2_2_Handler+0xc>)
    25fc:	6818      	ldr	r0, [r3, #0]
    25fe:	4b02      	ldr	r3, [pc, #8]	; (2608 <SERCOM2_2_Handler+0x10>)
    2600:	4798      	blx	r3
    2602:	bd08      	pop	{r3, pc}
    2604:	200000c8 	.word	0x200000c8
    2608:	00001da9 	.word	0x00001da9

0000260c <SERCOM2_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_3_Handler(void)
{
    260c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    260e:	4b02      	ldr	r3, [pc, #8]	; (2618 <SERCOM2_3_Handler+0xc>)
    2610:	6818      	ldr	r0, [r3, #0]
    2612:	4b02      	ldr	r3, [pc, #8]	; (261c <SERCOM2_3_Handler+0x10>)
    2614:	4798      	blx	r3
    2616:	bd08      	pop	{r3, pc}
    2618:	200000c8 	.word	0x200000c8
    261c:	00001da9 	.word	0x00001da9

00002620 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    2620:	b570      	push	{r4, r5, r6, lr}
    2622:	b088      	sub	sp, #32
    2624:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    2626:	466c      	mov	r4, sp
    2628:	4d12      	ldr	r5, [pc, #72]	; (2674 <get_tc_index+0x54>)
    262a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    262c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    262e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2632:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    2636:	9b00      	ldr	r3, [sp, #0]
    2638:	42b3      	cmp	r3, r6
    263a:	d00b      	beq.n	2654 <get_tc_index+0x34>
    263c:	4630      	mov	r0, r6
    263e:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2640:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    2642:	f852 1b04 	ldr.w	r1, [r2], #4
    2646:	4281      	cmp	r1, r0
    2648:	d005      	beq.n	2656 <get_tc_index+0x36>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    264a:	3301      	adds	r3, #1
    264c:	2b08      	cmp	r3, #8
    264e:	d1f8      	bne.n	2642 <get_tc_index+0x22>
			return i;
    2650:	2000      	movs	r0, #0
    2652:	e00b      	b.n	266c <get_tc_index+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2654:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    2656:	f013 0fff 	tst.w	r3, #255	; 0xff
    265a:	d009      	beq.n	2670 <get_tc_index+0x50>
	ASSERT(false);
    265c:	f44f 729e 	mov.w	r2, #316	; 0x13c
    2660:	4905      	ldr	r1, [pc, #20]	; (2678 <get_tc_index+0x58>)
    2662:	2000      	movs	r0, #0
    2664:	4b05      	ldr	r3, [pc, #20]	; (267c <get_tc_index+0x5c>)
    2666:	4798      	blx	r3
	return -1;
    2668:	f04f 30ff 	mov.w	r0, #4294967295
}
    266c:	b008      	add	sp, #32
    266e:	bd70      	pop	{r4, r5, r6, pc}
			return i;
    2670:	2000      	movs	r0, #0
    2672:	e7fb      	b.n	266c <get_tc_index+0x4c>
    2674:	00017824 	.word	0x00017824
    2678:	00017858 	.word	0x00017858
    267c:	00001a89 	.word	0x00001a89

00002680 <_timer_init>:
{
    2680:	b570      	push	{r4, r5, r6, lr}
    2682:	4606      	mov	r6, r0
    2684:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    2686:	4608      	mov	r0, r1
    2688:	4b60      	ldr	r3, [pc, #384]	; (280c <_timer_init+0x18c>)
    268a:	4798      	blx	r3
    268c:	4605      	mov	r5, r0
	device->hw = hw;
    268e:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    2690:	228d      	movs	r2, #141	; 0x8d
    2692:	495f      	ldr	r1, [pc, #380]	; (2810 <_timer_init+0x190>)
    2694:	2001      	movs	r0, #1
    2696:	4b5f      	ldr	r3, [pc, #380]	; (2814 <_timer_init+0x194>)
    2698:	4798      	blx	r3
	};
}

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    269a:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    269c:	f013 0f01 	tst.w	r3, #1
    26a0:	d119      	bne.n	26d6 <_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    26a2:	6923      	ldr	r3, [r4, #16]
    26a4:	f013 0f03 	tst.w	r3, #3
    26a8:	d1fb      	bne.n	26a2 <_timer_init+0x22>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    26aa:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    26ac:	f013 0f02 	tst.w	r3, #2
    26b0:	d00b      	beq.n	26ca <_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    26b2:	6823      	ldr	r3, [r4, #0]
    26b4:	f023 0302 	bic.w	r3, r3, #2
    26b8:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    26ba:	6923      	ldr	r3, [r4, #16]
    26bc:	f013 0f03 	tst.w	r3, #3
    26c0:	d1fb      	bne.n	26ba <_timer_init+0x3a>
    26c2:	6923      	ldr	r3, [r4, #16]
    26c4:	f013 0f02 	tst.w	r3, #2
    26c8:	d1fb      	bne.n	26c2 <_timer_init+0x42>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    26ca:	2301      	movs	r3, #1
    26cc:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    26ce:	6923      	ldr	r3, [r4, #16]
    26d0:	f013 0f03 	tst.w	r3, #3
    26d4:	d1fb      	bne.n	26ce <_timer_init+0x4e>
    26d6:	6923      	ldr	r3, [r4, #16]
    26d8:	f013 0f01 	tst.w	r3, #1
    26dc:	d1fb      	bne.n	26d6 <_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    26de:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    26e2:	4a4d      	ldr	r2, [pc, #308]	; (2818 <_timer_init+0x198>)
    26e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    26e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    26ea:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    26ec:	6923      	ldr	r3, [r4, #16]
    26ee:	f013 0f03 	tst.w	r3, #3
    26f2:	d1fb      	bne.n	26ec <_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    26f4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    26f8:	4947      	ldr	r1, [pc, #284]	; (2818 <_timer_init+0x198>)
    26fa:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    26fe:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    2702:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    2706:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    2708:	2301      	movs	r3, #1
    270a:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    270c:	f002 020c 	and.w	r2, r2, #12
    2710:	2a08      	cmp	r2, #8
    2712:	d048      	beq.n	27a6 <_timer_init+0x126>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2714:	2a00      	cmp	r2, #0
    2716:	d158      	bne.n	27ca <_timer_init+0x14a>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    2718:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    271c:	4a3e      	ldr	r2, [pc, #248]	; (2818 <_timer_init+0x198>)
    271e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2722:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2724:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2726:	6923      	ldr	r3, [r4, #16]
    2728:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    272c:	d1fb      	bne.n	2726 <_timer_init+0xa6>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    272e:	2300      	movs	r3, #0
    2730:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2732:	6923      	ldr	r3, [r4, #16]
    2734:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2738:	d1fb      	bne.n	2732 <_timer_init+0xb2>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    273a:	2301      	movs	r3, #1
    273c:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    273e:	4b37      	ldr	r3, [pc, #220]	; (281c <_timer_init+0x19c>)
    2740:	429c      	cmp	r4, r3
		_tc0_dev = (struct _timer_device *)dev;
    2742:	bf04      	itt	eq
    2744:	4b36      	ldreq	r3, [pc, #216]	; (2820 <_timer_init+0x1a0>)
    2746:	601e      	streq	r6, [r3, #0]
	NVIC_DisableIRQ(_tcs[i].irq);
    2748:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    274c:	4a32      	ldr	r2, [pc, #200]	; (2818 <_timer_init+0x198>)
    274e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2752:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    2756:	2b00      	cmp	r3, #0
    2758:	db23      	blt.n	27a2 <_timer_init+0x122>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    275a:	095a      	lsrs	r2, r3, #5
    275c:	f003 031f 	and.w	r3, r3, #31
    2760:	2101      	movs	r1, #1
    2762:	fa01 f303 	lsl.w	r3, r1, r3
    2766:	3220      	adds	r2, #32
    2768:	492e      	ldr	r1, [pc, #184]	; (2824 <_timer_init+0x1a4>)
    276a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    276e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2772:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    2776:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    277a:	4b27      	ldr	r3, [pc, #156]	; (2818 <_timer_init+0x198>)
    277c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    2780:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    2784:	2b00      	cmp	r3, #0
    2786:	db0c      	blt.n	27a2 <_timer_init+0x122>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2788:	0959      	lsrs	r1, r3, #5
    278a:	f003 031f 	and.w	r3, r3, #31
    278e:	2201      	movs	r2, #1
    2790:	fa02 f303 	lsl.w	r3, r2, r3
    2794:	4a23      	ldr	r2, [pc, #140]	; (2824 <_timer_init+0x1a4>)
    2796:	f101 0060 	add.w	r0, r1, #96	; 0x60
    279a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    279e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    27a2:	2000      	movs	r0, #0
    27a4:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    27a6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    27aa:	4a1b      	ldr	r2, [pc, #108]	; (2818 <_timer_init+0x198>)
    27ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    27b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    27b2:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    27b4:	6923      	ldr	r3, [r4, #16]
    27b6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    27ba:	d1fb      	bne.n	27b4 <_timer_init+0x134>
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    27bc:	2300      	movs	r3, #0
    27be:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    27c0:	6923      	ldr	r3, [r4, #16]
    27c2:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    27c6:	d1fb      	bne.n	27c0 <_timer_init+0x140>
    27c8:	e7b7      	b.n	273a <_timer_init+0xba>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    27ca:	2a04      	cmp	r2, #4
    27cc:	d1b5      	bne.n	273a <_timer_init+0xba>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    27ce:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    27d2:	4a11      	ldr	r2, [pc, #68]	; (2818 <_timer_init+0x198>)
    27d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    27d8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    27dc:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    27de:	6923      	ldr	r3, [r4, #16]
    27e0:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    27e4:	d1fb      	bne.n	27de <_timer_init+0x15e>
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    27e6:	2300      	movs	r3, #0
    27e8:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    27ea:	6923      	ldr	r3, [r4, #16]
    27ec:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    27f0:	d1fb      	bne.n	27ea <_timer_init+0x16a>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    27f2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    27f6:	4a08      	ldr	r2, [pc, #32]	; (2818 <_timer_init+0x198>)
    27f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    27fc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
    2800:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2802:	6923      	ldr	r3, [r4, #16]
    2804:	f013 0f20 	tst.w	r3, #32
    2808:	d1fb      	bne.n	2802 <_timer_init+0x182>
    280a:	e796      	b.n	273a <_timer_init+0xba>
    280c:	00002621 	.word	0x00002621
    2810:	00017858 	.word	0x00017858
    2814:	00001a89 	.word	0x00001a89
    2818:	00017824 	.word	0x00017824
    281c:	40003800 	.word	0x40003800
    2820:	200000cc 	.word	0x200000cc
    2824:	e000e100 	.word	0xe000e100

00002828 <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    2828:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    282a:	6813      	ldr	r3, [r2, #0]
    282c:	f043 0302 	orr.w	r3, r3, #2
    2830:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2832:	6913      	ldr	r3, [r2, #16]
    2834:	f013 0f03 	tst.w	r3, #3
    2838:	d1fb      	bne.n	2832 <_timer_start+0xa>
}
    283a:	4770      	bx	lr

0000283c <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    283c:	68c2      	ldr	r2, [r0, #12]
    283e:	6913      	ldr	r3, [r2, #16]
    2840:	f013 0f03 	tst.w	r3, #3
    2844:	d1fb      	bne.n	283e <_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2846:	6810      	ldr	r0, [r2, #0]
}
    2848:	f3c0 0040 	ubfx	r0, r0, #1, #1
    284c:	4770      	bx	lr

0000284e <_tc_get_timer>:
}
    284e:	2000      	movs	r0, #0
    2850:	4770      	bx	lr
	...

00002854 <_timer_set_irq>:
{
    2854:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    2856:	68c0      	ldr	r0, [r0, #12]
    2858:	4b09      	ldr	r3, [pc, #36]	; (2880 <_timer_set_irq+0x2c>)
    285a:	4798      	blx	r3
    285c:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    285e:	f240 120f 	movw	r2, #271	; 0x10f
    2862:	4908      	ldr	r1, [pc, #32]	; (2884 <_timer_set_irq+0x30>)
    2864:	2001      	movs	r0, #1
    2866:	4b08      	ldr	r3, [pc, #32]	; (2888 <_timer_set_irq+0x34>)
    2868:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    286a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    286e:	4b07      	ldr	r3, [pc, #28]	; (288c <_timer_set_irq+0x38>)
    2870:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    2874:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    2878:	4b05      	ldr	r3, [pc, #20]	; (2890 <_timer_set_irq+0x3c>)
    287a:	4798      	blx	r3
    287c:	bd10      	pop	{r4, pc}
    287e:	bf00      	nop
    2880:	00002621 	.word	0x00002621
    2884:	00017858 	.word	0x00017858
    2888:	00001a89 	.word	0x00001a89
    288c:	00017824 	.word	0x00017824
    2890:	00001be9 	.word	0x00001be9

00002894 <TC0_Handler>:
{
    2894:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
    2896:	4b06      	ldr	r3, [pc, #24]	; (28b0 <TC0_Handler+0x1c>)
    2898:	6818      	ldr	r0, [r3, #0]
	void *const hw = device->hw;
    289a:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    289c:	7a9a      	ldrb	r2, [r3, #10]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    289e:	f012 0f01 	tst.w	r2, #1
    28a2:	d100      	bne.n	28a6 <TC0_Handler+0x12>
    28a4:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    28a6:	2201      	movs	r2, #1
    28a8:	729a      	strb	r2, [r3, #10]
		device->timer_cb.period_expired(device);
    28aa:	6803      	ldr	r3, [r0, #0]
    28ac:	4798      	blx	r3
}
    28ae:	e7f9      	b.n	28a4 <TC0_Handler+0x10>
    28b0:	200000cc 	.word	0x200000cc

000028b4 <main>:
#include "oracle.h"


int main(void)
{
    28b4:	b508      	push	{r3, lr}
	oracle_init();
    28b6:	4b02      	ldr	r3, [pc, #8]	; (28c0 <main+0xc>)
    28b8:	4798      	blx	r3
	
	for(;;)
	{
		oracle_service();
    28ba:	4c02      	ldr	r4, [pc, #8]	; (28c4 <main+0x10>)
    28bc:	47a0      	blx	r4
    28be:	e7fd      	b.n	28bc <main+0x8>
    28c0:	000028c9 	.word	0x000028c9
    28c4:	00002945 	.word	0x00002945

000028c8 <oracle_init>:

static lv_disp_buf_t disp_buf;
static lv_color_t buf[LV_HOR_RES_MAX * 10];                     /*Declare a buffer for 10 lines*/
	
void oracle_init(void)
{
    28c8:	b530      	push	{r4, r5, lr}
    28ca:	b08d      	sub	sp, #52	; 0x34
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    28cc:	4b10      	ldr	r3, [pc, #64]	; (2910 <oracle_init+0x48>)
    28ce:	4798      	blx	r3
	// init mcu
	init_mcu();
	// uart init
	p_usart_init();
    28d0:	4b10      	ldr	r3, [pc, #64]	; (2914 <oracle_init+0x4c>)
    28d2:	4798      	blx	r3
	// i2c init
	p_i2c_init();
    28d4:	4b10      	ldr	r3, [pc, #64]	; (2918 <oracle_init+0x50>)
    28d6:	4798      	blx	r3
	// gpio init
	p_gpio_init();
    28d8:	4b10      	ldr	r3, [pc, #64]	; (291c <oracle_init+0x54>)
    28da:	4798      	blx	r3
	// time init
	p_tcc_init();
    28dc:	4b10      	ldr	r3, [pc, #64]	; (2920 <oracle_init+0x58>)
    28de:	4798      	blx	r3
	
	
	

	// devices init
	lv_init();
    28e0:	4b10      	ldr	r3, [pc, #64]	; (2924 <oracle_init+0x5c>)
    28e2:	4798      	blx	r3
	
	ssd1963_init();
    28e4:	4b10      	ldr	r3, [pc, #64]	; (2928 <oracle_init+0x60>)
    28e6:	4798      	blx	r3
	
	
	lv_disp_buf_init(&disp_buf, buf, NULL, LV_HOR_RES_MAX * 10);    /*Initialize the display buffer*/
    28e8:	4c10      	ldr	r4, [pc, #64]	; (292c <oracle_init+0x64>)
    28ea:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
    28ee:	2200      	movs	r2, #0
    28f0:	490f      	ldr	r1, [pc, #60]	; (2930 <oracle_init+0x68>)
    28f2:	4620      	mov	r0, r4
    28f4:	4d0f      	ldr	r5, [pc, #60]	; (2934 <oracle_init+0x6c>)
    28f6:	47a8      	blx	r5
	lv_disp_drv_t disp_drv;               /*Descriptor of a display driver*/
	lv_disp_drv_init(&disp_drv);          /*Basic initialization*/
    28f8:	a801      	add	r0, sp, #4
    28fa:	4b0f      	ldr	r3, [pc, #60]	; (2938 <oracle_init+0x70>)
    28fc:	4798      	blx	r3
	disp_drv.flush_cb = ssd1963_flush;    /*Set your driver function*/
    28fe:	4b0f      	ldr	r3, [pc, #60]	; (293c <oracle_init+0x74>)
    2900:	9304      	str	r3, [sp, #16]
	disp_drv.buffer = &disp_buf;          /*Assign the buffer to the display*/
    2902:	9402      	str	r4, [sp, #8]
	lv_disp_drv_register(&disp_drv);      /*Finally register the driver*/
    2904:	a801      	add	r0, sp, #4
    2906:	4b0e      	ldr	r3, [pc, #56]	; (2940 <oracle_init+0x78>)
    2908:	4798      	blx	r3
}
    290a:	b00d      	add	sp, #52	; 0x34
    290c:	bd30      	pop	{r4, r5, pc}
    290e:	bf00      	nop
    2910:	00001c49 	.word	0x00001c49
    2914:	00001439 	.word	0x00001439
    2918:	00001305 	.word	0x00001305
    291c:	000011b5 	.word	0x000011b5
    2920:	000013c1 	.word	0x000013c1
    2924:	00002d19 	.word	0x00002d19
    2928:	000002d1 	.word	0x000002d1
    292c:	20002650 	.word	0x20002650
    2930:	200000d0 	.word	0x200000d0
    2934:	0001001d 	.word	0x0001001d
    2938:	0000ffbd 	.word	0x0000ffbd
    293c:	00000c59 	.word	0x00000c59
    2940:	0001003d 	.word	0x0001003d

00002944 <oracle_service>:

void oracle_service(void)
{
    2944:	b508      	push	{r3, lr}
	delay_ms(1);
    2946:	2001      	movs	r0, #1
    2948:	4b02      	ldr	r3, [pc, #8]	; (2954 <oracle_service+0x10>)
    294a:	4798      	blx	r3
	lv_task_handler();
    294c:	4b02      	ldr	r3, [pc, #8]	; (2958 <oracle_service+0x14>)
    294e:	4798      	blx	r3
    2950:	bd08      	pop	{r3, pc}
    2952:	bf00      	nop
    2954:	00001535 	.word	0x00001535
    2958:	00011f31 	.word	0x00011f31

0000295c <lv_debug_check_null>:
bool lv_debug_check_null(const void * p)
{
    if(p) return true;

    return false;
}
    295c:	3000      	adds	r0, #0
    295e:	bf18      	it	ne
    2960:	2001      	movne	r0, #1
    2962:	4770      	bx	lr

00002964 <lv_debug_log_error>:
    LV_LOG_WARN("lv_debug_check_str: string is longer than LV_DEBUG_STR_MAX_LENGTH");
    return false;
}

void lv_debug_log_error(const char * msg, uint64_t value)
{
    2964:	b510      	push	{r4, lr}
    2966:	b0c0      	sub	sp, #256	; 0x100
    2968:	4604      	mov	r4, r0
    static const char hex[] = "0123456789ABCDEF";

    size_t msg_len = strlen(msg);
    296a:	4b06      	ldr	r3, [pc, #24]	; (2984 <lv_debug_log_error+0x20>)
    296c:	4798      	blx	r3
    uint32_t value_len = sizeof(unsigned long int);

    if(msg_len < 230) {
    296e:	28e5      	cmp	r0, #229	; 0xe5
    2970:	d901      	bls.n	2976 <lv_debug_log_error+0x12>
        LV_LOG_ERROR(buf);
    }
    else {
        LV_LOG_ERROR(msg);
    }
}
    2972:	b040      	add	sp, #256	; 0x100
    2974:	bd10      	pop	{r4, pc}
        _lv_memcpy(bufp, msg, msg_len);
    2976:	4602      	mov	r2, r0
    2978:	4621      	mov	r1, r4
    297a:	4668      	mov	r0, sp
    297c:	4b02      	ldr	r3, [pc, #8]	; (2988 <lv_debug_log_error+0x24>)
    297e:	4798      	blx	r3
}
    2980:	e7f7      	b.n	2972 <lv_debug_log_error+0xe>
    2982:	bf00      	nop
    2984:	000176f7 	.word	0x000176f7
    2988:	000117a5 	.word	0x000117a5

0000298c <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
    298c:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
    298e:	4603      	mov	r3, r0
    2990:	b108      	cbz	r0, 2996 <lv_disp_get_scr_act+0xa>
    if(!disp) {
        LV_LOG_WARN("lv_scr_act: no display registered to get its act. screen");
        return NULL;
    }

    return disp->act_scr;
    2992:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    2994:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
    2996:	4b03      	ldr	r3, [pc, #12]	; (29a4 <lv_disp_get_scr_act+0x18>)
    2998:	4798      	blx	r3
    if(!disp) {
    299a:	4603      	mov	r3, r0
    299c:	2800      	cmp	r0, #0
    299e:	d1f8      	bne.n	2992 <lv_disp_get_scr_act+0x6>
        return NULL;
    29a0:	2000      	movs	r0, #0
}
    29a2:	bd08      	pop	{r3, pc}
    29a4:	00010161 	.word	0x00010161

000029a8 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
    29a8:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
    29aa:	4603      	mov	r3, r0
    29ac:	b108      	cbz	r0, 29b2 <lv_disp_get_layer_top+0xa>
    if(!disp) {
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
    }

    return disp->top_layer;
    29ae:	6c18      	ldr	r0, [r3, #64]	; 0x40
    29b0:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
    29b2:	4b03      	ldr	r3, [pc, #12]	; (29c0 <lv_disp_get_layer_top+0x18>)
    29b4:	4798      	blx	r3
    if(!disp) {
    29b6:	4603      	mov	r3, r0
    29b8:	2800      	cmp	r0, #0
    29ba:	d1f8      	bne.n	29ae <lv_disp_get_layer_top+0x6>
        return NULL;
    29bc:	2000      	movs	r0, #0
}
    29be:	bd08      	pop	{r3, pc}
    29c0:	00010161 	.word	0x00010161

000029c4 <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer  should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
    29c4:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
    29c6:	4603      	mov	r3, r0
    29c8:	b108      	cbz	r0, 29ce <lv_disp_get_layer_sys+0xa>
    if(!disp) {
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
    }

    return disp->sys_layer;
    29ca:	6c58      	ldr	r0, [r3, #68]	; 0x44
    29cc:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
    29ce:	4b03      	ldr	r3, [pc, #12]	; (29dc <lv_disp_get_layer_sys+0x18>)
    29d0:	4798      	blx	r3
    if(!disp) {
    29d2:	4603      	mov	r3, r0
    29d4:	2800      	cmp	r0, #0
    29d6:	d1f8      	bne.n	29ca <lv_disp_get_layer_sys+0x6>
        return NULL;
    29d8:	2000      	movs	r0, #0
}
    29da:	bd08      	pop	{r3, pc}
    29dc:	00010161 	.word	0x00010161

000029e0 <obj_to_foreground>:
static void obj_to_foreground(lv_obj_t * obj)
{
    /*Search for 'top' attribute*/
    lv_obj_t * i        = obj;
    lv_obj_t * last_top = NULL;
    while(i != NULL) {
    29e0:	b1a0      	cbz	r0, 2a0c <obj_to_foreground+0x2c>
{
    29e2:	b538      	push	{r3, r4, r5, lr}
    29e4:	4603      	mov	r3, r0
    while(i != NULL) {
    29e6:	2400      	movs	r4, #0
        if(i->top != 0) last_top = i;
        i = lv_obj_get_parent(i);
    29e8:	4d09      	ldr	r5, [pc, #36]	; (2a10 <obj_to_foreground+0x30>)
        if(i->top != 0) last_top = i;
    29ea:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
    29ee:	f002 0220 	and.w	r2, r2, #32
    29f2:	2a00      	cmp	r2, #0
    29f4:	bf18      	it	ne
    29f6:	461c      	movne	r4, r3
        i = lv_obj_get_parent(i);
    29f8:	4618      	mov	r0, r3
    29fa:	47a8      	blx	r5
    while(i != NULL) {
    29fc:	4603      	mov	r3, r0
    29fe:	2800      	cmp	r0, #0
    2a00:	d1f3      	bne.n	29ea <obj_to_foreground+0xa>
    }

    if(last_top != NULL) {
    2a02:	b114      	cbz	r4, 2a0a <obj_to_foreground+0x2a>
        /*Move the last_top object to the foreground*/
        lv_obj_move_foreground(last_top);
    2a04:	4620      	mov	r0, r4
    2a06:	4b03      	ldr	r3, [pc, #12]	; (2a14 <obj_to_foreground+0x34>)
    2a08:	4798      	blx	r3
    2a0a:	bd38      	pop	{r3, r4, r5, pc}
    2a0c:	4770      	bx	lr
    2a0e:	bf00      	nop
    2a10:	00002f3d 	.word	0x00002f3d
    2a14:	000034bd 	.word	0x000034bd

00002a18 <focus_next_core>:
{
    2a18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(group->frozen) return;
    2a1c:	7d03      	ldrb	r3, [r0, #20]
    2a1e:	f013 0f01 	tst.w	r3, #1
    2a22:	d12a      	bne.n	2a7a <focus_next_core+0x62>
    2a24:	4617      	mov	r7, r2
    2a26:	468a      	mov	sl, r1
    2a28:	4606      	mov	r6, r0
    lv_obj_t ** obj_next     = group->obj_focus;
    2a2a:	68c4      	ldr	r4, [r0, #12]
    bool can_begin           = true;
    2a2c:	f04f 0901 	mov.w	r9, #1
    lv_obj_t ** obj_sentinel = NULL;
    2a30:	2500      	movs	r5, #0
        if(!lv_obj_get_hidden(*obj_next)) break;
    2a32:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 2af8 <focus_next_core+0xe0>
                can_begin = false;
    2a36:	46ab      	mov	fp, r5
    2a38:	e04a      	b.n	2ad0 <focus_next_core+0xb8>
            if(group->wrap || obj_sentinel == NULL) {
    2a3a:	7d33      	ldrb	r3, [r6, #20]
    2a3c:	f013 0f10 	tst.w	r3, #16
    2a40:	d100      	bne.n	2a44 <focus_next_core+0x2c>
    2a42:	b9d5      	cbnz	r5, 2a7a <focus_next_core+0x62>
                if(!can_begin) return;
    2a44:	f1b9 0f00 	cmp.w	r9, #0
    2a48:	d017      	beq.n	2a7a <focus_next_core+0x62>
                obj_next  = begin(&group->obj_ll);
    2a4a:	4630      	mov	r0, r6
    2a4c:	47d0      	blx	sl
    2a4e:	4604      	mov	r4, r0
        if(obj_sentinel == NULL) {
    2a50:	2d00      	cmp	r5, #0
    2a52:	d035      	beq.n	2ac0 <focus_next_core+0xa8>
                can_begin = false;
    2a54:	46d9      	mov	r9, fp
    2a56:	e046      	b.n	2ae6 <focus_next_core+0xce>
    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
    2a58:	68f3      	ldr	r3, [r6, #12]
    2a5a:	42a3      	cmp	r3, r4
    2a5c:	d00d      	beq.n	2a7a <focus_next_core+0x62>
    if(group->obj_focus) {
    2a5e:	b193      	cbz	r3, 2a86 <focus_next_core+0x6e>
        (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
    2a60:	6818      	ldr	r0, [r3, #0]
    2a62:	69c3      	ldr	r3, [r0, #28]
    2a64:	2200      	movs	r2, #0
    2a66:	2117      	movs	r1, #23
    2a68:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, NULL);
    2a6a:	68f3      	ldr	r3, [r6, #12]
    2a6c:	2200      	movs	r2, #0
    2a6e:	210e      	movs	r1, #14
    2a70:	6818      	ldr	r0, [r3, #0]
    2a72:	4b1e      	ldr	r3, [pc, #120]	; (2aec <focus_next_core+0xd4>)
    2a74:	4798      	blx	r3
        if(res != LV_RES_OK) return;
    2a76:	2801      	cmp	r0, #1
    2a78:	d001      	beq.n	2a7e <focus_next_core+0x66>
    2a7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_obj_invalidate(*group->obj_focus);
    2a7e:	68f3      	ldr	r3, [r6, #12]
    2a80:	6818      	ldr	r0, [r3, #0]
    2a82:	4b1b      	ldr	r3, [pc, #108]	; (2af0 <focus_next_core+0xd8>)
    2a84:	4798      	blx	r3
    group->obj_focus = obj_next;
    2a86:	60f4      	str	r4, [r6, #12]
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
    2a88:	6820      	ldr	r0, [r4, #0]
    2a8a:	69c3      	ldr	r3, [r0, #28]
    2a8c:	2200      	movs	r2, #0
    2a8e:	2116      	movs	r1, #22
    2a90:	4798      	blx	r3
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
    2a92:	68f3      	ldr	r3, [r6, #12]
    2a94:	2200      	movs	r2, #0
    2a96:	210d      	movs	r1, #13
    2a98:	6818      	ldr	r0, [r3, #0]
    2a9a:	4b14      	ldr	r3, [pc, #80]	; (2aec <focus_next_core+0xd4>)
    2a9c:	4798      	blx	r3
    if(res != LV_RES_OK) return;
    2a9e:	2801      	cmp	r0, #1
    2aa0:	d1eb      	bne.n	2a7a <focus_next_core+0x62>
    obj_to_foreground(*group->obj_focus);
    2aa2:	68f3      	ldr	r3, [r6, #12]
    2aa4:	6818      	ldr	r0, [r3, #0]
    2aa6:	4b13      	ldr	r3, [pc, #76]	; (2af4 <focus_next_core+0xdc>)
    2aa8:	4798      	blx	r3
    lv_obj_invalidate(*group->obj_focus);
    2aaa:	68f3      	ldr	r3, [r6, #12]
    2aac:	6818      	ldr	r0, [r3, #0]
    2aae:	4b10      	ldr	r3, [pc, #64]	; (2af0 <focus_next_core+0xd8>)
    2ab0:	4798      	blx	r3
    if(group->focus_cb) group->focus_cb(group);
    2ab2:	6933      	ldr	r3, [r6, #16]
    2ab4:	2b00      	cmp	r3, #0
    2ab6:	d0e0      	beq.n	2a7a <focus_next_core+0x62>
    2ab8:	4630      	mov	r0, r6
    2aba:	4798      	blx	r3
    2abc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(obj_sentinel == NULL) return; /*Group is empty*/
    2ac0:	2800      	cmp	r0, #0
    2ac2:	d0da      	beq.n	2a7a <focus_next_core+0x62>
                obj_next  = begin(&group->obj_ll);
    2ac4:	4605      	mov	r5, r0
                can_begin = false;
    2ac6:	46d9      	mov	r9, fp
        if(!lv_obj_get_hidden(*obj_next)) break;
    2ac8:	6820      	ldr	r0, [r4, #0]
    2aca:	47c0      	blx	r8
    2acc:	2800      	cmp	r0, #0
    2ace:	d0c3      	beq.n	2a58 <focus_next_core+0x40>
        if(obj_next == NULL) {
    2ad0:	2c00      	cmp	r4, #0
    2ad2:	d0b2      	beq.n	2a3a <focus_next_core+0x22>
    2ad4:	2d00      	cmp	r5, #0
    2ad6:	bf08      	it	eq
    2ad8:	4625      	moveq	r5, r4
            obj_next = move(&group->obj_ll, obj_next);
    2ada:	4621      	mov	r1, r4
    2adc:	4630      	mov	r0, r6
    2ade:	47b8      	blx	r7
    2ae0:	4604      	mov	r4, r0
            if(obj_next == obj_sentinel) return;
    2ae2:	42a8      	cmp	r0, r5
    2ae4:	d0c9      	beq.n	2a7a <focus_next_core+0x62>
        if(obj_next == NULL) continue;
    2ae6:	2c00      	cmp	r4, #0
    2ae8:	d1ee      	bne.n	2ac8 <focus_next_core+0xb0>
    2aea:	e7f1      	b.n	2ad0 <focus_next_core+0xb8>
    2aec:	00002eb9 	.word	0x00002eb9
    2af0:	00003445 	.word	0x00003445
    2af4:	000029e1 	.word	0x000029e1
    2af8:	00003305 	.word	0x00003305

00002afc <_lv_group_init>:
{
    2afc:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
    2afe:	2118      	movs	r1, #24
    2b00:	4801      	ldr	r0, [pc, #4]	; (2b08 <_lv_group_init+0xc>)
    2b02:	4b02      	ldr	r3, [pc, #8]	; (2b0c <_lv_group_init+0x10>)
    2b04:	4798      	blx	r3
    2b06:	bd08      	pop	{r3, pc}
    2b08:	2000adf4 	.word	0x2000adf4
    2b0c:	000110d9 	.word	0x000110d9

00002b10 <lv_group_focus_next>:
{
    2b10:	b508      	push	{r3, lr}
    focus_next_core(group, _lv_ll_get_head, _lv_ll_get_next);
    2b12:	4a02      	ldr	r2, [pc, #8]	; (2b1c <lv_group_focus_next+0xc>)
    2b14:	4902      	ldr	r1, [pc, #8]	; (2b20 <lv_group_focus_next+0x10>)
    2b16:	4b03      	ldr	r3, [pc, #12]	; (2b24 <lv_group_focus_next+0x14>)
    2b18:	4798      	blx	r3
    2b1a:	bd08      	pop	{r3, pc}
    2b1c:	0001119d 	.word	0x0001119d
    2b20:	00011189 	.word	0x00011189
    2b24:	00002a19 	.word	0x00002a19

00002b28 <lv_group_focus_prev>:
{
    2b28:	b508      	push	{r3, lr}
    focus_next_core(group, _lv_ll_get_tail, _lv_ll_get_prev);
    2b2a:	4a02      	ldr	r2, [pc, #8]	; (2b34 <lv_group_focus_prev+0xc>)
    2b2c:	4902      	ldr	r1, [pc, #8]	; (2b38 <lv_group_focus_prev+0x10>)
    2b2e:	4b03      	ldr	r3, [pc, #12]	; (2b3c <lv_group_focus_prev+0x14>)
    2b30:	4798      	blx	r3
    2b32:	bd08      	pop	{r3, pc}
    2b34:	000111c9 	.word	0x000111c9
    2b38:	00011193 	.word	0x00011193
    2b3c:	00002a19 	.word	0x00002a19

00002b40 <lv_group_refocus>:
{
    2b40:	b538      	push	{r3, r4, r5, lr}
    2b42:	4604      	mov	r4, r0
    uint8_t temp_wrap = g->wrap;
    2b44:	7d03      	ldrb	r3, [r0, #20]
    2b46:	f3c3 1500 	ubfx	r5, r3, #4, #1
    g->wrap           = 1;
    2b4a:	f043 0310 	orr.w	r3, r3, #16
    2b4e:	7503      	strb	r3, [r0, #20]
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
    2b50:	f013 0f08 	tst.w	r3, #8
        lv_group_focus_next(g);
    2b54:	bf0c      	ite	eq
    2b56:	4b04      	ldreq	r3, [pc, #16]	; (2b68 <lv_group_refocus+0x28>)
        lv_group_focus_prev(g);
    2b58:	4b04      	ldrne	r3, [pc, #16]	; (2b6c <lv_group_refocus+0x2c>)
    2b5a:	4798      	blx	r3
    g->wrap = temp_wrap;
    2b5c:	7d23      	ldrb	r3, [r4, #20]
    2b5e:	f365 1304 	bfi	r3, r5, #4, #1
    2b62:	7523      	strb	r3, [r4, #20]
    2b64:	bd38      	pop	{r3, r4, r5, pc}
    2b66:	bf00      	nop
    2b68:	00002b11 	.word	0x00002b11
    2b6c:	00002b29 	.word	0x00002b29

00002b70 <lv_group_add_obj>:
    if(group == NULL) return;
    2b70:	2800      	cmp	r0, #0
    2b72:	d036      	beq.n	2be2 <lv_group_add_obj+0x72>
{
    2b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b76:	4605      	mov	r5, r0
    2b78:	460c      	mov	r4, r1
    _LV_LL_READ(group->obj_ll, obj_i) {
    2b7a:	4607      	mov	r7, r0
    2b7c:	4b19      	ldr	r3, [pc, #100]	; (2be4 <lv_group_add_obj+0x74>)
    2b7e:	4798      	blx	r3
    2b80:	4601      	mov	r1, r0
    2b82:	b158      	cbz	r0, 2b9c <lv_group_add_obj+0x2c>
        if((*obj_i) == obj) {
    2b84:	6803      	ldr	r3, [r0, #0]
    2b86:	429c      	cmp	r4, r3
    2b88:	d007      	beq.n	2b9a <lv_group_add_obj+0x2a>
    _LV_LL_READ(group->obj_ll, obj_i) {
    2b8a:	4e17      	ldr	r6, [pc, #92]	; (2be8 <lv_group_add_obj+0x78>)
    2b8c:	4638      	mov	r0, r7
    2b8e:	47b0      	blx	r6
    2b90:	4601      	mov	r1, r0
    2b92:	b118      	cbz	r0, 2b9c <lv_group_add_obj+0x2c>
        if((*obj_i) == obj) {
    2b94:	680b      	ldr	r3, [r1, #0]
    2b96:	42a3      	cmp	r3, r4
    2b98:	d1f8      	bne.n	2b8c <lv_group_add_obj+0x1c>
    2b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(obj->group_p) {
    2b9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2b9e:	b133      	cbz	r3, 2bae <lv_group_add_obj+0x3e>
        if(lv_obj_is_focused(obj)) {
    2ba0:	4620      	mov	r0, r4
    2ba2:	4b12      	ldr	r3, [pc, #72]	; (2bec <lv_group_add_obj+0x7c>)
    2ba4:	4798      	blx	r3
    2ba6:	b110      	cbz	r0, 2bae <lv_group_add_obj+0x3e>
            lv_group_refocus(obj->group_p);
    2ba8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    2baa:	4b11      	ldr	r3, [pc, #68]	; (2bf0 <lv_group_add_obj+0x80>)
    2bac:	4798      	blx	r3
    obj->group_p     = group;
    2bae:	63a5      	str	r5, [r4, #56]	; 0x38
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
    2bb0:	4628      	mov	r0, r5
    2bb2:	4b10      	ldr	r3, [pc, #64]	; (2bf4 <lv_group_add_obj+0x84>)
    2bb4:	4798      	blx	r3
    2bb6:	4606      	mov	r6, r0
    LV_ASSERT_MEM(next);
    2bb8:	4b0f      	ldr	r3, [pc, #60]	; (2bf8 <lv_group_add_obj+0x88>)
    2bba:	4798      	blx	r3
    2bbc:	b158      	cbz	r0, 2bd6 <lv_group_add_obj+0x66>
    if(next == NULL) return;
    2bbe:	2e00      	cmp	r6, #0
    2bc0:	d0eb      	beq.n	2b9a <lv_group_add_obj+0x2a>
    *next = obj;
    2bc2:	6034      	str	r4, [r6, #0]
    if(_lv_ll_get_head(&group->obj_ll) == next) {
    2bc4:	4628      	mov	r0, r5
    2bc6:	4b07      	ldr	r3, [pc, #28]	; (2be4 <lv_group_add_obj+0x74>)
    2bc8:	4798      	blx	r3
    2bca:	4286      	cmp	r6, r0
    2bcc:	d1e5      	bne.n	2b9a <lv_group_add_obj+0x2a>
        lv_group_refocus(group);
    2bce:	4628      	mov	r0, r5
    2bd0:	4b07      	ldr	r3, [pc, #28]	; (2bf0 <lv_group_add_obj+0x80>)
    2bd2:	4798      	blx	r3
    2bd4:	e7e1      	b.n	2b9a <lv_group_add_obj+0x2a>
    LV_ASSERT_MEM(next);
    2bd6:	4632      	mov	r2, r6
    2bd8:	2300      	movs	r3, #0
    2bda:	4808      	ldr	r0, [pc, #32]	; (2bfc <lv_group_add_obj+0x8c>)
    2bdc:	4908      	ldr	r1, [pc, #32]	; (2c00 <lv_group_add_obj+0x90>)
    2bde:	4788      	blx	r1
    2be0:	e7fe      	b.n	2be0 <lv_group_add_obj+0x70>
    2be2:	4770      	bx	lr
    2be4:	00011189 	.word	0x00011189
    2be8:	0001119d 	.word	0x0001119d
    2bec:	000049d1 	.word	0x000049d1
    2bf0:	00002b41 	.word	0x00002b41
    2bf4:	0001113d 	.word	0x0001113d
    2bf8:	0000295d 	.word	0x0000295d
    2bfc:	0001786c 	.word	0x0001786c
    2c00:	00002965 	.word	0x00002965

00002c04 <lv_group_get_focused>:
    if(!group) return NULL;
    2c04:	b118      	cbz	r0, 2c0e <lv_group_get_focused+0xa>
    if(group->obj_focus == NULL) return NULL;
    2c06:	68c3      	ldr	r3, [r0, #12]
    2c08:	b11b      	cbz	r3, 2c12 <lv_group_get_focused+0xe>
    return *group->obj_focus;
    2c0a:	6818      	ldr	r0, [r3, #0]
    2c0c:	4770      	bx	lr
    if(!group) return NULL;
    2c0e:	2000      	movs	r0, #0
    2c10:	4770      	bx	lr
    if(group->obj_focus == NULL) return NULL;
    2c12:	2000      	movs	r0, #0
}
    2c14:	4770      	bx	lr

00002c16 <lv_group_get_editing>:
    if(!group) return false;
    2c16:	b118      	cbz	r0, 2c20 <lv_group_get_editing+0xa>
    return group->editing ? true : false;
    2c18:	7d00      	ldrb	r0, [r0, #20]
    2c1a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2c1e:	4770      	bx	lr
    if(!group) return false;
    2c20:	2000      	movs	r0, #0
}
    2c22:	4770      	bx	lr

00002c24 <lv_indev_get_act>:
 * right now
 */
lv_indev_t * lv_indev_get_act(void)
{
    return indev_act;
}
    2c24:	4b01      	ldr	r3, [pc, #4]	; (2c2c <lv_indev_get_act+0x8>)
    2c26:	6858      	ldr	r0, [r3, #4]
    2c28:	4770      	bx	lr
    2c2a:	bf00      	nop
    2c2c:	20002674 	.word	0x20002674

00002c30 <lv_indev_reset>:
 * Reset one or all input devices
 * @param indev pointer to an input device to reset or NULL to reset all of them
 * @param obj pointer to an object which triggers the reset.
 */
void lv_indev_reset(lv_indev_t * indev, lv_obj_t * obj)
{
    2c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(indev) {
    2c32:	b1b0      	cbz	r0, 2c62 <lv_indev_reset+0x32>
    2c34:	4603      	mov	r3, r0
        indev->proc.reset_query = 1;
    2c36:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
    2c3a:	f042 0202 	orr.w	r2, r2, #2
    2c3e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
        if(indev_act == indev) indev_obj_act = NULL;
    2c42:	4a18      	ldr	r2, [pc, #96]	; (2ca4 <lv_indev_reset+0x74>)
    2c44:	6852      	ldr	r2, [r2, #4]
    2c46:	4290      	cmp	r0, r2
    2c48:	d004      	beq.n	2c54 <lv_indev_reset+0x24>
        if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
    2c4a:	b139      	cbz	r1, 2c5c <lv_indev_reset+0x2c>
    2c4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    2c4e:	4291      	cmp	r1, r2
    2c50:	d004      	beq.n	2c5c <lv_indev_reset+0x2c>
    2c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(indev_act == indev) indev_obj_act = NULL;
    2c54:	2000      	movs	r0, #0
    2c56:	4a13      	ldr	r2, [pc, #76]	; (2ca4 <lv_indev_reset+0x74>)
    2c58:	6010      	str	r0, [r2, #0]
    2c5a:	e7f6      	b.n	2c4a <lv_indev_reset+0x1a>
            indev->proc.types.pointer.last_pressed = NULL;
    2c5c:	2200      	movs	r2, #0
    2c5e:	63da      	str	r2, [r3, #60]	; 0x3c
    2c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2c62:	460c      	mov	r4, r1
        }
    }
    else {
        lv_indev_t * i = lv_indev_get_next(NULL);
    2c64:	2000      	movs	r0, #0
    2c66:	4b10      	ldr	r3, [pc, #64]	; (2ca8 <lv_indev_reset+0x78>)
    2c68:	4798      	blx	r3
        while(i) {
    2c6a:	4603      	mov	r3, r0
    2c6c:	2800      	cmp	r0, #0
    2c6e:	d0f0      	beq.n	2c52 <lv_indev_reset+0x22>
            i->proc.reset_query = 1;
            if(indev_act == i) indev_obj_act = NULL;
    2c70:	4d0c      	ldr	r5, [pc, #48]	; (2ca4 <lv_indev_reset+0x74>)
    2c72:	2700      	movs	r7, #0
            if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
                i->proc.types.pointer.last_pressed = NULL;
            }
            i = lv_indev_get_next(i);
    2c74:	4e0c      	ldr	r6, [pc, #48]	; (2ca8 <lv_indev_reset+0x78>)
    2c76:	e005      	b.n	2c84 <lv_indev_reset+0x54>
                i->proc.types.pointer.last_pressed = NULL;
    2c78:	63df      	str	r7, [r3, #60]	; 0x3c
            i = lv_indev_get_next(i);
    2c7a:	4618      	mov	r0, r3
    2c7c:	47b0      	blx	r6
        while(i) {
    2c7e:	4603      	mov	r3, r0
    2c80:	2800      	cmp	r0, #0
    2c82:	d0e6      	beq.n	2c52 <lv_indev_reset+0x22>
            i->proc.reset_query = 1;
    2c84:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
    2c88:	f042 0202 	orr.w	r2, r2, #2
    2c8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            if(indev_act == i) indev_obj_act = NULL;
    2c90:	686a      	ldr	r2, [r5, #4]
    2c92:	429a      	cmp	r2, r3
    2c94:	bf08      	it	eq
    2c96:	602f      	streq	r7, [r5, #0]
            if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
    2c98:	2c00      	cmp	r4, #0
    2c9a:	d0ed      	beq.n	2c78 <lv_indev_reset+0x48>
    2c9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    2c9e:	4294      	cmp	r4, r2
    2ca0:	d1eb      	bne.n	2c7a <lv_indev_reset+0x4a>
    2ca2:	e7e9      	b.n	2c78 <lv_indev_reset+0x48>
    2ca4:	20002674 	.word	0x20002674
    2ca8:	000102a1 	.word	0x000102a1

00002cac <_lv_indev_init>:
{
    2cac:	b508      	push	{r3, lr}
    lv_indev_reset(NULL, NULL); /*Reset all input devices*/
    2cae:	2100      	movs	r1, #0
    2cb0:	4608      	mov	r0, r1
    2cb2:	4b01      	ldr	r3, [pc, #4]	; (2cb8 <_lv_indev_init+0xc>)
    2cb4:	4798      	blx	r3
    2cb6:	bd08      	pop	{r3, pc}
    2cb8:	00002c31 	.word	0x00002c31

00002cbc <refresh_children_position>:
 * @param obj pointer to an object which children will be repositioned
 * @param x_diff x coordinate shift
 * @param y_diff y coordinate shift
 */
static void refresh_children_position(lv_obj_t * obj, lv_coord_t x_diff, lv_coord_t y_diff)
{
    2cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2cc0:	4689      	mov	r9, r1
    2cc2:	4690      	mov	r8, r2
    lv_obj_t * i;
    _LV_LL_READ(obj->child_ll, i) {
    2cc4:	f100 0a04 	add.w	sl, r0, #4
    2cc8:	4650      	mov	r0, sl
    2cca:	4b11      	ldr	r3, [pc, #68]	; (2d10 <refresh_children_position+0x54>)
    2ccc:	4798      	blx	r3
    2cce:	b1e0      	cbz	r0, 2d0a <refresh_children_position+0x4e>
    2cd0:	4604      	mov	r4, r0
        i->coords.x1 += x_diff;
    2cd2:	fa1f f689 	uxth.w	r6, r9
        i->coords.y1 += y_diff;
    2cd6:	fa1f f588 	uxth.w	r5, r8
    _LV_LL_READ(obj->child_ll, i) {
    2cda:	4f0e      	ldr	r7, [pc, #56]	; (2d14 <refresh_children_position+0x58>)
        i->coords.x1 += x_diff;
    2cdc:	8a23      	ldrh	r3, [r4, #16]
    2cde:	4433      	add	r3, r6
    2ce0:	8223      	strh	r3, [r4, #16]
        i->coords.y1 += y_diff;
    2ce2:	8a63      	ldrh	r3, [r4, #18]
    2ce4:	442b      	add	r3, r5
    2ce6:	8263      	strh	r3, [r4, #18]
        i->coords.x2 += x_diff;
    2ce8:	8aa3      	ldrh	r3, [r4, #20]
    2cea:	4433      	add	r3, r6
    2cec:	82a3      	strh	r3, [r4, #20]
        i->coords.y2 += y_diff;
    2cee:	8ae3      	ldrh	r3, [r4, #22]
    2cf0:	442b      	add	r3, r5
    2cf2:	82e3      	strh	r3, [r4, #22]

        refresh_children_position(i, x_diff, y_diff);
    2cf4:	4642      	mov	r2, r8
    2cf6:	4649      	mov	r1, r9
    2cf8:	4620      	mov	r0, r4
    2cfa:	f7ff ffdf 	bl	2cbc <refresh_children_position>
    _LV_LL_READ(obj->child_ll, i) {
    2cfe:	4621      	mov	r1, r4
    2d00:	4650      	mov	r0, sl
    2d02:	47b8      	blx	r7
    2d04:	4604      	mov	r4, r0
    2d06:	2800      	cmp	r0, #0
    2d08:	d1e8      	bne.n	2cdc <refresh_children_position+0x20>
    2d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2d0e:	bf00      	nop
    2d10:	00011189 	.word	0x00011189
    2d14:	0001119d 	.word	0x0001119d

00002d18 <lv_init>:
    if(lv_initialized) {
    2d18:	4b1a      	ldr	r3, [pc, #104]	; (2d84 <lv_init+0x6c>)
    2d1a:	781b      	ldrb	r3, [r3, #0]
    2d1c:	b103      	cbz	r3, 2d20 <lv_init+0x8>
    2d1e:	4770      	bx	lr
{
    2d20:	b530      	push	{r4, r5, lr}
    2d22:	b085      	sub	sp, #20
    _lv_mem_init();
    2d24:	4b18      	ldr	r3, [pc, #96]	; (2d88 <lv_init+0x70>)
    2d26:	4798      	blx	r3
    _lv_task_core_init();
    2d28:	4b18      	ldr	r3, [pc, #96]	; (2d8c <lv_init+0x74>)
    2d2a:	4798      	blx	r3
    _lv_fs_init();
    2d2c:	4b18      	ldr	r3, [pc, #96]	; (2d90 <lv_init+0x78>)
    2d2e:	4798      	blx	r3
    _lv_anim_core_init();
    2d30:	4b18      	ldr	r3, [pc, #96]	; (2d94 <lv_init+0x7c>)
    2d32:	4798      	blx	r3
    _lv_group_init();
    2d34:	4b18      	ldr	r3, [pc, #96]	; (2d98 <lv_init+0x80>)
    2d36:	4798      	blx	r3
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(lv_style_trans_t));
    2d38:	2110      	movs	r1, #16
    2d3a:	4818      	ldr	r0, [pc, #96]	; (2d9c <lv_init+0x84>)
    2d3c:	4c18      	ldr	r4, [pc, #96]	; (2da0 <lv_init+0x88>)
    2d3e:	47a0      	blx	r4
    lv_theme_t * th = LV_THEME_DEFAULT_INIT(LV_THEME_DEFAULT_COLOR_PRIMARY, LV_THEME_DEFAULT_COLOR_SECONDARY,
    2d40:	4b18      	ldr	r3, [pc, #96]	; (2da4 <lv_init+0x8c>)
    2d42:	9302      	str	r3, [sp, #8]
    2d44:	9301      	str	r3, [sp, #4]
    2d46:	9300      	str	r3, [sp, #0]
    2d48:	2202      	movs	r2, #2
    2d4a:	f04f 011f 	mov.w	r1, #31
    2d4e:	f64f 0000 	movw	r0, #63488	; 0xf800
    2d52:	4d15      	ldr	r5, [pc, #84]	; (2da8 <lv_init+0x90>)
    2d54:	47a8      	blx	r5
    lv_theme_set_act(th);
    2d56:	4b15      	ldr	r3, [pc, #84]	; (2dac <lv_init+0x94>)
    2d58:	4798      	blx	r3
    _lv_refr_init();
    2d5a:	4b15      	ldr	r3, [pc, #84]	; (2db0 <lv_init+0x98>)
    2d5c:	4798      	blx	r3
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
    2d5e:	f44f 71b8 	mov.w	r1, #368	; 0x170
    2d62:	4814      	ldr	r0, [pc, #80]	; (2db4 <lv_init+0x9c>)
    2d64:	47a0      	blx	r4
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
    2d66:	2160      	movs	r1, #96	; 0x60
    2d68:	4813      	ldr	r0, [pc, #76]	; (2db8 <lv_init+0xa0>)
    2d6a:	47a0      	blx	r4
    _lv_indev_init();
    2d6c:	4b13      	ldr	r3, [pc, #76]	; (2dbc <lv_init+0xa4>)
    2d6e:	4798      	blx	r3
    _lv_img_decoder_init();
    2d70:	4b13      	ldr	r3, [pc, #76]	; (2dc0 <lv_init+0xa8>)
    2d72:	4798      	blx	r3
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
    2d74:	2001      	movs	r0, #1
    2d76:	4b13      	ldr	r3, [pc, #76]	; (2dc4 <lv_init+0xac>)
    2d78:	4798      	blx	r3
    lv_initialized = true;
    2d7a:	2201      	movs	r2, #1
    2d7c:	4b01      	ldr	r3, [pc, #4]	; (2d84 <lv_init+0x6c>)
    2d7e:	701a      	strb	r2, [r3, #0]
}
    2d80:	b005      	add	sp, #20
    2d82:	bd30      	pop	{r4, r5, pc}
    2d84:	2000267c 	.word	0x2000267c
    2d88:	00011555 	.word	0x00011555
    2d8c:	00011d89 	.word	0x00011d89
    2d90:	00010e79 	.word	0x00010e79
    2d94:	0001051d 	.word	0x0001051d
    2d98:	00002afd 	.word	0x00002afd
    2d9c:	2000ad50 	.word	0x2000ad50
    2da0:	000110d9 	.word	0x000110d9
    2da4:	20000010 	.word	0x20000010
    2da8:	000151b5 	.word	0x000151b5
    2dac:	000128f1 	.word	0x000128f1
    2db0:	00005675 	.word	0x00005675
    2db4:	2000acac 	.word	0x2000acac
    2db8:	2000aca0 	.word	0x2000aca0
    2dbc:	00002cad 	.word	0x00002cad
    2dc0:	0000f2b5 	.word	0x0000f2b5
    2dc4:	0000e8ed 	.word	0x0000e8ed

00002dc8 <lv_obj_set_click>:
{
    2dc8:	b538      	push	{r3, r4, r5, lr}
    2dca:	4604      	mov	r4, r0
    2dcc:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2dce:	4b08      	ldr	r3, [pc, #32]	; (2df0 <lv_obj_set_click+0x28>)
    2dd0:	4798      	blx	r3
    2dd2:	b130      	cbz	r0, 2de2 <lv_obj_set_click+0x1a>
    obj->click = (en == true ? 1 : 0);
    2dd4:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    2dd8:	f365 0300 	bfi	r3, r5, #0, #1
    2ddc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    2de0:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2de2:	4622      	mov	r2, r4
    2de4:	2300      	movs	r3, #0
    2de6:	4803      	ldr	r0, [pc, #12]	; (2df4 <lv_obj_set_click+0x2c>)
    2de8:	4903      	ldr	r1, [pc, #12]	; (2df8 <lv_obj_set_click+0x30>)
    2dea:	4788      	blx	r1
    2dec:	e7fe      	b.n	2dec <lv_obj_set_click+0x24>
    2dee:	bf00      	nop
    2df0:	0000295d 	.word	0x0000295d
    2df4:	00017880 	.word	0x00017880
    2df8:	00002965 	.word	0x00002965

00002dfc <lv_event_send_func>:
{
    2dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2e00:	b084      	sub	sp, #16
    2e02:	4607      	mov	r7, r0
    2e04:	4615      	mov	r5, r2
    2e06:	461e      	mov	r6, r3
    if(obj != NULL) {
    2e08:	460c      	mov	r4, r1
    2e0a:	b121      	cbz	r1, 2e16 <lv_event_send_func+0x1a>
        LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2e0c:	4608      	mov	r0, r1
    2e0e:	4b24      	ldr	r3, [pc, #144]	; (2ea0 <lv_event_send_func+0xa4>)
    2e10:	4798      	blx	r3
    2e12:	2800      	cmp	r0, #0
    2e14:	d033      	beq.n	2e7e <lv_event_send_func+0x82>
    event_temp_data.obj     = obj;
    2e16:	9401      	str	r4, [sp, #4]
    event_temp_data.deleted = false;
    2e18:	2300      	movs	r3, #0
    2e1a:	f88d 3008 	strb.w	r3, [sp, #8]
    event_temp_data.prev    = NULL;
    2e1e:	9303      	str	r3, [sp, #12]
    if(event_temp_data_head) {
    2e20:	4b20      	ldr	r3, [pc, #128]	; (2ea4 <lv_event_send_func+0xa8>)
    2e22:	685b      	ldr	r3, [r3, #4]
    2e24:	b103      	cbz	r3, 2e28 <lv_event_send_func+0x2c>
        event_temp_data.prev = event_temp_data_head;
    2e26:	9303      	str	r3, [sp, #12]
    event_temp_data_head = &event_temp_data;
    2e28:	4b1e      	ldr	r3, [pc, #120]	; (2ea4 <lv_event_send_func+0xa8>)
    2e2a:	aa01      	add	r2, sp, #4
    2e2c:	605a      	str	r2, [r3, #4]
    const void * event_act_data_save = event_act_data;
    2e2e:	f8d3 8008 	ldr.w	r8, [r3, #8]
    event_act_data                   = data;
    2e32:	609e      	str	r6, [r3, #8]
    lv_indev_t * indev_act = lv_indev_get_act();
    2e34:	4b1c      	ldr	r3, [pc, #112]	; (2ea8 <lv_event_send_func+0xac>)
    2e36:	4798      	blx	r3
    if(indev_act) {
    2e38:	b118      	cbz	r0, 2e42 <lv_event_send_func+0x46>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
    2e3a:	6883      	ldr	r3, [r0, #8]
    2e3c:	b10b      	cbz	r3, 2e42 <lv_event_send_func+0x46>
    2e3e:	4629      	mov	r1, r5
    2e40:	4798      	blx	r3
    if(event_xcb) event_xcb(obj, event);
    2e42:	b117      	cbz	r7, 2e4a <lv_event_send_func+0x4e>
    2e44:	4629      	mov	r1, r5
    2e46:	4620      	mov	r0, r4
    2e48:	47b8      	blx	r7
    event_act_data = event_act_data_save;
    2e4a:	4b16      	ldr	r3, [pc, #88]	; (2ea4 <lv_event_send_func+0xa8>)
    2e4c:	f8c3 8008 	str.w	r8, [r3, #8]
    event_temp_data_head = event_temp_data_head->prev;
    2e50:	685a      	ldr	r2, [r3, #4]
    2e52:	6892      	ldr	r2, [r2, #8]
    2e54:	605a      	str	r2, [r3, #4]
    if(event_temp_data.deleted) {
    2e56:	f89d 3008 	ldrb.w	r3, [sp, #8]
    2e5a:	b9b3      	cbnz	r3, 2e8a <lv_event_send_func+0x8e>
    if(obj) {
    2e5c:	b1cc      	cbz	r4, 2e92 <lv_event_send_func+0x96>
        if(obj->parent_event && obj->parent) {
    2e5e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    2e62:	f013 0f40 	tst.w	r3, #64	; 0x40
    2e66:	d016      	beq.n	2e96 <lv_event_send_func+0x9a>
    2e68:	6820      	ldr	r0, [r4, #0]
    2e6a:	b1b0      	cbz	r0, 2e9a <lv_event_send_func+0x9e>
            lv_res_t res = lv_event_send(obj->parent, event, data);
    2e6c:	4632      	mov	r2, r6
    2e6e:	4629      	mov	r1, r5
    2e70:	4b0e      	ldr	r3, [pc, #56]	; (2eac <lv_event_send_func+0xb0>)
    2e72:	4798      	blx	r3
        return LV_RES_INV;
    2e74:	2801      	cmp	r0, #1
    2e76:	bf14      	ite	ne
    2e78:	2000      	movne	r0, #0
    2e7a:	2001      	moveq	r0, #1
    2e7c:	e006      	b.n	2e8c <lv_event_send_func+0x90>
        LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2e7e:	4622      	mov	r2, r4
    2e80:	2300      	movs	r3, #0
    2e82:	480b      	ldr	r0, [pc, #44]	; (2eb0 <lv_event_send_func+0xb4>)
    2e84:	490b      	ldr	r1, [pc, #44]	; (2eb4 <lv_event_send_func+0xb8>)
    2e86:	4788      	blx	r1
    2e88:	e7fe      	b.n	2e88 <lv_event_send_func+0x8c>
        return LV_RES_INV;
    2e8a:	2000      	movs	r0, #0
}
    2e8c:	b004      	add	sp, #16
    2e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return LV_RES_OK;
    2e92:	2001      	movs	r0, #1
    2e94:	e7fa      	b.n	2e8c <lv_event_send_func+0x90>
    2e96:	2001      	movs	r0, #1
    2e98:	e7f8      	b.n	2e8c <lv_event_send_func+0x90>
    2e9a:	2001      	movs	r0, #1
    2e9c:	e7f6      	b.n	2e8c <lv_event_send_func+0x90>
    2e9e:	bf00      	nop
    2ea0:	0000295d 	.word	0x0000295d
    2ea4:	2000267c 	.word	0x2000267c
    2ea8:	00002c25 	.word	0x00002c25
    2eac:	00002eb9 	.word	0x00002eb9
    2eb0:	00017880 	.word	0x00017880
    2eb4:	00002965 	.word	0x00002965

00002eb8 <lv_event_send>:
    if(obj == NULL) return LV_RES_OK;
    2eb8:	b198      	cbz	r0, 2ee2 <lv_event_send+0x2a>
{
    2eba:	b570      	push	{r4, r5, r6, lr}
    2ebc:	4604      	mov	r4, r0
    2ebe:	4616      	mov	r6, r2
    2ec0:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2ec2:	4b09      	ldr	r3, [pc, #36]	; (2ee8 <lv_event_send+0x30>)
    2ec4:	4798      	blx	r3
    2ec6:	b928      	cbnz	r0, 2ed4 <lv_event_send+0x1c>
    2ec8:	4622      	mov	r2, r4
    2eca:	2300      	movs	r3, #0
    2ecc:	4807      	ldr	r0, [pc, #28]	; (2eec <lv_event_send+0x34>)
    2ece:	4908      	ldr	r1, [pc, #32]	; (2ef0 <lv_event_send+0x38>)
    2ed0:	4788      	blx	r1
    2ed2:	e7fe      	b.n	2ed2 <lv_event_send+0x1a>
    res = lv_event_send_func(obj->event_cb, obj, event, data);
    2ed4:	4633      	mov	r3, r6
    2ed6:	462a      	mov	r2, r5
    2ed8:	4621      	mov	r1, r4
    2eda:	69a0      	ldr	r0, [r4, #24]
    2edc:	4c05      	ldr	r4, [pc, #20]	; (2ef4 <lv_event_send+0x3c>)
    2ede:	47a0      	blx	r4
    return res;
    2ee0:	bd70      	pop	{r4, r5, r6, pc}
    if(obj == NULL) return LV_RES_OK;
    2ee2:	2001      	movs	r0, #1
    2ee4:	4770      	bx	lr
    2ee6:	bf00      	nop
    2ee8:	0000295d 	.word	0x0000295d
    2eec:	00017880 	.word	0x00017880
    2ef0:	00002965 	.word	0x00002965
    2ef4:	00002dfd 	.word	0x00002dfd

00002ef8 <lv_signal_send>:
    if(obj == NULL) return LV_RES_OK;
    2ef8:	b120      	cbz	r0, 2f04 <lv_signal_send+0xc>
{
    2efa:	b510      	push	{r4, lr}
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
    2efc:	69c4      	ldr	r4, [r0, #28]
    2efe:	b11c      	cbz	r4, 2f08 <lv_signal_send+0x10>
    2f00:	47a0      	blx	r4
    2f02:	bd10      	pop	{r4, pc}
    if(obj == NULL) return LV_RES_OK;
    2f04:	2001      	movs	r0, #1
    2f06:	4770      	bx	lr
    lv_res_t res = LV_RES_OK;
    2f08:	2001      	movs	r0, #1
}
    2f0a:	bd10      	pop	{r4, pc}

00002f0c <lv_obj_refresh_ext_draw_pad>:
{
    2f0c:	b510      	push	{r4, lr}
    2f0e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2f10:	4b07      	ldr	r3, [pc, #28]	; (2f30 <lv_obj_refresh_ext_draw_pad+0x24>)
    2f12:	4798      	blx	r3
    2f14:	b928      	cbnz	r0, 2f22 <lv_obj_refresh_ext_draw_pad+0x16>
    2f16:	4622      	mov	r2, r4
    2f18:	2300      	movs	r3, #0
    2f1a:	4806      	ldr	r0, [pc, #24]	; (2f34 <lv_obj_refresh_ext_draw_pad+0x28>)
    2f1c:	4906      	ldr	r1, [pc, #24]	; (2f38 <lv_obj_refresh_ext_draw_pad+0x2c>)
    2f1e:	4788      	blx	r1
    2f20:	e7fe      	b.n	2f20 <lv_obj_refresh_ext_draw_pad+0x14>
    obj->ext_draw_pad = 0;
    2f22:	2200      	movs	r2, #0
    2f24:	8662      	strh	r2, [r4, #50]	; 0x32
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
    2f26:	69e3      	ldr	r3, [r4, #28]
    2f28:	2106      	movs	r1, #6
    2f2a:	4620      	mov	r0, r4
    2f2c:	4798      	blx	r3
    2f2e:	bd10      	pop	{r4, pc}
    2f30:	0000295d 	.word	0x0000295d
    2f34:	00017880 	.word	0x00017880
    2f38:	00002965 	.word	0x00002965

00002f3c <lv_obj_get_parent>:
{
    2f3c:	b510      	push	{r4, lr}
    2f3e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2f40:	4b05      	ldr	r3, [pc, #20]	; (2f58 <lv_obj_get_parent+0x1c>)
    2f42:	4798      	blx	r3
    2f44:	b108      	cbz	r0, 2f4a <lv_obj_get_parent+0xe>
}
    2f46:	6820      	ldr	r0, [r4, #0]
    2f48:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2f4a:	4622      	mov	r2, r4
    2f4c:	2300      	movs	r3, #0
    2f4e:	4803      	ldr	r0, [pc, #12]	; (2f5c <lv_obj_get_parent+0x20>)
    2f50:	4903      	ldr	r1, [pc, #12]	; (2f60 <lv_obj_get_parent+0x24>)
    2f52:	4788      	blx	r1
    2f54:	e7fe      	b.n	2f54 <lv_obj_get_parent+0x18>
    2f56:	bf00      	nop
    2f58:	0000295d 	.word	0x0000295d
    2f5c:	00017880 	.word	0x00017880
    2f60:	00002965 	.word	0x00002965

00002f64 <lv_obj_get_screen>:
{
    2f64:	b538      	push	{r3, r4, r5, lr}
    2f66:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2f68:	4b09      	ldr	r3, [pc, #36]	; (2f90 <lv_obj_get_screen+0x2c>)
    2f6a:	4798      	blx	r3
    2f6c:	b108      	cbz	r0, 2f72 <lv_obj_get_screen+0xe>
        par   = lv_obj_get_parent(act_p);
    2f6e:	4d09      	ldr	r5, [pc, #36]	; (2f94 <lv_obj_get_screen+0x30>)
    2f70:	e006      	b.n	2f80 <lv_obj_get_screen+0x1c>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2f72:	4622      	mov	r2, r4
    2f74:	2300      	movs	r3, #0
    2f76:	4808      	ldr	r0, [pc, #32]	; (2f98 <lv_obj_get_screen+0x34>)
    2f78:	4908      	ldr	r1, [pc, #32]	; (2f9c <lv_obj_get_screen+0x38>)
    2f7a:	4788      	blx	r1
    2f7c:	e7fe      	b.n	2f7c <lv_obj_get_screen+0x18>
        par   = lv_obj_get_parent(act_p);
    2f7e:	461c      	mov	r4, r3
    2f80:	4620      	mov	r0, r4
    2f82:	47a8      	blx	r5
    } while(par != NULL);
    2f84:	4603      	mov	r3, r0
    2f86:	2800      	cmp	r0, #0
    2f88:	d1f9      	bne.n	2f7e <lv_obj_get_screen+0x1a>
}
    2f8a:	4620      	mov	r0, r4
    2f8c:	bd38      	pop	{r3, r4, r5, pc}
    2f8e:	bf00      	nop
    2f90:	0000295d 	.word	0x0000295d
    2f94:	00002f3d 	.word	0x00002f3d
    2f98:	00017880 	.word	0x00017880
    2f9c:	00002965 	.word	0x00002965

00002fa0 <lv_obj_get_disp>:
{
    2fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2fa4:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2fa6:	4b19      	ldr	r3, [pc, #100]	; (300c <lv_obj_get_disp+0x6c>)
    2fa8:	4798      	blx	r3
    2faa:	b180      	cbz	r0, 2fce <lv_obj_get_disp+0x2e>
    if(obj->parent == NULL)
    2fac:	6823      	ldr	r3, [r4, #0]
    2fae:	b11b      	cbz	r3, 2fb8 <lv_obj_get_disp+0x18>
        scr = lv_obj_get_screen(obj); /*get the screen of `obj`*/
    2fb0:	4620      	mov	r0, r4
    2fb2:	4b17      	ldr	r3, [pc, #92]	; (3010 <lv_obj_get_disp+0x70>)
    2fb4:	4798      	blx	r3
    2fb6:	4604      	mov	r4, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
    2fb8:	4816      	ldr	r0, [pc, #88]	; (3014 <lv_obj_get_disp+0x74>)
    2fba:	4b17      	ldr	r3, [pc, #92]	; (3018 <lv_obj_get_disp+0x78>)
    2fbc:	4798      	blx	r3
    2fbe:	4607      	mov	r7, r0
    2fc0:	b300      	cbz	r0, 3004 <lv_obj_get_disp+0x64>
        _LV_LL_READ(d->scr_ll, s) {
    2fc2:	f8df 9054 	ldr.w	r9, [pc, #84]	; 3018 <lv_obj_get_disp+0x78>
    2fc6:	4d15      	ldr	r5, [pc, #84]	; (301c <lv_obj_get_disp+0x7c>)
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
    2fc8:	f8df 8048 	ldr.w	r8, [pc, #72]	; 3014 <lv_obj_get_disp+0x74>
    2fcc:	e00a      	b.n	2fe4 <lv_obj_get_disp+0x44>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2fce:	4622      	mov	r2, r4
    2fd0:	2300      	movs	r3, #0
    2fd2:	4813      	ldr	r0, [pc, #76]	; (3020 <lv_obj_get_disp+0x80>)
    2fd4:	4913      	ldr	r1, [pc, #76]	; (3024 <lv_obj_get_disp+0x84>)
    2fd6:	4788      	blx	r1
    2fd8:	e7fe      	b.n	2fd8 <lv_obj_get_disp+0x38>
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
    2fda:	4639      	mov	r1, r7
    2fdc:	4640      	mov	r0, r8
    2fde:	47a8      	blx	r5
    2fe0:	4607      	mov	r7, r0
    2fe2:	b178      	cbz	r0, 3004 <lv_obj_get_disp+0x64>
        _LV_LL_READ(d->scr_ll, s) {
    2fe4:	f107 0630 	add.w	r6, r7, #48	; 0x30
    2fe8:	4630      	mov	r0, r6
    2fea:	47c8      	blx	r9
    2fec:	4601      	mov	r1, r0
    2fee:	2800      	cmp	r0, #0
    2ff0:	d0f3      	beq.n	2fda <lv_obj_get_disp+0x3a>
            if(s == scr) return d;
    2ff2:	4284      	cmp	r4, r0
    2ff4:	d006      	beq.n	3004 <lv_obj_get_disp+0x64>
        _LV_LL_READ(d->scr_ll, s) {
    2ff6:	4630      	mov	r0, r6
    2ff8:	47a8      	blx	r5
    2ffa:	4601      	mov	r1, r0
    2ffc:	2800      	cmp	r0, #0
    2ffe:	d0ec      	beq.n	2fda <lv_obj_get_disp+0x3a>
            if(s == scr) return d;
    3000:	428c      	cmp	r4, r1
    3002:	d1f8      	bne.n	2ff6 <lv_obj_get_disp+0x56>
}
    3004:	4638      	mov	r0, r7
    3006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    300a:	bf00      	nop
    300c:	0000295d 	.word	0x0000295d
    3010:	00002f65 	.word	0x00002f65
    3014:	2000acac 	.word	0x2000acac
    3018:	00011189 	.word	0x00011189
    301c:	0001119d 	.word	0x0001119d
    3020:	00017880 	.word	0x00017880
    3024:	00002965 	.word	0x00002965

00003028 <lv_obj_get_child>:
{
    3028:	b538      	push	{r3, r4, r5, lr}
    302a:	4604      	mov	r4, r0
    302c:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    302e:	4b09      	ldr	r3, [pc, #36]	; (3054 <lv_obj_get_child+0x2c>)
    3030:	4798      	blx	r3
    3032:	b128      	cbz	r0, 3040 <lv_obj_get_child+0x18>
    if(child == NULL) {
    3034:	b155      	cbz	r5, 304c <lv_obj_get_child+0x24>
        result = _lv_ll_get_next(&obj->child_ll, child);
    3036:	4629      	mov	r1, r5
    3038:	1d20      	adds	r0, r4, #4
    303a:	4b07      	ldr	r3, [pc, #28]	; (3058 <lv_obj_get_child+0x30>)
    303c:	4798      	blx	r3
}
    303e:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3040:	4622      	mov	r2, r4
    3042:	2300      	movs	r3, #0
    3044:	4805      	ldr	r0, [pc, #20]	; (305c <lv_obj_get_child+0x34>)
    3046:	4906      	ldr	r1, [pc, #24]	; (3060 <lv_obj_get_child+0x38>)
    3048:	4788      	blx	r1
    304a:	e7fe      	b.n	304a <lv_obj_get_child+0x22>
        result = _lv_ll_get_head(&obj->child_ll);
    304c:	1d20      	adds	r0, r4, #4
    304e:	4b05      	ldr	r3, [pc, #20]	; (3064 <lv_obj_get_child+0x3c>)
    3050:	4798      	blx	r3
    3052:	bd38      	pop	{r3, r4, r5, pc}
    3054:	0000295d 	.word	0x0000295d
    3058:	0001119d 	.word	0x0001119d
    305c:	00017880 	.word	0x00017880
    3060:	00002965 	.word	0x00002965
    3064:	00011189 	.word	0x00011189

00003068 <lv_obj_get_coords>:
{
    3068:	b538      	push	{r3, r4, r5, lr}
    306a:	4605      	mov	r5, r0
    306c:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    306e:	4b0a      	ldr	r3, [pc, #40]	; (3098 <lv_obj_get_coords+0x30>)
    3070:	4798      	blx	r3
    3072:	b158      	cbz	r0, 308c <lv_obj_get_coords+0x24>
    3074:	f105 020f 	add.w	r2, r5, #15
    3078:	f104 0008 	add.w	r0, r4, #8
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    307c:	4623      	mov	r3, r4
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
    307e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    3082:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    3086:	4283      	cmp	r3, r0
    3088:	d1f9      	bne.n	307e <lv_obj_get_coords+0x16>
}
    308a:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    308c:	462a      	mov	r2, r5
    308e:	2300      	movs	r3, #0
    3090:	4802      	ldr	r0, [pc, #8]	; (309c <lv_obj_get_coords+0x34>)
    3092:	4903      	ldr	r1, [pc, #12]	; (30a0 <lv_obj_get_coords+0x38>)
    3094:	4788      	blx	r1
    3096:	e7fe      	b.n	3096 <lv_obj_get_coords+0x2e>
    3098:	0000295d 	.word	0x0000295d
    309c:	00017880 	.word	0x00017880
    30a0:	00002965 	.word	0x00002965

000030a4 <lv_obj_get_x>:
{
    30a4:	b510      	push	{r4, lr}
    30a6:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    30a8:	4b0a      	ldr	r3, [pc, #40]	; (30d4 <lv_obj_get_x+0x30>)
    30aa:	4798      	blx	r3
    30ac:	b928      	cbnz	r0, 30ba <lv_obj_get_x+0x16>
    30ae:	4622      	mov	r2, r4
    30b0:	2300      	movs	r3, #0
    30b2:	4809      	ldr	r0, [pc, #36]	; (30d8 <lv_obj_get_x+0x34>)
    30b4:	4909      	ldr	r1, [pc, #36]	; (30dc <lv_obj_get_x+0x38>)
    30b6:	4788      	blx	r1
    30b8:	e7fe      	b.n	30b8 <lv_obj_get_x+0x14>
    lv_obj_t * parent = lv_obj_get_parent(obj);
    30ba:	4620      	mov	r0, r4
    30bc:	4b08      	ldr	r3, [pc, #32]	; (30e0 <lv_obj_get_x+0x3c>)
    30be:	4798      	blx	r3
    if(parent) {
    30c0:	4603      	mov	r3, r0
    30c2:	b120      	cbz	r0, 30ce <lv_obj_get_x+0x2a>
        rel_x             = obj->coords.x1 - parent->coords.x1;
    30c4:	8a20      	ldrh	r0, [r4, #16]
    30c6:	8a1b      	ldrh	r3, [r3, #16]
    30c8:	1ac0      	subs	r0, r0, r3
    30ca:	b200      	sxth	r0, r0
    30cc:	bd10      	pop	{r4, pc}
        rel_x = obj->coords.x1;
    30ce:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
}
    30d2:	bd10      	pop	{r4, pc}
    30d4:	0000295d 	.word	0x0000295d
    30d8:	00017880 	.word	0x00017880
    30dc:	00002965 	.word	0x00002965
    30e0:	00002f3d 	.word	0x00002f3d

000030e4 <lv_obj_get_y>:
{
    30e4:	b510      	push	{r4, lr}
    30e6:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    30e8:	4b0a      	ldr	r3, [pc, #40]	; (3114 <lv_obj_get_y+0x30>)
    30ea:	4798      	blx	r3
    30ec:	b928      	cbnz	r0, 30fa <lv_obj_get_y+0x16>
    30ee:	4622      	mov	r2, r4
    30f0:	2300      	movs	r3, #0
    30f2:	4809      	ldr	r0, [pc, #36]	; (3118 <lv_obj_get_y+0x34>)
    30f4:	4909      	ldr	r1, [pc, #36]	; (311c <lv_obj_get_y+0x38>)
    30f6:	4788      	blx	r1
    30f8:	e7fe      	b.n	30f8 <lv_obj_get_y+0x14>
    lv_obj_t * parent = lv_obj_get_parent(obj);
    30fa:	4620      	mov	r0, r4
    30fc:	4b08      	ldr	r3, [pc, #32]	; (3120 <lv_obj_get_y+0x3c>)
    30fe:	4798      	blx	r3
    if(parent) {
    3100:	4603      	mov	r3, r0
    3102:	b120      	cbz	r0, 310e <lv_obj_get_y+0x2a>
        rel_y             = obj->coords.y1 - parent->coords.y1;
    3104:	8a60      	ldrh	r0, [r4, #18]
    3106:	8a5b      	ldrh	r3, [r3, #18]
    3108:	1ac0      	subs	r0, r0, r3
    310a:	b200      	sxth	r0, r0
    310c:	bd10      	pop	{r4, pc}
        rel_y = obj->coords.y1;
    310e:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
}
    3112:	bd10      	pop	{r4, pc}
    3114:	0000295d 	.word	0x0000295d
    3118:	00017880 	.word	0x00017880
    311c:	00002965 	.word	0x00002965
    3120:	00002f3d 	.word	0x00002f3d

00003124 <lv_obj_get_width>:
{
    3124:	b510      	push	{r4, lr}
    3126:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3128:	4b07      	ldr	r3, [pc, #28]	; (3148 <lv_obj_get_width+0x24>)
    312a:	4798      	blx	r3
    312c:	b128      	cbz	r0, 313a <lv_obj_get_width+0x16>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    312e:	8aa0      	ldrh	r0, [r4, #20]
    3130:	3001      	adds	r0, #1
    3132:	8a23      	ldrh	r3, [r4, #16]
    3134:	1ac0      	subs	r0, r0, r3
}
    3136:	b200      	sxth	r0, r0
    3138:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    313a:	4622      	mov	r2, r4
    313c:	2300      	movs	r3, #0
    313e:	4803      	ldr	r0, [pc, #12]	; (314c <lv_obj_get_width+0x28>)
    3140:	4903      	ldr	r1, [pc, #12]	; (3150 <lv_obj_get_width+0x2c>)
    3142:	4788      	blx	r1
    3144:	e7fe      	b.n	3144 <lv_obj_get_width+0x20>
    3146:	bf00      	nop
    3148:	0000295d 	.word	0x0000295d
    314c:	00017880 	.word	0x00017880
    3150:	00002965 	.word	0x00002965

00003154 <lv_obj_get_height>:
{
    3154:	b510      	push	{r4, lr}
    3156:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3158:	4b07      	ldr	r3, [pc, #28]	; (3178 <lv_obj_get_height+0x24>)
    315a:	4798      	blx	r3
    315c:	b128      	cbz	r0, 316a <lv_obj_get_height+0x16>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    315e:	8ae0      	ldrh	r0, [r4, #22]
    3160:	3001      	adds	r0, #1
    3162:	8a63      	ldrh	r3, [r4, #18]
    3164:	1ac0      	subs	r0, r0, r3
}
    3166:	b200      	sxth	r0, r0
    3168:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    316a:	4622      	mov	r2, r4
    316c:	2300      	movs	r3, #0
    316e:	4803      	ldr	r0, [pc, #12]	; (317c <lv_obj_get_height+0x28>)
    3170:	4903      	ldr	r1, [pc, #12]	; (3180 <lv_obj_get_height+0x2c>)
    3172:	4788      	blx	r1
    3174:	e7fe      	b.n	3174 <lv_obj_get_height+0x20>
    3176:	bf00      	nop
    3178:	0000295d 	.word	0x0000295d
    317c:	00017880 	.word	0x00017880
    3180:	00002965 	.word	0x00002965

00003184 <lv_obj_get_style_list>:
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
    3184:	b909      	cbnz	r1, 318a <lv_obj_get_style_list+0x6>
    3186:	3028      	adds	r0, #40	; 0x28
    3188:	4770      	bx	lr
{
    318a:	b500      	push	{lr}
    318c:	b083      	sub	sp, #12
    info.part = part;
    318e:	f88d 1000 	strb.w	r1, [sp]
    info.result = NULL;
    3192:	2300      	movs	r3, #0
    3194:	9301      	str	r3, [sp, #4]
    res = lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STYLE, &info);
    3196:	466a      	mov	r2, sp
    3198:	2108      	movs	r1, #8
    319a:	4b04      	ldr	r3, [pc, #16]	; (31ac <lv_obj_get_style_list+0x28>)
    319c:	4798      	blx	r3
    if(res != LV_RES_OK) return NULL;
    319e:	2801      	cmp	r0, #1
    return info.result;
    31a0:	bf0c      	ite	eq
    31a2:	9801      	ldreq	r0, [sp, #4]
    if(res != LV_RES_OK) return NULL;
    31a4:	2000      	movne	r0, #0
}
    31a6:	b003      	add	sp, #12
    31a8:	f85d fb04 	ldr.w	pc, [sp], #4
    31ac:	00002ef9 	.word	0x00002ef9

000031b0 <trans_del>:
 * @param part a part of object or 0xFF to remove from all parts
 * @param prop a property or 0xFF to remove all porpeties
 * @param tr_limit delete transitions only "older" then this. `NULL` is not used
 */
static void trans_del(lv_obj_t * obj, uint8_t part, lv_style_property_t prop, lv_style_trans_t * tr_limit)
{
    31b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    31b4:	4680      	mov	r8, r0
    31b6:	468a      	mov	sl, r1
    31b8:	4693      	mov	fp, r2
    31ba:	461e      	mov	r6, r3
    lv_style_trans_t * tr;
    lv_style_trans_t * tr_prev;
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
    31bc:	481c      	ldr	r0, [pc, #112]	; (3230 <trans_del+0x80>)
    31be:	4b1d      	ldr	r3, [pc, #116]	; (3234 <trans_del+0x84>)
    31c0:	4798      	blx	r3
    while(tr != NULL) {
    31c2:	2800      	cmp	r0, #0
    31c4:	d031      	beq.n	322a <trans_del+0x7a>
    31c6:	4605      	mov	r5, r0
        if(tr == tr_limit) break;
    31c8:	42b0      	cmp	r0, r6
    31ca:	d02e      	beq.n	322a <trans_del+0x7a>

        /*'tr' might be deleted, so get the next object while 'tr' is valid*/
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
    31cc:	f8df 9060 	ldr.w	r9, [pc, #96]	; 3230 <trans_del+0x80>
    31d0:	4f19      	ldr	r7, [pc, #100]	; (3238 <trans_del+0x88>)
    31d2:	e009      	b.n	31e8 <trans_del+0x38>

        if(tr->obj == obj && (part == tr->part || part == 0xFF) && (prop == tr->prop || prop == 0xFF)) {
    31d4:	88ab      	ldrh	r3, [r5, #4]
    31d6:	455b      	cmp	r3, fp
    31d8:	d014      	beq.n	3204 <trans_del+0x54>
    31da:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    31de:	d011      	beq.n	3204 <trans_del+0x54>
    while(tr != NULL) {
    31e0:	b31c      	cbz	r4, 322a <trans_del+0x7a>
    31e2:	4625      	mov	r5, r4
        if(tr == tr_limit) break;
    31e4:	42a6      	cmp	r6, r4
    31e6:	d020      	beq.n	322a <trans_del+0x7a>
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
    31e8:	4629      	mov	r1, r5
    31ea:	4648      	mov	r0, r9
    31ec:	47b8      	blx	r7
    31ee:	4604      	mov	r4, r0
        if(tr->obj == obj && (part == tr->part || part == 0xFF) && (prop == tr->prop || prop == 0xFF)) {
    31f0:	6828      	ldr	r0, [r5, #0]
    31f2:	4540      	cmp	r0, r8
    31f4:	d1f4      	bne.n	31e0 <trans_del+0x30>
    31f6:	79a9      	ldrb	r1, [r5, #6]
    31f8:	4551      	cmp	r1, sl
    31fa:	d0eb      	beq.n	31d4 <trans_del+0x24>
    31fc:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    3200:	d1ee      	bne.n	31e0 <trans_del+0x30>
    3202:	e7e7      	b.n	31d4 <trans_del+0x24>
            /* Remove the transitioned property from trans. style
             * to allow changing it by normal styles*/
            lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
    3204:	4b0d      	ldr	r3, [pc, #52]	; (323c <trans_del+0x8c>)
    3206:	4798      	blx	r3
            lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
    3208:	4b0d      	ldr	r3, [pc, #52]	; (3240 <trans_del+0x90>)
    320a:	4798      	blx	r3
            lv_style_remove_prop(style_trans, tr->prop);
    320c:	88a9      	ldrh	r1, [r5, #4]
    320e:	4b0d      	ldr	r3, [pc, #52]	; (3244 <trans_del+0x94>)
    3210:	4798      	blx	r3

            lv_anim_del(tr, NULL);
    3212:	2100      	movs	r1, #0
    3214:	4628      	mov	r0, r5
    3216:	4b0c      	ldr	r3, [pc, #48]	; (3248 <trans_del+0x98>)
    3218:	4798      	blx	r3
            _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
    321a:	4629      	mov	r1, r5
    321c:	4648      	mov	r0, r9
    321e:	4b0b      	ldr	r3, [pc, #44]	; (324c <trans_del+0x9c>)
    3220:	4798      	blx	r3
            lv_mem_free(tr);
    3222:	4628      	mov	r0, r5
    3224:	4b0a      	ldr	r3, [pc, #40]	; (3250 <trans_del+0xa0>)
    3226:	4798      	blx	r3
    3228:	e7da      	b.n	31e0 <trans_del+0x30>
    322a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    322e:	bf00      	nop
    3230:	2000ad50 	.word	0x2000ad50
    3234:	00011193 	.word	0x00011193
    3238:	000111c9 	.word	0x000111c9
    323c:	00003185 	.word	0x00003185
    3240:	000067cf 	.word	0x000067cf
    3244:	00005f45 	.word	0x00005f45
    3248:	000105a9 	.word	0x000105a9
    324c:	00011275 	.word	0x00011275
    3250:	00011639 	.word	0x00011639

00003254 <lv_obj_clean_style_list>:
{
    3254:	b538      	push	{r3, r4, r5, lr}
    3256:	4604      	mov	r4, r0
    3258:	460d      	mov	r5, r1
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
    325a:	4b06      	ldr	r3, [pc, #24]	; (3274 <lv_obj_clean_style_list+0x20>)
    325c:	4798      	blx	r3
    if(style_dsc == NULL) {
    325e:	b138      	cbz	r0, 3270 <lv_obj_clean_style_list+0x1c>
    _lv_style_list_reset(style_dsc);
    3260:	4b05      	ldr	r3, [pc, #20]	; (3278 <lv_obj_clean_style_list+0x24>)
    3262:	4798      	blx	r3
    trans_del(obj, part, 0xFF, NULL);
    3264:	2300      	movs	r3, #0
    3266:	22ff      	movs	r2, #255	; 0xff
    3268:	4629      	mov	r1, r5
    326a:	4620      	mov	r0, r4
    326c:	4c03      	ldr	r4, [pc, #12]	; (327c <lv_obj_clean_style_list+0x28>)
    326e:	47a0      	blx	r4
    3270:	bd38      	pop	{r3, r4, r5, pc}
    3272:	bf00      	nop
    3274:	00003185 	.word	0x00003185
    3278:	000067e1 	.word	0x000067e1
    327c:	000031b1 	.word	0x000031b1

00003280 <trans_anim_ready_cb>:
    tr->prop = prop_tmp;

}

static void trans_anim_ready_cb(lv_anim_t * a)
{
    3280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_style_trans_t * tr = a->var;
    3282:	6804      	ldr	r4, [r0, #0]
     * if there no more transitions for this property
     * It allows changing it by normal styles*/

    bool running = false;
    lv_style_trans_t * tr_i;
    _LV_LL_READ(LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
    3284:	4817      	ldr	r0, [pc, #92]	; (32e4 <trans_anim_ready_cb+0x64>)
    3286:	4b18      	ldr	r3, [pc, #96]	; (32e8 <trans_anim_ready_cb+0x68>)
    3288:	4798      	blx	r3
    328a:	b308      	cbz	r0, 32d0 <trans_anim_ready_cb+0x50>
    328c:	4601      	mov	r1, r0
    328e:	2700      	movs	r7, #0
    3290:	4e14      	ldr	r6, [pc, #80]	; (32e4 <trans_anim_ready_cb+0x64>)
    3292:	4d16      	ldr	r5, [pc, #88]	; (32ec <trans_anim_ready_cb+0x6c>)
    3294:	e003      	b.n	329e <trans_anim_ready_cb+0x1e>
    3296:	4630      	mov	r0, r6
    3298:	47a8      	blx	r5
    329a:	4601      	mov	r1, r0
    329c:	b178      	cbz	r0, 32be <trans_anim_ready_cb+0x3e>
        if(tr_i != tr && tr_i->obj == tr->obj && tr_i->part == tr->part && tr_i->prop == tr->prop) {
    329e:	428c      	cmp	r4, r1
    32a0:	d0f9      	beq.n	3296 <trans_anim_ready_cb+0x16>
    32a2:	680a      	ldr	r2, [r1, #0]
    32a4:	6823      	ldr	r3, [r4, #0]
    32a6:	429a      	cmp	r2, r3
    32a8:	d1f5      	bne.n	3296 <trans_anim_ready_cb+0x16>
    32aa:	684b      	ldr	r3, [r1, #4]
    32ac:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    32b0:	6863      	ldr	r3, [r4, #4]
    32b2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
            running = true;
    32b6:	429a      	cmp	r2, r3
    32b8:	bf08      	it	eq
    32ba:	2701      	moveq	r7, #1
    32bc:	e7eb      	b.n	3296 <trans_anim_ready_cb+0x16>
        }
    }

    if(!running) {
    32be:	b13f      	cbz	r7, 32d0 <trans_anim_ready_cb+0x50>
        lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
        lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
        lv_style_remove_prop(style_trans, tr->prop);
    }

    _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
    32c0:	4621      	mov	r1, r4
    32c2:	4808      	ldr	r0, [pc, #32]	; (32e4 <trans_anim_ready_cb+0x64>)
    32c4:	4b0a      	ldr	r3, [pc, #40]	; (32f0 <trans_anim_ready_cb+0x70>)
    32c6:	4798      	blx	r3
    lv_mem_free(tr);
    32c8:	4620      	mov	r0, r4
    32ca:	4b0a      	ldr	r3, [pc, #40]	; (32f4 <trans_anim_ready_cb+0x74>)
    32cc:	4798      	blx	r3
    32ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
    32d0:	79a1      	ldrb	r1, [r4, #6]
    32d2:	6820      	ldr	r0, [r4, #0]
    32d4:	4b08      	ldr	r3, [pc, #32]	; (32f8 <trans_anim_ready_cb+0x78>)
    32d6:	4798      	blx	r3
        lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
    32d8:	4b08      	ldr	r3, [pc, #32]	; (32fc <trans_anim_ready_cb+0x7c>)
    32da:	4798      	blx	r3
        lv_style_remove_prop(style_trans, tr->prop);
    32dc:	88a1      	ldrh	r1, [r4, #4]
    32de:	4b08      	ldr	r3, [pc, #32]	; (3300 <trans_anim_ready_cb+0x80>)
    32e0:	4798      	blx	r3
    32e2:	e7ed      	b.n	32c0 <trans_anim_ready_cb+0x40>
    32e4:	2000ad50 	.word	0x2000ad50
    32e8:	00011189 	.word	0x00011189
    32ec:	0001119d 	.word	0x0001119d
    32f0:	00011275 	.word	0x00011275
    32f4:	00011639 	.word	0x00011639
    32f8:	00003185 	.word	0x00003185
    32fc:	000067cf 	.word	0x000067cf
    3300:	00005f45 	.word	0x00005f45

00003304 <lv_obj_get_hidden>:
{
    3304:	b510      	push	{r4, lr}
    3306:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3308:	4b06      	ldr	r3, [pc, #24]	; (3324 <lv_obj_get_hidden+0x20>)
    330a:	4798      	blx	r3
    330c:	b120      	cbz	r0, 3318 <lv_obj_get_hidden+0x14>
    return obj->hidden == 0 ? false : true;
    330e:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
    3312:	f3c0 1000 	ubfx	r0, r0, #4, #1
    3316:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3318:	4622      	mov	r2, r4
    331a:	2300      	movs	r3, #0
    331c:	4802      	ldr	r0, [pc, #8]	; (3328 <lv_obj_get_hidden+0x24>)
    331e:	4903      	ldr	r1, [pc, #12]	; (332c <lv_obj_get_hidden+0x28>)
    3320:	4788      	blx	r1
    3322:	e7fe      	b.n	3322 <lv_obj_get_hidden+0x1e>
    3324:	0000295d 	.word	0x0000295d
    3328:	00017880 	.word	0x00017880
    332c:	00002965 	.word	0x00002965

00003330 <lv_obj_invalidate_area>:
{
    3330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3334:	b084      	sub	sp, #16
    3336:	4604      	mov	r4, r0
    3338:	460e      	mov	r6, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    333a:	4b36      	ldr	r3, [pc, #216]	; (3414 <lv_obj_invalidate_area+0xe4>)
    333c:	4798      	blx	r3
    333e:	b928      	cbnz	r0, 334c <lv_obj_invalidate_area+0x1c>
    3340:	4622      	mov	r2, r4
    3342:	2300      	movs	r3, #0
    3344:	4834      	ldr	r0, [pc, #208]	; (3418 <lv_obj_invalidate_area+0xe8>)
    3346:	4935      	ldr	r1, [pc, #212]	; (341c <lv_obj_invalidate_area+0xec>)
    3348:	4788      	blx	r1
    334a:	e7fe      	b.n	334a <lv_obj_invalidate_area+0x1a>
    if(lv_obj_get_hidden(obj)) return;
    334c:	4620      	mov	r0, r4
    334e:	4b34      	ldr	r3, [pc, #208]	; (3420 <lv_obj_invalidate_area+0xf0>)
    3350:	4798      	blx	r3
    3352:	b110      	cbz	r0, 335a <lv_obj_invalidate_area+0x2a>
}
    3354:	b004      	add	sp, #16
    3356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
    335a:	4620      	mov	r0, r4
    335c:	4b31      	ldr	r3, [pc, #196]	; (3424 <lv_obj_invalidate_area+0xf4>)
    335e:	4798      	blx	r3
    3360:	4607      	mov	r7, r0
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
    3362:	4b31      	ldr	r3, [pc, #196]	; (3428 <lv_obj_invalidate_area+0xf8>)
    3364:	4798      	blx	r3
    3366:	4605      	mov	r5, r0
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
    3368:	4b30      	ldr	r3, [pc, #192]	; (342c <lv_obj_invalidate_area+0xfc>)
    336a:	4798      	blx	r3
    336c:	4287      	cmp	r7, r0
    336e:	d009      	beq.n	3384 <lv_obj_invalidate_area+0x54>
    3370:	4628      	mov	r0, r5
    3372:	4b2f      	ldr	r3, [pc, #188]	; (3430 <lv_obj_invalidate_area+0x100>)
    3374:	4798      	blx	r3
    3376:	4287      	cmp	r7, r0
    3378:	d004      	beq.n	3384 <lv_obj_invalidate_area+0x54>
       obj_scr == lv_disp_get_layer_sys(disp)) {
    337a:	4628      	mov	r0, r5
    337c:	4b2d      	ldr	r3, [pc, #180]	; (3434 <lv_obj_invalidate_area+0x104>)
    337e:	4798      	blx	r3
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
    3380:	4287      	cmp	r7, r0
    3382:	d1e7      	bne.n	3354 <lv_obj_invalidate_area+0x24>
        lv_coord_t ext_size = obj->ext_draw_pad;
    3384:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
    3388:	f104 020f 	add.w	r2, r4, #15
    338c:	f104 0017 	add.w	r0, r4, #23
    uint8_t * d8 = (uint8_t *)dst;
    3390:	4669      	mov	r1, sp
        *d8 = *s8;
    3392:	f812 7f01 	ldrb.w	r7, [r2, #1]!
    3396:	f801 7b01 	strb.w	r7, [r1], #1
    while(len) {
    339a:	4282      	cmp	r2, r0
    339c:	d1f9      	bne.n	3392 <lv_obj_invalidate_area+0x62>
        obj_coords.x1 -= ext_size;
    339e:	b29b      	uxth	r3, r3
    33a0:	f8bd 2000 	ldrh.w	r2, [sp]
    33a4:	1ad2      	subs	r2, r2, r3
    33a6:	f8ad 2000 	strh.w	r2, [sp]
        obj_coords.y1 -= ext_size;
    33aa:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    33ae:	1ad2      	subs	r2, r2, r3
    33b0:	f8ad 2002 	strh.w	r2, [sp, #2]
        obj_coords.x2 += ext_size;
    33b4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    33b8:	441a      	add	r2, r3
    33ba:	f8ad 2004 	strh.w	r2, [sp, #4]
        obj_coords.y2 += ext_size;
    33be:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    33c2:	4413      	add	r3, r2
    33c4:	f8ad 3006 	strh.w	r3, [sp, #6]
        is_common = _lv_area_intersect(&area_trunc, area, &obj_coords);
    33c8:	466a      	mov	r2, sp
    33ca:	4631      	mov	r1, r6
    33cc:	a802      	add	r0, sp, #8
    33ce:	4b1a      	ldr	r3, [pc, #104]	; (3438 <lv_obj_invalidate_area+0x108>)
    33d0:	4798      	blx	r3
        if(is_common == false) return;  /*The area is not on the object*/
    33d2:	2800      	cmp	r0, #0
    33d4:	d0be      	beq.n	3354 <lv_obj_invalidate_area+0x24>
        lv_obj_t * par = lv_obj_get_parent(obj);
    33d6:	4620      	mov	r0, r4
    33d8:	4b18      	ldr	r3, [pc, #96]	; (343c <lv_obj_invalidate_area+0x10c>)
    33da:	4798      	blx	r3
        while(par != NULL) {
    33dc:	4604      	mov	r4, r0
    33de:	b198      	cbz	r0, 3408 <lv_obj_invalidate_area+0xd8>
            is_common = _lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
    33e0:	f8df 8054 	ldr.w	r8, [pc, #84]	; 3438 <lv_obj_invalidate_area+0x108>
            if(lv_obj_get_hidden(par)) return; /*If the parent is hidden then the child is hidden and won't be drawn*/
    33e4:	4f0e      	ldr	r7, [pc, #56]	; (3420 <lv_obj_invalidate_area+0xf0>)
            par = lv_obj_get_parent(par);
    33e6:	4e15      	ldr	r6, [pc, #84]	; (343c <lv_obj_invalidate_area+0x10c>)
            is_common = _lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
    33e8:	f104 0210 	add.w	r2, r4, #16
    33ec:	a902      	add	r1, sp, #8
    33ee:	4608      	mov	r0, r1
    33f0:	47c0      	blx	r8
            if(is_common == false) break;       /*If no common parts with parent break;*/
    33f2:	2800      	cmp	r0, #0
    33f4:	d0ae      	beq.n	3354 <lv_obj_invalidate_area+0x24>
            if(lv_obj_get_hidden(par)) return; /*If the parent is hidden then the child is hidden and won't be drawn*/
    33f6:	4620      	mov	r0, r4
    33f8:	47b8      	blx	r7
    33fa:	2800      	cmp	r0, #0
    33fc:	d1aa      	bne.n	3354 <lv_obj_invalidate_area+0x24>
            par = lv_obj_get_parent(par);
    33fe:	4620      	mov	r0, r4
    3400:	47b0      	blx	r6
        while(par != NULL) {
    3402:	4604      	mov	r4, r0
    3404:	2800      	cmp	r0, #0
    3406:	d1ef      	bne.n	33e8 <lv_obj_invalidate_area+0xb8>
        if(is_common) _lv_inv_area(disp, &area_trunc);
    3408:	a902      	add	r1, sp, #8
    340a:	4628      	mov	r0, r5
    340c:	4b0c      	ldr	r3, [pc, #48]	; (3440 <lv_obj_invalidate_area+0x110>)
    340e:	4798      	blx	r3
    3410:	e7a0      	b.n	3354 <lv_obj_invalidate_area+0x24>
    3412:	bf00      	nop
    3414:	0000295d 	.word	0x0000295d
    3418:	00017880 	.word	0x00017880
    341c:	00002965 	.word	0x00002965
    3420:	00003305 	.word	0x00003305
    3424:	00002f65 	.word	0x00002f65
    3428:	00002fa1 	.word	0x00002fa1
    342c:	0000298d 	.word	0x0000298d
    3430:	000029a9 	.word	0x000029a9
    3434:	000029c5 	.word	0x000029c5
    3438:	00010719 	.word	0x00010719
    343c:	00002f3d 	.word	0x00002f3d
    3440:	00005679 	.word	0x00005679

00003444 <lv_obj_invalidate>:
{
    3444:	b530      	push	{r4, r5, lr}
    3446:	b083      	sub	sp, #12
    3448:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    344a:	4b18      	ldr	r3, [pc, #96]	; (34ac <lv_obj_invalidate+0x68>)
    344c:	4798      	blx	r3
    344e:	b338      	cbz	r0, 34a0 <lv_obj_invalidate+0x5c>
    lv_coord_t ext_size = obj->ext_draw_pad;
    3450:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
    3454:	f104 020f 	add.w	r2, r4, #15
    3458:	f104 0517 	add.w	r5, r4, #23
    uint8_t * d8 = (uint8_t *)dst;
    345c:	4669      	mov	r1, sp
        *d8 = *s8;
    345e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    3462:	f801 0b01 	strb.w	r0, [r1], #1
    while(len) {
    3466:	42aa      	cmp	r2, r5
    3468:	d1f9      	bne.n	345e <lv_obj_invalidate+0x1a>
    obj_coords.x1 -= ext_size;
    346a:	b29b      	uxth	r3, r3
    346c:	f8bd 2000 	ldrh.w	r2, [sp]
    3470:	1ad2      	subs	r2, r2, r3
    3472:	f8ad 2000 	strh.w	r2, [sp]
    obj_coords.y1 -= ext_size;
    3476:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    347a:	1ad2      	subs	r2, r2, r3
    347c:	f8ad 2002 	strh.w	r2, [sp, #2]
    obj_coords.x2 += ext_size;
    3480:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    3484:	441a      	add	r2, r3
    3486:	f8ad 2004 	strh.w	r2, [sp, #4]
    obj_coords.y2 += ext_size;
    348a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    348e:	4413      	add	r3, r2
    3490:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_obj_invalidate_area(obj, &obj_coords);
    3494:	4669      	mov	r1, sp
    3496:	4620      	mov	r0, r4
    3498:	4b05      	ldr	r3, [pc, #20]	; (34b0 <lv_obj_invalidate+0x6c>)
    349a:	4798      	blx	r3
}
    349c:	b003      	add	sp, #12
    349e:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    34a0:	4622      	mov	r2, r4
    34a2:	2300      	movs	r3, #0
    34a4:	4803      	ldr	r0, [pc, #12]	; (34b4 <lv_obj_invalidate+0x70>)
    34a6:	4904      	ldr	r1, [pc, #16]	; (34b8 <lv_obj_invalidate+0x74>)
    34a8:	4788      	blx	r1
    34aa:	e7fe      	b.n	34aa <lv_obj_invalidate+0x66>
    34ac:	0000295d 	.word	0x0000295d
    34b0:	00003331 	.word	0x00003331
    34b4:	00017880 	.word	0x00017880
    34b8:	00002965 	.word	0x00002965

000034bc <lv_obj_move_foreground>:
{
    34bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    34be:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    34c0:	4b11      	ldr	r3, [pc, #68]	; (3508 <lv_obj_move_foreground+0x4c>)
    34c2:	4798      	blx	r3
    34c4:	b928      	cbnz	r0, 34d2 <lv_obj_move_foreground+0x16>
    34c6:	462a      	mov	r2, r5
    34c8:	2300      	movs	r3, #0
    34ca:	4810      	ldr	r0, [pc, #64]	; (350c <lv_obj_move_foreground+0x50>)
    34cc:	4910      	ldr	r1, [pc, #64]	; (3510 <lv_obj_move_foreground+0x54>)
    34ce:	4788      	blx	r1
    34d0:	e7fe      	b.n	34d0 <lv_obj_move_foreground+0x14>
    lv_obj_t * parent = lv_obj_get_parent(obj);
    34d2:	4628      	mov	r0, r5
    34d4:	4b0f      	ldr	r3, [pc, #60]	; (3514 <lv_obj_move_foreground+0x58>)
    34d6:	4798      	blx	r3
    34d8:	4604      	mov	r4, r0
    if(_lv_ll_get_head(&parent->child_ll) == obj) return;
    34da:	1d06      	adds	r6, r0, #4
    34dc:	4630      	mov	r0, r6
    34de:	4b0e      	ldr	r3, [pc, #56]	; (3518 <lv_obj_move_foreground+0x5c>)
    34e0:	4798      	blx	r3
    34e2:	4285      	cmp	r5, r0
    34e4:	d00f      	beq.n	3506 <lv_obj_move_foreground+0x4a>
    lv_obj_invalidate(parent);
    34e6:	4620      	mov	r0, r4
    34e8:	4f0c      	ldr	r7, [pc, #48]	; (351c <lv_obj_move_foreground+0x60>)
    34ea:	47b8      	blx	r7
    _lv_ll_chg_list(&parent->child_ll, &parent->child_ll, obj, true);
    34ec:	2301      	movs	r3, #1
    34ee:	462a      	mov	r2, r5
    34f0:	4631      	mov	r1, r6
    34f2:	4630      	mov	r0, r6
    34f4:	4e0a      	ldr	r6, [pc, #40]	; (3520 <lv_obj_move_foreground+0x64>)
    34f6:	47b0      	blx	r6
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
    34f8:	69e3      	ldr	r3, [r4, #28]
    34fa:	462a      	mov	r2, r5
    34fc:	2101      	movs	r1, #1
    34fe:	4620      	mov	r0, r4
    3500:	4798      	blx	r3
    lv_obj_invalidate(parent);
    3502:	4620      	mov	r0, r4
    3504:	47b8      	blx	r7
    3506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3508:	0000295d 	.word	0x0000295d
    350c:	00017880 	.word	0x00017880
    3510:	00002965 	.word	0x00002965
    3514:	00002f3d 	.word	0x00002f3d
    3518:	00011189 	.word	0x00011189
    351c:	00003445 	.word	0x00003445
    3520:	00011301 	.word	0x00011301

00003524 <lv_obj_set_pos>:
{
    3524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3528:	b082      	sub	sp, #8
    352a:	4604      	mov	r4, r0
    352c:	468a      	mov	sl, r1
    352e:	4617      	mov	r7, r2
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3530:	4b24      	ldr	r3, [pc, #144]	; (35c4 <lv_obj_set_pos+0xa0>)
    3532:	4798      	blx	r3
    3534:	2800      	cmp	r0, #0
    3536:	d03e      	beq.n	35b6 <lv_obj_set_pos+0x92>
    lv_obj_t * par = obj->parent;
    3538:	6826      	ldr	r6, [r4, #0]
    if(par == NULL) {
    353a:	2e00      	cmp	r6, #0
    353c:	d038      	beq.n	35b0 <lv_obj_set_pos+0x8c>
    diff.x = x - obj->coords.x1;
    353e:	8a33      	ldrh	r3, [r6, #16]
    3540:	8a22      	ldrh	r2, [r4, #16]
    3542:	1a9b      	subs	r3, r3, r2
    3544:	4453      	add	r3, sl
    3546:	fa1f fa83 	uxth.w	sl, r3
    354a:	fa0f f88a 	sxth.w	r8, sl
    diff.y = y - obj->coords.y1;
    354e:	8a75      	ldrh	r5, [r6, #18]
    3550:	8a63      	ldrh	r3, [r4, #18]
    3552:	1aed      	subs	r5, r5, r3
    3554:	443d      	add	r5, r7
    3556:	b2ad      	uxth	r5, r5
    3558:	fa0f f985 	sxth.w	r9, r5
    if(diff.x == 0 && diff.y == 0) return;
    355c:	f1b8 0f00 	cmp.w	r8, #0
    3560:	d102      	bne.n	3568 <lv_obj_set_pos+0x44>
    3562:	f1b9 0f00 	cmp.w	r9, #0
    3566:	d023      	beq.n	35b0 <lv_obj_set_pos+0x8c>
    lv_obj_invalidate(obj);
    3568:	4620      	mov	r0, r4
    356a:	4f17      	ldr	r7, [pc, #92]	; (35c8 <lv_obj_set_pos+0xa4>)
    356c:	47b8      	blx	r7
    lv_obj_get_coords(obj, &ori);
    356e:	4669      	mov	r1, sp
    3570:	4620      	mov	r0, r4
    3572:	4b16      	ldr	r3, [pc, #88]	; (35cc <lv_obj_set_pos+0xa8>)
    3574:	4798      	blx	r3
    obj->coords.x1 += diff.x;
    3576:	8a23      	ldrh	r3, [r4, #16]
    3578:	4453      	add	r3, sl
    357a:	8223      	strh	r3, [r4, #16]
    obj->coords.y1 += diff.y;
    357c:	8a63      	ldrh	r3, [r4, #18]
    357e:	442b      	add	r3, r5
    3580:	8263      	strh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
    3582:	8aa3      	ldrh	r3, [r4, #20]
    3584:	4453      	add	r3, sl
    3586:	82a3      	strh	r3, [r4, #20]
    obj->coords.y2 += diff.y;
    3588:	8ae3      	ldrh	r3, [r4, #22]
    358a:	441d      	add	r5, r3
    358c:	82e5      	strh	r5, [r4, #22]
    refresh_children_position(obj, diff.x, diff.y);
    358e:	464a      	mov	r2, r9
    3590:	4641      	mov	r1, r8
    3592:	4620      	mov	r0, r4
    3594:	4b0e      	ldr	r3, [pc, #56]	; (35d0 <lv_obj_set_pos+0xac>)
    3596:	4798      	blx	r3
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
    3598:	69e3      	ldr	r3, [r4, #28]
    359a:	466a      	mov	r2, sp
    359c:	2102      	movs	r1, #2
    359e:	4620      	mov	r0, r4
    35a0:	4798      	blx	r3
    par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
    35a2:	69f3      	ldr	r3, [r6, #28]
    35a4:	4622      	mov	r2, r4
    35a6:	2101      	movs	r1, #1
    35a8:	4630      	mov	r0, r6
    35aa:	4798      	blx	r3
    lv_obj_invalidate(obj);
    35ac:	4620      	mov	r0, r4
    35ae:	47b8      	blx	r7
}
    35b0:	b002      	add	sp, #8
    35b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    35b6:	4622      	mov	r2, r4
    35b8:	2300      	movs	r3, #0
    35ba:	4806      	ldr	r0, [pc, #24]	; (35d4 <lv_obj_set_pos+0xb0>)
    35bc:	4906      	ldr	r1, [pc, #24]	; (35d8 <lv_obj_set_pos+0xb4>)
    35be:	4788      	blx	r1
    35c0:	e7fe      	b.n	35c0 <lv_obj_set_pos+0x9c>
    35c2:	bf00      	nop
    35c4:	0000295d 	.word	0x0000295d
    35c8:	00003445 	.word	0x00003445
    35cc:	00003069 	.word	0x00003069
    35d0:	00002cbd 	.word	0x00002cbd
    35d4:	00017880 	.word	0x00017880
    35d8:	00002965 	.word	0x00002965

000035dc <lv_obj_align>:
{
    35dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    35e0:	b083      	sub	sp, #12
    35e2:	4604      	mov	r4, r0
    35e4:	460d      	mov	r5, r1
    35e6:	4690      	mov	r8, r2
    35e8:	461f      	mov	r7, r3
    35ea:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    35ee:	4b24      	ldr	r3, [pc, #144]	; (3680 <lv_obj_align+0xa4>)
    35f0:	4798      	blx	r3
    35f2:	b928      	cbnz	r0, 3600 <lv_obj_align+0x24>
    35f4:	4622      	mov	r2, r4
    35f6:	2300      	movs	r3, #0
    35f8:	4822      	ldr	r0, [pc, #136]	; (3684 <lv_obj_align+0xa8>)
    35fa:	4923      	ldr	r1, [pc, #140]	; (3688 <lv_obj_align+0xac>)
    35fc:	4788      	blx	r1
    35fe:	e7fe      	b.n	35fe <lv_obj_align+0x22>
    if(base == NULL) base = lv_obj_get_parent(obj);
    3600:	b14d      	cbz	r5, 3616 <lv_obj_align+0x3a>
    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
    3602:	4628      	mov	r0, r5
    3604:	4b1e      	ldr	r3, [pc, #120]	; (3680 <lv_obj_align+0xa4>)
    3606:	4798      	blx	r3
    3608:	b950      	cbnz	r0, 3620 <lv_obj_align+0x44>
    360a:	462a      	mov	r2, r5
    360c:	2300      	movs	r3, #0
    360e:	481d      	ldr	r0, [pc, #116]	; (3684 <lv_obj_align+0xa8>)
    3610:	491d      	ldr	r1, [pc, #116]	; (3688 <lv_obj_align+0xac>)
    3612:	4788      	blx	r1
    3614:	e7fe      	b.n	3614 <lv_obj_align+0x38>
    if(base == NULL) base = lv_obj_get_parent(obj);
    3616:	4620      	mov	r0, r4
    3618:	4b1c      	ldr	r3, [pc, #112]	; (368c <lv_obj_align+0xb0>)
    361a:	4798      	blx	r3
    361c:	4605      	mov	r5, r0
    361e:	e7f0      	b.n	3602 <lv_obj_align+0x26>
    _lv_area_align(&base->coords, &obj->coords, align, &new_pos);
    3620:	ab01      	add	r3, sp, #4
    3622:	4642      	mov	r2, r8
    3624:	f104 0110 	add.w	r1, r4, #16
    3628:	f105 0010 	add.w	r0, r5, #16
    362c:	f8df 9064 	ldr.w	r9, [pc, #100]	; 3694 <lv_obj_align+0xb8>
    3630:	47c8      	blx	r9
    lv_obj_t * par        = lv_obj_get_parent(obj);
    3632:	4620      	mov	r0, r4
    3634:	4b15      	ldr	r3, [pc, #84]	; (368c <lv_obj_align+0xb0>)
    3636:	4798      	blx	r3
    lv_coord_t par_abs_y  = par->coords.y1;
    3638:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
    new_pos.y += y_ofs;
    363c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    3640:	4432      	add	r2, r6
    new_pos.x += x_ofs;
    3642:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    3646:	4439      	add	r1, r7
    new_pos.x -= par_abs_x;
    3648:	8a00      	ldrh	r0, [r0, #16]
    364a:	1a09      	subs	r1, r1, r0
    364c:	b209      	sxth	r1, r1
    364e:	f8ad 1004 	strh.w	r1, [sp, #4]
    new_pos.y -= par_abs_y;
    3652:	1ad2      	subs	r2, r2, r3
    3654:	b212      	sxth	r2, r2
    3656:	f8ad 2006 	strh.w	r2, [sp, #6]
    lv_obj_set_pos(obj, new_pos.x, new_pos.y);
    365a:	4620      	mov	r0, r4
    365c:	4b0c      	ldr	r3, [pc, #48]	; (3690 <lv_obj_align+0xb4>)
    365e:	4798      	blx	r3
    obj->realign.align       = align;
    3660:	f884 8048 	strb.w	r8, [r4, #72]	; 0x48
    obj->realign.xofs        = x_ofs;
    3664:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
    obj->realign.yofs        = y_ofs;
    3668:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
    obj->realign.base        = base;
    366c:	6425      	str	r5, [r4, #64]	; 0x40
    obj->realign.origo_align = 0;
    366e:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
    3672:	f36f 0341 	bfc	r3, #1, #1
    3676:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
}
    367a:	b003      	add	sp, #12
    367c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3680:	0000295d 	.word	0x0000295d
    3684:	00017880 	.word	0x00017880
    3688:	00002965 	.word	0x00002965
    368c:	00002f3d 	.word	0x00002f3d
    3690:	00003525 	.word	0x00003525
    3694:	00010a25 	.word	0x00010a25

00003698 <lv_obj_align_origo>:
{
    3698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    369c:	b083      	sub	sp, #12
    369e:	4681      	mov	r9, r0
    36a0:	460e      	mov	r6, r1
    36a2:	4692      	mov	sl, r2
    36a4:	9301      	str	r3, [sp, #4]
    36a6:	f9bd b030 	ldrsh.w	fp, [sp, #48]	; 0x30
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    36aa:	4ba2      	ldr	r3, [pc, #648]	; (3934 <lv_obj_align_origo+0x29c>)
    36ac:	4798      	blx	r3
    36ae:	b928      	cbnz	r0, 36bc <lv_obj_align_origo+0x24>
    36b0:	464a      	mov	r2, r9
    36b2:	2300      	movs	r3, #0
    36b4:	48a0      	ldr	r0, [pc, #640]	; (3938 <lv_obj_align_origo+0x2a0>)
    36b6:	49a1      	ldr	r1, [pc, #644]	; (393c <lv_obj_align_origo+0x2a4>)
    36b8:	4788      	blx	r1
    36ba:	e7fe      	b.n	36ba <lv_obj_align_origo+0x22>
    lv_coord_t new_x = lv_obj_get_x(obj);
    36bc:	4648      	mov	r0, r9
    36be:	4ba0      	ldr	r3, [pc, #640]	; (3940 <lv_obj_align_origo+0x2a8>)
    36c0:	4798      	blx	r3
    36c2:	4605      	mov	r5, r0
    lv_coord_t new_y = lv_obj_get_y(obj);
    36c4:	4648      	mov	r0, r9
    36c6:	4b9f      	ldr	r3, [pc, #636]	; (3944 <lv_obj_align_origo+0x2ac>)
    36c8:	4798      	blx	r3
    36ca:	4604      	mov	r4, r0
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
    36cc:	4648      	mov	r0, r9
    36ce:	4b9e      	ldr	r3, [pc, #632]	; (3948 <lv_obj_align_origo+0x2b0>)
    36d0:	4798      	blx	r3
    36d2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    36d6:	f340 084f 	sbfx	r8, r0, #1, #16
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
    36da:	4648      	mov	r0, r9
    36dc:	4b9b      	ldr	r3, [pc, #620]	; (394c <lv_obj_align_origo+0x2b4>)
    36de:	4798      	blx	r3
    36e0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    36e4:	f340 074f 	sbfx	r7, r0, #1, #16
    if(base == NULL) {
    36e8:	b1ee      	cbz	r6, 3726 <lv_obj_align_origo+0x8e>
    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
    36ea:	4630      	mov	r0, r6
    36ec:	4b91      	ldr	r3, [pc, #580]	; (3934 <lv_obj_align_origo+0x29c>)
    36ee:	4798      	blx	r3
    36f0:	b1f0      	cbz	r0, 3730 <lv_obj_align_origo+0x98>
    switch(align) {
    36f2:	f1ba 0f14 	cmp.w	sl, #20
    36f6:	d831      	bhi.n	375c <lv_obj_align_origo+0xc4>
    36f8:	e8df f01a 	tbh	[pc, sl, lsl #1]
    36fc:	00540020 	.word	0x00540020
    3700:	0065005a 	.word	0x0065005a
    3704:	0077006e 	.word	0x0077006e
    3708:	00910085 	.word	0x00910085
    370c:	00ac009d 	.word	0x00ac009d
    3710:	00bd00b2 	.word	0x00bd00b2
    3714:	00cf00c6 	.word	0x00cf00c6
    3718:	00e900dd 	.word	0x00e900dd
    371c:	00fb00ef 	.word	0x00fb00ef
    3720:	010d0104 	.word	0x010d0104
    3724:	012e      	.short	0x012e
        base = lv_obj_get_parent(obj);
    3726:	4648      	mov	r0, r9
    3728:	4b89      	ldr	r3, [pc, #548]	; (3950 <lv_obj_align_origo+0x2b8>)
    372a:	4798      	blx	r3
    372c:	4606      	mov	r6, r0
    372e:	e7dc      	b.n	36ea <lv_obj_align_origo+0x52>
    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
    3730:	4632      	mov	r2, r6
    3732:	2300      	movs	r3, #0
    3734:	4880      	ldr	r0, [pc, #512]	; (3938 <lv_obj_align_origo+0x2a0>)
    3736:	4981      	ldr	r1, [pc, #516]	; (393c <lv_obj_align_origo+0x2a4>)
    3738:	4788      	blx	r1
    373a:	e7fe      	b.n	373a <lv_obj_align_origo+0xa2>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
    373c:	4630      	mov	r0, r6
    373e:	4b82      	ldr	r3, [pc, #520]	; (3948 <lv_obj_align_origo+0x2b0>)
    3740:	4798      	blx	r3
    3742:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    3746:	ebc8 0560 	rsb	r5, r8, r0, asr #1
    374a:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
    374c:	4630      	mov	r0, r6
    374e:	4b7f      	ldr	r3, [pc, #508]	; (394c <lv_obj_align_origo+0x2b4>)
    3750:	4798      	blx	r3
    3752:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    3756:	ebc7 0460 	rsb	r4, r7, r0, asr #1
    375a:	b224      	sxth	r4, r4
    lv_obj_t * par        = lv_obj_get_parent(obj);
    375c:	4648      	mov	r0, r9
    375e:	4b7c      	ldr	r3, [pc, #496]	; (3950 <lv_obj_align_origo+0x2b8>)
    3760:	4798      	blx	r3
    new_x += x_ofs + base_abs_x;
    3762:	8a31      	ldrh	r1, [r6, #16]
    3764:	9f01      	ldr	r7, [sp, #4]
    3766:	4439      	add	r1, r7
    3768:	4429      	add	r1, r5
    new_x -= par_abs_x;
    376a:	8a03      	ldrh	r3, [r0, #16]
    376c:	1ac9      	subs	r1, r1, r3
    new_y += y_ofs + base_abs_y;
    376e:	8a72      	ldrh	r2, [r6, #18]
    3770:	445a      	add	r2, fp
    3772:	4422      	add	r2, r4
    new_y -= par_abs_y;
    3774:	8a43      	ldrh	r3, [r0, #18]
    3776:	1ad2      	subs	r2, r2, r3
    lv_obj_set_pos(obj, new_x, new_y);
    3778:	b212      	sxth	r2, r2
    377a:	b209      	sxth	r1, r1
    377c:	4648      	mov	r0, r9
    377e:	4b75      	ldr	r3, [pc, #468]	; (3954 <lv_obj_align_origo+0x2bc>)
    3780:	4798      	blx	r3
    obj->realign.align       = align;
    3782:	f889 a048 	strb.w	sl, [r9, #72]	; 0x48
    obj->realign.xofs        = x_ofs;
    3786:	f8a9 7044 	strh.w	r7, [r9, #68]	; 0x44
    obj->realign.yofs        = y_ofs;
    378a:	f8a9 b046 	strh.w	fp, [r9, #70]	; 0x46
    obj->realign.base        = base;
    378e:	f8c9 6040 	str.w	r6, [r9, #64]	; 0x40
    obj->realign.origo_align = 1;
    3792:	f899 3049 	ldrb.w	r3, [r9, #73]	; 0x49
    3796:	f043 0302 	orr.w	r3, r3, #2
    379a:	f889 3049 	strb.w	r3, [r9, #73]	; 0x49
}
    379e:	b003      	add	sp, #12
    37a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            new_x = -obj_w_half;
    37a4:	f1c8 0500 	rsb	r5, r8, #0
    37a8:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
    37aa:	427c      	negs	r4, r7
    37ac:	b224      	sxth	r4, r4
            break;
    37ae:	e7d5      	b.n	375c <lv_obj_align_origo+0xc4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
    37b0:	4630      	mov	r0, r6
    37b2:	4b65      	ldr	r3, [pc, #404]	; (3948 <lv_obj_align_origo+0x2b0>)
    37b4:	4798      	blx	r3
    37b6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    37ba:	ebc8 0560 	rsb	r5, r8, r0, asr #1
    37be:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
    37c0:	427c      	negs	r4, r7
    37c2:	b224      	sxth	r4, r4
            break;
    37c4:	e7ca      	b.n	375c <lv_obj_align_origo+0xc4>
            new_x = lv_obj_get_width(base) - obj_w_half;
    37c6:	4630      	mov	r0, r6
    37c8:	4b5f      	ldr	r3, [pc, #380]	; (3948 <lv_obj_align_origo+0x2b0>)
    37ca:	4798      	blx	r3
    37cc:	eba0 0008 	sub.w	r0, r0, r8
    37d0:	b205      	sxth	r5, r0
            new_y = -obj_h_half;
    37d2:	427c      	negs	r4, r7
    37d4:	b224      	sxth	r4, r4
            break;
    37d6:	e7c1      	b.n	375c <lv_obj_align_origo+0xc4>
            new_x = -obj_w_half;
    37d8:	f1c8 0500 	rsb	r5, r8, #0
    37dc:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
    37de:	4630      	mov	r0, r6
    37e0:	4b5a      	ldr	r3, [pc, #360]	; (394c <lv_obj_align_origo+0x2b4>)
    37e2:	4798      	blx	r3
    37e4:	1bc0      	subs	r0, r0, r7
    37e6:	b204      	sxth	r4, r0
            break;
    37e8:	e7b8      	b.n	375c <lv_obj_align_origo+0xc4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
    37ea:	4630      	mov	r0, r6
    37ec:	4b56      	ldr	r3, [pc, #344]	; (3948 <lv_obj_align_origo+0x2b0>)
    37ee:	4798      	blx	r3
    37f0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    37f4:	ebc8 0560 	rsb	r5, r8, r0, asr #1
    37f8:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
    37fa:	4630      	mov	r0, r6
    37fc:	4b53      	ldr	r3, [pc, #332]	; (394c <lv_obj_align_origo+0x2b4>)
    37fe:	4798      	blx	r3
    3800:	1bc0      	subs	r0, r0, r7
    3802:	b204      	sxth	r4, r0
            break;
    3804:	e7aa      	b.n	375c <lv_obj_align_origo+0xc4>
            new_x = lv_obj_get_width(base) - obj_w_half;
    3806:	4630      	mov	r0, r6
    3808:	4b4f      	ldr	r3, [pc, #316]	; (3948 <lv_obj_align_origo+0x2b0>)
    380a:	4798      	blx	r3
    380c:	eba0 0008 	sub.w	r0, r0, r8
    3810:	b205      	sxth	r5, r0
            new_y = lv_obj_get_height(base) - obj_h_half;
    3812:	4630      	mov	r0, r6
    3814:	4b4d      	ldr	r3, [pc, #308]	; (394c <lv_obj_align_origo+0x2b4>)
    3816:	4798      	blx	r3
    3818:	1bc0      	subs	r0, r0, r7
    381a:	b204      	sxth	r4, r0
            break;
    381c:	e79e      	b.n	375c <lv_obj_align_origo+0xc4>
            new_x = -obj_w_half;
    381e:	f1c8 0500 	rsb	r5, r8, #0
    3822:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
    3824:	4630      	mov	r0, r6
    3826:	4b49      	ldr	r3, [pc, #292]	; (394c <lv_obj_align_origo+0x2b4>)
    3828:	4798      	blx	r3
    382a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    382e:	ebc7 0460 	rsb	r4, r7, r0, asr #1
    3832:	b224      	sxth	r4, r4
            break;
    3834:	e792      	b.n	375c <lv_obj_align_origo+0xc4>
            new_x = lv_obj_get_width(base) - obj_w_half;
    3836:	4630      	mov	r0, r6
    3838:	4b43      	ldr	r3, [pc, #268]	; (3948 <lv_obj_align_origo+0x2b0>)
    383a:	4798      	blx	r3
    383c:	eba0 0008 	sub.w	r0, r0, r8
    3840:	b205      	sxth	r5, r0
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
    3842:	4630      	mov	r0, r6
    3844:	4b41      	ldr	r3, [pc, #260]	; (394c <lv_obj_align_origo+0x2b4>)
    3846:	4798      	blx	r3
    3848:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    384c:	ebc7 0460 	rsb	r4, r7, r0, asr #1
    3850:	b224      	sxth	r4, r4
            break;
    3852:	e783      	b.n	375c <lv_obj_align_origo+0xc4>
            new_x = -obj_w_half;
    3854:	f1c8 0500 	rsb	r5, r8, #0
    3858:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
    385a:	427c      	negs	r4, r7
    385c:	b224      	sxth	r4, r4
            break;
    385e:	e77d      	b.n	375c <lv_obj_align_origo+0xc4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
    3860:	4630      	mov	r0, r6
    3862:	4b39      	ldr	r3, [pc, #228]	; (3948 <lv_obj_align_origo+0x2b0>)
    3864:	4798      	blx	r3
    3866:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    386a:	ebc8 0560 	rsb	r5, r8, r0, asr #1
    386e:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
    3870:	427c      	negs	r4, r7
    3872:	b224      	sxth	r4, r4
            break;
    3874:	e772      	b.n	375c <lv_obj_align_origo+0xc4>
            new_x = lv_obj_get_width(base) - obj_w_half;
    3876:	4630      	mov	r0, r6
    3878:	4b33      	ldr	r3, [pc, #204]	; (3948 <lv_obj_align_origo+0x2b0>)
    387a:	4798      	blx	r3
    387c:	eba0 0008 	sub.w	r0, r0, r8
    3880:	b205      	sxth	r5, r0
            new_y = -obj_h_half;
    3882:	427c      	negs	r4, r7
    3884:	b224      	sxth	r4, r4
            break;
    3886:	e769      	b.n	375c <lv_obj_align_origo+0xc4>
            new_x = -obj_w_half;
    3888:	f1c8 0500 	rsb	r5, r8, #0
    388c:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
    388e:	4630      	mov	r0, r6
    3890:	4b2e      	ldr	r3, [pc, #184]	; (394c <lv_obj_align_origo+0x2b4>)
    3892:	4798      	blx	r3
    3894:	1bc0      	subs	r0, r0, r7
    3896:	b204      	sxth	r4, r0
            break;
    3898:	e760      	b.n	375c <lv_obj_align_origo+0xc4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
    389a:	4630      	mov	r0, r6
    389c:	4b2a      	ldr	r3, [pc, #168]	; (3948 <lv_obj_align_origo+0x2b0>)
    389e:	4798      	blx	r3
    38a0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    38a4:	ebc8 0560 	rsb	r5, r8, r0, asr #1
    38a8:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
    38aa:	4630      	mov	r0, r6
    38ac:	4b27      	ldr	r3, [pc, #156]	; (394c <lv_obj_align_origo+0x2b4>)
    38ae:	4798      	blx	r3
    38b0:	1bc0      	subs	r0, r0, r7
    38b2:	b204      	sxth	r4, r0
            break;
    38b4:	e752      	b.n	375c <lv_obj_align_origo+0xc4>
            new_x = lv_obj_get_width(base) - obj_w_half;
    38b6:	4630      	mov	r0, r6
    38b8:	4b23      	ldr	r3, [pc, #140]	; (3948 <lv_obj_align_origo+0x2b0>)
    38ba:	4798      	blx	r3
    38bc:	eba0 0008 	sub.w	r0, r0, r8
    38c0:	b205      	sxth	r5, r0
            new_y = lv_obj_get_height(base) - obj_h_half;
    38c2:	4630      	mov	r0, r6
    38c4:	4b21      	ldr	r3, [pc, #132]	; (394c <lv_obj_align_origo+0x2b4>)
    38c6:	4798      	blx	r3
    38c8:	1bc0      	subs	r0, r0, r7
    38ca:	b204      	sxth	r4, r0
            break;
    38cc:	e746      	b.n	375c <lv_obj_align_origo+0xc4>
            new_x = -obj_w_half;
    38ce:	f1c8 0500 	rsb	r5, r8, #0
    38d2:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
    38d4:	427c      	negs	r4, r7
    38d6:	b224      	sxth	r4, r4
            break;
    38d8:	e740      	b.n	375c <lv_obj_align_origo+0xc4>
            new_x = -obj_w_half;
    38da:	f1c8 0500 	rsb	r5, r8, #0
    38de:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
    38e0:	4630      	mov	r0, r6
    38e2:	4b1a      	ldr	r3, [pc, #104]	; (394c <lv_obj_align_origo+0x2b4>)
    38e4:	4798      	blx	r3
    38e6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    38ea:	ebc7 0460 	rsb	r4, r7, r0, asr #1
    38ee:	b224      	sxth	r4, r4
            break;
    38f0:	e734      	b.n	375c <lv_obj_align_origo+0xc4>
            new_x = -obj_w_half;
    38f2:	f1c8 0500 	rsb	r5, r8, #0
    38f6:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
    38f8:	4630      	mov	r0, r6
    38fa:	4b14      	ldr	r3, [pc, #80]	; (394c <lv_obj_align_origo+0x2b4>)
    38fc:	4798      	blx	r3
    38fe:	1bc0      	subs	r0, r0, r7
    3900:	b204      	sxth	r4, r0
            break;
    3902:	e72b      	b.n	375c <lv_obj_align_origo+0xc4>
            new_x = lv_obj_get_width(base) - obj_w_half;
    3904:	4630      	mov	r0, r6
    3906:	4b10      	ldr	r3, [pc, #64]	; (3948 <lv_obj_align_origo+0x2b0>)
    3908:	4798      	blx	r3
    390a:	eba0 0008 	sub.w	r0, r0, r8
    390e:	b205      	sxth	r5, r0
            new_y = -obj_h_half;
    3910:	427c      	negs	r4, r7
    3912:	b224      	sxth	r4, r4
            break;
    3914:	e722      	b.n	375c <lv_obj_align_origo+0xc4>
            new_x = lv_obj_get_width(base) - obj_w_half;
    3916:	4630      	mov	r0, r6
    3918:	4b0b      	ldr	r3, [pc, #44]	; (3948 <lv_obj_align_origo+0x2b0>)
    391a:	4798      	blx	r3
    391c:	eba0 0008 	sub.w	r0, r0, r8
    3920:	b205      	sxth	r5, r0
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
    3922:	4630      	mov	r0, r6
    3924:	4b09      	ldr	r3, [pc, #36]	; (394c <lv_obj_align_origo+0x2b4>)
    3926:	4798      	blx	r3
    3928:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    392c:	ebc7 0460 	rsb	r4, r7, r0, asr #1
    3930:	b224      	sxth	r4, r4
            break;
    3932:	e713      	b.n	375c <lv_obj_align_origo+0xc4>
    3934:	0000295d 	.word	0x0000295d
    3938:	00017880 	.word	0x00017880
    393c:	00002965 	.word	0x00002965
    3940:	000030a5 	.word	0x000030a5
    3944:	000030e5 	.word	0x000030e5
    3948:	00003125 	.word	0x00003125
    394c:	00003155 	.word	0x00003155
    3950:	00002f3d 	.word	0x00002f3d
    3954:	00003525 	.word	0x00003525
            new_x = lv_obj_get_width(base) - obj_w_half;
    3958:	4630      	mov	r0, r6
    395a:	4b05      	ldr	r3, [pc, #20]	; (3970 <lv_obj_align_origo+0x2d8>)
    395c:	4798      	blx	r3
    395e:	eba0 0008 	sub.w	r0, r0, r8
    3962:	b205      	sxth	r5, r0
            new_y = lv_obj_get_height(base) - obj_h_half;
    3964:	4630      	mov	r0, r6
    3966:	4b03      	ldr	r3, [pc, #12]	; (3974 <lv_obj_align_origo+0x2dc>)
    3968:	4798      	blx	r3
    396a:	1bc0      	subs	r0, r0, r7
    396c:	b204      	sxth	r4, r0
            break;
    396e:	e6f5      	b.n	375c <lv_obj_align_origo+0xc4>
    3970:	00003125 	.word	0x00003125
    3974:	00003155 	.word	0x00003155

00003978 <lv_obj_realign>:
{
    3978:	b510      	push	{r4, lr}
    397a:	b082      	sub	sp, #8
    397c:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    397e:	4b0e      	ldr	r3, [pc, #56]	; (39b8 <lv_obj_realign+0x40>)
    3980:	4798      	blx	r3
    3982:	b190      	cbz	r0, 39aa <lv_obj_realign+0x32>
    if(obj->realign.origo_align)
    3984:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
    3988:	f013 0f02 	tst.w	r3, #2
        lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
    398c:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
    3990:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
    3994:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
    3998:	9100      	str	r1, [sp, #0]
    399a:	6c21      	ldr	r1, [r4, #64]	; 0x40
    399c:	4620      	mov	r0, r4
    399e:	bf14      	ite	ne
    39a0:	4c06      	ldrne	r4, [pc, #24]	; (39bc <lv_obj_realign+0x44>)
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
    39a2:	4c07      	ldreq	r4, [pc, #28]	; (39c0 <lv_obj_realign+0x48>)
    39a4:	47a0      	blx	r4
}
    39a6:	b002      	add	sp, #8
    39a8:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    39aa:	4622      	mov	r2, r4
    39ac:	2300      	movs	r3, #0
    39ae:	4805      	ldr	r0, [pc, #20]	; (39c4 <lv_obj_realign+0x4c>)
    39b0:	4905      	ldr	r1, [pc, #20]	; (39c8 <lv_obj_realign+0x50>)
    39b2:	4788      	blx	r1
    39b4:	e7fe      	b.n	39b4 <lv_obj_realign+0x3c>
    39b6:	bf00      	nop
    39b8:	0000295d 	.word	0x0000295d
    39bc:	00003699 	.word	0x00003699
    39c0:	000035dd 	.word	0x000035dd
    39c4:	00017880 	.word	0x00017880
    39c8:	00002965 	.word	0x00002965

000039cc <refresh_children_style>:
{
    39cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    39d0:	4606      	mov	r6, r0
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
    39d2:	2100      	movs	r1, #0
    39d4:	4b0d      	ldr	r3, [pc, #52]	; (3a0c <refresh_children_style+0x40>)
    39d6:	4798      	blx	r3
    while(child != NULL) {
    39d8:	b1b0      	cbz	r0, 3a08 <refresh_children_style+0x3c>
    39da:	4604      	mov	r4, r0
        lv_obj_invalidate(child);
    39dc:	4d0c      	ldr	r5, [pc, #48]	; (3a10 <refresh_children_style+0x44>)
        child->signal_cb(child, LV_SIGNAL_STYLE_CHG, NULL);
    39de:	f04f 0800 	mov.w	r8, #0
        child = lv_obj_get_child(obj, child);
    39e2:	4f0a      	ldr	r7, [pc, #40]	; (3a0c <refresh_children_style+0x40>)
        lv_obj_invalidate(child);
    39e4:	4620      	mov	r0, r4
    39e6:	47a8      	blx	r5
        child->signal_cb(child, LV_SIGNAL_STYLE_CHG, NULL);
    39e8:	69e3      	ldr	r3, [r4, #28]
    39ea:	4642      	mov	r2, r8
    39ec:	2104      	movs	r1, #4
    39ee:	4620      	mov	r0, r4
    39f0:	4798      	blx	r3
        lv_obj_invalidate(child);
    39f2:	4620      	mov	r0, r4
    39f4:	47a8      	blx	r5
        refresh_children_style(child); /*Check children too*/
    39f6:	4620      	mov	r0, r4
    39f8:	f7ff ffe8 	bl	39cc <refresh_children_style>
        child = lv_obj_get_child(obj, child);
    39fc:	4621      	mov	r1, r4
    39fe:	4630      	mov	r0, r6
    3a00:	47b8      	blx	r7
    while(child != NULL) {
    3a02:	4604      	mov	r4, r0
    3a04:	2800      	cmp	r0, #0
    3a06:	d1ed      	bne.n	39e4 <refresh_children_style+0x18>
    3a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3a0c:	00003029 	.word	0x00003029
    3a10:	00003445 	.word	0x00003445

00003a14 <lv_obj_refresh_style>:
{
    3a14:	b538      	push	{r3, r4, r5, lr}
    3a16:	4605      	mov	r5, r0
    3a18:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3a1a:	4b32      	ldr	r3, [pc, #200]	; (3ae4 <lv_obj_refresh_style+0xd0>)
    3a1c:	4798      	blx	r3
    3a1e:	b198      	cbz	r0, 3a48 <lv_obj_refresh_style+0x34>
    switch(prop) {
    3a20:	2c71      	cmp	r4, #113	; 0x71
    3a22:	d83d      	bhi.n	3aa0 <lv_obj_refresh_style+0x8c>
    3a24:	2c70      	cmp	r4, #112	; 0x70
    3a26:	d21b      	bcs.n	3a60 <lv_obj_refresh_style+0x4c>
    3a28:	2c41      	cmp	r4, #65	; 0x41
    3a2a:	d813      	bhi.n	3a54 <lv_obj_refresh_style+0x40>
    3a2c:	2c40      	cmp	r4, #64	; 0x40
    3a2e:	d217      	bcs.n	3a60 <lv_obj_refresh_style+0x4c>
    3a30:	2c02      	cmp	r4, #2
    3a32:	d305      	bcc.n	3a40 <lv_obj_refresh_style+0x2c>
    3a34:	2c07      	cmp	r4, #7
    3a36:	d913      	bls.n	3a60 <lv_obj_refresh_style+0x4c>
    3a38:	f1a4 0310 	sub.w	r3, r4, #16
    3a3c:	2b08      	cmp	r3, #8
    3a3e:	d90f      	bls.n	3a60 <lv_obj_refresh_style+0x4c>
        lv_obj_invalidate(obj);
    3a40:	4628      	mov	r0, r5
    3a42:	4b29      	ldr	r3, [pc, #164]	; (3ae8 <lv_obj_refresh_style+0xd4>)
    3a44:	4798      	blx	r3
}
    3a46:	e027      	b.n	3a98 <lv_obj_refresh_style+0x84>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3a48:	462a      	mov	r2, r5
    3a4a:	2300      	movs	r3, #0
    3a4c:	4827      	ldr	r0, [pc, #156]	; (3aec <lv_obj_refresh_style+0xd8>)
    3a4e:	4928      	ldr	r1, [pc, #160]	; (3af0 <lv_obj_refresh_style+0xdc>)
    3a50:	4788      	blx	r1
    3a52:	e7fe      	b.n	3a52 <lv_obj_refresh_style+0x3e>
    switch(prop) {
    3a54:	2c53      	cmp	r4, #83	; 0x53
    3a56:	d820      	bhi.n	3a9a <lv_obj_refresh_style+0x86>
    3a58:	2c50      	cmp	r4, #80	; 0x50
    3a5a:	d201      	bcs.n	3a60 <lv_obj_refresh_style+0x4c>
    3a5c:	2c4c      	cmp	r4, #76	; 0x4c
    3a5e:	d1ef      	bne.n	3a40 <lv_obj_refresh_style+0x2c>
        lv_obj_invalidate(obj);
    3a60:	4628      	mov	r0, r5
    3a62:	4b21      	ldr	r3, [pc, #132]	; (3ae8 <lv_obj_refresh_style+0xd4>)
    3a64:	4798      	blx	r3
        obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
    3a66:	69eb      	ldr	r3, [r5, #28]
    3a68:	2200      	movs	r2, #0
    3a6a:	2104      	movs	r1, #4
    3a6c:	4628      	mov	r0, r5
    3a6e:	4798      	blx	r3
        switch(prop) {
    3a70:	2c15      	cmp	r4, #21
    3a72:	d309      	bcc.n	3a88 <lv_obj_refresh_style+0x74>
    3a74:	2c18      	cmp	r4, #24
    3a76:	d901      	bls.n	3a7c <lv_obj_refresh_style+0x68>
    3a78:	2cff      	cmp	r4, #255	; 0xff
    3a7a:	d105      	bne.n	3a88 <lv_obj_refresh_style+0x74>
                if(obj->parent) obj->parent->signal_cb(obj->parent, LV_SIGNAL_CHILD_CHG, NULL);
    3a7c:	6828      	ldr	r0, [r5, #0]
    3a7e:	b118      	cbz	r0, 3a88 <lv_obj_refresh_style+0x74>
    3a80:	69c3      	ldr	r3, [r0, #28]
    3a82:	2200      	movs	r2, #0
    3a84:	2101      	movs	r1, #1
    3a86:	4798      	blx	r3
        lv_obj_invalidate(obj);
    3a88:	4628      	mov	r0, r5
    3a8a:	4b17      	ldr	r3, [pc, #92]	; (3ae8 <lv_obj_refresh_style+0xd4>)
    3a8c:	4798      	blx	r3
        if(prop == LV_STYLE_PROP_ALL || (prop & LV_STYLE_INHERIT_MASK)) refresh_children_style(obj);
    3a8e:	2cff      	cmp	r4, #255	; 0xff
    3a90:	d023      	beq.n	3ada <lv_obj_refresh_style+0xc6>
    3a92:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    3a96:	d120      	bne.n	3ada <lv_obj_refresh_style+0xc6>
    3a98:	bd38      	pop	{r3, r4, r5, pc}
    switch(prop) {
    3a9a:	2c5c      	cmp	r4, #92	; 0x5c
    3a9c:	d1d0      	bne.n	3a40 <lv_obj_refresh_style+0x2c>
    3a9e:	e7df      	b.n	3a60 <lv_obj_refresh_style+0x4c>
    3aa0:	2c7f      	cmp	r4, #127	; 0x7f
    3aa2:	d90c      	bls.n	3abe <lv_obj_refresh_style+0xaa>
    3aa4:	f248 0381 	movw	r3, #32897	; 0x8081
    3aa8:	429c      	cmp	r4, r3
    3aaa:	d811      	bhi.n	3ad0 <lv_obj_refresh_style+0xbc>
    3aac:	f248 0380 	movw	r3, #32896	; 0x8080
    3ab0:	429c      	cmp	r4, r3
    3ab2:	d2d5      	bcs.n	3a60 <lv_obj_refresh_style+0x4c>
    3ab4:	2c90      	cmp	r4, #144	; 0x90
    3ab6:	d0d3      	beq.n	3a60 <lv_obj_refresh_style+0x4c>
    3ab8:	2cff      	cmp	r4, #255	; 0xff
    3aba:	d1c1      	bne.n	3a40 <lv_obj_refresh_style+0x2c>
    3abc:	e7d0      	b.n	3a60 <lv_obj_refresh_style+0x4c>
    3abe:	2c7e      	cmp	r4, #126	; 0x7e
    3ac0:	d2ce      	bcs.n	3a60 <lv_obj_refresh_style+0x4c>
    3ac2:	2c73      	cmp	r4, #115	; 0x73
    3ac4:	d3bc      	bcc.n	3a40 <lv_obj_refresh_style+0x2c>
    3ac6:	2c75      	cmp	r4, #117	; 0x75
    3ac8:	d9ca      	bls.n	3a60 <lv_obj_refresh_style+0x4c>
    3aca:	2c7c      	cmp	r4, #124	; 0x7c
    3acc:	d1b8      	bne.n	3a40 <lv_obj_refresh_style+0x2c>
    3ace:	e7c7      	b.n	3a60 <lv_obj_refresh_style+0x4c>
    3ad0:	f248 038e 	movw	r3, #32910	; 0x808e
    3ad4:	429c      	cmp	r4, r3
    3ad6:	d1b3      	bne.n	3a40 <lv_obj_refresh_style+0x2c>
    3ad8:	e7c2      	b.n	3a60 <lv_obj_refresh_style+0x4c>
        if(prop == LV_STYLE_PROP_ALL || (prop & LV_STYLE_INHERIT_MASK)) refresh_children_style(obj);
    3ada:	4628      	mov	r0, r5
    3adc:	4b05      	ldr	r3, [pc, #20]	; (3af4 <lv_obj_refresh_style+0xe0>)
    3ade:	4798      	blx	r3
    3ae0:	bd38      	pop	{r3, r4, r5, pc}
    3ae2:	bf00      	nop
    3ae4:	0000295d 	.word	0x0000295d
    3ae8:	00003445 	.word	0x00003445
    3aec:	00017880 	.word	0x00017880
    3af0:	00002965 	.word	0x00002965
    3af4:	000039cd 	.word	0x000039cd

00003af8 <lv_obj_reset_style_list>:
{
    3af8:	b510      	push	{r4, lr}
    3afa:	4604      	mov	r4, r0
    lv_obj_clean_style_list(obj, part);
    3afc:	4b03      	ldr	r3, [pc, #12]	; (3b0c <lv_obj_reset_style_list+0x14>)
    3afe:	4798      	blx	r3
    lv_obj_refresh_style(obj, LV_STYLE_PROP_ALL);
    3b00:	21ff      	movs	r1, #255	; 0xff
    3b02:	4620      	mov	r0, r4
    3b04:	4b02      	ldr	r3, [pc, #8]	; (3b10 <lv_obj_reset_style_list+0x18>)
    3b06:	4798      	blx	r3
    3b08:	bd10      	pop	{r4, pc}
    3b0a:	bf00      	nop
    3b0c:	00003255 	.word	0x00003255
    3b10:	00003a15 	.word	0x00003a15

00003b14 <report_style_mod_core>:
{
    3b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3b18:	4604      	mov	r4, r0
    3b1a:	460f      	mov	r7, r1
    3b1c:	2600      	movs	r6, #0
        lv_style_list_t * dsc = lv_obj_get_style_list(obj, part_sub);
    3b1e:	f8df 8088 	ldr.w	r8, [pc, #136]	; 3ba8 <report_style_mod_core+0x94>
void _lv_style_list_reset(lv_style_list_t * style_list);

static inline lv_style_t * lv_style_list_get_style(lv_style_list_t * list, uint8_t id)
{
    if(list->has_trans && list->skip_trans) id++;
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    3b22:	4635      	mov	r5, r6
                lv_obj_refresh_style(obj, LV_STYLE_PROP_ALL);
    3b24:	f8df 9084 	ldr.w	r9, [pc, #132]	; 3bac <report_style_mod_core+0x98>
    3b28:	e005      	b.n	3b36 <report_style_mod_core+0x22>
    3b2a:	21ff      	movs	r1, #255	; 0xff
    3b2c:	4638      	mov	r0, r7
    3b2e:	47c8      	blx	r9
    3b30:	3601      	adds	r6, #1
    for(part_sub = 0; part_sub != _LV_OBJ_PART_REAL_LAST; part_sub++) {
    3b32:	2e40      	cmp	r6, #64	; 0x40
    3b34:	d022      	beq.n	3b7c <report_style_mod_core+0x68>
        lv_style_list_t * dsc = lv_obj_get_style_list(obj, part_sub);
    3b36:	b2f1      	uxtb	r1, r6
    3b38:	4638      	mov	r0, r7
    3b3a:	47c0      	blx	r8
        if(dsc == NULL) break;
    3b3c:	4686      	mov	lr, r0
    3b3e:	b1e8      	cbz	r0, 3b7c <report_style_mod_core+0x68>
        for(ci = 0; ci < dsc->style_cnt; ci++) {
    3b40:	7901      	ldrb	r1, [r0, #4]
    3b42:	2900      	cmp	r1, #0
    3b44:	d0f4      	beq.n	3b30 <report_style_mod_core+0x1c>
    if(list->has_trans && list->skip_trans) id++;
    3b46:	f890 c005 	ldrb.w	ip, [r0, #5]
    3b4a:	f00c 0c06 	and.w	ip, ip, #6
    3b4e:	2300      	movs	r3, #0
    3b50:	b2da      	uxtb	r2, r3
    3b52:	f1bc 0f06 	cmp.w	ip, #6
    3b56:	bf04      	itt	eq
    3b58:	3201      	addeq	r2, #1
    3b5a:	b2d2      	uxtbeq	r2, r2
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    3b5c:	428a      	cmp	r2, r1
    return list->style_list[id];
    3b5e:	bf3a      	itte	cc
    3b60:	f8de 0000 	ldrcc.w	r0, [lr]
    3b64:	f850 2022 	ldrcc.w	r2, [r0, r2, lsl #2]
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    3b68:	462a      	movcs	r2, r5
            if(class == style || style == NULL) {
    3b6a:	4294      	cmp	r4, r2
    3b6c:	d0dd      	beq.n	3b2a <report_style_mod_core+0x16>
    3b6e:	2c00      	cmp	r4, #0
    3b70:	d0db      	beq.n	3b2a <report_style_mod_core+0x16>
    3b72:	3301      	adds	r3, #1
        for(ci = 0; ci < dsc->style_cnt; ci++) {
    3b74:	b2da      	uxtb	r2, r3
    3b76:	428a      	cmp	r2, r1
    3b78:	d3ea      	bcc.n	3b50 <report_style_mod_core+0x3c>
    3b7a:	e7d9      	b.n	3b30 <report_style_mod_core+0x1c>
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
    3b7c:	2100      	movs	r1, #0
    3b7e:	4638      	mov	r0, r7
    3b80:	4b08      	ldr	r3, [pc, #32]	; (3ba4 <report_style_mod_core+0x90>)
    3b82:	4798      	blx	r3
    while(child) {
    3b84:	4605      	mov	r5, r0
    3b86:	b150      	cbz	r0, 3b9e <report_style_mod_core+0x8a>
        child = lv_obj_get_child(obj, child);
    3b88:	4e06      	ldr	r6, [pc, #24]	; (3ba4 <report_style_mod_core+0x90>)
        report_style_mod_core(style, child);
    3b8a:	4629      	mov	r1, r5
    3b8c:	4620      	mov	r0, r4
    3b8e:	f7ff ffc1 	bl	3b14 <report_style_mod_core>
        child = lv_obj_get_child(obj, child);
    3b92:	4629      	mov	r1, r5
    3b94:	4638      	mov	r0, r7
    3b96:	47b0      	blx	r6
    while(child) {
    3b98:	4605      	mov	r5, r0
    3b9a:	2800      	cmp	r0, #0
    3b9c:	d1f5      	bne.n	3b8a <report_style_mod_core+0x76>
    3b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3ba2:	bf00      	nop
    3ba4:	00003029 	.word	0x00003029
    3ba8:	00003185 	.word	0x00003185
    3bac:	00003a15 	.word	0x00003a15

00003bb0 <lv_obj_report_style_mod>:
{
    3bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3bb4:	4680      	mov	r8, r0
    lv_disp_t * d = lv_disp_get_next(NULL);
    3bb6:	2000      	movs	r0, #0
    3bb8:	4b0f      	ldr	r3, [pc, #60]	; (3bf8 <lv_obj_report_style_mod+0x48>)
    3bba:	4798      	blx	r3
    while(d) {
    3bbc:	b1c8      	cbz	r0, 3bf2 <lv_obj_report_style_mod+0x42>
    3bbe:	4681      	mov	r9, r0
        _LV_LL_READ(d->scr_ll, i) {
    3bc0:	f8df a040 	ldr.w	sl, [pc, #64]	; 3c04 <lv_obj_report_style_mod+0x54>
            report_style_mod_core(style, i);
    3bc4:	4f0d      	ldr	r7, [pc, #52]	; (3bfc <lv_obj_report_style_mod+0x4c>)
        _LV_LL_READ(d->scr_ll, i) {
    3bc6:	4e0e      	ldr	r6, [pc, #56]	; (3c00 <lv_obj_report_style_mod+0x50>)
    3bc8:	f109 0530 	add.w	r5, r9, #48	; 0x30
    3bcc:	4628      	mov	r0, r5
    3bce:	47d0      	blx	sl
    3bd0:	4604      	mov	r4, r0
    3bd2:	b140      	cbz	r0, 3be6 <lv_obj_report_style_mod+0x36>
            report_style_mod_core(style, i);
    3bd4:	4621      	mov	r1, r4
    3bd6:	4640      	mov	r0, r8
    3bd8:	47b8      	blx	r7
        _LV_LL_READ(d->scr_ll, i) {
    3bda:	4621      	mov	r1, r4
    3bdc:	4628      	mov	r0, r5
    3bde:	47b0      	blx	r6
    3be0:	4604      	mov	r4, r0
    3be2:	2800      	cmp	r0, #0
    3be4:	d1f6      	bne.n	3bd4 <lv_obj_report_style_mod+0x24>
        d = lv_disp_get_next(d);
    3be6:	4648      	mov	r0, r9
    3be8:	4b03      	ldr	r3, [pc, #12]	; (3bf8 <lv_obj_report_style_mod+0x48>)
    3bea:	4798      	blx	r3
    while(d) {
    3bec:	4681      	mov	r9, r0
    3bee:	2800      	cmp	r0, #0
    3bf0:	d1ea      	bne.n	3bc8 <lv_obj_report_style_mod+0x18>
    3bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3bf6:	bf00      	nop
    3bf8:	00010239 	.word	0x00010239
    3bfc:	00003b15 	.word	0x00003b15
    3c00:	0001119d 	.word	0x0001119d
    3c04:	00011189 	.word	0x00011189

00003c08 <trans_anim_cb>:
{
    3c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c0a:	4604      	mov	r4, r0
    3c0c:	460d      	mov	r5, r1
    lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
    3c0e:	7981      	ldrb	r1, [r0, #6]
    3c10:	6800      	ldr	r0, [r0, #0]
    3c12:	4b42      	ldr	r3, [pc, #264]	; (3d1c <trans_anim_cb+0x114>)
    3c14:	4798      	blx	r3
    lv_style_t * style = _lv_style_list_get_transition_style(list);
    3c16:	4b42      	ldr	r3, [pc, #264]	; (3d20 <trans_anim_cb+0x118>)
    3c18:	4798      	blx	r3
    if((tr->prop & 0xF) < LV_STYLE_ID_COLOR) { /*Value*/
    3c1a:	88a1      	ldrh	r1, [r4, #4]
    3c1c:	f001 030f 	and.w	r3, r1, #15
    3c20:	2b08      	cmp	r3, #8
    3c22:	dc19      	bgt.n	3c58 <trans_anim_cb+0x50>
        if(v == 0) x = tr->start_value._int;
    3c24:	b945      	cbnz	r5, 3c38 <trans_anim_cb+0x30>
    3c26:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
        _lv_style_set_int(style, tr->prop, x);
    3c2a:	4b3e      	ldr	r3, [pc, #248]	; (3d24 <trans_anim_cb+0x11c>)
    3c2c:	4798      	blx	r3
    lv_obj_refresh_style(tr->obj, tr->prop);
    3c2e:	88a1      	ldrh	r1, [r4, #4]
    3c30:	6820      	ldr	r0, [r4, #0]
    3c32:	4b3d      	ldr	r3, [pc, #244]	; (3d28 <trans_anim_cb+0x120>)
    3c34:	4798      	blx	r3
    3c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        else if(v == 255) x = tr->end_value._int;
    3c38:	2dff      	cmp	r5, #255	; 0xff
    3c3a:	d00a      	beq.n	3c52 <trans_anim_cb+0x4a>
        else x = tr->start_value._int + ((int32_t)((int32_t)(tr->end_value._int - tr->start_value._int) * v) >> 8);
    3c3c:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
    3c40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    3c44:	1a9b      	subs	r3, r3, r2
    3c46:	fb05 f503 	mul.w	r5, r5, r3
    3c4a:	eb02 2225 	add.w	r2, r2, r5, asr #8
    3c4e:	b212      	sxth	r2, r2
    3c50:	e7eb      	b.n	3c2a <trans_anim_cb+0x22>
        else if(v == 255) x = tr->end_value._int;
    3c52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    3c56:	e7e8      	b.n	3c2a <trans_anim_cb+0x22>
    else if((tr->prop & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
    3c58:	2b0b      	cmp	r3, #11
    3c5a:	dc43      	bgt.n	3ce4 <trans_anim_cb+0xdc>
        if(v <= 0) x = tr->start_value._color;
    3c5c:	2d00      	cmp	r5, #0
    3c5e:	dd05      	ble.n	3c6c <trans_anim_cb+0x64>
        else if(v >= 255) x = tr->end_value._color;
    3c60:	2dfe      	cmp	r5, #254	; 0xfe
    3c62:	dd05      	ble.n	3c70 <trans_anim_cb+0x68>
    3c64:	89a2      	ldrh	r2, [r4, #12]
        _lv_style_set_color(style, tr->prop, x);
    3c66:	4b31      	ldr	r3, [pc, #196]	; (3d2c <trans_anim_cb+0x124>)
    3c68:	4798      	blx	r3
    3c6a:	e7e0      	b.n	3c2e <trans_anim_cb+0x26>
        if(v <= 0) x = tr->start_value._color;
    3c6c:	8922      	ldrh	r2, [r4, #8]
    3c6e:	e7fa      	b.n	3c66 <trans_anim_cb+0x5e>
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    3c70:	b2ed      	uxtb	r5, r5
    3c72:	f1c5 02ff 	rsb	r2, r5, #255	; 0xff
    3c76:	7b63      	ldrb	r3, [r4, #13]
    3c78:	08db      	lsrs	r3, r3, #3
    3c7a:	7a66      	ldrb	r6, [r4, #9]
    3c7c:	08f6      	lsrs	r6, r6, #3
    3c7e:	fb02 f606 	mul.w	r6, r2, r6
    3c82:	fb05 6303 	mla	r3, r5, r3, r6
    3c86:	eb03 2703 	add.w	r7, r3, r3, lsl #8
    3c8a:	eb03 13c7 	add.w	r3, r3, r7, lsl #7
    3c8e:	f3c3 57c4 	ubfx	r7, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    3c92:	89a3      	ldrh	r3, [r4, #12]
    3c94:	f3c3 1345 	ubfx	r3, r3, #5, #6
    3c98:	8926      	ldrh	r6, [r4, #8]
    3c9a:	f3c6 1645 	ubfx	r6, r6, #5, #6
    3c9e:	fb02 f606 	mul.w	r6, r2, r6
    3ca2:	fb05 6303 	mla	r3, r5, r3, r6
    3ca6:	eb03 2603 	add.w	r6, r3, r3, lsl #8
    3caa:	eb03 13c6 	add.w	r3, r3, r6, lsl #7
    3cae:	f3c3 56c5 	ubfx	r6, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    3cb2:	7b23      	ldrb	r3, [r4, #12]
    3cb4:	f003 031f 	and.w	r3, r3, #31
    3cb8:	f894 e008 	ldrb.w	lr, [r4, #8]
    3cbc:	f00e 0e1f 	and.w	lr, lr, #31
    3cc0:	fb02 f20e 	mul.w	r2, r2, lr
    3cc4:	fb05 2503 	mla	r5, r5, r3, r2
    3cc8:	eb05 2305 	add.w	r3, r5, r5, lsl #8
    3ccc:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    3cd0:	0ded      	lsrs	r5, r5, #23
    3cd2:	f04f 0200 	mov.w	r2, #0
    3cd6:	f365 0204 	bfi	r2, r5, #0, #5
    3cda:	f366 124a 	bfi	r2, r6, #5, #6
    3cde:	f367 22cf 	bfi	r2, r7, #11, #5
    3ce2:	e7c0      	b.n	3c66 <trans_anim_cb+0x5e>
    else if((tr->prop & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
    3ce4:	2b0d      	cmp	r3, #13
    3ce6:	dc12      	bgt.n	3d0e <trans_anim_cb+0x106>
        if(v <= 0) x = tr->start_value._opa;
    3ce8:	2d00      	cmp	r5, #0
    3cea:	dd05      	ble.n	3cf8 <trans_anim_cb+0xf0>
        else if(v >= 255) x = tr->end_value._opa;
    3cec:	2dfe      	cmp	r5, #254	; 0xfe
    3cee:	dd05      	ble.n	3cfc <trans_anim_cb+0xf4>
    3cf0:	7b22      	ldrb	r2, [r4, #12]
        _lv_style_set_opa(style, tr->prop, x);
    3cf2:	4b0f      	ldr	r3, [pc, #60]	; (3d30 <trans_anim_cb+0x128>)
    3cf4:	4798      	blx	r3
    3cf6:	e79a      	b.n	3c2e <trans_anim_cb+0x26>
        if(v <= 0) x = tr->start_value._opa;
    3cf8:	7a22      	ldrb	r2, [r4, #8]
    3cfa:	e7fa      	b.n	3cf2 <trans_anim_cb+0xea>
        else x = tr->start_value._opa + (((tr->end_value._opa - tr->start_value._opa) * v) >> 8);
    3cfc:	7a22      	ldrb	r2, [r4, #8]
    3cfe:	7b23      	ldrb	r3, [r4, #12]
    3d00:	1a9b      	subs	r3, r3, r2
    3d02:	fb05 f503 	mul.w	r5, r5, r3
    3d06:	eb02 2225 	add.w	r2, r2, r5, asr #8
    3d0a:	b2d2      	uxtb	r2, r2
    3d0c:	e7f1      	b.n	3cf2 <trans_anim_cb+0xea>
        if(v < 128) x = tr->start_value._ptr;
    3d0e:	2d7f      	cmp	r5, #127	; 0x7f
    3d10:	bfd4      	ite	le
    3d12:	68a2      	ldrle	r2, [r4, #8]
        else x = tr->end_value._ptr;
    3d14:	68e2      	ldrgt	r2, [r4, #12]
        _lv_style_set_ptr(style, tr->prop, x);
    3d16:	4b07      	ldr	r3, [pc, #28]	; (3d34 <trans_anim_cb+0x12c>)
    3d18:	4798      	blx	r3
    3d1a:	e788      	b.n	3c2e <trans_anim_cb+0x26>
    3d1c:	00003185 	.word	0x00003185
    3d20:	000067cf 	.word	0x000067cf
    3d24:	00006039 	.word	0x00006039
    3d28:	00003a15 	.word	0x00003a15
    3d2c:	00006161 	.word	0x00006161
    3d30:	00006289 	.word	0x00006289
    3d34:	0000639d 	.word	0x0000639d

00003d38 <lv_obj_get_base_dir>:
{
    3d38:	b510      	push	{r4, lr}
    3d3a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3d3c:	4b05      	ldr	r3, [pc, #20]	; (3d54 <lv_obj_get_base_dir+0x1c>)
    3d3e:	4798      	blx	r3
    3d40:	b108      	cbz	r0, 3d46 <lv_obj_get_base_dir+0xe>
}
    3d42:	2000      	movs	r0, #0
    3d44:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3d46:	4622      	mov	r2, r4
    3d48:	2300      	movs	r3, #0
    3d4a:	4803      	ldr	r0, [pc, #12]	; (3d58 <lv_obj_get_base_dir+0x20>)
    3d4c:	4903      	ldr	r1, [pc, #12]	; (3d5c <lv_obj_get_base_dir+0x24>)
    3d4e:	4788      	blx	r1
    3d50:	e7fe      	b.n	3d50 <lv_obj_get_base_dir+0x18>
    3d52:	bf00      	nop
    3d54:	0000295d 	.word	0x0000295d
    3d58:	00017880 	.word	0x00017880
    3d5c:	00002965 	.word	0x00002965

00003d60 <lv_obj_create>:
{
    3d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d62:	460d      	mov	r5, r1
    if(parent == NULL) {
    3d64:	4606      	mov	r6, r0
    3d66:	b150      	cbz	r0, 3d7e <lv_obj_create+0x1e>
        LV_ASSERT_OBJ(parent, LV_OBJX_NAME);
    3d68:	4bc2      	ldr	r3, [pc, #776]	; (4074 <lv_obj_create+0x314>)
    3d6a:	4798      	blx	r3
    3d6c:	2800      	cmp	r0, #0
    3d6e:	f040 811f 	bne.w	3fb0 <lv_obj_create+0x250>
    3d72:	4632      	mov	r2, r6
    3d74:	2300      	movs	r3, #0
    3d76:	48c0      	ldr	r0, [pc, #768]	; (4078 <lv_obj_create+0x318>)
    3d78:	49c0      	ldr	r1, [pc, #768]	; (407c <lv_obj_create+0x31c>)
    3d7a:	4788      	blx	r1
    3d7c:	e7fe      	b.n	3d7c <lv_obj_create+0x1c>
        lv_disp_t * disp = lv_disp_get_default();
    3d7e:	4bc0      	ldr	r3, [pc, #768]	; (4080 <lv_obj_create+0x320>)
    3d80:	4798      	blx	r3
        if(!disp) {
    3d82:	2800      	cmp	r0, #0
    3d84:	f000 81d9 	beq.w	413a <lv_obj_create+0x3da>
        new_obj = _lv_ll_ins_head(&disp->scr_ll);
    3d88:	3030      	adds	r0, #48	; 0x30
    3d8a:	4bbe      	ldr	r3, [pc, #760]	; (4084 <lv_obj_create+0x324>)
    3d8c:	4798      	blx	r3
    3d8e:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_obj);
    3d90:	4bb8      	ldr	r3, [pc, #736]	; (4074 <lv_obj_create+0x314>)
    3d92:	4798      	blx	r3
    3d94:	b928      	cbnz	r0, 3da2 <lv_obj_create+0x42>
    3d96:	4622      	mov	r2, r4
    3d98:	2300      	movs	r3, #0
    3d9a:	48bb      	ldr	r0, [pc, #748]	; (4088 <lv_obj_create+0x328>)
    3d9c:	49b7      	ldr	r1, [pc, #732]	; (407c <lv_obj_create+0x31c>)
    3d9e:	4788      	blx	r1
    3da0:	e7fe      	b.n	3da0 <lv_obj_create+0x40>
        if(new_obj == NULL) return NULL;
    3da2:	2c00      	cmp	r4, #0
    3da4:	f000 81c7 	beq.w	4136 <lv_obj_create+0x3d6>
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
    3da8:	214c      	movs	r1, #76	; 0x4c
    3daa:	4620      	mov	r0, r4
    3dac:	4bb7      	ldr	r3, [pc, #732]	; (408c <lv_obj_create+0x32c>)
    3dae:	4798      	blx	r3
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
    3db0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    3db4:	f36f 1305 	bfc	r3, #4, #2
    3db8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->signal_cb = lv_obj_signal;
    3dbc:	4bb4      	ldr	r3, [pc, #720]	; (4090 <lv_obj_create+0x330>)
    3dbe:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
    3dc0:	4bb4      	ldr	r3, [pc, #720]	; (4094 <lv_obj_create+0x334>)
    3dc2:	6223      	str	r3, [r4, #32]
        new_obj->event_cb = NULL;
    3dc4:	2700      	movs	r7, #0
    3dc6:	61a7      	str	r7, [r4, #24]
        new_obj->coords.x1    = 0;
    3dc8:	8227      	strh	r7, [r4, #16]
        new_obj->coords.y1    = 0;
    3dca:	8267      	strh	r7, [r4, #18]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
    3dcc:	4638      	mov	r0, r7
    3dce:	4bb2      	ldr	r3, [pc, #712]	; (4098 <lv_obj_create+0x338>)
    3dd0:	4798      	blx	r3
    3dd2:	3801      	subs	r0, #1
    3dd4:	82a0      	strh	r0, [r4, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
    3dd6:	4638      	mov	r0, r7
    3dd8:	4bb0      	ldr	r3, [pc, #704]	; (409c <lv_obj_create+0x33c>)
    3dda:	4798      	blx	r3
    3ddc:	3801      	subs	r0, #1
    3dde:	82e0      	strh	r0, [r4, #22]
    _lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
    3de0:	214c      	movs	r1, #76	; 0x4c
    3de2:	1d20      	adds	r0, r4, #4
    3de4:	4bae      	ldr	r3, [pc, #696]	; (40a0 <lv_obj_create+0x340>)
    3de6:	4798      	blx	r3
    new_obj->ext_draw_pad = 0;
    3de8:	2300      	movs	r3, #0
    3dea:	8663      	strh	r3, [r4, #50]	; 0x32
    new_obj->ext_click_pad_hor = 0;
    3dec:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    new_obj->ext_click_pad_ver = 0;
    3df0:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    new_obj->realign.align        = LV_ALIGN_CENTER;
    3df4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    new_obj->realign.xofs         = 0;
    3df8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    new_obj->realign.yofs         = 0;
    3dfc:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    new_obj->realign.base         = NULL;
    3e00:	6423      	str	r3, [r4, #64]	; 0x40
    new_obj->realign.auto_realign = 0;
    3e02:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
    3e06:	f363 0200 	bfi	r2, r3, #0, #1
    3e0a:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
    new_obj->group_p = NULL;
    3e0e:	63a3      	str	r3, [r4, #56]	; 0x38
    new_obj->adv_hittest  = 0;
    3e10:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    new_obj->click        = 1;
    3e14:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    new_obj->drag         = 0;
    3e18:	f042 0201 	orr.w	r2, r2, #1
    new_obj->drag_dir     = LV_DRAG_DIR_BOTH;
    3e1c:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
    3e20:	2003      	movs	r0, #3
    3e22:	f360 0143 	bfi	r1, r0, #1, #3
    new_obj->protect      = LV_PROTECT_NONE;
    3e26:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    new_obj->parent_event = 0;
    3e2a:	f002 02c1 	and.w	r2, r2, #193	; 0xc1
    3e2e:	f363 1286 	bfi	r2, r3, #6, #1
    3e32:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    new_obj->gesture_parent = 1;
    3e36:	f041 0101 	orr.w	r1, r1, #1
    3e3a:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    new_obj->state = LV_STATE_DEFAULT;
    3e3e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    new_obj->ext_attr = NULL;
    3e42:	6263      	str	r3, [r4, #36]	; 0x24
    lv_style_list_init(&new_obj->style_list);
    3e44:	f104 0728 	add.w	r7, r4, #40	; 0x28
    3e48:	4638      	mov	r0, r7
    3e4a:	4b96      	ldr	r3, [pc, #600]	; (40a4 <lv_obj_create+0x344>)
    3e4c:	4798      	blx	r3
    if(copy == NULL) {
    3e4e:	2d00      	cmp	r5, #0
    3e50:	f000 815d 	beq.w	410e <lv_obj_create+0x3ae>
        lv_style_list_copy(&new_obj->style_list, &copy->style_list);
    3e54:	f105 0128 	add.w	r1, r5, #40	; 0x28
    3e58:	4638      	mov	r0, r7
    3e5a:	4b93      	ldr	r3, [pc, #588]	; (40a8 <lv_obj_create+0x348>)
    3e5c:	4798      	blx	r3
    3e5e:	f105 020f 	add.w	r2, r5, #15
    3e62:	f104 0118 	add.w	r1, r4, #24
    uint8_t * d8 = (uint8_t *)dst;
    3e66:	f104 0310 	add.w	r3, r4, #16
        *d8 = *s8;
    3e6a:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    3e6e:	f803 0b01 	strb.w	r0, [r3], #1
    while(len) {
    3e72:	428b      	cmp	r3, r1
    3e74:	d1f9      	bne.n	3e6a <lv_obj_create+0x10a>
        new_obj->ext_draw_pad = copy->ext_draw_pad;
    3e76:	f9b5 3032 	ldrsh.w	r3, [r5, #50]	; 0x32
    3e7a:	8663      	strh	r3, [r4, #50]	; 0x32
        new_obj->ext_click_pad_hor = copy->ext_click_pad_hor;
    3e7c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    3e80:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        new_obj->ext_click_pad_ver = copy->ext_click_pad_ver;
    3e84:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    3e88:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
        new_obj->realign.align        = copy->realign.align;
    3e8c:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
    3e90:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        new_obj->realign.xofs         = copy->realign.xofs;
    3e94:	f9b5 3044 	ldrsh.w	r3, [r5, #68]	; 0x44
    3e98:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
        new_obj->realign.yofs         = copy->realign.yofs;
    3e9c:	f9b5 3046 	ldrsh.w	r3, [r5, #70]	; 0x46
    3ea0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        new_obj->realign.base         = copy->realign.base;
    3ea4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    3ea6:	6423      	str	r3, [r4, #64]	; 0x40
        new_obj->realign.auto_realign = copy->realign.auto_realign;
    3ea8:	f895 2049 	ldrb.w	r2, [r5, #73]	; 0x49
    3eac:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
    3eb0:	f362 0300 	bfi	r3, r2, #0, #1
    3eb4:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
        new_obj->event_cb = copy->event_cb;
    3eb8:	69ab      	ldr	r3, [r5, #24]
    3eba:	61a3      	str	r3, [r4, #24]
        new_obj->adv_hittest  = copy->adv_hittest;
    3ebc:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    3ec0:	09db      	lsrs	r3, r3, #7
    3ec2:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    3ec6:	f363 12c7 	bfi	r2, r3, #7, #1
    3eca:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->click        = copy->click;
    3ece:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
    3ed2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    3ed6:	f362 0300 	bfi	r3, r2, #0, #1
    3eda:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        new_obj->drag         = copy->drag;
    3ede:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    3ee2:	f3c3 0340 	ubfx	r3, r3, #1, #1
    3ee6:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    3eea:	f363 0241 	bfi	r2, r3, #1, #1
    3eee:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->drag_dir     = copy->drag_dir;
    3ef2:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
    3ef6:	f3c3 0342 	ubfx	r3, r3, #1, #3
    3efa:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
    3efe:	f363 0243 	bfi	r2, r3, #1, #3
    3f02:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        new_obj->drag_throw   = copy->drag_throw;
    3f06:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    3f0a:	f3c3 0380 	ubfx	r3, r3, #2, #1
    3f0e:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    3f12:	f363 0282 	bfi	r2, r3, #2, #1
    3f16:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->drag_parent  = copy->drag_parent;
    3f1a:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    3f1e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    3f22:	b2d2      	uxtb	r2, r2
    3f24:	f363 02c3 	bfi	r2, r3, #3, #1
    3f28:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->hidden       = copy->hidden;
    3f2c:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    3f30:	f3c3 1300 	ubfx	r3, r3, #4, #1
    3f34:	b2d2      	uxtb	r2, r2
    3f36:	f363 1204 	bfi	r2, r3, #4, #1
    3f3a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->top          = copy->top;
    3f3e:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    3f42:	f3c3 1340 	ubfx	r3, r3, #5, #1
    3f46:	b2d2      	uxtb	r2, r2
    3f48:	f363 1245 	bfi	r2, r3, #5, #1
    3f4c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->parent_event = copy->parent_event;
    3f50:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    3f54:	f3c3 1380 	ubfx	r3, r3, #6, #1
    3f58:	b2d2      	uxtb	r2, r2
    3f5a:	f363 1286 	bfi	r2, r3, #6, #1
    3f5e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->protect      = copy->protect;
    3f62:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
    3f66:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        new_obj->gesture_parent = copy->gesture_parent;
    3f6a:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
    3f6e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    3f72:	f362 0300 	bfi	r3, r2, #0, #1
    3f76:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(copy->group_p != NULL) {
    3f7a:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    3f7c:	b110      	cbz	r0, 3f84 <lv_obj_create+0x224>
            lv_group_add_obj(copy->group_p, new_obj);
    3f7e:	4621      	mov	r1, r4
    3f80:	4b4a      	ldr	r3, [pc, #296]	; (40ac <lv_obj_create+0x34c>)
    3f82:	4798      	blx	r3
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
    3f84:	4628      	mov	r0, r5
    3f86:	4b4a      	ldr	r3, [pc, #296]	; (40b0 <lv_obj_create+0x350>)
    3f88:	4798      	blx	r3
    3f8a:	2800      	cmp	r0, #0
    3f8c:	f000 80ca 	beq.w	4124 <lv_obj_create+0x3c4>
    3f90:	2e00      	cmp	r6, #0
    3f92:	f000 80d0 	beq.w	4136 <lv_obj_create+0x3d6>
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
    3f96:	4628      	mov	r0, r5
    3f98:	4b46      	ldr	r3, [pc, #280]	; (40b4 <lv_obj_create+0x354>)
    3f9a:	4798      	blx	r3
    3f9c:	4607      	mov	r7, r0
    3f9e:	4628      	mov	r0, r5
    3fa0:	4b45      	ldr	r3, [pc, #276]	; (40b8 <lv_obj_create+0x358>)
    3fa2:	4798      	blx	r3
    3fa4:	4602      	mov	r2, r0
    3fa6:	4639      	mov	r1, r7
    3fa8:	4620      	mov	r0, r4
    3faa:	4b44      	ldr	r3, [pc, #272]	; (40bc <lv_obj_create+0x35c>)
    3fac:	4798      	blx	r3
    3fae:	e0ba      	b.n	4126 <lv_obj_create+0x3c6>
        new_obj = _lv_ll_ins_head(&parent->child_ll);
    3fb0:	1d30      	adds	r0, r6, #4
    3fb2:	4b34      	ldr	r3, [pc, #208]	; (4084 <lv_obj_create+0x324>)
    3fb4:	4798      	blx	r3
    3fb6:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_obj);
    3fb8:	4b2e      	ldr	r3, [pc, #184]	; (4074 <lv_obj_create+0x314>)
    3fba:	4798      	blx	r3
    3fbc:	2800      	cmp	r0, #0
    3fbe:	d045      	beq.n	404c <lv_obj_create+0x2ec>
        if(new_obj == NULL) return NULL;
    3fc0:	2c00      	cmp	r4, #0
    3fc2:	f000 80b8 	beq.w	4136 <lv_obj_create+0x3d6>
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
    3fc6:	214c      	movs	r1, #76	; 0x4c
    3fc8:	4620      	mov	r0, r4
    3fca:	4b30      	ldr	r3, [pc, #192]	; (408c <lv_obj_create+0x32c>)
    3fcc:	4798      	blx	r3
        new_obj->parent = parent;
    3fce:	6026      	str	r6, [r4, #0]
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
    3fd0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    3fd4:	f36f 1305 	bfc	r3, #4, #2
    3fd8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->signal_cb = lv_obj_signal;
    3fdc:	4b2c      	ldr	r3, [pc, #176]	; (4090 <lv_obj_create+0x330>)
    3fde:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
    3fe0:	4b2c      	ldr	r3, [pc, #176]	; (4094 <lv_obj_create+0x334>)
    3fe2:	6223      	str	r3, [r4, #32]
        new_obj->event_cb = NULL;
    3fe4:	2000      	movs	r0, #0
    3fe6:	61a0      	str	r0, [r4, #24]
        new_obj->coords.y1    = parent->coords.y1;
    3fe8:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
    3fec:	8263      	strh	r3, [r4, #18]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
    3fee:	8a77      	ldrh	r7, [r6, #18]
    3ff0:	4b33      	ldr	r3, [pc, #204]	; (40c0 <lv_obj_create+0x360>)
    3ff2:	4798      	blx	r3
    3ff4:	2332      	movs	r3, #50	; 0x32
    3ff6:	fb03 f300 	mul.w	r3, r3, r0
    3ffa:	3350      	adds	r3, #80	; 0x50
    3ffc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
    4000:	d22a      	bcs.n	4058 <lv_obj_create+0x2f8>
    4002:	2301      	movs	r3, #1
    4004:	443b      	add	r3, r7
    4006:	82e3      	strh	r3, [r4, #22]
        if(lv_obj_get_base_dir(new_obj) == LV_BIDI_DIR_RTL) {
    4008:	4620      	mov	r0, r4
    400a:	4b2e      	ldr	r3, [pc, #184]	; (40c4 <lv_obj_create+0x364>)
    400c:	4798      	blx	r3
    400e:	2801      	cmp	r0, #1
    4010:	d05c      	beq.n	40cc <lv_obj_create+0x36c>
            new_obj->coords.x1    = parent->coords.x1;
    4012:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
    4016:	8223      	strh	r3, [r4, #16]
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
    4018:	8a37      	ldrh	r7, [r6, #16]
    401a:	2000      	movs	r0, #0
    401c:	4b28      	ldr	r3, [pc, #160]	; (40c0 <lv_obj_create+0x360>)
    401e:	4798      	blx	r3
    4020:	2364      	movs	r3, #100	; 0x64
    4022:	fb03 f300 	mul.w	r3, r3, r0
    4026:	3350      	adds	r3, #80	; 0x50
    4028:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
    402c:	d36d      	bcc.n	410a <lv_obj_create+0x3aa>
    402e:	2000      	movs	r0, #0
    4030:	4b23      	ldr	r3, [pc, #140]	; (40c0 <lv_obj_create+0x360>)
    4032:	4798      	blx	r3
    4034:	2364      	movs	r3, #100	; 0x64
    4036:	fb03 f300 	mul.w	r3, r3, r0
    403a:	3350      	adds	r3, #80	; 0x50
    403c:	4a22      	ldr	r2, [pc, #136]	; (40c8 <lv_obj_create+0x368>)
    403e:	fba2 2303 	umull	r2, r3, r2, r3
    4042:	f3c3 13cf 	ubfx	r3, r3, #7, #16
    4046:	443b      	add	r3, r7
    4048:	82a3      	strh	r3, [r4, #20]
    404a:	e6c9      	b.n	3de0 <lv_obj_create+0x80>
        LV_ASSERT_MEM(new_obj);
    404c:	4622      	mov	r2, r4
    404e:	2300      	movs	r3, #0
    4050:	480d      	ldr	r0, [pc, #52]	; (4088 <lv_obj_create+0x328>)
    4052:	490a      	ldr	r1, [pc, #40]	; (407c <lv_obj_create+0x31c>)
    4054:	4788      	blx	r1
    4056:	e7fe      	b.n	4056 <lv_obj_create+0x2f6>
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
    4058:	2000      	movs	r0, #0
    405a:	4b19      	ldr	r3, [pc, #100]	; (40c0 <lv_obj_create+0x360>)
    405c:	4798      	blx	r3
    405e:	2332      	movs	r3, #50	; 0x32
    4060:	fb03 f300 	mul.w	r3, r3, r0
    4064:	3350      	adds	r3, #80	; 0x50
    4066:	4a18      	ldr	r2, [pc, #96]	; (40c8 <lv_obj_create+0x368>)
    4068:	fba2 2303 	umull	r2, r3, r2, r3
    406c:	f3c3 13cf 	ubfx	r3, r3, #7, #16
    4070:	e7c8      	b.n	4004 <lv_obj_create+0x2a4>
    4072:	bf00      	nop
    4074:	0000295d 	.word	0x0000295d
    4078:	00017880 	.word	0x00017880
    407c:	00002965 	.word	0x00002965
    4080:	00010161 	.word	0x00010161
    4084:	000110f1 	.word	0x000110f1
    4088:	0001786c 	.word	0x0001786c
    408c:	00011c17 	.word	0x00011c17
    4090:	00005225 	.word	0x00005225
    4094:	00004da1 	.word	0x00004da1
    4098:	0001016d 	.word	0x0001016d
    409c:	00010195 	.word	0x00010195
    40a0:	000110d9 	.word	0x000110d9
    40a4:	00005ce9 	.word	0x00005ce9
    40a8:	00006851 	.word	0x00006851
    40ac:	00002b71 	.word	0x00002b71
    40b0:	00002f3d 	.word	0x00002f3d
    40b4:	000030a5 	.word	0x000030a5
    40b8:	000030e5 	.word	0x000030e5
    40bc:	00003525 	.word	0x00003525
    40c0:	000101bd 	.word	0x000101bd
    40c4:	00003d39 	.word	0x00003d39
    40c8:	cccccccd 	.word	0xcccccccd
            new_obj->coords.x2    = parent->coords.x2;
    40cc:	f9b6 3014 	ldrsh.w	r3, [r6, #20]
    40d0:	82a3      	strh	r3, [r4, #20]
            new_obj->coords.x1    = parent->coords.x2 - LV_OBJ_DEF_WIDTH;
    40d2:	8ab7      	ldrh	r7, [r6, #20]
    40d4:	2000      	movs	r0, #0
    40d6:	4b1a      	ldr	r3, [pc, #104]	; (4140 <lv_obj_create+0x3e0>)
    40d8:	4798      	blx	r3
    40da:	2364      	movs	r3, #100	; 0x64
    40dc:	fb03 f300 	mul.w	r3, r3, r0
    40e0:	3350      	adds	r3, #80	; 0x50
    40e2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
    40e6:	d30e      	bcc.n	4106 <lv_obj_create+0x3a6>
    40e8:	2000      	movs	r0, #0
    40ea:	4b15      	ldr	r3, [pc, #84]	; (4140 <lv_obj_create+0x3e0>)
    40ec:	4798      	blx	r3
    40ee:	2364      	movs	r3, #100	; 0x64
    40f0:	fb03 f300 	mul.w	r3, r3, r0
    40f4:	3350      	adds	r3, #80	; 0x50
    40f6:	4a13      	ldr	r2, [pc, #76]	; (4144 <lv_obj_create+0x3e4>)
    40f8:	fba2 2303 	umull	r2, r3, r2, r3
    40fc:	f3c3 13cf 	ubfx	r3, r3, #7, #16
    4100:	1afb      	subs	r3, r7, r3
    4102:	8223      	strh	r3, [r4, #16]
    4104:	e66c      	b.n	3de0 <lv_obj_create+0x80>
    4106:	2301      	movs	r3, #1
    4108:	e7fa      	b.n	4100 <lv_obj_create+0x3a0>
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
    410a:	2301      	movs	r3, #1
    410c:	e79b      	b.n	4046 <lv_obj_create+0x2e6>
        if(parent != NULL) lv_theme_apply(new_obj, LV_THEME_OBJ);
    410e:	b126      	cbz	r6, 411a <lv_obj_create+0x3ba>
    4110:	2102      	movs	r1, #2
    4112:	4620      	mov	r0, r4
    4114:	4b0c      	ldr	r3, [pc, #48]	; (4148 <lv_obj_create+0x3e8>)
    4116:	4798      	blx	r3
    4118:	e005      	b.n	4126 <lv_obj_create+0x3c6>
        else  lv_theme_apply(new_obj, LV_THEME_SCR);
    411a:	2101      	movs	r1, #1
    411c:	4620      	mov	r0, r4
    411e:	4b0a      	ldr	r3, [pc, #40]	; (4148 <lv_obj_create+0x3e8>)
    4120:	4798      	blx	r3
    4122:	e008      	b.n	4136 <lv_obj_create+0x3d6>
    if(parent != NULL) {
    4124:	b13e      	cbz	r6, 4136 <lv_obj_create+0x3d6>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
    4126:	69f3      	ldr	r3, [r6, #28]
    4128:	4622      	mov	r2, r4
    412a:	2101      	movs	r1, #1
    412c:	4630      	mov	r0, r6
    412e:	4798      	blx	r3
        lv_obj_invalidate(new_obj);
    4130:	4620      	mov	r0, r4
    4132:	4b06      	ldr	r3, [pc, #24]	; (414c <lv_obj_create+0x3ec>)
    4134:	4798      	blx	r3
}
    4136:	4620      	mov	r0, r4
    4138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return NULL;
    413a:	4634      	mov	r4, r6
    413c:	e7fb      	b.n	4136 <lv_obj_create+0x3d6>
    413e:	bf00      	nop
    4140:	000101bd 	.word	0x000101bd
    4144:	cccccccd 	.word	0xcccccccd
    4148:	00012909 	.word	0x00012909
    414c:	00003445 	.word	0x00003445

00004150 <lv_obj_is_protected>:
{
    4150:	b538      	push	{r3, r4, r5, lr}
    4152:	4604      	mov	r4, r0
    4154:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    4156:	4b08      	ldr	r3, [pc, #32]	; (4178 <lv_obj_is_protected+0x28>)
    4158:	4798      	blx	r3
    415a:	b130      	cbz	r0, 416a <lv_obj_is_protected+0x1a>
    return (obj->protect & prot) == 0 ? false : true;
    415c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    4160:	421d      	tst	r5, r3
}
    4162:	bf14      	ite	ne
    4164:	2001      	movne	r0, #1
    4166:	2000      	moveq	r0, #0
    4168:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    416a:	4622      	mov	r2, r4
    416c:	2300      	movs	r3, #0
    416e:	4803      	ldr	r0, [pc, #12]	; (417c <lv_obj_is_protected+0x2c>)
    4170:	4903      	ldr	r1, [pc, #12]	; (4180 <lv_obj_is_protected+0x30>)
    4172:	4788      	blx	r1
    4174:	e7fe      	b.n	4174 <lv_obj_is_protected+0x24>
    4176:	bf00      	nop
    4178:	0000295d 	.word	0x0000295d
    417c:	00017880 	.word	0x00017880
    4180:	00002965 	.word	0x00002965

00004184 <lv_obj_get_state>:
{
    4184:	b530      	push	{r4, r5, lr}
    4186:	b083      	sub	sp, #12
    4188:	4604      	mov	r4, r0
    418a:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    418c:	4b0d      	ldr	r3, [pc, #52]	; (41c4 <lv_obj_get_state+0x40>)
    418e:	4798      	blx	r3
    4190:	b128      	cbz	r0, 419e <lv_obj_get_state+0x1a>
    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
    4192:	2d3f      	cmp	r5, #63	; 0x3f
    4194:	d809      	bhi.n	41aa <lv_obj_get_state+0x26>
    4196:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
}
    419a:	b003      	add	sp, #12
    419c:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    419e:	4622      	mov	r2, r4
    41a0:	2300      	movs	r3, #0
    41a2:	4809      	ldr	r0, [pc, #36]	; (41c8 <lv_obj_get_state+0x44>)
    41a4:	4909      	ldr	r1, [pc, #36]	; (41cc <lv_obj_get_state+0x48>)
    41a6:	4788      	blx	r1
    41a8:	e7fe      	b.n	41a8 <lv_obj_get_state+0x24>
    info.part = part;
    41aa:	f88d 5004 	strb.w	r5, [sp, #4]
    info.result = LV_STATE_DEFAULT;
    41ae:	2300      	movs	r3, #0
    41b0:	f88d 3005 	strb.w	r3, [sp, #5]
    lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STATE_DSC, &info);
    41b4:	aa01      	add	r2, sp, #4
    41b6:	2109      	movs	r1, #9
    41b8:	4620      	mov	r0, r4
    41ba:	4b05      	ldr	r3, [pc, #20]	; (41d0 <lv_obj_get_state+0x4c>)
    41bc:	4798      	blx	r3
    return info.result;
    41be:	f89d 0005 	ldrb.w	r0, [sp, #5]
    41c2:	e7ea      	b.n	419a <lv_obj_get_state+0x16>
    41c4:	0000295d 	.word	0x0000295d
    41c8:	00017880 	.word	0x00017880
    41cc:	00002965 	.word	0x00002965
    41d0:	00002ef9 	.word	0x00002ef9

000041d4 <_lv_obj_get_style_int>:
{
    41d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    41d8:	b085      	sub	sp, #20
    41da:	4617      	mov	r7, r2
    while(parent) {
    41dc:	b360      	cbz	r0, 4238 <_lv_obj_get_style_int+0x64>
    41de:	460d      	mov	r5, r1
    41e0:	ea4f 2b12 	mov.w	fp, r2, lsr #8
    41e4:	4606      	mov	r6, r0
        lv_style_list_t * dsc = lv_obj_get_style_list(parent, part);
    41e6:	f8df a08c 	ldr.w	sl, [pc, #140]	; 4274 <_lv_obj_get_style_int+0xa0>
        lv_state_t state = lv_obj_get_state(parent, part);
    41ea:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4278 <_lv_obj_get_style_int+0xa4>
        res = _lv_style_list_get_int(dsc, prop, &value_act);
    41ee:	f8df 808c 	ldr.w	r8, [pc, #140]	; 427c <_lv_obj_get_style_int+0xa8>
    41f2:	e006      	b.n	4202 <_lv_obj_get_style_int+0x2e>
        if(res == LV_RES_OK) return value_act;
    41f4:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
}
    41f8:	b005      	add	sp, #20
    41fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    41fe:	2500      	movs	r5, #0
    while(parent) {
    4200:	b1de      	cbz	r6, 423a <_lv_obj_get_style_int+0x66>
        lv_style_list_t * dsc = lv_obj_get_style_list(parent, part);
    4202:	4629      	mov	r1, r5
    4204:	4630      	mov	r0, r6
    4206:	47d0      	blx	sl
    4208:	9001      	str	r0, [sp, #4]
        lv_state_t state = lv_obj_get_state(parent, part);
    420a:	4629      	mov	r1, r5
    420c:	4630      	mov	r0, r6
    420e:	47c8      	blx	r9
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
    4210:	eb07 2000 	add.w	r0, r7, r0, lsl #8
    4214:	b284      	uxth	r4, r0
        res = _lv_style_list_get_int(dsc, prop, &value_act);
    4216:	f10d 020e 	add.w	r2, sp, #14
    421a:	4621      	mov	r1, r4
    421c:	9801      	ldr	r0, [sp, #4]
    421e:	47c0      	blx	r8
        if(res == LV_RES_OK) return value_act;
    4220:	2801      	cmp	r0, #1
    4222:	d0e7      	beq.n	41f4 <_lv_obj_get_style_int+0x20>
        if(attr.bits.inherit == 0) break;
    4224:	f01b 0f80 	tst.w	fp, #128	; 0x80
    4228:	d007      	beq.n	423a <_lv_obj_get_style_int+0x66>
        if(part != LV_OBJ_PART_MAIN) {
    422a:	2d00      	cmp	r5, #0
    422c:	d1e7      	bne.n	41fe <_lv_obj_get_style_int+0x2a>
        parent = lv_obj_get_parent(parent);
    422e:	4630      	mov	r0, r6
    4230:	4b0f      	ldr	r3, [pc, #60]	; (4270 <_lv_obj_get_style_int+0x9c>)
    4232:	4798      	blx	r3
    4234:	4606      	mov	r6, r0
    4236:	e7e2      	b.n	41fe <_lv_obj_get_style_int+0x2a>
    while(parent) {
    4238:	4614      	mov	r4, r2
    prop = prop & (~LV_STYLE_STATE_MASK);
    423a:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
    423e:	b2a4      	uxth	r4, r4
    4240:	2c22      	cmp	r4, #34	; 0x22
    4242:	d00f      	beq.n	4264 <_lv_obj_get_style_int+0x90>
    4244:	d806      	bhi.n	4254 <_lv_obj_get_style_int+0x80>
    4246:	2c03      	cmp	r4, #3
    4248:	d00a      	beq.n	4260 <_lv_obj_get_style_int+0x8c>
    424a:	2c07      	cmp	r4, #7
    424c:	d10c      	bne.n	4268 <_lv_obj_get_style_int+0x94>
            return LV_IMG_ZOOM_NONE;
    424e:	f44f 7080 	mov.w	r0, #256	; 0x100
    4252:	e7d1      	b.n	41f8 <_lv_obj_get_style_int+0x24>
    switch(prop) {
    4254:	2c31      	cmp	r4, #49	; 0x31
    4256:	d009      	beq.n	426c <_lv_obj_get_style_int+0x98>
    4258:	2cc0      	cmp	r4, #192	; 0xc0
    425a:	d105      	bne.n	4268 <_lv_obj_get_style_int+0x94>
            return LV_DPI / 8;
    425c:	2010      	movs	r0, #16
    425e:	e7cb      	b.n	41f8 <_lv_obj_get_style_int+0x24>
            return LV_DPI / 20;
    4260:	2006      	movs	r0, #6
    4262:	e7c9      	b.n	41f8 <_lv_obj_get_style_int+0x24>
            return 255;
    4264:	20ff      	movs	r0, #255	; 0xff
    4266:	e7c7      	b.n	41f8 <_lv_obj_get_style_int+0x24>
    return 0;
    4268:	2000      	movs	r0, #0
    426a:	e7c5      	b.n	41f8 <_lv_obj_get_style_int+0x24>
            return LV_BORDER_SIDE_FULL;
    426c:	200f      	movs	r0, #15
    426e:	e7c3      	b.n	41f8 <_lv_obj_get_style_int+0x24>
    4270:	00002f3d 	.word	0x00002f3d
    4274:	00003185 	.word	0x00003185
    4278:	00004185 	.word	0x00004185
    427c:	00006999 	.word	0x00006999

00004280 <_lv_obj_get_style_color>:
{
    4280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4284:	b085      	sub	sp, #20
    4286:	4617      	mov	r7, r2
    while(parent) {
    4288:	b348      	cbz	r0, 42de <_lv_obj_get_style_color+0x5e>
    428a:	460d      	mov	r5, r1
    428c:	ea4f 2b12 	mov.w	fp, r2, lsr #8
    4290:	4606      	mov	r6, r0
        lv_style_list_t * dsc = lv_obj_get_style_list(parent, part);
    4292:	f8df a06c 	ldr.w	sl, [pc, #108]	; 4300 <_lv_obj_get_style_color+0x80>
        lv_state_t state = lv_obj_get_state(parent, part);
    4296:	f8df 906c 	ldr.w	r9, [pc, #108]	; 4304 <_lv_obj_get_style_color+0x84>
        res = _lv_style_list_get_color(dsc, prop, &value_act);
    429a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 4308 <_lv_obj_get_style_color+0x88>
    429e:	e004      	b.n	42aa <_lv_obj_get_style_color+0x2a>
        if(res == LV_RES_OK) return value_act;
    42a0:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    42a4:	e024      	b.n	42f0 <_lv_obj_get_style_color+0x70>
    42a6:	2500      	movs	r5, #0
    while(parent) {
    42a8:	b1d6      	cbz	r6, 42e0 <_lv_obj_get_style_color+0x60>
        lv_style_list_t * dsc = lv_obj_get_style_list(parent, part);
    42aa:	4629      	mov	r1, r5
    42ac:	4630      	mov	r0, r6
    42ae:	47d0      	blx	sl
    42b0:	9001      	str	r0, [sp, #4]
        lv_state_t state = lv_obj_get_state(parent, part);
    42b2:	4629      	mov	r1, r5
    42b4:	4630      	mov	r0, r6
    42b6:	47c8      	blx	r9
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
    42b8:	eb07 2000 	add.w	r0, r7, r0, lsl #8
    42bc:	b284      	uxth	r4, r0
        res = _lv_style_list_get_color(dsc, prop, &value_act);
    42be:	aa03      	add	r2, sp, #12
    42c0:	4621      	mov	r1, r4
    42c2:	9801      	ldr	r0, [sp, #4]
    42c4:	47c0      	blx	r8
        if(res == LV_RES_OK) return value_act;
    42c6:	2801      	cmp	r0, #1
    42c8:	d0ea      	beq.n	42a0 <_lv_obj_get_style_color+0x20>
        if(attr.bits.inherit == 0) break;
    42ca:	f01b 0f80 	tst.w	fp, #128	; 0x80
    42ce:	d007      	beq.n	42e0 <_lv_obj_get_style_color+0x60>
        if(part != LV_OBJ_PART_MAIN) {
    42d0:	2d00      	cmp	r5, #0
    42d2:	d1e8      	bne.n	42a6 <_lv_obj_get_style_color+0x26>
        parent = lv_obj_get_parent(parent);
    42d4:	4630      	mov	r0, r6
    42d6:	4b08      	ldr	r3, [pc, #32]	; (42f8 <_lv_obj_get_style_color+0x78>)
    42d8:	4798      	blx	r3
    42da:	4606      	mov	r6, r0
    42dc:	e7e3      	b.n	42a6 <_lv_obj_get_style_color+0x26>
    while(parent) {
    42de:	4614      	mov	r4, r2
    prop = prop & (~LV_STYLE_STATE_MASK);
    42e0:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
    42e4:	3c29      	subs	r4, #41	; 0x29
    42e6:	2c01      	cmp	r4, #1
            return LV_COLOR_WHITE;
    42e8:	bf9a      	itte	ls
    42ea:	4b04      	ldrls	r3, [pc, #16]	; (42fc <_lv_obj_get_style_color+0x7c>)
    42ec:	8818      	ldrhls	r0, [r3, #0]
    return LV_COLOR_BLACK;
    42ee:	2000      	movhi	r0, #0
}
    42f0:	b005      	add	sp, #20
    42f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    42f6:	bf00      	nop
    42f8:	00002f3d 	.word	0x00002f3d
    42fc:	0001787c 	.word	0x0001787c
    4300:	00003185 	.word	0x00003185
    4304:	00004185 	.word	0x00004185
    4308:	00006a5d 	.word	0x00006a5d

0000430c <_lv_obj_get_style_opa>:
{
    430c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4310:	b085      	sub	sp, #20
    4312:	4617      	mov	r7, r2
    while(parent) {
    4314:	b350      	cbz	r0, 436c <_lv_obj_get_style_opa+0x60>
    4316:	460d      	mov	r5, r1
    4318:	ea4f 2b12 	mov.w	fp, r2, lsr #8
    431c:	4606      	mov	r6, r0
        lv_style_list_t * dsc = lv_obj_get_style_list(parent, part);
    431e:	f8df a074 	ldr.w	sl, [pc, #116]	; 4394 <_lv_obj_get_style_opa+0x88>
        lv_state_t state = lv_obj_get_state(parent, part);
    4322:	f8df 9074 	ldr.w	r9, [pc, #116]	; 4398 <_lv_obj_get_style_opa+0x8c>
        res = _lv_style_list_get_opa(dsc, prop, &value_act);
    4326:	f8df 8074 	ldr.w	r8, [pc, #116]	; 439c <_lv_obj_get_style_opa+0x90>
    432a:	e004      	b.n	4336 <_lv_obj_get_style_opa+0x2a>
        if(res == LV_RES_OK) return value_act;
    432c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    4330:	e029      	b.n	4386 <_lv_obj_get_style_opa+0x7a>
    4332:	2500      	movs	r5, #0
    while(parent) {
    4334:	b1de      	cbz	r6, 436e <_lv_obj_get_style_opa+0x62>
        lv_style_list_t * dsc = lv_obj_get_style_list(parent, part);
    4336:	4629      	mov	r1, r5
    4338:	4630      	mov	r0, r6
    433a:	47d0      	blx	sl
    433c:	9001      	str	r0, [sp, #4]
        lv_state_t state = lv_obj_get_state(parent, part);
    433e:	4629      	mov	r1, r5
    4340:	4630      	mov	r0, r6
    4342:	47c8      	blx	r9
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
    4344:	eb07 2000 	add.w	r0, r7, r0, lsl #8
    4348:	b284      	uxth	r4, r0
        res = _lv_style_list_get_opa(dsc, prop, &value_act);
    434a:	f10d 020f 	add.w	r2, sp, #15
    434e:	4621      	mov	r1, r4
    4350:	9801      	ldr	r0, [sp, #4]
    4352:	47c0      	blx	r8
        if(res == LV_RES_OK) return value_act;
    4354:	2801      	cmp	r0, #1
    4356:	d0e9      	beq.n	432c <_lv_obj_get_style_opa+0x20>
        if(attr.bits.inherit == 0) break;
    4358:	f01b 0f80 	tst.w	fp, #128	; 0x80
    435c:	d007      	beq.n	436e <_lv_obj_get_style_opa+0x62>
        if(part != LV_OBJ_PART_MAIN) {
    435e:	2d00      	cmp	r5, #0
    4360:	d1e7      	bne.n	4332 <_lv_obj_get_style_opa+0x26>
        parent = lv_obj_get_parent(parent);
    4362:	4630      	mov	r0, r6
    4364:	4b0a      	ldr	r3, [pc, #40]	; (4390 <_lv_obj_get_style_opa+0x84>)
    4366:	4798      	blx	r3
    4368:	4606      	mov	r6, r0
    436a:	e7e2      	b.n	4332 <_lv_obj_get_style_opa+0x26>
    while(parent) {
    436c:	4614      	mov	r4, r2
    prop = prop & (~LV_STYLE_STATE_MASK);
    436e:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
    4372:	b2a4      	uxth	r4, r4
    4374:	2c6d      	cmp	r4, #109	; 0x6d
    4376:	d009      	beq.n	438c <_lv_obj_get_style_opa+0x80>
    4378:	f248 03ad 	movw	r3, #32941	; 0x80ad
    437c:	429c      	cmp	r4, r3
    437e:	d005      	beq.n	438c <_lv_obj_get_style_opa+0x80>
    4380:	2c2c      	cmp	r4, #44	; 0x2c
    4382:	d003      	beq.n	438c <_lv_obj_get_style_opa+0x80>
    return LV_OPA_COVER;
    4384:	20ff      	movs	r0, #255	; 0xff
}
    4386:	b005      	add	sp, #20
    4388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LV_OPA_TRANSP;
    438c:	2000      	movs	r0, #0
    438e:	e7fa      	b.n	4386 <_lv_obj_get_style_opa+0x7a>
    4390:	00002f3d 	.word	0x00002f3d
    4394:	00003185 	.word	0x00003185
    4398:	00004185 	.word	0x00004185
    439c:	00006b21 	.word	0x00006b21

000043a0 <_lv_obj_get_style_ptr>:
{
    43a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    43a4:	b085      	sub	sp, #20
    43a6:	4617      	mov	r7, r2
    while(parent) {
    43a8:	b350      	cbz	r0, 4400 <_lv_obj_get_style_ptr+0x60>
    43aa:	460d      	mov	r5, r1
    43ac:	ea4f 2b12 	mov.w	fp, r2, lsr #8
    43b0:	4606      	mov	r6, r0
        lv_style_list_t * dsc = lv_obj_get_style_list(parent, part);
    43b2:	f8df a080 	ldr.w	sl, [pc, #128]	; 4434 <_lv_obj_get_style_ptr+0x94>
        lv_state_t state = lv_obj_get_state(parent, part);
    43b6:	f8df 9080 	ldr.w	r9, [pc, #128]	; 4438 <_lv_obj_get_style_ptr+0x98>
        res = _lv_style_list_get_ptr(dsc, prop, &value_act);
    43ba:	f8df 8080 	ldr.w	r8, [pc, #128]	; 443c <_lv_obj_get_style_ptr+0x9c>
    43be:	e005      	b.n	43cc <_lv_obj_get_style_ptr+0x2c>
        if(res == LV_RES_OK)  return value_act;
    43c0:	9803      	ldr	r0, [sp, #12]
}
    43c2:	b005      	add	sp, #20
    43c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    43c8:	2500      	movs	r5, #0
    while(parent) {
    43ca:	b1d6      	cbz	r6, 4402 <_lv_obj_get_style_ptr+0x62>
        lv_style_list_t * dsc = lv_obj_get_style_list(parent, part);
    43cc:	4629      	mov	r1, r5
    43ce:	4630      	mov	r0, r6
    43d0:	47d0      	blx	sl
    43d2:	9001      	str	r0, [sp, #4]
        lv_state_t state = lv_obj_get_state(parent, part);
    43d4:	4629      	mov	r1, r5
    43d6:	4630      	mov	r0, r6
    43d8:	47c8      	blx	r9
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
    43da:	eb07 2000 	add.w	r0, r7, r0, lsl #8
    43de:	b284      	uxth	r4, r0
        res = _lv_style_list_get_ptr(dsc, prop, &value_act);
    43e0:	aa03      	add	r2, sp, #12
    43e2:	4621      	mov	r1, r4
    43e4:	9801      	ldr	r0, [sp, #4]
    43e6:	47c0      	blx	r8
        if(res == LV_RES_OK)  return value_act;
    43e8:	2801      	cmp	r0, #1
    43ea:	d0e9      	beq.n	43c0 <_lv_obj_get_style_ptr+0x20>
        if(attr.bits.inherit == 0) break;
    43ec:	f01b 0f80 	tst.w	fp, #128	; 0x80
    43f0:	d007      	beq.n	4402 <_lv_obj_get_style_ptr+0x62>
        if(part != LV_OBJ_PART_MAIN) {
    43f2:	2d00      	cmp	r5, #0
    43f4:	d1e8      	bne.n	43c8 <_lv_obj_get_style_ptr+0x28>
        parent = lv_obj_get_parent(parent);
    43f6:	4630      	mov	r0, r6
    43f8:	4b0b      	ldr	r3, [pc, #44]	; (4428 <_lv_obj_get_style_ptr+0x88>)
    43fa:	4798      	blx	r3
    43fc:	4606      	mov	r6, r0
    43fe:	e7e3      	b.n	43c8 <_lv_obj_get_style_ptr+0x28>
    while(parent) {
    4400:	4614      	mov	r4, r2
    prop = prop & (~LV_STYLE_STATE_MASK);
    4402:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
    4406:	b2a4      	uxth	r4, r4
    4408:	2cbe      	cmp	r4, #190	; 0xbe
    440a:	d00a      	beq.n	4422 <_lv_obj_get_style_ptr+0x82>
    440c:	f248 038e 	movw	r3, #32910	; 0x808e
    4410:	429c      	cmp	r4, r3
    4412:	d003      	beq.n	441c <_lv_obj_get_style_ptr+0x7c>
    4414:	2c7e      	cmp	r4, #126	; 0x7e
    4416:	d001      	beq.n	441c <_lv_obj_get_style_ptr+0x7c>
    return NULL;
    4418:	2000      	movs	r0, #0
    441a:	e7d2      	b.n	43c2 <_lv_obj_get_style_ptr+0x22>
            return lv_theme_get_font_normal();
    441c:	4b03      	ldr	r3, [pc, #12]	; (442c <_lv_obj_get_style_ptr+0x8c>)
    441e:	4798      	blx	r3
    4420:	e7cf      	b.n	43c2 <_lv_obj_get_style_ptr+0x22>
            return &lv_anim_path_def;
    4422:	4803      	ldr	r0, [pc, #12]	; (4430 <_lv_obj_get_style_ptr+0x90>)
    4424:	e7cd      	b.n	43c2 <_lv_obj_get_style_ptr+0x22>
    4426:	bf00      	nop
    4428:	00002f3d 	.word	0x00002f3d
    442c:	000128fd 	.word	0x000128fd
    4430:	0001b6b8 	.word	0x0001b6b8
    4434:	00003185 	.word	0x00003185
    4438:	00004185 	.word	0x00004185
    443c:	00006be5 	.word	0x00006be5

00004440 <trans_anim_start_cb>:
{
    4440:	b570      	push	{r4, r5, r6, lr}
    lv_style_trans_t * tr = a->var;
    4442:	6804      	ldr	r4, [r0, #0]
    lv_style_property_t prop_tmp = tr->prop;
    4444:	88a5      	ldrh	r5, [r4, #4]
    if((prop_tmp & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
    4446:	f005 030f 	and.w	r3, r5, #15
    444a:	2b08      	cmp	r3, #8
    444c:	dd13      	ble.n	4476 <trans_anim_start_cb+0x36>
    else if((prop_tmp & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
    444e:	2b0b      	cmp	r3, #11
    4450:	dd18      	ble.n	4484 <trans_anim_start_cb+0x44>
    else if((prop_tmp & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
    4452:	2b0d      	cmp	r3, #13
    4454:	dd1d      	ble.n	4492 <trans_anim_start_cb+0x52>
        tr->start_value._ptr = _lv_obj_get_style_ptr(tr->obj, tr->part, prop_tmp);
    4456:	462a      	mov	r2, r5
    4458:	79a1      	ldrb	r1, [r4, #6]
    445a:	6820      	ldr	r0, [r4, #0]
    445c:	4b10      	ldr	r3, [pc, #64]	; (44a0 <trans_anim_start_cb+0x60>)
    445e:	4798      	blx	r3
    4460:	60a0      	str	r0, [r4, #8]
    tr->prop = 0;
    4462:	2300      	movs	r3, #0
    4464:	80a3      	strh	r3, [r4, #4]
    trans_del(tr->obj, tr->part, prop_tmp, tr);
    4466:	4623      	mov	r3, r4
    4468:	462a      	mov	r2, r5
    446a:	79a1      	ldrb	r1, [r4, #6]
    446c:	6820      	ldr	r0, [r4, #0]
    446e:	4e0d      	ldr	r6, [pc, #52]	; (44a4 <trans_anim_start_cb+0x64>)
    4470:	47b0      	blx	r6
    tr->prop = prop_tmp;
    4472:	80a5      	strh	r5, [r4, #4]
    4474:	bd70      	pop	{r4, r5, r6, pc}
        tr->start_value._int = _lv_obj_get_style_int(tr->obj, tr->part, prop_tmp);
    4476:	462a      	mov	r2, r5
    4478:	79a1      	ldrb	r1, [r4, #6]
    447a:	6820      	ldr	r0, [r4, #0]
    447c:	4b0a      	ldr	r3, [pc, #40]	; (44a8 <trans_anim_start_cb+0x68>)
    447e:	4798      	blx	r3
    4480:	8120      	strh	r0, [r4, #8]
    4482:	e7ee      	b.n	4462 <trans_anim_start_cb+0x22>
        tr->start_value._color = _lv_obj_get_style_color(tr->obj, tr->part, prop_tmp);
    4484:	462a      	mov	r2, r5
    4486:	79a1      	ldrb	r1, [r4, #6]
    4488:	6820      	ldr	r0, [r4, #0]
    448a:	4b08      	ldr	r3, [pc, #32]	; (44ac <trans_anim_start_cb+0x6c>)
    448c:	4798      	blx	r3
    448e:	8120      	strh	r0, [r4, #8]
    4490:	e7e7      	b.n	4462 <trans_anim_start_cb+0x22>
        tr->start_value._opa = _lv_obj_get_style_opa(tr->obj, tr->part, prop_tmp);
    4492:	462a      	mov	r2, r5
    4494:	79a1      	ldrb	r1, [r4, #6]
    4496:	6820      	ldr	r0, [r4, #0]
    4498:	4b05      	ldr	r3, [pc, #20]	; (44b0 <trans_anim_start_cb+0x70>)
    449a:	4798      	blx	r3
    449c:	7220      	strb	r0, [r4, #8]
    449e:	e7e0      	b.n	4462 <trans_anim_start_cb+0x22>
    44a0:	000043a1 	.word	0x000043a1
    44a4:	000031b1 	.word	0x000031b1
    44a8:	000041d5 	.word	0x000041d5
    44ac:	00004281 	.word	0x00004281
    44b0:	0000430d 	.word	0x0000430d

000044b4 <lv_obj_set_state>:
    if(obj->state == new_state) return;
    44b4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    44b8:	428b      	cmp	r3, r1
    44ba:	f000 8222 	beq.w	4902 <lv_obj_set_state+0x44e>
{
    44be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    44c2:	b09f      	sub	sp, #124	; 0x7c
    44c4:	4689      	mov	r9, r1
    44c6:	4682      	mov	sl, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    44c8:	4b9b      	ldr	r3, [pc, #620]	; (4738 <lv_obj_set_state+0x284>)
    44ca:	4798      	blx	r3
    44cc:	b140      	cbz	r0, 44e0 <lv_obj_set_state+0x2c>
    lv_state_t prev_state = obj->state;
    44ce:	f89a b03d 	ldrb.w	fp, [sl, #61]	; 0x3d
    obj->state = new_state;
    44d2:	f88a 903d 	strb.w	r9, [sl, #61]	; 0x3d
    44d6:	2300      	movs	r3, #0
    44d8:	9304      	str	r3, [sp, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
    44da:	4d98      	ldr	r5, [pc, #608]	; (473c <lv_obj_set_state+0x288>)
    lv_style_t * style_trans = _lv_style_list_get_transition_style(style_list);
    44dc:	46d8      	mov	r8, fp
    44de:	e1a2      	b.n	4826 <lv_obj_set_state+0x372>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    44e0:	4652      	mov	r2, sl
    44e2:	2300      	movs	r3, #0
    44e4:	4896      	ldr	r0, [pc, #600]	; (4740 <lv_obj_set_state+0x28c>)
    44e6:	4997      	ldr	r1, [pc, #604]	; (4744 <lv_obj_set_state+0x290>)
    44e8:	4788      	blx	r1
    44ea:	e7fe      	b.n	44ea <lv_obj_set_state+0x36>
        style_list->skip_trans = 1;
    44ec:	7973      	ldrb	r3, [r6, #5]
    44ee:	f043 0304 	orr.w	r3, r3, #4
    44f2:	7173      	strb	r3, [r6, #5]
        obj->state = prev_state;
    44f4:	f88a 803d 	strb.w	r8, [sl, #61]	; 0x3d
        lv_style_int_t int1 = _lv_obj_get_style_int(obj, part, prop);
    44f8:	4622      	mov	r2, r4
    44fa:	f8dd b004 	ldr.w	fp, [sp, #4]
    44fe:	4659      	mov	r1, fp
    4500:	4650      	mov	r0, sl
    4502:	47a8      	blx	r5
    4504:	4607      	mov	r7, r0
        obj->state = new_state;
    4506:	f88a 903d 	strb.w	r9, [sl, #61]	; 0x3d
        lv_style_int_t int2 =  _lv_obj_get_style_int(obj, part, prop);
    450a:	4622      	mov	r2, r4
    450c:	f8cd b004 	str.w	fp, [sp, #4]
    4510:	4659      	mov	r1, fp
    4512:	4650      	mov	r0, sl
    4514:	47a8      	blx	r5
    4516:	4683      	mov	fp, r0
        style_list->skip_trans = 0;
    4518:	7973      	ldrb	r3, [r6, #5]
    451a:	f36f 0382 	bfc	r3, #2, #1
    451e:	7173      	strb	r3, [r6, #5]
        if(int1 == int2)  return NULL;
    4520:	4287      	cmp	r7, r0
    4522:	d04a      	beq.n	45ba <lv_obj_set_state+0x106>
        obj->state = prev_state;
    4524:	f88a 803d 	strb.w	r8, [sl, #61]	; 0x3d
        int1 = _lv_obj_get_style_int(obj, part, prop);
    4528:	4622      	mov	r2, r4
    452a:	9901      	ldr	r1, [sp, #4]
    452c:	4650      	mov	r0, sl
    452e:	47a8      	blx	r5
    4530:	4606      	mov	r6, r0
        obj->state = new_state;
    4532:	f88a 903d 	strb.w	r9, [sl, #61]	; 0x3d
        _lv_style_set_int(style_trans, prop, int1);   /*Be sure `trans_style` has a valid value */
    4536:	4602      	mov	r2, r0
    4538:	4621      	mov	r1, r4
    453a:	9802      	ldr	r0, [sp, #8]
    453c:	4b82      	ldr	r3, [pc, #520]	; (4748 <lv_obj_set_state+0x294>)
    453e:	4798      	blx	r3
        if(prop == LV_STYLE_RADIUS) {
    4540:	2c01      	cmp	r4, #1
    4542:	f000 8094 	beq.w	466e <lv_obj_set_state+0x1ba>
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
    4546:	4881      	ldr	r0, [pc, #516]	; (474c <lv_obj_set_state+0x298>)
    4548:	4b81      	ldr	r3, [pc, #516]	; (4750 <lv_obj_set_state+0x29c>)
    454a:	4798      	blx	r3
    454c:	4607      	mov	r7, r0
        LV_ASSERT_MEM(tr);
    454e:	4b7a      	ldr	r3, [pc, #488]	; (4738 <lv_obj_set_state+0x284>)
    4550:	4798      	blx	r3
    4552:	2800      	cmp	r0, #0
    4554:	f000 80a2 	beq.w	469c <lv_obj_set_state+0x1e8>
        if(tr == NULL) return NULL;
    4558:	2f00      	cmp	r7, #0
    455a:	d02e      	beq.n	45ba <lv_obj_set_state+0x106>
        tr->start_value._int = int1;
    455c:	813e      	strh	r6, [r7, #8]
        tr->end_value._int = int2;
    455e:	f8a7 b00c 	strh.w	fp, [r7, #12]
                    tr->obj = obj;
    4562:	f8c7 a000 	str.w	sl, [r7]
                    tr->prop = props[i];
    4566:	80bc      	strh	r4, [r7, #4]
                    tr->part = part;
    4568:	f89d 3004 	ldrb.w	r3, [sp, #4]
    456c:	71bb      	strb	r3, [r7, #6]
                    lv_anim_init(&a);
    456e:	a80e      	add	r0, sp, #56	; 0x38
    4570:	4b78      	ldr	r3, [pc, #480]	; (4754 <lv_obj_set_state+0x2a0>)
    4572:	4798      	blx	r3
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param var pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
    a->var     = var;
    4574:	970e      	str	r7, [sp, #56]	; 0x38
 *                LittelvGL's built-in functions can be used.
 *                E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
    a->exec_cb = exec_cb;
    4576:	4b78      	ldr	r3, [pc, #480]	; (4758 <lv_obj_set_state+0x2a4>)
    4578:	930f      	str	r3, [sp, #60]	; 0x3c
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param start_cb a function call when the animation starts
 */
static inline void lv_anim_set_start_cb(lv_anim_t * a, lv_anim_ready_cb_t start_cb)
{
    a->start_cb = start_cb;
    457a:	4b78      	ldr	r3, [pc, #480]	; (475c <lv_obj_set_state+0x2a8>)
    457c:	9310      	str	r3, [sp, #64]	; 0x40
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param ready_cb a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
    457e:	4b78      	ldr	r3, [pc, #480]	; (4760 <lv_obj_set_state+0x2ac>)
    4580:	9311      	str	r3, [sp, #68]	; 0x44
    a->start = start;
    4582:	2300      	movs	r3, #0
    4584:	9314      	str	r3, [sp, #80]	; 0x50
    a->end   = end;
    4586:	23ff      	movs	r3, #255	; 0xff
    4588:	9315      	str	r3, [sp, #84]	; 0x54
                    lv_anim_set_time(&a, time);
    458a:	9b08      	ldr	r3, [sp, #32]
    458c:	9316      	str	r3, [sp, #88]	; 0x58
    a->act_time = (int32_t)(-delay);
    458e:	9b07      	ldr	r3, [sp, #28]
    4590:	425b      	negs	r3, r3
    4592:	9317      	str	r3, [sp, #92]	; 0x5c
    4594:	9a06      	ldr	r2, [sp, #24]
    4596:	1e53      	subs	r3, r2, #1
    4598:	1dd0      	adds	r0, r2, #7
    uint8_t * d8 = (uint8_t *)dst;
    459a:	aa12      	add	r2, sp, #72	; 0x48
        *d8 = *s8;
    459c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    45a0:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    45a4:	4283      	cmp	r3, r0
    45a6:	d1f9      	bne.n	459c <lv_obj_set_state+0xe8>
                    a.early_apply = 0;
    45a8:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
    45ac:	f36f 0300 	bfc	r3, #0, #1
    45b0:	f88d 306e 	strb.w	r3, [sp, #110]	; 0x6e
                    lv_anim_start(&a);
    45b4:	a80e      	add	r0, sp, #56	; 0x38
    45b6:	4b6b      	ldr	r3, [pc, #428]	; (4764 <lv_obj_set_state+0x2b0>)
    45b8:	4798      	blx	r3
        for(i = 0; i < LV_STYLE_TRANS_NUM_MAX; i++) {
    45ba:	9b03      	ldr	r3, [sp, #12]
    45bc:	aa0e      	add	r2, sp, #56	; 0x38
    45be:	4293      	cmp	r3, r2
    45c0:	f000 812c 	beq.w	481c <lv_obj_set_state+0x368>
            if(props[i] != 0) {
    45c4:	9b03      	ldr	r3, [sp, #12]
    45c6:	f833 4b02 	ldrh.w	r4, [r3], #2
    45ca:	9303      	str	r3, [sp, #12]
    45cc:	2c00      	cmp	r4, #0
    45ce:	d0f4      	beq.n	45ba <lv_obj_set_state+0x106>
                _lv_style_list_add_trans_style(style_list);
    45d0:	9805      	ldr	r0, [sp, #20]
    45d2:	4b65      	ldr	r3, [pc, #404]	; (4768 <lv_obj_set_state+0x2b4>)
    45d4:	4798      	blx	r3
    lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
    45d6:	9901      	ldr	r1, [sp, #4]
    45d8:	4650      	mov	r0, sl
    45da:	4b64      	ldr	r3, [pc, #400]	; (476c <lv_obj_set_state+0x2b8>)
    45dc:	4798      	blx	r3
    45de:	4606      	mov	r6, r0
    lv_style_t * style_trans = _lv_style_list_get_transition_style(style_list);
    45e0:	4b63      	ldr	r3, [pc, #396]	; (4770 <lv_obj_set_state+0x2bc>)
    45e2:	4798      	blx	r3
    45e4:	9002      	str	r0, [sp, #8]
    if((prop & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
    45e6:	f004 030f 	and.w	r3, r4, #15
    45ea:	2b08      	cmp	r3, #8
    45ec:	f77f af7e 	ble.w	44ec <lv_obj_set_state+0x38>
    else if((prop & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
    45f0:	2b0b      	cmp	r3, #11
    45f2:	dd59      	ble.n	46a8 <lv_obj_set_state+0x1f4>
    else if((prop & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
    45f4:	2b0d      	cmp	r3, #13
    45f6:	f300 80c9 	bgt.w	478c <lv_obj_set_state+0x2d8>
        style_list->skip_trans = 1;
    45fa:	7973      	ldrb	r3, [r6, #5]
    45fc:	f043 0304 	orr.w	r3, r3, #4
    4600:	7173      	strb	r3, [r6, #5]
        obj->state = prev_state;
    4602:	f88a 803d 	strb.w	r8, [sl, #61]	; 0x3d
        lv_opa_t o1 = _lv_obj_get_style_opa(obj, part, prop);
    4606:	4622      	mov	r2, r4
    4608:	f8dd b004 	ldr.w	fp, [sp, #4]
    460c:	4659      	mov	r1, fp
    460e:	4650      	mov	r0, sl
    4610:	4f58      	ldr	r7, [pc, #352]	; (4774 <lv_obj_set_state+0x2c0>)
    4612:	47b8      	blx	r7
    4614:	9009      	str	r0, [sp, #36]	; 0x24
        obj->state = new_state;
    4616:	f88a 903d 	strb.w	r9, [sl, #61]	; 0x3d
        lv_opa_t o2 =  _lv_obj_get_style_opa(obj, part, prop);
    461a:	4622      	mov	r2, r4
    461c:	f8cd b004 	str.w	fp, [sp, #4]
    4620:	4659      	mov	r1, fp
    4622:	4650      	mov	r0, sl
    4624:	47b8      	blx	r7
    4626:	4683      	mov	fp, r0
        style_list->skip_trans = 0;
    4628:	7973      	ldrb	r3, [r6, #5]
    462a:	f36f 0382 	bfc	r3, #2, #1
    462e:	7173      	strb	r3, [r6, #5]
        if(o1 == o2) return NULL;
    4630:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4632:	4283      	cmp	r3, r0
    4634:	d0c1      	beq.n	45ba <lv_obj_set_state+0x106>
        obj->state = prev_state;
    4636:	f88a 803d 	strb.w	r8, [sl, #61]	; 0x3d
        o1 = _lv_obj_get_style_opa(obj, part, prop);
    463a:	4622      	mov	r2, r4
    463c:	9901      	ldr	r1, [sp, #4]
    463e:	4650      	mov	r0, sl
    4640:	47b8      	blx	r7
    4642:	4606      	mov	r6, r0
        obj->state = new_state;
    4644:	f88a 903d 	strb.w	r9, [sl, #61]	; 0x3d
        _lv_style_set_opa(style_trans, prop, o1);   /*Be sure `trans_style` has a valid value */
    4648:	4602      	mov	r2, r0
    464a:	4621      	mov	r1, r4
    464c:	9802      	ldr	r0, [sp, #8]
    464e:	4b4a      	ldr	r3, [pc, #296]	; (4778 <lv_obj_set_state+0x2c4>)
    4650:	4798      	blx	r3
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
    4652:	483e      	ldr	r0, [pc, #248]	; (474c <lv_obj_set_state+0x298>)
    4654:	4b3e      	ldr	r3, [pc, #248]	; (4750 <lv_obj_set_state+0x29c>)
    4656:	4798      	blx	r3
    4658:	4607      	mov	r7, r0
        LV_ASSERT_MEM(tr);
    465a:	4b37      	ldr	r3, [pc, #220]	; (4738 <lv_obj_set_state+0x284>)
    465c:	4798      	blx	r3
    465e:	2800      	cmp	r0, #0
    4660:	d064      	beq.n	472c <lv_obj_set_state+0x278>
        if(tr == NULL) return NULL;
    4662:	2f00      	cmp	r7, #0
    4664:	d0a9      	beq.n	45ba <lv_obj_set_state+0x106>
        tr->start_value._opa = o1;
    4666:	723e      	strb	r6, [r7, #8]
        tr->end_value._opa = o2;
    4668:	f887 b00c 	strb.w	fp, [r7, #12]
    466c:	e779      	b.n	4562 <lv_obj_set_state+0xae>
            if(int1 == LV_RADIUS_CIRCLE || int2 == LV_RADIUS_CIRCLE) {
    466e:	f647 73ff 	movw	r3, #32767	; 0x7fff
    4672:	429e      	cmp	r6, r3
    4674:	f000 8124 	beq.w	48c0 <lv_obj_set_state+0x40c>
    4678:	459b      	cmp	fp, r3
    467a:	f47f af64 	bne.w	4546 <lv_obj_set_state+0x92>
                lv_coord_t whalf = lv_obj_get_width(obj) / 2;
    467e:	4650      	mov	r0, sl
    4680:	f8df b104 	ldr.w	fp, [pc, #260]	; 4788 <lv_obj_set_state+0x2d4>
    4684:	47d8      	blx	fp
    4686:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    468a:	f340 074f 	sbfx	r7, r0, #1, #16
                lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
    468e:	4650      	mov	r0, sl
    4690:	47d8      	blx	fp
    4692:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    4696:	f340 034f 	sbfx	r3, r0, #1, #16
    469a:	e129      	b.n	48f0 <lv_obj_set_state+0x43c>
        LV_ASSERT_MEM(tr);
    469c:	463a      	mov	r2, r7
    469e:	2300      	movs	r3, #0
    46a0:	4836      	ldr	r0, [pc, #216]	; (477c <lv_obj_set_state+0x2c8>)
    46a2:	4928      	ldr	r1, [pc, #160]	; (4744 <lv_obj_set_state+0x290>)
    46a4:	4788      	blx	r1
    46a6:	e7fe      	b.n	46a6 <lv_obj_set_state+0x1f2>
        style_list->skip_trans = 1;
    46a8:	7973      	ldrb	r3, [r6, #5]
    46aa:	f043 0304 	orr.w	r3, r3, #4
    46ae:	7173      	strb	r3, [r6, #5]
        obj->state = prev_state;
    46b0:	f88a 803d 	strb.w	r8, [sl, #61]	; 0x3d
        lv_color_t c1 = _lv_obj_get_style_color(obj, part, prop);
    46b4:	4622      	mov	r2, r4
    46b6:	9901      	ldr	r1, [sp, #4]
    46b8:	4650      	mov	r0, sl
    46ba:	4f31      	ldr	r7, [pc, #196]	; (4780 <lv_obj_set_state+0x2cc>)
    46bc:	47b8      	blx	r7
    46be:	4683      	mov	fp, r0
        obj->state = new_state;
    46c0:	f88a 903d 	strb.w	r9, [sl, #61]	; 0x3d
        lv_color_t c2 =  _lv_obj_get_style_color(obj, part, prop);
    46c4:	4622      	mov	r2, r4
    46c6:	9901      	ldr	r1, [sp, #4]
    46c8:	4650      	mov	r0, sl
    46ca:	47b8      	blx	r7
    46cc:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
        style_list->skip_trans = 0;
    46d0:	7973      	ldrb	r3, [r6, #5]
    46d2:	f36f 0382 	bfc	r3, #2, #1
    46d6:	7173      	strb	r3, [r6, #5]
        if(c1.full == c2.full) return NULL;
    46d8:	fa1f fb8b 	uxth.w	fp, fp
    46dc:	b283      	uxth	r3, r0
    46de:	459b      	cmp	fp, r3
    46e0:	f43f af6b 	beq.w	45ba <lv_obj_set_state+0x106>
        obj->state = prev_state;
    46e4:	f88a 803d 	strb.w	r8, [sl, #61]	; 0x3d
        c1 = _lv_obj_get_style_color(obj, part, prop);
    46e8:	4622      	mov	r2, r4
    46ea:	9901      	ldr	r1, [sp, #4]
    46ec:	4650      	mov	r0, sl
    46ee:	47b8      	blx	r7
    46f0:	4683      	mov	fp, r0
        obj->state = new_state;
    46f2:	f88a 903d 	strb.w	r9, [sl, #61]	; 0x3d
        _lv_style_set_color(style_trans, prop, c1);    /*Be sure `trans_style` has a valid value */
    46f6:	4602      	mov	r2, r0
    46f8:	4621      	mov	r1, r4
    46fa:	9802      	ldr	r0, [sp, #8]
    46fc:	4b21      	ldr	r3, [pc, #132]	; (4784 <lv_obj_set_state+0x2d0>)
    46fe:	4798      	blx	r3
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
    4700:	4812      	ldr	r0, [pc, #72]	; (474c <lv_obj_set_state+0x298>)
    4702:	4b13      	ldr	r3, [pc, #76]	; (4750 <lv_obj_set_state+0x29c>)
    4704:	4798      	blx	r3
    4706:	4607      	mov	r7, r0
        LV_ASSERT_MEM(tr);
    4708:	4b0b      	ldr	r3, [pc, #44]	; (4738 <lv_obj_set_state+0x284>)
    470a:	4798      	blx	r3
    470c:	b140      	cbz	r0, 4720 <lv_obj_set_state+0x26c>
        if(tr == NULL) return NULL;
    470e:	2f00      	cmp	r7, #0
    4710:	f43f af53 	beq.w	45ba <lv_obj_set_state+0x106>
        tr->start_value._color = c1;
    4714:	f8a7 b008 	strh.w	fp, [r7, #8]
        tr->end_value._color = c2;
    4718:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    471c:	81bb      	strh	r3, [r7, #12]
    471e:	e720      	b.n	4562 <lv_obj_set_state+0xae>
        LV_ASSERT_MEM(tr);
    4720:	463a      	mov	r2, r7
    4722:	2300      	movs	r3, #0
    4724:	4815      	ldr	r0, [pc, #84]	; (477c <lv_obj_set_state+0x2c8>)
    4726:	4907      	ldr	r1, [pc, #28]	; (4744 <lv_obj_set_state+0x290>)
    4728:	4788      	blx	r1
    472a:	e7fe      	b.n	472a <lv_obj_set_state+0x276>
        LV_ASSERT_MEM(tr);
    472c:	463a      	mov	r2, r7
    472e:	2300      	movs	r3, #0
    4730:	4812      	ldr	r0, [pc, #72]	; (477c <lv_obj_set_state+0x2c8>)
    4732:	4904      	ldr	r1, [pc, #16]	; (4744 <lv_obj_set_state+0x290>)
    4734:	4788      	blx	r1
    4736:	e7fe      	b.n	4736 <lv_obj_set_state+0x282>
    4738:	0000295d 	.word	0x0000295d
    473c:	000041d5 	.word	0x000041d5
    4740:	00017880 	.word	0x00017880
    4744:	00002965 	.word	0x00002965
    4748:	00006039 	.word	0x00006039
    474c:	2000ad50 	.word	0x2000ad50
    4750:	000110f1 	.word	0x000110f1
    4754:	00010565 	.word	0x00010565
    4758:	00003c09 	.word	0x00003c09
    475c:	00004441 	.word	0x00004441
    4760:	00003281 	.word	0x00003281
    4764:	00010621 	.word	0x00010621
    4768:	0000691d 	.word	0x0000691d
    476c:	00003185 	.word	0x00003185
    4770:	000067cf 	.word	0x000067cf
    4774:	0000430d 	.word	0x0000430d
    4778:	00006289 	.word	0x00006289
    477c:	0001786c 	.word	0x0001786c
    4780:	00004281 	.word	0x00004281
    4784:	00006161 	.word	0x00006161
    4788:	00003125 	.word	0x00003125
        obj->state = prev_state;
    478c:	f88a 803d 	strb.w	r8, [sl, #61]	; 0x3d
        style_list->skip_trans = 1;
    4790:	7973      	ldrb	r3, [r6, #5]
    4792:	f043 0304 	orr.w	r3, r3, #4
    4796:	7173      	strb	r3, [r6, #5]
        const void * p1 = _lv_obj_get_style_ptr(obj, part, prop);
    4798:	4622      	mov	r2, r4
    479a:	f8dd b004 	ldr.w	fp, [sp, #4]
    479e:	4659      	mov	r1, fp
    47a0:	4650      	mov	r0, sl
    47a2:	4f58      	ldr	r7, [pc, #352]	; (4904 <lv_obj_set_state+0x450>)
    47a4:	47b8      	blx	r7
    47a6:	900a      	str	r0, [sp, #40]	; 0x28
        obj->state = new_state;
    47a8:	f88a 903d 	strb.w	r9, [sl, #61]	; 0x3d
        const void * p2 = _lv_obj_get_style_ptr(obj, part, prop);
    47ac:	4622      	mov	r2, r4
    47ae:	f8cd b004 	str.w	fp, [sp, #4]
    47b2:	4659      	mov	r1, fp
    47b4:	4650      	mov	r0, sl
    47b6:	47b8      	blx	r7
    47b8:	4683      	mov	fp, r0
    47ba:	a91e      	add	r1, sp, #120	; 0x78
    47bc:	f841 0d40 	str.w	r0, [r1, #-64]!
        style_list->skip_trans = 0;
    47c0:	7973      	ldrb	r3, [r6, #5]
    47c2:	f36f 0382 	bfc	r3, #2, #1
    47c6:	7173      	strb	r3, [r6, #5]
        if(memcmp(&p1, &p2, sizeof(const void *)) == 0)  return NULL;
    47c8:	2204      	movs	r2, #4
    47ca:	a80a      	add	r0, sp, #40	; 0x28
    47cc:	4b4e      	ldr	r3, [pc, #312]	; (4908 <lv_obj_set_state+0x454>)
    47ce:	4798      	blx	r3
    47d0:	2800      	cmp	r0, #0
    47d2:	f43f aef2 	beq.w	45ba <lv_obj_set_state+0x106>
        obj->state = prev_state;
    47d6:	f88a 803d 	strb.w	r8, [sl, #61]	; 0x3d
        p1 = _lv_obj_get_style_ptr(obj, part, prop);
    47da:	4622      	mov	r2, r4
    47dc:	9901      	ldr	r1, [sp, #4]
    47de:	4650      	mov	r0, sl
    47e0:	47b8      	blx	r7
    47e2:	4606      	mov	r6, r0
    47e4:	900a      	str	r0, [sp, #40]	; 0x28
        obj->state = new_state;
    47e6:	f88a 903d 	strb.w	r9, [sl, #61]	; 0x3d
        _lv_style_set_ptr(style_trans, prop, p1);   /*Be sure `trans_style` has a valid value */
    47ea:	4602      	mov	r2, r0
    47ec:	4621      	mov	r1, r4
    47ee:	9802      	ldr	r0, [sp, #8]
    47f0:	4b46      	ldr	r3, [pc, #280]	; (490c <lv_obj_set_state+0x458>)
    47f2:	4798      	blx	r3
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
    47f4:	4846      	ldr	r0, [pc, #280]	; (4910 <lv_obj_set_state+0x45c>)
    47f6:	4b47      	ldr	r3, [pc, #284]	; (4914 <lv_obj_set_state+0x460>)
    47f8:	4798      	blx	r3
    47fa:	4607      	mov	r7, r0
        LV_ASSERT_MEM(tr);
    47fc:	4b46      	ldr	r3, [pc, #280]	; (4918 <lv_obj_set_state+0x464>)
    47fe:	4798      	blx	r3
    4800:	b130      	cbz	r0, 4810 <lv_obj_set_state+0x35c>
        if(tr == NULL) return NULL;
    4802:	2f00      	cmp	r7, #0
    4804:	f43f aed9 	beq.w	45ba <lv_obj_set_state+0x106>
        tr->start_value._ptr = p1;
    4808:	60be      	str	r6, [r7, #8]
        tr->end_value._ptr = p2;
    480a:	f8c7 b00c 	str.w	fp, [r7, #12]
    480e:	e6a8      	b.n	4562 <lv_obj_set_state+0xae>
        LV_ASSERT_MEM(tr);
    4810:	463a      	mov	r2, r7
    4812:	2300      	movs	r3, #0
    4814:	4841      	ldr	r0, [pc, #260]	; (491c <lv_obj_set_state+0x468>)
    4816:	4942      	ldr	r1, [pc, #264]	; (4920 <lv_obj_set_state+0x46c>)
    4818:	4788      	blx	r1
    481a:	e7fe      	b.n	481a <lv_obj_set_state+0x366>
    481c:	9b04      	ldr	r3, [sp, #16]
    481e:	3301      	adds	r3, #1
    4820:	9304      	str	r3, [sp, #16]
    for(part = 0; part < _LV_OBJ_PART_REAL_LAST; part++) {
    4822:	2b40      	cmp	r3, #64	; 0x40
    4824:	d045      	beq.n	48b2 <lv_obj_set_state+0x3fe>
    4826:	f89d 3010 	ldrb.w	r3, [sp, #16]
    482a:	9301      	str	r3, [sp, #4]
        lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
    482c:	4619      	mov	r1, r3
    482e:	4650      	mov	r0, sl
    4830:	4b3c      	ldr	r3, [pc, #240]	; (4924 <lv_obj_set_state+0x470>)
    4832:	4798      	blx	r3
        if(style_list == NULL) break;   /*No more style lists*/
    4834:	9005      	str	r0, [sp, #20]
    4836:	2800      	cmp	r0, #0
    4838:	d03b      	beq.n	48b2 <lv_obj_set_state+0x3fe>
        if(style_list->ignore_trans) continue;
    483a:	7943      	ldrb	r3, [r0, #5]
    483c:	f013 0f08 	tst.w	r3, #8
    4840:	d1ec      	bne.n	481c <lv_obj_set_state+0x368>
    4842:	22b0      	movs	r2, #176	; 0xb0
    4844:	9c01      	ldr	r4, [sp, #4]
    4846:	4621      	mov	r1, r4
    4848:	4650      	mov	r0, sl
    484a:	47a8      	blx	r5
    484c:	9008      	str	r0, [sp, #32]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
    484e:	22b1      	movs	r2, #177	; 0xb1
    4850:	4621      	mov	r1, r4
    4852:	4650      	mov	r0, sl
    4854:	47a8      	blx	r5
    4856:	9007      	str	r0, [sp, #28]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
#if LV_USE_ANIMATION
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
    4858:	22be      	movs	r2, #190	; 0xbe
    485a:	4621      	mov	r1, r4
    485c:	4650      	mov	r0, sl
    485e:	4b29      	ldr	r3, [pc, #164]	; (4904 <lv_obj_set_state+0x450>)
    4860:	4798      	blx	r3
    4862:	9006      	str	r0, [sp, #24]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int, scalar)
    4864:	22b2      	movs	r2, #178	; 0xb2
    4866:	4621      	mov	r1, r4
    4868:	4650      	mov	r0, sl
    486a:	47a8      	blx	r5
        props[0] = lv_obj_get_style_transition_prop_1(obj, part);
    486c:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_2, transition_prop_2, lv_style_int_t, _int, scalar)
    4870:	22b3      	movs	r2, #179	; 0xb3
    4872:	4621      	mov	r1, r4
    4874:	4650      	mov	r0, sl
    4876:	47a8      	blx	r5
        props[1] = lv_obj_get_style_transition_prop_2(obj, part);
    4878:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
    487c:	22b4      	movs	r2, #180	; 0xb4
    487e:	4621      	mov	r1, r4
    4880:	4650      	mov	r0, sl
    4882:	47a8      	blx	r5
        props[2] = lv_obj_get_style_transition_prop_3(obj, part);
    4884:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
    4888:	22b5      	movs	r2, #181	; 0xb5
    488a:	4621      	mov	r1, r4
    488c:	4650      	mov	r0, sl
    488e:	47a8      	blx	r5
        props[3] = lv_obj_get_style_transition_prop_4(obj, part);
    4890:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
    4894:	22b6      	movs	r2, #182	; 0xb6
    4896:	4621      	mov	r1, r4
    4898:	4650      	mov	r0, sl
    489a:	47a8      	blx	r5
        props[4] = lv_obj_get_style_transition_prop_5(obj, part);
    489c:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
    48a0:	22b7      	movs	r2, #183	; 0xb7
    48a2:	4621      	mov	r1, r4
    48a4:	4650      	mov	r0, sl
    48a6:	47a8      	blx	r5
        props[5] = lv_obj_get_style_transition_prop_6(obj, part);
    48a8:	f8ad 0036 	strh.w	r0, [sp, #54]	; 0x36
    48ac:	ab0b      	add	r3, sp, #44	; 0x2c
    48ae:	9303      	str	r3, [sp, #12]
    48b0:	e688      	b.n	45c4 <lv_obj_set_state+0x110>
    lv_obj_refresh_style(obj, LV_STYLE_PROP_ALL);
    48b2:	21ff      	movs	r1, #255	; 0xff
    48b4:	4650      	mov	r0, sl
    48b6:	4b1c      	ldr	r3, [pc, #112]	; (4928 <lv_obj_set_state+0x474>)
    48b8:	4798      	blx	r3
}
    48ba:	b01f      	add	sp, #124	; 0x7c
    48bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                lv_coord_t whalf = lv_obj_get_width(obj) / 2;
    48c0:	4650      	mov	r0, sl
    48c2:	4e1a      	ldr	r6, [pc, #104]	; (492c <lv_obj_set_state+0x478>)
    48c4:	47b0      	blx	r6
    48c6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    48ca:	f340 074f 	sbfx	r7, r0, #1, #16
                lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
    48ce:	4650      	mov	r0, sl
    48d0:	47b0      	blx	r6
    48d2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    48d6:	f340 034f 	sbfx	r3, r0, #1, #16
                if(int1 == LV_RADIUS_CIRCLE) int1 = LV_MATH_MIN(whalf + 1, hhalf + 1);
    48da:	1c5e      	adds	r6, r3, #1
    48dc:	1c7a      	adds	r2, r7, #1
    48de:	4296      	cmp	r6, r2
    48e0:	bfa8      	it	ge
    48e2:	4616      	movge	r6, r2
    48e4:	b236      	sxth	r6, r6
                if(int2 == LV_RADIUS_CIRCLE) int2 = LV_MATH_MIN(whalf + 1, hhalf + 1);
    48e6:	f647 72ff 	movw	r2, #32767	; 0x7fff
    48ea:	4593      	cmp	fp, r2
    48ec:	f47f ae2b 	bne.w	4546 <lv_obj_set_state+0x92>
    48f0:	f103 0b01 	add.w	fp, r3, #1
    48f4:	3701      	adds	r7, #1
    48f6:	45bb      	cmp	fp, r7
    48f8:	bfa8      	it	ge
    48fa:	46bb      	movge	fp, r7
    48fc:	fa0f fb8b 	sxth.w	fp, fp
    4900:	e621      	b.n	4546 <lv_obj_set_state+0x92>
    4902:	4770      	bx	lr
    4904:	000043a1 	.word	0x000043a1
    4908:	000176b5 	.word	0x000176b5
    490c:	0000639d 	.word	0x0000639d
    4910:	2000ad50 	.word	0x2000ad50
    4914:	000110f1 	.word	0x000110f1
    4918:	0000295d 	.word	0x0000295d
    491c:	0001786c 	.word	0x0001786c
    4920:	00002965 	.word	0x00002965
    4924:	00003185 	.word	0x00003185
    4928:	00003a15 	.word	0x00003a15
    492c:	00003125 	.word	0x00003125

00004930 <lv_obj_add_state>:
{
    4930:	b538      	push	{r3, r4, r5, lr}
    4932:	4605      	mov	r5, r0
    4934:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    4936:	4b09      	ldr	r3, [pc, #36]	; (495c <lv_obj_add_state+0x2c>)
    4938:	4798      	blx	r3
    493a:	b148      	cbz	r0, 4950 <lv_obj_add_state+0x20>
    lv_state_t new_state = obj->state | state;
    493c:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
    4940:	ea43 0104 	orr.w	r1, r3, r4
    if(obj->state != new_state) {
    4944:	428b      	cmp	r3, r1
    4946:	d002      	beq.n	494e <lv_obj_add_state+0x1e>
        lv_obj_set_state(obj, new_state);
    4948:	4628      	mov	r0, r5
    494a:	4b05      	ldr	r3, [pc, #20]	; (4960 <lv_obj_add_state+0x30>)
    494c:	4798      	blx	r3
    494e:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    4950:	462a      	mov	r2, r5
    4952:	2300      	movs	r3, #0
    4954:	4803      	ldr	r0, [pc, #12]	; (4964 <lv_obj_add_state+0x34>)
    4956:	4904      	ldr	r1, [pc, #16]	; (4968 <lv_obj_add_state+0x38>)
    4958:	4788      	blx	r1
    495a:	e7fe      	b.n	495a <lv_obj_add_state+0x2a>
    495c:	0000295d 	.word	0x0000295d
    4960:	000044b5 	.word	0x000044b5
    4964:	00017880 	.word	0x00017880
    4968:	00002965 	.word	0x00002965

0000496c <lv_obj_clear_state>:
{
    496c:	b538      	push	{r3, r4, r5, lr}
    496e:	4605      	mov	r5, r0
    4970:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    4972:	4b09      	ldr	r3, [pc, #36]	; (4998 <lv_obj_clear_state+0x2c>)
    4974:	4798      	blx	r3
    4976:	b148      	cbz	r0, 498c <lv_obj_clear_state+0x20>
    lv_state_t new_state = obj->state & (~state);
    4978:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
    497c:	ea23 0104 	bic.w	r1, r3, r4
    if(obj->state != new_state) {
    4980:	428b      	cmp	r3, r1
    4982:	d002      	beq.n	498a <lv_obj_clear_state+0x1e>
        lv_obj_set_state(obj, new_state);
    4984:	4628      	mov	r0, r5
    4986:	4b05      	ldr	r3, [pc, #20]	; (499c <lv_obj_clear_state+0x30>)
    4988:	4798      	blx	r3
    498a:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    498c:	462a      	mov	r2, r5
    498e:	2300      	movs	r3, #0
    4990:	4803      	ldr	r0, [pc, #12]	; (49a0 <lv_obj_clear_state+0x34>)
    4992:	4904      	ldr	r1, [pc, #16]	; (49a4 <lv_obj_clear_state+0x38>)
    4994:	4788      	blx	r1
    4996:	e7fe      	b.n	4996 <lv_obj_clear_state+0x2a>
    4998:	0000295d 	.word	0x0000295d
    499c:	000044b5 	.word	0x000044b5
    49a0:	00017880 	.word	0x00017880
    49a4:	00002965 	.word	0x00002965

000049a8 <lv_obj_get_group>:
{
    49a8:	b510      	push	{r4, lr}
    49aa:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    49ac:	4b05      	ldr	r3, [pc, #20]	; (49c4 <lv_obj_get_group+0x1c>)
    49ae:	4798      	blx	r3
    49b0:	b108      	cbz	r0, 49b6 <lv_obj_get_group+0xe>
}
    49b2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    49b4:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    49b6:	4622      	mov	r2, r4
    49b8:	2300      	movs	r3, #0
    49ba:	4803      	ldr	r0, [pc, #12]	; (49c8 <lv_obj_get_group+0x20>)
    49bc:	4903      	ldr	r1, [pc, #12]	; (49cc <lv_obj_get_group+0x24>)
    49be:	4788      	blx	r1
    49c0:	e7fe      	b.n	49c0 <lv_obj_get_group+0x18>
    49c2:	bf00      	nop
    49c4:	0000295d 	.word	0x0000295d
    49c8:	00017880 	.word	0x00017880
    49cc:	00002965 	.word	0x00002965

000049d0 <lv_obj_is_focused>:
{
    49d0:	b510      	push	{r4, lr}
    49d2:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    49d4:	4b09      	ldr	r3, [pc, #36]	; (49fc <lv_obj_is_focused+0x2c>)
    49d6:	4798      	blx	r3
    49d8:	b140      	cbz	r0, 49ec <lv_obj_is_focused+0x1c>
    if(obj->group_p) {
    49da:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    49dc:	b160      	cbz	r0, 49f8 <lv_obj_is_focused+0x28>
        if(lv_group_get_focused(obj->group_p) == obj) return true;
    49de:	4b08      	ldr	r3, [pc, #32]	; (4a00 <lv_obj_is_focused+0x30>)
    49e0:	4798      	blx	r3
    49e2:	4284      	cmp	r4, r0
    49e4:	bf14      	ite	ne
    49e6:	2000      	movne	r0, #0
    49e8:	2001      	moveq	r0, #1
    49ea:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    49ec:	4622      	mov	r2, r4
    49ee:	2300      	movs	r3, #0
    49f0:	4804      	ldr	r0, [pc, #16]	; (4a04 <lv_obj_is_focused+0x34>)
    49f2:	4905      	ldr	r1, [pc, #20]	; (4a08 <lv_obj_is_focused+0x38>)
    49f4:	4788      	blx	r1
    49f6:	e7fe      	b.n	49f6 <lv_obj_is_focused+0x26>
    return false;
    49f8:	2000      	movs	r0, #0
}
    49fa:	bd10      	pop	{r4, pc}
    49fc:	0000295d 	.word	0x0000295d
    4a00:	00002c05 	.word	0x00002c05
    4a04:	00017880 	.word	0x00017880
    4a08:	00002965 	.word	0x00002965

00004a0c <lv_obj_handle_get_type_signal>:
        if(buf->type[i] == NULL) break;
    4a0c:	6803      	ldr	r3, [r0, #0]
    4a0e:	b17b      	cbz	r3, 4a30 <lv_obj_handle_get_type_signal+0x24>
{
    4a10:	b410      	push	{r4}
    4a12:	1d02      	adds	r2, r0, #4
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
    4a14:	2301      	movs	r3, #1
        if(buf->type[i] == NULL) break;
    4a16:	f852 4b04 	ldr.w	r4, [r2], #4
    4a1a:	b11c      	cbz	r4, 4a24 <lv_obj_handle_get_type_signal+0x18>
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
    4a1c:	3301      	adds	r3, #1
    4a1e:	b2db      	uxtb	r3, r3
    4a20:	2b07      	cmp	r3, #7
    4a22:	d1f8      	bne.n	4a16 <lv_obj_handle_get_type_signal+0xa>
    buf->type[i] = name;
    4a24:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
    4a28:	2001      	movs	r0, #1
    4a2a:	f85d 4b04 	ldr.w	r4, [sp], #4
    4a2e:	4770      	bx	lr
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
    4a30:	2300      	movs	r3, #0
    buf->type[i] = name;
    4a32:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
    4a36:	2001      	movs	r0, #1
    4a38:	4770      	bx	lr
	...

00004a3c <lv_obj_init_draw_rect_dsc>:
{
    4a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4a40:	4605      	mov	r5, r0
    4a42:	460e      	mov	r6, r1
    4a44:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
    4a46:	2201      	movs	r2, #1
    4a48:	4ba8      	ldr	r3, [pc, #672]	; (4cec <lv_obj_init_draw_rect_dsc+0x2b0>)
    4a4a:	4798      	blx	r3
    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
    4a4c:	8020      	strh	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
    4a4e:	f248 020c 	movw	r2, #32780	; 0x800c
    4a52:	4631      	mov	r1, r6
    4a54:	4628      	mov	r0, r5
    4a56:	4ba6      	ldr	r3, [pc, #664]	; (4cf0 <lv_obj_init_draw_rect_dsc+0x2b4>)
    4a58:	4798      	blx	r3
    if(opa_scale <= LV_OPA_MIN) {
    4a5a:	2805      	cmp	r0, #5
    4a5c:	d942      	bls.n	4ae4 <lv_obj_init_draw_rect_dsc+0xa8>
    4a5e:	4607      	mov	r7, r0
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
    4a60:	7b23      	ldrb	r3, [r4, #12]
    4a62:	2b00      	cmp	r3, #0
    4a64:	d149      	bne.n	4afa <lv_obj_init_draw_rect_dsc+0xbe>
    if(draw_dsc->border_opa != LV_OPA_TRANSP) {
    4a66:	7d23      	ldrb	r3, [r4, #20]
    4a68:	2b00      	cmp	r3, #0
    4a6a:	d176      	bne.n	4b5a <lv_obj_init_draw_rect_dsc+0x11e>
    if(draw_dsc->outline_opa != LV_OPA_TRANSP) {
    4a6c:	7f23      	ldrb	r3, [r4, #28]
    4a6e:	2b00      	cmp	r3, #0
    4a70:	f040 8098 	bne.w	4ba4 <lv_obj_init_draw_rect_dsc+0x168>
    if(draw_dsc->pattern_opa != LV_OPA_TRANSP) {
    4a74:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
    4a78:	2b00      	cmp	r3, #0
    4a7a:	f040 80b8 	bne.w	4bee <lv_obj_init_draw_rect_dsc+0x1b2>
    if(draw_dsc->shadow_opa > LV_OPA_MIN) {
    4a7e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    4a82:	2b05      	cmp	r3, #5
    4a84:	f200 8101 	bhi.w	4c8a <lv_obj_init_draw_rect_dsc+0x24e>
    if(draw_dsc->value_opa > LV_OPA_MIN) {
    4a88:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    4a8c:	2b05      	cmp	r3, #5
    4a8e:	f200 8137 	bhi.w	4d00 <lv_obj_init_draw_rect_dsc+0x2c4>
    if(opa_scale < LV_OPA_MAX) {
    4a92:	2ff9      	cmp	r7, #249	; 0xf9
    4a94:	d824      	bhi.n	4ae0 <lv_obj_init_draw_rect_dsc+0xa4>
        draw_dsc->bg_opa = (uint16_t)((uint16_t)draw_dsc->bg_opa * opa_scale) >> 8;
    4a96:	b2bf      	uxth	r7, r7
    4a98:	7b23      	ldrb	r3, [r4, #12]
    4a9a:	fb13 f307 	smulbb	r3, r3, r7
    4a9e:	f3c3 2307 	ubfx	r3, r3, #8, #8
    4aa2:	7323      	strb	r3, [r4, #12]
        draw_dsc->border_opa = (uint16_t)((uint16_t)draw_dsc->border_opa * opa_scale) >> 8;
    4aa4:	7d23      	ldrb	r3, [r4, #20]
    4aa6:	fb13 f307 	smulbb	r3, r3, r7
    4aaa:	f3c3 2307 	ubfx	r3, r3, #8, #8
    4aae:	7523      	strb	r3, [r4, #20]
        draw_dsc->shadow_opa = (uint16_t)((uint16_t)draw_dsc->shadow_opa * opa_scale) >> 8;
    4ab0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    4ab4:	fb13 f307 	smulbb	r3, r3, r7
    4ab8:	f3c3 2307 	ubfx	r3, r3, #8, #8
    4abc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        draw_dsc->pattern_opa = (uint16_t)((uint16_t)draw_dsc->pattern_opa * opa_scale) >> 8;
    4ac0:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
    4ac4:	fb13 f307 	smulbb	r3, r3, r7
    4ac8:	f3c3 2307 	ubfx	r3, r3, #8, #8
    4acc:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        draw_dsc->value_opa = (uint16_t)((uint16_t)draw_dsc->value_opa * opa_scale) >> 8;
    4ad0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    4ad4:	fb13 f707 	smulbb	r7, r3, r7
    4ad8:	f3c7 2707 	ubfx	r7, r7, #8, #8
    4adc:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
    4ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        draw_dsc->bg_opa = LV_OPA_TRANSP;
    4ae4:	2300      	movs	r3, #0
    4ae6:	7323      	strb	r3, [r4, #12]
        draw_dsc->border_opa = LV_OPA_TRANSP;
    4ae8:	7523      	strb	r3, [r4, #20]
        draw_dsc->shadow_opa = LV_OPA_TRANSP;
    4aea:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        draw_dsc->pattern_opa = LV_OPA_TRANSP;
    4aee:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        draw_dsc->value_opa = LV_OPA_TRANSP;
    4af2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        return;
    4af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
    4afa:	222c      	movs	r2, #44	; 0x2c
    4afc:	4631      	mov	r1, r6
    4afe:	4628      	mov	r0, r5
    4b00:	4b7b      	ldr	r3, [pc, #492]	; (4cf0 <lv_obj_init_draw_rect_dsc+0x2b4>)
    4b02:	4798      	blx	r3
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
    4b04:	7320      	strb	r0, [r4, #12]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
    4b06:	2805      	cmp	r0, #5
    4b08:	d9ad      	bls.n	4a66 <lv_obj_init_draw_rect_dsc+0x2a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
    4b0a:	2229      	movs	r2, #41	; 0x29
    4b0c:	4631      	mov	r1, r6
    4b0e:	4628      	mov	r0, r5
    4b10:	4b78      	ldr	r3, [pc, #480]	; (4cf4 <lv_obj_init_draw_rect_dsc+0x2b8>)
    4b12:	4798      	blx	r3
            draw_dsc->bg_color = lv_obj_get_style_bg_color(obj, part);
    4b14:	8060      	strh	r0, [r4, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
    4b16:	2223      	movs	r2, #35	; 0x23
    4b18:	4631      	mov	r1, r6
    4b1a:	4628      	mov	r0, r5
    4b1c:	4b73      	ldr	r3, [pc, #460]	; (4cec <lv_obj_init_draw_rect_dsc+0x2b0>)
    4b1e:	4798      	blx	r3
    4b20:	b2c0      	uxtb	r0, r0
            draw_dsc->bg_grad_dir =  lv_obj_get_style_bg_grad_dir(obj, part);
    4b22:	71a0      	strb	r0, [r4, #6]
            if(draw_dsc->bg_grad_dir != LV_GRAD_DIR_NONE) {
    4b24:	b930      	cbnz	r0, 4b34 <lv_obj_init_draw_rect_dsc+0xf8>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
    4b26:	2220      	movs	r2, #32
    4b28:	4631      	mov	r1, r6
    4b2a:	4628      	mov	r0, r5
    4b2c:	4b6f      	ldr	r3, [pc, #444]	; (4cec <lv_obj_init_draw_rect_dsc+0x2b0>)
    4b2e:	4798      	blx	r3
    4b30:	7360      	strb	r0, [r4, #13]
    4b32:	e798      	b.n	4a66 <lv_obj_init_draw_rect_dsc+0x2a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
    4b34:	222a      	movs	r2, #42	; 0x2a
    4b36:	4631      	mov	r1, r6
    4b38:	4628      	mov	r0, r5
    4b3a:	4b6e      	ldr	r3, [pc, #440]	; (4cf4 <lv_obj_init_draw_rect_dsc+0x2b8>)
    4b3c:	4798      	blx	r3
                draw_dsc->bg_grad_color = lv_obj_get_style_bg_grad_color(obj, part);
    4b3e:	80a0      	strh	r0, [r4, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
    4b40:	2221      	movs	r2, #33	; 0x21
    4b42:	4631      	mov	r1, r6
    4b44:	4628      	mov	r0, r5
    4b46:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 4cec <lv_obj_init_draw_rect_dsc+0x2b0>
    4b4a:	47c0      	blx	r8
                draw_dsc->bg_main_color_stop =  lv_obj_get_style_bg_main_stop(obj, part);
    4b4c:	8120      	strh	r0, [r4, #8]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
    4b4e:	2222      	movs	r2, #34	; 0x22
    4b50:	4631      	mov	r1, r6
    4b52:	4628      	mov	r0, r5
    4b54:	47c0      	blx	r8
                draw_dsc->bg_grad_color_stop =  lv_obj_get_style_bg_grad_stop(obj, part);
    4b56:	8160      	strh	r0, [r4, #10]
    4b58:	e7e5      	b.n	4b26 <lv_obj_init_draw_rect_dsc+0xea>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
    4b5a:	2230      	movs	r2, #48	; 0x30
    4b5c:	4631      	mov	r1, r6
    4b5e:	4628      	mov	r0, r5
    4b60:	4b62      	ldr	r3, [pc, #392]	; (4cec <lv_obj_init_draw_rect_dsc+0x2b0>)
    4b62:	4798      	blx	r3
        draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
    4b64:	8220      	strh	r0, [r4, #16]
        if(draw_dsc->border_width) {
    4b66:	2800      	cmp	r0, #0
    4b68:	d080      	beq.n	4a6c <lv_obj_init_draw_rect_dsc+0x30>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
    4b6a:	223c      	movs	r2, #60	; 0x3c
    4b6c:	4631      	mov	r1, r6
    4b6e:	4628      	mov	r0, r5
    4b70:	4b5f      	ldr	r3, [pc, #380]	; (4cf0 <lv_obj_init_draw_rect_dsc+0x2b4>)
    4b72:	4798      	blx	r3
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
    4b74:	7520      	strb	r0, [r4, #20]
            if(draw_dsc->border_opa > LV_OPA_MIN) {
    4b76:	2805      	cmp	r0, #5
    4b78:	d806      	bhi.n	4b88 <lv_obj_init_draw_rect_dsc+0x14c>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
    4b7a:	2232      	movs	r2, #50	; 0x32
    4b7c:	4631      	mov	r1, r6
    4b7e:	4628      	mov	r0, r5
    4b80:	4b5a      	ldr	r3, [pc, #360]	; (4cec <lv_obj_init_draw_rect_dsc+0x2b0>)
    4b82:	4798      	blx	r3
    4b84:	7560      	strb	r0, [r4, #21]
    4b86:	e771      	b.n	4a6c <lv_obj_init_draw_rect_dsc+0x30>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
    4b88:	2231      	movs	r2, #49	; 0x31
    4b8a:	4631      	mov	r1, r6
    4b8c:	4628      	mov	r0, r5
    4b8e:	4b57      	ldr	r3, [pc, #348]	; (4cec <lv_obj_init_draw_rect_dsc+0x2b0>)
    4b90:	4798      	blx	r3
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
    4b92:	b2c0      	uxtb	r0, r0
    4b94:	8260      	strh	r0, [r4, #18]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
    4b96:	2239      	movs	r2, #57	; 0x39
    4b98:	4631      	mov	r1, r6
    4b9a:	4628      	mov	r0, r5
    4b9c:	4b55      	ldr	r3, [pc, #340]	; (4cf4 <lv_obj_init_draw_rect_dsc+0x2b8>)
    4b9e:	4798      	blx	r3
                draw_dsc->border_color = lv_obj_get_style_border_color(obj, part);
    4ba0:	81e0      	strh	r0, [r4, #14]
    4ba2:	e7ea      	b.n	4b7a <lv_obj_init_draw_rect_dsc+0x13e>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
    4ba4:	2240      	movs	r2, #64	; 0x40
    4ba6:	4631      	mov	r1, r6
    4ba8:	4628      	mov	r0, r5
    4baa:	4b50      	ldr	r3, [pc, #320]	; (4cec <lv_obj_init_draw_rect_dsc+0x2b0>)
    4bac:	4798      	blx	r3
        draw_dsc->outline_width = lv_obj_get_style_outline_width(obj, part);
    4bae:	8320      	strh	r0, [r4, #24]
        if(draw_dsc->outline_width) {
    4bb0:	2800      	cmp	r0, #0
    4bb2:	f43f af5f 	beq.w	4a74 <lv_obj_init_draw_rect_dsc+0x38>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
    4bb6:	224c      	movs	r2, #76	; 0x4c
    4bb8:	4631      	mov	r1, r6
    4bba:	4628      	mov	r0, r5
    4bbc:	4b4c      	ldr	r3, [pc, #304]	; (4cf0 <lv_obj_init_draw_rect_dsc+0x2b4>)
    4bbe:	4798      	blx	r3
            draw_dsc->outline_opa = lv_obj_get_style_outline_opa(obj, part);
    4bc0:	7720      	strb	r0, [r4, #28]
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
    4bc2:	2805      	cmp	r0, #5
    4bc4:	d806      	bhi.n	4bd4 <lv_obj_init_draw_rect_dsc+0x198>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_BLEND_MODE, outline_blend_mode, lv_blend_mode_t, _int, scalar)
    4bc6:	2242      	movs	r2, #66	; 0x42
    4bc8:	4631      	mov	r1, r6
    4bca:	4628      	mov	r0, r5
    4bcc:	4b47      	ldr	r3, [pc, #284]	; (4cec <lv_obj_init_draw_rect_dsc+0x2b0>)
    4bce:	4798      	blx	r3
    4bd0:	7760      	strb	r0, [r4, #29]
    4bd2:	e74f      	b.n	4a74 <lv_obj_init_draw_rect_dsc+0x38>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
    4bd4:	2241      	movs	r2, #65	; 0x41
    4bd6:	4631      	mov	r1, r6
    4bd8:	4628      	mov	r0, r5
    4bda:	4b44      	ldr	r3, [pc, #272]	; (4cec <lv_obj_init_draw_rect_dsc+0x2b0>)
    4bdc:	4798      	blx	r3
                draw_dsc->outline_pad = lv_obj_get_style_outline_pad(obj, part);
    4bde:	8360      	strh	r0, [r4, #26]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
    4be0:	2249      	movs	r2, #73	; 0x49
    4be2:	4631      	mov	r1, r6
    4be4:	4628      	mov	r0, r5
    4be6:	4b43      	ldr	r3, [pc, #268]	; (4cf4 <lv_obj_init_draw_rect_dsc+0x2b8>)
    4be8:	4798      	blx	r3
                draw_dsc->outline_color = lv_obj_get_style_outline_color(obj, part);
    4bea:	82e0      	strh	r0, [r4, #22]
    4bec:	e7eb      	b.n	4bc6 <lv_obj_init_draw_rect_dsc+0x18a>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
    4bee:	226e      	movs	r2, #110	; 0x6e
    4bf0:	4631      	mov	r1, r6
    4bf2:	4628      	mov	r0, r5
    4bf4:	4b40      	ldr	r3, [pc, #256]	; (4cf8 <lv_obj_init_draw_rect_dsc+0x2bc>)
    4bf6:	4798      	blx	r3
        draw_dsc->pattern_image = lv_obj_get_style_pattern_image(obj, part);
    4bf8:	62e0      	str	r0, [r4, #44]	; 0x2c
        if(draw_dsc->pattern_image) {
    4bfa:	2800      	cmp	r0, #0
    4bfc:	f43f af3f 	beq.w	4a7e <lv_obj_init_draw_rect_dsc+0x42>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_OPA, pattern_opa, lv_opa_t, _opa, scalar)
    4c00:	226c      	movs	r2, #108	; 0x6c
    4c02:	4631      	mov	r1, r6
    4c04:	4628      	mov	r0, r5
    4c06:	4b3a      	ldr	r3, [pc, #232]	; (4cf0 <lv_obj_init_draw_rect_dsc+0x2b4>)
    4c08:	4798      	blx	r3
            draw_dsc->pattern_opa = lv_obj_get_style_pattern_opa(obj, part);
    4c0a:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
            if(draw_dsc->pattern_opa > LV_OPA_MIN) {
    4c0e:	2805      	cmp	r0, #5
    4c10:	f67f af35 	bls.w	4a7e <lv_obj_init_draw_rect_dsc+0x42>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR_OPA, pattern_recolor_opa, lv_opa_t, _opa, scalar)
    4c14:	226d      	movs	r2, #109	; 0x6d
    4c16:	4631      	mov	r1, r6
    4c18:	4628      	mov	r0, r5
    4c1a:	4b35      	ldr	r3, [pc, #212]	; (4cf0 <lv_obj_init_draw_rect_dsc+0x2b4>)
    4c1c:	4798      	blx	r3
                draw_dsc->pattern_recolor_opa = lv_obj_get_style_pattern_recolor_opa(obj, part);
    4c1e:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_REPEAT, pattern_repeat, bool, _int, scalar)
    4c22:	2261      	movs	r2, #97	; 0x61
    4c24:	4631      	mov	r1, r6
    4c26:	4628      	mov	r0, r5
    4c28:	4b30      	ldr	r3, [pc, #192]	; (4cec <lv_obj_init_draw_rect_dsc+0x2b0>)
    4c2a:	4798      	blx	r3
    4c2c:	3000      	adds	r0, #0
    4c2e:	bf18      	it	ne
    4c30:	2001      	movne	r0, #1
                draw_dsc->pattern_repeat = lv_obj_get_style_pattern_repeat(obj, part);
    4c32:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    4c36:	f360 0300 	bfi	r3, r0, #0, #1
    4c3a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
                if(lv_img_src_get_type(draw_dsc->pattern_image) == LV_IMG_SRC_SYMBOL) {
    4c3e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    4c40:	4b2e      	ldr	r3, [pc, #184]	; (4cfc <lv_obj_init_draw_rect_dsc+0x2c0>)
    4c42:	4798      	blx	r3
    4c44:	2802      	cmp	r0, #2
    4c46:	d00b      	beq.n	4c60 <lv_obj_init_draw_rect_dsc+0x224>
                else if(draw_dsc->pattern_recolor_opa > LV_OPA_MIN) {
    4c48:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
    4c4c:	2b05      	cmp	r3, #5
    4c4e:	d815      	bhi.n	4c7c <lv_obj_init_draw_rect_dsc+0x240>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_BLEND_MODE, pattern_blend_mode, lv_blend_mode_t, _int, scalar)
    4c50:	2260      	movs	r2, #96	; 0x60
    4c52:	4631      	mov	r1, r6
    4c54:	4628      	mov	r0, r5
    4c56:	4b25      	ldr	r3, [pc, #148]	; (4cec <lv_obj_init_draw_rect_dsc+0x2b0>)
    4c58:	4798      	blx	r3
    4c5a:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
    4c5e:	e70e      	b.n	4a7e <lv_obj_init_draw_rect_dsc+0x42>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
    4c60:	2269      	movs	r2, #105	; 0x69
    4c62:	4631      	mov	r1, r6
    4c64:	4628      	mov	r0, r5
    4c66:	4b23      	ldr	r3, [pc, #140]	; (4cf4 <lv_obj_init_draw_rect_dsc+0x2b8>)
    4c68:	4798      	blx	r3
                    draw_dsc->pattern_recolor = lv_obj_get_style_pattern_recolor(obj, part);
    4c6a:	86a0      	strh	r0, [r4, #52]	; 0x34
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
    4c6c:	f248 028e 	movw	r2, #32910	; 0x808e
    4c70:	4631      	mov	r1, r6
    4c72:	4628      	mov	r0, r5
    4c74:	4b20      	ldr	r3, [pc, #128]	; (4cf8 <lv_obj_init_draw_rect_dsc+0x2bc>)
    4c76:	4798      	blx	r3
                    draw_dsc->pattern_font = lv_obj_get_style_text_font(obj, part);
    4c78:	6320      	str	r0, [r4, #48]	; 0x30
    4c7a:	e7e9      	b.n	4c50 <lv_obj_init_draw_rect_dsc+0x214>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
    4c7c:	2269      	movs	r2, #105	; 0x69
    4c7e:	4631      	mov	r1, r6
    4c80:	4628      	mov	r0, r5
    4c82:	4b1c      	ldr	r3, [pc, #112]	; (4cf4 <lv_obj_init_draw_rect_dsc+0x2b8>)
    4c84:	4798      	blx	r3
                    draw_dsc->pattern_recolor = lv_obj_get_style_pattern_recolor(obj, part);
    4c86:	86a0      	strh	r0, [r4, #52]	; 0x34
    4c88:	e7e2      	b.n	4c50 <lv_obj_init_draw_rect_dsc+0x214>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
    4c8a:	2250      	movs	r2, #80	; 0x50
    4c8c:	4631      	mov	r1, r6
    4c8e:	4628      	mov	r0, r5
    4c90:	4b16      	ldr	r3, [pc, #88]	; (4cec <lv_obj_init_draw_rect_dsc+0x2b0>)
    4c92:	4798      	blx	r3
        draw_dsc->shadow_width = lv_obj_get_style_shadow_width(obj, part);
    4c94:	8420      	strh	r0, [r4, #32]
        if(draw_dsc->shadow_width) {
    4c96:	2800      	cmp	r0, #0
    4c98:	f43f aef6 	beq.w	4a88 <lv_obj_init_draw_rect_dsc+0x4c>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa, scalar)
    4c9c:	225c      	movs	r2, #92	; 0x5c
    4c9e:	4631      	mov	r1, r6
    4ca0:	4628      	mov	r0, r5
    4ca2:	4b13      	ldr	r3, [pc, #76]	; (4cf0 <lv_obj_init_draw_rect_dsc+0x2b4>)
    4ca4:	4798      	blx	r3
            draw_dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, part);
    4ca6:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
            if(draw_dsc->shadow_opa > LV_OPA_MIN) {
    4caa:	2805      	cmp	r0, #5
    4cac:	f67f aeec 	bls.w	4a88 <lv_obj_init_draw_rect_dsc+0x4c>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
    4cb0:	2251      	movs	r2, #81	; 0x51
    4cb2:	4631      	mov	r1, r6
    4cb4:	4628      	mov	r0, r5
    4cb6:	f8df 8034 	ldr.w	r8, [pc, #52]	; 4cec <lv_obj_init_draw_rect_dsc+0x2b0>
    4cba:	47c0      	blx	r8
                draw_dsc->shadow_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
    4cbc:	8460      	strh	r0, [r4, #34]	; 0x22
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
    4cbe:	2252      	movs	r2, #82	; 0x52
    4cc0:	4631      	mov	r1, r6
    4cc2:	4628      	mov	r0, r5
    4cc4:	47c0      	blx	r8
                draw_dsc->shadow_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
    4cc6:	84a0      	strh	r0, [r4, #36]	; 0x24
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
    4cc8:	2253      	movs	r2, #83	; 0x53
    4cca:	4631      	mov	r1, r6
    4ccc:	4628      	mov	r0, r5
    4cce:	47c0      	blx	r8
                draw_dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, part);
    4cd0:	84e0      	strh	r0, [r4, #38]	; 0x26
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
    4cd2:	2259      	movs	r2, #89	; 0x59
    4cd4:	4631      	mov	r1, r6
    4cd6:	4628      	mov	r0, r5
    4cd8:	4b06      	ldr	r3, [pc, #24]	; (4cf4 <lv_obj_init_draw_rect_dsc+0x2b8>)
    4cda:	4798      	blx	r3
                draw_dsc->shadow_color = lv_obj_get_style_shadow_color(obj, part);
    4cdc:	83e0      	strh	r0, [r4, #30]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_BLEND_MODE, shadow_blend_mode, lv_blend_mode_t, _int, scalar)
    4cde:	2254      	movs	r2, #84	; 0x54
    4ce0:	4631      	mov	r1, r6
    4ce2:	4628      	mov	r0, r5
    4ce4:	47c0      	blx	r8
    4ce6:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    4cea:	e6cd      	b.n	4a88 <lv_obj_init_draw_rect_dsc+0x4c>
    4cec:	000041d5 	.word	0x000041d5
    4cf0:	0000430d 	.word	0x0000430d
    4cf4:	00004281 	.word	0x00004281
    4cf8:	000043a1 	.word	0x000043a1
    4cfc:	00008f71 	.word	0x00008f71
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
    4d00:	227f      	movs	r2, #127	; 0x7f
    4d02:	4631      	mov	r1, r6
    4d04:	4628      	mov	r0, r5
    4d06:	4b22      	ldr	r3, [pc, #136]	; (4d90 <lv_obj_init_draw_rect_dsc+0x354>)
    4d08:	4798      	blx	r3
        draw_dsc->value_str = lv_obj_get_style_value_str(obj, part);
    4d0a:	63e0      	str	r0, [r4, #60]	; 0x3c
        if(draw_dsc->value_str) {
    4d0c:	2800      	cmp	r0, #0
    4d0e:	f43f aec0 	beq.w	4a92 <lv_obj_init_draw_rect_dsc+0x56>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
    4d12:	227c      	movs	r2, #124	; 0x7c
    4d14:	4631      	mov	r1, r6
    4d16:	4628      	mov	r0, r5
    4d18:	4b1e      	ldr	r3, [pc, #120]	; (4d94 <lv_obj_init_draw_rect_dsc+0x358>)
    4d1a:	4798      	blx	r3
            draw_dsc->value_opa = lv_obj_get_style_value_opa(obj, part);
    4d1c:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
            if(draw_dsc->value_opa > LV_OPA_MIN) {
    4d20:	2805      	cmp	r0, #5
    4d22:	f67f aeb6 	bls.w	4a92 <lv_obj_init_draw_rect_dsc+0x56>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
    4d26:	2273      	movs	r2, #115	; 0x73
    4d28:	4631      	mov	r1, r6
    4d2a:	4628      	mov	r0, r5
    4d2c:	f8df 806c 	ldr.w	r8, [pc, #108]	; 4d9c <lv_obj_init_draw_rect_dsc+0x360>
    4d30:	47c0      	blx	r8
                draw_dsc->value_ofs_x = lv_obj_get_style_value_ofs_x(obj, part);
    4d32:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
    4d36:	2274      	movs	r2, #116	; 0x74
    4d38:	4631      	mov	r1, r6
    4d3a:	4628      	mov	r0, r5
    4d3c:	47c0      	blx	r8
                draw_dsc->value_ofs_y = lv_obj_get_style_value_ofs_y(obj, part);
    4d3e:	f8a4 004a 	strh.w	r0, [r4, #74]	; 0x4a
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
    4d42:	2279      	movs	r2, #121	; 0x79
    4d44:	4631      	mov	r1, r6
    4d46:	4628      	mov	r0, r5
    4d48:	4b13      	ldr	r3, [pc, #76]	; (4d98 <lv_obj_init_draw_rect_dsc+0x35c>)
    4d4a:	4798      	blx	r3
                draw_dsc->value_color = lv_obj_get_style_value_color(obj, part);
    4d4c:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
    4d50:	227e      	movs	r2, #126	; 0x7e
    4d52:	4631      	mov	r1, r6
    4d54:	4628      	mov	r0, r5
    4d56:	4b0e      	ldr	r3, [pc, #56]	; (4d90 <lv_obj_init_draw_rect_dsc+0x354>)
    4d58:	4798      	blx	r3
                draw_dsc->value_font = lv_obj_get_style_value_font(obj, part);
    4d5a:	6420      	str	r0, [r4, #64]	; 0x40
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
    4d5c:	2270      	movs	r2, #112	; 0x70
    4d5e:	4631      	mov	r1, r6
    4d60:	4628      	mov	r0, r5
    4d62:	47c0      	blx	r8
                draw_dsc->value_letter_space = lv_obj_get_style_value_letter_space(obj, part);
    4d64:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LINE_SPACE, value_line_space, lv_style_int_t, _int, scalar)
    4d68:	2271      	movs	r2, #113	; 0x71
    4d6a:	4631      	mov	r1, r6
    4d6c:	4628      	mov	r0, r5
    4d6e:	47c0      	blx	r8
                draw_dsc->value_line_space = lv_obj_get_style_value_line_space(obj, part);
    4d70:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
    4d74:	2275      	movs	r2, #117	; 0x75
    4d76:	4631      	mov	r1, r6
    4d78:	4628      	mov	r0, r5
    4d7a:	47c0      	blx	r8
    4d7c:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int, scalar)
    4d80:	2272      	movs	r2, #114	; 0x72
    4d82:	4631      	mov	r1, r6
    4d84:	4628      	mov	r0, r5
    4d86:	47c0      	blx	r8
    4d88:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
    4d8c:	e681      	b.n	4a92 <lv_obj_init_draw_rect_dsc+0x56>
    4d8e:	bf00      	nop
    4d90:	000043a1 	.word	0x000043a1
    4d94:	0000430d 	.word	0x0000430d
    4d98:	00004281 	.word	0x00004281
    4d9c:	000041d5 	.word	0x000041d5

00004da0 <lv_obj_design>:
{
    4da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4da4:	b098      	sub	sp, #96	; 0x60
    4da6:	4604      	mov	r4, r0
    4da8:	460e      	mov	r6, r1
    if(mode == LV_DESIGN_COVER_CHK) {
    4daa:	2a02      	cmp	r2, #2
    4dac:	d008      	beq.n	4dc0 <lv_obj_design+0x20>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
    4dae:	2a00      	cmp	r2, #0
    4db0:	d06c      	beq.n	4e8c <lv_obj_design+0xec>
    else if(mode == LV_DESIGN_DRAW_POST) {
    4db2:	2a01      	cmp	r2, #1
    4db4:	f000 80cc 	beq.w	4f50 <lv_obj_design+0x1b0>
    return LV_DESIGN_RES_OK;
    4db8:	2000      	movs	r0, #0
}
    4dba:	b018      	add	sp, #96	; 0x60
    4dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
    4dc0:	2100      	movs	r1, #0
    4dc2:	4b8e      	ldr	r3, [pc, #568]	; (4ffc <lv_obj_design+0x25c>)
    4dc4:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) return LV_DESIGN_RES_MASKED;
    4dc6:	b108      	cbz	r0, 4dcc <lv_obj_design+0x2c>
    4dc8:	2003      	movs	r0, #3
    4dca:	e7f6      	b.n	4dba <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
    4dcc:	2201      	movs	r2, #1
    4dce:	2100      	movs	r1, #0
    4dd0:	4620      	mov	r0, r4
    4dd2:	4d8a      	ldr	r5, [pc, #552]	; (4ffc <lv_obj_design+0x25c>)
    4dd4:	47a8      	blx	r5
    4dd6:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
    4dd8:	2204      	movs	r2, #4
    4dda:	2100      	movs	r1, #0
    4ddc:	4620      	mov	r0, r4
    4dde:	47a8      	blx	r5
    4de0:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
    4de2:	2205      	movs	r2, #5
    4de4:	2100      	movs	r1, #0
    4de6:	4620      	mov	r0, r4
    4de8:	47a8      	blx	r5
    4dea:	f104 030f 	add.w	r3, r4, #15
    4dee:	f104 0517 	add.w	r5, r4, #23
    uint8_t * d8 = (uint8_t *)dst;
    4df2:	aa03      	add	r2, sp, #12
        *d8 = *s8;
    4df4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    4df8:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    4dfc:	429d      	cmp	r5, r3
    4dfe:	d1f9      	bne.n	4df4 <lv_obj_design+0x54>
        coords.x1 -= w;
    4e00:	fa1f f888 	uxth.w	r8, r8
    4e04:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    4e08:	eba3 0308 	sub.w	r3, r3, r8
    4e0c:	f8ad 300c 	strh.w	r3, [sp, #12]
        coords.x2 += w;
    4e10:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    4e14:	4498      	add	r8, r3
    4e16:	f8ad 8010 	strh.w	r8, [sp, #16]
        coords.y1 -= h;
    4e1a:	b280      	uxth	r0, r0
    4e1c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    4e20:	1a1b      	subs	r3, r3, r0
    4e22:	f8ad 300e 	strh.w	r3, [sp, #14]
        coords.y2 += h;
    4e26:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    4e2a:	4418      	add	r0, r3
    4e2c:	f8ad 0012 	strh.w	r0, [sp, #18]
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
    4e30:	463a      	mov	r2, r7
    4e32:	a903      	add	r1, sp, #12
    4e34:	4630      	mov	r0, r6
    4e36:	4b72      	ldr	r3, [pc, #456]	; (5000 <lv_obj_design+0x260>)
    4e38:	4798      	blx	r3
    4e3a:	b908      	cbnz	r0, 4e40 <lv_obj_design+0xa0>
    4e3c:	2002      	movs	r0, #2
    4e3e:	e7bc      	b.n	4dba <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
    4e40:	222c      	movs	r2, #44	; 0x2c
    4e42:	2100      	movs	r1, #0
    4e44:	4620      	mov	r0, r4
    4e46:	4b6f      	ldr	r3, [pc, #444]	; (5004 <lv_obj_design+0x264>)
    4e48:	4798      	blx	r3
        if(lv_obj_get_style_bg_opa(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
    4e4a:	28f9      	cmp	r0, #249	; 0xf9
    4e4c:	d801      	bhi.n	4e52 <lv_obj_design+0xb2>
    4e4e:	2002      	movs	r0, #2
    4e50:	e7b3      	b.n	4dba <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
    4e52:	2220      	movs	r2, #32
    4e54:	2100      	movs	r1, #0
    4e56:	4620      	mov	r0, r4
    4e58:	4b68      	ldr	r3, [pc, #416]	; (4ffc <lv_obj_design+0x25c>)
    4e5a:	4798      	blx	r3
        if(lv_obj_get_style_bg_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
    4e5c:	b2c0      	uxtb	r0, r0
    4e5e:	b108      	cbz	r0, 4e64 <lv_obj_design+0xc4>
    4e60:	2002      	movs	r0, #2
    4e62:	e7aa      	b.n	4dba <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
    4e64:	2232      	movs	r2, #50	; 0x32
    4e66:	2100      	movs	r1, #0
    4e68:	4620      	mov	r0, r4
    4e6a:	4b64      	ldr	r3, [pc, #400]	; (4ffc <lv_obj_design+0x25c>)
    4e6c:	4798      	blx	r3
        if(lv_obj_get_style_border_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
    4e6e:	b2c0      	uxtb	r0, r0
    4e70:	b108      	cbz	r0, 4e76 <lv_obj_design+0xd6>
    4e72:	2002      	movs	r0, #2
    4e74:	e7a1      	b.n	4dba <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
    4e76:	f248 020c 	movw	r2, #32780	; 0x800c
    4e7a:	2100      	movs	r1, #0
    4e7c:	4620      	mov	r0, r4
    4e7e:	4b61      	ldr	r3, [pc, #388]	; (5004 <lv_obj_design+0x264>)
    4e80:	4798      	blx	r3
        return  LV_DESIGN_RES_COVER;
    4e82:	28fa      	cmp	r0, #250	; 0xfa
    4e84:	bf34      	ite	cc
    4e86:	2002      	movcc	r0, #2
    4e88:	2001      	movcs	r0, #1
    4e8a:	e796      	b.n	4dba <lv_obj_design+0x1a>
        lv_draw_rect_dsc_init(&draw_dsc);
    4e8c:	a803      	add	r0, sp, #12
    4e8e:	4b5e      	ldr	r3, [pc, #376]	; (5008 <lv_obj_design+0x268>)
    4e90:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
    4e92:	2233      	movs	r2, #51	; 0x33
    4e94:	2100      	movs	r1, #0
    4e96:	4620      	mov	r0, r4
    4e98:	4b58      	ldr	r3, [pc, #352]	; (4ffc <lv_obj_design+0x25c>)
    4e9a:	4798      	blx	r3
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
    4e9c:	b110      	cbz	r0, 4ea4 <lv_obj_design+0x104>
            draw_dsc.border_opa = LV_OPA_TRANSP;
    4e9e:	2300      	movs	r3, #0
    4ea0:	f88d 3020 	strb.w	r3, [sp, #32]
        lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
    4ea4:	aa03      	add	r2, sp, #12
    4ea6:	2100      	movs	r1, #0
    4ea8:	4620      	mov	r0, r4
    4eaa:	4b58      	ldr	r3, [pc, #352]	; (500c <lv_obj_design+0x26c>)
    4eac:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
    4eae:	2204      	movs	r2, #4
    4eb0:	2100      	movs	r1, #0
    4eb2:	4620      	mov	r0, r4
    4eb4:	4d51      	ldr	r5, [pc, #324]	; (4ffc <lv_obj_design+0x25c>)
    4eb6:	47a8      	blx	r5
    4eb8:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
    4eba:	2205      	movs	r2, #5
    4ebc:	2100      	movs	r1, #0
    4ebe:	4620      	mov	r0, r4
    4ec0:	47a8      	blx	r5
        lv_area_copy(&coords, &obj->coords);
    4ec2:	f104 0710 	add.w	r7, r4, #16
    4ec6:	f104 030f 	add.w	r3, r4, #15
    4eca:	f104 0517 	add.w	r5, r4, #23
    uint8_t * d8 = (uint8_t *)dst;
    4ece:	aa01      	add	r2, sp, #4
        *d8 = *s8;
    4ed0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    4ed4:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    4ed8:	42ab      	cmp	r3, r5
    4eda:	d1f9      	bne.n	4ed0 <lv_obj_design+0x130>
        coords.x1 -= w;
    4edc:	fa1f f888 	uxth.w	r8, r8
    4ee0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    4ee4:	eba3 0308 	sub.w	r3, r3, r8
    4ee8:	f8ad 3004 	strh.w	r3, [sp, #4]
        coords.x2 += w;
    4eec:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    4ef0:	4498      	add	r8, r3
    4ef2:	f8ad 8008 	strh.w	r8, [sp, #8]
        coords.y1 -= h;
    4ef6:	b280      	uxth	r0, r0
    4ef8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    4efc:	1a1b      	subs	r3, r3, r0
    4efe:	f8ad 3006 	strh.w	r3, [sp, #6]
        coords.y2 += h;
    4f02:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    4f06:	4418      	add	r0, r3
    4f08:	f8ad 000a 	strh.w	r0, [sp, #10]
        lv_draw_rect(&coords, clip_area, &draw_dsc);
    4f0c:	aa03      	add	r2, sp, #12
    4f0e:	4631      	mov	r1, r6
    4f10:	a801      	add	r0, sp, #4
    4f12:	4b3f      	ldr	r3, [pc, #252]	; (5010 <lv_obj_design+0x270>)
    4f14:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
    4f16:	2202      	movs	r2, #2
    4f18:	2100      	movs	r1, #0
    4f1a:	4620      	mov	r0, r4
    4f1c:	4b37      	ldr	r3, [pc, #220]	; (4ffc <lv_obj_design+0x25c>)
    4f1e:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
    4f20:	b908      	cbnz	r0, 4f26 <lv_obj_design+0x186>
    return LV_DESIGN_RES_OK;
    4f22:	2000      	movs	r0, #0
    4f24:	e749      	b.n	4dba <lv_obj_design+0x1a>
            lv_draw_mask_radius_param_t * mp = _lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
    4f26:	201c      	movs	r0, #28
    4f28:	4b3a      	ldr	r3, [pc, #232]	; (5014 <lv_obj_design+0x274>)
    4f2a:	4798      	blx	r3
    4f2c:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
    4f2e:	2201      	movs	r2, #1
    4f30:	2100      	movs	r1, #0
    4f32:	4620      	mov	r0, r4
    4f34:	4b31      	ldr	r3, [pc, #196]	; (4ffc <lv_obj_design+0x25c>)
    4f36:	4798      	blx	r3
            lv_draw_mask_radius_init(mp, &obj->coords, r, false);
    4f38:	2300      	movs	r3, #0
    4f3a:	4602      	mov	r2, r0
    4f3c:	4639      	mov	r1, r7
    4f3e:	4628      	mov	r0, r5
    4f40:	4e35      	ldr	r6, [pc, #212]	; (5018 <lv_obj_design+0x278>)
    4f42:	47b0      	blx	r6
            lv_draw_mask_add(mp, obj + 8);
    4f44:	f504 7118 	add.w	r1, r4, #608	; 0x260
    4f48:	4628      	mov	r0, r5
    4f4a:	4b34      	ldr	r3, [pc, #208]	; (501c <lv_obj_design+0x27c>)
    4f4c:	4798      	blx	r3
    4f4e:	e7e8      	b.n	4f22 <lv_obj_design+0x182>
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
    4f50:	2202      	movs	r2, #2
    4f52:	2100      	movs	r1, #0
    4f54:	4b29      	ldr	r3, [pc, #164]	; (4ffc <lv_obj_design+0x25c>)
    4f56:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
    4f58:	b938      	cbnz	r0, 4f6a <lv_obj_design+0x1ca>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
    4f5a:	2233      	movs	r2, #51	; 0x33
    4f5c:	2100      	movs	r1, #0
    4f5e:	4620      	mov	r0, r4
    4f60:	4b26      	ldr	r3, [pc, #152]	; (4ffc <lv_obj_design+0x25c>)
    4f62:	4798      	blx	r3
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
    4f64:	b940      	cbnz	r0, 4f78 <lv_obj_design+0x1d8>
    return LV_DESIGN_RES_OK;
    4f66:	2000      	movs	r0, #0
    4f68:	e727      	b.n	4dba <lv_obj_design+0x1a>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
    4f6a:	f504 7018 	add.w	r0, r4, #608	; 0x260
    4f6e:	4b2c      	ldr	r3, [pc, #176]	; (5020 <lv_obj_design+0x280>)
    4f70:	4798      	blx	r3
            _lv_mem_buf_release(param);
    4f72:	4b2c      	ldr	r3, [pc, #176]	; (5024 <lv_obj_design+0x284>)
    4f74:	4798      	blx	r3
    4f76:	e7f0      	b.n	4f5a <lv_obj_design+0x1ba>
            lv_draw_rect_dsc_init(&draw_dsc);
    4f78:	a803      	add	r0, sp, #12
    4f7a:	4b23      	ldr	r3, [pc, #140]	; (5008 <lv_obj_design+0x268>)
    4f7c:	4798      	blx	r3
            draw_dsc.bg_opa = LV_OPA_TRANSP;
    4f7e:	2700      	movs	r7, #0
    4f80:	f88d 7018 	strb.w	r7, [sp, #24]
            draw_dsc.pattern_opa = LV_OPA_TRANSP;
    4f84:	f88d 7042 	strb.w	r7, [sp, #66]	; 0x42
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
    4f88:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
            lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
    4f8c:	aa03      	add	r2, sp, #12
    4f8e:	4639      	mov	r1, r7
    4f90:	4620      	mov	r0, r4
    4f92:	4b1e      	ldr	r3, [pc, #120]	; (500c <lv_obj_design+0x26c>)
    4f94:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
    4f96:	2204      	movs	r2, #4
    4f98:	4639      	mov	r1, r7
    4f9a:	4620      	mov	r0, r4
    4f9c:	4d17      	ldr	r5, [pc, #92]	; (4ffc <lv_obj_design+0x25c>)
    4f9e:	47a8      	blx	r5
    4fa0:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
    4fa2:	2205      	movs	r2, #5
    4fa4:	4639      	mov	r1, r7
    4fa6:	4620      	mov	r0, r4
    4fa8:	47a8      	blx	r5
    4faa:	f104 030f 	add.w	r3, r4, #15
    4fae:	3417      	adds	r4, #23
    uint8_t * d8 = (uint8_t *)dst;
    4fb0:	aa01      	add	r2, sp, #4
        *d8 = *s8;
    4fb2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    4fb6:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    4fba:	42a3      	cmp	r3, r4
    4fbc:	d1f9      	bne.n	4fb2 <lv_obj_design+0x212>
            coords.x1 -= w;
    4fbe:	fa1f f388 	uxth.w	r3, r8
    4fc2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    4fc6:	1ad2      	subs	r2, r2, r3
    4fc8:	f8ad 2004 	strh.w	r2, [sp, #4]
            coords.x2 += w;
    4fcc:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    4fd0:	4413      	add	r3, r2
    4fd2:	f8ad 3008 	strh.w	r3, [sp, #8]
            coords.y1 -= h;
    4fd6:	b280      	uxth	r0, r0
    4fd8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    4fdc:	1a1b      	subs	r3, r3, r0
    4fde:	f8ad 3006 	strh.w	r3, [sp, #6]
            coords.y2 += h;
    4fe2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    4fe6:	4418      	add	r0, r3
    4fe8:	f8ad 000a 	strh.w	r0, [sp, #10]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
    4fec:	aa03      	add	r2, sp, #12
    4fee:	4631      	mov	r1, r6
    4ff0:	a801      	add	r0, sp, #4
    4ff2:	4b07      	ldr	r3, [pc, #28]	; (5010 <lv_obj_design+0x270>)
    4ff4:	4798      	blx	r3
    return LV_DESIGN_RES_OK;
    4ff6:	2000      	movs	r0, #0
    4ff8:	e6df      	b.n	4dba <lv_obj_design+0x1a>
    4ffa:	bf00      	nop
    4ffc:	000041d5 	.word	0x000041d5
    5000:	0001096d 	.word	0x0001096d
    5004:	0000430d 	.word	0x0000430d
    5008:	0000b7c5 	.word	0x0000b7c5
    500c:	00004a3d 	.word	0x00004a3d
    5010:	0000b88d 	.word	0x0000b88d
    5014:	00011a65 	.word	0x00011a65
    5018:	0000b589 	.word	0x0000b589
    501c:	0000b33d 	.word	0x0000b33d
    5020:	0000b3ed 	.word	0x0000b3ed
    5024:	000116e5 	.word	0x000116e5

00005028 <lv_obj_get_draw_rect_ext_pad_size>:
{
    5028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    502c:	b089      	sub	sp, #36	; 0x24
    502e:	4604      	mov	r4, r0
    5030:	460e      	mov	r6, r1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
    5032:	2250      	movs	r2, #80	; 0x50
    5034:	4b76      	ldr	r3, [pc, #472]	; (5210 <lv_obj_get_draw_rect_ext_pad_size+0x1e8>)
    5036:	4798      	blx	r3
    if(sh_width) {
    5038:	4607      	mov	r7, r0
    503a:	bb68      	cbnz	r0, 5098 <lv_obj_get_draw_rect_ext_pad_size+0x70>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
    503c:	227f      	movs	r2, #127	; 0x7f
    503e:	4631      	mov	r1, r6
    5040:	4620      	mov	r0, r4
    5042:	4b74      	ldr	r3, [pc, #464]	; (5214 <lv_obj_get_draw_rect_ext_pad_size+0x1ec>)
    5044:	4798      	blx	r3
    if(value_str) {
    5046:	4680      	mov	r8, r0
    5048:	b130      	cbz	r0, 5058 <lv_obj_get_draw_rect_ext_pad_size+0x30>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
    504a:	227c      	movs	r2, #124	; 0x7c
    504c:	4631      	mov	r1, r6
    504e:	4620      	mov	r0, r4
    5050:	4b71      	ldr	r3, [pc, #452]	; (5218 <lv_obj_get_draw_rect_ext_pad_size+0x1f0>)
    5052:	4798      	blx	r3
        if(value_opa > LV_OPA_MIN) {
    5054:	2805      	cmp	r0, #5
    5056:	d84c      	bhi.n	50f2 <lv_obj_get_draw_rect_ext_pad_size+0xca>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
    5058:	2240      	movs	r2, #64	; 0x40
    505a:	4631      	mov	r1, r6
    505c:	4620      	mov	r0, r4
    505e:	4b6c      	ldr	r3, [pc, #432]	; (5210 <lv_obj_get_draw_rect_ext_pad_size+0x1e8>)
    5060:	4798      	blx	r3
    if(outline_width) {
    5062:	4605      	mov	r5, r0
    5064:	2800      	cmp	r0, #0
    5066:	f040 80bf 	bne.w	51e8 <lv_obj_get_draw_rect_ext_pad_size+0x1c0>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
    506a:	2204      	movs	r2, #4
    506c:	4631      	mov	r1, r6
    506e:	4620      	mov	r0, r4
    5070:	f8df 819c 	ldr.w	r8, [pc, #412]	; 5210 <lv_obj_get_draw_rect_ext_pad_size+0x1e8>
    5074:	47c0      	blx	r8
    5076:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
    5078:	2205      	movs	r2, #5
    507a:	4631      	mov	r1, r6
    507c:	4620      	mov	r0, r4
    507e:	47c0      	blx	r8
    lv_coord_t wh = LV_MATH_MAX(w, h);
    5080:	42a8      	cmp	r0, r5
    5082:	bfb8      	it	lt
    5084:	4628      	movlt	r0, r5
    5086:	b200      	sxth	r0, r0
    if(wh > 0) s += wh;
    5088:	2800      	cmp	r0, #0
    508a:	bfc4      	itt	gt
    508c:	19c0      	addgt	r0, r0, r7
    508e:	b207      	sxthgt	r7, r0
}
    5090:	4638      	mov	r0, r7
    5092:	b009      	add	sp, #36	; 0x24
    5094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa, scalar)
    5098:	225c      	movs	r2, #92	; 0x5c
    509a:	4631      	mov	r1, r6
    509c:	4620      	mov	r0, r4
    509e:	4b5e      	ldr	r3, [pc, #376]	; (5218 <lv_obj_get_draw_rect_ext_pad_size+0x1f0>)
    50a0:	4798      	blx	r3
        if(sh_opa > LV_OPA_MIN) {
    50a2:	2805      	cmp	r0, #5
    50a4:	d801      	bhi.n	50aa <lv_obj_get_draw_rect_ext_pad_size+0x82>
    lv_coord_t s = 0;
    50a6:	2700      	movs	r7, #0
    50a8:	e7c8      	b.n	503c <lv_obj_get_draw_rect_ext_pad_size+0x14>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
    50aa:	2253      	movs	r2, #83	; 0x53
    50ac:	4631      	mov	r1, r6
    50ae:	4620      	mov	r0, r4
    50b0:	4d57      	ldr	r5, [pc, #348]	; (5210 <lv_obj_get_draw_rect_ext_pad_size+0x1e8>)
    50b2:	47a8      	blx	r5
            sh_width = sh_width / 2;    /*THe blur adds only half width*/
    50b4:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
            sh_width++;
    50b8:	eb00 0767 	add.w	r7, r0, r7, asr #1
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
    50bc:	3701      	adds	r7, #1
    50be:	b2bf      	uxth	r7, r7
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
    50c0:	2251      	movs	r2, #81	; 0x51
    50c2:	4631      	mov	r1, r6
    50c4:	4620      	mov	r0, r4
    50c6:	47a8      	blx	r5
    50c8:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
    50ca:	2252      	movs	r2, #82	; 0x52
    50cc:	4631      	mov	r1, r6
    50ce:	4620      	mov	r0, r4
    50d0:	47a8      	blx	r5
            sh_width += LV_MATH_MAX(LV_MATH_ABS(sh_ofs_x), LV_MATH_ABS(sh_ofs_y));
    50d2:	2800      	cmp	r0, #0
    50d4:	bfb8      	it	lt
    50d6:	4240      	neglt	r0, r0
    50d8:	f1b8 0f00 	cmp.w	r8, #0
    50dc:	bfb8      	it	lt
    50de:	f1c8 0800 	rsblt	r8, r8, #0
    50e2:	4540      	cmp	r0, r8
    50e4:	bfac      	ite	ge
    50e6:	183f      	addge	r7, r7, r0
    50e8:	4447      	addlt	r7, r8
            s = LV_MATH_MAX(s, sh_width);
    50ea:	b238      	sxth	r0, r7
    50ec:	ea20 77e0 	bic.w	r7, r0, r0, asr #31
    50f0:	e7a4      	b.n	503c <lv_obj_get_draw_rect_ext_pad_size+0x14>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
    50f2:	2270      	movs	r2, #112	; 0x70
    50f4:	4631      	mov	r1, r6
    50f6:	4620      	mov	r0, r4
    50f8:	4d45      	ldr	r5, [pc, #276]	; (5210 <lv_obj_get_draw_rect_ext_pad_size+0x1e8>)
    50fa:	47a8      	blx	r5
    50fc:	4682      	mov	sl, r0
    50fe:	2270      	movs	r2, #112	; 0x70
    5100:	4631      	mov	r1, r6
    5102:	4620      	mov	r0, r4
    5104:	47a8      	blx	r5
    5106:	4683      	mov	fp, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
    5108:	227e      	movs	r2, #126	; 0x7e
    510a:	4631      	mov	r1, r6
    510c:	4620      	mov	r0, r4
    510e:	4b41      	ldr	r3, [pc, #260]	; (5214 <lv_obj_get_draw_rect_ext_pad_size+0x1ec>)
    5110:	4798      	blx	r3
            _lv_txt_get_size(&txt_size, value_str, font, letter_space, line_space, LV_COORD_MAX, LV_TXT_FLAG_NONE);
    5112:	f04f 0900 	mov.w	r9, #0
    5116:	f8cd 9008 	str.w	r9, [sp, #8]
    511a:	f647 4318 	movw	r3, #31768	; 0x7c18
    511e:	9301      	str	r3, [sp, #4]
    5120:	f8cd b000 	str.w	fp, [sp]
    5124:	4653      	mov	r3, sl
    5126:	4602      	mov	r2, r0
    5128:	4641      	mov	r1, r8
    512a:	a804      	add	r0, sp, #16
    512c:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 521c <lv_obj_get_draw_rect_ext_pad_size+0x1f4>
    5130:	47c0      	blx	r8
            value_area.x1 = 0;
    5132:	f8ad 9018 	strh.w	r9, [sp, #24]
            value_area.y1 = 0;
    5136:	f8ad 901a 	strh.w	r9, [sp, #26]
            value_area.x2 = txt_size.x - 1;
    513a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    513e:	3b01      	subs	r3, #1
    5140:	f8ad 301c 	strh.w	r3, [sp, #28]
            value_area.y2 = txt_size.y - 1;
    5144:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    5148:	3b01      	subs	r3, #1
    514a:	f8ad 301e 	strh.w	r3, [sp, #30]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
    514e:	2275      	movs	r2, #117	; 0x75
    5150:	4631      	mov	r1, r6
    5152:	4620      	mov	r0, r4
    5154:	47a8      	blx	r5
    5156:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
    5158:	2273      	movs	r2, #115	; 0x73
    515a:	4631      	mov	r1, r6
    515c:	4620      	mov	r0, r4
    515e:	47a8      	blx	r5
    5160:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
    5162:	2274      	movs	r2, #116	; 0x74
    5164:	4631      	mov	r1, r6
    5166:	4620      	mov	r0, r4
    5168:	47a8      	blx	r5
    516a:	4605      	mov	r5, r0
            _lv_area_align(&obj->coords, &value_area, align, &p_align);
    516c:	ab05      	add	r3, sp, #20
    516e:	fa5f f289 	uxtb.w	r2, r9
    5172:	a906      	add	r1, sp, #24
    5174:	f104 0010 	add.w	r0, r4, #16
    5178:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 5220 <lv_obj_get_draw_rect_ext_pad_size+0x1f8>
    517c:	47c8      	blx	r9
            value_area.x1 += p_align.x + xofs;
    517e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    5182:	4443      	add	r3, r8
    5184:	b29b      	uxth	r3, r3
            value_area.y1 += p_align.y + yofs;
    5186:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    518a:	442a      	add	r2, r5
    518c:	b292      	uxth	r2, r2
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
    518e:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
            value_area.x1 += p_align.x + xofs;
    5192:	f8bd 1018 	ldrh.w	r1, [sp, #24]
    5196:	4419      	add	r1, r3
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
    5198:	b209      	sxth	r1, r1
    519a:	1a40      	subs	r0, r0, r1
    519c:	42b8      	cmp	r0, r7
    519e:	bfb8      	it	lt
    51a0:	4638      	movlt	r0, r7
            s = LV_MATH_MAX(s, obj->coords.y1 - value_area.y1);
    51a2:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
            value_area.y1 += p_align.y + yofs;
    51a6:	f8bd 701a 	ldrh.w	r7, [sp, #26]
    51aa:	4417      	add	r7, r2
            s = LV_MATH_MAX(s, obj->coords.y1 - value_area.y1);
    51ac:	b23f      	sxth	r7, r7
    51ae:	1bcf      	subs	r7, r1, r7
    51b0:	b200      	sxth	r0, r0
    51b2:	4287      	cmp	r7, r0
    51b4:	bfb8      	it	lt
    51b6:	4607      	movlt	r7, r0
            value_area.x2 += p_align.x + xofs;
    51b8:	f8bd 001c 	ldrh.w	r0, [sp, #28]
    51bc:	4403      	add	r3, r0
            s = LV_MATH_MAX(s, value_area.x2 - obj->coords.x2);
    51be:	b21b      	sxth	r3, r3
    51c0:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
    51c4:	1a18      	subs	r0, r3, r0
    51c6:	b23b      	sxth	r3, r7
    51c8:	4283      	cmp	r3, r0
    51ca:	bfb8      	it	lt
    51cc:	4603      	movlt	r3, r0
            value_area.y2 += p_align.y + yofs;
    51ce:	f8bd 001e 	ldrh.w	r0, [sp, #30]
    51d2:	4410      	add	r0, r2
            s = LV_MATH_MAX(s, value_area.y2 - obj->coords.y2);
    51d4:	b200      	sxth	r0, r0
    51d6:	f9b4 7016 	ldrsh.w	r7, [r4, #22]
    51da:	1bc7      	subs	r7, r0, r7
    51dc:	b218      	sxth	r0, r3
    51de:	42b8      	cmp	r0, r7
    51e0:	bfb8      	it	lt
    51e2:	4638      	movlt	r0, r7
    51e4:	b207      	sxth	r7, r0
    51e6:	e737      	b.n	5058 <lv_obj_get_draw_rect_ext_pad_size+0x30>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
    51e8:	224c      	movs	r2, #76	; 0x4c
    51ea:	4631      	mov	r1, r6
    51ec:	4620      	mov	r0, r4
    51ee:	4b0a      	ldr	r3, [pc, #40]	; (5218 <lv_obj_get_draw_rect_ext_pad_size+0x1f0>)
    51f0:	4798      	blx	r3
        if(outline_opa > LV_OPA_MIN) {
    51f2:	2805      	cmp	r0, #5
    51f4:	f67f af39 	bls.w	506a <lv_obj_get_draw_rect_ext_pad_size+0x42>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
    51f8:	2241      	movs	r2, #65	; 0x41
    51fa:	4631      	mov	r1, r6
    51fc:	4620      	mov	r0, r4
    51fe:	4b04      	ldr	r3, [pc, #16]	; (5210 <lv_obj_get_draw_rect_ext_pad_size+0x1e8>)
    5200:	4798      	blx	r3
            s = LV_MATH_MAX(s, outline_pad + outline_width);
    5202:	4428      	add	r0, r5
    5204:	42b8      	cmp	r0, r7
    5206:	bfb8      	it	lt
    5208:	4638      	movlt	r0, r7
    520a:	b207      	sxth	r7, r0
    520c:	e72d      	b.n	506a <lv_obj_get_draw_rect_ext_pad_size+0x42>
    520e:	bf00      	nop
    5210:	000041d5 	.word	0x000041d5
    5214:	000043a1 	.word	0x000043a1
    5218:	0000430d 	.word	0x0000430d
    521c:	000127c1 	.word	0x000127c1
    5220:	00010a25 	.word	0x00010a25

00005224 <lv_obj_signal>:
    if(sign == LV_SIGNAL_GET_STYLE) {
    5224:	2908      	cmp	r1, #8
    5226:	d01a      	beq.n	525e <lv_obj_signal+0x3a>
{
    5228:	b510      	push	{r4, lr}
    522a:	4604      	mov	r4, r0
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
    522c:	2907      	cmp	r1, #7
    522e:	d020      	beq.n	5272 <lv_obj_signal+0x4e>
    if(sign == LV_SIGNAL_CHILD_CHG) {
    5230:	2901      	cmp	r1, #1
    5232:	d023      	beq.n	527c <lv_obj_signal+0x58>
    else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
    5234:	2906      	cmp	r1, #6
    5236:	d027      	beq.n	5288 <lv_obj_signal+0x64>
    else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
    5238:	2903      	cmp	r1, #3
    523a:	d030      	beq.n	529e <lv_obj_signal+0x7a>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
    523c:	2904      	cmp	r1, #4
    523e:	d039      	beq.n	52b4 <lv_obj_signal+0x90>
    else if(sign == LV_SIGNAL_PRESSED) {
    5240:	290b      	cmp	r1, #11
    5242:	d03b      	beq.n	52bc <lv_obj_signal+0x98>
    else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
    5244:	f1a1 030d 	sub.w	r3, r1, #13
    5248:	b2db      	uxtb	r3, r3
    524a:	2b01      	cmp	r3, #1
    524c:	d93b      	bls.n	52c6 <lv_obj_signal+0xa2>
    else if(sign == LV_SIGNAL_FOCUS) {
    524e:	2916      	cmp	r1, #22
    5250:	d03e      	beq.n	52d0 <lv_obj_signal+0xac>
    else if(sign == LV_SIGNAL_DEFOCUS) {
    5252:	2917      	cmp	r1, #23
    5254:	d051      	beq.n	52fa <lv_obj_signal+0xd6>
    else if(sign == LV_SIGNAL_CLEANUP) {
    5256:	2900      	cmp	r1, #0
    5258:	d054      	beq.n	5304 <lv_obj_signal+0xe0>
    lv_res_t res = LV_RES_OK;
    525a:	2001      	movs	r0, #1
}
    525c:	bd10      	pop	{r4, pc}
        if(info->part == LV_OBJ_PART_MAIN) info->result = &obj->style_list;
    525e:	7813      	ldrb	r3, [r2, #0]
    5260:	b91b      	cbnz	r3, 526a <lv_obj_signal+0x46>
    5262:	3028      	adds	r0, #40	; 0x28
    5264:	6050      	str	r0, [r2, #4]
        return LV_RES_OK;
    5266:	2001      	movs	r0, #1
    5268:	4770      	bx	lr
        else info->result = NULL;
    526a:	2300      	movs	r3, #0
    526c:	6053      	str	r3, [r2, #4]
        return LV_RES_OK;
    526e:	2001      	movs	r0, #1
    5270:	4770      	bx	lr
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
    5272:	4926      	ldr	r1, [pc, #152]	; (530c <lv_obj_signal+0xe8>)
    5274:	4610      	mov	r0, r2
    5276:	4b26      	ldr	r3, [pc, #152]	; (5310 <lv_obj_signal+0xec>)
    5278:	4798      	blx	r3
    527a:	bd10      	pop	{r4, pc}
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
    527c:	4b25      	ldr	r3, [pc, #148]	; (5314 <lv_obj_signal+0xf0>)
    527e:	4798      	blx	r3
    5280:	f080 0001 	eor.w	r0, r0, #1
        return LV_RES_OK;
    5284:	b2c0      	uxtb	r0, r0
    5286:	bd10      	pop	{r4, pc}
        lv_coord_t d = lv_obj_get_draw_rect_ext_pad_size(obj, LV_OBJ_PART_MAIN);
    5288:	2100      	movs	r1, #0
    528a:	4b23      	ldr	r3, [pc, #140]	; (5318 <lv_obj_signal+0xf4>)
    528c:	4798      	blx	r3
        obj->ext_draw_pad = LV_MATH_MAX(obj->ext_draw_pad, d);
    528e:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
    5292:	4298      	cmp	r0, r3
    5294:	bfb8      	it	lt
    5296:	4618      	movlt	r0, r3
    5298:	8660      	strh	r0, [r4, #50]	; 0x32
    lv_res_t res = LV_RES_OK;
    529a:	2001      	movs	r0, #1
    529c:	bd10      	pop	{r4, pc}
        if(obj->realign.auto_realign) {
    529e:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
    52a2:	f013 0f01 	tst.w	r3, #1
    52a6:	d101      	bne.n	52ac <lv_obj_signal+0x88>
    lv_res_t res = LV_RES_OK;
    52a8:	2001      	movs	r0, #1
    52aa:	bd10      	pop	{r4, pc}
            lv_obj_realign(obj);
    52ac:	4b1b      	ldr	r3, [pc, #108]	; (531c <lv_obj_signal+0xf8>)
    52ae:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
    52b0:	2001      	movs	r0, #1
    52b2:	bd10      	pop	{r4, pc}
        lv_obj_refresh_ext_draw_pad(obj);
    52b4:	4b1a      	ldr	r3, [pc, #104]	; (5320 <lv_obj_signal+0xfc>)
    52b6:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
    52b8:	2001      	movs	r0, #1
    52ba:	bd10      	pop	{r4, pc}
        lv_obj_add_state(obj, LV_STATE_PRESSED);
    52bc:	2110      	movs	r1, #16
    52be:	4b19      	ldr	r3, [pc, #100]	; (5324 <lv_obj_signal+0x100>)
    52c0:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
    52c2:	2001      	movs	r0, #1
    52c4:	bd10      	pop	{r4, pc}
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
    52c6:	2110      	movs	r1, #16
    52c8:	4b17      	ldr	r3, [pc, #92]	; (5328 <lv_obj_signal+0x104>)
    52ca:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
    52cc:	2001      	movs	r0, #1
    52ce:	bd10      	pop	{r4, pc}
        if(lv_group_get_editing(lv_obj_get_group(obj))) {
    52d0:	4b16      	ldr	r3, [pc, #88]	; (532c <lv_obj_signal+0x108>)
    52d2:	4798      	blx	r3
    52d4:	4b16      	ldr	r3, [pc, #88]	; (5330 <lv_obj_signal+0x10c>)
    52d6:	4798      	blx	r3
    52d8:	b128      	cbz	r0, 52e6 <lv_obj_signal+0xc2>
            lv_obj_add_state(obj, state);
    52da:	2106      	movs	r1, #6
    52dc:	4620      	mov	r0, r4
    52de:	4b11      	ldr	r3, [pc, #68]	; (5324 <lv_obj_signal+0x100>)
    52e0:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
    52e2:	2001      	movs	r0, #1
    52e4:	bd10      	pop	{r4, pc}
            lv_obj_add_state(obj, LV_STATE_FOCUSED);
    52e6:	2102      	movs	r1, #2
    52e8:	4620      	mov	r0, r4
    52ea:	4b0e      	ldr	r3, [pc, #56]	; (5324 <lv_obj_signal+0x100>)
    52ec:	4798      	blx	r3
            lv_obj_clear_state(obj, LV_STATE_EDITED);
    52ee:	2104      	movs	r1, #4
    52f0:	4620      	mov	r0, r4
    52f2:	4b0d      	ldr	r3, [pc, #52]	; (5328 <lv_obj_signal+0x104>)
    52f4:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
    52f6:	2001      	movs	r0, #1
    52f8:	bd10      	pop	{r4, pc}
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED);
    52fa:	2106      	movs	r1, #6
    52fc:	4b0a      	ldr	r3, [pc, #40]	; (5328 <lv_obj_signal+0x104>)
    52fe:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
    5300:	2001      	movs	r0, #1
    5302:	bd10      	pop	{r4, pc}
        lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
    5304:	4b0b      	ldr	r3, [pc, #44]	; (5334 <lv_obj_signal+0x110>)
    5306:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
    5308:	2001      	movs	r0, #1
    530a:	bd10      	pop	{r4, pc}
    530c:	00017890 	.word	0x00017890
    5310:	00004a0d 	.word	0x00004a0d
    5314:	00004151 	.word	0x00004151
    5318:	00005029 	.word	0x00005029
    531c:	00003979 	.word	0x00003979
    5320:	00002f0d 	.word	0x00002f0d
    5324:	00004931 	.word	0x00004931
    5328:	0000496d 	.word	0x0000496d
    532c:	000049a9 	.word	0x000049a9
    5330:	00002c17 	.word	0x00002c17
    5334:	00003255 	.word	0x00003255

00005338 <lv_refr_get_top_obj>:
 * @param area_p pointer to an area
 * @param obj the first object to start the searching (typically a screen)
 * @return
 */
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)
{
    5338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    533c:	4605      	mov	r5, r0
    533e:	4688      	mov	r8, r1
    lv_obj_t * found_p = NULL;

    /*If this object is fully cover the draw area check the children too */
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
    5340:	2200      	movs	r2, #0
    5342:	3110      	adds	r1, #16
    5344:	4b1f      	ldr	r3, [pc, #124]	; (53c4 <lv_refr_get_top_obj+0x8c>)
    5346:	4798      	blx	r3
    5348:	b350      	cbz	r0, 53a0 <lv_refr_get_top_obj+0x68>
    534a:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
    534e:	f013 0f10 	tst.w	r3, #16
    5352:	d127      	bne.n	53a4 <lv_refr_get_top_obj+0x6c>
        lv_design_res_t design_res = obj->design_cb ? obj->design_cb(obj, area_p,
    5354:	f8d8 3020 	ldr.w	r3, [r8, #32]
    5358:	b343      	cbz	r3, 53ac <lv_refr_get_top_obj+0x74>
    535a:	2202      	movs	r2, #2
    535c:	4629      	mov	r1, r5
    535e:	4640      	mov	r0, r8
    5360:	4798      	blx	r3
    5362:	4681      	mov	r9, r0
                                                                     LV_DESIGN_COVER_CHK) : LV_DESIGN_RES_NOT_COVER;
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
    5364:	2803      	cmp	r0, #3
    5366:	d01f      	beq.n	53a8 <lv_refr_get_top_obj+0x70>

        lv_obj_t * i;
        _LV_LL_READ(obj->child_ll, i) {
    5368:	f108 0604 	add.w	r6, r8, #4
    536c:	4630      	mov	r0, r6
    536e:	4b16      	ldr	r3, [pc, #88]	; (53c8 <lv_refr_get_top_obj+0x90>)
    5370:	4798      	blx	r3
    5372:	4604      	mov	r4, r0
    5374:	b160      	cbz	r0, 5390 <lv_refr_get_top_obj+0x58>
    5376:	4f15      	ldr	r7, [pc, #84]	; (53cc <lv_refr_get_top_obj+0x94>)
            found_p = lv_refr_get_top_obj(area_p, i);
    5378:	4621      	mov	r1, r4
    537a:	4628      	mov	r0, r5
    537c:	f7ff ffdc 	bl	5338 <lv_refr_get_top_obj>

            /*If a children is ok then break*/
            if(found_p != NULL) {
    5380:	4603      	mov	r3, r0
    5382:	b950      	cbnz	r0, 539a <lv_refr_get_top_obj+0x62>
        _LV_LL_READ(obj->child_ll, i) {
    5384:	4621      	mov	r1, r4
    5386:	4630      	mov	r0, r6
    5388:	47b8      	blx	r7
    538a:	4604      	mov	r4, r0
    538c:	2800      	cmp	r0, #0
    538e:	d1f3      	bne.n	5378 <lv_refr_get_top_obj+0x40>
        }

        /*If no better children use this object*/
        if(found_p == NULL) {
            if(design_res == LV_DESIGN_RES_COVER) {
                found_p = obj;
    5390:	f1b9 0f01 	cmp.w	r9, #1
    5394:	bf0c      	ite	eq
    5396:	4643      	moveq	r3, r8
    5398:	2300      	movne	r3, #0
            }
        }
    }

    return found_p;
}
    539a:	4618      	mov	r0, r3
    539c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    lv_obj_t * found_p = NULL;
    53a0:	2300      	movs	r3, #0
    53a2:	e7fa      	b.n	539a <lv_refr_get_top_obj+0x62>
    53a4:	2300      	movs	r3, #0
    53a6:	e7f8      	b.n	539a <lv_refr_get_top_obj+0x62>
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
    53a8:	2300      	movs	r3, #0
    53aa:	e7f6      	b.n	539a <lv_refr_get_top_obj+0x62>
        _LV_LL_READ(obj->child_ll, i) {
    53ac:	f108 0604 	add.w	r6, r8, #4
    53b0:	4630      	mov	r0, r6
    53b2:	4b05      	ldr	r3, [pc, #20]	; (53c8 <lv_refr_get_top_obj+0x90>)
    53b4:	4798      	blx	r3
    53b6:	4604      	mov	r4, r0
        lv_design_res_t design_res = obj->design_cb ? obj->design_cb(obj, area_p,
    53b8:	f04f 0902 	mov.w	r9, #2
        _LV_LL_READ(obj->child_ll, i) {
    53bc:	2800      	cmp	r0, #0
    53be:	d1da      	bne.n	5376 <lv_refr_get_top_obj+0x3e>
    53c0:	4603      	mov	r3, r0
    53c2:	e7ea      	b.n	539a <lv_refr_get_top_obj+0x62>
    53c4:	0001096d 	.word	0x0001096d
    53c8:	00011189 	.word	0x00011189
    53cc:	0001119d 	.word	0x0001119d

000053d0 <lv_refr_obj>:
 * @param mask_ori_p pointer to an area, the objects will be drawn only here
 */
static void lv_refr_obj(lv_obj_t * obj, const lv_area_t * mask_ori_p)
{
    /*Do not refresh hidden objects*/
    if(obj->hidden != 0) return;
    53d0:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
    53d4:	f013 0f10 	tst.w	r3, #16
    53d8:	d000      	beq.n	53dc <lv_refr_obj+0xc>
    53da:	4770      	bx	lr
{
    53dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    53e0:	b08b      	sub	sp, #44	; 0x2c
    53e2:	460e      	mov	r6, r1
    53e4:	4605      	mov	r5, r0
    /* Truncate the original mask to the coordinates of the parent
     * because the parent and its children are visible only here */
    lv_area_t obj_mask;
    lv_area_t obj_ext_mask;
    lv_area_t obj_area;
    lv_coord_t ext_size = obj->ext_draw_pad;
    53e6:	f9b0 4032 	ldrsh.w	r4, [r0, #50]	; 0x32
    lv_obj_get_coords(obj, &obj_area);
    53ea:	a904      	add	r1, sp, #16
    53ec:	4b35      	ldr	r3, [pc, #212]	; (54c4 <lv_refr_obj+0xf4>)
    53ee:	4798      	blx	r3
    obj_area.x1 -= ext_size;
    53f0:	b2a3      	uxth	r3, r4
    53f2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    53f6:	1ad2      	subs	r2, r2, r3
    53f8:	f8ad 2010 	strh.w	r2, [sp, #16]
    obj_area.y1 -= ext_size;
    53fc:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    5400:	1ad2      	subs	r2, r2, r3
    5402:	f8ad 2012 	strh.w	r2, [sp, #18]
    obj_area.x2 += ext_size;
    5406:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    540a:	441a      	add	r2, r3
    540c:	f8ad 2014 	strh.w	r2, [sp, #20]
    obj_area.y2 += ext_size;
    5410:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5414:	4413      	add	r3, r2
    5416:	f8ad 3016 	strh.w	r3, [sp, #22]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
    541a:	aa04      	add	r2, sp, #16
    541c:	4631      	mov	r1, r6
    541e:	a806      	add	r0, sp, #24
    5420:	4b29      	ldr	r3, [pc, #164]	; (54c8 <lv_refr_obj+0xf8>)
    5422:	4798      	blx	r3

    /*Draw the parent and its children only if they ore on 'mask_parent'*/
    if(union_ok != false) {
    5424:	b1a8      	cbz	r0, 5452 <lv_refr_obj+0x82>

        /* Redraw the object */
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
    5426:	6a2b      	ldr	r3, [r5, #32]
    5428:	b11b      	cbz	r3, 5432 <lv_refr_obj+0x62>
    542a:	2200      	movs	r2, #0
    542c:	a906      	add	r1, sp, #24
    542e:	4628      	mov	r0, r5
    5430:	4798      	blx	r3
#if LV_COLOR_DEPTH == 32
        debug_color.ch.alpha = 0xff;
#endif
#endif
        /*Create a new 'obj_mask' without 'ext_size' because the children can't be visible there*/
        lv_obj_get_coords(obj, &obj_area);
    5432:	a904      	add	r1, sp, #16
    5434:	4628      	mov	r0, r5
    5436:	4b23      	ldr	r3, [pc, #140]	; (54c4 <lv_refr_obj+0xf4>)
    5438:	4798      	blx	r3
        union_ok = _lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
    543a:	aa04      	add	r2, sp, #16
    543c:	4631      	mov	r1, r6
    543e:	a808      	add	r0, sp, #32
    5440:	4b21      	ldr	r3, [pc, #132]	; (54c8 <lv_refr_obj+0xf8>)
    5442:	4798      	blx	r3
        if(union_ok != false) {
    5444:	b940      	cbnz	r0, 5458 <lv_refr_obj+0x88>
                }
            }
        }

        /* If all the children are redrawn make 'post draw' design */
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
    5446:	6a2b      	ldr	r3, [r5, #32]
    5448:	b11b      	cbz	r3, 5452 <lv_refr_obj+0x82>
    544a:	2201      	movs	r2, #1
    544c:	a906      	add	r1, sp, #24
    544e:	4628      	mov	r0, r5
    5450:	4798      	blx	r3
    }
}
    5452:	b00b      	add	sp, #44	; 0x2c
    5454:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
    5458:	f105 0804 	add.w	r8, r5, #4
    545c:	4640      	mov	r0, r8
    545e:	4b1b      	ldr	r3, [pc, #108]	; (54cc <lv_refr_obj+0xfc>)
    5460:	4798      	blx	r3
    5462:	4604      	mov	r4, r0
    5464:	2800      	cmp	r0, #0
    5466:	d0ee      	beq.n	5446 <lv_refr_obj+0x76>
                lv_obj_get_coords(child_p, &child_area);
    5468:	f8df 9058 	ldr.w	r9, [pc, #88]	; 54c4 <lv_refr_obj+0xf4>
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
    546c:	4e16      	ldr	r6, [pc, #88]	; (54c8 <lv_refr_obj+0xf8>)
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
    546e:	4f18      	ldr	r7, [pc, #96]	; (54d0 <lv_refr_obj+0x100>)
    5470:	e005      	b.n	547e <lv_refr_obj+0xae>
    5472:	4621      	mov	r1, r4
    5474:	4640      	mov	r0, r8
    5476:	47b8      	blx	r7
    5478:	4604      	mov	r4, r0
    547a:	2800      	cmp	r0, #0
    547c:	d0e3      	beq.n	5446 <lv_refr_obj+0x76>
                lv_obj_get_coords(child_p, &child_area);
    547e:	a902      	add	r1, sp, #8
    5480:	4620      	mov	r0, r4
    5482:	47c8      	blx	r9
                child_area.x1 -= ext_size;
    5484:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    5486:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    548a:	1ad2      	subs	r2, r2, r3
    548c:	f8ad 2008 	strh.w	r2, [sp, #8]
                child_area.y1 -= ext_size;
    5490:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    5494:	1ad2      	subs	r2, r2, r3
    5496:	f8ad 200a 	strh.w	r2, [sp, #10]
                child_area.x2 += ext_size;
    549a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    549e:	441a      	add	r2, r3
    54a0:	f8ad 200c 	strh.w	r2, [sp, #12]
                child_area.y2 += ext_size;
    54a4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    54a8:	4413      	add	r3, r2
    54aa:	f8ad 300e 	strh.w	r3, [sp, #14]
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
    54ae:	aa02      	add	r2, sp, #8
    54b0:	a908      	add	r1, sp, #32
    54b2:	4668      	mov	r0, sp
    54b4:	47b0      	blx	r6
                if(union_ok) {
    54b6:	2800      	cmp	r0, #0
    54b8:	d0db      	beq.n	5472 <lv_refr_obj+0xa2>
                    lv_refr_obj(child_p, &mask_child);
    54ba:	4669      	mov	r1, sp
    54bc:	4620      	mov	r0, r4
    54be:	f7ff ff87 	bl	53d0 <lv_refr_obj>
    54c2:	e7d6      	b.n	5472 <lv_refr_obj+0xa2>
    54c4:	00003069 	.word	0x00003069
    54c8:	00010719 	.word	0x00010719
    54cc:	00011193 	.word	0x00011193
    54d0:	000111c9 	.word	0x000111c9

000054d4 <lv_refr_obj_and_children>:
{
    54d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    54d8:	460f      	mov	r7, r1
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
    54da:	4604      	mov	r4, r0
    54dc:	b170      	cbz	r0, 54fc <lv_refr_obj_and_children+0x28>
    lv_refr_obj(top_p, mask_p);
    54de:	4639      	mov	r1, r7
    54e0:	4620      	mov	r0, r4
    54e2:	4b1a      	ldr	r3, [pc, #104]	; (554c <lv_refr_obj_and_children+0x78>)
    54e4:	4798      	blx	r3
    par = lv_obj_get_parent(top_p);
    54e6:	4620      	mov	r0, r4
    54e8:	4b19      	ldr	r3, [pc, #100]	; (5550 <lv_refr_obj_and_children+0x7c>)
    54ea:	4798      	blx	r3
    while(par != NULL) {
    54ec:	4681      	mov	r9, r0
    54ee:	b160      	cbz	r0, 550a <lv_refr_obj_and_children+0x36>
        lv_obj_t * i = _lv_ll_get_prev(&(par->child_ll), border_p);
    54f0:	4e18      	ldr	r6, [pc, #96]	; (5554 <lv_refr_obj_and_children+0x80>)
            lv_refr_obj(i, mask_p);
    54f2:	f8df 8058 	ldr.w	r8, [pc, #88]	; 554c <lv_refr_obj_and_children+0x78>
        par = lv_obj_get_parent(par);
    54f6:	f8df a058 	ldr.w	sl, [pc, #88]	; 5550 <lv_refr_obj_and_children+0x7c>
    54fa:	e00e      	b.n	551a <lv_refr_obj_and_children+0x46>
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
    54fc:	4b16      	ldr	r3, [pc, #88]	; (5558 <lv_refr_obj_and_children+0x84>)
    54fe:	6818      	ldr	r0, [r3, #0]
    5500:	4b16      	ldr	r3, [pc, #88]	; (555c <lv_refr_obj_and_children+0x88>)
    5502:	4798      	blx	r3
    if(top_p == NULL) return;  /*Shouldn't happen*/
    5504:	4604      	mov	r4, r0
    5506:	2800      	cmp	r0, #0
    5508:	d1e9      	bne.n	54de <lv_refr_obj_and_children+0xa>
    550a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        par = lv_obj_get_parent(par);
    550e:	4648      	mov	r0, r9
    5510:	47d0      	blx	sl
    5512:	464c      	mov	r4, r9
    while(par != NULL) {
    5514:	4681      	mov	r9, r0
    5516:	2800      	cmp	r0, #0
    5518:	d0f7      	beq.n	550a <lv_refr_obj_and_children+0x36>
        lv_obj_t * i = _lv_ll_get_prev(&(par->child_ll), border_p);
    551a:	f109 0504 	add.w	r5, r9, #4
    551e:	4621      	mov	r1, r4
    5520:	4628      	mov	r0, r5
    5522:	47b0      	blx	r6
        while(i != NULL) {
    5524:	4604      	mov	r4, r0
    5526:	b140      	cbz	r0, 553a <lv_refr_obj_and_children+0x66>
            lv_refr_obj(i, mask_p);
    5528:	4639      	mov	r1, r7
    552a:	4620      	mov	r0, r4
    552c:	47c0      	blx	r8
            i = _lv_ll_get_prev(&(par->child_ll), i);
    552e:	4621      	mov	r1, r4
    5530:	4628      	mov	r0, r5
    5532:	47b0      	blx	r6
        while(i != NULL) {
    5534:	4604      	mov	r4, r0
    5536:	2800      	cmp	r0, #0
    5538:	d1f6      	bne.n	5528 <lv_refr_obj_and_children+0x54>
        if(par->design_cb) par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
    553a:	f8d9 3020 	ldr.w	r3, [r9, #32]
    553e:	2b00      	cmp	r3, #0
    5540:	d0e5      	beq.n	550e <lv_refr_obj_and_children+0x3a>
    5542:	2201      	movs	r2, #1
    5544:	4639      	mov	r1, r7
    5546:	4648      	mov	r0, r9
    5548:	4798      	blx	r3
    554a:	e7e0      	b.n	550e <lv_refr_obj_and_children+0x3a>
    554c:	000053d1 	.word	0x000053d1
    5550:	00002f3d 	.word	0x00002f3d
    5554:	000111c9 	.word	0x000111c9
    5558:	20002688 	.word	0x20002688
    555c:	0000298d 	.word	0x0000298d

00005560 <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
    5560:	b538      	push	{r3, r4, r5, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
    5562:	4d1a      	ldr	r5, [pc, #104]	; (55cc <lv_refr_vdb_flush+0x6c>)
    5564:	6828      	ldr	r0, [r5, #0]
    5566:	4b1a      	ldr	r3, [pc, #104]	; (55d0 <lv_refr_vdb_flush+0x70>)
    5568:	4798      	blx	r3
    556a:	4604      	mov	r4, r0

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
    556c:	6828      	ldr	r0, [r5, #0]
    556e:	4b19      	ldr	r3, [pc, #100]	; (55d4 <lv_refr_vdb_flush+0x74>)
    5570:	4798      	blx	r3
    5572:	b978      	cbnz	r0, 5594 <lv_refr_vdb_flush+0x34>
        while(vdb->flushing) {
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
        }
    }

    vdb->flushing = 1;
    5574:	2301      	movs	r3, #1
    5576:	61a3      	str	r3, [r4, #24]

    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
    5578:	4b14      	ldr	r3, [pc, #80]	; (55cc <lv_refr_vdb_flush+0x6c>)
    557a:	6818      	ldr	r0, [r3, #0]
    557c:	6843      	ldr	r3, [r0, #4]
    557e:	6a1a      	ldr	r2, [r3, #32]
    5580:	f012 0f01 	tst.w	r2, #1
    5584:	d010      	beq.n	55a8 <lv_refr_vdb_flush+0x48>
    5586:	6a1b      	ldr	r3, [r3, #32]
    5588:	f013 0f02 	tst.w	r3, #2
    558c:	d00c      	beq.n	55a8 <lv_refr_vdb_flush+0x48>
    558e:	2301      	movs	r3, #1
    5590:	61e3      	str	r3, [r4, #28]
    5592:	e00b      	b.n	55ac <lv_refr_vdb_flush+0x4c>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
    5594:	4d0d      	ldr	r5, [pc, #52]	; (55cc <lv_refr_vdb_flush+0x6c>)
    5596:	6828      	ldr	r0, [r5, #0]
        while(vdb->flushing) {
    5598:	69a3      	ldr	r3, [r4, #24]
    559a:	2b00      	cmp	r3, #0
    559c:	d0ea      	beq.n	5574 <lv_refr_vdb_flush+0x14>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
    559e:	69c3      	ldr	r3, [r0, #28]
    55a0:	2b00      	cmp	r3, #0
    55a2:	d0f9      	beq.n	5598 <lv_refr_vdb_flush+0x38>
    55a4:	4798      	blx	r3
    55a6:	e7f6      	b.n	5596 <lv_refr_vdb_flush+0x36>
    else vdb->flushing_last = 0;
    55a8:	2300      	movs	r3, #0
    55aa:	61e3      	str	r3, [r4, #28]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
    55ac:	68c3      	ldr	r3, [r0, #12]
    55ae:	b11b      	cbz	r3, 55b8 <lv_refr_vdb_flush+0x58>
    55b0:	68a2      	ldr	r2, [r4, #8]
    55b2:	f104 0110 	add.w	r1, r4, #16
    55b6:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
    55b8:	6823      	ldr	r3, [r4, #0]
    55ba:	b133      	cbz	r3, 55ca <lv_refr_vdb_flush+0x6a>
    55bc:	6862      	ldr	r2, [r4, #4]
    55be:	b122      	cbz	r2, 55ca <lv_refr_vdb_flush+0x6a>
        if(vdb->buf_act == vdb->buf1)
    55c0:	68a1      	ldr	r1, [r4, #8]
            vdb->buf_act = vdb->buf2;
    55c2:	428b      	cmp	r3, r1
    55c4:	bf08      	it	eq
    55c6:	4613      	moveq	r3, r2
    55c8:	60a3      	str	r3, [r4, #8]
    55ca:	bd38      	pop	{r3, r4, r5, pc}
    55cc:	20002688 	.word	0x20002688
    55d0:	0001025d 	.word	0x0001025d
    55d4:	00010261 	.word	0x00010261

000055d8 <lv_refr_area_part>:
{
    55d8:	b570      	push	{r4, r5, r6, lr}
    55da:	b082      	sub	sp, #8
    55dc:	4606      	mov	r6, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
    55de:	4d1a      	ldr	r5, [pc, #104]	; (5648 <lv_refr_area_part+0x70>)
    55e0:	6828      	ldr	r0, [r5, #0]
    55e2:	4b1a      	ldr	r3, [pc, #104]	; (564c <lv_refr_area_part+0x74>)
    55e4:	4798      	blx	r3
    55e6:	4604      	mov	r4, r0
    if(lv_disp_is_double_buf(disp_refr) == false) {
    55e8:	6828      	ldr	r0, [r5, #0]
    55ea:	4b19      	ldr	r3, [pc, #100]	; (5650 <lv_refr_area_part+0x78>)
    55ec:	4798      	blx	r3
    55ee:	b938      	cbnz	r0, 5600 <lv_refr_area_part+0x28>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
    55f0:	6828      	ldr	r0, [r5, #0]
        while(vdb->flushing) {
    55f2:	69a3      	ldr	r3, [r4, #24]
    55f4:	b123      	cbz	r3, 5600 <lv_refr_area_part+0x28>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
    55f6:	69c3      	ldr	r3, [r0, #28]
    55f8:	2b00      	cmp	r3, #0
    55fa:	d0fa      	beq.n	55f2 <lv_refr_area_part+0x1a>
    55fc:	4798      	blx	r3
    55fe:	e7f7      	b.n	55f0 <lv_refr_area_part+0x18>
    _lv_area_intersect(&start_mask, area_p, &vdb->area);
    5600:	f104 0210 	add.w	r2, r4, #16
    5604:	4631      	mov	r1, r6
    5606:	4668      	mov	r0, sp
    5608:	4b12      	ldr	r3, [pc, #72]	; (5654 <lv_refr_area_part+0x7c>)
    560a:	4798      	blx	r3
    top_p = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
    560c:	4c0e      	ldr	r4, [pc, #56]	; (5648 <lv_refr_area_part+0x70>)
    560e:	6820      	ldr	r0, [r4, #0]
    5610:	4b11      	ldr	r3, [pc, #68]	; (5658 <lv_refr_area_part+0x80>)
    5612:	4798      	blx	r3
    5614:	4601      	mov	r1, r0
    5616:	4668      	mov	r0, sp
    5618:	4b10      	ldr	r3, [pc, #64]	; (565c <lv_refr_area_part+0x84>)
    561a:	4798      	blx	r3
    lv_refr_obj_and_children(top_p, &start_mask);
    561c:	4669      	mov	r1, sp
    561e:	4d10      	ldr	r5, [pc, #64]	; (5660 <lv_refr_area_part+0x88>)
    5620:	47a8      	blx	r5
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
    5622:	6820      	ldr	r0, [r4, #0]
    5624:	4b0f      	ldr	r3, [pc, #60]	; (5664 <lv_refr_area_part+0x8c>)
    5626:	4798      	blx	r3
    5628:	4669      	mov	r1, sp
    562a:	47a8      	blx	r5
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
    562c:	6820      	ldr	r0, [r4, #0]
    562e:	4b0e      	ldr	r3, [pc, #56]	; (5668 <lv_refr_area_part+0x90>)
    5630:	4798      	blx	r3
    5632:	4669      	mov	r1, sp
    5634:	47a8      	blx	r5
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
    5636:	6820      	ldr	r0, [r4, #0]
    5638:	4b0c      	ldr	r3, [pc, #48]	; (566c <lv_refr_area_part+0x94>)
    563a:	4798      	blx	r3
    563c:	b108      	cbz	r0, 5642 <lv_refr_area_part+0x6a>
}
    563e:	b002      	add	sp, #8
    5640:	bd70      	pop	{r4, r5, r6, pc}
        lv_refr_vdb_flush();
    5642:	4b0b      	ldr	r3, [pc, #44]	; (5670 <lv_refr_area_part+0x98>)
    5644:	4798      	blx	r3
}
    5646:	e7fa      	b.n	563e <lv_refr_area_part+0x66>
    5648:	20002688 	.word	0x20002688
    564c:	0001025d 	.word	0x0001025d
    5650:	00010261 	.word	0x00010261
    5654:	00010719 	.word	0x00010719
    5658:	0000298d 	.word	0x0000298d
    565c:	00005339 	.word	0x00005339
    5660:	000054d5 	.word	0x000054d5
    5664:	000029a9 	.word	0x000029a9
    5668:	000029c5 	.word	0x000029c5
    566c:	00010275 	.word	0x00010275
    5670:	00005561 	.word	0x00005561

00005674 <_lv_refr_init>:
{
    5674:	4770      	bx	lr
	...

00005678 <_lv_inv_area>:
{
    5678:	b5f0      	push	{r4, r5, r6, r7, lr}
    567a:	b085      	sub	sp, #20
    567c:	460c      	mov	r4, r1
    if(!disp) disp = lv_disp_get_default();
    567e:	4605      	mov	r5, r0
    5680:	2800      	cmp	r0, #0
    5682:	d054      	beq.n	572e <_lv_inv_area+0xb6>
    if(area_p == NULL) {
    5684:	2c00      	cmp	r4, #0
    5686:	d057      	beq.n	5738 <_lv_inv_area+0xc0>
    scr_area.x1 = 0;
    5688:	2300      	movs	r3, #0
    568a:	f8ad 3008 	strh.w	r3, [sp, #8]
    scr_area.y1 = 0;
    568e:	f8ad 300a 	strh.w	r3, [sp, #10]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
    5692:	4628      	mov	r0, r5
    5694:	4b36      	ldr	r3, [pc, #216]	; (5770 <_lv_inv_area+0xf8>)
    5696:	4798      	blx	r3
    5698:	3801      	subs	r0, #1
    569a:	f8ad 000c 	strh.w	r0, [sp, #12]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
    569e:	4628      	mov	r0, r5
    56a0:	4b34      	ldr	r3, [pc, #208]	; (5774 <_lv_inv_area+0xfc>)
    56a2:	4798      	blx	r3
    56a4:	3801      	subs	r0, #1
    56a6:	f8ad 000e 	strh.w	r0, [sp, #14]
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
    56aa:	aa02      	add	r2, sp, #8
    56ac:	4621      	mov	r1, r4
    56ae:	4668      	mov	r0, sp
    56b0:	4b31      	ldr	r3, [pc, #196]	; (5778 <_lv_inv_area+0x100>)
    56b2:	4798      	blx	r3
    if(suc != false) {
    56b4:	2800      	cmp	r0, #0
    56b6:	d045      	beq.n	5744 <_lv_inv_area+0xcc>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp->driver, &com_area);
    56b8:	692b      	ldr	r3, [r5, #16]
    56ba:	b113      	cbz	r3, 56c2 <_lv_inv_area+0x4a>
    56bc:	4669      	mov	r1, sp
    56be:	4628      	mov	r0, r5
    56c0:	4798      	blx	r3
        for(i = 0; i < disp->inv_p; i++) {
    56c2:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
    56c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    56ca:	b19b      	cbz	r3, 56f4 <_lv_inv_area+0x7c>
    56cc:	2100      	movs	r1, #0
    56ce:	460c      	mov	r4, r1
            if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
    56d0:	460f      	mov	r7, r1
    56d2:	4e2a      	ldr	r6, [pc, #168]	; (577c <_lv_inv_area+0x104>)
    56d4:	3109      	adds	r1, #9
    56d6:	463a      	mov	r2, r7
    56d8:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
    56dc:	4668      	mov	r0, sp
    56de:	47b0      	blx	r6
    56e0:	bb80      	cbnz	r0, 5744 <_lv_inv_area+0xcc>
        for(i = 0; i < disp->inv_p; i++) {
    56e2:	3401      	adds	r4, #1
    56e4:	b2a4      	uxth	r4, r4
    56e6:	4621      	mov	r1, r4
    56e8:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
    56ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
    56f0:	429c      	cmp	r4, r3
    56f2:	dbef      	blt.n	56d4 <_lv_inv_area+0x5c>
        if(disp->inv_p < LV_INV_BUF_SIZE) {
    56f4:	2b1f      	cmp	r3, #31
    56f6:	dc27      	bgt.n	5748 <_lv_inv_area+0xd0>
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
    56f8:	3309      	adds	r3, #9
    56fa:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    56fe:	f10d 32ff 	add.w	r2, sp, #4294967295
    5702:	f103 0008 	add.w	r0, r3, #8
        *d8 = *s8;
    5706:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    570a:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    570e:	4283      	cmp	r3, r0
    5710:	d1f9      	bne.n	5706 <_lv_inv_area+0x8e>
        disp->inv_p++;
    5712:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
    5716:	f3c3 0209 	ubfx	r2, r3, #0, #10
    571a:	3201      	adds	r2, #1
    571c:	f362 0309 	bfi	r3, r2, #0, #10
    5720:	f8a5 3168 	strh.w	r3, [r5, #360]	; 0x168
        lv_task_set_prio(disp->refr_task, LV_REFR_TASK_PRIO);
    5724:	2103      	movs	r1, #3
    5726:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    5728:	4b15      	ldr	r3, [pc, #84]	; (5780 <_lv_inv_area+0x108>)
    572a:	4798      	blx	r3
    572c:	e00a      	b.n	5744 <_lv_inv_area+0xcc>
    if(!disp) disp = lv_disp_get_default();
    572e:	4b15      	ldr	r3, [pc, #84]	; (5784 <_lv_inv_area+0x10c>)
    5730:	4798      	blx	r3
    if(!disp) return;
    5732:	4605      	mov	r5, r0
    5734:	b130      	cbz	r0, 5744 <_lv_inv_area+0xcc>
    5736:	e7a5      	b.n	5684 <_lv_inv_area+0xc>
        disp->inv_p = 0;
    5738:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
    573c:	f36f 0309 	bfc	r3, #0, #10
    5740:	f8a5 3168 	strh.w	r3, [r5, #360]	; 0x168
}
    5744:	b005      	add	sp, #20
    5746:	bdf0      	pop	{r4, r5, r6, r7, pc}
            disp->inv_p = 0;
    5748:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
    574c:	f36f 0309 	bfc	r3, #0, #10
    5750:	f8a5 3168 	strh.w	r3, [r5, #360]	; 0x168
    5754:	f10d 0207 	add.w	r2, sp, #7
    5758:	f105 0050 	add.w	r0, r5, #80	; 0x50
    uint8_t * d8 = (uint8_t *)dst;
    575c:	f105 0348 	add.w	r3, r5, #72	; 0x48
        *d8 = *s8;
    5760:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    5764:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    5768:	4283      	cmp	r3, r0
    576a:	d1f9      	bne.n	5760 <_lv_inv_area+0xe8>
    576c:	e7d1      	b.n	5712 <_lv_inv_area+0x9a>
    576e:	bf00      	nop
    5770:	0001016d 	.word	0x0001016d
    5774:	00010195 	.word	0x00010195
    5778:	00010719 	.word	0x00010719
    577c:	0001096d 	.word	0x0001096d
    5780:	000120bd 	.word	0x000120bd
    5784:	00010161 	.word	0x00010161

00005788 <_lv_refr_get_disp_refreshing>:
}
    5788:	4b01      	ldr	r3, [pc, #4]	; (5790 <_lv_refr_get_disp_refreshing+0x8>)
    578a:	6818      	ldr	r0, [r3, #0]
    578c:	4770      	bx	lr
    578e:	bf00      	nop
    5790:	20002688 	.word	0x20002688

00005794 <_lv_disp_refr_task>:
{
    5794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5798:	b08b      	sub	sp, #44	; 0x2c
    579a:	4605      	mov	r5, r0
    uint32_t start = lv_tick_get();
    579c:	4bb3      	ldr	r3, [pc, #716]	; (5a6c <_lv_disp_refr_task+0x2d8>)
    579e:	4798      	blx	r3
    57a0:	9007      	str	r0, [sp, #28]
    disp_refr = task->user_data;
    57a2:	4cb3      	ldr	r4, [pc, #716]	; (5a70 <_lv_disp_refr_task+0x2dc>)
    57a4:	68eb      	ldr	r3, [r5, #12]
    57a6:	6023      	str	r3, [r4, #0]
    lv_task_set_prio(task, LV_TASK_PRIO_OFF);
    57a8:	2100      	movs	r1, #0
    57aa:	4628      	mov	r0, r5
    57ac:	4bb1      	ldr	r3, [pc, #708]	; (5a74 <_lv_disp_refr_task+0x2e0>)
    57ae:	4798      	blx	r3
    if(disp_refr->act_scr == NULL) {
    57b0:	6820      	ldr	r0, [r4, #0]
    57b2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    57b4:	b17b      	cbz	r3, 57d6 <_lv_disp_refr_task+0x42>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
    57b6:	f8b0 3168 	ldrh.w	r3, [r0, #360]	; 0x168
    57ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
    57be:	2b00      	cmp	r3, #0
    57c0:	f000 8268 	beq.w	5c94 <_lv_disp_refr_task+0x500>
    57c4:	f04f 0848 	mov.w	r8, #72	; 0x48
    57c8:	2700      	movs	r7, #0
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
    57ca:	4da9      	ldr	r5, [pc, #676]	; (5a70 <_lv_disp_refr_task+0x2dc>)
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
    57cc:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 5a94 <_lv_disp_refr_task+0x300>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
    57d0:	f8df b2b8 	ldr.w	fp, [pc, #696]	; 5a8c <_lv_disp_refr_task+0x2f8>
    57d4:	e04d      	b.n	5872 <_lv_disp_refr_task+0xde>
        disp_refr->inv_p = 0;
    57d6:	f8b0 3168 	ldrh.w	r3, [r0, #360]	; 0x168
    57da:	f36f 0309 	bfc	r3, #0, #10
    57de:	f8a0 3168 	strh.w	r3, [r0, #360]	; 0x168
        return;
    57e2:	e252      	b.n	5c8a <_lv_disp_refr_task+0x4f6>
                disp_refr->inv_area_joined[join_from] = 1;
    57e4:	4426      	add	r6, r4
    57e6:	2301      	movs	r3, #1
    57e8:	f886 3148 	strb.w	r3, [r6, #328]	; 0x148
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
    57ec:	3401      	adds	r4, #1
    57ee:	6828      	ldr	r0, [r5, #0]
    57f0:	f8b0 3168 	ldrh.w	r3, [r0, #360]	; 0x168
    57f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    57f8:	429c      	cmp	r4, r3
    57fa:	d230      	bcs.n	585e <_lv_disp_refr_task+0xca>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
    57fc:	1903      	adds	r3, r0, r4
    57fe:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
    5802:	2b00      	cmp	r3, #0
    5804:	d1f2      	bne.n	57ec <_lv_disp_refr_task+0x58>
    5806:	42a7      	cmp	r7, r4
    5808:	d0f0      	beq.n	57ec <_lv_disp_refr_task+0x58>
    580a:	f104 0609 	add.w	r6, r4, #9
    580e:	00f6      	lsls	r6, r6, #3
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
    5810:	1981      	adds	r1, r0, r6
    5812:	4440      	add	r0, r8
    5814:	47d0      	blx	sl
    5816:	2800      	cmp	r0, #0
    5818:	d0e8      	beq.n	57ec <_lv_disp_refr_task+0x58>
            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
    581a:	6829      	ldr	r1, [r5, #0]
    581c:	198a      	adds	r2, r1, r6
    581e:	4441      	add	r1, r8
    5820:	a808      	add	r0, sp, #32
    5822:	4b95      	ldr	r3, [pc, #596]	; (5a78 <_lv_disp_refr_task+0x2e4>)
    5824:	4798      	blx	r3
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
    5826:	a808      	add	r0, sp, #32
    5828:	47d8      	blx	fp
    582a:	9001      	str	r0, [sp, #4]
    582c:	6828      	ldr	r0, [r5, #0]
    582e:	4440      	add	r0, r8
    5830:	47d8      	blx	fp
    5832:	4681      	mov	r9, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
    5834:	6828      	ldr	r0, [r5, #0]
    5836:	4430      	add	r0, r6
    5838:	47d8      	blx	fp
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
    583a:	4448      	add	r0, r9
    583c:	9b01      	ldr	r3, [sp, #4]
    583e:	4283      	cmp	r3, r0
    5840:	d2d4      	bcs.n	57ec <_lv_disp_refr_task+0x58>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
    5842:	682e      	ldr	r6, [r5, #0]
    5844:	eb06 0308 	add.w	r3, r6, r8
    5848:	f10d 021f 	add.w	r2, sp, #31
    584c:	f103 0008 	add.w	r0, r3, #8
        *d8 = *s8;
    5850:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    5854:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    5858:	4283      	cmp	r3, r0
    585a:	d1f9      	bne.n	5850 <_lv_disp_refr_task+0xbc>
    585c:	e7c2      	b.n	57e4 <_lv_disp_refr_task+0x50>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
    585e:	3701      	adds	r7, #1
    5860:	6828      	ldr	r0, [r5, #0]
    5862:	f8b0 3168 	ldrh.w	r3, [r0, #360]	; 0x168
    5866:	f3c3 0309 	ubfx	r3, r3, #0, #10
    586a:	f108 0808 	add.w	r8, r8, #8
    586e:	429f      	cmp	r7, r3
    5870:	d20e      	bcs.n	5890 <_lv_disp_refr_task+0xfc>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
    5872:	4438      	add	r0, r7
    5874:	f890 3148 	ldrb.w	r3, [r0, #328]	; 0x148
    5878:	2b00      	cmp	r3, #0
    587a:	d1f0      	bne.n	585e <_lv_disp_refr_task+0xca>
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
    587c:	6828      	ldr	r0, [r5, #0]
    587e:	f8b0 3168 	ldrh.w	r3, [r0, #360]	; 0x168
    5882:	f3c3 0309 	ubfx	r3, r3, #0, #10
    5886:	2b00      	cmp	r3, #0
    5888:	f000 81ea 	beq.w	5c60 <_lv_disp_refr_task+0x4cc>
    588c:	2400      	movs	r4, #0
    588e:	e7b5      	b.n	57fc <_lv_disp_refr_task+0x68>
    px_num = 0;
    5890:	2100      	movs	r1, #0
    5892:	4a77      	ldr	r2, [pc, #476]	; (5a70 <_lv_disp_refr_task+0x2dc>)
    5894:	6051      	str	r1, [r2, #4]
    if(disp_refr->inv_p == 0) return;
    5896:	2b00      	cmp	r3, #0
    5898:	f000 81ea 	beq.w	5c70 <_lv_disp_refr_task+0x4dc>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
    589c:	1e5a      	subs	r2, r3, #1
    589e:	4611      	mov	r1, r2
    58a0:	9205      	str	r2, [sp, #20]
    58a2:	d432      	bmi.n	590a <_lv_disp_refr_task+0x176>
        if(disp_refr->inv_area_joined[i] == 0) {
    58a4:	1882      	adds	r2, r0, r2
    58a6:	f892 2148 	ldrb.w	r2, [r2, #328]	; 0x148
    58aa:	b17a      	cbz	r2, 58cc <_lv_disp_refr_task+0x138>
    58ac:	f203 1347 	addw	r3, r3, #327	; 0x147
    58b0:	4403      	add	r3, r0
    58b2:	460a      	mov	r2, r1
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
    58b4:	3a01      	subs	r2, #1
    58b6:	f1b2 3fff 	cmp.w	r2, #4294967295
    58ba:	d005      	beq.n	58c8 <_lv_disp_refr_task+0x134>
        if(disp_refr->inv_area_joined[i] == 0) {
    58bc:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    58c0:	2900      	cmp	r1, #0
    58c2:	d1f7      	bne.n	58b4 <_lv_disp_refr_task+0x120>
    58c4:	9205      	str	r2, [sp, #20]
    58c6:	e001      	b.n	58cc <_lv_disp_refr_task+0x138>
    int32_t last_i = 0;
    58c8:	2300      	movs	r3, #0
    58ca:	9305      	str	r3, [sp, #20]
    disp_refr->driver.buffer->last_area = 0;
    58cc:	6842      	ldr	r2, [r0, #4]
    58ce:	f892 3020 	ldrb.w	r3, [r2, #32]
    58d2:	f36f 0300 	bfc	r3, #0, #1
    58d6:	f882 3020 	strb.w	r3, [r2, #32]
    disp_refr->driver.buffer->last_part = 0;
    58da:	6842      	ldr	r2, [r0, #4]
    58dc:	f892 3020 	ldrb.w	r3, [r2, #32]
    58e0:	f36f 0341 	bfc	r3, #1, #1
    58e4:	f882 3020 	strb.w	r3, [r2, #32]
    for(i = 0; i < disp_refr->inv_p; i++) {
    58e8:	4b61      	ldr	r3, [pc, #388]	; (5a70 <_lv_disp_refr_task+0x2dc>)
    58ea:	681c      	ldr	r4, [r3, #0]
    58ec:	f8b4 3168 	ldrh.w	r3, [r4, #360]	; 0x168
    58f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    58f4:	2b00      	cmp	r3, #0
    58f6:	f000 81bb 	beq.w	5c70 <_lv_disp_refr_task+0x4dc>
    58fa:	2348      	movs	r3, #72	; 0x48
    58fc:	9302      	str	r3, [sp, #8]
    58fe:	f04f 0a00 	mov.w	sl, #0
            if(disp_refr->driver.monitor_cb) px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
    5902:	f8df b16c 	ldr.w	fp, [pc, #364]	; 5a70 <_lv_disp_refr_task+0x2dc>
    5906:	4627      	mov	r7, r4
    5908:	e045      	b.n	5996 <_lv_disp_refr_task+0x202>
    int32_t last_i = 0;
    590a:	2300      	movs	r3, #0
    590c:	9305      	str	r3, [sp, #20]
    590e:	e7dd      	b.n	58cc <_lv_disp_refr_task+0x138>
            if(i == last_i) disp_refr->driver.buffer->last_area = 1;
    5910:	687a      	ldr	r2, [r7, #4]
    5912:	f892 3020 	ldrb.w	r3, [r2, #32]
    5916:	f043 0301 	orr.w	r3, r3, #1
    591a:	f882 3020 	strb.w	r3, [r2, #32]
    591e:	e043      	b.n	59a8 <_lv_disp_refr_task+0x214>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
    5920:	f8db 0000 	ldr.w	r0, [fp]
    5924:	4b55      	ldr	r3, [pc, #340]	; (5a7c <_lv_disp_refr_task+0x2e8>)
    5926:	4798      	blx	r3
    5928:	4604      	mov	r4, r0
        vdb->area.x1        = 0;
    592a:	2500      	movs	r5, #0
    592c:	8205      	strh	r5, [r0, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
    592e:	f8db 0000 	ldr.w	r0, [fp]
    5932:	4b53      	ldr	r3, [pc, #332]	; (5a80 <_lv_disp_refr_task+0x2ec>)
    5934:	4798      	blx	r3
    5936:	3801      	subs	r0, #1
    5938:	82a0      	strh	r0, [r4, #20]
        vdb->area.y1        = 0;
    593a:	8265      	strh	r5, [r4, #18]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
    593c:	f8db 0000 	ldr.w	r0, [fp]
    5940:	4b50      	ldr	r3, [pc, #320]	; (5a84 <_lv_disp_refr_task+0x2f0>)
    5942:	4798      	blx	r3
    5944:	3801      	subs	r0, #1
    5946:	82e0      	strh	r0, [r4, #22]
        disp_refr->driver.buffer->last_part = 1;
    5948:	f8db 3000 	ldr.w	r3, [fp]
    594c:	685a      	ldr	r2, [r3, #4]
    594e:	f892 3020 	ldrb.w	r3, [r2, #32]
    5952:	f043 0302 	orr.w	r3, r3, #2
    5956:	f882 3020 	strb.w	r3, [r2, #32]
        lv_refr_area_part(area_p);
    595a:	9801      	ldr	r0, [sp, #4]
    595c:	4b4a      	ldr	r3, [pc, #296]	; (5a88 <_lv_disp_refr_task+0x2f4>)
    595e:	4798      	blx	r3
            if(disp_refr->driver.monitor_cb) px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
    5960:	f8db 0000 	ldr.w	r0, [fp]
    5964:	6983      	ldr	r3, [r0, #24]
    5966:	b143      	cbz	r3, 597a <_lv_disp_refr_task+0x1e6>
    5968:	9b02      	ldr	r3, [sp, #8]
    596a:	4418      	add	r0, r3
    596c:	4b47      	ldr	r3, [pc, #284]	; (5a8c <_lv_disp_refr_task+0x2f8>)
    596e:	4798      	blx	r3
    5970:	f8db 3004 	ldr.w	r3, [fp, #4]
    5974:	4403      	add	r3, r0
    5976:	f8cb 3004 	str.w	r3, [fp, #4]
    for(i = 0; i < disp_refr->inv_p; i++) {
    597a:	f10a 0a01 	add.w	sl, sl, #1
    597e:	f8db 7000 	ldr.w	r7, [fp]
    5982:	9b02      	ldr	r3, [sp, #8]
    5984:	3308      	adds	r3, #8
    5986:	9302      	str	r3, [sp, #8]
    5988:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
    598c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    5990:	459a      	cmp	sl, r3
    5992:	f280 816d 	bge.w	5c70 <_lv_disp_refr_task+0x4dc>
        if(disp_refr->inv_area_joined[i] == 0) {
    5996:	eb07 030a 	add.w	r3, r7, sl
    599a:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
    599e:	2b00      	cmp	r3, #0
    59a0:	d1eb      	bne.n	597a <_lv_disp_refr_task+0x1e6>
            if(i == last_i) disp_refr->driver.buffer->last_area = 1;
    59a2:	9b05      	ldr	r3, [sp, #20]
    59a4:	4553      	cmp	r3, sl
    59a6:	d0b3      	beq.n	5910 <_lv_disp_refr_task+0x17c>
            disp_refr->driver.buffer->last_part = 0;
    59a8:	687a      	ldr	r2, [r7, #4]
    59aa:	f892 3020 	ldrb.w	r3, [r2, #32]
    59ae:	f36f 0341 	bfc	r3, #1, #1
    59b2:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area(&disp_refr->inv_areas[i]);
    59b6:	9b02      	ldr	r3, [sp, #8]
    59b8:	18fb      	adds	r3, r7, r3
    59ba:	9301      	str	r3, [sp, #4]
    if(lv_disp_is_true_double_buf(disp_refr)) {
    59bc:	4638      	mov	r0, r7
    59be:	4b34      	ldr	r3, [pc, #208]	; (5a90 <_lv_disp_refr_task+0x2fc>)
    59c0:	4798      	blx	r3
    59c2:	2800      	cmp	r0, #0
    59c4:	d1ac      	bne.n	5920 <_lv_disp_refr_task+0x18c>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
    59c6:	f8db 0000 	ldr.w	r0, [fp]
    59ca:	4b2c      	ldr	r3, [pc, #176]	; (5a7c <_lv_disp_refr_task+0x2e8>)
    59cc:	4798      	blx	r3
    59ce:	4606      	mov	r6, r0
    59d0:	eb07 07ca 	add.w	r7, r7, sl, lsl #3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    59d4:	f8b7 404c 	ldrh.w	r4, [r7, #76]	; 0x4c
    59d8:	3401      	adds	r4, #1
    59da:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
    59de:	1ae4      	subs	r4, r4, r3
    59e0:	b224      	sxth	r4, r4
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    59e2:	f9b7 504e 	ldrsh.w	r5, [r7, #78]	; 0x4e
    59e6:	f105 0801 	add.w	r8, r5, #1
    59ea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
    59ee:	eba8 0803 	sub.w	r8, r8, r3
    59f2:	fa0f f888 	sxth.w	r8, r8
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
    59f6:	f8db 0000 	ldr.w	r0, [fp]
    59fa:	4b22      	ldr	r3, [pc, #136]	; (5a84 <_lv_disp_refr_task+0x2f0>)
    59fc:	4798      	blx	r3
        lv_coord_t y2 =
    59fe:	4285      	cmp	r5, r0
    5a00:	da2b      	bge.n	5a5a <_lv_disp_refr_task+0x2c6>
    5a02:	f9b7 904e 	ldrsh.w	r9, [r7, #78]	; 0x4e
        int32_t max_row = (uint32_t)vdb->size / w;
    5a06:	68f3      	ldr	r3, [r6, #12]
    5a08:	fbb3 f3f4 	udiv	r3, r3, r4
    5a0c:	4598      	cmp	r8, r3
    5a0e:	bfa8      	it	ge
    5a10:	4698      	movge	r8, r3
        if(disp_refr->driver.rounder_cb) {
    5a12:	f8db 3000 	ldr.w	r3, [fp]
    5a16:	691b      	ldr	r3, [r3, #16]
    5a18:	2b00      	cmp	r3, #0
    5a1a:	d042      	beq.n	5aa2 <_lv_disp_refr_task+0x30e>
            tmp.x1 = 0;
    5a1c:	2300      	movs	r3, #0
    5a1e:	f8ad 3020 	strh.w	r3, [sp, #32]
            tmp.x2 = 0;
    5a22:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
            tmp.y1 = 0;
    5a26:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            lv_coord_t h_tmp = max_row;
    5a2a:	fa0f f588 	sxth.w	r5, r8
    5a2e:	1e6c      	subs	r4, r5, #1
    5a30:	b224      	sxth	r4, r4
                tmp.y2 = h_tmp - 1;
    5a32:	f8ad 4026 	strh.w	r4, [sp, #38]	; 0x26
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
    5a36:	f8db 0000 	ldr.w	r0, [fp]
    5a3a:	6903      	ldr	r3, [r0, #16]
    5a3c:	a908      	add	r1, sp, #32
    5a3e:	4798      	blx	r3
    5a40:	f9bd 1026 	ldrsh.w	r1, [sp, #38]	; 0x26
    5a44:	1c4b      	adds	r3, r1, #1
    5a46:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
    5a4a:	1a9b      	subs	r3, r3, r2
                if(lv_area_get_height(&tmp) <= max_row) break;
    5a4c:	b21b      	sxth	r3, r3
    5a4e:	4598      	cmp	r8, r3
    5a50:	da22      	bge.n	5a98 <_lv_disp_refr_task+0x304>
                h_tmp--;
    5a52:	4625      	mov	r5, r4
            } while(h_tmp > 0);
    5a54:	2c00      	cmp	r4, #0
    5a56:	dcea      	bgt.n	5a2e <_lv_disp_refr_task+0x29a>
    5a58:	e782      	b.n	5960 <_lv_disp_refr_task+0x1cc>
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
    5a5a:	f8db 0000 	ldr.w	r0, [fp]
    5a5e:	4b09      	ldr	r3, [pc, #36]	; (5a84 <_lv_disp_refr_task+0x2f0>)
    5a60:	4798      	blx	r3
    5a62:	3801      	subs	r0, #1
        lv_coord_t y2 =
    5a64:	fa0f f980 	sxth.w	r9, r0
    5a68:	e7cd      	b.n	5a06 <_lv_disp_refr_task+0x272>
    5a6a:	bf00      	nop
    5a6c:	000102d9 	.word	0x000102d9
    5a70:	20002688 	.word	0x20002688
    5a74:	000120bd 	.word	0x000120bd
    5a78:	0001076f 	.word	0x0001076f
    5a7c:	0001025d 	.word	0x0001025d
    5a80:	0001016d 	.word	0x0001016d
    5a84:	00010195 	.word	0x00010195
    5a88:	000055d9 	.word	0x000055d9
    5a8c:	000106fd 	.word	0x000106fd
    5a90:	00010275 	.word	0x00010275
    5a94:	00010929 	.word	0x00010929
            if(h_tmp <= 0) {
    5a98:	2d00      	cmp	r5, #0
    5a9a:	f77f af61 	ble.w	5960 <_lv_disp_refr_task+0x1cc>
                max_row = tmp.y2 + 1;
    5a9e:	f101 0801 	add.w	r8, r1, #1
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
    5aa2:	f9b7 404a 	ldrsh.w	r4, [r7, #74]	; 0x4a
    5aa6:	f8cd 900c 	str.w	r9, [sp, #12]
    5aaa:	eb04 0308 	add.w	r3, r4, r8
    5aae:	3b01      	subs	r3, #1
    5ab0:	454b      	cmp	r3, r9
    5ab2:	dc4b      	bgt.n	5b4c <_lv_disp_refr_task+0x3b8>
            vdb->area.y2 = row + max_row - 1;
    5ab4:	fa1f f388 	uxth.w	r3, r8
    5ab8:	9304      	str	r3, [sp, #16]
    5aba:	3b01      	subs	r3, #1
    5abc:	f8cd a018 	str.w	sl, [sp, #24]
    5ac0:	469a      	mov	sl, r3
    5ac2:	e00d      	b.n	5ae0 <_lv_disp_refr_task+0x34c>
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
    5ac4:	45a9      	cmp	r9, r5
    5ac6:	d01c      	beq.n	5b02 <_lv_disp_refr_task+0x36e>
            lv_refr_area_part(area_p);
    5ac8:	9801      	ldr	r0, [sp, #4]
    5aca:	4b78      	ldr	r3, [pc, #480]	; (5cac <_lv_disp_refr_task+0x518>)
    5acc:	4798      	blx	r3
    5ace:	9b04      	ldr	r3, [sp, #16]
    5ad0:	441c      	add	r4, r3
    5ad2:	b224      	sxth	r4, r4
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
    5ad4:	eb04 0308 	add.w	r3, r4, r8
    5ad8:	3b01      	subs	r3, #1
    5ada:	9a03      	ldr	r2, [sp, #12]
    5adc:	4293      	cmp	r3, r2
    5ade:	dc1a      	bgt.n	5b16 <_lv_disp_refr_task+0x382>
            vdb->area.x1 = area_p->x1;
    5ae0:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
    5ae4:	8233      	strh	r3, [r6, #16]
            vdb->area.x2 = area_p->x2;
    5ae6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
    5aea:	82b3      	strh	r3, [r6, #20]
            vdb->area.y1 = row;
    5aec:	8274      	strh	r4, [r6, #18]
    5aee:	b2a4      	uxth	r4, r4
    5af0:	eb04 050a 	add.w	r5, r4, sl
    5af4:	b22d      	sxth	r5, r5
            vdb->area.y2 = row + max_row - 1;
    5af6:	82f5      	strh	r5, [r6, #22]
            if(vdb->area.y2 > y2) vdb->area.y2 = y2;
    5af8:	45a9      	cmp	r9, r5
    5afa:	dae3      	bge.n	5ac4 <_lv_disp_refr_task+0x330>
    5afc:	f8a6 9016 	strh.w	r9, [r6, #22]
            row_last = vdb->area.y2;
    5b00:	464d      	mov	r5, r9
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
    5b02:	f8db 3000 	ldr.w	r3, [fp]
    5b06:	685a      	ldr	r2, [r3, #4]
    5b08:	f892 3020 	ldrb.w	r3, [r2, #32]
    5b0c:	f043 0302 	orr.w	r3, r3, #2
    5b10:	f882 3020 	strb.w	r3, [r2, #32]
    5b14:	e7d8      	b.n	5ac8 <_lv_disp_refr_task+0x334>
    5b16:	f8dd a018 	ldr.w	sl, [sp, #24]
        if(y2 != row_last) {
    5b1a:	45a9      	cmp	r9, r5
    5b1c:	f43f af20 	beq.w	5960 <_lv_disp_refr_task+0x1cc>
            vdb->area.x1 = area_p->x1;
    5b20:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
    5b24:	8233      	strh	r3, [r6, #16]
            vdb->area.x2 = area_p->x2;
    5b26:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
    5b2a:	82b3      	strh	r3, [r6, #20]
            vdb->area.y1 = row;
    5b2c:	8274      	strh	r4, [r6, #18]
            vdb->area.y2 = y2;
    5b2e:	f8a6 9016 	strh.w	r9, [r6, #22]
            disp_refr->driver.buffer->last_part = 1;
    5b32:	f8db 3000 	ldr.w	r3, [fp]
    5b36:	685a      	ldr	r2, [r3, #4]
    5b38:	f892 3020 	ldrb.w	r3, [r2, #32]
    5b3c:	f043 0302 	orr.w	r3, r3, #2
    5b40:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area_part(area_p);
    5b44:	9801      	ldr	r0, [sp, #4]
    5b46:	4b59      	ldr	r3, [pc, #356]	; (5cac <_lv_disp_refr_task+0x518>)
    5b48:	4798      	blx	r3
    5b4a:	e709      	b.n	5960 <_lv_disp_refr_task+0x1cc>
        lv_coord_t row_last = 0;
    5b4c:	2500      	movs	r5, #0
    5b4e:	e7e4      	b.n	5b1a <_lv_disp_refr_task+0x386>
        if(lv_disp_is_true_double_buf(disp_refr) && disp_refr->driver.set_px_cb == NULL) {
    5b50:	4b57      	ldr	r3, [pc, #348]	; (5cb0 <_lv_disp_refr_task+0x51c>)
    5b52:	4798      	blx	r3
    5b54:	b118      	cbz	r0, 5b5e <_lv_disp_refr_task+0x3ca>
    5b56:	4b57      	ldr	r3, [pc, #348]	; (5cb4 <_lv_disp_refr_task+0x520>)
    5b58:	6818      	ldr	r0, [r3, #0]
    5b5a:	6943      	ldr	r3, [r0, #20]
    5b5c:	b1eb      	cbz	r3, 5b9a <_lv_disp_refr_task+0x406>
        _lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
    5b5e:	4c55      	ldr	r4, [pc, #340]	; (5cb4 <_lv_disp_refr_task+0x520>)
    5b60:	6820      	ldr	r0, [r4, #0]
    5b62:	f44f 7180 	mov.w	r1, #256	; 0x100
    5b66:	3048      	adds	r0, #72	; 0x48
    5b68:	4d53      	ldr	r5, [pc, #332]	; (5cb8 <_lv_disp_refr_task+0x524>)
    5b6a:	47a8      	blx	r5
        _lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
    5b6c:	6820      	ldr	r0, [r4, #0]
    5b6e:	2120      	movs	r1, #32
    5b70:	f500 70a4 	add.w	r0, r0, #328	; 0x148
    5b74:	47a8      	blx	r5
        disp_refr->inv_p = 0;
    5b76:	6823      	ldr	r3, [r4, #0]
    5b78:	f8b3 2168 	ldrh.w	r2, [r3, #360]	; 0x168
    5b7c:	f36f 0209 	bfc	r2, #0, #10
    5b80:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
        elaps = lv_tick_elaps(start);
    5b84:	9807      	ldr	r0, [sp, #28]
    5b86:	4b4d      	ldr	r3, [pc, #308]	; (5cbc <_lv_disp_refr_task+0x528>)
    5b88:	4798      	blx	r3
    5b8a:	4601      	mov	r1, r0
        if(disp_refr->driver.monitor_cb) {
    5b8c:	6820      	ldr	r0, [r4, #0]
    5b8e:	6983      	ldr	r3, [r0, #24]
    5b90:	2b00      	cmp	r3, #0
    5b92:	d076      	beq.n	5c82 <_lv_disp_refr_task+0x4ee>
            disp_refr->driver.monitor_cb(&disp_refr->driver, elaps, px_num);
    5b94:	6862      	ldr	r2, [r4, #4]
    5b96:	4798      	blx	r3
    5b98:	e073      	b.n	5c82 <_lv_disp_refr_task+0x4ee>
            lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
    5b9a:	4b49      	ldr	r3, [pc, #292]	; (5cc0 <_lv_disp_refr_task+0x52c>)
    5b9c:	4798      	blx	r3
    5b9e:	4604      	mov	r4, r0
            lv_refr_vdb_flush();
    5ba0:	4b48      	ldr	r3, [pc, #288]	; (5cc4 <_lv_disp_refr_task+0x530>)
    5ba2:	4798      	blx	r3
            while(vdb->flushing)
    5ba4:	69a3      	ldr	r3, [r4, #24]
    5ba6:	2b00      	cmp	r3, #0
    5ba8:	d1fc      	bne.n	5ba4 <_lv_disp_refr_task+0x410>
            uint8_t * buf_act = (uint8_t *)vdb->buf_act;
    5baa:	68a3      	ldr	r3, [r4, #8]
    5bac:	9301      	str	r3, [sp, #4]
            uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
    5bae:	f8d4 a000 	ldr.w	sl, [r4]
    5bb2:	4553      	cmp	r3, sl
    5bb4:	bf08      	it	eq
    5bb6:	f8d4 a004 	ldreq.w	sl, [r4, #4]
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
    5bba:	4c3e      	ldr	r4, [pc, #248]	; (5cb4 <_lv_disp_refr_task+0x520>)
    5bbc:	6820      	ldr	r0, [r4, #0]
    5bbe:	4b42      	ldr	r3, [pc, #264]	; (5cc8 <_lv_disp_refr_task+0x534>)
    5bc0:	4798      	blx	r3
    5bc2:	9002      	str	r0, [sp, #8]
            for(a = 0; a < disp_refr->inv_p; a++) {
    5bc4:	6823      	ldr	r3, [r4, #0]
    5bc6:	f8b3 2168 	ldrh.w	r2, [r3, #360]	; 0x168
    5bca:	f3c2 0209 	ubfx	r2, r2, #0, #10
    5bce:	2a00      	cmp	r2, #0
    5bd0:	d0c5      	beq.n	5b5e <_lv_disp_refr_task+0x3ca>
                        start_offs += hres * sizeof(lv_color_t);
    5bd2:	0045      	lsls	r5, r0, #1
    5bd4:	2200      	movs	r2, #0
    5bd6:	4690      	mov	r8, r2
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
    5bd8:	46a1      	mov	r9, r4
    5bda:	e00c      	b.n	5bf6 <_lv_disp_refr_task+0x462>
            for(a = 0; a < disp_refr->inv_p; a++) {
    5bdc:	f108 0801 	add.w	r8, r8, #1
    5be0:	fa1f f888 	uxth.w	r8, r8
    5be4:	4642      	mov	r2, r8
    5be6:	f8d9 3000 	ldr.w	r3, [r9]
    5bea:	f8b3 1168 	ldrh.w	r1, [r3, #360]	; 0x168
    5bee:	f3c1 0109 	ubfx	r1, r1, #0, #10
    5bf2:	4588      	cmp	r8, r1
    5bf4:	dab3      	bge.n	5b5e <_lv_disp_refr_task+0x3ca>
                if(disp_refr->inv_area_joined[a] == 0) {
    5bf6:	1899      	adds	r1, r3, r2
    5bf8:	f891 1148 	ldrb.w	r1, [r1, #328]	; 0x148
    5bfc:	2900      	cmp	r1, #0
    5bfe:	d1ed      	bne.n	5bdc <_lv_disp_refr_task+0x448>
    5c00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
                        (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
    5c04:	f9b3 704a 	ldrsh.w	r7, [r3, #74]	; 0x4a
    5c08:	f9b3 1048 	ldrsh.w	r1, [r3, #72]	; 0x48
    5c0c:	9802      	ldr	r0, [sp, #8]
    5c0e:	fb07 1600 	mla	r6, r7, r0, r1
                    uint32_t start_offs =
    5c12:	0076      	lsls	r6, r6, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    5c14:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
    5c18:	3301      	adds	r3, #1
    5c1a:	1a5b      	subs	r3, r3, r1
                    uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
    5c1c:	b21b      	sxth	r3, r3
    5c1e:	005b      	lsls	r3, r3, #1
    5c20:	9303      	str	r3, [sp, #12]
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
    5c22:	f8d9 3000 	ldr.w	r3, [r9]
    5c26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    5c2a:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
    5c2e:	42bb      	cmp	r3, r7
    5c30:	dbd4      	blt.n	5bdc <_lv_disp_refr_task+0x448>
    5c32:	9b01      	ldr	r3, [sp, #4]
    5c34:	eb03 0b06 	add.w	fp, r3, r6
    5c38:	4456      	add	r6, sl
    5c3a:	3209      	adds	r2, #9
    5c3c:	00d4      	lsls	r4, r2, #3
                        _lv_memcpy(buf_act + start_offs, buf_ina + start_offs, line_length);
    5c3e:	9a03      	ldr	r2, [sp, #12]
    5c40:	4631      	mov	r1, r6
    5c42:	4658      	mov	r0, fp
    5c44:	4b21      	ldr	r3, [pc, #132]	; (5ccc <_lv_disp_refr_task+0x538>)
    5c46:	4798      	blx	r3
    5c48:	3701      	adds	r7, #1
    5c4a:	b23f      	sxth	r7, r7
    5c4c:	44ab      	add	fp, r5
    5c4e:	442e      	add	r6, r5
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
    5c50:	f8d9 3000 	ldr.w	r3, [r9]
    5c54:	4423      	add	r3, r4
    5c56:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    5c5a:	42bb      	cmp	r3, r7
    5c5c:	daef      	bge.n	5c3e <_lv_disp_refr_task+0x4aa>
    5c5e:	e7bd      	b.n	5bdc <_lv_disp_refr_task+0x448>
    px_num = 0;
    5c60:	2200      	movs	r2, #0
    5c62:	4b14      	ldr	r3, [pc, #80]	; (5cb4 <_lv_disp_refr_task+0x520>)
    5c64:	605a      	str	r2, [r3, #4]
    if(disp_refr->inv_p == 0) return;
    5c66:	f8b0 3168 	ldrh.w	r3, [r0, #360]	; 0x168
    5c6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    5c6e:	b97b      	cbnz	r3, 5c90 <_lv_disp_refr_task+0x4fc>
    if(disp_refr->inv_p != 0) {
    5c70:	4b10      	ldr	r3, [pc, #64]	; (5cb4 <_lv_disp_refr_task+0x520>)
    5c72:	6818      	ldr	r0, [r3, #0]
    5c74:	f8b0 3168 	ldrh.w	r3, [r0, #360]	; 0x168
    5c78:	f3c3 0309 	ubfx	r3, r3, #0, #10
    5c7c:	2b00      	cmp	r3, #0
    5c7e:	f47f af67 	bne.w	5b50 <_lv_disp_refr_task+0x3bc>
    _lv_mem_buf_free_all();
    5c82:	4b13      	ldr	r3, [pc, #76]	; (5cd0 <_lv_disp_refr_task+0x53c>)
    5c84:	4798      	blx	r3
    _lv_font_clean_up_fmt_txt();
    5c86:	4b13      	ldr	r3, [pc, #76]	; (5cd4 <_lv_disp_refr_task+0x540>)
    5c88:	4798      	blx	r3
}
    5c8a:	b00b      	add	sp, #44	; 0x2c
    5c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int32_t last_i = 0;
    5c90:	9205      	str	r2, [sp, #20]
    5c92:	e61b      	b.n	58cc <_lv_disp_refr_task+0x138>
    px_num = 0;
    5c94:	2200      	movs	r2, #0
    5c96:	4b07      	ldr	r3, [pc, #28]	; (5cb4 <_lv_disp_refr_task+0x520>)
    5c98:	605a      	str	r2, [r3, #4]
    if(disp_refr->inv_p == 0) return;
    5c9a:	f8b0 3168 	ldrh.w	r3, [r0, #360]	; 0x168
    5c9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    5ca2:	2b00      	cmp	r3, #0
    5ca4:	d0ed      	beq.n	5c82 <_lv_disp_refr_task+0x4ee>
    int32_t last_i = 0;
    5ca6:	9205      	str	r2, [sp, #20]
    5ca8:	e610      	b.n	58cc <_lv_disp_refr_task+0x138>
    5caa:	bf00      	nop
    5cac:	000055d9 	.word	0x000055d9
    5cb0:	00010275 	.word	0x00010275
    5cb4:	20002688 	.word	0x20002688
    5cb8:	00011c17 	.word	0x00011c17
    5cbc:	000102f1 	.word	0x000102f1
    5cc0:	0001025d 	.word	0x0001025d
    5cc4:	00005561 	.word	0x00005561
    5cc8:	0001016d 	.word	0x0001016d
    5ccc:	000117a5 	.word	0x000117a5
    5cd0:	00011749 	.word	0x00011749
    5cd4:	0000ffa1 	.word	0x0000ffa1

00005cd8 <lv_style_init>:
/**
 * Initialize a style
 * @param style pointer to a style to initialize
 */
void lv_style_init(lv_style_t * style)
{
    5cd8:	b508      	push	{r3, lr}
    _lv_memset_00(style, sizeof(lv_style_t));
    5cda:	2104      	movs	r1, #4
    5cdc:	4b01      	ldr	r3, [pc, #4]	; (5ce4 <lv_style_init+0xc>)
    5cde:	4798      	blx	r3
    5ce0:	bd08      	pop	{r3, pc}
    5ce2:	bf00      	nop
    5ce4:	00011c17 	.word	0x00011c17

00005ce8 <lv_style_list_init>:
/**
 * Initialize a style list
 * @param list a style list to initialize
 */
void lv_style_list_init(lv_style_list_t * list)
{
    5ce8:	b508      	push	{r3, lr}
    _lv_memset_00(list, sizeof(lv_style_list_t));
    5cea:	2108      	movs	r1, #8
    5cec:	4b01      	ldr	r3, [pc, #4]	; (5cf4 <lv_style_list_init+0xc>)
    5cee:	4798      	blx	r3
    5cf0:	bd08      	pop	{r3, pc}
    5cf2:	bf00      	nop
    5cf4:	00011c17 	.word	0x00011c17

00005cf8 <_lv_style_list_remove_style>:
 * Remove a style from a style list
 * @param style_list pointer to a style list
 * @param style pointer to a style to remove
 */
void _lv_style_list_remove_style(lv_style_list_t * list, lv_style_t * style)
{
    5cf8:	b570      	push	{r4, r5, r6, lr}
    LV_ASSERT_STYLE_LIST(list);
    LV_ASSERT_STYLE(style);

    if(list->style_cnt == 0) return;
    5cfa:	7906      	ldrb	r6, [r0, #4]
    5cfc:	2e00      	cmp	r6, #0
    5cfe:	d044      	beq.n	5d8a <_lv_style_list_remove_style+0x92>
    5d00:	4604      	mov	r4, r0

    /*Check if the style really exists here*/
    uint8_t i;
    bool found = false;
    for(i = 0; i < list->style_cnt; i++) {
        if(list->style_list[i] == style) {
    5d02:	6800      	ldr	r0, [r0, #0]
    5d04:	6803      	ldr	r3, [r0, #0]
    5d06:	4299      	cmp	r1, r3
    5d08:	d00a      	beq.n	5d20 <_lv_style_list_remove_style+0x28>
    5d0a:	4603      	mov	r3, r0
    5d0c:	1e75      	subs	r5, r6, #1
    5d0e:	b2ed      	uxtb	r5, r5
    5d10:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    for(i = 0; i < list->style_cnt; i++) {
    5d14:	429d      	cmp	r5, r3
    5d16:	d014      	beq.n	5d42 <_lv_style_list_remove_style+0x4a>
        if(list->style_list[i] == style) {
    5d18:	f853 2f04 	ldr.w	r2, [r3, #4]!
    5d1c:	428a      	cmp	r2, r1
    5d1e:	d1f9      	bne.n	5d14 <_lv_style_list_remove_style+0x1c>
    5d20:	460d      	mov	r5, r1
            break;
        }
    }
    if(found == false) return;

    if(list->style_cnt == 1) {
    5d22:	2e01      	cmp	r6, #1
    5d24:	d00e      	beq.n	5d44 <_lv_style_list_remove_style+0x4c>
        list->style_cnt = 0;
        list->has_local = 0;
        return;
    }

    lv_style_t ** new_classes = lv_mem_realloc(list->style_list, sizeof(lv_style_t *) * (list->style_cnt - 1));
    5d26:	1e71      	subs	r1, r6, #1
    5d28:	0089      	lsls	r1, r1, #2
    5d2a:	4b18      	ldr	r3, [pc, #96]	; (5d8c <_lv_style_list_remove_style+0x94>)
    5d2c:	4798      	blx	r3
    5d2e:	4606      	mov	r6, r0
    LV_ASSERT_MEM(new_classes);
    5d30:	4b17      	ldr	r3, [pc, #92]	; (5d90 <_lv_style_list_remove_style+0x98>)
    5d32:	4798      	blx	r3
    5d34:	b180      	cbz	r0, 5d58 <_lv_style_list_remove_style+0x60>
    if(new_classes == NULL) {
    5d36:	b346      	cbz	r6, 5d8a <_lv_style_list_remove_style+0x92>
        LV_LOG_WARN("lv_style_list_remove_style: couldn't reallocate class list");
        return;
    }
    uint8_t j;
    for(i = 0, j = 0; i < list->style_cnt; i++) {
    5d38:	7922      	ldrb	r2, [r4, #4]
    5d3a:	b312      	cbz	r2, 5d82 <_lv_style_list_remove_style+0x8a>
    5d3c:	2100      	movs	r1, #0
    5d3e:	460b      	mov	r3, r1
    5d40:	e015      	b.n	5d6e <_lv_style_list_remove_style+0x76>
    5d42:	bd70      	pop	{r4, r5, r6, pc}
        lv_mem_free(list->style_list);
    5d44:	4b13      	ldr	r3, [pc, #76]	; (5d94 <_lv_style_list_remove_style+0x9c>)
    5d46:	4798      	blx	r3
        list->style_list = NULL;
    5d48:	2300      	movs	r3, #0
    5d4a:	6023      	str	r3, [r4, #0]
        list->style_cnt = 0;
    5d4c:	7123      	strb	r3, [r4, #4]
        list->has_local = 0;
    5d4e:	7962      	ldrb	r2, [r4, #5]
    5d50:	f363 0200 	bfi	r2, r3, #0, #1
    5d54:	7162      	strb	r2, [r4, #5]
        return;
    5d56:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_MEM(new_classes);
    5d58:	4632      	mov	r2, r6
    5d5a:	2300      	movs	r3, #0
    5d5c:	480e      	ldr	r0, [pc, #56]	; (5d98 <_lv_style_list_remove_style+0xa0>)
    5d5e:	490f      	ldr	r1, [pc, #60]	; (5d9c <_lv_style_list_remove_style+0xa4>)
    5d60:	4788      	blx	r1
    5d62:	e7fe      	b.n	5d62 <_lv_style_list_remove_style+0x6a>
    for(i = 0, j = 0; i < list->style_cnt; i++) {
    5d64:	3301      	adds	r3, #1
    5d66:	b2db      	uxtb	r3, r3
    5d68:	7922      	ldrb	r2, [r4, #4]
    5d6a:	429a      	cmp	r2, r3
    5d6c:	d909      	bls.n	5d82 <_lv_style_list_remove_style+0x8a>
        if(list->style_list[i] == style) continue;
    5d6e:	6822      	ldr	r2, [r4, #0]
    5d70:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    5d74:	4295      	cmp	r5, r2
    5d76:	d0f5      	beq.n	5d64 <_lv_style_list_remove_style+0x6c>
        new_classes[j] = list->style_list[i];
    5d78:	f846 2021 	str.w	r2, [r6, r1, lsl #2]
        j++;
    5d7c:	3101      	adds	r1, #1
    5d7e:	b2c9      	uxtb	r1, r1
    5d80:	e7f0      	b.n	5d64 <_lv_style_list_remove_style+0x6c>

    }

    list->style_cnt--;
    5d82:	3a01      	subs	r2, #1
    5d84:	7122      	strb	r2, [r4, #4]
    list->style_list = new_classes;
    5d86:	6026      	str	r6, [r4, #0]
    5d88:	bd70      	pop	{r4, r5, r6, pc}
    5d8a:	bd70      	pop	{r4, r5, r6, pc}
    5d8c:	000119e9 	.word	0x000119e9
    5d90:	0000295d 	.word	0x0000295d
    5d94:	00011639 	.word	0x00011639
    5d98:	0001786c 	.word	0x0001786c
    5d9c:	00002965 	.word	0x00002965

00005da0 <_lv_style_list_add_style>:
    if(list == NULL) return;
    5da0:	2800      	cmp	r0, #0
    5da2:	d03e      	beq.n	5e22 <_lv_style_list_add_style+0x82>
{
    5da4:	b570      	push	{r4, r5, r6, lr}
    5da6:	4604      	mov	r4, r0
    5da8:	460e      	mov	r6, r1
    _lv_style_list_remove_style(list, style);
    5daa:	4b1e      	ldr	r3, [pc, #120]	; (5e24 <_lv_style_list_add_style+0x84>)
    5dac:	4798      	blx	r3
    if(list->style_cnt == 0) new_classes = lv_mem_alloc(sizeof(lv_style_t *));
    5dae:	7923      	ldrb	r3, [r4, #4]
    5db0:	bb53      	cbnz	r3, 5e08 <_lv_style_list_add_style+0x68>
    5db2:	2004      	movs	r0, #4
    5db4:	4b1c      	ldr	r3, [pc, #112]	; (5e28 <_lv_style_list_add_style+0x88>)
    5db6:	4798      	blx	r3
    5db8:	4605      	mov	r5, r0
    LV_ASSERT_MEM(new_classes);
    5dba:	4628      	mov	r0, r5
    5dbc:	4b1b      	ldr	r3, [pc, #108]	; (5e2c <_lv_style_list_add_style+0x8c>)
    5dbe:	4798      	blx	r3
    5dc0:	b348      	cbz	r0, 5e16 <_lv_style_list_add_style+0x76>
    if(new_classes == NULL) {
    5dc2:	b305      	cbz	r5, 5e06 <_lv_style_list_add_style+0x66>
    if(list->has_trans) first_style++;
    5dc4:	7963      	ldrb	r3, [r4, #5]
    uint8_t first_style = 0;
    5dc6:	f3c3 0040 	ubfx	r0, r3, #1, #1
    if(list->has_local) first_style++;
    5dca:	f013 0f01 	tst.w	r3, #1
    5dce:	bf18      	it	ne
    5dd0:	3001      	addne	r0, #1
    for(i = list->style_cnt; i > first_style; i--) {
    5dd2:	7923      	ldrb	r3, [r4, #4]
    5dd4:	4298      	cmp	r0, r3
    5dd6:	d210      	bcs.n	5dfa <_lv_style_list_add_style+0x5a>
    5dd8:	eb05 0183 	add.w	r1, r5, r3, lsl #2
    5ddc:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    5de0:	3a01      	subs	r2, #1
    5de2:	3b01      	subs	r3, #1
    5de4:	1a1b      	subs	r3, r3, r0
    5de6:	b2db      	uxtb	r3, r3
    5de8:	1ad3      	subs	r3, r2, r3
    5dea:	eb05 0383 	add.w	r3, r5, r3, lsl #2
        new_classes[i] = new_classes[i - 1];
    5dee:	f851 2c04 	ldr.w	r2, [r1, #-4]
    5df2:	f841 2904 	str.w	r2, [r1], #-4
    for(i = list->style_cnt; i > first_style; i--) {
    5df6:	4299      	cmp	r1, r3
    5df8:	d1f9      	bne.n	5dee <_lv_style_list_add_style+0x4e>
    new_classes[first_style] = style;
    5dfa:	f845 6020 	str.w	r6, [r5, r0, lsl #2]
    list->style_cnt++;
    5dfe:	7923      	ldrb	r3, [r4, #4]
    5e00:	3301      	adds	r3, #1
    5e02:	7123      	strb	r3, [r4, #4]
    list->style_list = new_classes;
    5e04:	6025      	str	r5, [r4, #0]
    5e06:	bd70      	pop	{r4, r5, r6, pc}
    else new_classes = lv_mem_realloc(list->style_list, sizeof(lv_style_t *) * (list->style_cnt + 1));
    5e08:	3301      	adds	r3, #1
    5e0a:	0099      	lsls	r1, r3, #2
    5e0c:	6820      	ldr	r0, [r4, #0]
    5e0e:	4b08      	ldr	r3, [pc, #32]	; (5e30 <_lv_style_list_add_style+0x90>)
    5e10:	4798      	blx	r3
    5e12:	4605      	mov	r5, r0
    5e14:	e7d1      	b.n	5dba <_lv_style_list_add_style+0x1a>
    LV_ASSERT_MEM(new_classes);
    5e16:	462a      	mov	r2, r5
    5e18:	2300      	movs	r3, #0
    5e1a:	4806      	ldr	r0, [pc, #24]	; (5e34 <_lv_style_list_add_style+0x94>)
    5e1c:	4906      	ldr	r1, [pc, #24]	; (5e38 <_lv_style_list_add_style+0x98>)
    5e1e:	4788      	blx	r1
    5e20:	e7fe      	b.n	5e20 <_lv_style_list_add_style+0x80>
    5e22:	4770      	bx	lr
    5e24:	00005cf9 	.word	0x00005cf9
    5e28:	00011575 	.word	0x00011575
    5e2c:	0000295d 	.word	0x0000295d
    5e30:	000119e9 	.word	0x000119e9
    5e34:	0001786c 	.word	0x0001786c
    5e38:	00002965 	.word	0x00002965

00005e3c <get_alloc_local_style>:
 * Get he local style from a style list. Allocate it if not exists yet.
 * @param list pointer to a style list
 * @return pointer to the local style
 */
static lv_style_t * get_alloc_local_style(lv_style_list_t * list)
{
    5e3c:	b538      	push	{r3, r4, r5, lr}
    LV_ASSERT_STYLE_LIST(list);

    if(list->has_local) return lv_style_list_get_style(list, 0);
    5e3e:	7943      	ldrb	r3, [r0, #5]
    5e40:	f013 0f01 	tst.w	r3, #1
    5e44:	d00e      	beq.n	5e64 <get_alloc_local_style+0x28>
    if(list->has_trans && list->skip_trans) id++;
    5e46:	f003 0306 	and.w	r3, r3, #6
    5e4a:	2b06      	cmp	r3, #6
    5e4c:	bf14      	ite	ne
    5e4e:	2300      	movne	r3, #0
    5e50:	2301      	moveq	r3, #1
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    5e52:	7902      	ldrb	r2, [r0, #4]
    5e54:	b312      	cbz	r2, 5e9c <get_alloc_local_style+0x60>
    5e56:	429a      	cmp	r2, r3
    5e58:	d922      	bls.n	5ea0 <get_alloc_local_style+0x64>
    return list->style_list[id];
    5e5a:	6802      	ldr	r2, [r0, #0]
    5e5c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    /*Add the local style to the furst place*/
    _lv_style_list_add_style(list, local_style);
    list->has_local = 1;

    return local_style;
}
    5e60:	4620      	mov	r0, r4
    5e62:	bd38      	pop	{r3, r4, r5, pc}
    5e64:	4605      	mov	r5, r0
    lv_style_t * local_style = lv_mem_alloc(sizeof(lv_style_t));
    5e66:	2004      	movs	r0, #4
    5e68:	4b0e      	ldr	r3, [pc, #56]	; (5ea4 <get_alloc_local_style+0x68>)
    5e6a:	4798      	blx	r3
    5e6c:	4604      	mov	r4, r0
    LV_ASSERT_MEM(local_style);
    5e6e:	4b0e      	ldr	r3, [pc, #56]	; (5ea8 <get_alloc_local_style+0x6c>)
    5e70:	4798      	blx	r3
    5e72:	b168      	cbz	r0, 5e90 <get_alloc_local_style+0x54>
    if(local_style == NULL) {
    5e74:	2c00      	cmp	r4, #0
    5e76:	d0f3      	beq.n	5e60 <get_alloc_local_style+0x24>
    lv_style_init(local_style);
    5e78:	4620      	mov	r0, r4
    5e7a:	4b0c      	ldr	r3, [pc, #48]	; (5eac <get_alloc_local_style+0x70>)
    5e7c:	4798      	blx	r3
    _lv_style_list_add_style(list, local_style);
    5e7e:	4621      	mov	r1, r4
    5e80:	4628      	mov	r0, r5
    5e82:	4b0b      	ldr	r3, [pc, #44]	; (5eb0 <get_alloc_local_style+0x74>)
    5e84:	4798      	blx	r3
    list->has_local = 1;
    5e86:	796b      	ldrb	r3, [r5, #5]
    5e88:	f043 0301 	orr.w	r3, r3, #1
    5e8c:	716b      	strb	r3, [r5, #5]
    return local_style;
    5e8e:	e7e7      	b.n	5e60 <get_alloc_local_style+0x24>
    LV_ASSERT_MEM(local_style);
    5e90:	4622      	mov	r2, r4
    5e92:	2300      	movs	r3, #0
    5e94:	4807      	ldr	r0, [pc, #28]	; (5eb4 <get_alloc_local_style+0x78>)
    5e96:	4908      	ldr	r1, [pc, #32]	; (5eb8 <get_alloc_local_style+0x7c>)
    5e98:	4788      	blx	r1
    5e9a:	e7fe      	b.n	5e9a <get_alloc_local_style+0x5e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    5e9c:	2400      	movs	r4, #0
    5e9e:	e7df      	b.n	5e60 <get_alloc_local_style+0x24>
    5ea0:	2400      	movs	r4, #0
    5ea2:	e7dd      	b.n	5e60 <get_alloc_local_style+0x24>
    5ea4:	00011575 	.word	0x00011575
    5ea8:	0000295d 	.word	0x0000295d
    5eac:	00005cd9 	.word	0x00005cd9
    5eb0:	00005da1 	.word	0x00005da1
    5eb4:	0001786c 	.word	0x0001786c
    5eb8:	00002965 	.word	0x00002965

00005ebc <lv_style_reset>:
{
    5ebc:	b510      	push	{r4, lr}
    5ebe:	4604      	mov	r4, r0
    lv_mem_free(style->map);
    5ec0:	6800      	ldr	r0, [r0, #0]
    5ec2:	4b02      	ldr	r3, [pc, #8]	; (5ecc <lv_style_reset+0x10>)
    5ec4:	4798      	blx	r3
    style->map = NULL;
    5ec6:	2300      	movs	r3, #0
    5ec8:	6023      	str	r3, [r4, #0]
    5eca:	bd10      	pop	{r4, pc}
    5ecc:	00011639 	.word	0x00011639

00005ed0 <_lv_style_get_mem_size>:
    if(style->map == NULL) return 0;
    5ed0:	6802      	ldr	r2, [r0, #0]
    5ed2:	b1d2      	cbz	r2, 5f0a <_lv_style_get_mem_size+0x3a>
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    5ed4:	7813      	ldrb	r3, [r2, #0]
    5ed6:	2bff      	cmp	r3, #255	; 0xff
    5ed8:	d013      	beq.n	5f02 <_lv_style_get_mem_size+0x32>
    5eda:	2000      	movs	r0, #0
    5edc:	e006      	b.n	5eec <_lv_style_get_mem_size+0x1c>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    5ede:	2b0b      	cmp	r3, #11
    5ee0:	dc0a      	bgt.n	5ef8 <_lv_style_get_mem_size+0x28>
    5ee2:	3002      	adds	r0, #2
        i += sizeof(lv_style_property_t);
    5ee4:	3002      	adds	r0, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    5ee6:	5c13      	ldrb	r3, [r2, r0]
    5ee8:	2bff      	cmp	r3, #255	; 0xff
    5eea:	d00b      	beq.n	5f04 <_lv_style_get_mem_size+0x34>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    5eec:	f003 030f 	and.w	r3, r3, #15
    5ef0:	2b08      	cmp	r3, #8
    5ef2:	dcf4      	bgt.n	5ede <_lv_style_get_mem_size+0xe>
    5ef4:	3002      	adds	r0, #2
    5ef6:	e7f5      	b.n	5ee4 <_lv_style_get_mem_size+0x14>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    5ef8:	2b0d      	cmp	r3, #13
    5efa:	bfd4      	ite	le
    5efc:	3001      	addle	r0, #1
        else i += sizeof(const void *);
    5efe:	3004      	addgt	r0, #4
    5f00:	e7f0      	b.n	5ee4 <_lv_style_get_mem_size+0x14>
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    5f02:	2000      	movs	r0, #0
    return i + sizeof(lv_style_property_t);
    5f04:	3002      	adds	r0, #2
    5f06:	b280      	uxth	r0, r0
    5f08:	4770      	bx	lr
    if(style->map == NULL) return 0;
    5f0a:	2000      	movs	r0, #0
}
    5f0c:	4770      	bx	lr
	...

00005f10 <lv_style_copy>:
    if(style_src == NULL) return;
    5f10:	b181      	cbz	r1, 5f34 <lv_style_copy+0x24>
{
    5f12:	b570      	push	{r4, r5, r6, lr}
    5f14:	460c      	mov	r4, r1
    if(style_src->map == NULL) return;
    5f16:	680a      	ldr	r2, [r1, #0]
    5f18:	b15a      	cbz	r2, 5f32 <lv_style_copy+0x22>
    5f1a:	4605      	mov	r5, r0
    uint16_t size = _lv_style_get_mem_size(style_src);
    5f1c:	4608      	mov	r0, r1
    5f1e:	4b06      	ldr	r3, [pc, #24]	; (5f38 <lv_style_copy+0x28>)
    5f20:	4798      	blx	r3
    5f22:	4606      	mov	r6, r0
    style_dest->map = lv_mem_alloc(size);
    5f24:	4b05      	ldr	r3, [pc, #20]	; (5f3c <lv_style_copy+0x2c>)
    5f26:	4798      	blx	r3
    5f28:	6028      	str	r0, [r5, #0]
    _lv_memcpy(style_dest->map, style_src->map, size);
    5f2a:	4632      	mov	r2, r6
    5f2c:	6821      	ldr	r1, [r4, #0]
    5f2e:	4b04      	ldr	r3, [pc, #16]	; (5f40 <lv_style_copy+0x30>)
    5f30:	4798      	blx	r3
    5f32:	bd70      	pop	{r4, r5, r6, pc}
    5f34:	4770      	bx	lr
    5f36:	bf00      	nop
    5f38:	00005ed1 	.word	0x00005ed1
    5f3c:	00011575 	.word	0x00011575
    5f40:	000117a5 	.word	0x000117a5

00005f44 <lv_style_remove_prop>:
    if(style == NULL) return false;
    5f44:	2800      	cmp	r0, #0
    5f46:	d06b      	beq.n	6020 <lv_style_remove_prop+0xdc>
{
    5f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5f4c:	4607      	mov	r7, r0
    if(style->map == NULL) return -1;
    5f4e:	6800      	ldr	r0, [r0, #0]
    5f50:	2800      	cmp	r0, #0
    5f52:	d06a      	beq.n	602a <lv_style_remove_prop+0xe6>
    uint8_t id_to_find = prop & 0xFF;
    5f54:	b2cd      	uxtb	r5, r1
    attr.full = (prop >> 8) & 0xFF;
    5f56:	0a0e      	lsrs	r6, r1, #8
    5f58:	46b4      	mov	ip, r6
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    5f5a:	7803      	ldrb	r3, [r0, #0]
    5f5c:	2bff      	cmp	r3, #255	; 0xff
    5f5e:	d03b      	beq.n	5fd8 <lv_style_remove_prop+0x94>
    5f60:	f04f 3eff 	mov.w	lr, #4294967295
    5f64:	46f0      	mov	r8, lr
    5f66:	2200      	movs	r2, #0
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    5f68:	f3cc 0c06 	ubfx	ip, ip, #0, #7
    5f6c:	e027      	b.n	5fbe <lv_style_remove_prop+0x7a>
            attr_i.full = style->map[i + 1];
    5f6e:	1884      	adds	r4, r0, r2
    5f70:	7864      	ldrb	r4, [r4, #1]
            if(attr_i.bits.state == attr.bits.state) {
    5f72:	ea86 0904 	eor.w	r9, r6, r4
    5f76:	f019 0f7f 	tst.w	r9, #127	; 0x7f
    5f7a:	d00b      	beq.n	5f94 <lv_style_remove_prop+0x50>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    5f7c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    5f80:	ea34 090c 	bics.w	r9, r4, ip
    5f84:	d11d      	bne.n	5fc2 <lv_style_remove_prop+0x7e>
                if(attr_i.bits.state > weight) {
    5f86:	4544      	cmp	r4, r8
                    weight = attr_i.bits.state;
    5f88:	bfc4      	itt	gt
    5f8a:	fa0f f884 	sxthgt.w	r8, r4
                    id_guess = i;
    5f8e:	fa0f fe82 	sxthgt.w	lr, r2
    5f92:	e016      	b.n	5fc2 <lv_style_remove_prop+0x7e>
                return i;
    5f94:	4696      	mov	lr, r2
    if(id >= 0) {
    5f96:	f1be 0f00 	cmp.w	lr, #0
    5f9a:	db43      	blt.n	6024 <lv_style_remove_prop+0xe0>
        attr_found.full = *(style->map + id + 1);
    5f9c:	4674      	mov	r4, lr
    5f9e:	4470      	add	r0, lr
        if(attr_found.bits.state == attr_goal.bits.state) {
    5fa0:	7843      	ldrb	r3, [r0, #1]
    5fa2:	405e      	eors	r6, r3
    5fa4:	f016 0f7f 	tst.w	r6, #127	; 0x7f
    5fa8:	d019      	beq.n	5fde <lv_style_remove_prop+0x9a>
    return false;
    5faa:	2000      	movs	r0, #0
    5fac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    5fb0:	2b0b      	cmp	r3, #11
    5fb2:	dc0c      	bgt.n	5fce <lv_style_remove_prop+0x8a>
    5fb4:	3202      	adds	r2, #2
        i += sizeof(lv_style_property_t);
    5fb6:	3202      	adds	r2, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    5fb8:	5c83      	ldrb	r3, [r0, r2]
    5fba:	2bff      	cmp	r3, #255	; 0xff
    5fbc:	d0eb      	beq.n	5f96 <lv_style_remove_prop+0x52>
        if(style->map[i] == id_to_find) {
    5fbe:	429d      	cmp	r5, r3
    5fc0:	d0d5      	beq.n	5f6e <lv_style_remove_prop+0x2a>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    5fc2:	f003 030f 	and.w	r3, r3, #15
    5fc6:	2b08      	cmp	r3, #8
    5fc8:	dcf2      	bgt.n	5fb0 <lv_style_remove_prop+0x6c>
    5fca:	3202      	adds	r2, #2
    5fcc:	e7f3      	b.n	5fb6 <lv_style_remove_prop+0x72>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    5fce:	2b0d      	cmp	r3, #13
    5fd0:	bfd4      	ite	le
    5fd2:	3201      	addle	r2, #1
        else i += sizeof(const void *);
    5fd4:	3204      	addgt	r2, #4
    5fd6:	e7ee      	b.n	5fb6 <lv_style_remove_prop+0x72>
    int16_t id_guess = -1;
    5fd8:	f04f 3eff 	mov.w	lr, #4294967295
    5fdc:	e7db      	b.n	5f96 <lv_style_remove_prop+0x52>
    5fde:	460d      	mov	r5, r1
            uint32_t map_size = _lv_style_get_mem_size(style);
    5fe0:	4638      	mov	r0, r7
    5fe2:	4b13      	ldr	r3, [pc, #76]	; (6030 <lv_style_remove_prop+0xec>)
    5fe4:	4798      	blx	r3
            if((prop & 0xF) < LV_STYLE_ID_COLOR) prop_size += sizeof(lv_style_int_t);
    5fe6:	f005 010f 	and.w	r1, r5, #15
            else if((prop & 0xF) < LV_STYLE_ID_OPA) prop_size += sizeof(lv_color_t);
    5fea:	290b      	cmp	r1, #11
    5fec:	dd04      	ble.n	5ff8 <lv_style_remove_prop+0xb4>
            else prop_size += sizeof(const void *);
    5fee:	290e      	cmp	r1, #14
    5ff0:	bfb4      	ite	lt
    5ff2:	2103      	movlt	r1, #3
    5ff4:	2106      	movge	r1, #6
    5ff6:	e000      	b.n	5ffa <lv_style_remove_prop+0xb6>
            else if((prop & 0xF) < LV_STYLE_ID_OPA) prop_size += sizeof(lv_color_t);
    5ff8:	2104      	movs	r1, #4
            for(i = id; i < map_size - prop_size; i++) {
    5ffa:	460d      	mov	r5, r1
    5ffc:	1a41      	subs	r1, r0, r1
    5ffe:	428c      	cmp	r4, r1
    6000:	d207      	bcs.n	6012 <lv_style_remove_prop+0xce>
    6002:	4623      	mov	r3, r4
                style->map[i] = style->map[i + prop_size];
    6004:	683a      	ldr	r2, [r7, #0]
    6006:	1954      	adds	r4, r2, r5
    6008:	5ce4      	ldrb	r4, [r4, r3]
    600a:	54d4      	strb	r4, [r2, r3]
            for(i = id; i < map_size - prop_size; i++) {
    600c:	3301      	adds	r3, #1
    600e:	428b      	cmp	r3, r1
    6010:	d1f8      	bne.n	6004 <lv_style_remove_prop+0xc0>
            style->map = lv_mem_realloc(style->map, map_size - prop_size);
    6012:	6838      	ldr	r0, [r7, #0]
    6014:	4b07      	ldr	r3, [pc, #28]	; (6034 <lv_style_remove_prop+0xf0>)
    6016:	4798      	blx	r3
    6018:	6038      	str	r0, [r7, #0]
            return true;
    601a:	2001      	movs	r0, #1
    601c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(style == NULL) return false;
    6020:	2000      	movs	r0, #0
    6022:	4770      	bx	lr
    return false;
    6024:	2000      	movs	r0, #0
    6026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    602a:	2000      	movs	r0, #0
}
    602c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6030:	00005ed1 	.word	0x00005ed1
    6034:	000119e9 	.word	0x000119e9

00006038 <_lv_style_set_int>:
{
    6038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    603c:	b084      	sub	sp, #16
    603e:	f8ad 1006 	strh.w	r1, [sp, #6]
    6042:	f8ad 2004 	strh.w	r2, [sp, #4]
    if(style->map == NULL) return -1;
    6046:	6804      	ldr	r4, [r0, #0]
    6048:	2c00      	cmp	r4, #0
    604a:	d048      	beq.n	60de <_lv_style_set_int+0xa6>
    uint8_t id_to_find = prop & 0xFF;
    604c:	b2cf      	uxtb	r7, r1
    attr.full = (prop >> 8) & 0xFF;
    604e:	0a0d      	lsrs	r5, r1, #8
    6050:	46ae      	mov	lr, r5
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    6052:	7823      	ldrb	r3, [r4, #0]
    6054:	2bff      	cmp	r3, #255	; 0xff
    6056:	d02c      	beq.n	60b2 <_lv_style_set_int+0x7a>
    6058:	f04f 31ff 	mov.w	r1, #4294967295
    605c:	4688      	mov	r8, r1
    605e:	2200      	movs	r2, #0
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    6060:	f3ce 0e06 	ubfx	lr, lr, #0, #7
    6064:	e018      	b.n	6098 <_lv_style_set_int+0x60>
            attr_i.full = style->map[i + 1];
    6066:	18a6      	adds	r6, r4, r2
    6068:	7876      	ldrb	r6, [r6, #1]
            if(attr_i.bits.state == attr.bits.state) {
    606a:	ea85 0c06 	eor.w	ip, r5, r6
    606e:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
    6072:	d021      	beq.n	60b8 <_lv_style_set_int+0x80>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    6074:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    6078:	ea36 0c0e 	bics.w	ip, r6, lr
    607c:	d10e      	bne.n	609c <_lv_style_set_int+0x64>
                if(attr_i.bits.state > weight) {
    607e:	4546      	cmp	r6, r8
                    weight = attr_i.bits.state;
    6080:	bfc4      	itt	gt
    6082:	fa0f f886 	sxthgt.w	r8, r6
                    id_guess = i;
    6086:	b211      	sxthgt	r1, r2
    6088:	e008      	b.n	609c <_lv_style_set_int+0x64>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    608a:	2b0b      	cmp	r3, #11
    608c:	dc0c      	bgt.n	60a8 <_lv_style_set_int+0x70>
    608e:	3202      	adds	r2, #2
        i += sizeof(lv_style_property_t);
    6090:	3202      	adds	r2, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    6092:	5ca3      	ldrb	r3, [r4, r2]
    6094:	2bff      	cmp	r3, #255	; 0xff
    6096:	d00e      	beq.n	60b6 <_lv_style_set_int+0x7e>
        if(style->map[i] == id_to_find) {
    6098:	429f      	cmp	r7, r3
    609a:	d0e4      	beq.n	6066 <_lv_style_set_int+0x2e>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    609c:	f003 030f 	and.w	r3, r3, #15
    60a0:	2b08      	cmp	r3, #8
    60a2:	dcf2      	bgt.n	608a <_lv_style_set_int+0x52>
    60a4:	3202      	adds	r2, #2
    60a6:	e7f3      	b.n	6090 <_lv_style_set_int+0x58>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    60a8:	2b0d      	cmp	r3, #13
    60aa:	bfd4      	ite	le
    60ac:	3201      	addle	r2, #1
        else i += sizeof(const void *);
    60ae:	3204      	addgt	r2, #4
    60b0:	e7ee      	b.n	6090 <_lv_style_set_int+0x58>
    int16_t id_guess = -1;
    60b2:	f04f 31ff 	mov.w	r1, #4294967295
    return id_guess;
    60b6:	460a      	mov	r2, r1
    if(id >= 0) {
    60b8:	2a00      	cmp	r2, #0
    60ba:	db10      	blt.n	60de <_lv_style_set_int+0xa6>
        attr_found.full = *(style->map + id + 1);
    60bc:	18a3      	adds	r3, r4, r2
        if(attr_found.bits.state == attr_goal.bits.state) {
    60be:	785b      	ldrb	r3, [r3, #1]
    60c0:	405d      	eors	r5, r3
    60c2:	f015 0f7f 	tst.w	r5, #127	; 0x7f
    60c6:	d10a      	bne.n	60de <_lv_style_set_int+0xa6>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &value, sizeof(lv_style_int_t));
    60c8:	3202      	adds	r2, #2
    60ca:	18a3      	adds	r3, r4, r2
        *d8 = *s8;
    60cc:	f89d 1004 	ldrb.w	r1, [sp, #4]
    60d0:	54a1      	strb	r1, [r4, r2]
    60d2:	f89d 2005 	ldrb.w	r2, [sp, #5]
    60d6:	705a      	strb	r2, [r3, #1]
}
    60d8:	b004      	add	sp, #16
    60da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    60de:	4606      	mov	r6, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
    60e0:	23ff      	movs	r3, #255	; 0xff
    60e2:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
    60e6:	4b19      	ldr	r3, [pc, #100]	; (614c <_lv_style_set_int+0x114>)
    60e8:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
    60ea:	2800      	cmp	r0, #0
    60ec:	bf08      	it	eq
    60ee:	2002      	moveq	r0, #2
    size += sizeof(lv_style_property_t) + sizeof(lv_style_int_t);
    60f0:	1d05      	adds	r5, r0, #4
    style->map = lv_mem_realloc(style->map, size);
    60f2:	b2ad      	uxth	r5, r5
    60f4:	4629      	mov	r1, r5
    60f6:	4620      	mov	r0, r4
    60f8:	4b15      	ldr	r3, [pc, #84]	; (6150 <_lv_style_set_int+0x118>)
    60fa:	4798      	blx	r3
    60fc:	6030      	str	r0, [r6, #0]
    LV_ASSERT_MEM(style->map);
    60fe:	4b15      	ldr	r3, [pc, #84]	; (6154 <_lv_style_set_int+0x11c>)
    6100:	4798      	blx	r3
    6102:	b1e8      	cbz	r0, 6140 <_lv_style_set_int+0x108>
    if(style == NULL) return;
    6104:	2e00      	cmp	r6, #0
    6106:	d0e7      	beq.n	60d8 <_lv_style_set_int+0xa0>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
    6108:	1fab      	subs	r3, r5, #6
    610a:	6832      	ldr	r2, [r6, #0]
    610c:	18d1      	adds	r1, r2, r3
    610e:	f89d 0006 	ldrb.w	r0, [sp, #6]
    6112:	54d0      	strb	r0, [r2, r3]
    6114:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6118:	704b      	strb	r3, [r1, #1]
    611a:	1f2b      	subs	r3, r5, #4
    _lv_memcpy_small(style->map + size - sizeof(lv_style_int_t) - end_mark_size, &value, sizeof(lv_style_int_t));
    611c:	6832      	ldr	r2, [r6, #0]
    611e:	18d1      	adds	r1, r2, r3
    6120:	f89d 0004 	ldrb.w	r0, [sp, #4]
    6124:	54d0      	strb	r0, [r2, r3]
    6126:	f89d 3005 	ldrb.w	r3, [sp, #5]
    612a:	704b      	strb	r3, [r1, #1]
    612c:	3d02      	subs	r5, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
    612e:	6833      	ldr	r3, [r6, #0]
    6130:	195a      	adds	r2, r3, r5
    6132:	f89d 100e 	ldrb.w	r1, [sp, #14]
    6136:	5559      	strb	r1, [r3, r5]
    6138:	f89d 300f 	ldrb.w	r3, [sp, #15]
    613c:	7053      	strb	r3, [r2, #1]
    613e:	e7cb      	b.n	60d8 <_lv_style_set_int+0xa0>
    LV_ASSERT_MEM(style->map);
    6140:	6832      	ldr	r2, [r6, #0]
    6142:	2300      	movs	r3, #0
    6144:	4804      	ldr	r0, [pc, #16]	; (6158 <_lv_style_set_int+0x120>)
    6146:	4905      	ldr	r1, [pc, #20]	; (615c <_lv_style_set_int+0x124>)
    6148:	4788      	blx	r1
    614a:	e7fe      	b.n	614a <_lv_style_set_int+0x112>
    614c:	00005ed1 	.word	0x00005ed1
    6150:	000119e9 	.word	0x000119e9
    6154:	0000295d 	.word	0x0000295d
    6158:	0001786c 	.word	0x0001786c
    615c:	00002965 	.word	0x00002965

00006160 <_lv_style_set_color>:
{
    6160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6164:	b084      	sub	sp, #16
    6166:	f8ad 2004 	strh.w	r2, [sp, #4]
    616a:	f8ad 1006 	strh.w	r1, [sp, #6]
    if(style->map == NULL) return -1;
    616e:	6804      	ldr	r4, [r0, #0]
    6170:	2c00      	cmp	r4, #0
    6172:	d048      	beq.n	6206 <_lv_style_set_color+0xa6>
    uint8_t id_to_find = prop & 0xFF;
    6174:	b2cf      	uxtb	r7, r1
    attr.full = (prop >> 8) & 0xFF;
    6176:	0a0d      	lsrs	r5, r1, #8
    6178:	46ae      	mov	lr, r5
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    617a:	7823      	ldrb	r3, [r4, #0]
    617c:	2bff      	cmp	r3, #255	; 0xff
    617e:	d02c      	beq.n	61da <_lv_style_set_color+0x7a>
    6180:	f04f 31ff 	mov.w	r1, #4294967295
    6184:	4688      	mov	r8, r1
    6186:	2200      	movs	r2, #0
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    6188:	f3ce 0e06 	ubfx	lr, lr, #0, #7
    618c:	e018      	b.n	61c0 <_lv_style_set_color+0x60>
            attr_i.full = style->map[i + 1];
    618e:	18a6      	adds	r6, r4, r2
    6190:	7876      	ldrb	r6, [r6, #1]
            if(attr_i.bits.state == attr.bits.state) {
    6192:	ea85 0c06 	eor.w	ip, r5, r6
    6196:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
    619a:	d021      	beq.n	61e0 <_lv_style_set_color+0x80>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    619c:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    61a0:	ea36 0c0e 	bics.w	ip, r6, lr
    61a4:	d10e      	bne.n	61c4 <_lv_style_set_color+0x64>
                if(attr_i.bits.state > weight) {
    61a6:	4546      	cmp	r6, r8
                    weight = attr_i.bits.state;
    61a8:	bfc4      	itt	gt
    61aa:	fa0f f886 	sxthgt.w	r8, r6
                    id_guess = i;
    61ae:	b211      	sxthgt	r1, r2
    61b0:	e008      	b.n	61c4 <_lv_style_set_color+0x64>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    61b2:	2b0b      	cmp	r3, #11
    61b4:	dc0c      	bgt.n	61d0 <_lv_style_set_color+0x70>
    61b6:	3202      	adds	r2, #2
        i += sizeof(lv_style_property_t);
    61b8:	3202      	adds	r2, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    61ba:	5ca3      	ldrb	r3, [r4, r2]
    61bc:	2bff      	cmp	r3, #255	; 0xff
    61be:	d00e      	beq.n	61de <_lv_style_set_color+0x7e>
        if(style->map[i] == id_to_find) {
    61c0:	429f      	cmp	r7, r3
    61c2:	d0e4      	beq.n	618e <_lv_style_set_color+0x2e>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    61c4:	f003 030f 	and.w	r3, r3, #15
    61c8:	2b08      	cmp	r3, #8
    61ca:	dcf2      	bgt.n	61b2 <_lv_style_set_color+0x52>
    61cc:	3202      	adds	r2, #2
    61ce:	e7f3      	b.n	61b8 <_lv_style_set_color+0x58>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    61d0:	2b0d      	cmp	r3, #13
    61d2:	bfd4      	ite	le
    61d4:	3201      	addle	r2, #1
        else i += sizeof(const void *);
    61d6:	3204      	addgt	r2, #4
    61d8:	e7ee      	b.n	61b8 <_lv_style_set_color+0x58>
    int16_t id_guess = -1;
    61da:	f04f 31ff 	mov.w	r1, #4294967295
    return id_guess;
    61de:	460a      	mov	r2, r1
    if(id >= 0) {
    61e0:	2a00      	cmp	r2, #0
    61e2:	db10      	blt.n	6206 <_lv_style_set_color+0xa6>
        attr_found.full = *(style->map + id + 1);
    61e4:	18a3      	adds	r3, r4, r2
        if(attr_found.bits.state == attr_goal.bits.state) {
    61e6:	785b      	ldrb	r3, [r3, #1]
    61e8:	405d      	eors	r5, r3
    61ea:	f015 0f7f 	tst.w	r5, #127	; 0x7f
    61ee:	d10a      	bne.n	6206 <_lv_style_set_color+0xa6>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &color, sizeof(lv_color_t));
    61f0:	3202      	adds	r2, #2
    61f2:	18a3      	adds	r3, r4, r2
    61f4:	f89d 1004 	ldrb.w	r1, [sp, #4]
    61f8:	54a1      	strb	r1, [r4, r2]
    61fa:	f89d 2005 	ldrb.w	r2, [sp, #5]
    61fe:	705a      	strb	r2, [r3, #1]
}
    6200:	b004      	add	sp, #16
    6202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6206:	4606      	mov	r6, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
    6208:	23ff      	movs	r3, #255	; 0xff
    620a:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
    620e:	4b19      	ldr	r3, [pc, #100]	; (6274 <_lv_style_set_color+0x114>)
    6210:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
    6212:	2800      	cmp	r0, #0
    6214:	bf08      	it	eq
    6216:	2002      	moveq	r0, #2
    size += sizeof(lv_style_property_t) + sizeof(lv_color_t);
    6218:	1d05      	adds	r5, r0, #4
    style->map = lv_mem_realloc(style->map, size);
    621a:	b2ad      	uxth	r5, r5
    621c:	4629      	mov	r1, r5
    621e:	4620      	mov	r0, r4
    6220:	4b15      	ldr	r3, [pc, #84]	; (6278 <_lv_style_set_color+0x118>)
    6222:	4798      	blx	r3
    6224:	6030      	str	r0, [r6, #0]
    LV_ASSERT_MEM(style->map);
    6226:	4b15      	ldr	r3, [pc, #84]	; (627c <_lv_style_set_color+0x11c>)
    6228:	4798      	blx	r3
    622a:	b1e8      	cbz	r0, 6268 <_lv_style_set_color+0x108>
    if(style == NULL) return;
    622c:	2e00      	cmp	r6, #0
    622e:	d0e7      	beq.n	6200 <_lv_style_set_color+0xa0>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
    6230:	1fab      	subs	r3, r5, #6
    6232:	6832      	ldr	r2, [r6, #0]
    6234:	18d1      	adds	r1, r2, r3
    6236:	f89d 0006 	ldrb.w	r0, [sp, #6]
    623a:	54d0      	strb	r0, [r2, r3]
    623c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6240:	704b      	strb	r3, [r1, #1]
    6242:	1f2b      	subs	r3, r5, #4
    _lv_memcpy_small(style->map + size - sizeof(lv_color_t) - end_mark_size, &color, sizeof(lv_color_t));
    6244:	6832      	ldr	r2, [r6, #0]
    6246:	18d1      	adds	r1, r2, r3
    6248:	f89d 0004 	ldrb.w	r0, [sp, #4]
    624c:	54d0      	strb	r0, [r2, r3]
    624e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6252:	704b      	strb	r3, [r1, #1]
    6254:	3d02      	subs	r5, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
    6256:	6833      	ldr	r3, [r6, #0]
    6258:	195a      	adds	r2, r3, r5
    625a:	f89d 100e 	ldrb.w	r1, [sp, #14]
    625e:	5559      	strb	r1, [r3, r5]
    6260:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6264:	7053      	strb	r3, [r2, #1]
    6266:	e7cb      	b.n	6200 <_lv_style_set_color+0xa0>
    LV_ASSERT_MEM(style->map);
    6268:	6832      	ldr	r2, [r6, #0]
    626a:	2300      	movs	r3, #0
    626c:	4804      	ldr	r0, [pc, #16]	; (6280 <_lv_style_set_color+0x120>)
    626e:	4905      	ldr	r1, [pc, #20]	; (6284 <_lv_style_set_color+0x124>)
    6270:	4788      	blx	r1
    6272:	e7fe      	b.n	6272 <_lv_style_set_color+0x112>
    6274:	00005ed1 	.word	0x00005ed1
    6278:	000119e9 	.word	0x000119e9
    627c:	0000295d 	.word	0x0000295d
    6280:	0001786c 	.word	0x0001786c
    6284:	00002965 	.word	0x00002965

00006288 <_lv_style_set_opa>:
{
    6288:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    628c:	b085      	sub	sp, #20
    628e:	f8ad 1006 	strh.w	r1, [sp, #6]
    if(style->map == NULL) return -1;
    6292:	6804      	ldr	r4, [r0, #0]
    6294:	2c00      	cmp	r4, #0
    6296:	d043      	beq.n	6320 <_lv_style_set_opa+0x98>
    uint8_t id_to_find = prop & 0xFF;
    6298:	fa5f fe81 	uxtb.w	lr, r1
    attr.full = (prop >> 8) & 0xFF;
    629c:	0a0d      	lsrs	r5, r1, #8
    629e:	46ac      	mov	ip, r5
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    62a0:	7823      	ldrb	r3, [r4, #0]
    62a2:	2bff      	cmp	r3, #255	; 0xff
    62a4:	d02c      	beq.n	6300 <_lv_style_set_opa+0x78>
    62a6:	f04f 37ff 	mov.w	r7, #4294967295
    62aa:	46b8      	mov	r8, r7
    62ac:	2100      	movs	r1, #0
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    62ae:	f3cc 0c06 	ubfx	ip, ip, #0, #7
    62b2:	e018      	b.n	62e6 <_lv_style_set_opa+0x5e>
            attr_i.full = style->map[i + 1];
    62b4:	1866      	adds	r6, r4, r1
    62b6:	7876      	ldrb	r6, [r6, #1]
            if(attr_i.bits.state == attr.bits.state) {
    62b8:	ea85 0906 	eor.w	r9, r5, r6
    62bc:	f019 0f7f 	tst.w	r9, #127	; 0x7f
    62c0:	d021      	beq.n	6306 <_lv_style_set_opa+0x7e>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    62c2:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    62c6:	ea36 090c 	bics.w	r9, r6, ip
    62ca:	d10e      	bne.n	62ea <_lv_style_set_opa+0x62>
                if(attr_i.bits.state > weight) {
    62cc:	4546      	cmp	r6, r8
                    weight = attr_i.bits.state;
    62ce:	bfc4      	itt	gt
    62d0:	fa0f f886 	sxthgt.w	r8, r6
                    id_guess = i;
    62d4:	b20f      	sxthgt	r7, r1
    62d6:	e008      	b.n	62ea <_lv_style_set_opa+0x62>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    62d8:	2b0b      	cmp	r3, #11
    62da:	dc0c      	bgt.n	62f6 <_lv_style_set_opa+0x6e>
    62dc:	3102      	adds	r1, #2
        i += sizeof(lv_style_property_t);
    62de:	3102      	adds	r1, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    62e0:	5c63      	ldrb	r3, [r4, r1]
    62e2:	2bff      	cmp	r3, #255	; 0xff
    62e4:	d00e      	beq.n	6304 <_lv_style_set_opa+0x7c>
        if(style->map[i] == id_to_find) {
    62e6:	459e      	cmp	lr, r3
    62e8:	d0e4      	beq.n	62b4 <_lv_style_set_opa+0x2c>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    62ea:	f003 030f 	and.w	r3, r3, #15
    62ee:	2b08      	cmp	r3, #8
    62f0:	dcf2      	bgt.n	62d8 <_lv_style_set_opa+0x50>
    62f2:	3102      	adds	r1, #2
    62f4:	e7f3      	b.n	62de <_lv_style_set_opa+0x56>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    62f6:	2b0d      	cmp	r3, #13
    62f8:	bfd4      	ite	le
    62fa:	3101      	addle	r1, #1
        else i += sizeof(const void *);
    62fc:	3104      	addgt	r1, #4
    62fe:	e7ee      	b.n	62de <_lv_style_set_opa+0x56>
    int16_t id_guess = -1;
    6300:	f04f 37ff 	mov.w	r7, #4294967295
    return id_guess;
    6304:	4639      	mov	r1, r7
    if(id >= 0) {
    6306:	2900      	cmp	r1, #0
    6308:	db0a      	blt.n	6320 <_lv_style_set_opa+0x98>
        attr_found.full = *(style->map + id + 1);
    630a:	1863      	adds	r3, r4, r1
        if(attr_found.bits.state == attr_goal.bits.state) {
    630c:	785b      	ldrb	r3, [r3, #1]
    630e:	405d      	eors	r5, r3
    6310:	f015 0f7f 	tst.w	r5, #127	; 0x7f
    6314:	d104      	bne.n	6320 <_lv_style_set_opa+0x98>
    6316:	4421      	add	r1, r4
    6318:	708a      	strb	r2, [r1, #2]
}
    631a:	b005      	add	sp, #20
    631c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6320:	4617      	mov	r7, r2
    6322:	4606      	mov	r6, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
    6324:	23ff      	movs	r3, #255	; 0xff
    6326:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
    632a:	4b17      	ldr	r3, [pc, #92]	; (6388 <_lv_style_set_opa+0x100>)
    632c:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
    632e:	2800      	cmp	r0, #0
    6330:	bf08      	it	eq
    6332:	2002      	moveq	r0, #2
    size += sizeof(lv_style_property_t) + sizeof(lv_opa_t);
    6334:	1cc5      	adds	r5, r0, #3
    style->map = lv_mem_realloc(style->map, size);
    6336:	b2ad      	uxth	r5, r5
    6338:	4629      	mov	r1, r5
    633a:	4620      	mov	r0, r4
    633c:	4b13      	ldr	r3, [pc, #76]	; (638c <_lv_style_set_opa+0x104>)
    633e:	4798      	blx	r3
    6340:	6030      	str	r0, [r6, #0]
    LV_ASSERT_MEM(style->map);
    6342:	4b13      	ldr	r3, [pc, #76]	; (6390 <_lv_style_set_opa+0x108>)
    6344:	4798      	blx	r3
    6346:	b1c0      	cbz	r0, 637a <_lv_style_set_opa+0xf2>
    if(style == NULL) return;
    6348:	2e00      	cmp	r6, #0
    634a:	d0e6      	beq.n	631a <_lv_style_set_opa+0x92>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
    634c:	1f6b      	subs	r3, r5, #5
    634e:	6832      	ldr	r2, [r6, #0]
    6350:	18d1      	adds	r1, r2, r3
    6352:	f89d 0006 	ldrb.w	r0, [sp, #6]
    6356:	54d0      	strb	r0, [r2, r3]
    6358:	f89d 3007 	ldrb.w	r3, [sp, #7]
    635c:	704b      	strb	r3, [r1, #1]
    635e:	6833      	ldr	r3, [r6, #0]
    6360:	442b      	add	r3, r5
    6362:	f803 7c03 	strb.w	r7, [r3, #-3]
    _lv_memcpy_small(style->map + size - sizeof(lv_opa_t) - end_mark_size, &opa, sizeof(lv_opa_t));
    6366:	3d02      	subs	r5, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
    6368:	6833      	ldr	r3, [r6, #0]
    636a:	195a      	adds	r2, r3, r5
    636c:	f89d 100e 	ldrb.w	r1, [sp, #14]
    6370:	5559      	strb	r1, [r3, r5]
    6372:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6376:	7053      	strb	r3, [r2, #1]
    6378:	e7cf      	b.n	631a <_lv_style_set_opa+0x92>
    LV_ASSERT_MEM(style->map);
    637a:	6832      	ldr	r2, [r6, #0]
    637c:	2300      	movs	r3, #0
    637e:	4805      	ldr	r0, [pc, #20]	; (6394 <_lv_style_set_opa+0x10c>)
    6380:	4905      	ldr	r1, [pc, #20]	; (6398 <_lv_style_set_opa+0x110>)
    6382:	4788      	blx	r1
    6384:	e7fe      	b.n	6384 <_lv_style_set_opa+0xfc>
    6386:	bf00      	nop
    6388:	00005ed1 	.word	0x00005ed1
    638c:	000119e9 	.word	0x000119e9
    6390:	0000295d 	.word	0x0000295d
    6394:	0001786c 	.word	0x0001786c
    6398:	00002965 	.word	0x00002965

0000639c <_lv_style_set_ptr>:
{
    639c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    63a0:	b084      	sub	sp, #16
    63a2:	9200      	str	r2, [sp, #0]
    63a4:	f8ad 1006 	strh.w	r1, [sp, #6]
    if(style->map == NULL) return -1;
    63a8:	6804      	ldr	r4, [r0, #0]
    63aa:	2c00      	cmp	r4, #0
    63ac:	d04e      	beq.n	644c <_lv_style_set_ptr+0xb0>
    uint8_t id_to_find = prop & 0xFF;
    63ae:	b2cf      	uxtb	r7, r1
    attr.full = (prop >> 8) & 0xFF;
    63b0:	0a0d      	lsrs	r5, r1, #8
    63b2:	46ae      	mov	lr, r5
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    63b4:	7823      	ldrb	r3, [r4, #0]
    63b6:	2bff      	cmp	r3, #255	; 0xff
    63b8:	d02c      	beq.n	6414 <_lv_style_set_ptr+0x78>
    63ba:	f04f 31ff 	mov.w	r1, #4294967295
    63be:	4688      	mov	r8, r1
    63c0:	2200      	movs	r2, #0
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    63c2:	f3ce 0e06 	ubfx	lr, lr, #0, #7
    63c6:	e018      	b.n	63fa <_lv_style_set_ptr+0x5e>
            attr_i.full = style->map[i + 1];
    63c8:	18a6      	adds	r6, r4, r2
    63ca:	7876      	ldrb	r6, [r6, #1]
            if(attr_i.bits.state == attr.bits.state) {
    63cc:	ea85 0c06 	eor.w	ip, r5, r6
    63d0:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
    63d4:	d021      	beq.n	641a <_lv_style_set_ptr+0x7e>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    63d6:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    63da:	ea36 0c0e 	bics.w	ip, r6, lr
    63de:	d10e      	bne.n	63fe <_lv_style_set_ptr+0x62>
                if(attr_i.bits.state > weight) {
    63e0:	4546      	cmp	r6, r8
                    weight = attr_i.bits.state;
    63e2:	bfc4      	itt	gt
    63e4:	fa0f f886 	sxthgt.w	r8, r6
                    id_guess = i;
    63e8:	b211      	sxthgt	r1, r2
    63ea:	e008      	b.n	63fe <_lv_style_set_ptr+0x62>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    63ec:	2b0b      	cmp	r3, #11
    63ee:	dc0c      	bgt.n	640a <_lv_style_set_ptr+0x6e>
    63f0:	3202      	adds	r2, #2
        i += sizeof(lv_style_property_t);
    63f2:	3202      	adds	r2, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    63f4:	5ca3      	ldrb	r3, [r4, r2]
    63f6:	2bff      	cmp	r3, #255	; 0xff
    63f8:	d00e      	beq.n	6418 <_lv_style_set_ptr+0x7c>
        if(style->map[i] == id_to_find) {
    63fa:	429f      	cmp	r7, r3
    63fc:	d0e4      	beq.n	63c8 <_lv_style_set_ptr+0x2c>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    63fe:	f003 030f 	and.w	r3, r3, #15
    6402:	2b08      	cmp	r3, #8
    6404:	dcf2      	bgt.n	63ec <_lv_style_set_ptr+0x50>
    6406:	3202      	adds	r2, #2
    6408:	e7f3      	b.n	63f2 <_lv_style_set_ptr+0x56>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    640a:	2b0d      	cmp	r3, #13
    640c:	bfd4      	ite	le
    640e:	3201      	addle	r2, #1
        else i += sizeof(const void *);
    6410:	3204      	addgt	r2, #4
    6412:	e7ee      	b.n	63f2 <_lv_style_set_ptr+0x56>
    int16_t id_guess = -1;
    6414:	f04f 31ff 	mov.w	r1, #4294967295
    return id_guess;
    6418:	460a      	mov	r2, r1
    if(id >= 0) {
    641a:	2a00      	cmp	r2, #0
    641c:	db16      	blt.n	644c <_lv_style_set_ptr+0xb0>
        attr_found.full = *(style->map + id + 1);
    641e:	18a3      	adds	r3, r4, r2
        if(attr_found.bits.state == attr_goal.bits.state) {
    6420:	785b      	ldrb	r3, [r3, #1]
    6422:	405d      	eors	r5, r3
    6424:	f015 0f7f 	tst.w	r5, #127	; 0x7f
    6428:	d110      	bne.n	644c <_lv_style_set_ptr+0xb0>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &p, sizeof(const void *));
    642a:	3202      	adds	r2, #2
    642c:	18a3      	adds	r3, r4, r2
    642e:	f89d 1000 	ldrb.w	r1, [sp]
    6432:	54a1      	strb	r1, [r4, r2]
    6434:	f89d 2001 	ldrb.w	r2, [sp, #1]
    6438:	705a      	strb	r2, [r3, #1]
    643a:	f89d 2002 	ldrb.w	r2, [sp, #2]
    643e:	709a      	strb	r2, [r3, #2]
    6440:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6444:	70da      	strb	r2, [r3, #3]
}
    6446:	b004      	add	sp, #16
    6448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    644c:	4606      	mov	r6, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
    644e:	23ff      	movs	r3, #255	; 0xff
    6450:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
    6454:	4b1c      	ldr	r3, [pc, #112]	; (64c8 <_lv_style_set_ptr+0x12c>)
    6456:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
    6458:	2800      	cmp	r0, #0
    645a:	bf08      	it	eq
    645c:	2002      	moveq	r0, #2
    size += sizeof(lv_style_property_t) + sizeof(const void *);
    645e:	1d85      	adds	r5, r0, #6
    style->map = lv_mem_realloc(style->map, size);
    6460:	b2ad      	uxth	r5, r5
    6462:	4629      	mov	r1, r5
    6464:	4620      	mov	r0, r4
    6466:	4b19      	ldr	r3, [pc, #100]	; (64cc <_lv_style_set_ptr+0x130>)
    6468:	4798      	blx	r3
    646a:	6030      	str	r0, [r6, #0]
    LV_ASSERT_MEM(style->map);
    646c:	4b18      	ldr	r3, [pc, #96]	; (64d0 <_lv_style_set_ptr+0x134>)
    646e:	4798      	blx	r3
    6470:	b320      	cbz	r0, 64bc <_lv_style_set_ptr+0x120>
    if(style == NULL) return;
    6472:	2e00      	cmp	r6, #0
    6474:	d0e7      	beq.n	6446 <_lv_style_set_ptr+0xaa>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
    6476:	f1a5 0308 	sub.w	r3, r5, #8
    647a:	6832      	ldr	r2, [r6, #0]
    647c:	18d1      	adds	r1, r2, r3
    647e:	f89d 0006 	ldrb.w	r0, [sp, #6]
    6482:	54d0      	strb	r0, [r2, r3]
    6484:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6488:	704b      	strb	r3, [r1, #1]
    648a:	1faa      	subs	r2, r5, #6
    _lv_memcpy_small(style->map + size - sizeof(const void *) - end_mark_size, &p, sizeof(const void *));
    648c:	6831      	ldr	r1, [r6, #0]
    648e:	188b      	adds	r3, r1, r2
    6490:	f89d 0000 	ldrb.w	r0, [sp]
    6494:	5488      	strb	r0, [r1, r2]
    6496:	f89d 2001 	ldrb.w	r2, [sp, #1]
    649a:	705a      	strb	r2, [r3, #1]
    649c:	f89d 2002 	ldrb.w	r2, [sp, #2]
    64a0:	709a      	strb	r2, [r3, #2]
    64a2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    64a6:	70da      	strb	r2, [r3, #3]
    64a8:	3d02      	subs	r5, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
    64aa:	6833      	ldr	r3, [r6, #0]
    64ac:	195a      	adds	r2, r3, r5
    64ae:	f89d 100e 	ldrb.w	r1, [sp, #14]
    64b2:	5559      	strb	r1, [r3, r5]
    64b4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    64b8:	7053      	strb	r3, [r2, #1]
    64ba:	e7c4      	b.n	6446 <_lv_style_set_ptr+0xaa>
    LV_ASSERT_MEM(style->map);
    64bc:	6832      	ldr	r2, [r6, #0]
    64be:	2300      	movs	r3, #0
    64c0:	4804      	ldr	r0, [pc, #16]	; (64d4 <_lv_style_set_ptr+0x138>)
    64c2:	4905      	ldr	r1, [pc, #20]	; (64d8 <_lv_style_set_ptr+0x13c>)
    64c4:	4788      	blx	r1
    64c6:	e7fe      	b.n	64c6 <_lv_style_set_ptr+0x12a>
    64c8:	00005ed1 	.word	0x00005ed1
    64cc:	000119e9 	.word	0x000119e9
    64d0:	0000295d 	.word	0x0000295d
    64d4:	0001786c 	.word	0x0001786c
    64d8:	00002965 	.word	0x00002965

000064dc <_lv_style_get_int>:
    if(style == NULL) return -1;
    64dc:	2800      	cmp	r0, #0
    64de:	d04d      	beq.n	657c <_lv_style_get_int+0xa0>
{
    64e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    64e4:	4684      	mov	ip, r0
    if(style->map == NULL) return -1;
    64e6:	6804      	ldr	r4, [r0, #0]
    64e8:	2c00      	cmp	r4, #0
    64ea:	d04a      	beq.n	6582 <_lv_style_get_int+0xa6>
    uint8_t id_to_find = prop & 0xFF;
    64ec:	b2ce      	uxtb	r6, r1
    attr.full = (prop >> 8) & 0xFF;
    64ee:	0a09      	lsrs	r1, r1, #8
    64f0:	468e      	mov	lr, r1
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    64f2:	7823      	ldrb	r3, [r4, #0]
    64f4:	2bff      	cmp	r3, #255	; 0xff
    64f6:	d03e      	beq.n	6576 <_lv_style_get_int+0x9a>
    64f8:	f04f 37ff 	mov.w	r7, #4294967295
    64fc:	46b8      	mov	r8, r7
    64fe:	2000      	movs	r0, #0
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    6500:	f3ce 0e06 	ubfx	lr, lr, #0, #7
    6504:	e02a      	b.n	655c <_lv_style_get_int+0x80>
            attr_i.full = style->map[i + 1];
    6506:	1825      	adds	r5, r4, r0
    6508:	786d      	ldrb	r5, [r5, #1]
            if(attr_i.bits.state == attr.bits.state) {
    650a:	ea81 0905 	eor.w	r9, r1, r5
    650e:	f019 0f7f 	tst.w	r9, #127	; 0x7f
    6512:	d00a      	beq.n	652a <_lv_style_get_int+0x4e>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    6514:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    6518:	ea35 090e 	bics.w	r9, r5, lr
    651c:	d120      	bne.n	6560 <_lv_style_get_int+0x84>
                if(attr_i.bits.state > weight) {
    651e:	4545      	cmp	r5, r8
                    weight = attr_i.bits.state;
    6520:	bfc4      	itt	gt
    6522:	fa0f f885 	sxthgt.w	r8, r5
                    id_guess = i;
    6526:	b207      	sxthgt	r7, r0
    6528:	e01a      	b.n	6560 <_lv_style_get_int+0x84>
                return i;
    652a:	4607      	mov	r7, r0
    if(id < 0) {
    652c:	2f00      	cmp	r7, #0
    652e:	db2c      	blt.n	658a <_lv_style_get_int+0xae>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_style_int_t));
    6530:	1cbb      	adds	r3, r7, #2
    6532:	18e0      	adds	r0, r4, r3
    6534:	5ce3      	ldrb	r3, [r4, r3]
    6536:	7013      	strb	r3, [r2, #0]
    6538:	7843      	ldrb	r3, [r0, #1]
    653a:	7053      	strb	r3, [r2, #1]
        attr_act.full = style->map[id + 1];
    653c:	f8dc 0000 	ldr.w	r0, [ip]
    6540:	4407      	add	r7, r0
    6542:	7878      	ldrb	r0, [r7, #1]
        return attr_act.bits.state & attr_goal.bits.state;
    6544:	f3c1 0106 	ubfx	r1, r1, #0, #7
    6548:	4008      	ands	r0, r1
    654a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    654e:	2b0b      	cmp	r3, #11
    6550:	dc0c      	bgt.n	656c <_lv_style_get_int+0x90>
    6552:	3002      	adds	r0, #2
        i += sizeof(lv_style_property_t);
    6554:	3002      	adds	r0, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    6556:	5c23      	ldrb	r3, [r4, r0]
    6558:	2bff      	cmp	r3, #255	; 0xff
    655a:	d0e7      	beq.n	652c <_lv_style_get_int+0x50>
        if(style->map[i] == id_to_find) {
    655c:	429e      	cmp	r6, r3
    655e:	d0d2      	beq.n	6506 <_lv_style_get_int+0x2a>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    6560:	f003 030f 	and.w	r3, r3, #15
    6564:	2b08      	cmp	r3, #8
    6566:	dcf2      	bgt.n	654e <_lv_style_get_int+0x72>
    6568:	3002      	adds	r0, #2
    656a:	e7f3      	b.n	6554 <_lv_style_get_int+0x78>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    656c:	2b0d      	cmp	r3, #13
    656e:	bfd4      	ite	le
    6570:	3001      	addle	r0, #1
        else i += sizeof(const void *);
    6572:	3004      	addgt	r0, #4
    6574:	e7ee      	b.n	6554 <_lv_style_get_int+0x78>
    int16_t id_guess = -1;
    6576:	f04f 37ff 	mov.w	r7, #4294967295
    657a:	e7d7      	b.n	652c <_lv_style_get_int+0x50>
    if(style == NULL) return -1;
    657c:	f04f 30ff 	mov.w	r0, #4294967295
    6580:	4770      	bx	lr
    if(style->map == NULL) return -1;
    6582:	f04f 30ff 	mov.w	r0, #4294967295
    6586:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    658a:	f04f 30ff 	mov.w	r0, #4294967295
}
    658e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00006592 <_lv_style_get_opa>:
    if(style == NULL) return -1;
    6592:	2800      	cmp	r0, #0
    6594:	d04a      	beq.n	662c <_lv_style_get_opa+0x9a>
{
    6596:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    659a:	4686      	mov	lr, r0
    if(style->map == NULL) return -1;
    659c:	6804      	ldr	r4, [r0, #0]
    659e:	2c00      	cmp	r4, #0
    65a0:	d047      	beq.n	6632 <_lv_style_get_opa+0xa0>
    uint8_t id_to_find = prop & 0xFF;
    65a2:	b2ce      	uxtb	r6, r1
    attr.full = (prop >> 8) & 0xFF;
    65a4:	0a09      	lsrs	r1, r1, #8
    65a6:	468c      	mov	ip, r1
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    65a8:	7823      	ldrb	r3, [r4, #0]
    65aa:	2bff      	cmp	r3, #255	; 0xff
    65ac:	d03b      	beq.n	6626 <_lv_style_get_opa+0x94>
    65ae:	f04f 37ff 	mov.w	r7, #4294967295
    65b2:	46b8      	mov	r8, r7
    65b4:	2000      	movs	r0, #0
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    65b6:	f3cc 0c06 	ubfx	ip, ip, #0, #7
    65ba:	e027      	b.n	660c <_lv_style_get_opa+0x7a>
            attr_i.full = style->map[i + 1];
    65bc:	1825      	adds	r5, r4, r0
    65be:	786d      	ldrb	r5, [r5, #1]
            if(attr_i.bits.state == attr.bits.state) {
    65c0:	ea81 0905 	eor.w	r9, r1, r5
    65c4:	f019 0f7f 	tst.w	r9, #127	; 0x7f
    65c8:	d00a      	beq.n	65e0 <_lv_style_get_opa+0x4e>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    65ca:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    65ce:	ea35 090c 	bics.w	r9, r5, ip
    65d2:	d11d      	bne.n	6610 <_lv_style_get_opa+0x7e>
                if(attr_i.bits.state > weight) {
    65d4:	4545      	cmp	r5, r8
                    weight = attr_i.bits.state;
    65d6:	bfc4      	itt	gt
    65d8:	fa0f f885 	sxthgt.w	r8, r5
                    id_guess = i;
    65dc:	b207      	sxthgt	r7, r0
    65de:	e017      	b.n	6610 <_lv_style_get_opa+0x7e>
                return i;
    65e0:	4607      	mov	r7, r0
    if(id < 0) {
    65e2:	2f00      	cmp	r7, #0
    65e4:	db29      	blt.n	663a <_lv_style_get_opa+0xa8>
    65e6:	443c      	add	r4, r7
    65e8:	78a3      	ldrb	r3, [r4, #2]
    65ea:	7013      	strb	r3, [r2, #0]
        attr_act.full = style->map[id + 1];
    65ec:	f8de 0000 	ldr.w	r0, [lr]
    65f0:	4407      	add	r7, r0
    65f2:	7878      	ldrb	r0, [r7, #1]
        return attr_act.bits.state & attr_goal.bits.state;
    65f4:	f3c1 0106 	ubfx	r1, r1, #0, #7
    65f8:	4008      	ands	r0, r1
    65fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    65fe:	2b0b      	cmp	r3, #11
    6600:	dc0c      	bgt.n	661c <_lv_style_get_opa+0x8a>
    6602:	3002      	adds	r0, #2
        i += sizeof(lv_style_property_t);
    6604:	3002      	adds	r0, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    6606:	5c23      	ldrb	r3, [r4, r0]
    6608:	2bff      	cmp	r3, #255	; 0xff
    660a:	d0ea      	beq.n	65e2 <_lv_style_get_opa+0x50>
        if(style->map[i] == id_to_find) {
    660c:	429e      	cmp	r6, r3
    660e:	d0d5      	beq.n	65bc <_lv_style_get_opa+0x2a>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    6610:	f003 030f 	and.w	r3, r3, #15
    6614:	2b08      	cmp	r3, #8
    6616:	dcf2      	bgt.n	65fe <_lv_style_get_opa+0x6c>
    6618:	3002      	adds	r0, #2
    661a:	e7f3      	b.n	6604 <_lv_style_get_opa+0x72>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    661c:	2b0d      	cmp	r3, #13
    661e:	bfd4      	ite	le
    6620:	3001      	addle	r0, #1
        else i += sizeof(const void *);
    6622:	3004      	addgt	r0, #4
    6624:	e7ee      	b.n	6604 <_lv_style_get_opa+0x72>
    int16_t id_guess = -1;
    6626:	f04f 37ff 	mov.w	r7, #4294967295
    662a:	e7da      	b.n	65e2 <_lv_style_get_opa+0x50>
    if(style == NULL) return -1;
    662c:	f04f 30ff 	mov.w	r0, #4294967295
    6630:	4770      	bx	lr
    if(style->map == NULL) return -1;
    6632:	f04f 30ff 	mov.w	r0, #4294967295
    6636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    663a:	f04f 30ff 	mov.w	r0, #4294967295
}
    663e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00006642 <_lv_style_get_color>:
    if(style == NULL) return -1;
    6642:	2800      	cmp	r0, #0
    6644:	d04d      	beq.n	66e2 <_lv_style_get_color+0xa0>
{
    6646:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    664a:	4684      	mov	ip, r0
    if(style->map == NULL) return -1;
    664c:	6804      	ldr	r4, [r0, #0]
    664e:	2c00      	cmp	r4, #0
    6650:	d04a      	beq.n	66e8 <_lv_style_get_color+0xa6>
    uint8_t id_to_find = prop & 0xFF;
    6652:	b2ce      	uxtb	r6, r1
    attr.full = (prop >> 8) & 0xFF;
    6654:	0a09      	lsrs	r1, r1, #8
    6656:	468e      	mov	lr, r1
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    6658:	7823      	ldrb	r3, [r4, #0]
    665a:	2bff      	cmp	r3, #255	; 0xff
    665c:	d03e      	beq.n	66dc <_lv_style_get_color+0x9a>
    665e:	f04f 37ff 	mov.w	r7, #4294967295
    6662:	46b8      	mov	r8, r7
    6664:	2000      	movs	r0, #0
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    6666:	f3ce 0e06 	ubfx	lr, lr, #0, #7
    666a:	e02a      	b.n	66c2 <_lv_style_get_color+0x80>
            attr_i.full = style->map[i + 1];
    666c:	1825      	adds	r5, r4, r0
    666e:	786d      	ldrb	r5, [r5, #1]
            if(attr_i.bits.state == attr.bits.state) {
    6670:	ea81 0905 	eor.w	r9, r1, r5
    6674:	f019 0f7f 	tst.w	r9, #127	; 0x7f
    6678:	d00a      	beq.n	6690 <_lv_style_get_color+0x4e>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    667a:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    667e:	ea35 090e 	bics.w	r9, r5, lr
    6682:	d120      	bne.n	66c6 <_lv_style_get_color+0x84>
                if(attr_i.bits.state > weight) {
    6684:	4545      	cmp	r5, r8
                    weight = attr_i.bits.state;
    6686:	bfc4      	itt	gt
    6688:	fa0f f885 	sxthgt.w	r8, r5
                    id_guess = i;
    668c:	b207      	sxthgt	r7, r0
    668e:	e01a      	b.n	66c6 <_lv_style_get_color+0x84>
                return i;
    6690:	4607      	mov	r7, r0
    if(id < 0) {
    6692:	2f00      	cmp	r7, #0
    6694:	db2c      	blt.n	66f0 <_lv_style_get_color+0xae>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_color_t));
    6696:	1cbb      	adds	r3, r7, #2
    6698:	18e0      	adds	r0, r4, r3
    669a:	5ce3      	ldrb	r3, [r4, r3]
    669c:	7013      	strb	r3, [r2, #0]
    669e:	7843      	ldrb	r3, [r0, #1]
    66a0:	7053      	strb	r3, [r2, #1]
        attr_act.full = style->map[id + 1];
    66a2:	f8dc 0000 	ldr.w	r0, [ip]
    66a6:	4407      	add	r7, r0
    66a8:	7878      	ldrb	r0, [r7, #1]
        return attr_act.bits.state & attr_goal.bits.state;
    66aa:	f3c1 0106 	ubfx	r1, r1, #0, #7
    66ae:	4008      	ands	r0, r1
    66b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    66b4:	2b0b      	cmp	r3, #11
    66b6:	dc0c      	bgt.n	66d2 <_lv_style_get_color+0x90>
    66b8:	3002      	adds	r0, #2
        i += sizeof(lv_style_property_t);
    66ba:	3002      	adds	r0, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    66bc:	5c23      	ldrb	r3, [r4, r0]
    66be:	2bff      	cmp	r3, #255	; 0xff
    66c0:	d0e7      	beq.n	6692 <_lv_style_get_color+0x50>
        if(style->map[i] == id_to_find) {
    66c2:	429e      	cmp	r6, r3
    66c4:	d0d2      	beq.n	666c <_lv_style_get_color+0x2a>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    66c6:	f003 030f 	and.w	r3, r3, #15
    66ca:	2b08      	cmp	r3, #8
    66cc:	dcf2      	bgt.n	66b4 <_lv_style_get_color+0x72>
    66ce:	3002      	adds	r0, #2
    66d0:	e7f3      	b.n	66ba <_lv_style_get_color+0x78>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    66d2:	2b0d      	cmp	r3, #13
    66d4:	bfd4      	ite	le
    66d6:	3001      	addle	r0, #1
        else i += sizeof(const void *);
    66d8:	3004      	addgt	r0, #4
    66da:	e7ee      	b.n	66ba <_lv_style_get_color+0x78>
    int16_t id_guess = -1;
    66dc:	f04f 37ff 	mov.w	r7, #4294967295
    66e0:	e7d7      	b.n	6692 <_lv_style_get_color+0x50>
    if(style == NULL) return -1;
    66e2:	f04f 30ff 	mov.w	r0, #4294967295
    66e6:	4770      	bx	lr
    if(style->map == NULL) return -1;
    66e8:	f04f 30ff 	mov.w	r0, #4294967295
    66ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    66f0:	f04f 30ff 	mov.w	r0, #4294967295
}
    66f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000066f8 <_lv_style_get_ptr>:
    if(style == NULL) return -1;
    66f8:	2800      	cmp	r0, #0
    66fa:	d050      	beq.n	679e <_lv_style_get_ptr+0xa6>
{
    66fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6700:	4607      	mov	r7, r0
    if(style->map == NULL) return -1;
    6702:	6804      	ldr	r4, [r0, #0]
    6704:	2c00      	cmp	r4, #0
    6706:	d04d      	beq.n	67a4 <_lv_style_get_ptr+0xac>
    uint8_t id_to_find = prop & 0xFF;
    6708:	b2ce      	uxtb	r6, r1
    attr.full = (prop >> 8) & 0xFF;
    670a:	0a09      	lsrs	r1, r1, #8
    670c:	468c      	mov	ip, r1
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    670e:	7823      	ldrb	r3, [r4, #0]
    6710:	2bff      	cmp	r3, #255	; 0xff
    6712:	d02d      	beq.n	6770 <_lv_style_get_ptr+0x78>
    6714:	f04f 3eff 	mov.w	lr, #4294967295
    6718:	46f0      	mov	r8, lr
    671a:	2000      	movs	r0, #0
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    671c:	f3cc 0c06 	ubfx	ip, ip, #0, #7
    6720:	e019      	b.n	6756 <_lv_style_get_ptr+0x5e>
            attr_i.full = style->map[i + 1];
    6722:	1825      	adds	r5, r4, r0
    6724:	786d      	ldrb	r5, [r5, #1]
            if(attr_i.bits.state == attr.bits.state) {
    6726:	ea81 0905 	eor.w	r9, r1, r5
    672a:	f019 0f7f 	tst.w	r9, #127	; 0x7f
    672e:	d022      	beq.n	6776 <_lv_style_get_ptr+0x7e>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    6730:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    6734:	ea35 090c 	bics.w	r9, r5, ip
    6738:	d10f      	bne.n	675a <_lv_style_get_ptr+0x62>
                if(attr_i.bits.state > weight) {
    673a:	4545      	cmp	r5, r8
                    weight = attr_i.bits.state;
    673c:	bfc4      	itt	gt
    673e:	fa0f f885 	sxthgt.w	r8, r5
                    id_guess = i;
    6742:	fa0f fe80 	sxthgt.w	lr, r0
    6746:	e008      	b.n	675a <_lv_style_get_ptr+0x62>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    6748:	2b0b      	cmp	r3, #11
    674a:	dc0c      	bgt.n	6766 <_lv_style_get_ptr+0x6e>
    674c:	3002      	adds	r0, #2
        i += sizeof(lv_style_property_t);
    674e:	3002      	adds	r0, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    6750:	5c23      	ldrb	r3, [r4, r0]
    6752:	2bff      	cmp	r3, #255	; 0xff
    6754:	d00e      	beq.n	6774 <_lv_style_get_ptr+0x7c>
        if(style->map[i] == id_to_find) {
    6756:	429e      	cmp	r6, r3
    6758:	d0e3      	beq.n	6722 <_lv_style_get_ptr+0x2a>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    675a:	f003 030f 	and.w	r3, r3, #15
    675e:	2b08      	cmp	r3, #8
    6760:	dcf2      	bgt.n	6748 <_lv_style_get_ptr+0x50>
    6762:	3002      	adds	r0, #2
    6764:	e7f3      	b.n	674e <_lv_style_get_ptr+0x56>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    6766:	2b0d      	cmp	r3, #13
    6768:	bfd4      	ite	le
    676a:	3001      	addle	r0, #1
        else i += sizeof(const void *);
    676c:	3004      	addgt	r0, #4
    676e:	e7ee      	b.n	674e <_lv_style_get_ptr+0x56>
    int16_t id_guess = -1;
    6770:	f04f 3eff 	mov.w	lr, #4294967295
    return id_guess;
    6774:	4670      	mov	r0, lr
    if(id < 0) {
    6776:	2800      	cmp	r0, #0
    6778:	db18      	blt.n	67ac <_lv_style_get_ptr+0xb4>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(const void *));
    677a:	4605      	mov	r5, r0
    677c:	3001      	adds	r0, #1
    677e:	1823      	adds	r3, r4, r0
    6780:	1d14      	adds	r4, r2, #4
    6782:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    6786:	f802 0b01 	strb.w	r0, [r2], #1
    while(len) {
    678a:	4294      	cmp	r4, r2
    678c:	d1f9      	bne.n	6782 <_lv_style_get_ptr+0x8a>
        attr_act.full = style->map[id + 1];
    678e:	683b      	ldr	r3, [r7, #0]
    6790:	442b      	add	r3, r5
    6792:	7858      	ldrb	r0, [r3, #1]
        return attr_act.bits.state & attr_goal.bits.state;
    6794:	f3c1 0106 	ubfx	r1, r1, #0, #7
    6798:	4008      	ands	r0, r1
    679a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(style == NULL) return -1;
    679e:	f04f 30ff 	mov.w	r0, #4294967295
    67a2:	4770      	bx	lr
    if(style->map == NULL) return -1;
    67a4:	f04f 30ff 	mov.w	r0, #4294967295
    67a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    67ac:	f04f 30ff 	mov.w	r0, #4294967295
}
    67b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000067b4 <lv_style_list_get_local_style>:
    if(!list->has_local) return NULL;
    67b4:	7943      	ldrb	r3, [r0, #5]
    67b6:	f013 0f01 	tst.w	r3, #1
    67ba:	d006      	beq.n	67ca <lv_style_list_get_local_style+0x16>
    if(list->has_trans) return list->style_list[1];
    67bc:	f013 0f02 	tst.w	r3, #2
    67c0:	6803      	ldr	r3, [r0, #0]
    67c2:	bf14      	ite	ne
    67c4:	6858      	ldrne	r0, [r3, #4]
    else return list->style_list[0];
    67c6:	6818      	ldreq	r0, [r3, #0]
    67c8:	4770      	bx	lr
    if(!list->has_local) return NULL;
    67ca:	2000      	movs	r0, #0
}
    67cc:	4770      	bx	lr

000067ce <_lv_style_list_get_transition_style>:
    if(!list->has_trans) return NULL;
    67ce:	7943      	ldrb	r3, [r0, #5]
    67d0:	f013 0f02 	tst.w	r3, #2
    return list->style_list[0];
    67d4:	bf1a      	itte	ne
    67d6:	6803      	ldrne	r3, [r0, #0]
    67d8:	6818      	ldrne	r0, [r3, #0]
    if(!list->has_trans) return NULL;
    67da:	2000      	moveq	r0, #0
}
    67dc:	4770      	bx	lr
	...

000067e0 <_lv_style_list_reset>:
    if(list == NULL) return;
    67e0:	2800      	cmp	r0, #0
    67e2:	d02c      	beq.n	683e <_lv_style_list_reset+0x5e>
{
    67e4:	b538      	push	{r3, r4, r5, lr}
    67e6:	4604      	mov	r4, r0
    if(list->has_local) {
    67e8:	7943      	ldrb	r3, [r0, #5]
    67ea:	f013 0f01 	tst.w	r3, #1
    67ee:	d008      	beq.n	6802 <_lv_style_list_reset+0x22>
        lv_style_t * local = lv_style_list_get_local_style(list);
    67f0:	4b13      	ldr	r3, [pc, #76]	; (6840 <_lv_style_list_reset+0x60>)
    67f2:	4798      	blx	r3
        if(local) {
    67f4:	4605      	mov	r5, r0
    67f6:	b120      	cbz	r0, 6802 <_lv_style_list_reset+0x22>
            lv_style_reset(local);
    67f8:	4b12      	ldr	r3, [pc, #72]	; (6844 <_lv_style_list_reset+0x64>)
    67fa:	4798      	blx	r3
            lv_mem_free(local);
    67fc:	4628      	mov	r0, r5
    67fe:	4b12      	ldr	r3, [pc, #72]	; (6848 <_lv_style_list_reset+0x68>)
    6800:	4798      	blx	r3
    if(list->has_trans) {
    6802:	7963      	ldrb	r3, [r4, #5]
    6804:	f013 0f02 	tst.w	r3, #2
    6808:	d009      	beq.n	681e <_lv_style_list_reset+0x3e>
        lv_style_t * trans = _lv_style_list_get_transition_style(list);
    680a:	4620      	mov	r0, r4
    680c:	4b0f      	ldr	r3, [pc, #60]	; (684c <_lv_style_list_reset+0x6c>)
    680e:	4798      	blx	r3
        if(trans) {
    6810:	4605      	mov	r5, r0
    6812:	b120      	cbz	r0, 681e <_lv_style_list_reset+0x3e>
            lv_style_reset(trans);
    6814:	4b0b      	ldr	r3, [pc, #44]	; (6844 <_lv_style_list_reset+0x64>)
    6816:	4798      	blx	r3
            lv_mem_free(trans);
    6818:	4628      	mov	r0, r5
    681a:	4b0b      	ldr	r3, [pc, #44]	; (6848 <_lv_style_list_reset+0x68>)
    681c:	4798      	blx	r3
    if(list->style_cnt > 0) lv_mem_free(list->style_list);
    681e:	7923      	ldrb	r3, [r4, #4]
    6820:	b94b      	cbnz	r3, 6836 <_lv_style_list_reset+0x56>
    list->style_list = NULL;
    6822:	2200      	movs	r2, #0
    6824:	6022      	str	r2, [r4, #0]
    list->style_cnt = 0;
    6826:	7122      	strb	r2, [r4, #4]
    list->has_local = 0;
    6828:	7963      	ldrb	r3, [r4, #5]
    list->skip_trans = 0;
    682a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    682e:	f362 0382 	bfi	r3, r2, #2, #1
    6832:	7163      	strb	r3, [r4, #5]
    6834:	bd38      	pop	{r3, r4, r5, pc}
    if(list->style_cnt > 0) lv_mem_free(list->style_list);
    6836:	6820      	ldr	r0, [r4, #0]
    6838:	4b03      	ldr	r3, [pc, #12]	; (6848 <_lv_style_list_reset+0x68>)
    683a:	4798      	blx	r3
    683c:	e7f1      	b.n	6822 <_lv_style_list_reset+0x42>
    683e:	4770      	bx	lr
    6840:	000067b5 	.word	0x000067b5
    6844:	00005ebd 	.word	0x00005ebd
    6848:	00011639 	.word	0x00011639
    684c:	000067cf 	.word	0x000067cf

00006850 <lv_style_list_copy>:
{
    6850:	b570      	push	{r4, r5, r6, lr}
    6852:	4605      	mov	r5, r0
    6854:	460c      	mov	r4, r1
    _lv_style_list_reset(list_dest);
    6856:	4b2c      	ldr	r3, [pc, #176]	; (6908 <lv_style_list_copy+0xb8>)
    6858:	4798      	blx	r3
    if(list_src->style_list == NULL) return;
    685a:	6823      	ldr	r3, [r4, #0]
    685c:	2b00      	cmp	r3, #0
    685e:	d041      	beq.n	68e4 <lv_style_list_copy+0x94>
    if(list_src->has_local == 0) {
    6860:	7963      	ldrb	r3, [r4, #5]
    6862:	f013 0f01 	tst.w	r3, #1
    6866:	d120      	bne.n	68aa <lv_style_list_copy+0x5a>
        if(list_src->has_trans) {
    6868:	f013 0f02 	tst.w	r3, #2
    686c:	d010      	beq.n	6890 <lv_style_list_copy+0x40>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
    686e:	7920      	ldrb	r0, [r4, #4]
    6870:	3801      	subs	r0, #1
    6872:	0080      	lsls	r0, r0, #2
    6874:	4b25      	ldr	r3, [pc, #148]	; (690c <lv_style_list_copy+0xbc>)
    6876:	4798      	blx	r3
    6878:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
    687a:	7922      	ldrb	r2, [r4, #4]
    687c:	3a01      	subs	r2, #1
    687e:	6821      	ldr	r1, [r4, #0]
    6880:	0092      	lsls	r2, r2, #2
    6882:	3104      	adds	r1, #4
    6884:	4b22      	ldr	r3, [pc, #136]	; (6910 <lv_style_list_copy+0xc0>)
    6886:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt - 1;
    6888:	7923      	ldrb	r3, [r4, #4]
    688a:	3b01      	subs	r3, #1
    688c:	712b      	strb	r3, [r5, #4]
    688e:	bd70      	pop	{r4, r5, r6, pc}
            list_dest->style_list = lv_mem_alloc(list_src->style_cnt * sizeof(lv_style_t *));
    6890:	7920      	ldrb	r0, [r4, #4]
    6892:	0080      	lsls	r0, r0, #2
    6894:	4b1d      	ldr	r3, [pc, #116]	; (690c <lv_style_list_copy+0xbc>)
    6896:	4798      	blx	r3
    6898:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list, list_src->style_cnt * sizeof(lv_style_t *));
    689a:	7922      	ldrb	r2, [r4, #4]
    689c:	0092      	lsls	r2, r2, #2
    689e:	6821      	ldr	r1, [r4, #0]
    68a0:	4b1b      	ldr	r3, [pc, #108]	; (6910 <lv_style_list_copy+0xc0>)
    68a2:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt;
    68a4:	7923      	ldrb	r3, [r4, #4]
    68a6:	712b      	strb	r3, [r5, #4]
    68a8:	bd70      	pop	{r4, r5, r6, pc}
        if(list_src->has_trans) {
    68aa:	f013 0f02 	tst.w	r3, #2
    68ae:	d01a      	beq.n	68e6 <lv_style_list_copy+0x96>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 2) * sizeof(lv_style_t *));
    68b0:	7920      	ldrb	r0, [r4, #4]
    68b2:	3802      	subs	r0, #2
    68b4:	0080      	lsls	r0, r0, #2
    68b6:	4b15      	ldr	r3, [pc, #84]	; (690c <lv_style_list_copy+0xbc>)
    68b8:	4798      	blx	r3
    68ba:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 2, (list_src->style_cnt - 2) * sizeof(lv_style_t *));
    68bc:	7922      	ldrb	r2, [r4, #4]
    68be:	3a02      	subs	r2, #2
    68c0:	6821      	ldr	r1, [r4, #0]
    68c2:	0092      	lsls	r2, r2, #2
    68c4:	3108      	adds	r1, #8
    68c6:	4b12      	ldr	r3, [pc, #72]	; (6910 <lv_style_list_copy+0xc0>)
    68c8:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt - 2;
    68ca:	7923      	ldrb	r3, [r4, #4]
    68cc:	3b02      	subs	r3, #2
    68ce:	712b      	strb	r3, [r5, #4]
        lv_style_t * local_style = get_alloc_local_style(list_dest);
    68d0:	4628      	mov	r0, r5
    68d2:	4d10      	ldr	r5, [pc, #64]	; (6914 <lv_style_list_copy+0xc4>)
    68d4:	47a8      	blx	r5
    68d6:	4606      	mov	r6, r0
        lv_style_copy(local_style, get_alloc_local_style((lv_style_list_t *)list_src));
    68d8:	4620      	mov	r0, r4
    68da:	47a8      	blx	r5
    68dc:	4601      	mov	r1, r0
    68de:	4630      	mov	r0, r6
    68e0:	4b0d      	ldr	r3, [pc, #52]	; (6918 <lv_style_list_copy+0xc8>)
    68e2:	4798      	blx	r3
    68e4:	bd70      	pop	{r4, r5, r6, pc}
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
    68e6:	7920      	ldrb	r0, [r4, #4]
    68e8:	3801      	subs	r0, #1
    68ea:	0080      	lsls	r0, r0, #2
    68ec:	4b07      	ldr	r3, [pc, #28]	; (690c <lv_style_list_copy+0xbc>)
    68ee:	4798      	blx	r3
    68f0:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
    68f2:	7922      	ldrb	r2, [r4, #4]
    68f4:	3a01      	subs	r2, #1
    68f6:	6821      	ldr	r1, [r4, #0]
    68f8:	0092      	lsls	r2, r2, #2
    68fa:	3104      	adds	r1, #4
    68fc:	4b04      	ldr	r3, [pc, #16]	; (6910 <lv_style_list_copy+0xc0>)
    68fe:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt - 1;
    6900:	7923      	ldrb	r3, [r4, #4]
    6902:	3b01      	subs	r3, #1
    6904:	712b      	strb	r3, [r5, #4]
    6906:	e7e3      	b.n	68d0 <lv_style_list_copy+0x80>
    6908:	000067e1 	.word	0x000067e1
    690c:	00011575 	.word	0x00011575
    6910:	000117a5 	.word	0x000117a5
    6914:	00005e3d 	.word	0x00005e3d
    6918:	00005f11 	.word	0x00005f11

0000691c <_lv_style_list_add_trans_style>:
{
    691c:	b538      	push	{r3, r4, r5, lr}
    691e:	4604      	mov	r4, r0
    if(list->has_trans) return _lv_style_list_get_transition_style(list);
    6920:	7943      	ldrb	r3, [r0, #5]
    6922:	f013 0f02 	tst.w	r3, #2
    6926:	d004      	beq.n	6932 <_lv_style_list_add_trans_style+0x16>
    6928:	4b14      	ldr	r3, [pc, #80]	; (697c <_lv_style_list_add_trans_style+0x60>)
    692a:	4798      	blx	r3
    692c:	4605      	mov	r5, r0
}
    692e:	4628      	mov	r0, r5
    6930:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_t * trans_style = lv_mem_alloc(sizeof(lv_style_t));
    6932:	2004      	movs	r0, #4
    6934:	4b12      	ldr	r3, [pc, #72]	; (6980 <_lv_style_list_add_trans_style+0x64>)
    6936:	4798      	blx	r3
    6938:	4605      	mov	r5, r0
    LV_ASSERT_MEM(trans_style);
    693a:	4b12      	ldr	r3, [pc, #72]	; (6984 <_lv_style_list_add_trans_style+0x68>)
    693c:	4798      	blx	r3
    693e:	b1b0      	cbz	r0, 696e <_lv_style_list_add_trans_style+0x52>
    if(trans_style == NULL) {
    6940:	2d00      	cmp	r5, #0
    6942:	d0f4      	beq.n	692e <_lv_style_list_add_trans_style+0x12>
    lv_style_init(trans_style);
    6944:	4628      	mov	r0, r5
    6946:	4b10      	ldr	r3, [pc, #64]	; (6988 <_lv_style_list_add_trans_style+0x6c>)
    6948:	4798      	blx	r3
    _lv_style_list_add_style(list, trans_style);
    694a:	4629      	mov	r1, r5
    694c:	4620      	mov	r0, r4
    694e:	4b0f      	ldr	r3, [pc, #60]	; (698c <_lv_style_list_add_trans_style+0x70>)
    6950:	4798      	blx	r3
    list->has_trans = 1;
    6952:	7963      	ldrb	r3, [r4, #5]
    6954:	f043 0302 	orr.w	r3, r3, #2
    6958:	7163      	strb	r3, [r4, #5]
    if(list->has_local) {
    695a:	f013 0f01 	tst.w	r3, #1
    695e:	d0e6      	beq.n	692e <_lv_style_list_add_trans_style+0x12>
        lv_style_t * tmp = list->style_list[0];
    6960:	6823      	ldr	r3, [r4, #0]
    6962:	681a      	ldr	r2, [r3, #0]
        list->style_list[0] = list->style_list[1];
    6964:	6859      	ldr	r1, [r3, #4]
    6966:	6019      	str	r1, [r3, #0]
        list->style_list[1] = tmp;
    6968:	6823      	ldr	r3, [r4, #0]
    696a:	605a      	str	r2, [r3, #4]
    696c:	e7df      	b.n	692e <_lv_style_list_add_trans_style+0x12>
    LV_ASSERT_MEM(trans_style);
    696e:	462a      	mov	r2, r5
    6970:	2300      	movs	r3, #0
    6972:	4807      	ldr	r0, [pc, #28]	; (6990 <_lv_style_list_add_trans_style+0x74>)
    6974:	4907      	ldr	r1, [pc, #28]	; (6994 <_lv_style_list_add_trans_style+0x78>)
    6976:	4788      	blx	r1
    6978:	e7fe      	b.n	6978 <_lv_style_list_add_trans_style+0x5c>
    697a:	bf00      	nop
    697c:	000067cf 	.word	0x000067cf
    6980:	00011575 	.word	0x00011575
    6984:	0000295d 	.word	0x0000295d
    6988:	00005cd9 	.word	0x00005cd9
    698c:	00005da1 	.word	0x00005da1
    6990:	0001786c 	.word	0x0001786c
    6994:	00002965 	.word	0x00002965

00006998 <_lv_style_list_get_int>:
    if(list == NULL) return LV_RES_INV;
    6998:	2800      	cmp	r0, #0
    699a:	d059      	beq.n	6a50 <_lv_style_list_get_int+0xb8>
{
    699c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    69a0:	b083      	sub	sp, #12
    69a2:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
    69a4:	6803      	ldr	r3, [r0, #0]
    69a6:	2b00      	cmp	r3, #0
    69a8:	d054      	beq.n	6a54 <_lv_style_list_get_int+0xbc>
    int16_t weight_goal = attr.full;
    69aa:	ea4f 2811 	mov.w	r8, r1, lsr #8
    lv_style_int_t value_act = 0;
    69ae:	2300      	movs	r3, #0
    69b0:	f8ad 3006 	strh.w	r3, [sp, #6]
    for(ci = 0; ci < list->style_cnt; ci++) {
    69b4:	7900      	ldrb	r0, [r0, #4]
    69b6:	2800      	cmp	r0, #0
    69b8:	d042      	beq.n	6a40 <_lv_style_list_get_int+0xa8>
    69ba:	4693      	mov	fp, r2
    69bc:	4689      	mov	r9, r1
    69be:	461c      	mov	r4, r3
    69c0:	f04f 36ff 	mov.w	r6, #4294967295
    69c4:	469a      	mov	sl, r3
        int16_t weight_act = _lv_style_get_int(class, prop, &value_act);
    69c6:	4f24      	ldr	r7, [pc, #144]	; (6a58 <_lv_style_list_get_int+0xc0>)
    69c8:	e01c      	b.n	6a04 <_lv_style_list_get_int+0x6c>
    69ca:	4650      	mov	r0, sl
    69cc:	f10d 0206 	add.w	r2, sp, #6
    69d0:	4649      	mov	r1, r9
    69d2:	47b8      	blx	r7
        if(weight_act == weight_goal) {
    69d4:	4580      	cmp	r8, r0
    69d6:	d027      	beq.n	6a28 <_lv_style_list_get_int+0x90>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
    69d8:	796b      	ldrb	r3, [r5, #5]
    69da:	f013 0f02 	tst.w	r3, #2
    69de:	d005      	beq.n	69ec <_lv_style_list_get_int+0x54>
    69e0:	2800      	cmp	r0, #0
    69e2:	db03      	blt.n	69ec <_lv_style_list_get_int+0x54>
    69e4:	b914      	cbnz	r4, 69ec <_lv_style_list_get_int+0x54>
    69e6:	f013 0f04 	tst.w	r3, #4
    69ea:	d023      	beq.n	6a34 <_lv_style_list_get_int+0x9c>
        else if(weight_act > weight) {
    69ec:	42b0      	cmp	r0, r6
    69ee:	dd04      	ble.n	69fa <_lv_style_list_get_int+0x62>
            *res = value_act;
    69f0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    69f4:	f8ab 3000 	strh.w	r3, [fp]
            weight =  weight_act;
    69f8:	4606      	mov	r6, r0
    69fa:	3401      	adds	r4, #1
    69fc:	b224      	sxth	r4, r4
    for(ci = 0; ci < list->style_cnt; ci++) {
    69fe:	7928      	ldrb	r0, [r5, #4]
    6a00:	4284      	cmp	r4, r0
    6a02:	da1f      	bge.n	6a44 <_lv_style_list_get_int+0xac>
        lv_style_t * class = lv_style_list_get_style(list, ci);
    6a04:	b2e2      	uxtb	r2, r4
    if(list->has_trans && list->skip_trans) id++;
    6a06:	796b      	ldrb	r3, [r5, #5]
    6a08:	f003 0306 	and.w	r3, r3, #6
    6a0c:	2b06      	cmp	r3, #6
    6a0e:	bf04      	itt	eq
    6a10:	3201      	addeq	r2, #1
    6a12:	b2d2      	uxtbeq	r2, r2
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    6a14:	2800      	cmp	r0, #0
    6a16:	d0d8      	beq.n	69ca <_lv_style_list_get_int+0x32>
    6a18:	4282      	cmp	r2, r0
    6a1a:	d203      	bcs.n	6a24 <_lv_style_list_get_int+0x8c>
    return list->style_list[id];
    6a1c:	682b      	ldr	r3, [r5, #0]
    6a1e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    6a22:	e7d3      	b.n	69cc <_lv_style_list_get_int+0x34>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    6a24:	4650      	mov	r0, sl
    6a26:	e7d1      	b.n	69cc <_lv_style_list_get_int+0x34>
            *res = value_act;
    6a28:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6a2c:	f8ab 3000 	strh.w	r3, [fp]
            return LV_RES_OK;
    6a30:	2001      	movs	r0, #1
    6a32:	e00a      	b.n	6a4a <_lv_style_list_get_int+0xb2>
            *res = value_act;
    6a34:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6a38:	f8ab 3000 	strh.w	r3, [fp]
            return LV_RES_OK;
    6a3c:	2001      	movs	r0, #1
    6a3e:	e004      	b.n	6a4a <_lv_style_list_get_int+0xb2>
    int16_t weight = -1;
    6a40:	f04f 36ff 	mov.w	r6, #4294967295
    if(weight >= 0) return LV_RES_OK;
    6a44:	43f0      	mvns	r0, r6
    if(list == NULL) return LV_RES_INV;
    6a46:	f3c0 30c0 	ubfx	r0, r0, #15, #1
}
    6a4a:	b003      	add	sp, #12
    6a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(list == NULL) return LV_RES_INV;
    6a50:	2000      	movs	r0, #0
    6a52:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
    6a54:	2000      	movs	r0, #0
    6a56:	e7f8      	b.n	6a4a <_lv_style_list_get_int+0xb2>
    6a58:	000064dd 	.word	0x000064dd

00006a5c <_lv_style_list_get_color>:
    if(list == NULL) return LV_RES_INV;
    6a5c:	2800      	cmp	r0, #0
    6a5e:	d058      	beq.n	6b12 <_lv_style_list_get_color+0xb6>
{
    6a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6a64:	b083      	sub	sp, #12
    6a66:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
    6a68:	6803      	ldr	r3, [r0, #0]
    6a6a:	2b00      	cmp	r3, #0
    6a6c:	d053      	beq.n	6b16 <_lv_style_list_get_color+0xba>
    int16_t weight_goal = attr.full;
    6a6e:	ea4f 2811 	mov.w	r8, r1, lsr #8
    lv_color_t value_act = { 0 };
    6a72:	2300      	movs	r3, #0
    6a74:	f8ad 3004 	strh.w	r3, [sp, #4]
    for(ci = 0; ci < list->style_cnt; ci++) {
    6a78:	7900      	ldrb	r0, [r0, #4]
    6a7a:	2800      	cmp	r0, #0
    6a7c:	d041      	beq.n	6b02 <_lv_style_list_get_color+0xa6>
    6a7e:	4693      	mov	fp, r2
    6a80:	4689      	mov	r9, r1
    6a82:	461c      	mov	r4, r3
    6a84:	f04f 36ff 	mov.w	r6, #4294967295
    6a88:	469a      	mov	sl, r3
        int16_t weight_act = _lv_style_get_color(class, prop, &value_act);
    6a8a:	4f24      	ldr	r7, [pc, #144]	; (6b1c <_lv_style_list_get_color+0xc0>)
    6a8c:	e01b      	b.n	6ac6 <_lv_style_list_get_color+0x6a>
    6a8e:	4650      	mov	r0, sl
    6a90:	aa01      	add	r2, sp, #4
    6a92:	4649      	mov	r1, r9
    6a94:	47b8      	blx	r7
        if(weight_act == weight_goal) {
    6a96:	4580      	cmp	r8, r0
    6a98:	d027      	beq.n	6aea <_lv_style_list_get_color+0x8e>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
    6a9a:	796b      	ldrb	r3, [r5, #5]
    6a9c:	f013 0f02 	tst.w	r3, #2
    6aa0:	d005      	beq.n	6aae <_lv_style_list_get_color+0x52>
    6aa2:	2800      	cmp	r0, #0
    6aa4:	db03      	blt.n	6aae <_lv_style_list_get_color+0x52>
    6aa6:	b914      	cbnz	r4, 6aae <_lv_style_list_get_color+0x52>
    6aa8:	f013 0f04 	tst.w	r3, #4
    6aac:	d023      	beq.n	6af6 <_lv_style_list_get_color+0x9a>
        else if(weight_act > weight) {
    6aae:	42b0      	cmp	r0, r6
    6ab0:	dd04      	ble.n	6abc <_lv_style_list_get_color+0x60>
            *res = value_act;
    6ab2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    6ab6:	f8ab 3000 	strh.w	r3, [fp]
            weight =  weight_act;
    6aba:	4606      	mov	r6, r0
    6abc:	3401      	adds	r4, #1
    6abe:	b224      	sxth	r4, r4
    for(ci = 0; ci < list->style_cnt; ci++) {
    6ac0:	7928      	ldrb	r0, [r5, #4]
    6ac2:	4284      	cmp	r4, r0
    6ac4:	da1f      	bge.n	6b06 <_lv_style_list_get_color+0xaa>
        lv_style_t * class = lv_style_list_get_style(list, ci);
    6ac6:	b2e2      	uxtb	r2, r4
    if(list->has_trans && list->skip_trans) id++;
    6ac8:	796b      	ldrb	r3, [r5, #5]
    6aca:	f003 0306 	and.w	r3, r3, #6
    6ace:	2b06      	cmp	r3, #6
    6ad0:	bf04      	itt	eq
    6ad2:	3201      	addeq	r2, #1
    6ad4:	b2d2      	uxtbeq	r2, r2
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    6ad6:	2800      	cmp	r0, #0
    6ad8:	d0d9      	beq.n	6a8e <_lv_style_list_get_color+0x32>
    6ada:	4282      	cmp	r2, r0
    6adc:	d203      	bcs.n	6ae6 <_lv_style_list_get_color+0x8a>
    return list->style_list[id];
    6ade:	682b      	ldr	r3, [r5, #0]
    6ae0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    6ae4:	e7d4      	b.n	6a90 <_lv_style_list_get_color+0x34>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    6ae6:	4650      	mov	r0, sl
    6ae8:	e7d2      	b.n	6a90 <_lv_style_list_get_color+0x34>
            *res = value_act;
    6aea:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    6aee:	f8ab 3000 	strh.w	r3, [fp]
            return LV_RES_OK;
    6af2:	2001      	movs	r0, #1
    6af4:	e00a      	b.n	6b0c <_lv_style_list_get_color+0xb0>
            *res = value_act;
    6af6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    6afa:	f8ab 3000 	strh.w	r3, [fp]
            return LV_RES_OK;
    6afe:	2001      	movs	r0, #1
    6b00:	e004      	b.n	6b0c <_lv_style_list_get_color+0xb0>
    int16_t weight = -1;
    6b02:	f04f 36ff 	mov.w	r6, #4294967295
    if(weight >= 0)  return LV_RES_OK;
    6b06:	43f0      	mvns	r0, r6
    if(list == NULL) return LV_RES_INV;
    6b08:	f3c0 30c0 	ubfx	r0, r0, #15, #1
}
    6b0c:	b003      	add	sp, #12
    6b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(list == NULL) return LV_RES_INV;
    6b12:	2000      	movs	r0, #0
    6b14:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
    6b16:	2000      	movs	r0, #0
    6b18:	e7f8      	b.n	6b0c <_lv_style_list_get_color+0xb0>
    6b1a:	bf00      	nop
    6b1c:	00006643 	.word	0x00006643

00006b20 <_lv_style_list_get_opa>:
    if(list == NULL) return LV_RES_INV;
    6b20:	2800      	cmp	r0, #0
    6b22:	d059      	beq.n	6bd8 <_lv_style_list_get_opa+0xb8>
{
    6b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6b28:	b083      	sub	sp, #12
    6b2a:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
    6b2c:	6803      	ldr	r3, [r0, #0]
    6b2e:	2b00      	cmp	r3, #0
    6b30:	d054      	beq.n	6bdc <_lv_style_list_get_opa+0xbc>
    int16_t weight_goal = attr.full;
    6b32:	ea4f 2811 	mov.w	r8, r1, lsr #8
    lv_opa_t value_act = LV_OPA_TRANSP;
    6b36:	2300      	movs	r3, #0
    6b38:	f88d 3007 	strb.w	r3, [sp, #7]
    for(ci = 0; ci < list->style_cnt; ci++) {
    6b3c:	7900      	ldrb	r0, [r0, #4]
    6b3e:	2800      	cmp	r0, #0
    6b40:	d042      	beq.n	6bc8 <_lv_style_list_get_opa+0xa8>
    6b42:	4693      	mov	fp, r2
    6b44:	4689      	mov	r9, r1
    6b46:	461c      	mov	r4, r3
    6b48:	f04f 36ff 	mov.w	r6, #4294967295
    6b4c:	469a      	mov	sl, r3
        int16_t weight_act = _lv_style_get_opa(class, prop, &value_act);
    6b4e:	4f24      	ldr	r7, [pc, #144]	; (6be0 <_lv_style_list_get_opa+0xc0>)
    6b50:	e01c      	b.n	6b8c <_lv_style_list_get_opa+0x6c>
    6b52:	4650      	mov	r0, sl
    6b54:	f10d 0207 	add.w	r2, sp, #7
    6b58:	4649      	mov	r1, r9
    6b5a:	47b8      	blx	r7
        if(weight_act == weight_goal) {
    6b5c:	4580      	cmp	r8, r0
    6b5e:	d027      	beq.n	6bb0 <_lv_style_list_get_opa+0x90>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
    6b60:	796b      	ldrb	r3, [r5, #5]
    6b62:	f013 0f02 	tst.w	r3, #2
    6b66:	d005      	beq.n	6b74 <_lv_style_list_get_opa+0x54>
    6b68:	2800      	cmp	r0, #0
    6b6a:	db03      	blt.n	6b74 <_lv_style_list_get_opa+0x54>
    6b6c:	b914      	cbnz	r4, 6b74 <_lv_style_list_get_opa+0x54>
    6b6e:	f013 0f04 	tst.w	r3, #4
    6b72:	d023      	beq.n	6bbc <_lv_style_list_get_opa+0x9c>
        else if(weight_act > weight) {
    6b74:	42b0      	cmp	r0, r6
    6b76:	dd04      	ble.n	6b82 <_lv_style_list_get_opa+0x62>
            *res = value_act;
    6b78:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b7c:	f88b 3000 	strb.w	r3, [fp]
            weight =  weight_act;
    6b80:	4606      	mov	r6, r0
    6b82:	3401      	adds	r4, #1
    6b84:	b224      	sxth	r4, r4
    for(ci = 0; ci < list->style_cnt; ci++) {
    6b86:	7928      	ldrb	r0, [r5, #4]
    6b88:	4284      	cmp	r4, r0
    6b8a:	da1f      	bge.n	6bcc <_lv_style_list_get_opa+0xac>
        lv_style_t * class = lv_style_list_get_style(list, ci);
    6b8c:	b2e2      	uxtb	r2, r4
    if(list->has_trans && list->skip_trans) id++;
    6b8e:	796b      	ldrb	r3, [r5, #5]
    6b90:	f003 0306 	and.w	r3, r3, #6
    6b94:	2b06      	cmp	r3, #6
    6b96:	bf04      	itt	eq
    6b98:	3201      	addeq	r2, #1
    6b9a:	b2d2      	uxtbeq	r2, r2
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    6b9c:	2800      	cmp	r0, #0
    6b9e:	d0d8      	beq.n	6b52 <_lv_style_list_get_opa+0x32>
    6ba0:	4282      	cmp	r2, r0
    6ba2:	d203      	bcs.n	6bac <_lv_style_list_get_opa+0x8c>
    return list->style_list[id];
    6ba4:	682b      	ldr	r3, [r5, #0]
    6ba6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    6baa:	e7d3      	b.n	6b54 <_lv_style_list_get_opa+0x34>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    6bac:	4650      	mov	r0, sl
    6bae:	e7d1      	b.n	6b54 <_lv_style_list_get_opa+0x34>
            *res = value_act;
    6bb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6bb4:	f88b 3000 	strb.w	r3, [fp]
            return LV_RES_OK;
    6bb8:	2001      	movs	r0, #1
    6bba:	e00a      	b.n	6bd2 <_lv_style_list_get_opa+0xb2>
            *res = value_act;
    6bbc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6bc0:	f88b 3000 	strb.w	r3, [fp]
            return LV_RES_OK;
    6bc4:	2001      	movs	r0, #1
    6bc6:	e004      	b.n	6bd2 <_lv_style_list_get_opa+0xb2>
    int16_t weight = -1;
    6bc8:	f04f 36ff 	mov.w	r6, #4294967295
    if(weight >= 0)  return LV_RES_OK;
    6bcc:	43f0      	mvns	r0, r6
    if(list == NULL) return LV_RES_INV;
    6bce:	f3c0 30c0 	ubfx	r0, r0, #15, #1
}
    6bd2:	b003      	add	sp, #12
    6bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(list == NULL) return LV_RES_INV;
    6bd8:	2000      	movs	r0, #0
    6bda:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
    6bdc:	2000      	movs	r0, #0
    6bde:	e7f8      	b.n	6bd2 <_lv_style_list_get_opa+0xb2>
    6be0:	00006593 	.word	0x00006593

00006be4 <_lv_style_list_get_ptr>:
    if(list == NULL) return LV_RES_INV;
    6be4:	2800      	cmp	r0, #0
    6be6:	d052      	beq.n	6c8e <_lv_style_list_get_ptr+0xaa>
{
    6be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6bec:	b083      	sub	sp, #12
    6bee:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
    6bf0:	6803      	ldr	r3, [r0, #0]
    6bf2:	2b00      	cmp	r3, #0
    6bf4:	d04d      	beq.n	6c92 <_lv_style_list_get_ptr+0xae>
    int16_t weight_goal = attr.full;
    6bf6:	ea4f 2811 	mov.w	r8, r1, lsr #8
    for(ci = 0; ci < list->style_cnt; ci++) {
    6bfa:	7900      	ldrb	r0, [r0, #4]
    6bfc:	2800      	cmp	r0, #0
    6bfe:	d03e      	beq.n	6c7e <_lv_style_list_get_ptr+0x9a>
    6c00:	4693      	mov	fp, r2
    6c02:	4689      	mov	r9, r1
    6c04:	2400      	movs	r4, #0
    6c06:	f04f 36ff 	mov.w	r6, #4294967295
    6c0a:	46a2      	mov	sl, r4
        int16_t weight_act = _lv_style_get_ptr(class, prop, &value_act);
    6c0c:	4f22      	ldr	r7, [pc, #136]	; (6c98 <_lv_style_list_get_ptr+0xb4>)
    6c0e:	e01a      	b.n	6c46 <_lv_style_list_get_ptr+0x62>
    6c10:	4650      	mov	r0, sl
    6c12:	aa01      	add	r2, sp, #4
    6c14:	4649      	mov	r1, r9
    6c16:	47b8      	blx	r7
        if(weight_act == weight_goal) {
    6c18:	4580      	cmp	r8, r0
    6c1a:	d026      	beq.n	6c6a <_lv_style_list_get_ptr+0x86>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
    6c1c:	796b      	ldrb	r3, [r5, #5]
    6c1e:	f013 0f02 	tst.w	r3, #2
    6c22:	d005      	beq.n	6c30 <_lv_style_list_get_ptr+0x4c>
    6c24:	2800      	cmp	r0, #0
    6c26:	db03      	blt.n	6c30 <_lv_style_list_get_ptr+0x4c>
    6c28:	b914      	cbnz	r4, 6c30 <_lv_style_list_get_ptr+0x4c>
    6c2a:	f013 0f04 	tst.w	r3, #4
    6c2e:	d021      	beq.n	6c74 <_lv_style_list_get_ptr+0x90>
        else if(weight_act > weight) {
    6c30:	42b0      	cmp	r0, r6
    6c32:	dd03      	ble.n	6c3c <_lv_style_list_get_ptr+0x58>
            *res = value_act;
    6c34:	9b01      	ldr	r3, [sp, #4]
    6c36:	f8cb 3000 	str.w	r3, [fp]
            weight =  weight_act;
    6c3a:	4606      	mov	r6, r0
    6c3c:	3401      	adds	r4, #1
    6c3e:	b224      	sxth	r4, r4
    for(ci = 0; ci < list->style_cnt; ci++) {
    6c40:	7928      	ldrb	r0, [r5, #4]
    6c42:	4284      	cmp	r4, r0
    6c44:	da1d      	bge.n	6c82 <_lv_style_list_get_ptr+0x9e>
        lv_style_t * class = lv_style_list_get_style(list, ci);
    6c46:	b2e2      	uxtb	r2, r4
    if(list->has_trans && list->skip_trans) id++;
    6c48:	796b      	ldrb	r3, [r5, #5]
    6c4a:	f003 0306 	and.w	r3, r3, #6
    6c4e:	2b06      	cmp	r3, #6
    6c50:	bf04      	itt	eq
    6c52:	3201      	addeq	r2, #1
    6c54:	b2d2      	uxtbeq	r2, r2
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    6c56:	2800      	cmp	r0, #0
    6c58:	d0da      	beq.n	6c10 <_lv_style_list_get_ptr+0x2c>
    6c5a:	4282      	cmp	r2, r0
    6c5c:	d203      	bcs.n	6c66 <_lv_style_list_get_ptr+0x82>
    return list->style_list[id];
    6c5e:	682b      	ldr	r3, [r5, #0]
    6c60:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    6c64:	e7d5      	b.n	6c12 <_lv_style_list_get_ptr+0x2e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    6c66:	4650      	mov	r0, sl
    6c68:	e7d3      	b.n	6c12 <_lv_style_list_get_ptr+0x2e>
            *res = value_act;
    6c6a:	9b01      	ldr	r3, [sp, #4]
    6c6c:	f8cb 3000 	str.w	r3, [fp]
            return LV_RES_OK;
    6c70:	2001      	movs	r0, #1
    6c72:	e009      	b.n	6c88 <_lv_style_list_get_ptr+0xa4>
            *res = value_act;
    6c74:	9b01      	ldr	r3, [sp, #4]
    6c76:	f8cb 3000 	str.w	r3, [fp]
            return LV_RES_OK;
    6c7a:	2001      	movs	r0, #1
    6c7c:	e004      	b.n	6c88 <_lv_style_list_get_ptr+0xa4>
    int16_t weight = -1;
    6c7e:	f04f 36ff 	mov.w	r6, #4294967295
    if(weight >= 0)  return LV_RES_OK;
    6c82:	43f0      	mvns	r0, r6
    if(list == NULL) return LV_RES_INV;
    6c84:	f3c0 30c0 	ubfx	r0, r0, #15, #1
}
    6c88:	b003      	add	sp, #12
    6c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(list == NULL) return LV_RES_INV;
    6c8e:	2000      	movs	r0, #0
    6c90:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
    6c92:	2000      	movs	r0, #0
    6c94:	e7f8      	b.n	6c88 <_lv_style_list_get_ptr+0xa4>
    6c96:	bf00      	nop
    6c98:	000066f9 	.word	0x000066f9

00006c9c <color_blend_true_color_additive>:
        }
    }
}

static inline lv_color_t color_blend_true_color_additive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
    6c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6c9e:	f001 0e1f 	and.w	lr, r1, #31
    6ca2:	f3c1 1645 	ubfx	r6, r1, #5, #6
    6ca6:	f3c1 21c4 	ubfx	r1, r1, #11, #5

    if(opa <= LV_OPA_MIN) return bg;
    6caa:	2a05      	cmp	r2, #5
    6cac:	d93f      	bls.n	6d2e <color_blend_true_color_additive+0x92>
    uint32_t tmp;
#if LV_COLOR_DEPTH == 1
    tmp = bg.full + fg.full;
    fg.full = LV_MATH_MIN(tmp, 1);
#else
    tmp = bg.ch.red + fg.ch.red;
    6cae:	f3c0 24c4 	ubfx	r4, r0, #11, #5
    6cb2:	440c      	add	r4, r1
#if LV_COLOR_DEPTH == 8
    fg.ch.red = LV_MATH_MIN(tmp, 7);
#elif LV_COLOR_DEPTH == 16
    fg.ch.red = LV_MATH_MIN(tmp, 31);
    6cb4:	2c1f      	cmp	r4, #31
    6cb6:	bf28      	it	cs
    6cb8:	241f      	movcs	r4, #31
    6cba:	f004 041f 	and.w	r4, r4, #31

#if LV_COLOR_DEPTH == 8
    fg.ch.green = LV_MATH_MIN(tmp, 7);
#elif LV_COLOR_DEPTH == 16
#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green + fg.ch.green;
    6cbe:	f3c0 1345 	ubfx	r3, r0, #5, #6
    6cc2:	4433      	add	r3, r6
    fg.ch.green = LV_MATH_MIN(tmp, 63);
    6cc4:	2b3f      	cmp	r3, #63	; 0x3f
    6cc6:	bf28      	it	cs
    6cc8:	233f      	movcs	r3, #63	; 0x3f
    6cca:	f003 053f 	and.w	r5, r3, #63	; 0x3f

#elif LV_COLOR_DEPTH == 32
    fg.ch.green = LV_MATH_MIN(tmp, 255);
#endif

    tmp = bg.ch.blue + fg.ch.blue;
    6cce:	f000 001f 	and.w	r0, r0, #31
    6cd2:	4470      	add	r0, lr
#if LV_COLOR_DEPTH == 8
    fg.ch.blue = LV_MATH_MIN(tmp, 4);
#elif LV_COLOR_DEPTH == 16
    fg.ch.blue = LV_MATH_MIN(tmp, 31);
    6cd4:	281f      	cmp	r0, #31
    6cd6:	bf28      	it	cs
    6cd8:	201f      	movcs	r0, #31
    6cda:	f000 031f 	and.w	r3, r0, #31
#elif LV_COLOR_DEPTH == 32
    fg.ch.blue = LV_MATH_MIN(tmp, 255);
#endif
#endif

    if(opa == LV_OPA_COVER) return fg;
    6cde:	2aff      	cmp	r2, #255	; 0xff
    6ce0:	d02e      	beq.n	6d40 <color_blend_true_color_additive+0xa4>
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    6ce2:	f1c2 07ff 	rsb	r7, r2, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    6ce6:	fb07 f00e 	mul.w	r0, r7, lr
    6cea:	fb02 0003 	mla	r0, r2, r3, r0
    6cee:	eb00 2300 	add.w	r3, r0, r0, lsl #8
    6cf2:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
    6cf6:	0dc3      	lsrs	r3, r0, #23
    6cf8:	f04f 0000 	mov.w	r0, #0
    6cfc:	f363 0004 	bfi	r0, r3, #0, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    6d00:	fb07 f306 	mul.w	r3, r7, r6
    6d04:	fb02 3305 	mla	r3, r2, r5, r3
    6d08:	eb03 2503 	add.w	r5, r3, r3, lsl #8
    6d0c:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
    6d10:	0ddb      	lsrs	r3, r3, #23
    6d12:	f363 104a 	bfi	r0, r3, #5, #6
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    6d16:	fb07 f101 	mul.w	r1, r7, r1
    6d1a:	fb02 1204 	mla	r2, r2, r4, r1
    6d1e:	eb02 2302 	add.w	r3, r2, r2, lsl #8
    6d22:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
    6d26:	0dd2      	lsrs	r2, r2, #23
    6d28:	f362 20cf 	bfi	r0, r2, #11, #5

    return lv_color_mix(fg, bg, opa);
}
    6d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(opa <= LV_OPA_MIN) return bg;
    6d2e:	f04f 0000 	mov.w	r0, #0
    6d32:	f36e 0004 	bfi	r0, lr, #0, #5
    6d36:	f366 104a 	bfi	r0, r6, #5, #6
    6d3a:	f361 20cf 	bfi	r0, r1, #11, #5
    6d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(opa == LV_OPA_COVER) return fg;
    6d40:	f04f 0000 	mov.w	r0, #0
    6d44:	f363 0004 	bfi	r0, r3, #0, #5
    6d48:	f365 104a 	bfi	r0, r5, #5, #6
    6d4c:	f364 20cf 	bfi	r0, r4, #11, #5
    6d50:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006d52 <color_blend_true_color_subtractive>:

static inline lv_color_t color_blend_true_color_subtractive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
    6d52:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d54:	f001 0e1f 	and.w	lr, r1, #31
    6d58:	f3c1 1645 	ubfx	r6, r1, #5, #6
    6d5c:	f3c1 21c4 	ubfx	r1, r1, #11, #5

    if(opa <= LV_OPA_MIN) return bg;
    6d60:	2a05      	cmp	r2, #5
    6d62:	d93d      	bls.n	6de0 <color_blend_true_color_subtractive+0x8e>

    int32_t tmp;
    tmp = bg.ch.red - fg.ch.red;
    6d64:	f3c0 24c4 	ubfx	r4, r0, #11, #5
    6d68:	1b0c      	subs	r4, r1, r4
    fg.ch.red = LV_MATH_MAX(tmp, 0);
    6d6a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    6d6e:	f004 041f 	and.w	r4, r4, #31

#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green - fg.ch.green;
    6d72:	f3c0 1345 	ubfx	r3, r0, #5, #6
    6d76:	1af3      	subs	r3, r6, r3
    fg.ch.green = LV_MATH_MAX(tmp, 0);
    6d78:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    6d7c:	f003 053f 	and.w	r5, r3, #63	; 0x3f
    tmp = LV_MATH_MAX(tmp, 0);
    fg.ch.green_h = tmp >> 3;
    fg.ch.green_l = tmp & 0x7;
#endif

    tmp = bg.ch.blue - fg.ch.blue;
    6d80:	f000 001f 	and.w	r0, r0, #31
    6d84:	ebae 0000 	sub.w	r0, lr, r0
    fg.ch.blue = LV_MATH_MAX(tmp, 0);
    6d88:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    6d8c:	f000 031f 	and.w	r3, r0, #31

    if(opa == LV_OPA_COVER) return fg;
    6d90:	2aff      	cmp	r2, #255	; 0xff
    6d92:	d02e      	beq.n	6df2 <color_blend_true_color_subtractive+0xa0>
    6d94:	f1c2 07ff 	rsb	r7, r2, #255	; 0xff
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    6d98:	fb07 f00e 	mul.w	r0, r7, lr
    6d9c:	fb02 0003 	mla	r0, r2, r3, r0
    6da0:	eb00 2300 	add.w	r3, r0, r0, lsl #8
    6da4:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
    6da8:	0dc3      	lsrs	r3, r0, #23
    6daa:	f04f 0000 	mov.w	r0, #0
    6dae:	f363 0004 	bfi	r0, r3, #0, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    6db2:	fb07 f306 	mul.w	r3, r7, r6
    6db6:	fb02 3305 	mla	r3, r2, r5, r3
    6dba:	eb03 2503 	add.w	r5, r3, r3, lsl #8
    6dbe:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
    6dc2:	0ddb      	lsrs	r3, r3, #23
    6dc4:	f363 104a 	bfi	r0, r3, #5, #6
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    6dc8:	fb07 f101 	mul.w	r1, r7, r1
    6dcc:	fb02 1204 	mla	r2, r2, r4, r1
    6dd0:	eb02 2302 	add.w	r3, r2, r2, lsl #8
    6dd4:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
    6dd8:	0dd2      	lsrs	r2, r2, #23
    6dda:	f362 20cf 	bfi	r0, r2, #11, #5

    return lv_color_mix(fg, bg, opa);
}
    6dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(opa <= LV_OPA_MIN) return bg;
    6de0:	f04f 0000 	mov.w	r0, #0
    6de4:	f36e 0004 	bfi	r0, lr, #0, #5
    6de8:	f366 104a 	bfi	r0, r6, #5, #6
    6dec:	f361 20cf 	bfi	r0, r1, #11, #5
    6df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(opa == LV_OPA_COVER) return fg;
    6df2:	f04f 0000 	mov.w	r0, #0
    6df6:	f363 0004 	bfi	r0, r3, #0, #5
    6dfa:	f365 104a 	bfi	r0, r5, #5, #6
    6dfe:	f364 20cf 	bfi	r0, r4, #11, #5
    6e02:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006e04 <_lv_blend_fill>:
{
    6e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6e08:	b093      	sub	sp, #76	; 0x4c
    6e0a:	f89d 4070 	ldrb.w	r4, [sp, #112]	; 0x70
    6e0e:	f89d b074 	ldrb.w	fp, [sp, #116]	; 0x74
    6e12:	f89d 9078 	ldrb.w	r9, [sp, #120]	; 0x78
    if(opa < LV_OPA_MIN) return;
    6e16:	f1bb 0f04 	cmp.w	fp, #4
    6e1a:	d900      	bls.n	6e1e <_lv_blend_fill+0x1a>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
    6e1c:	b914      	cbnz	r4, 6e24 <_lv_blend_fill+0x20>
}
    6e1e:	b013      	add	sp, #76	; 0x4c
    6e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6e24:	9308      	str	r3, [sp, #32]
    6e26:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    6e2a:	460e      	mov	r6, r1
    6e2c:	4605      	mov	r5, r0
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    6e2e:	4bba      	ldr	r3, [pc, #744]	; (7118 <_lv_blend_fill+0x314>)
    6e30:	4798      	blx	r3
    6e32:	4680      	mov	r8, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    6e34:	4bb9      	ldr	r3, [pc, #740]	; (711c <_lv_blend_fill+0x318>)
    6e36:	4798      	blx	r3
    6e38:	4607      	mov	r7, r0
    lv_color_t * disp_buf = vdb->buf_act;
    6e3a:	6882      	ldr	r2, [r0, #8]
    6e3c:	9206      	str	r2, [sp, #24]
    is_common = _lv_area_intersect(&draw_area, clip_area, fill_area);
    6e3e:	4632      	mov	r2, r6
    6e40:	4629      	mov	r1, r5
    6e42:	a810      	add	r0, sp, #64	; 0x40
    6e44:	4bb6      	ldr	r3, [pc, #728]	; (7120 <_lv_blend_fill+0x31c>)
    6e46:	4798      	blx	r3
    if(!is_common) return;
    6e48:	2800      	cmp	r0, #0
    6e4a:	d0e8      	beq.n	6e1e <_lv_blend_fill+0x1a>
    draw_area.x1 -= disp_area->x1;
    6e4c:	8a3a      	ldrh	r2, [r7, #16]
    6e4e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
    6e52:	1a9b      	subs	r3, r3, r2
    6e54:	b299      	uxth	r1, r3
    6e56:	460d      	mov	r5, r1
    6e58:	910a      	str	r1, [sp, #40]	; 0x28
    6e5a:	b208      	sxth	r0, r1
    6e5c:	900b      	str	r0, [sp, #44]	; 0x2c
    6e5e:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
    draw_area.y1 -= disp_area->y1;
    6e62:	8a7b      	ldrh	r3, [r7, #18]
    6e64:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
    6e68:	1ac9      	subs	r1, r1, r3
    6e6a:	fa0f fc81 	sxth.w	ip, r1
    6e6e:	f8ad c042 	strh.w	ip, [sp, #66]	; 0x42
    draw_area.x2 -= disp_area->x1;
    6e72:	f8bd 0044 	ldrh.w	r0, [sp, #68]	; 0x44
    6e76:	1a80      	subs	r0, r0, r2
    6e78:	b280      	uxth	r0, r0
    6e7a:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
    draw_area.y2 -= disp_area->y1;
    6e7e:	f8bd e046 	ldrh.w	lr, [sp, #70]	; 0x46
    6e82:	ebae 0e03 	sub.w	lr, lr, r3
    6e86:	fa0f fe8e 	sxth.w	lr, lr
    6e8a:	f8ad e046 	strh.w	lr, [sp, #70]	; 0x46
    if(mask && disp->driver.antialiasing == 0)
    6e8e:	9a08      	ldr	r2, [sp, #32]
    6e90:	b1aa      	cbz	r2, 6ebe <_lv_blend_fill+0xba>
    6e92:	f898 3008 	ldrb.w	r3, [r8, #8]
    6e96:	f013 0f01 	tst.w	r3, #1
    6e9a:	d110      	bne.n	6ebe <_lv_blend_fill+0xba>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    6e9c:	1c41      	adds	r1, r0, #1
    6e9e:	1b49      	subs	r1, r1, r5
    6ea0:	b209      	sxth	r1, r1
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
    6ea2:	2900      	cmp	r1, #0
    6ea4:	dd0b      	ble.n	6ebe <_lv_blend_fill+0xba>
    6ea6:	4613      	mov	r3, r2
    6ea8:	4411      	add	r1, r2
    6eaa:	781a      	ldrb	r2, [r3, #0]
    6eac:	2a80      	cmp	r2, #128	; 0x80
    6eae:	f04f 32ff 	mov.w	r2, #4294967295
    6eb2:	bf98      	it	ls
    6eb4:	2200      	movls	r2, #0
    6eb6:	f803 2b01 	strb.w	r2, [r3], #1
    6eba:	428b      	cmp	r3, r1
    6ebc:	d1f5      	bne.n	6eaa <_lv_blend_fill+0xa6>
    if(disp->driver.set_px_cb) {
    6ebe:	f8d8 3014 	ldr.w	r3, [r8, #20]
    6ec2:	2b00      	cmp	r3, #0
    6ec4:	d077      	beq.n	6fb6 <_lv_blend_fill+0x1b2>
    6ec6:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    6eca:	4b93      	ldr	r3, [pc, #588]	; (7118 <_lv_blend_fill+0x314>)
    6ecc:	4798      	blx	r3
    6ece:	4605      	mov	r5, r0
    6ed0:	8abb      	ldrh	r3, [r7, #20]
    6ed2:	3301      	adds	r3, #1
    6ed4:	8a3a      	ldrh	r2, [r7, #16]
    6ed6:	1a9b      	subs	r3, r3, r2
    6ed8:	b21b      	sxth	r3, r3
    6eda:	9307      	str	r3, [sp, #28]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
    6edc:	2c01      	cmp	r4, #1
    6ede:	d03e      	beq.n	6f5e <_lv_blend_fill+0x15a>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
    6ee0:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
    6ee4:	9b08      	ldr	r3, [sp, #32]
    6ee6:	1a9f      	subs	r7, r3, r2
    6ee8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
    6eec:	3301      	adds	r3, #1
    6eee:	1a9b      	subs	r3, r3, r2
    6ef0:	b21b      	sxth	r3, r3
    6ef2:	9308      	str	r3, [sp, #32]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    6ef4:	f9bd a042 	ldrsh.w	sl, [sp, #66]	; 0x42
    6ef8:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
    6efc:	459a      	cmp	sl, r3
    6efe:	dc8e      	bgt.n	6e1e <_lv_blend_fill+0x1a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    6f00:	f9bd 6040 	ldrsh.w	r6, [sp, #64]	; 0x40
    6f04:	4634      	mov	r4, r6
    6f06:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
    6f0a:	429e      	cmp	r6, r3
    6f0c:	dc1e      	bgt.n	6f4c <_lv_blend_fill+0x148>
    6f0e:	443e      	add	r6, r7
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
    6f10:	fa0f f98a 	sxth.w	r9, sl
    6f14:	9605      	str	r6, [sp, #20]
    6f16:	464b      	mov	r3, r9
    6f18:	46b9      	mov	r9, r7
    6f1a:	461f      	mov	r7, r3
                                       (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
    6f1c:	9a05      	ldr	r2, [sp, #20]
    6f1e:	f812 3b01 	ldrb.w	r3, [r2], #1
    6f22:	9205      	str	r2, [sp, #20]
    6f24:	fb03 f30b 	mul.w	r3, r3, fp
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
    6f28:	f3c3 2307 	ubfx	r3, r3, #8, #8
    6f2c:	9302      	str	r3, [sp, #8]
    6f2e:	f8ad 8004 	strh.w	r8, [sp, #4]
    6f32:	9700      	str	r7, [sp, #0]
    6f34:	b223      	sxth	r3, r4
    6f36:	9a07      	ldr	r2, [sp, #28]
    6f38:	9906      	ldr	r1, [sp, #24]
    6f3a:	4628      	mov	r0, r5
    6f3c:	696e      	ldr	r6, [r5, #20]
    6f3e:	47b0      	blx	r6
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    6f40:	3401      	adds	r4, #1
    6f42:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
    6f46:	429c      	cmp	r4, r3
    6f48:	dde8      	ble.n	6f1c <_lv_blend_fill+0x118>
    6f4a:	464f      	mov	r7, r9
    6f4c:	9b08      	ldr	r3, [sp, #32]
    6f4e:	441f      	add	r7, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    6f50:	f10a 0a01 	add.w	sl, sl, #1
    6f54:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
    6f58:	459a      	cmp	sl, r3
    6f5a:	ddd1      	ble.n	6f00 <_lv_blend_fill+0xfc>
    6f5c:	e75f      	b.n	6e1e <_lv_blend_fill+0x1a>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    6f5e:	f9bd 9042 	ldrsh.w	r9, [sp, #66]	; 0x42
    6f62:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
    6f66:	4599      	cmp	r9, r3
    6f68:	f73f af59 	bgt.w	6e1e <_lv_blend_fill+0x1a>
    6f6c:	f8dd a01c 	ldr.w	sl, [sp, #28]
    6f70:	465e      	mov	r6, fp
    6f72:	f8dd b018 	ldr.w	fp, [sp, #24]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    6f76:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
    6f7a:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
    6f7e:	429c      	cmp	r4, r3
    6f80:	dc12      	bgt.n	6fa8 <_lv_blend_fill+0x1a4>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
    6f82:	fa0f f789 	sxth.w	r7, r9
    6f86:	9705      	str	r7, [sp, #20]
    6f88:	9602      	str	r6, [sp, #8]
    6f8a:	f8ad 8004 	strh.w	r8, [sp, #4]
    6f8e:	9b05      	ldr	r3, [sp, #20]
    6f90:	9300      	str	r3, [sp, #0]
    6f92:	b223      	sxth	r3, r4
    6f94:	4652      	mov	r2, sl
    6f96:	4659      	mov	r1, fp
    6f98:	4628      	mov	r0, r5
    6f9a:	696f      	ldr	r7, [r5, #20]
    6f9c:	47b8      	blx	r7
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    6f9e:	3401      	adds	r4, #1
    6fa0:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
    6fa4:	429c      	cmp	r4, r3
    6fa6:	ddef      	ble.n	6f88 <_lv_blend_fill+0x184>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    6fa8:	f109 0901 	add.w	r9, r9, #1
    6fac:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
    6fb0:	4599      	cmp	r9, r3
    6fb2:	dde0      	ble.n	6f76 <_lv_blend_fill+0x172>
    6fb4:	e733      	b.n	6e1e <_lv_blend_fill+0x1a>
    else if(mode == LV_BLEND_MODE_NORMAL) {
    6fb6:	f1b9 0f00 	cmp.w	r9, #0
    6fba:	f040 83a0 	bne.w	76fe <_lv_blend_fill+0x8fa>
    6fbe:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    6fc2:	f8ad 301c 	strh.w	r3, [sp, #28]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    6fc6:	4b54      	ldr	r3, [pc, #336]	; (7118 <_lv_blend_fill+0x314>)
    6fc8:	4798      	blx	r3
    6fca:	4606      	mov	r6, r0
    6fcc:	8abb      	ldrh	r3, [r7, #20]
    6fce:	3301      	adds	r3, #1
    6fd0:	8a3f      	ldrh	r7, [r7, #16]
    6fd2:	1bdf      	subs	r7, r3, r7
    6fd4:	b23f      	sxth	r7, r7
    6fd6:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
    6fda:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
    6fde:	3301      	adds	r3, #1
    6fe0:	1a9b      	subs	r3, r3, r2
    6fe2:	b21b      	sxth	r3, r3
    6fe4:	930b      	str	r3, [sp, #44]	; 0x2c
    int32_t draw_area_w = lv_area_get_width(draw_area);
    6fe6:	461d      	mov	r5, r3
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    6fe8:	f9bd 0046 	ldrsh.w	r0, [sp, #70]	; 0x46
    6fec:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
    6ff0:	1c41      	adds	r1, r0, #1
    6ff2:	1ac9      	subs	r1, r1, r3
    int32_t draw_area_h = lv_area_get_height(draw_area);
    6ff4:	b209      	sxth	r1, r1
    6ff6:	910c      	str	r1, [sp, #48]	; 0x30
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
    6ff8:	930a      	str	r3, [sp, #40]	; 0x28
    6ffa:	fb03 2207 	mla	r2, r3, r7, r2
    6ffe:	9906      	ldr	r1, [sp, #24]
    7000:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    7004:	9105      	str	r1, [sp, #20]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
    7006:	2c01      	cmp	r4, #1
    7008:	d029      	beq.n	705e <_lv_blend_fill+0x25a>
        if(opa > LV_OPA_MAX) {
    700a:	f1bb 0ffa 	cmp.w	fp, #250	; 0xfa
    700e:	f200 8108 	bhi.w	7222 <_lv_blend_fill+0x41e>
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
    7012:	4283      	cmp	r3, r0
    7014:	f73f af03 	bgt.w	6e1e <_lv_blend_fill+0x1a>
        last_dest_color.full = disp_buf_first[0].full;
    7018:	9b06      	ldr	r3, [sp, #24]
    701a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    701e:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
    7022:	f3c6 2cc4 	ubfx	ip, r6, #11, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    7026:	f3c6 1245 	ubfx	r2, r6, #5, #6
    702a:	4610      	mov	r0, r2
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    702c:	f006 021f 	and.w	r2, r6, #31
    7030:	4614      	mov	r4, r2
                disp_buf_first += disp_w;
    7032:	007a      	lsls	r2, r7, #1
    7034:	920c      	str	r2, [sp, #48]	; 0x30
    7036:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7038:	9908      	ldr	r1, [sp, #32]
    703a:	3901      	subs	r1, #1
    703c:	9106      	str	r1, [sp, #24]
    703e:	0052      	lsls	r2, r2, #1
    7040:	920e      	str	r2, [sp, #56]	; 0x38
    7042:	4619      	mov	r1, r3
    7044:	f04f 0e00 	mov.w	lr, #0
    7048:	4672      	mov	r2, lr
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
    704a:	b2b6      	uxth	r6, r6
    704c:	9608      	str	r6, [sp, #32]
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
    704e:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
    7052:	950d      	str	r5, [sp, #52]	; 0x34
    7054:	46a1      	mov	r9, r4
    7056:	f8cd b01c 	str.w	fp, [sp, #28]
    705a:	4683      	mov	fp, r0
    705c:	e345      	b.n	76ea <_lv_blend_fill+0x8e6>
        if(opa > LV_OPA_MAX) {
    705e:	f1bb 0ffa 	cmp.w	fp, #250	; 0xfa
    7062:	d925      	bls.n	70b0 <_lv_blend_fill+0x2ac>
            if(disp->driver.gpu_fill_cb && lv_area_get_size(draw_area) > GPU_SIZE_LIMIT) {
    7064:	6a73      	ldr	r3, [r6, #36]	; 0x24
    7066:	b123      	cbz	r3, 7072 <_lv_blend_fill+0x26e>
    7068:	a810      	add	r0, sp, #64	; 0x40
    706a:	4b2e      	ldr	r3, [pc, #184]	; (7124 <_lv_blend_fill+0x320>)
    706c:	4798      	blx	r3
    706e:	28f0      	cmp	r0, #240	; 0xf0
    7070:	d813      	bhi.n	709a <_lv_blend_fill+0x296>
            for(y = 0; y < draw_area_h; y++) {
    7072:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7074:	2b00      	cmp	r3, #0
    7076:	f77f aed2 	ble.w	6e1e <_lv_blend_fill+0x1a>
                disp_buf_first += disp_w;
    707a:	007f      	lsls	r7, r7, #1
    707c:	2400      	movs	r4, #0
                lv_color_fill(disp_buf_first, color, draw_area_w);
    707e:	4d2a      	ldr	r5, [pc, #168]	; (7128 <_lv_blend_fill+0x324>)
    7080:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    7084:	9e05      	ldr	r6, [sp, #20]
    7086:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7088:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    708c:	4630      	mov	r0, r6
    708e:	47a8      	blx	r5
                disp_buf_first += disp_w;
    7090:	443e      	add	r6, r7
            for(y = 0; y < draw_area_h; y++) {
    7092:	3401      	adds	r4, #1
    7094:	45a0      	cmp	r8, r4
    7096:	d1f6      	bne.n	7086 <_lv_blend_fill+0x282>
    7098:	e6c1      	b.n	6e1e <_lv_blend_fill+0x1a>
                disp->driver.gpu_fill_cb(&disp->driver, disp_buf, disp_w, draw_area, color);
    709a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    709e:	f8ad 3000 	strh.w	r3, [sp]
    70a2:	6a74      	ldr	r4, [r6, #36]	; 0x24
    70a4:	ab10      	add	r3, sp, #64	; 0x40
    70a6:	463a      	mov	r2, r7
    70a8:	9906      	ldr	r1, [sp, #24]
    70aa:	4630      	mov	r0, r6
    70ac:	47a0      	blx	r4
    70ae:	e6b6      	b.n	6e1e <_lv_blend_fill+0x1a>
            if(disp->driver.gpu_blend_cb && lv_area_get_size(draw_area) > GPU_SIZE_LIMIT) {
    70b0:	6a33      	ldr	r3, [r6, #32]
    70b2:	2b00      	cmp	r3, #0
    70b4:	d03c      	beq.n	7130 <_lv_blend_fill+0x32c>
    70b6:	a810      	add	r0, sp, #64	; 0x40
    70b8:	4b1a      	ldr	r3, [pc, #104]	; (7124 <_lv_blend_fill+0x320>)
    70ba:	4798      	blx	r3
    70bc:	28f0      	cmp	r0, #240	; 0xf0
    70be:	d937      	bls.n	7130 <_lv_blend_fill+0x32c>
                for(x = 0; x < draw_area_w ; x++) blend_buf[x].full = color.full;
    70c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    70c2:	2900      	cmp	r1, #0
    70c4:	dd0c      	ble.n	70e0 <_lv_blend_fill+0x2dc>
    70c6:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
    70ca:	4a18      	ldr	r2, [pc, #96]	; (712c <_lv_blend_fill+0x328>)
    70cc:	1e93      	subs	r3, r2, #2
    70ce:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
    70d2:	3901      	subs	r1, #1
    70d4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    70d8:	f823 8f02 	strh.w	r8, [r3, #2]!
    70dc:	429a      	cmp	r2, r3
    70de:	d1fb      	bne.n	70d8 <_lv_blend_fill+0x2d4>
                for(y = draw_area->y1; y <= draw_area->y2; y++) {
    70e0:	f9bd 5042 	ldrsh.w	r5, [sp, #66]	; 0x42
    70e4:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
    70e8:	429d      	cmp	r5, r3
    70ea:	f73f ae98 	bgt.w	6e1e <_lv_blend_fill+0x1a>
                    disp_buf_first += disp_w;
    70ee:	ea4f 0847 	mov.w	r8, r7, lsl #1
                    disp->driver.gpu_blend_cb(&disp->driver, disp_buf_first, blend_buf, draw_area_w, opa);
    70f2:	f8df a038 	ldr.w	sl, [pc, #56]	; 712c <_lv_blend_fill+0x328>
    70f6:	f8dd 9014 	ldr.w	r9, [sp, #20]
    70fa:	465c      	mov	r4, fp
    70fc:	9400      	str	r4, [sp, #0]
    70fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7100:	4652      	mov	r2, sl
    7102:	4649      	mov	r1, r9
    7104:	4630      	mov	r0, r6
    7106:	6a37      	ldr	r7, [r6, #32]
    7108:	47b8      	blx	r7
                    disp_buf_first += disp_w;
    710a:	44c1      	add	r9, r8
                for(y = draw_area->y1; y <= draw_area->y2; y++) {
    710c:	3501      	adds	r5, #1
    710e:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
    7112:	429d      	cmp	r5, r3
    7114:	ddf2      	ble.n	70fc <_lv_blend_fill+0x2f8>
    7116:	e682      	b.n	6e1e <_lv_blend_fill+0x1a>
    7118:	00005789 	.word	0x00005789
    711c:	0001025d 	.word	0x0001025d
    7120:	00010719 	.word	0x00010719
    7124:	000106fd 	.word	0x000106fd
    7128:	00010d3b 	.word	0x00010d3b
    712c:	20002690 	.word	0x20002690
            lv_color_t last_dest_color = LV_COLOR_BLACK;
    7130:	f04f 0e00 	mov.w	lr, #0
    7134:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    7138:	f002 091f 	and.w	r9, r2, #31
    713c:	f3c2 1845 	ubfx	r8, r2, #5, #6
    7140:	f3c2 2cc4 	ubfx	ip, r2, #11, #5
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    7144:	fb0b f30c 	mul.w	r3, fp, ip
    7148:	eb03 2103 	add.w	r1, r3, r3, lsl #8
    714c:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
    7150:	f3c3 51c4 	ubfx	r1, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    7154:	fb0b f308 	mul.w	r3, fp, r8
    7158:	eb03 2403 	add.w	r4, r3, r3, lsl #8
    715c:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
    7160:	f3c3 54c5 	ubfx	r4, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    7164:	fb0b f309 	mul.w	r3, fp, r9
    7168:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    716c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    7170:	f3c3 52c4 	ubfx	r2, r3, #23, #5
}

LV_ATTRIBUTE_FAST_MEM static inline void lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out)
{
#if LV_COLOR_DEPTH != 1
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
    7174:	fa1f f38b 	uxth.w	r3, fp
    7178:	fb0c fc03 	mul.w	ip, ip, r3
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
    717c:	fb08 f803 	mul.w	r8, r8, r3
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
    7180:	fb09 f903 	mul.w	r9, r9, r3
            lv_opa_t opa_inv = 255 - opa;
    7184:	ea6f 030b 	mvn.w	r3, fp
    7188:	b2db      	uxtb	r3, r3
            for(y = 0; y < draw_area_h; y++) {
    718a:	980c      	ldr	r0, [sp, #48]	; 0x30
    718c:	2800      	cmp	r0, #0
    718e:	f77f ae46 	ble.w	6e1e <_lv_blend_fill+0x1a>
                disp_buf_first += disp_w;
    7192:	0078      	lsls	r0, r7, #1
    7194:	9007      	str	r0, [sp, #28]
    7196:	980b      	ldr	r0, [sp, #44]	; 0x2c
    7198:	0040      	lsls	r0, r0, #1
    719a:	9008      	str	r0, [sp, #32]
    719c:	2000      	movs	r0, #0
    719e:	9006      	str	r0, [sp, #24]
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix_premult(uint16_t * premult_c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix) >> 8);
    71a0:	b29f      	uxth	r7, r3
    71a2:	e036      	b.n	7212 <_lv_blend_fill+0x40e>
                    disp_buf_first[x] = last_res_color;
    71a4:	7830      	ldrb	r0, [r6, #0]
    71a6:	f362 0004 	bfi	r0, r2, #0, #5
    71aa:	7030      	strb	r0, [r6, #0]
    71ac:	8830      	ldrh	r0, [r6, #0]
    71ae:	f364 104a 	bfi	r0, r4, #5, #6
    71b2:	8030      	strh	r0, [r6, #0]
    71b4:	0a00      	lsrs	r0, r0, #8
    71b6:	f361 00c7 	bfi	r0, r1, #3, #5
    71ba:	7070      	strb	r0, [r6, #1]
    71bc:	3302      	adds	r3, #2
                for(x = 0; x < draw_area_w; x++) {
    71be:	459b      	cmp	fp, r3
    71c0:	d01c      	beq.n	71fc <_lv_blend_fill+0x3f8>
                    if(last_dest_color.full != disp_buf_first[x].full) {
    71c2:	461e      	mov	r6, r3
    71c4:	fa1f f08e 	uxth.w	r0, lr
    71c8:	f8b3 a000 	ldrh.w	sl, [r3]
    71cc:	4550      	cmp	r0, sl
    71ce:	d0e9      	beq.n	71a4 <_lv_blend_fill+0x3a0>
                        last_dest_color = disp_buf_first[x];
    71d0:	f8b3 e000 	ldrh.w	lr, [r3]
    71d4:	7859      	ldrb	r1, [r3, #1]
    71d6:	08c9      	lsrs	r1, r1, #3
    71d8:	fb01 c107 	mla	r1, r1, r7, ip
    71dc:	f3c1 2104 	ubfx	r1, r1, #8, #5
    LV_COLOR_SET_G(ret, (uint16_t)((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix) >> 8);
    71e0:	f3ce 1445 	ubfx	r4, lr, #5, #6
    71e4:	fb04 8407 	mla	r4, r4, r7, r8
    71e8:	f3c4 2405 	ubfx	r4, r4, #8, #6
    LV_COLOR_SET_B(ret, (uint16_t)((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix) >> 8);
    71ec:	781a      	ldrb	r2, [r3, #0]
    71ee:	f002 021f 	and.w	r2, r2, #31
    71f2:	fb02 9207 	mla	r2, r2, r7, r9
    71f6:	f3c2 2204 	ubfx	r2, r2, #8, #5
    71fa:	e7d3      	b.n	71a4 <_lv_blend_fill+0x3a0>
                disp_buf_first += disp_w;
    71fc:	9b05      	ldr	r3, [sp, #20]
    71fe:	9807      	ldr	r0, [sp, #28]
    7200:	4403      	add	r3, r0
    7202:	9305      	str	r3, [sp, #20]
            for(y = 0; y < draw_area_h; y++) {
    7204:	9b06      	ldr	r3, [sp, #24]
    7206:	3301      	adds	r3, #1
    7208:	9306      	str	r3, [sp, #24]
    720a:	980c      	ldr	r0, [sp, #48]	; 0x30
    720c:	4298      	cmp	r0, r3
    720e:	f43f ae06 	beq.w	6e1e <_lv_blend_fill+0x1a>
                for(x = 0; x < draw_area_w; x++) {
    7212:	2d00      	cmp	r5, #0
    7214:	ddf2      	ble.n	71fc <_lv_blend_fill+0x3f8>
    7216:	9805      	ldr	r0, [sp, #20]
    7218:	4603      	mov	r3, r0
    721a:	9e08      	ldr	r6, [sp, #32]
    721c:	eb00 0b06 	add.w	fp, r0, r6
    7220:	e7cf      	b.n	71c2 <_lv_blend_fill+0x3be>
            for(y = 0; y < draw_area_h; y++) {
    7222:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7224:	2b00      	cmp	r3, #0
    7226:	f77f adfa 	ble.w	6e1e <_lv_blend_fill+0x1a>
        int32_t x_end4 = draw_area_w - 4;
    722a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    722c:	3b04      	subs	r3, #4
    722e:	930d      	str	r3, [sp, #52]	; 0x34
                disp_buf_first += disp_w;
    7230:	007b      	lsls	r3, r7, #1
    7232:	930f      	str	r3, [sp, #60]	; 0x3c
    7234:	2300      	movs	r3, #0
    7236:	930a      	str	r3, [sp, #40]	; 0x28
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    7238:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    723c:	f3c2 2cc4 	ubfx	ip, r2, #11, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    7240:	f3c2 1e45 	ubfx	lr, r2, #5, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    7244:	f3c2 0304 	ubfx	r3, r2, #0, #5
    7248:	9306      	str	r3, [sp, #24]
    724a:	e1de      	b.n	760a <_lv_blend_fill+0x806>
                    FILL_NORMAL_MASK_PX(x, color)
    724c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    7250:	803b      	strh	r3, [r7, #0]
    7252:	4643      	mov	r3, r8
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
    7254:	3101      	adds	r1, #1
    7256:	428d      	cmp	r5, r1
    7258:	f000 8342 	beq.w	78e0 <_lv_blend_fill+0xadc>
    725c:	3702      	adds	r7, #2
    725e:	f018 0f03 	tst.w	r8, #3
    7262:	f000 834b 	beq.w	78fc <_lv_blend_fill+0xaf8>
                    FILL_NORMAL_MASK_PX(x, color)
    7266:	f818 3b01 	ldrb.w	r3, [r8], #1
    726a:	2b00      	cmp	r3, #0
    726c:	d0f1      	beq.n	7252 <_lv_blend_fill+0x44e>
    726e:	2bff      	cmp	r3, #255	; 0xff
    7270:	d0ec      	beq.n	724c <_lv_blend_fill+0x448>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    7272:	f1c3 09ff 	rsb	r9, r3, #255	; 0xff
    7276:	787a      	ldrb	r2, [r7, #1]
    7278:	08d2      	lsrs	r2, r2, #3
    727a:	fb09 f202 	mul.w	r2, r9, r2
    727e:	fb03 220c 	mla	r2, r3, ip, r2
    7282:	eb02 2002 	add.w	r0, r2, r2, lsl #8
    7286:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
    728a:	f3c2 52c4 	ubfx	r2, r2, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    728e:	8838      	ldrh	r0, [r7, #0]
    7290:	f3c0 1045 	ubfx	r0, r0, #5, #6
    7294:	fb09 f000 	mul.w	r0, r9, r0
    7298:	fb03 000e 	mla	r0, r3, lr, r0
    729c:	eb00 2600 	add.w	r6, r0, r0, lsl #8
    72a0:	eb00 10c6 	add.w	r0, r0, r6, lsl #7
    72a4:	f3c0 50c5 	ubfx	r0, r0, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    72a8:	783e      	ldrb	r6, [r7, #0]
    72aa:	f006 0a1f 	and.w	sl, r6, #31
    72ae:	fb09 f90a 	mul.w	r9, r9, sl
    72b2:	fb03 9304 	mla	r3, r3, r4, r9
    72b6:	eb03 2903 	add.w	r9, r3, r3, lsl #8
    72ba:	eb03 13c9 	add.w	r3, r3, r9, lsl #7
    72be:	0ddb      	lsrs	r3, r3, #23
    72c0:	f363 0604 	bfi	r6, r3, #0, #5
    72c4:	703e      	strb	r6, [r7, #0]
    72c6:	883b      	ldrh	r3, [r7, #0]
    72c8:	f360 134a 	bfi	r3, r0, #5, #6
    72cc:	803b      	strh	r3, [r7, #0]
    72ce:	0a1b      	lsrs	r3, r3, #8
    72d0:	f362 03c7 	bfi	r3, r2, #3, #5
    72d4:	707b      	strb	r3, [r7, #1]
    72d6:	e7bc      	b.n	7252 <_lv_blend_fill+0x44e>
                            disp_buf_first[x] = color;
    72d8:	f8bd 401c 	ldrh.w	r4, [sp, #28]
    72dc:	f820 4c06 	strh.w	r4, [r0, #-6]
                            disp_buf_first[x + 1] = color;
    72e0:	f820 4c04 	strh.w	r4, [r0, #-4]
                            disp_buf_first[x + 2] = color;
    72e4:	f820 4c02 	strh.w	r4, [r0, #-2]
                            disp_buf_first[x + 3] = color;
    72e8:	8004      	strh	r4, [r0, #0]
                for(; x <= x_end4; x += 4) {
    72ea:	3104      	adds	r1, #4
    72ec:	3304      	adds	r3, #4
    72ee:	3008      	adds	r0, #8
    72f0:	428f      	cmp	r7, r1
    72f2:	f2c0 8129 	blt.w	7548 <_lv_blend_fill+0x744>
    72f6:	461a      	mov	r2, r3
                    if(*mask32) {
    72f8:	f853 4c04 	ldr.w	r4, [r3, #-4]
    72fc:	2c00      	cmp	r4, #0
    72fe:	d0f4      	beq.n	72ea <_lv_blend_fill+0x4e6>
                        if((*mask32) == 0xFFFFFFFF) {
    7300:	f1b4 3fff 	cmp.w	r4, #4294967295
    7304:	d0e8      	beq.n	72d8 <_lv_blend_fill+0x4d4>
                            FILL_NORMAL_MASK_PX(x, color)
    7306:	f813 8c04 	ldrb.w	r8, [r3, #-4]
    730a:	f1b8 0f00 	cmp.w	r8, #0
    730e:	d03f      	beq.n	7390 <_lv_blend_fill+0x58c>
    7310:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    7314:	f000 8105 	beq.w	7522 <_lv_blend_fill+0x71e>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    7318:	f1c8 06ff 	rsb	r6, r8, #255	; 0xff
    731c:	f810 4c05 	ldrb.w	r4, [r0, #-5]
    7320:	08e4      	lsrs	r4, r4, #3
    7322:	fb06 f404 	mul.w	r4, r6, r4
    7326:	fb08 440c 	mla	r4, r8, ip, r4
    732a:	eb04 2504 	add.w	r5, r4, r4, lsl #8
    732e:	eb04 14c5 	add.w	r4, r4, r5, lsl #7
    7332:	f3c4 54c4 	ubfx	r4, r4, #23, #5
    7336:	9409      	str	r4, [sp, #36]	; 0x24
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    7338:	f830 5c06 	ldrh.w	r5, [r0, #-6]
    733c:	f3c5 1545 	ubfx	r5, r5, #5, #6
    7340:	fb06 f505 	mul.w	r5, r6, r5
    7344:	fb08 550e 	mla	r5, r8, lr, r5
    7348:	eb05 2905 	add.w	r9, r5, r5, lsl #8
    734c:	eb05 15c9 	add.w	r5, r5, r9, lsl #7
    7350:	f3c5 55c5 	ubfx	r5, r5, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    7354:	f810 9c06 	ldrb.w	r9, [r0, #-6]
    7358:	f009 0b1f 	and.w	fp, r9, #31
    735c:	fb06 f60b 	mul.w	r6, r6, fp
    7360:	9c06      	ldr	r4, [sp, #24]
    7362:	fb08 6804 	mla	r8, r8, r4, r6
    7366:	eb08 2608 	add.w	r6, r8, r8, lsl #8
    736a:	eb08 16c6 	add.w	r6, r8, r6, lsl #7
    736e:	0df6      	lsrs	r6, r6, #23
    7370:	f366 0904 	bfi	r9, r6, #0, #5
    7374:	f800 9c06 	strb.w	r9, [r0, #-6]
    7378:	f830 6c06 	ldrh.w	r6, [r0, #-6]
    737c:	f365 164a 	bfi	r6, r5, #5, #6
    7380:	f820 6c06 	strh.w	r6, [r0, #-6]
    7384:	0a36      	lsrs	r6, r6, #8
    7386:	9c09      	ldr	r4, [sp, #36]	; 0x24
    7388:	f364 06c7 	bfi	r6, r4, #3, #5
    738c:	f800 6c05 	strb.w	r6, [r0, #-5]
                            FILL_NORMAL_MASK_PX(x + 1, color)
    7390:	f812 8c03 	ldrb.w	r8, [r2, #-3]
    7394:	f1b8 0f00 	cmp.w	r8, #0
    7398:	d03f      	beq.n	741a <_lv_blend_fill+0x616>
    739a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    739e:	f000 80c5 	beq.w	752c <_lv_blend_fill+0x728>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    73a2:	f1c8 06ff 	rsb	r6, r8, #255	; 0xff
    73a6:	f810 4c03 	ldrb.w	r4, [r0, #-3]
    73aa:	08e4      	lsrs	r4, r4, #3
    73ac:	fb06 f404 	mul.w	r4, r6, r4
    73b0:	fb08 440c 	mla	r4, r8, ip, r4
    73b4:	eb04 2504 	add.w	r5, r4, r4, lsl #8
    73b8:	eb04 14c5 	add.w	r4, r4, r5, lsl #7
    73bc:	f3c4 54c4 	ubfx	r4, r4, #23, #5
    73c0:	9409      	str	r4, [sp, #36]	; 0x24
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    73c2:	f830 5c04 	ldrh.w	r5, [r0, #-4]
    73c6:	f3c5 1545 	ubfx	r5, r5, #5, #6
    73ca:	fb06 f505 	mul.w	r5, r6, r5
    73ce:	fb08 550e 	mla	r5, r8, lr, r5
    73d2:	eb05 2905 	add.w	r9, r5, r5, lsl #8
    73d6:	eb05 15c9 	add.w	r5, r5, r9, lsl #7
    73da:	f3c5 55c5 	ubfx	r5, r5, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    73de:	f810 9c04 	ldrb.w	r9, [r0, #-4]
    73e2:	f009 0b1f 	and.w	fp, r9, #31
    73e6:	fb06 f60b 	mul.w	r6, r6, fp
    73ea:	9c06      	ldr	r4, [sp, #24]
    73ec:	fb08 6804 	mla	r8, r8, r4, r6
    73f0:	eb08 2608 	add.w	r6, r8, r8, lsl #8
    73f4:	eb08 16c6 	add.w	r6, r8, r6, lsl #7
    73f8:	0df6      	lsrs	r6, r6, #23
    73fa:	f366 0904 	bfi	r9, r6, #0, #5
    73fe:	f800 9c04 	strb.w	r9, [r0, #-4]
    7402:	f830 6c04 	ldrh.w	r6, [r0, #-4]
    7406:	f365 164a 	bfi	r6, r5, #5, #6
    740a:	f820 6c04 	strh.w	r6, [r0, #-4]
    740e:	0a36      	lsrs	r6, r6, #8
    7410:	9c09      	ldr	r4, [sp, #36]	; 0x24
    7412:	f364 06c7 	bfi	r6, r4, #3, #5
    7416:	f800 6c03 	strb.w	r6, [r0, #-3]
                            FILL_NORMAL_MASK_PX(x + 2, color)
    741a:	f812 8c02 	ldrb.w	r8, [r2, #-2]
    741e:	f1b8 0f00 	cmp.w	r8, #0
    7422:	d03f      	beq.n	74a4 <_lv_blend_fill+0x6a0>
    7424:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    7428:	f000 8085 	beq.w	7536 <_lv_blend_fill+0x732>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    742c:	f1c8 06ff 	rsb	r6, r8, #255	; 0xff
    7430:	f810 4c01 	ldrb.w	r4, [r0, #-1]
    7434:	08e4      	lsrs	r4, r4, #3
    7436:	fb06 f404 	mul.w	r4, r6, r4
    743a:	fb08 440c 	mla	r4, r8, ip, r4
    743e:	eb04 2504 	add.w	r5, r4, r4, lsl #8
    7442:	eb04 14c5 	add.w	r4, r4, r5, lsl #7
    7446:	f3c4 54c4 	ubfx	r4, r4, #23, #5
    744a:	9409      	str	r4, [sp, #36]	; 0x24
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    744c:	f830 5c02 	ldrh.w	r5, [r0, #-2]
    7450:	f3c5 1545 	ubfx	r5, r5, #5, #6
    7454:	fb06 f505 	mul.w	r5, r6, r5
    7458:	fb08 550e 	mla	r5, r8, lr, r5
    745c:	eb05 2905 	add.w	r9, r5, r5, lsl #8
    7460:	eb05 15c9 	add.w	r5, r5, r9, lsl #7
    7464:	f3c5 55c5 	ubfx	r5, r5, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    7468:	f810 9c02 	ldrb.w	r9, [r0, #-2]
    746c:	f009 0b1f 	and.w	fp, r9, #31
    7470:	fb06 f60b 	mul.w	r6, r6, fp
    7474:	9c06      	ldr	r4, [sp, #24]
    7476:	fb08 6804 	mla	r8, r8, r4, r6
    747a:	eb08 2608 	add.w	r6, r8, r8, lsl #8
    747e:	eb08 16c6 	add.w	r6, r8, r6, lsl #7
    7482:	0df6      	lsrs	r6, r6, #23
    7484:	f366 0904 	bfi	r9, r6, #0, #5
    7488:	f800 9c02 	strb.w	r9, [r0, #-2]
    748c:	f830 6c02 	ldrh.w	r6, [r0, #-2]
    7490:	f365 164a 	bfi	r6, r5, #5, #6
    7494:	f820 6c02 	strh.w	r6, [r0, #-2]
    7498:	0a36      	lsrs	r6, r6, #8
    749a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    749c:	f364 06c7 	bfi	r6, r4, #3, #5
    74a0:	f800 6c01 	strb.w	r6, [r0, #-1]
                            FILL_NORMAL_MASK_PX(x + 3, color)
    74a4:	f812 8c01 	ldrb.w	r8, [r2, #-1]
    74a8:	f1b8 0f00 	cmp.w	r8, #0
    74ac:	f43f af1d 	beq.w	72ea <_lv_blend_fill+0x4e6>
    74b0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    74b4:	d044      	beq.n	7540 <_lv_blend_fill+0x73c>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    74b6:	f1c8 06ff 	rsb	r6, r8, #255	; 0xff
    74ba:	7844      	ldrb	r4, [r0, #1]
    74bc:	08e4      	lsrs	r4, r4, #3
    74be:	fb06 f404 	mul.w	r4, r6, r4
    74c2:	fb08 440c 	mla	r4, r8, ip, r4
    74c6:	eb04 2504 	add.w	r5, r4, r4, lsl #8
    74ca:	eb04 14c5 	add.w	r4, r4, r5, lsl #7
    74ce:	f3c4 5bc4 	ubfx	fp, r4, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    74d2:	8805      	ldrh	r5, [r0, #0]
    74d4:	f3c5 1545 	ubfx	r5, r5, #5, #6
    74d8:	fb06 f505 	mul.w	r5, r6, r5
    74dc:	fb08 550e 	mla	r5, r8, lr, r5
    74e0:	eb05 2905 	add.w	r9, r5, r5, lsl #8
    74e4:	eb05 15c9 	add.w	r5, r5, r9, lsl #7
    74e8:	f3c5 55c5 	ubfx	r5, r5, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    74ec:	f890 9000 	ldrb.w	r9, [r0]
    74f0:	f009 0a1f 	and.w	sl, r9, #31
    74f4:	fb06 f60a 	mul.w	r6, r6, sl
    74f8:	9c06      	ldr	r4, [sp, #24]
    74fa:	fb08 6804 	mla	r8, r8, r4, r6
    74fe:	eb08 2608 	add.w	r6, r8, r8, lsl #8
    7502:	eb08 16c6 	add.w	r6, r8, r6, lsl #7
    7506:	0df6      	lsrs	r6, r6, #23
    7508:	f366 0904 	bfi	r9, r6, #0, #5
    750c:	f880 9000 	strb.w	r9, [r0]
    7510:	8806      	ldrh	r6, [r0, #0]
    7512:	f365 164a 	bfi	r6, r5, #5, #6
    7516:	8006      	strh	r6, [r0, #0]
    7518:	0a36      	lsrs	r6, r6, #8
    751a:	f36b 06c7 	bfi	r6, fp, #3, #5
    751e:	7046      	strb	r6, [r0, #1]
    7520:	e6e3      	b.n	72ea <_lv_blend_fill+0x4e6>
                            FILL_NORMAL_MASK_PX(x, color)
    7522:	f8bd 401c 	ldrh.w	r4, [sp, #28]
    7526:	f820 4c06 	strh.w	r4, [r0, #-6]
    752a:	e731      	b.n	7390 <_lv_blend_fill+0x58c>
                            FILL_NORMAL_MASK_PX(x + 1, color)
    752c:	f8bd 401c 	ldrh.w	r4, [sp, #28]
    7530:	f820 4c04 	strh.w	r4, [r0, #-4]
    7534:	e771      	b.n	741a <_lv_blend_fill+0x616>
                            FILL_NORMAL_MASK_PX(x + 2, color)
    7536:	f8bd 401c 	ldrh.w	r4, [sp, #28]
    753a:	f820 4c02 	strh.w	r4, [r0, #-2]
    753e:	e7b1      	b.n	74a4 <_lv_blend_fill+0x6a0>
                            FILL_NORMAL_MASK_PX(x + 3, color)
    7540:	f8bd 401c 	ldrh.w	r4, [sp, #28]
    7544:	8004      	strh	r4, [r0, #0]
    7546:	e6d0      	b.n	72ea <_lv_blend_fill+0x4e6>
    7548:	9d0e      	ldr	r5, [sp, #56]	; 0x38
                for(; x < draw_area_w ; x++) {
    754a:	428d      	cmp	r5, r1
    754c:	dd4e      	ble.n	75ec <_lv_blend_fill+0x7e8>
    754e:	1e54      	subs	r4, r2, #1
    7550:	9b05      	ldr	r3, [sp, #20]
    7552:	eb03 0841 	add.w	r8, r3, r1, lsl #1
    7556:	9e06      	ldr	r6, [sp, #24]
    7558:	e008      	b.n	756c <_lv_blend_fill+0x768>
                    FILL_NORMAL_MASK_PX(x, color)
    755a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    755e:	f8a8 3000 	strh.w	r3, [r8]
                for(; x < draw_area_w ; x++) {
    7562:	3101      	adds	r1, #1
    7564:	f108 0802 	add.w	r8, r8, #2
    7568:	428d      	cmp	r5, r1
    756a:	dd3f      	ble.n	75ec <_lv_blend_fill+0x7e8>
                    FILL_NORMAL_MASK_PX(x, color)
    756c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    7570:	2b00      	cmp	r3, #0
    7572:	d0f6      	beq.n	7562 <_lv_blend_fill+0x75e>
    7574:	2bff      	cmp	r3, #255	; 0xff
    7576:	d0f0      	beq.n	755a <_lv_blend_fill+0x756>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    7578:	f1c3 09ff 	rsb	r9, r3, #255	; 0xff
    757c:	f898 2001 	ldrb.w	r2, [r8, #1]
    7580:	08d2      	lsrs	r2, r2, #3
    7582:	fb09 f202 	mul.w	r2, r9, r2
    7586:	fb03 220c 	mla	r2, r3, ip, r2
    758a:	eb02 2002 	add.w	r0, r2, r2, lsl #8
    758e:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
    7592:	f3c2 52c4 	ubfx	r2, r2, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    7596:	f8b8 0000 	ldrh.w	r0, [r8]
    759a:	f3c0 1045 	ubfx	r0, r0, #5, #6
    759e:	fb09 f000 	mul.w	r0, r9, r0
    75a2:	fb03 000e 	mla	r0, r3, lr, r0
    75a6:	eb00 2700 	add.w	r7, r0, r0, lsl #8
    75aa:	eb00 10c7 	add.w	r0, r0, r7, lsl #7
    75ae:	f3c0 50c5 	ubfx	r0, r0, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    75b2:	f898 7000 	ldrb.w	r7, [r8]
    75b6:	f007 0a1f 	and.w	sl, r7, #31
    75ba:	fb09 f90a 	mul.w	r9, r9, sl
    75be:	fb03 9306 	mla	r3, r3, r6, r9
    75c2:	eb03 2903 	add.w	r9, r3, r3, lsl #8
    75c6:	eb03 13c9 	add.w	r3, r3, r9, lsl #7
    75ca:	0ddb      	lsrs	r3, r3, #23
    75cc:	f363 0704 	bfi	r7, r3, #0, #5
    75d0:	f888 7000 	strb.w	r7, [r8]
    75d4:	f8b8 3000 	ldrh.w	r3, [r8]
    75d8:	f360 134a 	bfi	r3, r0, #5, #6
    75dc:	f8a8 3000 	strh.w	r3, [r8]
    75e0:	0a1b      	lsrs	r3, r3, #8
    75e2:	f362 03c7 	bfi	r3, r2, #3, #5
    75e6:	f888 3001 	strb.w	r3, [r8, #1]
    75ea:	e7ba      	b.n	7562 <_lv_blend_fill+0x75e>
                disp_buf_first += disp_w;
    75ec:	9b05      	ldr	r3, [sp, #20]
    75ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    75f0:	4413      	add	r3, r2
    75f2:	9305      	str	r3, [sp, #20]
    75f4:	9b08      	ldr	r3, [sp, #32]
    75f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    75f8:	4413      	add	r3, r2
    75fa:	9308      	str	r3, [sp, #32]
            for(y = 0; y < draw_area_h; y++) {
    75fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    75fe:	3301      	adds	r3, #1
    7600:	930a      	str	r3, [sp, #40]	; 0x28
    7602:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7604:	429a      	cmp	r2, r3
    7606:	f43f ac0a 	beq.w	6e1e <_lv_blend_fill+0x1a>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
    760a:	2d00      	cmp	r5, #0
    760c:	f340 8166 	ble.w	78dc <_lv_blend_fill+0xad8>
    7610:	9a08      	ldr	r2, [sp, #32]
    7612:	f012 0f03 	tst.w	r2, #3
    7616:	f000 816f 	beq.w	78f8 <_lv_blend_fill+0xaf4>
    761a:	9f05      	ldr	r7, [sp, #20]
    761c:	4690      	mov	r8, r2
    761e:	2100      	movs	r1, #0
    7620:	9c06      	ldr	r4, [sp, #24]
    7622:	e620      	b.n	7266 <_lv_blend_fill+0x462>
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
    7624:	2aff      	cmp	r2, #255	; 0xff
    7626:	d002      	beq.n	762e <_lv_blend_fill+0x82a>
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
    7628:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
    762c:	e004      	b.n	7638 <_lv_blend_fill+0x834>
    762e:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
    7632:	882a      	ldrh	r2, [r5, #0]
    7634:	429a      	cmp	r2, r3
    7636:	d032      	beq.n	769e <_lv_blend_fill+0x89a>
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
    7638:	f1be 0fff 	cmp.w	lr, #255	; 0xff
    763c:	d042      	beq.n	76c4 <_lv_blend_fill+0x8c0>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    763e:	f1ce 04ff 	rsb	r4, lr, #255	; 0xff
    7642:	786b      	ldrb	r3, [r5, #1]
    7644:	08db      	lsrs	r3, r3, #3
    7646:	fb0e f20c 	mul.w	r2, lr, ip
    764a:	fb04 2303 	mla	r3, r4, r3, r2
    764e:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    7652:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    7656:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    765a:	882a      	ldrh	r2, [r5, #0]
    765c:	f3c2 1245 	ubfx	r2, r2, #5, #6
    7660:	fb0b f10e 	mul.w	r1, fp, lr
    7664:	fb04 1202 	mla	r2, r4, r2, r1
    7668:	eb02 2102 	add.w	r1, r2, r2, lsl #8
    766c:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
    7670:	f3c2 52c5 	ubfx	r2, r2, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    7674:	7829      	ldrb	r1, [r5, #0]
    7676:	f001 011f 	and.w	r1, r1, #31
    767a:	fb09 f60e 	mul.w	r6, r9, lr
    767e:	fb04 6101 	mla	r1, r4, r1, r6
    7682:	eb01 2601 	add.w	r6, r1, r1, lsl #8
    7686:	eb01 11c6 	add.w	r1, r1, r6, lsl #7
    768a:	0dc9      	lsrs	r1, r1, #23
    768c:	f361 0a04 	bfi	sl, r1, #0, #5
    7690:	f362 1a4a 	bfi	sl, r2, #5, #6
    7694:	f363 2acf 	bfi	sl, r3, #11, #5
    7698:	fa1f f18a 	uxth.w	r1, sl
                            last_dest_color.full = disp_buf_first[x].full;
    769c:	882b      	ldrh	r3, [r5, #0]
                        disp_buf_first[x] = last_res_color;
    769e:	8029      	strh	r1, [r5, #0]
    76a0:	4602      	mov	r2, r0
    76a2:	3502      	adds	r5, #2
                for(x = 0; x < draw_area_w; x++) {
    76a4:	45a8      	cmp	r8, r5
    76a6:	d00f      	beq.n	76c8 <_lv_blend_fill+0x8c4>
                    if(*mask_tmp_x) {
    76a8:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    76ac:	2800      	cmp	r0, #0
    76ae:	d0f8      	beq.n	76a2 <_lv_blend_fill+0x89e>
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
    76b0:	4290      	cmp	r0, r2
    76b2:	d0be      	beq.n	7632 <_lv_blend_fill+0x82e>
    76b4:	28ff      	cmp	r0, #255	; 0xff
    76b6:	d0b5      	beq.n	7624 <_lv_blend_fill+0x820>
                                                                   (uint32_t)((uint32_t)(*mask_tmp_x) * opa) >> 8;
    76b8:	9b07      	ldr	r3, [sp, #28]
    76ba:	fb03 fe00 	mul.w	lr, r3, r0
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
    76be:	f3ce 2e07 	ubfx	lr, lr, #8, #8
    76c2:	e7b9      	b.n	7638 <_lv_blend_fill+0x834>
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
    76c4:	9908      	ldr	r1, [sp, #32]
    76c6:	e7e9      	b.n	769c <_lv_blend_fill+0x898>
                disp_buf_first += disp_w;
    76c8:	9805      	ldr	r0, [sp, #20]
    76ca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    76cc:	4420      	add	r0, r4
    76ce:	9005      	str	r0, [sp, #20]
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
    76d0:	980a      	ldr	r0, [sp, #40]	; 0x28
    76d2:	3001      	adds	r0, #1
    76d4:	4604      	mov	r4, r0
    76d6:	900a      	str	r0, [sp, #40]	; 0x28
    76d8:	9806      	ldr	r0, [sp, #24]
    76da:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    76dc:	4428      	add	r0, r5
    76de:	9006      	str	r0, [sp, #24]
    76e0:	f9bd 0046 	ldrsh.w	r0, [sp, #70]	; 0x46
    76e4:	4284      	cmp	r4, r0
    76e6:	f73f ab9a 	bgt.w	6e1e <_lv_blend_fill+0x1a>
                for(x = 0; x < draw_area_w; x++) {
    76ea:	980d      	ldr	r0, [sp, #52]	; 0x34
    76ec:	2800      	cmp	r0, #0
    76ee:	ddeb      	ble.n	76c8 <_lv_blend_fill+0x8c4>
    76f0:	9805      	ldr	r0, [sp, #20]
    76f2:	4605      	mov	r5, r0
    76f4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    76f6:	eb00 0804 	add.w	r8, r0, r4
    76fa:	9f06      	ldr	r7, [sp, #24]
    76fc:	e7d4      	b.n	76a8 <_lv_blend_fill+0x8a4>
    76fe:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
    switch(mode) {
    7702:	f1b9 0f01 	cmp.w	r9, #1
    7706:	d036      	beq.n	7776 <_lv_blend_fill+0x972>
    7708:	f1b9 0f02 	cmp.w	r9, #2
    770c:	f47f ab87 	bne.w	6e1e <_lv_blend_fill+0x1a>
            blend_fp = color_blend_true_color_subtractive;
    7710:	4b7d      	ldr	r3, [pc, #500]	; (7908 <_lv_blend_fill+0xb04>)
    7712:	9305      	str	r3, [sp, #20]
    7714:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    7718:	f002 081f 	and.w	r8, r2, #31
    771c:	f3c2 1645 	ubfx	r6, r2, #5, #6
    7720:	f3c2 23c4 	ubfx	r3, r2, #11, #5
    7724:	4699      	mov	r9, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    7726:	8aba      	ldrh	r2, [r7, #20]
    7728:	3201      	adds	r2, #1
    772a:	8a3b      	ldrh	r3, [r7, #16]
    772c:	1ad3      	subs	r3, r2, r3
    772e:	b21f      	sxth	r7, r3
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
    7730:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    7734:	fb0c f307 	mul.w	r3, ip, r7
    7738:	9a06      	ldr	r2, [sp, #24]
    773a:	eb02 0243 	add.w	r2, r2, r3, lsl #1
    773e:	9207      	str	r2, [sp, #28]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
    7740:	2c01      	cmp	r4, #1
    7742:	d01b      	beq.n	777c <_lv_blend_fill+0x978>
    7744:	3001      	adds	r0, #1
    7746:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7748:	1a80      	subs	r0, r0, r2
    774a:	b202      	sxth	r2, r0
    774c:	920c      	str	r2, [sp, #48]	; 0x30
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
    774e:	9a08      	ldr	r2, [sp, #32]
    7750:	990b      	ldr	r1, [sp, #44]	; 0x2c
    7752:	1a52      	subs	r2, r2, r1
    7754:	9208      	str	r2, [sp, #32]
        last_dest_color.full = disp_buf_tmp[0].full;
    7756:	9a06      	ldr	r2, [sp, #24]
    7758:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    775c:	45f4      	cmp	ip, lr
    775e:	f73f ab5e 	bgt.w	6e1e <_lv_blend_fill+0x1a>
            disp_buf_tmp += disp_w;
    7762:	007b      	lsls	r3, r7, #1
    7764:	930b      	str	r3, [sp, #44]	; 0x2c
    7766:	4610      	mov	r0, r2
    7768:	2100      	movs	r1, #0
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
    776a:	f8cd b018 	str.w	fp, [sp, #24]
    776e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    7772:	46cb      	mov	fp, r9
    7774:	e0a5      	b.n	78c2 <_lv_blend_fill+0xabe>
            blend_fp = color_blend_true_color_additive;
    7776:	4b65      	ldr	r3, [pc, #404]	; (790c <_lv_blend_fill+0xb08>)
    7778:	9305      	str	r3, [sp, #20]
    777a:	e7cb      	b.n	7714 <_lv_blend_fill+0x910>
        lv_color_t last_dest_color = LV_COLOR_BLACK;
    777c:	f04f 0a00 	mov.w	sl, #0
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    7780:	fb0b f309 	mul.w	r3, fp, r9
    7784:	eb03 2003 	add.w	r0, r3, r3, lsl #8
    7788:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
    778c:	f3c3 50c4 	ubfx	r0, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    7790:	fb0b f306 	mul.w	r3, fp, r6
    7794:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    7798:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    779c:	f3c3 52c5 	ubfx	r2, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    77a0:	fb0b f308 	mul.w	r3, fp, r8
    77a4:	eb03 2103 	add.w	r1, r3, r3, lsl #8
    77a8:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
    77ac:	f3c3 53c4 	ubfx	r3, r3, #23, #5
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    77b0:	45f4      	cmp	ip, lr
    77b2:	f73f ab34 	bgt.w	6e1e <_lv_blend_fill+0x1a>
            disp_buf_tmp += disp_w;
    77b6:	0079      	lsls	r1, r7, #1
    77b8:	9108      	str	r1, [sp, #32]
    77ba:	f8cd b018 	str.w	fp, [sp, #24]
    77be:	46cb      	mov	fp, r9
    77c0:	e03a      	b.n	7838 <_lv_blend_fill+0xa34>
                disp_buf_tmp[x] = last_res_color;
    77c2:	7821      	ldrb	r1, [r4, #0]
    77c4:	f363 0104 	bfi	r1, r3, #0, #5
    77c8:	7021      	strb	r1, [r4, #0]
    77ca:	8821      	ldrh	r1, [r4, #0]
    77cc:	f362 114a 	bfi	r1, r2, #5, #6
    77d0:	8021      	strh	r1, [r4, #0]
    77d2:	0a09      	lsrs	r1, r1, #8
    77d4:	f360 01c7 	bfi	r1, r0, #3, #5
    77d8:	7061      	strb	r1, [r4, #1]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    77da:	f109 0901 	add.w	r9, r9, #1
    77de:	3702      	adds	r7, #2
    77e0:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
    77e4:	4589      	cmp	r9, r1
    77e6:	dc1a      	bgt.n	781e <_lv_blend_fill+0xa1a>
                if(last_dest_color.full != disp_buf_tmp[x].full) {
    77e8:	463c      	mov	r4, r7
    77ea:	fa1f f18a 	uxth.w	r1, sl
    77ee:	f8b7 e000 	ldrh.w	lr, [r7]
    77f2:	4571      	cmp	r1, lr
    77f4:	d0e5      	beq.n	77c2 <_lv_blend_fill+0x9be>
                    last_dest_color = disp_buf_tmp[x];
    77f6:	f8b7 a000 	ldrh.w	sl, [r7]
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa);
    77fa:	f368 0504 	bfi	r5, r8, #0, #5
    77fe:	f366 154a 	bfi	r5, r6, #5, #6
    7802:	f36b 25cf 	bfi	r5, fp, #11, #5
    7806:	9a06      	ldr	r2, [sp, #24]
    7808:	4651      	mov	r1, sl
    780a:	4628      	mov	r0, r5
    780c:	9b05      	ldr	r3, [sp, #20]
    780e:	4798      	blx	r3
    7810:	f000 031f 	and.w	r3, r0, #31
    7814:	f3c0 1245 	ubfx	r2, r0, #5, #6
    7818:	f3c0 20c4 	ubfx	r0, r0, #11, #5
    781c:	e7d1      	b.n	77c2 <_lv_blend_fill+0x9be>
            disp_buf_tmp += disp_w;
    781e:	9907      	ldr	r1, [sp, #28]
    7820:	9c08      	ldr	r4, [sp, #32]
    7822:	4421      	add	r1, r4
    7824:	9107      	str	r1, [sp, #28]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    7826:	9909      	ldr	r1, [sp, #36]	; 0x24
    7828:	3101      	adds	r1, #1
    782a:	460c      	mov	r4, r1
    782c:	9109      	str	r1, [sp, #36]	; 0x24
    782e:	f9bd 1046 	ldrsh.w	r1, [sp, #70]	; 0x46
    7832:	428c      	cmp	r4, r1
    7834:	f73f aaf3 	bgt.w	6e1e <_lv_blend_fill+0x1a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    7838:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
    783c:	46b9      	mov	r9, r7
    783e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
    7842:	428f      	cmp	r7, r1
    7844:	dceb      	bgt.n	781e <_lv_blend_fill+0xa1a>
    7846:	9907      	ldr	r1, [sp, #28]
    7848:	eb01 0747 	add.w	r7, r1, r7, lsl #1
    784c:	e7cc      	b.n	77e8 <_lv_blend_fill+0x9e4>
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
    784e:	2bf9      	cmp	r3, #249	; 0xf9
    7850:	bf9d      	ittte	ls
    7852:	9a0a      	ldrls	r2, [sp, #40]	; 0x28
    7854:	4353      	mulls	r3, r2
    7856:	f3c3 2207 	ubfxls	r2, r3, #8, #8
    785a:	9a06      	ldrhi	r2, [sp, #24]
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa_tmp);
    785c:	f368 0504 	bfi	r5, r8, #0, #5
    7860:	f366 154a 	bfi	r5, r6, #5, #6
    7864:	f36b 25cf 	bfi	r5, fp, #11, #5
    7868:	8821      	ldrh	r1, [r4, #0]
    786a:	4628      	mov	r0, r5
    786c:	9b05      	ldr	r3, [sp, #20]
    786e:	4798      	blx	r3
    7870:	b280      	uxth	r0, r0
                    last_mask = mask_tmp[x];
    7872:	f89a 1000 	ldrb.w	r1, [sl]
                    last_dest_color.full = disp_buf_tmp[x].full;
    7876:	8822      	ldrh	r2, [r4, #0]
                disp_buf_tmp[x] = last_res_color;
    7878:	8020      	strh	r0, [r4, #0]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    787a:	f109 0901 	add.w	r9, r9, #1
    787e:	3701      	adds	r7, #1
    7880:	3402      	adds	r4, #2
    7882:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
    7886:	4599      	cmp	r9, r3
    7888:	dc0a      	bgt.n	78a0 <_lv_blend_fill+0xa9c>
    788a:	46ba      	mov	sl, r7
                if(mask_tmp[x] == 0) continue;
    788c:	783b      	ldrb	r3, [r7, #0]
    788e:	2b00      	cmp	r3, #0
    7890:	d0f3      	beq.n	787a <_lv_blend_fill+0xa76>
                if(mask_tmp[x] != last_mask || last_dest_color.full != disp_buf_tmp[x].full) {
    7892:	428b      	cmp	r3, r1
    7894:	d1db      	bne.n	784e <_lv_blend_fill+0xa4a>
    7896:	f8b4 e000 	ldrh.w	lr, [r4]
    789a:	4596      	cmp	lr, r2
    789c:	d1d7      	bne.n	784e <_lv_blend_fill+0xa4a>
    789e:	e7eb      	b.n	7878 <_lv_blend_fill+0xa74>
            disp_buf_tmp += disp_w;
    78a0:	9b07      	ldr	r3, [sp, #28]
    78a2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    78a4:	4423      	add	r3, r4
    78a6:	9307      	str	r3, [sp, #28]
    78a8:	9b08      	ldr	r3, [sp, #32]
    78aa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    78ac:	4423      	add	r3, r4
    78ae:	9308      	str	r3, [sp, #32]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    78b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    78b2:	3301      	adds	r3, #1
    78b4:	461c      	mov	r4, r3
    78b6:	9309      	str	r3, [sp, #36]	; 0x24
    78b8:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
    78bc:	429c      	cmp	r4, r3
    78be:	f73f aaae 	bgt.w	6e1e <_lv_blend_fill+0x1a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    78c2:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
    78c6:	46a1      	mov	r9, r4
    78c8:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
    78cc:	429c      	cmp	r4, r3
    78ce:	dce7      	bgt.n	78a0 <_lv_blend_fill+0xa9c>
    78d0:	9b08      	ldr	r3, [sp, #32]
    78d2:	191f      	adds	r7, r3, r4
    78d4:	9b07      	ldr	r3, [sp, #28]
    78d6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    78da:	e7d6      	b.n	788a <_lv_blend_fill+0xa86>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
    78dc:	9b08      	ldr	r3, [sp, #32]
    78de:	2100      	movs	r1, #0
                for(; x <= x_end4; x += 4) {
    78e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    78e2:	428a      	cmp	r2, r1
    78e4:	f6ff ae82 	blt.w	75ec <_lv_blend_fill+0x7e8>
    78e8:	3304      	adds	r3, #4
    78ea:	1cc8      	adds	r0, r1, #3
    78ec:	9a05      	ldr	r2, [sp, #20]
    78ee:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    78f2:	950e      	str	r5, [sp, #56]	; 0x38
    78f4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    78f6:	e4fe      	b.n	72f6 <_lv_blend_fill+0x4f2>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
    78f8:	9b08      	ldr	r3, [sp, #32]
    78fa:	2100      	movs	r1, #0
                for(; x <= x_end4; x += 4) {
    78fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    78fe:	428a      	cmp	r2, r1
    7900:	daf2      	bge.n	78e8 <_lv_blend_fill+0xae4>
    7902:	461a      	mov	r2, r3
    7904:	e623      	b.n	754e <_lv_blend_fill+0x74a>
    7906:	bf00      	nop
    7908:	00006d53 	.word	0x00006d53
    790c:	00006c9d 	.word	0x00006c9d

00007910 <_lv_blend_map>:
{
    7910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7914:	b091      	sub	sp, #68	; 0x44
    7916:	f89d 4068 	ldrb.w	r4, [sp, #104]	; 0x68
    791a:	f89d a06c 	ldrb.w	sl, [sp, #108]	; 0x6c
    791e:	f89d 5070 	ldrb.w	r5, [sp, #112]	; 0x70
    if(opa < LV_OPA_MIN) return;
    7922:	f1ba 0f04 	cmp.w	sl, #4
    7926:	d900      	bls.n	792a <_lv_blend_map+0x1a>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
    7928:	b914      	cbnz	r4, 7930 <_lv_blend_map+0x20>
}
    792a:	b011      	add	sp, #68	; 0x44
    792c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7930:	9304      	str	r3, [sp, #16]
    7932:	9207      	str	r2, [sp, #28]
    7934:	460f      	mov	r7, r1
    7936:	4601      	mov	r1, r0
    is_common = _lv_area_intersect(&draw_area, clip_area, map_area);
    7938:	463a      	mov	r2, r7
    793a:	a80e      	add	r0, sp, #56	; 0x38
    793c:	4bbc      	ldr	r3, [pc, #752]	; (7c30 <_lv_blend_map+0x320>)
    793e:	4798      	blx	r3
    if(!is_common) return;
    7940:	2800      	cmp	r0, #0
    7942:	d0f2      	beq.n	792a <_lv_blend_map+0x1a>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    7944:	4bbb      	ldr	r3, [pc, #748]	; (7c34 <_lv_blend_map+0x324>)
    7946:	4798      	blx	r3
    7948:	4680      	mov	r8, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    794a:	4bbb      	ldr	r3, [pc, #748]	; (7c38 <_lv_blend_map+0x328>)
    794c:	4798      	blx	r3
    794e:	4606      	mov	r6, r0
    lv_color_t * disp_buf = vdb->buf_act;
    7950:	6883      	ldr	r3, [r0, #8]
    7952:	9305      	str	r3, [sp, #20]
    draw_area.x1 -= disp_area->x1;
    7954:	8a02      	ldrh	r2, [r0, #16]
    7956:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    795a:	1a9b      	subs	r3, r3, r2
    795c:	b29b      	uxth	r3, r3
    795e:	9306      	str	r3, [sp, #24]
    7960:	f9bd c018 	ldrsh.w	ip, [sp, #24]
    7964:	f8ad c038 	strh.w	ip, [sp, #56]	; 0x38
    draw_area.y1 -= disp_area->y1;
    7968:	8a43      	ldrh	r3, [r0, #18]
    796a:	f8bd b03a 	ldrh.w	fp, [sp, #58]	; 0x3a
    796e:	ebab 0b03 	sub.w	fp, fp, r3
    7972:	fa1f fb8b 	uxth.w	fp, fp
    7976:	fa0f fe8b 	sxth.w	lr, fp
    797a:	f8ad e03a 	strh.w	lr, [sp, #58]	; 0x3a
    draw_area.x2 -= disp_area->x1;
    797e:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
    7982:	1a89      	subs	r1, r1, r2
    7984:	b289      	uxth	r1, r1
    7986:	f8ad 103c 	strh.w	r1, [sp, #60]	; 0x3c
    draw_area.y2 -= disp_area->y1;
    798a:	f8bd 003e 	ldrh.w	r0, [sp, #62]	; 0x3e
    798e:	1ac0      	subs	r0, r0, r3
    7990:	b280      	uxth	r0, r0
    7992:	b202      	sxth	r2, r0
    7994:	9208      	str	r2, [sp, #32]
    7996:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    if(mask && disp->driver.antialiasing == 0)
    799a:	9a04      	ldr	r2, [sp, #16]
    799c:	b1d2      	cbz	r2, 79d4 <_lv_blend_map+0xc4>
    799e:	f898 3008 	ldrb.w	r3, [r8, #8]
    79a2:	f013 0f01 	tst.w	r3, #1
    79a6:	d115      	bne.n	79d4 <_lv_blend_map+0xc4>
    79a8:	f101 0901 	add.w	r9, r1, #1
    79ac:	9b06      	ldr	r3, [sp, #24]
    79ae:	eba9 0903 	sub.w	r9, r9, r3
    79b2:	fa0f f989 	sxth.w	r9, r9
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
    79b6:	f1b9 0f00 	cmp.w	r9, #0
    79ba:	dd0b      	ble.n	79d4 <_lv_blend_map+0xc4>
    79bc:	4613      	mov	r3, r2
    79be:	4491      	add	r9, r2
    79c0:	781a      	ldrb	r2, [r3, #0]
    79c2:	2a80      	cmp	r2, #128	; 0x80
    79c4:	f04f 32ff 	mov.w	r2, #4294967295
    79c8:	bf98      	it	ls
    79ca:	2200      	movls	r2, #0
    79cc:	f803 2b01 	strb.w	r2, [r3], #1
    79d0:	454b      	cmp	r3, r9
    79d2:	d1f5      	bne.n	79c0 <_lv_blend_map+0xb0>
    if(disp->driver.set_px_cb) {
    79d4:	f8d8 3014 	ldr.w	r3, [r8, #20]
    79d8:	2b00      	cmp	r3, #0
    79da:	f000 80a9 	beq.w	7b30 <_lv_blend_map+0x220>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    79de:	4b95      	ldr	r3, [pc, #596]	; (7c34 <_lv_blend_map+0x324>)
    79e0:	4798      	blx	r3
    79e2:	4605      	mov	r5, r0
    79e4:	f9b6 0010 	ldrsh.w	r0, [r6, #16]
    79e8:	8ab3      	ldrh	r3, [r6, #20]
    79ea:	3301      	adds	r3, #1
    79ec:	1a1b      	subs	r3, r3, r0
    79ee:	b21b      	sxth	r3, r3
    79f0:	9306      	str	r3, [sp, #24]
    79f2:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
    79f6:	f9b7 2000 	ldrsh.w	r2, [r7]
    79fa:	f8b7 9004 	ldrh.w	r9, [r7, #4]
    79fe:	f109 0901 	add.w	r9, r9, #1
    7a02:	eba9 0902 	sub.w	r9, r9, r2
    7a06:	fa0f f989 	sxth.w	r9, r9
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
    7a0a:	f9bd e03a 	ldrsh.w	lr, [sp, #58]	; 0x3a
    7a0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    7a12:	f9b6 6012 	ldrsh.w	r6, [r6, #18]
    7a16:	1b9b      	subs	r3, r3, r6
    7a18:	ebae 0303 	sub.w	r3, lr, r3
    map_buf_tmp += (draw_area->x1 - (map_area->x1 - disp_area->x1));
    7a1c:	1a12      	subs	r2, r2, r0
    7a1e:	1a8a      	subs	r2, r1, r2
    map_buf_tmp -= draw_area->x1;
    7a20:	fb09 2303 	mla	r3, r9, r3, r2
    7a24:	ea4f 0b41 	mov.w	fp, r1, lsl #1
    7a28:	ebcb 0b43 	rsb	fp, fp, r3, lsl #1
    7a2c:	9b07      	ldr	r3, [sp, #28]
    7a2e:	445b      	add	r3, fp
    7a30:	469b      	mov	fp, r3
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
    7a32:	2c01      	cmp	r4, #1
    7a34:	d046      	beq.n	7ac4 <_lv_blend_map+0x1b4>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
    7a36:	9b04      	ldr	r3, [sp, #16]
    7a38:	1a5b      	subs	r3, r3, r1
    7a3a:	9307      	str	r3, [sp, #28]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    7a3c:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    7a40:	459e      	cmp	lr, r3
    7a42:	f73f af72 	bgt.w	792a <_lv_blend_map+0x1a>
    7a46:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
            map_buf_tmp += map_w;
    7a4a:	ea4f 0249 	mov.w	r2, r9, lsl #1
    7a4e:	9208      	str	r2, [sp, #32]
    7a50:	3301      	adds	r3, #1
    7a52:	1a59      	subs	r1, r3, r1
            mask_tmp += draw_area_w;
    7a54:	b20b      	sxth	r3, r1
    7a56:	9309      	str	r3, [sp, #36]	; 0x24
    7a58:	46f1      	mov	r9, lr
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    7a5a:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
    7a5e:	4634      	mov	r4, r6
    7a60:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
    7a64:	429e      	cmp	r6, r3
    7a66:	dc20      	bgt.n	7aaa <_lv_blend_map+0x19a>
    7a68:	9b07      	ldr	r3, [sp, #28]
    7a6a:	eb03 0806 	add.w	r8, r3, r6
    7a6e:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
    7a72:	fa0f f789 	sxth.w	r7, r9
    7a76:	9604      	str	r6, [sp, #16]
                                       (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
    7a78:	f818 3b01 	ldrb.w	r3, [r8], #1
    7a7c:	fb03 f30a 	mul.w	r3, r3, sl
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
    7a80:	f3c3 2307 	ubfx	r3, r3, #8, #8
    7a84:	9302      	str	r3, [sp, #8]
    7a86:	9a04      	ldr	r2, [sp, #16]
    7a88:	f832 3b02 	ldrh.w	r3, [r2], #2
    7a8c:	9204      	str	r2, [sp, #16]
    7a8e:	f8ad 3004 	strh.w	r3, [sp, #4]
    7a92:	9700      	str	r7, [sp, #0]
    7a94:	b223      	sxth	r3, r4
    7a96:	9a06      	ldr	r2, [sp, #24]
    7a98:	9905      	ldr	r1, [sp, #20]
    7a9a:	4628      	mov	r0, r5
    7a9c:	696e      	ldr	r6, [r5, #20]
    7a9e:	47b0      	blx	r6
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    7aa0:	3401      	adds	r4, #1
    7aa2:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
    7aa6:	429c      	cmp	r4, r3
    7aa8:	dde6      	ble.n	7a78 <_lv_blend_map+0x168>
    7aaa:	9b07      	ldr	r3, [sp, #28]
    7aac:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7aae:	4413      	add	r3, r2
    7ab0:	9307      	str	r3, [sp, #28]
            map_buf_tmp += map_w;
    7ab2:	9b08      	ldr	r3, [sp, #32]
    7ab4:	449b      	add	fp, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    7ab6:	f109 0901 	add.w	r9, r9, #1
    7aba:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    7abe:	4599      	cmp	r9, r3
    7ac0:	ddcb      	ble.n	7a5a <_lv_blend_map+0x14a>
    7ac2:	e732      	b.n	792a <_lv_blend_map+0x1a>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    7ac4:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    7ac8:	4573      	cmp	r3, lr
    7aca:	f6ff af2e 	blt.w	792a <_lv_blend_map+0x1a>
            map_buf_tmp += map_w;
    7ace:	ea4f 0949 	mov.w	r9, r9, lsl #1
    7ad2:	46f0      	mov	r8, lr
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    7ad4:	f9bd 7038 	ldrsh.w	r7, [sp, #56]	; 0x38
    7ad8:	463c      	mov	r4, r7
    7ada:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
    7ade:	429f      	cmp	r7, r3
    7ae0:	dc1e      	bgt.n	7b20 <_lv_blend_map+0x210>
    7ae2:	eb0b 0747 	add.w	r7, fp, r7, lsl #1
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
    7ae6:	fa0f f688 	sxth.w	r6, r8
    7aea:	9704      	str	r7, [sp, #16]
    7aec:	4633      	mov	r3, r6
    7aee:	4656      	mov	r6, sl
    7af0:	46ca      	mov	sl, r9
    7af2:	4699      	mov	r9, r3
    7af4:	9602      	str	r6, [sp, #8]
    7af6:	9a04      	ldr	r2, [sp, #16]
    7af8:	f832 3b02 	ldrh.w	r3, [r2], #2
    7afc:	9204      	str	r2, [sp, #16]
    7afe:	f8ad 3004 	strh.w	r3, [sp, #4]
    7b02:	f8cd 9000 	str.w	r9, [sp]
    7b06:	b223      	sxth	r3, r4
    7b08:	9a06      	ldr	r2, [sp, #24]
    7b0a:	9905      	ldr	r1, [sp, #20]
    7b0c:	4628      	mov	r0, r5
    7b0e:	696f      	ldr	r7, [r5, #20]
    7b10:	47b8      	blx	r7
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    7b12:	3401      	adds	r4, #1
    7b14:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
    7b18:	429c      	cmp	r4, r3
    7b1a:	ddeb      	ble.n	7af4 <_lv_blend_map+0x1e4>
    7b1c:	46d1      	mov	r9, sl
    7b1e:	46b2      	mov	sl, r6
            map_buf_tmp += map_w;
    7b20:	44cb      	add	fp, r9
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    7b22:	f108 0801 	add.w	r8, r8, #1
    7b26:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    7b2a:	4598      	cmp	r8, r3
    7b2c:	ddd2      	ble.n	7ad4 <_lv_blend_map+0x1c4>
    7b2e:	e6fc      	b.n	792a <_lv_blend_map+0x1a>
    else if(mode == LV_BLEND_MODE_NORMAL) {
    7b30:	2d00      	cmp	r5, #0
    7b32:	f040 8399 	bne.w	8268 <_lv_blend_map+0x958>
    7b36:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
    7b3a:	f8b6 8014 	ldrh.w	r8, [r6, #20]
    7b3e:	f108 0801 	add.w	r8, r8, #1
    7b42:	eba8 0803 	sub.w	r8, r8, r3
    7b46:	fa0f f888 	sxth.w	r8, r8
    7b4a:	3101      	adds	r1, #1
    7b4c:	9a06      	ldr	r2, [sp, #24]
    7b4e:	1a89      	subs	r1, r1, r2
    7b50:	b20a      	sxth	r2, r1
    7b52:	9209      	str	r2, [sp, #36]	; 0x24
    int32_t draw_area_w = lv_area_get_width(draw_area);
    7b54:	4615      	mov	r5, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    7b56:	3001      	adds	r0, #1
    7b58:	eba0 0b0b 	sub.w	fp, r0, fp
    int32_t draw_area_h = lv_area_get_height(draw_area);
    7b5c:	fa0f f28b 	sxth.w	r2, fp
    7b60:	9208      	str	r2, [sp, #32]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    7b62:	f9b7 1000 	ldrsh.w	r1, [r7]
    7b66:	f8b7 9004 	ldrh.w	r9, [r7, #4]
    7b6a:	f109 0901 	add.w	r9, r9, #1
    7b6e:	eba9 0901 	sub.w	r9, r9, r1
    7b72:	fa0f f989 	sxth.w	r9, r9
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
    7b76:	fb0e c208 	mla	r2, lr, r8, ip
    7b7a:	9805      	ldr	r0, [sp, #20]
    7b7c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
    7b80:	9205      	str	r2, [sp, #20]
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
    7b82:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
    7b86:	f9b6 0012 	ldrsh.w	r0, [r6, #18]
    7b8a:	1a12      	subs	r2, r2, r0
    7b8c:	ebae 0e02 	sub.w	lr, lr, r2
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
    7b90:	1acb      	subs	r3, r1, r3
    7b92:	ebac 0303 	sub.w	r3, ip, r3
    7b96:	fb09 330e 	mla	r3, r9, lr, r3
    7b9a:	9a07      	ldr	r2, [sp, #28]
    7b9c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    7ba0:	9306      	str	r3, [sp, #24]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    7ba2:	4b24      	ldr	r3, [pc, #144]	; (7c34 <_lv_blend_map+0x324>)
    7ba4:	4798      	blx	r3
    7ba6:	4606      	mov	r6, r0
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
    7ba8:	2c01      	cmp	r4, #1
    7baa:	d01b      	beq.n	7be4 <_lv_blend_map+0x2d4>
        if(opa > LV_OPA_MAX) {
    7bac:	f1ba 0ffa 	cmp.w	sl, #250	; 0xfa
    7bb0:	f200 80c5 	bhi.w	7d3e <_lv_blend_map+0x42e>
            for(y = 0; y < draw_area_h; y++) {
    7bb4:	9b08      	ldr	r3, [sp, #32]
    7bb6:	2b00      	cmp	r3, #0
    7bb8:	f77f aeb7 	ble.w	792a <_lv_blend_map+0x1a>
                disp_buf_first += disp_w;
    7bbc:	ea4f 0348 	mov.w	r3, r8, lsl #1
    7bc0:	930a      	str	r3, [sp, #40]	; 0x28
                map_buf_first += map_w;
    7bc2:	ea4f 0349 	mov.w	r3, r9, lsl #1
    7bc6:	930b      	str	r3, [sp, #44]	; 0x2c
    7bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7bca:	9a04      	ldr	r2, [sp, #16]
    7bcc:	3a01      	subs	r2, #1
    7bce:	9204      	str	r2, [sp, #16]
    7bd0:	005b      	lsls	r3, r3, #1
    7bd2:	930d      	str	r3, [sp, #52]	; 0x34
    7bd4:	f04f 0b00 	mov.w	fp, #0
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
    7bd8:	f8cd a01c 	str.w	sl, [sp, #28]
    7bdc:	950c      	str	r5, [sp, #48]	; 0x30
    7bde:	f8dd 9018 	ldr.w	r9, [sp, #24]
    7be2:	e336      	b.n	8252 <_lv_blend_map+0x942>
        if(disp->driver.gpu_blend_cb && (lv_area_get_size(draw_area) > GPU_SIZE_LIMIT)) {
    7be4:	6a03      	ldr	r3, [r0, #32]
    7be6:	b35b      	cbz	r3, 7c40 <_lv_blend_map+0x330>
    7be8:	a80e      	add	r0, sp, #56	; 0x38
    7bea:	4b14      	ldr	r3, [pc, #80]	; (7c3c <_lv_blend_map+0x32c>)
    7bec:	4798      	blx	r3
    7bee:	28f0      	cmp	r0, #240	; 0xf0
    7bf0:	d926      	bls.n	7c40 <_lv_blend_map+0x330>
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
    7bf2:	f9bd 503a 	ldrsh.w	r5, [sp, #58]	; 0x3a
    7bf6:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    7bfa:	429d      	cmp	r5, r3
    7bfc:	f73f ae95 	bgt.w	792a <_lv_blend_map+0x1a>
                disp_buf_first += disp_w;
    7c00:	ea4f 0848 	mov.w	r8, r8, lsl #1
                map_buf_first += map_w;
    7c04:	ea4f 0949 	mov.w	r9, r9, lsl #1
    7c08:	f8dd b014 	ldr.w	fp, [sp, #20]
    7c0c:	9f06      	ldr	r7, [sp, #24]
                disp->driver.gpu_blend_cb(&disp->driver, disp_buf_first, map_buf_first, draw_area_w, opa);
    7c0e:	f8cd a000 	str.w	sl, [sp]
    7c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7c14:	463a      	mov	r2, r7
    7c16:	4659      	mov	r1, fp
    7c18:	4630      	mov	r0, r6
    7c1a:	6a34      	ldr	r4, [r6, #32]
    7c1c:	47a0      	blx	r4
                disp_buf_first += disp_w;
    7c1e:	44c3      	add	fp, r8
                map_buf_first += map_w;
    7c20:	444f      	add	r7, r9
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
    7c22:	3501      	adds	r5, #1
    7c24:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    7c28:	429d      	cmp	r5, r3
    7c2a:	ddf0      	ble.n	7c0e <_lv_blend_map+0x2fe>
    7c2c:	e67d      	b.n	792a <_lv_blend_map+0x1a>
    7c2e:	bf00      	nop
    7c30:	00010719 	.word	0x00010719
    7c34:	00005789 	.word	0x00005789
    7c38:	0001025d 	.word	0x0001025d
    7c3c:	000106fd 	.word	0x000106fd
        if(opa > LV_OPA_MAX) {
    7c40:	f1ba 0ffa 	cmp.w	sl, #250	; 0xfa
    7c44:	d810      	bhi.n	7c68 <_lv_blend_map+0x358>
            for(y = 0; y < draw_area_h; y++) {
    7c46:	9b08      	ldr	r3, [sp, #32]
    7c48:	2b00      	cmp	r3, #0
    7c4a:	f77f ae6e 	ble.w	792a <_lv_blend_map+0x1a>
                disp_buf_first += disp_w;
    7c4e:	ea4f 0348 	mov.w	r3, r8, lsl #1
    7c52:	9304      	str	r3, [sp, #16]
                map_buf_first += map_w;
    7c54:	ea4f 0949 	mov.w	r9, r9, lsl #1
    7c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7c5a:	ea4f 0b43 	mov.w	fp, r3, lsl #1
    7c5e:	f04f 0800 	mov.w	r8, #0
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    7c62:	f1ca 0eff 	rsb	lr, sl, #255	; 0xff
    7c66:	e026      	b.n	7cb6 <_lv_blend_map+0x3a6>
            for(y = 0; y < draw_area_h; y++) {
    7c68:	9b08      	ldr	r3, [sp, #32]
    7c6a:	2b00      	cmp	r3, #0
    7c6c:	f77f ae5d 	ble.w	792a <_lv_blend_map+0x1a>
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
    7c70:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7c72:	0056      	lsls	r6, r2, #1
                disp_buf_first += disp_w;
    7c74:	ea4f 0848 	mov.w	r8, r8, lsl #1
                map_buf_first += map_w;
    7c78:	ea4f 0949 	mov.w	r9, r9, lsl #1
    7c7c:	2400      	movs	r4, #0
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
    7c7e:	4d66      	ldr	r5, [pc, #408]	; (7e18 <_lv_blend_map+0x508>)
    7c80:	469b      	mov	fp, r3
    7c82:	9f05      	ldr	r7, [sp, #20]
    7c84:	f8dd a018 	ldr.w	sl, [sp, #24]
    7c88:	4632      	mov	r2, r6
    7c8a:	4651      	mov	r1, sl
    7c8c:	4638      	mov	r0, r7
    7c8e:	47a8      	blx	r5
                disp_buf_first += disp_w;
    7c90:	4447      	add	r7, r8
                map_buf_first += map_w;
    7c92:	44ca      	add	sl, r9
            for(y = 0; y < draw_area_h; y++) {
    7c94:	3401      	adds	r4, #1
    7c96:	45a3      	cmp	fp, r4
    7c98:	d1f6      	bne.n	7c88 <_lv_blend_map+0x378>
    7c9a:	e646      	b.n	792a <_lv_blend_map+0x1a>
                disp_buf_first += disp_w;
    7c9c:	9b05      	ldr	r3, [sp, #20]
    7c9e:	9a04      	ldr	r2, [sp, #16]
    7ca0:	4413      	add	r3, r2
    7ca2:	9305      	str	r3, [sp, #20]
                map_buf_first += map_w;
    7ca4:	9b06      	ldr	r3, [sp, #24]
    7ca6:	444b      	add	r3, r9
    7ca8:	9306      	str	r3, [sp, #24]
            for(y = 0; y < draw_area_h; y++) {
    7caa:	f108 0801 	add.w	r8, r8, #1
    7cae:	9b08      	ldr	r3, [sp, #32]
    7cb0:	4543      	cmp	r3, r8
    7cb2:	f43f ae3a 	beq.w	792a <_lv_blend_map+0x1a>
                for(x = 0; x < draw_area_w; x++) {
    7cb6:	2d00      	cmp	r5, #0
    7cb8:	ddf0      	ble.n	7c9c <_lv_blend_map+0x38c>
    7cba:	9b06      	ldr	r3, [sp, #24]
    7cbc:	461f      	mov	r7, r3
    7cbe:	9c05      	ldr	r4, [sp, #20]
    7cc0:	eb03 0c0b 	add.w	ip, r3, fp
    7cc4:	787b      	ldrb	r3, [r7, #1]
    7cc6:	08db      	lsrs	r3, r3, #3
    7cc8:	7862      	ldrb	r2, [r4, #1]
    7cca:	08d2      	lsrs	r2, r2, #3
    7ccc:	fb0e f202 	mul.w	r2, lr, r2
    7cd0:	fb0a 2303 	mla	r3, sl, r3, r2
    7cd4:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    7cd8:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    7cdc:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    7ce0:	883a      	ldrh	r2, [r7, #0]
    7ce2:	f3c2 1245 	ubfx	r2, r2, #5, #6
    7ce6:	8821      	ldrh	r1, [r4, #0]
    7ce8:	f3c1 1145 	ubfx	r1, r1, #5, #6
    7cec:	fb0e f101 	mul.w	r1, lr, r1
    7cf0:	fb0a 1202 	mla	r2, sl, r2, r1
    7cf4:	eb02 2102 	add.w	r1, r2, r2, lsl #8
    7cf8:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
    7cfc:	f3c2 52c5 	ubfx	r2, r2, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    7d00:	f817 1b02 	ldrb.w	r1, [r7], #2
    7d04:	f001 011f 	and.w	r1, r1, #31
    7d08:	7820      	ldrb	r0, [r4, #0]
    7d0a:	f000 061f 	and.w	r6, r0, #31
    7d0e:	fb0e f606 	mul.w	r6, lr, r6
    7d12:	fb0a 6101 	mla	r1, sl, r1, r6
    7d16:	eb01 2601 	add.w	r6, r1, r1, lsl #8
    7d1a:	eb01 11c6 	add.w	r1, r1, r6, lsl #7
    7d1e:	0dc9      	lsrs	r1, r1, #23
                        disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa);
    7d20:	f361 0004 	bfi	r0, r1, #0, #5
    7d24:	7020      	strb	r0, [r4, #0]
    7d26:	8821      	ldrh	r1, [r4, #0]
    7d28:	f362 114a 	bfi	r1, r2, #5, #6
    7d2c:	8021      	strh	r1, [r4, #0]
    7d2e:	0a09      	lsrs	r1, r1, #8
    7d30:	f363 01c7 	bfi	r1, r3, #3, #5
    7d34:	7061      	strb	r1, [r4, #1]
    7d36:	3402      	adds	r4, #2
                for(x = 0; x < draw_area_w; x++) {
    7d38:	45bc      	cmp	ip, r7
    7d3a:	d1c3      	bne.n	7cc4 <_lv_blend_map+0x3b4>
    7d3c:	e7ae      	b.n	7c9c <_lv_blend_map+0x38c>
            int32_t x_end4 = draw_area_w - 4;
    7d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7d40:	3b04      	subs	r3, #4
    7d42:	930a      	str	r3, [sp, #40]	; 0x28
            for(y = 0; y < draw_area_h; y++) {
    7d44:	9b08      	ldr	r3, [sp, #32]
    7d46:	2b00      	cmp	r3, #0
    7d48:	f77f adef 	ble.w	792a <_lv_blend_map+0x1a>
                disp_buf_first += disp_w;
    7d4c:	ea4f 0348 	mov.w	r3, r8, lsl #1
    7d50:	930c      	str	r3, [sp, #48]	; 0x30
                map_buf_first += map_w;
    7d52:	ea4f 0349 	mov.w	r3, r9, lsl #1
    7d56:	930d      	str	r3, [sp, #52]	; 0x34
    7d58:	2300      	movs	r3, #0
    7d5a:	9307      	str	r3, [sp, #28]
    7d5c:	e35b      	b.n	8416 <_lv_blend_map+0xb06>
                    MAP_NORMAL_MASK_PX(x)
    7d5e:	f8b8 3000 	ldrh.w	r3, [r8]
    7d62:	f8ae 3000 	strh.w	r3, [lr]
    7d66:	4663      	mov	r3, ip
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
    7d68:	3101      	adds	r1, #1
    7d6a:	428d      	cmp	r5, r1
    7d6c:	f000 833d 	beq.w	83ea <_lv_blend_map+0xada>
    7d70:	f108 0802 	add.w	r8, r8, #2
    7d74:	f10e 0e02 	add.w	lr, lr, #2
    7d78:	f01c 0f03 	tst.w	ip, #3
    7d7c:	f000 8323 	beq.w	83c6 <_lv_blend_map+0xab6>
                    MAP_NORMAL_MASK_PX(x)
    7d80:	f81c 4b01 	ldrb.w	r4, [ip], #1
    7d84:	2c00      	cmp	r4, #0
    7d86:	d0ee      	beq.n	7d66 <_lv_blend_map+0x456>
    7d88:	2cff      	cmp	r4, #255	; 0xff
    7d8a:	d0e8      	beq.n	7d5e <_lv_blend_map+0x44e>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    7d8c:	f1c4 06ff 	rsb	r6, r4, #255	; 0xff
    7d90:	f898 3001 	ldrb.w	r3, [r8, #1]
    7d94:	08db      	lsrs	r3, r3, #3
    7d96:	f89e 2001 	ldrb.w	r2, [lr, #1]
    7d9a:	08d2      	lsrs	r2, r2, #3
    7d9c:	fb06 f202 	mul.w	r2, r6, r2
    7da0:	fb04 2303 	mla	r3, r4, r3, r2
    7da4:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    7da8:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    7dac:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    7db0:	f8b8 0000 	ldrh.w	r0, [r8]
    7db4:	f3c0 1045 	ubfx	r0, r0, #5, #6
    7db8:	f8be 2000 	ldrh.w	r2, [lr]
    7dbc:	f3c2 1245 	ubfx	r2, r2, #5, #6
    7dc0:	fb06 f202 	mul.w	r2, r6, r2
    7dc4:	fb04 2000 	mla	r0, r4, r0, r2
    7dc8:	eb00 2200 	add.w	r2, r0, r0, lsl #8
    7dcc:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
    7dd0:	f3c0 50c5 	ubfx	r0, r0, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    7dd4:	f898 2000 	ldrb.w	r2, [r8]
    7dd8:	f002 021f 	and.w	r2, r2, #31
    7ddc:	f89e 7000 	ldrb.w	r7, [lr]
    7de0:	f007 091f 	and.w	r9, r7, #31
    7de4:	fb06 f609 	mul.w	r6, r6, r9
    7de8:	fb04 6202 	mla	r2, r4, r2, r6
    7dec:	eb02 2402 	add.w	r4, r2, r2, lsl #8
    7df0:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
    7df4:	0dd2      	lsrs	r2, r2, #23
    7df6:	463c      	mov	r4, r7
    7df8:	f362 0404 	bfi	r4, r2, #0, #5
    7dfc:	f88e 4000 	strb.w	r4, [lr]
    7e00:	f8be 2000 	ldrh.w	r2, [lr]
    7e04:	f360 124a 	bfi	r2, r0, #5, #6
    7e08:	f8ae 2000 	strh.w	r2, [lr]
    7e0c:	0a12      	lsrs	r2, r2, #8
    7e0e:	f363 02c7 	bfi	r2, r3, #3, #5
    7e12:	f88e 2001 	strb.w	r2, [lr, #1]
    7e16:	e7a6      	b.n	7d66 <_lv_blend_map+0x456>
    7e18:	000117a5 	.word	0x000117a5
                            disp_buf_first[x] = map_buf_first[x];
    7e1c:	f834 5c06 	ldrh.w	r5, [r4, #-6]
    7e20:	f820 5c06 	strh.w	r5, [r0, #-6]
                            disp_buf_first[x + 1] = map_buf_first[x + 1];
    7e24:	f834 5c04 	ldrh.w	r5, [r4, #-4]
    7e28:	f820 5c04 	strh.w	r5, [r0, #-4]
                            disp_buf_first[x + 2] = map_buf_first[x + 2];
    7e2c:	f834 5c02 	ldrh.w	r5, [r4, #-2]
    7e30:	f820 5c02 	strh.w	r5, [r0, #-2]
                            disp_buf_first[x + 3] = map_buf_first[x + 3];
    7e34:	8825      	ldrh	r5, [r4, #0]
    7e36:	8005      	strh	r5, [r0, #0]
                for(; x < x_end4; x += 4) {
    7e38:	3104      	adds	r1, #4
    7e3a:	3304      	adds	r3, #4
    7e3c:	3408      	adds	r4, #8
    7e3e:	3008      	adds	r0, #8
    7e40:	458e      	cmp	lr, r1
    7e42:	f340 8147 	ble.w	80d4 <_lv_blend_map+0x7c4>
    7e46:	461a      	mov	r2, r3
                    if(*mask32) {
    7e48:	f853 5c04 	ldr.w	r5, [r3, #-4]
    7e4c:	2d00      	cmp	r5, #0
    7e4e:	d0f3      	beq.n	7e38 <_lv_blend_map+0x528>
                        if((*mask32) == 0xFFFFFFFF) {
    7e50:	f1b5 3fff 	cmp.w	r5, #4294967295
    7e54:	d0e2      	beq.n	7e1c <_lv_blend_map+0x50c>
                            MAP_NORMAL_MASK_PX(x)
    7e56:	f813 cc04 	ldrb.w	ip, [r3, #-4]
    7e5a:	f1bc 0f00 	cmp.w	ip, #0
    7e5e:	d047      	beq.n	7ef0 <_lv_blend_map+0x5e0>
    7e60:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    7e64:	f000 8124 	beq.w	80b0 <_lv_blend_map+0x7a0>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    7e68:	f1cc 09ff 	rsb	r9, ip, #255	; 0xff
    7e6c:	f814 5c05 	ldrb.w	r5, [r4, #-5]
    7e70:	08ed      	lsrs	r5, r5, #3
    7e72:	f810 6c05 	ldrb.w	r6, [r0, #-5]
    7e76:	08f6      	lsrs	r6, r6, #3
    7e78:	fb09 f606 	mul.w	r6, r9, r6
    7e7c:	fb0c 6505 	mla	r5, ip, r5, r6
    7e80:	eb05 2605 	add.w	r6, r5, r5, lsl #8
    7e84:	eb05 15c6 	add.w	r5, r5, r6, lsl #7
    7e88:	f3c5 55c4 	ubfx	r5, r5, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    7e8c:	f834 6c06 	ldrh.w	r6, [r4, #-6]
    7e90:	f3c6 1645 	ubfx	r6, r6, #5, #6
    7e94:	f830 7c06 	ldrh.w	r7, [r0, #-6]
    7e98:	f3c7 1745 	ubfx	r7, r7, #5, #6
    7e9c:	fb09 f707 	mul.w	r7, r9, r7
    7ea0:	fb0c 7606 	mla	r6, ip, r6, r7
    7ea4:	eb06 2706 	add.w	r7, r6, r6, lsl #8
    7ea8:	eb06 16c7 	add.w	r6, r6, r7, lsl #7
    7eac:	f3c6 56c5 	ubfx	r6, r6, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    7eb0:	f814 7c06 	ldrb.w	r7, [r4, #-6]
    7eb4:	f007 071f 	and.w	r7, r7, #31
    7eb8:	f810 8c06 	ldrb.w	r8, [r0, #-6]
    7ebc:	f008 0b1f 	and.w	fp, r8, #31
    7ec0:	fb09 f90b 	mul.w	r9, r9, fp
    7ec4:	fb0c 9707 	mla	r7, ip, r7, r9
    7ec8:	eb07 2c07 	add.w	ip, r7, r7, lsl #8
    7ecc:	eb07 17cc 	add.w	r7, r7, ip, lsl #7
    7ed0:	0dff      	lsrs	r7, r7, #23
    7ed2:	f367 0804 	bfi	r8, r7, #0, #5
    7ed6:	f800 8c06 	strb.w	r8, [r0, #-6]
    7eda:	f830 7c06 	ldrh.w	r7, [r0, #-6]
    7ede:	f366 174a 	bfi	r7, r6, #5, #6
    7ee2:	f820 7c06 	strh.w	r7, [r0, #-6]
    7ee6:	0a3f      	lsrs	r7, r7, #8
    7ee8:	f365 07c7 	bfi	r7, r5, #3, #5
    7eec:	f800 7c05 	strb.w	r7, [r0, #-5]
                            MAP_NORMAL_MASK_PX(x + 1)
    7ef0:	f812 cc03 	ldrb.w	ip, [r2, #-3]
    7ef4:	f1bc 0f00 	cmp.w	ip, #0
    7ef8:	d047      	beq.n	7f8a <_lv_blend_map+0x67a>
    7efa:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    7efe:	f000 80dc 	beq.w	80ba <_lv_blend_map+0x7aa>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    7f02:	f1cc 09ff 	rsb	r9, ip, #255	; 0xff
    7f06:	f814 5c03 	ldrb.w	r5, [r4, #-3]
    7f0a:	08ed      	lsrs	r5, r5, #3
    7f0c:	f810 6c03 	ldrb.w	r6, [r0, #-3]
    7f10:	08f6      	lsrs	r6, r6, #3
    7f12:	fb09 f606 	mul.w	r6, r9, r6
    7f16:	fb0c 6505 	mla	r5, ip, r5, r6
    7f1a:	eb05 2605 	add.w	r6, r5, r5, lsl #8
    7f1e:	eb05 15c6 	add.w	r5, r5, r6, lsl #7
    7f22:	f3c5 55c4 	ubfx	r5, r5, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    7f26:	f834 6c04 	ldrh.w	r6, [r4, #-4]
    7f2a:	f3c6 1645 	ubfx	r6, r6, #5, #6
    7f2e:	f830 7c04 	ldrh.w	r7, [r0, #-4]
    7f32:	f3c7 1745 	ubfx	r7, r7, #5, #6
    7f36:	fb09 f707 	mul.w	r7, r9, r7
    7f3a:	fb0c 7606 	mla	r6, ip, r6, r7
    7f3e:	eb06 2706 	add.w	r7, r6, r6, lsl #8
    7f42:	eb06 16c7 	add.w	r6, r6, r7, lsl #7
    7f46:	f3c6 56c5 	ubfx	r6, r6, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    7f4a:	f814 7c04 	ldrb.w	r7, [r4, #-4]
    7f4e:	f007 071f 	and.w	r7, r7, #31
    7f52:	f810 8c04 	ldrb.w	r8, [r0, #-4]
    7f56:	f008 0b1f 	and.w	fp, r8, #31
    7f5a:	fb09 f90b 	mul.w	r9, r9, fp
    7f5e:	fb0c 9707 	mla	r7, ip, r7, r9
    7f62:	eb07 2c07 	add.w	ip, r7, r7, lsl #8
    7f66:	eb07 17cc 	add.w	r7, r7, ip, lsl #7
    7f6a:	0dff      	lsrs	r7, r7, #23
    7f6c:	f367 0804 	bfi	r8, r7, #0, #5
    7f70:	f800 8c04 	strb.w	r8, [r0, #-4]
    7f74:	f830 7c04 	ldrh.w	r7, [r0, #-4]
    7f78:	f366 174a 	bfi	r7, r6, #5, #6
    7f7c:	f820 7c04 	strh.w	r7, [r0, #-4]
    7f80:	0a3f      	lsrs	r7, r7, #8
    7f82:	f365 07c7 	bfi	r7, r5, #3, #5
    7f86:	f800 7c03 	strb.w	r7, [r0, #-3]
                            MAP_NORMAL_MASK_PX(x + 2)
    7f8a:	f812 cc02 	ldrb.w	ip, [r2, #-2]
    7f8e:	f1bc 0f00 	cmp.w	ip, #0
    7f92:	d047      	beq.n	8024 <_lv_blend_map+0x714>
    7f94:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    7f98:	f000 8094 	beq.w	80c4 <_lv_blend_map+0x7b4>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    7f9c:	f1cc 09ff 	rsb	r9, ip, #255	; 0xff
    7fa0:	f814 5c01 	ldrb.w	r5, [r4, #-1]
    7fa4:	08ed      	lsrs	r5, r5, #3
    7fa6:	f810 6c01 	ldrb.w	r6, [r0, #-1]
    7faa:	08f6      	lsrs	r6, r6, #3
    7fac:	fb09 f606 	mul.w	r6, r9, r6
    7fb0:	fb0c 6505 	mla	r5, ip, r5, r6
    7fb4:	eb05 2605 	add.w	r6, r5, r5, lsl #8
    7fb8:	eb05 15c6 	add.w	r5, r5, r6, lsl #7
    7fbc:	f3c5 55c4 	ubfx	r5, r5, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    7fc0:	f834 6c02 	ldrh.w	r6, [r4, #-2]
    7fc4:	f3c6 1645 	ubfx	r6, r6, #5, #6
    7fc8:	f830 7c02 	ldrh.w	r7, [r0, #-2]
    7fcc:	f3c7 1745 	ubfx	r7, r7, #5, #6
    7fd0:	fb09 f707 	mul.w	r7, r9, r7
    7fd4:	fb0c 7606 	mla	r6, ip, r6, r7
    7fd8:	eb06 2706 	add.w	r7, r6, r6, lsl #8
    7fdc:	eb06 16c7 	add.w	r6, r6, r7, lsl #7
    7fe0:	f3c6 56c5 	ubfx	r6, r6, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    7fe4:	f814 7c02 	ldrb.w	r7, [r4, #-2]
    7fe8:	f007 071f 	and.w	r7, r7, #31
    7fec:	f810 8c02 	ldrb.w	r8, [r0, #-2]
    7ff0:	f008 0b1f 	and.w	fp, r8, #31
    7ff4:	fb09 f90b 	mul.w	r9, r9, fp
    7ff8:	fb0c 9707 	mla	r7, ip, r7, r9
    7ffc:	eb07 2c07 	add.w	ip, r7, r7, lsl #8
    8000:	eb07 17cc 	add.w	r7, r7, ip, lsl #7
    8004:	0dff      	lsrs	r7, r7, #23
    8006:	f367 0804 	bfi	r8, r7, #0, #5
    800a:	f800 8c02 	strb.w	r8, [r0, #-2]
    800e:	f830 7c02 	ldrh.w	r7, [r0, #-2]
    8012:	f366 174a 	bfi	r7, r6, #5, #6
    8016:	f820 7c02 	strh.w	r7, [r0, #-2]
    801a:	0a3f      	lsrs	r7, r7, #8
    801c:	f365 07c7 	bfi	r7, r5, #3, #5
    8020:	f800 7c01 	strb.w	r7, [r0, #-1]
                            MAP_NORMAL_MASK_PX(x + 3)
    8024:	f812 8c01 	ldrb.w	r8, [r2, #-1]
    8028:	f1b8 0f00 	cmp.w	r8, #0
    802c:	f43f af04 	beq.w	7e38 <_lv_blend_map+0x528>
    8030:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    8034:	d04b      	beq.n	80ce <_lv_blend_map+0x7be>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    8036:	f1c8 09ff 	rsb	r9, r8, #255	; 0xff
    803a:	7865      	ldrb	r5, [r4, #1]
    803c:	08ed      	lsrs	r5, r5, #3
    803e:	7846      	ldrb	r6, [r0, #1]
    8040:	08f6      	lsrs	r6, r6, #3
    8042:	fb09 f606 	mul.w	r6, r9, r6
    8046:	fb08 6505 	mla	r5, r8, r5, r6
    804a:	eb05 2605 	add.w	r6, r5, r5, lsl #8
    804e:	eb05 15c6 	add.w	r5, r5, r6, lsl #7
    8052:	f3c5 55c4 	ubfx	r5, r5, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    8056:	8826      	ldrh	r6, [r4, #0]
    8058:	f3c6 1645 	ubfx	r6, r6, #5, #6
    805c:	8807      	ldrh	r7, [r0, #0]
    805e:	f3c7 1745 	ubfx	r7, r7, #5, #6
    8062:	fb09 f707 	mul.w	r7, r9, r7
    8066:	fb08 7606 	mla	r6, r8, r6, r7
    806a:	eb06 2706 	add.w	r7, r6, r6, lsl #8
    806e:	eb06 16c7 	add.w	r6, r6, r7, lsl #7
    8072:	f3c6 56c5 	ubfx	r6, r6, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    8076:	7827      	ldrb	r7, [r4, #0]
    8078:	f007 071f 	and.w	r7, r7, #31
    807c:	f890 c000 	ldrb.w	ip, [r0]
    8080:	f00c 0a1f 	and.w	sl, ip, #31
    8084:	fb09 f90a 	mul.w	r9, r9, sl
    8088:	fb08 9707 	mla	r7, r8, r7, r9
    808c:	eb07 2807 	add.w	r8, r7, r7, lsl #8
    8090:	eb07 17c8 	add.w	r7, r7, r8, lsl #7
    8094:	0dff      	lsrs	r7, r7, #23
    8096:	f367 0c04 	bfi	ip, r7, #0, #5
    809a:	f880 c000 	strb.w	ip, [r0]
    809e:	8807      	ldrh	r7, [r0, #0]
    80a0:	f366 174a 	bfi	r7, r6, #5, #6
    80a4:	8007      	strh	r7, [r0, #0]
    80a6:	0a3f      	lsrs	r7, r7, #8
    80a8:	f365 07c7 	bfi	r7, r5, #3, #5
    80ac:	7047      	strb	r7, [r0, #1]
    80ae:	e6c3      	b.n	7e38 <_lv_blend_map+0x528>
                            MAP_NORMAL_MASK_PX(x)
    80b0:	f834 5c06 	ldrh.w	r5, [r4, #-6]
    80b4:	f820 5c06 	strh.w	r5, [r0, #-6]
    80b8:	e71a      	b.n	7ef0 <_lv_blend_map+0x5e0>
                            MAP_NORMAL_MASK_PX(x + 1)
    80ba:	f834 5c04 	ldrh.w	r5, [r4, #-4]
    80be:	f820 5c04 	strh.w	r5, [r0, #-4]
    80c2:	e762      	b.n	7f8a <_lv_blend_map+0x67a>
                            MAP_NORMAL_MASK_PX(x + 2)
    80c4:	f834 5c02 	ldrh.w	r5, [r4, #-2]
    80c8:	f820 5c02 	strh.w	r5, [r0, #-2]
    80cc:	e7aa      	b.n	8024 <_lv_blend_map+0x714>
                            MAP_NORMAL_MASK_PX(x + 3)
    80ce:	8825      	ldrh	r5, [r4, #0]
    80d0:	8005      	strh	r5, [r0, #0]
    80d2:	e6b1      	b.n	7e38 <_lv_blend_map+0x528>
    80d4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
                for(; x < draw_area_w ; x++) {
    80d6:	428d      	cmp	r5, r1
    80d8:	f340 818a 	ble.w	83f0 <_lv_blend_map+0xae0>
    80dc:	1e56      	subs	r6, r2, #1
    80de:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    80e2:	9b06      	ldr	r3, [sp, #24]
    80e4:	eb03 080c 	add.w	r8, r3, ip
    80e8:	9b05      	ldr	r3, [sp, #20]
    80ea:	449c      	add	ip, r3
    80ec:	e00b      	b.n	8106 <_lv_blend_map+0x7f6>
                    MAP_NORMAL_MASK_PX(x)
    80ee:	f8b8 3000 	ldrh.w	r3, [r8]
    80f2:	f8ac 3000 	strh.w	r3, [ip]
                for(; x < draw_area_w ; x++) {
    80f6:	3101      	adds	r1, #1
    80f8:	f108 0802 	add.w	r8, r8, #2
    80fc:	f10c 0c02 	add.w	ip, ip, #2
    8100:	428d      	cmp	r5, r1
    8102:	f340 8175 	ble.w	83f0 <_lv_blend_map+0xae0>
                    MAP_NORMAL_MASK_PX(x)
    8106:	f816 4f01 	ldrb.w	r4, [r6, #1]!
    810a:	2c00      	cmp	r4, #0
    810c:	d0f3      	beq.n	80f6 <_lv_blend_map+0x7e6>
    810e:	2cff      	cmp	r4, #255	; 0xff
    8110:	d0ed      	beq.n	80ee <_lv_blend_map+0x7de>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    8112:	f1c4 07ff 	rsb	r7, r4, #255	; 0xff
    8116:	f898 3001 	ldrb.w	r3, [r8, #1]
    811a:	08db      	lsrs	r3, r3, #3
    811c:	f89c 2001 	ldrb.w	r2, [ip, #1]
    8120:	08d2      	lsrs	r2, r2, #3
    8122:	fb07 f202 	mul.w	r2, r7, r2
    8126:	fb04 2303 	mla	r3, r4, r3, r2
    812a:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    812e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    8132:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    8136:	f8b8 0000 	ldrh.w	r0, [r8]
    813a:	f3c0 1045 	ubfx	r0, r0, #5, #6
    813e:	f8bc 2000 	ldrh.w	r2, [ip]
    8142:	f3c2 1245 	ubfx	r2, r2, #5, #6
    8146:	fb07 f202 	mul.w	r2, r7, r2
    814a:	fb04 2000 	mla	r0, r4, r0, r2
    814e:	eb00 2200 	add.w	r2, r0, r0, lsl #8
    8152:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
    8156:	f3c0 50c5 	ubfx	r0, r0, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    815a:	f898 2000 	ldrb.w	r2, [r8]
    815e:	f002 021f 	and.w	r2, r2, #31
    8162:	f89c e000 	ldrb.w	lr, [ip]
    8166:	f00e 091f 	and.w	r9, lr, #31
    816a:	fb07 f709 	mul.w	r7, r7, r9
    816e:	fb04 7202 	mla	r2, r4, r2, r7
    8172:	eb02 2402 	add.w	r4, r2, r2, lsl #8
    8176:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
    817a:	0dd2      	lsrs	r2, r2, #23
    817c:	4674      	mov	r4, lr
    817e:	f362 0404 	bfi	r4, r2, #0, #5
    8182:	f88c 4000 	strb.w	r4, [ip]
    8186:	f8bc 2000 	ldrh.w	r2, [ip]
    818a:	f360 124a 	bfi	r2, r0, #5, #6
    818e:	f8ac 2000 	strh.w	r2, [ip]
    8192:	0a12      	lsrs	r2, r2, #8
    8194:	f363 02c7 	bfi	r2, r3, #3, #5
    8198:	f88c 2001 	strb.w	r2, [ip, #1]
    819c:	e7ab      	b.n	80f6 <_lv_blend_map+0x7e6>
    819e:	3702      	adds	r7, #2
    81a0:	3602      	adds	r6, #2
                for(x = 0; x < draw_area_w; x++) {
    81a2:	4547      	cmp	r7, r8
    81a4:	d045      	beq.n	8232 <_lv_blend_map+0x922>
                    if(mask[x]) {
    81a6:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
    81aa:	2900      	cmp	r1, #0
    81ac:	d0f7      	beq.n	819e <_lv_blend_map+0x88e>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
    81ae:	29f9      	cmp	r1, #249	; 0xf9
    81b0:	bf9a      	itte	ls
    81b2:	fb01 f10a 	mulls.w	r1, r1, sl
    81b6:	f3c1 2407 	ubfxls	r4, r1, #8, #8
    81ba:	9c07      	ldrhi	r4, [sp, #28]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    81bc:	f1c4 05ff 	rsb	r5, r4, #255	; 0xff
    81c0:	787b      	ldrb	r3, [r7, #1]
    81c2:	08db      	lsrs	r3, r3, #3
    81c4:	7872      	ldrb	r2, [r6, #1]
    81c6:	08d2      	lsrs	r2, r2, #3
    81c8:	fb05 f202 	mul.w	r2, r5, r2
    81cc:	fb04 2303 	mla	r3, r4, r3, r2
    81d0:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    81d4:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    81d8:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    81dc:	883a      	ldrh	r2, [r7, #0]
    81de:	f3c2 1245 	ubfx	r2, r2, #5, #6
    81e2:	8831      	ldrh	r1, [r6, #0]
    81e4:	f3c1 1145 	ubfx	r1, r1, #5, #6
    81e8:	fb05 f101 	mul.w	r1, r5, r1
    81ec:	fb04 1202 	mla	r2, r4, r2, r1
    81f0:	eb02 2102 	add.w	r1, r2, r2, lsl #8
    81f4:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
    81f8:	f3c2 52c5 	ubfx	r2, r2, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    81fc:	7839      	ldrb	r1, [r7, #0]
    81fe:	f001 011f 	and.w	r1, r1, #31
    8202:	7830      	ldrb	r0, [r6, #0]
    8204:	f000 0e1f 	and.w	lr, r0, #31
    8208:	fb05 f50e 	mul.w	r5, r5, lr
    820c:	fb04 5101 	mla	r1, r4, r1, r5
    8210:	eb01 2401 	add.w	r4, r1, r1, lsl #8
    8214:	eb01 11c4 	add.w	r1, r1, r4, lsl #7
    8218:	0dc9      	lsrs	r1, r1, #23
                            disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa_tmp);
    821a:	f361 0004 	bfi	r0, r1, #0, #5
    821e:	7030      	strb	r0, [r6, #0]
    8220:	8831      	ldrh	r1, [r6, #0]
    8222:	f362 114a 	bfi	r1, r2, #5, #6
    8226:	8031      	strh	r1, [r6, #0]
    8228:	0a09      	lsrs	r1, r1, #8
    822a:	f363 01c7 	bfi	r1, r3, #3, #5
    822e:	7071      	strb	r1, [r6, #1]
    8230:	e7b5      	b.n	819e <_lv_blend_map+0x88e>
                disp_buf_first += disp_w;
    8232:	9b05      	ldr	r3, [sp, #20]
    8234:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8236:	4413      	add	r3, r2
    8238:	9305      	str	r3, [sp, #20]
                map_buf_first += map_w;
    823a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    823c:	4499      	add	r9, r3
            for(y = 0; y < draw_area_h; y++) {
    823e:	f10b 0b01 	add.w	fp, fp, #1
    8242:	9b04      	ldr	r3, [sp, #16]
    8244:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8246:	4413      	add	r3, r2
    8248:	9304      	str	r3, [sp, #16]
    824a:	9b08      	ldr	r3, [sp, #32]
    824c:	455b      	cmp	r3, fp
    824e:	f43f ab6c 	beq.w	792a <_lv_blend_map+0x1a>
                for(x = 0; x < draw_area_w; x++) {
    8252:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8254:	2b00      	cmp	r3, #0
    8256:	ddec      	ble.n	8232 <_lv_blend_map+0x922>
    8258:	464f      	mov	r7, r9
    825a:	9e05      	ldr	r6, [sp, #20]
    825c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    825e:	eb09 0803 	add.w	r8, r9, r3
    8262:	f8dd c010 	ldr.w	ip, [sp, #16]
    8266:	e79e      	b.n	81a6 <_lv_blend_map+0x896>
    switch(mode) {
    8268:	2d01      	cmp	r5, #1
    826a:	d03f      	beq.n	82ec <_lv_blend_map+0x9dc>
    826c:	2d02      	cmp	r5, #2
    826e:	f47f ab5c 	bne.w	792a <_lv_blend_map+0x1a>
            blend_fp = color_blend_true_color_subtractive;
    8272:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8430 <_lv_blend_map+0xb20>
    8276:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
    827a:	9309      	str	r3, [sp, #36]	; 0x24
    827c:	8ab0      	ldrh	r0, [r6, #20]
    827e:	3001      	adds	r0, #1
    8280:	1ac0      	subs	r0, r0, r3
    8282:	b200      	sxth	r0, r0
    8284:	f9b7 2000 	ldrsh.w	r2, [r7]
    8288:	88bb      	ldrh	r3, [r7, #4]
    828a:	3301      	adds	r3, #1
    828c:	1a9b      	subs	r3, r3, r2
    828e:	b21d      	sxth	r5, r3
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
    8290:	46f1      	mov	r9, lr
    8292:	fb0e fb00 	mul.w	fp, lr, r0
    8296:	9b05      	ldr	r3, [sp, #20]
    8298:	eb03 0b4b 	add.w	fp, r3, fp, lsl #1
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
    829c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    82a0:	f9b6 6012 	ldrsh.w	r6, [r6, #18]
    82a4:	1b9f      	subs	r7, r3, r6
    82a6:	ebae 0707 	sub.w	r7, lr, r7
    82aa:	fb05 f707 	mul.w	r7, r5, r7
    82ae:	9b07      	ldr	r3, [sp, #28]
    82b0:	eb03 0747 	add.w	r7, r3, r7, lsl #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
    82b4:	2c01      	cmp	r4, #1
    82b6:	d01c      	beq.n	82f2 <_lv_blend_map+0x9e2>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
    82b8:	9b04      	ldr	r3, [sp, #16]
    82ba:	eba3 030c 	sub.w	r3, r3, ip
    82be:	461a      	mov	r2, r3
        map_buf_tmp -= draw_area->x1;
    82c0:	eba7 034c 	sub.w	r3, r7, ip, lsl #1
    82c4:	9304      	str	r3, [sp, #16]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    82c6:	9b08      	ldr	r3, [sp, #32]
    82c8:	459e      	cmp	lr, r3
    82ca:	f73f ab2e 	bgt.w	792a <_lv_blend_map+0x1a>
            disp_buf_tmp += disp_w;
    82ce:	0043      	lsls	r3, r0, #1
    82d0:	9307      	str	r3, [sp, #28]
            map_buf_tmp += map_w;
    82d2:	006b      	lsls	r3, r5, #1
    82d4:	9308      	str	r3, [sp, #32]
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
    82d6:	f8cd a014 	str.w	sl, [sp, #20]
    82da:	1c4b      	adds	r3, r1, #1
    82dc:	9906      	ldr	r1, [sp, #24]
    82de:	1a5b      	subs	r3, r3, r1
            mask_tmp += draw_area_w;
    82e0:	b21b      	sxth	r3, r3
    82e2:	9309      	str	r3, [sp, #36]	; 0x24
    82e4:	f8cd a018 	str.w	sl, [sp, #24]
    82e8:	4692      	mov	sl, r2
    82ea:	e05b      	b.n	83a4 <_lv_blend_map+0xa94>
            blend_fp = color_blend_true_color_additive;
    82ec:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8434 <_lv_blend_map+0xb24>
    82f0:	e7c1      	b.n	8276 <_lv_blend_map+0x966>
        map_buf_tmp -= draw_area->x1;
    82f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    82f4:	1a9b      	subs	r3, r3, r2
    82f6:	eb07 0743 	add.w	r7, r7, r3, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    82fa:	9b08      	ldr	r3, [sp, #32]
    82fc:	459e      	cmp	lr, r3
    82fe:	f73f ab14 	bgt.w	792a <_lv_blend_map+0x1a>
            disp_buf_tmp += disp_w;
    8302:	0043      	lsls	r3, r0, #1
    8304:	9304      	str	r3, [sp, #16]
            map_buf_tmp += map_w;
    8306:	006b      	lsls	r3, r5, #1
    8308:	9305      	str	r3, [sp, #20]
    830a:	463b      	mov	r3, r7
    830c:	4647      	mov	r7, r8
    830e:	4698      	mov	r8, r3
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    8310:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
    8314:	461c      	mov	r4, r3
    8316:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
    831a:	4293      	cmp	r3, r2
    831c:	dc10      	bgt.n	8340 <_lv_blend_map+0xa30>
    831e:	005b      	lsls	r3, r3, #1
    8320:	eb0b 0503 	add.w	r5, fp, r3
    8324:	eb08 0603 	add.w	r6, r8, r3
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa);
    8328:	4652      	mov	r2, sl
    832a:	8829      	ldrh	r1, [r5, #0]
    832c:	f836 0b02 	ldrh.w	r0, [r6], #2
    8330:	47b8      	blx	r7
    8332:	f825 0b02 	strh.w	r0, [r5], #2
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    8336:	3401      	adds	r4, #1
    8338:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
    833c:	429c      	cmp	r4, r3
    833e:	ddf3      	ble.n	8328 <_lv_blend_map+0xa18>
            disp_buf_tmp += disp_w;
    8340:	9b04      	ldr	r3, [sp, #16]
    8342:	449b      	add	fp, r3
            map_buf_tmp += map_w;
    8344:	9b05      	ldr	r3, [sp, #20]
    8346:	4498      	add	r8, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    8348:	f109 0901 	add.w	r9, r9, #1
    834c:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    8350:	4599      	cmp	r9, r3
    8352:	dddd      	ble.n	8310 <_lv_blend_map+0xa00>
    8354:	f7ff bae9 	b.w	792a <_lv_blend_map+0x1a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    8358:	3501      	adds	r5, #1
    835a:	3602      	adds	r6, #2
    835c:	3402      	adds	r4, #2
    835e:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
    8362:	429d      	cmp	r5, r3
    8364:	dc0f      	bgt.n	8386 <_lv_blend_map+0xa76>
                if(mask_tmp[x] == 0) continue;
    8366:	f817 3b01 	ldrb.w	r3, [r7], #1
    836a:	2b00      	cmp	r3, #0
    836c:	d0f4      	beq.n	8358 <_lv_blend_map+0xa48>
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
    836e:	2bf9      	cmp	r3, #249	; 0xf9
    8370:	bf9d      	ittte	ls
    8372:	9a06      	ldrls	r2, [sp, #24]
    8374:	4353      	mulls	r3, r2
    8376:	f3c3 2207 	ubfxls	r2, r3, #8, #8
    837a:	9a05      	ldrhi	r2, [sp, #20]
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa_tmp);
    837c:	8831      	ldrh	r1, [r6, #0]
    837e:	8820      	ldrh	r0, [r4, #0]
    8380:	47c0      	blx	r8
    8382:	8030      	strh	r0, [r6, #0]
    8384:	e7e8      	b.n	8358 <_lv_blend_map+0xa48>
            disp_buf_tmp += disp_w;
    8386:	9b07      	ldr	r3, [sp, #28]
    8388:	449b      	add	fp, r3
    838a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    838c:	449a      	add	sl, r3
            map_buf_tmp += map_w;
    838e:	9b04      	ldr	r3, [sp, #16]
    8390:	9a08      	ldr	r2, [sp, #32]
    8392:	4413      	add	r3, r2
    8394:	9304      	str	r3, [sp, #16]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    8396:	f109 0901 	add.w	r9, r9, #1
    839a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    839e:	4599      	cmp	r9, r3
    83a0:	f73f aac3 	bgt.w	792a <_lv_blend_map+0x1a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    83a4:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
    83a8:	461d      	mov	r5, r3
    83aa:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
    83ae:	4293      	cmp	r3, r2
    83b0:	dce9      	bgt.n	8386 <_lv_blend_map+0xa76>
    83b2:	eb0a 0703 	add.w	r7, sl, r3
    83b6:	005b      	lsls	r3, r3, #1
    83b8:	eb0b 0603 	add.w	r6, fp, r3
    83bc:	9a04      	ldr	r2, [sp, #16]
    83be:	18d4      	adds	r4, r2, r3
    83c0:	e7d1      	b.n	8366 <_lv_blend_map+0xa56>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
    83c2:	9b04      	ldr	r3, [sp, #16]
    83c4:	2100      	movs	r1, #0
                for(; x < x_end4; x += 4) {
    83c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    83c8:	428a      	cmp	r2, r1
    83ca:	dd0a      	ble.n	83e2 <_lv_blend_map+0xad2>
    83cc:	3304      	adds	r3, #4
    83ce:	1cc8      	adds	r0, r1, #3
    83d0:	0040      	lsls	r0, r0, #1
    83d2:	9a06      	ldr	r2, [sp, #24]
    83d4:	1814      	adds	r4, r2, r0
    83d6:	9a05      	ldr	r2, [sp, #20]
    83d8:	4410      	add	r0, r2
    83da:	950b      	str	r5, [sp, #44]	; 0x2c
    83dc:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
    83e0:	e531      	b.n	7e46 <_lv_blend_map+0x536>
    83e2:	461a      	mov	r2, r3
    83e4:	e67a      	b.n	80dc <_lv_blend_map+0x7cc>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
    83e6:	9b04      	ldr	r3, [sp, #16]
    83e8:	2100      	movs	r1, #0
                for(; x < x_end4; x += 4) {
    83ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    83ec:	4291      	cmp	r1, r2
    83ee:	dbed      	blt.n	83cc <_lv_blend_map+0xabc>
                disp_buf_first += disp_w;
    83f0:	9b05      	ldr	r3, [sp, #20]
    83f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    83f4:	4413      	add	r3, r2
    83f6:	9305      	str	r3, [sp, #20]
    83f8:	9b04      	ldr	r3, [sp, #16]
    83fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
    83fc:	4413      	add	r3, r2
    83fe:	9304      	str	r3, [sp, #16]
                map_buf_first += map_w;
    8400:	9b06      	ldr	r3, [sp, #24]
    8402:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8404:	4413      	add	r3, r2
    8406:	9306      	str	r3, [sp, #24]
            for(y = 0; y < draw_area_h; y++) {
    8408:	9b07      	ldr	r3, [sp, #28]
    840a:	3301      	adds	r3, #1
    840c:	9307      	str	r3, [sp, #28]
    840e:	9a08      	ldr	r2, [sp, #32]
    8410:	429a      	cmp	r2, r3
    8412:	f43f aa8a 	beq.w	792a <_lv_blend_map+0x1a>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
    8416:	2d00      	cmp	r5, #0
    8418:	dde5      	ble.n	83e6 <_lv_blend_map+0xad6>
    841a:	9a04      	ldr	r2, [sp, #16]
    841c:	f012 0f03 	tst.w	r2, #3
    8420:	d0cf      	beq.n	83c2 <_lv_blend_map+0xab2>
    8422:	f8dd 8018 	ldr.w	r8, [sp, #24]
    8426:	f8dd e014 	ldr.w	lr, [sp, #20]
    842a:	4694      	mov	ip, r2
    842c:	2100      	movs	r1, #0
    842e:	e4a7      	b.n	7d80 <_lv_blend_map+0x470>
    8430:	00006d53 	.word	0x00006d53
    8434:	00006c9d 	.word	0x00006c9d

00008438 <lv_draw_map>:
 * @param antialias anti-alias transformations (rotate, zoom) or not
 */
LV_ATTRIBUTE_FAST_MEM static void lv_draw_map(const lv_area_t * map_area, const lv_area_t * clip_area,
                                              const uint8_t * map_p,
                                              lv_draw_img_dsc_t * draw_dsc, bool chroma_key, bool alpha_byte)
{
    8438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    843c:	b0bd      	sub	sp, #244	; 0xf4
    843e:	901b      	str	r0, [sp, #108]	; 0x6c
    8440:	9123      	str	r1, [sp, #140]	; 0x8c
    8442:	4617      	mov	r7, r2
    8444:	9308      	str	r3, [sp, #32]
    8446:	f89d 3118 	ldrb.w	r3, [sp, #280]	; 0x118
    844a:	930a      	str	r3, [sp, #40]	; 0x28
    844c:	f89d 311c 	ldrb.w	r3, [sp, #284]	; 0x11c
    8450:	9306      	str	r3, [sp, #24]
    8452:	1e4b      	subs	r3, r1, #1
    8454:	1dc8      	adds	r0, r1, #7
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    8456:	aa3a      	add	r2, sp, #232	; 0xe8
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
    8458:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    845c:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    8460:	4283      	cmp	r3, r0
    8462:	d1f9      	bne.n	8458 <lv_draw_map+0x20>
    /* Use the clip area as draw area*/
    lv_area_t draw_area;
    lv_area_copy(&draw_area, clip_area);

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    8464:	4ba3      	ldr	r3, [pc, #652]	; (86f4 <lv_draw_map+0x2bc>)
    8466:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    8468:	4ba3      	ldr	r3, [pc, #652]	; (86f8 <lv_draw_map+0x2c0>)
    846a:	4798      	blx	r3
    846c:	9018      	str	r0, [sp, #96]	; 0x60
    const lv_area_t * disp_area = &vdb->area;

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
    846e:	8a01      	ldrh	r1, [r0, #16]
    8470:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	; 0xe8
    8474:	1a5b      	subs	r3, r3, r1
    8476:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
    draw_area.y1 -= disp_area->y1;
    847a:	8a42      	ldrh	r2, [r0, #18]
    847c:	f8bd 30ea 	ldrh.w	r3, [sp, #234]	; 0xea
    8480:	1a9b      	subs	r3, r3, r2
    8482:	f8ad 30ea 	strh.w	r3, [sp, #234]	; 0xea
    draw_area.x2 -= disp_area->x1;
    8486:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
    848a:	1a5b      	subs	r3, r3, r1
    848c:	f8ad 30ec 	strh.w	r3, [sp, #236]	; 0xec
    draw_area.y2 -= disp_area->y1;
    8490:	f8bd 30ee 	ldrh.w	r3, [sp, #238]	; 0xee
    8494:	1a9b      	subs	r3, r3, r2
    8496:	f8ad 30ee 	strh.w	r3, [sp, #238]	; 0xee

    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
    849a:	4b98      	ldr	r3, [pc, #608]	; (86fc <lv_draw_map+0x2c4>)
    849c:	4798      	blx	r3

    /*The simplest case just copy the pixels into the VDB*/
    if(other_mask_cnt == 0 && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE &&
    849e:	9019      	str	r0, [sp, #100]	; 0x64
    84a0:	b930      	cbnz	r0, 84b0 <lv_draw_map+0x78>
    84a2:	9a08      	ldr	r2, [sp, #32]
    84a4:	8853      	ldrh	r3, [r2, #2]
    84a6:	b91b      	cbnz	r3, 84b0 <lv_draw_map+0x78>
    84a8:	8913      	ldrh	r3, [r2, #8]
    84aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    84ae:	d071      	beq.n	8594 <lv_draw_map+0x15c>
                      draw_dsc->blend_mode);
    }
    /*In the other cases every pixel need to be checked one-by-one*/
    else {
        /*The pixel size in byte is different if an alpha byte is added too*/
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
    84b0:	9b06      	ldr	r3, [sp, #24]
    84b2:	2b00      	cmp	r3, #0
    84b4:	bf14      	ite	ne
    84b6:	f04f 0b03 	movne.w	fp, #3
    84ba:	f04f 0b02 	moveq.w	fp, #2
    84be:	991b      	ldr	r1, [sp, #108]	; 0x6c
    84c0:	460b      	mov	r3, r1
    84c2:	f9b1 2000 	ldrsh.w	r2, [r1]
    84c6:	888d      	ldrh	r5, [r1, #4]
    84c8:	3501      	adds	r5, #1
    84ca:	1aad      	subs	r5, r5, r2
    84cc:	b22d      	sxth	r5, r5

        /*Go to the first displayed pixel of the map*/
        int32_t map_w = lv_area_get_width(map_area);
        const uint8_t * map_buf_tmp = map_p;
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
    84ce:	f9bd 00ea 	ldrsh.w	r0, [sp, #234]	; 0xea
    84d2:	9e18      	ldr	r6, [sp, #96]	; 0x60
    84d4:	f9b6 1012 	ldrsh.w	r1, [r6, #18]
    84d8:	46d8      	mov	r8, fp
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
    84da:	f9bd 40e8 	ldrsh.w	r4, [sp, #232]	; 0xe8
    84de:	f9b6 6010 	ldrsh.w	r6, [r6, #16]
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
    84e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    84e6:	1a5b      	subs	r3, r3, r1
    84e8:	1ac3      	subs	r3, r0, r3
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
    84ea:	1b92      	subs	r2, r2, r6
    84ec:	1aa2      	subs	r2, r4, r2
    84ee:	fb05 2303 	mla	r3, r5, r3, r2
    84f2:	fb03 730b 	mla	r3, r3, fp, r7
    84f6:	9314      	str	r3, [sp, #80]	; 0x50
        uint32_t px_i = 0;

        const uint8_t * map_px;

        lv_area_t blend_area;
        blend_area.x1 = draw_area.x1 + disp_area->x1;
    84f8:	b2a4      	uxth	r4, r4
    84fa:	19a2      	adds	r2, r4, r6
    84fc:	b292      	uxth	r2, r2
    84fe:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
    8502:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
    8506:	3301      	adds	r3, #1
    8508:	1b1b      	subs	r3, r3, r4
    850a:	b29b      	uxth	r3, r3
    850c:	b21c      	sxth	r4, r3
    850e:	9416      	str	r4, [sp, #88]	; 0x58
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
    8510:	3b01      	subs	r3, #1
    8512:	4413      	add	r3, r2
    8514:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
        blend_area.y1 = disp_area->y1 + draw_area.y1;
    8518:	b280      	uxth	r0, r0
    851a:	1843      	adds	r3, r0, r1
    851c:	b21b      	sxth	r3, r3
    851e:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        blend_area.y2 = blend_area.y1;
    8522:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    8526:	f8bd 60ee 	ldrh.w	r6, [sp, #238]	; 0xee
    852a:	3601      	adds	r6, #1
    852c:	1a36      	subs	r6, r6, r0
    852e:	b236      	sxth	r6, r6

        lv_coord_t draw_area_h = lv_area_get_height(&draw_area);
        lv_coord_t draw_area_w = lv_area_get_width(&draw_area);

#if LV_USE_IMG_TRANSFORM
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
    8530:	9908      	ldr	r1, [sp, #32]
    8532:	884b      	ldrh	r3, [r1, #2]
    8534:	2b00      	cmp	r3, #0
    8536:	f040 8353 	bne.w	8be0 <lv_draw_map+0x7a8>
    853a:	890b      	ldrh	r3, [r1, #8]
    853c:	f5b3 7280 	subs.w	r2, r3, #256	; 0x100
    8540:	bf18      	it	ne
    8542:	2201      	movne	r2, #1
    8544:	9205      	str	r2, [sp, #20]
#else
        bool transform = false;
#endif
        /*Simple ARGB image. Handle it as special case because it's very common*/
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
    8546:	9a19      	ldr	r2, [sp, #100]	; 0x64
    8548:	2a00      	cmp	r2, #0
    854a:	f040 8370 	bne.w	8c2e <lv_draw_map+0x7f6>
    854e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8552:	f040 8349 	bne.w	8be8 <lv_draw_map+0x7b0>
    8556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8558:	b923      	cbnz	r3, 8564 <lv_draw_map+0x12c>
    855a:	7a8b      	ldrb	r3, [r1, #10]
    855c:	b913      	cbnz	r3, 8564 <lv_draw_map+0x12c>
    855e:	9b06      	ldr	r3, [sp, #24]
    8560:	2b00      	cmp	r3, #0
    8562:	d131      	bne.n	85c8 <lv_draw_map+0x190>
            _lv_mem_buf_release(map2);
        }
        /*Most complicated case: transform or other mask or chroma keyed*/
        else {
            /*Build the image and a mask line-by-line*/
             uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
    8564:	a83a      	add	r0, sp, #232	; 0xe8
    8566:	4b66      	ldr	r3, [pc, #408]	; (8700 <lv_draw_map+0x2c8>)
    8568:	4798      	blx	r3
    856a:	f5b0 7ff0 	cmp.w	r0, #480	; 0x1e0
    856e:	f240 80ac 	bls.w	86ca <lv_draw_map+0x292>
             lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
    8572:	f44f 7070 	mov.w	r0, #960	; 0x3c0
    8576:	4c63      	ldr	r4, [pc, #396]	; (8704 <lv_draw_map+0x2cc>)
    8578:	47a0      	blx	r4
    857a:	901a      	str	r0, [sp, #104]	; 0x68
             lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
    857c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
    8580:	47a0      	blx	r4
    8582:	9017      	str	r0, [sp, #92]	; 0x5c

#if LV_USE_IMG_TRANSFORM
            lv_img_transform_dsc_t trans_dsc;
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
    8584:	2148      	movs	r1, #72	; 0x48
    8586:	a828      	add	r0, sp, #160	; 0xa0
    8588:	4b5f      	ldr	r3, [pc, #380]	; (8708 <lv_draw_map+0x2d0>)
    858a:	4798      	blx	r3
             uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
    858c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    8590:	931c      	str	r3, [sp, #112]	; 0x70
    8592:	e0e4      	b.n	875e <lv_draw_map+0x326>
    if(other_mask_cnt == 0 && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE &&
    8594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8596:	2b00      	cmp	r3, #0
    8598:	d18a      	bne.n	84b0 <lv_draw_map+0x78>
       chroma_key == false && alpha_byte == false && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
    859a:	9b06      	ldr	r3, [sp, #24]
    859c:	b98b      	cbnz	r3, 85c2 <lv_draw_map+0x18a>
    859e:	7a93      	ldrb	r3, [r2, #10]
    85a0:	b113      	cbz	r3, 85a8 <lv_draw_map+0x170>
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
    85a2:	f04f 0b02 	mov.w	fp, #2
    85a6:	e78a      	b.n	84be <lv_draw_map+0x86>
        _lv_blend_map(clip_area, map_area, (lv_color_t *)map_p, NULL, LV_DRAW_MASK_RES_FULL_COVER, draw_dsc->opa,
    85a8:	7b93      	ldrb	r3, [r2, #14]
    85aa:	9302      	str	r3, [sp, #8]
    85ac:	7813      	ldrb	r3, [r2, #0]
    85ae:	9301      	str	r3, [sp, #4]
    85b0:	2301      	movs	r3, #1
    85b2:	9300      	str	r3, [sp, #0]
    85b4:	2300      	movs	r3, #0
    85b6:	463a      	mov	r2, r7
    85b8:	991b      	ldr	r1, [sp, #108]	; 0x6c
    85ba:	9823      	ldr	r0, [sp, #140]	; 0x8c
    85bc:	4c53      	ldr	r4, [pc, #332]	; (870c <lv_draw_map+0x2d4>)
    85be:	47a0      	blx	r4
    85c0:	e30b      	b.n	8bda <lv_draw_map+0x7a2>
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
    85c2:	f04f 0b03 	mov.w	fp, #3
    85c6:	e77a      	b.n	84be <lv_draw_map+0x86>
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
    85c8:	a83a      	add	r0, sp, #232	; 0xe8
    85ca:	4b4d      	ldr	r3, [pc, #308]	; (8700 <lv_draw_map+0x2c8>)
    85cc:	4798      	blx	r3
    85ce:	f5b0 7ff0 	cmp.w	r0, #480	; 0x1e0
    85d2:	d814      	bhi.n	85fe <lv_draw_map+0x1c6>
    85d4:	a83a      	add	r0, sp, #232	; 0xe8
    85d6:	4b4a      	ldr	r3, [pc, #296]	; (8700 <lv_draw_map+0x2c8>)
    85d8:	4798      	blx	r3
    85da:	4681      	mov	r9, r0
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
    85dc:	ea4f 0049 	mov.w	r0, r9, lsl #1
    85e0:	4c48      	ldr	r4, [pc, #288]	; (8704 <lv_draw_map+0x2cc>)
    85e2:	47a0      	blx	r4
    85e4:	4682      	mov	sl, r0
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
    85e6:	4648      	mov	r0, r9
    85e8:	47a0      	blx	r4
    85ea:	4604      	mov	r4, r0
            for(y = 0; y < draw_area_h; y++) {
    85ec:	9605      	str	r6, [sp, #20]
    85ee:	2e00      	cmp	r6, #0
    85f0:	dd4f      	ble.n	8692 <lv_draw_map+0x25a>
                map_buf_tmp += map_w * px_size_byte;
    85f2:	fb08 f805 	mul.w	r8, r8, r5
    85f6:	2500      	movs	r5, #0
    85f8:	46ac      	mov	ip, r5
    85fa:	9e14      	ldr	r6, [sp, #80]	; 0x50
    85fc:	e025      	b.n	864a <lv_draw_map+0x212>
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
    85fe:	f44f 79f0 	mov.w	r9, #480	; 0x1e0
    8602:	e7eb      	b.n	85dc <lv_draw_map+0x1a4>
    8604:	445b      	add	r3, fp
    8606:	3702      	adds	r7, #2
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
    8608:	4596      	cmp	lr, r2
    860a:	d00a      	beq.n	8622 <lv_draw_map+0x1ea>
                    lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
    860c:	7899      	ldrb	r1, [r3, #2]
                    mask_buf[px_i] = px_opa;
    860e:	f802 1b01 	strb.w	r1, [r2], #1
                    if(px_opa) {
    8612:	2900      	cmp	r1, #0
    8614:	d0f6      	beq.n	8604 <lv_draw_map+0x1cc>
                        map2[px_i].full =  map_px[0] + (map_px[1] << 8);
    8616:	7858      	ldrb	r0, [r3, #1]
    8618:	7819      	ldrb	r1, [r3, #0]
    861a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
    861e:	8039      	strh	r1, [r7, #0]
    8620:	e7f0      	b.n	8604 <lv_draw_map+0x1cc>
                map_buf_tmp += map_w * px_size_byte;
    8622:	4446      	add	r6, r8
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    8624:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
    8628:	3301      	adds	r3, #1
    862a:	f8bd 20e8 	ldrh.w	r2, [sp, #232]	; 0xe8
    862e:	1a9b      	subs	r3, r3, r2
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
    8630:	fa0c f383 	sxtah	r3, ip, r3
    8634:	4599      	cmp	r9, r3
    8636:	d914      	bls.n	8662 <lv_draw_map+0x22a>
                    blend_area.y2 ++;
    8638:	f8bd 309e 	ldrh.w	r3, [sp, #158]	; 0x9e
    863c:	3301      	adds	r3, #1
    863e:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            for(y = 0; y < draw_area_h; y++) {
    8642:	3501      	adds	r5, #1
    8644:	9b05      	ldr	r3, [sp, #20]
    8646:	429d      	cmp	r5, r3
    8648:	d023      	beq.n	8692 <lv_draw_map+0x25a>
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
    864a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    864c:	2b00      	cmp	r3, #0
    864e:	dde8      	ble.n	8622 <lv_draw_map+0x1ea>
    8650:	eb04 020c 	add.w	r2, r4, ip
    8654:	eb0a 074c 	add.w	r7, sl, ip, lsl #1
    8658:	449c      	add	ip, r3
    865a:	eb04 0e0c 	add.w	lr, r4, ip
    865e:	4633      	mov	r3, r6
    8660:	e7d4      	b.n	860c <lv_draw_map+0x1d4>
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
    8662:	9a08      	ldr	r2, [sp, #32]
    8664:	7b93      	ldrb	r3, [r2, #14]
    8666:	9302      	str	r3, [sp, #8]
    8668:	7813      	ldrb	r3, [r2, #0]
    866a:	9301      	str	r3, [sp, #4]
    866c:	2302      	movs	r3, #2
    866e:	9300      	str	r3, [sp, #0]
    8670:	4623      	mov	r3, r4
    8672:	4652      	mov	r2, sl
    8674:	a926      	add	r1, sp, #152	; 0x98
    8676:	9823      	ldr	r0, [sp, #140]	; 0x8c
    8678:	4f24      	ldr	r7, [pc, #144]	; (870c <lv_draw_map+0x2d4>)
    867a:	47b8      	blx	r7
                    blend_area.y1 = blend_area.y2 + 1;
    867c:	f8bd 309e 	ldrh.w	r3, [sp, #158]	; 0x9e
    8680:	3301      	adds	r3, #1
    8682:	b21b      	sxth	r3, r3
    8684:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                    blend_area.y2 = blend_area.y1;
    8688:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
                    px_i = 0;
    868c:	f04f 0c00 	mov.w	ip, #0
    8690:	e7d7      	b.n	8642 <lv_draw_map+0x20a>
            if(blend_area.y1 != blend_area.y2) {
    8692:	f9bd 309e 	ldrsh.w	r3, [sp, #158]	; 0x9e
    8696:	f9bd 209a 	ldrsh.w	r2, [sp, #154]	; 0x9a
    869a:	429a      	cmp	r2, r3
    869c:	d00f      	beq.n	86be <lv_draw_map+0x286>
                blend_area.y2--;
    869e:	3b01      	subs	r3, #1
    86a0:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
    86a4:	9a08      	ldr	r2, [sp, #32]
    86a6:	7b93      	ldrb	r3, [r2, #14]
    86a8:	9302      	str	r3, [sp, #8]
    86aa:	7813      	ldrb	r3, [r2, #0]
    86ac:	9301      	str	r3, [sp, #4]
    86ae:	2302      	movs	r3, #2
    86b0:	9300      	str	r3, [sp, #0]
    86b2:	4623      	mov	r3, r4
    86b4:	4652      	mov	r2, sl
    86b6:	a926      	add	r1, sp, #152	; 0x98
    86b8:	9823      	ldr	r0, [sp, #140]	; 0x8c
    86ba:	4d14      	ldr	r5, [pc, #80]	; (870c <lv_draw_map+0x2d4>)
    86bc:	47a8      	blx	r5
            _lv_mem_buf_release(mask_buf);
    86be:	4620      	mov	r0, r4
    86c0:	4c13      	ldr	r4, [pc, #76]	; (8710 <lv_draw_map+0x2d8>)
    86c2:	47a0      	blx	r4
            _lv_mem_buf_release(map2);
    86c4:	4650      	mov	r0, sl
    86c6:	47a0      	blx	r4
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
    86c8:	e287      	b.n	8bda <lv_draw_map+0x7a2>
             uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
    86ca:	a83a      	add	r0, sp, #232	; 0xe8
    86cc:	4b0c      	ldr	r3, [pc, #48]	; (8700 <lv_draw_map+0x2c8>)
    86ce:	4798      	blx	r3
    86d0:	901c      	str	r0, [sp, #112]	; 0x70
             lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
    86d2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    86d4:	0058      	lsls	r0, r3, #1
    86d6:	4c0b      	ldr	r4, [pc, #44]	; (8704 <lv_draw_map+0x2cc>)
    86d8:	47a0      	blx	r4
    86da:	901a      	str	r0, [sp, #104]	; 0x68
             lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
    86dc:	981c      	ldr	r0, [sp, #112]	; 0x70
    86de:	47a0      	blx	r4
    86e0:	9017      	str	r0, [sp, #92]	; 0x5c
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
    86e2:	2148      	movs	r1, #72	; 0x48
    86e4:	a828      	add	r0, sp, #160	; 0xa0
    86e6:	4b08      	ldr	r3, [pc, #32]	; (8708 <lv_draw_map+0x2d0>)
    86e8:	4798      	blx	r3
            if(transform) {
    86ea:	9b05      	ldr	r3, [sp, #20]
    86ec:	2b00      	cmp	r3, #0
    86ee:	d036      	beq.n	875e <lv_draw_map+0x326>
    86f0:	e291      	b.n	8c16 <lv_draw_map+0x7de>
    86f2:	bf00      	nop
    86f4:	00005789 	.word	0x00005789
    86f8:	0001025d 	.word	0x0001025d
    86fc:	0000b421 	.word	0x0000b421
    8700:	000106fd 	.word	0x000106fd
    8704:	00011a65 	.word	0x00011a65
    8708:	00011c17 	.word	0x00011c17
    870c:	00007911 	.word	0x00007911
    8710:	000116e5 	.word	0x000116e5
                lv_img_cf_t cf = LV_IMG_CF_TRUE_COLOR;
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
    8714:	2205      	movs	r2, #5
                else if(chroma_key) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;

                trans_dsc.cfg.angle = draw_dsc->angle;
    8716:	9808      	ldr	r0, [sp, #32]
    8718:	8843      	ldrh	r3, [r0, #2]
    871a:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
                trans_dsc.cfg.zoom = draw_dsc->zoom;
    871e:	8903      	ldrh	r3, [r0, #8]
    8720:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
                trans_dsc.cfg.src = map_p;
    8724:	9728      	str	r7, [sp, #160]	; 0xa0
                trans_dsc.cfg.src_w = map_w;
    8726:	f8ad 50a4 	strh.w	r5, [sp, #164]	; 0xa4
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    872a:	991b      	ldr	r1, [sp, #108]	; 0x6c
    872c:	88cb      	ldrh	r3, [r1, #6]
    872e:	3301      	adds	r3, #1
    8730:	8849      	ldrh	r1, [r1, #2]
    8732:	1a5b      	subs	r3, r3, r1
                trans_dsc.cfg.src_h = lv_area_get_height(map_area);;
    8734:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
                trans_dsc.cfg.cf = cf;
    8738:	f88d 20b2 	strb.w	r2, [sp, #178]	; 0xb2
                trans_dsc.cfg.pivot_x = draw_dsc->pivot.x;
    873c:	8883      	ldrh	r3, [r0, #4]
    873e:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
                trans_dsc.cfg.pivot_y = draw_dsc->pivot.y;
    8742:	88c3      	ldrh	r3, [r0, #6]
    8744:	f8ad 30aa 	strh.w	r3, [sp, #170]	; 0xaa
                trans_dsc.cfg.color = draw_dsc->recolor;
    8748:	8983      	ldrh	r3, [r0, #12]
    874a:	f8ad 30b0 	strh.w	r3, [sp, #176]	; 0xb0
                trans_dsc.cfg.antialias = draw_dsc->antialias;
    874e:	7bc3      	ldrb	r3, [r0, #15]
    8750:	f3c3 0300 	ubfx	r3, r3, #0, #1
    8754:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3

                _lv_img_buf_transform_init(&trans_dsc);
    8758:	a828      	add	r0, sp, #160	; 0xa0
    875a:	4b93      	ldr	r3, [pc, #588]	; (89a8 <lv_draw_map+0x570>)
    875c:	4798      	blx	r3
            }
#endif
            uint16_t recolor_premult[3] = {0};
            lv_opa_t recolor_opa_inv = 255 - draw_dsc->recolor_opa;
    875e:	9808      	ldr	r0, [sp, #32]
    8760:	7a83      	ldrb	r3, [r0, #10]
    8762:	43da      	mvns	r2, r3
    8764:	b2d2      	uxtb	r2, r2
    8766:	9212      	str	r2, [sp, #72]	; 0x48
            if(draw_dsc->recolor_opa != 0) {
    8768:	b303      	cbz	r3, 87ac <lv_draw_map+0x374>
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
    876a:	b29b      	uxth	r3, r3
    876c:	7b42      	ldrb	r2, [r0, #13]
    876e:	08d2      	lsrs	r2, r2, #3
    8770:	fb02 f203 	mul.w	r2, r2, r3
    8774:	9210      	str	r2, [sp, #64]	; 0x40
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
    8776:	8982      	ldrh	r2, [r0, #12]
    8778:	f3c2 1245 	ubfx	r2, r2, #5, #6
    877c:	fb02 f203 	mul.w	r2, r2, r3
    8780:	9211      	str	r2, [sp, #68]	; 0x44
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
    8782:	7b02      	ldrb	r2, [r0, #12]
    8784:	f002 021f 	and.w	r2, r2, #31
    8788:	fb02 f303 	mul.w	r3, r2, r3
    878c:	9313      	str	r3, [sp, #76]	; 0x4c
                lv_color_premult(draw_dsc->recolor, draw_dsc->recolor_opa, recolor_premult);
            }

            lv_draw_mask_res_t mask_res;
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
    878e:	9b06      	ldr	r3, [sp, #24]
    8790:	b98b      	cbnz	r3, 87b6 <lv_draw_map+0x37e>
    8792:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8794:	bb53      	cbnz	r3, 87ec <lv_draw_map+0x3b4>
    8796:	9a08      	ldr	r2, [sp, #32]
    8798:	8853      	ldrh	r3, [r2, #2]
    879a:	bb53      	cbnz	r3, 87f2 <lv_draw_map+0x3ba>
    879c:	8913      	ldrh	r3, [r2, #8]
    879e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    87a2:	bf14      	ite	ne
    87a4:	2302      	movne	r3, #2
    87a6:	2301      	moveq	r3, #1
    87a8:	931d      	str	r3, [sp, #116]	; 0x74
    87aa:	e006      	b.n	87ba <lv_draw_map+0x382>
            uint16_t recolor_premult[3] = {0};
    87ac:	2300      	movs	r3, #0
    87ae:	9313      	str	r3, [sp, #76]	; 0x4c
    87b0:	9311      	str	r3, [sp, #68]	; 0x44
    87b2:	9310      	str	r3, [sp, #64]	; 0x40
    87b4:	e7eb      	b.n	878e <lv_draw_map+0x356>
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
    87b6:	2302      	movs	r3, #2
    87b8:	931d      	str	r3, [sp, #116]	; 0x74
                        draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;


            /*Prepare the `mask_buf`if there are other masks*/
            if(other_mask_cnt) {
    87ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
    87bc:	b9e3      	cbnz	r3, 87f8 <lv_draw_map+0x3c0>
            }

            int32_t x;
            int32_t y;
#if LV_USE_IMG_TRANSFORM
            int32_t rot_y = disp_area->y1 + draw_area.y1 - map_area->y1;
    87be:	9b18      	ldr	r3, [sp, #96]	; 0x60
    87c0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
    87c4:	f9bd 20ea 	ldrsh.w	r2, [sp, #234]	; 0xea
    87c8:	4413      	add	r3, r2
    87ca:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    87cc:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
    87d0:	1a9b      	subs	r3, r3, r2
    87d2:	9322      	str	r3, [sp, #136]	; 0x88
#endif
            for(y = 0; y < draw_area_h; y++) {
    87d4:	961f      	str	r6, [sp, #124]	; 0x7c
    87d6:	2e00      	cmp	r6, #0
    87d8:	f340 81e4 	ble.w	8ba4 <lv_draw_map+0x76c>
                    else if(mask_res_sub == LV_DRAW_MASK_RES_CHANGED) {
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
                    }
                }

                map_buf_tmp += map_w * px_size_byte;
    87dc:	fb08 f305 	mul.w	r3, r8, r5
    87e0:	931e      	str	r3, [sp, #120]	; 0x78
    87e2:	2300      	movs	r3, #0
    87e4:	930e      	str	r3, [sp, #56]	; 0x38
    87e6:	930f      	str	r3, [sp, #60]	; 0x3c
        }
    }
    else {
        pxi = 0; /*unused*/
        px_size = 0;    /*unused*/
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
    87e8:	46d1      	mov	r9, sl
    87ea:	e154      	b.n	8a96 <lv_draw_map+0x65e>
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
    87ec:	2302      	movs	r3, #2
    87ee:	931d      	str	r3, [sp, #116]	; 0x74
    87f0:	e7e3      	b.n	87ba <lv_draw_map+0x382>
    87f2:	2302      	movs	r3, #2
    87f4:	931d      	str	r3, [sp, #116]	; 0x74
    87f6:	e7e0      	b.n	87ba <lv_draw_map+0x382>
                _lv_memset_ff(mask_buf, mask_buf_size);
    87f8:	991c      	ldr	r1, [sp, #112]	; 0x70
    87fa:	9817      	ldr	r0, [sp, #92]	; 0x5c
    87fc:	4b6b      	ldr	r3, [pc, #428]	; (89ac <lv_draw_map+0x574>)
    87fe:	4798      	blx	r3
    8800:	e7dd      	b.n	87be <lv_draw_map+0x386>
    int32_t xt = x - dsc->cfg.pivot_x;
    8802:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8804:	442b      	add	r3, r5
    8806:	b21b      	sxth	r3, r3
    8808:	f9bd 20a8 	ldrsh.w	r2, [sp, #168]	; 0xa8
    880c:	1a9b      	subs	r3, r3, r2
    int32_t yt = y - dsc->cfg.pivot_y;
    880e:	f9bd 20aa 	ldrsh.w	r2, [sp, #170]	; 0xaa
    8812:	990d      	ldr	r1, [sp, #52]	; 0x34
    8814:	1a8a      	subs	r2, r1, r2
    if(dsc->cfg.zoom == LV_IMG_ZOOM_NONE) {
    8816:	f8bd 10ae 	ldrh.w	r1, [sp, #174]	; 0xae
    881a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    881e:	d056      	beq.n	88ce <lv_draw_map+0x496>
    else if(dsc->cfg.angle == 0) {
    8820:	f9bd 10ac 	ldrsh.w	r1, [sp, #172]	; 0xac
    8824:	2900      	cmp	r1, #0
    8826:	d165      	bne.n	88f4 <lv_draw_map+0x4bc>
        xt *= dsc->tmp.zoom_inv;
    8828:	f8bd 10d6 	ldrh.w	r1, [sp, #214]	; 0xd6
        xs = xt + dsc->tmp.pivot_x_256;
    882c:	9c31      	ldr	r4, [sp, #196]	; 0xc4
    882e:	fb01 4303 	mla	r3, r1, r3, r4
    8832:	9309      	str	r3, [sp, #36]	; 0x24
        ys = yt + dsc->tmp.pivot_y_256;
    8834:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    8836:	fb01 3302 	mla	r3, r1, r2, r3
    883a:	930b      	str	r3, [sp, #44]	; 0x2c
    int32_t xs_int = xs >> 8;
    883c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    883e:	121f      	asrs	r7, r3, #8
    if(xs_int >= dsc->cfg.src_w) return false;
    8840:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	; 0xa4
    8844:	429f      	cmp	r7, r3
    8846:	f280 80ab 	bge.w	89a0 <lv_draw_map+0x568>
    else if(xs_int < 0) return false;
    884a:	2f00      	cmp	r7, #0
    884c:	f2c0 80a8 	blt.w	89a0 <lv_draw_map+0x568>
    int32_t ys_int = ys >> 8;
    8850:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8852:	1212      	asrs	r2, r2, #8
    8854:	4610      	mov	r0, r2
    8856:	9215      	str	r2, [sp, #84]	; 0x54
    if(ys_int >= dsc->cfg.src_h) return false;
    8858:	f9bd 20a6 	ldrsh.w	r2, [sp, #166]	; 0xa6
    885c:	4290      	cmp	r0, r2
    885e:	f280 809f 	bge.w	89a0 <lv_draw_map+0x568>
    else if(ys_int < 0) return false;
    8862:	2800      	cmp	r0, #0
    8864:	f2c0 809c 	blt.w	89a0 <lv_draw_map+0x568>
    if(dsc->tmp.native_color) {
    8868:	f89d 20d4 	ldrb.w	r2, [sp, #212]	; 0xd4
    886c:	f012 0f04 	tst.w	r2, #4
    8870:	d06a      	beq.n	8948 <lv_draw_map+0x510>
    const uint8_t * src_u8 = (const uint8_t *)dsc->cfg.src;
    8872:	9928      	ldr	r1, [sp, #160]	; 0xa0
        if(dsc->tmp.has_alpha == 0) {
    8874:	f012 0f02 	tst.w	r2, #2
    8878:	d155      	bne.n	8926 <lv_draw_map+0x4ee>
            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
    887a:	fb03 7300 	mla	r3, r3, r0, r7
    887e:	005a      	lsls	r2, r3, #1
            _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size);
    8880:	1888      	adds	r0, r1, r2
        *d8 = *s8;
    8882:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
    8886:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
    888a:	7843      	ldrb	r3, [r0, #1]
    888c:	f88d 30b5 	strb.w	r3, [sp, #181]	; 0xb5
            px_size = LV_COLOR_SIZE >> 3;
    8890:	2102      	movs	r1, #2
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
    }

    if(dsc->tmp.chroma_keyed) {
    8892:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
    8896:	f013 0f01 	tst.w	r3, #1
    889a:	d00d      	beq.n	88b8 <lv_draw_map+0x480>
        lv_color_t ct = LV_COLOR_TRANSP;
    889c:	9b20      	ldr	r3, [sp, #128]	; 0x80
    889e:	f36f 0304 	bfc	r3, #0, #5
    88a2:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
    88a6:	f36f 23cf 	bfc	r3, #11, #5
    88aa:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
        if(dsc->res.color.full == ct.full) return false;
    88ae:	f8bd 00b4 	ldrh.w	r0, [sp, #180]	; 0xb4
    88b2:	b29b      	uxth	r3, r3
    88b4:	4298      	cmp	r0, r3
    88b6:	d073      	beq.n	89a0 <lv_draw_map+0x568>
    }

    if(dsc->cfg.antialias == false) return true;
    88b8:	f89d 30b3 	ldrb.w	r3, [sp, #179]	; 0xb3
    88bc:	2b00      	cmp	r3, #0
    88be:	d159      	bne.n	8974 <lv_draw_map+0x53c>
                            mask_buf[px_i] = trans_dsc.res.opa;
    88c0:	f89d 30b6 	ldrb.w	r3, [sp, #182]	; 0xb6
    88c4:	f88a 3000 	strb.w	r3, [sl]
                            c.full = trans_dsc.res.color.full;
    88c8:	f8bd 30b4 	ldrh.w	r3, [sp, #180]	; 0xb4
    88cc:	e086      	b.n	89dc <lv_draw_map+0x5a4>
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (LV_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
    88ce:	9834      	ldr	r0, [sp, #208]	; 0xd0
    88d0:	9933      	ldr	r1, [sp, #204]	; 0xcc
    88d2:	fb00 f403 	mul.w	r4, r0, r3
    88d6:	fb01 4712 	mls	r7, r1, r2, r4
    88da:	9c31      	ldr	r4, [sp, #196]	; 0xc4
    88dc:	eb04 14e7 	add.w	r4, r4, r7, asr #7
    88e0:	9409      	str	r4, [sp, #36]	; 0x24
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (LV_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
    88e2:	fb00 f202 	mul.w	r2, r0, r2
    88e6:	fb01 2303 	mla	r3, r1, r3, r2
    88ea:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    88ec:	eb02 13e3 	add.w	r3, r2, r3, asr #7
    88f0:	930b      	str	r3, [sp, #44]	; 0x2c
    88f2:	e7a3      	b.n	883c <lv_draw_map+0x404>
        xt *= dsc->tmp.zoom_inv;
    88f4:	f8bd 10d6 	ldrh.w	r1, [sp, #214]	; 0xd6
    88f8:	fb01 f303 	mul.w	r3, r1, r3
        yt *= dsc->tmp.zoom_inv;
    88fc:	fb01 f202 	mul.w	r2, r1, r2
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (LV_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
    8900:	9934      	ldr	r1, [sp, #208]	; 0xd0
    8902:	9833      	ldr	r0, [sp, #204]	; 0xcc
    8904:	fb01 f403 	mul.w	r4, r1, r3
    8908:	fb00 4712 	mls	r7, r0, r2, r4
    890c:	9c31      	ldr	r4, [sp, #196]	; 0xc4
    890e:	eb04 34e7 	add.w	r4, r4, r7, asr #15
    8912:	9409      	str	r4, [sp, #36]	; 0x24
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (LV_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
    8914:	fb01 f202 	mul.w	r2, r1, r2
    8918:	fb00 2303 	mla	r3, r0, r3, r2
    891c:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    891e:	eb02 33e3 	add.w	r3, r2, r3, asr #15
    8922:	930b      	str	r3, [sp, #44]	; 0x2c
    8924:	e78a      	b.n	883c <lv_draw_map+0x404>
            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
    8926:	9a15      	ldr	r2, [sp, #84]	; 0x54
    8928:	fb03 7302 	mla	r3, r3, r2, r7
    892c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
            _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size - 1);
    8930:	188b      	adds	r3, r1, r2
    8932:	5c89      	ldrb	r1, [r1, r2]
    8934:	f88d 10b4 	strb.w	r1, [sp, #180]	; 0xb4
    8938:	7859      	ldrb	r1, [r3, #1]
    893a:	f88d 10b5 	strb.w	r1, [sp, #181]	; 0xb5
            dsc->res.opa = src_u8[pxi + px_size - 1];
    893e:	789b      	ldrb	r3, [r3, #2]
    8940:	f88d 30b6 	strb.w	r3, [sp, #182]	; 0xb6
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE;
    8944:	2103      	movs	r1, #3
    8946:	e7a4      	b.n	8892 <lv_draw_map+0x45a>
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
    8948:	b239      	sxth	r1, r7
    894a:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
    894e:	f8bd 30b0 	ldrh.w	r3, [sp, #176]	; 0xb0
    8952:	9225      	str	r2, [sp, #148]	; 0x94
    8954:	9124      	str	r1, [sp, #144]	; 0x90
    8956:	a82e      	add	r0, sp, #184	; 0xb8
    8958:	4c15      	ldr	r4, [pc, #84]	; (89b0 <lv_draw_map+0x578>)
    895a:	47a0      	blx	r4
    895c:	f8ad 00b4 	strh.w	r0, [sp, #180]	; 0xb4
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
    8960:	9a25      	ldr	r2, [sp, #148]	; 0x94
    8962:	9924      	ldr	r1, [sp, #144]	; 0x90
    8964:	a82e      	add	r0, sp, #184	; 0xb8
    8966:	4b13      	ldr	r3, [pc, #76]	; (89b4 <lv_draw_map+0x57c>)
    8968:	4798      	blx	r3
    896a:	f88d 00b6 	strb.w	r0, [sp, #182]	; 0xb6
        pxi = 0; /*unused*/
    896e:	2200      	movs	r2, #0
        px_size = 0;    /*unused*/
    8970:	4611      	mov	r1, r2
    8972:	e78e      	b.n	8892 <lv_draw_map+0x45a>

    dsc->tmp.xs = xs;
    8974:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    8978:	f8ad 30d8 	strh.w	r3, [sp, #216]	; 0xd8
    dsc->tmp.ys = ys;
    897c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    8980:	f8ad 30da 	strh.w	r3, [sp, #218]	; 0xda
    dsc->tmp.xs_int = xs_int;
    8984:	f8ad 70dc 	strh.w	r7, [sp, #220]	; 0xdc
    dsc->tmp.ys_int = ys_int;
    8988:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
    898c:	f8ad 30de 	strh.w	r3, [sp, #222]	; 0xde
    dsc->tmp.pxi = pxi;
    8990:	9238      	str	r2, [sp, #224]	; 0xe0
    dsc->tmp.px_size = px_size;
    8992:	f88d 10e4 	strb.w	r1, [sp, #228]	; 0xe4

    bool ret;
    ret = _lv_img_buf_transform_anti_alias(dsc);
    8996:	a828      	add	r0, sp, #160	; 0xa0
    8998:	4b07      	ldr	r3, [pc, #28]	; (89b8 <lv_draw_map+0x580>)
    899a:	4798      	blx	r3
                        if(ret == false) {
    899c:	2800      	cmp	r0, #0
    899e:	d18f      	bne.n	88c0 <lv_draw_map+0x488>
                            mask_buf[px_i] = LV_OPA_TRANSP;
    89a0:	2300      	movs	r3, #0
    89a2:	f88a 3000 	strb.w	r3, [sl]
                            continue;
    89a6:	e03d      	b.n	8a24 <lv_draw_map+0x5ec>
    89a8:	0000e06d 	.word	0x0000e06d
    89ac:	00011ccd 	.word	0x00011ccd
    89b0:	0000de39 	.word	0x0000de39
    89b4:	0000df69 	.word	0x0000df69
    89b8:	0000e31d 	.word	0x0000e31d
    89bc:	000007e0 	.word	0x000007e0
                            mask_buf[px_i] = 0xFF;
    89c0:	23ff      	movs	r3, #255	; 0xff
    89c2:	f88a 3000 	strb.w	r3, [sl]
                        c.full =  map_px[0] + (map_px[1] << 8);
    89c6:	7872      	ldrb	r2, [r6, #1]
    89c8:	7833      	ldrb	r3, [r6, #0]
    89ca:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    89ce:	b29b      	uxth	r3, r3
                        if(chroma_key) {
    89d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    89d2:	b11a      	cbz	r2, 89dc <lv_draw_map+0x5a4>
                            if(c.full == chroma_keyed_color.full) {
    89d4:	f83f 201c 	ldrh.w	r2, [pc, #-28]	; 89bc <lv_draw_map+0x584>
    89d8:	429a      	cmp	r2, r3
    89da:	d036      	beq.n	8a4a <lv_draw_map+0x612>
                    if(draw_dsc->recolor_opa != 0) {
    89dc:	9a08      	ldr	r2, [sp, #32]
    89de:	7a92      	ldrb	r2, [r2, #10]
    89e0:	b1ea      	cbz	r2, 8a1e <lv_draw_map+0x5e6>
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix) >> 8);
    89e2:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    89e6:	0ad9      	lsrs	r1, r3, #11
    89e8:	9810      	ldr	r0, [sp, #64]	; 0x40
    89ea:	fb01 0102 	mla	r1, r1, r2, r0
    89ee:	f3c1 2104 	ubfx	r1, r1, #8, #5
    LV_COLOR_SET_G(ret, (uint16_t)((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix) >> 8);
    89f2:	f3c3 1045 	ubfx	r0, r3, #5, #6
    89f6:	9c11      	ldr	r4, [sp, #68]	; 0x44
    89f8:	fb00 4002 	mla	r0, r0, r2, r4
    89fc:	f3c0 2005 	ubfx	r0, r0, #8, #6
    LV_COLOR_SET_B(ret, (uint16_t)((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix) >> 8);
    8a00:	f003 031f 	and.w	r3, r3, #31
    8a04:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    8a06:	fb03 4302 	mla	r3, r3, r2, r4
    8a0a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    8a0e:	f363 0904 	bfi	r9, r3, #0, #5
    8a12:	f360 194a 	bfi	r9, r0, #5, #6
    8a16:	f361 29cf 	bfi	r9, r1, #11, #5
    8a1a:	fa1f f389 	uxth.w	r3, r9
                    map2[px_i].full = c.full;
    8a1e:	9a07      	ldr	r2, [sp, #28]
    8a20:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
    8a24:	3501      	adds	r5, #1
    8a26:	445e      	add	r6, fp
    8a28:	f10a 0a01 	add.w	sl, sl, #1
    8a2c:	4545      	cmp	r5, r8
    8a2e:	d010      	beq.n	8a52 <lv_draw_map+0x61a>
                    if(transform) {
    8a30:	9b05      	ldr	r3, [sp, #20]
    8a32:	2b00      	cmp	r3, #0
    8a34:	f47f aee5 	bne.w	8802 <lv_draw_map+0x3ca>
                        if(alpha_byte) {
    8a38:	9b06      	ldr	r3, [sp, #24]
    8a3a:	2b00      	cmp	r3, #0
    8a3c:	d0c0      	beq.n	89c0 <lv_draw_map+0x588>
                            lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
    8a3e:	78b3      	ldrb	r3, [r6, #2]
                            mask_buf[px_i] = px_opa;
    8a40:	f88a 3000 	strb.w	r3, [sl]
                            if(px_opa == 0) {
    8a44:	2b00      	cmp	r3, #0
    8a46:	d0ed      	beq.n	8a24 <lv_draw_map+0x5ec>
    8a48:	e7bd      	b.n	89c6 <lv_draw_map+0x58e>
                                mask_buf[px_i] = LV_OPA_TRANSP;
    8a4a:	2300      	movs	r3, #0
    8a4c:	f88a 3000 	strb.w	r3, [sl]
                                continue;
    8a50:	e7e8      	b.n	8a24 <lv_draw_map+0x5ec>
    8a52:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8a54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8a56:	189c      	adds	r4, r3, r2
                if(other_mask_cnt) {
    8a58:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8a5a:	2b00      	cmp	r3, #0
    8a5c:	d13e      	bne.n	8adc <lv_draw_map+0x6a4>
                map_buf_tmp += map_w * px_size_byte;
    8a5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    8a60:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    8a62:	4413      	add	r3, r2
    8a64:	9314      	str	r3, [sp, #80]	; 0x50
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    8a66:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
    8a6a:	3301      	adds	r3, #1
    8a6c:	f8bd 20e8 	ldrh.w	r2, [sp, #232]	; 0xe8
    8a70:	1a9b      	subs	r3, r3, r2
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
    8a72:	fa04 f383 	sxtah	r3, r4, r3
    8a76:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    8a78:	429a      	cmp	r2, r3
    8a7a:	d95c      	bls.n	8b36 <lv_draw_map+0x6fe>
                    blend_area.y2 ++;
    8a7c:	f8bd 309e 	ldrh.w	r3, [sp, #158]	; 0x9e
    8a80:	3301      	adds	r3, #1
    8a82:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
    8a86:	940f      	str	r4, [sp, #60]	; 0x3c
            for(y = 0; y < draw_area_h; y++) {
    8a88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8a8a:	3301      	adds	r3, #1
    8a8c:	930e      	str	r3, [sp, #56]	; 0x38
    8a8e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    8a90:	4293      	cmp	r3, r2
    8a92:	f000 8087 	beq.w	8ba4 <lv_draw_map+0x76c>
                int32_t rot_x = disp_area->x1 + draw_area.x1 - map_area->x1;
    8a96:	9b18      	ldr	r3, [sp, #96]	; 0x60
    8a98:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
    8a9c:	f9bd 20e8 	ldrsh.w	r2, [sp, #232]	; 0xe8
    8aa0:	4413      	add	r3, r2
    8aa2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    8aa4:	f9b2 2000 	ldrsh.w	r2, [r2]
    8aa8:	1a9b      	subs	r3, r3, r2
    8aaa:	930c      	str	r3, [sp, #48]	; 0x30
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
    8aac:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8aae:	4698      	mov	r8, r3
    8ab0:	2b00      	cmp	r3, #0
    8ab2:	dd11      	ble.n	8ad8 <lv_draw_map+0x6a0>
    8ab4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    8ab6:	4619      	mov	r1, r3
    8ab8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8aba:	eb01 0a02 	add.w	sl, r1, r2
    8abe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    8ac0:	4619      	mov	r1, r3
    8ac2:	eb01 0342 	add.w	r3, r1, r2, lsl #1
    8ac6:	9307      	str	r3, [sp, #28]
    8ac8:	9e14      	ldr	r6, [sp, #80]	; 0x50
    8aca:	2500      	movs	r5, #0
    int32_t yt = y - dsc->cfg.pivot_y;
    8acc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    8ace:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8ad0:	4413      	add	r3, r2
    8ad2:	b21b      	sxth	r3, r3
    8ad4:	930d      	str	r3, [sp, #52]	; 0x34
    8ad6:	e7ab      	b.n	8a30 <lv_draw_map+0x5f8>
    8ad8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    8ada:	e7bd      	b.n	8a58 <lv_draw_map+0x620>
                    mask_res_sub = lv_draw_mask_apply(mask_buf + px_i_start, draw_area.x1 + vdb->area.x1, y + draw_area.y1 + vdb->area.y1,
    8adc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8ade:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    8ae0:	4413      	add	r3, r2
    8ae2:	461e      	mov	r6, r3
    8ae4:	f8bd 10e8 	ldrh.w	r1, [sp, #232]	; 0xe8
    8ae8:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
    8aec:	3301      	adds	r3, #1
    8aee:	1a5b      	subs	r3, r3, r1
    8af0:	f8bd 20ea 	ldrh.w	r2, [sp, #234]	; 0xea
    8af4:	9d18      	ldr	r5, [sp, #96]	; 0x60
    8af6:	8a68      	ldrh	r0, [r5, #18]
    8af8:	4402      	add	r2, r0
    8afa:	980e      	ldr	r0, [sp, #56]	; 0x38
    8afc:	4402      	add	r2, r0
    8afe:	8a28      	ldrh	r0, [r5, #16]
    8b00:	4401      	add	r1, r0
    8b02:	b21b      	sxth	r3, r3
    8b04:	b212      	sxth	r2, r2
    8b06:	b209      	sxth	r1, r1
    8b08:	4630      	mov	r0, r6
    8b0a:	4d4e      	ldr	r5, [pc, #312]	; (8c44 <lv_draw_map+0x80c>)
    8b0c:	47a8      	blx	r5
                    if(mask_res_sub == LV_DRAW_MASK_RES_TRANSP) {
    8b0e:	b128      	cbz	r0, 8b1c <lv_draw_map+0x6e4>
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
    8b10:	2802      	cmp	r0, #2
    8b12:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    8b14:	bf08      	it	eq
    8b16:	4602      	moveq	r2, r0
    8b18:	921d      	str	r2, [sp, #116]	; 0x74
    8b1a:	e7a0      	b.n	8a5e <lv_draw_map+0x626>
    8b1c:	f8bd 10ec 	ldrh.w	r1, [sp, #236]	; 0xec
    8b20:	3101      	adds	r1, #1
    8b22:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	; 0xe8
    8b26:	1ac9      	subs	r1, r1, r3
                        _lv_memset_00(mask_buf + px_i_start, lv_area_get_width(&draw_area));
    8b28:	b209      	sxth	r1, r1
    8b2a:	4630      	mov	r0, r6
    8b2c:	4b46      	ldr	r3, [pc, #280]	; (8c48 <lv_draw_map+0x810>)
    8b2e:	4798      	blx	r3
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
    8b30:	2302      	movs	r3, #2
    8b32:	931d      	str	r3, [sp, #116]	; 0x74
    8b34:	e793      	b.n	8a5e <lv_draw_map+0x626>
                }
                else {

                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
    8b36:	9d08      	ldr	r5, [sp, #32]
    8b38:	7bab      	ldrb	r3, [r5, #14]
    8b3a:	9302      	str	r3, [sp, #8]
    8b3c:	782b      	ldrb	r3, [r5, #0]
    8b3e:	9301      	str	r3, [sp, #4]
    8b40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    8b42:	9300      	str	r3, [sp, #0]
    8b44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    8b46:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    8b48:	a926      	add	r1, sp, #152	; 0x98
    8b4a:	9823      	ldr	r0, [sp, #140]	; 0x8c
    8b4c:	4c3f      	ldr	r4, [pc, #252]	; (8c4c <lv_draw_map+0x814>)
    8b4e:	47a0      	blx	r4

                    blend_area.y1 = blend_area.y2 + 1;
    8b50:	f8bd 309e 	ldrh.w	r3, [sp, #158]	; 0x9e
    8b54:	3301      	adds	r3, #1
    8b56:	b21b      	sxth	r3, r3
    8b58:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                    blend_area.y2 = blend_area.y1;
    8b5c:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e

                    px_i = 0;
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
    8b60:	9b06      	ldr	r3, [sp, #24]
    8b62:	b95b      	cbnz	r3, 8b7c <lv_draw_map+0x744>
    8b64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8b66:	b983      	cbnz	r3, 8b8a <lv_draw_map+0x752>
    8b68:	886b      	ldrh	r3, [r5, #2]
    8b6a:	b98b      	cbnz	r3, 8b90 <lv_draw_map+0x758>
    8b6c:	892b      	ldrh	r3, [r5, #8]
    8b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8b72:	bf14      	ite	ne
    8b74:	2302      	movne	r3, #2
    8b76:	2301      	moveq	r3, #1
    8b78:	931d      	str	r3, [sp, #116]	; 0x74
    8b7a:	e001      	b.n	8b80 <lv_draw_map+0x748>
    8b7c:	2302      	movs	r3, #2
    8b7e:	931d      	str	r3, [sp, #116]	; 0x74
                                draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;

                    /*Prepare the `mask_buf`if there are other masks*/
                    if(other_mask_cnt) {
    8b80:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8b82:	b943      	cbnz	r3, 8b96 <lv_draw_map+0x75e>
                    px_i = 0;
    8b84:	2300      	movs	r3, #0
    8b86:	930f      	str	r3, [sp, #60]	; 0x3c
    8b88:	e77e      	b.n	8a88 <lv_draw_map+0x650>
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
    8b8a:	2302      	movs	r3, #2
    8b8c:	931d      	str	r3, [sp, #116]	; 0x74
    8b8e:	e7f7      	b.n	8b80 <lv_draw_map+0x748>
    8b90:	2302      	movs	r3, #2
    8b92:	931d      	str	r3, [sp, #116]	; 0x74
    8b94:	e7f4      	b.n	8b80 <lv_draw_map+0x748>
                        _lv_memset_ff(mask_buf, mask_buf_size);
    8b96:	991c      	ldr	r1, [sp, #112]	; 0x70
    8b98:	9817      	ldr	r0, [sp, #92]	; 0x5c
    8b9a:	4b2d      	ldr	r3, [pc, #180]	; (8c50 <lv_draw_map+0x818>)
    8b9c:	4798      	blx	r3
                    px_i = 0;
    8b9e:	2300      	movs	r3, #0
    8ba0:	930f      	str	r3, [sp, #60]	; 0x3c
    8ba2:	e771      	b.n	8a88 <lv_draw_map+0x650>
                    }
                }
            }

            /*Flush the last part*/
            if(blend_area.y1 != blend_area.y2) {
    8ba4:	f9bd 309e 	ldrsh.w	r3, [sp, #158]	; 0x9e
    8ba8:	f9bd 209a 	ldrsh.w	r2, [sp, #154]	; 0x9a
    8bac:	429a      	cmp	r2, r3
    8bae:	d00f      	beq.n	8bd0 <lv_draw_map+0x798>
                blend_area.y2--;
    8bb0:	3b01      	subs	r3, #1
    8bb2:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
    8bb6:	9a08      	ldr	r2, [sp, #32]
    8bb8:	7b93      	ldrb	r3, [r2, #14]
    8bba:	9302      	str	r3, [sp, #8]
    8bbc:	7813      	ldrb	r3, [r2, #0]
    8bbe:	9301      	str	r3, [sp, #4]
    8bc0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    8bc2:	9300      	str	r3, [sp, #0]
    8bc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    8bc6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    8bc8:	a926      	add	r1, sp, #152	; 0x98
    8bca:	9823      	ldr	r0, [sp, #140]	; 0x8c
    8bcc:	4c1f      	ldr	r4, [pc, #124]	; (8c4c <lv_draw_map+0x814>)
    8bce:	47a0      	blx	r4
            }

            _lv_mem_buf_release(mask_buf);
    8bd0:	9817      	ldr	r0, [sp, #92]	; 0x5c
    8bd2:	4c20      	ldr	r4, [pc, #128]	; (8c54 <lv_draw_map+0x81c>)
    8bd4:	47a0      	blx	r4
            _lv_mem_buf_release(map2);
    8bd6:	981a      	ldr	r0, [sp, #104]	; 0x68
    8bd8:	47a0      	blx	r4
        }
    }
}
    8bda:	b03d      	add	sp, #244	; 0xf4
    8bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
    8be0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8be2:	bb13      	cbnz	r3, 8c2a <lv_draw_map+0x7f2>
    8be4:	2301      	movs	r3, #1
    8be6:	9305      	str	r3, [sp, #20]
             uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
    8be8:	a83a      	add	r0, sp, #232	; 0xe8
    8bea:	4b1b      	ldr	r3, [pc, #108]	; (8c58 <lv_draw_map+0x820>)
    8bec:	4798      	blx	r3
    8bee:	f5b0 7ff0 	cmp.w	r0, #480	; 0x1e0
    8bf2:	f67f ad6a 	bls.w	86ca <lv_draw_map+0x292>
             lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
    8bf6:	f44f 7070 	mov.w	r0, #960	; 0x3c0
    8bfa:	4c18      	ldr	r4, [pc, #96]	; (8c5c <lv_draw_map+0x824>)
    8bfc:	47a0      	blx	r4
    8bfe:	901a      	str	r0, [sp, #104]	; 0x68
             lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
    8c00:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
    8c04:	47a0      	blx	r4
    8c06:	9017      	str	r0, [sp, #92]	; 0x5c
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
    8c08:	2148      	movs	r1, #72	; 0x48
    8c0a:	a828      	add	r0, sp, #160	; 0xa0
    8c0c:	4b0e      	ldr	r3, [pc, #56]	; (8c48 <lv_draw_map+0x810>)
    8c0e:	4798      	blx	r3
             uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
    8c10:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    8c14:	931c      	str	r3, [sp, #112]	; 0x70
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
    8c16:	9b06      	ldr	r3, [sp, #24]
    8c18:	2b00      	cmp	r3, #0
    8c1a:	f47f ad7b 	bne.w	8714 <lv_draw_map+0x2dc>
                else if(chroma_key) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
    8c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8c20:	2b00      	cmp	r3, #0
    8c22:	bf0c      	ite	eq
    8c24:	2204      	moveq	r2, #4
    8c26:	2206      	movne	r2, #6
    8c28:	e575      	b.n	8716 <lv_draw_map+0x2de>
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
    8c2a:	2301      	movs	r3, #1
    8c2c:	9305      	str	r3, [sp, #20]
             uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
    8c2e:	a83a      	add	r0, sp, #232	; 0xe8
    8c30:	4b09      	ldr	r3, [pc, #36]	; (8c58 <lv_draw_map+0x820>)
    8c32:	4798      	blx	r3
    8c34:	f5b0 7ff0 	cmp.w	r0, #480	; 0x1e0
    8c38:	f67f ad47 	bls.w	86ca <lv_draw_map+0x292>
    8c3c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    8c40:	931c      	str	r3, [sp, #112]	; 0x70
    8c42:	e546      	b.n	86d2 <lv_draw_map+0x29a>
    8c44:	0000b379 	.word	0x0000b379
    8c48:	00011c17 	.word	0x00011c17
    8c4c:	00007911 	.word	0x00007911
    8c50:	00011ccd 	.word	0x00011ccd
    8c54:	000116e5 	.word	0x000116e5
    8c58:	000106fd 	.word	0x000106fd
    8c5c:	00011a65 	.word	0x00011a65

00008c60 <show_error>:

static void show_error(const lv_area_t * coords, const lv_area_t * clip_area, const char * msg)
{
    8c60:	b570      	push	{r4, r5, r6, lr}
    8c62:	b09e      	sub	sp, #120	; 0x78
    8c64:	4604      	mov	r4, r0
    8c66:	460d      	mov	r5, r1
    8c68:	4616      	mov	r6, r2
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
    8c6a:	a809      	add	r0, sp, #36	; 0x24
    8c6c:	4b0b      	ldr	r3, [pc, #44]	; (8c9c <show_error+0x3c>)
    8c6e:	4798      	blx	r3
    rect_dsc.bg_color = LV_COLOR_WHITE;
    8c70:	4b0b      	ldr	r3, [pc, #44]	; (8ca0 <show_error+0x40>)
    8c72:	881b      	ldrh	r3, [r3, #0]
    8c74:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    lv_draw_rect(coords, clip_area, &rect_dsc);
    8c78:	aa09      	add	r2, sp, #36	; 0x24
    8c7a:	4629      	mov	r1, r5
    8c7c:	4620      	mov	r0, r4
    8c7e:	4b09      	ldr	r3, [pc, #36]	; (8ca4 <show_error+0x44>)
    8c80:	4798      	blx	r3

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
    8c82:	a802      	add	r0, sp, #8
    8c84:	4b08      	ldr	r3, [pc, #32]	; (8ca8 <show_error+0x48>)
    8c86:	4798      	blx	r3
    lv_draw_label(coords, clip_area, &label_dsc, msg, NULL);
    8c88:	2300      	movs	r3, #0
    8c8a:	9300      	str	r3, [sp, #0]
    8c8c:	4633      	mov	r3, r6
    8c8e:	aa02      	add	r2, sp, #8
    8c90:	4629      	mov	r1, r5
    8c92:	4620      	mov	r0, r4
    8c94:	4c05      	ldr	r4, [pc, #20]	; (8cac <show_error+0x4c>)
    8c96:	47a0      	blx	r4
}
    8c98:	b01e      	add	sp, #120	; 0x78
    8c9a:	bd70      	pop	{r4, r5, r6, pc}
    8c9c:	0000b7c5 	.word	0x0000b7c5
    8ca0:	00017898 	.word	0x00017898
    8ca4:	0000b88d 	.word	0x0000b88d
    8ca8:	00008fd5 	.word	0x00008fd5
    8cac:	0000902d 	.word	0x0000902d

00008cb0 <lv_draw_img_dsc_init>:
{
    8cb0:	b510      	push	{r4, lr}
    8cb2:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
    8cb4:	2110      	movs	r1, #16
    8cb6:	4b0c      	ldr	r3, [pc, #48]	; (8ce8 <lv_draw_img_dsc_init+0x38>)
    8cb8:	4798      	blx	r3
    dsc->recolor = LV_COLOR_BLACK;
    8cba:	7b23      	ldrb	r3, [r4, #12]
    8cbc:	f36f 0304 	bfc	r3, #0, #5
    8cc0:	7323      	strb	r3, [r4, #12]
    8cc2:	89a3      	ldrh	r3, [r4, #12]
    8cc4:	f36f 134a 	bfc	r3, #5, #6
    8cc8:	81a3      	strh	r3, [r4, #12]
    8cca:	0a1b      	lsrs	r3, r3, #8
    8ccc:	f36f 03c7 	bfc	r3, #3, #5
    8cd0:	7363      	strb	r3, [r4, #13]
    dsc->opa = LV_OPA_COVER;
    8cd2:	23ff      	movs	r3, #255	; 0xff
    8cd4:	7023      	strb	r3, [r4, #0]
    dsc->zoom = LV_IMG_ZOOM_NONE;
    8cd6:	f44f 7380 	mov.w	r3, #256	; 0x100
    8cda:	8123      	strh	r3, [r4, #8]
    dsc->antialias = LV_ANTIALIAS;
    8cdc:	7be3      	ldrb	r3, [r4, #15]
    8cde:	f043 0301 	orr.w	r3, r3, #1
    8ce2:	73e3      	strb	r3, [r4, #15]
    8ce4:	bd10      	pop	{r4, pc}
    8ce6:	bf00      	nop
    8ce8:	00011c17 	.word	0x00011c17

00008cec <lv_img_cf_get_px_size>:
    switch(cf) {
    8cec:	3804      	subs	r0, #4
    8cee:	280a      	cmp	r0, #10
    8cf0:	d813      	bhi.n	8d1a <lv_img_cf_get_px_size+0x2e>
    8cf2:	e8df f000 	tbb	[pc, r0]
    8cf6:	0806      	.short	0x0806
    8cf8:	0e0c0a06 	.word	0x0e0c0a06
    8cfc:	0e0c0a10 	.word	0x0e0c0a10
    8d00:	10          	.byte	0x10
    8d01:	00          	.byte	0x00
            px_size = LV_COLOR_SIZE;
    8d02:	2010      	movs	r0, #16
    8d04:	4770      	bx	lr
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE << 3;
    8d06:	2018      	movs	r0, #24
            break;
    8d08:	4770      	bx	lr
            px_size = 1;
    8d0a:	2001      	movs	r0, #1
            break;
    8d0c:	4770      	bx	lr
            px_size = 2;
    8d0e:	2002      	movs	r0, #2
            break;
    8d10:	4770      	bx	lr
            px_size = 4;
    8d12:	2004      	movs	r0, #4
            break;
    8d14:	4770      	bx	lr
            px_size = 8;
    8d16:	2008      	movs	r0, #8
            break;
    8d18:	4770      	bx	lr
            px_size = 0;
    8d1a:	2000      	movs	r0, #0
}
    8d1c:	4770      	bx	lr

00008d1e <lv_img_cf_is_chroma_keyed>:
    switch(cf) {
    8d1e:	2803      	cmp	r0, #3
    8d20:	d005      	beq.n	8d2e <lv_img_cf_is_chroma_keyed+0x10>
    8d22:	d302      	bcc.n	8d2a <lv_img_cf_is_chroma_keyed+0xc>
    8d24:	3806      	subs	r0, #6
    8d26:	2804      	cmp	r0, #4
    8d28:	d901      	bls.n	8d2e <lv_img_cf_is_chroma_keyed+0x10>
            is_chroma_keyed = false;
    8d2a:	2000      	movs	r0, #0
    8d2c:	4770      	bx	lr
            is_chroma_keyed = true;
    8d2e:	2001      	movs	r0, #1
}
    8d30:	4770      	bx	lr

00008d32 <lv_img_cf_has_alpha>:
    switch(cf) {
    8d32:	3802      	subs	r0, #2
    8d34:	280c      	cmp	r0, #12
    8d36:	d808      	bhi.n	8d4a <lv_img_cf_has_alpha+0x18>
    8d38:	e8df f000 	tbb	[pc, r0]
    8d3c:	09070709 	.word	0x09070709
    8d40:	09090907 	.word	0x09090907
    8d44:	09090909 	.word	0x09090909
    8d48:	09          	.byte	0x09
    8d49:	00          	.byte	0x00
            has_alpha = false;
    8d4a:	2000      	movs	r0, #0
    8d4c:	4770      	bx	lr
            has_alpha = true;
    8d4e:	2001      	movs	r0, #1
}
    8d50:	4770      	bx	lr
	...

00008d54 <lv_draw_img>:
{
    8d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8d58:	b08f      	sub	sp, #60	; 0x3c
    8d5a:	4605      	mov	r5, r0
    8d5c:	460e      	mov	r6, r1
    if(src == NULL) {
    8d5e:	b13a      	cbz	r2, 8d70 <lv_draw_img+0x1c>
    8d60:	461c      	mov	r4, r3
    8d62:	4610      	mov	r0, r2
    if(dsc->opa <= LV_OPA_MIN) return;
    8d64:	781b      	ldrb	r3, [r3, #0]
    8d66:	2b05      	cmp	r3, #5
    8d68:	d806      	bhi.n	8d78 <lv_draw_img+0x24>
}
    8d6a:	b00f      	add	sp, #60	; 0x3c
    8d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        show_error(coords, mask, "No\ndata");
    8d70:	4a72      	ldr	r2, [pc, #456]	; (8f3c <lv_draw_img+0x1e8>)
    8d72:	4b73      	ldr	r3, [pc, #460]	; (8f40 <lv_draw_img+0x1ec>)
    8d74:	4798      	blx	r3
        return;
    8d76:	e7f8      	b.n	8d6a <lv_draw_img+0x16>
    lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor);
    8d78:	89a1      	ldrh	r1, [r4, #12]
    8d7a:	4b72      	ldr	r3, [pc, #456]	; (8f44 <lv_draw_img+0x1f0>)
    8d7c:	4798      	blx	r3
    if(cdsc == NULL) return LV_RES_INV;
    8d7e:	4607      	mov	r7, r0
    8d80:	2800      	cmp	r0, #0
    8d82:	f000 80a2 	beq.w	8eca <lv_draw_img+0x176>
    bool chroma_keyed = lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf);
    8d86:	f890 900c 	ldrb.w	r9, [r0, #12]
    8d8a:	f009 091f 	and.w	r9, r9, #31
    8d8e:	4648      	mov	r0, r9
    8d90:	4b6d      	ldr	r3, [pc, #436]	; (8f48 <lv_draw_img+0x1f4>)
    8d92:	4798      	blx	r3
    8d94:	4680      	mov	r8, r0
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
    8d96:	4648      	mov	r0, r9
    8d98:	4b6c      	ldr	r3, [pc, #432]	; (8f4c <lv_draw_img+0x1f8>)
    8d9a:	4798      	blx	r3
    8d9c:	4681      	mov	r9, r0
    if(cdsc->dec_dsc.error_msg != NULL) {
    8d9e:	69ba      	ldr	r2, [r7, #24]
    8da0:	b122      	cbz	r2, 8dac <lv_draw_img+0x58>
        show_error(coords, clip_area, cdsc->dec_dsc.error_msg);
    8da2:	4631      	mov	r1, r6
    8da4:	4628      	mov	r0, r5
    8da6:	4b66      	ldr	r3, [pc, #408]	; (8f40 <lv_draw_img+0x1ec>)
    8da8:	4798      	blx	r3
    8daa:	e7de      	b.n	8d6a <lv_draw_img+0x16>
    else if(cdsc->dec_dsc.img_data) {
    8dac:	693b      	ldr	r3, [r7, #16]
    8dae:	2b00      	cmp	r3, #0
    8db0:	d049      	beq.n	8e46 <lv_draw_img+0xf2>
    8db2:	1e6b      	subs	r3, r5, #1
    8db4:	1de8      	adds	r0, r5, #7
    8db6:	aa0a      	add	r2, sp, #40	; 0x28
    8db8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    8dbc:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    8dc0:	4298      	cmp	r0, r3
    8dc2:	d1f9      	bne.n	8db8 <lv_draw_img+0x64>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
    8dc4:	8863      	ldrh	r3, [r4, #2]
    8dc6:	b91b      	cbnz	r3, 8dd0 <lv_draw_img+0x7c>
    8dc8:	8922      	ldrh	r2, [r4, #8]
    8dca:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    8dce:	d028      	beq.n	8e22 <lv_draw_img+0xce>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    8dd0:	88ea      	ldrh	r2, [r5, #6]
    8dd2:	3201      	adds	r2, #1
    8dd4:	8869      	ldrh	r1, [r5, #2]
    8dd6:	1a52      	subs	r2, r2, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    8dd8:	88a9      	ldrh	r1, [r5, #4]
    8dda:	3101      	adds	r1, #1
    8ddc:	8828      	ldrh	r0, [r5, #0]
    8dde:	1a09      	subs	r1, r1, r0
            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
    8de0:	1d20      	adds	r0, r4, #4
    8de2:	9001      	str	r0, [sp, #4]
    8de4:	8920      	ldrh	r0, [r4, #8]
    8de6:	9000      	str	r0, [sp, #0]
    8de8:	b21b      	sxth	r3, r3
    8dea:	b212      	sxth	r2, r2
    8dec:	b209      	sxth	r1, r1
    8dee:	a80a      	add	r0, sp, #40	; 0x28
    8df0:	f8df a178 	ldr.w	sl, [pc, #376]	; 8f6c <lv_draw_img+0x218>
    8df4:	47d0      	blx	sl
            map_area_rot.x1 += coords->x1;
    8df6:	882a      	ldrh	r2, [r5, #0]
    8df8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    8dfc:	4413      	add	r3, r2
    8dfe:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            map_area_rot.y1 += coords->y1;
    8e02:	886b      	ldrh	r3, [r5, #2]
    8e04:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
    8e08:	4419      	add	r1, r3
    8e0a:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
            map_area_rot.x2 += coords->x1;
    8e0e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
    8e12:	440a      	add	r2, r1
    8e14:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
            map_area_rot.y2 += coords->y1;
    8e18:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
    8e1c:	4413      	add	r3, r2
    8e1e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        union_ok = _lv_area_intersect(&mask_com, clip_area, &map_area_rot);
    8e22:	aa0a      	add	r2, sp, #40	; 0x28
    8e24:	4631      	mov	r1, r6
    8e26:	a80c      	add	r0, sp, #48	; 0x30
    8e28:	4b49      	ldr	r3, [pc, #292]	; (8f50 <lv_draw_img+0x1fc>)
    8e2a:	4798      	blx	r3
        if(union_ok == false) {
    8e2c:	2800      	cmp	r0, #0
    8e2e:	d09c      	beq.n	8d6a <lv_draw_img+0x16>
        lv_draw_map(coords, &mask_com, cdsc->dec_dsc.img_data, draw_dsc, chroma_keyed, alpha_byte);
    8e30:	693a      	ldr	r2, [r7, #16]
    8e32:	f8cd 9004 	str.w	r9, [sp, #4]
    8e36:	f8cd 8000 	str.w	r8, [sp]
    8e3a:	4623      	mov	r3, r4
    8e3c:	a90c      	add	r1, sp, #48	; 0x30
    8e3e:	4628      	mov	r0, r5
    8e40:	4c44      	ldr	r4, [pc, #272]	; (8f54 <lv_draw_img+0x200>)
    8e42:	47a0      	blx	r4
    8e44:	e791      	b.n	8d6a <lv_draw_img+0x16>
        union_ok = _lv_area_intersect(&mask_com, clip_area, coords);
    8e46:	462a      	mov	r2, r5
    8e48:	4631      	mov	r1, r6
    8e4a:	a808      	add	r0, sp, #32
    8e4c:	4b40      	ldr	r3, [pc, #256]	; (8f50 <lv_draw_img+0x1fc>)
    8e4e:	4798      	blx	r3
        if(union_ok == false) {
    8e50:	2800      	cmp	r0, #0
    8e52:	d08a      	beq.n	8d6a <lv_draw_img+0x16>
    8e54:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    8e58:	3301      	adds	r3, #1
    8e5a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    8e5e:	1a9b      	subs	r3, r3, r2
    8e60:	b21b      	sxth	r3, r3
    8e62:	9303      	str	r3, [sp, #12]
        uint8_t  * buf = _lv_mem_buf_get(lv_area_get_width(&mask_com) *
    8e64:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    8e68:	4b3b      	ldr	r3, [pc, #236]	; (8f58 <lv_draw_img+0x204>)
    8e6a:	4798      	blx	r3
    8e6c:	9002      	str	r0, [sp, #8]
    8e6e:	f10d 021f 	add.w	r2, sp, #31
    uint8_t * d8 = (uint8_t *)dst;
    8e72:	ab0a      	add	r3, sp, #40	; 0x28
    while(len) {
    8e74:	a80c      	add	r0, sp, #48	; 0x30
        *d8 = *s8;
    8e76:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    8e7a:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    8e7e:	4283      	cmp	r3, r0
    8e80:	d1f9      	bne.n	8e76 <lv_draw_img+0x122>
        lv_area_set_height(&line, 1);
    8e82:	2101      	movs	r1, #1
    8e84:	a80a      	add	r0, sp, #40	; 0x28
    8e86:	4b35      	ldr	r3, [pc, #212]	; (8f5c <lv_draw_img+0x208>)
    8e88:	4798      	blx	r3
        int32_t x = mask_com.x1 - coords->x1;
    8e8a:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
    8e8e:	f9b5 2000 	ldrsh.w	r2, [r5]
        int32_t y = mask_com.y1 - coords->y1;
    8e92:	f9bd a022 	ldrsh.w	sl, [sp, #34]	; 0x22
    8e96:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
    8e9a:	ebaa 0101 	sub.w	r1, sl, r1
    8e9e:	4608      	mov	r0, r1
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
    8ea0:	f9bd 1026 	ldrsh.w	r1, [sp, #38]	; 0x26
    8ea4:	458a      	cmp	sl, r1
    8ea6:	dc44      	bgt.n	8f32 <lv_draw_img+0x1de>
            union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
    8ea8:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8f50 <lv_draw_img+0x1fc>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
    8eac:	1a9b      	subs	r3, r3, r2
    8eae:	b21b      	sxth	r3, r3
    8eb0:	9305      	str	r3, [sp, #20]
    8eb2:	9507      	str	r5, [sp, #28]
    8eb4:	9406      	str	r4, [sp, #24]
    8eb6:	4644      	mov	r4, r8
    8eb8:	4680      	mov	r8, r0
    8eba:	e012      	b.n	8ee2 <lv_draw_img+0x18e>
    8ebc:	9d07      	ldr	r5, [sp, #28]
                lv_img_decoder_close(&cdsc->dec_dsc);
    8ebe:	9804      	ldr	r0, [sp, #16]
    8ec0:	4b27      	ldr	r3, [pc, #156]	; (8f60 <lv_draw_img+0x20c>)
    8ec2:	4798      	blx	r3
                _lv_mem_buf_release(buf);
    8ec4:	9802      	ldr	r0, [sp, #8]
    8ec6:	4b27      	ldr	r3, [pc, #156]	; (8f64 <lv_draw_img+0x210>)
    8ec8:	4798      	blx	r3
        show_error(coords, mask, "No\ndata");
    8eca:	4a1c      	ldr	r2, [pc, #112]	; (8f3c <lv_draw_img+0x1e8>)
    8ecc:	4631      	mov	r1, r6
    8ece:	4628      	mov	r0, r5
    8ed0:	4b1b      	ldr	r3, [pc, #108]	; (8f40 <lv_draw_img+0x1ec>)
    8ed2:	4798      	blx	r3
        return;
    8ed4:	e749      	b.n	8d6a <lv_draw_img+0x16>
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
    8ed6:	f10a 0a01 	add.w	sl, sl, #1
    8eda:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
    8ede:	459a      	cmp	sl, r3
    8ee0:	dc27      	bgt.n	8f32 <lv_draw_img+0x1de>
            union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
    8ee2:	aa0a      	add	r2, sp, #40	; 0x28
    8ee4:	4631      	mov	r1, r6
    8ee6:	a80c      	add	r0, sp, #48	; 0x30
    8ee8:	47d8      	blx	fp
            if(union_ok == false) continue;
    8eea:	2800      	cmp	r0, #0
    8eec:	d0f3      	beq.n	8ed6 <lv_draw_img+0x182>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
    8eee:	9704      	str	r7, [sp, #16]
    8ef0:	9b02      	ldr	r3, [sp, #8]
    8ef2:	9300      	str	r3, [sp, #0]
    8ef4:	9b03      	ldr	r3, [sp, #12]
    8ef6:	fa0f f288 	sxth.w	r2, r8
    8efa:	9905      	ldr	r1, [sp, #20]
    8efc:	4638      	mov	r0, r7
    8efe:	4d1a      	ldr	r5, [pc, #104]	; (8f68 <lv_draw_img+0x214>)
    8f00:	47a8      	blx	r5
            if(read_res != LV_RES_OK) {
    8f02:	2801      	cmp	r0, #1
    8f04:	d1da      	bne.n	8ebc <lv_draw_img+0x168>
            lv_draw_map(&line, &mask_line, buf, draw_dsc, chroma_keyed, alpha_byte);
    8f06:	f8cd 9004 	str.w	r9, [sp, #4]
    8f0a:	9400      	str	r4, [sp, #0]
    8f0c:	9b06      	ldr	r3, [sp, #24]
    8f0e:	9a02      	ldr	r2, [sp, #8]
    8f10:	a90c      	add	r1, sp, #48	; 0x30
    8f12:	a80a      	add	r0, sp, #40	; 0x28
    8f14:	4d0f      	ldr	r5, [pc, #60]	; (8f54 <lv_draw_img+0x200>)
    8f16:	47a8      	blx	r5
            line.y1++;
    8f18:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    8f1c:	3301      	adds	r3, #1
    8f1e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
            line.y2++;
    8f22:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
    8f26:	3301      	adds	r3, #1
    8f28:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            y++;
    8f2c:	f108 0801 	add.w	r8, r8, #1
    8f30:	e7d1      	b.n	8ed6 <lv_draw_img+0x182>
        _lv_mem_buf_release(buf);
    8f32:	9802      	ldr	r0, [sp, #8]
    8f34:	4b0b      	ldr	r3, [pc, #44]	; (8f64 <lv_draw_img+0x210>)
    8f36:	4798      	blx	r3
    8f38:	e717      	b.n	8d6a <lv_draw_img+0x16>
    8f3a:	bf00      	nop
    8f3c:	0001789c 	.word	0x0001789c
    8f40:	00008c61 	.word	0x00008c61
    8f44:	0000e721 	.word	0x0000e721
    8f48:	00008d1f 	.word	0x00008d1f
    8f4c:	00008d33 	.word	0x00008d33
    8f50:	00010719 	.word	0x00010719
    8f54:	00008439 	.word	0x00008439
    8f58:	00011a65 	.word	0x00011a65
    8f5c:	000106f3 	.word	0x000106f3
    8f60:	0000f245 	.word	0x0000f245
    8f64:	000116e5 	.word	0x000116e5
    8f68:	0000f221 	.word	0x0000f221
    8f6c:	0000e185 	.word	0x0000e185

00008f70 <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
    8f70:	b158      	cbz	r0, 8f8a <lv_img_src_get_type+0x1a>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
    8f72:	7802      	ldrb	r2, [r0, #0]
    8f74:	f1a2 0320 	sub.w	r3, r2, #32
    8f78:	b2db      	uxtb	r3, r3
    8f7a:	2b5f      	cmp	r3, #95	; 0x5f
    8f7c:	d907      	bls.n	8f8e <lv_img_src_get_type+0x1e>
    else if(u8_p[0] >= 0x80) {
    8f7e:	b252      	sxtb	r2, r2
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
    8f80:	2a00      	cmp	r2, #0
    8f82:	bfb4      	ite	lt
    8f84:	2002      	movlt	r0, #2
    8f86:	2000      	movge	r0, #0
    8f88:	4770      	bx	lr
    if(src == NULL) return img_src_type;
    8f8a:	2003      	movs	r0, #3
    8f8c:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
    8f8e:	2001      	movs	r0, #1
}
    8f90:	4770      	bx	lr

00008f92 <hex_char_to_num>:
 */
static uint8_t hex_char_to_num(char hex)
{
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
    8f92:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    8f96:	b2db      	uxtb	r3, r3
    8f98:	2b09      	cmp	r3, #9
    8f9a:	d917      	bls.n	8fcc <hex_char_to_num+0x3a>
        result = hex - '0';
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
    8f9c:	2860      	cmp	r0, #96	; 0x60
    8f9e:	bf84      	itt	hi
    8fa0:	3820      	subhi	r0, #32
    8fa2:	b2c0      	uxtbhi	r0, r0

        switch(hex) {
    8fa4:	3841      	subs	r0, #65	; 0x41
    8fa6:	2805      	cmp	r0, #5
    8fa8:	d80e      	bhi.n	8fc8 <hex_char_to_num+0x36>
    8faa:	e8df f000 	tbb	[pc, r0]
    8fae:	0311      	.short	0x0311
    8fb0:	0b090705 	.word	0x0b090705
            case 'A':
                result = 10;
                break;
            case 'B':
                result = 11;
    8fb4:	200b      	movs	r0, #11
    8fb6:	4770      	bx	lr
                break;
            case 'C':
                result = 12;
    8fb8:	200c      	movs	r0, #12
                break;
    8fba:	4770      	bx	lr
            case 'D':
                result = 13;
    8fbc:	200d      	movs	r0, #13
                break;
    8fbe:	4770      	bx	lr
            case 'E':
                result = 14;
    8fc0:	200e      	movs	r0, #14
                break;
    8fc2:	4770      	bx	lr
            case 'F':
                result = 15;
    8fc4:	200f      	movs	r0, #15
                break;
    8fc6:	4770      	bx	lr
            default:
                result = 0;
    8fc8:	2000      	movs	r0, #0
                break;
    8fca:	4770      	bx	lr
        result = hex - '0';
    8fcc:	4618      	mov	r0, r3
    8fce:	4770      	bx	lr
                result = 10;
    8fd0:	200a      	movs	r0, #10
        }
    }

    return result;
}
    8fd2:	4770      	bx	lr

00008fd4 <lv_draw_label_dsc_init>:
{
    8fd4:	b510      	push	{r4, lr}
    8fd6:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
    8fd8:	211c      	movs	r1, #28
    8fda:	4b12      	ldr	r3, [pc, #72]	; (9024 <lv_draw_label_dsc_init+0x50>)
    8fdc:	4798      	blx	r3
    dsc->opa = LV_OPA_COVER;
    8fde:	23ff      	movs	r3, #255	; 0xff
    8fe0:	7223      	strb	r3, [r4, #8]
    dsc->color = LV_COLOR_BLACK;
    8fe2:	7823      	ldrb	r3, [r4, #0]
    8fe4:	f36f 0304 	bfc	r3, #0, #5
    8fe8:	7023      	strb	r3, [r4, #0]
    8fea:	8823      	ldrh	r3, [r4, #0]
    8fec:	f36f 134a 	bfc	r3, #5, #6
    8ff0:	8023      	strh	r3, [r4, #0]
    8ff2:	0a1b      	lsrs	r3, r3, #8
    8ff4:	f36f 03c7 	bfc	r3, #3, #5
    8ff8:	7063      	strb	r3, [r4, #1]
    dsc->font = LV_THEME_DEFAULT_FONT_NORMAL;
    8ffa:	4b0b      	ldr	r3, [pc, #44]	; (9028 <lv_draw_label_dsc_init+0x54>)
    8ffc:	6063      	str	r3, [r4, #4]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
    8ffe:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9002:	81e3      	strh	r3, [r4, #14]
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
    9004:	8223      	strh	r3, [r4, #16]
    dsc->sel_color = LV_COLOR_BLUE;
    9006:	78a3      	ldrb	r3, [r4, #2]
    9008:	f043 031f 	orr.w	r3, r3, #31
    900c:	70a3      	strb	r3, [r4, #2]
    900e:	8863      	ldrh	r3, [r4, #2]
    9010:	f36f 134a 	bfc	r3, #5, #6
    9014:	8063      	strh	r3, [r4, #2]
    9016:	0a1b      	lsrs	r3, r3, #8
    9018:	f36f 03c7 	bfc	r3, #3, #5
    901c:	70e3      	strb	r3, [r4, #3]
    dsc->bidi_dir = LV_BIDI_DIR_LTR;
    901e:	2300      	movs	r3, #0
    9020:	75a3      	strb	r3, [r4, #22]
    9022:	bd10      	pop	{r4, pc}
    9024:	00011c17 	.word	0x00011c17
    9028:	20000010 	.word	0x20000010

0000902c <lv_draw_label>:
{
    902c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9030:	b0d9      	sub	sp, #356	; 0x164
    9032:	9c62      	ldr	r4, [sp, #392]	; 0x188
    if(dsc->opa <= LV_OPA_MIN) return;
    9034:	7a15      	ldrb	r5, [r2, #8]
    9036:	2d05      	cmp	r5, #5
    9038:	d901      	bls.n	903e <lv_draw_label+0x12>
    if(txt[0] == '\0')  return;
    903a:	781d      	ldrb	r5, [r3, #0]
    903c:	b915      	cbnz	r5, 9044 <lv_draw_label+0x18>
}
    903e:	b059      	add	sp, #356	; 0x164
    9040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9044:	930b      	str	r3, [sp, #44]	; 0x2c
    9046:	4693      	mov	fp, r2
    9048:	460a      	mov	r2, r1
    904a:	910e      	str	r1, [sp, #56]	; 0x38
    904c:	4605      	mov	r5, r0
    904e:	9013      	str	r0, [sp, #76]	; 0x4c
    const lv_font_t * font = dsc->font;
    9050:	f8db 3004 	ldr.w	r3, [fp, #4]
    9054:	9307      	str	r3, [sp, #28]
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, mask);
    9056:	4601      	mov	r1, r0
    9058:	a856      	add	r0, sp, #344	; 0x158
    905a:	4ba9      	ldr	r3, [pc, #676]	; (9300 <lv_draw_label+0x2d4>)
    905c:	4798      	blx	r3
    if(!clip_ok) return;
    905e:	2800      	cmp	r0, #0
    9060:	d0ed      	beq.n	903e <lv_draw_label+0x12>
    if((dsc->flag & LV_TXT_FLAG_EXPAND) == 0) {
    9062:	f89b 2017 	ldrb.w	r2, [fp, #23]
    9066:	f012 0f02 	tst.w	r2, #2
    906a:	d121      	bne.n	90b0 <lv_draw_label+0x84>
    906c:	88ab      	ldrh	r3, [r5, #4]
    906e:	3301      	adds	r3, #1
    9070:	882a      	ldrh	r2, [r5, #0]
    9072:	1a9b      	subs	r3, r3, r2
        w = lv_area_get_width(coords);
    9074:	b21b      	sxth	r3, r3
    int32_t line_height_font = lv_font_get_line_height(font);
    9076:	9a07      	ldr	r2, [sp, #28]
    9078:	f9b2 8008 	ldrsh.w	r8, [r2, #8]
    int32_t line_height = line_height_font + dsc->line_space;
    907c:	f9bb 900a 	ldrsh.w	r9, [fp, #10]
    9080:	44c1      	add	r9, r8
    pos.x = coords->x1;
    9082:	9913      	ldr	r1, [sp, #76]	; 0x4c
    9084:	f9b1 2000 	ldrsh.w	r2, [r1]
    9088:	921c      	str	r2, [sp, #112]	; 0x70
    pos.y = coords->y1;
    908a:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
    x_ofs = dsc->ofs_x;
    908e:	f9bb 2012 	ldrsh.w	r2, [fp, #18]
    9092:	921a      	str	r2, [sp, #104]	; 0x68
    y_ofs = dsc->ofs_y;
    9094:	f9bb 1014 	ldrsh.w	r1, [fp, #20]
    pos.y += y_ofs;
    9098:	1842      	adds	r2, r0, r1
    909a:	b292      	uxth	r2, r2
    909c:	b215      	sxth	r5, r2
    if(hint && y_ofs == 0 && coords->y1 < 0) {
    909e:	2c00      	cmp	r4, #0
    90a0:	d045      	beq.n	912e <lv_draw_label+0x102>
    90a2:	2900      	cmp	r1, #0
    90a4:	d146      	bne.n	9134 <lv_draw_label+0x108>
    90a6:	2800      	cmp	r0, #0
    90a8:	db14      	blt.n	90d4 <lv_draw_label+0xa8>
    pos.y += y_ofs;
    90aa:	950f      	str	r5, [sp, #60]	; 0x3c
    uint32_t line_start     = 0;
    90ac:	2600      	movs	r6, #0
    90ae:	e029      	b.n	9104 <lv_draw_label+0xd8>
        _lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
    90b0:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
    90b4:	9202      	str	r2, [sp, #8]
    90b6:	f647 4218 	movw	r2, #31768	; 0x7c18
    90ba:	9201      	str	r2, [sp, #4]
    90bc:	f9bb 200a 	ldrsh.w	r2, [fp, #10]
    90c0:	9200      	str	r2, [sp, #0]
    90c2:	f8db 2004 	ldr.w	r2, [fp, #4]
    90c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    90c8:	a83a      	add	r0, sp, #232	; 0xe8
    90ca:	4d8e      	ldr	r5, [pc, #568]	; (9304 <lv_draw_label+0x2d8>)
    90cc:	47a8      	blx	r5
        w = p.x;
    90ce:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
    90d2:	e7d0      	b.n	9076 <lv_draw_label+0x4a>
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
    90d4:	68a1      	ldr	r1, [r4, #8]
    90d6:	1a08      	subs	r0, r1, r0
    90d8:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
    90dc:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
    90e0:	f5c9 7000 	rsb	r0, r9, #512	; 0x200
    90e4:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
    90e8:	dd05      	ble.n	90f6 <lv_draw_label+0xca>
            hint->line_start = -1;
    90ea:	f04f 32ff 	mov.w	r2, #4294967295
    90ee:	6022      	str	r2, [r4, #0]
    pos.y += y_ofs;
    90f0:	950f      	str	r5, [sp, #60]	; 0x3c
    uint32_t line_start     = 0;
    90f2:	2600      	movs	r6, #0
    90f4:	e006      	b.n	9104 <lv_draw_label+0xd8>
        last_line_start = hint->line_start;
    90f6:	6826      	ldr	r6, [r4, #0]
    if(hint && last_line_start >= 0) {
    90f8:	2e00      	cmp	r6, #0
    90fa:	db1e      	blt.n	913a <lv_draw_label+0x10e>
        pos.y += hint->y;
    90fc:	6861      	ldr	r1, [r4, #4]
    90fe:	440a      	add	r2, r1
    9100:	b212      	sxth	r2, r2
    9102:	920f      	str	r2, [sp, #60]	; 0x3c
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
    9104:	b21b      	sxth	r3, r3
    9106:	4619      	mov	r1, r3
    9108:	9310      	str	r3, [sp, #64]	; 0x40
    910a:	f9bb 200c 	ldrsh.w	r2, [fp, #12]
    910e:	f89b 3017 	ldrb.w	r3, [fp, #23]
    9112:	9300      	str	r3, [sp, #0]
    9114:	460b      	mov	r3, r1
    9116:	9907      	ldr	r1, [sp, #28]
    9118:	980b      	ldr	r0, [sp, #44]	; 0x2c
    911a:	4430      	add	r0, r6
    911c:	4d7a      	ldr	r5, [pc, #488]	; (9308 <lv_draw_label+0x2dc>)
    911e:	47a8      	blx	r5
    9120:	eb00 0a06 	add.w	sl, r0, r6
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
    9124:	462f      	mov	r7, r5
    9126:	4631      	mov	r1, r6
    9128:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    912a:	4626      	mov	r6, r4
    while(pos.y + line_height_font < mask->y1) {
    912c:	e00e      	b.n	914c <lv_draw_label+0x120>
    pos.y += y_ofs;
    912e:	950f      	str	r5, [sp, #60]	; 0x3c
    uint32_t line_start     = 0;
    9130:	2600      	movs	r6, #0
    9132:	e7e7      	b.n	9104 <lv_draw_label+0xd8>
    pos.y += y_ofs;
    9134:	950f      	str	r5, [sp, #60]	; 0x3c
    uint32_t line_start     = 0;
    9136:	2600      	movs	r6, #0
    9138:	e7e4      	b.n	9104 <lv_draw_label+0xd8>
    pos.y += y_ofs;
    913a:	950f      	str	r5, [sp, #60]	; 0x3c
    uint32_t line_start     = 0;
    913c:	2600      	movs	r6, #0
    913e:	e7e1      	b.n	9104 <lv_draw_label+0xd8>
    9140:	4651      	mov	r1, sl
        if(txt[line_start] == '\0') return;
    9142:	7823      	ldrb	r3, [r4, #0]
    9144:	2b00      	cmp	r3, #0
    9146:	f43f af7a 	beq.w	903e <lv_draw_label+0x12>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
    914a:	4682      	mov	sl, r0
    while(pos.y + line_height_font < mask->y1) {
    914c:	eb05 0308 	add.w	r3, r5, r8
    9150:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9152:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
    9156:	4293      	cmp	r3, r2
    9158:	da21      	bge.n	919e <lv_draw_label+0x172>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
    915a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    915c:	eb03 040a 	add.w	r4, r3, sl
    9160:	f9bb 200c 	ldrsh.w	r2, [fp, #12]
    9164:	f89b 3017 	ldrb.w	r3, [fp, #23]
    9168:	9300      	str	r3, [sp, #0]
    916a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    916c:	9907      	ldr	r1, [sp, #28]
    916e:	4620      	mov	r0, r4
    9170:	47b8      	blx	r7
    9172:	4450      	add	r0, sl
    9174:	444d      	add	r5, r9
    9176:	b22d      	sxth	r5, r5
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
    9178:	2e00      	cmp	r6, #0
    917a:	d0e1      	beq.n	9140 <lv_draw_label+0x114>
    917c:	f515 6f80 	cmn.w	r5, #1024	; 0x400
    9180:	dbde      	blt.n	9140 <lv_draw_label+0x114>
    9182:	6833      	ldr	r3, [r6, #0]
    9184:	2b00      	cmp	r3, #0
    9186:	dadb      	bge.n	9140 <lv_draw_label+0x114>
            hint->line_start = line_start;
    9188:	f8c6 a000 	str.w	sl, [r6]
            hint->y          = pos.y - coords->y1;
    918c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    918e:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
    9192:	1aeb      	subs	r3, r5, r3
    9194:	6073      	str	r3, [r6, #4]
            hint->coord_y    = coords->y1;
    9196:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
    919a:	60b3      	str	r3, [r6, #8]
    919c:	e7d0      	b.n	9140 <lv_draw_label+0x114>
    919e:	460e      	mov	r6, r1
    91a0:	950f      	str	r5, [sp, #60]	; 0x3c
    if(dsc->flag & LV_TXT_FLAG_CENTER) {
    91a2:	f89b 2017 	ldrb.w	r2, [fp, #23]
    91a6:	f012 0f04 	tst.w	r2, #4
    91aa:	d132      	bne.n	9212 <lv_draw_label+0x1e6>
    else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
    91ac:	f012 0f08 	tst.w	r2, #8
    91b0:	d149      	bne.n	9246 <lv_draw_label+0x21a>
    lv_opa_t opa = dsc->opa;
    91b2:	f89b 3008 	ldrb.w	r3, [fp, #8]
    91b6:	930c      	str	r3, [sp, #48]	; 0x30
    uint16_t sel_start = dsc->sel_start;
    91b8:	f8bb 700e 	ldrh.w	r7, [fp, #14]
    uint16_t sel_end = dsc->sel_end;
    91bc:	f8bb 3010 	ldrh.w	r3, [fp, #16]
    91c0:	4619      	mov	r1, r3
    91c2:	461c      	mov	r4, r3
    if(sel_start > sel_end) {
    91c4:	429f      	cmp	r7, r3
    91c6:	d902      	bls.n	91ce <lv_draw_label+0x1a2>
    91c8:	463b      	mov	r3, r7
        sel_start = sel_end;
    91ca:	460f      	mov	r7, r1
        sel_end = tmp;
    91cc:	461c      	mov	r4, r3
    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
    91ce:	f89b 3018 	ldrb.w	r3, [fp, #24]
    91d2:	f013 0f03 	tst.w	r3, #3
    91d6:	d14d      	bne.n	9274 <lv_draw_label+0x248>
    lv_draw_rect_dsc_init(&draw_dsc_sel);
    91d8:	a83d      	add	r0, sp, #244	; 0xf4
    91da:	4b4c      	ldr	r3, [pc, #304]	; (930c <lv_draw_label+0x2e0>)
    91dc:	4798      	blx	r3
    draw_dsc_sel.bg_color = dsc->sel_color;
    91de:	f8bb 3002 	ldrh.w	r3, [fp, #2]
    91e2:	f8ad 30f6 	strh.w	r3, [sp, #246]	; 0xf6
    91e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    91e8:	2bfa      	cmp	r3, #250	; 0xfa
    91ea:	bf88      	it	hi
    91ec:	23ff      	movhi	r3, #255	; 0xff
    91ee:	9317      	str	r3, [sp, #92]	; 0x5c
    91f0:	fa1f f389 	uxth.w	r3, r9
    91f4:	9314      	str	r3, [sp, #80]	; 0x50
    91f6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    91fa:	9312      	str	r3, [sp, #72]	; 0x48
    while(txt[line_start] != '\0') {
    91fc:	9d1c      	ldr	r5, [sp, #112]	; 0x70
    uint16_t par_start = 0;
    91fe:	2300      	movs	r3, #0
    9200:	9319      	str	r3, [sp, #100]	; 0x64
    9202:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    9206:	46ba      	mov	sl, r7
    9208:	46a0      	mov	r8, r4
    920a:	46d9      	mov	r9, fp
    920c:	46b3      	mov	fp, r6
    while(txt[line_start] != '\0') {
    920e:	f000 bd98 	b.w	9d42 <lv_draw_label+0xd16>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
    9212:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
    9216:	ebaa 0101 	sub.w	r1, sl, r1
    921a:	9200      	str	r2, [sp, #0]
    921c:	9a07      	ldr	r2, [sp, #28]
    921e:	b289      	uxth	r1, r1
    9220:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9222:	4430      	add	r0, r6
    9224:	4c3a      	ldr	r4, [pc, #232]	; (9310 <lv_draw_label+0x2e4>)
    9226:	47a0      	blx	r4
    9228:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    922a:	8893      	ldrh	r3, [r2, #4]
    922c:	3301      	adds	r3, #1
    922e:	8812      	ldrh	r2, [r2, #0]
    9230:	1a9b      	subs	r3, r3, r2
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
    9232:	b21b      	sxth	r3, r3
    9234:	1a18      	subs	r0, r3, r0
    9236:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    923a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    923c:	eb03 0360 	add.w	r3, r3, r0, asr #1
    9240:	b21b      	sxth	r3, r3
    9242:	931c      	str	r3, [sp, #112]	; 0x70
    9244:	e7b5      	b.n	91b2 <lv_draw_label+0x186>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
    9246:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
    924a:	ebaa 0101 	sub.w	r1, sl, r1
    924e:	9200      	str	r2, [sp, #0]
    9250:	9a07      	ldr	r2, [sp, #28]
    9252:	b289      	uxth	r1, r1
    9254:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9256:	4430      	add	r0, r6
    9258:	4c2d      	ldr	r4, [pc, #180]	; (9310 <lv_draw_label+0x2e4>)
    925a:	47a0      	blx	r4
    925c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    925e:	8893      	ldrh	r3, [r2, #4]
    9260:	3301      	adds	r3, #1
    9262:	8812      	ldrh	r2, [r2, #0]
    9264:	1a9b      	subs	r3, r3, r2
        pos.x += lv_area_get_width(coords) - line_width;
    9266:	b21b      	sxth	r3, r3
    9268:	1a1b      	subs	r3, r3, r0
    926a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    926c:	4413      	add	r3, r2
    926e:	b21b      	sxth	r3, r3
    9270:	931c      	str	r3, [sp, #112]	; 0x70
    9272:	e79e      	b.n	91b2 <lv_draw_label+0x186>
        lv_draw_line_dsc_init(&line_dsc);
    9274:	a853      	add	r0, sp, #332	; 0x14c
    9276:	4b27      	ldr	r3, [pc, #156]	; (9314 <lv_draw_label+0x2e8>)
    9278:	4798      	blx	r3
        line_dsc.color = dsc->color;
    927a:	f8bb 3000 	ldrh.w	r3, [fp]
    927e:	f8ad 314c 	strh.w	r3, [sp, #332]	; 0x14c
        line_dsc.width = (dsc->font->line_height + 5) / 10;    /*+5 for rounding*/
    9282:	f8db 3004 	ldr.w	r3, [fp, #4]
    9286:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    928a:	3305      	adds	r3, #5
    928c:	4a22      	ldr	r2, [pc, #136]	; (9318 <lv_draw_label+0x2ec>)
    928e:	fb82 1203 	smull	r1, r2, r2, r3
    9292:	17db      	asrs	r3, r3, #31
    9294:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
    9298:	f8ad 314e 	strh.w	r3, [sp, #334]	; 0x14e
        line_dsc.opa = dsc->opa;
    929c:	f89b 3008 	ldrb.w	r3, [fp, #8]
    92a0:	f88d 3154 	strb.w	r3, [sp, #340]	; 0x154
        line_dsc.blend_mode = dsc->blend_mode;
    92a4:	f89d 3155 	ldrb.w	r3, [sp, #341]	; 0x155
    92a8:	f89b 2019 	ldrb.w	r2, [fp, #25]
    92ac:	f362 0301 	bfi	r3, r2, #0, #2
    92b0:	f88d 3155 	strb.w	r3, [sp, #341]	; 0x155
    92b4:	e790      	b.n	91d8 <lv_draw_label+0x1ac>
            uint16_t logical_char_pos = 0;
    92b6:	2600      	movs	r6, #0
    92b8:	e2b2      	b.n	9820 <lv_draw_label+0x7f4>
    92ba:	2600      	movs	r6, #0
    92bc:	e2b0      	b.n	9820 <lv_draw_label+0x7f4>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
    92be:	9b08      	ldr	r3, [sp, #32]
    92c0:	b92b      	cbnz	r3, 92ce <lv_draw_label+0x2a2>
                        par_start = i;
    92c2:	f8bd 3148 	ldrh.w	r3, [sp, #328]	; 0x148
    92c6:	9319      	str	r3, [sp, #100]	; 0x64
                        cmd_state = CMD_STATE_PAR;
    92c8:	2301      	movs	r3, #1
    92ca:	9308      	str	r3, [sp, #32]
                        continue;
    92cc:	e293      	b.n	97f6 <lv_draw_label+0x7ca>
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char */
    92ce:	9b08      	ldr	r3, [sp, #32]
    92d0:	2b01      	cmp	r3, #1
    92d2:	f000 85b3 	beq.w	9e3c <lv_draw_label+0xe10>
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end */
    92d6:	2b02      	cmp	r3, #2
    92d8:	f000 84f8 	beq.w	9ccc <lv_draw_label+0xca0>
            lv_color_t color = dsc->color;
    92dc:	9b05      	ldr	r3, [sp, #20]
    92de:	881d      	ldrh	r5, [r3, #0]
    92e0:	e2bd      	b.n	985e <lv_draw_label+0x832>
                    if(letter == ' ') {
    92e2:	2c20      	cmp	r4, #32
    92e4:	f040 8287 	bne.w	97f6 <lv_draw_label+0x7ca>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
    92e8:	9b52      	ldr	r3, [sp, #328]	; 0x148
    92ea:	9a19      	ldr	r2, [sp, #100]	; 0x64
    92ec:	1a9b      	subs	r3, r3, r2
    92ee:	2b07      	cmp	r3, #7
    92f0:	d014      	beq.n	931c <lv_draw_label+0x2f0>
                            recolor.full = dsc->color.full;
    92f2:	9b05      	ldr	r3, [sp, #20]
    92f4:	881b      	ldrh	r3, [r3, #0]
    92f6:	930d      	str	r3, [sp, #52]	; 0x34
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
    92f8:	2302      	movs	r3, #2
    92fa:	9308      	str	r3, [sp, #32]
    92fc:	e27b      	b.n	97f6 <lv_draw_label+0x7ca>
    92fe:	bf00      	nop
    9300:	00010719 	.word	0x00010719
    9304:	000127c1 	.word	0x000127c1
    9308:	000124f5 	.word	0x000124f5
    930c:	0000b7c5 	.word	0x0000b7c5
    9310:	00012721 	.word	0x00012721
    9314:	00009e5d 	.word	0x00009e5d
    9318:	66666667 	.word	0x66666667
                            _lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
    931c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    931e:	1898      	adds	r0, r3, r2
    9320:	1e43      	subs	r3, r0, #1
    9322:	3005      	adds	r0, #5
    uint8_t * d8 = (uint8_t *)dst;
    9324:	aa3a      	add	r2, sp, #232	; 0xe8
    9326:	9f05      	ldr	r7, [sp, #20]
        *d8 = *s8;
    9328:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    932c:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    9330:	4283      	cmp	r3, r0
    9332:	d1f9      	bne.n	9328 <lv_draw_label+0x2fc>
    9334:	9705      	str	r7, [sp, #20]
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
    9336:	f89d 00e8 	ldrb.w	r0, [sp, #232]	; 0xe8
    933a:	4caf      	ldr	r4, [pc, #700]	; (95f8 <lv_draw_label+0x5cc>)
    933c:	47a0      	blx	r4
    933e:	4605      	mov	r5, r0
    9340:	f89d 00e9 	ldrb.w	r0, [sp, #233]	; 0xe9
    9344:	47a0      	blx	r4
    9346:	eb00 1605 	add.w	r6, r0, r5, lsl #4
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
    934a:	f89d 00ea 	ldrb.w	r0, [sp, #234]	; 0xea
    934e:	47a0      	blx	r4
    9350:	4605      	mov	r5, r0
    9352:	f89d 00eb 	ldrb.w	r0, [sp, #235]	; 0xeb
    9356:	47a0      	blx	r4
    9358:	eb00 1505 	add.w	r5, r0, r5, lsl #4
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
    935c:	f89d 00ec 	ldrb.w	r0, [sp, #236]	; 0xec
    9360:	47a0      	blx	r4
    9362:	4607      	mov	r7, r0
    9364:	f89d 00ed 	ldrb.w	r0, [sp, #237]	; 0xed
    9368:	47a0      	blx	r4
    936a:	eb00 1307 	add.w	r3, r0, r7, lsl #4
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
    936e:	f3c3 03c4 	ubfx	r3, r3, #3, #5
    9372:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    9374:	f363 0204 	bfi	r2, r3, #0, #5
    9378:	4613      	mov	r3, r2
    937a:	f3c5 0585 	ubfx	r5, r5, #2, #6
    937e:	f365 134a 	bfi	r3, r5, #5, #6
    9382:	461a      	mov	r2, r3
    9384:	f3c6 03c4 	ubfx	r3, r6, #3, #5
    9388:	f363 22cf 	bfi	r2, r3, #11, #5
    938c:	f8ad 20a0 	strh.w	r2, [sp, #160]	; 0xa0
    9390:	b293      	uxth	r3, r2
    9392:	930d      	str	r3, [sp, #52]	; 0x34
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
    9394:	2302      	movs	r3, #2
    9396:	9308      	str	r3, [sp, #32]
    9398:	e22d      	b.n	97f6 <lv_draw_label+0x7ca>
                    sel_coords.x1 = pos.x;
    939a:	f8ad 90e8 	strh.w	r9, [sp, #232]	; 0xe8
                    sel_coords.y1 = pos.y;
    939e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    93a0:	f8ad 10ea 	strh.w	r1, [sp, #234]	; 0xea
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
    93a4:	9b05      	ldr	r3, [sp, #20]
    93a6:	899b      	ldrh	r3, [r3, #12]
    93a8:	3b01      	subs	r3, #1
    93aa:	444b      	add	r3, r9
    93ac:	4403      	add	r3, r0
    93ae:	f8ad 30ec 	strh.w	r3, [sp, #236]	; 0xec
                    sel_coords.y2 = pos.y + line_height - 1;
    93b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    93b4:	3b01      	subs	r3, #1
    93b6:	440b      	add	r3, r1
    93b8:	f8ad 30ee 	strh.w	r3, [sp, #238]	; 0xee
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
    93bc:	aa3d      	add	r2, sp, #244	; 0xf4
    93be:	990e      	ldr	r1, [sp, #56]	; 0x38
    93c0:	a83a      	add	r0, sp, #232	; 0xe8
    93c2:	4b8e      	ldr	r3, [pc, #568]	; (95fc <lv_draw_label+0x5d0>)
    93c4:	4798      	blx	r3
    93c6:	e25b      	b.n	9880 <lv_draw_label+0x854>
            bitmask_init  = 0xC0;
    93c8:	23c0      	movs	r3, #192	; 0xc0
    93ca:	931d      	str	r3, [sp, #116]	; 0x74
            bpp_opa_table = _lv_bpp2_opa_table;
    93cc:	4b8c      	ldr	r3, [pc, #560]	; (9600 <lv_draw_label+0x5d4>)
    93ce:	9321      	str	r3, [sp, #132]	; 0x84
    int32_t box_w = g->box_w;
    93d0:	f8bd 30ea 	ldrh.w	r3, [sp, #234]	; 0xea
    93d4:	469c      	mov	ip, r3
    int32_t box_h = g->box_h;
    93d6:	f8bd 10ec 	ldrh.w	r1, [sp, #236]	; 0xec
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
    93da:	fb04 f203 	mul.w	r2, r4, r3
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : (clip_area->x1 - pos_x) * 3;
    93de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    93e0:	f9b3 3000 	ldrsh.w	r3, [r3]
    93e4:	9f16      	ldr	r7, [sp, #88]	; 0x58
    93e6:	429f      	cmp	r7, r3
    93e8:	bfba      	itte	lt
    93ea:	1bdb      	sublt	r3, r3, r7
    93ec:	eb03 0343 	addlt.w	r3, r3, r3, lsl #1
    93f0:	2300      	movge	r3, #0
    93f2:	932a      	str	r3, [sp, #168]	; 0xa8
    int32_t col_end   = pos_x + box_w / 3 <= clip_area->x2 ? box_w : (clip_area->x2 - pos_x + 1) * 3;
    93f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    93f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    93fa:	4667      	mov	r7, ip
    93fc:	4881      	ldr	r0, [pc, #516]	; (9604 <lv_draw_label+0x5d8>)
    93fe:	fb80 7007 	smull	r7, r0, r0, r7
    9402:	9f16      	ldr	r7, [sp, #88]	; 0x58
    9404:	4438      	add	r0, r7
    9406:	4298      	cmp	r0, r3
    9408:	bfc3      	ittte	gt
    940a:	1bdb      	subgt	r3, r3, r7
    940c:	3301      	addgt	r3, #1
    940e:	eb03 0343 	addgt.w	r3, r3, r3, lsl #1
    9412:	4663      	movle	r3, ip
    9414:	9315      	str	r3, [sp, #84]	; 0x54
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
    9416:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9418:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    941c:	9f1e      	ldr	r7, [sp, #120]	; 0x78
    941e:	429f      	cmp	r7, r3
    9420:	bfb4      	ite	lt
    9422:	1bdb      	sublt	r3, r3, r7
    9424:	2300      	movge	r3, #0
    9426:	9326      	str	r3, [sp, #152]	; 0x98
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
    9428:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    942a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    942e:	9f1e      	ldr	r7, [sp, #120]	; 0x78
    9430:	19c8      	adds	r0, r1, r7
    9432:	4298      	cmp	r0, r3
    9434:	f340 80a8 	ble.w	9588 <lv_draw_label+0x55c>
    9438:	1bdb      	subs	r3, r3, r7
    943a:	3301      	adds	r3, #1
    943c:	932b      	str	r3, [sp, #172]	; 0xac
    943e:	f005 031f 	and.w	r3, r5, #31
    9442:	9323      	str	r3, [sp, #140]	; 0x8c
    9444:	f3c5 1345 	ubfx	r3, r5, #5, #6
    9448:	9325      	str	r3, [sp, #148]	; 0x94
    944a:	f3c5 23c4 	ubfx	r3, r5, #11, #5
    944e:	9324      	str	r3, [sp, #144]	; 0x90
    int32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
    9450:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    9452:	fb04 f303 	mul.w	r3, r4, r3
    9456:	9826      	ldr	r0, [sp, #152]	; 0x98
    9458:	fb00 3302 	mla	r3, r0, r2, r3
    map_p += bit_ofs >> 3;
    945c:	eb0e 05e3 	add.w	r5, lr, r3, asr #3
    9460:	9520      	str	r5, [sp, #128]	; 0x80
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
    9462:	f003 0507 	and.w	r5, r3, #7
    9466:	9532      	str	r5, [sp, #200]	; 0xc8
    int32_t mask_buf_size = box_w * box_h > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : g->box_w * g->box_h;
    9468:	4667      	mov	r7, ip
    946a:	fb01 fe0c 	mul.w	lr, r1, ip
    946e:	4672      	mov	r2, lr
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
    9470:	f5be 7ff0 	cmp.w	lr, #480	; 0x1e0
    9474:	bfa8      	it	ge
    9476:	f44f 72f0 	movge.w	r2, #480	; 0x1e0
    947a:	922c      	str	r2, [sp, #176]	; 0xb0
    947c:	4610      	mov	r0, r2
    947e:	4d62      	ldr	r5, [pc, #392]	; (9608 <lv_draw_label+0x5dc>)
    9480:	47a8      	blx	r5
    9482:	9022      	str	r0, [sp, #136]	; 0x88
    lv_color_t * color_buf = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
    9484:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    9486:	0050      	lsls	r0, r2, #1
    9488:	47a8      	blx	r5
    948a:	9031      	str	r0, [sp, #196]	; 0xc4
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    948c:	4b5f      	ldr	r3, [pc, #380]	; (960c <lv_draw_label+0x5e0>)
    948e:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    9490:	4b5f      	ldr	r3, [pc, #380]	; (9610 <lv_draw_label+0x5e4>)
    9492:	4798      	blx	r3
    9494:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
    9498:	8a83      	ldrh	r3, [r0, #20]
    949a:	3301      	adds	r3, #1
    949c:	1b5b      	subs	r3, r3, r5
    int32_t vdb_width     = lv_area_get_width(&vdb->area);
    949e:	fa0f fe83 	sxth.w	lr, r3
    94a2:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
    94a6:	6881      	ldr	r1, [r0, #8]
    vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
    94a8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    94aa:	4a56      	ldr	r2, [pc, #344]	; (9604 <lv_draw_label+0x5d8>)
    94ac:	fb82 e203 	smull	lr, r2, r2, r3
    94b0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
    94b4:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
    94b8:	981e      	ldr	r0, [sp, #120]	; 0x78
    94ba:	1ac3      	subs	r3, r0, r3
    94bc:	981f      	ldr	r0, [sp, #124]	; 0x7c
    94be:	4686      	mov	lr, r0
    94c0:	9816      	ldr	r0, [sp, #88]	; 0x58
    94c2:	fb0e 0303 	mla	r3, lr, r3, r0
    94c6:	1b5b      	subs	r3, r3, r5
    vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
    94c8:	9d26      	ldr	r5, [sp, #152]	; 0x98
    94ca:	981f      	ldr	r0, [sp, #124]	; 0x7c
    94cc:	fb00 2005 	mla	r0, r0, r5, r2
    94d0:	4403      	add	r3, r0
    94d2:	eb01 0143 	add.w	r1, r1, r3, lsl #1
    94d6:	911e      	str	r1, [sp, #120]	; 0x78
    map_area.x1 = col_start / 3 + pos_x;
    94d8:	b2b6      	uxth	r6, r6
    94da:	4432      	add	r2, r6
    94dc:	f8ad 20e0 	strh.w	r2, [sp, #224]	; 0xe0
    map_area.x2 = col_end / 3  + pos_x - 1;
    94e0:	9815      	ldr	r0, [sp, #84]	; 0x54
    94e2:	4686      	mov	lr, r0
    94e4:	4947      	ldr	r1, [pc, #284]	; (9604 <lv_draw_label+0x5d8>)
    94e6:	fb81 e30e 	smull	lr, r3, r1, lr
    94ea:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
    94ee:	3e01      	subs	r6, #1
    94f0:	4433      	add	r3, r6
    94f2:	f8ad 30e4 	strh.w	r3, [sp, #228]	; 0xe4
    map_area.y1 = row_start + pos_y;
    94f6:	9e18      	ldr	r6, [sp, #96]	; 0x60
    94f8:	46b6      	mov	lr, r6
    94fa:	44ae      	add	lr, r5
    94fc:	fa0f f38e 	sxth.w	r3, lr
    9500:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
    map_area.y2 = map_area.y1;
    9504:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
    9508:	4b42      	ldr	r3, [pc, #264]	; (9614 <lv_draw_label+0x5e8>)
    950a:	4798      	blx	r3
    950c:	902d      	str	r0, [sp, #180]	; 0xb4
    for(row = row_start ; row < row_end; row++) {
    950e:	9e2b      	ldr	r6, [sp, #172]	; 0xac
    9510:	42b5      	cmp	r5, r6
    9512:	f280 814d 	bge.w	97b0 <lv_draw_label+0x784>
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
    9516:	9915      	ldr	r1, [sp, #84]	; 0x54
    9518:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    951a:	1a8b      	subs	r3, r1, r2
    951c:	461e      	mov	r6, r3
    951e:	932e      	str	r3, [sp, #184]	; 0xb8
        col_bit += ((box_w - col_end) + col_start) * bpp;
    9520:	1a7b      	subs	r3, r7, r1
    9522:	4413      	add	r3, r2
    9524:	fb04 f303 	mul.w	r3, r4, r3
    9528:	932f      	str	r3, [sp, #188]	; 0xbc
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
    952a:	4631      	mov	r1, r6
    952c:	4e35      	ldr	r6, [pc, #212]	; (9604 <lv_draw_label+0x5d8>)
    952e:	fb86 6301 	smull	r6, r3, r6, r1
    9532:	ebc3 73e1 	rsb	r3, r3, r1, asr #31
    9536:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    9538:	4413      	add	r3, r2
    953a:	005b      	lsls	r3, r3, #1
    953c:	9330      	str	r3, [sp, #192]	; 0xc0
    953e:	2300      	movs	r3, #0
    9540:	9327      	str	r3, [sp, #156]	; 0x9c
                col_bit = 0;
    9542:	9316      	str	r3, [sp, #88]	; 0x58
    9544:	f8cd b0cc 	str.w	fp, [sp, #204]	; 0xcc
    9548:	f8cd a0d0 	str.w	sl, [sp, #208]	; 0xd0
    954c:	f8cd 80d4 	str.w	r8, [sp, #212]	; 0xd4
    9550:	46a3      	mov	fp, r4
    9552:	f8dd a0c4 	ldr.w	sl, [sp, #196]	; 0xc4
    9556:	9d32      	ldr	r5, [sp, #200]	; 0xc8
    9558:	f8cd 90c8 	str.w	r9, [sp, #200]	; 0xc8
    955c:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
    9560:	9f20      	ldr	r7, [sp, #128]	; 0x80
    9562:	e0d9      	b.n	9718 <lv_draw_label+0x6ec>
    if(bpp == 3) bpp = 4;
    9564:	2404      	movs	r4, #4
            bitmask_init  = 0xF0;
    9566:	23f0      	movs	r3, #240	; 0xf0
    9568:	931d      	str	r3, [sp, #116]	; 0x74
            bpp_opa_table = _lv_bpp4_opa_table;
    956a:	4b2b      	ldr	r3, [pc, #172]	; (9618 <lv_draw_label+0x5ec>)
    956c:	9321      	str	r3, [sp, #132]	; 0x84
    956e:	e72f      	b.n	93d0 <lv_draw_label+0x3a4>
    uint32_t bpp = g->bpp;
    9570:	2408      	movs	r4, #8
            bitmask_init  = 0xFF;
    9572:	23ff      	movs	r3, #255	; 0xff
    9574:	931d      	str	r3, [sp, #116]	; 0x74
            bpp_opa_table = _lv_bpp8_opa_table;
    9576:	4b29      	ldr	r3, [pc, #164]	; (961c <lv_draw_label+0x5f0>)
    9578:	9321      	str	r3, [sp, #132]	; 0x84
    957a:	e729      	b.n	93d0 <lv_draw_label+0x3a4>
    uint32_t bpp = g->bpp;
    957c:	2401      	movs	r4, #1
            bitmask_init  = 0x80;
    957e:	2380      	movs	r3, #128	; 0x80
    9580:	931d      	str	r3, [sp, #116]	; 0x74
            bpp_opa_table = _lv_bpp1_opa_table;
    9582:	4b27      	ldr	r3, [pc, #156]	; (9620 <lv_draw_label+0x5f4>)
    9584:	9321      	str	r3, [sp, #132]	; 0x84
    9586:	e723      	b.n	93d0 <lv_draw_label+0x3a4>
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
    9588:	912b      	str	r1, [sp, #172]	; 0xac
    958a:	e758      	b.n	943e <lv_draw_label+0x412>
                    px_opa = bpp == 8 ? letter_px : bpp_opa_table[letter_px];
    958c:	2c08      	cmp	r4, #8
    958e:	d004      	beq.n	959a <lv_draw_label+0x56e>
    9590:	b2c9      	uxtb	r1, r1
    9592:	9821      	ldr	r0, [sp, #132]	; 0x84
    9594:	5c40      	ldrb	r0, [r0, r1]
    9596:	e000      	b.n	959a <lv_draw_label+0x56e>
                px_opa = 0;
    9598:	9816      	ldr	r0, [sp, #88]	; 0x58
            font_rgb[subpx_cnt] = px_opa;
    959a:	a958      	add	r1, sp, #352	; 0x160
    959c:	4419      	add	r1, r3
    959e:	f801 0c84 	strb.w	r0, [r1, #-132]
            subpx_cnt ++;
    95a2:	3301      	adds	r3, #1
            if(subpx_cnt == 3) {
    95a4:	2b03      	cmp	r3, #3
    95a6:	d03d      	beq.n	9624 <lv_draw_label+0x5f8>
            if(col_bit < 8 - bpp) {
    95a8:	455a      	cmp	r2, fp
    95aa:	f080 8094 	bcs.w	96d6 <lv_draw_label+0x6aa>
                col_bit += bpp;
    95ae:	18a5      	adds	r5, r4, r2
                bitmask = bitmask >> bpp;
    95b0:	fa2c fc04 	lsr.w	ip, ip, r4
        for(col = col_start; col < col_end; col++) {
    95b4:	f10e 0e01 	add.w	lr, lr, #1
    95b8:	9a15      	ldr	r2, [sp, #84]	; 0x54
    95ba:	4572      	cmp	r2, lr
    95bc:	f000 8090 	beq.w	96e0 <lv_draw_label+0x6b4>
            letter_px = (*map_p & bitmask) >> (8 - col_bit - bpp);
    95c0:	462a      	mov	r2, r5
    95c2:	7839      	ldrb	r1, [r7, #0]
    95c4:	ea01 000c 	and.w	r0, r1, ip
    95c8:	f1c5 0108 	rsb	r1, r5, #8
    95cc:	1b09      	subs	r1, r1, r4
    95ce:	fa20 f101 	lsr.w	r1, r0, r1
            if(letter_px != 0) {
    95d2:	f011 00ff 	ands.w	r0, r1, #255	; 0xff
    95d6:	d0df      	beq.n	9598 <lv_draw_label+0x56c>
                if(opa == LV_OPA_COVER) {
    95d8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    95da:	2dff      	cmp	r5, #255	; 0xff
    95dc:	d0d6      	beq.n	958c <lv_draw_label+0x560>
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
    95de:	2c08      	cmp	r4, #8
    95e0:	bf0f      	iteee	eq
    95e2:	b2c8      	uxtbeq	r0, r1
                             : (uint32_t)((uint32_t)bpp_opa_table[letter_px] * opa) >> 8;
    95e4:	b2c9      	uxtbne	r1, r1
    95e6:	9821      	ldrne	r0, [sp, #132]	; 0x84
    95e8:	5c40      	ldrbne	r0, [r0, r1]
    95ea:	9917      	ldr	r1, [sp, #92]	; 0x5c
    95ec:	fb01 f000 	mul.w	r0, r1, r0
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
    95f0:	f3c0 2007 	ubfx	r0, r0, #8, #8
    95f4:	e7d1      	b.n	959a <lv_draw_label+0x56e>
    95f6:	bf00      	nop
    95f8:	00008f93 	.word	0x00008f93
    95fc:	0000b88d 	.word	0x0000b88d
    9600:	000178a8 	.word	0x000178a8
    9604:	55555556 	.word	0x55555556
    9608:	00011a65 	.word	0x00011a65
    960c:	00005789 	.word	0x00005789
    9610:	0001025d 	.word	0x0001025d
    9614:	0000b421 	.word	0x0000b421
    9618:	000178ac 	.word	0x000178ac
    961c:	000178bc 	.word	0x000178bc
    9620:	000178a4 	.word	0x000178a4
                res_color.ch.red = (uint32_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
    9624:	f89d 00dc 	ldrb.w	r0, [sp, #220]	; 0xdc
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red, vdb_buf_tmp->ch.green, vdb_buf_tmp->ch.blue};
    9628:	f899 3001 	ldrb.w	r3, [r9, #1]
                res_color.ch.red = (uint32_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
    962c:	08db      	lsrs	r3, r3, #3
    962e:	f1c0 05ff 	rsb	r5, r0, #255	; 0xff
    9632:	9924      	ldr	r1, [sp, #144]	; 0x90
    9634:	fb00 f101 	mul.w	r1, r0, r1
    9638:	fb05 1303 	mla	r3, r5, r3, r1
    963c:	f3c3 2304 	ubfx	r3, r3, #8, #5
    9640:	931e      	str	r3, [sp, #120]	; 0x78
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
    9642:	f89d 80de 	ldrb.w	r8, [sp, #222]	; 0xde
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red, vdb_buf_tmp->ch.green, vdb_buf_tmp->ch.blue};
    9646:	f899 1000 	ldrb.w	r1, [r9]
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
    964a:	f001 011f 	and.w	r1, r1, #31
    964e:	f1c8 05ff 	rsb	r5, r8, #255	; 0xff
    9652:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    9654:	fb08 f303 	mul.w	r3, r8, r3
    9658:	fb05 3101 	mla	r1, r5, r1, r3
    965c:	f3c1 2304 	ubfx	r3, r1, #8, #5
    9660:	931f      	str	r3, [sp, #124]	; 0x7c
                res_color.ch.green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
    9662:	f89d 30dd 	ldrb.w	r3, [sp, #221]	; 0xdd
    9666:	9318      	str	r3, [sp, #96]	; 0x60
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red, vdb_buf_tmp->ch.green, vdb_buf_tmp->ch.blue};
    9668:	f8b9 3000 	ldrh.w	r3, [r9]
                res_color.ch.green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
    966c:	f3c3 1545 	ubfx	r5, r3, #5, #6
    9670:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9672:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
    9676:	9320      	str	r3, [sp, #128]	; 0x80
    9678:	9925      	ldr	r1, [sp, #148]	; 0x94
    967a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    967c:	fb03 f101 	mul.w	r1, r3, r1
    9680:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9682:	fb03 1305 	mla	r3, r3, r5, r1
    9686:	f3c3 2305 	ubfx	r3, r3, #8, #6
                if(font_rgb[0] == 0 && font_rgb[1] == 0 && font_rgb[2] == 0) mask_buf[mask_p] = LV_OPA_TRANSP;
    968a:	b938      	cbnz	r0, 969c <lv_draw_label+0x670>
    968c:	9918      	ldr	r1, [sp, #96]	; 0x60
    968e:	b929      	cbnz	r1, 969c <lv_draw_label+0x670>
    9690:	f1b8 0f00 	cmp.w	r8, #0
    9694:	d102      	bne.n	969c <lv_draw_label+0x670>
    9696:	9922      	ldr	r1, [sp, #136]	; 0x88
    9698:	5588      	strb	r0, [r1, r6]
    969a:	e003      	b.n	96a4 <lv_draw_label+0x678>
                else mask_buf[mask_p] = LV_OPA_COVER;
    969c:	9922      	ldr	r1, [sp, #136]	; 0x88
    969e:	f04f 30ff 	mov.w	r0, #4294967295
    96a2:	5588      	strb	r0, [r1, r6]
                color_buf[mask_p] = res_color;
    96a4:	eb0a 0546 	add.w	r5, sl, r6, lsl #1
    96a8:	f81a 0016 	ldrb.w	r0, [sl, r6, lsl #1]
    96ac:	991f      	ldr	r1, [sp, #124]	; 0x7c
    96ae:	f361 0004 	bfi	r0, r1, #0, #5
    96b2:	f80a 0016 	strb.w	r0, [sl, r6, lsl #1]
    96b6:	f83a 1016 	ldrh.w	r1, [sl, r6, lsl #1]
    96ba:	f363 114a 	bfi	r1, r3, #5, #6
    96be:	f82a 1016 	strh.w	r1, [sl, r6, lsl #1]
    96c2:	0a09      	lsrs	r1, r1, #8
    96c4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    96c6:	f363 01c7 	bfi	r1, r3, #3, #5
    96ca:	7069      	strb	r1, [r5, #1]
                mask_p++;
    96cc:	3601      	adds	r6, #1
                vdb_buf_tmp++;
    96ce:	f109 0902 	add.w	r9, r9, #2
                subpx_cnt = 0;
    96d2:	2300      	movs	r3, #0
    96d4:	e768      	b.n	95a8 <lv_draw_label+0x57c>
                map_p++;
    96d6:	3701      	adds	r7, #1
                bitmask = bitmask_init;
    96d8:	f8dd c074 	ldr.w	ip, [sp, #116]	; 0x74
                col_bit = 0;
    96dc:	9d16      	ldr	r5, [sp, #88]	; 0x58
    96de:	e769      	b.n	95b4 <lv_draw_label+0x588>
    96e0:	46a3      	mov	fp, r4
        if(other_mask_cnt) {
    96e2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    96e4:	bb43      	cbnz	r3, 9738 <lv_draw_label+0x70c>
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
    96e6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    96e8:	4433      	add	r3, r6
    96ea:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    96ec:	429a      	cmp	r2, r3
    96ee:	d940      	bls.n	9772 <lv_draw_label+0x746>
            map_area.y2 ++;
    96f0:	f8bd 30e6 	ldrh.w	r3, [sp, #230]	; 0xe6
    96f4:	3301      	adds	r3, #1
    96f6:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
    96fa:	9627      	str	r6, [sp, #156]	; 0x9c
        col_bit += ((box_w - col_end) + col_start) * bpp;
    96fc:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    96fe:	441d      	add	r5, r3
        map_p += (col_bit >> 3);
    9700:	eb07 07e5 	add.w	r7, r7, r5, asr #3
        col_bit = col_bit & 0x7;
    9704:	f005 0507 	and.w	r5, r5, #7
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
    9708:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    970a:	4499      	add	r9, r3
    for(row = row_start ; row < row_end; row++) {
    970c:	9b26      	ldr	r3, [sp, #152]	; 0x98
    970e:	3301      	adds	r3, #1
    9710:	9326      	str	r3, [sp, #152]	; 0x98
    9712:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    9714:	4293      	cmp	r3, r2
    9716:	da43      	bge.n	97a0 <lv_draw_label+0x774>
        bitmask = bitmask_init >> col_bit;
    9718:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    971a:	fa23 fc05 	lsr.w	ip, r3, r5
        for(col = col_start; col < col_end; col++) {
    971e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    9720:	9915      	ldr	r1, [sp, #84]	; 0x54
    9722:	428a      	cmp	r2, r1
    9724:	da06      	bge.n	9734 <lv_draw_label+0x708>
    9726:	4696      	mov	lr, r2
    9728:	9e27      	ldr	r6, [sp, #156]	; 0x9c
    972a:	2300      	movs	r3, #0
            if(col_bit < 8 - bpp) {
    972c:	465c      	mov	r4, fp
    972e:	f1cb 0b08 	rsb	fp, fp, #8
    9732:	e745      	b.n	95c0 <lv_draw_label+0x594>
        for(col = col_start; col < col_end; col++) {
    9734:	9e27      	ldr	r6, [sp, #156]	; 0x9c
    9736:	e7d4      	b.n	96e2 <lv_draw_label+0x6b6>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, map_area.x1, map_area.y2,
    9738:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    973a:	9a22      	ldr	r2, [sp, #136]	; 0x88
    973c:	4413      	add	r3, r2
    973e:	4698      	mov	r8, r3
    9740:	f9bd 10e0 	ldrsh.w	r1, [sp, #224]	; 0xe0
    9744:	f8bd 30e4 	ldrh.w	r3, [sp, #228]	; 0xe4
    9748:	3301      	adds	r3, #1
    974a:	1a5b      	subs	r3, r3, r1
    974c:	b21b      	sxth	r3, r3
    974e:	f9bd 20e6 	ldrsh.w	r2, [sp, #230]	; 0xe6
    9752:	4640      	mov	r0, r8
    9754:	4c92      	ldr	r4, [pc, #584]	; (99a0 <lv_draw_label+0x974>)
    9756:	47a0      	blx	r4
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
    9758:	2800      	cmp	r0, #0
    975a:	d1c4      	bne.n	96e6 <lv_draw_label+0x6ba>
    975c:	f8bd 10e4 	ldrh.w	r1, [sp, #228]	; 0xe4
    9760:	3101      	adds	r1, #1
    9762:	f8bd 30e0 	ldrh.w	r3, [sp, #224]	; 0xe0
    9766:	1ac9      	subs	r1, r1, r3
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&map_area));
    9768:	b209      	sxth	r1, r1
    976a:	4640      	mov	r0, r8
    976c:	4b8d      	ldr	r3, [pc, #564]	; (99a4 <lv_draw_label+0x978>)
    976e:	4798      	blx	r3
    9770:	e7b9      	b.n	96e6 <lv_draw_label+0x6ba>
            _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
    9772:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9774:	9302      	str	r3, [sp, #8]
    9776:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9778:	9301      	str	r3, [sp, #4]
    977a:	2302      	movs	r3, #2
    977c:	9300      	str	r3, [sp, #0]
    977e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9780:	4652      	mov	r2, sl
    9782:	a938      	add	r1, sp, #224	; 0xe0
    9784:	980e      	ldr	r0, [sp, #56]	; 0x38
    9786:	4e88      	ldr	r6, [pc, #544]	; (99a8 <lv_draw_label+0x97c>)
    9788:	47b0      	blx	r6
            map_area.y1 = map_area.y2 + 1;
    978a:	f8bd 30e6 	ldrh.w	r3, [sp, #230]	; 0xe6
    978e:	3301      	adds	r3, #1
    9790:	b21b      	sxth	r3, r3
    9792:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
            map_area.y2 = map_area.y1;
    9796:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
            mask_p = 0;
    979a:	2300      	movs	r3, #0
    979c:	9327      	str	r3, [sp, #156]	; 0x9c
    979e:	e7ad      	b.n	96fc <lv_draw_label+0x6d0>
    97a0:	f8dd b0cc 	ldr.w	fp, [sp, #204]	; 0xcc
    97a4:	f8dd a0d0 	ldr.w	sl, [sp, #208]	; 0xd0
    97a8:	f8dd 80d4 	ldr.w	r8, [sp, #212]	; 0xd4
    97ac:	f8dd 90c8 	ldr.w	r9, [sp, #200]	; 0xc8
    if(map_area.y1 != map_area.y2) {
    97b0:	f9bd 30e6 	ldrsh.w	r3, [sp, #230]	; 0xe6
    97b4:	f9bd 20e2 	ldrsh.w	r2, [sp, #226]	; 0xe2
    97b8:	429a      	cmp	r2, r3
    97ba:	d00e      	beq.n	97da <lv_draw_label+0x7ae>
        map_area.y2--;
    97bc:	3b01      	subs	r3, #1
    97be:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
        _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
    97c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    97c4:	9302      	str	r3, [sp, #8]
    97c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    97c8:	9301      	str	r3, [sp, #4]
    97ca:	2302      	movs	r3, #2
    97cc:	9300      	str	r3, [sp, #0]
    97ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
    97d0:	9a31      	ldr	r2, [sp, #196]	; 0xc4
    97d2:	a938      	add	r1, sp, #224	; 0xe0
    97d4:	980e      	ldr	r0, [sp, #56]	; 0x38
    97d6:	4c74      	ldr	r4, [pc, #464]	; (99a8 <lv_draw_label+0x97c>)
    97d8:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
    97da:	9822      	ldr	r0, [sp, #136]	; 0x88
    97dc:	4c73      	ldr	r4, [pc, #460]	; (99ac <lv_draw_label+0x980>)
    97de:	47a0      	blx	r4
    _lv_mem_buf_release(color_buf);
    97e0:	9831      	ldr	r0, [sp, #196]	; 0xc4
    97e2:	47a0      	blx	r4
            if(letter_w > 0) {
    97e4:	9a06      	ldr	r2, [sp, #24]
    97e6:	2a00      	cmp	r2, #0
    97e8:	dd05      	ble.n	97f6 <lv_draw_label+0x7ca>
                pos.x += letter_w + dsc->letter_space;
    97ea:	9b05      	ldr	r3, [sp, #20]
    97ec:	899b      	ldrh	r3, [r3, #12]
    97ee:	444b      	add	r3, r9
    97f0:	441a      	add	r2, r3
    97f2:	fa0f f982 	sxth.w	r9, r2
        while(i < line_end - line_start) {
    97f6:	9952      	ldr	r1, [sp, #328]	; 0x148
    97f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    97fa:	eba3 030b 	sub.w	r3, r3, fp
    97fe:	428b      	cmp	r3, r1
    9800:	f240 8267 	bls.w	9cd2 <lv_draw_label+0xca6>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
    9804:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9808:	459a      	cmp	sl, r3
    980a:	f43f ad54 	beq.w	92b6 <lv_draw_label+0x28a>
    980e:	4598      	cmp	r8, r3
    9810:	f43f ad53 	beq.w	92ba <lv_draw_label+0x28e>
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
    9814:	4459      	add	r1, fp
    9816:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9818:	4b65      	ldr	r3, [pc, #404]	; (99b0 <lv_draw_label+0x984>)
    981a:	681b      	ldr	r3, [r3, #0]
    981c:	4798      	blx	r3
    981e:	b286      	uxth	r6, r0
            uint32_t letter      = _lv_txt_encoded_next(bidi_txt, &i);
    9820:	4d64      	ldr	r5, [pc, #400]	; (99b4 <lv_draw_label+0x988>)
    9822:	682b      	ldr	r3, [r5, #0]
    9824:	a952      	add	r1, sp, #328	; 0x148
    9826:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    9828:	4638      	mov	r0, r7
    982a:	4798      	blx	r3
    982c:	4604      	mov	r4, r0
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
    982e:	682b      	ldr	r3, [r5, #0]
    9830:	2100      	movs	r1, #0
    9832:	9852      	ldr	r0, [sp, #328]	; 0x148
    9834:	4438      	add	r0, r7
    9836:	4798      	blx	r3
            if((dsc->flag & LV_TXT_FLAG_RECOLOR) != 0) {
    9838:	9b05      	ldr	r3, [sp, #20]
    983a:	7ddb      	ldrb	r3, [r3, #23]
    983c:	f013 0f01 	tst.w	r3, #1
    9840:	d006      	beq.n	9850 <lv_draw_label+0x824>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
    9842:	2c23      	cmp	r4, #35	; 0x23
    9844:	f43f ad3b 	beq.w	92be <lv_draw_label+0x292>
                if(cmd_state == CMD_STATE_PAR) {
    9848:	9b08      	ldr	r3, [sp, #32]
    984a:	2b01      	cmp	r3, #1
    984c:	f43f ad49 	beq.w	92e2 <lv_draw_label+0x2b6>
            lv_color_t color = dsc->color;
    9850:	9b05      	ldr	r3, [sp, #20]
    9852:	881d      	ldrh	r5, [r3, #0]
            if(cmd_state == CMD_STATE_IN) color = recolor;
    9854:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9856:	9a08      	ldr	r2, [sp, #32]
    9858:	2a02      	cmp	r2, #2
    985a:	bf08      	it	eq
    985c:	461d      	moveq	r5, r3
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
    985e:	4602      	mov	r2, r0
    9860:	4621      	mov	r1, r4
    9862:	9807      	ldr	r0, [sp, #28]
    9864:	4b54      	ldr	r3, [pc, #336]	; (99b8 <lv_draw_label+0x98c>)
    9866:	4798      	blx	r3
    9868:	9006      	str	r0, [sp, #24]
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
    986a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    986e:	459a      	cmp	sl, r3
    9870:	d006      	beq.n	9880 <lv_draw_label+0x854>
    9872:	4598      	cmp	r8, r3
    9874:	d004      	beq.n	9880 <lv_draw_label+0x854>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
    9876:	45b2      	cmp	sl, r6
    9878:	d802      	bhi.n	9880 <lv_draw_label+0x854>
    987a:	45b0      	cmp	r8, r6
    987c:	f63f ad8d 	bhi.w	939a <lv_draw_label+0x36e>
    if(opa < LV_OPA_MIN) return;
    9880:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9882:	2b04      	cmp	r3, #4
    9884:	d9ae      	bls.n	97e4 <lv_draw_label+0x7b8>
    if(font_p == NULL) {
    9886:	9807      	ldr	r0, [sp, #28]
    9888:	2800      	cmp	r0, #0
    988a:	d0ab      	beq.n	97e4 <lv_draw_label+0x7b8>
            lv_draw_letter(&pos, mask, font, letter, color, opa, dsc->blend_mode);
    988c:	9b05      	ldr	r3, [sp, #20]
    988e:	7e5b      	ldrb	r3, [r3, #25]
    9890:	9311      	str	r3, [sp, #68]	; 0x44
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
    9892:	2300      	movs	r3, #0
    9894:	4622      	mov	r2, r4
    9896:	a93a      	add	r1, sp, #232	; 0xe8
    9898:	4e48      	ldr	r6, [pc, #288]	; (99bc <lv_draw_label+0x990>)
    989a:	47b0      	blx	r6
    if(g_ret == false)  {
    989c:	2800      	cmp	r0, #0
    989e:	d0a1      	beq.n	97e4 <lv_draw_label+0x7b8>
    if((g.box_h == 0) && (g.box_w == 0)) return;
    98a0:	f8bd 20ec 	ldrh.w	r2, [sp, #236]	; 0xec
    98a4:	b91a      	cbnz	r2, 98ae <lv_draw_label+0x882>
    98a6:	f8bd 30ea 	ldrh.w	r3, [sp, #234]	; 0xea
    98aa:	2b00      	cmp	r3, #0
    98ac:	d09a      	beq.n	97e4 <lv_draw_label+0x7b8>
    int32_t pos_x = pos_p->x + g.ofs_x;
    98ae:	f9bd 60ee 	ldrsh.w	r6, [sp, #238]	; 0xee
    98b2:	444e      	add	r6, r9
    if(pos_x + g.box_w < clip_area->x1 ||
    98b4:	f8bd 30ea 	ldrh.w	r3, [sp, #234]	; 0xea
    98b8:	4433      	add	r3, r6
    98ba:	980e      	ldr	r0, [sp, #56]	; 0x38
    98bc:	f9b0 1000 	ldrsh.w	r1, [r0]
    98c0:	428b      	cmp	r3, r1
    98c2:	db8f      	blt.n	97e4 <lv_draw_label+0x7b8>
       pos_x > clip_area->x2 ||
    98c4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
    if(pos_x + g.box_w < clip_area->x1 ||
    98c8:	429e      	cmp	r6, r3
    98ca:	dc8b      	bgt.n	97e4 <lv_draw_label+0x7b8>
    int32_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
    98cc:	9f07      	ldr	r7, [sp, #28]
    98ce:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
    98d2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
    98d6:	1acb      	subs	r3, r1, r3
    98d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
    98da:	440b      	add	r3, r1
    98dc:	1a99      	subs	r1, r3, r2
    98de:	f9bd 30f0 	ldrsh.w	r3, [sp, #240]	; 0xf0
    98e2:	1acb      	subs	r3, r1, r3
    98e4:	461f      	mov	r7, r3
    98e6:	9318      	str	r3, [sp, #96]	; 0x60
       pos_y + g.box_h < clip_area->y1 ||
    98e8:	441a      	add	r2, r3
    98ea:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
       pos_x > clip_area->x2 ||
    98ee:	429a      	cmp	r2, r3
    98f0:	f6ff af78 	blt.w	97e4 <lv_draw_label+0x7b8>
       pos_y > clip_area->y2)  {
    98f4:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
       pos_y + g.box_h < clip_area->y1 ||
    98f8:	429f      	cmp	r7, r3
    98fa:	f73f af73 	bgt.w	97e4 <lv_draw_label+0x7b8>
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
    98fe:	4621      	mov	r1, r4
    9900:	9c07      	ldr	r4, [sp, #28]
    9902:	4620      	mov	r0, r4
    9904:	4b2e      	ldr	r3, [pc, #184]	; (99c0 <lv_draw_label+0x994>)
    9906:	4798      	blx	r3
    if(map_p == NULL) {
    9908:	4686      	mov	lr, r0
    990a:	2800      	cmp	r0, #0
    990c:	f43f af6a 	beq.w	97e4 <lv_draw_label+0x7b8>
    if(font_p->subpx) {
    9910:	7b23      	ldrb	r3, [r4, #12]
    9912:	f013 0f03 	tst.w	r3, #3
    9916:	d021      	beq.n	995c <lv_draw_label+0x930>
        draw_letter_subpx(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
    9918:	b233      	sxth	r3, r6
    991a:	9316      	str	r3, [sp, #88]	; 0x58
    991c:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
    9920:	931e      	str	r3, [sp, #120]	; 0x78
    uint32_t bpp = g->bpp;
    9922:	f89d 30f2 	ldrb.w	r3, [sp, #242]	; 0xf2
    9926:	461c      	mov	r4, r3
    if(bpp == 3) bpp = 4;
    9928:	2b03      	cmp	r3, #3
    992a:	f43f ae1b 	beq.w	9564 <lv_draw_label+0x538>
    switch(bpp) {
    992e:	3b01      	subs	r3, #1
    9930:	2b07      	cmp	r3, #7
    9932:	f63f af57 	bhi.w	97e4 <lv_draw_label+0x7b8>
    9936:	a201      	add	r2, pc, #4	; (adr r2, 993c <lv_draw_label+0x910>)
    9938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    993c:	0000957d 	.word	0x0000957d
    9940:	000093c9 	.word	0x000093c9
    9944:	000097e5 	.word	0x000097e5
    9948:	00009567 	.word	0x00009567
    994c:	000097e5 	.word	0x000097e5
    9950:	000097e5 	.word	0x000097e5
    9954:	000097e5 	.word	0x000097e5
    9958:	00009571 	.word	0x00009571
        draw_letter_normal(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
    995c:	b234      	sxth	r4, r6
    995e:	f9bd 0060 	ldrsh.w	r0, [sp, #96]	; 0x60
    9962:	f8ad 5094 	strh.w	r5, [sp, #148]	; 0x94
    uint32_t bpp = g->bpp;
    9966:	f89d 30f2 	ldrb.w	r3, [sp, #242]	; 0xf2
    996a:	9321      	str	r3, [sp, #132]	; 0x84
    if(bpp == 3) bpp = 4;
    996c:	2b03      	cmp	r3, #3
    996e:	f000 80dc 	beq.w	9b2a <lv_draw_label+0xafe>
    switch(bpp) {
    9972:	3b01      	subs	r3, #1
    9974:	2b07      	cmp	r3, #7
    9976:	f63f af35 	bhi.w	97e4 <lv_draw_label+0x7b8>
    997a:	a201      	add	r2, pc, #4	; (adr r2, 9980 <lv_draw_label+0x954>)
    997c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    9980:	00009b4d 	.word	0x00009b4d
    9984:	000099c5 	.word	0x000099c5
    9988:	000097e5 	.word	0x000097e5
    998c:	00009b2f 	.word	0x00009b2f
    9990:	000097e5 	.word	0x000097e5
    9994:	000097e5 	.word	0x000097e5
    9998:	000097e5 	.word	0x000097e5
    999c:	00009b3b 	.word	0x00009b3b
    99a0:	0000b379 	.word	0x0000b379
    99a4:	00011c17 	.word	0x00011c17
    99a8:	00007911 	.word	0x00007911
    99ac:	000116e5 	.word	0x000116e5
    99b0:	20000064 	.word	0x20000064
    99b4:	20000058 	.word	0x20000058
    99b8:	0000f325 	.word	0x0000f325
    99bc:	0000f31d 	.word	0x0000f31d
    99c0:	0000f315 	.word	0x0000f315
            shades = 4;
    99c4:	2304      	movs	r3, #4
            bitmask_init  = 0xC0;
    99c6:	22c0      	movs	r2, #192	; 0xc0
    99c8:	9215      	str	r2, [sp, #84]	; 0x54
            bpp_opa_table_p = _lv_bpp2_opa_table;
    99ca:	4aa5      	ldr	r2, [pc, #660]	; (9c60 <lv_draw_label+0xc34>)
    99cc:	9223      	str	r2, [sp, #140]	; 0x8c
    if(opa < LV_OPA_MAX) {
    99ce:	9917      	ldr	r1, [sp, #92]	; 0x5c
    99d0:	29f9      	cmp	r1, #249	; 0xf9
    99d2:	d82d      	bhi.n	9a30 <lv_draw_label+0xa04>
        if(prev_opa != opa || prev_bpp != bpp) {
    99d4:	4aa3      	ldr	r2, [pc, #652]	; (9c64 <lv_draw_label+0xc38>)
    99d6:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
    99da:	428a      	cmp	r2, r1
    99dc:	f000 80be 	beq.w	9b5c <lv_draw_label+0xb30>
            for(i = 0; i < shades; i++) {
    99e0:	b1e3      	cbz	r3, 9a1c <lv_draw_label+0x9f0>
    99e2:	9d23      	ldr	r5, [sp, #140]	; 0x8c
    99e4:	1e6a      	subs	r2, r5, #1
    99e6:	499f      	ldr	r1, [pc, #636]	; (9c64 <lv_draw_label+0xc38>)
    99e8:	3901      	subs	r1, #1
    99ea:	3b01      	subs	r3, #1
    99ec:	eb05 0c03 	add.w	ip, r5, r3
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
    99f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    99f2:	461d      	mov	r5, r3
    99f4:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
    99f8:	469b      	mov	fp, r3
    99fa:	9f05      	ldr	r7, [sp, #20]
    99fc:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    9a00:	2bff      	cmp	r3, #255	; 0xff
    9a02:	bf1a      	itte	ne
    9a04:	fb0b f303 	mulne.w	r3, fp, r3
    9a08:	f3c3 2307 	ubfxne	r3, r3, #8, #8
    9a0c:	462b      	moveq	r3, r5
    9a0e:	f801 3f01 	strb.w	r3, [r1, #1]!
            for(i = 0; i < shades; i++) {
    9a12:	4594      	cmp	ip, r2
    9a14:	d1f2      	bne.n	99fc <lv_draw_label+0x9d0>
    9a16:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
    9a1a:	9705      	str	r7, [sp, #20]
        prev_opa = opa;
    9a1c:	4b91      	ldr	r3, [pc, #580]	; (9c64 <lv_draw_label+0xc38>)
    9a1e:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
    9a22:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
        prev_bpp = bpp;
    9a26:	9a21      	ldr	r2, [sp, #132]	; 0x84
    9a28:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        bpp_opa_table_p = opa_table;
    9a2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9a2e:	9323      	str	r3, [sp, #140]	; 0x8c
    int32_t box_w = g->box_w;
    9a30:	f8bd 30ea 	ldrh.w	r3, [sp, #234]	; 0xea
    9a34:	9324      	str	r3, [sp, #144]	; 0x90
    int32_t box_h = g->box_h;
    9a36:	f8bd 20ec 	ldrh.w	r2, [sp, #236]	; 0xec
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
    9a3a:	9921      	ldr	r1, [sp, #132]	; 0x84
    9a3c:	fb01 fc03 	mul.w	ip, r1, r3
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
    9a40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9a42:	f9b3 3000 	ldrsh.w	r3, [r3]
    9a46:	429c      	cmp	r4, r3
    9a48:	bfb4      	ite	lt
    9a4a:	1b1b      	sublt	r3, r3, r4
    9a4c:	2300      	movge	r3, #0
    9a4e:	9316      	str	r3, [sp, #88]	; 0x58
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
    9a50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9a52:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    9a56:	9924      	ldr	r1, [sp, #144]	; 0x90
    9a58:	4421      	add	r1, r4
    9a5a:	4299      	cmp	r1, r3
    9a5c:	bfc6      	itte	gt
    9a5e:	1b1b      	subgt	r3, r3, r4
    9a60:	3301      	addgt	r3, #1
    9a62:	9b24      	ldrle	r3, [sp, #144]	; 0x90
    9a64:	9326      	str	r3, [sp, #152]	; 0x98
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
    9a66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9a68:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    9a6c:	4298      	cmp	r0, r3
    9a6e:	bfb4      	ite	lt
    9a70:	1a1b      	sublt	r3, r3, r0
    9a72:	2300      	movge	r3, #0
    9a74:	9320      	str	r3, [sp, #128]	; 0x80
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
    9a76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9a78:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    9a7c:	1811      	adds	r1, r2, r0
    9a7e:	4299      	cmp	r1, r3
    9a80:	bfc3      	ittte	gt
    9a82:	1a1b      	subgt	r3, r3, r0
    9a84:	3301      	addgt	r3, #1
    9a86:	931e      	strgt	r3, [sp, #120]	; 0x78
    9a88:	921e      	strle	r2, [sp, #120]	; 0x78
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
    9a8a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9a8c:	9322      	str	r3, [sp, #136]	; 0x88
    9a8e:	9921      	ldr	r1, [sp, #132]	; 0x84
    9a90:	fb03 f401 	mul.w	r4, r3, r1
    9a94:	9820      	ldr	r0, [sp, #128]	; 0x80
    9a96:	fb00 440c 	mla	r4, r0, ip, r4
    map_p += bit_ofs >> 3;
    9a9a:	eb0e 05d4 	add.w	r5, lr, r4, lsr #3
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
    9a9e:	f004 0407 	and.w	r4, r4, #7
    uint32_t mask_buf_size = box_w * box_h > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : box_w * box_h;
    9aa2:	9f24      	ldr	r7, [sp, #144]	; 0x90
    9aa4:	fb02 f207 	mul.w	r2, r2, r7
    9aa8:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
    9aac:	bfa8      	it	ge
    9aae:	f44f 72f0 	movge.w	r2, #480	; 0x1e0
    9ab2:	921f      	str	r2, [sp, #124]	; 0x7c
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
    9ab4:	4610      	mov	r0, r2
    9ab6:	4b6c      	ldr	r3, [pc, #432]	; (9c68 <lv_draw_label+0xc3c>)
    9ab8:	4798      	blx	r3
    9aba:	901d      	str	r0, [sp, #116]	; 0x74
    fill_area.x1 = col_start + pos_x;
    9abc:	b2b6      	uxth	r6, r6
    9abe:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9ac0:	18f3      	adds	r3, r6, r3
    9ac2:	f8ad 30e0 	strh.w	r3, [sp, #224]	; 0xe0
    fill_area.x2 = col_end  + pos_x - 1;
    9ac6:	3e01      	subs	r6, #1
    9ac8:	9a26      	ldr	r2, [sp, #152]	; 0x98
    9aca:	18b3      	adds	r3, r6, r2
    9acc:	f8ad 30e4 	strh.w	r3, [sp, #228]	; 0xe4
    fill_area.y1 = row_start + pos_y;
    9ad0:	9e18      	ldr	r6, [sp, #96]	; 0x60
    9ad2:	46b6      	mov	lr, r6
    9ad4:	9e20      	ldr	r6, [sp, #128]	; 0x80
    9ad6:	44b6      	add	lr, r6
    9ad8:	fa0f f38e 	sxth.w	r3, lr
    9adc:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
    fill_area.y2 = fill_area.y1;
    9ae0:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
    9ae4:	4b61      	ldr	r3, [pc, #388]	; (9c6c <lv_draw_label+0xc40>)
    9ae6:	4798      	blx	r3
    9ae8:	9020      	str	r0, [sp, #128]	; 0x80
    uint32_t col_bit_max = 8 - bpp;
    9aea:	9921      	ldr	r1, [sp, #132]	; 0x84
    9aec:	f1c1 0008 	rsb	r0, r1, #8
    9af0:	9018      	str	r0, [sp, #96]	; 0x60
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
    9af2:	9f24      	ldr	r7, [sp, #144]	; 0x90
    9af4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9af6:	18fb      	adds	r3, r7, r3
    9af8:	9826      	ldr	r0, [sp, #152]	; 0x98
    9afa:	1a1b      	subs	r3, r3, r0
    9afc:	fb01 f303 	mul.w	r3, r1, r3
    9b00:	9321      	str	r3, [sp, #132]	; 0x84
    for(row = row_start ; row < row_end; row++) {
    9b02:	9f1e      	ldr	r7, [sp, #120]	; 0x78
    9b04:	42be      	cmp	r6, r7
    9b06:	f280 80c7 	bge.w	9c98 <lv_draw_label+0xc6c>
    9b0a:	f04f 0e00 	mov.w	lr, #0
                mask_buf[mask_p] = 0;
    9b0e:	f8cd b090 	str.w	fp, [sp, #144]	; 0x90
    9b12:	f8cd a098 	str.w	sl, [sp, #152]	; 0x98
    9b16:	f8cd 809c 	str.w	r8, [sp, #156]	; 0x9c
    9b1a:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
    9b1e:	4682      	mov	sl, r0
    9b20:	f8cd 90a8 	str.w	r9, [sp, #168]	; 0xa8
    9b24:	46b1      	mov	r9, r6
    9b26:	460f      	mov	r7, r1
    9b28:	e052      	b.n	9bd0 <lv_draw_label+0xba4>
    if(bpp == 3) bpp = 4;
    9b2a:	2304      	movs	r3, #4
    9b2c:	9321      	str	r3, [sp, #132]	; 0x84
            shades = 16;
    9b2e:	2310      	movs	r3, #16
            bitmask_init  = 0xF0;
    9b30:	22f0      	movs	r2, #240	; 0xf0
    9b32:	9215      	str	r2, [sp, #84]	; 0x54
            bpp_opa_table_p = _lv_bpp4_opa_table;
    9b34:	4a4e      	ldr	r2, [pc, #312]	; (9c70 <lv_draw_label+0xc44>)
    9b36:	9223      	str	r2, [sp, #140]	; 0x8c
    9b38:	e749      	b.n	99ce <lv_draw_label+0x9a2>
    uint32_t bpp = g->bpp;
    9b3a:	2308      	movs	r3, #8
    9b3c:	9321      	str	r3, [sp, #132]	; 0x84
            shades = 256;
    9b3e:	f44f 7380 	mov.w	r3, #256	; 0x100
            bitmask_init  = 0xFF;
    9b42:	22ff      	movs	r2, #255	; 0xff
    9b44:	9215      	str	r2, [sp, #84]	; 0x54
            bpp_opa_table_p = _lv_bpp8_opa_table;
    9b46:	4a4b      	ldr	r2, [pc, #300]	; (9c74 <lv_draw_label+0xc48>)
    9b48:	9223      	str	r2, [sp, #140]	; 0x8c
    9b4a:	e740      	b.n	99ce <lv_draw_label+0x9a2>
    uint32_t bpp = g->bpp;
    9b4c:	2301      	movs	r3, #1
    9b4e:	9321      	str	r3, [sp, #132]	; 0x84
            shades = 2;
    9b50:	2302      	movs	r3, #2
            bitmask_init  = 0x80;
    9b52:	2280      	movs	r2, #128	; 0x80
    9b54:	9215      	str	r2, [sp, #84]	; 0x54
            bpp_opa_table_p = _lv_bpp1_opa_table;
    9b56:	4a48      	ldr	r2, [pc, #288]	; (9c78 <lv_draw_label+0xc4c>)
    9b58:	9223      	str	r2, [sp, #140]	; 0x8c
    9b5a:	e738      	b.n	99ce <lv_draw_label+0x9a2>
        if(prev_opa != opa || prev_bpp != bpp) {
    9b5c:	4a41      	ldr	r2, [pc, #260]	; (9c64 <lv_draw_label+0xc38>)
    9b5e:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
    9b62:	9921      	ldr	r1, [sp, #132]	; 0x84
    9b64:	4291      	cmp	r1, r2
    9b66:	f47f af3b 	bne.w	99e0 <lv_draw_label+0x9b4>
    9b6a:	e757      	b.n	9a1c <lv_draw_label+0x9f0>
                map_p++;
    9b6c:	3501      	adds	r5, #1
                bitmask = bitmask_init;
    9b6e:	9815      	ldr	r0, [sp, #84]	; 0x54
                col_bit = 0;
    9b70:	2400      	movs	r4, #0
    9b72:	3101      	adds	r1, #1
        for(col = col_start; col < col_end; col++) {
    9b74:	458c      	cmp	ip, r1
    9b76:	d010      	beq.n	9b9a <lv_draw_label+0xb6e>
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
    9b78:	782b      	ldrb	r3, [r5, #0]
    9b7a:	4003      	ands	r3, r0
    9b7c:	1b32      	subs	r2, r6, r4
    9b7e:	40d3      	lsrs	r3, r2
            if(letter_px) {
    9b80:	f013 0fff 	tst.w	r3, #255	; 0xff
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
    9b84:	bf1a      	itte	ne
    9b86:	b2db      	uxtbne	r3, r3
    9b88:	f818 3003 	ldrbne.w	r3, [r8, r3]
                mask_buf[mask_p] = 0;
    9b8c:	2300      	moveq	r3, #0
    9b8e:	700b      	strb	r3, [r1, #0]
            if(col_bit < col_bit_max) {
    9b90:	42a6      	cmp	r6, r4
    9b92:	d9eb      	bls.n	9b6c <lv_draw_label+0xb40>
                col_bit += bpp;
    9b94:	443c      	add	r4, r7
                bitmask = bitmask >> bpp;
    9b96:	40f8      	lsrs	r0, r7
    9b98:	e7eb      	b.n	9b72 <lv_draw_label+0xb46>
    9b9a:	9618      	str	r6, [sp, #96]	; 0x60
        if(other_mask_cnt) {
    9b9c:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9b9e:	bb53      	cbnz	r3, 9bf6 <lv_draw_label+0xbca>
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
    9ba0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9ba2:	ebaa 0303 	sub.w	r3, sl, r3
    9ba6:	445b      	add	r3, fp
    9ba8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    9baa:	429a      	cmp	r2, r3
    9bac:	d93f      	bls.n	9c2e <lv_draw_label+0xc02>
            fill_area.y2 ++;
    9bae:	f8bd 30e6 	ldrh.w	r3, [sp, #230]	; 0xe6
    9bb2:	3301      	adds	r3, #1
    9bb4:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
    9bb8:	46de      	mov	lr, fp
        col_bit += col_bit_row_ofs;
    9bba:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9bbc:	441c      	add	r4, r3
        map_p += (col_bit >> 3);
    9bbe:	eb05 05d4 	add.w	r5, r5, r4, lsr #3
        col_bit = col_bit & 0x7;
    9bc2:	f004 0407 	and.w	r4, r4, #7
    for(row = row_start ; row < row_end; row++) {
    9bc6:	f109 0901 	add.w	r9, r9, #1
    9bca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    9bcc:	4599      	cmp	r9, r3
    9bce:	da5b      	bge.n	9c88 <lv_draw_label+0xc5c>
        bitmask = bitmask_init >> col_bit;
    9bd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    9bd2:	fa23 f004 	lsr.w	r0, r3, r4
        for(col = col_start; col < col_end; col++) {
    9bd6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9bd8:	4553      	cmp	r3, sl
    9bda:	da0a      	bge.n	9bf2 <lv_draw_label+0xbc6>
    9bdc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    9bde:	eb02 010e 	add.w	r1, r2, lr
    9be2:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9be4:	ebaa 0b03 	sub.w	fp, sl, r3
    9be8:	44f3      	add	fp, lr
    9bea:	eb02 0c0b 	add.w	ip, r2, fp
    9bee:	9e18      	ldr	r6, [sp, #96]	; 0x60
    9bf0:	e7c2      	b.n	9b78 <lv_draw_label+0xb4c>
    9bf2:	46f3      	mov	fp, lr
    9bf4:	e7d2      	b.n	9b9c <lv_draw_label+0xb70>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
    9bf6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9bf8:	4473      	add	r3, lr
    9bfa:	4618      	mov	r0, r3
    9bfc:	9323      	str	r3, [sp, #140]	; 0x8c
    9bfe:	f9bd 10e0 	ldrsh.w	r1, [sp, #224]	; 0xe0
    9c02:	f8bd 30e4 	ldrh.w	r3, [sp, #228]	; 0xe4
    9c06:	3301      	adds	r3, #1
    9c08:	1a5b      	subs	r3, r3, r1
    9c0a:	b21b      	sxth	r3, r3
    9c0c:	f9bd 20e6 	ldrsh.w	r2, [sp, #230]	; 0xe6
    9c10:	4e1a      	ldr	r6, [pc, #104]	; (9c7c <lv_draw_label+0xc50>)
    9c12:	47b0      	blx	r6
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
    9c14:	2800      	cmp	r0, #0
    9c16:	d1c3      	bne.n	9ba0 <lv_draw_label+0xb74>
    9c18:	f8bd 10e4 	ldrh.w	r1, [sp, #228]	; 0xe4
    9c1c:	3101      	adds	r1, #1
    9c1e:	f8bd 30e0 	ldrh.w	r3, [sp, #224]	; 0xe0
    9c22:	1ac9      	subs	r1, r1, r3
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&fill_area));
    9c24:	b209      	sxth	r1, r1
    9c26:	9823      	ldr	r0, [sp, #140]	; 0x8c
    9c28:	4b15      	ldr	r3, [pc, #84]	; (9c80 <lv_draw_label+0xc54>)
    9c2a:	4798      	blx	r3
    9c2c:	e7b8      	b.n	9ba0 <lv_draw_label+0xb74>
            _lv_blend_fill(clip_area, &fill_area,
    9c2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9c30:	9302      	str	r3, [sp, #8]
    9c32:	23ff      	movs	r3, #255	; 0xff
    9c34:	9301      	str	r3, [sp, #4]
    9c36:	2302      	movs	r3, #2
    9c38:	9300      	str	r3, [sp, #0]
    9c3a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9c3c:	f8bd 2094 	ldrh.w	r2, [sp, #148]	; 0x94
    9c40:	a938      	add	r1, sp, #224	; 0xe0
    9c42:	980e      	ldr	r0, [sp, #56]	; 0x38
    9c44:	f8df b03c 	ldr.w	fp, [pc, #60]	; 9c84 <lv_draw_label+0xc58>
    9c48:	47d8      	blx	fp
            fill_area.y1 = fill_area.y2 + 1;
    9c4a:	f8bd 30e6 	ldrh.w	r3, [sp, #230]	; 0xe6
    9c4e:	3301      	adds	r3, #1
    9c50:	b21b      	sxth	r3, r3
    9c52:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
            fill_area.y2 = fill_area.y1;
    9c56:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
            mask_p = 0;
    9c5a:	f04f 0e00 	mov.w	lr, #0
    9c5e:	e7ac      	b.n	9bba <lv_draw_label+0xb8e>
    9c60:	000178a8 	.word	0x000178a8
    9c64:	20002a50 	.word	0x20002a50
    9c68:	00011a65 	.word	0x00011a65
    9c6c:	0000b421 	.word	0x0000b421
    9c70:	000178ac 	.word	0x000178ac
    9c74:	000178bc 	.word	0x000178bc
    9c78:	000178a4 	.word	0x000178a4
    9c7c:	0000b379 	.word	0x0000b379
    9c80:	00011c17 	.word	0x00011c17
    9c84:	00006e05 	.word	0x00006e05
    9c88:	f8dd b090 	ldr.w	fp, [sp, #144]	; 0x90
    9c8c:	f8dd a098 	ldr.w	sl, [sp, #152]	; 0x98
    9c90:	f8dd 809c 	ldr.w	r8, [sp, #156]	; 0x9c
    9c94:	f8dd 90a8 	ldr.w	r9, [sp, #168]	; 0xa8
    if(fill_area.y1 != fill_area.y2) {
    9c98:	f9bd 30e6 	ldrsh.w	r3, [sp, #230]	; 0xe6
    9c9c:	f9bd 20e2 	ldrsh.w	r2, [sp, #226]	; 0xe2
    9ca0:	429a      	cmp	r2, r3
    9ca2:	d00f      	beq.n	9cc4 <lv_draw_label+0xc98>
        fill_area.y2--;
    9ca4:	3b01      	subs	r3, #1
    9ca6:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
        _lv_blend_fill(clip_area, &fill_area,
    9caa:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9cac:	9302      	str	r3, [sp, #8]
    9cae:	23ff      	movs	r3, #255	; 0xff
    9cb0:	9301      	str	r3, [sp, #4]
    9cb2:	2302      	movs	r3, #2
    9cb4:	9300      	str	r3, [sp, #0]
    9cb6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9cb8:	f8bd 2094 	ldrh.w	r2, [sp, #148]	; 0x94
    9cbc:	a938      	add	r1, sp, #224	; 0xe0
    9cbe:	980e      	ldr	r0, [sp, #56]	; 0x38
    9cc0:	4c60      	ldr	r4, [pc, #384]	; (9e44 <lv_draw_label+0xe18>)
    9cc2:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
    9cc4:	981d      	ldr	r0, [sp, #116]	; 0x74
    9cc6:	4b60      	ldr	r3, [pc, #384]	; (9e48 <lv_draw_label+0xe1c>)
    9cc8:	4798      	blx	r3
    9cca:	e58b      	b.n	97e4 <lv_draw_label+0x7b8>
                        cmd_state = CMD_STATE_WAIT;
    9ccc:	2300      	movs	r3, #0
    9cce:	9308      	str	r3, [sp, #32]
    9cd0:	e591      	b.n	97f6 <lv_draw_label+0x7ca>
    9cd2:	464e      	mov	r6, r9
    9cd4:	f8dd 9014 	ldr.w	r9, [sp, #20]
        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
    9cd8:	f899 3018 	ldrb.w	r3, [r9, #24]
    9cdc:	f013 0f02 	tst.w	r3, #2
    9ce0:	d144      	bne.n	9d6c <lv_draw_label+0xd40>
        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
    9ce2:	f899 3018 	ldrb.w	r3, [r9, #24]
    9ce6:	f013 0f01 	tst.w	r3, #1
    9cea:	d160      	bne.n	9dae <lv_draw_label+0xd82>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
    9cec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9cee:	9d09      	ldr	r5, [sp, #36]	; 0x24
    9cf0:	1956      	adds	r6, r2, r5
    9cf2:	f9b9 200c 	ldrsh.w	r2, [r9, #12]
    9cf6:	f899 3017 	ldrb.w	r3, [r9, #23]
    9cfa:	9300      	str	r3, [sp, #0]
    9cfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9cfe:	9907      	ldr	r1, [sp, #28]
    9d00:	4630      	mov	r0, r6
    9d02:	4c52      	ldr	r4, [pc, #328]	; (9e4c <lv_draw_label+0xe20>)
    9d04:	47a0      	blx	r4
    9d06:	1944      	adds	r4, r0, r5
        pos.x = coords->x1;
    9d08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9d0a:	f9b3 5000 	ldrsh.w	r5, [r3]
        if(dsc->flag & LV_TXT_FLAG_CENTER) {
    9d0e:	f899 2017 	ldrb.w	r2, [r9, #23]
    9d12:	f012 0f04 	tst.w	r2, #4
    9d16:	d16a      	bne.n	9dee <lv_draw_label+0xdc2>
        else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
    9d18:	f012 0f08 	tst.w	r2, #8
    9d1c:	d17c      	bne.n	9e18 <lv_draw_label+0xdec>
    9d1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9d20:	9914      	ldr	r1, [sp, #80]	; 0x50
    9d22:	440b      	add	r3, r1
    9d24:	b21b      	sxth	r3, r3
    9d26:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9d28:	440a      	add	r2, r1
    9d2a:	b292      	uxth	r2, r2
    9d2c:	9212      	str	r2, [sp, #72]	; 0x48
        line_start = line_end;
    9d2e:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
        pos.y += line_height;
    9d32:	930f      	str	r3, [sp, #60]	; 0x3c
        if(pos.y > mask->y2) return;
    9d34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9d36:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
    9d3a:	429a      	cmp	r2, r3
    9d3c:	f6ff a97f 	blt.w	903e <lv_draw_label+0x12>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
    9d40:	9409      	str	r4, [sp, #36]	; 0x24
    while(txt[line_start] != '\0') {
    9d42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9d44:	4613      	mov	r3, r2
    9d46:	445b      	add	r3, fp
    9d48:	930a      	str	r3, [sp, #40]	; 0x28
    9d4a:	f812 300b 	ldrb.w	r3, [r2, fp]
    9d4e:	2b00      	cmp	r3, #0
    9d50:	f43f a975 	beq.w	903e <lv_draw_label+0x12>
        pos.x += x_ofs;
    9d54:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9d56:	441d      	add	r5, r3
    9d58:	b22e      	sxth	r6, r5
        i         = 0;
    9d5a:	2300      	movs	r3, #0
    9d5c:	9352      	str	r3, [sp, #328]	; 0x148
        cmd_state = CMD_STATE_WAIT;
    9d5e:	9308      	str	r3, [sp, #32]
        bpp_opa_table_p = opa_table;
    9d60:	4b3b      	ldr	r3, [pc, #236]	; (9e50 <lv_draw_label+0xe24>)
    9d62:	931b      	str	r3, [sp, #108]	; 0x6c
    9d64:	f8cd 9014 	str.w	r9, [sp, #20]
    9d68:	46b1      	mov	r9, r6
        while(i < line_end - line_start) {
    9d6a:	e544      	b.n	97f6 <lv_draw_label+0x7ca>
            p1.x = pos_x_start;
    9d6c:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
    9d70:	f8ad 30e0 	strh.w	r3, [sp, #224]	; 0xe0
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
    9d74:	f8d9 3004 	ldr.w	r3, [r9, #4]
    9d78:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    9d7c:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
    9d80:	f9bd 314e 	ldrsh.w	r3, [sp, #334]	; 0x14e
    9d84:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    9d88:	105b      	asrs	r3, r3, #1
    9d8a:	eb03 0362 	add.w	r3, r3, r2, asr #1
    9d8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9d90:	4413      	add	r3, r2
    9d92:	b21b      	sxth	r3, r3
    9d94:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
            p2.x = pos.x;
    9d98:	f8ad 60e8 	strh.w	r6, [sp, #232]	; 0xe8
            p2.y = p1.y;
    9d9c:	f8ad 30ea 	strh.w	r3, [sp, #234]	; 0xea
            lv_draw_line(&p1, &p2, mask, &line_dsc);
    9da0:	ab53      	add	r3, sp, #332	; 0x14c
    9da2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9da4:	a93a      	add	r1, sp, #232	; 0xe8
    9da6:	a838      	add	r0, sp, #224	; 0xe0
    9da8:	4c2a      	ldr	r4, [pc, #168]	; (9e54 <lv_draw_label+0xe28>)
    9daa:	47a0      	blx	r4
    9dac:	e799      	b.n	9ce2 <lv_draw_label+0xcb6>
            p1.x = pos_x_start;
    9dae:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
    9db2:	f8ad 30e0 	strh.w	r3, [sp, #224]	; 0xe0
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line + line_dsc.width / 2 + 1;
    9db6:	f8d9 2004 	ldr.w	r2, [r9, #4]
    9dba:	f9bd 314e 	ldrsh.w	r3, [sp, #334]	; 0x14e
    9dbe:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    9dc2:	105b      	asrs	r3, r3, #1
    9dc4:	3301      	adds	r3, #1
    9dc6:	8911      	ldrh	r1, [r2, #8]
    9dc8:	440b      	add	r3, r1
    9dca:	8952      	ldrh	r2, [r2, #10]
    9dcc:	1a9b      	subs	r3, r3, r2
    9dce:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9dd0:	4413      	add	r3, r2
    9dd2:	b21b      	sxth	r3, r3
    9dd4:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
            p2.x = pos.x;
    9dd8:	f8ad 60e8 	strh.w	r6, [sp, #232]	; 0xe8
            p2.y = p1.y;
    9ddc:	f8ad 30ea 	strh.w	r3, [sp, #234]	; 0xea
            lv_draw_line(&p1, &p2, mask, &line_dsc);
    9de0:	ab53      	add	r3, sp, #332	; 0x14c
    9de2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9de4:	a93a      	add	r1, sp, #232	; 0xe8
    9de6:	a838      	add	r0, sp, #224	; 0xe0
    9de8:	4c1a      	ldr	r4, [pc, #104]	; (9e54 <lv_draw_label+0xe28>)
    9dea:	47a0      	blx	r4
    9dec:	e77e      	b.n	9cec <lv_draw_label+0xcc0>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
    9dee:	f9b9 300c 	ldrsh.w	r3, [r9, #12]
    9df2:	9200      	str	r2, [sp, #0]
    9df4:	9a07      	ldr	r2, [sp, #28]
    9df6:	4601      	mov	r1, r0
    9df8:	4630      	mov	r0, r6
    9dfa:	4e17      	ldr	r6, [pc, #92]	; (9e58 <lv_draw_label+0xe2c>)
    9dfc:	47b0      	blx	r6
    9dfe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    9e00:	8893      	ldrh	r3, [r2, #4]
    9e02:	3301      	adds	r3, #1
    9e04:	8812      	ldrh	r2, [r2, #0]
    9e06:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
    9e08:	b21b      	sxth	r3, r3
    9e0a:	1a18      	subs	r0, r3, r0
    9e0c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    9e10:	eb05 0560 	add.w	r5, r5, r0, asr #1
    9e14:	b22d      	sxth	r5, r5
    9e16:	e782      	b.n	9d1e <lv_draw_label+0xcf2>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
    9e18:	f9b9 300c 	ldrsh.w	r3, [r9, #12]
    9e1c:	9200      	str	r2, [sp, #0]
    9e1e:	9a07      	ldr	r2, [sp, #28]
    9e20:	4601      	mov	r1, r0
    9e22:	4630      	mov	r0, r6
    9e24:	4e0c      	ldr	r6, [pc, #48]	; (9e58 <lv_draw_label+0xe2c>)
    9e26:	47b0      	blx	r6
    9e28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    9e2a:	8893      	ldrh	r3, [r2, #4]
    9e2c:	3301      	adds	r3, #1
    9e2e:	8812      	ldrh	r2, [r2, #0]
    9e30:	1a9b      	subs	r3, r3, r2
            pos.x += lv_area_get_width(coords) - line_width;
    9e32:	b21b      	sxth	r3, r3
    9e34:	1a18      	subs	r0, r3, r0
    9e36:	4405      	add	r5, r0
    9e38:	b22d      	sxth	r5, r5
    9e3a:	e770      	b.n	9d1e <lv_draw_label+0xcf2>
                        cmd_state = CMD_STATE_WAIT;
    9e3c:	2300      	movs	r3, #0
    9e3e:	9308      	str	r3, [sp, #32]
    9e40:	f7ff ba4c 	b.w	92dc <lv_draw_label+0x2b0>
    9e44:	00006e05 	.word	0x00006e05
    9e48:	000116e5 	.word	0x000116e5
    9e4c:	000124f5 	.word	0x000124f5
    9e50:	20002a50 	.word	0x20002a50
    9e54:	00009e8d 	.word	0x00009e8d
    9e58:	00012721 	.word	0x00012721

00009e5c <lv_draw_line_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_line_dsc_init(lv_draw_line_dsc_t * dsc)
{
    9e5c:	b510      	push	{r4, lr}
    9e5e:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
    9e60:	210a      	movs	r1, #10
    9e62:	4b09      	ldr	r3, [pc, #36]	; (9e88 <lv_draw_line_dsc_init+0x2c>)
    9e64:	4798      	blx	r3
    dsc->width = 1;
    9e66:	2301      	movs	r3, #1
    9e68:	8063      	strh	r3, [r4, #2]
    dsc->opa = LV_OPA_COVER;
    9e6a:	23ff      	movs	r3, #255	; 0xff
    9e6c:	7223      	strb	r3, [r4, #8]
    dsc->color = LV_COLOR_BLACK;
    9e6e:	7823      	ldrb	r3, [r4, #0]
    9e70:	f36f 0304 	bfc	r3, #0, #5
    9e74:	7023      	strb	r3, [r4, #0]
    9e76:	8823      	ldrh	r3, [r4, #0]
    9e78:	f36f 134a 	bfc	r3, #5, #6
    9e7c:	8023      	strh	r3, [r4, #0]
    9e7e:	0a1b      	lsrs	r3, r3, #8
    9e80:	f36f 03c7 	bfc	r3, #3, #5
    9e84:	7063      	strb	r3, [r4, #1]
    9e86:	bd10      	pop	{r4, pc}
    9e88:	00011c17 	.word	0x00011c17

00009e8c <lv_draw_line>:
 * @param style pointer to a line's style
 * @param opa_scale scale down all opacities by the factor
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_line(const lv_point_t * point1, const lv_point_t * point2, const lv_area_t * clip,
                                        lv_draw_line_dsc_t * dsc)
{
    9e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9e90:	b0cb      	sub	sp, #300	; 0x12c
    if(dsc->width == 0) return;
    9e92:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
    9e96:	2d00      	cmp	r5, #0
    9e98:	f000 8418 	beq.w	a6cc <lv_draw_line+0x840>
    if(dsc->opa <= LV_OPA_MIN) return;
    9e9c:	7a1c      	ldrb	r4, [r3, #8]
    9e9e:	2c05      	cmp	r4, #5
    9ea0:	f240 8414 	bls.w	a6cc <lv_draw_line+0x840>

    if(point1->x == point2->x && point1->y == point2->y) return;
    9ea4:	f9b0 6000 	ldrsh.w	r6, [r0]
    9ea8:	f9b1 7000 	ldrsh.w	r7, [r1]
    9eac:	42be      	cmp	r6, r7
    9eae:	f000 8130 	beq.w	a112 <lv_draw_line+0x286>
    9eb2:	461c      	mov	r4, r3
    9eb4:	4696      	mov	lr, r2
    9eb6:	9208      	str	r2, [sp, #32]
    9eb8:	9107      	str	r1, [sp, #28]
    9eba:	9006      	str	r0, [sp, #24]

    lv_area_t clip_line;
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
    9ebc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
    9ec0:	f3c5 054f 	ubfx	r5, r5, #1, #16
    9ec4:	42be      	cmp	r6, r7
    9ec6:	bfd4      	ite	le
    9ec8:	ebc5 0306 	rsble	r3, r5, r6
    9ecc:	ebc5 0307 	rsbgt	r3, r5, r7
    9ed0:	f8ad 3120 	strh.w	r3, [sp, #288]	; 0x120
    clip_line.x2 = LV_MATH_MAX(point1->x, point2->x) + dsc->width / 2;
    9ed4:	42be      	cmp	r6, r7
    9ed6:	bfac      	ite	ge
    9ed8:	19ae      	addge	r6, r5, r6
    9eda:	19ee      	addlt	r6, r5, r7
    9edc:	f8ad 6124 	strh.w	r6, [sp, #292]	; 0x124
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
    9ee0:	460f      	mov	r7, r1
    9ee2:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
    9ee6:	4606      	mov	r6, r0
    9ee8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
    9eec:	429a      	cmp	r2, r3
    9eee:	bfd4      	ite	le
    9ef0:	ebc5 0102 	rsble	r1, r5, r2
    9ef4:	ebc5 0103 	rsbgt	r1, r5, r3
    9ef8:	f8ad 1122 	strh.w	r1, [sp, #290]	; 0x122
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
    9efc:	429a      	cmp	r2, r3
    9efe:	bfac      	ite	ge
    9f00:	18ad      	addge	r5, r5, r2
    9f02:	18ed      	addlt	r5, r5, r3
    9f04:	f8ad 5126 	strh.w	r5, [sp, #294]	; 0x126

    bool is_common;
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
    9f08:	4672      	mov	r2, lr
    9f0a:	a948      	add	r1, sp, #288	; 0x120
    9f0c:	4608      	mov	r0, r1
    9f0e:	4bab      	ldr	r3, [pc, #684]	; (a1bc <lv_draw_line+0x330>)
    9f10:	4798      	blx	r3
    if(!is_common) return;
    9f12:	2800      	cmp	r0, #0
    9f14:	f000 83da 	beq.w	a6cc <lv_draw_line+0x840>

    if(point1->y == point2->y) draw_line_hor(point1, point2, &clip_line, dsc);
    9f18:	f9b6 6002 	ldrsh.w	r6, [r6, #2]
    9f1c:	f9b7 5002 	ldrsh.w	r5, [r7, #2]
    9f20:	42ae      	cmp	r6, r5
    9f22:	f000 80fe 	beq.w	a122 <lv_draw_line+0x296>
    else if(point1->x == point2->x) draw_line_ver(point1, point2, &clip_line, dsc);
    9f26:	9b06      	ldr	r3, [sp, #24]
    9f28:	f9b3 3000 	ldrsh.w	r3, [r3]
    9f2c:	461a      	mov	r2, r3
    9f2e:	9305      	str	r3, [sp, #20]
    9f30:	9b07      	ldr	r3, [sp, #28]
    9f32:	f9b3 a000 	ldrsh.w	sl, [r3]
    9f36:	4552      	cmp	r2, sl
    9f38:	f000 8200 	beq.w	a33c <lv_draw_line+0x4b0>
                                                 lv_draw_line_dsc_t * dsc)
{
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
    9f3c:	42ae      	cmp	r6, r5
    9f3e:	db06      	blt.n	9f4e <lv_draw_line+0xc2>
    9f40:	4633      	mov	r3, r6
        p2.y = point2->y;
        p1.x = point1->x;
        p2.x = point2->x;
    }
    else {
        p1.y = point2->y;
    9f42:	462e      	mov	r6, r5
        p2.y = point1->y;
    9f44:	461d      	mov	r5, r3
    if(point1->y < point2->y) {
    9f46:	9b05      	ldr	r3, [sp, #20]
        p1.x = point2->x;
    9f48:	f8cd a014 	str.w	sl, [sp, #20]
        p2.x = point1->x;
    9f4c:	469a      	mov	sl, r3
    }

    int32_t xdiff = p2.x - p1.x;
    9f4e:	9b05      	ldr	r3, [sp, #20]
    9f50:	ebaa 0303 	sub.w	r3, sl, r3
    9f54:	9309      	str	r3, [sp, #36]	; 0x24
    int32_t ydiff = p2.y - p1.y;
    9f56:	1baa      	subs	r2, r5, r6
    9f58:	920a      	str	r2, [sp, #40]	; 0x28
    bool flat = LV_MATH_ABS(xdiff) > LV_MATH_ABS(ydiff) ? true : false;
    9f5a:	2b00      	cmp	r3, #0
    9f5c:	bfb8      	it	lt
    9f5e:	425b      	neglt	r3, r3
    9f60:	469b      	mov	fp, r3
    9f62:	2a00      	cmp	r2, #0
    9f64:	bfb8      	it	lt
    9f66:	4252      	neglt	r2, r2
    9f68:	4690      	mov	r8, r2
        143, 145, 147, 149, 151, 153, 155, 158,
        160, 162, 165, 167, 170, 173, 175, 178,
        181,
    };

    int32_t w = dsc->width;
    9f6a:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
    int32_t wcorr_i = 0;
    if(flat) wcorr_i = (LV_MATH_ABS(ydiff) << 5) / LV_MATH_ABS(xdiff);
    9f6e:	4293      	cmp	r3, r2
    9f70:	bfc7      	ittee	gt
    9f72:	0153      	lslgt	r3, r2, #5
    9f74:	fb93 f3fb 	sdivgt	r3, r3, fp
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);
    9f78:	ea4f 134b 	movle.w	r3, fp, lsl #5
    9f7c:	fb93 f3f2 	sdivle	r3, r3, r2

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
    9f80:	4a8f      	ldr	r2, [pc, #572]	; (a1c0 <lv_draw_line+0x334>)
    9f82:	5cd3      	ldrb	r3, [r2, r3]
    9f84:	fb09 f903 	mul.w	r9, r9, r3
    9f88:	f109 093f 	add.w	r9, r9, #63	; 0x3f
    9f8c:	ea4f 13e9 	mov.w	r3, r9, asr #7
    9f90:	461f      	mov	r7, r3
    int32_t w_half0 = w >> 1;
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(p1.x, p2.x) - w;
    9f92:	b29b      	uxth	r3, r3
    9f94:	9805      	ldr	r0, [sp, #20]
    9f96:	4582      	cmp	sl, r0
    9f98:	bfd4      	ite	le
    9f9a:	ebc3 020a 	rsble	r2, r3, sl
    9f9e:	ebc3 0200 	rsbgt	r2, r3, r0
    9fa2:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
    draw_area.x2 = LV_MATH_MAX(p1.x, p2.x) + w;
    9fa6:	4582      	cmp	sl, r0
    9fa8:	bfac      	ite	ge
    9faa:	eb03 020a 	addge.w	r2, r3, sl
    9fae:	181a      	addlt	r2, r3, r0
    9fb0:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
    draw_area.y1 = LV_MATH_MIN(p1.y, p2.y) - w;
    9fb4:	42b5      	cmp	r5, r6
    9fb6:	bfd4      	ite	le
    9fb8:	ebc3 0205 	rsble	r2, r3, r5
    9fbc:	ebc3 0206 	rsbgt	r2, r3, r6
    9fc0:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
    draw_area.y2 = LV_MATH_MAX(p1.y, p2.y) + w;
    9fc4:	42b5      	cmp	r5, r6
    9fc6:	bfac      	ite	ge
    9fc8:	195b      	addge	r3, r3, r5
    9fca:	199b      	addlt	r3, r3, r6
    9fcc:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e

    /* Get the union of `coords` and `clip`*/
    /* `clip` is already truncated to the `vdb` size
     * in 'lv_refr_area' function */
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
    9fd0:	aa48      	add	r2, sp, #288	; 0x120
    9fd2:	a90e      	add	r1, sp, #56	; 0x38
    9fd4:	4608      	mov	r0, r1
    9fd6:	4b79      	ldr	r3, [pc, #484]	; (a1bc <lv_draw_line+0x330>)
    9fd8:	4798      	blx	r3
    if(is_common == false) return;
    9fda:	2800      	cmp	r0, #0
    9fdc:	f000 8372 	beq.w	a6c4 <lv_draw_line+0x838>
    int32_t w_half0 = w >> 1;
    9fe0:	ea4f 2929 	mov.w	r9, r9, asr #8
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
    9fe4:	f007 0301 	and.w	r3, r7, #1
    9fe8:	444b      	add	r3, r9
    9fea:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
    9fec:	45c3      	cmp	fp, r8
    9fee:	f340 82b6 	ble.w	a55e <lv_draw_line+0x6d2>
        if(xdiff > 0) {
    9ff2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9ff4:	2a00      	cmp	r2, #0
    9ff6:	f340 828e 	ble.w	a516 <lv_draw_line+0x68a>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
    9ffa:	fa1f fb86 	uxth.w	fp, r6
    9ffe:	fa1f f389 	uxth.w	r3, r9
    a002:	fa1f f985 	uxth.w	r9, r5
    a006:	ebab 0203 	sub.w	r2, fp, r3
    a00a:	2100      	movs	r1, #0
    a00c:	9101      	str	r1, [sp, #4]
    a00e:	eba9 0303 	sub.w	r3, r9, r3
    a012:	b21b      	sxth	r3, r3
    a014:	9300      	str	r3, [sp, #0]
    a016:	4653      	mov	r3, sl
    a018:	b212      	sxth	r2, r2
    a01a:	9905      	ldr	r1, [sp, #20]
    a01c:	a812      	add	r0, sp, #72	; 0x48
    a01e:	4f69      	ldr	r7, [pc, #420]	; (a1c4 <lv_draw_line+0x338>)
    a020:	47b8      	blx	r7
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
    a022:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    a026:	eb0b 0208 	add.w	r2, fp, r8
    a02a:	2301      	movs	r3, #1
    a02c:	9301      	str	r3, [sp, #4]
    a02e:	44c1      	add	r9, r8
    a030:	fa0f f389 	sxth.w	r3, r9
    a034:	9300      	str	r3, [sp, #0]
    a036:	4653      	mov	r3, sl
    a038:	b212      	sxth	r2, r2
    a03a:	9905      	ldr	r1, [sp, #20]
    a03c:	a81d      	add	r0, sp, #116	; 0x74
    a03e:	47b8      	blx	r7
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
    a040:	2100      	movs	r1, #0
    a042:	a812      	add	r0, sp, #72	; 0x48
    a044:	f8df 819c 	ldr.w	r8, [pc, #412]	; a1e4 <lv_draw_line+0x358>
    a048:	47c0      	blx	r8
    a04a:	900b      	str	r0, [sp, #44]	; 0x2c
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
    a04c:	2100      	movs	r1, #0
    a04e:	a81d      	add	r0, sp, #116	; 0x74
    a050:	47c0      	blx	r8
    a052:	900c      	str	r0, [sp, #48]	; 0x30
    int16_t mask_top_id = LV_MASK_ID_INV;
    int16_t mask_bottom_id = LV_MASK_ID_INV;

    if(!dsc->raw_end) {
    a054:	7a63      	ldrb	r3, [r4, #9]
    a056:	f013 0f10 	tst.w	r3, #16
    a05a:	f000 82a4 	beq.w	a5a6 <lv_draw_line+0x71a>
    int16_t mask_bottom_id = LV_MASK_ID_INV;
    a05e:	f04f 33ff 	mov.w	r3, #4294967295
    a062:	930d      	str	r3, [sp, #52]	; 0x34
    int16_t mask_top_id = LV_MASK_ID_INV;
    a064:	930a      	str	r3, [sp, #40]	; 0x28
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    a066:	4b58      	ldr	r3, [pc, #352]	; (a1c8 <lv_draw_line+0x33c>)
    a068:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    a06a:	4b58      	ldr	r3, [pc, #352]	; (a1cc <lv_draw_line+0x340>)
    a06c:	4798      	blx	r3
    a06e:	4682      	mov	sl, r0

    const lv_area_t * disp_area = &vdb->area;

    /*Store the coordinates of the `draw_a` relative to the VDB */
    draw_area.x1 -= disp_area->x1;
    a070:	8a06      	ldrh	r6, [r0, #16]
    a072:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
    a076:	1bad      	subs	r5, r5, r6
    a078:	b2aa      	uxth	r2, r5
    a07a:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
    draw_area.y1 -= disp_area->y1;
    a07e:	8a40      	ldrh	r0, [r0, #18]
    a080:	f8bd 103a 	ldrh.w	r1, [sp, #58]	; 0x3a
    a084:	1a09      	subs	r1, r1, r0
    a086:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
    draw_area.x2 -= disp_area->x1;
    a08a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    a08e:	1b9b      	subs	r3, r3, r6
    a090:	b29b      	uxth	r3, r3
    a092:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    draw_area.y2 -= disp_area->y1;
    a096:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
    a09a:	1a09      	subs	r1, r1, r0
    a09c:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
    a0a0:	1c5d      	adds	r5, r3, #1
    a0a2:	1aad      	subs	r5, r5, r2
    a0a4:	b22d      	sxth	r5, r5
     * So deal with it only with steep lines. */
    int32_t draw_area_w = lv_area_get_width(&draw_area);

    /*Draw the background line by line*/
    int32_t h;
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), LV_HOR_RES_MAX);
    a0a6:	a80e      	add	r0, sp, #56	; 0x38
    a0a8:	4b49      	ldr	r3, [pc, #292]	; (a1d0 <lv_draw_line+0x344>)
    a0aa:	4798      	blx	r3
    a0ac:	f5b0 7ff0 	cmp.w	r0, #480	; 0x1e0
    a0b0:	f0c0 82a2 	bcc.w	a5f8 <lv_draw_line+0x76c>
    a0b4:	f44f 7bf0 	mov.w	fp, #480	; 0x1e0
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
    a0b8:	4658      	mov	r0, fp
    a0ba:	4b46      	ldr	r3, [pc, #280]	; (a1d4 <lv_draw_line+0x348>)
    a0bc:	4798      	blx	r3
    a0be:	4681      	mov	r9, r0

    lv_area_t fill_area;
    fill_area.x1 = draw_area.x1 + disp_area->x1;
    a0c0:	f8ba 3010 	ldrh.w	r3, [sl, #16]
    a0c4:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
    a0c8:	441a      	add	r2, r3
    a0ca:	b212      	sxth	r2, r2
    a0cc:	9205      	str	r2, [sp, #20]
    a0ce:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
    fill_area.x2 = draw_area.x2 + disp_area->x1;
    a0d2:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
    a0d6:	4413      	add	r3, r2
    a0d8:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    fill_area.y1 = draw_area.y1 + disp_area->y1;
    a0dc:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    a0e0:	f8ba 2012 	ldrh.w	r2, [sl, #18]
    a0e4:	4413      	add	r3, r2
    a0e6:	b21b      	sxth	r3, r3
    a0e8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    fill_area.y2 = fill_area.y1;
    a0ec:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46

    int32_t x = vdb->area.x1 + draw_area.x1;

    uint32_t mask_p = 0;

    _lv_memset_ff(mask_buf, mask_buf_size);
    a0f0:	4659      	mov	r1, fp
    a0f2:	4b39      	ldr	r3, [pc, #228]	; (a1d8 <lv_draw_line+0x34c>)
    a0f4:	4798      	blx	r3
    /*Fill the first row with 'color'*/
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
    a0f6:	f9ba 2012 	ldrsh.w	r2, [sl, #18]
    a0fa:	f9bd 603a 	ldrsh.w	r6, [sp, #58]	; 0x3a
    a0fe:	4416      	add	r6, r2
    a100:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    a104:	4413      	add	r3, r2
    a106:	429e      	cmp	r6, r3
    a108:	f300 82b9 	bgt.w	a67e <lv_draw_line+0x7f2>
    a10c:	2700      	movs	r7, #0
        mask_p += draw_area_w;
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
            fill_area.y2 ++;
        }
        else {
            _lv_blend_fill(&fill_area, clip,
    a10e:	9409      	str	r4, [sp, #36]	; 0x24
    a110:	e2a0      	b.n	a654 <lv_draw_line+0x7c8>
    if(point1->x == point2->x && point1->y == point2->y) return;
    a112:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
    a116:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
    a11a:	45a6      	cmp	lr, r4
    a11c:	f47f aec9 	bne.w	9eb2 <lv_draw_line+0x26>
    a120:	e2d4      	b.n	a6cc <lv_draw_line+0x840>
    lv_opa_t opa = dsc->opa;
    a122:	f894 9008 	ldrb.w	r9, [r4, #8]
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    a126:	4b28      	ldr	r3, [pc, #160]	; (a1c8 <lv_draw_line+0x33c>)
    a128:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    a12a:	4b28      	ldr	r3, [pc, #160]	; (a1cc <lv_draw_line+0x340>)
    a12c:	4798      	blx	r3
    a12e:	4607      	mov	r7, r0
    int32_t w = dsc->width - 1;
    a130:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    a134:	3b01      	subs	r3, #1
    int32_t w_half0 = w >> 1;
    a136:	105e      	asrs	r6, r3, #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
    a138:	f003 0301 	and.w	r3, r3, #1
    a13c:	199d      	adds	r5, r3, r6
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
    a13e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
    a142:	2b00      	cmp	r3, #0
    a144:	d035      	beq.n	a1b2 <lv_draw_line+0x326>
    a146:	f9b4 8004 	ldrsh.w	r8, [r4, #4]
    a14a:	f118 0800 	adds.w	r8, r8, #0
    a14e:	bf18      	it	ne
    a150:	f04f 0801 	movne.w	r8, #1
    if(lv_draw_mask_get_cnt()) simple_mode = false;
    a154:	4b21      	ldr	r3, [pc, #132]	; (a1dc <lv_draw_line+0x350>)
    a156:	4798      	blx	r3
    a158:	bb70      	cbnz	r0, a1b8 <lv_draw_line+0x32c>
    else if(dashed) simple_mode = false;
    a15a:	f088 0201 	eor.w	r2, r8, #1
    draw_area.x1 = LV_MATH_MIN(point1->x, point2->x);
    a15e:	9b07      	ldr	r3, [sp, #28]
    a160:	f9b3 3000 	ldrsh.w	r3, [r3]
    a164:	9906      	ldr	r1, [sp, #24]
    a166:	f9b1 1000 	ldrsh.w	r1, [r1]
    a16a:	4618      	mov	r0, r3
    a16c:	428b      	cmp	r3, r1
    a16e:	bfa8      	it	ge
    a170:	4608      	movge	r0, r1
    a172:	f8ad 00a0 	strh.w	r0, [sp, #160]	; 0xa0
    draw_area.x2 = LV_MATH_MAX(point1->x, point2->x)  - 1;
    a176:	428b      	cmp	r3, r1
    a178:	bfb8      	it	lt
    a17a:	460b      	movlt	r3, r1
    a17c:	3b01      	subs	r3, #1
    a17e:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
    draw_area.y1 = point1->y - w_half1;
    a182:	9906      	ldr	r1, [sp, #24]
    a184:	884b      	ldrh	r3, [r1, #2]
    a186:	1b5d      	subs	r5, r3, r5
    a188:	f8ad 50a2 	strh.w	r5, [sp, #162]	; 0xa2
    draw_area.y2 = point1->y + w_half0;
    a18c:	4433      	add	r3, r6
    a18e:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
    if(simple_mode) {
    a192:	b34a      	cbz	r2, a1e8 <lv_draw_line+0x35c>
                       dsc->blend_mode);
    a194:	7a63      	ldrb	r3, [r4, #9]
        _lv_blend_fill(clip, &draw_area,
    a196:	f003 0303 	and.w	r3, r3, #3
    a19a:	9302      	str	r3, [sp, #8]
    a19c:	f8cd 9004 	str.w	r9, [sp, #4]
    a1a0:	2301      	movs	r3, #1
    a1a2:	9300      	str	r3, [sp, #0]
    a1a4:	2300      	movs	r3, #0
    a1a6:	8822      	ldrh	r2, [r4, #0]
    a1a8:	a928      	add	r1, sp, #160	; 0xa0
    a1aa:	a848      	add	r0, sp, #288	; 0x120
    a1ac:	4d0c      	ldr	r5, [pc, #48]	; (a1e0 <lv_draw_line+0x354>)
    a1ae:	47a8      	blx	r5
    a1b0:	e288      	b.n	a6c4 <lv_draw_line+0x838>
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
    a1b2:	f04f 0800 	mov.w	r8, #0
    a1b6:	e7cd      	b.n	a154 <lv_draw_line+0x2c8>
    if(lv_draw_mask_get_cnt()) simple_mode = false;
    a1b8:	2200      	movs	r2, #0
    a1ba:	e7d0      	b.n	a15e <lv_draw_line+0x2d2>
    a1bc:	00010719 	.word	0x00010719
    a1c0:	000179c4 	.word	0x000179c4
    a1c4:	0000b445 	.word	0x0000b445
    a1c8:	00005789 	.word	0x00005789
    a1cc:	0001025d 	.word	0x0001025d
    a1d0:	000106fd 	.word	0x000106fd
    a1d4:	00011a65 	.word	0x00011a65
    a1d8:	00011ccd 	.word	0x00011ccd
    a1dc:	0000b421 	.word	0x0000b421
    a1e0:	00006e05 	.word	0x00006e05
    a1e4:	0000b33d 	.word	0x0000b33d
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
    a1e8:	aa28      	add	r2, sp, #160	; 0xa0
    a1ea:	a948      	add	r1, sp, #288	; 0x120
    a1ec:	4610      	mov	r0, r2
    a1ee:	4ba1      	ldr	r3, [pc, #644]	; (a474 <lv_draw_line+0x5e8>)
    a1f0:	4798      	blx	r3
        if(!is_common) return;
    a1f2:	2800      	cmp	r0, #0
    a1f4:	f000 8266 	beq.w	a6c4 <lv_draw_line+0x838>
        draw_area.x1 -= disp_area->x1;
    a1f8:	f9bd e0a0 	ldrsh.w	lr, [sp, #160]	; 0xa0
    a1fc:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
    a200:	b28b      	uxth	r3, r1
    a202:	ebae 0203 	sub.w	r2, lr, r3
    a206:	b292      	uxth	r2, r2
    a208:	fa0f f982 	sxth.w	r9, r2
    a20c:	f8ad 90a0 	strh.w	r9, [sp, #160]	; 0xa0
        draw_area.y1 -= disp_area->y1;
    a210:	f9bd 00a2 	ldrsh.w	r0, [sp, #162]	; 0xa2
    a214:	f8b7 c012 	ldrh.w	ip, [r7, #18]
    a218:	eba0 050c 	sub.w	r5, r0, ip
    a21c:	f8ad 50a2 	strh.w	r5, [sp, #162]	; 0xa2
        draw_area.x2 -= disp_area->x1;
    a220:	f9bd 60a4 	ldrsh.w	r6, [sp, #164]	; 0xa4
    a224:	1af3      	subs	r3, r6, r3
    a226:	b29b      	uxth	r3, r3
    a228:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
        draw_area.y2 -= disp_area->y1;
    a22c:	f8bd 50a6 	ldrh.w	r5, [sp, #166]	; 0xa6
    a230:	eba5 050c 	sub.w	r5, r5, ip
    a234:	f8ad 50a6 	strh.w	r5, [sp, #166]	; 0xa6
    a238:	3301      	adds	r3, #1
    a23a:	1a9a      	subs	r2, r3, r2
    a23c:	b213      	sxth	r3, r2
    a23e:	9309      	str	r3, [sp, #36]	; 0x24
        fill_area.x1 = draw_area.x1 + disp_area->x1;
    a240:	f8ad e0cc 	strh.w	lr, [sp, #204]	; 0xcc
        fill_area.x2 = draw_area.x2 + disp_area->x1;
    a244:	f8ad 60d0 	strh.w	r6, [sp, #208]	; 0xd0
        fill_area.y1 = draw_area.y1 + disp_area->y1;
    a248:	f8ad 00ce 	strh.w	r0, [sp, #206]	; 0xce
        fill_area.y2 = fill_area.y1;
    a24c:	f8ad 00d2 	strh.w	r0, [sp, #210]	; 0xd2
        if(dashed) {
    a250:	f1b8 0f00 	cmp.w	r8, #0
    a254:	d01c      	beq.n	a290 <lv_draw_line+0x404>
            dash_start = (vdb->area.x1 + draw_area.x1) % (dsc->dash_gap + dsc->dash_width);
    a256:	4449      	add	r1, r9
    a258:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
    a25c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
    a260:	441a      	add	r2, r3
    a262:	fb91 f3f2 	sdiv	r3, r1, r2
    a266:	fb02 1113 	mls	r1, r2, r3, r1
    a26a:	b20b      	sxth	r3, r1
    a26c:	930a      	str	r3, [sp, #40]	; 0x28
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
    a26e:	9809      	ldr	r0, [sp, #36]	; 0x24
    a270:	4606      	mov	r6, r0
    a272:	4b81      	ldr	r3, [pc, #516]	; (a478 <lv_draw_line+0x5ec>)
    a274:	4798      	blx	r3
    a276:	4682      	mov	sl, r0
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    a278:	f9bd 50a2 	ldrsh.w	r5, [sp, #162]	; 0xa2
    a27c:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
    a280:	42ab      	cmp	r3, r5
    a282:	db57      	blt.n	a334 <lv_draw_line+0x4a8>
            _lv_memset_ff(mask_buf, draw_area_w);
    a284:	f8df 920c 	ldr.w	r9, [pc, #524]	; a494 <lv_draw_line+0x608>
            _lv_blend_fill(clip, &fill_area,
    a288:	f8df b204 	ldr.w	fp, [pc, #516]	; a490 <lv_draw_line+0x604>
    a28c:	9605      	str	r6, [sp, #20]
    a28e:	e034      	b.n	a2fa <lv_draw_line+0x46e>
        if(dashed) {
    a290:	2100      	movs	r1, #0
    a292:	e7ea      	b.n	a26a <lv_draw_line+0x3de>
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
    a294:	f9b4 e006 	ldrsh.w	lr, [r4, #6]
    a298:	4473      	add	r3, lr
    a29a:	429a      	cmp	r2, r3
                            mask_buf[i] = 0x00;
    a29c:	bfba      	itte	lt
    a29e:	f80a 0001 	strblt.w	r0, [sl, r1]
    a2a2:	4613      	movlt	r3, r2
                            dash_cnt = 0;
    a2a4:	4603      	movge	r3, r0
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
    a2a6:	3101      	adds	r1, #1
    a2a8:	3301      	adds	r3, #1
    a2aa:	b21a      	sxth	r2, r3
    a2ac:	428e      	cmp	r6, r1
    a2ae:	d907      	bls.n	a2c0 <lv_draw_line+0x434>
                        if(dash_cnt <= dsc->dash_width) {
    a2b0:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
    a2b4:	4293      	cmp	r3, r2
    a2b6:	dbed      	blt.n	a294 <lv_draw_line+0x408>
                            int16_t diff = dsc->dash_width - dash_cnt;
    a2b8:	1a9a      	subs	r2, r3, r2
                            i += diff;
    a2ba:	fa01 f182 	sxtah	r1, r1, r2
    a2be:	e7f2      	b.n	a2a6 <lv_draw_line+0x41a>
    a2c0:	9605      	str	r6, [sp, #20]
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
    a2c2:	2002      	movs	r0, #2
                           dsc->blend_mode);
    a2c4:	7a63      	ldrb	r3, [r4, #9]
            _lv_blend_fill(clip, &fill_area,
    a2c6:	f003 0303 	and.w	r3, r3, #3
    a2ca:	9302      	str	r3, [sp, #8]
    a2cc:	7a23      	ldrb	r3, [r4, #8]
    a2ce:	9301      	str	r3, [sp, #4]
    a2d0:	9000      	str	r0, [sp, #0]
    a2d2:	4653      	mov	r3, sl
    a2d4:	8822      	ldrh	r2, [r4, #0]
    a2d6:	a933      	add	r1, sp, #204	; 0xcc
    a2d8:	a848      	add	r0, sp, #288	; 0x120
    a2da:	47d8      	blx	fp
            fill_area.y1++;
    a2dc:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
    a2e0:	3301      	adds	r3, #1
    a2e2:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
            fill_area.y2++;
    a2e6:	f8bd 30d2 	ldrh.w	r3, [sp, #210]	; 0xd2
    a2ea:	3301      	adds	r3, #1
    a2ec:	f8ad 30d2 	strh.w	r3, [sp, #210]	; 0xd2
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    a2f0:	3501      	adds	r5, #1
    a2f2:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
    a2f6:	429d      	cmp	r5, r3
    a2f8:	dc1c      	bgt.n	a334 <lv_draw_line+0x4a8>
            _lv_memset_ff(mask_buf, draw_area_w);
    a2fa:	9905      	ldr	r1, [sp, #20]
    a2fc:	4650      	mov	r0, sl
    a2fe:	47c8      	blx	r9
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    a300:	8a7a      	ldrh	r2, [r7, #18]
    a302:	442a      	add	r2, r5
    a304:	8a39      	ldrh	r1, [r7, #16]
    a306:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
    a30a:	4419      	add	r1, r3
    a30c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a30e:	b212      	sxth	r2, r2
    a310:	b209      	sxth	r1, r1
    a312:	4650      	mov	r0, sl
    a314:	4e59      	ldr	r6, [pc, #356]	; (a47c <lv_draw_line+0x5f0>)
    a316:	47b0      	blx	r6
            if(dashed) {
    a318:	f1b8 0f00 	cmp.w	r8, #0
    a31c:	d0d2      	beq.n	a2c4 <lv_draw_line+0x438>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
    a31e:	2800      	cmp	r0, #0
    a320:	d0d0      	beq.n	a2c4 <lv_draw_line+0x438>
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
    a322:	9b05      	ldr	r3, [sp, #20]
    a324:	b123      	cbz	r3, a330 <lv_draw_line+0x4a4>
    a326:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a328:	2100      	movs	r1, #0
                            dash_cnt = 0;
    a32a:	4608      	mov	r0, r1
    a32c:	461e      	mov	r6, r3
    a32e:	e7bf      	b.n	a2b0 <lv_draw_line+0x424>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
    a330:	2002      	movs	r0, #2
    a332:	e7c7      	b.n	a2c4 <lv_draw_line+0x438>
        _lv_mem_buf_release(mask_buf);
    a334:	4650      	mov	r0, sl
    a336:	4b52      	ldr	r3, [pc, #328]	; (a480 <lv_draw_line+0x5f4>)
    a338:	4798      	blx	r3
    a33a:	e1c3      	b.n	a6c4 <lv_draw_line+0x838>
    lv_opa_t opa = dsc->opa;
    a33c:	f894 9008 	ldrb.w	r9, [r4, #8]
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    a340:	4b50      	ldr	r3, [pc, #320]	; (a484 <lv_draw_line+0x5f8>)
    a342:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    a344:	4b50      	ldr	r3, [pc, #320]	; (a488 <lv_draw_line+0x5fc>)
    a346:	4798      	blx	r3
    a348:	4680      	mov	r8, r0
    int32_t w = dsc->width - 1;
    a34a:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
    a34e:	3d01      	subs	r5, #1
    int32_t w_half0 = w >> 1;
    a350:	106f      	asrs	r7, r5, #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
    a352:	f005 0501 	and.w	r5, r5, #1
    a356:	443d      	add	r5, r7
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
    a358:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
    a35c:	b12b      	cbz	r3, a36a <lv_draw_line+0x4de>
    a35e:	f9b4 6004 	ldrsh.w	r6, [r4, #4]
    a362:	3600      	adds	r6, #0
    a364:	bf18      	it	ne
    a366:	2601      	movne	r6, #1
    a368:	e000      	b.n	a36c <lv_draw_line+0x4e0>
    a36a:	2600      	movs	r6, #0
    if(lv_draw_mask_get_cnt()) simple_mode = false;
    a36c:	4b47      	ldr	r3, [pc, #284]	; (a48c <lv_draw_line+0x600>)
    a36e:	4798      	blx	r3
    a370:	b910      	cbnz	r0, a378 <lv_draw_line+0x4ec>
    else if(dashed) simple_mode = false;
    a372:	f086 0201 	eor.w	r2, r6, #1
    a376:	e000      	b.n	a37a <lv_draw_line+0x4ee>
    if(lv_draw_mask_get_cnt()) simple_mode = false;
    a378:	2200      	movs	r2, #0
    draw_area.x1 = point1->x - w_half1;
    a37a:	9906      	ldr	r1, [sp, #24]
    a37c:	880b      	ldrh	r3, [r1, #0]
    a37e:	1b5d      	subs	r5, r3, r5
    a380:	f8ad 50a0 	strh.w	r5, [sp, #160]	; 0xa0
    draw_area.x2 = point1->x + w_half0;
    a384:	441f      	add	r7, r3
    a386:	f8ad 70a4 	strh.w	r7, [sp, #164]	; 0xa4
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
    a38a:	9b07      	ldr	r3, [sp, #28]
    a38c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    a390:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
    a394:	4618      	mov	r0, r3
    a396:	428b      	cmp	r3, r1
    a398:	bfa8      	it	ge
    a39a:	4608      	movge	r0, r1
    a39c:	f8ad 00a2 	strh.w	r0, [sp, #162]	; 0xa2
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;
    a3a0:	428b      	cmp	r3, r1
    a3a2:	bfb8      	it	lt
    a3a4:	460b      	movlt	r3, r1
    a3a6:	3b01      	subs	r3, #1
    a3a8:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
    if(simple_mode) {
    a3ac:	b172      	cbz	r2, a3cc <lv_draw_line+0x540>
                       dsc->blend_mode);
    a3ae:	7a63      	ldrb	r3, [r4, #9]
        _lv_blend_fill(clip, &draw_area,
    a3b0:	f003 0303 	and.w	r3, r3, #3
    a3b4:	9302      	str	r3, [sp, #8]
    a3b6:	f8cd 9004 	str.w	r9, [sp, #4]
    a3ba:	2301      	movs	r3, #1
    a3bc:	9300      	str	r3, [sp, #0]
    a3be:	2300      	movs	r3, #0
    a3c0:	8822      	ldrh	r2, [r4, #0]
    a3c2:	a928      	add	r1, sp, #160	; 0xa0
    a3c4:	a848      	add	r0, sp, #288	; 0x120
    a3c6:	4d32      	ldr	r5, [pc, #200]	; (a490 <lv_draw_line+0x604>)
    a3c8:	47a8      	blx	r5
    a3ca:	e17b      	b.n	a6c4 <lv_draw_line+0x838>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
    a3cc:	aa28      	add	r2, sp, #160	; 0xa0
    a3ce:	a948      	add	r1, sp, #288	; 0x120
    a3d0:	4610      	mov	r0, r2
    a3d2:	4b28      	ldr	r3, [pc, #160]	; (a474 <lv_draw_line+0x5e8>)
    a3d4:	4798      	blx	r3
        if(!is_common) return;
    a3d6:	2800      	cmp	r0, #0
    a3d8:	f000 8174 	beq.w	a6c4 <lv_draw_line+0x838>
        draw_area.x1 -= vdb->area.x1;
    a3dc:	f9bd 00a0 	ldrsh.w	r0, [sp, #160]	; 0xa0
    a3e0:	f8b8 3010 	ldrh.w	r3, [r8, #16]
    a3e4:	1ac5      	subs	r5, r0, r3
    a3e6:	b2ad      	uxth	r5, r5
    a3e8:	f8ad 50a0 	strh.w	r5, [sp, #160]	; 0xa0
        draw_area.y1 -= vdb->area.y1;
    a3ec:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
    a3f0:	f8b8 7012 	ldrh.w	r7, [r8, #18]
    a3f4:	1bd1      	subs	r1, r2, r7
    a3f6:	f8ad 10a2 	strh.w	r1, [sp, #162]	; 0xa2
        draw_area.x2 -= vdb->area.x1;
    a3fa:	f9bd 10a4 	ldrsh.w	r1, [sp, #164]	; 0xa4
    a3fe:	1acb      	subs	r3, r1, r3
    a400:	b29b      	uxth	r3, r3
    a402:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
        draw_area.y2 -= vdb->area.y1;
    a406:	f8bd e0a6 	ldrh.w	lr, [sp, #166]	; 0xa6
    a40a:	ebae 0707 	sub.w	r7, lr, r7
    a40e:	f8ad 70a6 	strh.w	r7, [sp, #166]	; 0xa6
    a412:	3301      	adds	r3, #1
    a414:	1b5b      	subs	r3, r3, r5
    a416:	b21b      	sxth	r3, r3
    a418:	9309      	str	r3, [sp, #36]	; 0x24
        fill_area.x1 = draw_area.x1 + disp_area->x1;
    a41a:	f8ad 00cc 	strh.w	r0, [sp, #204]	; 0xcc
        fill_area.x2 = draw_area.x2 + disp_area->x1;
    a41e:	f8ad 10d0 	strh.w	r1, [sp, #208]	; 0xd0
        fill_area.y1 = draw_area.y1 + disp_area->y1;
    a422:	f8ad 20ce 	strh.w	r2, [sp, #206]	; 0xce
        fill_area.y2 = fill_area.y1;
    a426:	f8ad 20d2 	strh.w	r2, [sp, #210]	; 0xd2
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
    a42a:	930a      	str	r3, [sp, #40]	; 0x28
    a42c:	4618      	mov	r0, r3
    a42e:	4b12      	ldr	r3, [pc, #72]	; (a478 <lv_draw_line+0x5ec>)
    a430:	4798      	blx	r3
    a432:	9005      	str	r0, [sp, #20]
        if(dashed) {
    a434:	b176      	cbz	r6, a454 <lv_draw_line+0x5c8>
            dash_start = (vdb->area.x1 + draw_area.x1) % (dsc->dash_gap + dsc->dash_width);
    a436:	f9b8 2010 	ldrsh.w	r2, [r8, #16]
    a43a:	f9bd 70a0 	ldrsh.w	r7, [sp, #160]	; 0xa0
    a43e:	443a      	add	r2, r7
    a440:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
    a444:	f9b4 7004 	ldrsh.w	r7, [r4, #4]
    a448:	443b      	add	r3, r7
    a44a:	fb92 f7f3 	sdiv	r7, r2, r3
    a44e:	fb03 2717 	mls	r7, r3, r7, r2
    a452:	e000      	b.n	a456 <lv_draw_line+0x5ca>
        if(dashed) {
    a454:	2700      	movs	r7, #0
    a456:	b23f      	sxth	r7, r7
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    a458:	f9bd 50a2 	ldrsh.w	r5, [sp, #162]	; 0xa2
    a45c:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
    a460:	429d      	cmp	r5, r3
    a462:	dc54      	bgt.n	a50e <lv_draw_line+0x682>
            _lv_memset_ff(mask_buf, draw_area_w);
    a464:	f8df 902c 	ldr.w	r9, [pc, #44]	; a494 <lv_draw_line+0x608>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    a468:	f8df a010 	ldr.w	sl, [pc, #16]	; a47c <lv_draw_line+0x5f0>
            _lv_blend_fill(clip, &fill_area,
    a46c:	f8df b020 	ldr.w	fp, [pc, #32]	; a490 <lv_draw_line+0x604>
    a470:	e02d      	b.n	a4ce <lv_draw_line+0x642>
    a472:	bf00      	nop
    a474:	00010719 	.word	0x00010719
    a478:	00011a65 	.word	0x00011a65
    a47c:	0000b379 	.word	0x0000b379
    a480:	000116e5 	.word	0x000116e5
    a484:	00005789 	.word	0x00005789
    a488:	0001025d 	.word	0x0001025d
    a48c:	0000b421 	.word	0x0000b421
    a490:	00006e05 	.word	0x00006e05
    a494:	00011ccd 	.word	0x00011ccd
                dash_cnt ++;
    a498:	3701      	adds	r7, #1
    a49a:	b23f      	sxth	r7, r7
            _lv_blend_fill(clip, &fill_area,
    a49c:	2300      	movs	r3, #0
    a49e:	9302      	str	r3, [sp, #8]
    a4a0:	7a23      	ldrb	r3, [r4, #8]
    a4a2:	9301      	str	r3, [sp, #4]
    a4a4:	9000      	str	r0, [sp, #0]
    a4a6:	9b05      	ldr	r3, [sp, #20]
    a4a8:	8822      	ldrh	r2, [r4, #0]
    a4aa:	a933      	add	r1, sp, #204	; 0xcc
    a4ac:	a848      	add	r0, sp, #288	; 0x120
    a4ae:	47d8      	blx	fp
            fill_area.y1++;
    a4b0:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
    a4b4:	3301      	adds	r3, #1
    a4b6:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
            fill_area.y2++;
    a4ba:	f8bd 30d2 	ldrh.w	r3, [sp, #210]	; 0xd2
    a4be:	3301      	adds	r3, #1
    a4c0:	f8ad 30d2 	strh.w	r3, [sp, #210]	; 0xd2
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    a4c4:	3501      	adds	r5, #1
    a4c6:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
    a4ca:	429d      	cmp	r5, r3
    a4cc:	dc1f      	bgt.n	a50e <lv_draw_line+0x682>
            _lv_memset_ff(mask_buf, draw_area_w);
    a4ce:	990a      	ldr	r1, [sp, #40]	; 0x28
    a4d0:	9805      	ldr	r0, [sp, #20]
    a4d2:	47c8      	blx	r9
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    a4d4:	f8b8 2012 	ldrh.w	r2, [r8, #18]
    a4d8:	442a      	add	r2, r5
    a4da:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    a4de:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
    a4e2:	4419      	add	r1, r3
    a4e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a4e6:	b212      	sxth	r2, r2
    a4e8:	b209      	sxth	r1, r1
    a4ea:	9805      	ldr	r0, [sp, #20]
    a4ec:	47d0      	blx	sl
            if(dashed) {
    a4ee:	2e00      	cmp	r6, #0
    a4f0:	d0d4      	beq.n	a49c <lv_draw_line+0x610>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
    a4f2:	2800      	cmp	r0, #0
    a4f4:	d0d0      	beq.n	a498 <lv_draw_line+0x60c>
                    if(dash_cnt > dsc->dash_width) {
    a4f6:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
                        mask_res = LV_DRAW_MASK_RES_TRANSP;
    a4fa:	42ba      	cmp	r2, r7
    a4fc:	bfb8      	it	lt
    a4fe:	2000      	movlt	r0, #0
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
    a500:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
    a504:	4413      	add	r3, r2
                        dash_cnt = 0;
    a506:	429f      	cmp	r7, r3
    a508:	bfa8      	it	ge
    a50a:	2700      	movge	r7, #0
    a50c:	e7c4      	b.n	a498 <lv_draw_line+0x60c>
        _lv_mem_buf_release(mask_buf);
    a50e:	9805      	ldr	r0, [sp, #20]
    a510:	4b97      	ldr	r3, [pc, #604]	; (a770 <lv_draw_line+0x8e4>)
    a512:	4798      	blx	r3
    a514:	e0d6      	b.n	a6c4 <lv_draw_line+0x838>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
    a516:	fa1f fb86 	uxth.w	fp, r6
    a51a:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    a51e:	b2a9      	uxth	r1, r5
    a520:	eb0b 0208 	add.w	r2, fp, r8
    a524:	2300      	movs	r3, #0
    a526:	9301      	str	r3, [sp, #4]
    a528:	460f      	mov	r7, r1
    a52a:	4488      	add	r8, r1
    a52c:	fa0f f388 	sxth.w	r3, r8
    a530:	9300      	str	r3, [sp, #0]
    a532:	4653      	mov	r3, sl
    a534:	b212      	sxth	r2, r2
    a536:	9905      	ldr	r1, [sp, #20]
    a538:	a812      	add	r0, sp, #72	; 0x48
    a53a:	f8df 8238 	ldr.w	r8, [pc, #568]	; a774 <lv_draw_line+0x8e8>
    a53e:	47c0      	blx	r8
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
    a540:	fa1f f389 	uxth.w	r3, r9
    a544:	ebab 0203 	sub.w	r2, fp, r3
    a548:	2101      	movs	r1, #1
    a54a:	9101      	str	r1, [sp, #4]
    a54c:	1afb      	subs	r3, r7, r3
    a54e:	b21b      	sxth	r3, r3
    a550:	9300      	str	r3, [sp, #0]
    a552:	4653      	mov	r3, sl
    a554:	b212      	sxth	r2, r2
    a556:	9905      	ldr	r1, [sp, #20]
    a558:	a81d      	add	r0, sp, #116	; 0x74
    a55a:	47c0      	blx	r8
    a55c:	e570      	b.n	a040 <lv_draw_line+0x1b4>
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
    a55e:	f8bd b014 	ldrh.w	fp, [sp, #20]
    a562:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    a566:	fa1f f38a 	uxth.w	r3, sl
    a56a:	461f      	mov	r7, r3
    a56c:	4443      	add	r3, r8
    a56e:	44d8      	add	r8, fp
    a570:	2200      	movs	r2, #0
    a572:	9201      	str	r2, [sp, #4]
    a574:	9500      	str	r5, [sp, #0]
    a576:	b21b      	sxth	r3, r3
    a578:	4632      	mov	r2, r6
    a57a:	fa0f f188 	sxth.w	r1, r8
    a57e:	a812      	add	r0, sp, #72	; 0x48
    a580:	f8df 81f0 	ldr.w	r8, [pc, #496]	; a774 <lv_draw_line+0x8e8>
    a584:	47c0      	blx	r8
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
    a586:	fa1f f989 	uxth.w	r9, r9
    a58a:	eba7 0309 	sub.w	r3, r7, r9
    a58e:	ebab 0909 	sub.w	r9, fp, r9
    a592:	2201      	movs	r2, #1
    a594:	9201      	str	r2, [sp, #4]
    a596:	9500      	str	r5, [sp, #0]
    a598:	b21b      	sxth	r3, r3
    a59a:	4632      	mov	r2, r6
    a59c:	fa0f f189 	sxth.w	r1, r9
    a5a0:	a81d      	add	r0, sp, #116	; 0x74
    a5a2:	47c0      	blx	r8
    a5a4:	e54c      	b.n	a040 <lv_draw_line+0x1b4>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
    a5a6:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
    a5aa:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
    a5ae:	9905      	ldr	r1, [sp, #20]
    a5b0:	eba1 0308 	sub.w	r3, r1, r8
    a5b4:	2203      	movs	r2, #3
    a5b6:	9201      	str	r2, [sp, #4]
    a5b8:	eb09 0206 	add.w	r2, r9, r6
    a5bc:	b212      	sxth	r2, r2
    a5be:	9200      	str	r2, [sp, #0]
    a5c0:	b21b      	sxth	r3, r3
    a5c2:	4632      	mov	r2, r6
    a5c4:	a828      	add	r0, sp, #160	; 0xa0
    a5c6:	4e6b      	ldr	r6, [pc, #428]	; (a774 <lv_draw_line+0x8e8>)
    a5c8:	47b0      	blx	r6
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
    a5ca:	ebaa 0308 	sub.w	r3, sl, r8
    a5ce:	2202      	movs	r2, #2
    a5d0:	9201      	str	r2, [sp, #4]
    a5d2:	eb09 0205 	add.w	r2, r9, r5
    a5d6:	b212      	sxth	r2, r2
    a5d8:	9200      	str	r2, [sp, #0]
    a5da:	b21b      	sxth	r3, r3
    a5dc:	462a      	mov	r2, r5
    a5de:	4651      	mov	r1, sl
    a5e0:	a833      	add	r0, sp, #204	; 0xcc
    a5e2:	47b0      	blx	r6
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
    a5e4:	2100      	movs	r1, #0
    a5e6:	a828      	add	r0, sp, #160	; 0xa0
    a5e8:	4d63      	ldr	r5, [pc, #396]	; (a778 <lv_draw_line+0x8ec>)
    a5ea:	47a8      	blx	r5
    a5ec:	900a      	str	r0, [sp, #40]	; 0x28
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
    a5ee:	2100      	movs	r1, #0
    a5f0:	a833      	add	r0, sp, #204	; 0xcc
    a5f2:	47a8      	blx	r5
    a5f4:	900d      	str	r0, [sp, #52]	; 0x34
    a5f6:	e536      	b.n	a066 <lv_draw_line+0x1da>
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), LV_HOR_RES_MAX);
    a5f8:	a80e      	add	r0, sp, #56	; 0x38
    a5fa:	4b60      	ldr	r3, [pc, #384]	; (a77c <lv_draw_line+0x8f0>)
    a5fc:	4798      	blx	r3
    a5fe:	4683      	mov	fp, r0
    a600:	e55a      	b.n	a0b8 <lv_draw_line+0x22c>
            _lv_memset_00(&mask_buf[mask_p], draw_area_w);
    a602:	4629      	mov	r1, r5
    a604:	4640      	mov	r0, r8
    a606:	4b5e      	ldr	r3, [pc, #376]	; (a780 <lv_draw_line+0x8f4>)
    a608:	4798      	blx	r3
    a60a:	e02d      	b.n	a668 <lv_draw_line+0x7dc>
                           dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                           dsc->blend_mode);
    a60c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a60e:	7a53      	ldrb	r3, [r2, #9]
            _lv_blend_fill(&fill_area, clip,
    a610:	f003 0303 	and.w	r3, r3, #3
    a614:	9302      	str	r3, [sp, #8]
    a616:	7a13      	ldrb	r3, [r2, #8]
    a618:	9301      	str	r3, [sp, #4]
    a61a:	2302      	movs	r3, #2
    a61c:	9300      	str	r3, [sp, #0]
    a61e:	464b      	mov	r3, r9
    a620:	8812      	ldrh	r2, [r2, #0]
    a622:	a948      	add	r1, sp, #288	; 0x120
    a624:	a810      	add	r0, sp, #64	; 0x40
    a626:	4c57      	ldr	r4, [pc, #348]	; (a784 <lv_draw_line+0x8f8>)
    a628:	47a0      	blx	r4

            fill_area.y1 = fill_area.y2 + 1;
    a62a:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
    a62e:	3301      	adds	r3, #1
    a630:	b21b      	sxth	r3, r3
    a632:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2 = fill_area.y1;
    a636:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            mask_p = 0;
            _lv_memset_ff(mask_buf, mask_buf_size);
    a63a:	4659      	mov	r1, fp
    a63c:	4648      	mov	r0, r9
    a63e:	4b52      	ldr	r3, [pc, #328]	; (a788 <lv_draw_line+0x8fc>)
    a640:	4798      	blx	r3
            mask_p = 0;
    a642:	2700      	movs	r7, #0
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
    a644:	3601      	adds	r6, #1
    a646:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    a64a:	f9ba 2012 	ldrsh.w	r2, [sl, #18]
    a64e:	4413      	add	r3, r2
    a650:	429e      	cmp	r6, r3
    a652:	dc13      	bgt.n	a67c <lv_draw_line+0x7f0>
        lv_draw_mask_res_t mask_res = lv_draw_mask_apply(&mask_buf[mask_p], x, h, draw_area_w);
    a654:	eb09 0807 	add.w	r8, r9, r7
    a658:	462b      	mov	r3, r5
    a65a:	b232      	sxth	r2, r6
    a65c:	9905      	ldr	r1, [sp, #20]
    a65e:	4640      	mov	r0, r8
    a660:	4c4a      	ldr	r4, [pc, #296]	; (a78c <lv_draw_line+0x900>)
    a662:	47a0      	blx	r4
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
    a664:	2800      	cmp	r0, #0
    a666:	d0cc      	beq.n	a602 <lv_draw_line+0x776>
        mask_p += draw_area_w;
    a668:	442f      	add	r7, r5
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
    a66a:	19eb      	adds	r3, r5, r7
    a66c:	459b      	cmp	fp, r3
    a66e:	d9cd      	bls.n	a60c <lv_draw_line+0x780>
            fill_area.y2 ++;
    a670:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
    a674:	3301      	adds	r3, #1
    a676:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    a67a:	e7e3      	b.n	a644 <lv_draw_line+0x7b8>
    a67c:	9c09      	ldr	r4, [sp, #36]	; 0x24
        }
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
    a67e:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
    a682:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
    a686:	429a      	cmp	r2, r3
    a688:	d010      	beq.n	a6ac <lv_draw_line+0x820>
        fill_area.y2--;
    a68a:	3b01      	subs	r3, #1
    a68c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        _lv_blend_fill(&fill_area, clip,
                       dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                       dsc->blend_mode);
    a690:	7a63      	ldrb	r3, [r4, #9]
        _lv_blend_fill(&fill_area, clip,
    a692:	f003 0303 	and.w	r3, r3, #3
    a696:	9302      	str	r3, [sp, #8]
    a698:	7a23      	ldrb	r3, [r4, #8]
    a69a:	9301      	str	r3, [sp, #4]
    a69c:	2302      	movs	r3, #2
    a69e:	9300      	str	r3, [sp, #0]
    a6a0:	464b      	mov	r3, r9
    a6a2:	8822      	ldrh	r2, [r4, #0]
    a6a4:	a948      	add	r1, sp, #288	; 0x120
    a6a6:	a810      	add	r0, sp, #64	; 0x40
    a6a8:	4d36      	ldr	r5, [pc, #216]	; (a784 <lv_draw_line+0x8f8>)
    a6aa:	47a8      	blx	r5

    }

    _lv_mem_buf_release(mask_buf);
    a6ac:	4648      	mov	r0, r9
    a6ae:	4b30      	ldr	r3, [pc, #192]	; (a770 <lv_draw_line+0x8e4>)
    a6b0:	4798      	blx	r3

    lv_draw_mask_remove_id(mask_left_id);
    a6b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a6b4:	4d36      	ldr	r5, [pc, #216]	; (a790 <lv_draw_line+0x904>)
    a6b6:	47a8      	blx	r5
    lv_draw_mask_remove_id(mask_right_id);
    a6b8:	980c      	ldr	r0, [sp, #48]	; 0x30
    a6ba:	47a8      	blx	r5
    lv_draw_mask_remove_id(mask_top_id);
    a6bc:	980a      	ldr	r0, [sp, #40]	; 0x28
    a6be:	47a8      	blx	r5
    lv_draw_mask_remove_id(mask_bottom_id);
    a6c0:	980d      	ldr	r0, [sp, #52]	; 0x34
    a6c2:	47a8      	blx	r5
    if(dsc->round_end || dsc->round_start) {
    a6c4:	7a63      	ldrb	r3, [r4, #9]
    a6c6:	f013 0f0c 	tst.w	r3, #12
    a6ca:	d102      	bne.n	a6d2 <lv_draw_line+0x846>
}
    a6cc:	b04b      	add	sp, #300	; 0x12c
    a6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_draw_rect_dsc_init(&cir_dsc);
    a6d2:	a833      	add	r0, sp, #204	; 0xcc
    a6d4:	4b2f      	ldr	r3, [pc, #188]	; (a794 <lv_draw_line+0x908>)
    a6d6:	4798      	blx	r3
        cir_dsc.bg_color = dsc->color;
    a6d8:	8823      	ldrh	r3, [r4, #0]
    a6da:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
        cir_dsc.radius = LV_RADIUS_CIRCLE;
    a6de:	f647 73ff 	movw	r3, #32767	; 0x7fff
    a6e2:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
        cir_dsc.bg_opa = dsc->opa;
    a6e6:	7a23      	ldrb	r3, [r4, #8]
    a6e8:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
        int32_t r = (dsc->width >> 1);
    a6ec:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    a6f0:	105e      	asrs	r6, r3, #1
        int32_t r_corr = (dsc->width & 1) ? 0 : 1;
    a6f2:	f083 0301 	eor.w	r3, r3, #1
    a6f6:	f003 0501 	and.w	r5, r3, #1
        if(dsc->round_start) {
    a6fa:	7a63      	ldrb	r3, [r4, #9]
    a6fc:	f013 0f04 	tst.w	r3, #4
    a700:	d11c      	bne.n	a73c <lv_draw_line+0x8b0>
        if(dsc->round_end) {
    a702:	7a63      	ldrb	r3, [r4, #9]
    a704:	f013 0f08 	tst.w	r3, #8
    a708:	d0e0      	beq.n	a6cc <lv_draw_line+0x840>
            cir_area.x1 = point2->x - r;
    a70a:	9907      	ldr	r1, [sp, #28]
    a70c:	880a      	ldrh	r2, [r1, #0]
    a70e:	b2b6      	uxth	r6, r6
    a710:	1b93      	subs	r3, r2, r6
    a712:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
            cir_area.y1 = point2->y - r;
    a716:	8849      	ldrh	r1, [r1, #2]
    a718:	1b8b      	subs	r3, r1, r6
    a71a:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
            cir_area.x2 = point2->x + r - r_corr;
    a71e:	b2ab      	uxth	r3, r5
    a720:	4432      	add	r2, r6
    a722:	1ad2      	subs	r2, r2, r3
    a724:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
            cir_area.y2 = point2->y + r - r_corr ;
    a728:	440e      	add	r6, r1
    a72a:	1af3      	subs	r3, r6, r3
    a72c:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
            lv_draw_rect(&cir_area, clip, &cir_dsc);
    a730:	aa33      	add	r2, sp, #204	; 0xcc
    a732:	9908      	ldr	r1, [sp, #32]
    a734:	a828      	add	r0, sp, #160	; 0xa0
    a736:	4b18      	ldr	r3, [pc, #96]	; (a798 <lv_draw_line+0x90c>)
    a738:	4798      	blx	r3
    a73a:	e7c7      	b.n	a6cc <lv_draw_line+0x840>
            cir_area.x1 = point1->x - r;
    a73c:	9806      	ldr	r0, [sp, #24]
    a73e:	8802      	ldrh	r2, [r0, #0]
    a740:	b2b3      	uxth	r3, r6
    a742:	1ad1      	subs	r1, r2, r3
    a744:	f8ad 10a0 	strh.w	r1, [sp, #160]	; 0xa0
            cir_area.y1 = point1->y - r;
    a748:	8840      	ldrh	r0, [r0, #2]
    a74a:	1ac1      	subs	r1, r0, r3
    a74c:	f8ad 10a2 	strh.w	r1, [sp, #162]	; 0xa2
            cir_area.x2 = point1->x + r - r_corr;
    a750:	b2a9      	uxth	r1, r5
    a752:	441a      	add	r2, r3
    a754:	1a52      	subs	r2, r2, r1
    a756:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
            cir_area.y2 = point1->y + r - r_corr ;
    a75a:	4403      	add	r3, r0
    a75c:	1a5b      	subs	r3, r3, r1
    a75e:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
            lv_draw_rect(&cir_area, clip, &cir_dsc);
    a762:	aa33      	add	r2, sp, #204	; 0xcc
    a764:	9908      	ldr	r1, [sp, #32]
    a766:	a828      	add	r0, sp, #160	; 0xa0
    a768:	4b0b      	ldr	r3, [pc, #44]	; (a798 <lv_draw_line+0x90c>)
    a76a:	4798      	blx	r3
    a76c:	e7c9      	b.n	a702 <lv_draw_line+0x876>
    a76e:	bf00      	nop
    a770:	000116e5 	.word	0x000116e5
    a774:	0000b445 	.word	0x0000b445
    a778:	0000b33d 	.word	0x0000b33d
    a77c:	000106fd 	.word	0x000106fd
    a780:	00011c17 	.word	0x00011c17
    a784:	00006e05 	.word	0x00006e05
    a788:	00011ccd 	.word	0x00011ccd
    a78c:	0000b379 	.word	0x0000b379
    a790:	0000b3c9 	.word	0x0000b3c9
    a794:	0000b7c5 	.word	0x0000b7c5
    a798:	0000b88d 	.word	0x0000b88d

0000a79c <lv_draw_mask_line>:
 **********************/

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_line(lv_opa_t * mask_buf, lv_coord_t abs_x,
                                                                  lv_coord_t abs_y, lv_coord_t len,
                                                                  lv_draw_mask_line_param_t * p)
{
    a79c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a7a0:	9c06      	ldr	r4, [sp, #24]
    /*Make to points relative to the vertex*/
    abs_y -= p->origo.y;
    a7a2:	8aa5      	ldrh	r5, [r4, #20]
    a7a4:	1b52      	subs	r2, r2, r5
    a7a6:	b212      	sxth	r2, r2
    abs_x -= p->origo.x;
    a7a8:	8a65      	ldrh	r5, [r4, #18]
    a7aa:	1b4d      	subs	r5, r1, r5
    a7ac:	b22d      	sxth	r5, r5

    /*Handle special cases*/
    if(p->steep == 0) {
    a7ae:	6a21      	ldr	r1, [r4, #32]
    a7b0:	2900      	cmp	r1, #0
    a7b2:	d14b      	bne.n	a84c <lv_draw_mask_line+0xb0>
        /*Horizontal*/
        if(p->flat) {
    a7b4:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    a7b8:	f011 0f01 	tst.w	r1, #1
    a7bc:	d016      	beq.n	a7ec <lv_draw_mask_line+0x50>
            /*Non sense: Can't be on the right/left of a horizontal line*/
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
    a7be:	7c23      	ldrb	r3, [r4, #16]
    a7c0:	f003 0303 	and.w	r3, r3, #3
    a7c4:	2b01      	cmp	r3, #1
    a7c6:	f240 81db 	bls.w	ab80 <lv_draw_mask_line+0x3e4>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
    a7ca:	2b02      	cmp	r3, #2
    a7cc:	d004      	beq.n	a7d8 <lv_draw_mask_line+0x3c>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
    a7ce:	2b03      	cmp	r3, #3
    a7d0:	d006      	beq.n	a7e0 <lv_draw_mask_line+0x44>
            else {
                return LV_DRAW_MASK_RES_TRANSP;
    a7d2:	2000      	movs	r0, #0
    a7d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
    a7d8:	3201      	adds	r2, #1
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
    a7da:	0fd0      	lsrs	r0, r2, #31
    a7dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a7e0:	2a00      	cmp	r2, #0
    a7e2:	bfd4      	ite	le
    a7e4:	2000      	movle	r0, #0
    a7e6:	2001      	movgt	r0, #1
    a7e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            }
        }
        /*Vertical*/
        else {
            /*Non sense: Can't be on the top/bottom of a vertical line*/
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
    a7ec:	7c22      	ldrb	r2, [r4, #16]
    a7ee:	f002 0203 	and.w	r2, r2, #3
    a7f2:	1e91      	subs	r1, r2, #2
    a7f4:	b2c9      	uxtb	r1, r1
    a7f6:	2901      	cmp	r1, #1
    a7f8:	f240 81c5 	bls.w	ab86 <lv_draw_mask_line+0x3ea>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
    a7fc:	2a01      	cmp	r2, #1
    a7fe:	d00c      	beq.n	a81a <lv_draw_mask_line+0x7e>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) {
    a800:	b9b2      	cbnz	r2, a830 <lv_draw_mask_line+0x94>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
    a802:	18e9      	adds	r1, r5, r3
    a804:	f100 81c2 	bmi.w	ab8c <lv_draw_mask_line+0x3f0>
                else {
                    int32_t k = - abs_x;
    a808:	426d      	negs	r5, r5
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
    a80a:	2d00      	cmp	r5, #0
    a80c:	f2c0 81c1 	blt.w	ab92 <lv_draw_mask_line+0x3f6>
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
    a810:	42ab      	cmp	r3, r5
    a812:	dc07      	bgt.n	a824 <lv_draw_mask_line+0x88>
                    return  LV_DRAW_MASK_RES_CHANGED;
    a814:	2002      	movs	r0, #2
    a816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
    a81a:	2d00      	cmp	r5, #0
    a81c:	dd08      	ble.n	a830 <lv_draw_mask_line+0x94>
    a81e:	2001      	movs	r0, #1
    a820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
    a824:	4428      	add	r0, r5
    a826:	4bcd      	ldr	r3, [pc, #820]	; (ab5c <lv_draw_mask_line+0x3c0>)
    a828:	4798      	blx	r3
                    return  LV_DRAW_MASK_RES_CHANGED;
    a82a:	2002      	movs	r0, #2
    a82c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                }
            }
            else {
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
    a830:	42dd      	cmn	r5, r3
    a832:	f100 81b1 	bmi.w	ab98 <lv_draw_mask_line+0x3fc>
                else {
                    int32_t k = - abs_x;
    a836:	4269      	negs	r1, r5
    a838:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
                    if(k < 0) k = 0;
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
    a83c:	428b      	cmp	r3, r1
    a83e:	f340 81ae 	ble.w	ab9e <lv_draw_mask_line+0x402>
                    else if(k >= 0 && k < len) _lv_memset_00(&mask_buf[0], k);
    a842:	4bc6      	ldr	r3, [pc, #792]	; (ab5c <lv_draw_mask_line+0x3c0>)
    a844:	4798      	blx	r3
                    return  LV_DRAW_MASK_RES_CHANGED;
    a846:	2002      	movs	r0, #2
    a848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            }
        }
    }

    lv_draw_mask_res_t res;
    if(p->flat) {
    a84c:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
    a850:	f016 0f01 	tst.w	r6, #1
    a854:	d10f      	bne.n	a876 <lv_draw_mask_line+0xda>
{
    int32_t k;
    int32_t x_at_y;
    /* At the beginning of the mask if the limit line is greater then the mask's y.
     * Then the mask is in the "wrong" area*/
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
    a856:	69a7      	ldr	r7, [r4, #24]
    a858:	fb02 f107 	mul.w	r1, r2, r7
    a85c:	1289      	asrs	r1, r1, #10
    if(p->xy_steep > 0) x_at_y++;
    a85e:	2f00      	cmp	r7, #0
    a860:	bfcc      	ite	gt
    a862:	f101 0e01 	addgt.w	lr, r1, #1
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
    a866:	468e      	movle	lr, r1
    if(x_at_y < abs_x) {
    a868:	4575      	cmp	r5, lr
    a86a:	f340 8098 	ble.w	a99e <lv_draw_mask_line+0x202>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
    a86e:	f3c6 0040 	ubfx	r0, r6, #1, #1
    a872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
    a876:	69e1      	ldr	r1, [r4, #28]
    a878:	fb05 f701 	mul.w	r7, r5, r1
    a87c:	12bf      	asrs	r7, r7, #10
    if(p->yx_steep > 0) {
    a87e:	2900      	cmp	r1, #0
    a880:	dd06      	ble.n	a890 <lv_draw_mask_line+0xf4>
        if(y_at_x > abs_y) {
    a882:	4297      	cmp	r7, r2
    a884:	f340 81b8 	ble.w	abf8 <lv_draw_mask_line+0x45c>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
    a888:	f3c6 0040 	ubfx	r0, r6, #1, #1
    a88c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(y_at_x < abs_y) {
    a890:	4297      	cmp	r7, r2
    a892:	f280 81ed 	bge.w	ac70 <lv_draw_mask_line+0x4d4>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
    a896:	f3c6 0040 	ubfx	r0, r6, #1, #1
    a89a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if(p->inv) {
    a89e:	f086 0002 	eor.w	r0, r6, #2
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
    a8a2:	f3c0 0040 	ubfx	r0, r0, #1, #1
    a8a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if(p->inv) {
    a8aa:	f086 0002 	eor.w	r0, r6, #2
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
    a8ae:	f3c0 0040 	ubfx	r0, r0, #1, #1
    a8b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}


LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
    if(mask_new >= LV_OPA_MAX) return mask_act;
    if(mask_new <= LV_OPA_MIN) return 0;
    a8b6:	2500      	movs	r5, #0
    a8b8:	e1d4      	b.n	ac64 <lv_draw_mask_line+0x4c8>
    a8ba:	46f4      	mov	ip, lr
            mask_buf[k] = mask_mix(mask_buf[k], m);
    a8bc:	f888 c000 	strb.w	ip, [r8]
        px_h -= p->spx;
    a8c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a8c2:	1ad2      	subs	r2, r2, r3
        k++;
    a8c4:	3501      	adds	r5, #1
    a8c6:	3601      	adds	r6, #1
        if(k >= len) break;
    a8c8:	42bd      	cmp	r5, r7
    a8ca:	da49      	bge.n	a960 <lv_draw_mask_line+0x1c4>
    while(px_h > p->spx) {
    a8cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a8ce:	429a      	cmp	r2, r3
    a8d0:	dd1d      	ble.n	a90e <lv_draw_mask_line+0x172>
        if(k >= 0 && k < len) {
    a8d2:	2d00      	cmp	r5, #0
    a8d4:	dbf4      	blt.n	a8c0 <lv_draw_mask_line+0x124>
    a8d6:	42bd      	cmp	r5, r7
    a8d8:	daf2      	bge.n	a8c0 <lv_draw_mask_line+0x124>
            m = px_h - (p->spx >> 1);
    a8da:	eba2 0363 	sub.w	r3, r2, r3, asr #1
    a8de:	b2db      	uxtb	r3, r3
            if(p->inv) m = 255 - m;
    a8e0:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    a8e4:	f01c 0f02 	tst.w	ip, #2
    a8e8:	bf1c      	itt	ne
    a8ea:	43db      	mvnne	r3, r3
    a8ec:	b2db      	uxtbne	r3, r3
    a8ee:	46b0      	mov	r8, r6
            mask_buf[k] = mask_mix(mask_buf[k], m);
    a8f0:	f896 c000 	ldrb.w	ip, [r6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    a8f4:	2bf9      	cmp	r3, #249	; 0xf9
    a8f6:	d8e1      	bhi.n	a8bc <lv_draw_mask_line+0x120>
    if(mask_new <= LV_OPA_MIN) return 0;
    a8f8:	2b05      	cmp	r3, #5
    a8fa:	d9de      	bls.n	a8ba <lv_draw_mask_line+0x11e>

    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    a8fc:	fb03 f30c 	mul.w	r3, r3, ip
    a900:	eb03 2c03 	add.w	ip, r3, r3, lsl #8
    a904:	eb03 13cc 	add.w	r3, r3, ip, lsl #7
    a908:	f3c3 5cc7 	ubfx	ip, r3, #23, #8
    a90c:	e7d6      	b.n	a8bc <lv_draw_mask_line+0x120>
    if(k < len && k >= 0) {
    a90e:	42bd      	cmp	r5, r7
    a910:	da26      	bge.n	a960 <lv_draw_mask_line+0x1c4>
    a912:	2d00      	cmp	r5, #0
    a914:	db24      	blt.n	a960 <lv_draw_mask_line+0x1c4>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
    a916:	69a3      	ldr	r3, [r4, #24]
    a918:	fb03 f302 	mul.w	r3, r3, r2
    a91c:	129b      	asrs	r3, r3, #10
        m = (x_inters * px_h) >> 9;
    a91e:	fb02 f203 	mul.w	r2, r2, r3
    a922:	f3c2 2247 	ubfx	r2, r2, #9, #8
        if(p->yx_steep < 0) m = 255 - m;
    a926:	69e3      	ldr	r3, [r4, #28]
    a928:	2b00      	cmp	r3, #0
    a92a:	bfbc      	itt	lt
    a92c:	43d2      	mvnlt	r2, r2
    a92e:	b2d2      	uxtblt	r2, r2
        if(p->inv) m = 255 - m;
    a930:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    a934:	f013 0f02 	tst.w	r3, #2
    a938:	bf1c      	itt	ne
    a93a:	43d2      	mvnne	r2, r2
    a93c:	b2d2      	uxtbne	r2, r2
        mask_buf[k] = mask_mix(mask_buf[k], m);
    a93e:	1946      	adds	r6, r0, r5
    a940:	5d43      	ldrb	r3, [r0, r5]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    a942:	2af9      	cmp	r2, #249	; 0xf9
    a944:	d80b      	bhi.n	a95e <lv_draw_mask_line+0x1c2>
    if(mask_new <= LV_OPA_MIN) return 0;
    a946:	2a05      	cmp	r2, #5
    a948:	d908      	bls.n	a95c <lv_draw_mask_line+0x1c0>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    a94a:	fb02 f203 	mul.w	r2, r2, r3
    a94e:	eb02 2302 	add.w	r3, r2, r2, lsl #8
    a952:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
    a956:	f3c2 53c7 	ubfx	r3, r2, #23, #8
    a95a:	e000      	b.n	a95e <lv_draw_mask_line+0x1c2>
    if(mask_new <= LV_OPA_MIN) return 0;
    a95c:	2300      	movs	r3, #0
        mask_buf[k] = mask_mix(mask_buf[k], m);
    a95e:	7033      	strb	r3, [r6, #0]
    if(p->inv) {
    a960:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    a964:	f013 0f02 	tst.w	r3, #2
    a968:	d00a      	beq.n	a980 <lv_draw_mask_line+0x1e4>
        if(k > len) {
    a96a:	428f      	cmp	r7, r1
    a96c:	f2c0 811a 	blt.w	aba4 <lv_draw_mask_line+0x408>
        if(k >= 0) {
    a970:	2900      	cmp	r1, #0
    a972:	f2c0 811a 	blt.w	abaa <lv_draw_mask_line+0x40e>
            _lv_memset_00(&mask_buf[0], k);
    a976:	4b79      	ldr	r3, [pc, #484]	; (ab5c <lv_draw_mask_line+0x3c0>)
    a978:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
    a97a:	2002      	movs	r0, #2
    a97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(k < 0) {
    a980:	3501      	adds	r5, #1
    a982:	f100 8115 	bmi.w	abb0 <lv_draw_mask_line+0x414>
        if(k <= len) {
    a986:	42bd      	cmp	r5, r7
    a988:	dd02      	ble.n	a990 <lv_draw_mask_line+0x1f4>
    return LV_DRAW_MASK_RES_CHANGED;
    a98a:	2002      	movs	r0, #2
    a98c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            _lv_memset_00(&mask_buf[k], len - k);
    a990:	1b79      	subs	r1, r7, r5
    a992:	4428      	add	r0, r5
    a994:	4b71      	ldr	r3, [pc, #452]	; (ab5c <lv_draw_mask_line+0x3c0>)
    a996:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
    a998:	2002      	movs	r0, #2
    a99a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(x_at_y > abs_x + len) {
    a99e:	eb05 0e03 	add.w	lr, r5, r3
    a9a2:	4571      	cmp	r1, lr
    a9a4:	dd05      	ble.n	a9b2 <lv_draw_mask_line+0x216>
        if(p->inv) {
    a9a6:	f086 0002 	eor.w	r0, r6, #2
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
    a9aa:	f3c0 0040 	ubfx	r0, r0, #1, #1
    a9ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    int32_t xs = ((abs_y << 8) * p->xy_steep) >> 10;
    a9b2:	0211      	lsls	r1, r2, #8
    a9b4:	fb07 f101 	mul.w	r1, r7, r1
    int32_t xsi = xs >> 8;
    a9b8:	ea4f 48a1 	mov.w	r8, r1, asr #18
    int32_t xsf = xs & 0xFF;
    a9bc:	f3c1 2187 	ubfx	r1, r1, #10, #8
    int32_t xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
    a9c0:	3201      	adds	r2, #1
    a9c2:	0212      	lsls	r2, r2, #8
    a9c4:	fb07 f202 	mul.w	r2, r7, r2
    int32_t xei = xe >> 8;
    a9c8:	ea4f 4ca2 	mov.w	ip, r2, asr #18
    k = xsi - abs_x;
    a9cc:	eba8 0e05 	sub.w	lr, r8, r5
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
    a9d0:	45e0      	cmp	r8, ip
    a9d2:	d063      	beq.n	aa9c <lv_draw_mask_line+0x300>
    a9d4:	2f00      	cmp	r7, #0
    a9d6:	db5b      	blt.n	aa90 <lv_draw_mask_line+0x2f4>
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
    a9d8:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
    a9dc:	69e2      	ldr	r2, [r4, #28]
    a9de:	fb02 f201 	mul.w	r2, r2, r1
    a9e2:	1295      	asrs	r5, r2, #10
            if(k >= 0 && k < len) {
    a9e4:	f1be 0f00 	cmp.w	lr, #0
    a9e8:	db1c      	blt.n	aa24 <lv_draw_mask_line+0x288>
    a9ea:	4573      	cmp	r3, lr
    a9ec:	dd1a      	ble.n	aa24 <lv_draw_mask_line+0x288>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
    a9ee:	fb05 f101 	mul.w	r1, r5, r1
    a9f2:	f3c1 2247 	ubfx	r2, r1, #9, #8
                if(p->inv) m = 255 - m;
    a9f6:	f016 0f02 	tst.w	r6, #2
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
    a9fa:	bf04      	itt	eq
    a9fc:	43d2      	mvneq	r2, r2
    a9fe:	b2d2      	uxtbeq	r2, r2
                mask_buf[k] = mask_mix(mask_buf[k], m);
    aa00:	eb00 060e 	add.w	r6, r0, lr
    aa04:	f810 100e 	ldrb.w	r1, [r0, lr]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    aa08:	2af9      	cmp	r2, #249	; 0xf9
    aa0a:	d80a      	bhi.n	aa22 <lv_draw_mask_line+0x286>
    if(mask_new <= LV_OPA_MIN) return 0;
    aa0c:	2a05      	cmp	r2, #5
    aa0e:	f240 80a1 	bls.w	ab54 <lv_draw_mask_line+0x3b8>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    aa12:	fb02 f201 	mul.w	r2, r2, r1
    aa16:	eb02 2102 	add.w	r1, r2, r2, lsl #8
    aa1a:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
    aa1e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
    aa22:	7031      	strb	r1, [r6, #0]
            if(k >= 0 && k < len) {
    aa24:	f11e 0101 	adds.w	r1, lr, #1
    aa28:	d420      	bmi.n	aa6c <lv_draw_mask_line+0x2d0>
    aa2a:	428b      	cmp	r3, r1
    aa2c:	dd1e      	ble.n	aa6c <lv_draw_mask_line+0x2d0>
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
    aa2e:	f1c5 02ff 	rsb	r2, r5, #255	; 0xff
    aa32:	69a5      	ldr	r5, [r4, #24]
    aa34:	fb05 f502 	mul.w	r5, r5, r2
    aa38:	12ad      	asrs	r5, r5, #10
                m = ((255 - y_inters) * x_inters) >> 9;
    aa3a:	fb02 f205 	mul.w	r2, r2, r5
    aa3e:	f3c2 2247 	ubfx	r2, r2, #9, #8
                if(p->inv) m = 255 - m;
    aa42:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
    aa46:	f015 0f02 	tst.w	r5, #2
    aa4a:	bf1c      	itt	ne
    aa4c:	43d2      	mvnne	r2, r2
    aa4e:	b2d2      	uxtbne	r2, r2
                mask_buf[k] = mask_mix(mask_buf[k], m);
    aa50:	5c45      	ldrb	r5, [r0, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    aa52:	2af9      	cmp	r2, #249	; 0xf9
    aa54:	d809      	bhi.n	aa6a <lv_draw_mask_line+0x2ce>
    if(mask_new <= LV_OPA_MIN) return 0;
    aa56:	2a05      	cmp	r2, #5
    aa58:	d97e      	bls.n	ab58 <lv_draw_mask_line+0x3bc>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    aa5a:	fb02 f205 	mul.w	r2, r2, r5
    aa5e:	eb02 2502 	add.w	r5, r2, r2, lsl #8
    aa62:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
    aa66:	f3c2 55c7 	ubfx	r5, r2, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
    aa6a:	5445      	strb	r5, [r0, r1]
            if(p->inv) {
    aa6c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    aa70:	f012 0f02 	tst.w	r2, #2
    aa74:	d074      	beq.n	ab60 <lv_draw_mask_line+0x3c4>
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
    aa76:	4573      	cmp	r3, lr
    aa78:	f2c0 80b2 	blt.w	abe0 <lv_draw_mask_line+0x444>
                if(k >= 0) _lv_memset_00(&mask_buf[0],  k);
    aa7c:	f1be 0f00 	cmp.w	lr, #0
    aa80:	f2c0 80b1 	blt.w	abe6 <lv_draw_mask_line+0x44a>
    aa84:	4671      	mov	r1, lr
    aa86:	4b35      	ldr	r3, [pc, #212]	; (ab5c <lv_draw_mask_line+0x3c0>)
    aa88:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
    aa8a:	2002      	movs	r0, #2
    aa8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
    aa90:	2900      	cmp	r1, #0
    aa92:	f040 8100 	bne.w	ac96 <lv_draw_mask_line+0x4fa>
        k--;
    aa96:	f10e 3eff 	add.w	lr, lr, #4294967295
        xsf = 0xFF;
    aa9a:	21ff      	movs	r1, #255	; 0xff
        if(k >= 0 && k < len) {
    aa9c:	f1be 0f00 	cmp.w	lr, #0
    aaa0:	db1e      	blt.n	aae0 <lv_draw_mask_line+0x344>
    aaa2:	4573      	cmp	r3, lr
    aaa4:	dd1c      	ble.n	aae0 <lv_draw_mask_line+0x344>
    int32_t xef = xe & 0xFF;
    aaa6:	f3c2 2287 	ubfx	r2, r2, #10, #8
            m = (xsf + xef) >> 1;
    aaaa:	440a      	add	r2, r1
    aaac:	f3c2 0247 	ubfx	r2, r2, #1, #8
            if(p->inv) m = 255 - m;
    aab0:	f016 0f02 	tst.w	r6, #2
    aab4:	bf1c      	itt	ne
    aab6:	43d2      	mvnne	r2, r2
    aab8:	b2d2      	uxtbne	r2, r2
            mask_buf[k] = mask_mix(mask_buf[k], m);
    aaba:	eb00 060e 	add.w	r6, r0, lr
    aabe:	f810 100e 	ldrb.w	r1, [r0, lr]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    aac2:	2af9      	cmp	r2, #249	; 0xf9
    aac4:	d80b      	bhi.n	aade <lv_draw_mask_line+0x342>
    if(mask_new <= LV_OPA_MIN) return 0;
    aac6:	2a05      	cmp	r2, #5
    aac8:	d908      	bls.n	aadc <lv_draw_mask_line+0x340>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    aaca:	fb02 f201 	mul.w	r2, r2, r1
    aace:	eb02 2102 	add.w	r1, r2, r2, lsl #8
    aad2:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
    aad6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
    aada:	e000      	b.n	aade <lv_draw_mask_line+0x342>
    if(mask_new <= LV_OPA_MIN) return 0;
    aadc:	2100      	movs	r1, #0
            mask_buf[k] = mask_mix(mask_buf[k], m);
    aade:	7031      	strb	r1, [r6, #0]
        if(p->inv) {
    aae0:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    aae4:	f012 0f02 	tst.w	r2, #2
    aae8:	d00a      	beq.n	ab00 <lv_draw_mask_line+0x364>
            k = xsi - abs_x;
    aaea:	ebac 0105 	sub.w	r1, ip, r5
            if(k >= len) {
    aaee:	428b      	cmp	r3, r1
    aaf0:	dd61      	ble.n	abb6 <lv_draw_mask_line+0x41a>
            if(k >= 0) _lv_memset_00(&mask_buf[0], k);
    aaf2:	2900      	cmp	r1, #0
    aaf4:	db62      	blt.n	abbc <lv_draw_mask_line+0x420>
    aaf6:	4b19      	ldr	r3, [pc, #100]	; (ab5c <lv_draw_mask_line+0x3c0>)
    aaf8:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
    aafa:	2002      	movs	r0, #2
    aafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        k++;
    ab00:	f10e 0201 	add.w	r2, lr, #1
    ab04:	429a      	cmp	r2, r3
    ab06:	bfa8      	it	ge
    ab08:	461a      	movge	r2, r3
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
    ab0a:	2a00      	cmp	r2, #0
    ab0c:	d059      	beq.n	abc2 <lv_draw_mask_line+0x426>
            else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
    ab0e:	2a00      	cmp	r2, #0
    ab10:	dd5a      	ble.n	abc8 <lv_draw_mask_line+0x42c>
    ab12:	1a99      	subs	r1, r3, r2
    ab14:	4410      	add	r0, r2
    ab16:	4b11      	ldr	r3, [pc, #68]	; (ab5c <lv_draw_mask_line+0x3c0>)
    ab18:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
    ab1a:	2002      	movs	r0, #2
    ab1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(mask_new <= LV_OPA_MIN) return 0;
    ab20:	2500      	movs	r5, #0
    ab22:	e0dc      	b.n	acde <lv_draw_mask_line+0x542>
    ab24:	2500      	movs	r5, #0
    ab26:	e100      	b.n	ad2a <lv_draw_mask_line+0x58e>
                else if(k > 0) _lv_memset_00(&mask_buf[0],  k);
    ab28:	2900      	cmp	r1, #0
    ab2a:	dd50      	ble.n	abce <lv_draw_mask_line+0x432>
    ab2c:	4b0b      	ldr	r3, [pc, #44]	; (ab5c <lv_draw_mask_line+0x3c0>)
    ab2e:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
    ab30:	2002      	movs	r0, #2
    ab32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            k += 2;
    ab36:	f10e 0e01 	add.w	lr, lr, #1
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
    ab3a:	4573      	cmp	r3, lr
    ab3c:	db4a      	blt.n	abd4 <lv_draw_mask_line+0x438>
                if(k >= 0) _lv_memset_00(&mask_buf[k],  len - k);
    ab3e:	f1be 0f00 	cmp.w	lr, #0
    ab42:	db4a      	blt.n	abda <lv_draw_mask_line+0x43e>
    ab44:	eba3 010e 	sub.w	r1, r3, lr
    ab48:	4470      	add	r0, lr
    ab4a:	4b04      	ldr	r3, [pc, #16]	; (ab5c <lv_draw_mask_line+0x3c0>)
    ab4c:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
    ab4e:	2002      	movs	r0, #2
    ab50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(mask_new <= LV_OPA_MIN) return 0;
    ab54:	2100      	movs	r1, #0
    ab56:	e764      	b.n	aa22 <lv_draw_mask_line+0x286>
    ab58:	2500      	movs	r5, #0
    ab5a:	e786      	b.n	aa6a <lv_draw_mask_line+0x2ce>
    ab5c:	00011c17 	.word	0x00011c17
            k++;
    ab60:	f10e 0202 	add.w	r2, lr, #2
    ab64:	429a      	cmp	r2, r3
    ab66:	bfa8      	it	ge
    ab68:	461a      	movge	r2, r3
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
    ab6a:	2a00      	cmp	r2, #0
    ab6c:	d03e      	beq.n	abec <lv_draw_mask_line+0x450>
                else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
    ab6e:	2a00      	cmp	r2, #0
    ab70:	dd3f      	ble.n	abf2 <lv_draw_mask_line+0x456>
    ab72:	1a99      	subs	r1, r3, r2
    ab74:	4410      	add	r0, r2
    ab76:	4b73      	ldr	r3, [pc, #460]	; (ad44 <lv_draw_mask_line+0x5a8>)
    ab78:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
    ab7a:	2002      	movs	r0, #2
    ab7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
    ab80:	2001      	movs	r0, #1
    ab82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
    ab86:	2001      	movs	r0, #1
    ab88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
    ab8c:	2001      	movs	r0, #1
    ab8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
    ab92:	2000      	movs	r0, #0
    ab94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
    ab98:	2000      	movs	r0, #0
    ab9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
    ab9e:	2000      	movs	r0, #0
    aba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return LV_DRAW_MASK_RES_TRANSP;
    aba4:	2000      	movs	r0, #0
    aba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return LV_DRAW_MASK_RES_CHANGED;
    abaa:	2002      	movs	r0, #2
    abac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return LV_DRAW_MASK_RES_TRANSP;
    abb0:	2000      	movs	r0, #0
    abb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                return LV_DRAW_MASK_RES_TRANSP;
    abb6:	2000      	movs	r0, #0
    abb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return LV_DRAW_MASK_RES_CHANGED;
    abbc:	2002      	movs	r0, #2
    abbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
    abc2:	2000      	movs	r0, #0
    abc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return LV_DRAW_MASK_RES_CHANGED;
    abc8:	2002      	movs	r0, #2
    abca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    abce:	2002      	movs	r0, #2
    abd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
    abd4:	2001      	movs	r0, #1
    abd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return LV_DRAW_MASK_RES_CHANGED;
    abda:	2002      	movs	r0, #2
    abdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
    abe0:	2000      	movs	r0, #0
    abe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return LV_DRAW_MASK_RES_CHANGED;
    abe6:	2002      	movs	r0, #2
    abe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
    abec:	2000      	movs	r0, #0
    abee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return LV_DRAW_MASK_RES_CHANGED;
    abf2:	2002      	movs	r0, #2
    abf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
    abf8:	461f      	mov	r7, r3
    abfa:	442b      	add	r3, r5
    abfc:	fb01 f103 	mul.w	r1, r1, r3
        if(y_at_x < abs_y) {
    ac00:	ebb2 2fa1 	cmp.w	r2, r1, asr #10
    ac04:	f73f ae4b 	bgt.w	a89e <lv_draw_mask_line+0x102>
    if(p->yx_steep > 0) xe = ((abs_y << 8) * p->xy_steep) >> 10;
    ac08:	0212      	lsls	r2, r2, #8
    ac0a:	69a3      	ldr	r3, [r4, #24]
    ac0c:	fb03 f302 	mul.w	r3, r3, r2
    ac10:	129b      	asrs	r3, r3, #10
    int32_t xei = xe >> 8;
    ac12:	1219      	asrs	r1, r3, #8
    if(xef == 0) px_h = 255;
    ac14:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    ac18:	d039      	beq.n	ac8e <lv_draw_mask_line+0x4f2>
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
    ac1a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
    ac1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    ac20:	fb02 f203 	mul.w	r2, r2, r3
    ac24:	ea4f 2e22 	mov.w	lr, r2, asr #8
    ac28:	f1ce 02ff 	rsb	r2, lr, #255	; 0xff
        if(k >= 0 && k < len) {
    ac2c:	1b49      	subs	r1, r1, r5
    ac2e:	d41a      	bmi.n	ac66 <lv_draw_mask_line+0x4ca>
    ac30:	42b9      	cmp	r1, r7
    ac32:	da18      	bge.n	ac66 <lv_draw_mask_line+0x4ca>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
    ac34:	fb0e f303 	mul.w	r3, lr, r3
    ac38:	f3c3 2347 	ubfx	r3, r3, #9, #8
            if(p->inv) m = 255 - m;
    ac3c:	f016 0f02 	tst.w	r6, #2
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
    ac40:	bf04      	itt	eq
    ac42:	43db      	mvneq	r3, r3
    ac44:	b2db      	uxtbeq	r3, r3
            mask_buf[k] = mask_mix(mask_buf[k], m);
    ac46:	1846      	adds	r6, r0, r1
    ac48:	5c45      	ldrb	r5, [r0, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    ac4a:	2bf9      	cmp	r3, #249	; 0xf9
    ac4c:	d80a      	bhi.n	ac64 <lv_draw_mask_line+0x4c8>
    if(mask_new <= LV_OPA_MIN) return 0;
    ac4e:	2b05      	cmp	r3, #5
    ac50:	f67f ae31 	bls.w	a8b6 <lv_draw_mask_line+0x11a>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    ac54:	fb03 f305 	mul.w	r3, r3, r5
    ac58:	eb03 2503 	add.w	r5, r3, r3, lsl #8
    ac5c:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
    ac60:	f3c3 55c7 	ubfx	r5, r3, #23, #8
            mask_buf[k] = mask_mix(mask_buf[k], m);
    ac64:	7035      	strb	r5, [r6, #0]
        k++;
    ac66:	1c4d      	adds	r5, r1, #1
    ac68:	1946      	adds	r6, r0, r5
    if(mask_new <= LV_OPA_MIN) return 0;
    ac6a:	f04f 0e00 	mov.w	lr, #0
    ac6e:	e62d      	b.n	a8cc <lv_draw_mask_line+0x130>
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
    ac70:	461f      	mov	r7, r3
    ac72:	442b      	add	r3, r5
    ac74:	fb01 f103 	mul.w	r1, r1, r3
        if(y_at_x > abs_y) {
    ac78:	ebb2 2fa1 	cmp.w	r2, r1, asr #10
    ac7c:	f6ff ae15 	blt.w	a8aa <lv_draw_mask_line+0x10e>
    else xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
    ac80:	3201      	adds	r2, #1
    ac82:	0212      	lsls	r2, r2, #8
    ac84:	69a3      	ldr	r3, [r4, #24]
    ac86:	fb03 f302 	mul.w	r3, r3, r2
    ac8a:	129b      	asrs	r3, r3, #10
    ac8c:	e7c1      	b.n	ac12 <lv_draw_mask_line+0x476>
    int32_t k = xei - abs_x;
    ac8e:	1b4d      	subs	r5, r1, r5
    ac90:	4629      	mov	r1, r5
    if(xef == 0) px_h = 255;
    ac92:	22ff      	movs	r2, #255	; 0xff
    ac94:	e7e8      	b.n	ac68 <lv_draw_mask_line+0x4cc>
            y_inters = (xsf * (-p->yx_steep)) >> 10;
    ac96:	69e2      	ldr	r2, [r4, #28]
    ac98:	4252      	negs	r2, r2
    ac9a:	fb01 f202 	mul.w	r2, r1, r2
    ac9e:	1292      	asrs	r2, r2, #10
            if(k >= 0 && k < len) {
    aca0:	f1be 0f00 	cmp.w	lr, #0
    aca4:	db1c      	blt.n	ace0 <lv_draw_mask_line+0x544>
    aca6:	4573      	cmp	r3, lr
    aca8:	dd1a      	ble.n	ace0 <lv_draw_mask_line+0x544>
                m = (y_inters * xsf) >> 9;
    acaa:	fb02 f101 	mul.w	r1, r2, r1
    acae:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
    acb2:	f016 0f02 	tst.w	r6, #2
    acb6:	bf1c      	itt	ne
    acb8:	43c9      	mvnne	r1, r1
    acba:	b2c9      	uxtbne	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
    acbc:	eb00 060e 	add.w	r6, r0, lr
    acc0:	f810 500e 	ldrb.w	r5, [r0, lr]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    acc4:	29f9      	cmp	r1, #249	; 0xf9
    acc6:	d80a      	bhi.n	acde <lv_draw_mask_line+0x542>
    if(mask_new <= LV_OPA_MIN) return 0;
    acc8:	2905      	cmp	r1, #5
    acca:	f67f af29 	bls.w	ab20 <lv_draw_mask_line+0x384>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    acce:	fb01 f105 	mul.w	r1, r1, r5
    acd2:	eb01 2501 	add.w	r5, r1, r1, lsl #8
    acd6:	eb01 11c5 	add.w	r1, r1, r5, lsl #7
    acda:	f3c1 55c7 	ubfx	r5, r1, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
    acde:	7035      	strb	r5, [r6, #0]
            if(k >= 0 && k < len) {
    ace0:	f1be 0101 	subs.w	r1, lr, #1
    ace4:	d422      	bmi.n	ad2c <lv_draw_mask_line+0x590>
    ace6:	428b      	cmp	r3, r1
    ace8:	dd20      	ble.n	ad2c <lv_draw_mask_line+0x590>
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
    acea:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
    acee:	69a5      	ldr	r5, [r4, #24]
    acf0:	426d      	negs	r5, r5
    acf2:	fb02 f505 	mul.w	r5, r2, r5
    acf6:	12ad      	asrs	r5, r5, #10
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
    acf8:	fb02 f205 	mul.w	r2, r2, r5
    acfc:	f3c2 2247 	ubfx	r2, r2, #9, #8
                if(p->inv) m = 255 - m;
    ad00:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
    ad04:	f015 0f02 	tst.w	r5, #2
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
    ad08:	bf04      	itt	eq
    ad0a:	43d2      	mvneq	r2, r2
    ad0c:	b2d2      	uxtbeq	r2, r2
                mask_buf[k] = mask_mix(mask_buf[k], m);
    ad0e:	5c45      	ldrb	r5, [r0, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    ad10:	2af9      	cmp	r2, #249	; 0xf9
    ad12:	d80a      	bhi.n	ad2a <lv_draw_mask_line+0x58e>
    if(mask_new <= LV_OPA_MIN) return 0;
    ad14:	2a05      	cmp	r2, #5
    ad16:	f67f af05 	bls.w	ab24 <lv_draw_mask_line+0x388>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    ad1a:	fb02 f205 	mul.w	r2, r2, r5
    ad1e:	eb02 2502 	add.w	r5, r2, r2, lsl #8
    ad22:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
    ad26:	f3c2 55c7 	ubfx	r5, r2, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
    ad2a:	5445      	strb	r5, [r0, r1]
            if(p->inv) {
    ad2c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    ad30:	f012 0f02 	tst.w	r2, #2
    ad34:	f43f aeff 	beq.w	ab36 <lv_draw_mask_line+0x39a>
                if(k > len) k = len;
    ad38:	428b      	cmp	r3, r1
    ad3a:	f6bf aef5 	bge.w	ab28 <lv_draw_mask_line+0x38c>
    return LV_DRAW_MASK_RES_CHANGED;
    ad3e:	2002      	movs	r0, #2
    ad40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ad44:	00011c17 	.word	0x00011c17

0000ad48 <lv_draw_mask_radius>:
{
    ad48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad4c:	b08d      	sub	sp, #52	; 0x34
    ad4e:	9d16      	ldr	r5, [sp, #88]	; 0x58
    bool outer = p->cfg.outer;
    ad50:	7cae      	ldrb	r6, [r5, #18]
    ad52:	f006 0601 	and.w	r6, r6, #1
    int32_t radius = p->cfg.radius;
    ad56:	f9b5 8010 	ldrsh.w	r8, [r5, #16]
    ad5a:	1dec      	adds	r4, r5, #7
    ad5c:	f105 090f 	add.w	r9, r5, #15
    uint8_t * d8 = (uint8_t *)dst;
    ad60:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
        *d8 = *s8;
    ad64:	f814 7f01 	ldrb.w	r7, [r4, #1]!
    ad68:	f80e 7b01 	strb.w	r7, [lr], #1
    while(len) {
    ad6c:	454c      	cmp	r4, r9
    ad6e:	d1f9      	bne.n	ad64 <lv_draw_mask_radius+0x1c>
    if(outer == false) {
    ad70:	2e00      	cmp	r6, #0
    ad72:	d13d      	bne.n	adf0 <lv_draw_mask_radius+0xa8>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
    ad74:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	; 0x2a
    ad78:	4294      	cmp	r4, r2
    ad7a:	f300 822b 	bgt.w	b1d4 <lv_draw_mask_radius+0x48c>
    ad7e:	f9bd 402e 	ldrsh.w	r4, [sp, #46]	; 0x2e
    ad82:	4294      	cmp	r4, r2
    ad84:	f2c0 822a 	blt.w	b1dc <lv_draw_mask_radius+0x494>
    ad88:	469b      	mov	fp, r3
    ad8a:	460f      	mov	r7, r1
    ad8c:	9002      	str	r0, [sp, #8]
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
    ad8e:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    ad92:	eb08 0309 	add.w	r3, r8, r9
    ad96:	4299      	cmp	r1, r3
    ad98:	db06      	blt.n	ada8 <lv_draw_mask_radius+0x60>
    ad9a:	4459      	add	r1, fp
    ad9c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
    ada0:	eba3 0308 	sub.w	r3, r3, r8
    ada4:	4299      	cmp	r1, r3
    ada6:	dd0b      	ble.n	adc0 <lv_draw_mask_radius+0x78>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
    ada8:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
    adac:	eb03 0108 	add.w	r1, r3, r8
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
    adb0:	428a      	cmp	r2, r1
    adb2:	db53      	blt.n	ae5c <lv_draw_mask_radius+0x114>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
    adb4:	f9bd 102e 	ldrsh.w	r1, [sp, #46]	; 0x2e
    adb8:	eba1 0108 	sub.w	r1, r1, r8
    adbc:	428a      	cmp	r2, r1
    adbe:	dc4d      	bgt.n	ae5c <lv_draw_mask_radius+0x114>
        if(outer == false) {
    adc0:	bb86      	cbnz	r6, ae24 <lv_draw_mask_radius+0xdc>
            int32_t last =  rect.x1 - abs_x;
    adc2:	eba9 0407 	sub.w	r4, r9, r7
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
    adc6:	455c      	cmp	r4, fp
    adc8:	f300 820c 	bgt.w	b1e4 <lv_draw_mask_radius+0x49c>
            if(last >= 0) {
    adcc:	2c00      	cmp	r4, #0
    adce:	db03      	blt.n	add8 <lv_draw_mask_radius+0x90>
                _lv_memset_00(&mask_buf[0], last);
    add0:	4621      	mov	r1, r4
    add2:	9802      	ldr	r0, [sp, #8]
    add4:	4b9f      	ldr	r3, [pc, #636]	; (b054 <lv_draw_mask_radius+0x30c>)
    add6:	4798      	blx	r3
            int32_t first = rect.x2 - abs_x + 1;
    add8:	f9bd 002c 	ldrsh.w	r0, [sp, #44]	; 0x2c
    addc:	1bc0      	subs	r0, r0, r7
    adde:	3001      	adds	r0, #1
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
    ade0:	2800      	cmp	r0, #0
    ade2:	f340 8201 	ble.w	b1e8 <lv_draw_mask_radius+0x4a0>
            else if(first < len) {
    ade6:	4583      	cmp	fp, r0
    ade8:	dc0d      	bgt.n	ae06 <lv_draw_mask_radius+0xbe>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
    adea:	b1bc      	cbz	r4, ae1c <lv_draw_mask_radius+0xd4>
            else return LV_DRAW_MASK_RES_CHANGED;
    adec:	2002      	movs	r0, #2
    adee:	e1f2      	b.n	b1d6 <lv_draw_mask_radius+0x48e>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
    adf0:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	; 0x2a
    adf4:	4294      	cmp	r4, r2
    adf6:	f300 81f3 	bgt.w	b1e0 <lv_draw_mask_radius+0x498>
    adfa:	f9bd 402e 	ldrsh.w	r4, [sp, #46]	; 0x2e
    adfe:	4294      	cmp	r4, r2
    ae00:	dac2      	bge.n	ad88 <lv_draw_mask_radius+0x40>
            return LV_DRAW_MASK_RES_FULL_COVER;
    ae02:	2001      	movs	r0, #1
    ae04:	e1e7      	b.n	b1d6 <lv_draw_mask_radius+0x48e>
                _lv_memset_00(&mask_buf[first], len - first);
    ae06:	ebab 0100 	sub.w	r1, fp, r0
    ae0a:	9b02      	ldr	r3, [sp, #8]
    ae0c:	4403      	add	r3, r0
    ae0e:	4618      	mov	r0, r3
    ae10:	4b90      	ldr	r3, [pc, #576]	; (b054 <lv_draw_mask_radius+0x30c>)
    ae12:	4798      	blx	r3
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
    ae14:	2c00      	cmp	r4, #0
    ae16:	d1e9      	bne.n	adec <lv_draw_mask_radius+0xa4>
            else return LV_DRAW_MASK_RES_CHANGED;
    ae18:	2002      	movs	r0, #2
    ae1a:	e1dc      	b.n	b1d6 <lv_draw_mask_radius+0x48e>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
    ae1c:	4583      	cmp	fp, r0
    ae1e:	d1e5      	bne.n	adec <lv_draw_mask_radius+0xa4>
    ae20:	2001      	movs	r0, #1
    ae22:	e1d8      	b.n	b1d6 <lv_draw_mask_radius+0x48e>
            int32_t first = rect.x1 - abs_x;
    ae24:	eba9 0007 	sub.w	r0, r9, r7
    ae28:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
            if(first <= len) {
    ae2c:	4558      	cmp	r0, fp
    ae2e:	dd01      	ble.n	ae34 <lv_draw_mask_radius+0xec>
        return LV_DRAW_MASK_RES_CHANGED;
    ae30:	2002      	movs	r0, #2
    ae32:	e1d0      	b.n	b1d6 <lv_draw_mask_radius+0x48e>
                int32_t last =  rect.x2 - abs_x - first + 1;
    ae34:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
    ae38:	1bc9      	subs	r1, r1, r7
    ae3a:	1a09      	subs	r1, r1, r0
    ae3c:	3101      	adds	r1, #1
                if(first + last > len) last = len - first;
    ae3e:	1843      	adds	r3, r0, r1
    ae40:	459b      	cmp	fp, r3
    ae42:	bfb8      	it	lt
    ae44:	ebab 0100 	sublt.w	r1, fp, r0
                if(last >= 0) {
    ae48:	2900      	cmp	r1, #0
    ae4a:	f2c0 81cf 	blt.w	b1ec <lv_draw_mask_radius+0x4a4>
                    _lv_memset_00(&mask_buf[first], last);
    ae4e:	9b02      	ldr	r3, [sp, #8]
    ae50:	4403      	add	r3, r0
    ae52:	4618      	mov	r0, r3
    ae54:	4b7f      	ldr	r3, [pc, #508]	; (b054 <lv_draw_mask_radius+0x30c>)
    ae56:	4798      	blx	r3
        return LV_DRAW_MASK_RES_CHANGED;
    ae58:	2002      	movs	r0, #2
    ae5a:	e1bc      	b.n	b1d6 <lv_draw_mask_radius+0x48e>
    ae5c:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    ae60:	b29b      	uxth	r3, r3
    ae62:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
    ae66:	3101      	adds	r1, #1
    ae68:	1ac9      	subs	r1, r1, r3
    int32_t h = lv_area_get_height(&rect);
    ae6a:	b209      	sxth	r1, r1
    abs_y -= rect.y1;
    ae6c:	1ad2      	subs	r2, r2, r3
    uint32_t r2 = p->cfg.radius * p->cfg.radius;
    ae6e:	fb08 f308 	mul.w	r3, r8, r8
    ae72:	9301      	str	r3, [sp, #4]
    if(abs_y < radius || abs_y > h - radius - 1) {
    ae74:	b212      	sxth	r2, r2
    ae76:	4590      	cmp	r8, r2
    ae78:	f300 81d1 	bgt.w	b21e <lv_draw_mask_radius+0x4d6>
    ae7c:	eba1 0308 	sub.w	r3, r1, r8
    ae80:	3b01      	subs	r3, #1
    ae82:	429a      	cmp	r2, r3
    ae84:	f300 81b4 	bgt.w	b1f0 <lv_draw_mask_radius+0x4a8>
    return LV_DRAW_MASK_RES_CHANGED;
    ae88:	2002      	movs	r0, #2
    ae8a:	e1a4      	b.n	b1d6 <lv_draw_mask_radius+0x48e>
                x0.f = p->y_prev_x.f;
    ae8c:	8b6b      	ldrh	r3, [r5, #26]
    ae8e:	f8ad 301a 	strh.w	r3, [sp, #26]
                x0.i = p->y_prev_x.i;
    ae92:	8b2b      	ldrh	r3, [r5, #24]
    ae94:	f8ad 3018 	strh.w	r3, [sp, #24]
    ae98:	e1d6      	b.n	b248 <lv_draw_mask_radius+0x500>
                _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
    ae9a:	9a04      	ldr	r2, [sp, #16]
    ae9c:	a907      	add	r1, sp, #28
    ae9e:	9b01      	ldr	r3, [sp, #4]
    aea0:	fb00 3010 	mls	r0, r0, r0, r3
    aea4:	4b6c      	ldr	r3, [pc, #432]	; (b058 <lv_draw_mask_radius+0x310>)
    aea6:	4798      	blx	r3
            _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
    aea8:	9a04      	ldr	r2, [sp, #16]
    aeaa:	a906      	add	r1, sp, #24
    aeac:	9b01      	ldr	r3, [sp, #4]
    aeae:	fb04 3014 	mls	r0, r4, r4, r3
    aeb2:	4b69      	ldr	r3, [pc, #420]	; (b058 <lv_draw_mask_radius+0x310>)
    aeb4:	4798      	blx	r3
            p->y_prev = y;
    aeb6:	616c      	str	r4, [r5, #20]
            p->y_prev_x.f = x0.f;
    aeb8:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    aebc:	836b      	strh	r3, [r5, #26]
            p->y_prev_x.i = x0.i;
    aebe:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    aec2:	832b      	strh	r3, [r5, #24]
    aec4:	e1d1      	b.n	b26a <lv_draw_mask_radius+0x522>
        if(x0.i == x1.i - 1 && x1.f == 0) {
    aec6:	f8bd 101e 	ldrh.w	r1, [sp, #30]
    aeca:	2900      	cmp	r1, #0
    aecc:	f040 81d5 	bne.w	b27a <lv_draw_mask_radius+0x532>
            x1.i--;
    aed0:	3a01      	subs	r2, #1
    aed2:	f8ad 201c 	strh.w	r2, [sp, #28]
            x1.f = 0xFF;
    aed6:	22ff      	movs	r2, #255	; 0xff
    aed8:	f8ad 201e 	strh.w	r2, [sp, #30]
    aedc:	e1cd      	b.n	b27a <lv_draw_mask_radius+0x532>
            lv_opa_t m = (x0.f + x1.f) >> 1;
    aede:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    aee2:	f8bd 101e 	ldrh.w	r1, [sp, #30]
    aee6:	440a      	add	r2, r1
    aee8:	f3c2 0247 	ubfx	r2, r2, #1, #8
            if(outer) m = 255 - m;
    aeec:	b10e      	cbz	r6, aef2 <lv_draw_mask_radius+0x1aa>
    aeee:	43d2      	mvns	r2, r2
    aef0:	b2d2      	uxtb	r2, r2
            int32_t ofs = radius - x0.i - 1;
    aef2:	eba8 0303 	sub.w	r3, r8, r3
    aef6:	3b01      	subs	r3, #1
            if(kl >= 0 && kl < len) {
    aef8:	18f9      	adds	r1, r7, r3
    aefa:	d411      	bmi.n	af20 <lv_draw_mask_radius+0x1d8>
    aefc:	4559      	cmp	r1, fp
    aefe:	da0f      	bge.n	af20 <lv_draw_mask_radius+0x1d8>
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
    af00:	9802      	ldr	r0, [sp, #8]
    af02:	5c40      	ldrb	r0, [r0, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    af04:	2af9      	cmp	r2, #249	; 0xf9
    af06:	d809      	bhi.n	af1c <lv_draw_mask_radius+0x1d4>
    if(mask_new <= LV_OPA_MIN) return 0;
    af08:	2a05      	cmp	r2, #5
    af0a:	d935      	bls.n	af78 <lv_draw_mask_radius+0x230>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    af0c:	fb02 f000 	mul.w	r0, r2, r0
    af10:	eb00 2400 	add.w	r4, r0, r0, lsl #8
    af14:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
    af18:	f3c0 50c7 	ubfx	r0, r0, #23, #8
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
    af1c:	9c02      	ldr	r4, [sp, #8]
    af1e:	5460      	strb	r0, [r4, r1]
            int32_t kr = k + (w - ofs - 1);
    af20:	eba9 0303 	sub.w	r3, r9, r3
    af24:	3b01      	subs	r3, #1
            if(kr >= 0 && kr < len) {
    af26:	19df      	adds	r7, r3, r7
    af28:	d411      	bmi.n	af4e <lv_draw_mask_radius+0x206>
    af2a:	455f      	cmp	r7, fp
    af2c:	da0f      	bge.n	af4e <lv_draw_mask_radius+0x206>
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
    af2e:	9b02      	ldr	r3, [sp, #8]
    af30:	5ddb      	ldrb	r3, [r3, r7]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    af32:	2af9      	cmp	r2, #249	; 0xf9
    af34:	d809      	bhi.n	af4a <lv_draw_mask_radius+0x202>
    if(mask_new <= LV_OPA_MIN) return 0;
    af36:	2a05      	cmp	r2, #5
    af38:	d920      	bls.n	af7c <lv_draw_mask_radius+0x234>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    af3a:	fb02 f203 	mul.w	r2, r2, r3
    af3e:	eb02 2302 	add.w	r3, r2, r2, lsl #8
    af42:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
    af46:	f3c2 53c7 	ubfx	r3, r2, #23, #8
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
    af4a:	9a02      	ldr	r2, [sp, #8]
    af4c:	55d3      	strb	r3, [r2, r7]
            if(outer == false) {
    af4e:	b1be      	cbz	r6, af80 <lv_draw_mask_radius+0x238>
                kl++;
    af50:	1c48      	adds	r0, r1, #1
    af52:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
                if(len_tmp + first > len) len_tmp = len - first;
    af56:	455f      	cmp	r7, fp
                int32_t len_tmp = kr - first;
    af58:	bfd4      	ite	le
    af5a:	1a39      	suble	r1, r7, r0
                if(len_tmp + first > len) len_tmp = len - first;
    af5c:	ebab 0100 	subgt.w	r1, fp, r0
                if(first < len && len_tmp >= 0) {
    af60:	4558      	cmp	r0, fp
    af62:	f280 8119 	bge.w	b198 <lv_draw_mask_radius+0x450>
    af66:	2900      	cmp	r1, #0
    af68:	f2c0 8116 	blt.w	b198 <lv_draw_mask_radius+0x450>
                    _lv_memset_00(&mask_buf[first], len_tmp);
    af6c:	9b02      	ldr	r3, [sp, #8]
    af6e:	4403      	add	r3, r0
    af70:	4618      	mov	r0, r3
    af72:	4b38      	ldr	r3, [pc, #224]	; (b054 <lv_draw_mask_radius+0x30c>)
    af74:	4798      	blx	r3
    af76:	e10f      	b.n	b198 <lv_draw_mask_radius+0x450>
    if(mask_new <= LV_OPA_MIN) return 0;
    af78:	2000      	movs	r0, #0
    af7a:	e7cf      	b.n	af1c <lv_draw_mask_radius+0x1d4>
    af7c:	2300      	movs	r3, #0
    af7e:	e7e4      	b.n	af4a <lv_draw_mask_radius+0x202>
                if(kl > len)  {
    af80:	4559      	cmp	r1, fp
    af82:	f300 8125 	bgt.w	b1d0 <lv_draw_mask_radius+0x488>
                if(kl >= 0) {
    af86:	2900      	cmp	r1, #0
    af88:	db02      	blt.n	af90 <lv_draw_mask_radius+0x248>
                    _lv_memset_00(&mask_buf[0], kl);
    af8a:	9802      	ldr	r0, [sp, #8]
    af8c:	4b31      	ldr	r3, [pc, #196]	; (b054 <lv_draw_mask_radius+0x30c>)
    af8e:	4798      	blx	r3
                if(kr < 0) {
    af90:	3701      	adds	r7, #1
    af92:	f100 811d 	bmi.w	b1d0 <lv_draw_mask_radius+0x488>
                if(kr <= len) {
    af96:	455f      	cmp	r7, fp
    af98:	f300 80fe 	bgt.w	b198 <lv_draw_mask_radius+0x450>
                    _lv_memset_00(&mask_buf[kr], len - kr);
    af9c:	ebab 0107 	sub.w	r1, fp, r7
    afa0:	9b02      	ldr	r3, [sp, #8]
    afa2:	443b      	add	r3, r7
    afa4:	4618      	mov	r0, r3
    afa6:	4b2b      	ldr	r3, [pc, #172]	; (b054 <lv_draw_mask_radius+0x30c>)
    afa8:	4798      	blx	r3
    afaa:	e0f5      	b.n	b198 <lv_draw_mask_radius+0x450>
                _lv_sqrt(r2 - (i * i), &y_next, sqrt_mask);
    afac:	9a04      	ldr	r2, [sp, #16]
    afae:	a909      	add	r1, sp, #36	; 0x24
    afb0:	9b01      	ldr	r3, [sp, #4]
    afb2:	fb08 3018 	mls	r0, r8, r8, r3
    afb6:	4b28      	ldr	r3, [pc, #160]	; (b058 <lv_draw_mask_radius+0x310>)
    afb8:	4798      	blx	r3
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
    afba:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
    afbe:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    afc2:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
    afc6:	f1c1 03ff 	rsb	r3, r1, #255	; 0xff
    afca:	fb03 f302 	mul.w	r3, r3, r2
    afce:	f3c3 2347 	ubfx	r3, r3, #9, #8
                if(outer) m = 255 - m;
    afd2:	b90e      	cbnz	r6, afd8 <lv_draw_mask_radius+0x290>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
    afd4:	43db      	mvns	r3, r3
    afd6:	b2db      	uxtb	r3, r3
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
    afd8:	9803      	ldr	r0, [sp, #12]
    afda:	4602      	mov	r2, r0
    afdc:	2800      	cmp	r0, #0
    afde:	db11      	blt.n	b004 <lv_draw_mask_radius+0x2bc>
    afe0:	4558      	cmp	r0, fp
    afe2:	da0f      	bge.n	b004 <lv_draw_mask_radius+0x2bc>
    afe4:	9c02      	ldr	r4, [sp, #8]
    afe6:	1820      	adds	r0, r4, r0
    afe8:	5ca2      	ldrb	r2, [r4, r2]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    afea:	2bf9      	cmp	r3, #249	; 0xf9
    afec:	d809      	bhi.n	b002 <lv_draw_mask_radius+0x2ba>
    if(mask_new <= LV_OPA_MIN) return 0;
    afee:	2b05      	cmp	r3, #5
    aff0:	d929      	bls.n	b046 <lv_draw_mask_radius+0x2fe>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    aff2:	fb03 f202 	mul.w	r2, r3, r2
    aff6:	eb02 2402 	add.w	r4, r2, r2, lsl #8
    affa:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
    affe:	f3c2 52c7 	ubfx	r2, r2, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
    b002:	7002      	strb	r2, [r0, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
    b004:	f1ba 0f00 	cmp.w	sl, #0
    b008:	db13      	blt.n	b032 <lv_draw_mask_radius+0x2ea>
    b00a:	45da      	cmp	sl, fp
    b00c:	da11      	bge.n	b032 <lv_draw_mask_radius+0x2ea>
    b00e:	9c02      	ldr	r4, [sp, #8]
    b010:	eb04 000a 	add.w	r0, r4, sl
    b014:	f814 200a 	ldrb.w	r2, [r4, sl]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    b018:	2bf9      	cmp	r3, #249	; 0xf9
    b01a:	d809      	bhi.n	b030 <lv_draw_mask_radius+0x2e8>
    if(mask_new <= LV_OPA_MIN) return 0;
    b01c:	2b05      	cmp	r3, #5
    b01e:	d914      	bls.n	b04a <lv_draw_mask_radius+0x302>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    b020:	fb03 f302 	mul.w	r3, r3, r2
    b024:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    b028:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    b02c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
    b030:	7002      	strb	r2, [r0, #0]
                kl--;
    b032:	9b03      	ldr	r3, [sp, #12]
    b034:	3b01      	subs	r3, #1
    b036:	9303      	str	r3, [sp, #12]
                kr++;
    b038:	f10a 0a01 	add.w	sl, sl, #1
                y_prev.f = y_next.f;
    b03c:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
                i++;
    b040:	f108 0801 	add.w	r8, r8, #1
    b044:	e15e      	b.n	b304 <lv_draw_mask_radius+0x5bc>
    if(mask_new <= LV_OPA_MIN) return 0;
    b046:	2200      	movs	r2, #0
    b048:	e7db      	b.n	b002 <lv_draw_mask_radius+0x2ba>
    b04a:	2200      	movs	r2, #0
    b04c:	e7f0      	b.n	b030 <lv_draw_mask_radius+0x2e8>
    b04e:	2700      	movs	r7, #0
    b050:	e039      	b.n	b0c6 <lv_draw_mask_radius+0x37e>
    b052:	bf00      	nop
    b054:	00011c17 	.word	0x00011c17
    b058:	000114b5 	.word	0x000114b5
    b05c:	2700      	movs	r7, #0
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
    b05e:	f80e 7008 	strb.w	r7, [lr, r8]
                kl--;
    b062:	3801      	subs	r0, #1
                kr++;
    b064:	3401      	adds	r4, #1
            for(; i <= x1.i; i++) {
    b066:	3101      	adds	r1, #1
                y_prev.f = y_next.f;
    b068:	461a      	mov	r2, r3
            for(; i <= x1.i; i++) {
    b06a:	9d01      	ldr	r5, [sp, #4]
    b06c:	42a9      	cmp	r1, r5
    b06e:	d840      	bhi.n	b0f2 <lv_draw_mask_radius+0x3aa>
 */
LV_ATTRIBUTE_FAST_MEM static inline void sqrt_approx(lv_sqrt_res_t * q, lv_sqrt_res_t * ref, uint32_t x)
{
    x = x << 8; /*Upscale for extra precision*/

    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
    b070:	eb09 1712 	add.w	r7, r9, r2, lsr #4
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
    b074:	fb01 a311 	mls	r3, r1, r1, sl
    uint32_t raw2 = raw * raw;
    b078:	fb07 fc07 	mul.w	ip, r7, r7

    int32_t d = x - raw2;
    b07c:	ebcc 2303 	rsb	r3, ip, r3, lsl #8
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
    b080:	ea4f 0c47 	mov.w	ip, r7, lsl #1
    b084:	fb93 f3fc 	sdiv	r3, r3, ip
    b088:	441f      	add	r7, r3

    q->i = d >> 4;
    b08a:	f3c7 1c0f 	ubfx	ip, r7, #4, #16
    q->f = (d & 0xF) << 4;
    b08e:	013f      	lsls	r7, r7, #4
    b090:	f007 03f0 	and.w	r3, r7, #240	; 0xf0
                m = (y_prev.f + y_next.f) >> 1;
    b094:	441a      	add	r2, r3
    b096:	f3c2 0247 	ubfx	r2, r2, #1, #8
                if(outer) m = 255 - m;
    b09a:	b10e      	cbz	r6, b0a0 <lv_draw_mask_radius+0x358>
    b09c:	43d2      	mvns	r2, r2
    b09e:	b2d2      	uxtb	r2, r2
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
    b0a0:	2800      	cmp	r0, #0
    b0a2:	db12      	blt.n	b0ca <lv_draw_mask_radius+0x382>
    b0a4:	4583      	cmp	fp, r0
    b0a6:	dd10      	ble.n	b0ca <lv_draw_mask_radius+0x382>
    b0a8:	4680      	mov	r8, r0
    b0aa:	f81e 7000 	ldrb.w	r7, [lr, r0]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    b0ae:	2af9      	cmp	r2, #249	; 0xf9
    b0b0:	d809      	bhi.n	b0c6 <lv_draw_mask_radius+0x37e>
    if(mask_new <= LV_OPA_MIN) return 0;
    b0b2:	2a05      	cmp	r2, #5
    b0b4:	d9cb      	bls.n	b04e <lv_draw_mask_radius+0x306>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    b0b6:	fb02 f507 	mul.w	r5, r2, r7
    b0ba:	eb05 2705 	add.w	r7, r5, r5, lsl #8
    b0be:	eb05 17c7 	add.w	r7, r5, r7, lsl #7
    b0c2:	f3c7 57c7 	ubfx	r7, r7, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
    b0c6:	f80e 7008 	strb.w	r7, [lr, r8]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
    b0ca:	2c00      	cmp	r4, #0
    b0cc:	dbc9      	blt.n	b062 <lv_draw_mask_radius+0x31a>
    b0ce:	45a3      	cmp	fp, r4
    b0d0:	ddc7      	ble.n	b062 <lv_draw_mask_radius+0x31a>
    b0d2:	46a0      	mov	r8, r4
    b0d4:	f81e 7004 	ldrb.w	r7, [lr, r4]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    b0d8:	2af9      	cmp	r2, #249	; 0xf9
    b0da:	d8c0      	bhi.n	b05e <lv_draw_mask_radius+0x316>
    if(mask_new <= LV_OPA_MIN) return 0;
    b0dc:	2a05      	cmp	r2, #5
    b0de:	d9bd      	bls.n	b05c <lv_draw_mask_radius+0x314>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    b0e0:	fb02 f207 	mul.w	r2, r2, r7
    b0e4:	eb02 2702 	add.w	r7, r2, r2, lsl #8
    b0e8:	eb02 17c7 	add.w	r7, r2, r7, lsl #7
    b0ec:	f3c7 57c7 	ubfx	r7, r7, #23, #8
    b0f0:	e7b5      	b.n	b05e <lv_draw_mask_radius+0x316>
    b0f2:	f8dd 8010 	ldr.w	r8, [sp, #16]
    b0f6:	f8dd a014 	ldr.w	sl, [sp, #20]
    b0fa:	43ea      	mvns	r2, r5
    b0fc:	4442      	add	r2, r8
    b0fe:	9903      	ldr	r1, [sp, #12]
    b100:	4411      	add	r1, r2
    b102:	9103      	str	r1, [sp, #12]
    b104:	3501      	adds	r5, #1
    b106:	44aa      	add	sl, r5
    b108:	ebaa 0a08 	sub.w	sl, sl, r8
    b10c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    b110:	f8ad c024 	strh.w	ip, [sp, #36]	; 0x24
    b114:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
            if(y_prev.f) {
    b118:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    b11c:	2b00      	cmp	r3, #0
    b11e:	d03a      	beq.n	b196 <lv_draw_mask_radius+0x44e>
                m = (y_prev.f * x1.f) >> 9;
    b120:	f8bd 201e 	ldrh.w	r2, [sp, #30]
    b124:	fb03 f302 	mul.w	r3, r3, r2
    b128:	f3c3 2347 	ubfx	r3, r3, #9, #8
                if(outer) m = 255 - m;
    b12c:	b10e      	cbz	r6, b132 <lv_draw_mask_radius+0x3ea>
    b12e:	43db      	mvns	r3, r3
    b130:	b2db      	uxtb	r3, r3
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
    b132:	9a03      	ldr	r2, [sp, #12]
    b134:	2a00      	cmp	r2, #0
    b136:	db12      	blt.n	b15e <lv_draw_mask_radius+0x416>
    b138:	4593      	cmp	fp, r2
    b13a:	dd10      	ble.n	b15e <lv_draw_mask_radius+0x416>
    b13c:	9802      	ldr	r0, [sp, #8]
    b13e:	4601      	mov	r1, r0
    b140:	4411      	add	r1, r2
    b142:	5c82      	ldrb	r2, [r0, r2]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    b144:	2bf9      	cmp	r3, #249	; 0xf9
    b146:	d809      	bhi.n	b15c <lv_draw_mask_radius+0x414>
    if(mask_new <= LV_OPA_MIN) return 0;
    b148:	2b05      	cmp	r3, #5
    b14a:	d927      	bls.n	b19c <lv_draw_mask_radius+0x454>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    b14c:	fb03 f202 	mul.w	r2, r3, r2
    b150:	eb02 2002 	add.w	r0, r2, r2, lsl #8
    b154:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
    b158:	f3c2 52c7 	ubfx	r2, r2, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
    b15c:	700a      	strb	r2, [r1, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
    b15e:	f1ba 0f00 	cmp.w	sl, #0
    b162:	db13      	blt.n	b18c <lv_draw_mask_radius+0x444>
    b164:	45d3      	cmp	fp, sl
    b166:	dd11      	ble.n	b18c <lv_draw_mask_radius+0x444>
    b168:	9802      	ldr	r0, [sp, #8]
    b16a:	eb00 010a 	add.w	r1, r0, sl
    b16e:	f810 200a 	ldrb.w	r2, [r0, sl]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    b172:	2bf9      	cmp	r3, #249	; 0xf9
    b174:	d809      	bhi.n	b18a <lv_draw_mask_radius+0x442>
    if(mask_new <= LV_OPA_MIN) return 0;
    b176:	2b05      	cmp	r3, #5
    b178:	d912      	bls.n	b1a0 <lv_draw_mask_radius+0x458>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    b17a:	fb03 f302 	mul.w	r3, r3, r2
    b17e:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    b182:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    b186:	f3c3 52c7 	ubfx	r2, r3, #23, #8
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
    b18a:	700a      	strb	r2, [r1, #0]
                kl--;
    b18c:	9b03      	ldr	r3, [sp, #12]
    b18e:	3b01      	subs	r3, #1
    b190:	9303      	str	r3, [sp, #12]
                kr++;
    b192:	f10a 0a01 	add.w	sl, sl, #1
            if(outer == 0) {
    b196:	b12e      	cbz	r6, b1a4 <lv_draw_mask_radius+0x45c>
    return LV_DRAW_MASK_RES_CHANGED;
    b198:	2002      	movs	r0, #2
    b19a:	e01c      	b.n	b1d6 <lv_draw_mask_radius+0x48e>
    if(mask_new <= LV_OPA_MIN) return 0;
    b19c:	2200      	movs	r2, #0
    b19e:	e7dd      	b.n	b15c <lv_draw_mask_radius+0x414>
    b1a0:	2200      	movs	r2, #0
    b1a2:	e7f2      	b.n	b18a <lv_draw_mask_radius+0x442>
                kl++;
    b1a4:	9903      	ldr	r1, [sp, #12]
    b1a6:	3101      	adds	r1, #1
                if(kl > len) {
    b1a8:	4559      	cmp	r1, fp
    b1aa:	dc11      	bgt.n	b1d0 <lv_draw_mask_radius+0x488>
                if(kl >= 0) _lv_memset_00(&mask_buf[0], kl);
    b1ac:	2900      	cmp	r1, #0
    b1ae:	db02      	blt.n	b1b6 <lv_draw_mask_radius+0x46e>
    b1b0:	9802      	ldr	r0, [sp, #8]
    b1b2:	4b60      	ldr	r3, [pc, #384]	; (b334 <lv_draw_mask_radius+0x5ec>)
    b1b4:	4798      	blx	r3
                if(kr < 0) {
    b1b6:	f1ba 0f00 	cmp.w	sl, #0
    b1ba:	db09      	blt.n	b1d0 <lv_draw_mask_radius+0x488>
                if(kr < len) _lv_memset_00(&mask_buf[kr], len - kr);
    b1bc:	45da      	cmp	sl, fp
    b1be:	daeb      	bge.n	b198 <lv_draw_mask_radius+0x450>
    b1c0:	ebab 010a 	sub.w	r1, fp, sl
    b1c4:	9b02      	ldr	r3, [sp, #8]
    b1c6:	4453      	add	r3, sl
    b1c8:	4618      	mov	r0, r3
    b1ca:	4b5a      	ldr	r3, [pc, #360]	; (b334 <lv_draw_mask_radius+0x5ec>)
    b1cc:	4798      	blx	r3
    b1ce:	e7e3      	b.n	b198 <lv_draw_mask_radius+0x450>
                    return LV_DRAW_MASK_RES_TRANSP;
    b1d0:	2000      	movs	r0, #0
    b1d2:	e000      	b.n	b1d6 <lv_draw_mask_radius+0x48e>
            return LV_DRAW_MASK_RES_TRANSP;
    b1d4:	2000      	movs	r0, #0
}
    b1d6:	b00d      	add	sp, #52	; 0x34
    b1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LV_DRAW_MASK_RES_TRANSP;
    b1dc:	2000      	movs	r0, #0
    b1de:	e7fa      	b.n	b1d6 <lv_draw_mask_radius+0x48e>
            return LV_DRAW_MASK_RES_FULL_COVER;
    b1e0:	2001      	movs	r0, #1
    b1e2:	e7f8      	b.n	b1d6 <lv_draw_mask_radius+0x48e>
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
    b1e4:	2000      	movs	r0, #0
    b1e6:	e7f6      	b.n	b1d6 <lv_draw_mask_radius+0x48e>
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
    b1e8:	2000      	movs	r0, #0
    b1ea:	e7f4      	b.n	b1d6 <lv_draw_mask_radius+0x48e>
        return LV_DRAW_MASK_RES_CHANGED;
    b1ec:	2002      	movs	r0, #2
    b1ee:	e7f2      	b.n	b1d6 <lv_draw_mask_radius+0x48e>
        if(radius <= 256) sqrt_mask = 0x800;
    b1f0:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
    b1f4:	bfd4      	ite	le
    b1f6:	f44f 6300 	movle.w	r3, #2048	; 0x800
    b1fa:	f44f 4300 	movgt.w	r3, #32768	; 0x8000
    b1fe:	9304      	str	r3, [sp, #16]
            y = radius - (h - abs_y) + 1;
    b200:	1a89      	subs	r1, r1, r2
    b202:	eba8 0001 	sub.w	r0, r8, r1
    b206:	1c44      	adds	r4, r0, #1
            if((y - 1) == p->y_prev) {
    b208:	696b      	ldr	r3, [r5, #20]
    b20a:	4298      	cmp	r0, r3
    b20c:	f47f ae45 	bne.w	ae9a <lv_draw_mask_radius+0x152>
                x1.f = p->y_prev_x.f;
    b210:	8b6b      	ldrh	r3, [r5, #26]
    b212:	f8ad 301e 	strh.w	r3, [sp, #30]
                x1.i = p->y_prev_x.i;
    b216:	8b2b      	ldrh	r3, [r5, #24]
    b218:	f8ad 301c 	strh.w	r3, [sp, #28]
    b21c:	e644      	b.n	aea8 <lv_draw_mask_radius+0x160>
        if(radius <= 256) sqrt_mask = 0x800;
    b21e:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
    b222:	bfd4      	ite	le
    b224:	f44f 6300 	movle.w	r3, #2048	; 0x800
    b228:	f44f 4300 	movgt.w	r3, #32768	; 0x8000
    b22c:	9304      	str	r3, [sp, #16]
            y = radius - abs_y;
    b22e:	eba8 0402 	sub.w	r4, r8, r2
            if(y == p->y_prev) {
    b232:	696b      	ldr	r3, [r5, #20]
    b234:	429c      	cmp	r4, r3
    b236:	f43f ae29 	beq.w	ae8c <lv_draw_mask_radius+0x144>
                _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
    b23a:	9a04      	ldr	r2, [sp, #16]
    b23c:	a906      	add	r1, sp, #24
    b23e:	9b01      	ldr	r3, [sp, #4]
    b240:	fb04 3014 	mls	r0, r4, r4, r3
    b244:	4b3c      	ldr	r3, [pc, #240]	; (b338 <lv_draw_mask_radius+0x5f0>)
    b246:	4798      	blx	r3
            _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
    b248:	1e63      	subs	r3, r4, #1
    b24a:	9a04      	ldr	r2, [sp, #16]
    b24c:	a907      	add	r1, sp, #28
    b24e:	9303      	str	r3, [sp, #12]
    b250:	9801      	ldr	r0, [sp, #4]
    b252:	fb03 0013 	mls	r0, r3, r3, r0
    b256:	4b38      	ldr	r3, [pc, #224]	; (b338 <lv_draw_mask_radius+0x5f0>)
    b258:	4798      	blx	r3
            p->y_prev = y - 1;
    b25a:	9b03      	ldr	r3, [sp, #12]
    b25c:	616b      	str	r3, [r5, #20]
            p->y_prev_x.f = x1.f;
    b25e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    b262:	836b      	strh	r3, [r5, #26]
            p->y_prev_x.i = x1.i;
    b264:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    b268:	832b      	strh	r3, [r5, #24]
        if(x0.i == x1.i - 1 && x1.f == 0) {
    b26a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    b26e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    b272:	1e51      	subs	r1, r2, #1
    b274:	428b      	cmp	r3, r1
    b276:	f43f ae26 	beq.w	aec6 <lv_draw_mask_radius+0x17e>
    int32_t k = rect.x1 - abs_x; /*First relevant coordinate on the of the mask*/
    b27a:	eba9 0707 	sub.w	r7, r9, r7
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    b27e:	f10a 0a01 	add.w	sl, sl, #1
    b282:	ebaa 0909 	sub.w	r9, sl, r9
    int32_t w = lv_area_get_width(&rect);
    b286:	fa0f f989 	sxth.w	r9, r9
        if(x0.i == x1.i) {
    b28a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    b28e:	429a      	cmp	r2, r3
    b290:	f43f ae25 	beq.w	aede <lv_draw_mask_radius+0x196>
            int32_t ofs = radius - (x0.i + 1);
    b294:	3301      	adds	r3, #1
    b296:	eba8 0803 	sub.w	r8, r8, r3
            int32_t kl = k + ofs;
    b29a:	eb07 0308 	add.w	r3, r7, r8
    b29e:	9303      	str	r3, [sp, #12]
            int32_t kr = k + (w - ofs - 1);
    b2a0:	eba9 0808 	sub.w	r8, r9, r8
    b2a4:	f108 3aff 	add.w	sl, r8, #4294967295
    b2a8:	44ba      	add	sl, r7
            if(outer) {
    b2aa:	b186      	cbz	r6, b2ce <lv_draw_mask_radius+0x586>
                int32_t first = kl + 1;
    b2ac:	1c58      	adds	r0, r3, #1
    b2ae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
                if(len_tmp + first > len) len_tmp = len - first;
    b2b2:	45da      	cmp	sl, fp
                int32_t len_tmp = kr - first;
    b2b4:	bfd4      	ite	le
    b2b6:	ebaa 0100 	suble.w	r1, sl, r0
                if(len_tmp + first > len) len_tmp = len - first;
    b2ba:	ebab 0100 	subgt.w	r1, fp, r0
                if(first < len && len_tmp >= 0) {
    b2be:	4558      	cmp	r0, fp
    b2c0:	da05      	bge.n	b2ce <lv_draw_mask_radius+0x586>
    b2c2:	2900      	cmp	r1, #0
    b2c4:	db03      	blt.n	b2ce <lv_draw_mask_radius+0x586>
                    _lv_memset_00(&mask_buf[first], len_tmp);
    b2c6:	9b02      	ldr	r3, [sp, #8]
    b2c8:	4418      	add	r0, r3
    b2ca:	4b1a      	ldr	r3, [pc, #104]	; (b334 <lv_draw_mask_radius+0x5ec>)
    b2cc:	4798      	blx	r3
            uint32_t i = x0.i + 1;
    b2ce:	f8bd 0018 	ldrh.w	r0, [sp, #24]
    b2d2:	f100 0801 	add.w	r8, r0, #1
            _lv_sqrt(r2 - (x0.i * x0.i), &y_prev, sqrt_mask);
    b2d6:	9a04      	ldr	r2, [sp, #16]
    b2d8:	a908      	add	r1, sp, #32
    b2da:	9b01      	ldr	r3, [sp, #4]
    b2dc:	fb00 3010 	mls	r0, r0, r0, r3
    b2e0:	4b15      	ldr	r3, [pc, #84]	; (b338 <lv_draw_mask_radius+0x5f0>)
    b2e2:	4798      	blx	r3
            if(y_prev.f == 0) {
    b2e4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    b2e8:	b93b      	cbnz	r3, b2fa <lv_draw_mask_radius+0x5b2>
                y_prev.i--;
    b2ea:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    b2ee:	3b01      	subs	r3, #1
    b2f0:	f8ad 3020 	strh.w	r3, [sp, #32]
                y_prev.f = 0xFF;
    b2f4:	23ff      	movs	r3, #255	; 0xff
    b2f6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            if(y_prev.i >= y) {
    b2fa:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    b2fe:	429c      	cmp	r4, r3
    b300:	f77f ae54 	ble.w	afac <lv_draw_mask_radius+0x264>
            for(; i <= x1.i; i++) {
    b304:	f8bd 501c 	ldrh.w	r5, [sp, #28]
    b308:	45a8      	cmp	r8, r5
    b30a:	f63f af05 	bhi.w	b118 <lv_draw_mask_radius+0x3d0>
    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
    b30e:	f8bd 9020 	ldrh.w	r9, [sp, #32]
    b312:	ea4f 1909 	mov.w	r9, r9, lsl #4
    b316:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
    b31a:	4641      	mov	r1, r8
    b31c:	4654      	mov	r4, sl
    b31e:	9803      	ldr	r0, [sp, #12]
    if(mask_new <= LV_OPA_MIN) return 0;
    b320:	f8cd 8010 	str.w	r8, [sp, #16]
    b324:	f8cd a014 	str.w	sl, [sp, #20]
    b328:	f8dd a004 	ldr.w	sl, [sp, #4]
    b32c:	9501      	str	r5, [sp, #4]
    b32e:	f8dd e008 	ldr.w	lr, [sp, #8]
    b332:	e69d      	b.n	b070 <lv_draw_mask_radius+0x328>
    b334:	00011c17 	.word	0x00011c17
    b338:	000114b5 	.word	0x000114b5

0000b33c <lv_draw_mask_add>:
{
    b33c:	b410      	push	{r4}
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
    b33e:	4b0d      	ldr	r3, [pc, #52]	; (b374 <lv_draw_mask_add+0x38>)
    b340:	681b      	ldr	r3, [r3, #0]
    b342:	b15b      	cbz	r3, b35c <lv_draw_mask_add+0x20>
    b344:	4a0b      	ldr	r2, [pc, #44]	; (b374 <lv_draw_mask_add+0x38>)
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
    b346:	2301      	movs	r3, #1
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
    b348:	6894      	ldr	r4, [r2, #8]
    b34a:	b144      	cbz	r4, b35e <lv_draw_mask_add+0x22>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
    b34c:	3301      	adds	r3, #1
    b34e:	b2db      	uxtb	r3, r3
    b350:	3208      	adds	r2, #8
    b352:	2b10      	cmp	r3, #16
    b354:	d1f8      	bne.n	b348 <lv_draw_mask_add+0xc>
        return LV_MASK_ID_INV;
    b356:	f04f 30ff 	mov.w	r0, #4294967295
    b35a:	e007      	b.n	b36c <lv_draw_mask_add+0x30>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
    b35c:	2300      	movs	r3, #0
    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
    b35e:	4a05      	ldr	r2, [pc, #20]	; (b374 <lv_draw_mask_add+0x38>)
    b360:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
    b364:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    b368:	6051      	str	r1, [r2, #4]
    return i;
    b36a:	b218      	sxth	r0, r3
}
    b36c:	f85d 4b04 	ldr.w	r4, [sp], #4
    b370:	4770      	bx	lr
    b372:	bf00      	nop
    b374:	2000ad74 	.word	0x2000ad74

0000b378 <lv_draw_mask_apply>:
{
    b378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b37c:	b082      	sub	sp, #8
    while(m->param) {
    b37e:	4c11      	ldr	r4, [pc, #68]	; (b3c4 <lv_draw_mask_apply+0x4c>)
    b380:	6824      	ldr	r4, [r4, #0]
    b382:	b1ec      	cbz	r4, b3c0 <lv_draw_mask_apply+0x48>
    b384:	469a      	mov	sl, r3
    b386:	4691      	mov	r9, r2
    b388:	4688      	mov	r8, r1
    b38a:	4607      	mov	r7, r0
    b38c:	4e0d      	ldr	r6, [pc, #52]	; (b3c4 <lv_draw_mask_apply+0x4c>)
    b38e:	2500      	movs	r5, #0
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
    b390:	9400      	str	r4, [sp, #0]
    b392:	6824      	ldr	r4, [r4, #0]
    b394:	4653      	mov	r3, sl
    b396:	464a      	mov	r2, r9
    b398:	4641      	mov	r1, r8
    b39a:	4638      	mov	r0, r7
    b39c:	47a0      	blx	r4
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
    b39e:	4604      	mov	r4, r0
    b3a0:	b150      	cbz	r0, b3b8 <lv_draw_mask_apply+0x40>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
    b3a2:	2802      	cmp	r0, #2
    b3a4:	bf08      	it	eq
    b3a6:	2501      	moveq	r5, #1
    while(m->param) {
    b3a8:	f856 4f08 	ldr.w	r4, [r6, #8]!
    b3ac:	2c00      	cmp	r4, #0
    b3ae:	d1ef      	bne.n	b390 <lv_draw_mask_apply+0x18>
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
    b3b0:	2d00      	cmp	r5, #0
    b3b2:	bf14      	ite	ne
    b3b4:	2402      	movne	r4, #2
    b3b6:	2401      	moveq	r4, #1
}
    b3b8:	4620      	mov	r0, r4
    b3ba:	b002      	add	sp, #8
    b3bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
    b3c0:	2401      	movs	r4, #1
    b3c2:	e7f9      	b.n	b3b8 <lv_draw_mask_apply+0x40>
    b3c4:	2000ad74 	.word	0x2000ad74

0000b3c8 <lv_draw_mask_remove_id>:
    if(id != LV_MASK_ID_INV) {
    b3c8:	f1b0 3fff 	cmp.w	r0, #4294967295
    b3cc:	d00a      	beq.n	b3e4 <lv_draw_mask_remove_id+0x1c>
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
    b3ce:	4b06      	ldr	r3, [pc, #24]	; (b3e8 <lv_draw_mask_remove_id+0x20>)
    b3d0:	f853 1030 	ldr.w	r1, [r3, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
    b3d4:	2200      	movs	r2, #0
    b3d6:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
    b3da:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    b3de:	605a      	str	r2, [r3, #4]
}
    b3e0:	4608      	mov	r0, r1
    b3e2:	4770      	bx	lr
    void * p = NULL;
    b3e4:	2100      	movs	r1, #0
    return p;
    b3e6:	e7fb      	b.n	b3e0 <lv_draw_mask_remove_id+0x18>
    b3e8:	2000ad74 	.word	0x2000ad74

0000b3ec <lv_draw_mask_remove_custom>:
{
    b3ec:	b470      	push	{r4, r5, r6}
    b3ee:	4b0b      	ldr	r3, [pc, #44]	; (b41c <lv_draw_mask_remove_custom+0x30>)
    b3f0:	1d1a      	adds	r2, r3, #4
    b3f2:	f103 0480 	add.w	r4, r3, #128	; 0x80
    void * p = NULL;
    b3f6:	2600      	movs	r6, #0
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
    b3f8:	4635      	mov	r5, r6
    b3fa:	e003      	b.n	b404 <lv_draw_mask_remove_custom+0x18>
    b3fc:	3308      	adds	r3, #8
    b3fe:	3208      	adds	r2, #8
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
    b400:	42a3      	cmp	r3, r4
    b402:	d008      	beq.n	b416 <lv_draw_mask_remove_custom+0x2a>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
    b404:	6859      	ldr	r1, [r3, #4]
    b406:	4281      	cmp	r1, r0
    b408:	d1f8      	bne.n	b3fc <lv_draw_mask_remove_custom+0x10>
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
    b40a:	f852 6c04 	ldr.w	r6, [r2, #-4]
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
    b40e:	f842 5c04 	str.w	r5, [r2, #-4]
            LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = NULL;
    b412:	605d      	str	r5, [r3, #4]
    b414:	e7f2      	b.n	b3fc <lv_draw_mask_remove_custom+0x10>
}
    b416:	4630      	mov	r0, r6
    b418:	bc70      	pop	{r4, r5, r6}
    b41a:	4770      	bx	lr
    b41c:	2000ad74 	.word	0x2000ad74

0000b420 <lv_draw_mask_get_cnt>:
{
    b420:	2300      	movs	r3, #0
    uint8_t cnt = 0;
    b422:	4618      	mov	r0, r3
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
    b424:	4906      	ldr	r1, [pc, #24]	; (b440 <lv_draw_mask_get_cnt+0x20>)
    b426:	e002      	b.n	b42e <lv_draw_mask_get_cnt+0xe>
    b428:	3301      	adds	r3, #1
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
    b42a:	2b10      	cmp	r3, #16
    b42c:	d006      	beq.n	b43c <lv_draw_mask_get_cnt+0x1c>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
    b42e:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
    b432:	2a00      	cmp	r2, #0
    b434:	d0f8      	beq.n	b428 <lv_draw_mask_get_cnt+0x8>
    b436:	3001      	adds	r0, #1
    b438:	b2c0      	uxtb	r0, r0
    b43a:	e7f5      	b.n	b428 <lv_draw_mask_get_cnt+0x8>
}
    b43c:	4770      	bx	lr
    b43e:	bf00      	nop
    b440:	2000ad74 	.word	0x2000ad74

0000b444 <lv_draw_mask_line_points_init>:
{
    b444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b448:	4604      	mov	r4, r0
    b44a:	460f      	mov	r7, r1
    b44c:	4615      	mov	r5, r2
    b44e:	4698      	mov	r8, r3
    b450:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
    _lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
    b454:	212c      	movs	r1, #44	; 0x2c
    b456:	4b4a      	ldr	r3, [pc, #296]	; (b580 <lv_draw_mask_line_points_init+0x13c>)
    b458:	4798      	blx	r3
    if(p1y > p2y) {
    b45a:	42b5      	cmp	r5, r6
    b45c:	dd05      	ble.n	b46a <lv_draw_mask_line_points_init+0x26>
    b45e:	462b      	mov	r3, r5
        p1y = t;
    b460:	4635      	mov	r5, r6
        p2y = p1y;
    b462:	461e      	mov	r6, r3
    if(p1y > p2y) {
    b464:	463b      	mov	r3, r7
        p1x = t;
    b466:	4647      	mov	r7, r8
        p2x = p1x;
    b468:	4698      	mov	r8, r3
    param->cfg.p1.x = p1x;
    b46a:	8127      	strh	r7, [r4, #8]
    param->cfg.p1.y = p1y;
    b46c:	8165      	strh	r5, [r4, #10]
    param->cfg.p2.x = p2x;
    b46e:	f8a4 800c 	strh.w	r8, [r4, #12]
    param->cfg.p2.y = p2y;
    b472:	81e6      	strh	r6, [r4, #14]
    param->cfg.side = side;
    b474:	7c23      	ldrb	r3, [r4, #16]
    b476:	f89d 201c 	ldrb.w	r2, [sp, #28]
    b47a:	f362 0301 	bfi	r3, r2, #0, #2
    b47e:	7423      	strb	r3, [r4, #16]
    param->origo.x = p1x;
    b480:	8267      	strh	r7, [r4, #18]
    param->origo.y = p1y;
    b482:	82a5      	strh	r5, [r4, #20]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
    b484:	eba8 0707 	sub.w	r7, r8, r7
    b488:	1b75      	subs	r5, r6, r5
    b48a:	ea87 71e7 	eor.w	r1, r7, r7, asr #31
    b48e:	eba1 71e7 	sub.w	r1, r1, r7, asr #31
    b492:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
    b496:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
    b49a:	4299      	cmp	r1, r3
    b49c:	bfd4      	ite	le
    b49e:	2100      	movle	r1, #0
    b4a0:	2101      	movgt	r1, #1
    b4a2:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    b4a6:	f361 0200 	bfi	r2, r1, #0, #1
    b4aa:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    param->yx_steep = 0;
    b4ae:	2100      	movs	r1, #0
    b4b0:	61e1      	str	r1, [r4, #28]
    param->xy_steep = 0;
    b4b2:	61a1      	str	r1, [r4, #24]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
    b4b4:	4b33      	ldr	r3, [pc, #204]	; (b584 <lv_draw_mask_line_points_init+0x140>)
    b4b6:	6023      	str	r3, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
    b4b8:	7121      	strb	r1, [r4, #4]
    if(param->flat) {
    b4ba:	f012 0f01 	tst.w	r2, #1
    b4be:	d025      	beq.n	b50c <lv_draw_mask_line_points_init+0xc8>
        if(dx) {
    b4c0:	b13f      	cbz	r7, b4d2 <lv_draw_mask_line_points_init+0x8e>
            m = (1 << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
    b4c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    b4c6:	fb93 f3f7 	sdiv	r3, r3, r7
            param->yx_steep = (m * dy) >> 10;
    b4ca:	fb05 f303 	mul.w	r3, r5, r3
    b4ce:	129b      	asrs	r3, r3, #10
    b4d0:	61e3      	str	r3, [r4, #28]
        if(dy) {
    b4d2:	b13d      	cbz	r5, b4e4 <lv_draw_mask_line_points_init+0xa0>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
    b4d4:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
    b4d8:	fb96 f5f5 	sdiv	r5, r6, r5
            param->xy_steep = (m * dx) >> 10;
    b4dc:	fb07 f705 	mul.w	r7, r7, r5
    b4e0:	12bf      	asrs	r7, r7, #10
    b4e2:	61a7      	str	r7, [r4, #24]
        param->steep = param->yx_steep;
    b4e4:	69e3      	ldr	r3, [r4, #28]
    b4e6:	6223      	str	r3, [r4, #32]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
    b4e8:	7c23      	ldrb	r3, [r4, #16]
    b4ea:	f013 0303 	ands.w	r3, r3, #3
    b4ee:	d122      	bne.n	b536 <lv_draw_mask_line_points_init+0xf2>
    b4f0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    b4f4:	f36f 0341 	bfc	r3, #1, #1
    b4f8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    param->spx = param->steep >> 2;
    b4fc:	6a23      	ldr	r3, [r4, #32]
    b4fe:	109a      	asrs	r2, r3, #2
    if(param->steep < 0) param->spx = -param->spx;
    b500:	2b00      	cmp	r3, #0
    b502:	bfb8      	it	lt
    b504:	4252      	neglt	r2, r2
    b506:	6262      	str	r2, [r4, #36]	; 0x24
    b508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(dy) {
    b50c:	b13d      	cbz	r5, b51e <lv_draw_mask_line_points_init+0xda>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
    b50e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    b512:	fb93 f3f5 	sdiv	r3, r3, r5
            param->xy_steep = (m * dx) >> 10;
    b516:	fb07 f303 	mul.w	r3, r7, r3
    b51a:	129b      	asrs	r3, r3, #10
    b51c:	61a3      	str	r3, [r4, #24]
        if(dx) {
    b51e:	b13f      	cbz	r7, b530 <lv_draw_mask_line_points_init+0xec>
            m = (1 << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
    b520:	f44f 1880 	mov.w	r8, #1048576	; 0x100000
    b524:	fb98 f7f7 	sdiv	r7, r8, r7
            param->yx_steep = (m * dy) >> 10;
    b528:	fb05 f507 	mul.w	r5, r5, r7
    b52c:	12ad      	asrs	r5, r5, #10
    b52e:	61e5      	str	r5, [r4, #28]
        param->steep = param->xy_steep;
    b530:	69a3      	ldr	r3, [r4, #24]
    b532:	6223      	str	r3, [r4, #32]
    b534:	e7d8      	b.n	b4e8 <lv_draw_mask_line_points_init+0xa4>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
    b536:	2b01      	cmp	r3, #1
    b538:	d00f      	beq.n	b55a <lv_draw_mask_line_points_init+0x116>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
    b53a:	2b02      	cmp	r3, #2
    b53c:	d014      	beq.n	b568 <lv_draw_mask_line_points_init+0x124>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
    b53e:	2b03      	cmp	r3, #3
    b540:	d1dc      	bne.n	b4fc <lv_draw_mask_line_points_init+0xb8>
        if(param->steep > 0) param->inv = 0;
    b542:	6a23      	ldr	r3, [r4, #32]
    b544:	2b00      	cmp	r3, #0
    b546:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    b54a:	bfcc      	ite	gt
    b54c:	f36f 0341 	bfcgt	r3, #1, #1
        else param->inv = 1;
    b550:	f043 0302 	orrle.w	r3, r3, #2
    b554:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    b558:	e7d0      	b.n	b4fc <lv_draw_mask_line_points_init+0xb8>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
    b55a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    b55e:	f043 0302 	orr.w	r3, r3, #2
    b562:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    b566:	e7c9      	b.n	b4fc <lv_draw_mask_line_points_init+0xb8>
        if(param->steep > 0) param->inv = 1;
    b568:	6a23      	ldr	r3, [r4, #32]
    b56a:	2b00      	cmp	r3, #0
    b56c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    b570:	bfcc      	ite	gt
    b572:	f043 0302 	orrgt.w	r3, r3, #2
        else param->inv = 0;
    b576:	f36f 0341 	bfcle	r3, #1, #1
    b57a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    b57e:	e7bd      	b.n	b4fc <lv_draw_mask_line_points_init+0xb8>
    b580:	00011c17 	.word	0x00011c17
    b584:	0000a79d 	.word	0x0000a79d

0000b588 <lv_draw_mask_radius_init>:
{
    b588:	b470      	push	{r4, r5, r6}
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    b58a:	88cc      	ldrh	r4, [r1, #6]
    b58c:	3401      	adds	r4, #1
    b58e:	884d      	ldrh	r5, [r1, #2]
    b590:	1b64      	subs	r4, r4, r5
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    b592:	888d      	ldrh	r5, [r1, #4]
    b594:	3501      	adds	r5, #1
    b596:	880e      	ldrh	r6, [r1, #0]
    b598:	1bad      	subs	r5, r5, r6
    int32_t short_side = LV_MATH_MIN(w, h);
    b59a:	b224      	sxth	r4, r4
    b59c:	b22d      	sxth	r5, r5
    b59e:	42ac      	cmp	r4, r5
    b5a0:	bfa8      	it	ge
    b5a2:	462c      	movge	r4, r5
    if(radius > short_side >> 1) radius = short_side >> 1;
    b5a4:	1064      	asrs	r4, r4, #1
    b5a6:	42a2      	cmp	r2, r4
    b5a8:	bfc8      	it	gt
    b5aa:	b222      	sxthgt	r2, r4
    b5ac:	3901      	subs	r1, #1
    b5ae:	f100 0610 	add.w	r6, r0, #16
    uint8_t * d8 = (uint8_t *)dst;
    b5b2:	f100 0408 	add.w	r4, r0, #8
        *d8 = *s8;
    b5b6:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    b5ba:	f804 5b01 	strb.w	r5, [r4], #1
    while(len) {
    b5be:	42b4      	cmp	r4, r6
    b5c0:	d1f9      	bne.n	b5b6 <lv_draw_mask_radius_init+0x2e>
    param->cfg.radius = radius;
    b5c2:	8202      	strh	r2, [r0, #16]
    param->cfg.outer = inv ? 1 : 0;
    b5c4:	7c82      	ldrb	r2, [r0, #18]
    b5c6:	f363 0200 	bfi	r2, r3, #0, #1
    b5ca:	7482      	strb	r2, [r0, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
    b5cc:	4b05      	ldr	r3, [pc, #20]	; (b5e4 <lv_draw_mask_radius_init+0x5c>)
    b5ce:	6003      	str	r3, [r0, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
    b5d0:	2302      	movs	r3, #2
    b5d2:	7103      	strb	r3, [r0, #4]
    param->y_prev = INT32_MIN;
    b5d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    b5d8:	6143      	str	r3, [r0, #20]
    param->y_prev_x.f = 0;
    b5da:	2300      	movs	r3, #0
    b5dc:	8343      	strh	r3, [r0, #26]
    param->y_prev_x.i = 0;
    b5de:	8303      	strh	r3, [r0, #24]
}
    b5e0:	bc70      	pop	{r4, r5, r6}
    b5e2:	4770      	bx	lr
    b5e4:	0000ad49 	.word	0x0000ad49

0000b5e8 <shadow_blur_corner>:
#endif

}

LV_ATTRIBUTE_FAST_MEM static void shadow_blur_corner(lv_coord_t size, lv_coord_t sw, uint16_t * sh_ups_buf)
{
    b5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b5ec:	b08b      	sub	sp, #44	; 0x2c
    b5ee:	9006      	str	r0, [sp, #24]
    b5f0:	4689      	mov	r9, r1
    b5f2:	9207      	str	r2, [sp, #28]
    int32_t s_left = sw >> 1;
    b5f4:	ea4f 0b61 	mov.w	fp, r1, asr #1
    b5f8:	f8cd b008 	str.w	fp, [sp, #8]
    int32_t s_right = (sw >> 1);
    if((sw & 1) == 0) s_left--;
    b5fc:	f011 0f01 	tst.w	r1, #1
    b600:	bf06      	itte	eq
    b602:	f10b 33ff 	addeq.w	r3, fp, #4294967295
    b606:	9308      	streq	r3, [sp, #32]
    int32_t s_left = sw >> 1;
    b608:	f8cd b020 	strne.w	fp, [sp, #32]

    /*Horizontal blur*/
    uint16_t * sh_ups_blur_buf = _lv_mem_buf_get(size * sizeof(uint16_t));
    b60c:	9c06      	ldr	r4, [sp, #24]
    b60e:	0067      	lsls	r7, r4, #1
    b610:	4638      	mov	r0, r7
    b612:	4b69      	ldr	r3, [pc, #420]	; (b7b8 <shadow_blur_corner+0x1d0>)
    b614:	4798      	blx	r3
    b616:	9005      	str	r0, [sp, #20]
    int32_t x;
    int32_t y;

    uint16_t * sh_ups_tmp_buf = sh_ups_buf;

    for(y = 0; y < size; y++) {
    b618:	2c00      	cmp	r4, #0
    b61a:	f340 80be 	ble.w	b79a <shadow_blur_corner+0x1b2>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
    b61e:	1eba      	subs	r2, r7, #2
    b620:	19c1      	adds	r1, r0, r7
    b622:	9103      	str	r1, [sp, #12]
    b624:	9d07      	ldr	r5, [sp, #28]
    b626:	f04f 0800 	mov.w	r8, #0
        for(x = size - 1; x >= 0; x--) {
    b62a:	f104 3aff 	add.w	sl, r4, #4294967295
    b62e:	9908      	ldr	r1, [sp, #32]
    b630:	ebaa 0101 	sub.w	r1, sl, r1
    b634:	9104      	str	r1, [sp, #16]
    b636:	4606      	mov	r6, r0
    b638:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
    b63c:	4693      	mov	fp, r2
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
    b63e:	f8cd 9004 	str.w	r9, [sp, #4]
    b642:	f835 300b 	ldrh.w	r3, [r5, fp]
    b646:	fb09 f303 	mul.w	r3, r9, r3
        for(x = size - 1; x >= 0; x--) {
    b64a:	f1ba 0f00 	cmp.w	sl, #0
    b64e:	db1b      	blt.n	b688 <shadow_blur_corner+0xa0>
    b650:	9a02      	ldr	r2, [sp, #8]
    b652:	eb02 010a 	add.w	r1, r2, sl
    b656:	9a04      	ldr	r2, [sp, #16]
    b658:	3a01      	subs	r2, #1
    b65a:	9803      	ldr	r0, [sp, #12]
    b65c:	f04f 0e00 	mov.w	lr, #0
            sh_ups_blur_buf[x] = v;
    b660:	f820 3d02 	strh.w	r3, [r0, #-2]!

            /*Forget the right pixel*/
            uint32_t right_val = 0;
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
    b664:	428c      	cmp	r4, r1
    b666:	bfcc      	ite	gt
    b668:	f835 c011 	ldrhgt.w	ip, [r5, r1, lsl #1]
    b66c:	46f4      	movle	ip, lr
            v -= right_val;
    b66e:	eba3 030c 	sub.w	r3, r3, ip

            /*Add the left pixel*/
            uint32_t left_val;
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
    b672:	2a00      	cmp	r2, #0
    b674:	bfb4      	ite	lt
    b676:	f8b5 c000 	ldrhlt.w	ip, [r5]
            else left_val = sh_ups_tmp_buf[x - s_left - 1];
    b67a:	f835 c012 	ldrhge.w	ip, [r5, r2, lsl #1]
            v += left_val;
    b67e:	4463      	add	r3, ip
    b680:	3901      	subs	r1, #1
    b682:	3a01      	subs	r2, #1
        for(x = size - 1; x >= 0; x--) {
    b684:	42b0      	cmp	r0, r6
    b686:	d1eb      	bne.n	b660 <shadow_blur_corner+0x78>
        }
        _lv_memcpy(sh_ups_tmp_buf, sh_ups_blur_buf, size * sizeof(uint16_t));
    b688:	463a      	mov	r2, r7
    b68a:	4631      	mov	r1, r6
    b68c:	4628      	mov	r0, r5
    b68e:	4b4b      	ldr	r3, [pc, #300]	; (b7bc <shadow_blur_corner+0x1d4>)
    b690:	4798      	blx	r3
        sh_ups_tmp_buf += size;
    b692:	443d      	add	r5, r7
    for(y = 0; y < size; y++) {
    b694:	f108 0801 	add.w	r8, r8, #1
    b698:	45a0      	cmp	r8, r4
    b69a:	d1d0      	bne.n	b63e <shadow_blur_corner+0x56>
    b69c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    }

    /*Vertical blur*/
    uint32_t i;
    sh_ups_buf[0] = sh_ups_buf[0] / sw;
    b6a0:	9a07      	ldr	r2, [sp, #28]
    b6a2:	8813      	ldrh	r3, [r2, #0]
    b6a4:	9901      	ldr	r1, [sp, #4]
    b6a6:	fb93 f3f1 	sdiv	r3, r3, r1
    b6aa:	8013      	strh	r3, [r2, #0]
    for(i = 1; i < (uint32_t)size * size; i++) {
    b6ac:	9b06      	ldr	r3, [sp, #24]
    b6ae:	fb03 f503 	mul.w	r5, r3, r3
    b6b2:	2d01      	cmp	r5, #1
    b6b4:	d911      	bls.n	b6da <shadow_blur_corner+0xf2>
    b6b6:	9a07      	ldr	r2, [sp, #28]
    b6b8:	2101      	movs	r1, #1
    b6ba:	9e01      	ldr	r6, [sp, #4]
    b6bc:	4610      	mov	r0, r2
        if(sh_ups_buf[i] == sh_ups_buf[i - 1]) sh_ups_buf[i] = sh_ups_buf[i - 1];
    b6be:	f832 3f02 	ldrh.w	r3, [r2, #2]!
    b6c2:	8800      	ldrh	r0, [r0, #0]
    b6c4:	4298      	cmp	r0, r3
        else  sh_ups_buf[i] = sh_ups_buf[i] / sw;
    b6c6:	bf1c      	itt	ne
    b6c8:	fb93 f3f6 	sdivne	r3, r3, r6
    b6cc:	8013      	strhne	r3, [r2, #0]
    for(i = 1; i < (uint32_t)size * size; i++) {
    b6ce:	3101      	adds	r1, #1
    b6d0:	42a9      	cmp	r1, r5
    b6d2:	d3f3      	bcc.n	b6bc <shadow_blur_corner+0xd4>
    }

    for(x = 0; x < size; x++) {
    b6d4:	9b06      	ldr	r3, [sp, #24]
    b6d6:	2b00      	cmp	r3, #0
    b6d8:	dd59      	ble.n	b78e <shadow_blur_corner+0x1a6>
    b6da:	9e07      	ldr	r6, [sp, #28]
    b6dc:	9602      	str	r6, [sp, #8]
    b6de:	9908      	ldr	r1, [sp, #32]
    b6e0:	fb01 7207 	mla	r2, r1, r7, r7
    b6e4:	ea6f 030b 	mvn.w	r3, fp
    b6e8:	1a5b      	subs	r3, r3, r1
    b6ea:	9d06      	ldr	r5, [sp, #24]
    b6ec:	fb05 f303 	mul.w	r3, r5, r3
    b6f0:	9306      	str	r3, [sp, #24]
            v -= top_val;

            /*Add the bottom pixel*/
            uint32_t bottom_val;
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
    b6f2:	1e6b      	subs	r3, r5, #1
    b6f4:	fb05 f303 	mul.w	r3, r5, r3
    b6f8:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    b6fc:	9307      	str	r3, [sp, #28]
    b6fe:	f04f 0a00 	mov.w	sl, #0
    b702:	1e93      	subs	r3, r2, #2
    b704:	9308      	str	r3, [sp, #32]
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
    b706:	f101 0901 	add.w	r9, r1, #1
        sh_ups_tmp_buf = &sh_ups_buf[x];
    b70a:	9b02      	ldr	r3, [sp, #8]
    b70c:	461e      	mov	r6, r3
    b70e:	3302      	adds	r3, #2
    b710:	461a      	mov	r2, r3
    b712:	9302      	str	r3, [sp, #8]
        int32_t v = sh_ups_tmp_buf[0] * sw;
    b714:	8833      	ldrh	r3, [r6, #0]
    b716:	9901      	ldr	r1, [sp, #4]
    b718:	fb01 f303 	mul.w	r3, r1, r3
    b71c:	9908      	ldr	r1, [sp, #32]
    b71e:	188d      	adds	r5, r1, r2
    b720:	9a05      	ldr	r2, [sp, #20]
    b722:	f1a2 0c02 	sub.w	ip, r2, #2
    b726:	46e0      	mov	r8, ip
    b728:	46b6      	mov	lr, r6
    b72a:	2200      	movs	r2, #0
    b72c:	f8cd c00c 	str.w	ip, [sp, #12]
    b730:	9604      	str	r6, [sp, #16]
    b732:	9e06      	ldr	r6, [sp, #24]
    b734:	f8dd c01c 	ldr.w	ip, [sp, #28]
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSACALE_SHIFT);
    b738:	2b00      	cmp	r3, #0
    b73a:	bfac      	ite	ge
    b73c:	1199      	asrge	r1, r3, #6
    b73e:	2100      	movlt	r1, #0
    b740:	f828 1f02 	strh.w	r1, [r8, #2]!
    b744:	4611      	mov	r1, r2
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
    b746:	eba2 000b 	sub.w	r0, r2, fp
    b74a:	2800      	cmp	r0, #0
    b74c:	bfd4      	ite	le
    b74e:	f8be 0000 	ldrhle.w	r0, [lr]
            else top_val = sh_ups_buf[(y - s_right) * size + x];
    b752:	f835 0016 	ldrhgt.w	r0, [r5, r6, lsl #1]
            v -= top_val;
    b756:	1a1b      	subs	r3, r3, r0
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
    b758:	4449      	add	r1, r9
    b75a:	428c      	cmp	r4, r1
    b75c:	bfcc      	ite	gt
    b75e:	8829      	ldrhgt	r1, [r5, #0]
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
    b760:	f83c 101a 	ldrhle.w	r1, [ip, sl, lsl #1]
            v += bottom_val;
    b764:	440b      	add	r3, r1
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
    b766:	3201      	adds	r2, #1
    b768:	44be      	add	lr, r7
    b76a:	443d      	add	r5, r7
    b76c:	42a2      	cmp	r2, r4
    b76e:	dbe3      	blt.n	b738 <shadow_blur_corner+0x150>
    b770:	f8dd c00c 	ldr.w	ip, [sp, #12]
    b774:	9e04      	ldr	r6, [sp, #16]
    b776:	2300      	movs	r3, #0
        }

        /*Write back the result into `sh_ups_buf`*/
        sh_ups_tmp_buf = &sh_ups_buf[x];
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
    b778:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
    b77c:	8032      	strh	r2, [r6, #0]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
    b77e:	3301      	adds	r3, #1
    b780:	443e      	add	r6, r7
    b782:	42a3      	cmp	r3, r4
    b784:	dbf8      	blt.n	b778 <shadow_blur_corner+0x190>
    for(x = 0; x < size; x++) {
    b786:	f10a 0a01 	add.w	sl, sl, #1
    b78a:	45a2      	cmp	sl, r4
    b78c:	dbbd      	blt.n	b70a <shadow_blur_corner+0x122>
        }
    }

    _lv_mem_buf_release(sh_ups_blur_buf);
    b78e:	9805      	ldr	r0, [sp, #20]
    b790:	4b0b      	ldr	r3, [pc, #44]	; (b7c0 <shadow_blur_corner+0x1d8>)
    b792:	4798      	blx	r3
}
    b794:	b00b      	add	sp, #44	; 0x2c
    b796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    sh_ups_buf[0] = sh_ups_buf[0] / sw;
    b79a:	f8cd 9004 	str.w	r9, [sp, #4]
    b79e:	9a07      	ldr	r2, [sp, #28]
    b7a0:	8813      	ldrh	r3, [r2, #0]
    b7a2:	fb93 f9f9 	sdiv	r9, r3, r9
    b7a6:	f8a2 9000 	strh.w	r9, [r2]
    for(i = 1; i < (uint32_t)size * size; i++) {
    b7aa:	9b06      	ldr	r3, [sp, #24]
    b7ac:	fb03 f503 	mul.w	r5, r3, r3
    b7b0:	2d01      	cmp	r5, #1
    b7b2:	d880      	bhi.n	b6b6 <shadow_blur_corner+0xce>
    b7b4:	e7eb      	b.n	b78e <shadow_blur_corner+0x1a6>
    b7b6:	bf00      	nop
    b7b8:	00011a65 	.word	0x00011a65
    b7bc:	000117a5 	.word	0x000117a5
    b7c0:	000116e5 	.word	0x000116e5

0000b7c4 <lv_draw_rect_dsc_init>:
{
    b7c4:	b510      	push	{r4, lr}
    b7c6:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
    b7c8:	2154      	movs	r1, #84	; 0x54
    b7ca:	4b2d      	ldr	r3, [pc, #180]	; (b880 <lv_draw_rect_dsc_init+0xbc>)
    b7cc:	4798      	blx	r3
    dsc->bg_color = LV_COLOR_WHITE;
    b7ce:	4b2d      	ldr	r3, [pc, #180]	; (b884 <lv_draw_rect_dsc_init+0xc0>)
    b7d0:	881b      	ldrh	r3, [r3, #0]
    b7d2:	8063      	strh	r3, [r4, #2]
    dsc->bg_grad_color = LV_COLOR_BLACK;
    b7d4:	7923      	ldrb	r3, [r4, #4]
    b7d6:	f36f 0304 	bfc	r3, #0, #5
    b7da:	7123      	strb	r3, [r4, #4]
    b7dc:	88a3      	ldrh	r3, [r4, #4]
    b7de:	f36f 134a 	bfc	r3, #5, #6
    b7e2:	80a3      	strh	r3, [r4, #4]
    b7e4:	0a1b      	lsrs	r3, r3, #8
    b7e6:	f36f 03c7 	bfc	r3, #3, #5
    b7ea:	7163      	strb	r3, [r4, #5]
    dsc->border_color = LV_COLOR_BLACK;
    b7ec:	7ba3      	ldrb	r3, [r4, #14]
    b7ee:	f36f 0304 	bfc	r3, #0, #5
    b7f2:	73a3      	strb	r3, [r4, #14]
    b7f4:	89e3      	ldrh	r3, [r4, #14]
    b7f6:	f36f 134a 	bfc	r3, #5, #6
    b7fa:	81e3      	strh	r3, [r4, #14]
    b7fc:	0a1b      	lsrs	r3, r3, #8
    b7fe:	f36f 03c7 	bfc	r3, #3, #5
    b802:	73e3      	strb	r3, [r4, #15]
    dsc->pattern_recolor = LV_COLOR_BLACK;
    b804:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    b808:	f36f 0304 	bfc	r3, #0, #5
    b80c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    b810:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    b812:	f36f 134a 	bfc	r3, #5, #6
    b816:	86a3      	strh	r3, [r4, #52]	; 0x34
    b818:	0a1b      	lsrs	r3, r3, #8
    b81a:	f36f 03c7 	bfc	r3, #3, #5
    b81e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    dsc->value_color = LV_COLOR_BLACK;
    b822:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
    b826:	f36f 0304 	bfc	r3, #0, #5
    b82a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
    b82e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
    b832:	f36f 134a 	bfc	r3, #5, #6
    b836:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    b83a:	0a1b      	lsrs	r3, r3, #8
    b83c:	f36f 03c7 	bfc	r3, #3, #5
    b840:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
    dsc->shadow_color = LV_COLOR_BLACK;
    b844:	7fa3      	ldrb	r3, [r4, #30]
    b846:	f36f 0304 	bfc	r3, #0, #5
    b84a:	77a3      	strb	r3, [r4, #30]
    b84c:	8be3      	ldrh	r3, [r4, #30]
    b84e:	f36f 134a 	bfc	r3, #5, #6
    b852:	83e3      	strh	r3, [r4, #30]
    b854:	0a1b      	lsrs	r3, r3, #8
    b856:	f36f 03c7 	bfc	r3, #3, #5
    b85a:	77e3      	strb	r3, [r4, #31]
    dsc->bg_grad_color_stop = 0xFF;
    b85c:	23ff      	movs	r3, #255	; 0xff
    b85e:	8163      	strh	r3, [r4, #10]
    dsc->bg_opa = LV_OPA_COVER;
    b860:	7323      	strb	r3, [r4, #12]
    dsc->outline_opa = LV_OPA_COVER;
    b862:	7723      	strb	r3, [r4, #28]
    dsc->border_opa = LV_OPA_COVER;
    b864:	7523      	strb	r3, [r4, #20]
    dsc->pattern_opa = LV_OPA_COVER;
    b866:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    dsc->pattern_font = LV_THEME_DEFAULT_FONT_NORMAL;
    b86a:	4a07      	ldr	r2, [pc, #28]	; (b888 <lv_draw_rect_dsc_init+0xc4>)
    b86c:	6322      	str	r2, [r4, #48]	; 0x30
    dsc->value_opa = LV_OPA_COVER;
    b86e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    dsc->value_font = LV_THEME_DEFAULT_FONT_NORMAL;
    b872:	6422      	str	r2, [r4, #64]	; 0x40
    dsc->shadow_opa = LV_OPA_COVER;
    b874:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    dsc->border_side = LV_BORDER_SIDE_FULL;
    b878:	230f      	movs	r3, #15
    b87a:	8263      	strh	r3, [r4, #18]
    b87c:	bd10      	pop	{r4, pc}
    b87e:	bf00      	nop
    b880:	00011c17 	.word	0x00011c17
    b884:	000179e8 	.word	0x000179e8
    b888:	20000010 	.word	0x20000010

0000b88c <lv_draw_rect>:
{
    b88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b890:	b0b1      	sub	sp, #196	; 0xc4
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    b892:	88c4      	ldrh	r4, [r0, #6]
    b894:	8845      	ldrh	r5, [r0, #2]
    b896:	1c63      	adds	r3, r4, #1
    b898:	1b5b      	subs	r3, r3, r5
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
    b89a:	b21b      	sxth	r3, r3
    b89c:	2b00      	cmp	r3, #0
    b89e:	f341 800f 	ble.w	c8c0 <lv_draw_rect+0x1034>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    b8a2:	8886      	ldrh	r6, [r0, #4]
    b8a4:	f8b0 8000 	ldrh.w	r8, [r0]
    b8a8:	1c73      	adds	r3, r6, #1
    b8aa:	eba3 0308 	sub.w	r3, r3, r8
    b8ae:	b21b      	sxth	r3, r3
    b8b0:	2b00      	cmp	r3, #0
    b8b2:	f341 8005 	ble.w	c8c0 <lv_draw_rect+0x1034>
    b8b6:	4692      	mov	sl, r2
    b8b8:	9104      	str	r1, [sp, #16]
    b8ba:	9006      	str	r0, [sp, #24]
    if(dsc->shadow_width == 0) return;
    b8bc:	f9b2 7020 	ldrsh.w	r7, [r2, #32]
    b8c0:	2f00      	cmp	r7, #0
    b8c2:	f000 8719 	beq.w	c6f8 <lv_draw_rect+0xe6c>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
    b8c6:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    b8ca:	9309      	str	r3, [sp, #36]	; 0x24
    b8cc:	2b05      	cmp	r3, #5
    b8ce:	f240 8713 	bls.w	c6f8 <lv_draw_rect+0xe6c>
    if(dsc->shadow_width == 1 && dsc->shadow_ofs_x == 0 &&
    b8d2:	6a13      	ldr	r3, [r2, #32]
    b8d4:	2b01      	cmp	r3, #1
    b8d6:	f000 80f6 	beq.w	bac6 <lv_draw_rect+0x23a>
    sh_rect_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
    b8da:	f8ba 2022 	ldrh.w	r2, [sl, #34]	; 0x22
    b8de:	f8ba 3026 	ldrh.w	r3, [sl, #38]	; 0x26
    b8e2:	1ad1      	subs	r1, r2, r3
    b8e4:	4488      	add	r8, r1
    b8e6:	fa1f f888 	uxth.w	r8, r8
    b8ea:	f8ad 8050 	strh.w	r8, [sp, #80]	; 0x50
    sh_rect_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
    b8ee:	441a      	add	r2, r3
    b8f0:	4416      	add	r6, r2
    b8f2:	b2b6      	uxth	r6, r6
    b8f4:	f8ad 6054 	strh.w	r6, [sp, #84]	; 0x54
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
    b8f8:	f8ba 2024 	ldrh.w	r2, [sl, #36]	; 0x24
    b8fc:	1ad1      	subs	r1, r2, r3
    b8fe:	440d      	add	r5, r1
    b900:	b2ad      	uxth	r5, r5
    b902:	f8ad 5052 	strh.w	r5, [sp, #82]	; 0x52
    sh_rect_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
    b906:	4413      	add	r3, r2
    b908:	441c      	add	r4, r3
    b90a:	b2a4      	uxth	r4, r4
    b90c:	f8ad 4056 	strh.w	r4, [sp, #86]	; 0x56
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
    b910:	eb07 73d7 	add.w	r3, r7, r7, lsr #31
    b914:	ea6f 0263 	mvn.w	r2, r3, asr #1
    b918:	b292      	uxth	r2, r2
    b91a:	eb08 0102 	add.w	r1, r8, r2
    b91e:	f8ad 1058 	strh.w	r1, [sp, #88]	; 0x58
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
    b922:	105b      	asrs	r3, r3, #1
    b924:	3301      	adds	r3, #1
    b926:	b29b      	uxth	r3, r3
    b928:	18f1      	adds	r1, r6, r3
    b92a:	f8ad 105c 	strh.w	r1, [sp, #92]	; 0x5c
    sh_area.y1 = sh_rect_area.y1 - sw / 2 - 1;
    b92e:	442a      	add	r2, r5
    b930:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    sh_area.y2 = sh_rect_area.y2 + sw / 2 + 1;
    b934:	4423      	add	r3, r4
    b936:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
    b93a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b93c:	2bfb      	cmp	r3, #251	; 0xfb
    b93e:	bf28      	it	cs
    b940:	23ff      	movcs	r3, #255	; 0xff
    b942:	9309      	str	r3, [sp, #36]	; 0x24
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    b944:	4bbe      	ldr	r3, [pc, #760]	; (bc40 <lv_draw_rect+0x3b4>)
    b946:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    b948:	4bbe      	ldr	r3, [pc, #760]	; (bc44 <lv_draw_rect+0x3b8>)
    b94a:	4798      	blx	r3
    b94c:	4681      	mov	r9, r0
    is_common = _lv_area_intersect(&draw_area, &sh_area, clip);
    b94e:	9a04      	ldr	r2, [sp, #16]
    b950:	a916      	add	r1, sp, #88	; 0x58
    b952:	a818      	add	r0, sp, #96	; 0x60
    b954:	4bbc      	ldr	r3, [pc, #752]	; (bc48 <lv_draw_rect+0x3bc>)
    b956:	4798      	blx	r3
    if(is_common == false) return;
    b958:	2800      	cmp	r0, #0
    b95a:	f000 86cd 	beq.w	c6f8 <lv_draw_rect+0xe6c>
    draw_area.x1 -= disp_area->x1;
    b95e:	f8b9 1010 	ldrh.w	r1, [r9, #16]
    b962:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    b966:	1a5b      	subs	r3, r3, r1
    b968:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    draw_area.y1 -= disp_area->y1;
    b96c:	f8b9 2012 	ldrh.w	r2, [r9, #18]
    b970:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
    b974:	1a9b      	subs	r3, r3, r2
    b976:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
    draw_area.x2 -= disp_area->x1;
    b97a:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
    b97e:	1a5b      	subs	r3, r3, r1
    b980:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    draw_area.y2 -= disp_area->y1;
    b984:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
    b988:	1a9b      	subs	r3, r3, r2
    b98a:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    b98e:	9a06      	ldr	r2, [sp, #24]
    b990:	1e53      	subs	r3, r2, #1
    b992:	1dd0      	adds	r0, r2, #7
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    b994:	aa1a      	add	r2, sp, #104	; 0x68
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
    b996:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    b99a:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    b99e:	4298      	cmp	r0, r3
    b9a0:	d1f9      	bne.n	b996 <lv_draw_rect+0x10a>
    bg_coords.x1 += 1;
    b9a2:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    b9a6:	3301      	adds	r3, #1
    b9a8:	fa1f fe83 	uxth.w	lr, r3
    b9ac:	f8ad e068 	strh.w	lr, [sp, #104]	; 0x68
    bg_coords.y1 += 1;
    b9b0:	f8bd 106a 	ldrh.w	r1, [sp, #106]	; 0x6a
    b9b4:	3101      	adds	r1, #1
    b9b6:	b288      	uxth	r0, r1
    b9b8:	f8ad 006a 	strh.w	r0, [sp, #106]	; 0x6a
    bg_coords.x2 -= 1;
    b9bc:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
    b9c0:	1e5a      	subs	r2, r3, #1
    b9c2:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
    bg_coords.y2 -= 1;
    b9c6:	f8bd 106e 	ldrh.w	r1, [sp, #110]	; 0x6e
    b9ca:	1e4a      	subs	r2, r1, #1
    b9cc:	f8ad 206e 	strh.w	r2, [sp, #110]	; 0x6e
    int32_t r_bg = dsc->radius;
    b9d0:	f9ba 2000 	ldrsh.w	r2, [sl]
    b9d4:	eba3 030e 	sub.w	r3, r3, lr
    b9d8:	b21b      	sxth	r3, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    b9da:	1a09      	subs	r1, r1, r0
    b9dc:	b209      	sxth	r1, r1
    int32_t short_side = LV_MATH_MIN(lv_area_get_width(&bg_coords), lv_area_get_height(&bg_coords));
    b9de:	428b      	cmp	r3, r1
    b9e0:	bfa8      	it	ge
    b9e2:	460b      	movge	r3, r1
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
    b9e4:	105b      	asrs	r3, r3, #1
    b9e6:	4293      	cmp	r3, r2
    b9e8:	bfa8      	it	ge
    b9ea:	4613      	movge	r3, r2
    b9ec:	930e      	str	r3, [sp, #56]	; 0x38
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    b9ee:	3601      	adds	r6, #1
    b9f0:	eba6 0608 	sub.w	r6, r6, r8
    b9f4:	b2b6      	uxth	r6, r6
    b9f6:	b233      	sxth	r3, r6
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    b9f8:	3401      	adds	r4, #1
    b9fa:	1b64      	subs	r4, r4, r5
    b9fc:	b2a4      	uxth	r4, r4
    b9fe:	b225      	sxth	r5, r4
    short_side = LV_MATH_MIN(lv_area_get_width(&sh_rect_area), lv_area_get_height(&sh_rect_area));
    ba00:	429d      	cmp	r5, r3
    ba02:	bfa8      	it	ge
    ba04:	461d      	movge	r5, r3
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
    ba06:	106d      	asrs	r5, r5, #1
    ba08:	4295      	cmp	r5, r2
    ba0a:	bfa8      	it	ge
    ba0c:	4615      	movge	r5, r2
    int32_t corner_size = sw  + r_sh;
    ba0e:	eb07 0905 	add.w	r9, r7, r5
    sh_buf = _lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
    ba12:	fb09 f009 	mul.w	r0, r9, r9
    ba16:	0040      	lsls	r0, r0, #1
    ba18:	4b8c      	ldr	r3, [pc, #560]	; (bc4c <lv_draw_rect+0x3c0>)
    ba1a:	4798      	blx	r3
    ba1c:	900a      	str	r0, [sp, #40]	; 0x28
    shadow_draw_corner_buf(&sh_rect_area, (uint16_t *)sh_buf, dsc->shadow_width, r_sh);
    ba1e:	f9ba b020 	ldrsh.w	fp, [sl, #32]
    ba22:	b22a      	sxth	r2, r5
    int32_t size = sw_ori  + r;
    ba24:	eb02 070b 	add.w	r7, r2, fp
    ba28:	f10d 014f 	add.w	r1, sp, #79	; 0x4f
    uint8_t * d8 = (uint8_t *)dst;
    ba2c:	ab22      	add	r3, sp, #136	; 0x88
    while(len) {
    ba2e:	f10d 0e90 	add.w	lr, sp, #144	; 0x90
        *d8 = *s8;
    ba32:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    ba36:	f803 0b01 	strb.w	r0, [r3], #1
    while(len) {
    ba3a:	4573      	cmp	r3, lr
    ba3c:	d1f9      	bne.n	ba32 <lv_draw_rect+0x1a6>
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
    ba3e:	eb0b 71db 	add.w	r1, fp, fp, lsr #31
    ba42:	f3c1 014f 	ubfx	r1, r1, #1, #16
    ba46:	1e4b      	subs	r3, r1, #1
    ba48:	f01b 0001 	ands.w	r0, fp, #1
    ba4c:	9010      	str	r0, [sp, #64]	; 0x40
    ba4e:	bf0c      	ite	eq
    ba50:	2001      	moveq	r0, #1
    ba52:	2000      	movne	r0, #0
    ba54:	1a1b      	subs	r3, r3, r0
    ba56:	442b      	add	r3, r5
    ba58:	b29b      	uxth	r3, r3
    ba5a:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
    sh_area.y1 = sw / 2 + 1;
    ba5e:	3101      	adds	r1, #1
    ba60:	b289      	uxth	r1, r1
    ba62:	f8ad 108a 	strh.w	r1, [sp, #138]	; 0x8a
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
    ba66:	1b9b      	subs	r3, r3, r6
    ba68:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
    ba6c:	4421      	add	r1, r4
    ba6e:	f8ad 108e 	strh.w	r1, [sp, #142]	; 0x8e
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
    ba72:	2300      	movs	r3, #0
    ba74:	a922      	add	r1, sp, #136	; 0x88
    ba76:	a829      	add	r0, sp, #164	; 0xa4
    ba78:	4c75      	ldr	r4, [pc, #468]	; (bc50 <lv_draw_rect+0x3c4>)
    ba7a:	47a0      	blx	r4
    if(sw_ori == 1) sw = 1;
    ba7c:	f1bb 0f01 	cmp.w	fp, #1
    ba80:	f002 81ba 	beq.w	ddf8 <lv_draw_rect+0x256c>
    ba84:	ea4f 036b 	mov.w	r3, fp, asr #1
    ba88:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_opa_t * mask_line = _lv_mem_buf_get(size);
    ba8a:	9707      	str	r7, [sp, #28]
    ba8c:	4638      	mov	r0, r7
    ba8e:	4b6f      	ldr	r3, [pc, #444]	; (bc4c <lv_draw_rect+0x3c0>)
    ba90:	4798      	blx	r3
    ba92:	900c      	str	r0, [sp, #48]	; 0x30
    for(y = 0; y < size; y++) {
    ba94:	2f00      	cmp	r7, #0
    ba96:	dd5c      	ble.n	bb52 <lv_draw_rect+0x2c6>
            _lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
    ba98:	9b07      	ldr	r3, [sp, #28]
    ba9a:	ea4f 0b43 	mov.w	fp, r3, lsl #1
    ba9e:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
    baa2:	3b01      	subs	r3, #1
    baa4:	005b      	lsls	r3, r3, #1
    baa6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    baa8:	2500      	movs	r5, #0
        _lv_memset_ff(mask_line, size);
    baaa:	f8df 81b8 	ldr.w	r8, [pc, #440]	; bc64 <lv_draw_rect+0x3d8>
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
    baae:	b23a      	sxth	r2, r7
    bab0:	9208      	str	r2, [sp, #32]
            _lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
    bab2:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
    bab6:	9705      	str	r7, [sp, #20]
    bab8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    baba:	4699      	mov	r9, r3
    babc:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
    bac0:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
    bac4:	e014      	b.n	baf0 <lv_draw_rect+0x264>
    if(dsc->shadow_width == 1 && dsc->shadow_ofs_x == 0 &&
    bac6:	f9b2 3024 	ldrsh.w	r3, [r2, #36]	; 0x24
    baca:	2b00      	cmp	r3, #0
    bacc:	f47f af05 	bne.w	b8da <lv_draw_rect+0x4e>
       dsc->shadow_ofs_y == 0 && dsc->shadow_spread <= 0) {
    bad0:	f9b2 3026 	ldrsh.w	r3, [r2, #38]	; 0x26
    bad4:	2b00      	cmp	r3, #0
    bad6:	f73f af00 	bgt.w	b8da <lv_draw_rect+0x4e>
    bada:	f000 be0d 	b.w	c6f8 <lv_draw_rect+0xe6c>
            _lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
    bade:	4659      	mov	r1, fp
    bae0:	4620      	mov	r0, r4
    bae2:	4b5c      	ldr	r3, [pc, #368]	; (bc54 <lv_draw_rect+0x3c8>)
    bae4:	4798      	blx	r3
        sh_ups_tmp_buf += size;
    bae6:	445c      	add	r4, fp
    for(y = 0; y < size; y++) {
    bae8:	3501      	adds	r5, #1
    baea:	9b05      	ldr	r3, [sp, #20]
    baec:	42ab      	cmp	r3, r5
    baee:	dd2b      	ble.n	bb48 <lv_draw_rect+0x2bc>
        _lv_memset_ff(mask_line, size);
    baf0:	9907      	ldr	r1, [sp, #28]
    baf2:	4630      	mov	r0, r6
    baf4:	47c0      	blx	r8
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
    baf6:	ab29      	add	r3, sp, #164	; 0xa4
    baf8:	9300      	str	r3, [sp, #0]
    bafa:	9b08      	ldr	r3, [sp, #32]
    bafc:	b22a      	sxth	r2, r5
    bafe:	2100      	movs	r1, #0
    bb00:	4630      	mov	r0, r6
    bb02:	9f29      	ldr	r7, [sp, #164]	; 0xa4
    bb04:	47b8      	blx	r7
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
    bb06:	2800      	cmp	r0, #0
    bb08:	d0e9      	beq.n	bade <lv_draw_rect+0x252>
            sh_ups_tmp_buf[0] = (mask_line[0] << SHADOW_UPSACALE_SHIFT) / sw;
    bb0a:	46d6      	mov	lr, sl
    bb0c:	7833      	ldrb	r3, [r6, #0]
    bb0e:	019b      	lsls	r3, r3, #6
    bb10:	fb93 f3fa 	sdiv	r3, r3, sl
    bb14:	8023      	strh	r3, [r4, #0]
            for(i = 1; i < size; i++) {
    bb16:	9b05      	ldr	r3, [sp, #20]
    bb18:	2b01      	cmp	r3, #1
    bb1a:	dde4      	ble.n	bae6 <lv_draw_rect+0x25a>
    bb1c:	4631      	mov	r1, r6
    bb1e:	4622      	mov	r2, r4
    bb20:	eb04 0009 	add.w	r0, r4, r9
    bb24:	461f      	mov	r7, r3
    bb26:	468c      	mov	ip, r1
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
    bb28:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    bb2c:	f89c c000 	ldrb.w	ip, [ip]
    bb30:	459c      	cmp	ip, r3
    bb32:	bf0e      	itee	eq
    bb34:	8813      	ldrheq	r3, [r2, #0]
                else  sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSACALE_SHIFT) / sw;
    bb36:	019b      	lslne	r3, r3, #6
    bb38:	fb93 f3fe 	sdivne	r3, r3, lr
    bb3c:	8053      	strh	r3, [r2, #2]
    bb3e:	3202      	adds	r2, #2
            for(i = 1; i < size; i++) {
    bb40:	4282      	cmp	r2, r0
    bb42:	d1f0      	bne.n	bb26 <lv_draw_rect+0x29a>
    bb44:	9705      	str	r7, [sp, #20]
    bb46:	e7ce      	b.n	bae6 <lv_draw_rect+0x25a>
    bb48:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    bb4c:	461f      	mov	r7, r3
    bb4e:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    _lv_mem_buf_release(mask_line);
    bb52:	980c      	ldr	r0, [sp, #48]	; 0x30
    bb54:	4b40      	ldr	r3, [pc, #256]	; (bc58 <lv_draw_rect+0x3cc>)
    bb56:	4798      	blx	r3
    if(sw == 1) {
    bb58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bb5a:	2b01      	cmp	r3, #1
    bb5c:	f002 812f 	beq.w	ddbe <lv_draw_rect+0x2532>
    shadow_blur_corner(size, sw, sh_buf);
    bb60:	b23c      	sxth	r4, r7
    bb62:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    bb64:	4632      	mov	r2, r6
    bb66:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    bb68:	4629      	mov	r1, r5
    bb6a:	4620      	mov	r0, r4
    bb6c:	4b3b      	ldr	r3, [pc, #236]	; (bc5c <lv_draw_rect+0x3d0>)
    bb6e:	4798      	blx	r3
    sw += sw_ori & 1;
    bb70:	9a10      	ldr	r2, [sp, #64]	; 0x40
    bb72:	442a      	add	r2, r5
    bb74:	b211      	sxth	r1, r2
    if(sw > 1) {
    bb76:	2901      	cmp	r1, #1
    bb78:	dd22      	ble.n	bbc0 <lv_draw_rect+0x334>
        sh_buf[0] = (sh_buf[0] << SHADOW_UPSACALE_SHIFT) / sw;
    bb7a:	460d      	mov	r5, r1
    bb7c:	8833      	ldrh	r3, [r6, #0]
    bb7e:	019b      	lsls	r3, r3, #6
    bb80:	fb93 f3f1 	sdiv	r3, r3, r1
    bb84:	4632      	mov	r2, r6
    bb86:	8033      	strh	r3, [r6, #0]
        for(i = 1; i < (uint32_t) size * size; i++) {
    bb88:	9807      	ldr	r0, [sp, #28]
    bb8a:	fb00 f000 	mul.w	r0, r0, r0
    bb8e:	2801      	cmp	r0, #1
    bb90:	d912      	bls.n	bbb8 <lv_draw_rect+0x32c>
    bb92:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    bb96:	3801      	subs	r0, #1
    bb98:	eb06 0040 	add.w	r0, r6, r0, lsl #1
    bb9c:	e001      	b.n	bba2 <lv_draw_rect+0x316>
    bb9e:	4282      	cmp	r2, r0
    bba0:	d00a      	beq.n	bbb8 <lv_draw_rect+0x32c>
    bba2:	4616      	mov	r6, r2
            if(sh_buf[i] == sh_buf[i - 1]) sh_buf[i] = sh_buf[i - 1];
    bba4:	f832 3f02 	ldrh.w	r3, [r2, #2]!
    bba8:	8836      	ldrh	r6, [r6, #0]
    bbaa:	429e      	cmp	r6, r3
    bbac:	d0f7      	beq.n	bb9e <lv_draw_rect+0x312>
            else  sh_buf[i] = (sh_buf[i] << SHADOW_UPSACALE_SHIFT) / sw;
    bbae:	019b      	lsls	r3, r3, #6
    bbb0:	fb93 f3f5 	sdiv	r3, r3, r5
    bbb4:	8013      	strh	r3, [r2, #0]
    bbb6:	e7f2      	b.n	bb9e <lv_draw_rect+0x312>
        shadow_blur_corner(size, sw, sh_buf);
    bbb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    bbba:	4620      	mov	r0, r4
    bbbc:	4b27      	ldr	r3, [pc, #156]	; (bc5c <lv_draw_rect+0x3d0>)
    bbbe:	4798      	blx	r3
    for(x = 0; x < size * size; x++) {
    bbc0:	fb07 f707 	mul.w	r7, r7, r7
    bbc4:	b157      	cbz	r7, bbdc <lv_draw_rect+0x350>
    bbc6:	990a      	ldr	r1, [sp, #40]	; 0x28
    bbc8:	460b      	mov	r3, r1
    bbca:	1e4a      	subs	r2, r1, #1
    bbcc:	eb01 0047 	add.w	r0, r1, r7, lsl #1
        res_buf[x] = sh_buf[x];
    bbd0:	f833 1b02 	ldrh.w	r1, [r3], #2
    bbd4:	f802 1f01 	strb.w	r1, [r2, #1]!
    for(x = 0; x < size * size; x++) {
    bbd8:	4298      	cmp	r0, r3
    bbda:	d1f9      	bne.n	bbd0 <lv_draw_rect+0x344>
    lv_coord_t h_half = sh_area.y1 + lv_area_get_height(&sh_area) / 2;
    bbdc:	f8bd 205a 	ldrh.w	r2, [sp, #90]	; 0x5a
    bbe0:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
    bbe4:	3301      	adds	r3, #1
    bbe6:	1a9b      	subs	r3, r3, r2
    bbe8:	b21b      	sxth	r3, r3
    bbea:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    bbee:	eb02 0363 	add.w	r3, r2, r3, asr #1
    bbf2:	b29b      	uxth	r3, r3
    bbf4:	930f      	str	r3, [sp, #60]	; 0x3c
    bbf6:	b21b      	sxth	r3, r3
    bbf8:	930c      	str	r3, [sp, #48]	; 0x30
    lv_coord_t w_half = sh_area.x1 + lv_area_get_width(&sh_area) / 2;
    bbfa:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    bbfe:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
    bc02:	3301      	adds	r3, #1
    bc04:	1a9b      	subs	r3, r3, r2
    bc06:	b21b      	sxth	r3, r3
    bc08:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    bc0c:	eb02 0363 	add.w	r3, r2, r3, asr #1
    bc10:	b29b      	uxth	r3, r3
    bc12:	9310      	str	r3, [sp, #64]	; 0x40
    bc14:	b21b      	sxth	r3, r3
    bc16:	930d      	str	r3, [sp, #52]	; 0x34
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
    bc18:	4b11      	ldr	r3, [pc, #68]	; (bc60 <lv_draw_rect+0x3d4>)
    bc1a:	4798      	blx	r3
    bc1c:	bb20      	cbnz	r0, bc68 <lv_draw_rect+0x3dc>
    else if(dsc->shadow_ofs_x != 0 || dsc->shadow_ofs_y != 0) simple_mode = false;
    bc1e:	f9ba 3022 	ldrsh.w	r3, [sl, #34]	; 0x22
    bc22:	2b00      	cmp	r3, #0
    bc24:	f040 81bc 	bne.w	bfa0 <lv_draw_rect+0x714>
    bc28:	f9ba 3024 	ldrsh.w	r3, [sl, #36]	; 0x24
    bc2c:	2b00      	cmp	r3, #0
    bc2e:	f040 81ba 	bne.w	bfa6 <lv_draw_rect+0x71a>
    else if(dsc->shadow_spread != 0) simple_mode = false;
    bc32:	f9ba 3026 	ldrsh.w	r3, [sl, #38]	; 0x26
    bc36:	fab3 f383 	clz	r3, r3
    bc3a:	095b      	lsrs	r3, r3, #5
    bc3c:	9307      	str	r3, [sp, #28]
    bc3e:	e015      	b.n	bc6c <lv_draw_rect+0x3e0>
    bc40:	00005789 	.word	0x00005789
    bc44:	0001025d 	.word	0x0001025d
    bc48:	00010719 	.word	0x00010719
    bc4c:	00011a65 	.word	0x00011a65
    bc50:	0000b589 	.word	0x0000b589
    bc54:	00011c17 	.word	0x00011c17
    bc58:	000116e5 	.word	0x000116e5
    bc5c:	0000b5e9 	.word	0x0000b5e9
    bc60:	0000b421 	.word	0x0000b421
    bc64:	00011ccd 	.word	0x00011ccd
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
    bc68:	2300      	movs	r3, #0
    bc6a:	9307      	str	r3, [sp, #28]
    bc6c:	f8bd 005c 	ldrh.w	r0, [sp, #92]	; 0x5c
    bc70:	3001      	adds	r0, #1
    bc72:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
    bc76:	1ac0      	subs	r0, r0, r3
    lv_opa_t * mask_buf = _lv_mem_buf_get(lv_area_get_width(&sh_area));
    bc78:	b200      	sxth	r0, r0
    bc7a:	4bc2      	ldr	r3, [pc, #776]	; (bf84 <lv_draw_rect+0x6f8>)
    bc7c:	4798      	blx	r3
    bc7e:	9005      	str	r0, [sp, #20]
    lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, r_bg, true);
    bc80:	2301      	movs	r3, #1
    bc82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    bc84:	a91a      	add	r1, sp, #104	; 0x68
    bc86:	a829      	add	r0, sp, #164	; 0xa4
    bc88:	4cbf      	ldr	r4, [pc, #764]	; (bf88 <lv_draw_rect+0x6fc>)
    bc8a:	47a0      	blx	r4
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
    bc8c:	2100      	movs	r1, #0
    bc8e:	a829      	add	r0, sp, #164	; 0xa4
    bc90:	4bbe      	ldr	r3, [pc, #760]	; (bf8c <lv_draw_rect+0x700>)
    bc92:	4798      	blx	r3
    bc94:	900e      	str	r0, [sp, #56]	; 0x38
    a.x2 = sh_area.x2;
    bc96:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
    bc9a:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    a.x1 = a.x2 - corner_size + 1;
    bc9e:	fa1f fb89 	uxth.w	fp, r9
    bca2:	3301      	adds	r3, #1
    bca4:	eba3 030b 	sub.w	r3, r3, fp
    bca8:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    a.y1 = sh_area.y1;
    bcac:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
    bcb0:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    a.y2 = a.y1 + corner_size - 1;
    bcb4:	3b01      	subs	r3, #1
    bcb6:	445b      	add	r3, fp
    bcb8:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
    bool has_com = _lv_area_intersect(&ca, &a, clip);
    bcbc:	9a04      	ldr	r2, [sp, #16]
    bcbe:	a91c      	add	r1, sp, #112	; 0x70
    bcc0:	a81e      	add	r0, sp, #120	; 0x78
    bcc2:	4bb3      	ldr	r3, [pc, #716]	; (bf90 <lv_draw_rect+0x704>)
    bcc4:	4798      	blx	r3
    if(has_com) {
    bcc6:	2800      	cmp	r0, #0
    bcc8:	d072      	beq.n	bdb0 <lv_draw_rect+0x524>
        if(ca.y2 > h_half) ca.y2 = h_half;
    bcca:	f9bd 307e 	ldrsh.w	r3, [sp, #126]	; 0x7e
    bcce:	990c      	ldr	r1, [sp, #48]	; 0x30
    bcd0:	428b      	cmp	r3, r1
    bcd2:	bfc4      	itt	gt
    bcd4:	460b      	movgt	r3, r1
    bcd6:	f8ad 307e 	strhgt.w	r3, [sp, #126]	; 0x7e
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
    bcda:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
    bcde:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    bce0:	4293      	cmp	r3, r2
    bce2:	dc03      	bgt.n	bcec <lv_draw_rect+0x460>
    bce4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    bce6:	3301      	adds	r3, #1
    bce8:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    bcec:	f9bd 2078 	ldrsh.w	r2, [sp, #120]	; 0x78
    bcf0:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
    bcf4:	3301      	adds	r3, #1
    bcf6:	1a9b      	subs	r3, r3, r2
    bcf8:	b21b      	sxth	r3, r3
    bcfa:	9308      	str	r3, [sp, #32]
        if(w > 0) {
    bcfc:	2b00      	cmp	r3, #0
    bcfe:	dd57      	ble.n	bdb0 <lv_draw_rect+0x524>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    bd00:	f9bd 707e 	ldrsh.w	r7, [sp, #126]	; 0x7e
    bd04:	f9bd 407a 	ldrsh.w	r4, [sp, #122]	; 0x7a
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
    bd08:	f9bd 5072 	ldrsh.w	r5, [sp, #114]	; 0x72
    bd0c:	1b65      	subs	r5, r4, r5
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
    bd0e:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
    bd12:	1ad2      	subs	r2, r2, r3
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
    bd14:	fb09 2505 	mla	r5, r9, r5, r2
    bd18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bd1a:	441d      	add	r5, r3
    bd1c:	f10d 0277 	add.w	r2, sp, #119	; 0x77
    uint8_t * d8 = (uint8_t *)dst;
    bd20:	ab22      	add	r3, sp, #136	; 0x88
    while(len) {
    bd22:	a824      	add	r0, sp, #144	; 0x90
        *d8 = *s8;
    bd24:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    bd28:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    bd2c:	4283      	cmp	r3, r0
    bd2e:	d1f9      	bne.n	bd24 <lv_draw_rect+0x498>
            fa.y2 = fa.y1;
    bd30:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    bd34:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    bd38:	3701      	adds	r7, #1
    bd3a:	1b3f      	subs	r7, r7, r4
            for(y = 0; y < h; y++) {
    bd3c:	b23f      	sxth	r7, r7
    bd3e:	2f00      	cmp	r7, #0
    bd40:	dd36      	ble.n	bdb0 <lv_draw_rect+0x524>
    bd42:	2600      	movs	r6, #0
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    bd44:	f8df 8254 	ldr.w	r8, [pc, #596]	; bf9c <lv_draw_rect+0x710>
    bd48:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
    bd4c:	46bb      	mov	fp, r7
    bd4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bd50:	930b      	str	r3, [sp, #44]	; 0x2c
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
    bd52:	9a08      	ldr	r2, [sp, #32]
    bd54:	4629      	mov	r1, r5
    bd56:	9f05      	ldr	r7, [sp, #20]
    bd58:	4638      	mov	r0, r7
    bd5a:	4c8e      	ldr	r4, [pc, #568]	; (bf94 <lv_draw_rect+0x708>)
    bd5c:	47a0      	blx	r4
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    bd5e:	ac30      	add	r4, sp, #192	; 0xc0
    bd60:	9b08      	ldr	r3, [sp, #32]
    bd62:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
    bd66:	f934 1d38 	ldrsh.w	r1, [r4, #-56]!
    bd6a:	9705      	str	r7, [sp, #20]
    bd6c:	4638      	mov	r0, r7
    bd6e:	4f8a      	ldr	r7, [pc, #552]	; (bf98 <lv_draw_rect+0x70c>)
    bd70:	47b8      	blx	r7
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    bd72:	2801      	cmp	r0, #1
    bd74:	bf08      	it	eq
    bd76:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    bd78:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    bd7c:	9302      	str	r3, [sp, #8]
    bd7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    bd80:	9201      	str	r2, [sp, #4]
    bd82:	9000      	str	r0, [sp, #0]
    bd84:	9b05      	ldr	r3, [sp, #20]
    bd86:	f8ba 201e 	ldrh.w	r2, [sl, #30]
    bd8a:	4621      	mov	r1, r4
    bd8c:	9804      	ldr	r0, [sp, #16]
    bd8e:	47c0      	blx	r8
                fa.y1++;
    bd90:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    bd94:	3301      	adds	r3, #1
    bd96:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
                fa.y2++;
    bd9a:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    bd9e:	3301      	adds	r3, #1
    bda0:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    bda4:	444d      	add	r5, r9
            for(y = 0; y < h; y++) {
    bda6:	3601      	adds	r6, #1
    bda8:	455e      	cmp	r6, fp
    bdaa:	d1d2      	bne.n	bd52 <lv_draw_rect+0x4c6>
    bdac:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
    a.x2 = sh_area.x2;
    bdb0:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
    bdb4:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    a.x1 = a.x2 - corner_size + 1;
    bdb8:	3301      	adds	r3, #1
    bdba:	eba3 030b 	sub.w	r3, r3, fp
    bdbe:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    a.y1 = sh_area.y2 - corner_size + 1;
    bdc2:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
    bdc6:	1c53      	adds	r3, r2, #1
    bdc8:	eba3 030b 	sub.w	r3, r3, fp
    bdcc:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    a.y2 = sh_area.y2;
    bdd0:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
    has_com = _lv_area_intersect(&ca, &a, clip);
    bdd4:	9a04      	ldr	r2, [sp, #16]
    bdd6:	a91c      	add	r1, sp, #112	; 0x70
    bdd8:	a81e      	add	r0, sp, #120	; 0x78
    bdda:	4b6d      	ldr	r3, [pc, #436]	; (bf90 <lv_draw_rect+0x704>)
    bddc:	4798      	blx	r3
    if(has_com) {
    bdde:	2800      	cmp	r0, #0
    bde0:	d073      	beq.n	beca <lv_draw_rect+0x63e>
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
    bde2:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
    bde6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    bde8:	4293      	cmp	r3, r2
    bdea:	dc03      	bgt.n	bdf4 <lv_draw_rect+0x568>
    bdec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    bdee:	3301      	adds	r3, #1
    bdf0:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
    bdf4:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
    bdf8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    bdfa:	4293      	cmp	r3, r2
    bdfc:	dc03      	bgt.n	be06 <lv_draw_rect+0x57a>
    bdfe:	9b10      	ldr	r3, [sp, #64]	; 0x40
    be00:	3301      	adds	r3, #1
    be02:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    be06:	f9bd 2078 	ldrsh.w	r2, [sp, #120]	; 0x78
    be0a:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
    be0e:	3301      	adds	r3, #1
    be10:	1a9b      	subs	r3, r3, r2
    be12:	b21b      	sxth	r3, r3
    be14:	9308      	str	r3, [sp, #32]
        if(w > 0) {
    be16:	2b00      	cmp	r3, #0
    be18:	dd57      	ble.n	beca <lv_draw_rect+0x63e>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    be1a:	f9bd 407e 	ldrsh.w	r4, [sp, #126]	; 0x7e
    be1e:	f9bd 607a 	ldrsh.w	r6, [sp, #122]	; 0x7a
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
    be22:	f9bd 5076 	ldrsh.w	r5, [sp, #118]	; 0x76
    be26:	1b2d      	subs	r5, r5, r4
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
    be28:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
    be2c:	1ad2      	subs	r2, r2, r3
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
    be2e:	fb09 2505 	mla	r5, r9, r5, r2
    be32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    be34:	441d      	add	r5, r3
    be36:	f10d 0277 	add.w	r2, sp, #119	; 0x77
    uint8_t * d8 = (uint8_t *)dst;
    be3a:	ab22      	add	r3, sp, #136	; 0x88
    while(len) {
    be3c:	a824      	add	r0, sp, #144	; 0x90
        *d8 = *s8;
    be3e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    be42:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    be46:	4283      	cmp	r3, r0
    be48:	d1f9      	bne.n	be3e <lv_draw_rect+0x5b2>
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
    be4a:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    be4e:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
    be52:	1c67      	adds	r7, r4, #1
    be54:	1bbf      	subs	r7, r7, r6
            for(y = 0; y < h; y++) {
    be56:	b23f      	sxth	r7, r7
    be58:	2f00      	cmp	r7, #0
    be5a:	dd36      	ble.n	beca <lv_draw_rect+0x63e>
    be5c:	2600      	movs	r6, #0
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    be5e:	f8df 813c 	ldr.w	r8, [pc, #316]	; bf9c <lv_draw_rect+0x710>
    be62:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
    be66:	46bb      	mov	fp, r7
    be68:	9b09      	ldr	r3, [sp, #36]	; 0x24
    be6a:	930b      	str	r3, [sp, #44]	; 0x2c
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
    be6c:	9a08      	ldr	r2, [sp, #32]
    be6e:	4629      	mov	r1, r5
    be70:	9f05      	ldr	r7, [sp, #20]
    be72:	4638      	mov	r0, r7
    be74:	4c47      	ldr	r4, [pc, #284]	; (bf94 <lv_draw_rect+0x708>)
    be76:	47a0      	blx	r4
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    be78:	ac30      	add	r4, sp, #192	; 0xc0
    be7a:	9b08      	ldr	r3, [sp, #32]
    be7c:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
    be80:	f934 1d38 	ldrsh.w	r1, [r4, #-56]!
    be84:	9705      	str	r7, [sp, #20]
    be86:	4638      	mov	r0, r7
    be88:	4f43      	ldr	r7, [pc, #268]	; (bf98 <lv_draw_rect+0x70c>)
    be8a:	47b8      	blx	r7
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    be8c:	2801      	cmp	r0, #1
    be8e:	bf08      	it	eq
    be90:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    be92:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    be96:	9302      	str	r3, [sp, #8]
    be98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    be9a:	9201      	str	r2, [sp, #4]
    be9c:	9000      	str	r0, [sp, #0]
    be9e:	9b05      	ldr	r3, [sp, #20]
    bea0:	f8ba 201e 	ldrh.w	r2, [sl, #30]
    bea4:	4621      	mov	r1, r4
    bea6:	9804      	ldr	r0, [sp, #16]
    bea8:	47c0      	blx	r8
                fa.y1--;
    beaa:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    beae:	3b01      	subs	r3, #1
    beb0:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
                fa.y2--;
    beb4:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    beb8:	3b01      	subs	r3, #1
    beba:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    bebe:	444d      	add	r5, r9
            for(y = 0; y < h; y++) {
    bec0:	3601      	adds	r6, #1
    bec2:	455e      	cmp	r6, fp
    bec4:	d1d2      	bne.n	be6c <lv_draw_rect+0x5e0>
    bec6:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
    a.x2 = sh_area.x2;
    beca:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
    bece:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    a.x1 = a.x2 - corner_size + 1;
    bed2:	3301      	adds	r3, #1
    bed4:	eba3 030b 	sub.w	r3, r3, fp
    bed8:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    a.y1 = sh_area.y1 + corner_size;
    bedc:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
    bee0:	445b      	add	r3, fp
    bee2:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    a.y2 = sh_area.y2 - corner_size;
    bee6:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
    beea:	eba3 030b 	sub.w	r3, r3, fp
    beee:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
    has_com = _lv_area_intersect(&ca, &a, clip);
    bef2:	9a04      	ldr	r2, [sp, #16]
    bef4:	a91c      	add	r1, sp, #112	; 0x70
    bef6:	a81e      	add	r0, sp, #120	; 0x78
    bef8:	4b25      	ldr	r3, [pc, #148]	; (bf90 <lv_draw_rect+0x704>)
    befa:	4798      	blx	r3
    if(has_com) {
    befc:	2800      	cmp	r0, #0
    befe:	f000 8085 	beq.w	c00c <lv_draw_rect+0x780>
        if(simple_mode) ca.x1 = LV_MATH_MAX(ca.x1, coords->x2);
    bf02:	9b07      	ldr	r3, [sp, #28]
    bf04:	b14b      	cbz	r3, bf1a <lv_draw_rect+0x68e>
    bf06:	9b06      	ldr	r3, [sp, #24]
    bf08:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    bf0c:	f9bd 2078 	ldrsh.w	r2, [sp, #120]	; 0x78
    bf10:	4293      	cmp	r3, r2
    bf12:	bfb8      	it	lt
    bf14:	4613      	movlt	r3, r2
    bf16:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    bf1a:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
    bf1e:	f8bd 207c 	ldrh.w	r2, [sp, #124]	; 0x7c
    bf22:	3201      	adds	r2, #1
    bf24:	1ad2      	subs	r2, r2, r3
    bf26:	fa0f f882 	sxth.w	r8, r2
        if(w > 0) {
    bf2a:	f1b8 0f00 	cmp.w	r8, #0
    bf2e:	dd6d      	ble.n	c00c <lv_draw_rect+0x780>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    bf30:	f8bd 407e 	ldrh.w	r4, [sp, #126]	; 0x7e
    bf34:	3401      	adds	r4, #1
    bf36:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
    bf3a:	1aa4      	subs	r4, r4, r2
    bf3c:	b224      	sxth	r4, r4
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
    bf3e:	f109 31ff 	add.w	r1, r9, #4294967295
            sh_buf_tmp += ca.x1 - a.x1;
    bf42:	f9bd 2070 	ldrsh.w	r2, [sp, #112]	; 0x70
    bf46:	1a9b      	subs	r3, r3, r2
    bf48:	fb09 3301 	mla	r3, r9, r1, r3
    bf4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    bf4e:	18d3      	adds	r3, r2, r3
    bf50:	9308      	str	r3, [sp, #32]
    bf52:	f10d 0277 	add.w	r2, sp, #119	; 0x77
    uint8_t * d8 = (uint8_t *)dst;
    bf56:	ab22      	add	r3, sp, #136	; 0x88
    while(len) {
    bf58:	a824      	add	r0, sp, #144	; 0x90
        *d8 = *s8;
    bf5a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    bf5e:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    bf62:	4283      	cmp	r3, r0
    bf64:	d1f9      	bne.n	bf5a <lv_draw_rect+0x6ce>
            fa.y2 = fa.y1;
    bf66:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    bf6a:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            for(y = 0; y < h; y++) {
    bf6e:	4625      	mov	r5, r4
    bf70:	2c00      	cmp	r4, #0
    bf72:	dd4b      	ble.n	c00c <lv_draw_rect+0x780>
    bf74:	2400      	movs	r4, #0
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
    bf76:	4f07      	ldr	r7, [pc, #28]	; (bf94 <lv_draw_rect+0x708>)
                _lv_blend_fill(clip, &fa,
    bf78:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    bf7c:	46a9      	mov	r9, r5
    bf7e:	9d07      	ldr	r5, [sp, #28]
    bf80:	e03a      	b.n	bff8 <lv_draw_rect+0x76c>
    bf82:	bf00      	nop
    bf84:	00011a65 	.word	0x00011a65
    bf88:	0000b589 	.word	0x0000b589
    bf8c:	0000b33d 	.word	0x0000b33d
    bf90:	00010719 	.word	0x00010719
    bf94:	000117a5 	.word	0x000117a5
    bf98:	0000b379 	.word	0x0000b379
    bf9c:	00006e05 	.word	0x00006e05
    else if(dsc->shadow_ofs_x != 0 || dsc->shadow_ofs_y != 0) simple_mode = false;
    bfa0:	2300      	movs	r3, #0
    bfa2:	9307      	str	r3, [sp, #28]
    bfa4:	e662      	b.n	bc6c <lv_draw_rect+0x3e0>
    bfa6:	2300      	movs	r3, #0
    bfa8:	9307      	str	r3, [sp, #28]
    bfaa:	e65f      	b.n	bc6c <lv_draw_rect+0x3e0>
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    bfac:	4643      	mov	r3, r8
    bfae:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
    bfb2:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
    bfb6:	9805      	ldr	r0, [sp, #20]
    bfb8:	4e23      	ldr	r6, [pc, #140]	; (c048 <lv_draw_rect+0x7bc>)
    bfba:	47b0      	blx	r6
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    bfbc:	2801      	cmp	r0, #1
    bfbe:	bf08      	it	eq
    bfc0:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa,
    bfc2:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    bfc6:	9302      	str	r3, [sp, #8]
    bfc8:	f89a 3028 	ldrb.w	r3, [sl, #40]	; 0x28
    bfcc:	9301      	str	r3, [sp, #4]
    bfce:	9000      	str	r0, [sp, #0]
    bfd0:	9b05      	ldr	r3, [sp, #20]
    bfd2:	f8ba 201e 	ldrh.w	r2, [sl, #30]
    bfd6:	a922      	add	r1, sp, #136	; 0x88
    bfd8:	9804      	ldr	r0, [sp, #16]
    bfda:	4e1c      	ldr	r6, [pc, #112]	; (c04c <lv_draw_rect+0x7c0>)
    bfdc:	47b0      	blx	r6
                fa.y1++;
    bfde:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    bfe2:	3301      	adds	r3, #1
    bfe4:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
                fa.y2++;
    bfe8:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    bfec:	3301      	adds	r3, #1
    bfee:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            for(y = 0; y < h; y++) {
    bff2:	3401      	adds	r4, #1
    bff4:	454c      	cmp	r4, r9
    bff6:	d007      	beq.n	c008 <lv_draw_rect+0x77c>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
    bff8:	4642      	mov	r2, r8
    bffa:	9908      	ldr	r1, [sp, #32]
    bffc:	9805      	ldr	r0, [sp, #20]
    bffe:	47b8      	blx	r7
                if(simple_mode) {
    c000:	2d00      	cmp	r5, #0
    c002:	d0d3      	beq.n	bfac <lv_draw_rect+0x720>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
    c004:	2002      	movs	r0, #2
    c006:	e7dc      	b.n	bfc2 <lv_draw_rect+0x736>
    c008:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    for(y = 0; y < corner_size; y++) {
    c00c:	f1b9 0f00 	cmp.w	r9, #0
    c010:	dd1e      	ble.n	c050 <lv_draw_rect+0x7c4>
        for(x = 0; x < corner_size / 2; x++) {
    c012:	eb09 77d9 	add.w	r7, r9, r9, lsr #31
    c016:	107f      	asrs	r7, r7, #1
    c018:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    c01a:	2600      	movs	r6, #0
    c01c:	e00c      	b.n	c038 <lv_draw_rect+0x7ac>
            lv_opa_t tmp = sh_buf_tmp[x];
    c01e:	7819      	ldrb	r1, [r3, #0]
            sh_buf_tmp[x] = sh_buf_tmp[corner_size - x - 1];
    c020:	f812 0c01 	ldrb.w	r0, [r2, #-1]
    c024:	f803 0b01 	strb.w	r0, [r3], #1
            sh_buf_tmp[corner_size - x - 1] = tmp;
    c028:	f802 1d01 	strb.w	r1, [r2, #-1]!
        for(x = 0; x < corner_size / 2; x++) {
    c02c:	42a3      	cmp	r3, r4
    c02e:	d1f6      	bne.n	c01e <lv_draw_rect+0x792>
    c030:	444d      	add	r5, r9
    for(y = 0; y < corner_size; y++) {
    c032:	3601      	adds	r6, #1
    c034:	45b1      	cmp	r9, r6
    c036:	d00b      	beq.n	c050 <lv_draw_rect+0x7c4>
        for(x = 0; x < corner_size / 2; x++) {
    c038:	2f00      	cmp	r7, #0
    c03a:	d0f9      	beq.n	c030 <lv_draw_rect+0x7a4>
    c03c:	462b      	mov	r3, r5
    c03e:	eb05 0209 	add.w	r2, r5, r9
    c042:	19ec      	adds	r4, r5, r7
    c044:	e7eb      	b.n	c01e <lv_draw_rect+0x792>
    c046:	bf00      	nop
    c048:	0000b379 	.word	0x0000b379
    c04c:	00006e05 	.word	0x00006e05
    a.x1 = sh_area.x1;
    c050:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
    c054:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    a.x2 = a.x1 + corner_size - 1;
    c058:	3b01      	subs	r3, #1
    c05a:	445b      	add	r3, fp
    c05c:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    a.y1 = sh_area.y1;
    c060:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
    c064:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    a.y2 = a.y1 + corner_size - 1;
    c068:	3b01      	subs	r3, #1
    c06a:	445b      	add	r3, fp
    c06c:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
    has_com = _lv_area_intersect(&ca, &a, clip);
    c070:	9a04      	ldr	r2, [sp, #16]
    c072:	a91c      	add	r1, sp, #112	; 0x70
    c074:	a81e      	add	r0, sp, #120	; 0x78
    c076:	4bae      	ldr	r3, [pc, #696]	; (c330 <lv_draw_rect+0xaa4>)
    c078:	4798      	blx	r3
    if(has_com) {
    c07a:	2800      	cmp	r0, #0
    c07c:	d071      	beq.n	c162 <lv_draw_rect+0x8d6>
        if(ca.y2 > h_half) ca.y2 = h_half;
    c07e:	f9bd 307e 	ldrsh.w	r3, [sp, #126]	; 0x7e
    c082:	990c      	ldr	r1, [sp, #48]	; 0x30
    c084:	428b      	cmp	r3, r1
    c086:	bfc4      	itt	gt
    c088:	460b      	movgt	r3, r1
    c08a:	f8ad 307e 	strhgt.w	r3, [sp, #126]	; 0x7e
        if(ca.x2 > w_half) ca.x2 = w_half;
    c08e:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
    c092:	990d      	ldr	r1, [sp, #52]	; 0x34
    c094:	428b      	cmp	r3, r1
    c096:	bfc4      	itt	gt
    c098:	460b      	movgt	r3, r1
    c09a:	f8ad 307c 	strhgt.w	r3, [sp, #124]	; 0x7c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    c09e:	f9bd 2078 	ldrsh.w	r2, [sp, #120]	; 0x78
    c0a2:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
    c0a6:	3301      	adds	r3, #1
    c0a8:	1a9b      	subs	r3, r3, r2
    c0aa:	b21b      	sxth	r3, r3
    c0ac:	9308      	str	r3, [sp, #32]
        if(w > 0) {
    c0ae:	2b00      	cmp	r3, #0
    c0b0:	dd57      	ble.n	c162 <lv_draw_rect+0x8d6>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    c0b2:	f9bd 707e 	ldrsh.w	r7, [sp, #126]	; 0x7e
    c0b6:	f9bd 407a 	ldrsh.w	r4, [sp, #122]	; 0x7a
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
    c0ba:	f9bd 5072 	ldrsh.w	r5, [sp, #114]	; 0x72
    c0be:	1b65      	subs	r5, r4, r5
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
    c0c0:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
    c0c4:	1ad2      	subs	r2, r2, r3
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
    c0c6:	fb09 2505 	mla	r5, r9, r5, r2
    c0ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c0cc:	441d      	add	r5, r3
    c0ce:	f10d 0277 	add.w	r2, sp, #119	; 0x77
    uint8_t * d8 = (uint8_t *)dst;
    c0d2:	ab22      	add	r3, sp, #136	; 0x88
    while(len) {
    c0d4:	a824      	add	r0, sp, #144	; 0x90
        *d8 = *s8;
    c0d6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    c0da:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    c0de:	4283      	cmp	r3, r0
    c0e0:	d1f9      	bne.n	c0d6 <lv_draw_rect+0x84a>
            fa.y2 = fa.y1;
    c0e2:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    c0e6:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    c0ea:	3701      	adds	r7, #1
    c0ec:	1b3f      	subs	r7, r7, r4
            for(y = 0; y < h; y++) {
    c0ee:	b23f      	sxth	r7, r7
    c0f0:	2f00      	cmp	r7, #0
    c0f2:	dd36      	ble.n	c162 <lv_draw_rect+0x8d6>
    c0f4:	2600      	movs	r6, #0
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    c0f6:	f8df 8244 	ldr.w	r8, [pc, #580]	; c33c <lv_draw_rect+0xab0>
    c0fa:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
    c0fe:	46bb      	mov	fp, r7
    c100:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c102:	930b      	str	r3, [sp, #44]	; 0x2c
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
    c104:	9a08      	ldr	r2, [sp, #32]
    c106:	4629      	mov	r1, r5
    c108:	9f05      	ldr	r7, [sp, #20]
    c10a:	4638      	mov	r0, r7
    c10c:	4c89      	ldr	r4, [pc, #548]	; (c334 <lv_draw_rect+0xaa8>)
    c10e:	47a0      	blx	r4
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    c110:	ac30      	add	r4, sp, #192	; 0xc0
    c112:	9b08      	ldr	r3, [sp, #32]
    c114:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
    c118:	f934 1d38 	ldrsh.w	r1, [r4, #-56]!
    c11c:	9705      	str	r7, [sp, #20]
    c11e:	4638      	mov	r0, r7
    c120:	4f85      	ldr	r7, [pc, #532]	; (c338 <lv_draw_rect+0xaac>)
    c122:	47b8      	blx	r7
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    c124:	2801      	cmp	r0, #1
    c126:	bf08      	it	eq
    c128:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    c12a:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    c12e:	9302      	str	r3, [sp, #8]
    c130:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c132:	9201      	str	r2, [sp, #4]
    c134:	9000      	str	r0, [sp, #0]
    c136:	9b05      	ldr	r3, [sp, #20]
    c138:	f8ba 201e 	ldrh.w	r2, [sl, #30]
    c13c:	4621      	mov	r1, r4
    c13e:	9804      	ldr	r0, [sp, #16]
    c140:	47c0      	blx	r8
                fa.y1++;
    c142:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    c146:	3301      	adds	r3, #1
    c148:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
                fa.y2++;
    c14c:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    c150:	3301      	adds	r3, #1
    c152:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    c156:	444d      	add	r5, r9
            for(y = 0; y < h; y++) {
    c158:	3601      	adds	r6, #1
    c15a:	455e      	cmp	r6, fp
    c15c:	d1d2      	bne.n	c104 <lv_draw_rect+0x878>
    c15e:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
    a.x1 = sh_area.x1;
    c162:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
    c166:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    a.x2 = a.x1 + corner_size - 1;
    c16a:	3b01      	subs	r3, #1
    c16c:	445b      	add	r3, fp
    c16e:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    a.y1 = sh_area.y2 - corner_size + 1;
    c172:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
    c176:	1c53      	adds	r3, r2, #1
    c178:	eba3 030b 	sub.w	r3, r3, fp
    c17c:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    a.y2 = sh_area.y2;
    c180:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
    has_com = _lv_area_intersect(&ca, &a, clip);
    c184:	9a04      	ldr	r2, [sp, #16]
    c186:	a91c      	add	r1, sp, #112	; 0x70
    c188:	a81e      	add	r0, sp, #120	; 0x78
    c18a:	4b69      	ldr	r3, [pc, #420]	; (c330 <lv_draw_rect+0xaa4>)
    c18c:	4798      	blx	r3
    if(has_com) {
    c18e:	2800      	cmp	r0, #0
    c190:	d072      	beq.n	c278 <lv_draw_rect+0x9ec>
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
    c192:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
    c196:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c198:	4293      	cmp	r3, r2
    c19a:	dc03      	bgt.n	c1a4 <lv_draw_rect+0x918>
    c19c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c19e:	3301      	adds	r3, #1
    c1a0:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
        if(ca.x2 > w_half) ca.x2 = w_half;
    c1a4:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
    c1a8:	990d      	ldr	r1, [sp, #52]	; 0x34
    c1aa:	428b      	cmp	r3, r1
    c1ac:	bfc4      	itt	gt
    c1ae:	460b      	movgt	r3, r1
    c1b0:	f8ad 307c 	strhgt.w	r3, [sp, #124]	; 0x7c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    c1b4:	f9bd 2078 	ldrsh.w	r2, [sp, #120]	; 0x78
    c1b8:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
    c1bc:	3301      	adds	r3, #1
    c1be:	1a9b      	subs	r3, r3, r2
    c1c0:	b21b      	sxth	r3, r3
    c1c2:	9308      	str	r3, [sp, #32]
        if(w > 0) {
    c1c4:	2b00      	cmp	r3, #0
    c1c6:	dd57      	ble.n	c278 <lv_draw_rect+0x9ec>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    c1c8:	f9bd 407e 	ldrsh.w	r4, [sp, #126]	; 0x7e
    c1cc:	f9bd 607a 	ldrsh.w	r6, [sp, #122]	; 0x7a
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
    c1d0:	f9bd 5076 	ldrsh.w	r5, [sp, #118]	; 0x76
    c1d4:	1b2d      	subs	r5, r5, r4
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
    c1d6:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
    c1da:	1ad2      	subs	r2, r2, r3
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
    c1dc:	fb09 2505 	mla	r5, r9, r5, r2
    c1e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c1e2:	441d      	add	r5, r3
    c1e4:	f10d 0277 	add.w	r2, sp, #119	; 0x77
    uint8_t * d8 = (uint8_t *)dst;
    c1e8:	ab22      	add	r3, sp, #136	; 0x88
    while(len) {
    c1ea:	a824      	add	r0, sp, #144	; 0x90
        *d8 = *s8;
    c1ec:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    c1f0:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    c1f4:	4283      	cmp	r3, r0
    c1f6:	d1f9      	bne.n	c1ec <lv_draw_rect+0x960>
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
    c1f8:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    c1fc:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
    c200:	1c67      	adds	r7, r4, #1
    c202:	1bbf      	subs	r7, r7, r6
            for(y = 0; y < h; y++) {
    c204:	b23f      	sxth	r7, r7
    c206:	2f00      	cmp	r7, #0
    c208:	dd36      	ble.n	c278 <lv_draw_rect+0x9ec>
    c20a:	2600      	movs	r6, #0
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    c20c:	f8df 812c 	ldr.w	r8, [pc, #300]	; c33c <lv_draw_rect+0xab0>
    c210:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
    c214:	46bb      	mov	fp, r7
    c216:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c218:	930b      	str	r3, [sp, #44]	; 0x2c
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
    c21a:	9a08      	ldr	r2, [sp, #32]
    c21c:	4629      	mov	r1, r5
    c21e:	9f05      	ldr	r7, [sp, #20]
    c220:	4638      	mov	r0, r7
    c222:	4c44      	ldr	r4, [pc, #272]	; (c334 <lv_draw_rect+0xaa8>)
    c224:	47a0      	blx	r4
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    c226:	ac30      	add	r4, sp, #192	; 0xc0
    c228:	9b08      	ldr	r3, [sp, #32]
    c22a:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
    c22e:	f934 1d38 	ldrsh.w	r1, [r4, #-56]!
    c232:	9705      	str	r7, [sp, #20]
    c234:	4638      	mov	r0, r7
    c236:	4f40      	ldr	r7, [pc, #256]	; (c338 <lv_draw_rect+0xaac>)
    c238:	47b8      	blx	r7
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    c23a:	2801      	cmp	r0, #1
    c23c:	bf08      	it	eq
    c23e:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    c240:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    c244:	9302      	str	r3, [sp, #8]
    c246:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c248:	9201      	str	r2, [sp, #4]
    c24a:	9000      	str	r0, [sp, #0]
    c24c:	9b05      	ldr	r3, [sp, #20]
    c24e:	f8ba 201e 	ldrh.w	r2, [sl, #30]
    c252:	4621      	mov	r1, r4
    c254:	9804      	ldr	r0, [sp, #16]
    c256:	47c0      	blx	r8
                fa.y1--;
    c258:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    c25c:	3b01      	subs	r3, #1
    c25e:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
                fa.y2--;
    c262:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    c266:	3b01      	subs	r3, #1
    c268:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    c26c:	444d      	add	r5, r9
            for(y = 0; y < h; y++) {
    c26e:	3601      	adds	r6, #1
    c270:	455e      	cmp	r6, fp
    c272:	d1d2      	bne.n	c21a <lv_draw_rect+0x98e>
    c274:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    a.x1 = sh_area.x1;
    c278:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
    c27c:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    a.x2 = a.x1 + corner_size - 1;
    c280:	3b01      	subs	r3, #1
    c282:	445b      	add	r3, fp
    c284:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    a.y1 = sh_area.y1 + corner_size;
    c288:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
    c28c:	445b      	add	r3, fp
    c28e:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    a.y2 = sh_area.y2 - corner_size;
    c292:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
    c296:	eba3 030b 	sub.w	r3, r3, fp
    c29a:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
    has_com = _lv_area_intersect(&ca, &a, clip);
    c29e:	9a04      	ldr	r2, [sp, #16]
    c2a0:	a91c      	add	r1, sp, #112	; 0x70
    c2a2:	a81e      	add	r0, sp, #120	; 0x78
    c2a4:	4b22      	ldr	r3, [pc, #136]	; (c330 <lv_draw_rect+0xaa4>)
    c2a6:	4798      	blx	r3
    if(has_com) {
    c2a8:	2800      	cmp	r0, #0
    c2aa:	d079      	beq.n	c3a0 <lv_draw_rect+0xb14>
        if(simple_mode) ca.x2 = LV_MATH_MIN(coords->x1, ca.x2);
    c2ac:	9b07      	ldr	r3, [sp, #28]
    c2ae:	b14b      	cbz	r3, c2c4 <lv_draw_rect+0xa38>
    c2b0:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
    c2b4:	9a06      	ldr	r2, [sp, #24]
    c2b6:	f9b2 2000 	ldrsh.w	r2, [r2]
    c2ba:	4293      	cmp	r3, r2
    c2bc:	bfa8      	it	ge
    c2be:	4613      	movge	r3, r2
    c2c0:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    c2c4:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
    c2c8:	f8bd 807c 	ldrh.w	r8, [sp, #124]	; 0x7c
    c2cc:	f108 0801 	add.w	r8, r8, #1
    c2d0:	eba8 0803 	sub.w	r8, r8, r3
    c2d4:	fa0f f888 	sxth.w	r8, r8
        if(w > 0) {
    c2d8:	f1b8 0f00 	cmp.w	r8, #0
    c2dc:	dd60      	ble.n	c3a0 <lv_draw_rect+0xb14>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    c2de:	f8bd 407e 	ldrh.w	r4, [sp, #126]	; 0x7e
    c2e2:	3401      	adds	r4, #1
    c2e4:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
    c2e8:	1aa4      	subs	r4, r4, r2
    c2ea:	b224      	sxth	r4, r4
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
    c2ec:	f109 31ff 	add.w	r1, r9, #4294967295
            sh_buf_tmp += ca.x1 - a.x1;
    c2f0:	f9bd 2070 	ldrsh.w	r2, [sp, #112]	; 0x70
    c2f4:	1a9b      	subs	r3, r3, r2
    c2f6:	fb09 3301 	mla	r3, r9, r1, r3
    c2fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c2fc:	18d3      	adds	r3, r2, r3
    c2fe:	9308      	str	r3, [sp, #32]
    c300:	f10d 0277 	add.w	r2, sp, #119	; 0x77
    uint8_t * d8 = (uint8_t *)dst;
    c304:	ab22      	add	r3, sp, #136	; 0x88
    while(len) {
    c306:	a824      	add	r0, sp, #144	; 0x90
        *d8 = *s8;
    c308:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    c30c:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    c310:	4283      	cmp	r3, r0
    c312:	d1f9      	bne.n	c308 <lv_draw_rect+0xa7c>
            fa.y2 = fa.y1;
    c314:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    c318:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            for(y = 0; y < h; y++) {
    c31c:	4625      	mov	r5, r4
    c31e:	2c00      	cmp	r4, #0
    c320:	dd3e      	ble.n	c3a0 <lv_draw_rect+0xb14>
    c322:	2400      	movs	r4, #0
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
    c324:	4f03      	ldr	r7, [pc, #12]	; (c334 <lv_draw_rect+0xaa8>)
                _lv_blend_fill(clip, &fa,
    c326:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    c32a:	46a9      	mov	r9, r5
    c32c:	9d07      	ldr	r5, [sp, #28]
    c32e:	e02d      	b.n	c38c <lv_draw_rect+0xb00>
    c330:	00010719 	.word	0x00010719
    c334:	000117a5 	.word	0x000117a5
    c338:	0000b379 	.word	0x0000b379
    c33c:	00006e05 	.word	0x00006e05
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    c340:	4643      	mov	r3, r8
    c342:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
    c346:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
    c34a:	9805      	ldr	r0, [sp, #20]
    c34c:	4eaa      	ldr	r6, [pc, #680]	; (c5f8 <lv_draw_rect+0xd6c>)
    c34e:	47b0      	blx	r6
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    c350:	2801      	cmp	r0, #1
    c352:	bf08      	it	eq
    c354:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa,
    c356:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    c35a:	9302      	str	r3, [sp, #8]
    c35c:	f89a 3028 	ldrb.w	r3, [sl, #40]	; 0x28
    c360:	9301      	str	r3, [sp, #4]
    c362:	9000      	str	r0, [sp, #0]
    c364:	9b05      	ldr	r3, [sp, #20]
    c366:	f8ba 201e 	ldrh.w	r2, [sl, #30]
    c36a:	a922      	add	r1, sp, #136	; 0x88
    c36c:	9804      	ldr	r0, [sp, #16]
    c36e:	4ea3      	ldr	r6, [pc, #652]	; (c5fc <lv_draw_rect+0xd70>)
    c370:	47b0      	blx	r6
                fa.y1++;
    c372:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    c376:	3301      	adds	r3, #1
    c378:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
                fa.y2++;
    c37c:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    c380:	3301      	adds	r3, #1
    c382:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            for(y = 0; y < h; y++) {
    c386:	3401      	adds	r4, #1
    c388:	454c      	cmp	r4, r9
    c38a:	d007      	beq.n	c39c <lv_draw_rect+0xb10>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
    c38c:	4642      	mov	r2, r8
    c38e:	9908      	ldr	r1, [sp, #32]
    c390:	9805      	ldr	r0, [sp, #20]
    c392:	47b8      	blx	r7
                if(simple_mode) {
    c394:	2d00      	cmp	r5, #0
    c396:	d0d3      	beq.n	c340 <lv_draw_rect+0xab4>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
    c398:	2002      	movs	r0, #2
    c39a:	e7dc      	b.n	c356 <lv_draw_rect+0xaca>
    c39c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    a.x1 = sh_area.x1 + corner_size;
    c3a0:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
    c3a4:	445b      	add	r3, fp
    c3a6:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    a.x2 = sh_area.x2 - corner_size;
    c3aa:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
    c3ae:	eba3 030b 	sub.w	r3, r3, fp
    c3b2:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    a.y1 = sh_area.y1;
    c3b6:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
    c3ba:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    a.y2 = sh_area.y1 + corner_size - 1;
    c3be:	3b01      	subs	r3, #1
    c3c0:	445b      	add	r3, fp
    c3c2:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
    has_com = _lv_area_intersect(&ca, &a, clip);
    c3c6:	9a04      	ldr	r2, [sp, #16]
    c3c8:	a91c      	add	r1, sp, #112	; 0x70
    c3ca:	a81e      	add	r0, sp, #120	; 0x78
    c3cc:	4b8c      	ldr	r3, [pc, #560]	; (c600 <lv_draw_rect+0xd74>)
    c3ce:	4798      	blx	r3
    if(has_com) {
    c3d0:	2800      	cmp	r0, #0
    c3d2:	d07d      	beq.n	c4d0 <lv_draw_rect+0xc44>
        if(simple_mode) ca.y2 = LV_MATH_MIN(ca.y2, coords->y1);
    c3d4:	9b07      	ldr	r3, [sp, #28]
    c3d6:	b14b      	cbz	r3, c3ec <lv_draw_rect+0xb60>
    c3d8:	9b06      	ldr	r3, [sp, #24]
    c3da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    c3de:	f9bd 207e 	ldrsh.w	r2, [sp, #126]	; 0x7e
    c3e2:	4293      	cmp	r3, r2
    c3e4:	bfa8      	it	ge
    c3e6:	4613      	movge	r3, r2
    c3e8:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    c3ec:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
    c3f0:	3301      	adds	r3, #1
    c3f2:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
    c3f6:	1a9b      	subs	r3, r3, r2
    c3f8:	b21b      	sxth	r3, r3
    c3fa:	9308      	str	r3, [sp, #32]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    c3fc:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
    c400:	f8bd 507e 	ldrh.w	r5, [sp, #126]	; 0x7e
    c404:	3501      	adds	r5, #1
    c406:	1aed      	subs	r5, r5, r3
    c408:	b22d      	sxth	r5, r5
        sh_buf_tmp = sh_buf + corner_size - 1;
    c40a:	46c8      	mov	r8, r9
        sh_buf_tmp += corner_size * (ca.y1 - a.y1);
    c40c:	f9bd 4072 	ldrsh.w	r4, [sp, #114]	; 0x72
    c410:	1b1c      	subs	r4, r3, r4
        sh_buf_tmp = sh_buf + corner_size - 1;
    c412:	f109 33ff 	add.w	r3, r9, #4294967295
        sh_buf_tmp += corner_size * (ca.y1 - a.y1);
    c416:	fb09 3404 	mla	r4, r9, r4, r3
    c41a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c41c:	441c      	add	r4, r3
    c41e:	f10d 0277 	add.w	r2, sp, #119	; 0x77
    uint8_t * d8 = (uint8_t *)dst;
    c422:	ab22      	add	r3, sp, #136	; 0x88
    while(len) {
    c424:	a824      	add	r0, sp, #144	; 0x90
        *d8 = *s8;
    c426:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    c42a:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    c42e:	4283      	cmp	r3, r0
    c430:	d1f9      	bne.n	c426 <lv_draw_rect+0xb9a>
        fa.y2 = fa.y1;
    c432:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    c436:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
        for(y = 0; y < h; y++) {
    c43a:	462b      	mov	r3, r5
    c43c:	2d00      	cmp	r5, #0
    c43e:	dd47      	ble.n	c4d0 <lv_draw_rect+0xc44>
    c440:	2500      	movs	r5, #0
            _lv_memset(mask_buf, opa_tmp, w);
    c442:	4f70      	ldr	r7, [pc, #448]	; (c604 <lv_draw_rect+0xd78>)
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    c444:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    c448:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    c44c:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
    c450:	469b      	mov	fp, r3
    c452:	e02a      	b.n	c4aa <lv_draw_rect+0xc1e>
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
    c454:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    c458:	d12a      	bne.n	c4b0 <lv_draw_rect+0xc24>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
    c45a:	4649      	mov	r1, r9
    c45c:	e02c      	b.n	c4b8 <lv_draw_rect+0xc2c>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    c45e:	9b08      	ldr	r3, [sp, #32]
    c460:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
    c464:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
    c468:	9805      	ldr	r0, [sp, #20]
    c46a:	4e63      	ldr	r6, [pc, #396]	; (c5f8 <lv_draw_rect+0xd6c>)
    c46c:	47b0      	blx	r6
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    c46e:	2801      	cmp	r0, #1
    c470:	bf08      	it	eq
    c472:	2002      	moveq	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    c474:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    c478:	9302      	str	r3, [sp, #8]
    c47a:	23ff      	movs	r3, #255	; 0xff
    c47c:	9301      	str	r3, [sp, #4]
    c47e:	9000      	str	r0, [sp, #0]
    c480:	9b05      	ldr	r3, [sp, #20]
    c482:	f8ba 201e 	ldrh.w	r2, [sl, #30]
    c486:	a922      	add	r1, sp, #136	; 0x88
    c488:	9804      	ldr	r0, [sp, #16]
    c48a:	4e5c      	ldr	r6, [pc, #368]	; (c5fc <lv_draw_rect+0xd70>)
    c48c:	47b0      	blx	r6
            fa.y1++;
    c48e:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    c492:	3301      	adds	r3, #1
    c494:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
            fa.y2++;
    c498:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    c49c:	3301      	adds	r3, #1
    c49e:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            sh_buf_tmp += corner_size;
    c4a2:	4444      	add	r4, r8
        for(y = 0; y < h; y++) {
    c4a4:	3501      	adds	r5, #1
    c4a6:	455d      	cmp	r5, fp
    c4a8:	d00e      	beq.n	c4c8 <lv_draw_rect+0xc3c>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
    c4aa:	7823      	ldrb	r3, [r4, #0]
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
    c4ac:	2bff      	cmp	r3, #255	; 0xff
    c4ae:	d0d1      	beq.n	c454 <lv_draw_rect+0xbc8>
    c4b0:	fb03 f309 	mul.w	r3, r3, r9
    c4b4:	f3c3 2107 	ubfx	r1, r3, #8, #8
            _lv_memset(mask_buf, opa_tmp, w);
    c4b8:	9a08      	ldr	r2, [sp, #32]
    c4ba:	9805      	ldr	r0, [sp, #20]
    c4bc:	47b8      	blx	r7
            if(simple_mode) {
    c4be:	9b07      	ldr	r3, [sp, #28]
    c4c0:	2b00      	cmp	r3, #0
    c4c2:	d0cc      	beq.n	c45e <lv_draw_rect+0xbd2>
                mask_res = LV_DRAW_MASK_RES_CHANGED;
    c4c4:	2002      	movs	r0, #2
    c4c6:	e7d5      	b.n	c474 <lv_draw_rect+0xbe8>
    c4c8:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    c4cc:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    a.x1 = sh_area.x1 + corner_size;
    c4d0:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
    c4d4:	445b      	add	r3, fp
    c4d6:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    a.x2 = sh_area.x2 - corner_size;
    c4da:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
    c4de:	eba3 030b 	sub.w	r3, r3, fp
    c4e2:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    a.y1 = sh_area.y2 - corner_size + 1;
    c4e6:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
    c4ea:	1c53      	adds	r3, r2, #1
    c4ec:	eba3 030b 	sub.w	r3, r3, fp
    c4f0:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    a.y2 = sh_area.y2;
    c4f4:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
    has_com = _lv_area_intersect(&ca, &a, clip);
    c4f8:	9a04      	ldr	r2, [sp, #16]
    c4fa:	a91c      	add	r1, sp, #112	; 0x70
    c4fc:	a81e      	add	r0, sp, #120	; 0x78
    c4fe:	4b40      	ldr	r3, [pc, #256]	; (c600 <lv_draw_rect+0xd74>)
    c500:	4798      	blx	r3
    if(has_com) {
    c502:	2800      	cmp	r0, #0
    c504:	f000 8082 	beq.w	c60c <lv_draw_rect+0xd80>
        if(simple_mode) ca.y1 = LV_MATH_MAX(ca.y1, coords->y2);
    c508:	9b07      	ldr	r3, [sp, #28]
    c50a:	b14b      	cbz	r3, c520 <lv_draw_rect+0xc94>
    c50c:	9b06      	ldr	r3, [sp, #24]
    c50e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    c512:	f9bd 207a 	ldrsh.w	r2, [sp, #122]	; 0x7a
    c516:	4293      	cmp	r3, r2
    c518:	bfb8      	it	lt
    c51a:	4613      	movlt	r3, r2
    c51c:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    c520:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
    c524:	3301      	adds	r3, #1
    c526:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
    c52a:	1a9b      	subs	r3, r3, r2
    c52c:	b21b      	sxth	r3, r3
    c52e:	9308      	str	r3, [sp, #32]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    c530:	f9bd 307e 	ldrsh.w	r3, [sp, #126]	; 0x7e
    c534:	1c5d      	adds	r5, r3, #1
    c536:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
    c53a:	1aad      	subs	r5, r5, r2
    c53c:	b22d      	sxth	r5, r5
        sh_buf_tmp = sh_buf + corner_size - 1;
    c53e:	46c8      	mov	r8, r9
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
    c540:	f9bd 4076 	ldrsh.w	r4, [sp, #118]	; 0x76
    c544:	1ae4      	subs	r4, r4, r3
        sh_buf_tmp = sh_buf + corner_size - 1;
    c546:	f109 33ff 	add.w	r3, r9, #4294967295
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
    c54a:	fb09 3404 	mla	r4, r9, r4, r3
    c54e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c550:	441c      	add	r4, r3
    c552:	f10d 0277 	add.w	r2, sp, #119	; 0x77
    uint8_t * d8 = (uint8_t *)dst;
    c556:	ab22      	add	r3, sp, #136	; 0x88
    while(len) {
    c558:	a824      	add	r0, sp, #144	; 0x90
        *d8 = *s8;
    c55a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    c55e:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    c562:	4283      	cmp	r3, r0
    c564:	d1f9      	bne.n	c55a <lv_draw_rect+0xcce>
        fa.y1 = fa.y2;
    c566:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    c56a:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
        for(y = 0; y < h; y++) {
    c56e:	46a9      	mov	r9, r5
    c570:	2d00      	cmp	r5, #0
    c572:	dd4b      	ble.n	c60c <lv_draw_rect+0xd80>
    c574:	2500      	movs	r5, #0
            _lv_memset(mask_buf, opa_tmp, w);
    c576:	4f23      	ldr	r7, [pc, #140]	; (c604 <lv_draw_rect+0xd78>)
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    c578:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    c57c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    c580:	e02a      	b.n	c5d8 <lv_draw_rect+0xd4c>
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
    c582:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    c586:	d12a      	bne.n	c5de <lv_draw_rect+0xd52>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
    c588:	4659      	mov	r1, fp
    c58a:	e02c      	b.n	c5e6 <lv_draw_rect+0xd5a>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    c58c:	9b08      	ldr	r3, [sp, #32]
    c58e:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
    c592:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
    c596:	9805      	ldr	r0, [sp, #20]
    c598:	4e17      	ldr	r6, [pc, #92]	; (c5f8 <lv_draw_rect+0xd6c>)
    c59a:	47b0      	blx	r6
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    c59c:	2801      	cmp	r0, #1
    c59e:	bf08      	it	eq
    c5a0:	2002      	moveq	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    c5a2:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    c5a6:	9302      	str	r3, [sp, #8]
    c5a8:	23ff      	movs	r3, #255	; 0xff
    c5aa:	9301      	str	r3, [sp, #4]
    c5ac:	9000      	str	r0, [sp, #0]
    c5ae:	9b05      	ldr	r3, [sp, #20]
    c5b0:	f8ba 201e 	ldrh.w	r2, [sl, #30]
    c5b4:	a922      	add	r1, sp, #136	; 0x88
    c5b6:	9804      	ldr	r0, [sp, #16]
    c5b8:	4e10      	ldr	r6, [pc, #64]	; (c5fc <lv_draw_rect+0xd70>)
    c5ba:	47b0      	blx	r6
            fa.y1--;
    c5bc:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    c5c0:	3b01      	subs	r3, #1
    c5c2:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
            fa.y2--;
    c5c6:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    c5ca:	3b01      	subs	r3, #1
    c5cc:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            sh_buf_tmp += corner_size;
    c5d0:	4444      	add	r4, r8
        for(y = 0; y < h; y++) {
    c5d2:	3501      	adds	r5, #1
    c5d4:	454d      	cmp	r5, r9
    c5d6:	d017      	beq.n	c608 <lv_draw_rect+0xd7c>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
    c5d8:	7823      	ldrb	r3, [r4, #0]
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
    c5da:	2bff      	cmp	r3, #255	; 0xff
    c5dc:	d0d1      	beq.n	c582 <lv_draw_rect+0xcf6>
    c5de:	fb03 f30b 	mul.w	r3, r3, fp
    c5e2:	f3c3 2107 	ubfx	r1, r3, #8, #8
            _lv_memset(mask_buf, opa_tmp, w);
    c5e6:	9a08      	ldr	r2, [sp, #32]
    c5e8:	9805      	ldr	r0, [sp, #20]
    c5ea:	47b8      	blx	r7
            if(simple_mode) {
    c5ec:	9b07      	ldr	r3, [sp, #28]
    c5ee:	2b00      	cmp	r3, #0
    c5f0:	d0cc      	beq.n	c58c <lv_draw_rect+0xd00>
                mask_res = LV_DRAW_MASK_RES_CHANGED;
    c5f2:	2002      	movs	r0, #2
    c5f4:	e7d5      	b.n	c5a2 <lv_draw_rect+0xd16>
    c5f6:	bf00      	nop
    c5f8:	0000b379 	.word	0x0000b379
    c5fc:	00006e05 	.word	0x00006e05
    c600:	00010719 	.word	0x00010719
    c604:	00011b61 	.word	0x00011b61
    c608:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    a.x1 = sh_area.x1 + corner_size;
    c60c:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
    c610:	445b      	add	r3, fp
    c612:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    a.x2 = sh_area.x2 - corner_size;
    c616:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
    c61a:	eba3 030b 	sub.w	r3, r3, fp
    c61e:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    a.y1 = sh_area.y1 + corner_size;
    c622:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
    c626:	445b      	add	r3, fp
    c628:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    a.y2 = sh_area.y2 - corner_size;
    c62c:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
    c630:	eba3 0b0b 	sub.w	fp, r3, fp
    c634:	f8ad b076 	strh.w	fp, [sp, #118]	; 0x76
    has_com = _lv_area_intersect(&ca, &a, clip);
    c638:	9a04      	ldr	r2, [sp, #16]
    c63a:	a91c      	add	r1, sp, #112	; 0x70
    c63c:	a81e      	add	r0, sp, #120	; 0x78
    c63e:	4ba2      	ldr	r3, [pc, #648]	; (c8c8 <lv_draw_rect+0x103c>)
    c640:	4798      	blx	r3
    if(has_com && simple_mode == false) {
    c642:	2800      	cmp	r0, #0
    c644:	d050      	beq.n	c6e8 <lv_draw_rect+0xe5c>
    c646:	9b07      	ldr	r3, [sp, #28]
    c648:	2b00      	cmp	r3, #0
    c64a:	d14d      	bne.n	c6e8 <lv_draw_rect+0xe5c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    c64c:	f8bd 607c 	ldrh.w	r6, [sp, #124]	; 0x7c
    c650:	3601      	adds	r6, #1
    c652:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
    c656:	1af6      	subs	r6, r6, r3
    c658:	b236      	sxth	r6, r6
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    c65a:	f8bd 407e 	ldrh.w	r4, [sp, #126]	; 0x7e
    c65e:	3401      	adds	r4, #1
    c660:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
    c664:	1ae4      	subs	r4, r4, r3
    c666:	b224      	sxth	r4, r4
    c668:	f10d 0277 	add.w	r2, sp, #119	; 0x77
    uint8_t * d8 = (uint8_t *)dst;
    c66c:	ab22      	add	r3, sp, #136	; 0x88
    while(len) {
    c66e:	a824      	add	r0, sp, #144	; 0x90
        *d8 = *s8;
    c670:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    c674:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    c678:	4283      	cmp	r3, r0
    c67a:	d1f9      	bne.n	c670 <lv_draw_rect+0xde4>
        fa.y2 = fa.y1;
    c67c:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    c680:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
        for(y = 0; y < h; y++) {
    c684:	46a3      	mov	fp, r4
    c686:	2c00      	cmp	r4, #0
    c688:	dd2e      	ble.n	c6e8 <lv_draw_rect+0xe5c>
    c68a:	2500      	movs	r5, #0
            _lv_memset(mask_buf, dsc->shadow_opa, w);
    c68c:	f8df 9254 	ldr.w	r9, [pc, #596]	; c8e4 <lv_draw_rect+0x1058>
            mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    c690:	f8df 8254 	ldr.w	r8, [pc, #596]	; c8e8 <lv_draw_rect+0x105c>
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    c694:	4f8d      	ldr	r7, [pc, #564]	; (c8cc <lv_draw_rect+0x1040>)
            _lv_memset(mask_buf, dsc->shadow_opa, w);
    c696:	4632      	mov	r2, r6
    c698:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
    c69c:	9805      	ldr	r0, [sp, #20]
    c69e:	47c8      	blx	r9
            mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    c6a0:	ac30      	add	r4, sp, #192	; 0xc0
    c6a2:	4633      	mov	r3, r6
    c6a4:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
    c6a8:	f934 1d38 	ldrsh.w	r1, [r4, #-56]!
    c6ac:	9805      	ldr	r0, [sp, #20]
    c6ae:	47c0      	blx	r8
            if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    c6b0:	2801      	cmp	r0, #1
    c6b2:	bf08      	it	eq
    c6b4:	2002      	moveq	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    c6b6:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    c6ba:	9302      	str	r3, [sp, #8]
    c6bc:	23ff      	movs	r3, #255	; 0xff
    c6be:	9301      	str	r3, [sp, #4]
    c6c0:	9000      	str	r0, [sp, #0]
    c6c2:	9b05      	ldr	r3, [sp, #20]
    c6c4:	f8ba 201e 	ldrh.w	r2, [sl, #30]
    c6c8:	4621      	mov	r1, r4
    c6ca:	9804      	ldr	r0, [sp, #16]
    c6cc:	47b8      	blx	r7
            fa.y1++;
    c6ce:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    c6d2:	3301      	adds	r3, #1
    c6d4:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
            fa.y2++;
    c6d8:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    c6dc:	3301      	adds	r3, #1
    c6de:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
        for(y = 0; y < h; y++) {
    c6e2:	3501      	adds	r5, #1
    c6e4:	455d      	cmp	r5, fp
    c6e6:	d1d6      	bne.n	c696 <lv_draw_rect+0xe0a>
    lv_draw_mask_remove_id(mask_rout_id);
    c6e8:	980e      	ldr	r0, [sp, #56]	; 0x38
    c6ea:	4b79      	ldr	r3, [pc, #484]	; (c8d0 <lv_draw_rect+0x1044>)
    c6ec:	4798      	blx	r3
    _lv_mem_buf_release(mask_buf);
    c6ee:	9805      	ldr	r0, [sp, #20]
    c6f0:	4c78      	ldr	r4, [pc, #480]	; (c8d4 <lv_draw_rect+0x1048>)
    c6f2:	47a0      	blx	r4
    _lv_mem_buf_release(sh_buf);
    c6f4:	980a      	ldr	r0, [sp, #40]	; 0x28
    c6f6:	47a0      	blx	r4
    if(dsc->bg_opa <= LV_OPA_MIN) return;
    c6f8:	f89a 700c 	ldrb.w	r7, [sl, #12]
    c6fc:	2f05      	cmp	r7, #5
    c6fe:	d942      	bls.n	c786 <lv_draw_rect+0xefa>
    c700:	9a06      	ldr	r2, [sp, #24]
    c702:	1e53      	subs	r3, r2, #1
    c704:	1dd0      	adds	r0, r2, #7
    c706:	aa1a      	add	r2, sp, #104	; 0x68
        *d8 = *s8;
    c708:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    c70c:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    c710:	4298      	cmp	r0, r3
    c712:	d1f9      	bne.n	c708 <lv_draw_rect+0xe7c>
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
    c714:	f9ba 3010 	ldrsh.w	r3, [sl, #16]
    c718:	2b01      	cmp	r3, #1
    c71a:	dd24      	ble.n	c766 <lv_draw_rect+0xeda>
    c71c:	f89a 3014 	ldrb.w	r3, [sl, #20]
    c720:	2bf9      	cmp	r3, #249	; 0xf9
    c722:	d920      	bls.n	c766 <lv_draw_rect+0xeda>
    c724:	f9ba 3000 	ldrsh.w	r3, [sl]
    c728:	b1eb      	cbz	r3, c766 <lv_draw_rect+0xeda>
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
    c72a:	f8ba 3012 	ldrh.w	r3, [sl, #18]
    c72e:	f3c3 0280 	ubfx	r2, r3, #2, #1
    c732:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
    c736:	440a      	add	r2, r1
    c738:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
    c73c:	f3c3 0240 	ubfx	r2, r3, #1, #1
    c740:	f8bd 106a 	ldrh.w	r1, [sp, #106]	; 0x6a
    c744:	440a      	add	r2, r1
    c746:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
        coords_bg.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
    c74a:	f3c3 01c0 	ubfx	r1, r3, #3, #1
    c74e:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
    c752:	1a52      	subs	r2, r2, r1
    c754:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
        coords_bg.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
    c758:	f003 0301 	and.w	r3, r3, #1
    c75c:	f8bd 206e 	ldrh.w	r2, [sp, #110]	; 0x6e
    c760:	1ad3      	subs	r3, r2, r3
    c762:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
    c766:	2ffb      	cmp	r7, #251	; 0xfb
    c768:	bf28      	it	cs
    c76a:	27ff      	movcs	r7, #255	; 0xff
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    c76c:	4b5a      	ldr	r3, [pc, #360]	; (c8d8 <lv_draw_rect+0x104c>)
    c76e:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    c770:	4b5a      	ldr	r3, [pc, #360]	; (c8dc <lv_draw_rect+0x1050>)
    c772:	4798      	blx	r3
    c774:	4680      	mov	r8, r0
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
    c776:	9a04      	ldr	r2, [sp, #16]
    c778:	a91a      	add	r1, sp, #104	; 0x68
    c77a:	a81c      	add	r0, sp, #112	; 0x70
    c77c:	4b52      	ldr	r3, [pc, #328]	; (c8c8 <lv_draw_rect+0x103c>)
    c77e:	4798      	blx	r3
    if(is_common == false) return;
    c780:	2800      	cmp	r0, #0
    c782:	f040 80b3 	bne.w	c8ec <lv_draw_rect+0x1060>
    _lv_mem_buf_release(mask_buf);
}

static void draw_pattern(const lv_area_t * coords, const lv_area_t * clip, lv_draw_rect_dsc_t * dsc)
{
    if(dsc->pattern_image == NULL) return;
    c786:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
    c78a:	b120      	cbz	r0, c796 <lv_draw_rect+0xf0a>
    if(dsc->pattern_opa <= LV_OPA_MIN) return;
    c78c:	f89a 3036 	ldrb.w	r3, [sl, #54]	; 0x36
    c790:	2b05      	cmp	r3, #5
    c792:	f200 83eb 	bhi.w	cf6c <lv_draw_rect+0x16e0>
    if(dsc->border_opa <= LV_OPA_MIN) return;
    c796:	f89a 4014 	ldrb.w	r4, [sl, #20]
    c79a:	2c05      	cmp	r4, #5
    c79c:	d915      	bls.n	c7ca <lv_draw_rect+0xf3e>
    if(dsc->border_width == 0) return;
    c79e:	f9ba 3010 	ldrsh.w	r3, [sl, #16]
    c7a2:	b193      	cbz	r3, c7ca <lv_draw_rect+0xf3e>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
    c7a4:	f9ba 3012 	ldrsh.w	r3, [sl, #18]
    c7a8:	b17b      	cbz	r3, c7ca <lv_draw_rect+0xf3e>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
    c7aa:	2cfb      	cmp	r4, #251	; 0xfb
    c7ac:	bf28      	it	cs
    c7ae:	24ff      	movcs	r4, #255	; 0xff
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    c7b0:	4b49      	ldr	r3, [pc, #292]	; (c8d8 <lv_draw_rect+0x104c>)
    c7b2:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    c7b4:	4b49      	ldr	r3, [pc, #292]	; (c8dc <lv_draw_rect+0x1050>)
    c7b6:	4798      	blx	r3
    c7b8:	4605      	mov	r5, r0
    is_common = _lv_area_intersect(&draw_area, coords, clip);
    c7ba:	9a04      	ldr	r2, [sp, #16]
    c7bc:	9906      	ldr	r1, [sp, #24]
    c7be:	a818      	add	r0, sp, #96	; 0x60
    c7c0:	4b41      	ldr	r3, [pc, #260]	; (c8c8 <lv_draw_rect+0x103c>)
    c7c2:	4798      	blx	r3
    if(is_common == false) return;
    c7c4:	2800      	cmp	r0, #0
    c7c6:	f040 8529 	bne.w	d21c <lv_draw_rect+0x1990>
}


static void draw_value(const lv_area_t * coords, const lv_area_t * clip, lv_draw_rect_dsc_t * dsc)
{
    if(dsc->value_str == NULL) return;
    c7ca:	f8da 103c 	ldr.w	r1, [sl, #60]	; 0x3c
    c7ce:	b121      	cbz	r1, c7da <lv_draw_rect+0xf4e>
    if(dsc->value_opa <= LV_OPA_MIN) return;
    c7d0:	f89a 3044 	ldrb.w	r3, [sl, #68]	; 0x44
    c7d4:	2b05      	cmp	r3, #5
    c7d6:	f201 8035 	bhi.w	d844 <lv_draw_rect+0x1fb8>
    if(dsc->outline_opa <= LV_OPA_MIN) return;
    c7da:	f89a b01c 	ldrb.w	fp, [sl, #28]
    c7de:	f1bb 0f05 	cmp.w	fp, #5
    c7e2:	d96d      	bls.n	c8c0 <lv_draw_rect+0x1034>
    if(dsc->outline_width == 0) return;
    c7e4:	f9ba 3018 	ldrsh.w	r3, [sl, #24]
    c7e8:	2b00      	cmp	r3, #0
    c7ea:	d069      	beq.n	c8c0 <lv_draw_rect+0x1034>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
    c7ec:	f1bb 0ffb 	cmp.w	fp, #251	; 0xfb
    c7f0:	bf28      	it	cs
    c7f2:	f04f 0bff 	movcs.w	fp, #255	; 0xff
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
    c7f6:	4b3a      	ldr	r3, [pc, #232]	; (c8e0 <lv_draw_rect+0x1054>)
    c7f8:	4798      	blx	r3
    c7fa:	9009      	str	r0, [sp, #36]	; 0x24
    c7fc:	9a06      	ldr	r2, [sp, #24]
    c7fe:	1e53      	subs	r3, r2, #1
    c800:	1dd0      	adds	r0, r2, #7
    uint8_t * d8 = (uint8_t *)dst;
    c802:	aa16      	add	r2, sp, #88	; 0x58
        *d8 = *s8;
    c804:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    c808:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    c80c:	4283      	cmp	r3, r0
    c80e:	d1f9      	bne.n	c804 <lv_draw_rect+0xf78>
    area_inner.x1 -= dsc->outline_pad;
    c810:	f8ba 501a 	ldrh.w	r5, [sl, #26]
    c814:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
    c818:	1b5b      	subs	r3, r3, r5
    c81a:	b29b      	uxth	r3, r3
    c81c:	9306      	str	r3, [sp, #24]
    c81e:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    area_inner.y1 -= dsc->outline_pad;
    c822:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
    c826:	1b5b      	subs	r3, r3, r5
    c828:	b29b      	uxth	r3, r3
    c82a:	9307      	str	r3, [sp, #28]
    c82c:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    area_inner.x2 += dsc->outline_pad;
    c830:	f8bd 605c 	ldrh.w	r6, [sp, #92]	; 0x5c
    c834:	442e      	add	r6, r5
    c836:	b2b6      	uxth	r6, r6
    c838:	f8ad 605c 	strh.w	r6, [sp, #92]	; 0x5c
    area_inner.y2 += dsc->outline_pad;
    c83c:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
    c840:	441d      	add	r5, r3
    c842:	b2ad      	uxth	r5, r5
    c844:	f8ad 505e 	strh.w	r5, [sp, #94]	; 0x5e
    int32_t rin = dsc->radius;
    c848:	f9ba 3000 	ldrsh.w	r3, [sl]
    c84c:	9308      	str	r3, [sp, #32]
    int32_t rout = rin + dsc->outline_width;
    c84e:	f9ba 3018 	ldrsh.w	r3, [sl, #24]
    c852:	9305      	str	r3, [sp, #20]
    c854:	f10d 0257 	add.w	r2, sp, #87	; 0x57
    uint8_t * d8 = (uint8_t *)dst;
    c858:	ab18      	add	r3, sp, #96	; 0x60
    while(len) {
    c85a:	a81a      	add	r0, sp, #104	; 0x68
        *d8 = *s8;
    c85c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    c860:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    c864:	4283      	cmp	r3, r0
    c866:	d1f9      	bne.n	c85c <lv_draw_rect+0xfd0>
    area_outer.x1 -= dsc->outline_width;
    c868:	f8bd 4014 	ldrh.w	r4, [sp, #20]
    c86c:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
    c870:	eba9 0904 	sub.w	r9, r9, r4
    c874:	fa1f f389 	uxth.w	r3, r9
    c878:	930a      	str	r3, [sp, #40]	; 0x28
    c87a:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    area_outer.x2 += dsc->outline_width;
    c87e:	f8bd 7064 	ldrh.w	r7, [sp, #100]	; 0x64
    c882:	4427      	add	r7, r4
    c884:	b2bf      	uxth	r7, r7
    c886:	f8ad 7064 	strh.w	r7, [sp, #100]	; 0x64
    area_outer.y1 -= dsc->outline_width;
    c88a:	f8bd 8062 	ldrh.w	r8, [sp, #98]	; 0x62
    c88e:	eba8 0804 	sub.w	r8, r8, r4
    c892:	fa1f f888 	uxth.w	r8, r8
    c896:	f8ad 8062 	strh.w	r8, [sp, #98]	; 0x62
    area_outer.y2 += dsc->outline_width;
    c89a:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
    c89e:	441c      	add	r4, r3
    c8a0:	b2a4      	uxth	r4, r4
    c8a2:	f8ad 4066 	strh.w	r4, [sp, #102]	; 0x66
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    c8a6:	4b0c      	ldr	r3, [pc, #48]	; (c8d8 <lv_draw_rect+0x104c>)
    c8a8:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    c8aa:	4b0c      	ldr	r3, [pc, #48]	; (c8dc <lv_draw_rect+0x1050>)
    c8ac:	4798      	blx	r3
    c8ae:	4681      	mov	r9, r0
    is_common = _lv_area_intersect(&draw_area, &area_outer, clip);
    c8b0:	9a04      	ldr	r2, [sp, #16]
    c8b2:	a918      	add	r1, sp, #96	; 0x60
    c8b4:	a81a      	add	r0, sp, #104	; 0x68
    c8b6:	4b04      	ldr	r3, [pc, #16]	; (c8c8 <lv_draw_rect+0x103c>)
    c8b8:	4798      	blx	r3
    if(is_common == false) return;
    c8ba:	2800      	cmp	r0, #0
    c8bc:	f041 8026 	bne.w	d90c <lv_draw_rect+0x2080>
}
    c8c0:	b031      	add	sp, #196	; 0xc4
    c8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c8c6:	bf00      	nop
    c8c8:	00010719 	.word	0x00010719
    c8cc:	00006e05 	.word	0x00006e05
    c8d0:	0000b3c9 	.word	0x0000b3c9
    c8d4:	000116e5 	.word	0x000116e5
    c8d8:	00005789 	.word	0x00005789
    c8dc:	0001025d 	.word	0x0001025d
    c8e0:	0000b421 	.word	0x0000b421
    c8e4:	00011b61 	.word	0x00011b61
    c8e8:	0000b379 	.word	0x0000b379
    draw_area.x1 -= disp_area->x1;
    c8ec:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    c8f0:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
    c8f4:	1a5b      	subs	r3, r3, r1
    c8f6:	b29a      	uxth	r2, r3
    c8f8:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
    draw_area.y1 -= disp_area->y1;
    c8fc:	f8b8 0012 	ldrh.w	r0, [r8, #18]
    c900:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    c904:	1a1b      	subs	r3, r3, r0
    c906:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    draw_area.x2 -= disp_area->x1;
    c90a:	f8bd 3074 	ldrh.w	r3, [sp, #116]	; 0x74
    c90e:	1a5b      	subs	r3, r3, r1
    c910:	b29b      	uxth	r3, r3
    c912:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    draw_area.y2 -= disp_area->y1;
    c916:	f8bd 1076 	ldrh.w	r1, [sp, #118]	; 0x76
    c91a:	1a09      	subs	r1, r1, r0
    c91c:	f8ad 1076 	strh.w	r1, [sp, #118]	; 0x76
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    c920:	3301      	adds	r3, #1
    c922:	1a9b      	subs	r3, r3, r2
    c924:	b21b      	sxth	r3, r3
    c926:	9309      	str	r3, [sp, #36]	; 0x24
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
    c928:	930a      	str	r3, [sp, #40]	; 0x28
    c92a:	4618      	mov	r0, r3
    c92c:	4b93      	ldr	r3, [pc, #588]	; (cb7c <lv_draw_rect+0x12f0>)
    c92e:	4798      	blx	r3
    c930:	9005      	str	r0, [sp, #20]
    uint16_t other_mask_cnt = lv_draw_mask_get_cnt();
    c932:	4b93      	ldr	r3, [pc, #588]	; (cb80 <lv_draw_rect+0x12f4>)
    c934:	4798      	blx	r3
    c936:	b283      	uxth	r3, r0
    c938:	930b      	str	r3, [sp, #44]	; 0x2c
    if(other_mask_cnt) simple_mode = false;
    c93a:	bb43      	cbnz	r3, c98e <lv_draw_rect+0x1102>
    else if(dsc->bg_grad_dir == LV_GRAD_DIR_HOR) simple_mode = false;
    c93c:	f89a 3006 	ldrb.w	r3, [sl, #6]
    c940:	3b02      	subs	r3, #2
    c942:	bf18      	it	ne
    c944:	2301      	movne	r3, #1
    c946:	9307      	str	r3, [sp, #28]
    c948:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
    c94c:	3501      	adds	r5, #1
    c94e:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    c952:	1aed      	subs	r5, r5, r3
    c954:	b22d      	sxth	r5, r5
    int32_t coords_w = lv_area_get_width(&coords_bg);
    c956:	462c      	mov	r4, r5
    int32_t rout = dsc->radius;
    c958:	f9ba 2000 	ldrsh.w	r2, [sl]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    c95c:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
    c960:	3301      	adds	r3, #1
    c962:	f8bd 606a 	ldrh.w	r6, [sp, #106]	; 0x6a
    c966:	1b9b      	subs	r3, r3, r6
    int32_t coords_h = lv_area_get_height(&coords_bg);
    c968:	b21e      	sxth	r6, r3
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
    c96a:	4633      	mov	r3, r6
    c96c:	42ae      	cmp	r6, r5
    c96e:	bfa8      	it	ge
    c970:	462b      	movge	r3, r5
    if(rout > short_side >> 1) rout = short_side >> 1;
    c972:	105e      	asrs	r6, r3, #1
    c974:	4296      	cmp	r6, r2
    c976:	bfa8      	it	ge
    c978:	4616      	movge	r6, r2
    if(simple_mode && rout == 0 && (dsc->bg_grad_dir == LV_GRAD_DIR_NONE)) {
    c97a:	9b07      	ldr	r3, [sp, #28]
    c97c:	b1db      	cbz	r3, c9b6 <lv_draw_rect+0x112a>
    c97e:	b9d6      	cbnz	r6, c9b6 <lv_draw_rect+0x112a>
    c980:	f89a 3006 	ldrb.w	r3, [sl, #6]
    c984:	b133      	cbz	r3, c994 <lv_draw_rect+0x1108>
    int16_t mask_rout_id = LV_MASK_ID_INV;
    c986:	f04f 33ff 	mov.w	r3, #4294967295
    c98a:	930e      	str	r3, [sp, #56]	; 0x38
    c98c:	e021      	b.n	c9d2 <lv_draw_rect+0x1146>
    if(other_mask_cnt) simple_mode = false;
    c98e:	2300      	movs	r3, #0
    c990:	9307      	str	r3, [sp, #28]
    c992:	e7d9      	b.n	c948 <lv_draw_rect+0x10bc>
        _lv_blend_fill(clip, &coords_bg,
    c994:	f89a 300d 	ldrb.w	r3, [sl, #13]
    c998:	9302      	str	r3, [sp, #8]
    c99a:	9701      	str	r7, [sp, #4]
    c99c:	2301      	movs	r3, #1
    c99e:	9300      	str	r3, [sp, #0]
    c9a0:	2300      	movs	r3, #0
    c9a2:	f8ba 2002 	ldrh.w	r2, [sl, #2]
    c9a6:	a91a      	add	r1, sp, #104	; 0x68
    c9a8:	9804      	ldr	r0, [sp, #16]
    c9aa:	4c76      	ldr	r4, [pc, #472]	; (cb84 <lv_draw_rect+0x12f8>)
    c9ac:	47a0      	blx	r4
    int16_t mask_rout_id = LV_MASK_ID_INV;
    c9ae:	f04f 33ff 	mov.w	r3, #4294967295
    c9b2:	930e      	str	r3, [sp, #56]	; 0x38
    c9b4:	e276      	b.n	cea4 <lv_draw_rect+0x1618>
        if(rout > 0) {
    c9b6:	2e00      	cmp	r6, #0
    c9b8:	dd32      	ble.n	ca20 <lv_draw_rect+0x1194>
            lv_draw_mask_radius_init(&mask_rout_param, &coords_bg, rout, false);
    c9ba:	2300      	movs	r3, #0
    c9bc:	4632      	mov	r2, r6
    c9be:	a91a      	add	r1, sp, #104	; 0x68
    c9c0:	a829      	add	r0, sp, #164	; 0xa4
    c9c2:	f8df 91d0 	ldr.w	r9, [pc, #464]	; cb94 <lv_draw_rect+0x1308>
    c9c6:	47c8      	blx	r9
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
    c9c8:	2100      	movs	r1, #0
    c9ca:	a829      	add	r0, sp, #164	; 0xa4
    c9cc:	4b6e      	ldr	r3, [pc, #440]	; (cb88 <lv_draw_rect+0x12fc>)
    c9ce:	4798      	blx	r3
    c9d0:	900e      	str	r0, [sp, #56]	; 0x38
        lv_color_t grad_color = dsc->bg_color;
    c9d2:	f8ba b002 	ldrh.w	fp, [sl, #2]
        if(dsc->bg_grad_dir == LV_GRAD_DIR_HOR && dsc->bg_color.full != dsc->bg_grad_color.full) {
    c9d6:	f89a 3006 	ldrb.w	r3, [sl, #6]
    c9da:	2b02      	cmp	r3, #2
    c9dc:	d024      	beq.n	ca28 <lv_draw_rect+0x119c>
        lv_color_t * grad_map = NULL;
    c9de:	2300      	movs	r3, #0
    c9e0:	930d      	str	r3, [sp, #52]	; 0x34
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    c9e2:	f9bd 206c 	ldrsh.w	r2, [sp, #108]	; 0x6c
    c9e6:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
    c9ea:	1c53      	adds	r3, r2, #1
    c9ec:	1a5b      	subs	r3, r3, r1
        if(lv_area_get_width(&coords_bg) - 2 * rout > SPLIT_LIMIT) split = true;
    c9ee:	b21b      	sxth	r3, r3
    c9f0:	eba3 0946 	sub.w	r9, r3, r6, lsl #1
        fill_area.x1 = coords_bg.x1;
    c9f4:	f8ad 1078 	strh.w	r1, [sp, #120]	; 0x78
        fill_area.x2 = coords_bg.x2;
    c9f8:	f8ad 207c 	strh.w	r2, [sp, #124]	; 0x7c
        fill_area.y1 = disp_area->y1 + draw_area.y1;
    c9fc:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
    ca00:	f8b8 3012 	ldrh.w	r3, [r8, #18]
    ca04:	4413      	add	r3, r2
    ca06:	b21b      	sxth	r3, r3
    ca08:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
        fill_area.y2 = fill_area.y1;
    ca0c:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    ca10:	4615      	mov	r5, r2
    ca12:	f9bd 3076 	ldrsh.w	r3, [sp, #118]	; 0x76
    ca16:	429a      	cmp	r2, r3
    ca18:	f300 8237 	bgt.w	ce8a <lv_draw_rect+0x15fe>
                _lv_blend_fill(clip, &fill_area2,
    ca1c:	9708      	str	r7, [sp, #32]
    ca1e:	e0fa      	b.n	cc16 <lv_draw_rect+0x138a>
    int16_t mask_rout_id = LV_MASK_ID_INV;
    ca20:	f04f 33ff 	mov.w	r3, #4294967295
    ca24:	930e      	str	r3, [sp, #56]	; 0x38
    ca26:	e7d4      	b.n	c9d2 <lv_draw_rect+0x1146>
        if(dsc->bg_grad_dir == LV_GRAD_DIR_HOR && dsc->bg_color.full != dsc->bg_grad_color.full) {
    ca28:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    ca2c:	459b      	cmp	fp, r3
    ca2e:	f000 8089 	beq.w	cb44 <lv_draw_rect+0x12b8>
            grad_map = _lv_mem_buf_get(coords_w * sizeof(lv_color_t));
    ca32:	0068      	lsls	r0, r5, #1
    ca34:	4b51      	ldr	r3, [pc, #324]	; (cb7c <lv_draw_rect+0x12f0>)
    ca36:	4798      	blx	r3
    ca38:	900d      	str	r0, [sp, #52]	; 0x34
            for(i = 0; i < coords_w; i++) {
    ca3a:	2d00      	cmp	r5, #0
    ca3c:	ddd1      	ble.n	c9e2 <lv_draw_rect+0x1156>
    ca3e:	f04f 0900 	mov.w	r9, #0
    ca42:	9608      	str	r6, [sp, #32]
    ca44:	4606      	mov	r6, r0
    ca46:	e01b      	b.n	ca80 <lv_draw_rect+0x11f4>
    if(i <= min) return dsc->bg_color;
    ca48:	f89a 3002 	ldrb.w	r3, [sl, #2]
    ca4c:	f003 031f 	and.w	r3, r3, #31
    ca50:	f8ba 1002 	ldrh.w	r1, [sl, #2]
    ca54:	f3c1 1145 	ubfx	r1, r1, #5, #6
    ca58:	f89a 2003 	ldrb.w	r2, [sl, #3]
    ca5c:	08d2      	lsrs	r2, r2, #3
                grad_map[i] = grad_get(dsc, coords_w, i);
    ca5e:	7828      	ldrb	r0, [r5, #0]
    ca60:	f363 0004 	bfi	r0, r3, #0, #5
    ca64:	7028      	strb	r0, [r5, #0]
    ca66:	882b      	ldrh	r3, [r5, #0]
    ca68:	f361 134a 	bfi	r3, r1, #5, #6
    ca6c:	802b      	strh	r3, [r5, #0]
    ca6e:	0a1b      	lsrs	r3, r3, #8
    ca70:	f362 03c7 	bfi	r3, r2, #3, #5
    ca74:	706b      	strb	r3, [r5, #1]
            for(i = 0; i < coords_w; i++) {
    ca76:	f109 0901 	add.w	r9, r9, #1
    ca7a:	3602      	adds	r6, #2
    ca7c:	454c      	cmp	r4, r9
    ca7e:	d05f      	beq.n	cb40 <lv_draw_rect+0x12b4>
                grad_map[i] = grad_get(dsc, coords_w, i);
    ca80:	4635      	mov	r5, r6
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
    ca82:	f9ba 0008 	ldrsh.w	r0, [sl, #8]
    ca86:	fb00 f304 	mul.w	r3, r0, r4
    ca8a:	121b      	asrs	r3, r3, #8
    if(i <= min) return dsc->bg_color;
    ca8c:	fa0f f189 	sxth.w	r1, r9
    ca90:	428b      	cmp	r3, r1
    ca92:	dad9      	bge.n	ca48 <lv_draw_rect+0x11bc>
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
    ca94:	f9ba 200a 	ldrsh.w	r2, [sl, #10]
    ca98:	fb02 fe04 	mul.w	lr, r2, r4
    if(i >= max) return dsc->bg_grad_color;
    ca9c:	ebb1 2f2e 	cmp.w	r1, lr, asr #8
    caa0:	da42      	bge.n	cb28 <lv_draw_rect+0x129c>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
    caa2:	1a12      	subs	r2, r2, r0
    d = (s * d) >> 8;
    caa4:	fb04 f202 	mul.w	r2, r4, r2
    i -= min;
    caa8:	eba9 0303 	sub.w	r3, r9, r3
    lv_opa_t mix = (i * 255) / d;
    caac:	b21b      	sxth	r3, r3
    caae:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
    d = (s * d) >> 8;
    cab2:	1212      	asrs	r2, r2, #8
    lv_opa_t mix = (i * 255) / d;
    cab4:	fb93 f3f2 	sdiv	r3, r3, r2
    cab8:	b2db      	uxtb	r3, r3
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    caba:	f1c3 0eff 	rsb	lr, r3, #255	; 0xff
    cabe:	f89a 2005 	ldrb.w	r2, [sl, #5]
    cac2:	08d2      	lsrs	r2, r2, #3
    cac4:	f89a 1003 	ldrb.w	r1, [sl, #3]
    cac8:	08c9      	lsrs	r1, r1, #3
    caca:	fb0e f101 	mul.w	r1, lr, r1
    cace:	fb03 1202 	mla	r2, r3, r2, r1
    cad2:	eb02 2102 	add.w	r1, r2, r2, lsl #8
    cad6:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
    cada:	f3c2 52c4 	ubfx	r2, r2, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    cade:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    cae2:	f3c1 1145 	ubfx	r1, r1, #5, #6
    cae6:	f8ba 0002 	ldrh.w	r0, [sl, #2]
    caea:	f3c0 1045 	ubfx	r0, r0, #5, #6
    caee:	fb0e f000 	mul.w	r0, lr, r0
    caf2:	fb03 0101 	mla	r1, r3, r1, r0
    caf6:	eb01 2001 	add.w	r0, r1, r1, lsl #8
    cafa:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
    cafe:	f3c1 51c5 	ubfx	r1, r1, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    cb02:	f89a 0004 	ldrb.w	r0, [sl, #4]
    cb06:	f000 001f 	and.w	r0, r0, #31
    cb0a:	f89a c002 	ldrb.w	ip, [sl, #2]
    cb0e:	f00c 0c1f 	and.w	ip, ip, #31
    cb12:	fb0e fe0c 	mul.w	lr, lr, ip
    cb16:	fb03 e300 	mla	r3, r3, r0, lr
    cb1a:	eb03 2003 	add.w	r0, r3, r3, lsl #8
    cb1e:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
    cb22:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    cb26:	e79a      	b.n	ca5e <lv_draw_rect+0x11d2>
    if(i >= max) return dsc->bg_grad_color;
    cb28:	f89a 3004 	ldrb.w	r3, [sl, #4]
    cb2c:	f003 031f 	and.w	r3, r3, #31
    cb30:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    cb34:	f3c1 1145 	ubfx	r1, r1, #5, #6
    cb38:	f89a 2005 	ldrb.w	r2, [sl, #5]
    cb3c:	08d2      	lsrs	r2, r2, #3
    cb3e:	e78e      	b.n	ca5e <lv_draw_rect+0x11d2>
    cb40:	9e08      	ldr	r6, [sp, #32]
    cb42:	e74e      	b.n	c9e2 <lv_draw_rect+0x1156>
        lv_color_t * grad_map = NULL;
    cb44:	2300      	movs	r3, #0
    cb46:	930d      	str	r3, [sp, #52]	; 0x34
    cb48:	e74b      	b.n	c9e2 <lv_draw_rect+0x1156>
                    _lv_memset_ff(mask_buf, draw_area_w);
    cb4a:	990a      	ldr	r1, [sp, #40]	; 0x28
    cb4c:	9f05      	ldr	r7, [sp, #20]
    cb4e:	4638      	mov	r0, r7
    cb50:	4b0e      	ldr	r3, [pc, #56]	; (cb8c <lv_draw_rect+0x1300>)
    cb52:	4798      	blx	r3
                    mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    cb54:	f8b8 2012 	ldrh.w	r2, [r8, #18]
    cb58:	442a      	add	r2, r5
    cb5a:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    cb5e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
    cb62:	4419      	add	r1, r3
    cb64:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cb66:	b212      	sxth	r2, r2
    cb68:	b209      	sxth	r1, r1
    cb6a:	4638      	mov	r0, r7
    cb6c:	4f08      	ldr	r7, [pc, #32]	; (cb90 <lv_draw_rect+0x1304>)
    cb6e:	47b8      	blx	r7
    cb70:	4607      	mov	r7, r0
            if(dsc->bg_grad_dir == LV_GRAD_DIR_VER && dsc->bg_color.full != dsc->bg_grad_color.full) {
    cb72:	f89a 3006 	ldrb.w	r3, [sl, #6]
    cb76:	2b01      	cmp	r3, #1
    cb78:	d129      	bne.n	cbce <lv_draw_rect+0x1342>
    cb7a:	e07a      	b.n	cc72 <lv_draw_rect+0x13e6>
    cb7c:	00011a65 	.word	0x00011a65
    cb80:	0000b421 	.word	0x0000b421
    cb84:	00006e05 	.word	0x00006e05
    cb88:	0000b33d 	.word	0x0000b33d
    cb8c:	00011ccd 	.word	0x00011ccd
    cb90:	0000b379 	.word	0x0000b379
    cb94:	0000b589 	.word	0x0000b589
                _lv_memset_ff(mask_buf, draw_area_w);
    cb98:	990a      	ldr	r1, [sp, #40]	; 0x28
    cb9a:	9f05      	ldr	r7, [sp, #20]
    cb9c:	4638      	mov	r0, r7
    cb9e:	4bb6      	ldr	r3, [pc, #728]	; (ce78 <lv_draw_rect+0x15ec>)
    cba0:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    cba2:	f8b8 2012 	ldrh.w	r2, [r8, #18]
    cba6:	442a      	add	r2, r5
    cba8:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    cbac:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
    cbb0:	4419      	add	r1, r3
    cbb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cbb4:	b212      	sxth	r2, r2
    cbb6:	b209      	sxth	r1, r1
    cbb8:	4638      	mov	r0, r7
    cbba:	4fb0      	ldr	r7, [pc, #704]	; (ce7c <lv_draw_rect+0x15f0>)
    cbbc:	47b8      	blx	r7
    cbbe:	4607      	mov	r7, r0
            if(dsc->bg_grad_dir == LV_GRAD_DIR_VER && dsc->bg_color.full != dsc->bg_grad_color.full) {
    cbc0:	f89a 3006 	ldrb.w	r3, [sl, #6]
    cbc4:	2b01      	cmp	r3, #1
    cbc6:	d054      	beq.n	cc72 <lv_draw_rect+0x13e6>
            if(simple_mode && split &&
    cbc8:	9a07      	ldr	r2, [sp, #28]
    cbca:	2a00      	cmp	r2, #0
    cbcc:	d13a      	bne.n	cc44 <lv_draw_rect+0x13b8>
                if(dsc->bg_grad_dir == LV_GRAD_DIR_HOR) {
    cbce:	2b02      	cmp	r3, #2
    cbd0:	f000 8144 	beq.w	ce5c <lv_draw_rect+0x15d0>
                else if(other_mask_cnt != 0 || !split) {
    cbd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cbd6:	b913      	cbnz	r3, cbde <lv_draw_rect+0x1352>
    cbd8:	f1b9 0f32 	cmp.w	r9, #50	; 0x32
    cbdc:	dc0b      	bgt.n	cbf6 <lv_draw_rect+0x136a>
                    _lv_blend_fill(clip, &fill_area,
    cbde:	f89a 300d 	ldrb.w	r3, [sl, #13]
    cbe2:	9302      	str	r3, [sp, #8]
    cbe4:	9b08      	ldr	r3, [sp, #32]
    cbe6:	9301      	str	r3, [sp, #4]
    cbe8:	9700      	str	r7, [sp, #0]
    cbea:	9b05      	ldr	r3, [sp, #20]
    cbec:	465a      	mov	r2, fp
    cbee:	a91e      	add	r1, sp, #120	; 0x78
    cbf0:	9804      	ldr	r0, [sp, #16]
    cbf2:	4ca3      	ldr	r4, [pc, #652]	; (ce80 <lv_draw_rect+0x15f4>)
    cbf4:	47a0      	blx	r4
            fill_area.y1++;
    cbf6:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
    cbfa:	3301      	adds	r3, #1
    cbfc:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            fill_area.y2++;
    cc00:	f8bd 307e 	ldrh.w	r3, [sp, #126]	; 0x7e
    cc04:	3301      	adds	r3, #1
    cc06:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    cc0a:	3501      	adds	r5, #1
    cc0c:	f9bd 3076 	ldrsh.w	r3, [sp, #118]	; 0x76
    cc10:	429d      	cmp	r5, r3
    cc12:	f300 8139 	bgt.w	ce88 <lv_draw_rect+0x15fc>
            int32_t y = h + vdb->area.y1;
    cc16:	f9b8 4012 	ldrsh.w	r4, [r8, #18]
    cc1a:	442c      	add	r4, r5
            if(y > coords_bg.y1 + rout + 1 &&
    cc1c:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
    cc20:	4433      	add	r3, r6
    cc22:	3301      	adds	r3, #1
    cc24:	429c      	cmp	r4, r3
    cc26:	ddb7      	ble.n	cb98 <lv_draw_rect+0x130c>
               y < coords_bg.y2 - rout - 1) {
    cc28:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
    cc2c:	1b9b      	subs	r3, r3, r6
    cc2e:	3b01      	subs	r3, #1
            if(y > coords_bg.y1 + rout + 1 &&
    cc30:	429c      	cmp	r4, r3
    cc32:	dab1      	bge.n	cb98 <lv_draw_rect+0x130c>
                if(simple_mode == false) {
    cc34:	9b07      	ldr	r3, [sp, #28]
    cc36:	2b00      	cmp	r3, #0
    cc38:	d087      	beq.n	cb4a <lv_draw_rect+0x12be>
            if(dsc->bg_grad_dir == LV_GRAD_DIR_VER && dsc->bg_color.full != dsc->bg_grad_color.full) {
    cc3a:	f89a 3006 	ldrb.w	r3, [sl, #6]
    cc3e:	2b01      	cmp	r3, #1
    cc40:	d016      	beq.n	cc70 <lv_draw_rect+0x13e4>
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
    cc42:	2701      	movs	r7, #1
            if(simple_mode && split &&
    cc44:	f1b9 0f32 	cmp.w	r9, #50	; 0x32
    cc48:	f300 8093 	bgt.w	cd72 <lv_draw_rect+0x14e6>
                if(dsc->bg_grad_dir == LV_GRAD_DIR_HOR) {
    cc4c:	2b02      	cmp	r3, #2
    cc4e:	f000 8105 	beq.w	ce5c <lv_draw_rect+0x15d0>
                else if(dsc->bg_grad_dir == LV_GRAD_DIR_VER) {
    cc52:	2b01      	cmp	r3, #1
    cc54:	d1be      	bne.n	cbd4 <lv_draw_rect+0x1348>
                    _lv_blend_fill(clip, &fill_area,
    cc56:	f89a 300d 	ldrb.w	r3, [sl, #13]
    cc5a:	9302      	str	r3, [sp, #8]
    cc5c:	9b08      	ldr	r3, [sp, #32]
    cc5e:	9301      	str	r3, [sp, #4]
    cc60:	9700      	str	r7, [sp, #0]
    cc62:	9b05      	ldr	r3, [sp, #20]
    cc64:	465a      	mov	r2, fp
    cc66:	a91e      	add	r1, sp, #120	; 0x78
    cc68:	9804      	ldr	r0, [sp, #16]
    cc6a:	4c85      	ldr	r4, [pc, #532]	; (ce80 <lv_draw_rect+0x15f4>)
    cc6c:	47a0      	blx	r4
    cc6e:	e7c2      	b.n	cbf6 <lv_draw_rect+0x136a>
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
    cc70:	2701      	movs	r7, #1
            if(dsc->bg_grad_dir == LV_GRAD_DIR_VER && dsc->bg_color.full != dsc->bg_grad_color.full) {
    cc72:	f8ba 2002 	ldrh.w	r2, [sl, #2]
    cc76:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    cc7a:	429a      	cmp	r2, r3
    cc7c:	d06f      	beq.n	cd5e <lv_draw_rect+0x14d2>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    cc7e:	f8bd 106a 	ldrh.w	r1, [sp, #106]	; 0x6a
                grad_color = grad_get(dsc, lv_area_get_height(&coords_bg), y - coords_bg.y1);
    cc82:	1a62      	subs	r2, r4, r1
    cc84:	b293      	uxth	r3, r2
    cc86:	461a      	mov	r2, r3
    cc88:	930c      	str	r3, [sp, #48]	; 0x30
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
    cc8a:	f9ba e008 	ldrsh.w	lr, [sl, #8]
    cc8e:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
    cc92:	3301      	adds	r3, #1
    cc94:	1a5b      	subs	r3, r3, r1
    cc96:	b21b      	sxth	r3, r3
    cc98:	fb03 f10e 	mul.w	r1, r3, lr
    cc9c:	1209      	asrs	r1, r1, #8
    if(i <= min) return dsc->bg_color;
    cc9e:	b210      	sxth	r0, r2
    cca0:	4281      	cmp	r1, r0
    cca2:	da4b      	bge.n	cd3c <lv_draw_rect+0x14b0>
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
    cca4:	f9ba c00a 	ldrsh.w	ip, [sl, #10]
    cca8:	fb0c f203 	mul.w	r2, ip, r3
    if(i >= max) return dsc->bg_grad_color;
    ccac:	ebb0 2f22 	cmp.w	r0, r2, asr #8
    ccb0:	f280 80b0 	bge.w	ce14 <lv_draw_rect+0x1588>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
    ccb4:	ebac 0e0e 	sub.w	lr, ip, lr
    d = (s * d) >> 8;
    ccb8:	fb03 f30e 	mul.w	r3, r3, lr
    i -= min;
    ccbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ccbe:	1a52      	subs	r2, r2, r1
    lv_opa_t mix = (i * 255) / d;
    ccc0:	b212      	sxth	r2, r2
    ccc2:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
    d = (s * d) >> 8;
    ccc6:	121b      	asrs	r3, r3, #8
    lv_opa_t mix = (i * 255) / d;
    ccc8:	fb92 f3f3 	sdiv	r3, r2, r3
    cccc:	b2db      	uxtb	r3, r3
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    ccce:	f1c3 01ff 	rsb	r1, r3, #255	; 0xff
    ccd2:	f89a 2005 	ldrb.w	r2, [sl, #5]
    ccd6:	08d2      	lsrs	r2, r2, #3
    ccd8:	f89a 0003 	ldrb.w	r0, [sl, #3]
    ccdc:	08c0      	lsrs	r0, r0, #3
    ccde:	fb01 f000 	mul.w	r0, r1, r0
    cce2:	fb03 0202 	mla	r2, r3, r2, r0
    cce6:	eb02 2002 	add.w	r0, r2, r2, lsl #8
    ccea:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
    ccee:	f3c2 52c4 	ubfx	r2, r2, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    ccf2:	f8ba 0004 	ldrh.w	r0, [sl, #4]
    ccf6:	f3c0 1045 	ubfx	r0, r0, #5, #6
    ccfa:	f8ba e002 	ldrh.w	lr, [sl, #2]
    ccfe:	f3ce 1e45 	ubfx	lr, lr, #5, #6
    cd02:	fb01 fe0e 	mul.w	lr, r1, lr
    cd06:	fb03 e000 	mla	r0, r3, r0, lr
    cd0a:	eb00 2e00 	add.w	lr, r0, r0, lsl #8
    cd0e:	eb00 10ce 	add.w	r0, r0, lr, lsl #7
    cd12:	f3c0 50c5 	ubfx	r0, r0, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    cd16:	f89a e004 	ldrb.w	lr, [sl, #4]
    cd1a:	f00e 0e1f 	and.w	lr, lr, #31
    cd1e:	f89a c002 	ldrb.w	ip, [sl, #2]
    cd22:	f00c 0c1f 	and.w	ip, ip, #31
    cd26:	fb01 f10c 	mul.w	r1, r1, ip
    cd2a:	fb03 130e 	mla	r3, r3, lr, r1
    cd2e:	eb03 2103 	add.w	r1, r3, r3, lsl #8
    cd32:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
    cd36:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    cd3a:	e00a      	b.n	cd52 <lv_draw_rect+0x14c6>
    if(i <= min) return dsc->bg_color;
    cd3c:	f89a 3002 	ldrb.w	r3, [sl, #2]
    cd40:	f003 031f 	and.w	r3, r3, #31
    cd44:	f8ba 0002 	ldrh.w	r0, [sl, #2]
    cd48:	f3c0 1045 	ubfx	r0, r0, #5, #6
    cd4c:	f89a 2003 	ldrb.w	r2, [sl, #3]
    cd50:	08d2      	lsrs	r2, r2, #3
    cd52:	f363 0b04 	bfi	fp, r3, #0, #5
    cd56:	f360 1b4a 	bfi	fp, r0, #5, #6
    cd5a:	f362 2bcf 	bfi	fp, r2, #11, #5
            if(simple_mode && split &&
    cd5e:	9b07      	ldr	r3, [sp, #28]
    cd60:	2b00      	cmp	r3, #0
    cd62:	f43f af78 	beq.w	cc56 <lv_draw_rect+0x13ca>
    cd66:	f1b9 0f32 	cmp.w	r9, #50	; 0x32
    cd6a:	bfc8      	it	gt
    cd6c:	2301      	movgt	r3, #1
    cd6e:	f77f af72 	ble.w	cc56 <lv_draw_rect+0x13ca>
               (y < coords_bg.y1 + rout + 1 ||
    cd72:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
    cd76:	4432      	add	r2, r6
    cd78:	3201      	adds	r2, #1
            if(simple_mode && split &&
    cd7a:	4294      	cmp	r4, r2
    cd7c:	db06      	blt.n	cd8c <lv_draw_rect+0x1500>
                y > coords_bg.y2 - rout - 1)) {
    cd7e:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	; 0x6e
    cd82:	1b92      	subs	r2, r2, r6
    cd84:	3a01      	subs	r2, #1
               (y < coords_bg.y1 + rout + 1 ||
    cd86:	4294      	cmp	r4, r2
    cd88:	f77f af60 	ble.w	cc4c <lv_draw_rect+0x13c0>
                fill_area2.x1 = coords_bg.x1;
    cd8c:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
    cd90:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
                fill_area2.x2 = coords_bg.x1 + rout - 1;
    cd94:	b2b2      	uxth	r2, r6
    cd96:	920c      	str	r2, [sp, #48]	; 0x30
    cd98:	3b01      	subs	r3, #1
    cd9a:	4413      	add	r3, r2
    cd9c:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
                fill_area2.y1 = fill_area.y1;
    cda0:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
    cda4:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
                fill_area2.y2 = fill_area.y2;
    cda8:	f8bd 307e 	ldrh.w	r3, [sp, #126]	; 0x7e
    cdac:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
                _lv_blend_fill(clip, &fill_area2,
    cdb0:	f89a 300d 	ldrb.w	r3, [sl, #13]
    cdb4:	9302      	str	r3, [sp, #8]
    cdb6:	9b08      	ldr	r3, [sp, #32]
    cdb8:	9301      	str	r3, [sp, #4]
    cdba:	9700      	str	r7, [sp, #0]
    cdbc:	9b05      	ldr	r3, [sp, #20]
    cdbe:	465a      	mov	r2, fp
    cdc0:	a922      	add	r1, sp, #136	; 0x88
    cdc2:	9804      	ldr	r0, [sp, #16]
    cdc4:	4c2e      	ldr	r4, [pc, #184]	; (ce80 <lv_draw_rect+0x15f4>)
    cdc6:	47a0      	blx	r4
                if(dsc->bg_grad_dir == LV_GRAD_DIR_VER) {
    cdc8:	f89a 3006 	ldrb.w	r3, [sl, #6]
    cdcc:	2b01      	cmp	r3, #1
    cdce:	d02d      	beq.n	ce2c <lv_draw_rect+0x15a0>
                fill_area2.x1 = coords_bg.x2 - rout + 1;
    cdd0:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
    cdd4:	1c5a      	adds	r2, r3, #1
    cdd6:	990c      	ldr	r1, [sp, #48]	; 0x30
    cdd8:	1a54      	subs	r4, r2, r1
    cdda:	f8ad 4088 	strh.w	r4, [sp, #136]	; 0x88
                fill_area2.x2 = coords_bg.x2;
    cdde:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
    cde2:	1b9b      	subs	r3, r3, r6
    cde4:	3301      	adds	r3, #1
    cde6:	f9b8 2010 	ldrsh.w	r2, [r8, #16]
    cdea:	f9bd 1070 	ldrsh.w	r1, [sp, #112]	; 0x70
    cdee:	440a      	add	r2, r1
    cdf0:	1a9b      	subs	r3, r3, r2
                _lv_blend_fill(clip, &fill_area2,
    cdf2:	f89a 200d 	ldrb.w	r2, [sl, #13]
    cdf6:	9202      	str	r2, [sp, #8]
    cdf8:	9a08      	ldr	r2, [sp, #32]
    cdfa:	9201      	str	r2, [sp, #4]
    cdfc:	9700      	str	r7, [sp, #0]
    cdfe:	9a05      	ldr	r2, [sp, #20]
    ce00:	2b00      	cmp	r3, #0
    ce02:	bfa8      	it	ge
    ce04:	18d2      	addge	r2, r2, r3
    ce06:	4613      	mov	r3, r2
    ce08:	465a      	mov	r2, fp
    ce0a:	a922      	add	r1, sp, #136	; 0x88
    ce0c:	9804      	ldr	r0, [sp, #16]
    ce0e:	4c1c      	ldr	r4, [pc, #112]	; (ce80 <lv_draw_rect+0x15f4>)
    ce10:	47a0      	blx	r4
    ce12:	e6f0      	b.n	cbf6 <lv_draw_rect+0x136a>
    if(i >= max) return dsc->bg_grad_color;
    ce14:	f89a 3004 	ldrb.w	r3, [sl, #4]
    ce18:	f003 031f 	and.w	r3, r3, #31
    ce1c:	f8ba 0004 	ldrh.w	r0, [sl, #4]
    ce20:	f3c0 1045 	ubfx	r0, r0, #5, #6
    ce24:	f89a 2005 	ldrb.w	r2, [sl, #5]
    ce28:	08d2      	lsrs	r2, r2, #3
    ce2a:	e792      	b.n	cd52 <lv_draw_rect+0x14c6>
                    fill_area2.x1 = coords_bg.x1 + rout;
    ce2c:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    ce30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ce32:	4413      	add	r3, r2
    ce34:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
                    fill_area2.x2 = coords_bg.x2 - rout;
    ce38:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
    ce3c:	1a9b      	subs	r3, r3, r2
    ce3e:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
                    _lv_blend_fill(clip, &fill_area2,
    ce42:	f89a 300d 	ldrb.w	r3, [sl, #13]
    ce46:	9302      	str	r3, [sp, #8]
    ce48:	9b08      	ldr	r3, [sp, #32]
    ce4a:	9301      	str	r3, [sp, #4]
    ce4c:	2301      	movs	r3, #1
    ce4e:	9300      	str	r3, [sp, #0]
    ce50:	2300      	movs	r3, #0
    ce52:	465a      	mov	r2, fp
    ce54:	a922      	add	r1, sp, #136	; 0x88
    ce56:	9804      	ldr	r0, [sp, #16]
    ce58:	47a0      	blx	r4
    ce5a:	e7b9      	b.n	cdd0 <lv_draw_rect+0x1544>
                    _lv_blend_map(clip, &fill_area, grad_map, mask_buf, mask_res, opa, dsc->bg_blend_mode);
    ce5c:	f89a 300d 	ldrb.w	r3, [sl, #13]
    ce60:	9302      	str	r3, [sp, #8]
    ce62:	9b08      	ldr	r3, [sp, #32]
    ce64:	9301      	str	r3, [sp, #4]
    ce66:	9700      	str	r7, [sp, #0]
    ce68:	9b05      	ldr	r3, [sp, #20]
    ce6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ce6c:	a91e      	add	r1, sp, #120	; 0x78
    ce6e:	9804      	ldr	r0, [sp, #16]
    ce70:	4c04      	ldr	r4, [pc, #16]	; (ce84 <lv_draw_rect+0x15f8>)
    ce72:	47a0      	blx	r4
    ce74:	e6bf      	b.n	cbf6 <lv_draw_rect+0x136a>
    ce76:	bf00      	nop
    ce78:	00011ccd 	.word	0x00011ccd
    ce7c:	0000b379 	.word	0x0000b379
    ce80:	00006e05 	.word	0x00006e05
    ce84:	00007911 	.word	0x00007911
    ce88:	9f08      	ldr	r7, [sp, #32]
        if(dsc->bg_grad_dir == LV_GRAD_DIR_NONE && other_mask_cnt == 0 && split) {
    ce8a:	f89a 3006 	ldrb.w	r3, [sl, #6]
    ce8e:	b923      	cbnz	r3, ce9a <lv_draw_rect+0x160e>
    ce90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ce92:	b913      	cbnz	r3, ce9a <lv_draw_rect+0x160e>
    ce94:	f1b9 0f32 	cmp.w	r9, #50	; 0x32
    ce98:	dc0b      	bgt.n	ceb2 <lv_draw_rect+0x1626>
        if(grad_map) _lv_mem_buf_release(grad_map);
    ce9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ce9c:	b113      	cbz	r3, cea4 <lv_draw_rect+0x1618>
    ce9e:	4618      	mov	r0, r3
    cea0:	4bbd      	ldr	r3, [pc, #756]	; (d198 <lv_draw_rect+0x190c>)
    cea2:	4798      	blx	r3
    lv_draw_mask_remove_id(mask_rout_id);
    cea4:	980e      	ldr	r0, [sp, #56]	; 0x38
    cea6:	4bbd      	ldr	r3, [pc, #756]	; (d19c <lv_draw_rect+0x1910>)
    cea8:	4798      	blx	r3
    _lv_mem_buf_release(mask_buf);
    ceaa:	9805      	ldr	r0, [sp, #20]
    ceac:	4bba      	ldr	r3, [pc, #744]	; (d198 <lv_draw_rect+0x190c>)
    ceae:	4798      	blx	r3
    ceb0:	e469      	b.n	c786 <lv_draw_rect+0xefa>
            fill_area.x1 = coords_bg.x1 + rout;
    ceb2:	b2b6      	uxth	r6, r6
    ceb4:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    ceb8:	4433      	add	r3, r6
    ceba:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
            fill_area.x2 = coords_bg.x2 - rout;
    cebe:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
    cec2:	1b9b      	subs	r3, r3, r6
    cec4:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            fill_area.y1 = coords_bg.y1;
    cec8:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
    cecc:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            fill_area.y2 = coords_bg.y1 + rout;
    ced0:	4433      	add	r3, r6
    ced2:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
            _lv_blend_fill(clip, &fill_area,
    ced6:	f89a 300d 	ldrb.w	r3, [sl, #13]
    ceda:	9302      	str	r3, [sp, #8]
    cedc:	9701      	str	r7, [sp, #4]
    cede:	2301      	movs	r3, #1
    cee0:	9300      	str	r3, [sp, #0]
    cee2:	2300      	movs	r3, #0
    cee4:	f8ba 2002 	ldrh.w	r2, [sl, #2]
    cee8:	a91e      	add	r1, sp, #120	; 0x78
    ceea:	9804      	ldr	r0, [sp, #16]
    ceec:	4cac      	ldr	r4, [pc, #688]	; (d1a0 <lv_draw_rect+0x1914>)
    ceee:	47a0      	blx	r4
            fill_area.y1 = coords_bg.y2 - rout;
    cef0:	f9bd 106e 	ldrsh.w	r1, [sp, #110]	; 0x6e
    cef4:	1b8a      	subs	r2, r1, r6
    cef6:	b212      	sxth	r2, r2
    cef8:	f8ad 207a 	strh.w	r2, [sp, #122]	; 0x7a
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
    cefc:	f9bd 307e 	ldrsh.w	r3, [sp, #126]	; 0x7e
    cf00:	429a      	cmp	r2, r3
    cf02:	bfdc      	itt	le
    cf04:	3301      	addle	r3, #1
    cf06:	f8ad 307a 	strhle.w	r3, [sp, #122]	; 0x7a
            fill_area.y2 = coords_bg.y2;
    cf0a:	f8ad 107e 	strh.w	r1, [sp, #126]	; 0x7e
            _lv_blend_fill(clip, &fill_area,
    cf0e:	f89a 300d 	ldrb.w	r3, [sl, #13]
    cf12:	9302      	str	r3, [sp, #8]
    cf14:	9701      	str	r7, [sp, #4]
    cf16:	2501      	movs	r5, #1
    cf18:	9500      	str	r5, [sp, #0]
    cf1a:	2300      	movs	r3, #0
    cf1c:	f8ba 2002 	ldrh.w	r2, [sl, #2]
    cf20:	a91e      	add	r1, sp, #120	; 0x78
    cf22:	f8dd 8010 	ldr.w	r8, [sp, #16]
    cf26:	4640      	mov	r0, r8
    cf28:	4c9d      	ldr	r4, [pc, #628]	; (d1a0 <lv_draw_rect+0x1914>)
    cf2a:	47a0      	blx	r4
            fill_area.x1 = coords_bg.x1;
    cf2c:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    cf30:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
            fill_area.x2 = coords_bg.x2;
    cf34:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
    cf38:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            fill_area.y1 = coords_bg.y1 + rout + 1;
    cf3c:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
    cf40:	442b      	add	r3, r5
    cf42:	4433      	add	r3, r6
    cf44:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            fill_area.y2 = coords_bg.y2 - rout - 1;
    cf48:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
    cf4c:	3b01      	subs	r3, #1
    cf4e:	1b9e      	subs	r6, r3, r6
    cf50:	f8ad 607e 	strh.w	r6, [sp, #126]	; 0x7e
            _lv_blend_fill(clip, &fill_area,
    cf54:	f89a 300d 	ldrb.w	r3, [sl, #13]
    cf58:	9302      	str	r3, [sp, #8]
    cf5a:	9701      	str	r7, [sp, #4]
    cf5c:	9500      	str	r5, [sp, #0]
    cf5e:	2300      	movs	r3, #0
    cf60:	f8ba 2002 	ldrh.w	r2, [sl, #2]
    cf64:	a91e      	add	r1, sp, #120	; 0x78
    cf66:	4640      	mov	r0, r8
    cf68:	47a0      	blx	r4
    cf6a:	e796      	b.n	ce9a <lv_draw_rect+0x160e>
    lv_img_src_t src_type = lv_img_src_get_type(dsc->pattern_image);
    cf6c:	4b8d      	ldr	r3, [pc, #564]	; (d1a4 <lv_draw_rect+0x1918>)
    cf6e:	4798      	blx	r3
    cf70:	4605      	mov	r5, r0
    if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_VARIABLE) {
    cf72:	2801      	cmp	r0, #1
    cf74:	d908      	bls.n	cf88 <lv_draw_rect+0x16fc>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
    cf76:	2802      	cmp	r0, #2
    cf78:	d025      	beq.n	cfc6 <lv_draw_rect+0x173a>
        lv_draw_img(coords, clip, NULL, NULL);
    cf7a:	2300      	movs	r3, #0
    cf7c:	461a      	mov	r2, r3
    cf7e:	9904      	ldr	r1, [sp, #16]
    cf80:	9806      	ldr	r0, [sp, #24]
    cf82:	4c89      	ldr	r4, [pc, #548]	; (d1a8 <lv_draw_rect+0x191c>)
    cf84:	47a0      	blx	r4
    cf86:	e406      	b.n	c796 <lv_draw_rect+0xf0a>
        lv_res_t res = lv_img_decoder_get_info(dsc->pattern_image, &header);
    cf88:	a929      	add	r1, sp, #164	; 0xa4
    cf8a:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
    cf8e:	4b87      	ldr	r3, [pc, #540]	; (d1ac <lv_draw_rect+0x1920>)
    cf90:	4798      	blx	r3
        if(res != LV_RES_OK) {
    cf92:	2801      	cmp	r0, #1
    cf94:	f47f abff 	bne.w	c796 <lv_draw_rect+0xf0a>
        img_w = header.w;
    cf98:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    cf9a:	f3c3 298a 	ubfx	r9, r3, #10, #11
        img_h = header.h;
    cf9e:	f8bd 70a6 	ldrh.w	r7, [sp, #166]	; 0xa6
    cfa2:	f3c7 174a 	ubfx	r7, r7, #5, #11
        lv_draw_img_dsc_init(&img_dsc);
    cfa6:	a81e      	add	r0, sp, #120	; 0x78
    cfa8:	4b81      	ldr	r3, [pc, #516]	; (d1b0 <lv_draw_rect+0x1924>)
    cfaa:	4798      	blx	r3
        img_dsc.opa = dsc->pattern_opa;
    cfac:	f89a 3036 	ldrb.w	r3, [sl, #54]	; 0x36
    cfb0:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
        img_dsc.recolor_opa = dsc->pattern_recolor_opa;
    cfb4:	f89a 3037 	ldrb.w	r3, [sl, #55]	; 0x37
    cfb8:	f88d 3082 	strb.w	r3, [sp, #130]	; 0x82
        img_dsc.recolor = dsc->pattern_recolor;
    cfbc:	f8ba 3034 	ldrh.w	r3, [sl, #52]	; 0x34
    cfc0:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
    cfc4:	e020      	b.n	d008 <lv_draw_rect+0x177c>
        lv_draw_label_dsc_init(&label_dsc);
    cfc6:	a822      	add	r0, sp, #136	; 0x88
    cfc8:	4b7a      	ldr	r3, [pc, #488]	; (d1b4 <lv_draw_rect+0x1928>)
    cfca:	4798      	blx	r3
        label_dsc.color = dsc->pattern_recolor;
    cfcc:	f8ba 3034 	ldrh.w	r3, [sl, #52]	; 0x34
    cfd0:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
        label_dsc.font = dsc->pattern_font;
    cfd4:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
    cfd8:	9223      	str	r2, [sp, #140]	; 0x8c
        label_dsc.opa = dsc->pattern_opa;
    cfda:	f89a 3036 	ldrb.w	r3, [sl, #54]	; 0x36
    cfde:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
        _lv_txt_get_size(&s, dsc->pattern_image, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
    cfe2:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
    cfe6:	2100      	movs	r1, #0
    cfe8:	9102      	str	r1, [sp, #8]
    cfea:	f647 4118 	movw	r1, #31768	; 0x7c18
    cfee:	9101      	str	r1, [sp, #4]
    cff0:	f9bd 1092 	ldrsh.w	r1, [sp, #146]	; 0x92
    cff4:	9100      	str	r1, [sp, #0]
    cff6:	f8da 102c 	ldr.w	r1, [sl, #44]	; 0x2c
    cffa:	a829      	add	r0, sp, #164	; 0xa4
    cffc:	4c6e      	ldr	r4, [pc, #440]	; (d1b8 <lv_draw_rect+0x192c>)
    cffe:	47a0      	blx	r4
        img_w = s.x;
    d000:	f9bd 90a4 	ldrsh.w	r9, [sp, #164]	; 0xa4
        img_h = s.y;
    d004:	f9bd 70a6 	ldrsh.w	r7, [sp, #166]	; 0xa6
    if(dsc->pattern_repeat) {
    d008:	f89a 3038 	ldrb.w	r3, [sl, #56]	; 0x38
    d00c:	f013 0f01 	tst.w	r3, #1
    d010:	d13f      	bne.n	d092 <lv_draw_rect+0x1806>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    d012:	9c06      	ldr	r4, [sp, #24]
    d014:	8821      	ldrh	r1, [r4, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    d016:	8860      	ldrh	r0, [r4, #2]
    d018:	88e2      	ldrh	r2, [r4, #6]
    d01a:	3201      	adds	r2, #1
    d01c:	1a12      	subs	r2, r2, r0
        int32_t obj_h = lv_area_get_height(coords);
    d01e:	b212      	sxth	r2, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    d020:	88a3      	ldrh	r3, [r4, #4]
    d022:	3301      	adds	r3, #1
    d024:	1a5b      	subs	r3, r3, r1
        int32_t obj_w = lv_area_get_width(coords);
    d026:	b21b      	sxth	r3, r3
        coords_tmp.x1 = coords->x1 + (obj_w - img_w) / 2;
    d028:	eba3 0309 	sub.w	r3, r3, r9
    d02c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    d030:	eb01 0363 	add.w	r3, r1, r3, asr #1
    d034:	b29b      	uxth	r3, r3
    d036:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        coords_tmp.y1 = coords->y1 + (obj_h - img_h) / 2;
    d03a:	1bd2      	subs	r2, r2, r7
    d03c:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
    d040:	eb00 0161 	add.w	r1, r0, r1, asr #1
    d044:	b289      	uxth	r1, r1
    d046:	f8ad 1072 	strh.w	r1, [sp, #114]	; 0x72
        coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
    d04a:	f109 39ff 	add.w	r9, r9, #4294967295
    d04e:	4499      	add	r9, r3
    d050:	f8ad 9074 	strh.w	r9, [sp, #116]	; 0x74
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
    d054:	1e7b      	subs	r3, r7, #1
    d056:	440b      	add	r3, r1
    d058:	b29b      	uxth	r3, r3
    d05a:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        if(src_type == LV_IMG_SRC_SYMBOL) {
    d05e:	2d02      	cmp	r5, #2
    d060:	f000 80b4 	beq.w	d1cc <lv_draw_rect+0x1940>
        if(_lv_area_is_in(&coords_tmp, coords, dsc->radius) == false) {
    d064:	f9ba 2000 	ldrsh.w	r2, [sl]
    d068:	9906      	ldr	r1, [sp, #24]
    d06a:	a81c      	add	r0, sp, #112	; 0x70
    d06c:	4b53      	ldr	r3, [pc, #332]	; (d1bc <lv_draw_rect+0x1930>)
    d06e:	4798      	blx	r3
        int16_t radius_mask_id = LV_MASK_ID_INV;
    d070:	f04f 34ff 	mov.w	r4, #4294967295
        if(_lv_area_is_in(&coords_tmp, coords, dsc->radius) == false) {
    d074:	2800      	cmp	r0, #0
    d076:	f000 86ca 	beq.w	de0e <lv_draw_rect+0x2582>
        else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
    d07a:	ab1e      	add	r3, sp, #120	; 0x78
    d07c:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
    d080:	9904      	ldr	r1, [sp, #16]
    d082:	a81c      	add	r0, sp, #112	; 0x70
    d084:	4d48      	ldr	r5, [pc, #288]	; (d1a8 <lv_draw_rect+0x191c>)
    d086:	47a8      	blx	r5
        lv_draw_mask_remove_id(radius_mask_id);
    d088:	4620      	mov	r0, r4
    d08a:	4b44      	ldr	r3, [pc, #272]	; (d19c <lv_draw_rect+0x1910>)
    d08c:	4798      	blx	r3
    d08e:	f7ff bb82 	b.w	c796 <lv_draw_rect+0xf0a>
        lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
    d092:	2300      	movs	r3, #0
    d094:	f9ba 2000 	ldrsh.w	r2, [sl]
    d098:	9e06      	ldr	r6, [sp, #24]
    d09a:	4631      	mov	r1, r6
    d09c:	a829      	add	r0, sp, #164	; 0xa4
    d09e:	4c48      	ldr	r4, [pc, #288]	; (d1c0 <lv_draw_rect+0x1934>)
    d0a0:	47a0      	blx	r4
        int16_t radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
    d0a2:	2100      	movs	r1, #0
    d0a4:	a829      	add	r0, sp, #164	; 0xa4
    d0a6:	4b47      	ldr	r3, [pc, #284]	; (d1c4 <lv_draw_rect+0x1938>)
    d0a8:	4798      	blx	r3
    d0aa:	9007      	str	r0, [sp, #28]
    d0ac:	88b3      	ldrh	r3, [r6, #4]
    d0ae:	3301      	adds	r3, #1
    d0b0:	4634      	mov	r4, r6
    d0b2:	8832      	ldrh	r2, [r6, #0]
    d0b4:	1a9b      	subs	r3, r3, r2
        int32_t ofs_x = (lv_area_get_width(coords) - (lv_area_get_width(coords) / img_w) * img_w) / 2;
    d0b6:	b21b      	sxth	r3, r3
    d0b8:	fb93 f2f9 	sdiv	r2, r3, r9
    d0bc:	fb09 3312 	mls	r3, r9, r2, r3
    d0c0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    d0c4:	ea4f 0b63 	mov.w	fp, r3, asr #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    d0c8:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
    d0cc:	8873      	ldrh	r3, [r6, #2]
    d0ce:	1c4a      	adds	r2, r1, #1
    d0d0:	1ad2      	subs	r2, r2, r3
        int32_t ofs_y = (lv_area_get_height(coords) - (lv_area_get_height(coords) / img_h) * img_h) / 2;
    d0d2:	b210      	sxth	r0, r2
    d0d4:	fb90 f2f7 	sdiv	r2, r0, r7
    d0d8:	fb07 0212 	mls	r2, r7, r2, r0
    d0dc:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
        coords_tmp.y1 = coords->y1 - ofs_y;
    d0e0:	eba3 0362 	sub.w	r3, r3, r2, asr #1
    d0e4:	b29b      	uxth	r3, r3
    d0e6:	b21a      	sxth	r2, r3
    d0e8:	f8ad 2072 	strh.w	r2, [sp, #114]	; 0x72
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
    d0ec:	b2bf      	uxth	r7, r7
    d0ee:	1e78      	subs	r0, r7, #1
    d0f0:	4403      	add	r3, r0
    d0f2:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(; coords_tmp.y1 <= coords->y2; coords_tmp.y1 += img_h, coords_tmp.y2 += img_h) {
    d0f6:	4291      	cmp	r1, r2
    d0f8:	db48      	blt.n	d18c <lv_draw_rect+0x1900>
                if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
    d0fa:	f8df 80cc 	ldr.w	r8, [pc, #204]	; d1c8 <lv_draw_rect+0x193c>
                else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
    d0fe:	4e2a      	ldr	r6, [pc, #168]	; (d1a8 <lv_draw_rect+0x191c>)
    d100:	f8cd 9014 	str.w	r9, [sp, #20]
    d104:	46a1      	mov	r9, r4
    d106:	e02e      	b.n	d166 <lv_draw_rect+0x18da>
                if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
    d108:	2300      	movs	r3, #0
    d10a:	9300      	str	r3, [sp, #0]
    d10c:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
    d110:	aa22      	add	r2, sp, #136	; 0x88
    d112:	9904      	ldr	r1, [sp, #16]
    d114:	a81c      	add	r0, sp, #112	; 0x70
    d116:	47c0      	blx	r8
            for(; coords_tmp.x1 <= coords->x2; coords_tmp.x1 += img_w, coords_tmp.x2 += img_w) {
    d118:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
    d11c:	4423      	add	r3, r4
    d11e:	b21b      	sxth	r3, r3
    d120:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    d124:	f8bd 2074 	ldrh.w	r2, [sp, #116]	; 0x74
    d128:	4422      	add	r2, r4
    d12a:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
    d12e:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
    d132:	429a      	cmp	r2, r3
    d134:	db08      	blt.n	d148 <lv_draw_rect+0x18bc>
                if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
    d136:	2d02      	cmp	r5, #2
    d138:	d0e6      	beq.n	d108 <lv_draw_rect+0x187c>
                else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
    d13a:	ab1e      	add	r3, sp, #120	; 0x78
    d13c:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
    d140:	9904      	ldr	r1, [sp, #16]
    d142:	a81c      	add	r0, sp, #112	; 0x70
    d144:	47b0      	blx	r6
    d146:	e7e7      	b.n	d118 <lv_draw_rect+0x188c>
        for(; coords_tmp.y1 <= coords->y2; coords_tmp.y1 += img_h, coords_tmp.y2 += img_h) {
    d148:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    d14c:	443b      	add	r3, r7
    d14e:	b21b      	sxth	r3, r3
    d150:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    d154:	f8bd 2076 	ldrh.w	r2, [sp, #118]	; 0x76
    d158:	443a      	add	r2, r7
    d15a:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
    d15e:	f9b9 2006 	ldrsh.w	r2, [r9, #6]
    d162:	429a      	cmp	r2, r3
    d164:	db12      	blt.n	d18c <lv_draw_rect+0x1900>
            coords_tmp.x1 = coords->x1 - ofs_x;
    d166:	f8b9 3000 	ldrh.w	r3, [r9]
    d16a:	eba3 030b 	sub.w	r3, r3, fp
    d16e:	b29b      	uxth	r3, r3
    d170:	b21a      	sxth	r2, r3
    d172:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
            coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
    d176:	f8bd 4014 	ldrh.w	r4, [sp, #20]
    d17a:	1e61      	subs	r1, r4, #1
    d17c:	440b      	add	r3, r1
    d17e:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
            for(; coords_tmp.x1 <= coords->x2; coords_tmp.x1 += img_w, coords_tmp.x2 += img_w) {
    d182:	f9b9 3004 	ldrsh.w	r3, [r9, #4]
    d186:	4293      	cmp	r3, r2
    d188:	dad5      	bge.n	d136 <lv_draw_rect+0x18aa>
    d18a:	e7dd      	b.n	d148 <lv_draw_rect+0x18bc>
        lv_draw_mask_remove_id(radius_mask_id);
    d18c:	9807      	ldr	r0, [sp, #28]
    d18e:	4b03      	ldr	r3, [pc, #12]	; (d19c <lv_draw_rect+0x1910>)
    d190:	4798      	blx	r3
    d192:	f7ff bb00 	b.w	c796 <lv_draw_rect+0xf0a>
    d196:	bf00      	nop
    d198:	000116e5 	.word	0x000116e5
    d19c:	0000b3c9 	.word	0x0000b3c9
    d1a0:	00006e05 	.word	0x00006e05
    d1a4:	00008f71 	.word	0x00008f71
    d1a8:	00008d55 	.word	0x00008d55
    d1ac:	0000f0fd 	.word	0x0000f0fd
    d1b0:	00008cb1 	.word	0x00008cb1
    d1b4:	00008fd5 	.word	0x00008fd5
    d1b8:	000127c1 	.word	0x000127c1
    d1bc:	0001096d 	.word	0x0001096d
    d1c0:	0000b589 	.word	0x0000b589
    d1c4:	0000b33d 	.word	0x0000b33d
    d1c8:	0000902d 	.word	0x0000902d
            coords_tmp.y1 += y_corr;
    d1cc:	f002 0201 	and.w	r2, r2, #1
    d1d0:	4411      	add	r1, r2
    d1d2:	f8ad 1072 	strh.w	r1, [sp, #114]	; 0x72
            coords_tmp.y2 += y_corr;
    d1d6:	4413      	add	r3, r2
    d1d8:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        if(_lv_area_is_in(&coords_tmp, coords, dsc->radius) == false) {
    d1dc:	f9ba 2000 	ldrsh.w	r2, [sl]
    d1e0:	4621      	mov	r1, r4
    d1e2:	a81c      	add	r0, sp, #112	; 0x70
    d1e4:	4b82      	ldr	r3, [pc, #520]	; (d3f0 <lv_draw_rect+0x1b64>)
    d1e6:	4798      	blx	r3
    d1e8:	b9a8      	cbnz	r0, d216 <lv_draw_rect+0x198a>
            lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
    d1ea:	2300      	movs	r3, #0
    d1ec:	f9ba 2000 	ldrsh.w	r2, [sl]
    d1f0:	9906      	ldr	r1, [sp, #24]
    d1f2:	a829      	add	r0, sp, #164	; 0xa4
    d1f4:	4c7f      	ldr	r4, [pc, #508]	; (d3f4 <lv_draw_rect+0x1b68>)
    d1f6:	47a0      	blx	r4
            radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
    d1f8:	2100      	movs	r1, #0
    d1fa:	a829      	add	r0, sp, #164	; 0xa4
    d1fc:	4b7e      	ldr	r3, [pc, #504]	; (d3f8 <lv_draw_rect+0x1b6c>)
    d1fe:	4798      	blx	r3
    d200:	4604      	mov	r4, r0
        if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
    d202:	2300      	movs	r3, #0
    d204:	9300      	str	r3, [sp, #0]
    d206:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
    d20a:	aa22      	add	r2, sp, #136	; 0x88
    d20c:	9904      	ldr	r1, [sp, #16]
    d20e:	a81c      	add	r0, sp, #112	; 0x70
    d210:	4d7a      	ldr	r5, [pc, #488]	; (d3fc <lv_draw_rect+0x1b70>)
    d212:	47a8      	blx	r5
    d214:	e738      	b.n	d088 <lv_draw_rect+0x17fc>
        int16_t radius_mask_id = LV_MASK_ID_INV;
    d216:	f04f 34ff 	mov.w	r4, #4294967295
    d21a:	e7f2      	b.n	d202 <lv_draw_rect+0x1976>
    draw_area.x1 -= disp_area->x1;
    d21c:	8a29      	ldrh	r1, [r5, #16]
    d21e:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    d222:	1a5b      	subs	r3, r3, r1
    d224:	b29a      	uxth	r2, r3
    d226:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
    draw_area.y1 -= disp_area->y1;
    d22a:	8a68      	ldrh	r0, [r5, #18]
    d22c:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
    d230:	1a1b      	subs	r3, r3, r0
    d232:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
    draw_area.x2 -= disp_area->x1;
    d236:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
    d23a:	1a5b      	subs	r3, r3, r1
    d23c:	b29b      	uxth	r3, r3
    d23e:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    draw_area.y2 -= disp_area->y1;
    d242:	f8bd 1066 	ldrh.w	r1, [sp, #102]	; 0x66
    d246:	1a09      	subs	r1, r1, r0
    d248:	f8ad 1066 	strh.w	r1, [sp, #102]	; 0x66
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    d24c:	3301      	adds	r3, #1
    d24e:	1a9b      	subs	r3, r3, r2
    d250:	b21b      	sxth	r3, r3
    d252:	9308      	str	r3, [sp, #32]
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
    d254:	9309      	str	r3, [sp, #36]	; 0x24
    d256:	4618      	mov	r0, r3
    d258:	4b69      	ldr	r3, [pc, #420]	; (d400 <lv_draw_rect+0x1b74>)
    d25a:	4798      	blx	r3
    d25c:	4683      	mov	fp, r0
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
    d25e:	4b69      	ldr	r3, [pc, #420]	; (d404 <lv_draw_rect+0x1b78>)
    d260:	4798      	blx	r3
    if(other_mask_cnt) simple_mode = false;
    d262:	b948      	cbnz	r0, d278 <lv_draw_rect+0x19ec>
    else if(dsc->border_side != LV_BORDER_SIDE_FULL) simple_mode = false;
    d264:	f9ba 8012 	ldrsh.w	r8, [sl, #18]
    d268:	f1b8 0f0f 	cmp.w	r8, #15
    d26c:	bf14      	ite	ne
    d26e:	f04f 0800 	movne.w	r8, #0
    d272:	f04f 0801 	moveq.w	r8, #1
    d276:	e001      	b.n	d27c <lv_draw_rect+0x19f0>
    if(other_mask_cnt) simple_mode = false;
    d278:	f04f 0800 	mov.w	r8, #0
    int32_t rout = dsc->radius;
    d27c:	f9ba 2000 	ldrsh.w	r2, [sl]
    d280:	9e06      	ldr	r6, [sp, #24]
    d282:	88b3      	ldrh	r3, [r6, #4]
    d284:	3301      	adds	r3, #1
    d286:	8831      	ldrh	r1, [r6, #0]
    d288:	1a5b      	subs	r3, r3, r1
    int32_t coords_w = lv_area_get_width(coords);
    d28a:	b219      	sxth	r1, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    d28c:	88f3      	ldrh	r3, [r6, #6]
    d28e:	3301      	adds	r3, #1
    d290:	8870      	ldrh	r0, [r6, #2]
    d292:	1a1b      	subs	r3, r3, r0
    int32_t coords_h = lv_area_get_height(coords);
    d294:	b21b      	sxth	r3, r3
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
    d296:	428b      	cmp	r3, r1
    d298:	bfa8      	it	ge
    d29a:	460b      	movge	r3, r1
    if(rout > short_side >> 1) rout = short_side >> 1;
    d29c:	105b      	asrs	r3, r3, #1
    d29e:	4293      	cmp	r3, r2
    d2a0:	bfa8      	it	ge
    d2a2:	4613      	movge	r3, r2
    d2a4:	461a      	mov	r2, r3
    d2a6:	930a      	str	r3, [sp, #40]	; 0x28
    if(rout > 0) {
    d2a8:	2b00      	cmp	r3, #0
    d2aa:	f340 8088 	ble.w	d3be <lv_draw_rect+0x1b32>
        lv_draw_mask_radius_init(&mask_rout_param, coords, rout, false);
    d2ae:	2300      	movs	r3, #0
    d2b0:	4631      	mov	r1, r6
    d2b2:	a822      	add	r0, sp, #136	; 0x88
    d2b4:	4e4f      	ldr	r6, [pc, #316]	; (d3f4 <lv_draw_rect+0x1b68>)
    d2b6:	47b0      	blx	r6
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
    d2b8:	2100      	movs	r1, #0
    d2ba:	a822      	add	r0, sp, #136	; 0x88
    d2bc:	4b4e      	ldr	r3, [pc, #312]	; (d3f8 <lv_draw_rect+0x1b6c>)
    d2be:	4798      	blx	r3
    d2c0:	900e      	str	r0, [sp, #56]	; 0x38
    int32_t rin = rout - dsc->border_width;
    d2c2:	f9ba 6010 	ldrsh.w	r6, [sl, #16]
    d2c6:	9a06      	ldr	r2, [sp, #24]
    d2c8:	1e53      	subs	r3, r2, #1
    d2ca:	1dd0      	adds	r0, r2, #7
    uint8_t * d8 = (uint8_t *)dst;
    d2cc:	aa1a      	add	r2, sp, #104	; 0x68
        *d8 = *s8;
    d2ce:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    d2d2:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    d2d6:	4283      	cmp	r3, r0
    d2d8:	d1f9      	bne.n	d2ce <lv_draw_rect+0x1a42>
    area_small.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
    d2da:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
    d2de:	f8ba 3012 	ldrh.w	r3, [sl, #18]
    d2e2:	f013 0f04 	tst.w	r3, #4
    d2e6:	d06e      	beq.n	d3c6 <lv_draw_rect+0x1b3a>
    d2e8:	b2b1      	uxth	r1, r6
    d2ea:	440a      	add	r2, r1
    d2ec:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
    area_small.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
    d2f0:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
    d2f4:	f013 0f08 	tst.w	r3, #8
    d2f8:	d06a      	beq.n	d3d0 <lv_draw_rect+0x1b44>
    d2fa:	b2b1      	uxth	r1, r6
    d2fc:	1a52      	subs	r2, r2, r1
    d2fe:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
    area_small.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
    d302:	f8bd 206a 	ldrh.w	r2, [sp, #106]	; 0x6a
    d306:	f013 0f02 	tst.w	r3, #2
    d30a:	d066      	beq.n	d3da <lv_draw_rect+0x1b4e>
    d30c:	b2b1      	uxth	r1, r6
    d30e:	440a      	add	r2, r1
    d310:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
    area_small.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
    d314:	f8bd 206e 	ldrh.w	r2, [sp, #110]	; 0x6e
    d318:	f013 0f01 	tst.w	r3, #1
    d31c:	d062      	beq.n	d3e4 <lv_draw_rect+0x1b58>
    d31e:	b2b3      	uxth	r3, r6
    d320:	1ad3      	subs	r3, r2, r3
    d322:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
    lv_draw_mask_radius_init(&mask_rin_param, &area_small, rout - dsc->border_width, true);
    d326:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    d32a:	fa1f f789 	uxth.w	r7, r9
    d32e:	1bba      	subs	r2, r7, r6
    d330:	2301      	movs	r3, #1
    d332:	b212      	sxth	r2, r2
    d334:	a91a      	add	r1, sp, #104	; 0x68
    d336:	a829      	add	r0, sp, #164	; 0xa4
    d338:	4e2e      	ldr	r6, [pc, #184]	; (d3f4 <lv_draw_rect+0x1b68>)
    d33a:	47b0      	blx	r6
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
    d33c:	2100      	movs	r1, #0
    d33e:	a829      	add	r0, sp, #164	; 0xa4
    d340:	4b2d      	ldr	r3, [pc, #180]	; (d3f8 <lv_draw_rect+0x1b6c>)
    d342:	4798      	blx	r3
    d344:	900f      	str	r0, [sp, #60]	; 0x3c
    int32_t corner_size = LV_MATH_MAX(rout, dsc->border_width - 1);
    d346:	f9ba 3010 	ldrsh.w	r3, [sl, #16]
    d34a:	3b01      	subs	r3, #1
    d34c:	454b      	cmp	r3, r9
    d34e:	bfb8      	it	lt
    d350:	464b      	movlt	r3, r9
    d352:	4619      	mov	r1, r3
    d354:	930d      	str	r3, [sp, #52]	; 0x34
    lv_color_t color = dsc->border_color;
    d356:	f8ba 300e 	ldrh.w	r3, [sl, #14]
    d35a:	f8ad 3014 	strh.w	r3, [sp, #20]
    lv_blend_mode_t blend_mode = dsc->border_blend_mode;
    d35e:	f89a 6015 	ldrb.w	r6, [sl, #21]
    if(simple_mode) {
    d362:	f1b8 0f00 	cmp.w	r8, #0
    d366:	f000 81be 	beq.w	d6e6 <lv_draw_rect+0x1e5a>
        int32_t upper_corner_end = coords->y1 - disp_area->y1 + corner_size;
    d36a:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
    d36e:	9806      	ldr	r0, [sp, #24]
    d370:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
    d374:	1ad2      	subs	r2, r2, r3
    d376:	440a      	add	r2, r1
        upper_corner_end = LV_MATH_MIN(upper_corner_end, draw_area.y2);
    d378:	f9bd 1066 	ldrsh.w	r1, [sp, #102]	; 0x66
    d37c:	4291      	cmp	r1, r2
    d37e:	bfa8      	it	ge
    d380:	4611      	movge	r1, r2
    d382:	910b      	str	r1, [sp, #44]	; 0x2c
        fill_area.x1 = coords->x1;
    d384:	8802      	ldrh	r2, [r0, #0]
    d386:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
        fill_area.x2 = coords->x2;
    d38a:	8882      	ldrh	r2, [r0, #4]
    d38c:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
        fill_area.y1 = disp_area->y1 + draw_area.y1;
    d390:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
    d394:	4413      	add	r3, r2
    d396:	b21b      	sxth	r3, r3
    d398:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        fill_area.y2 = fill_area.y1;
    d39c:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
    d3a0:	4690      	mov	r8, r2
    d3a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d3a4:	4293      	cmp	r3, r2
    d3a6:	f2c0 80b2 	blt.w	d50e <lv_draw_rect+0x1c82>
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
    d3aa:	f8df 905c 	ldr.w	r9, [pc, #92]	; d408 <lv_draw_rect+0x1b7c>
    d3ae:	f8cd b01c 	str.w	fp, [sp, #28]
    d3b2:	46b3      	mov	fp, r6
    d3b4:	4626      	mov	r6, r4
    d3b6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
    d3ba:	4682      	mov	sl, r0
    d3bc:	e054      	b.n	d468 <lv_draw_rect+0x1bdc>
    int16_t mask_rout_id = LV_MASK_ID_INV;
    d3be:	f04f 33ff 	mov.w	r3, #4294967295
    d3c2:	930e      	str	r3, [sp, #56]	; 0x38
    d3c4:	e77d      	b.n	d2c2 <lv_draw_rect+0x1a36>
    area_small.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
    d3c6:	990a      	ldr	r1, [sp, #40]	; 0x28
    d3c8:	1871      	adds	r1, r6, r1
    d3ca:	4249      	negs	r1, r1
    d3cc:	b289      	uxth	r1, r1
    d3ce:	e78c      	b.n	d2ea <lv_draw_rect+0x1a5e>
    area_small.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
    d3d0:	990a      	ldr	r1, [sp, #40]	; 0x28
    d3d2:	1871      	adds	r1, r6, r1
    d3d4:	4249      	negs	r1, r1
    d3d6:	b289      	uxth	r1, r1
    d3d8:	e790      	b.n	d2fc <lv_draw_rect+0x1a70>
    area_small.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
    d3da:	990a      	ldr	r1, [sp, #40]	; 0x28
    d3dc:	1871      	adds	r1, r6, r1
    d3de:	4249      	negs	r1, r1
    d3e0:	b289      	uxth	r1, r1
    d3e2:	e794      	b.n	d30e <lv_draw_rect+0x1a82>
    area_small.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
    d3e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d3e6:	18f3      	adds	r3, r6, r3
    d3e8:	425b      	negs	r3, r3
    d3ea:	b29b      	uxth	r3, r3
    d3ec:	e798      	b.n	d320 <lv_draw_rect+0x1a94>
    d3ee:	bf00      	nop
    d3f0:	0001096d 	.word	0x0001096d
    d3f4:	0000b589 	.word	0x0000b589
    d3f8:	0000b33d 	.word	0x0000b33d
    d3fc:	0000902d 	.word	0x0000902d
    d400:	00011a65 	.word	0x00011a65
    d404:	0000b421 	.word	0x0000b421
    d408:	00006e05 	.word	0x00006e05
            fill_area2.x1 = coords->x2 - rout + 1;
    d40c:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
    d410:	1c5a      	adds	r2, r3, #1
    d412:	1bd2      	subs	r2, r2, r7
    d414:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
            fill_area2.x2 = coords->x2;
    d418:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            int32_t mask_ofs = (coords->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
    d41c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d41e:	1a9b      	subs	r3, r3, r2
    d420:	3301      	adds	r3, #1
    d422:	f9b5 2010 	ldrsh.w	r2, [r5, #16]
    d426:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
    d42a:	440a      	add	r2, r1
    d42c:	1a9b      	subs	r3, r3, r2
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
    d42e:	f8cd b008 	str.w	fp, [sp, #8]
    d432:	9601      	str	r6, [sp, #4]
    d434:	9400      	str	r4, [sp, #0]
    d436:	9a07      	ldr	r2, [sp, #28]
    d438:	2b00      	cmp	r3, #0
    d43a:	bfa8      	it	ge
    d43c:	18d2      	addge	r2, r2, r3
    d43e:	4613      	mov	r3, r2
    d440:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    d444:	a91e      	add	r1, sp, #120	; 0x78
    d446:	9804      	ldr	r0, [sp, #16]
    d448:	47c8      	blx	r9
            fill_area.y1++;
    d44a:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    d44e:	3301      	adds	r3, #1
    d450:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
            fill_area.y2++;
    d454:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    d458:	3301      	adds	r3, #1
    d45a:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
    d45e:	f108 0801 	add.w	r8, r8, #1
    d462:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d464:	4543      	cmp	r3, r8
    d466:	db4c      	blt.n	d502 <lv_draw_rect+0x1c76>
            _lv_memset_ff(mask_buf, draw_area_w);
    d468:	9909      	ldr	r1, [sp, #36]	; 0x24
    d46a:	9c07      	ldr	r4, [sp, #28]
    d46c:	4620      	mov	r0, r4
    d46e:	4bc7      	ldr	r3, [pc, #796]	; (d78c <lv_draw_rect+0x1f00>)
    d470:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    d472:	8a6a      	ldrh	r2, [r5, #18]
    d474:	4442      	add	r2, r8
    d476:	8a29      	ldrh	r1, [r5, #16]
    d478:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    d47c:	4419      	add	r1, r3
    d47e:	9b08      	ldr	r3, [sp, #32]
    d480:	b212      	sxth	r2, r2
    d482:	b209      	sxth	r1, r1
    d484:	9407      	str	r4, [sp, #28]
    d486:	4620      	mov	r0, r4
    d488:	4cc1      	ldr	r4, [pc, #772]	; (d790 <lv_draw_rect+0x1f04>)
    d48a:	47a0      	blx	r4
    d48c:	4604      	mov	r4, r0
            fill_area2.y1 = fill_area.y1;
    d48e:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    d492:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            fill_area2.y2 = fill_area.y2;
    d496:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    d49a:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
            fill_area2.x1 = coords->x1;
    d49e:	f9ba 3000 	ldrsh.w	r3, [sl]
    d4a2:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
            fill_area2.x2 = coords->x1 + rout - 1;
    d4a6:	3b01      	subs	r3, #1
    d4a8:	443b      	add	r3, r7
    d4aa:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
    d4ae:	f8cd b008 	str.w	fp, [sp, #8]
    d4b2:	9601      	str	r6, [sp, #4]
    d4b4:	9000      	str	r0, [sp, #0]
    d4b6:	9b07      	ldr	r3, [sp, #28]
    d4b8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    d4bc:	a91e      	add	r1, sp, #120	; 0x78
    d4be:	9804      	ldr	r0, [sp, #16]
    d4c0:	47c8      	blx	r9
            if(fill_area2.y2 < coords->y1 + dsc->border_width) {
    d4c2:	f9bd 207e 	ldrsh.w	r2, [sp, #126]	; 0x7e
    d4c6:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
    d4ca:	990c      	ldr	r1, [sp, #48]	; 0x30
    d4cc:	f9b1 1010 	ldrsh.w	r1, [r1, #16]
    d4d0:	440b      	add	r3, r1
    d4d2:	429a      	cmp	r2, r3
    d4d4:	da9a      	bge.n	d40c <lv_draw_rect+0x1b80>
                fill_area2.x1 = coords->x1 + rout;
    d4d6:	f8ba 3000 	ldrh.w	r3, [sl]
    d4da:	443b      	add	r3, r7
    d4dc:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
                fill_area2.x2 = coords->x2 - rout;
    d4e0:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    d4e4:	1bdb      	subs	r3, r3, r7
    d4e6:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
    d4ea:	f8cd b008 	str.w	fp, [sp, #8]
    d4ee:	9601      	str	r6, [sp, #4]
    d4f0:	2301      	movs	r3, #1
    d4f2:	9300      	str	r3, [sp, #0]
    d4f4:	2300      	movs	r3, #0
    d4f6:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    d4fa:	a91e      	add	r1, sp, #120	; 0x78
    d4fc:	9804      	ldr	r0, [sp, #16]
    d4fe:	47c8      	blx	r9
    d500:	e784      	b.n	d40c <lv_draw_rect+0x1b80>
    d502:	4634      	mov	r4, r6
    d504:	465e      	mov	r6, fp
    d506:	f8dd b01c 	ldr.w	fp, [sp, #28]
    d50a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
        int32_t lower_corner_end = coords->y2 - disp_area->y1 - corner_size;
    d50e:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
    d512:	9a06      	ldr	r2, [sp, #24]
    d514:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
    d518:	1ad2      	subs	r2, r2, r3
    d51a:	990d      	ldr	r1, [sp, #52]	; 0x34
    d51c:	1a52      	subs	r2, r2, r1
        lower_corner_end = LV_MATH_MAX(lower_corner_end, draw_area.y1);
    d51e:	f9bd 8062 	ldrsh.w	r8, [sp, #98]	; 0x62
    d522:	4590      	cmp	r8, r2
    d524:	bfb8      	it	lt
    d526:	4690      	movlt	r8, r2
        if(lower_corner_end <= upper_corner_end) lower_corner_end = upper_corner_end + 1;
    d528:	990b      	ldr	r1, [sp, #44]	; 0x2c
    d52a:	4541      	cmp	r1, r8
    d52c:	bfa8      	it	ge
    d52e:	f101 0801 	addge.w	r8, r1, #1
        fill_area.y1 = disp_area->y1 + lower_corner_end;
    d532:	4443      	add	r3, r8
    d534:	b21b      	sxth	r3, r3
    d536:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        fill_area.y2 = fill_area.y1;
    d53a:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
    d53e:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
    d542:	4598      	cmp	r8, r3
    d544:	f300 808d 	bgt.w	d662 <lv_draw_rect+0x1dd6>
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
    d548:	f8df 9248 	ldr.w	r9, [pc, #584]	; d794 <lv_draw_rect+0x1f08>
    d54c:	f8cd b01c 	str.w	fp, [sp, #28]
    d550:	46b3      	mov	fp, r6
    d552:	4626      	mov	r6, r4
    d554:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
    d558:	f8dd a018 	ldr.w	sl, [sp, #24]
    d55c:	e02e      	b.n	d5bc <lv_draw_rect+0x1d30>
            fill_area2.x1 = coords->x2 - rout + 1;
    d55e:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
    d562:	1c5a      	adds	r2, r3, #1
    d564:	1bd2      	subs	r2, r2, r7
    d566:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
            fill_area2.x2 = coords->x2;
    d56a:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            int32_t mask_ofs = (coords->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
    d56e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d570:	1a9b      	subs	r3, r3, r2
    d572:	3301      	adds	r3, #1
    d574:	f9b5 2010 	ldrsh.w	r2, [r5, #16]
    d578:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
    d57c:	440a      	add	r2, r1
    d57e:	1a9b      	subs	r3, r3, r2
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
    d580:	f8cd b008 	str.w	fp, [sp, #8]
    d584:	9601      	str	r6, [sp, #4]
    d586:	9400      	str	r4, [sp, #0]
    d588:	9a07      	ldr	r2, [sp, #28]
    d58a:	2b00      	cmp	r3, #0
    d58c:	bfa8      	it	ge
    d58e:	18d2      	addge	r2, r2, r3
    d590:	4613      	mov	r3, r2
    d592:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    d596:	a91e      	add	r1, sp, #120	; 0x78
    d598:	9804      	ldr	r0, [sp, #16]
    d59a:	47c8      	blx	r9
            fill_area.y1++;
    d59c:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    d5a0:	3301      	adds	r3, #1
    d5a2:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
            fill_area.y2++;
    d5a6:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    d5aa:	3301      	adds	r3, #1
    d5ac:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
    d5b0:	f108 0801 	add.w	r8, r8, #1
    d5b4:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
    d5b8:	4598      	cmp	r8, r3
    d5ba:	dc4c      	bgt.n	d656 <lv_draw_rect+0x1dca>
            _lv_memset_ff(mask_buf, draw_area_w);
    d5bc:	9909      	ldr	r1, [sp, #36]	; 0x24
    d5be:	9c07      	ldr	r4, [sp, #28]
    d5c0:	4620      	mov	r0, r4
    d5c2:	4b72      	ldr	r3, [pc, #456]	; (d78c <lv_draw_rect+0x1f00>)
    d5c4:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    d5c6:	8a6a      	ldrh	r2, [r5, #18]
    d5c8:	4442      	add	r2, r8
    d5ca:	8a29      	ldrh	r1, [r5, #16]
    d5cc:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    d5d0:	4419      	add	r1, r3
    d5d2:	9b08      	ldr	r3, [sp, #32]
    d5d4:	b212      	sxth	r2, r2
    d5d6:	b209      	sxth	r1, r1
    d5d8:	9407      	str	r4, [sp, #28]
    d5da:	4620      	mov	r0, r4
    d5dc:	4c6c      	ldr	r4, [pc, #432]	; (d790 <lv_draw_rect+0x1f04>)
    d5de:	47a0      	blx	r4
    d5e0:	4604      	mov	r4, r0
            fill_area2.x1 = coords->x1;
    d5e2:	f9ba 3000 	ldrsh.w	r3, [sl]
    d5e6:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
            fill_area2.x2 = coords->x1 + rout - 1;
    d5ea:	3b01      	subs	r3, #1
    d5ec:	443b      	add	r3, r7
    d5ee:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            fill_area2.y1 = fill_area.y1;
    d5f2:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    d5f6:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            fill_area2.y2 = fill_area.y2;
    d5fa:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    d5fe:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
    d602:	f8cd b008 	str.w	fp, [sp, #8]
    d606:	9601      	str	r6, [sp, #4]
    d608:	9000      	str	r0, [sp, #0]
    d60a:	9b07      	ldr	r3, [sp, #28]
    d60c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    d610:	a91e      	add	r1, sp, #120	; 0x78
    d612:	9804      	ldr	r0, [sp, #16]
    d614:	47c8      	blx	r9
            if(fill_area2.y2 > coords->y2 - dsc->border_width) {
    d616:	f9bd 207e 	ldrsh.w	r2, [sp, #126]	; 0x7e
    d61a:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
    d61e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    d620:	f9b1 1010 	ldrsh.w	r1, [r1, #16]
    d624:	1a5b      	subs	r3, r3, r1
    d626:	429a      	cmp	r2, r3
    d628:	dd99      	ble.n	d55e <lv_draw_rect+0x1cd2>
                fill_area2.x1 = coords->x1 + rout;
    d62a:	f8ba 3000 	ldrh.w	r3, [sl]
    d62e:	443b      	add	r3, r7
    d630:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
                fill_area2.x2 = coords->x2 - rout;
    d634:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    d638:	1bdb      	subs	r3, r3, r7
    d63a:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
    d63e:	f8cd b008 	str.w	fp, [sp, #8]
    d642:	9601      	str	r6, [sp, #4]
    d644:	2301      	movs	r3, #1
    d646:	9300      	str	r3, [sp, #0]
    d648:	2300      	movs	r3, #0
    d64a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    d64e:	a91e      	add	r1, sp, #120	; 0x78
    d650:	9804      	ldr	r0, [sp, #16]
    d652:	47c8      	blx	r9
    d654:	e783      	b.n	d55e <lv_draw_rect+0x1cd2>
    d656:	4634      	mov	r4, r6
    d658:	465e      	mov	r6, fp
    d65a:	f8dd b01c 	ldr.w	fp, [sp, #28]
    d65e:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
        fill_area.y1 = coords->y1 + corner_size + 1;
    d662:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
    d666:	9906      	ldr	r1, [sp, #24]
    d668:	884b      	ldrh	r3, [r1, #2]
    d66a:	3301      	adds	r3, #1
    d66c:	4413      	add	r3, r2
    d66e:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        fill_area.y2 = coords->y2 - corner_size - 1;
    d672:	88cb      	ldrh	r3, [r1, #6]
    d674:	3b01      	subs	r3, #1
    d676:	1a9b      	subs	r3, r3, r2
    d678:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        fill_area.x1 = coords->x1;
    d67c:	f9b1 3000 	ldrsh.w	r3, [r1]
    d680:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        fill_area.x2 = coords->x1 + dsc->border_width - 1;
    d684:	f8ba 2010 	ldrh.w	r2, [sl, #16]
    d688:	3a01      	subs	r2, #1
    d68a:	4413      	add	r3, r2
    d68c:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
    d690:	9602      	str	r6, [sp, #8]
    d692:	9401      	str	r4, [sp, #4]
    d694:	2701      	movs	r7, #1
    d696:	9700      	str	r7, [sp, #0]
    d698:	2300      	movs	r3, #0
    d69a:	f8bd 9014 	ldrh.w	r9, [sp, #20]
    d69e:	464a      	mov	r2, r9
    d6a0:	a91c      	add	r1, sp, #112	; 0x70
    d6a2:	f8dd 8010 	ldr.w	r8, [sp, #16]
    d6a6:	4640      	mov	r0, r8
    d6a8:	4d3a      	ldr	r5, [pc, #232]	; (d794 <lv_draw_rect+0x1f08>)
    d6aa:	47a8      	blx	r5
        fill_area.x1 = coords->x2 - dsc->border_width + 1;
    d6ac:	9b06      	ldr	r3, [sp, #24]
    d6ae:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
    d6b2:	f8ba 3010 	ldrh.w	r3, [sl, #16]
    d6b6:	1afb      	subs	r3, r7, r3
    d6b8:	4413      	add	r3, r2
    d6ba:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        fill_area.x2 = coords->x2;
    d6be:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
    d6c2:	9602      	str	r6, [sp, #8]
    d6c4:	9401      	str	r4, [sp, #4]
    d6c6:	9700      	str	r7, [sp, #0]
    d6c8:	2300      	movs	r3, #0
    d6ca:	464a      	mov	r2, r9
    d6cc:	a91c      	add	r1, sp, #112	; 0x70
    d6ce:	4640      	mov	r0, r8
    d6d0:	47a8      	blx	r5
    lv_draw_mask_remove_id(mask_rin_id);
    d6d2:	980f      	ldr	r0, [sp, #60]	; 0x3c
    d6d4:	4c30      	ldr	r4, [pc, #192]	; (d798 <lv_draw_rect+0x1f0c>)
    d6d6:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_rout_id);
    d6d8:	980e      	ldr	r0, [sp, #56]	; 0x38
    d6da:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
    d6dc:	4658      	mov	r0, fp
    d6de:	4b2f      	ldr	r3, [pc, #188]	; (d79c <lv_draw_rect+0x1f10>)
    d6e0:	4798      	blx	r3
    d6e2:	f7ff b872 	b.w	c7ca <lv_draw_rect+0xf3e>
        fill_area.x1 = coords->x1;
    d6e6:	9a06      	ldr	r2, [sp, #24]
    d6e8:	f9b2 1000 	ldrsh.w	r1, [r2]
    d6ec:	f8ad 1070 	strh.w	r1, [sp, #112]	; 0x70
        fill_area.x2 = coords->x2;
    d6f0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
    d6f4:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
        fill_area.y1 = disp_area->y1 + draw_area.y1;
    d6f8:	f9bd 0062 	ldrsh.w	r0, [sp, #98]	; 0x62
    d6fc:	8a6b      	ldrh	r3, [r5, #18]
    d6fe:	4403      	add	r3, r0
    d700:	b21b      	sxth	r3, r3
    d702:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        fill_area.y2 = fill_area.y1;
    d706:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
    d70a:	f9ba 3012 	ldrsh.w	r3, [sl, #18]
    d70e:	2b04      	cmp	r3, #4
    d710:	d029      	beq.n	d766 <lv_draw_rect+0x1eda>
        else if(dsc->border_side == LV_BORDER_SIDE_RIGHT) fill_area.x1 = coords->x2 - corner_size;
    d712:	2b08      	cmp	r3, #8
    d714:	d044      	beq.n	d7a0 <lv_draw_rect+0x1f14>
        volatile bool top_only = false;
    d716:	2200      	movs	r2, #0
    d718:	f88d 204e 	strb.w	r2, [sp, #78]	; 0x4e
        volatile bool bottom_only = false;
    d71c:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
    d720:	2b02      	cmp	r3, #2
    d722:	d129      	bne.n	d778 <lv_draw_rect+0x1eec>
    d724:	2301      	movs	r3, #1
    d726:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
        volatile bool normal = !top_only && !bottom_only ? true : false;
    d72a:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
    d72e:	b91b      	cbnz	r3, d738 <lv_draw_rect+0x1eac>
    d730:	f89d 804f 	ldrb.w	r8, [sp, #79]	; 0x4f
    d734:	f088 0801 	eor.w	r8, r8, #1
    d738:	f008 0801 	and.w	r8, r8, #1
    d73c:	f88d 8050 	strb.w	r8, [sp, #80]	; 0x50
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    d740:	4607      	mov	r7, r0
    d742:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
    d746:	4298      	cmp	r0, r3
    d748:	dcc3      	bgt.n	d6d2 <lv_draw_rect+0x1e46>
                _lv_memset_ff(mask_buf, draw_area_w);
    d74a:	f8df 8040 	ldr.w	r8, [pc, #64]	; d78c <lv_draw_rect+0x1f00>
                _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
    d74e:	f8df 9044 	ldr.w	r9, [pc, #68]	; d794 <lv_draw_rect+0x1f08>
    d752:	940a      	str	r4, [sp, #40]	; 0x28
    d754:	f8cd b01c 	str.w	fp, [sp, #28]
    d758:	f8dd b018 	ldr.w	fp, [sp, #24]
    d75c:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
    d760:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    d764:	e04e      	b.n	d804 <lv_draw_rect+0x1f78>
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
    d766:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    d768:	4411      	add	r1, r2
    d76a:	f8ad 1074 	strh.w	r1, [sp, #116]	; 0x74
        volatile bool top_only = false;
    d76e:	2200      	movs	r2, #0
    d770:	f88d 204e 	strb.w	r2, [sp, #78]	; 0x4e
        volatile bool bottom_only = false;
    d774:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
    d778:	2b01      	cmp	r3, #1
    d77a:	d016      	beq.n	d7aa <lv_draw_rect+0x1f1e>
        if(dsc->border_side == (LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM)) {
    d77c:	2b03      	cmp	r3, #3
    d77e:	d1d4      	bne.n	d72a <lv_draw_rect+0x1e9e>
            top_only = true;
    d780:	2301      	movs	r3, #1
    d782:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
            bottom_only = true;
    d786:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    d78a:	e7ce      	b.n	d72a <lv_draw_rect+0x1e9e>
    d78c:	00011ccd 	.word	0x00011ccd
    d790:	0000b379 	.word	0x0000b379
    d794:	00006e05 	.word	0x00006e05
    d798:	0000b3c9 	.word	0x0000b3c9
    d79c:	000116e5 	.word	0x000116e5
        else if(dsc->border_side == LV_BORDER_SIDE_RIGHT) fill_area.x1 = coords->x2 - corner_size;
    d7a0:	990d      	ldr	r1, [sp, #52]	; 0x34
    d7a2:	1a52      	subs	r2, r2, r1
    d7a4:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
    d7a8:	e7e1      	b.n	d76e <lv_draw_rect+0x1ee2>
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
    d7aa:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    d7ae:	e7bc      	b.n	d72a <lv_draw_rect+0x1e9e>
                _lv_memset_ff(mask_buf, draw_area_w);
    d7b0:	9909      	ldr	r1, [sp, #36]	; 0x24
    d7b2:	9c07      	ldr	r4, [sp, #28]
    d7b4:	4620      	mov	r0, r4
    d7b6:	47c0      	blx	r8
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    d7b8:	8a6a      	ldrh	r2, [r5, #18]
    d7ba:	443a      	add	r2, r7
    d7bc:	8a29      	ldrh	r1, [r5, #16]
    d7be:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    d7c2:	4419      	add	r1, r3
    d7c4:	9b08      	ldr	r3, [sp, #32]
    d7c6:	b212      	sxth	r2, r2
    d7c8:	b209      	sxth	r1, r1
    d7ca:	9407      	str	r4, [sp, #28]
    d7cc:	4620      	mov	r0, r4
    d7ce:	4c98      	ldr	r4, [pc, #608]	; (da30 <lv_draw_rect+0x21a4>)
    d7d0:	47a0      	blx	r4
                _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
    d7d2:	9602      	str	r6, [sp, #8]
    d7d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d7d6:	9201      	str	r2, [sp, #4]
    d7d8:	9000      	str	r0, [sp, #0]
    d7da:	9b07      	ldr	r3, [sp, #28]
    d7dc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    d7e0:	a91c      	add	r1, sp, #112	; 0x70
    d7e2:	9804      	ldr	r0, [sp, #16]
    d7e4:	47c8      	blx	r9
            fill_area.y1++;
    d7e6:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    d7ea:	3301      	adds	r3, #1
    d7ec:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
            fill_area.y2++;
    d7f0:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    d7f4:	3301      	adds	r3, #1
    d7f6:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    d7fa:	3701      	adds	r7, #1
    d7fc:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
    d800:	429f      	cmp	r7, r3
    d802:	dc1a      	bgt.n	d83a <lv_draw_rect+0x1fae>
            if(normal ||
    d804:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
    d808:	2b00      	cmp	r3, #0
    d80a:	d1d1      	bne.n	d7b0 <lv_draw_rect+0x1f24>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
    d80c:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
            if(normal ||
    d810:	b133      	cbz	r3, d820 <lv_draw_rect+0x1f94>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
    d812:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
    d816:	f9bb 3002 	ldrsh.w	r3, [fp, #2]
    d81a:	4453      	add	r3, sl
    d81c:	429a      	cmp	r2, r3
    d81e:	ddc7      	ble.n	d7b0 <lv_draw_rect+0x1f24>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
    d820:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
    d824:	2b00      	cmp	r3, #0
    d826:	d0de      	beq.n	d7e6 <lv_draw_rect+0x1f5a>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
    d828:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
    d82c:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
    d830:	eba3 030a 	sub.w	r3, r3, sl
    d834:	429a      	cmp	r2, r3
    d836:	dbd6      	blt.n	d7e6 <lv_draw_rect+0x1f5a>
    d838:	e7ba      	b.n	d7b0 <lv_draw_rect+0x1f24>
    d83a:	f8dd b01c 	ldr.w	fp, [sp, #28]
    d83e:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
    d842:	e746      	b.n	d6d2 <lv_draw_rect+0x1e46>

    lv_point_t s;
    _lv_txt_get_size(&s, dsc->value_str, dsc->value_font, dsc->value_letter_space, dsc->value_line_space, LV_COORD_MAX,
    d844:	f9ba 304c 	ldrsh.w	r3, [sl, #76]	; 0x4c
    d848:	2400      	movs	r4, #0
    d84a:	9402      	str	r4, [sp, #8]
    d84c:	f647 4218 	movw	r2, #31768	; 0x7c18
    d850:	9201      	str	r2, [sp, #4]
    d852:	f9ba 204e 	ldrsh.w	r2, [sl, #78]	; 0x4e
    d856:	9200      	str	r2, [sp, #0]
    d858:	f8da 2040 	ldr.w	r2, [sl, #64]	; 0x40
    d85c:	a81c      	add	r0, sp, #112	; 0x70
    d85e:	4d75      	ldr	r5, [pc, #468]	; (da34 <lv_draw_rect+0x21a8>)
    d860:	47a8      	blx	r5
                     LV_TXT_FLAG_NONE);

    lv_area_t value_area;
    value_area.x1 = 0;
    d862:	f8ad 4088 	strh.w	r4, [sp, #136]	; 0x88
    value_area.y1 = 0;
    d866:	f8ad 408a 	strh.w	r4, [sp, #138]	; 0x8a
    value_area.x2 = s.x - 1;
    d86a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
    d86e:	3b01      	subs	r3, #1
    d870:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
    value_area.y2 = s.y - 1;
    d874:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    d878:	3b01      	subs	r3, #1
    d87a:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e

    lv_point_t p_align;
    _lv_area_align(coords, &value_area, dsc->value_align, &p_align);
    d87e:	ab1e      	add	r3, sp, #120	; 0x78
    d880:	f89a 2050 	ldrb.w	r2, [sl, #80]	; 0x50
    d884:	a922      	add	r1, sp, #136	; 0x88
    d886:	9806      	ldr	r0, [sp, #24]
    d888:	4d6b      	ldr	r5, [pc, #428]	; (da38 <lv_draw_rect+0x21ac>)
    d88a:	47a8      	blx	r5

    value_area.x1 += p_align.x + dsc->value_ofs_x;
    d88c:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
    d890:	f8ba 3048 	ldrh.w	r3, [sl, #72]	; 0x48
    d894:	441a      	add	r2, r3
    d896:	b292      	uxth	r2, r2
    d898:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
    d89c:	4413      	add	r3, r2
    d89e:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
    value_area.y1 += p_align.y + dsc->value_ofs_y;
    d8a2:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
    d8a6:	f8ba 104a 	ldrh.w	r1, [sl, #74]	; 0x4a
    d8aa:	440b      	add	r3, r1
    d8ac:	b29b      	uxth	r3, r3
    d8ae:	f8bd 108a 	ldrh.w	r1, [sp, #138]	; 0x8a
    d8b2:	4419      	add	r1, r3
    d8b4:	f8ad 108a 	strh.w	r1, [sp, #138]	; 0x8a
    value_area.x2 += p_align.x + dsc->value_ofs_x;
    d8b8:	f8bd 108c 	ldrh.w	r1, [sp, #140]	; 0x8c
    d8bc:	440a      	add	r2, r1
    d8be:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
    value_area.y2 += p_align.y + dsc->value_ofs_y;
    d8c2:	f8bd 208e 	ldrh.w	r2, [sp, #142]	; 0x8e
    d8c6:	4413      	add	r3, r2
    d8c8:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
    d8cc:	a829      	add	r0, sp, #164	; 0xa4
    d8ce:	4b5b      	ldr	r3, [pc, #364]	; (da3c <lv_draw_rect+0x21b0>)
    d8d0:	4798      	blx	r3
    label_dsc.font = dsc->value_font;
    d8d2:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
    d8d6:	932a      	str	r3, [sp, #168]	; 0xa8
    label_dsc.letter_space = dsc->value_letter_space;
    d8d8:	f8ba 304c 	ldrh.w	r3, [sl, #76]	; 0x4c
    d8dc:	f8ad 30b0 	strh.w	r3, [sp, #176]	; 0xb0
    label_dsc.line_space = dsc->value_line_space;
    d8e0:	f8ba 304e 	ldrh.w	r3, [sl, #78]	; 0x4e
    d8e4:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
    label_dsc.color = dsc->value_color;
    d8e8:	f8ba 3046 	ldrh.w	r3, [sl, #70]	; 0x46
    d8ec:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
    label_dsc.opa = dsc->value_opa;
    d8f0:	f89a 3044 	ldrb.w	r3, [sl, #68]	; 0x44
    d8f4:	f88d 30ac 	strb.w	r3, [sp, #172]	; 0xac

    lv_draw_label(&value_area, clip, &label_dsc, dsc->value_str, NULL);
    d8f8:	9400      	str	r4, [sp, #0]
    d8fa:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
    d8fe:	aa29      	add	r2, sp, #164	; 0xa4
    d900:	9904      	ldr	r1, [sp, #16]
    d902:	a822      	add	r0, sp, #136	; 0x88
    d904:	4c4e      	ldr	r4, [pc, #312]	; (da40 <lv_draw_rect+0x21b4>)
    d906:	47a0      	blx	r4
    d908:	f7fe bf67 	b.w	c7da <lv_draw_rect+0xf4e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    d90c:	1c72      	adds	r2, r6, #1
    d90e:	9b06      	ldr	r3, [sp, #24]
    d910:	1ad2      	subs	r2, r2, r3
    int32_t inner_w = lv_area_get_width(&area_inner);
    d912:	b212      	sxth	r2, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    d914:	1c6b      	adds	r3, r5, #1
    d916:	9907      	ldr	r1, [sp, #28]
    d918:	1a5b      	subs	r3, r3, r1
    int32_t inner_h = lv_area_get_height(&area_inner);
    d91a:	b21b      	sxth	r3, r3
    int32_t short_side = LV_MATH_MIN(inner_w, inner_h);
    d91c:	429a      	cmp	r2, r3
    d91e:	bfa8      	it	ge
    d920:	461a      	movge	r2, r3
    if(rin > short_side >> 1) rin = short_side >> 1;
    d922:	1052      	asrs	r2, r2, #1
    d924:	9b08      	ldr	r3, [sp, #32]
    d926:	429a      	cmp	r2, r3
    d928:	bfa8      	it	ge
    d92a:	461a      	movge	r2, r3
    int32_t rout = rin + dsc->outline_width;
    d92c:	9b05      	ldr	r3, [sp, #20]
    d92e:	4413      	add	r3, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    d930:	3701      	adds	r7, #1
    d932:	990a      	ldr	r1, [sp, #40]	; 0x28
    d934:	1a79      	subs	r1, r7, r1
    int32_t coords_out_w = lv_area_get_width(&area_outer);
    d936:	b208      	sxth	r0, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    d938:	1c61      	adds	r1, r4, #1
    d93a:	eba1 0108 	sub.w	r1, r1, r8
    int32_t coords_out_h = lv_area_get_height(&area_outer);
    d93e:	b209      	sxth	r1, r1
    short_side = LV_MATH_MIN(coords_out_w, coords_out_h);
    d940:	4281      	cmp	r1, r0
    d942:	bfa8      	it	ge
    d944:	4601      	movge	r1, r0
    if(rout > short_side >> 1) rout = short_side >> 1;
    d946:	1049      	asrs	r1, r1, #1
    d948:	4299      	cmp	r1, r3
    d94a:	bfa8      	it	ge
    d94c:	4619      	movge	r1, r3
    d94e:	460f      	mov	r7, r1
    d950:	9106      	str	r1, [sp, #24]
    draw_area.x1 -= disp_area->x1;
    d952:	f8b9 0010 	ldrh.w	r0, [r9, #16]
    d956:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    d95a:	1a1b      	subs	r3, r3, r0
    d95c:	b299      	uxth	r1, r3
    d95e:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
    draw_area.y1 -= disp_area->y1;
    d962:	f8b9 4012 	ldrh.w	r4, [r9, #18]
    d966:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
    d96a:	1b1b      	subs	r3, r3, r4
    d96c:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    draw_area.x2 -= disp_area->x1;
    d970:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
    d974:	1a1b      	subs	r3, r3, r0
    d976:	b29b      	uxth	r3, r3
    d978:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    draw_area.y2 -= disp_area->y1;
    d97c:	f8bd 006e 	ldrh.w	r0, [sp, #110]	; 0x6e
    d980:	1b00      	subs	r0, r0, r4
    d982:	f8ad 006e 	strh.w	r0, [sp, #110]	; 0x6e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    d986:	3301      	adds	r3, #1
    d988:	1a5b      	subs	r3, r3, r1
    d98a:	b21b      	sxth	r3, r3
    d98c:	461e      	mov	r6, r3
    d98e:	9307      	str	r3, [sp, #28]
    lv_draw_mask_radius_init(&mask_rin_param, &area_inner, rin, true);
    d990:	2301      	movs	r3, #1
    d992:	a916      	add	r1, sp, #88	; 0x58
    d994:	a822      	add	r0, sp, #136	; 0x88
    d996:	4d2b      	ldr	r5, [pc, #172]	; (da44 <lv_draw_rect+0x21b8>)
    d998:	47a8      	blx	r5
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
    d99a:	2100      	movs	r1, #0
    d99c:	a822      	add	r0, sp, #136	; 0x88
    d99e:	4c2a      	ldr	r4, [pc, #168]	; (da48 <lv_draw_rect+0x21bc>)
    d9a0:	47a0      	blx	r4
    d9a2:	900c      	str	r0, [sp, #48]	; 0x30
    lv_draw_mask_radius_init(&mask_rout_param, &area_outer, rout, false);
    d9a4:	2300      	movs	r3, #0
    d9a6:	b23a      	sxth	r2, r7
    d9a8:	a918      	add	r1, sp, #96	; 0x60
    d9aa:	a829      	add	r0, sp, #164	; 0xa4
    d9ac:	47a8      	blx	r5
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
    d9ae:	2100      	movs	r1, #0
    d9b0:	a829      	add	r0, sp, #164	; 0xa4
    d9b2:	47a0      	blx	r4
    d9b4:	900d      	str	r0, [sp, #52]	; 0x34
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
    d9b6:	9608      	str	r6, [sp, #32]
    d9b8:	4630      	mov	r0, r6
    d9ba:	4b24      	ldr	r3, [pc, #144]	; (da4c <lv_draw_rect+0x21c0>)
    d9bc:	4798      	blx	r3
    d9be:	900b      	str	r0, [sp, #44]	; 0x2c
    int32_t corner_size = LV_MATH_MAX(rout, dsc->outline_width - 1);
    d9c0:	f9ba 3018 	ldrsh.w	r3, [sl, #24]
    lv_color_t color = dsc->outline_color;
    d9c4:	f8ba 2016 	ldrh.w	r2, [sl, #22]
    d9c8:	f8ad 2014 	strh.w	r2, [sp, #20]
    lv_blend_mode_t blend_mode = dsc->outline_blend_mode;
    d9cc:	f89a 501d 	ldrb.w	r5, [sl, #29]
    if(simple_mode) {
    d9d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d9d2:	2a00      	cmp	r2, #0
    d9d4:	f040 81a6 	bne.w	dd24 <lv_draw_rect+0x2498>
    int32_t corner_size = LV_MATH_MAX(rout, dsc->outline_width - 1);
    d9d8:	3b01      	subs	r3, #1
    d9da:	42bb      	cmp	r3, r7
    d9dc:	bfb8      	it	lt
    d9de:	463b      	movlt	r3, r7
    d9e0:	4619      	mov	r1, r3
    d9e2:	930e      	str	r3, [sp, #56]	; 0x38
        int32_t upper_corner_end = area_outer.y1 - disp_area->y1 + corner_size;
    d9e4:	f9b9 3012 	ldrsh.w	r3, [r9, #18]
    d9e8:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
    d9ec:	1ad2      	subs	r2, r2, r3
    d9ee:	440a      	add	r2, r1
    d9f0:	4611      	mov	r1, r2
    d9f2:	9209      	str	r2, [sp, #36]	; 0x24
        fill_area.x1 = area_outer.x1;
    d9f4:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
    d9f8:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
        fill_area.x2 = area_outer.x2;
    d9fc:	f8bd 2064 	ldrh.w	r2, [sp, #100]	; 0x64
    da00:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
        fill_area.y1 = disp_area->y1 + draw_area.y1;
    da04:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
    da08:	4413      	add	r3, r2
    da0a:	b21b      	sxth	r3, r3
    da0c:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        fill_area.y2 = fill_area.y1;
    da10:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
    da14:	4616      	mov	r6, r2
    da16:	4291      	cmp	r1, r2
    da18:	f2c0 809d 	blt.w	db56 <lv_draw_rect+0x22ca>
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
    da1c:	f8df 8030 	ldr.w	r8, [pc, #48]	; da50 <lv_draw_rect+0x21c4>
    da20:	462b      	mov	r3, r5
    da22:	465d      	mov	r5, fp
    da24:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
    da28:	4682      	mov	sl, r0
    da2a:	469b      	mov	fp, r3
    da2c:	e03f      	b.n	daae <lv_draw_rect+0x2222>
    da2e:	bf00      	nop
    da30:	0000b379 	.word	0x0000b379
    da34:	000127c1 	.word	0x000127c1
    da38:	00010a25 	.word	0x00010a25
    da3c:	00008fd5 	.word	0x00008fd5
    da40:	0000902d 	.word	0x0000902d
    da44:	0000b589 	.word	0x0000b589
    da48:	0000b33d 	.word	0x0000b33d
    da4c:	00011a65 	.word	0x00011a65
    da50:	00006e05 	.word	0x00006e05
            fill_area2.x1 = area_outer.x2 - rout + 1;
    da54:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
    da58:	1c5a      	adds	r2, r3, #1
    da5a:	1b14      	subs	r4, r2, r4
    da5c:	f8ad 4078 	strh.w	r4, [sp, #120]	; 0x78
            fill_area2.x2 = area_outer.x2;
    da60:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            int32_t mask_ofs = (area_outer.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
    da64:	9a06      	ldr	r2, [sp, #24]
    da66:	1a9b      	subs	r3, r3, r2
    da68:	3301      	adds	r3, #1
    da6a:	f9b9 2010 	ldrsh.w	r2, [r9, #16]
    da6e:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
    da72:	440a      	add	r2, r1
    da74:	1a9b      	subs	r3, r3, r2
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
    da76:	f8cd b008 	str.w	fp, [sp, #8]
    da7a:	9501      	str	r5, [sp, #4]
    da7c:	9700      	str	r7, [sp, #0]
    da7e:	2b00      	cmp	r3, #0
    da80:	bfac      	ite	ge
    da82:	4453      	addge	r3, sl
    da84:	f10a 0300 	addlt.w	r3, sl, #0
    da88:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    da8c:	a91e      	add	r1, sp, #120	; 0x78
    da8e:	9804      	ldr	r0, [sp, #16]
    da90:	47c0      	blx	r8
            fill_area.y1++;
    da92:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    da96:	3301      	adds	r3, #1
    da98:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
            fill_area.y2++;
    da9c:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    daa0:	3301      	adds	r3, #1
    daa2:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
    daa6:	3601      	adds	r6, #1
    daa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    daaa:	42b3      	cmp	r3, r6
    daac:	db4e      	blt.n	db4c <lv_draw_rect+0x22c0>
            _lv_memset_ff(mask_buf, draw_area_w);
    daae:	9908      	ldr	r1, [sp, #32]
    dab0:	4650      	mov	r0, sl
    dab2:	4bcc      	ldr	r3, [pc, #816]	; (dde4 <lv_draw_rect+0x2558>)
    dab4:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    dab6:	f8b9 2012 	ldrh.w	r2, [r9, #18]
    daba:	4432      	add	r2, r6
    dabc:	f8b9 1010 	ldrh.w	r1, [r9, #16]
    dac0:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    dac4:	4419      	add	r1, r3
    dac6:	9b07      	ldr	r3, [sp, #28]
    dac8:	b212      	sxth	r2, r2
    daca:	b209      	sxth	r1, r1
    dacc:	4650      	mov	r0, sl
    dace:	4cc6      	ldr	r4, [pc, #792]	; (dde8 <lv_draw_rect+0x255c>)
    dad0:	47a0      	blx	r4
    dad2:	4607      	mov	r7, r0
            fill_area2.y1 = fill_area.y1;
    dad4:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    dad8:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            fill_area2.y2 = fill_area.y2;
    dadc:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    dae0:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
            fill_area2.x1 = area_outer.x1;
    dae4:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
    dae8:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
            fill_area2.x2 = area_outer.x1 + rout - 1;
    daec:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    daf0:	3b01      	subs	r3, #1
    daf2:	4423      	add	r3, r4
    daf4:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
    daf8:	f8cd b008 	str.w	fp, [sp, #8]
    dafc:	9501      	str	r5, [sp, #4]
    dafe:	9000      	str	r0, [sp, #0]
    db00:	4653      	mov	r3, sl
    db02:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    db06:	a91e      	add	r1, sp, #120	; 0x78
    db08:	9804      	ldr	r0, [sp, #16]
    db0a:	47c0      	blx	r8
            if(fill_area2.y2 < area_outer.y1 + dsc->outline_width) {
    db0c:	f9bd 207e 	ldrsh.w	r2, [sp, #126]	; 0x7e
    db10:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
    db14:	990a      	ldr	r1, [sp, #40]	; 0x28
    db16:	f9b1 1018 	ldrsh.w	r1, [r1, #24]
    db1a:	440b      	add	r3, r1
    db1c:	429a      	cmp	r2, r3
    db1e:	da99      	bge.n	da54 <lv_draw_rect+0x21c8>
                fill_area2.x1 = area_outer.x1 + rout;
    db20:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    db24:	4423      	add	r3, r4
    db26:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
                fill_area2.x2 = area_outer.x2 - rout;
    db2a:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
    db2e:	1b1b      	subs	r3, r3, r4
    db30:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
    db34:	f8cd b008 	str.w	fp, [sp, #8]
    db38:	9501      	str	r5, [sp, #4]
    db3a:	2301      	movs	r3, #1
    db3c:	9300      	str	r3, [sp, #0]
    db3e:	2300      	movs	r3, #0
    db40:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    db44:	a91e      	add	r1, sp, #120	; 0x78
    db46:	9804      	ldr	r0, [sp, #16]
    db48:	47c0      	blx	r8
    db4a:	e783      	b.n	da54 <lv_draw_rect+0x21c8>
    db4c:	465b      	mov	r3, fp
    db4e:	46ab      	mov	fp, r5
    db50:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    db54:	461d      	mov	r5, r3
        int32_t lower_corner_end = area_outer.y2 - disp_area->y1 - corner_size;
    db56:	f9b9 3012 	ldrsh.w	r3, [r9, #18]
    db5a:	f9bd 6066 	ldrsh.w	r6, [sp, #102]	; 0x66
    db5e:	1af6      	subs	r6, r6, r3
    db60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    db62:	1ab6      	subs	r6, r6, r2
        if(lower_corner_end <= upper_corner_end) lower_corner_end = upper_corner_end + 1;
    db64:	9909      	ldr	r1, [sp, #36]	; 0x24
    db66:	460a      	mov	r2, r1
    db68:	42b1      	cmp	r1, r6
    db6a:	bfa4      	itt	ge
    db6c:	3201      	addge	r2, #1
    db6e:	4616      	movge	r6, r2
        fill_area.y1 = disp_area->y1 + lower_corner_end;
    db70:	4433      	add	r3, r6
    db72:	b21b      	sxth	r3, r3
    db74:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        fill_area.y2 = fill_area.y1;
    db78:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
    db7c:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
    db80:	429e      	cmp	r6, r3
    db82:	f300 808c 	bgt.w	dc9e <lv_draw_rect+0x2412>
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
    db86:	f8df 8264 	ldr.w	r8, [pc, #612]	; ddec <lv_draw_rect+0x2560>
    db8a:	462b      	mov	r3, r5
    db8c:	465d      	mov	r5, fp
    db8e:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    db92:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
    db96:	469b      	mov	fp, r3
    db98:	e02d      	b.n	dbf6 <lv_draw_rect+0x236a>
            fill_area2.x1 = area_outer.x2 - rout + 1;
    db9a:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
    db9e:	1c5a      	adds	r2, r3, #1
    dba0:	1b14      	subs	r4, r2, r4
    dba2:	f8ad 4078 	strh.w	r4, [sp, #120]	; 0x78
            fill_area2.x2 = area_outer.x2;
    dba6:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            int32_t mask_ofs = (area_outer.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
    dbaa:	9a06      	ldr	r2, [sp, #24]
    dbac:	1a9b      	subs	r3, r3, r2
    dbae:	3301      	adds	r3, #1
    dbb0:	f9b9 2010 	ldrsh.w	r2, [r9, #16]
    dbb4:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
    dbb8:	440a      	add	r2, r1
    dbba:	1a9b      	subs	r3, r3, r2
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
    dbbc:	f8cd b008 	str.w	fp, [sp, #8]
    dbc0:	9501      	str	r5, [sp, #4]
    dbc2:	9700      	str	r7, [sp, #0]
    dbc4:	2b00      	cmp	r3, #0
    dbc6:	bfac      	ite	ge
    dbc8:	4453      	addge	r3, sl
    dbca:	f10a 0300 	addlt.w	r3, sl, #0
    dbce:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    dbd2:	a91e      	add	r1, sp, #120	; 0x78
    dbd4:	9804      	ldr	r0, [sp, #16]
    dbd6:	47c0      	blx	r8
            fill_area.y1++;
    dbd8:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    dbdc:	3301      	adds	r3, #1
    dbde:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
            fill_area.y2++;
    dbe2:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    dbe6:	3301      	adds	r3, #1
    dbe8:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
    dbec:	3601      	adds	r6, #1
    dbee:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
    dbf2:	429e      	cmp	r6, r3
    dbf4:	dc4e      	bgt.n	dc94 <lv_draw_rect+0x2408>
            _lv_memset_ff(mask_buf, draw_area_w);
    dbf6:	9908      	ldr	r1, [sp, #32]
    dbf8:	4650      	mov	r0, sl
    dbfa:	4b7a      	ldr	r3, [pc, #488]	; (dde4 <lv_draw_rect+0x2558>)
    dbfc:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    dbfe:	f8b9 2012 	ldrh.w	r2, [r9, #18]
    dc02:	4432      	add	r2, r6
    dc04:	f8b9 1010 	ldrh.w	r1, [r9, #16]
    dc08:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    dc0c:	4419      	add	r1, r3
    dc0e:	9b07      	ldr	r3, [sp, #28]
    dc10:	b212      	sxth	r2, r2
    dc12:	b209      	sxth	r1, r1
    dc14:	4650      	mov	r0, sl
    dc16:	4c74      	ldr	r4, [pc, #464]	; (dde8 <lv_draw_rect+0x255c>)
    dc18:	47a0      	blx	r4
    dc1a:	4607      	mov	r7, r0
            fill_area2.x1 = area_outer.x1;
    dc1c:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
    dc20:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
            fill_area2.x2 = area_outer.x1 + rout - 1;
    dc24:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    dc28:	3b01      	subs	r3, #1
    dc2a:	4423      	add	r3, r4
    dc2c:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            fill_area2.y1 = fill_area.y1;
    dc30:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    dc34:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            fill_area2.y2 = fill_area.y2;
    dc38:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    dc3c:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
    dc40:	f8cd b008 	str.w	fp, [sp, #8]
    dc44:	9501      	str	r5, [sp, #4]
    dc46:	9000      	str	r0, [sp, #0]
    dc48:	4653      	mov	r3, sl
    dc4a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    dc4e:	a91e      	add	r1, sp, #120	; 0x78
    dc50:	9804      	ldr	r0, [sp, #16]
    dc52:	47c0      	blx	r8
            if(fill_area2.y2 > area_outer.y2 - dsc->outline_width) {
    dc54:	f9bd 207e 	ldrsh.w	r2, [sp, #126]	; 0x7e
    dc58:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
    dc5c:	9909      	ldr	r1, [sp, #36]	; 0x24
    dc5e:	f9b1 1018 	ldrsh.w	r1, [r1, #24]
    dc62:	1a5b      	subs	r3, r3, r1
    dc64:	429a      	cmp	r2, r3
    dc66:	dd98      	ble.n	db9a <lv_draw_rect+0x230e>
                fill_area2.x1 = area_outer.x1 + rout;
    dc68:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    dc6c:	4423      	add	r3, r4
    dc6e:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
                fill_area2.x2 = area_outer.x2 - rout;
    dc72:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
    dc76:	1b1b      	subs	r3, r3, r4
    dc78:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
    dc7c:	f8cd b008 	str.w	fp, [sp, #8]
    dc80:	9501      	str	r5, [sp, #4]
    dc82:	2301      	movs	r3, #1
    dc84:	9300      	str	r3, [sp, #0]
    dc86:	2300      	movs	r3, #0
    dc88:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    dc8c:	a91e      	add	r1, sp, #120	; 0x78
    dc8e:	9804      	ldr	r0, [sp, #16]
    dc90:	47c0      	blx	r8
    dc92:	e782      	b.n	db9a <lv_draw_rect+0x230e>
    dc94:	465b      	mov	r3, fp
    dc96:	46ab      	mov	fp, r5
    dc98:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    dc9c:	461d      	mov	r5, r3
        fill_area.y1 = area_outer.y1 + corner_size + 1;
    dc9e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    dca2:	f8bd 2062 	ldrh.w	r2, [sp, #98]	; 0x62
    dca6:	3201      	adds	r2, #1
    dca8:	441a      	add	r2, r3
    dcaa:	f8ad 2072 	strh.w	r2, [sp, #114]	; 0x72
        fill_area.y2 = area_outer.y2 - corner_size - 1;
    dcae:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
    dcb2:	3a01      	subs	r2, #1
    dcb4:	1ad3      	subs	r3, r2, r3
    dcb6:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        fill_area.x1 = area_outer.x1;
    dcba:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
    dcbe:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        fill_area.x2 = area_outer.x1 + dsc->outline_width - 1;
    dcc2:	3b01      	subs	r3, #1
    dcc4:	f8ba 2018 	ldrh.w	r2, [sl, #24]
    dcc8:	4413      	add	r3, r2
    dcca:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
    dcce:	9502      	str	r5, [sp, #8]
    dcd0:	f8cd b004 	str.w	fp, [sp, #4]
    dcd4:	2601      	movs	r6, #1
    dcd6:	9600      	str	r6, [sp, #0]
    dcd8:	2300      	movs	r3, #0
    dcda:	f8bd 8014 	ldrh.w	r8, [sp, #20]
    dcde:	4642      	mov	r2, r8
    dce0:	a91c      	add	r1, sp, #112	; 0x70
    dce2:	9f04      	ldr	r7, [sp, #16]
    dce4:	4638      	mov	r0, r7
    dce6:	4c41      	ldr	r4, [pc, #260]	; (ddec <lv_draw_rect+0x2560>)
    dce8:	47a0      	blx	r4
        fill_area.x1 = area_outer.x2 - dsc->outline_width + 1;
    dcea:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
    dcee:	1993      	adds	r3, r2, r6
    dcf0:	f8ba 1018 	ldrh.w	r1, [sl, #24]
    dcf4:	1a5b      	subs	r3, r3, r1
    dcf6:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        fill_area.x2 = area_outer.x2;
    dcfa:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
    dcfe:	9502      	str	r5, [sp, #8]
    dd00:	f8cd b004 	str.w	fp, [sp, #4]
    dd04:	9600      	str	r6, [sp, #0]
    dd06:	2300      	movs	r3, #0
    dd08:	4642      	mov	r2, r8
    dd0a:	a91c      	add	r1, sp, #112	; 0x70
    dd0c:	4638      	mov	r0, r7
    dd0e:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_rin_id);
    dd10:	980c      	ldr	r0, [sp, #48]	; 0x30
    dd12:	4c37      	ldr	r4, [pc, #220]	; (ddf0 <lv_draw_rect+0x2564>)
    dd14:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_rout_id);
    dd16:	980d      	ldr	r0, [sp, #52]	; 0x34
    dd18:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
    dd1a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    dd1c:	4b35      	ldr	r3, [pc, #212]	; (ddf4 <lv_draw_rect+0x2568>)
    dd1e:	4798      	blx	r3
    dd20:	f7fe bdce 	b.w	c8c0 <lv_draw_rect+0x1034>
        fill_area.x1 = area_outer.x1;
    dd24:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    dd28:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        fill_area.x2 = area_outer.x2;
    dd2c:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
    dd30:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
        fill_area.y1 = disp_area->y1 + draw_area.y1;
    dd34:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
    dd38:	f8b9 3012 	ldrh.w	r3, [r9, #18]
    dd3c:	4413      	add	r3, r2
    dd3e:	b21b      	sxth	r3, r3
    dd40:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        fill_area.y2 = fill_area.y1;
    dd44:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    dd48:	4614      	mov	r4, r2
    dd4a:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
    dd4e:	429a      	cmp	r2, r3
    dd50:	dcde      	bgt.n	dd10 <lv_draw_rect+0x2484>
            _lv_memset_ff(mask_buf, draw_area_w);
    dd52:	f8df 8090 	ldr.w	r8, [pc, #144]	; dde4 <lv_draw_rect+0x2558>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    dd56:	4f24      	ldr	r7, [pc, #144]	; (dde8 <lv_draw_rect+0x255c>)
            _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
    dd58:	4e24      	ldr	r6, [pc, #144]	; (ddec <lv_draw_rect+0x2560>)
    dd5a:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
    dd5e:	462b      	mov	r3, r5
    dd60:	465d      	mov	r5, fp
    dd62:	469b      	mov	fp, r3
            _lv_memset_ff(mask_buf, draw_area_w);
    dd64:	9908      	ldr	r1, [sp, #32]
    dd66:	4650      	mov	r0, sl
    dd68:	47c0      	blx	r8
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    dd6a:	f8b9 2012 	ldrh.w	r2, [r9, #18]
    dd6e:	4422      	add	r2, r4
    dd70:	f8b9 1010 	ldrh.w	r1, [r9, #16]
    dd74:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    dd78:	4419      	add	r1, r3
    dd7a:	9b07      	ldr	r3, [sp, #28]
    dd7c:	b212      	sxth	r2, r2
    dd7e:	b209      	sxth	r1, r1
    dd80:	4650      	mov	r0, sl
    dd82:	47b8      	blx	r7
            _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
    dd84:	f8cd b008 	str.w	fp, [sp, #8]
    dd88:	9501      	str	r5, [sp, #4]
    dd8a:	9000      	str	r0, [sp, #0]
    dd8c:	4653      	mov	r3, sl
    dd8e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    dd92:	a91c      	add	r1, sp, #112	; 0x70
    dd94:	9804      	ldr	r0, [sp, #16]
    dd96:	47b0      	blx	r6
            fill_area.y1++;
    dd98:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    dd9c:	3301      	adds	r3, #1
    dd9e:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
            fill_area.y2++;
    dda2:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    dda6:	3301      	adds	r3, #1
    dda8:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    ddac:	3401      	adds	r4, #1
    ddae:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
    ddb2:	429c      	cmp	r4, r3
    ddb4:	ddd6      	ble.n	dd64 <lv_draw_rect+0x24d8>
    ddb6:	e7ab      	b.n	dd10 <lv_draw_rect+0x2484>
    _lv_mem_buf_release(mask_line);
    ddb8:	980c      	ldr	r0, [sp, #48]	; 0x30
    ddba:	4b0e      	ldr	r3, [pc, #56]	; (ddf4 <lv_draw_rect+0x2568>)
    ddbc:	4798      	blx	r3
        for(i = 0; i < size * size; i++) {
    ddbe:	fb07 f707 	mul.w	r7, r7, r7
    ddc2:	2f00      	cmp	r7, #0
    ddc4:	f43d af0a 	beq.w	bbdc <lv_draw_rect+0x350>
    ddc8:	980a      	ldr	r0, [sp, #40]	; 0x28
    ddca:	4602      	mov	r2, r0
    ddcc:	1e41      	subs	r1, r0, #1
    ddce:	eb00 0047 	add.w	r0, r0, r7, lsl #1
            res_buf[i] = (sh_buf[i] >> SHADOW_UPSACALE_SHIFT);
    ddd2:	f832 3b02 	ldrh.w	r3, [r2], #2
    ddd6:	099b      	lsrs	r3, r3, #6
    ddd8:	f801 3f01 	strb.w	r3, [r1, #1]!
        for(i = 0; i < size * size; i++) {
    dddc:	4290      	cmp	r0, r2
    ddde:	d1f8      	bne.n	ddd2 <lv_draw_rect+0x2546>
    dde0:	f7fd befc 	b.w	bbdc <lv_draw_rect+0x350>
    dde4:	00011ccd 	.word	0x00011ccd
    dde8:	0000b379 	.word	0x0000b379
    ddec:	00006e05 	.word	0x00006e05
    ddf0:	0000b3c9 	.word	0x0000b3c9
    ddf4:	000116e5 	.word	0x000116e5
    lv_opa_t * mask_line = _lv_mem_buf_get(size);
    ddf8:	9707      	str	r7, [sp, #28]
    ddfa:	4638      	mov	r0, r7
    ddfc:	4b0b      	ldr	r3, [pc, #44]	; (de2c <lv_draw_rect+0x25a0>)
    ddfe:	4798      	blx	r3
    de00:	900c      	str	r0, [sp, #48]	; 0x30
    for(y = 0; y < size; y++) {
    de02:	2f00      	cmp	r7, #0
    de04:	ddd8      	ble.n	ddb8 <lv_draw_rect+0x252c>
    de06:	2301      	movs	r3, #1
    de08:	930b      	str	r3, [sp, #44]	; 0x2c
    de0a:	f7fd be45 	b.w	ba98 <lv_draw_rect+0x20c>
            lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
    de0e:	2300      	movs	r3, #0
    de10:	f9ba 2000 	ldrsh.w	r2, [sl]
    de14:	9906      	ldr	r1, [sp, #24]
    de16:	a829      	add	r0, sp, #164	; 0xa4
    de18:	4c05      	ldr	r4, [pc, #20]	; (de30 <lv_draw_rect+0x25a4>)
    de1a:	47a0      	blx	r4
            radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
    de1c:	2100      	movs	r1, #0
    de1e:	a829      	add	r0, sp, #164	; 0xa4
    de20:	4b04      	ldr	r3, [pc, #16]	; (de34 <lv_draw_rect+0x25a8>)
    de22:	4798      	blx	r3
    de24:	4604      	mov	r4, r0
    de26:	f7ff b928 	b.w	d07a <lv_draw_rect+0x17ee>
    de2a:	bf00      	nop
    de2c:	00011a65 	.word	0x00011a65
    de30:	0000b589 	.word	0x0000b589
    de34:	0000b33d 	.word	0x0000b33d

0000de38 <lv_img_buf_get_px_color>:
 * Not used in other cases.
 * @param safe true: check out of bounds
 * @return color of the point
 */
lv_color_t lv_img_buf_get_px_color(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_color_t color)
{
    de38:	b5f0      	push	{r4, r5, r6, r7, lr}
    de3a:	b083      	sub	sp, #12
    lv_color_t p_color = LV_COLOR_BLACK;
    de3c:	f89d 4004 	ldrb.w	r4, [sp, #4]
    de40:	f36f 0404 	bfc	r4, #0, #5
    de44:	f88d 4004 	strb.w	r4, [sp, #4]
    de48:	f8bd 4004 	ldrh.w	r4, [sp, #4]
    de4c:	f36f 144a 	bfc	r4, #5, #6
    de50:	f8ad 4004 	strh.w	r4, [sp, #4]
    de54:	0a24      	lsrs	r4, r4, #8
    de56:	f36f 04c7 	bfc	r4, #3, #5
    de5a:	f88d 4005 	strb.w	r4, [sp, #5]
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
    de5e:	6886      	ldr	r6, [r0, #8]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED ||
    de60:	7804      	ldrb	r4, [r0, #0]
    de62:	f004 041f 	and.w	r4, r4, #31
    de66:	1f25      	subs	r5, r4, #4
    de68:	b2ed      	uxtb	r5, r5
    de6a:	2d02      	cmp	r5, #2
    de6c:	d90e      	bls.n	de8c <lv_img_buf_get_px_color+0x54>
        _lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
#if LV_COLOR_SIZE == 32
        p_color.ch.alpha = 0xFF; /*Only the color should be get so use a deafult alpha value*/
#endif
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT) {
    de6e:	2c07      	cmp	r4, #7
    de70:	d028      	beq.n	dec4 <lv_img_buf_get_px_color+0x8c>
         * dsc->header.w + 7 means rounding up to 8 because the lines are byte aligned
         * so the possible real width are 8, 16, 24 ...*/
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_2BIT) {
    de72:	2c08      	cmp	r4, #8
    de74:	d03b      	beq.n	deee <lv_img_buf_get_px_color+0xb6>
         * dsc->header.w + 3 means rounding up to 4 because the lines are byte aligned
         * so the possible real width are 4, 8, 12 ...*/
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_4BIT) {
    de76:	2c09      	cmp	r4, #9
    de78:	d050      	beq.n	df1c <lv_img_buf_get_px_color+0xe4>
         * dsc->header.w + 1 means rounding up to 2 because the lines are byte aligned
         * so the possible real width are 2, 4, 6 ...*/
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
    de7a:	2c0a      	cmp	r4, #10
    de7c:	d066      	beq.n	df4c <lv_img_buf_get_px_color+0x114>
        buf_u8 += 4 * 256;
        uint32_t px  = dsc->header.w * y + x;
        p_color.full = buf_u8[px];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
    de7e:	3c0b      	subs	r4, #11
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
    de80:	b2e4      	uxtb	r4, r4
    de82:	2c03      	cmp	r4, #3
        p_color = color;
    de84:	bf98      	it	ls
    de86:	f8ad 3004 	strhls.w	r3, [sp, #4]
    de8a:	e017      	b.n	debc <lv_img_buf_get_px_color+0x84>
    de8c:	4614      	mov	r4, r2
    de8e:	460f      	mov	r7, r1
    de90:	4605      	mov	r5, r0
        uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
    de92:	7800      	ldrb	r0, [r0, #0]
    de94:	f000 001f 	and.w	r0, r0, #31
    de98:	4b32      	ldr	r3, [pc, #200]	; (df64 <lv_img_buf_get_px_color+0x12c>)
    de9a:	4798      	blx	r3
        uint32_t px     = dsc->header.w * y * px_size + x * px_size;
    de9c:	682b      	ldr	r3, [r5, #0]
    de9e:	f3c3 238a 	ubfx	r3, r3, #10, #11
    dea2:	fb04 7203 	mla	r2, r4, r3, r7
    dea6:	f3c0 00c7 	ubfx	r0, r0, #3, #8
    deaa:	fb00 f202 	mul.w	r2, r0, r2
        _lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
    deae:	18b3      	adds	r3, r6, r2
        *d8 = *s8;
    deb0:	5cb2      	ldrb	r2, [r6, r2]
    deb2:	f88d 2004 	strb.w	r2, [sp, #4]
    deb6:	785b      	ldrb	r3, [r3, #1]
    deb8:	f88d 3005 	strb.w	r3, [sp, #5]
    }
    return p_color;
}
    debc:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    dec0:	b003      	add	sp, #12
    dec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
    dec4:	f001 0307 	and.w	r3, r1, #7
    dec8:	f1c3 0407 	rsb	r4, r3, #7
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
    decc:	6803      	ldr	r3, [r0, #0]
    dece:	f3c3 238a 	ubfx	r3, r3, #10, #11
    ded2:	3307      	adds	r3, #7
    ded4:	10db      	asrs	r3, r3, #3
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
    ded6:	fb02 6603 	mla	r6, r2, r3, r6
    deda:	eb06 01e1 	add.w	r1, r6, r1, asr #3
    dede:	7a0b      	ldrb	r3, [r1, #8]
    dee0:	2201      	movs	r2, #1
    dee2:	40a2      	lsls	r2, r4
    dee4:	4013      	ands	r3, r2
    dee6:	4123      	asrs	r3, r4
    dee8:	f8ad 3004 	strh.w	r3, [sp, #4]
    deec:	e7e6      	b.n	debc <lv_img_buf_get_px_color+0x84>
        uint8_t bit = (x & 0x3) * 2;
    deee:	f001 0403 	and.w	r4, r1, #3
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
    def2:	0064      	lsls	r4, r4, #1
    def4:	f1c4 0406 	rsb	r4, r4, #6
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
    def8:	6803      	ldr	r3, [r0, #0]
    defa:	f3c3 238a 	ubfx	r3, r3, #10, #11
    defe:	3303      	adds	r3, #3
    df00:	109b      	asrs	r3, r3, #2
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
    df02:	fb02 6603 	mla	r6, r2, r3, r6
    df06:	eb06 01a1 	add.w	r1, r6, r1, asr #2
    df0a:	7c0b      	ldrb	r3, [r1, #16]
    df0c:	2203      	movs	r2, #3
    df0e:	40a2      	lsls	r2, r4
    df10:	4013      	ands	r3, r2
    df12:	fa43 f404 	asr.w	r4, r3, r4
    df16:	f8ad 4004 	strh.w	r4, [sp, #4]
    df1a:	e7cf      	b.n	debc <lv_img_buf_get_px_color+0x84>
        uint8_t bit = (x & 0x1) * 4;
    df1c:	f001 0401 	and.w	r4, r1, #1
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
    df20:	00a4      	lsls	r4, r4, #2
    df22:	f1c4 0404 	rsb	r4, r4, #4
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
    df26:	6803      	ldr	r3, [r0, #0]
    df28:	f3c3 238a 	ubfx	r3, r3, #10, #11
    df2c:	3301      	adds	r3, #1
    df2e:	105b      	asrs	r3, r3, #1
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
    df30:	fb02 6603 	mla	r6, r2, r3, r6
    df34:	eb06 0161 	add.w	r1, r6, r1, asr #1
    df38:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
    df3c:	220f      	movs	r2, #15
    df3e:	40a2      	lsls	r2, r4
    df40:	4013      	ands	r3, r2
    df42:	fa43 f404 	asr.w	r4, r3, r4
    df46:	f8ad 4004 	strh.w	r4, [sp, #4]
    df4a:	e7b7      	b.n	debc <lv_img_buf_get_px_color+0x84>
        uint32_t px  = dsc->header.w * y + x;
    df4c:	6803      	ldr	r3, [r0, #0]
    df4e:	f3c3 238a 	ubfx	r3, r3, #10, #11
        p_color.full = buf_u8[px];
    df52:	4431      	add	r1, r6
    df54:	fb02 1103 	mla	r1, r2, r3, r1
    df58:	f891 3400 	ldrb.w	r3, [r1, #1024]	; 0x400
    df5c:	f8ad 3004 	strh.w	r3, [sp, #4]
    df60:	e7ac      	b.n	debc <lv_img_buf_get_px_color+0x84>
    df62:	bf00      	nop
    df64:	00008ced 	.word	0x00008ced

0000df68 <lv_img_buf_get_px_alpha>:
 * @param y x coordinate of the point to set
 * @param safe true: check out of bounds
 * @return alpha value of the point
 */
lv_opa_t lv_img_buf_get_px_alpha(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y)
{
    df68:	b5f0      	push	{r4, r5, r6, r7, lr}
    df6a:	b085      	sub	sp, #20
    df6c:	4604      	mov	r4, r0
    df6e:	460d      	mov	r5, r1
    df70:	4617      	mov	r7, r2
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
    df72:	6886      	ldr	r6, [r0, #8]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
    df74:	7803      	ldrb	r3, [r0, #0]
    df76:	f003 031f 	and.w	r3, r3, #31
    df7a:	2b05      	cmp	r3, #5
    df7c:	d00a      	beq.n	df94 <lv_img_buf_get_px_alpha+0x2c>
        uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE;
        return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT) {
    df7e:	2b0b      	cmp	r3, #11
    df80:	d012      	beq.n	dfa8 <lv_img_buf_get_px_alpha+0x40>
         * so the possible real width are 8 ,16, 24 ...*/
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
        return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_2BIT) {
    df82:	2b0c      	cmp	r3, #12
    df84:	d027      	beq.n	dfd6 <lv_img_buf_get_px_alpha+0x6e>
         * so the possible real width are 4 ,8, 12 ...*/
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
        return opa_table[px_opa];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_4BIT) {
    df86:	2b0d      	cmp	r3, #13
    df88:	d049      	beq.n	e01e <lv_img_buf_get_px_alpha+0xb6>
         * so the possible real width are 2 ,4, 6 ...*/
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
        return opa_table[px_opa];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
    df8a:	2b0e      	cmp	r3, #14
    df8c:	d064      	beq.n	e058 <lv_img_buf_get_px_alpha+0xf0>
        uint32_t px = dsc->header.w * y + x;
        return buf_u8[px];
    }

    return LV_OPA_COVER;
    df8e:	20ff      	movs	r0, #255	; 0xff
}
    df90:	b005      	add	sp, #20
    df92:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE;
    df94:	6802      	ldr	r2, [r0, #0]
    df96:	f3c2 228a 	ubfx	r2, r2, #10, #11
    df9a:	fb07 1502 	mla	r5, r7, r2, r1
        return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
    df9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    dfa2:	4435      	add	r5, r6
    dfa4:	78a8      	ldrb	r0, [r5, #2]
    dfa6:	e7f3      	b.n	df90 <lv_img_buf_get_px_alpha+0x28>
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
    dfa8:	f001 0307 	and.w	r3, r1, #7
    dfac:	f1c3 0107 	rsb	r1, r3, #7
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
    dfb0:	6802      	ldr	r2, [r0, #0]
    dfb2:	f3c2 228a 	ubfx	r2, r2, #10, #11
    dfb6:	3207      	adds	r2, #7
    dfb8:	10d2      	asrs	r2, r2, #3
    dfba:	10ed      	asrs	r5, r5, #3
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
    dfbc:	fb07 6202 	mla	r2, r7, r2, r6
    dfc0:	5d53      	ldrb	r3, [r2, r5]
    dfc2:	2201      	movs	r2, #1
    dfc4:	408a      	lsls	r2, r1
    dfc6:	4013      	ands	r3, r2
    dfc8:	410b      	asrs	r3, r1
        return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
    dfca:	f013 0fff 	tst.w	r3, #255	; 0xff
    dfce:	bf0c      	ite	eq
    dfd0:	20ff      	moveq	r0, #255	; 0xff
    dfd2:	2000      	movne	r0, #0
    dfd4:	e7dc      	b.n	df90 <lv_img_buf_get_px_alpha+0x28>
        const uint8_t opa_table[4] = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
    dfd6:	2300      	movs	r3, #0
    dfd8:	f88d 3000 	strb.w	r3, [sp]
    dfdc:	2355      	movs	r3, #85	; 0x55
    dfde:	f88d 3001 	strb.w	r3, [sp, #1]
    dfe2:	23aa      	movs	r3, #170	; 0xaa
    dfe4:	f88d 3002 	strb.w	r3, [sp, #2]
    dfe8:	23ff      	movs	r3, #255	; 0xff
    dfea:	f88d 3003 	strb.w	r3, [sp, #3]
        uint8_t bit = (x & 0x3) * 2;
    dfee:	f001 0303 	and.w	r3, r1, #3
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
    dff2:	005b      	lsls	r3, r3, #1
    dff4:	f1c3 0106 	rsb	r1, r3, #6
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
    dff8:	6802      	ldr	r2, [r0, #0]
    dffa:	f3c2 228a 	ubfx	r2, r2, #10, #11
    dffe:	3203      	adds	r2, #3
    e000:	1092      	asrs	r2, r2, #2
    e002:	10ad      	asrs	r5, r5, #2
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
    e004:	fb07 6202 	mla	r2, r7, r2, r6
    e008:	5d53      	ldrb	r3, [r2, r5]
    e00a:	2203      	movs	r2, #3
    e00c:	408a      	lsls	r2, r1
    e00e:	4013      	ands	r3, r2
    e010:	410b      	asrs	r3, r1
        return opa_table[px_opa];
    e012:	aa04      	add	r2, sp, #16
    e014:	fa52 f383 	uxtab	r3, r2, r3
    e018:	f813 0c10 	ldrb.w	r0, [r3, #-16]
    e01c:	e7b8      	b.n	df90 <lv_img_buf_get_px_alpha+0x28>
        const uint8_t opa_table[16] = {0,  17, 34,  51, /*Opacity mapping with bpp = 4*/
    e01e:	4b12      	ldr	r3, [pc, #72]	; (e068 <lv_img_buf_get_px_alpha+0x100>)
    e020:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    e022:	f10d 0e10 	add.w	lr, sp, #16
    e026:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
        uint8_t bit = (x & 0x1) * 4;
    e02a:	f005 0301 	and.w	r3, r5, #1
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
    e02e:	009b      	lsls	r3, r3, #2
    e030:	f1c3 0104 	rsb	r1, r3, #4
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
    e034:	6822      	ldr	r2, [r4, #0]
    e036:	f3c2 228a 	ubfx	r2, r2, #10, #11
    e03a:	3201      	adds	r2, #1
    e03c:	1052      	asrs	r2, r2, #1
    e03e:	106d      	asrs	r5, r5, #1
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
    e040:	fb07 6202 	mla	r2, r7, r2, r6
    e044:	5d53      	ldrb	r3, [r2, r5]
    e046:	220f      	movs	r2, #15
    e048:	408a      	lsls	r2, r1
    e04a:	4013      	ands	r3, r2
    e04c:	410b      	asrs	r3, r1
        return opa_table[px_opa];
    e04e:	fa5e f383 	uxtab	r3, lr, r3
    e052:	f813 0c10 	ldrb.w	r0, [r3, #-16]
    e056:	e79b      	b.n	df90 <lv_img_buf_get_px_alpha+0x28>
        uint32_t px = dsc->header.w * y + x;
    e058:	6802      	ldr	r2, [r0, #0]
    e05a:	f3c2 228a 	ubfx	r2, r2, #10, #11
        return buf_u8[px];
    e05e:	fb07 6202 	mla	r2, r7, r2, r6
    e062:	5c50      	ldrb	r0, [r2, r1]
    e064:	e794      	b.n	df90 <lv_img_buf_get_px_alpha+0x28>
    e066:	bf00      	nop
    e068:	000179ec 	.word	0x000179ec

0000e06c <_lv_img_buf_transform_init>:
/**
 * Initialize a descriptor to tranform an image
 * @param dsc pointer to an `lv_img_transform_dsc_t` variable whose `cfg` field is initialized
 */
void _lv_img_buf_transform_init(lv_img_transform_dsc_t * dsc)
{
    e06c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e070:	4604      	mov	r4, r0
    dsc->tmp.pivot_x_256 = dsc->cfg.pivot_x * 256;
    e072:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
    e076:	021b      	lsls	r3, r3, #8
    e078:	6243      	str	r3, [r0, #36]	; 0x24
    dsc->tmp.pivot_y_256 = dsc->cfg.pivot_y * 256;
    e07a:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    e07e:	021b      	lsls	r3, r3, #8
    e080:	6283      	str	r3, [r0, #40]	; 0x28

    int32_t angle_low = dsc->cfg.angle / 10;
    e082:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
    e086:	f8df 80f4 	ldr.w	r8, [pc, #244]	; e17c <_lv_img_buf_transform_init+0x110>
    e08a:	fb88 2300 	smull	r2, r3, r8, r0
    e08e:	17c5      	asrs	r5, r0, #31
    e090:	ebc5 05a3 	rsb	r5, r5, r3, asr #2
    e094:	b22d      	sxth	r5, r5
    int32_t angle_hight = angle_low + 1;
    int32_t angle_rem = dsc->cfg.angle  - (angle_low * 10);
    e096:	f06f 0709 	mvn.w	r7, #9
    e09a:	fb07 0705 	mla	r7, r7, r5, r0

    int32_t s1 = _lv_trigo_sin(-angle_low);
    e09e:	fa1f fa85 	uxth.w	sl, r5
    e0a2:	f1ca 0000 	rsb	r0, sl, #0
    e0a6:	b200      	sxth	r0, r0
    e0a8:	f8df 90d4 	ldr.w	r9, [pc, #212]	; e180 <_lv_img_buf_transform_init+0x114>
    e0ac:	47c8      	blx	r9
    e0ae:	4606      	mov	r6, r0
    int32_t angle_hight = angle_low + 1;
    e0b0:	3501      	adds	r5, #1
    int32_t s2 = _lv_trigo_sin(-angle_hight);
    e0b2:	b2ad      	uxth	r5, r5
    e0b4:	4268      	negs	r0, r5
    e0b6:	b200      	sxth	r0, r0
    e0b8:	47c8      	blx	r9
    e0ba:	4683      	mov	fp, r0

    int32_t c1 = _lv_trigo_sin(-angle_low + 90);
    e0bc:	f1ca 005a 	rsb	r0, sl, #90	; 0x5a
    e0c0:	b200      	sxth	r0, r0
    e0c2:	47c8      	blx	r9
    e0c4:	4682      	mov	sl, r0
    int32_t c2 = _lv_trigo_sin(-angle_hight + 90);
    e0c6:	f1c5 055a 	rsb	r5, r5, #90	; 0x5a
    e0ca:	b228      	sxth	r0, r5
    e0cc:	47c8      	blx	r9

    dsc->tmp.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
    e0ce:	f1c7 030a 	rsb	r3, r7, #10
    e0d2:	fb07 fb0b 	mul.w	fp, r7, fp
    e0d6:	fb03 b606 	mla	r6, r3, r6, fp
    e0da:	fb88 2b06 	smull	r2, fp, r8, r6
    e0de:	17f6      	asrs	r6, r6, #31
    e0e0:	ebc6 06ab 	rsb	r6, r6, fp, asr #2
    e0e4:	62e6      	str	r6, [r4, #44]	; 0x2c
    dsc->tmp.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
    e0e6:	fb07 f000 	mul.w	r0, r7, r0
    e0ea:	fb03 000a 	mla	r0, r3, sl, r0
    e0ee:	fb88 3800 	smull	r3, r8, r8, r0
    e0f2:	17c0      	asrs	r0, r0, #31
    e0f4:	ebc0 00a8 	rsb	r0, r0, r8, asr #2
    e0f8:	6320      	str	r0, [r4, #48]	; 0x30

    dsc->tmp.chroma_keyed = lv_img_cf_is_chroma_keyed(dsc->cfg.cf) ? 1 : 0;
    e0fa:	7ca0      	ldrb	r0, [r4, #18]
    e0fc:	4b1d      	ldr	r3, [pc, #116]	; (e174 <_lv_img_buf_transform_init+0x108>)
    e0fe:	4798      	blx	r3
    e100:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    e104:	f360 0300 	bfi	r3, r0, #0, #1
    e108:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
    e10c:	7ca0      	ldrb	r0, [r4, #18]
    e10e:	4b1a      	ldr	r3, [pc, #104]	; (e178 <_lv_img_buf_transform_init+0x10c>)
    e110:	4798      	blx	r3
    e112:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    e116:	f360 0341 	bfi	r3, r0, #1, #1
    e11a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR || dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
    e11e:	7ca2      	ldrb	r2, [r4, #18]
    e120:	1f13      	subs	r3, r2, #4
    e122:	b2db      	uxtb	r3, r3
    e124:	2b02      	cmp	r3, #2
       dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
        dsc->tmp.native_color = 1;
    e126:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    e12a:	bf94      	ite	ls
    e12c:	f043 0304 	orrls.w	r3, r3, #4
    }
    else {
        dsc->tmp.native_color = 0;
    e130:	f36f 0382 	bfchi	r3, #2, #1
    e134:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    }

    dsc->tmp.img_dsc.data = dsc->cfg.src;
    e138:	6823      	ldr	r3, [r4, #0]
    e13a:	6223      	str	r3, [r4, #32]
    dsc->tmp.img_dsc.header.always_zero = 0;
    e13c:	7e23      	ldrb	r3, [r4, #24]
    dsc->tmp.img_dsc.header.cf = dsc->cfg.cf;
    e13e:	f003 031f 	and.w	r3, r3, #31
    e142:	f362 0304 	bfi	r3, r2, #0, #5
    e146:	7623      	strb	r3, [r4, #24]
    dsc->tmp.img_dsc.header.w = dsc->cfg.src_w;
    e148:	69a3      	ldr	r3, [r4, #24]
    e14a:	88a2      	ldrh	r2, [r4, #4]
    e14c:	f362 2394 	bfi	r3, r2, #10, #11
    e150:	61a3      	str	r3, [r4, #24]
    dsc->tmp.img_dsc.header.h = dsc->cfg.src_h;
    e152:	0c1b      	lsrs	r3, r3, #16
    e154:	88e2      	ldrh	r2, [r4, #6]
    e156:	f362 134f 	bfi	r3, r2, #5, #11
    e15a:	8363      	strh	r3, [r4, #26]

    dsc->tmp.zoom_inv = (256 * 256) / dsc->cfg.zoom;
    e15c:	89e2      	ldrh	r2, [r4, #14]
    e15e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    e162:	fb93 f3f2 	sdiv	r3, r3, r2
    e166:	86e3      	strh	r3, [r4, #54]	; 0x36

    dsc->res.opa = LV_OPA_COVER;
    e168:	23ff      	movs	r3, #255	; 0xff
    e16a:	75a3      	strb	r3, [r4, #22]
    dsc->res.color = dsc->cfg.color;
    e16c:	8a23      	ldrh	r3, [r4, #16]
    e16e:	82a3      	strh	r3, [r4, #20]
    e170:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e174:	00008d1f 	.word	0x00008d1f
    e178:	00008d33 	.word	0x00008d33
    e17c:	66666667 	.word	0x66666667
    e180:	0001143d 	.word	0x0001143d

0000e184 <_lv_img_buf_get_transformed_area>:
 * @param zoom zoom, (256 no zoom)
 * @param pivot x,y pivot coordinates of rotation
 */
void _lv_img_buf_get_transformed_area(lv_area_t * res, lv_coord_t w, lv_coord_t h, int16_t angle, uint16_t zoom,
                                      lv_point_t * pivot)
{
    e184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e188:	b087      	sub	sp, #28
    e18a:	9003      	str	r0, [sp, #12]
    e18c:	9104      	str	r1, [sp, #16]
    e18e:	9205      	str	r2, [sp, #20]
    e190:	f8bd 4040 	ldrh.w	r4, [sp, #64]	; 0x40
    e194:	9401      	str	r4, [sp, #4]
    e196:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
#if LV_USE_IMG_TRANSFORM
    int32_t angle_low = angle / 10;
    e19a:	4f5e      	ldr	r7, [pc, #376]	; (e314 <_lv_img_buf_get_transformed_area+0x190>)
    e19c:	fb87 6003 	smull	r6, r0, r7, r3
    e1a0:	17dd      	asrs	r5, r3, #31
    e1a2:	ebc5 05a0 	rsb	r5, r5, r0, asr #2
    e1a6:	b22d      	sxth	r5, r5
    int32_t angle_hight = angle_low + 1;
    e1a8:	f105 0901 	add.w	r9, r5, #1
    int32_t angle_rem = angle  - (angle_low * 10);
    e1ac:	f06f 0609 	mvn.w	r6, #9
    e1b0:	fb06 3605 	mla	r6, r6, r5, r3

    int32_t s1 = _lv_trigo_sin(angle_low);
    e1b4:	4628      	mov	r0, r5
    e1b6:	f8df 8160 	ldr.w	r8, [pc, #352]	; e318 <_lv_img_buf_get_transformed_area+0x194>
    e1ba:	47c0      	blx	r8
    e1bc:	4604      	mov	r4, r0
    int32_t s2 = _lv_trigo_sin(angle_hight);
    e1be:	fa0f f089 	sxth.w	r0, r9
    e1c2:	47c0      	blx	r8
    e1c4:	4682      	mov	sl, r0

    int32_t c1 = _lv_trigo_sin(angle_low + 90);
    e1c6:	f105 005a 	add.w	r0, r5, #90	; 0x5a
    e1ca:	b200      	sxth	r0, r0
    e1cc:	47c0      	blx	r8
    e1ce:	4605      	mov	r5, r0
    int32_t c2 = _lv_trigo_sin(angle_hight + 90);
    e1d0:	f109 005a 	add.w	r0, r9, #90	; 0x5a
    e1d4:	b200      	sxth	r0, r0
    e1d6:	47c0      	blx	r8

    int32_t sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
    e1d8:	f1c6 030a 	rsb	r3, r6, #10
    e1dc:	fb06 fa0a 	mul.w	sl, r6, sl
    e1e0:	fb03 a404 	mla	r4, r3, r4, sl
    e1e4:	fb87 ea04 	smull	lr, sl, r7, r4
    e1e8:	17e4      	asrs	r4, r4, #31
    e1ea:	ebc4 04aa 	rsb	r4, r4, sl, asr #2
    int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
    e1ee:	fb06 f000 	mul.w	r0, r6, r0
    e1f2:	fb03 0505 	mla	r5, r3, r5, r0
    e1f6:	fb87 3705 	smull	r3, r7, r7, r5
    e1fa:	17ed      	asrs	r5, r5, #31
    e1fc:	ebc5 07a7 	rsb	r7, r5, r7, asr #2

    lv_coord_t xt;
    lv_coord_t yt;

    lv_area_t a;
    a.x1 = ((-pivot->x) * zoom) >> 8;
    e200:	f9bb c000 	ldrsh.w	ip, [fp]
    a.y1 = ((-pivot->y) * zoom) >> 8;
    e204:	f9bb 8002 	ldrsh.w	r8, [fp, #2]
    a.x1 = ((-pivot->x) * zoom) >> 8;
    e208:	f1cc 0300 	rsb	r3, ip, #0
    e20c:	9d01      	ldr	r5, [sp, #4]
    e20e:	fb05 f303 	mul.w	r3, r5, r3
    a.x2 = ((w - pivot->x) * zoom) >> 8;
    a.y2 = ((h - pivot->y) * zoom) >> 8;

    xt = a.x1;
    yt = a.y1;
    lt.x = ((cosma * xt - sinma * yt) >> LV_TRIGO_SHIFT) + pivot->x;
    e212:	f343 230f 	sbfx	r3, r3, #8, #16
    e216:	fb03 fa07 	mul.w	sl, r3, r7
    a.y1 = ((-pivot->y) * zoom) >> 8;
    e21a:	f1c8 0200 	rsb	r2, r8, #0
    e21e:	fb05 f202 	mul.w	r2, r5, r2
    lt.x = ((cosma * xt - sinma * yt) >> LV_TRIGO_SHIFT) + pivot->x;
    e222:	f342 220f 	sbfx	r2, r2, #8, #16
    e226:	fb02 fe04 	mul.w	lr, r2, r4
    e22a:	fa1f f68c 	uxth.w	r6, ip
    e22e:	ebaa 0b0e 	sub.w	fp, sl, lr
    e232:	eb06 3beb 	add.w	fp, r6, fp, asr #15
    e236:	fa0f fb8b 	sxth.w	fp, fp
    lt.y = ((sinma * xt + cosma * yt) >> LV_TRIGO_SHIFT) + pivot->y;
    e23a:	fb03 f304 	mul.w	r3, r3, r4
    e23e:	fb02 f207 	mul.w	r2, r2, r7
    e242:	fa1f f088 	uxth.w	r0, r8
    e246:	1899      	adds	r1, r3, r2
    e248:	eb00 31e1 	add.w	r1, r0, r1, asr #15
    e24c:	b209      	sxth	r1, r1
    e24e:	9102      	str	r1, [sp, #8]
    a.x2 = ((w - pivot->x) * zoom) >> 8;
    e250:	9904      	ldr	r1, [sp, #16]
    e252:	eba1 0c0c 	sub.w	ip, r1, ip
    e256:	fb05 fc0c 	mul.w	ip, r5, ip

    xt = a.x2;
    yt = a.y1;
    rt.x = ((cosma * xt - sinma * yt) >> LV_TRIGO_SHIFT) + pivot->x;
    e25a:	f34c 2c0f 	sbfx	ip, ip, #8, #16
    e25e:	fb0c f907 	mul.w	r9, ip, r7
    e262:	eba9 0e0e 	sub.w	lr, r9, lr
    e266:	eb06 3eee 	add.w	lr, r6, lr, asr #15
    e26a:	fa0f fe8e 	sxth.w	lr, lr
    rt.y = ((sinma * xt + cosma * yt) >> LV_TRIGO_SHIFT) + pivot->y;
    e26e:	fb0c fc04 	mul.w	ip, ip, r4
    e272:	4462      	add	r2, ip
    e274:	eb00 32e2 	add.w	r2, r0, r2, asr #15
    e278:	b212      	sxth	r2, r2
    a.y2 = ((h - pivot->y) * zoom) >> 8;
    e27a:	9905      	ldr	r1, [sp, #20]
    e27c:	eba1 0808 	sub.w	r8, r1, r8
    e280:	fb05 f808 	mul.w	r8, r5, r8

    xt = a.x1;
    yt = a.y2;
    lb.x = ((cosma * xt - sinma * yt) >> LV_TRIGO_SHIFT) + pivot->x;
    e284:	f348 280f 	sbfx	r8, r8, #8, #16
    e288:	fb08 f404 	mul.w	r4, r8, r4
    e28c:	ebaa 0504 	sub.w	r5, sl, r4
    e290:	eb06 35e5 	add.w	r5, r6, r5, asr #15
    e294:	b22d      	sxth	r5, r5
    lb.y = ((sinma * xt + cosma * yt) >> LV_TRIGO_SHIFT) + pivot->y;
    e296:	fb08 f707 	mul.w	r7, r8, r7
    e29a:	443b      	add	r3, r7
    e29c:	eb00 33e3 	add.w	r3, r0, r3, asr #15
    e2a0:	b21b      	sxth	r3, r3

    xt = a.x2;
    yt = a.y2;
    rb.x = ((cosma * xt - sinma * yt) >> LV_TRIGO_SHIFT) + pivot->x;
    e2a2:	eba9 0404 	sub.w	r4, r9, r4
    e2a6:	eb06 36e4 	add.w	r6, r6, r4, asr #15
    e2aa:	b236      	sxth	r6, r6
    rb.y = ((sinma * xt + cosma * yt) >> LV_TRIGO_SHIFT) + pivot->y;
    e2ac:	44bc      	add	ip, r7
    e2ae:	eb00 30ec 	add.w	r0, r0, ip, asr #15
    e2b2:	b200      	sxth	r0, r0

    res->x1 = LV_MATH_MIN4(lb.x, lt.x, rb.x, rt.x);
    e2b4:	465c      	mov	r4, fp
    e2b6:	45f3      	cmp	fp, lr
    e2b8:	bfa8      	it	ge
    e2ba:	4674      	movge	r4, lr
    e2bc:	42ac      	cmp	r4, r5
    e2be:	bfa8      	it	ge
    e2c0:	462c      	movge	r4, r5
    e2c2:	42b4      	cmp	r4, r6
    e2c4:	bfa8      	it	ge
    e2c6:	4634      	movge	r4, r6
    e2c8:	9903      	ldr	r1, [sp, #12]
    e2ca:	460f      	mov	r7, r1
    e2cc:	800c      	strh	r4, [r1, #0]
    res->x2 = LV_MATH_MAX4(lb.x, lt.x, rb.x, rt.x);
    e2ce:	45de      	cmp	lr, fp
    e2d0:	bfb8      	it	lt
    e2d2:	46de      	movlt	lr, fp
    e2d4:	4575      	cmp	r5, lr
    e2d6:	bfb8      	it	lt
    e2d8:	4675      	movlt	r5, lr
    e2da:	42ae      	cmp	r6, r5
    e2dc:	bfb8      	it	lt
    e2de:	462e      	movlt	r6, r5
    e2e0:	808e      	strh	r6, [r1, #4]
    res->y1 = LV_MATH_MIN4(lb.y, lt.y, rb.y, rt.y);
    e2e2:	9902      	ldr	r1, [sp, #8]
    e2e4:	460c      	mov	r4, r1
    e2e6:	4291      	cmp	r1, r2
    e2e8:	bfa8      	it	ge
    e2ea:	4614      	movge	r4, r2
    e2ec:	429c      	cmp	r4, r3
    e2ee:	bfa8      	it	ge
    e2f0:	461c      	movge	r4, r3
    e2f2:	4284      	cmp	r4, r0
    e2f4:	bfa8      	it	ge
    e2f6:	4604      	movge	r4, r0
    e2f8:	807c      	strh	r4, [r7, #2]
    res->y2 = LV_MATH_MAX4(lb.y, lt.y, rb.y, rt.y);
    e2fa:	4291      	cmp	r1, r2
    e2fc:	bfb8      	it	lt
    e2fe:	4611      	movlt	r1, r2
    e300:	428b      	cmp	r3, r1
    e302:	bfb8      	it	lt
    e304:	460b      	movlt	r3, r1
    e306:	4298      	cmp	r0, r3
    e308:	bfb8      	it	lt
    e30a:	4618      	movlt	r0, r3
    e30c:	80f8      	strh	r0, [r7, #6]
    res->x1 = 0;
    res->y1 = 0;
    res->x2 = w;
    res->y2 = h;
#endif
}
    e30e:	b007      	add	sp, #28
    e310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e314:	66666667 	.word	0x66666667
    e318:	0001143d 	.word	0x0001143d

0000e31c <_lv_img_buf_transform_anti_alias>:
/**
 * Continue transformation by taking the neighbors into account
 * @param dsc pointer to the transformation descriptor
 */
bool _lv_img_buf_transform_anti_alias(lv_img_transform_dsc_t * dsc)
{
    e31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e320:	b089      	sub	sp, #36	; 0x24
    e322:	4604      	mov	r4, r0
    const uint8_t * src_u8 = dsc->cfg.src;

    /*Get the fractional part of the source pixel*/
    int xs_fract = dsc->tmp.xs & 0xff;
    e324:	f9b0 5038 	ldrsh.w	r5, [r0, #56]	; 0x38
    e328:	b2ea      	uxtb	r2, r5
    int ys_fract = dsc->tmp.ys & 0xff;
    e32a:	f9b0 603a 	ldrsh.w	r6, [r0, #58]	; 0x3a
    e32e:	b2f3      	uxtb	r3, r6
    int32_t xn;      /*x neightboor*/
    lv_opa_t xr; /*x mix ratio*/

    if(xs_fract < 0x70) {
    e330:	2a6f      	cmp	r2, #111	; 0x6f
    e332:	dc74      	bgt.n	e41e <_lv_img_buf_transform_anti_alias+0x102>
        xn = - 1;
        if(dsc->tmp.xs_int + xn < 0) xn = 0;
    e334:	f9b0 103c 	ldrsh.w	r1, [r0, #60]	; 0x3c
    e338:	4249      	negs	r1, r1
    e33a:	17c9      	asrs	r1, r1, #31
        xr = xs_fract + 0x80;
    e33c:	3d80      	subs	r5, #128	; 0x80
    e33e:	b2ed      	uxtb	r5, r5
    }

    int32_t yn;      /*x neightboor*/
    lv_opa_t yr; /*x mix ratio*/

    if(ys_fract < 0x70) {
    e340:	2b6f      	cmp	r3, #111	; 0x6f
    e342:	dc7e      	bgt.n	e442 <_lv_img_buf_transform_anti_alias+0x126>
        yn = - 1;
        if(dsc->tmp.ys_int + yn < 0) yn = 0;
    e344:	f9b4 b03e 	ldrsh.w	fp, [r4, #62]	; 0x3e
    e348:	f1cb 0b00 	rsb	fp, fp, #0
    e34c:	ea4f 7beb 	mov.w	fp, fp, asr #31

        yr = ys_fract + 0x80;
    e350:	3e80      	subs	r6, #128	; 0x80
    e352:	b2f6      	uxtb	r6, r6
    else {
        yn = 0;
        yr = 0xFF;
    }

    lv_color_t c00 = dsc->res.color;
    e354:	f894 9014 	ldrb.w	r9, [r4, #20]
    e358:	f009 091f 	and.w	r9, r9, #31
    e35c:	f8b4 8014 	ldrh.w	r8, [r4, #20]
    e360:	f3c8 1845 	ubfx	r8, r8, #5, #6
    e364:	7d67      	ldrb	r7, [r4, #21]
    e366:	08ff      	lsrs	r7, r7, #3
    lv_color_t c01;
    lv_color_t c10;
    lv_color_t c11;

    lv_opa_t a00 = dsc->res.opa;
    e368:	7da3      	ldrb	r3, [r4, #22]
    e36a:	9300      	str	r3, [sp, #0]
    lv_opa_t a10 = 0;
    lv_opa_t a01 = 0;
    lv_opa_t a11 = 0;

    if(dsc->tmp.native_color) {
    e36c:	f894 c034 	ldrb.w	ip, [r4, #52]	; 0x34
    e370:	f01c 0f04 	tst.w	ip, #4
    e374:	d07b      	beq.n	e46e <_lv_img_buf_transform_anti_alias+0x152>
    const uint8_t * src_u8 = dsc->cfg.src;
    e376:	6823      	ldr	r3, [r4, #0]
        _lv_memcpy_small(&c01, &src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn], sizeof(lv_color_t));
    e378:	6c20      	ldr	r0, [r4, #64]	; 0x40
    e37a:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
    e37e:	fb0e 0101 	mla	r1, lr, r1, r0
    e382:	185a      	adds	r2, r3, r1
    e384:	f813 a001 	ldrb.w	sl, [r3, r1]
    e388:	f88d a01c 	strb.w	sl, [sp, #28]
    e38c:	7852      	ldrb	r2, [r2, #1]
    e38e:	f88d 201d 	strb.w	r2, [sp, #29]
        _lv_memcpy_small(&c10, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn], sizeof(lv_color_t));
    e392:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
    e396:	fb0e f202 	mul.w	r2, lr, r2
    e39a:	fb0b fb02 	mul.w	fp, fp, r2
    e39e:	4458      	add	r0, fp
    e3a0:	181a      	adds	r2, r3, r0
    e3a2:	f813 a000 	ldrb.w	sl, [r3, r0]
    e3a6:	f88d a018 	strb.w	sl, [sp, #24]
    e3aa:	7852      	ldrb	r2, [r2, #1]
    e3ac:	f88d 2019 	strb.w	r2, [sp, #25]
        _lv_memcpy_small(&c11, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn],
    e3b0:	eb01 020b 	add.w	r2, r1, fp
    e3b4:	eb03 0a02 	add.w	sl, r3, r2
    e3b8:	f813 b002 	ldrb.w	fp, [r3, r2]
    e3bc:	f88d b014 	strb.w	fp, [sp, #20]
    e3c0:	f89a a001 	ldrb.w	sl, [sl, #1]
    e3c4:	f88d a015 	strb.w	sl, [sp, #21]
                         sizeof(lv_color_t));
        if(dsc->tmp.has_alpha) {
    e3c8:	f01c 0f02 	tst.w	ip, #2
    e3cc:	f000 8081 	beq.w	e4d2 <_lv_img_buf_transform_anti_alias+0x1b6>
    e3d0:	f10e 3eff 	add.w	lr, lr, #4294967295
            a10 = src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
    e3d4:	4473      	add	r3, lr
    e3d6:	f813 b001 	ldrb.w	fp, [r3, r1]
            a01 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size - 1];
    e3da:	f813 a000 	ldrb.w	sl, [r3, r0]
            a11 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
    e3de:	5c98      	ldrb	r0, [r3, r2]
    }

    lv_opa_t xr0 = xr;
    lv_opa_t xr1 = xr;
    if(dsc->tmp.has_alpha) {
        lv_opa_t a0 = (a00 * xr + (a10 * (255 - xr))) >> 8;
    e3e0:	f1c5 03ff 	rsb	r3, r5, #255	; 0xff
    e3e4:	fb03 f10b 	mul.w	r1, r3, fp
    e3e8:	9a00      	ldr	r2, [sp, #0]
    e3ea:	fb05 1102 	mla	r1, r5, r2, r1
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
    e3ee:	fb03 f300 	mul.w	r3, r3, r0
    e3f2:	fb05 330a 	mla	r3, r5, sl, r3
    e3f6:	f3c3 2307 	ubfx	r3, r3, #8, #8
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
    e3fa:	f1c6 02ff 	rsb	r2, r6, #255	; 0xff
    e3fe:	f3c1 2107 	ubfx	r1, r1, #8, #8
    e402:	fb06 fe01 	mul.w	lr, r6, r1
    e406:	fb02 e203 	mla	r2, r2, r3, lr
    e40a:	1212      	asrs	r2, r2, #8
    e40c:	75a2      	strb	r2, [r4, #22]

        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
    e40e:	2905      	cmp	r1, #5
    e410:	f200 80dc 	bhi.w	e5cc <_lv_img_buf_transform_anti_alias+0x2b0>
    e414:	2b05      	cmp	r3, #5
    e416:	f240 817d 	bls.w	e714 <_lv_img_buf_transform_anti_alias+0x3f8>
        if(a0 <= LV_OPA_MIN) yr = LV_OPA_TRANSP;
    e41a:	2600      	movs	r6, #0
    e41c:	e0d9      	b.n	e5d2 <_lv_img_buf_transform_anti_alias+0x2b6>
    else if(xs_fract > 0x90) {
    e41e:	2a90      	cmp	r2, #144	; 0x90
    e420:	dd0c      	ble.n	e43c <_lv_img_buf_transform_anti_alias+0x120>
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
    e422:	f9b0 103c 	ldrsh.w	r1, [r0, #60]	; 0x3c
    e426:	3101      	adds	r1, #1
    e428:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
    e42c:	4291      	cmp	r1, r2
    e42e:	bfac      	ite	ge
    e430:	2100      	movge	r1, #0
    e432:	2101      	movlt	r1, #1
        xr = (0xFF - xs_fract) + 0x80;
    e434:	f1c5 057f 	rsb	r5, r5, #127	; 0x7f
    e438:	b2ed      	uxtb	r5, r5
    e43a:	e781      	b.n	e340 <_lv_img_buf_transform_anti_alias+0x24>
        xr = 0xFF;
    e43c:	25ff      	movs	r5, #255	; 0xff
        xn = 0;
    e43e:	2100      	movs	r1, #0
    e440:	e77e      	b.n	e340 <_lv_img_buf_transform_anti_alias+0x24>
    else if(ys_fract > 0x90) {
    e442:	2b90      	cmp	r3, #144	; 0x90
    e444:	dd0f      	ble.n	e466 <_lv_img_buf_transform_anti_alias+0x14a>
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;
    e446:	f9b4 b03e 	ldrsh.w	fp, [r4, #62]	; 0x3e
    e44a:	f10b 0b01 	add.w	fp, fp, #1
    e44e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
    e452:	4593      	cmp	fp, r2
    e454:	bfac      	ite	ge
    e456:	f04f 0b00 	movge.w	fp, #0
    e45a:	f04f 0b01 	movlt.w	fp, #1
        yr = (0xFF - ys_fract) + 0x80;
    e45e:	f1c6 067f 	rsb	r6, r6, #127	; 0x7f
    e462:	b2f6      	uxtb	r6, r6
    e464:	e776      	b.n	e354 <_lv_img_buf_transform_anti_alias+0x38>
        yr = 0xFF;
    e466:	26ff      	movs	r6, #255	; 0xff
        yn = 0;
    e468:	f04f 0b00 	mov.w	fp, #0
    e46c:	e772      	b.n	e354 <_lv_img_buf_transform_anti_alias+0x38>
        c01 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int, dsc->cfg.color);
    e46e:	f104 0318 	add.w	r3, r4, #24
    e472:	4618      	mov	r0, r3
    e474:	b28b      	uxth	r3, r1
    e476:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
    e478:	9302      	str	r3, [sp, #8]
    e47a:	4419      	add	r1, r3
    e47c:	8a23      	ldrh	r3, [r4, #16]
    e47e:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
    e482:	b209      	sxth	r1, r1
    e484:	9001      	str	r0, [sp, #4]
    e486:	f8df a294 	ldr.w	sl, [pc, #660]	; e71c <_lv_img_buf_transform_anti_alias+0x400>
    e48a:	47d0      	blx	sl
    e48c:	f8ad 001c 	strh.w	r0, [sp, #28]
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
    e490:	fa1f f18b 	uxth.w	r1, fp
    e494:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    e496:	9103      	str	r1, [sp, #12]
    e498:	440a      	add	r2, r1
    e49a:	8a23      	ldrh	r3, [r4, #16]
    e49c:	b212      	sxth	r2, r2
    e49e:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
    e4a2:	f8dd b004 	ldr.w	fp, [sp, #4]
    e4a6:	4658      	mov	r0, fp
    e4a8:	47d0      	blx	sl
    e4aa:	f8ad 0018 	strh.w	r0, [sp, #24]
        c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn, dsc->cfg.color);
    e4ae:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    e4b0:	9903      	ldr	r1, [sp, #12]
    e4b2:	440a      	add	r2, r1
    e4b4:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
    e4b6:	9b02      	ldr	r3, [sp, #8]
    e4b8:	4419      	add	r1, r3
    e4ba:	8a23      	ldrh	r3, [r4, #16]
    e4bc:	b212      	sxth	r2, r2
    e4be:	b209      	sxth	r1, r1
    e4c0:	4658      	mov	r0, fp
    e4c2:	47d0      	blx	sl
    e4c4:	f8ad 0014 	strh.w	r0, [sp, #20]
        if(dsc->tmp.has_alpha) {
    e4c8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    e4cc:	f013 0f02 	tst.w	r3, #2
    e4d0:	d152      	bne.n	e578 <_lv_img_buf_transform_anti_alias+0x25c>
        if(a11 <= LV_OPA_MIN) xr1 = LV_OPA_COVER;
    }
    else {
        xr0 = xr;
        xr1 = xr;
        dsc->res.opa = LV_OPA_COVER;
    e4d2:	23ff      	movs	r3, #255	; 0xff
    e4d4:	75a3      	strb	r3, [r4, #22]
        xr0 = xr;
    e4d6:	462b      	mov	r3, r5
    }

    lv_color_t c0;
    if(xr0 == LV_OPA_TRANSP) c0 = c01;
    e4d8:	2b00      	cmp	r3, #0
    e4da:	f040 808b 	bne.w	e5f4 <_lv_img_buf_transform_anti_alias+0x2d8>
    e4de:	f89d 901c 	ldrb.w	r9, [sp, #28]
    e4e2:	f009 091f 	and.w	r9, r9, #31
    e4e6:	f8bd 801c 	ldrh.w	r8, [sp, #28]
    e4ea:	f3c8 1845 	ubfx	r8, r8, #5, #6
    e4ee:	f89d 701d 	ldrb.w	r7, [sp, #29]
    e4f2:	08ff      	lsrs	r7, r7, #3
    else if(xr0 == LV_OPA_COVER) c0 = c00;
    else c0 = lv_color_mix(c00, c01, xr0);

    lv_color_t c1;
    if(xr1 == LV_OPA_TRANSP) c1 = c11;
    e4f4:	2d00      	cmp	r5, #0
    e4f6:	f040 80ac 	bne.w	e652 <_lv_img_buf_transform_anti_alias+0x336>
    e4fa:	f89d 5014 	ldrb.w	r5, [sp, #20]
    e4fe:	f005 051f 	and.w	r5, r5, #31
    e502:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    e506:	f3c3 1345 	ubfx	r3, r3, #5, #6
    e50a:	f89d 1015 	ldrb.w	r1, [sp, #21]
    e50e:	08c9      	lsrs	r1, r1, #3
    else if(xr1 == LV_OPA_COVER) c1 = c10;
    else c1 = lv_color_mix(c10, c11, xr1);

    if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
    e510:	2e00      	cmp	r6, #0
    e512:	f000 80e3 	beq.w	e6dc <_lv_img_buf_transform_anti_alias+0x3c0>
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
    e516:	2eff      	cmp	r6, #255	; 0xff
    e518:	f000 80ee 	beq.w	e6f8 <_lv_img_buf_transform_anti_alias+0x3dc>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    e51c:	f1c6 02ff 	rsb	r2, r6, #255	; 0xff
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    e520:	fb02 f505 	mul.w	r5, r2, r5
    e524:	fb06 5509 	mla	r5, r6, r9, r5
    e528:	eb05 2905 	add.w	r9, r5, r5, lsl #8
    e52c:	eb05 15c9 	add.w	r5, r5, r9, lsl #7
    e530:	0ded      	lsrs	r5, r5, #23
    else dsc->res.color = lv_color_mix(c0, c1, yr);
    e532:	7d20      	ldrb	r0, [r4, #20]
    e534:	f365 0004 	bfi	r0, r5, #0, #5
    e538:	7520      	strb	r0, [r4, #20]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    e53a:	fb02 f303 	mul.w	r3, r2, r3
    e53e:	fb06 3808 	mla	r8, r6, r8, r3
    e542:	eb08 2308 	add.w	r3, r8, r8, lsl #8
    e546:	eb08 18c3 	add.w	r8, r8, r3, lsl #7
    e54a:	ea4f 58d8 	mov.w	r8, r8, lsr #23
    e54e:	8aa3      	ldrh	r3, [r4, #20]
    e550:	f368 134a 	bfi	r3, r8, #5, #6
    e554:	82a3      	strh	r3, [r4, #20]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    e556:	fb02 f101 	mul.w	r1, r2, r1
    e55a:	fb06 1607 	mla	r6, r6, r7, r1
    e55e:	eb06 2706 	add.w	r7, r6, r6, lsl #8
    e562:	eb06 16c7 	add.w	r6, r6, r7, lsl #7
    e566:	0df6      	lsrs	r6, r6, #23
    e568:	0a1b      	lsrs	r3, r3, #8
    e56a:	f366 03c7 	bfi	r3, r6, #3, #5
    e56e:	7563      	strb	r3, [r4, #21]

    return true;
    e570:	2001      	movs	r0, #1
}
    e572:	b009      	add	sp, #36	; 0x24
    e574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            a10 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int);
    e578:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
    e57a:	9b02      	ldr	r3, [sp, #8]
    e57c:	4419      	add	r1, r3
    e57e:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
    e582:	b209      	sxth	r1, r1
    e584:	f8dd a004 	ldr.w	sl, [sp, #4]
    e588:	4650      	mov	r0, sl
    e58a:	4b63      	ldr	r3, [pc, #396]	; (e718 <_lv_img_buf_transform_anti_alias+0x3fc>)
    e58c:	4798      	blx	r3
    e58e:	4683      	mov	fp, r0
            a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn);
    e590:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    e592:	9903      	ldr	r1, [sp, #12]
    e594:	440a      	add	r2, r1
    e596:	b212      	sxth	r2, r2
    e598:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
    e59c:	f8cd a004 	str.w	sl, [sp, #4]
    e5a0:	4650      	mov	r0, sl
    e5a2:	4b5d      	ldr	r3, [pc, #372]	; (e718 <_lv_img_buf_transform_anti_alias+0x3fc>)
    e5a4:	4798      	blx	r3
    e5a6:	4682      	mov	sl, r0
            a11 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn);
    e5a8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    e5aa:	9903      	ldr	r1, [sp, #12]
    e5ac:	440a      	add	r2, r1
    e5ae:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
    e5b0:	9b02      	ldr	r3, [sp, #8]
    e5b2:	4419      	add	r1, r3
    e5b4:	b212      	sxth	r2, r2
    e5b6:	b209      	sxth	r1, r1
    e5b8:	9801      	ldr	r0, [sp, #4]
    e5ba:	4b57      	ldr	r3, [pc, #348]	; (e718 <_lv_img_buf_transform_anti_alias+0x3fc>)
    e5bc:	4798      	blx	r3
    if(dsc->tmp.has_alpha) {
    e5be:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    e5c2:	f013 0f02 	tst.w	r3, #2
    e5c6:	f47f af0b 	bne.w	e3e0 <_lv_img_buf_transform_anti_alias+0xc4>
    e5ca:	e782      	b.n	e4d2 <_lv_img_buf_transform_anti_alias+0x1b6>
        if(a1 <= LV_OPA_MIN) yr = LV_OPA_COVER;
    e5cc:	2b05      	cmp	r3, #5
    e5ce:	bf98      	it	ls
    e5d0:	26ff      	movls	r6, #255	; 0xff
        if(a00 <= LV_OPA_MIN) xr0 = LV_OPA_TRANSP;
    e5d2:	9b00      	ldr	r3, [sp, #0]
    e5d4:	2b05      	cmp	r3, #5
    e5d6:	bf8c      	ite	hi
    e5d8:	462b      	movhi	r3, r5
    e5da:	2300      	movls	r3, #0
        if(a10 <= LV_OPA_MIN) xr0 = LV_OPA_COVER;
    e5dc:	f1bb 0f05 	cmp.w	fp, #5
    e5e0:	bf98      	it	ls
    e5e2:	23ff      	movls	r3, #255	; 0xff
        if(a01 <= LV_OPA_MIN) xr1 = LV_OPA_TRANSP;
    e5e4:	f1ba 0f05 	cmp.w	sl, #5
    e5e8:	bf98      	it	ls
    e5ea:	2500      	movls	r5, #0
        if(a11 <= LV_OPA_MIN) xr1 = LV_OPA_COVER;
    e5ec:	2805      	cmp	r0, #5
    e5ee:	bf98      	it	ls
    e5f0:	25ff      	movls	r5, #255	; 0xff
    e5f2:	e771      	b.n	e4d8 <_lv_img_buf_transform_anti_alias+0x1bc>
    else if(xr0 == LV_OPA_COVER) c0 = c00;
    e5f4:	2bff      	cmp	r3, #255	; 0xff
    e5f6:	f43f af7d 	beq.w	e4f4 <_lv_img_buf_transform_anti_alias+0x1d8>
    e5fa:	f1c3 01ff 	rsb	r1, r3, #255	; 0xff
    e5fe:	f89d 201d 	ldrb.w	r2, [sp, #29]
    e602:	08d2      	lsrs	r2, r2, #3
    e604:	fb03 f707 	mul.w	r7, r3, r7
    e608:	fb01 7702 	mla	r7, r1, r2, r7
    e60c:	eb07 2207 	add.w	r2, r7, r7, lsl #8
    e610:	eb07 17c2 	add.w	r7, r7, r2, lsl #7
    e614:	f3c7 57c4 	ubfx	r7, r7, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    e618:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    e61c:	f3c2 1245 	ubfx	r2, r2, #5, #6
    e620:	fb03 f808 	mul.w	r8, r3, r8
    e624:	fb01 8802 	mla	r8, r1, r2, r8
    e628:	eb08 2208 	add.w	r2, r8, r8, lsl #8
    e62c:	eb08 18c2 	add.w	r8, r8, r2, lsl #7
    e630:	f3c8 58c5 	ubfx	r8, r8, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    e634:	f89d 201c 	ldrb.w	r2, [sp, #28]
    e638:	f002 021f 	and.w	r2, r2, #31
    e63c:	fb03 f909 	mul.w	r9, r3, r9
    e640:	fb01 9902 	mla	r9, r1, r2, r9
    e644:	eb09 2309 	add.w	r3, r9, r9, lsl #8
    e648:	eb09 19c3 	add.w	r9, r9, r3, lsl #7
    e64c:	f3c9 59c4 	ubfx	r9, r9, #23, #5
    e650:	e750      	b.n	e4f4 <_lv_img_buf_transform_anti_alias+0x1d8>
    else if(xr1 == LV_OPA_COVER) c1 = c10;
    e652:	2dff      	cmp	r5, #255	; 0xff
    e654:	d036      	beq.n	e6c4 <_lv_img_buf_transform_anti_alias+0x3a8>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    e656:	f1c5 00ff 	rsb	r0, r5, #255	; 0xff
    e65a:	f89d 1019 	ldrb.w	r1, [sp, #25]
    e65e:	08c9      	lsrs	r1, r1, #3
    e660:	f89d 3015 	ldrb.w	r3, [sp, #21]
    e664:	08db      	lsrs	r3, r3, #3
    e666:	fb00 f303 	mul.w	r3, r0, r3
    e66a:	fb05 3101 	mla	r1, r5, r1, r3
    e66e:	eb01 2301 	add.w	r3, r1, r1, lsl #8
    e672:	eb01 11c3 	add.w	r1, r1, r3, lsl #7
    e676:	f3c1 51c4 	ubfx	r1, r1, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    e67a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    e67e:	f3c3 1345 	ubfx	r3, r3, #5, #6
    e682:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    e686:	f3c2 1245 	ubfx	r2, r2, #5, #6
    e68a:	fb00 f202 	mul.w	r2, r0, r2
    e68e:	fb05 2303 	mla	r3, r5, r3, r2
    e692:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    e696:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    e69a:	f3c3 53c5 	ubfx	r3, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    e69e:	f89d 2018 	ldrb.w	r2, [sp, #24]
    e6a2:	f002 021f 	and.w	r2, r2, #31
    e6a6:	f89d e014 	ldrb.w	lr, [sp, #20]
    e6aa:	f00e 0e1f 	and.w	lr, lr, #31
    e6ae:	fb00 f00e 	mul.w	r0, r0, lr
    e6b2:	fb05 0502 	mla	r5, r5, r2, r0
    e6b6:	eb05 2205 	add.w	r2, r5, r5, lsl #8
    e6ba:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    e6be:	f3c5 55c4 	ubfx	r5, r5, #23, #5
    e6c2:	e725      	b.n	e510 <_lv_img_buf_transform_anti_alias+0x1f4>
    e6c4:	f89d 5018 	ldrb.w	r5, [sp, #24]
    e6c8:	f005 051f 	and.w	r5, r5, #31
    e6cc:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    e6d0:	f3c3 1345 	ubfx	r3, r3, #5, #6
    e6d4:	f89d 1019 	ldrb.w	r1, [sp, #25]
    e6d8:	08c9      	lsrs	r1, r1, #3
    e6da:	e719      	b.n	e510 <_lv_img_buf_transform_anti_alias+0x1f4>
    if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
    e6dc:	7d22      	ldrb	r2, [r4, #20]
    e6de:	f365 0204 	bfi	r2, r5, #0, #5
    e6e2:	7522      	strb	r2, [r4, #20]
    e6e4:	8aa2      	ldrh	r2, [r4, #20]
    e6e6:	f363 124a 	bfi	r2, r3, #5, #6
    e6ea:	82a2      	strh	r2, [r4, #20]
    e6ec:	0a12      	lsrs	r2, r2, #8
    e6ee:	f361 02c7 	bfi	r2, r1, #3, #5
    e6f2:	7562      	strb	r2, [r4, #21]
    return true;
    e6f4:	2001      	movs	r0, #1
    e6f6:	e73c      	b.n	e572 <_lv_img_buf_transform_anti_alias+0x256>
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
    e6f8:	7d23      	ldrb	r3, [r4, #20]
    e6fa:	f369 0304 	bfi	r3, r9, #0, #5
    e6fe:	7523      	strb	r3, [r4, #20]
    e700:	8aa3      	ldrh	r3, [r4, #20]
    e702:	f368 134a 	bfi	r3, r8, #5, #6
    e706:	82a3      	strh	r3, [r4, #20]
    e708:	0a1b      	lsrs	r3, r3, #8
    e70a:	f367 03c7 	bfi	r3, r7, #3, #5
    e70e:	7563      	strb	r3, [r4, #21]
    return true;
    e710:	2001      	movs	r0, #1
    e712:	e72e      	b.n	e572 <_lv_img_buf_transform_anti_alias+0x256>
        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
    e714:	2000      	movs	r0, #0
    e716:	e72c      	b.n	e572 <_lv_img_buf_transform_anti_alias+0x256>
    e718:	0000df69 	.word	0x0000df69
    e71c:	0000de39 	.word	0x0000de39

0000e720 <_lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param style style of the image
 * @return pointer to the cache entry or NULL if can open the image
 */
lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color)
{
    e720:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(entry_cnt == 0) {
    e724:	4b4d      	ldr	r3, [pc, #308]	; (e85c <_lv_img_cache_open+0x13c>)
    e726:	881d      	ldrh	r5, [r3, #0]
    e728:	2d00      	cmp	r5, #0
    e72a:	f000 8094 	beq.w	e856 <_lv_img_cache_open+0x136>
        LV_LOG_WARN("lv_img_cache_open: the cache size is 0");
        return NULL;
    }

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
    e72e:	4b4c      	ldr	r3, [pc, #304]	; (e860 <_lv_img_cache_open+0x140>)
    e730:	681e      	ldr	r6, [r3, #0]
    e732:	4633      	mov	r3, r6
    e734:	3d01      	subs	r5, #1
    e736:	b2ad      	uxth	r5, r5
    e738:	3501      	adds	r5, #1
    e73a:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
    e73e:	eb06 0585 	add.w	r5, r6, r5, lsl #2

    /*Decrement all lifes. Make the entries older*/
    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
    e742:	4a48      	ldr	r2, [pc, #288]	; (e864 <_lv_img_cache_open+0x144>)
    e744:	6a1c      	ldr	r4, [r3, #32]
    e746:	4294      	cmp	r4, r2
            cache[i].life -= LV_IMG_CACHE_AGING;
    e748:	bfa4      	itt	ge
    e74a:	f104 34ff 	addge.w	r4, r4, #4294967295
    e74e:	621c      	strge	r4, [r3, #32]
    e750:	3324      	adds	r3, #36	; 0x24
    for(i = 0; i < entry_cnt; i++) {
    e752:	42ab      	cmp	r3, r5
    e754:	d1f6      	bne.n	e744 <_lv_img_cache_open+0x24>
    e756:	468a      	mov	sl, r1
    e758:	4681      	mov	r9, r0
    e75a:	2400      	movs	r4, #0

    /*Is the image cached?*/
    lv_img_cache_entry_t * cached_src = NULL;
    for(i = 0; i < entry_cnt; i++) {
        bool match = false;
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
    e75c:	4f42      	ldr	r7, [pc, #264]	; (e868 <_lv_img_cache_open+0x148>)
        if(src_type == LV_IMG_SRC_VARIABLE) {
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
        }
        else if(src_type == LV_IMG_SRC_FILE) {
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
    e75e:	f8df b120 	ldr.w	fp, [pc, #288]	; e880 <_lv_img_cache_open+0x160>
    for(i = 0; i < entry_cnt; i++) {
    e762:	f8df 80f8 	ldr.w	r8, [pc, #248]	; e85c <_lv_img_cache_open+0x13c>
    e766:	e007      	b.n	e778 <_lv_img_cache_open+0x58>
        else if(src_type == LV_IMG_SRC_FILE) {
    e768:	2801      	cmp	r0, #1
    e76a:	d026      	beq.n	e7ba <_lv_img_cache_open+0x9a>
    for(i = 0; i < entry_cnt; i++) {
    e76c:	3401      	adds	r4, #1
    e76e:	b2a4      	uxth	r4, r4
    e770:	f8b8 3000 	ldrh.w	r3, [r8]
    e774:	42a3      	cmp	r3, r4
    e776:	d929      	bls.n	e7cc <_lv_img_cache_open+0xac>
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
    e778:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
    e77c:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    e780:	6868      	ldr	r0, [r5, #4]
    e782:	47b8      	blx	r7
        if(src_type == LV_IMG_SRC_VARIABLE) {
    e784:	2800      	cmp	r0, #0
    e786:	d1ef      	bne.n	e768 <_lv_img_cache_open+0x48>
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
    e788:	686b      	ldr	r3, [r5, #4]
    e78a:	454b      	cmp	r3, r9
    e78c:	d1ee      	bne.n	e76c <_lv_img_cache_open+0x4c>
    e78e:	8928      	ldrh	r0, [r5, #8]
    e790:	fa1f f38a 	uxth.w	r3, sl
    e794:	4298      	cmp	r0, r3
    e796:	bf14      	ite	ne
    e798:	2000      	movne	r0, #0
    e79a:	2001      	moveq	r0, #1
        }

        if(match) {
    e79c:	2800      	cmp	r0, #0
    e79e:	d0e5      	beq.n	e76c <_lv_img_cache_open+0x4c>
            /* If opened increment its life.
             * Image difficult to open should live longer to keep avoid frequent their recaching.
             * Therefore increase `life` with `time_to_open`*/
            cached_src = &cache[i];
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
    e7a0:	6a2b      	ldr	r3, [r5, #32]
    e7a2:	696a      	ldr	r2, [r5, #20]
    e7a4:	4413      	add	r3, r2
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
    e7a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    e7aa:	dd0d      	ble.n	e7c8 <_lv_img_cache_open+0xa8>
    e7ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    e7b0:	622b      	str	r3, [r5, #32]
            break;
        }
    }

    /*The image is not cached then cache it now*/
    if(cached_src == NULL) {
    e7b2:	b15d      	cbz	r5, e7cc <_lv_img_cache_open+0xac>

        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
    }

    return cached_src;
}
    e7b4:	4628      	mov	r0, r5
    e7b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
    e7ba:	4649      	mov	r1, r9
    e7bc:	6868      	ldr	r0, [r5, #4]
    e7be:	47d8      	blx	fp
    e7c0:	fab0 f080 	clz	r0, r0
    e7c4:	0940      	lsrs	r0, r0, #5
    e7c6:	e7e9      	b.n	e79c <_lv_img_cache_open+0x7c>
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
    e7c8:	622b      	str	r3, [r5, #32]
    e7ca:	e7f2      	b.n	e7b2 <_lv_img_cache_open+0x92>
        for(i = 1; i < entry_cnt; i++) {
    e7cc:	4b23      	ldr	r3, [pc, #140]	; (e85c <_lv_img_cache_open+0x13c>)
    e7ce:	881a      	ldrh	r2, [r3, #0]
    e7d0:	2a01      	cmp	r2, #1
    e7d2:	d92f      	bls.n	e834 <_lv_img_cache_open+0x114>
    e7d4:	f106 0324 	add.w	r3, r6, #36	; 0x24
    e7d8:	3a02      	subs	r2, #2
    e7da:	b292      	uxth	r2, r2
    e7dc:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
    e7e0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    e7e4:	3248      	adds	r2, #72	; 0x48
    e7e6:	4635      	mov	r5, r6
            if(cache[i].life < cached_src->life) {
    e7e8:	6a18      	ldr	r0, [r3, #32]
    e7ea:	6a29      	ldr	r1, [r5, #32]
                cached_src = &cache[i];
    e7ec:	4288      	cmp	r0, r1
    e7ee:	bfb8      	it	lt
    e7f0:	461d      	movlt	r5, r3
    e7f2:	3324      	adds	r3, #36	; 0x24
        for(i = 1; i < entry_cnt; i++) {
    e7f4:	4293      	cmp	r3, r2
    e7f6:	d1f7      	bne.n	e7e8 <_lv_img_cache_open+0xc8>
        if(cached_src->dec_dsc.src) {
    e7f8:	686b      	ldr	r3, [r5, #4]
    e7fa:	b113      	cbz	r3, e802 <_lv_img_cache_open+0xe2>
            lv_img_decoder_close(&cached_src->dec_dsc);
    e7fc:	4628      	mov	r0, r5
    e7fe:	4b1b      	ldr	r3, [pc, #108]	; (e86c <_lv_img_cache_open+0x14c>)
    e800:	4798      	blx	r3
        t_start                          = lv_tick_get();
    e802:	4b1b      	ldr	r3, [pc, #108]	; (e870 <_lv_img_cache_open+0x150>)
    e804:	4798      	blx	r3
    e806:	4604      	mov	r4, r0
        cached_src->dec_dsc.time_to_open = 0;
    e808:	2300      	movs	r3, #0
    e80a:	616b      	str	r3, [r5, #20]
        lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, color);
    e80c:	4652      	mov	r2, sl
    e80e:	4649      	mov	r1, r9
    e810:	4628      	mov	r0, r5
    e812:	4b18      	ldr	r3, [pc, #96]	; (e874 <_lv_img_cache_open+0x154>)
    e814:	4798      	blx	r3
        if(open_res == LV_RES_INV) {
    e816:	b178      	cbz	r0, e838 <_lv_img_cache_open+0x118>
        cached_src->life = 0;
    e818:	2300      	movs	r3, #0
    e81a:	622b      	str	r3, [r5, #32]
        if(cached_src->dec_dsc.time_to_open == 0) {
    e81c:	696b      	ldr	r3, [r5, #20]
    e81e:	2b00      	cmp	r3, #0
    e820:	d1c8      	bne.n	e7b4 <_lv_img_cache_open+0x94>
            cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
    e822:	4620      	mov	r0, r4
    e824:	4b14      	ldr	r3, [pc, #80]	; (e878 <_lv_img_cache_open+0x158>)
    e826:	4798      	blx	r3
    e828:	6168      	str	r0, [r5, #20]
        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
    e82a:	2800      	cmp	r0, #0
    e82c:	d1c2      	bne.n	e7b4 <_lv_img_cache_open+0x94>
    e82e:	2301      	movs	r3, #1
    e830:	616b      	str	r3, [r5, #20]
    e832:	e7bf      	b.n	e7b4 <_lv_img_cache_open+0x94>
        for(i = 1; i < entry_cnt; i++) {
    e834:	4635      	mov	r5, r6
    e836:	e7df      	b.n	e7f8 <_lv_img_cache_open+0xd8>
            lv_img_decoder_close(&cached_src->dec_dsc);
    e838:	4628      	mov	r0, r5
    e83a:	4b0c      	ldr	r3, [pc, #48]	; (e86c <_lv_img_cache_open+0x14c>)
    e83c:	4798      	blx	r3
            _lv_memset_00(&cached_src->dec_dsc, sizeof(lv_img_decoder_dsc_t));
    e83e:	2120      	movs	r1, #32
    e840:	4628      	mov	r0, r5
    e842:	4c0e      	ldr	r4, [pc, #56]	; (e87c <_lv_img_cache_open+0x15c>)
    e844:	47a0      	blx	r4
            _lv_memset_00(cached_src, sizeof(lv_img_cache_entry_t));
    e846:	2124      	movs	r1, #36	; 0x24
    e848:	4628      	mov	r0, r5
    e84a:	47a0      	blx	r4
            cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its use  */
    e84c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    e850:	622b      	str	r3, [r5, #32]
            return NULL;
    e852:	2500      	movs	r5, #0
    e854:	e7ae      	b.n	e7b4 <_lv_img_cache_open+0x94>
        return NULL;
    e856:	2500      	movs	r5, #0
    e858:	e7ac      	b.n	e7b4 <_lv_img_cache_open+0x94>
    e85a:	bf00      	nop
    e85c:	20002b58 	.word	0x20002b58
    e860:	2000ad64 	.word	0x2000ad64
    e864:	80000002 	.word	0x80000002
    e868:	00008f71 	.word	0x00008f71
    e86c:	0000f245 	.word	0x0000f245
    e870:	000102d9 	.word	0x000102d9
    e874:	0000f159 	.word	0x0000f159
    e878:	000102f1 	.word	0x000102f1
    e87c:	00011c17 	.word	0x00011c17
    e880:	000176d3 	.word	0x000176d3

0000e884 <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
    e884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
    e888:	4b14      	ldr	r3, [pc, #80]	; (e8dc <lv_img_cache_invalidate_src+0x58>)
    e88a:	681f      	ldr	r7, [r3, #0]

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
    e88c:	4b14      	ldr	r3, [pc, #80]	; (e8e0 <lv_img_cache_invalidate_src+0x5c>)
    e88e:	881b      	ldrh	r3, [r3, #0]
    e890:	b30b      	cbz	r3, e8d6 <lv_img_cache_invalidate_src+0x52>
    e892:	4606      	mov	r6, r0
    e894:	2400      	movs	r4, #0
        if(cache[i].dec_dsc.src == src || src == NULL) {
            if(cache[i].dec_dsc.src != NULL) {
                lv_img_decoder_close(&cache[i].dec_dsc);
            }

            _lv_memset_00(&cache[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
    e896:	f8df 904c 	ldr.w	r9, [pc, #76]	; e8e4 <lv_img_cache_invalidate_src+0x60>
                lv_img_decoder_close(&cache[i].dec_dsc);
    e89a:	f8df a04c 	ldr.w	sl, [pc, #76]	; e8e8 <lv_img_cache_invalidate_src+0x64>
    for(i = 0; i < entry_cnt; i++) {
    e89e:	f8df 8040 	ldr.w	r8, [pc, #64]	; e8e0 <lv_img_cache_invalidate_src+0x5c>
    e8a2:	e00e      	b.n	e8c2 <lv_img_cache_invalidate_src+0x3e>
            if(cache[i].dec_dsc.src != NULL) {
    e8a4:	b10b      	cbz	r3, e8aa <lv_img_cache_invalidate_src+0x26>
                lv_img_decoder_close(&cache[i].dec_dsc);
    e8a6:	4628      	mov	r0, r5
    e8a8:	47d0      	blx	sl
            _lv_memset_00(&cache[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
    e8aa:	2120      	movs	r1, #32
    e8ac:	4628      	mov	r0, r5
    e8ae:	47c8      	blx	r9
            _lv_memset_00(&cache[i], sizeof(lv_img_cache_entry_t));
    e8b0:	2124      	movs	r1, #36	; 0x24
    e8b2:	4628      	mov	r0, r5
    e8b4:	47c8      	blx	r9
    for(i = 0; i < entry_cnt; i++) {
    e8b6:	3401      	adds	r4, #1
    e8b8:	b2a4      	uxth	r4, r4
    e8ba:	f8b8 3000 	ldrh.w	r3, [r8]
    e8be:	42a3      	cmp	r3, r4
    e8c0:	d909      	bls.n	e8d6 <lv_img_cache_invalidate_src+0x52>
        if(cache[i].dec_dsc.src == src || src == NULL) {
    e8c2:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
    e8c6:	eb07 0585 	add.w	r5, r7, r5, lsl #2
    e8ca:	686b      	ldr	r3, [r5, #4]
    e8cc:	42b3      	cmp	r3, r6
    e8ce:	d0e9      	beq.n	e8a4 <lv_img_cache_invalidate_src+0x20>
    e8d0:	2e00      	cmp	r6, #0
    e8d2:	d1f0      	bne.n	e8b6 <lv_img_cache_invalidate_src+0x32>
    e8d4:	e7e6      	b.n	e8a4 <lv_img_cache_invalidate_src+0x20>
    e8d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e8da:	bf00      	nop
    e8dc:	2000ad64 	.word	0x2000ad64
    e8e0:	20002b58 	.word	0x20002b58
    e8e4:	00011c17 	.word	0x00011c17
    e8e8:	0000f245 	.word	0x0000f245

0000e8ec <lv_img_cache_set_size>:
{
    e8ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e8f0:	4604      	mov	r4, r0
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
    e8f2:	4b1e      	ldr	r3, [pc, #120]	; (e96c <lv_img_cache_set_size+0x80>)
    e8f4:	681b      	ldr	r3, [r3, #0]
    e8f6:	b133      	cbz	r3, e906 <lv_img_cache_set_size+0x1a>
        lv_img_cache_invalidate_src(NULL);
    e8f8:	2000      	movs	r0, #0
    e8fa:	4b1d      	ldr	r3, [pc, #116]	; (e970 <lv_img_cache_set_size+0x84>)
    e8fc:	4798      	blx	r3
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
    e8fe:	4b1b      	ldr	r3, [pc, #108]	; (e96c <lv_img_cache_set_size+0x80>)
    e900:	6818      	ldr	r0, [r3, #0]
    e902:	4b1c      	ldr	r3, [pc, #112]	; (e974 <lv_img_cache_set_size+0x88>)
    e904:	4798      	blx	r3
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
    e906:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
    e90a:	0080      	lsls	r0, r0, #2
    e90c:	4b1a      	ldr	r3, [pc, #104]	; (e978 <lv_img_cache_set_size+0x8c>)
    e90e:	4798      	blx	r3
    e910:	4b16      	ldr	r3, [pc, #88]	; (e96c <lv_img_cache_set_size+0x80>)
    e912:	6018      	str	r0, [r3, #0]
    LV_ASSERT_MEM(LV_GC_ROOT(_lv_img_cache_array));
    e914:	4b19      	ldr	r3, [pc, #100]	; (e97c <lv_img_cache_set_size+0x90>)
    e916:	4798      	blx	r3
    e918:	b1e0      	cbz	r0, e954 <lv_img_cache_set_size+0x68>
    if(LV_GC_ROOT(_lv_img_cache_array) == NULL) {
    e91a:	4b14      	ldr	r3, [pc, #80]	; (e96c <lv_img_cache_set_size+0x80>)
    e91c:	681b      	ldr	r3, [r3, #0]
    e91e:	b303      	cbz	r3, e962 <lv_img_cache_set_size+0x76>
    entry_cnt = new_entry_cnt;
    e920:	4b17      	ldr	r3, [pc, #92]	; (e980 <lv_img_cache_set_size+0x94>)
    e922:	801c      	strh	r4, [r3, #0]
    for(i = 0; i < entry_cnt; i++) {
    e924:	b1a4      	cbz	r4, e950 <lv_img_cache_set_size+0x64>
    e926:	2400      	movs	r4, #0
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
    e928:	4f10      	ldr	r7, [pc, #64]	; (e96c <lv_img_cache_set_size+0x80>)
    e92a:	4e16      	ldr	r6, [pc, #88]	; (e984 <lv_img_cache_set_size+0x98>)
    for(i = 0; i < entry_cnt; i++) {
    e92c:	4698      	mov	r8, r3
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
    e92e:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
    e932:	00ad      	lsls	r5, r5, #2
    e934:	6838      	ldr	r0, [r7, #0]
    e936:	2120      	movs	r1, #32
    e938:	4428      	add	r0, r5
    e93a:	47b0      	blx	r6
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i], sizeof(lv_img_cache_entry_t));
    e93c:	6838      	ldr	r0, [r7, #0]
    e93e:	2124      	movs	r1, #36	; 0x24
    e940:	4428      	add	r0, r5
    e942:	47b0      	blx	r6
    for(i = 0; i < entry_cnt; i++) {
    e944:	3401      	adds	r4, #1
    e946:	b2a4      	uxth	r4, r4
    e948:	f8b8 3000 	ldrh.w	r3, [r8]
    e94c:	42a3      	cmp	r3, r4
    e94e:	d8ee      	bhi.n	e92e <lv_img_cache_set_size+0x42>
    e950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LV_ASSERT_MEM(LV_GC_ROOT(_lv_img_cache_array));
    e954:	4b05      	ldr	r3, [pc, #20]	; (e96c <lv_img_cache_set_size+0x80>)
    e956:	681a      	ldr	r2, [r3, #0]
    e958:	2300      	movs	r3, #0
    e95a:	480b      	ldr	r0, [pc, #44]	; (e988 <lv_img_cache_set_size+0x9c>)
    e95c:	490b      	ldr	r1, [pc, #44]	; (e98c <lv_img_cache_set_size+0xa0>)
    e95e:	4788      	blx	r1
    e960:	e7fe      	b.n	e960 <lv_img_cache_set_size+0x74>
        entry_cnt = 0;
    e962:	2200      	movs	r2, #0
    e964:	4b06      	ldr	r3, [pc, #24]	; (e980 <lv_img_cache_set_size+0x94>)
    e966:	801a      	strh	r2, [r3, #0]
        return;
    e968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e96c:	2000ad64 	.word	0x2000ad64
    e970:	0000e885 	.word	0x0000e885
    e974:	00011639 	.word	0x00011639
    e978:	00011575 	.word	0x00011575
    e97c:	0000295d 	.word	0x0000295d
    e980:	20002b58 	.word	0x20002b58
    e984:	00011c17 	.word	0x00011c17
    e988:	0001786c 	.word	0x0001786c
    e98c:	00002965 	.word	0x00002965

0000e990 <lv_img_decoder_built_in_info>:
 * @param src the image source: pointer to an `lv_img_dsc_t` variable, a file path or a symbol
 * @param header store the image data here
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_info(lv_img_decoder_t * decoder, const void * src, lv_img_header_t * header)
{
    e990:	b530      	push	{r4, r5, lr}
    e992:	b085      	sub	sp, #20
    e994:	460c      	mov	r4, r1
    e996:	4615      	mov	r5, r2
    (void)decoder; /*Unused*/

    lv_img_src_t src_type = lv_img_src_get_type(src);
    e998:	4608      	mov	r0, r1
    e99a:	4b2a      	ldr	r3, [pc, #168]	; (ea44 <lv_img_decoder_built_in_info+0xb4>)
    e99c:	4798      	blx	r3
    if(src_type == LV_IMG_SRC_VARIABLE) {
    e99e:	b9d8      	cbnz	r0, e9d8 <lv_img_decoder_built_in_info+0x48>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
    e9a0:	7823      	ldrb	r3, [r4, #0]
    e9a2:	f3c3 0304 	ubfx	r3, r3, #0, #5
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
    e9a6:	3b04      	subs	r3, #4
    e9a8:	b2db      	uxtb	r3, r3
    e9aa:	2b0a      	cmp	r3, #10
    e9ac:	d847      	bhi.n	ea3e <lv_img_decoder_built_in_info+0xae>

        header->w  = ((lv_img_dsc_t *)src)->header.w;
    e9ae:	6823      	ldr	r3, [r4, #0]
    e9b0:	f3c3 238a 	ubfx	r3, r3, #10, #11
    e9b4:	682a      	ldr	r2, [r5, #0]
    e9b6:	f363 2294 	bfi	r2, r3, #10, #11
    e9ba:	602a      	str	r2, [r5, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
    e9bc:	8863      	ldrh	r3, [r4, #2]
    e9be:	f3c3 134a 	ubfx	r3, r3, #5, #11
    e9c2:	886a      	ldrh	r2, [r5, #2]
    e9c4:	f363 124f 	bfi	r2, r3, #5, #11
    e9c8:	806a      	strh	r2, [r5, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
    e9ca:	7822      	ldrb	r2, [r4, #0]
    e9cc:	782b      	ldrb	r3, [r5, #0]
    e9ce:	f362 0304 	bfi	r3, r2, #0, #5
    e9d2:	702b      	strb	r3, [r5, #0]
    }
    else {
        LV_LOG_WARN("Image get info found unknown src type");
        return LV_RES_INV;
    }
    return LV_RES_OK;
    e9d4:	2001      	movs	r0, #1
    e9d6:	e004      	b.n	e9e2 <lv_img_decoder_built_in_info+0x52>
    else if(src_type == LV_IMG_SRC_FILE) {
    e9d8:	2801      	cmp	r0, #1
    e9da:	d004      	beq.n	e9e6 <lv_img_decoder_built_in_info+0x56>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
    e9dc:	2802      	cmp	r0, #2
    e9de:	d020      	beq.n	ea22 <lv_img_decoder_built_in_info+0x92>
        return LV_RES_INV;
    e9e0:	2000      	movs	r0, #0
}
    e9e2:	b005      	add	sp, #20
    e9e4:	bd30      	pop	{r4, r5, pc}
        res = lv_fs_open(&file, src, LV_FS_MODE_RD);
    e9e6:	2202      	movs	r2, #2
    e9e8:	4621      	mov	r1, r4
    e9ea:	a802      	add	r0, sp, #8
    e9ec:	4b16      	ldr	r3, [pc, #88]	; (ea48 <lv_img_decoder_built_in_info+0xb8>)
    e9ee:	4798      	blx	r3
        if(res == LV_FS_RES_OK) {
    e9f0:	b138      	cbz	r0, ea02 <lv_img_decoder_built_in_info+0x72>
        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
    e9f2:	782b      	ldrb	r3, [r5, #0]
    e9f4:	331c      	adds	r3, #28
    e9f6:	f003 031f 	and.w	r3, r3, #31
    e9fa:	2b0a      	cmp	r3, #10
    e9fc:	d80f      	bhi.n	ea1e <lv_img_decoder_built_in_info+0x8e>
    return LV_RES_OK;
    e9fe:	2001      	movs	r0, #1
    ea00:	e7ef      	b.n	e9e2 <lv_img_decoder_built_in_info+0x52>
            res = lv_fs_read(&file, header, sizeof(lv_img_header_t), &rn);
    ea02:	ab01      	add	r3, sp, #4
    ea04:	2204      	movs	r2, #4
    ea06:	4629      	mov	r1, r5
    ea08:	a802      	add	r0, sp, #8
    ea0a:	4c10      	ldr	r4, [pc, #64]	; (ea4c <lv_img_decoder_built_in_info+0xbc>)
    ea0c:	47a0      	blx	r4
    ea0e:	4604      	mov	r4, r0
            lv_fs_close(&file);
    ea10:	a802      	add	r0, sp, #8
    ea12:	4b0f      	ldr	r3, [pc, #60]	; (ea50 <lv_img_decoder_built_in_info+0xc0>)
    ea14:	4798      	blx	r3
            if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
    ea16:	b914      	cbnz	r4, ea1e <lv_img_decoder_built_in_info+0x8e>
    ea18:	9b01      	ldr	r3, [sp, #4]
    ea1a:	2b04      	cmp	r3, #4
    ea1c:	d0e9      	beq.n	e9f2 <lv_img_decoder_built_in_info+0x62>
                return LV_RES_INV;
    ea1e:	2000      	movs	r0, #0
    ea20:	e7df      	b.n	e9e2 <lv_img_decoder_built_in_info+0x52>
        header->w = 1;
    ea22:	682b      	ldr	r3, [r5, #0]
    ea24:	2001      	movs	r0, #1
    ea26:	f360 2394 	bfi	r3, r0, #10, #11
    ea2a:	602b      	str	r3, [r5, #0]
        header->h = 1;
    ea2c:	0c1a      	lsrs	r2, r3, #16
    ea2e:	f360 124f 	bfi	r2, r0, #5, #11
    ea32:	806a      	strh	r2, [r5, #2]
        header->cf = LV_IMG_CF_ALPHA_1BIT;
    ea34:	220b      	movs	r2, #11
    ea36:	f362 0304 	bfi	r3, r2, #0, #5
    ea3a:	702b      	strb	r3, [r5, #0]
    ea3c:	e7d1      	b.n	e9e2 <lv_img_decoder_built_in_info+0x52>
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
    ea3e:	2000      	movs	r0, #0
    ea40:	e7cf      	b.n	e9e2 <lv_img_decoder_built_in_info+0x52>
    ea42:	bf00      	nop
    ea44:	00008f71 	.word	0x00008f71
    ea48:	00010f4d 	.word	0x00010f4d
    ea4c:	00010ebd 	.word	0x00010ebd
    ea50:	00010e8d 	.word	0x00010e8d

0000ea54 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
    ea54:	b538      	push	{r3, r4, r5, lr}
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    ea56:	69cc      	ldr	r4, [r1, #28]
    if(user_data) {
    ea58:	b1a4      	cbz	r4, ea84 <lv_img_decoder_built_in_close+0x30>
    ea5a:	460d      	mov	r5, r1
#if LV_USE_FILESYSTEM
        if(user_data->f) {
    ea5c:	6820      	ldr	r0, [r4, #0]
    ea5e:	b120      	cbz	r0, ea6a <lv_img_decoder_built_in_close+0x16>
            lv_fs_close(user_data->f);
    ea60:	4b09      	ldr	r3, [pc, #36]	; (ea88 <lv_img_decoder_built_in_close+0x34>)
    ea62:	4798      	blx	r3
            lv_mem_free(user_data->f);
    ea64:	6820      	ldr	r0, [r4, #0]
    ea66:	4b09      	ldr	r3, [pc, #36]	; (ea8c <lv_img_decoder_built_in_close+0x38>)
    ea68:	4798      	blx	r3
        }
#endif
        if(user_data->palette) lv_mem_free(user_data->palette);
    ea6a:	6860      	ldr	r0, [r4, #4]
    ea6c:	b108      	cbz	r0, ea72 <lv_img_decoder_built_in_close+0x1e>
    ea6e:	4b07      	ldr	r3, [pc, #28]	; (ea8c <lv_img_decoder_built_in_close+0x38>)
    ea70:	4798      	blx	r3
        if(user_data->opa) lv_mem_free(user_data->opa);
    ea72:	68a0      	ldr	r0, [r4, #8]
    ea74:	b108      	cbz	r0, ea7a <lv_img_decoder_built_in_close+0x26>
    ea76:	4b05      	ldr	r3, [pc, #20]	; (ea8c <lv_img_decoder_built_in_close+0x38>)
    ea78:	4798      	blx	r3

        lv_mem_free(user_data);
    ea7a:	4620      	mov	r0, r4
    ea7c:	4b03      	ldr	r3, [pc, #12]	; (ea8c <lv_img_decoder_built_in_close+0x38>)
    ea7e:	4798      	blx	r3

        dsc->user_data = NULL;
    ea80:	2300      	movs	r3, #0
    ea82:	61eb      	str	r3, [r5, #28]
    ea84:	bd38      	pop	{r3, r4, r5, pc}
    ea86:	bf00      	nop
    ea88:	00010e8d 	.word	0x00010e8d
    ea8c:	00011639 	.word	0x00011639

0000ea90 <lv_img_decoder_built_in_open>:
{
    ea90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ea94:	b083      	sub	sp, #12
    ea96:	4605      	mov	r5, r0
    ea98:	460c      	mov	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
    ea9a:	7a8b      	ldrb	r3, [r1, #10]
    ea9c:	2b01      	cmp	r3, #1
    ea9e:	d015      	beq.n	eacc <lv_img_decoder_built_in_open+0x3c>
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
    eaa0:	2b00      	cmp	r3, #0
    eaa2:	f040 8121 	bne.w	ece8 <lv_img_decoder_built_in_open+0x258>
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
    eaa6:	684b      	ldr	r3, [r1, #4]
    eaa8:	689b      	ldr	r3, [r3, #8]
    eaaa:	2b00      	cmp	r3, #0
    eaac:	f000 811a 	beq.w	ece4 <lv_img_decoder_built_in_open+0x254>
    lv_img_cf_t cf = dsc->header.cf;
    eab0:	7b08      	ldrb	r0, [r1, #12]
    eab2:	f000 001f 	and.w	r0, r0, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
    eab6:	1f03      	subs	r3, r0, #4
    eab8:	b2db      	uxtb	r3, r3
    eaba:	2b02      	cmp	r3, #2
    eabc:	d854      	bhi.n	eb68 <lv_img_decoder_built_in_open+0xd8>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
    eabe:	6863      	ldr	r3, [r4, #4]
    eac0:	689b      	ldr	r3, [r3, #8]
    eac2:	6123      	str	r3, [r4, #16]
            return LV_RES_OK;
    eac4:	2001      	movs	r0, #1
}
    eac6:	b003      	add	sp, #12
    eac8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
    eacc:	6848      	ldr	r0, [r1, #4]
    eace:	4b8c      	ldr	r3, [pc, #560]	; (ed00 <lv_img_decoder_built_in_open+0x270>)
    ead0:	4798      	blx	r3
    ead2:	498c      	ldr	r1, [pc, #560]	; (ed04 <lv_img_decoder_built_in_open+0x274>)
    ead4:	4b8c      	ldr	r3, [pc, #560]	; (ed08 <lv_img_decoder_built_in_open+0x278>)
    ead6:	4798      	blx	r3
    ead8:	b9a8      	cbnz	r0, eb06 <lv_img_decoder_built_in_open+0x76>
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
    eada:	2202      	movs	r2, #2
    eadc:	6861      	ldr	r1, [r4, #4]
    eade:	4668      	mov	r0, sp
    eae0:	4b8a      	ldr	r3, [pc, #552]	; (ed0c <lv_img_decoder_built_in_open+0x27c>)
    eae2:	4798      	blx	r3
        if(res != LV_FS_RES_OK) {
    eae4:	b978      	cbnz	r0, eb06 <lv_img_decoder_built_in_open+0x76>
        if(dsc->user_data == NULL) {
    eae6:	69e3      	ldr	r3, [r4, #28]
    eae8:	b17b      	cbz	r3, eb0a <lv_img_decoder_built_in_open+0x7a>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    eaea:	69e6      	ldr	r6, [r4, #28]
        user_data->f = lv_mem_alloc(sizeof(f));
    eaec:	2008      	movs	r0, #8
    eaee:	4b88      	ldr	r3, [pc, #544]	; (ed10 <lv_img_decoder_built_in_open+0x280>)
    eaf0:	4798      	blx	r3
    eaf2:	6030      	str	r0, [r6, #0]
        LV_ASSERT_MEM(user_data->f);
    eaf4:	4b87      	ldr	r3, [pc, #540]	; (ed14 <lv_img_decoder_built_in_open+0x284>)
    eaf6:	4798      	blx	r3
    eaf8:	b1d8      	cbz	r0, eb32 <lv_img_decoder_built_in_open+0xa2>
        if(user_data->f == NULL) {
    eafa:	6833      	ldr	r3, [r6, #0]
    eafc:	b9fb      	cbnz	r3, eb3e <lv_img_decoder_built_in_open+0xae>
            lv_img_decoder_built_in_close(decoder, dsc);
    eafe:	4621      	mov	r1, r4
    eb00:	4628      	mov	r0, r5
    eb02:	4b85      	ldr	r3, [pc, #532]	; (ed18 <lv_img_decoder_built_in_open+0x288>)
    eb04:	4798      	blx	r3
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
    eb06:	2000      	movs	r0, #0
    eb08:	e7dd      	b.n	eac6 <lv_img_decoder_built_in_open+0x36>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
    eb0a:	200c      	movs	r0, #12
    eb0c:	4b80      	ldr	r3, [pc, #512]	; (ed10 <lv_img_decoder_built_in_open+0x280>)
    eb0e:	4798      	blx	r3
    eb10:	61e0      	str	r0, [r4, #28]
            LV_ASSERT_MEM(dsc->user_data);
    eb12:	4b80      	ldr	r3, [pc, #512]	; (ed14 <lv_img_decoder_built_in_open+0x284>)
    eb14:	4798      	blx	r3
    eb16:	b928      	cbnz	r0, eb24 <lv_img_decoder_built_in_open+0x94>
    eb18:	69e2      	ldr	r2, [r4, #28]
    eb1a:	2300      	movs	r3, #0
    eb1c:	487f      	ldr	r0, [pc, #508]	; (ed1c <lv_img_decoder_built_in_open+0x28c>)
    eb1e:	4980      	ldr	r1, [pc, #512]	; (ed20 <lv_img_decoder_built_in_open+0x290>)
    eb20:	4788      	blx	r1
    eb22:	e7fe      	b.n	eb22 <lv_img_decoder_built_in_open+0x92>
            if(dsc->user_data == NULL) {
    eb24:	69e0      	ldr	r0, [r4, #28]
    eb26:	2800      	cmp	r0, #0
    eb28:	d0ed      	beq.n	eb06 <lv_img_decoder_built_in_open+0x76>
            _lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
    eb2a:	210c      	movs	r1, #12
    eb2c:	4b7d      	ldr	r3, [pc, #500]	; (ed24 <lv_img_decoder_built_in_open+0x294>)
    eb2e:	4798      	blx	r3
    eb30:	e7db      	b.n	eaea <lv_img_decoder_built_in_open+0x5a>
        LV_ASSERT_MEM(user_data->f);
    eb32:	6832      	ldr	r2, [r6, #0]
    eb34:	2300      	movs	r3, #0
    eb36:	4879      	ldr	r0, [pc, #484]	; (ed1c <lv_img_decoder_built_in_open+0x28c>)
    eb38:	4979      	ldr	r1, [pc, #484]	; (ed20 <lv_img_decoder_built_in_open+0x290>)
    eb3a:	4788      	blx	r1
    eb3c:	e7fe      	b.n	eb3c <lv_img_decoder_built_in_open+0xac>
    eb3e:	f10d 32ff 	add.w	r2, sp, #4294967295
    eb42:	f103 0108 	add.w	r1, r3, #8
    eb46:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    eb4a:	f803 0b01 	strb.w	r0, [r3], #1
    while(len) {
    eb4e:	428b      	cmp	r3, r1
    eb50:	d1f9      	bne.n	eb46 <lv_img_decoder_built_in_open+0xb6>
    lv_img_cf_t cf = dsc->header.cf;
    eb52:	7b20      	ldrb	r0, [r4, #12]
    eb54:	f000 001f 	and.w	r0, r0, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
    eb58:	1f03      	subs	r3, r0, #4
    eb5a:	b2db      	uxtb	r3, r3
    eb5c:	2b02      	cmp	r3, #2
    eb5e:	d803      	bhi.n	eb68 <lv_img_decoder_built_in_open+0xd8>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
    eb60:	7aa3      	ldrb	r3, [r4, #10]
    eb62:	2b00      	cmp	r3, #0
    eb64:	d0ab      	beq.n	eabe <lv_img_decoder_built_in_open+0x2e>
    eb66:	e0c7      	b.n	ecf8 <lv_img_decoder_built_in_open+0x268>
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
    eb68:	1fc3      	subs	r3, r0, #7
    eb6a:	b2db      	uxtb	r3, r3
    eb6c:	2b03      	cmp	r3, #3
    eb6e:	d909      	bls.n	eb84 <lv_img_decoder_built_in_open+0xf4>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
    eb70:	f1a0 030b 	sub.w	r3, r0, #11
    eb74:	b2db      	uxtb	r3, r3
    eb76:	2b03      	cmp	r3, #3
    eb78:	f200 80ae 	bhi.w	ecd8 <lv_img_decoder_built_in_open+0x248>
        dsc->img_data = NULL;
    eb7c:	2300      	movs	r3, #0
    eb7e:	6123      	str	r3, [r4, #16]
        return LV_RES_OK; /*Nothing to process*/
    eb80:	2001      	movs	r0, #1
    eb82:	e7a0      	b.n	eac6 <lv_img_decoder_built_in_open+0x36>
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
    eb84:	4b68      	ldr	r3, [pc, #416]	; (ed28 <lv_img_decoder_built_in_open+0x298>)
    eb86:	4798      	blx	r3
    eb88:	4607      	mov	r7, r0
        if(dsc->user_data == NULL) {
    eb8a:	69e3      	ldr	r3, [r4, #28]
    eb8c:	b173      	cbz	r3, ebac <lv_img_decoder_built_in_open+0x11c>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    eb8e:	69e6      	ldr	r6, [r4, #28]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
    eb90:	2002      	movs	r0, #2
    eb92:	40b8      	lsls	r0, r7
    eb94:	4b5e      	ldr	r3, [pc, #376]	; (ed10 <lv_img_decoder_built_in_open+0x280>)
    eb96:	4798      	blx	r3
    eb98:	6070      	str	r0, [r6, #4]
        LV_ASSERT_MEM(user_data->palette);
    eb9a:	4b5e      	ldr	r3, [pc, #376]	; (ed14 <lv_img_decoder_built_in_open+0x284>)
    eb9c:	4798      	blx	r3
    eb9e:	b9f0      	cbnz	r0, ebde <lv_img_decoder_built_in_open+0x14e>
    eba0:	6872      	ldr	r2, [r6, #4]
    eba2:	2300      	movs	r3, #0
    eba4:	485d      	ldr	r0, [pc, #372]	; (ed1c <lv_img_decoder_built_in_open+0x28c>)
    eba6:	495e      	ldr	r1, [pc, #376]	; (ed20 <lv_img_decoder_built_in_open+0x290>)
    eba8:	4788      	blx	r1
    ebaa:	e7fe      	b.n	ebaa <lv_img_decoder_built_in_open+0x11a>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
    ebac:	200c      	movs	r0, #12
    ebae:	4b58      	ldr	r3, [pc, #352]	; (ed10 <lv_img_decoder_built_in_open+0x280>)
    ebb0:	4798      	blx	r3
    ebb2:	61e0      	str	r0, [r4, #28]
            LV_ASSERT_MEM(dsc->user_data);
    ebb4:	4b57      	ldr	r3, [pc, #348]	; (ed14 <lv_img_decoder_built_in_open+0x284>)
    ebb6:	4798      	blx	r3
    ebb8:	b928      	cbnz	r0, ebc6 <lv_img_decoder_built_in_open+0x136>
    ebba:	69e2      	ldr	r2, [r4, #28]
    ebbc:	2300      	movs	r3, #0
    ebbe:	4857      	ldr	r0, [pc, #348]	; (ed1c <lv_img_decoder_built_in_open+0x28c>)
    ebc0:	4957      	ldr	r1, [pc, #348]	; (ed20 <lv_img_decoder_built_in_open+0x290>)
    ebc2:	4788      	blx	r1
    ebc4:	e7fe      	b.n	ebc4 <lv_img_decoder_built_in_open+0x134>
            if(dsc->user_data == NULL) {
    ebc6:	69e0      	ldr	r0, [r4, #28]
    ebc8:	b928      	cbnz	r0, ebd6 <lv_img_decoder_built_in_open+0x146>
                lv_img_decoder_built_in_close(decoder, dsc);
    ebca:	4621      	mov	r1, r4
    ebcc:	4628      	mov	r0, r5
    ebce:	4b52      	ldr	r3, [pc, #328]	; (ed18 <lv_img_decoder_built_in_open+0x288>)
    ebd0:	4798      	blx	r3
                return LV_RES_INV;
    ebd2:	2000      	movs	r0, #0
    ebd4:	e777      	b.n	eac6 <lv_img_decoder_built_in_open+0x36>
            _lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
    ebd6:	210c      	movs	r1, #12
    ebd8:	4b52      	ldr	r3, [pc, #328]	; (ed24 <lv_img_decoder_built_in_open+0x294>)
    ebda:	4798      	blx	r3
    ebdc:	e7d7      	b.n	eb8e <lv_img_decoder_built_in_open+0xfe>
        uint32_t palette_size = 1 << px_size;
    ebde:	2301      	movs	r3, #1
    ebe0:	fa03 f707 	lsl.w	r7, r3, r7
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
    ebe4:	4638      	mov	r0, r7
    ebe6:	4b4a      	ldr	r3, [pc, #296]	; (ed10 <lv_img_decoder_built_in_open+0x280>)
    ebe8:	4798      	blx	r3
    ebea:	60b0      	str	r0, [r6, #8]
        LV_ASSERT_MEM(user_data->opa);
    ebec:	4b49      	ldr	r3, [pc, #292]	; (ed14 <lv_img_decoder_built_in_open+0x284>)
    ebee:	4798      	blx	r3
    ebf0:	b380      	cbz	r0, ec54 <lv_img_decoder_built_in_open+0x1c4>
        if(user_data->palette == NULL || user_data->opa == NULL) {
    ebf2:	6873      	ldr	r3, [r6, #4]
    ebf4:	2b00      	cmp	r3, #0
    ebf6:	d033      	beq.n	ec60 <lv_img_decoder_built_in_open+0x1d0>
    ebf8:	68b3      	ldr	r3, [r6, #8]
    ebfa:	b38b      	cbz	r3, ec60 <lv_img_decoder_built_in_open+0x1d0>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
    ebfc:	7aa3      	ldrb	r3, [r4, #10]
    ebfe:	2b01      	cmp	r3, #1
    ec00:	d034      	beq.n	ec6c <lv_img_decoder_built_in_open+0x1dc>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
    ec02:	6863      	ldr	r3, [r4, #4]
    ec04:	689a      	ldr	r2, [r3, #8]
            for(i = 0; i < palette_size; i++) {
    ec06:	2f00      	cmp	r7, #0
    ec08:	d062      	beq.n	ecd0 <lv_img_decoder_built_in_open+0x240>
    ec0a:	2300      	movs	r3, #0
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
    ec0c:	6870      	ldr	r0, [r6, #4]
    ec0e:	eb00 0c43 	add.w	ip, r0, r3, lsl #1
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
    ec12:	f892 e001 	ldrb.w	lr, [r2, #1]
    ec16:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
    ec1a:	7895      	ldrb	r5, [r2, #2]
    ec1c:	08ed      	lsrs	r5, r5, #3
    ec1e:	7811      	ldrb	r1, [r2, #0]
    ec20:	08c9      	lsrs	r1, r1, #3
    ec22:	f810 8013 	ldrb.w	r8, [r0, r3, lsl #1]
    ec26:	f361 0804 	bfi	r8, r1, #0, #5
    ec2a:	f800 8013 	strb.w	r8, [r0, r3, lsl #1]
    ec2e:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
    ec32:	f36e 114a 	bfi	r1, lr, #5, #6
    ec36:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
    ec3a:	0a09      	lsrs	r1, r1, #8
    ec3c:	f365 01c7 	bfi	r1, r5, #3, #5
    ec40:	f88c 1001 	strb.w	r1, [ip, #1]
                user_data->opa[i]     = palette_p[i].ch.alpha;
    ec44:	78d0      	ldrb	r0, [r2, #3]
    ec46:	68b1      	ldr	r1, [r6, #8]
    ec48:	54c8      	strb	r0, [r1, r3]
            for(i = 0; i < palette_size; i++) {
    ec4a:	3301      	adds	r3, #1
    ec4c:	3204      	adds	r2, #4
    ec4e:	429f      	cmp	r7, r3
    ec50:	d1dc      	bne.n	ec0c <lv_img_decoder_built_in_open+0x17c>
    ec52:	e03d      	b.n	ecd0 <lv_img_decoder_built_in_open+0x240>
        LV_ASSERT_MEM(user_data->opa);
    ec54:	68b2      	ldr	r2, [r6, #8]
    ec56:	2300      	movs	r3, #0
    ec58:	4830      	ldr	r0, [pc, #192]	; (ed1c <lv_img_decoder_built_in_open+0x28c>)
    ec5a:	4931      	ldr	r1, [pc, #196]	; (ed20 <lv_img_decoder_built_in_open+0x290>)
    ec5c:	4788      	blx	r1
    ec5e:	e7fe      	b.n	ec5e <lv_img_decoder_built_in_open+0x1ce>
            lv_img_decoder_built_in_close(decoder, dsc);
    ec60:	4621      	mov	r1, r4
    ec62:	4628      	mov	r0, r5
    ec64:	4b2c      	ldr	r3, [pc, #176]	; (ed18 <lv_img_decoder_built_in_open+0x288>)
    ec66:	4798      	blx	r3
            return LV_RES_INV;
    ec68:	2000      	movs	r0, #0
    ec6a:	e72c      	b.n	eac6 <lv_img_decoder_built_in_open+0x36>
            lv_fs_seek(user_data->f, 4); /*Skip the header*/
    ec6c:	2104      	movs	r1, #4
    ec6e:	6830      	ldr	r0, [r6, #0]
    ec70:	4b2e      	ldr	r3, [pc, #184]	; (ed2c <lv_img_decoder_built_in_open+0x29c>)
    ec72:	4798      	blx	r3
            for(i = 0; i < palette_size; i++) {
    ec74:	b367      	cbz	r7, ecd0 <lv_img_decoder_built_in_open+0x240>
    ec76:	2500      	movs	r5, #0
                lv_fs_read(user_data->f, &cur_color, sizeof(lv_color32_t), NULL);
    ec78:	46a9      	mov	r9, r5
    ec7a:	f8df 80b4 	ldr.w	r8, [pc, #180]	; ed30 <lv_img_decoder_built_in_open+0x2a0>
    ec7e:	464b      	mov	r3, r9
    ec80:	2204      	movs	r2, #4
    ec82:	4669      	mov	r1, sp
    ec84:	6830      	ldr	r0, [r6, #0]
    ec86:	47c0      	blx	r8
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
    ec88:	6872      	ldr	r2, [r6, #4]
    ec8a:	eb02 0e45 	add.w	lr, r2, r5, lsl #1
    ec8e:	f89d 0001 	ldrb.w	r0, [sp, #1]
    ec92:	0880      	lsrs	r0, r0, #2
    ec94:	f89d 1002 	ldrb.w	r1, [sp, #2]
    ec98:	08c9      	lsrs	r1, r1, #3
    ec9a:	f89d 3000 	ldrb.w	r3, [sp]
    ec9e:	08db      	lsrs	r3, r3, #3
    eca0:	f812 c015 	ldrb.w	ip, [r2, r5, lsl #1]
    eca4:	f363 0c04 	bfi	ip, r3, #0, #5
    eca8:	f802 c015 	strb.w	ip, [r2, r5, lsl #1]
    ecac:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
    ecb0:	f360 134a 	bfi	r3, r0, #5, #6
    ecb4:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
    ecb8:	0a1b      	lsrs	r3, r3, #8
    ecba:	f361 03c7 	bfi	r3, r1, #3, #5
    ecbe:	f88e 3001 	strb.w	r3, [lr, #1]
                user_data->opa[i]     = cur_color.ch.alpha;
    ecc2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ecc6:	68b3      	ldr	r3, [r6, #8]
    ecc8:	555a      	strb	r2, [r3, r5]
            for(i = 0; i < palette_size; i++) {
    ecca:	3501      	adds	r5, #1
    eccc:	42af      	cmp	r7, r5
    ecce:	d1d6      	bne.n	ec7e <lv_img_decoder_built_in_open+0x1ee>
        dsc->img_data = NULL;
    ecd0:	2300      	movs	r3, #0
    ecd2:	6123      	str	r3, [r4, #16]
        return LV_RES_OK;
    ecd4:	2001      	movs	r0, #1
    ecd6:	e6f6      	b.n	eac6 <lv_img_decoder_built_in_open+0x36>
        lv_img_decoder_built_in_close(decoder, dsc);
    ecd8:	4621      	mov	r1, r4
    ecda:	4628      	mov	r0, r5
    ecdc:	4b0e      	ldr	r3, [pc, #56]	; (ed18 <lv_img_decoder_built_in_open+0x288>)
    ecde:	4798      	blx	r3
        return LV_RES_INV;
    ece0:	2000      	movs	r0, #0
    ece2:	e6f0      	b.n	eac6 <lv_img_decoder_built_in_open+0x36>
            return LV_RES_INV;
    ece4:	2000      	movs	r0, #0
    ece6:	e6ee      	b.n	eac6 <lv_img_decoder_built_in_open+0x36>
    lv_img_cf_t cf = dsc->header.cf;
    ece8:	7b08      	ldrb	r0, [r1, #12]
    ecea:	f000 001f 	and.w	r0, r0, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
    ecee:	1f03      	subs	r3, r0, #4
    ecf0:	b2db      	uxtb	r3, r3
    ecf2:	2b02      	cmp	r3, #2
    ecf4:	f63f af38 	bhi.w	eb68 <lv_img_decoder_built_in_open+0xd8>
            dsc->img_data = NULL;
    ecf8:	2300      	movs	r3, #0
    ecfa:	6123      	str	r3, [r4, #16]
            return LV_RES_OK;
    ecfc:	2001      	movs	r0, #1
    ecfe:	e6e2      	b.n	eac6 <lv_img_decoder_built_in_open+0x36>
    ed00:	00011001 	.word	0x00011001
    ed04:	00017a0c 	.word	0x00017a0c
    ed08:	000176d3 	.word	0x000176d3
    ed0c:	00010f4d 	.word	0x00010f4d
    ed10:	00011575 	.word	0x00011575
    ed14:	0000295d 	.word	0x0000295d
    ed18:	0000ea55 	.word	0x0000ea55
    ed1c:	0001786c 	.word	0x0001786c
    ed20:	00002965 	.word	0x00002965
    ed24:	00011c17 	.word	0x00011c17
    ed28:	00008ced 	.word	0x00008ced
    ed2c:	00010ef9 	.word	0x00010ef9
    ed30:	00010ebd 	.word	0x00010ebd

0000ed34 <lv_img_decoder_built_in_read_line>:
{
    ed34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ed38:	b089      	sub	sp, #36	; 0x24
    ed3a:	460d      	mov	r5, r1
    ed3c:	4614      	mov	r4, r2
    ed3e:	469a      	mov	sl, r3
    ed40:	f9bd 6048 	ldrsh.w	r6, [sp, #72]	; 0x48
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
    ed44:	7b0b      	ldrb	r3, [r1, #12]
    ed46:	f003 031f 	and.w	r3, r3, #31
    ed4a:	1f1a      	subs	r2, r3, #4
    ed4c:	b2d2      	uxtb	r2, r2
    ed4e:	2a02      	cmp	r2, #2
    ed50:	d832      	bhi.n	edb8 <lv_img_decoder_built_in_read_line+0x84>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
    ed52:	7a8b      	ldrb	r3, [r1, #10]
    ed54:	2b01      	cmp	r3, #1
    ed56:	d003      	beq.n	ed60 <lv_img_decoder_built_in_read_line+0x2c>
    lv_res_t res = LV_RES_INV;
    ed58:	2000      	movs	r0, #0
}
    ed5a:	b009      	add	sp, #36	; 0x24
    ed5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

static lv_res_t lv_img_decoder_built_in_line_true_color(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                        lv_coord_t len, uint8_t * buf)
{
#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    ed60:	f8d1 801c 	ldr.w	r8, [r1, #28]
    lv_fs_res_t res;
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
    ed64:	7b08      	ldrb	r0, [r1, #12]
    ed66:	f000 001f 	and.w	r0, r0, #31
    ed6a:	4bb5      	ldr	r3, [pc, #724]	; (f040 <lv_img_decoder_built_in_read_line+0x30c>)
    ed6c:	4798      	blx	r3
    ed6e:	4607      	mov	r7, r0

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
    ed70:	68e9      	ldr	r1, [r5, #12]
    ed72:	f3c1 218a 	ubfx	r1, r1, #10, #11
    ed76:	fb0a 4101 	mla	r1, sl, r1, r4
    ed7a:	fb00 f101 	mul.w	r1, r0, r1
    ed7e:	10c9      	asrs	r1, r1, #3
    pos += 4; /*Skip the header*/
    res = lv_fs_seek(user_data->f, pos);
    ed80:	3104      	adds	r1, #4
    ed82:	f8d8 0000 	ldr.w	r0, [r8]
    ed86:	4baf      	ldr	r3, [pc, #700]	; (f044 <lv_img_decoder_built_in_read_line+0x310>)
    ed88:	4798      	blx	r3
    if(res != LV_FS_RES_OK) {
    ed8a:	b108      	cbz	r0, ed90 <lv_img_decoder_built_in_read_line+0x5c>
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
    ed8c:	2000      	movs	r0, #0
    ed8e:	e7e4      	b.n	ed5a <lv_img_decoder_built_in_read_line+0x26>
    }
    uint32_t btr = len * (px_size >> 3);
    ed90:	f3c7 00c7 	ubfx	r0, r7, #3, #8
    ed94:	fb06 f600 	mul.w	r6, r6, r0
    uint32_t br  = 0;
    ed98:	ab08      	add	r3, sp, #32
    ed9a:	2200      	movs	r2, #0
    ed9c:	f843 2d10 	str.w	r2, [r3, #-16]!
    lv_fs_read(user_data->f, buf, btr, &br);
    eda0:	4632      	mov	r2, r6
    eda2:	9913      	ldr	r1, [sp, #76]	; 0x4c
    eda4:	f8d8 0000 	ldr.w	r0, [r8]
    eda8:	4ca7      	ldr	r4, [pc, #668]	; (f048 <lv_img_decoder_built_in_read_line+0x314>)
    edaa:	47a0      	blx	r4
        return LV_RES_INV;
    edac:	9804      	ldr	r0, [sp, #16]
    edae:	42b0      	cmp	r0, r6
    edb0:	bf14      	ite	ne
    edb2:	2000      	movne	r0, #0
    edb4:	2001      	moveq	r0, #1
    edb6:	e7d0      	b.n	ed5a <lv_img_decoder_built_in_read_line+0x26>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
    edb8:	f1a3 020b 	sub.w	r2, r3, #11
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
    edbc:	b2d2      	uxtb	r2, r2
    edbe:	2a03      	cmp	r2, #3
    edc0:	d906      	bls.n	edd0 <lv_img_decoder_built_in_read_line+0x9c>
            dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
    edc2:	3b07      	subs	r3, #7
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
    edc4:	b2db      	uxtb	r3, r3
    edc6:	2b03      	cmp	r3, #3
    edc8:	f240 80d6 	bls.w	ef78 <lv_img_decoder_built_in_read_line+0x244>
        return LV_RES_INV;
    edcc:	2000      	movs	r0, #0
    edce:	e7c4      	b.n	ed5a <lv_img_decoder_built_in_read_line+0x26>
static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{

#if LV_IMG_CF_ALPHA
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
    edd0:	2200      	movs	r2, #0
    edd2:	f88d 2008 	strb.w	r2, [sp, #8]
    edd6:	23ff      	movs	r3, #255	; 0xff
    edd8:	f88d 3009 	strb.w	r3, [sp, #9]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
    eddc:	f88d 200c 	strb.w	r2, [sp, #12]
    ede0:	2255      	movs	r2, #85	; 0x55
    ede2:	f88d 200d 	strb.w	r2, [sp, #13]
    ede6:	22aa      	movs	r2, #170	; 0xaa
    ede8:	f88d 200e 	strb.w	r2, [sp, #14]
    edec:	f88d 300f 	strb.w	r3, [sp, #15]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
    edf0:	4b96      	ldr	r3, [pc, #600]	; (f04c <lv_img_decoder_built_in_read_line+0x318>)
    edf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    edf4:	af08      	add	r7, sp, #32
    edf6:	e907 000f 	stmdb	r7, {r0, r1, r2, r3}
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
                                          };

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->color;
    edfa:	8929      	ldrh	r1, [r5, #8]
    lv_coord_t i;
    for(i = 0; i < len; i++) {
    edfc:	2e00      	cmp	r6, #0
    edfe:	dd0c      	ble.n	ee1a <lv_img_decoder_built_in_read_line+0xe6>
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
    ee00:	0a08      	lsrs	r0, r1, #8
    ee02:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ee04:	1e72      	subs	r2, r6, #1
    ee06:	b292      	uxth	r2, r2
    ee08:	3201      	adds	r2, #1
    ee0a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    ee0e:	441a      	add	r2, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
    ee10:	7019      	strb	r1, [r3, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
    ee12:	7058      	strb	r0, [r3, #1]
    ee14:	3303      	adds	r3, #3
    for(i = 0; i < len; i++) {
    ee16:	429a      	cmp	r2, r3
    ee18:	d1fa      	bne.n	ee10 <lv_img_decoder_built_in_read_line+0xdc>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
    ee1a:	7b28      	ldrb	r0, [r5, #12]
    ee1c:	f000 001f 	and.w	r0, r0, #31
    ee20:	4b87      	ldr	r3, [pc, #540]	; (f040 <lv_img_decoder_built_in_read_line+0x30c>)
    ee22:	4798      	blx	r3
    ee24:	4680      	mov	r8, r0
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
    ee26:	2701      	movs	r7, #1
    ee28:	4087      	lsls	r7, r0
    ee2a:	3f01      	subs	r7, #1
    ee2c:	b2bf      	uxth	r7, r7

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos   = 0;
    switch(dsc->header.cf) {
    ee2e:	7b2b      	ldrb	r3, [r5, #12]
    ee30:	f003 031f 	and.w	r3, r3, #31
    ee34:	3b0b      	subs	r3, #11
    ee36:	2b03      	cmp	r3, #3
    ee38:	f200 8083 	bhi.w	ef42 <lv_img_decoder_built_in_read_line+0x20e>
    ee3c:	e8df f003 	tbb	[pc, r3]
    ee40:	76614c02 	.word	0x76614c02
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
    ee44:	68eb      	ldr	r3, [r5, #12]
    ee46:	f3c3 238a 	ubfx	r3, r3, #10, #11
    ee4a:	10da      	asrs	r2, r3, #3
            if(dsc->header.w & 0x7) w++;
    ee4c:	f013 0f07 	tst.w	r3, #7
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
    ee50:	bf0c      	ite	eq
    ee52:	fa0f fb82 	sxtheq.w	fp, r2
            if(dsc->header.w & 0x7) w++;
    ee56:	f102 0b01 	addne.w	fp, r2, #1
            ofs += w * y + (x >> 3); /*First pixel*/
    ee5a:	10e3      	asrs	r3, r4, #3
    ee5c:	fb0a 3a0b 	mla	sl, sl, fp, r3
            pos       = 7 - (x & 0x7);
    ee60:	43e4      	mvns	r4, r4
    ee62:	f004 0407 	and.w	r4, r4, #7
            opa_table = alpha1_opa_table;
    ee66:	f10d 0908 	add.w	r9, sp, #8
            pos = 0;
            break;
    }

#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    ee6a:	69eb      	ldr	r3, [r5, #28]
    ee6c:	9301      	str	r3, [sp, #4]
    uint8_t * fs_buf = _lv_mem_buf_get(w);
    ee6e:	4658      	mov	r0, fp
    ee70:	4b77      	ldr	r3, [pc, #476]	; (f050 <lv_img_decoder_built_in_read_line+0x31c>)
    ee72:	4798      	blx	r3
    ee74:	9000      	str	r0, [sp, #0]
#endif

    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
    ee76:	7aab      	ldrb	r3, [r5, #10]
    ee78:	2b00      	cmp	r3, #0
    ee7a:	d16b      	bne.n	ef54 <lv_img_decoder_built_in_read_line+0x220>
        const lv_img_dsc_t * img_dsc = dsc->src;

        data_tmp = img_dsc->data + ofs;
    ee7c:	686b      	ldr	r3, [r5, #4]
    ee7e:	689b      	ldr	r3, [r3, #8]
    ee80:	449a      	add	sl, r3
        data_tmp = NULL; /*To avoid warnings*/
        return LV_RES_INV;
#endif
    }

    for(i = 0; i < len; i++) {
    ee82:	2e00      	cmp	r6, #0
    ee84:	dd23      	ble.n	eece <lv_img_decoder_built_in_read_line+0x19a>
    ee86:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    ee88:	1e71      	subs	r1, r6, #1
    ee8a:	b289      	uxth	r1, r1
    ee8c:	3101      	adds	r1, #1
    ee8e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    ee92:	4411      	add	r1, r2
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
    ee94:	f1c8 0008 	rsb	r0, r8, #8
    ee98:	b240      	sxtb	r0, r0
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
    ee9a:	f89a 3000 	ldrb.w	r3, [sl]
    ee9e:	fa07 f604 	lsl.w	r6, r7, r4
    eea2:	4033      	ands	r3, r6
    eea4:	4123      	asrs	r3, r4
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
    eea6:	7b2e      	ldrb	r6, [r5, #12]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
    eea8:	f006 061f 	and.w	r6, r6, #31
    eeac:	2e0e      	cmp	r6, #14
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
    eeae:	b2db      	uxtb	r3, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
    eeb0:	bf18      	it	ne
    eeb2:	f819 3003 	ldrbne.w	r3, [r9, r3]
    eeb6:	7093      	strb	r3, [r2, #2]
        pos -= px_size;
    eeb8:	eba4 0408 	sub.w	r4, r4, r8
    eebc:	b264      	sxtb	r4, r4
        if(pos < 0) {
    eebe:	2c00      	cmp	r4, #0
            pos = 8 - px_size;
    eec0:	bfbc      	itt	lt
    eec2:	4604      	movlt	r4, r0
            data_tmp++;
    eec4:	f10a 0a01 	addlt.w	sl, sl, #1
    eec8:	3203      	adds	r2, #3
    for(i = 0; i < len; i++) {
    eeca:	4291      	cmp	r1, r2
    eecc:	d1e5      	bne.n	ee9a <lv_img_decoder_built_in_read_line+0x166>
        }
    }
#if LV_USE_FILESYSTEM
    _lv_mem_buf_release(fs_buf);
    eece:	9800      	ldr	r0, [sp, #0]
    eed0:	4b60      	ldr	r3, [pc, #384]	; (f054 <lv_img_decoder_built_in_read_line+0x320>)
    eed2:	4798      	blx	r3
        res = lv_img_decoder_built_in_line_alpha(dsc, x, y, len, buf);
    eed4:	2001      	movs	r0, #1
    eed6:	e740      	b.n	ed5a <lv_img_decoder_built_in_read_line+0x26>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
    eed8:	68eb      	ldr	r3, [r5, #12]
    eeda:	f3c3 238a 	ubfx	r3, r3, #10, #11
    eede:	109a      	asrs	r2, r3, #2
            if(dsc->header.w & 0x3) w++;
    eee0:	f013 0f03 	tst.w	r3, #3
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
    eee4:	bf0c      	ite	eq
    eee6:	fa0f fb82 	sxtheq.w	fp, r2
            if(dsc->header.w & 0x3) w++;
    eeea:	f102 0b01 	addne.w	fp, r2, #1
            ofs += w * y + (x >> 2); /*First pixel*/
    eeee:	10a3      	asrs	r3, r4, #2
    eef0:	fb0a 3a0b 	mla	sl, sl, fp, r3
            pos       = 6 - ((x & 0x3) * 2);
    eef4:	43e4      	mvns	r4, r4
    eef6:	f004 0403 	and.w	r4, r4, #3
    eefa:	0064      	lsls	r4, r4, #1
            opa_table = alpha2_opa_table;
    eefc:	f10d 090c 	add.w	r9, sp, #12
    ef00:	e7b3      	b.n	ee6a <lv_img_decoder_built_in_read_line+0x136>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
    ef02:	68eb      	ldr	r3, [r5, #12]
    ef04:	f3c3 238a 	ubfx	r3, r3, #10, #11
    ef08:	105a      	asrs	r2, r3, #1
            if(dsc->header.w & 0x1) w++;
    ef0a:	f013 0f01 	tst.w	r3, #1
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
    ef0e:	bf0c      	ite	eq
    ef10:	fa0f fb82 	sxtheq.w	fp, r2
            if(dsc->header.w & 0x1) w++;
    ef14:	f102 0b01 	addne.w	fp, r2, #1
            ofs += w * y + (x >> 1); /*First pixel*/
    ef18:	1063      	asrs	r3, r4, #1
    ef1a:	fb0a 3a0b 	mla	sl, sl, fp, r3
            pos       = 4 - ((x & 0x1) * 4);
    ef1e:	f014 0f01 	tst.w	r4, #1
    ef22:	d013      	beq.n	ef4c <lv_img_decoder_built_in_read_line+0x218>
    ef24:	2400      	movs	r4, #0
            opa_table = alpha4_opa_table;
    ef26:	f10d 0910 	add.w	r9, sp, #16
    ef2a:	e79e      	b.n	ee6a <lv_img_decoder_built_in_read_line+0x136>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
    ef2c:	68eb      	ldr	r3, [r5, #12]
    ef2e:	f3c3 238a 	ubfx	r3, r3, #10, #11
    ef32:	b29a      	uxth	r2, r3
    ef34:	fa0f fb83 	sxth.w	fp, r3
            ofs += w * y + x;  /*First pixel*/
    ef38:	fb0a 4a02 	mla	sl, sl, r2, r4
            pos = 0;
    ef3c:	2400      	movs	r4, #0
    const lv_opa_t * opa_table = NULL;
    ef3e:	46a1      	mov	r9, r4
    ef40:	e793      	b.n	ee6a <lv_img_decoder_built_in_read_line+0x136>
    int8_t pos   = 0;
    ef42:	2400      	movs	r4, #0
    uint32_t ofs = 0;
    ef44:	46a2      	mov	sl, r4
    lv_coord_t w = 0;
    ef46:	46a3      	mov	fp, r4
    const lv_opa_t * opa_table = NULL;
    ef48:	46a1      	mov	r9, r4
    ef4a:	e78e      	b.n	ee6a <lv_img_decoder_built_in_read_line+0x136>
            pos       = 4 - ((x & 0x1) * 4);
    ef4c:	2404      	movs	r4, #4
            opa_table = alpha4_opa_table;
    ef4e:	f10d 0910 	add.w	r9, sp, #16
    ef52:	e78a      	b.n	ee6a <lv_img_decoder_built_in_read_line+0x136>
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
    ef54:	f10a 0104 	add.w	r1, sl, #4
    ef58:	9b01      	ldr	r3, [sp, #4]
    ef5a:	6818      	ldr	r0, [r3, #0]
    ef5c:	4b39      	ldr	r3, [pc, #228]	; (f044 <lv_img_decoder_built_in_read_line+0x310>)
    ef5e:	4798      	blx	r3
        lv_fs_read(user_data->f, fs_buf, w, NULL);
    ef60:	2300      	movs	r3, #0
    ef62:	465a      	mov	r2, fp
    ef64:	f8dd b000 	ldr.w	fp, [sp]
    ef68:	4659      	mov	r1, fp
    ef6a:	9801      	ldr	r0, [sp, #4]
    ef6c:	6800      	ldr	r0, [r0, #0]
    ef6e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; f048 <lv_img_decoder_built_in_read_line+0x314>
    ef72:	47d0      	blx	sl
        data_tmp = fs_buf;
    ef74:	46da      	mov	sl, fp
    ef76:	e784      	b.n	ee82 <lv_img_decoder_built_in_read_line+0x14e>
static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{

#if LV_IMG_CF_INDEXED
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
    ef78:	7b08      	ldrb	r0, [r1, #12]
    ef7a:	f000 001f 	and.w	r0, r0, #31
    ef7e:	4b30      	ldr	r3, [pc, #192]	; (f040 <lv_img_decoder_built_in_read_line+0x30c>)
    ef80:	4798      	blx	r3
    ef82:	4681      	mov	r9, r0
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
    ef84:	f04f 0801 	mov.w	r8, #1
    ef88:	fa08 f800 	lsl.w	r8, r8, r0
    ef8c:	f108 38ff 	add.w	r8, r8, #4294967295
    ef90:	fa1f f888 	uxth.w	r8, r8

    lv_coord_t w = 0;
    int8_t pos   = 0;
    uint32_t ofs = 0;
    switch(dsc->header.cf) {
    ef94:	7b2b      	ldrb	r3, [r5, #12]
    ef96:	f003 031f 	and.w	r3, r3, #31
    ef9a:	3b07      	subs	r3, #7
    ef9c:	2b03      	cmp	r3, #3
    ef9e:	f200 8096 	bhi.w	f0ce <lv_img_decoder_built_in_read_line+0x39a>
    efa2:	e8df f003 	tbb	[pc, r3]
    efa6:	5902      	.short	0x5902
    efa8:	876f      	.short	0x876f
        case LV_IMG_CF_INDEXED_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
    efaa:	68eb      	ldr	r3, [r5, #12]
    efac:	f3c3 238a 	ubfx	r3, r3, #10, #11
    efb0:	ea4f 0be3 	mov.w	fp, r3, asr #3
            if(dsc->header.w & 0x7) w++;
    efb4:	f013 0f07 	tst.w	r3, #7
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
    efb8:	bf0c      	ite	eq
    efba:	fa0f fb8b 	sxtheq.w	fp, fp
            if(dsc->header.w & 0x7) w++;
    efbe:	f10b 0b01 	addne.w	fp, fp, #1
            ofs += w * y + (x >> 3); /*First pixel*/
    efc2:	10e3      	asrs	r3, r4, #3
    efc4:	fb0a 3a0b 	mla	sl, sl, fp, r3
            ofs += 8;                /*Skip the palette*/
    efc8:	f10a 0a08 	add.w	sl, sl, #8
            pos = 7 - (x & 0x7);
    efcc:	43e4      	mvns	r4, r4
    efce:	f004 0407 	and.w	r4, r4, #7
            ofs += 1024;       /*Skip the palette*/
            pos = 0;
            break;
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    efd2:	69ef      	ldr	r7, [r5, #28]

#if LV_USE_FILESYSTEM
    uint8_t * fs_buf = _lv_mem_buf_get(w);
    efd4:	4658      	mov	r0, fp
    efd6:	4b1e      	ldr	r3, [pc, #120]	; (f050 <lv_img_decoder_built_in_read_line+0x31c>)
    efd8:	4798      	blx	r3
    efda:	9000      	str	r0, [sp, #0]
#endif
    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
    efdc:	7aab      	ldrb	r3, [r5, #10]
    efde:	2b00      	cmp	r3, #0
    efe0:	d17a      	bne.n	f0d8 <lv_img_decoder_built_in_read_line+0x3a4>
        const lv_img_dsc_t * img_dsc = dsc->src;
        data_tmp                     = img_dsc->data + ofs;
    efe2:	686b      	ldr	r3, [r5, #4]
    efe4:	689b      	ldr	r3, [r3, #8]
    efe6:	449a      	add	sl, r3
        return LV_RES_INV;
#endif
    }

    lv_coord_t i;
    for(i = 0; i < len; i++) {
    efe8:	2e00      	cmp	r6, #0
    efea:	dd24      	ble.n	f036 <lv_img_decoder_built_in_read_line+0x302>
    efec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    efee:	1e71      	subs	r1, r6, #1
    eff0:	b289      	uxth	r1, r1
    eff2:	3101      	adds	r1, #1
    eff4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    eff8:	4411      	add	r1, r2
#endif
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
    effa:	f1c9 0508 	rsb	r5, r9, #8
    effe:	b26d      	sxtb	r5, r5
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
    f000:	f89a 3000 	ldrb.w	r3, [sl]
    f004:	fa08 f004 	lsl.w	r0, r8, r4
    f008:	4003      	ands	r3, r0
    f00a:	4123      	asrs	r3, r4
        lv_color_t color = user_data->palette[val_act];
    f00c:	b2db      	uxtb	r3, r3
    f00e:	6878      	ldr	r0, [r7, #4]
    f010:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full & 0xFF;
    f014:	7010      	strb	r0, [r2, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (color.full >> 8) & 0xFF;
    f016:	0a00      	lsrs	r0, r0, #8
    f018:	7050      	strb	r0, [r2, #1]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
    f01a:	68b8      	ldr	r0, [r7, #8]
    f01c:	5cc3      	ldrb	r3, [r0, r3]
    f01e:	7093      	strb	r3, [r2, #2]
        pos -= px_size;
    f020:	eba4 0409 	sub.w	r4, r4, r9
    f024:	b264      	sxtb	r4, r4
        if(pos < 0) {
    f026:	2c00      	cmp	r4, #0
            pos = 8 - px_size;
    f028:	bfbc      	itt	lt
    f02a:	462c      	movlt	r4, r5
            data_tmp++;
    f02c:	f10a 0a01 	addlt.w	sl, sl, #1
    f030:	3203      	adds	r2, #3
    for(i = 0; i < len; i++) {
    f032:	428a      	cmp	r2, r1
    f034:	d1e4      	bne.n	f000 <lv_img_decoder_built_in_read_line+0x2cc>
        }
    }
#if LV_USE_FILESYSTEM
    _lv_mem_buf_release(fs_buf);
    f036:	9800      	ldr	r0, [sp, #0]
    f038:	4b06      	ldr	r3, [pc, #24]	; (f054 <lv_img_decoder_built_in_read_line+0x320>)
    f03a:	4798      	blx	r3
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
    f03c:	2001      	movs	r0, #1
    f03e:	e68c      	b.n	ed5a <lv_img_decoder_built_in_read_line+0x26>
    f040:	00008ced 	.word	0x00008ced
    f044:	00010ef9 	.word	0x00010ef9
    f048:	00010ebd 	.word	0x00010ebd
    f04c:	000179fc 	.word	0x000179fc
    f050:	00011a65 	.word	0x00011a65
    f054:	000116e5 	.word	0x000116e5
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
    f058:	68eb      	ldr	r3, [r5, #12]
    f05a:	f3c3 238a 	ubfx	r3, r3, #10, #11
    f05e:	ea4f 0ba3 	mov.w	fp, r3, asr #2
            if(dsc->header.w & 0x3) w++;
    f062:	f013 0f03 	tst.w	r3, #3
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
    f066:	bf0c      	ite	eq
    f068:	fa0f fb8b 	sxtheq.w	fp, fp
            if(dsc->header.w & 0x3) w++;
    f06c:	f10b 0b01 	addne.w	fp, fp, #1
            ofs += w * y + (x >> 2); /*First pixel*/
    f070:	10a3      	asrs	r3, r4, #2
    f072:	fb0a 3a0b 	mla	sl, sl, fp, r3
            ofs += 16;               /*Skip the palette*/
    f076:	f10a 0a10 	add.w	sl, sl, #16
            pos = 6 - ((x & 0x3) * 2);
    f07a:	43e4      	mvns	r4, r4
    f07c:	f004 0403 	and.w	r4, r4, #3
    f080:	0064      	lsls	r4, r4, #1
    f082:	e7a6      	b.n	efd2 <lv_img_decoder_built_in_read_line+0x29e>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
    f084:	68eb      	ldr	r3, [r5, #12]
    f086:	f3c3 238a 	ubfx	r3, r3, #10, #11
    f08a:	ea4f 0b63 	mov.w	fp, r3, asr #1
            if(dsc->header.w & 0x1) w++;
    f08e:	f013 0f01 	tst.w	r3, #1
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
    f092:	bf0c      	ite	eq
    f094:	fa0f fb8b 	sxtheq.w	fp, fp
            if(dsc->header.w & 0x1) w++;
    f098:	f10b 0b01 	addne.w	fp, fp, #1
            ofs += w * y + (x >> 1); /*First pixel*/
    f09c:	1063      	asrs	r3, r4, #1
    f09e:	fb0a 3a0b 	mla	sl, sl, fp, r3
            ofs += 64;               /*Skip the palette*/
    f0a2:	f10a 0a40 	add.w	sl, sl, #64	; 0x40
            pos = 4 - ((x & 0x1) * 4);
    f0a6:	f004 0401 	and.w	r4, r4, #1
    f0aa:	2c00      	cmp	r4, #0
    f0ac:	bf0c      	ite	eq
    f0ae:	2404      	moveq	r4, #4
    f0b0:	2400      	movne	r4, #0
    f0b2:	e78e      	b.n	efd2 <lv_img_decoder_built_in_read_line+0x29e>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
    f0b4:	68eb      	ldr	r3, [r5, #12]
    f0b6:	f3c3 2b8a 	ubfx	fp, r3, #10, #11
    f0ba:	fa1f f38b 	uxth.w	r3, fp
    f0be:	fa0f fb8b 	sxth.w	fp, fp
            ofs += w * y + x;  /*First pixel*/
    f0c2:	fb0a 4a03 	mla	sl, sl, r3, r4
            ofs += 1024;       /*Skip the palette*/
    f0c6:	f50a 6a80 	add.w	sl, sl, #1024	; 0x400
            pos = 0;
    f0ca:	2400      	movs	r4, #0
    f0cc:	e781      	b.n	efd2 <lv_img_decoder_built_in_read_line+0x29e>
    uint32_t ofs = 0;
    f0ce:	f04f 0a00 	mov.w	sl, #0
    int8_t pos   = 0;
    f0d2:	4654      	mov	r4, sl
    lv_coord_t w = 0;
    f0d4:	46d3      	mov	fp, sl
    f0d6:	e77c      	b.n	efd2 <lv_img_decoder_built_in_read_line+0x29e>
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
    f0d8:	f10a 0104 	add.w	r1, sl, #4
    f0dc:	6838      	ldr	r0, [r7, #0]
    f0de:	4b05      	ldr	r3, [pc, #20]	; (f0f4 <lv_img_decoder_built_in_read_line+0x3c0>)
    f0e0:	4798      	blx	r3
        lv_fs_read(user_data->f, fs_buf, w, NULL);
    f0e2:	2300      	movs	r3, #0
    f0e4:	465a      	mov	r2, fp
    f0e6:	f8dd a000 	ldr.w	sl, [sp]
    f0ea:	4651      	mov	r1, sl
    f0ec:	6838      	ldr	r0, [r7, #0]
    f0ee:	4d02      	ldr	r5, [pc, #8]	; (f0f8 <lv_img_decoder_built_in_read_line+0x3c4>)
    f0f0:	47a8      	blx	r5
    f0f2:	e779      	b.n	efe8 <lv_img_decoder_built_in_read_line+0x2b4>
    f0f4:	00010ef9 	.word	0x00010ef9
    f0f8:	00010ebd 	.word	0x00010ebd

0000f0fc <lv_img_decoder_get_info>:
{
    f0fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f100:	4681      	mov	r9, r0
    f102:	460e      	mov	r6, r1
    header->always_zero = 0;
    f104:	780b      	ldrb	r3, [r1, #0]
    f106:	f36f 1347 	bfc	r3, #5, #3
    f10a:	700b      	strb	r3, [r1, #0]
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
    f10c:	480f      	ldr	r0, [pc, #60]	; (f14c <lv_img_decoder_get_info+0x50>)
    f10e:	4b10      	ldr	r3, [pc, #64]	; (f150 <lv_img_decoder_get_info+0x54>)
    f110:	4798      	blx	r3
    f112:	b1c8      	cbz	r0, f148 <lv_img_decoder_get_info+0x4c>
    f114:	4604      	mov	r4, r0
        res = LV_RES_INV;
    f116:	f04f 0a00 	mov.w	sl, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
    f11a:	f8df 8030 	ldr.w	r8, [pc, #48]	; f14c <lv_img_decoder_get_info+0x50>
    f11e:	4f0d      	ldr	r7, [pc, #52]	; (f154 <lv_img_decoder_get_info+0x58>)
    f120:	e005      	b.n	f12e <lv_img_decoder_get_info+0x32>
        res = LV_RES_INV;
    f122:	4655      	mov	r5, sl
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
    f124:	4621      	mov	r1, r4
    f126:	4640      	mov	r0, r8
    f128:	47b8      	blx	r7
    f12a:	4604      	mov	r4, r0
    f12c:	b148      	cbz	r0, f142 <lv_img_decoder_get_info+0x46>
        if(d->info_cb) {
    f12e:	6823      	ldr	r3, [r4, #0]
    f130:	2b00      	cmp	r3, #0
    f132:	d0f6      	beq.n	f122 <lv_img_decoder_get_info+0x26>
            res = d->info_cb(d, src, header);
    f134:	4632      	mov	r2, r6
    f136:	4649      	mov	r1, r9
    f138:	4620      	mov	r0, r4
    f13a:	4798      	blx	r3
    f13c:	4605      	mov	r5, r0
            if(res == LV_RES_OK) break;
    f13e:	2801      	cmp	r0, #1
    f140:	d1f0      	bne.n	f124 <lv_img_decoder_get_info+0x28>
}
    f142:	4628      	mov	r0, r5
    f144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_res_t res = LV_RES_INV;
    f148:	2500      	movs	r5, #0
    f14a:	e7fa      	b.n	f142 <lv_img_decoder_get_info+0x46>
    f14c:	2000acb8 	.word	0x2000acb8
    f150:	00011189 	.word	0x00011189
    f154:	0001119d 	.word	0x0001119d

0000f158 <lv_img_decoder_open>:
{
    f158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f15c:	4682      	mov	sl, r0
    f15e:	4688      	mov	r8, r1
    dsc->color     = color;
    f160:	8102      	strh	r2, [r0, #8]
    dsc->src_type  = lv_img_src_get_type(src);
    f162:	4608      	mov	r0, r1
    f164:	4b26      	ldr	r3, [pc, #152]	; (f200 <lv_img_decoder_open+0xa8>)
    f166:	4798      	blx	r3
    f168:	f88a 000a 	strb.w	r0, [sl, #10]
    dsc->user_data = NULL;
    f16c:	2300      	movs	r3, #0
    f16e:	f8ca 301c 	str.w	r3, [sl, #28]
    if(dsc->src_type == LV_IMG_SRC_FILE) {
    f172:	2801      	cmp	r0, #1
    f174:	d00d      	beq.n	f192 <lv_img_decoder_open+0x3a>
        dsc->src       = src;
    f176:	f8ca 8004 	str.w	r8, [sl, #4]
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
    f17a:	4822      	ldr	r0, [pc, #136]	; (f204 <lv_img_decoder_open+0xac>)
    f17c:	4b22      	ldr	r3, [pc, #136]	; (f208 <lv_img_decoder_open+0xb0>)
    f17e:	4798      	blx	r3
    f180:	4604      	mov	r4, r0
    f182:	2800      	cmp	r0, #0
    f184:	d036      	beq.n	f1f4 <lv_img_decoder_open+0x9c>
    f186:	2500      	movs	r5, #0
        res = d->info_cb(d, src, &dsc->header);
    f188:	f10a 090c 	add.w	r9, sl, #12
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
    f18c:	4f1d      	ldr	r7, [pc, #116]	; (f204 <lv_img_decoder_open+0xac>)
    f18e:	4e1f      	ldr	r6, [pc, #124]	; (f20c <lv_img_decoder_open+0xb4>)
    f190:	e010      	b.n	f1b4 <lv_img_decoder_open+0x5c>
        size_t fnlen = strlen(src);
    f192:	4640      	mov	r0, r8
    f194:	4b1e      	ldr	r3, [pc, #120]	; (f210 <lv_img_decoder_open+0xb8>)
    f196:	4798      	blx	r3
        dsc->src = lv_mem_alloc(fnlen + 1);
    f198:	3001      	adds	r0, #1
    f19a:	4b1e      	ldr	r3, [pc, #120]	; (f214 <lv_img_decoder_open+0xbc>)
    f19c:	4798      	blx	r3
    f19e:	f8ca 0004 	str.w	r0, [sl, #4]
        strcpy((char *)dsc->src, src);
    f1a2:	4641      	mov	r1, r8
    f1a4:	4b1c      	ldr	r3, [pc, #112]	; (f218 <lv_img_decoder_open+0xc0>)
    f1a6:	4798      	blx	r3
    f1a8:	e7e7      	b.n	f17a <lv_img_decoder_open+0x22>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
    f1aa:	4621      	mov	r1, r4
    f1ac:	4638      	mov	r0, r7
    f1ae:	47b0      	blx	r6
    f1b0:	4604      	mov	r4, r0
    f1b2:	b1d8      	cbz	r0, f1ec <lv_img_decoder_open+0x94>
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
    f1b4:	6823      	ldr	r3, [r4, #0]
    f1b6:	2b00      	cmp	r3, #0
    f1b8:	d0f7      	beq.n	f1aa <lv_img_decoder_open+0x52>
    f1ba:	6862      	ldr	r2, [r4, #4]
    f1bc:	2a00      	cmp	r2, #0
    f1be:	d0f4      	beq.n	f1aa <lv_img_decoder_open+0x52>
        res = d->info_cb(d, src, &dsc->header);
    f1c0:	464a      	mov	r2, r9
    f1c2:	4641      	mov	r1, r8
    f1c4:	4620      	mov	r0, r4
    f1c6:	4798      	blx	r3
    f1c8:	4605      	mov	r5, r0
        if(res != LV_RES_OK) continue;
    f1ca:	2801      	cmp	r0, #1
    f1cc:	d1ed      	bne.n	f1aa <lv_img_decoder_open+0x52>
        dsc->error_msg = NULL;
    f1ce:	2300      	movs	r3, #0
    f1d0:	f8ca 3018 	str.w	r3, [sl, #24]
        dsc->img_data  = NULL;
    f1d4:	f8ca 3010 	str.w	r3, [sl, #16]
        dsc->decoder   = d;
    f1d8:	f8ca 4000 	str.w	r4, [sl]
        res = d->open_cb(d, dsc);
    f1dc:	6863      	ldr	r3, [r4, #4]
    f1de:	4651      	mov	r1, sl
    f1e0:	4620      	mov	r0, r4
    f1e2:	4798      	blx	r3
    f1e4:	4605      	mov	r5, r0
        if(res == LV_RES_OK) break;
    f1e6:	2801      	cmp	r0, #1
    f1e8:	d1df      	bne.n	f1aa <lv_img_decoder_open+0x52>
    f1ea:	e000      	b.n	f1ee <lv_img_decoder_open+0x96>
    if(res == LV_RES_INV) {
    f1ec:	b11d      	cbz	r5, f1f6 <lv_img_decoder_open+0x9e>
}
    f1ee:	4628      	mov	r0, r5
    f1f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_res_t res = LV_RES_INV;
    f1f4:	2500      	movs	r5, #0
        _lv_memset_00(dsc, sizeof(lv_img_decoder_dsc_t));
    f1f6:	2120      	movs	r1, #32
    f1f8:	4650      	mov	r0, sl
    f1fa:	4b08      	ldr	r3, [pc, #32]	; (f21c <lv_img_decoder_open+0xc4>)
    f1fc:	4798      	blx	r3
    f1fe:	e7f6      	b.n	f1ee <lv_img_decoder_open+0x96>
    f200:	00008f71 	.word	0x00008f71
    f204:	2000acb8 	.word	0x2000acb8
    f208:	00011189 	.word	0x00011189
    f20c:	0001119d 	.word	0x0001119d
    f210:	000176f7 	.word	0x000176f7
    f214:	00011575 	.word	0x00011575
    f218:	000176e7 	.word	0x000176e7
    f21c:	00011c17 	.word	0x00011c17

0000f220 <lv_img_decoder_read_line>:
{
    f220:	b570      	push	{r4, r5, r6, lr}
    f222:	b082      	sub	sp, #8
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
    f224:	6806      	ldr	r6, [r0, #0]
    f226:	68b4      	ldr	r4, [r6, #8]
    f228:	b154      	cbz	r4, f240 <lv_img_decoder_read_line+0x20>
    f22a:	461d      	mov	r5, r3
    f22c:	4613      	mov	r3, r2
    f22e:	460a      	mov	r2, r1
    f230:	4601      	mov	r1, r0
    f232:	9806      	ldr	r0, [sp, #24]
    f234:	9001      	str	r0, [sp, #4]
    f236:	9500      	str	r5, [sp, #0]
    f238:	4630      	mov	r0, r6
    f23a:	47a0      	blx	r4
}
    f23c:	b002      	add	sp, #8
    f23e:	bd70      	pop	{r4, r5, r6, pc}
    lv_res_t res = LV_RES_INV;
    f240:	2000      	movs	r0, #0
    f242:	e7fb      	b.n	f23c <lv_img_decoder_read_line+0x1c>

0000f244 <lv_img_decoder_close>:
    if(dsc->decoder) {
    f244:	6803      	ldr	r3, [r0, #0]
    f246:	b183      	cbz	r3, f26a <lv_img_decoder_close+0x26>
{
    f248:	b510      	push	{r4, lr}
    f24a:	4604      	mov	r4, r0
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
    f24c:	68da      	ldr	r2, [r3, #12]
    f24e:	b112      	cbz	r2, f256 <lv_img_decoder_close+0x12>
    f250:	4601      	mov	r1, r0
    f252:	4618      	mov	r0, r3
    f254:	4790      	blx	r2
        if(dsc->src_type == LV_IMG_SRC_FILE) {
    f256:	7aa3      	ldrb	r3, [r4, #10]
    f258:	2b01      	cmp	r3, #1
    f25a:	d000      	beq.n	f25e <lv_img_decoder_close+0x1a>
    f25c:	bd10      	pop	{r4, pc}
            lv_mem_free(dsc->src);
    f25e:	6860      	ldr	r0, [r4, #4]
    f260:	4b02      	ldr	r3, [pc, #8]	; (f26c <lv_img_decoder_close+0x28>)
    f262:	4798      	blx	r3
            dsc->src = NULL;
    f264:	2300      	movs	r3, #0
    f266:	6063      	str	r3, [r4, #4]
}
    f268:	e7f8      	b.n	f25c <lv_img_decoder_close+0x18>
    f26a:	4770      	bx	lr
    f26c:	00011639 	.word	0x00011639

0000f270 <lv_img_decoder_create>:
{
    f270:	b510      	push	{r4, lr}
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
    f272:	480a      	ldr	r0, [pc, #40]	; (f29c <lv_img_decoder_create+0x2c>)
    f274:	4b0a      	ldr	r3, [pc, #40]	; (f2a0 <lv_img_decoder_create+0x30>)
    f276:	4798      	blx	r3
    f278:	4604      	mov	r4, r0
    LV_ASSERT_MEM(decoder);
    f27a:	4b0a      	ldr	r3, [pc, #40]	; (f2a4 <lv_img_decoder_create+0x34>)
    f27c:	4798      	blx	r3
    f27e:	b130      	cbz	r0, f28e <lv_img_decoder_create+0x1e>
    if(decoder == NULL) return NULL;
    f280:	b11c      	cbz	r4, f28a <lv_img_decoder_create+0x1a>
    _lv_memset_00(decoder, sizeof(lv_img_decoder_t));
    f282:	2110      	movs	r1, #16
    f284:	4620      	mov	r0, r4
    f286:	4b08      	ldr	r3, [pc, #32]	; (f2a8 <lv_img_decoder_create+0x38>)
    f288:	4798      	blx	r3
}
    f28a:	4620      	mov	r0, r4
    f28c:	bd10      	pop	{r4, pc}
    LV_ASSERT_MEM(decoder);
    f28e:	4622      	mov	r2, r4
    f290:	2300      	movs	r3, #0
    f292:	4806      	ldr	r0, [pc, #24]	; (f2ac <lv_img_decoder_create+0x3c>)
    f294:	4906      	ldr	r1, [pc, #24]	; (f2b0 <lv_img_decoder_create+0x40>)
    f296:	4788      	blx	r1
    f298:	e7fe      	b.n	f298 <lv_img_decoder_create+0x28>
    f29a:	bf00      	nop
    f29c:	2000acb8 	.word	0x2000acb8
    f2a0:	000110f1 	.word	0x000110f1
    f2a4:	0000295d 	.word	0x0000295d
    f2a8:	00011c17 	.word	0x00011c17
    f2ac:	0001786c 	.word	0x0001786c
    f2b0:	00002965 	.word	0x00002965

0000f2b4 <_lv_img_decoder_init>:
{
    f2b4:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
    f2b6:	2110      	movs	r1, #16
    f2b8:	480c      	ldr	r0, [pc, #48]	; (f2ec <_lv_img_decoder_init+0x38>)
    f2ba:	4b0d      	ldr	r3, [pc, #52]	; (f2f0 <_lv_img_decoder_init+0x3c>)
    f2bc:	4798      	blx	r3
    decoder = lv_img_decoder_create();
    f2be:	4b0d      	ldr	r3, [pc, #52]	; (f2f4 <_lv_img_decoder_init+0x40>)
    f2c0:	4798      	blx	r3
    if(decoder == NULL) {
    f2c2:	b140      	cbz	r0, f2d6 <_lv_img_decoder_init+0x22>
    decoder->info_cb = info_cb;
    f2c4:	4a0c      	ldr	r2, [pc, #48]	; (f2f8 <_lv_img_decoder_init+0x44>)
    f2c6:	6002      	str	r2, [r0, #0]
    decoder->open_cb = open_cb;
    f2c8:	4a0c      	ldr	r2, [pc, #48]	; (f2fc <_lv_img_decoder_init+0x48>)
    f2ca:	6042      	str	r2, [r0, #4]
    decoder->read_line_cb = read_line_cb;
    f2cc:	4a0c      	ldr	r2, [pc, #48]	; (f300 <_lv_img_decoder_init+0x4c>)
    f2ce:	6082      	str	r2, [r0, #8]
    decoder->close_cb = close_cb;
    f2d0:	4a0c      	ldr	r2, [pc, #48]	; (f304 <_lv_img_decoder_init+0x50>)
    f2d2:	60c2      	str	r2, [r0, #12]
    f2d4:	bd08      	pop	{r3, pc}
        LV_ASSERT_MEM(decoder);
    f2d6:	4b0c      	ldr	r3, [pc, #48]	; (f308 <_lv_img_decoder_init+0x54>)
    f2d8:	4798      	blx	r3
    f2da:	2800      	cmp	r0, #0
    f2dc:	d1fa      	bne.n	f2d4 <_lv_img_decoder_init+0x20>
    f2de:	2200      	movs	r2, #0
    f2e0:	2300      	movs	r3, #0
    f2e2:	480a      	ldr	r0, [pc, #40]	; (f30c <_lv_img_decoder_init+0x58>)
    f2e4:	490a      	ldr	r1, [pc, #40]	; (f310 <_lv_img_decoder_init+0x5c>)
    f2e6:	4788      	blx	r1
    f2e8:	e7fe      	b.n	f2e8 <_lv_img_decoder_init+0x34>
    f2ea:	bf00      	nop
    f2ec:	2000acb8 	.word	0x2000acb8
    f2f0:	000110d9 	.word	0x000110d9
    f2f4:	0000f271 	.word	0x0000f271
    f2f8:	0000e991 	.word	0x0000e991
    f2fc:	0000ea91 	.word	0x0000ea91
    f300:	0000ed35 	.word	0x0000ed35
    f304:	0000ea55 	.word	0x0000ea55
    f308:	0000295d 	.word	0x0000295d
    f30c:	0001786c 	.word	0x0001786c
    f310:	00002965 	.word	0x00002965

0000f314 <lv_font_get_glyph_bitmap>:
 * @param font_p pointer to a font
 * @param letter an UNICODE character code
 * @return  pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
    f314:	b508      	push	{r3, lr}
    return font_p->get_glyph_bitmap(font_p, letter);
    f316:	6843      	ldr	r3, [r0, #4]
    f318:	4798      	blx	r3
}
    f31a:	bd08      	pop	{r3, pc}

0000f31c <lv_font_get_glyph_dsc>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{
    f31c:	b510      	push	{r4, lr}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
    f31e:	6804      	ldr	r4, [r0, #0]
    f320:	47a0      	blx	r4
}
    f322:	bd10      	pop	{r4, pc}

0000f324 <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
    f324:	b510      	push	{r4, lr}
    f326:	b084      	sub	sp, #16
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
    f328:	4613      	mov	r3, r2
    f32a:	460a      	mov	r2, r1
    f32c:	a901      	add	r1, sp, #4
    f32e:	4c04      	ldr	r4, [pc, #16]	; (f340 <lv_font_get_glyph_width+0x1c>)
    f330:	47a0      	blx	r4
    if(ret) return g.adv_w;
    f332:	b118      	cbz	r0, f33c <lv_font_get_glyph_width+0x18>
    f334:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    else return 0;
}
    f338:	b004      	add	sp, #16
    f33a:	bd10      	pop	{r4, pc}
    else return 0;
    f33c:	2000      	movs	r0, #0
    f33e:	e7fb      	b.n	f338 <lv_font_get_glyph_width+0x14>
    f340:	0000f31d 	.word	0x0000f31d

0000f344 <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
    f344:	7803      	ldrb	r3, [r0, #0]
    f346:	780a      	ldrb	r2, [r1, #0]
    f348:	4293      	cmp	r3, r2
    f34a:	bf11      	iteee	ne
    f34c:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];
    f34e:	7840      	ldrbeq	r0, [r0, #1]
    f350:	784b      	ldrbeq	r3, [r1, #1]
    f352:	1ac0      	subeq	r0, r0, r3

}
    f354:	4770      	bx	lr

0000f356 <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
    f356:	8803      	ldrh	r3, [r0, #0]
    f358:	880a      	ldrh	r2, [r1, #0]
    f35a:	4293      	cmp	r3, r2
    f35c:	bf11      	iteee	ne
    f35e:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
    f360:	8840      	ldrheq	r0, [r0, #2]
    f362:	884b      	ldrheq	r3, [r1, #2]
    f364:	1ac0      	subeq	r0, r0, r3
}
    f366:	4770      	bx	lr

0000f368 <unicode_list_compare>:
 *  @retval > 0   Reference is less than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
    f368:	8800      	ldrh	r0, [r0, #0]
    f36a:	880b      	ldrh	r3, [r1, #0]
}
    f36c:	1ac0      	subs	r0, r0, r3
    f36e:	4770      	bx	lr

0000f370 <get_glyph_dsc_id>:
    if(letter == '\0') return 0;
    f370:	460b      	mov	r3, r1
    f372:	2900      	cmp	r1, #0
    f374:	d06c      	beq.n	f450 <get_glyph_dsc_id+0xe0>
{
    f376:	b5f0      	push	{r4, r5, r6, r7, lr}
    f378:	b085      	sub	sp, #20
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
    f37a:	6904      	ldr	r4, [r0, #16]
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
    f37c:	69a2      	ldr	r2, [r4, #24]
    f37e:	4291      	cmp	r1, r2
    f380:	d015      	beq.n	f3ae <get_glyph_dsc_id+0x3e>
    for(i = 0; i < fdsc->cmap_num; i++) {
    f382:	8a67      	ldrh	r7, [r4, #18]
    f384:	f3c7 0709 	ubfx	r7, r7, #0, #10
    f388:	2f00      	cmp	r7, #0
    f38a:	d05d      	beq.n	f448 <get_glyph_dsc_id+0xd8>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
    f38c:	68a1      	ldr	r1, [r4, #8]
    f38e:	6808      	ldr	r0, [r1, #0]
    f390:	1a1a      	subs	r2, r3, r0
    f392:	9203      	str	r2, [sp, #12]
        if(rcp > fdsc->cmaps[i].range_length) continue;
    f394:	8888      	ldrh	r0, [r1, #4]
    f396:	4282      	cmp	r2, r0
    f398:	d80b      	bhi.n	f3b2 <get_glyph_dsc_id+0x42>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
    f39a:	2600      	movs	r6, #0
    f39c:	461d      	mov	r5, r3
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
    f39e:	7c8b      	ldrb	r3, [r1, #18]
    f3a0:	b9e3      	cbnz	r3, f3dc <get_glyph_dsc_id+0x6c>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
    f3a2:	88c8      	ldrh	r0, [r1, #6]
    f3a4:	4410      	add	r0, r2
        fdsc->last_letter = letter;
    f3a6:	61a5      	str	r5, [r4, #24]
        fdsc->last_glyph_id = glyph_id;
    f3a8:	61e0      	str	r0, [r4, #28]
}
    f3aa:	b005      	add	sp, #20
    f3ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
    f3ae:	69e0      	ldr	r0, [r4, #28]
    f3b0:	e7fb      	b.n	f3aa <get_glyph_dsc_id+0x3a>
        if(rcp > fdsc->cmaps[i].range_length) continue;
    f3b2:	2500      	movs	r5, #0
    for(i = 0; i < fdsc->cmap_num; i++) {
    f3b4:	3501      	adds	r5, #1
    f3b6:	b2ad      	uxth	r5, r5
    f3b8:	42bd      	cmp	r5, r7
    f3ba:	da45      	bge.n	f448 <get_glyph_dsc_id+0xd8>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
    f3bc:	eb05 0085 	add.w	r0, r5, r5, lsl #2
    f3c0:	0082      	lsls	r2, r0, #2
    f3c2:	4616      	mov	r6, r2
    f3c4:	eb01 0e02 	add.w	lr, r1, r2
    f3c8:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
    f3cc:	1a9a      	subs	r2, r3, r2
    f3ce:	9203      	str	r2, [sp, #12]
        if(rcp > fdsc->cmaps[i].range_length) continue;
    f3d0:	f8be 0004 	ldrh.w	r0, [lr, #4]
    f3d4:	4282      	cmp	r2, r0
    f3d6:	d8ed      	bhi.n	f3b4 <get_glyph_dsc_id+0x44>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
    f3d8:	4671      	mov	r1, lr
    f3da:	e7df      	b.n	f39c <get_glyph_dsc_id+0x2c>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
    f3dc:	2b01      	cmp	r3, #1
    f3de:	d005      	beq.n	f3ec <get_glyph_dsc_id+0x7c>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
    f3e0:	2b02      	cmp	r3, #2
    f3e2:	d008      	beq.n	f3f6 <get_glyph_dsc_id+0x86>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
    f3e4:	2b03      	cmp	r3, #3
    f3e6:	d018      	beq.n	f41a <get_glyph_dsc_id+0xaa>
        uint32_t glyph_id = 0;
    f3e8:	2000      	movs	r0, #0
    f3ea:	e7dc      	b.n	f3a6 <get_glyph_dsc_id+0x36>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
    f3ec:	68cb      	ldr	r3, [r1, #12]
    f3ee:	5c9b      	ldrb	r3, [r3, r2]
    f3f0:	88c8      	ldrh	r0, [r1, #6]
    f3f2:	4418      	add	r0, r3
    f3f4:	e7d7      	b.n	f3a6 <get_glyph_dsc_id+0x36>
            uint8_t * p = _lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
    f3f6:	8a0a      	ldrh	r2, [r1, #16]
    f3f8:	6889      	ldr	r1, [r1, #8]
    f3fa:	4b16      	ldr	r3, [pc, #88]	; (f454 <get_glyph_dsc_id+0xe4>)
    f3fc:	9300      	str	r3, [sp, #0]
    f3fe:	2302      	movs	r3, #2
    f400:	a803      	add	r0, sp, #12
    f402:	4f15      	ldr	r7, [pc, #84]	; (f458 <get_glyph_dsc_id+0xe8>)
    f404:	47b8      	blx	r7
            if(p) {
    f406:	4603      	mov	r3, r0
    f408:	b1d0      	cbz	r0, f440 <get_glyph_dsc_id+0xd0>
                lv_uintptr_t ofs = (lv_uintptr_t)(p - (uint8_t *) fdsc->cmaps[i].unicode_list);
    f40a:	68a2      	ldr	r2, [r4, #8]
    f40c:	4416      	add	r6, r2
    f40e:	68b0      	ldr	r0, [r6, #8]
    f410:	1a18      	subs	r0, r3, r0
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
    f412:	88f3      	ldrh	r3, [r6, #6]
    f414:	eb03 0050 	add.w	r0, r3, r0, lsr #1
    f418:	e7c5      	b.n	f3a6 <get_glyph_dsc_id+0x36>
            uint8_t * p = _lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
    f41a:	8a0a      	ldrh	r2, [r1, #16]
    f41c:	6889      	ldr	r1, [r1, #8]
    f41e:	4b0d      	ldr	r3, [pc, #52]	; (f454 <get_glyph_dsc_id+0xe4>)
    f420:	9300      	str	r3, [sp, #0]
    f422:	2302      	movs	r3, #2
    f424:	a803      	add	r0, sp, #12
    f426:	4f0c      	ldr	r7, [pc, #48]	; (f458 <get_glyph_dsc_id+0xe8>)
    f428:	47b8      	blx	r7
            if(p) {
    f42a:	b158      	cbz	r0, f444 <get_glyph_dsc_id+0xd4>
                lv_uintptr_t ofs = (lv_uintptr_t)(p - (uint8_t *) fdsc->cmaps[i].unicode_list);
    f42c:	68a2      	ldr	r2, [r4, #8]
    f42e:	4416      	add	r6, r2
    f430:	68b2      	ldr	r2, [r6, #8]
    f432:	1a83      	subs	r3, r0, r2
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
    f434:	085b      	lsrs	r3, r3, #1
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
    f436:	68f2      	ldr	r2, [r6, #12]
    f438:	5cd3      	ldrb	r3, [r2, r3]
    f43a:	88f0      	ldrh	r0, [r6, #6]
    f43c:	4418      	add	r0, r3
    f43e:	e7b2      	b.n	f3a6 <get_glyph_dsc_id+0x36>
        uint32_t glyph_id = 0;
    f440:	2000      	movs	r0, #0
    f442:	e7b0      	b.n	f3a6 <get_glyph_dsc_id+0x36>
    f444:	2000      	movs	r0, #0
    f446:	e7ae      	b.n	f3a6 <get_glyph_dsc_id+0x36>
    fdsc->last_letter = letter;
    f448:	61a3      	str	r3, [r4, #24]
    fdsc->last_glyph_id = 0;
    f44a:	2000      	movs	r0, #0
    f44c:	61e0      	str	r0, [r4, #28]
    return 0;
    f44e:	e7ac      	b.n	f3aa <get_glyph_dsc_id+0x3a>
    if(letter == '\0') return 0;
    f450:	4608      	mov	r0, r1
    f452:	4770      	bx	lr
    f454:	0000f369 	.word	0x0000f369
    f458:	000128a5 	.word	0x000128a5

0000f45c <lv_font_get_bitmap_fmt_txt>:
{
    f45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f460:	b09d      	sub	sp, #116	; 0x74
    if(unicode_letter == '\t') unicode_letter = ' ';
    f462:	2909      	cmp	r1, #9
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
    f464:	6905      	ldr	r5, [r0, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
    f466:	bf08      	it	eq
    f468:	2120      	moveq	r1, #32
    f46a:	4baa      	ldr	r3, [pc, #680]	; (f714 <lv_font_get_bitmap_fmt_txt+0x2b8>)
    f46c:	4798      	blx	r3
    if(!gid) return NULL;
    f46e:	2800      	cmp	r0, #0
    f470:	f000 84de 	beq.w	fe30 <lv_font_get_bitmap_fmt_txt+0x9d4>
    f474:	4680      	mov	r8, r0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
    f476:	686f      	ldr	r7, [r5, #4]
    f478:	eb07 06c0 	add.w	r6, r7, r0, lsl #3
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
    f47c:	7d2b      	ldrb	r3, [r5, #20]
    f47e:	f013 0f03 	tst.w	r3, #3
    f482:	d10b      	bne.n	f49c <lv_font_get_bitmap_fmt_txt+0x40>
        if(gdsc) return &fdsc->glyph_bitmap[gdsc->bitmap_index];
    f484:	2e00      	cmp	r6, #0
    f486:	f000 84d6 	beq.w	fe36 <lv_font_get_bitmap_fmt_txt+0x9da>
    f48a:	f857 3030 	ldr.w	r3, [r7, r0, lsl #3]
    f48e:	f3c3 0313 	ubfx	r3, r3, #0, #20
    f492:	6828      	ldr	r0, [r5, #0]
    f494:	4418      	add	r0, r3
}
    f496:	b01d      	add	sp, #116	; 0x74
    f498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t gsize = gdsc->box_w * gdsc->box_h;
    f49c:	7933      	ldrb	r3, [r6, #4]
    f49e:	7974      	ldrb	r4, [r6, #5]
    f4a0:	fb04 f403 	mul.w	r4, r4, r3
        if(gsize == 0) return NULL;
    f4a4:	2c00      	cmp	r4, #0
    f4a6:	f000 84c9 	beq.w	fe3c <lv_font_get_bitmap_fmt_txt+0x9e0>
        switch(fdsc->bpp) {
    f4aa:	7ceb      	ldrb	r3, [r5, #19]
    f4ac:	f3c3 0383 	ubfx	r3, r3, #2, #4
    f4b0:	3b01      	subs	r3, #1
    f4b2:	2b03      	cmp	r3, #3
    f4b4:	d805      	bhi.n	f4c2 <lv_font_get_bitmap_fmt_txt+0x66>
    f4b6:	e8df f003 	tbb	[pc, r3]
    f4ba:	7502      	.short	0x7502
    f4bc:	7b78      	.short	0x7b78
                buf_size = (gsize + 7) >> 3;
    f4be:	3407      	adds	r4, #7
    f4c0:	08e4      	lsrs	r4, r4, #3
        if(_lv_mem_get_size(decompr_buf) < buf_size) {
    f4c2:	4b95      	ldr	r3, [pc, #596]	; (f718 <lv_font_get_bitmap_fmt_txt+0x2bc>)
    f4c4:	6818      	ldr	r0, [r3, #0]
    f4c6:	4b95      	ldr	r3, [pc, #596]	; (f71c <lv_font_get_bitmap_fmt_txt+0x2c0>)
    f4c8:	4798      	blx	r3
    f4ca:	4284      	cmp	r4, r0
    f4cc:	d911      	bls.n	f4f2 <lv_font_get_bitmap_fmt_txt+0x96>
            decompr_buf = lv_mem_realloc(decompr_buf, buf_size);
    f4ce:	f8df 9248 	ldr.w	r9, [pc, #584]	; f718 <lv_font_get_bitmap_fmt_txt+0x2bc>
    f4d2:	4621      	mov	r1, r4
    f4d4:	f8d9 0000 	ldr.w	r0, [r9]
    f4d8:	4b91      	ldr	r3, [pc, #580]	; (f720 <lv_font_get_bitmap_fmt_txt+0x2c4>)
    f4da:	4798      	blx	r3
    f4dc:	f8c9 0000 	str.w	r0, [r9]
            LV_ASSERT_MEM(decompr_buf);
    f4e0:	4b90      	ldr	r3, [pc, #576]	; (f724 <lv_font_get_bitmap_fmt_txt+0x2c8>)
    f4e2:	4798      	blx	r3
    f4e4:	2800      	cmp	r0, #0
    f4e6:	d066      	beq.n	f5b6 <lv_font_get_bitmap_fmt_txt+0x15a>
            if(decompr_buf == NULL) return NULL;
    f4e8:	4b8b      	ldr	r3, [pc, #556]	; (f718 <lv_font_get_bitmap_fmt_txt+0x2bc>)
    f4ea:	681b      	ldr	r3, [r3, #0]
    f4ec:	2b00      	cmp	r3, #0
    f4ee:	f000 84a8 	beq.w	fe42 <lv_font_get_bitmap_fmt_txt+0x9e6>
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], decompr_buf, gdsc->box_w, gdsc->box_h, (uint8_t)fdsc->bpp);
    f4f2:	f857 1038 	ldr.w	r1, [r7, r8, lsl #3]
    f4f6:	f3c1 0113 	ubfx	r1, r1, #0, #20
    f4fa:	682b      	ldr	r3, [r5, #0]
    f4fc:	4419      	add	r1, r3
    f4fe:	4b86      	ldr	r3, [pc, #536]	; (f718 <lv_font_get_bitmap_fmt_txt+0x2bc>)
    f500:	f8d3 9000 	ldr.w	r9, [r3]
    f504:	7933      	ldrb	r3, [r6, #4]
    f506:	930a      	str	r3, [sp, #40]	; 0x28
    f508:	469b      	mov	fp, r3
    f50a:	b21a      	sxth	r2, r3
    f50c:	4617      	mov	r7, r2
    f50e:	9216      	str	r2, [sp, #88]	; 0x58
    f510:	7972      	ldrb	r2, [r6, #5]
    f512:	9213      	str	r2, [sp, #76]	; 0x4c
    f514:	7cea      	ldrb	r2, [r5, #19]
    f516:	f3c2 0283 	ubfx	r2, r2, #2, #4
    f51a:	b2d3      	uxtb	r3, r2
    f51c:	930d      	str	r3, [sp, #52]	; 0x34
    if(bpp == 3) wr_size = 4;
    f51e:	2b03      	cmp	r3, #3
    f520:	bf14      	ite	ne
    f522:	4618      	movne	r0, r3
    f524:	2004      	moveq	r0, #4
    f526:	9006      	str	r0, [sp, #24]
    rle_in = in;
    f528:	4b7b      	ldr	r3, [pc, #492]	; (f718 <lv_font_get_bitmap_fmt_txt+0x2bc>)
    f52a:	6059      	str	r1, [r3, #4]
    rle_bpp = bpp;
    f52c:	721a      	strb	r2, [r3, #8]
    rle_state = RLE_STATE_SINGLE;
    f52e:	2200      	movs	r2, #0
    f530:	725a      	strb	r2, [r3, #9]
    rle_rdp = 0;
    f532:	60da      	str	r2, [r3, #12]
    rle_prev_v = 0;
    f534:	741a      	strb	r2, [r3, #16]
    rle_cnt = 0;
    f536:	745a      	strb	r2, [r3, #17]
    uint8_t * line_buf1 = _lv_mem_buf_get(w);
    f538:	4658      	mov	r0, fp
    f53a:	4c7b      	ldr	r4, [pc, #492]	; (f728 <lv_font_get_bitmap_fmt_txt+0x2cc>)
    f53c:	47a0      	blx	r4
    f53e:	9014      	str	r0, [sp, #80]	; 0x50
    uint8_t * line_buf2 = _lv_mem_buf_get(w);
    f540:	4658      	mov	r0, fp
    f542:	47a0      	blx	r4
    f544:	9015      	str	r0, [sp, #84]	; 0x54
    for(i = 0; i < w; i++) {
    f546:	2f00      	cmp	r7, #0
    f548:	f000 8245 	beq.w	f9d6 <lv_font_get_bitmap_fmt_txt+0x57a>
    f54c:	4b72      	ldr	r3, [pc, #456]	; (f718 <lv_font_get_bitmap_fmt_txt+0x2bc>)
    f54e:	7c19      	ldrb	r1, [r3, #16]
    f550:	9101      	str	r1, [sp, #4]
    f552:	7c5c      	ldrb	r4, [r3, #17]
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
    f554:	685f      	ldr	r7, [r3, #4]
    f556:	68dd      	ldr	r5, [r3, #12]
    f558:	f893 a008 	ldrb.w	sl, [r3, #8]
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    f55c:	2201      	movs	r2, #1
    f55e:	fa02 f20a 	lsl.w	r2, r2, sl
    f562:	1e51      	subs	r1, r2, #1
    if(bit_pos + len >= 8) {
    f564:	46d0      	mov	r8, sl
    f566:	f1ca 0608 	rsb	r6, sl, #8
    f56a:	9608      	str	r6, [sp, #32]
    f56c:	f1ca 0610 	rsb	r6, sl, #16
    f570:	9607      	str	r6, [sp, #28]
    f572:	f893 c009 	ldrb.w	ip, [r3, #9]
    f576:	9814      	ldr	r0, [sp, #80]	; 0x50
    f578:	f100 3eff 	add.w	lr, r0, #4294967295
    f57c:	f10b 33ff 	add.w	r3, fp, #4294967295
    f580:	b29b      	uxth	r3, r3
    f582:	930b      	str	r3, [sp, #44]	; 0x2c
    f584:	eb00 0b03 	add.w	fp, r0, r3
    f588:	4676      	mov	r6, lr
    f58a:	2300      	movs	r3, #0
    f58c:	9303      	str	r3, [sp, #12]
    f58e:	9305      	str	r3, [sp, #20]
    f590:	461a      	mov	r2, r3
    switch(len) {
    f592:	f10a 3aff 	add.w	sl, sl, #4294967295
            rle_rdp += rle_bpp;
    f596:	2301      	movs	r3, #1
    f598:	9302      	str	r3, [sp, #8]
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    f59a:	b2cb      	uxtb	r3, r1
    f59c:	9309      	str	r3, [sp, #36]	; 0x24
            bit_mask = 0x3;
    f59e:	9204      	str	r2, [sp, #16]
    f5a0:	4661      	mov	r1, ip
    f5a2:	e02d      	b.n	f600 <lv_font_get_bitmap_fmt_txt+0x1a4>
                buf_size = (gsize + 3) >> 2;
    f5a4:	3403      	adds	r4, #3
    f5a6:	08a4      	lsrs	r4, r4, #2
                break;
    f5a8:	e78b      	b.n	f4c2 <lv_font_get_bitmap_fmt_txt+0x66>
                buf_size = (gsize + 1) >> 1;
    f5aa:	3401      	adds	r4, #1
    f5ac:	0864      	lsrs	r4, r4, #1
                break;
    f5ae:	e788      	b.n	f4c2 <lv_font_get_bitmap_fmt_txt+0x66>
                buf_size = (gsize + 1) >> 1;
    f5b0:	3401      	adds	r4, #1
    f5b2:	0864      	lsrs	r4, r4, #1
                break;
    f5b4:	e785      	b.n	f4c2 <lv_font_get_bitmap_fmt_txt+0x66>
            LV_ASSERT_MEM(decompr_buf);
    f5b6:	f8d9 2000 	ldr.w	r2, [r9]
    f5ba:	2300      	movs	r3, #0
    f5bc:	485b      	ldr	r0, [pc, #364]	; (f72c <lv_font_get_bitmap_fmt_txt+0x2d0>)
    f5be:	495c      	ldr	r1, [pc, #368]	; (f730 <lv_font_get_bitmap_fmt_txt+0x2d4>)
    f5c0:	4788      	blx	r1
    f5c2:	e7fe      	b.n	f5c2 <lv_font_get_bitmap_fmt_txt+0x166>
            bit_mask = 0x3;
    f5c4:	2003      	movs	r0, #3
    uint32_t byte_pos = bit_pos >> 3;
    f5c6:	08eb      	lsrs	r3, r5, #3
    bit_pos = bit_pos & 0x7;
    f5c8:	f005 0207 	and.w	r2, r5, #7
    if(bit_pos + len >= 8) {
    f5cc:	eb02 0c08 	add.w	ip, r2, r8
    f5d0:	f1bc 0f07 	cmp.w	ip, #7
    f5d4:	d836      	bhi.n	f644 <lv_font_get_bitmap_fmt_txt+0x1e8>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
    f5d6:	f817 c003 	ldrb.w	ip, [r7, r3]
    f5da:	9b08      	ldr	r3, [sp, #32]
    f5dc:	1a9a      	subs	r2, r3, r2
    f5de:	fa4c f302 	asr.w	r3, ip, r2
    f5e2:	4003      	ands	r3, r0
        if(rle_rdp != 0 && rle_prev_v == ret) {
    f5e4:	b115      	cbz	r5, f5ec <lv_font_get_bitmap_fmt_txt+0x190>
    f5e6:	9a01      	ldr	r2, [sp, #4]
    f5e8:	4293      	cmp	r3, r2
    f5ea:	d039      	beq.n	f660 <lv_font_get_bitmap_fmt_txt+0x204>
        rle_rdp += rle_bpp;
    f5ec:	4445      	add	r5, r8
        rle_prev_v = ret;
    f5ee:	9301      	str	r3, [sp, #4]
        rle_rdp += rle_bpp;
    f5f0:	2201      	movs	r2, #1
    f5f2:	9802      	ldr	r0, [sp, #8]
    f5f4:	9004      	str	r0, [sp, #16]
        out[i] = rle_next();
    f5f6:	f806 3f01 	strb.w	r3, [r6, #1]!
    for(i = 0; i < w; i++) {
    f5fa:	455e      	cmp	r6, fp
    f5fc:	f000 8149 	beq.w	f892 <lv_font_get_bitmap_fmt_txt+0x436>
    if(rle_state == RLE_STATE_SINGLE) {
    f600:	bba9      	cbnz	r1, f66e <lv_font_get_bitmap_fmt_txt+0x212>
    switch(len) {
    f602:	f1ba 0f07 	cmp.w	sl, #7
    f606:	d819      	bhi.n	f63c <lv_font_get_bitmap_fmt_txt+0x1e0>
    f608:	a301      	add	r3, pc, #4	; (adr r3, f610 <lv_font_get_bitmap_fmt_txt+0x1b4>)
    f60a:	f853 f02a 	ldr.w	pc, [r3, sl, lsl #2]
    f60e:	bf00      	nop
    f610:	0000f641 	.word	0x0000f641
    f614:	0000f5c5 	.word	0x0000f5c5
    f618:	0000f631 	.word	0x0000f631
    f61c:	0000f635 	.word	0x0000f635
    f620:	0000f63d 	.word	0x0000f63d
    f624:	0000f63d 	.word	0x0000f63d
    f628:	0000f63d 	.word	0x0000f63d
    f62c:	0000f639 	.word	0x0000f639
            bit_mask = 0x7;
    f630:	2007      	movs	r0, #7
    f632:	e7c8      	b.n	f5c6 <lv_font_get_bitmap_fmt_txt+0x16a>
            bit_mask = 0xF;
    f634:	200f      	movs	r0, #15
    f636:	e7c6      	b.n	f5c6 <lv_font_get_bitmap_fmt_txt+0x16a>
            bit_mask = 0xFF;
    f638:	20ff      	movs	r0, #255	; 0xff
    f63a:	e7c4      	b.n	f5c6 <lv_font_get_bitmap_fmt_txt+0x16a>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    f63c:	9809      	ldr	r0, [sp, #36]	; 0x24
    f63e:	e7c2      	b.n	f5c6 <lv_font_get_bitmap_fmt_txt+0x16a>
            bit_mask = 0x1;
    f640:	2001      	movs	r0, #1
    f642:	e7c0      	b.n	f5c6 <lv_font_get_bitmap_fmt_txt+0x16a>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
    f644:	f817 c003 	ldrb.w	ip, [r7, r3]
    f648:	443b      	add	r3, r7
    f64a:	785b      	ldrb	r3, [r3, #1]
    f64c:	eb03 230c 	add.w	r3, r3, ip, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
    f650:	fa1f fc83 	uxth.w	ip, r3
    f654:	9b07      	ldr	r3, [sp, #28]
    f656:	1a9a      	subs	r2, r3, r2
    f658:	fa4c f302 	asr.w	r3, ip, r2
    f65c:	4003      	ands	r3, r0
    f65e:	e7c1      	b.n	f5e4 <lv_font_get_bitmap_fmt_txt+0x188>
        if(rle_rdp != 0 && rle_prev_v == ret) {
    f660:	2201      	movs	r2, #1
    f662:	9203      	str	r2, [sp, #12]
            rle_cnt = 0;
    f664:	2400      	movs	r4, #0
        if(rle_rdp != 0 && rle_prev_v == ret) {
    f666:	9a02      	ldr	r2, [sp, #8]
    f668:	9205      	str	r2, [sp, #20]
            rle_state = RLE_STATE_REPEATE;
    f66a:	4611      	mov	r1, r2
    f66c:	e7be      	b.n	f5ec <lv_font_get_bitmap_fmt_txt+0x190>
    else if(rle_state == RLE_STATE_REPEATE) {
    f66e:	2901      	cmp	r1, #1
    f670:	d004      	beq.n	f67c <lv_font_get_bitmap_fmt_txt+0x220>
    else if(rle_state == RLE_STATE_COUNTER) {
    f672:	2902      	cmp	r1, #2
    f674:	f000 80c7 	beq.w	f806 <lv_font_get_bitmap_fmt_txt+0x3aa>
    uint8_t ret = 0;
    f678:	2300      	movs	r3, #0
    f67a:	e7bc      	b.n	f5f6 <lv_font_get_bitmap_fmt_txt+0x19a>
    uint32_t byte_pos = bit_pos >> 3;
    f67c:	08eb      	lsrs	r3, r5, #3
    bit_pos = bit_pos & 0x7;
    f67e:	f005 0207 	and.w	r2, r5, #7
    if(bit_pos + len >= 8) {
    f682:	f102 0c01 	add.w	ip, r2, #1
    f686:	f1bc 0f07 	cmp.w	ip, #7
    f68a:	d813      	bhi.n	f6b4 <lv_font_get_bitmap_fmt_txt+0x258>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
    f68c:	5cfb      	ldrb	r3, [r7, r3]
    f68e:	43d2      	mvns	r2, r2
    f690:	3208      	adds	r2, #8
    f692:	4113      	asrs	r3, r2
    f694:	f003 0301 	and.w	r3, r3, #1
        rle_cnt++;
    f698:	3401      	adds	r4, #1
    f69a:	b2e4      	uxtb	r4, r4
        rle_rdp += 1;
    f69c:	1c6a      	adds	r2, r5, #1
        if(v == 1) {
    f69e:	b9b3      	cbnz	r3, f6ce <lv_font_get_bitmap_fmt_txt+0x272>
    switch(len) {
    f6a0:	f1ba 0f07 	cmp.w	sl, #7
    f6a4:	f200 809f 	bhi.w	f7e6 <lv_font_get_bitmap_fmt_txt+0x38a>
    f6a8:	e8df f00a 	tbb	[pc, sl]
    f6ac:	99977e9f 	.word	0x99977e9f
    f6b0:	9b9d9d9d 	.word	0x9b9d9d9d
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
    f6b4:	f817 c003 	ldrb.w	ip, [r7, r3]
    f6b8:	443b      	add	r3, r7
    f6ba:	785b      	ldrb	r3, [r3, #1]
    f6bc:	eb03 230c 	add.w	r3, r3, ip, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
    f6c0:	b29b      	uxth	r3, r3
    f6c2:	43d2      	mvns	r2, r2
    f6c4:	3210      	adds	r2, #16
    f6c6:	4113      	asrs	r3, r2
    f6c8:	f003 0301 	and.w	r3, r3, #1
    f6cc:	e7e4      	b.n	f698 <lv_font_get_bitmap_fmt_txt+0x23c>
            if(rle_cnt == 11) {
    f6ce:	2c0b      	cmp	r4, #11
    f6d0:	d005      	beq.n	f6de <lv_font_get_bitmap_fmt_txt+0x282>
        rle_rdp += 1;
    f6d2:	4615      	mov	r5, r2
            ret = rle_prev_v;
    f6d4:	9b01      	ldr	r3, [sp, #4]
            if(rle_cnt == 11) {
    f6d6:	2201      	movs	r2, #1
    f6d8:	9203      	str	r2, [sp, #12]
    f6da:	9a02      	ldr	r2, [sp, #8]
    f6dc:	e78b      	b.n	f5f6 <lv_font_get_bitmap_fmt_txt+0x19a>
    uint32_t byte_pos = bit_pos >> 3;
    f6de:	08d3      	lsrs	r3, r2, #3
    bit_pos = bit_pos & 0x7;
    f6e0:	f002 0207 	and.w	r2, r2, #7
    if(bit_pos + len >= 8) {
    f6e4:	1d91      	adds	r1, r2, #6
    f6e6:	2907      	cmp	r1, #7
    f6e8:	d824      	bhi.n	f734 <lv_font_get_bitmap_fmt_txt+0x2d8>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
    f6ea:	5cfc      	ldrb	r4, [r7, r3]
    f6ec:	f1c2 0202 	rsb	r2, r2, #2
    f6f0:	fa44 f202 	asr.w	r2, r4, r2
    f6f4:	f002 043f 	and.w	r4, r2, #63	; 0x3f
                rle_rdp += 6;
    f6f8:	3507      	adds	r5, #7
                if(rle_cnt != 0) {
    f6fa:	2c00      	cmp	r4, #0
    f6fc:	f040 80be 	bne.w	f87c <lv_font_get_bitmap_fmt_txt+0x420>
    switch(len) {
    f700:	f1ba 0f07 	cmp.w	sl, #7
    f704:	d837      	bhi.n	f776 <lv_font_get_bitmap_fmt_txt+0x31a>
    f706:	e8df f00a 	tbb	[pc, sl]
    f70a:	2138      	.short	0x2138
    f70c:	36363230 	.word	0x36363230
    f710:	3436      	.short	0x3436
    f712:	bf00      	nop
    f714:	0000f371 	.word	0x0000f371
    f718:	20002b5c 	.word	0x20002b5c
    f71c:	000116c5 	.word	0x000116c5
    f720:	000119e9 	.word	0x000119e9
    f724:	0000295d 	.word	0x0000295d
    f728:	00011a65 	.word	0x00011a65
    f72c:	0001786c 	.word	0x0001786c
    f730:	00002965 	.word	0x00002965
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
    f734:	5cf9      	ldrb	r1, [r7, r3]
    f736:	443b      	add	r3, r7
    f738:	785c      	ldrb	r4, [r3, #1]
    f73a:	eb04 2401 	add.w	r4, r4, r1, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
    f73e:	b2a4      	uxth	r4, r4
    f740:	f1c2 020a 	rsb	r2, r2, #10
    f744:	4114      	asrs	r4, r2
    f746:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    f74a:	e7d5      	b.n	f6f8 <lv_font_get_bitmap_fmt_txt+0x29c>
            bit_mask = 0x3;
    f74c:	2003      	movs	r0, #3
    uint32_t byte_pos = bit_pos >> 3;
    f74e:	08ea      	lsrs	r2, r5, #3
    bit_pos = bit_pos & 0x7;
    f750:	f005 0307 	and.w	r3, r5, #7
    if(bit_pos + len >= 8) {
    f754:	eb03 0108 	add.w	r1, r3, r8
    f758:	2907      	cmp	r1, #7
    f75a:	d810      	bhi.n	f77e <lv_font_get_bitmap_fmt_txt+0x322>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
    f75c:	5cba      	ldrb	r2, [r7, r2]
    f75e:	9908      	ldr	r1, [sp, #32]
    f760:	1acb      	subs	r3, r1, r3
    f762:	fa42 f303 	asr.w	r3, r2, r3
    f766:	4003      	ands	r3, r0
    f768:	e014      	b.n	f794 <lv_font_get_bitmap_fmt_txt+0x338>
            bit_mask = 0x7;
    f76a:	2007      	movs	r0, #7
    f76c:	e7ef      	b.n	f74e <lv_font_get_bitmap_fmt_txt+0x2f2>
            bit_mask = 0xF;
    f76e:	200f      	movs	r0, #15
    f770:	e7ed      	b.n	f74e <lv_font_get_bitmap_fmt_txt+0x2f2>
            bit_mask = 0xFF;
    f772:	20ff      	movs	r0, #255	; 0xff
    f774:	e7eb      	b.n	f74e <lv_font_get_bitmap_fmt_txt+0x2f2>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    f776:	9809      	ldr	r0, [sp, #36]	; 0x24
    f778:	e7e9      	b.n	f74e <lv_font_get_bitmap_fmt_txt+0x2f2>
            bit_mask = 0x1;
    f77a:	2001      	movs	r0, #1
    f77c:	e7e7      	b.n	f74e <lv_font_get_bitmap_fmt_txt+0x2f2>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
    f77e:	5cb9      	ldrb	r1, [r7, r2]
    f780:	443a      	add	r2, r7
    f782:	7852      	ldrb	r2, [r2, #1]
    f784:	eb02 2201 	add.w	r2, r2, r1, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
    f788:	b292      	uxth	r2, r2
    f78a:	9907      	ldr	r1, [sp, #28]
    f78c:	1acb      	subs	r3, r1, r3
    f78e:	fa42 f303 	asr.w	r3, r2, r3
    f792:	4003      	ands	r3, r0
                    rle_rdp += rle_bpp;
    f794:	4445      	add	r5, r8
                    rle_prev_v = ret;
    f796:	9301      	str	r3, [sp, #4]
                    rle_rdp += rle_bpp;
    f798:	2201      	movs	r2, #1
    f79a:	9203      	str	r2, [sp, #12]
    f79c:	9802      	ldr	r0, [sp, #8]
    f79e:	4602      	mov	r2, r0
    f7a0:	9005      	str	r0, [sp, #20]
                    rle_state = RLE_STATE_SINGLE;
    f7a2:	2100      	movs	r1, #0
                    rle_rdp += rle_bpp;
    f7a4:	9004      	str	r0, [sp, #16]
    f7a6:	e726      	b.n	f5f6 <lv_font_get_bitmap_fmt_txt+0x19a>
            bit_mask = 0x3;
    f7a8:	2003      	movs	r0, #3
    uint32_t byte_pos = bit_pos >> 3;
    f7aa:	08d1      	lsrs	r1, r2, #3
    bit_pos = bit_pos & 0x7;
    f7ac:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
    f7b0:	eb03 0508 	add.w	r5, r3, r8
    f7b4:	2d07      	cmp	r5, #7
    f7b6:	d81a      	bhi.n	f7ee <lv_font_get_bitmap_fmt_txt+0x392>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
    f7b8:	5c79      	ldrb	r1, [r7, r1]
    f7ba:	9d08      	ldr	r5, [sp, #32]
    f7bc:	1aeb      	subs	r3, r5, r3
    f7be:	fa41 f303 	asr.w	r3, r1, r3
    f7c2:	4003      	ands	r3, r0
            rle_rdp += rle_bpp;
    f7c4:	eb02 0508 	add.w	r5, r2, r8
            rle_prev_v = ret;
    f7c8:	9301      	str	r3, [sp, #4]
            rle_rdp += rle_bpp;
    f7ca:	2201      	movs	r2, #1
    f7cc:	9203      	str	r2, [sp, #12]
    f7ce:	9802      	ldr	r0, [sp, #8]
    f7d0:	4602      	mov	r2, r0
    f7d2:	9005      	str	r0, [sp, #20]
            rle_state = RLE_STATE_SINGLE;
    f7d4:	2100      	movs	r1, #0
            rle_rdp += rle_bpp;
    f7d6:	9004      	str	r0, [sp, #16]
    f7d8:	e70d      	b.n	f5f6 <lv_font_get_bitmap_fmt_txt+0x19a>
            bit_mask = 0x7;
    f7da:	2007      	movs	r0, #7
    f7dc:	e7e5      	b.n	f7aa <lv_font_get_bitmap_fmt_txt+0x34e>
            bit_mask = 0xF;
    f7de:	200f      	movs	r0, #15
    f7e0:	e7e3      	b.n	f7aa <lv_font_get_bitmap_fmt_txt+0x34e>
            bit_mask = 0xFF;
    f7e2:	20ff      	movs	r0, #255	; 0xff
    f7e4:	e7e1      	b.n	f7aa <lv_font_get_bitmap_fmt_txt+0x34e>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    f7e6:	9809      	ldr	r0, [sp, #36]	; 0x24
    f7e8:	e7df      	b.n	f7aa <lv_font_get_bitmap_fmt_txt+0x34e>
            bit_mask = 0x1;
    f7ea:	2001      	movs	r0, #1
    f7ec:	e7dd      	b.n	f7aa <lv_font_get_bitmap_fmt_txt+0x34e>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
    f7ee:	5c7d      	ldrb	r5, [r7, r1]
    f7f0:	4439      	add	r1, r7
    f7f2:	7849      	ldrb	r1, [r1, #1]
    f7f4:	eb01 2105 	add.w	r1, r1, r5, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
    f7f8:	b289      	uxth	r1, r1
    f7fa:	9d07      	ldr	r5, [sp, #28]
    f7fc:	1aeb      	subs	r3, r5, r3
    f7fe:	fa41 f303 	asr.w	r3, r1, r3
    f802:	4003      	ands	r3, r0
    f804:	e7de      	b.n	f7c4 <lv_font_get_bitmap_fmt_txt+0x368>
        rle_cnt--;
    f806:	3c01      	subs	r4, #1
        if(rle_cnt == 0) {
    f808:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    f80c:	d13d      	bne.n	f88a <lv_font_get_bitmap_fmt_txt+0x42e>
    switch(len) {
    f80e:	f1ba 0f07 	cmp.w	sl, #7
    f812:	d823      	bhi.n	f85c <lv_font_get_bitmap_fmt_txt+0x400>
    f814:	e8df f00a 	tbb	[pc, sl]
    f818:	1e1c0424 	.word	0x1e1c0424
    f81c:	20222222 	.word	0x20222222
            bit_mask = 0x3;
    f820:	2003      	movs	r0, #3
    uint32_t byte_pos = bit_pos >> 3;
    f822:	08ea      	lsrs	r2, r5, #3
    bit_pos = bit_pos & 0x7;
    f824:	f005 0307 	and.w	r3, r5, #7
    if(bit_pos + len >= 8) {
    f828:	eb03 0108 	add.w	r1, r3, r8
    f82c:	2907      	cmp	r1, #7
    f82e:	d819      	bhi.n	f864 <lv_font_get_bitmap_fmt_txt+0x408>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
    f830:	5cba      	ldrb	r2, [r7, r2]
    f832:	9908      	ldr	r1, [sp, #32]
    f834:	1acb      	subs	r3, r1, r3
    f836:	fa42 f303 	asr.w	r3, r2, r3
    f83a:	4003      	ands	r3, r0
            rle_rdp += rle_bpp;
    f83c:	4445      	add	r5, r8
            rle_prev_v = ret;
    f83e:	9301      	str	r3, [sp, #4]
            rle_rdp += rle_bpp;
    f840:	2201      	movs	r2, #1
    f842:	9203      	str	r2, [sp, #12]
    f844:	9802      	ldr	r0, [sp, #8]
    f846:	4602      	mov	r2, r0
    f848:	9005      	str	r0, [sp, #20]
            rle_state = RLE_STATE_SINGLE;
    f84a:	2100      	movs	r1, #0
            rle_rdp += rle_bpp;
    f84c:	9004      	str	r0, [sp, #16]
    f84e:	e6d2      	b.n	f5f6 <lv_font_get_bitmap_fmt_txt+0x19a>
            bit_mask = 0x7;
    f850:	2007      	movs	r0, #7
    f852:	e7e6      	b.n	f822 <lv_font_get_bitmap_fmt_txt+0x3c6>
            bit_mask = 0xF;
    f854:	200f      	movs	r0, #15
    f856:	e7e4      	b.n	f822 <lv_font_get_bitmap_fmt_txt+0x3c6>
            bit_mask = 0xFF;
    f858:	20ff      	movs	r0, #255	; 0xff
    f85a:	e7e2      	b.n	f822 <lv_font_get_bitmap_fmt_txt+0x3c6>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    f85c:	9809      	ldr	r0, [sp, #36]	; 0x24
    f85e:	e7e0      	b.n	f822 <lv_font_get_bitmap_fmt_txt+0x3c6>
            bit_mask = 0x1;
    f860:	2001      	movs	r0, #1
    f862:	e7de      	b.n	f822 <lv_font_get_bitmap_fmt_txt+0x3c6>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
    f864:	5cb9      	ldrb	r1, [r7, r2]
    f866:	443a      	add	r2, r7
    f868:	7852      	ldrb	r2, [r2, #1]
    f86a:	eb02 2201 	add.w	r2, r2, r1, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
    f86e:	b292      	uxth	r2, r2
    f870:	9907      	ldr	r1, [sp, #28]
    f872:	1acb      	subs	r3, r1, r3
    f874:	fa42 f303 	asr.w	r3, r2, r3
    f878:	4003      	ands	r3, r0
    f87a:	e7df      	b.n	f83c <lv_font_get_bitmap_fmt_txt+0x3e0>
            ret = rle_prev_v;
    f87c:	9b01      	ldr	r3, [sp, #4]
                if(rle_cnt != 0) {
    f87e:	2201      	movs	r2, #1
    f880:	9203      	str	r2, [sp, #12]
    f882:	9a02      	ldr	r2, [sp, #8]
    f884:	9205      	str	r2, [sp, #20]
                    rle_state = RLE_STATE_COUNTER;
    f886:	2102      	movs	r1, #2
    f888:	e6b5      	b.n	f5f6 <lv_font_get_bitmap_fmt_txt+0x19a>
        ret = rle_prev_v;
    f88a:	9b01      	ldr	r3, [sp, #4]
        if(rle_cnt == 0) {
    f88c:	2001      	movs	r0, #1
    f88e:	9003      	str	r0, [sp, #12]
    f890:	e6b1      	b.n	f5f6 <lv_font_get_bitmap_fmt_txt+0x19a>
    f892:	9804      	ldr	r0, [sp, #16]
    f894:	468c      	mov	ip, r1
    f896:	b9c8      	cbnz	r0, f8cc <lv_font_get_bitmap_fmt_txt+0x470>
    f898:	b10a      	cbz	r2, f89e <lv_font_get_bitmap_fmt_txt+0x442>
    f89a:	4b9f      	ldr	r3, [pc, #636]	; (fb18 <lv_font_get_bitmap_fmt_txt+0x6bc>)
    f89c:	60dd      	str	r5, [r3, #12]
    f89e:	9b05      	ldr	r3, [sp, #20]
    f8a0:	b113      	cbz	r3, f8a8 <lv_font_get_bitmap_fmt_txt+0x44c>
    f8a2:	4b9d      	ldr	r3, [pc, #628]	; (fb18 <lv_font_get_bitmap_fmt_txt+0x6bc>)
    f8a4:	f883 c009 	strb.w	ip, [r3, #9]
    f8a8:	9b03      	ldr	r3, [sp, #12]
    f8aa:	b10b      	cbz	r3, f8b0 <lv_font_get_bitmap_fmt_txt+0x454>
    f8ac:	4b9a      	ldr	r3, [pc, #616]	; (fb18 <lv_font_get_bitmap_fmt_txt+0x6bc>)
    f8ae:	745c      	strb	r4, [r3, #17]
            rle_rdp += rle_bpp;
    f8b0:	2000      	movs	r0, #0
    if(len == 3) {
    f8b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f8b4:	9301      	str	r3, [sp, #4]
        len = 4;
    f8b6:	2704      	movs	r7, #4
                val = 15;
    f8b8:	f04f 0c0f 	mov.w	ip, #15
                val = 13;
    f8bc:	f04f 080d 	mov.w	r8, #13
                val = 11;
    f8c0:	f04f 0a0b 	mov.w	sl, #11
                val = 9;
    f8c4:	f04f 0b09 	mov.w	fp, #9
                val = 4;
    f8c8:	9702      	str	r7, [sp, #8]
    f8ca:	e028      	b.n	f91e <lv_font_get_bitmap_fmt_txt+0x4c2>
    f8cc:	4b92      	ldr	r3, [pc, #584]	; (fb18 <lv_font_get_bitmap_fmt_txt+0x6bc>)
    f8ce:	f89d 1004 	ldrb.w	r1, [sp, #4]
    f8d2:	7419      	strb	r1, [r3, #16]
    f8d4:	e7e0      	b.n	f898 <lv_font_get_bitmap_fmt_txt+0x43c>
        switch(val) {
    f8d6:	2907      	cmp	r1, #7
    f8d8:	d83d      	bhi.n	f956 <lv_font_get_bitmap_fmt_txt+0x4fa>
    f8da:	e8df f001 	tbb	[pc, r1]
    f8de:	2704      	.short	0x2704
    f8e0:	33302d2a 	.word	0x33302d2a
    f8e4:	3936      	.short	0x3936
        len = 4;
    f8e6:	463d      	mov	r5, r7
                val = 0;
    f8e8:	2100      	movs	r1, #0
    bit_pos = bit_pos & 0x7;
    f8ea:	f000 0207 	and.w	r2, r0, #7
    f8ee:	f1c2 0208 	rsb	r2, r2, #8
    bit_pos = 8 - bit_pos - len;
    f8f2:	1b52      	subs	r2, r2, r5
    out[byte_pos] &= ((~bit_mask) << bit_pos);
    f8f4:	f3c0 04cf 	ubfx	r4, r0, #3, #16
    f8f8:	f04f 33ff 	mov.w	r3, #4294967295
    f8fc:	40ab      	lsls	r3, r5
    f8fe:	f063 03ff 	orn	r3, r3, #255	; 0xff
    f902:	4093      	lsls	r3, r2
    f904:	f819 5004 	ldrb.w	r5, [r9, r4]
    f908:	402b      	ands	r3, r5
    out[byte_pos] |= (val << bit_pos);
    f90a:	fa01 f202 	lsl.w	r2, r1, r2
    f90e:	4313      	orrs	r3, r2
    f910:	f809 3004 	strb.w	r3, [r9, r4]
        wrp += wr_size;
    f914:	9a06      	ldr	r2, [sp, #24]
    f916:	4613      	mov	r3, r2
    f918:	4410      	add	r0, r2
    for(x = 0; x < w; x++) {
    f91a:	45b6      	cmp	lr, r6
    f91c:	d01d      	beq.n	f95a <lv_font_get_bitmap_fmt_txt+0x4fe>
        bits_write(out, wrp, line_buf1[x], bpp);
    f91e:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    if(len == 3) {
    f922:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f924:	2b03      	cmp	r3, #3
    f926:	d0d6      	beq.n	f8d6 <lv_font_get_bitmap_fmt_txt+0x47a>
    f928:	9d01      	ldr	r5, [sp, #4]
    f92a:	e7de      	b.n	f8ea <lv_font_get_bitmap_fmt_txt+0x48e>
        len = 4;
    f92c:	463d      	mov	r5, r7
                val = 2;
    f92e:	2102      	movs	r1, #2
    f930:	e7db      	b.n	f8ea <lv_font_get_bitmap_fmt_txt+0x48e>
        len = 4;
    f932:	463d      	mov	r5, r7
                val = 4;
    f934:	9902      	ldr	r1, [sp, #8]
    f936:	e7d8      	b.n	f8ea <lv_font_get_bitmap_fmt_txt+0x48e>
        len = 4;
    f938:	463d      	mov	r5, r7
                val = 6;
    f93a:	2106      	movs	r1, #6
    f93c:	e7d5      	b.n	f8ea <lv_font_get_bitmap_fmt_txt+0x48e>
        len = 4;
    f93e:	463d      	mov	r5, r7
                val = 9;
    f940:	4659      	mov	r1, fp
    f942:	e7d2      	b.n	f8ea <lv_font_get_bitmap_fmt_txt+0x48e>
        len = 4;
    f944:	463d      	mov	r5, r7
                val = 11;
    f946:	4651      	mov	r1, sl
    f948:	e7cf      	b.n	f8ea <lv_font_get_bitmap_fmt_txt+0x48e>
        len = 4;
    f94a:	463d      	mov	r5, r7
                val = 13;
    f94c:	4641      	mov	r1, r8
    f94e:	e7cc      	b.n	f8ea <lv_font_get_bitmap_fmt_txt+0x48e>
        len = 4;
    f950:	463d      	mov	r5, r7
                val = 15;
    f952:	4661      	mov	r1, ip
    f954:	e7c9      	b.n	f8ea <lv_font_get_bitmap_fmt_txt+0x48e>
        len = 4;
    f956:	463d      	mov	r5, r7
    f958:	e7c7      	b.n	f8ea <lv_font_get_bitmap_fmt_txt+0x48e>
    f95a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f95c:	fb02 3303 	mla	r3, r2, r3, r3
    f960:	930c      	str	r3, [sp, #48]	; 0x30
    for(y = 1; y < h; y++) {
    f962:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f964:	2b01      	cmp	r3, #1
    f966:	f340 8255 	ble.w	fe14 <lv_font_get_bitmap_fmt_txt+0x9b8>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
    f96a:	4b6b      	ldr	r3, [pc, #428]	; (fb18 <lv_font_get_bitmap_fmt_txt+0x6bc>)
    f96c:	f8d3 8004 	ldr.w	r8, [r3, #4]
    f970:	7a1a      	ldrb	r2, [r3, #8]
    f972:	4610      	mov	r0, r2
    f974:	9217      	str	r2, [sp, #92]	; 0x5c
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    f976:	2201      	movs	r2, #1
    f978:	fa02 f100 	lsl.w	r1, r2, r0
    f97c:	3901      	subs	r1, #1
    f97e:	b2c9      	uxtb	r1, r1
    f980:	9119      	str	r1, [sp, #100]	; 0x64
    if(bit_pos + len >= 8) {
    f982:	4601      	mov	r1, r0
    f984:	4682      	mov	sl, r0
    f986:	7c58      	ldrb	r0, [r3, #17]
    f988:	9005      	str	r0, [sp, #20]
    f98a:	f1c1 0108 	rsb	r1, r1, #8
    f98e:	9109      	str	r1, [sp, #36]	; 0x24
    f990:	f1ca 0110 	rsb	r1, sl, #16
    f994:	910b      	str	r1, [sp, #44]	; 0x2c
    f996:	7c19      	ldrb	r1, [r3, #16]
    f998:	9101      	str	r1, [sp, #4]
    f99a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
    f99e:	f893 b009 	ldrb.w	fp, [r3, #9]
    f9a2:	9906      	ldr	r1, [sp, #24]
    f9a4:	9110      	str	r1, [sp, #64]	; 0x40
    f9a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f9a8:	3b01      	subs	r3, #1
    f9aa:	b29b      	uxth	r3, r3
    f9ac:	fb01 f103 	mul.w	r1, r1, r3
    f9b0:	9118      	str	r1, [sp, #96]	; 0x60
    f9b2:	2100      	movs	r1, #0
    f9b4:	9108      	str	r1, [sp, #32]
    f9b6:	910a      	str	r1, [sp, #40]	; 0x28
    f9b8:	9104      	str	r1, [sp, #16]
    f9ba:	9106      	str	r1, [sp, #24]
    f9bc:	920e      	str	r2, [sp, #56]	; 0x38
    f9be:	9a15      	ldr	r2, [sp, #84]	; 0x54
    f9c0:	18d3      	adds	r3, r2, r3
    f9c2:	931a      	str	r3, [sp, #104]	; 0x68
            rle_rdp += rle_bpp;
    f9c4:	2301      	movs	r3, #1
    f9c6:	9302      	str	r3, [sp, #8]
    if(len == 3) {
    f9c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    f9ca:	9207      	str	r2, [sp, #28]
                val = 4;
    f9cc:	2204      	movs	r2, #4
    f9ce:	921b      	str	r2, [sp, #108]	; 0x6c
            rle_rdp += rle_bpp;
    f9d0:	9303      	str	r3, [sp, #12]
    f9d2:	4666      	mov	r6, ip
    f9d4:	e1f5      	b.n	fdc2 <lv_font_get_bitmap_fmt_txt+0x966>
    for(i = 0; i < w; i++) {
    f9d6:	2300      	movs	r3, #0
    f9d8:	930c      	str	r3, [sp, #48]	; 0x30
    f9da:	e7c2      	b.n	f962 <lv_font_get_bitmap_fmt_txt+0x506>
            bit_mask = 0x3;
    f9dc:	f04f 0903 	mov.w	r9, #3
    f9e0:	e00c      	b.n	f9fc <lv_font_get_bitmap_fmt_txt+0x5a0>
            bit_mask = 0x7;
    f9e2:	f04f 0907 	mov.w	r9, #7
    f9e6:	e009      	b.n	f9fc <lv_font_get_bitmap_fmt_txt+0x5a0>
            bit_mask = 0xF;
    f9e8:	f04f 090f 	mov.w	r9, #15
    f9ec:	e006      	b.n	f9fc <lv_font_get_bitmap_fmt_txt+0x5a0>
            bit_mask = 0xFF;
    f9ee:	46e1      	mov	r9, ip
    f9f0:	e004      	b.n	f9fc <lv_font_get_bitmap_fmt_txt+0x5a0>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    f9f2:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    f9f6:	e001      	b.n	f9fc <lv_font_get_bitmap_fmt_txt+0x5a0>
            bit_mask = 0x1;
    f9f8:	f8dd 9008 	ldr.w	r9, [sp, #8]
    uint32_t byte_pos = bit_pos >> 3;
    f9fc:	08f3      	lsrs	r3, r6, #3
    bit_pos = bit_pos & 0x7;
    f9fe:	f006 0207 	and.w	r2, r6, #7
    if(bit_pos + len >= 8) {
    fa02:	eb02 0b0a 	add.w	fp, r2, sl
    fa06:	f1bb 0f07 	cmp.w	fp, #7
    fa0a:	d831      	bhi.n	fa70 <lv_font_get_bitmap_fmt_txt+0x614>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
    fa0c:	f818 3003 	ldrb.w	r3, [r8, r3]
    fa10:	9d09      	ldr	r5, [sp, #36]	; 0x24
    fa12:	1aaa      	subs	r2, r5, r2
    fa14:	fa43 f202 	asr.w	r2, r3, r2
    fa18:	ea02 0909 	and.w	r9, r2, r9
    fa1c:	fa5f f989 	uxtb.w	r9, r9
        if(rle_rdp != 0 && rle_prev_v == ret) {
    fa20:	b116      	cbz	r6, fa28 <lv_font_get_bitmap_fmt_txt+0x5cc>
    fa22:	9b01      	ldr	r3, [sp, #4]
    fa24:	454b      	cmp	r3, r9
    fa26:	d033      	beq.n	fa90 <lv_font_get_bitmap_fmt_txt+0x634>
        rle_rdp += rle_bpp;
    fa28:	4456      	add	r6, sl
        rle_prev_v = ret;
    fa2a:	f8cd 9004 	str.w	r9, [sp, #4]
        rle_rdp += rle_bpp;
    fa2e:	9b02      	ldr	r3, [sp, #8]
    fa30:	9304      	str	r3, [sp, #16]
    fa32:	9b03      	ldr	r3, [sp, #12]
    fa34:	9306      	str	r3, [sp, #24]
        out[i] = rle_next();
    fa36:	f804 9f01 	strb.w	r9, [r4, #1]!
    for(i = 0; i < w; i++) {
    fa3a:	42a0      	cmp	r0, r4
    fa3c:	f000 815d 	beq.w	fcfa <lv_font_get_bitmap_fmt_txt+0x89e>
    if(rle_state == RLE_STATE_SINGLE) {
    fa40:	bb69      	cbnz	r1, fa9e <lv_font_get_bitmap_fmt_txt+0x642>
    switch(len) {
    fa42:	9b05      	ldr	r3, [sp, #20]
    fa44:	461a      	mov	r2, r3
    fa46:	2a07      	cmp	r2, #7
    fa48:	d8d3      	bhi.n	f9f2 <lv_font_get_bitmap_fmt_txt+0x596>
    fa4a:	a301      	add	r3, pc, #4	; (adr r3, fa50 <lv_font_get_bitmap_fmt_txt+0x5f4>)
    fa4c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    fa50:	0000f9f9 	.word	0x0000f9f9
    fa54:	0000f9dd 	.word	0x0000f9dd
    fa58:	0000f9e3 	.word	0x0000f9e3
    fa5c:	0000f9e9 	.word	0x0000f9e9
    fa60:	0000f9f3 	.word	0x0000f9f3
    fa64:	0000f9f3 	.word	0x0000f9f3
    fa68:	0000f9f3 	.word	0x0000f9f3
    fa6c:	0000f9ef 	.word	0x0000f9ef
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
    fa70:	f818 b003 	ldrb.w	fp, [r8, r3]
    fa74:	4443      	add	r3, r8
    fa76:	785b      	ldrb	r3, [r3, #1]
    fa78:	eb03 230b 	add.w	r3, r3, fp, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
    fa7c:	b29b      	uxth	r3, r3
    fa7e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    fa80:	1aaa      	subs	r2, r5, r2
    fa82:	fa43 f202 	asr.w	r2, r3, r2
    fa86:	ea02 0209 	and.w	r2, r2, r9
    fa8a:	fa5f f982 	uxtb.w	r9, r2
    fa8e:	e7c7      	b.n	fa20 <lv_font_get_bitmap_fmt_txt+0x5c4>
        if(rle_rdp != 0 && rle_prev_v == ret) {
    fa90:	9b02      	ldr	r3, [sp, #8]
    fa92:	9308      	str	r3, [sp, #32]
            rle_cnt = 0;
    fa94:	4677      	mov	r7, lr
        if(rle_rdp != 0 && rle_prev_v == ret) {
    fa96:	9b03      	ldr	r3, [sp, #12]
    fa98:	930a      	str	r3, [sp, #40]	; 0x28
            rle_state = RLE_STATE_REPEATE;
    fa9a:	4619      	mov	r1, r3
    fa9c:	e7c4      	b.n	fa28 <lv_font_get_bitmap_fmt_txt+0x5cc>
    else if(rle_state == RLE_STATE_REPEATE) {
    fa9e:	2901      	cmp	r1, #1
    faa0:	d004      	beq.n	faac <lv_font_get_bitmap_fmt_txt+0x650>
    else if(rle_state == RLE_STATE_COUNTER) {
    faa2:	2902      	cmp	r1, #2
    faa4:	f000 80d7 	beq.w	fc56 <lv_font_get_bitmap_fmt_txt+0x7fa>
    uint8_t ret = 0;
    faa8:	46f1      	mov	r9, lr
    faaa:	e7c4      	b.n	fa36 <lv_font_get_bitmap_fmt_txt+0x5da>
    uint32_t byte_pos = bit_pos >> 3;
    faac:	08f3      	lsrs	r3, r6, #3
    bit_pos = bit_pos & 0x7;
    faae:	f006 0207 	and.w	r2, r6, #7
    if(bit_pos + len >= 8) {
    fab2:	f102 0901 	add.w	r9, r2, #1
    fab6:	f1b9 0f07 	cmp.w	r9, #7
    faba:	d815      	bhi.n	fae8 <lv_font_get_bitmap_fmt_txt+0x68c>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
    fabc:	f818 3003 	ldrb.w	r3, [r8, r3]
    fac0:	43d2      	mvns	r2, r2
    fac2:	3208      	adds	r2, #8
    fac4:	4113      	asrs	r3, r2
    fac6:	f003 0301 	and.w	r3, r3, #1
        rle_cnt++;
    faca:	1c7a      	adds	r2, r7, #1
    facc:	b2d7      	uxtb	r7, r2
        rle_rdp += 1;
    face:	1c72      	adds	r2, r6, #1
        if(v == 1) {
    fad0:	b9bb      	cbnz	r3, fb02 <lv_font_get_bitmap_fmt_txt+0x6a6>
    switch(len) {
    fad2:	9b05      	ldr	r3, [sp, #20]
    fad4:	4619      	mov	r1, r3
    fad6:	2907      	cmp	r1, #7
    fad8:	f200 808e 	bhi.w	fbf8 <lv_font_get_bitmap_fmt_txt+0x79c>
    fadc:	e8df f001 	tbb	[pc, r1]
    fae0:	8886848e 	.word	0x8886848e
    fae4:	8a8c8c8c 	.word	0x8a8c8c8c
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
    fae8:	f818 9003 	ldrb.w	r9, [r8, r3]
    faec:	4443      	add	r3, r8
    faee:	785b      	ldrb	r3, [r3, #1]
    faf0:	eb03 2309 	add.w	r3, r3, r9, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
    faf4:	b29b      	uxth	r3, r3
    faf6:	43d2      	mvns	r2, r2
    faf8:	3210      	adds	r2, #16
    fafa:	4113      	asrs	r3, r2
    fafc:	f003 0301 	and.w	r3, r3, #1
    fb00:	e7e3      	b.n	faca <lv_font_get_bitmap_fmt_txt+0x66e>
            if(rle_cnt == 11) {
    fb02:	2f0b      	cmp	r7, #11
    fb04:	d00a      	beq.n	fb1c <lv_font_get_bitmap_fmt_txt+0x6c0>
        rle_rdp += 1;
    fb06:	4616      	mov	r6, r2
            ret = rle_prev_v;
    fb08:	f8dd 9004 	ldr.w	r9, [sp, #4]
            if(rle_cnt == 11) {
    fb0c:	9b02      	ldr	r3, [sp, #8]
    fb0e:	9308      	str	r3, [sp, #32]
    fb10:	9b03      	ldr	r3, [sp, #12]
    fb12:	9304      	str	r3, [sp, #16]
    fb14:	e78f      	b.n	fa36 <lv_font_get_bitmap_fmt_txt+0x5da>
    fb16:	bf00      	nop
    fb18:	20002b5c 	.word	0x20002b5c
    uint32_t byte_pos = bit_pos >> 3;
    fb1c:	08d3      	lsrs	r3, r2, #3
    bit_pos = bit_pos & 0x7;
    fb1e:	f002 0207 	and.w	r2, r2, #7
    if(bit_pos + len >= 8) {
    fb22:	1d91      	adds	r1, r2, #6
    fb24:	2907      	cmp	r1, #7
    fb26:	d815      	bhi.n	fb54 <lv_font_get_bitmap_fmt_txt+0x6f8>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
    fb28:	f818 3003 	ldrb.w	r3, [r8, r3]
    fb2c:	f1c2 0202 	rsb	r2, r2, #2
    fb30:	fa43 f202 	asr.w	r2, r3, r2
    fb34:	f002 073f 	and.w	r7, r2, #63	; 0x3f
                rle_rdp += 6;
    fb38:	3607      	adds	r6, #7
                if(rle_cnt != 0) {
    fb3a:	2f00      	cmp	r7, #0
    fb3c:	f040 80cf 	bne.w	fcde <lv_font_get_bitmap_fmt_txt+0x882>
    switch(len) {
    fb40:	9b05      	ldr	r3, [sp, #20]
    fb42:	461a      	mov	r2, r3
    fb44:	2a07      	cmp	r2, #7
    fb46:	d839      	bhi.n	fbbc <lv_font_get_bitmap_fmt_txt+0x760>
    fb48:	e8df f002 	tbb	[pc, r2]
    fb4c:	3330123b 	.word	0x3330123b
    fb50:	36383838 	.word	0x36383838
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
    fb54:	f818 1003 	ldrb.w	r1, [r8, r3]
    fb58:	4443      	add	r3, r8
    fb5a:	785b      	ldrb	r3, [r3, #1]
    fb5c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
    fb60:	b29b      	uxth	r3, r3
    fb62:	f1c2 020a 	rsb	r2, r2, #10
    fb66:	fa43 f202 	asr.w	r2, r3, r2
    fb6a:	f002 073f 	and.w	r7, r2, #63	; 0x3f
    fb6e:	e7e3      	b.n	fb38 <lv_font_get_bitmap_fmt_txt+0x6dc>
            bit_mask = 0x3;
    fb70:	f04f 0903 	mov.w	r9, #3
    uint32_t byte_pos = bit_pos >> 3;
    fb74:	08f3      	lsrs	r3, r6, #3
    bit_pos = bit_pos & 0x7;
    fb76:	f006 0207 	and.w	r2, r6, #7
    if(bit_pos + len >= 8) {
    fb7a:	eb02 010a 	add.w	r1, r2, sl
    fb7e:	2907      	cmp	r1, #7
    fb80:	d822      	bhi.n	fbc8 <lv_font_get_bitmap_fmt_txt+0x76c>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
    fb82:	f818 3003 	ldrb.w	r3, [r8, r3]
    fb86:	9909      	ldr	r1, [sp, #36]	; 0x24
    fb88:	1a8a      	subs	r2, r1, r2
    fb8a:	fa43 f202 	asr.w	r2, r3, r2
    fb8e:	ea02 0209 	and.w	r2, r2, r9
    fb92:	fa5f f982 	uxtb.w	r9, r2
                    rle_rdp += rle_bpp;
    fb96:	4456      	add	r6, sl
                    rle_prev_v = ret;
    fb98:	f8cd 9004 	str.w	r9, [sp, #4]
                    rle_rdp += rle_bpp;
    fb9c:	9b02      	ldr	r3, [sp, #8]
    fb9e:	9308      	str	r3, [sp, #32]
    fba0:	9b03      	ldr	r3, [sp, #12]
    fba2:	930a      	str	r3, [sp, #40]	; 0x28
                    rle_state = RLE_STATE_SINGLE;
    fba4:	4671      	mov	r1, lr
                    rle_rdp += rle_bpp;
    fba6:	9304      	str	r3, [sp, #16]
    fba8:	9306      	str	r3, [sp, #24]
    fbaa:	e744      	b.n	fa36 <lv_font_get_bitmap_fmt_txt+0x5da>
            bit_mask = 0x7;
    fbac:	f04f 0907 	mov.w	r9, #7
    fbb0:	e7e0      	b.n	fb74 <lv_font_get_bitmap_fmt_txt+0x718>
            bit_mask = 0xF;
    fbb2:	f04f 090f 	mov.w	r9, #15
    fbb6:	e7dd      	b.n	fb74 <lv_font_get_bitmap_fmt_txt+0x718>
            bit_mask = 0xFF;
    fbb8:	46e1      	mov	r9, ip
    fbba:	e7db      	b.n	fb74 <lv_font_get_bitmap_fmt_txt+0x718>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    fbbc:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    fbc0:	e7d8      	b.n	fb74 <lv_font_get_bitmap_fmt_txt+0x718>
            bit_mask = 0x1;
    fbc2:	f8dd 9008 	ldr.w	r9, [sp, #8]
    fbc6:	e7d5      	b.n	fb74 <lv_font_get_bitmap_fmt_txt+0x718>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
    fbc8:	f818 1003 	ldrb.w	r1, [r8, r3]
    fbcc:	4443      	add	r3, r8
    fbce:	785b      	ldrb	r3, [r3, #1]
    fbd0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
    fbd4:	b29b      	uxth	r3, r3
    fbd6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    fbd8:	1a8a      	subs	r2, r1, r2
    fbda:	fa43 f202 	asr.w	r2, r3, r2
    fbde:	ea02 0209 	and.w	r2, r2, r9
    fbe2:	fa5f f982 	uxtb.w	r9, r2
    fbe6:	e7d6      	b.n	fb96 <lv_font_get_bitmap_fmt_txt+0x73a>
            bit_mask = 0x3;
    fbe8:	2603      	movs	r6, #3
    fbea:	e008      	b.n	fbfe <lv_font_get_bitmap_fmt_txt+0x7a2>
            bit_mask = 0x7;
    fbec:	2607      	movs	r6, #7
    fbee:	e006      	b.n	fbfe <lv_font_get_bitmap_fmt_txt+0x7a2>
            bit_mask = 0xF;
    fbf0:	260f      	movs	r6, #15
    fbf2:	e004      	b.n	fbfe <lv_font_get_bitmap_fmt_txt+0x7a2>
            bit_mask = 0xFF;
    fbf4:	4666      	mov	r6, ip
    fbf6:	e002      	b.n	fbfe <lv_font_get_bitmap_fmt_txt+0x7a2>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    fbf8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    fbfa:	e000      	b.n	fbfe <lv_font_get_bitmap_fmt_txt+0x7a2>
            bit_mask = 0x1;
    fbfc:	9e02      	ldr	r6, [sp, #8]
    uint32_t byte_pos = bit_pos >> 3;
    fbfe:	08d3      	lsrs	r3, r2, #3
    bit_pos = bit_pos & 0x7;
    fc00:	f002 0107 	and.w	r1, r2, #7
    if(bit_pos + len >= 8) {
    fc04:	eb01 090a 	add.w	r9, r1, sl
    fc08:	f1b9 0f07 	cmp.w	r9, #7
    fc0c:	d814      	bhi.n	fc38 <lv_font_get_bitmap_fmt_txt+0x7dc>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
    fc0e:	f818 3003 	ldrb.w	r3, [r8, r3]
    fc12:	9d09      	ldr	r5, [sp, #36]	; 0x24
    fc14:	1a69      	subs	r1, r5, r1
    fc16:	fa43 f101 	asr.w	r1, r3, r1
    fc1a:	4031      	ands	r1, r6
    fc1c:	fa5f f981 	uxtb.w	r9, r1
            rle_rdp += rle_bpp;
    fc20:	eb02 060a 	add.w	r6, r2, sl
            rle_prev_v = ret;
    fc24:	f8cd 9004 	str.w	r9, [sp, #4]
            rle_rdp += rle_bpp;
    fc28:	9b02      	ldr	r3, [sp, #8]
    fc2a:	9308      	str	r3, [sp, #32]
    fc2c:	9b03      	ldr	r3, [sp, #12]
    fc2e:	930a      	str	r3, [sp, #40]	; 0x28
            rle_state = RLE_STATE_SINGLE;
    fc30:	4671      	mov	r1, lr
            rle_rdp += rle_bpp;
    fc32:	9304      	str	r3, [sp, #16]
    fc34:	9306      	str	r3, [sp, #24]
    fc36:	e6fe      	b.n	fa36 <lv_font_get_bitmap_fmt_txt+0x5da>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
    fc38:	f818 9003 	ldrb.w	r9, [r8, r3]
    fc3c:	4443      	add	r3, r8
    fc3e:	785b      	ldrb	r3, [r3, #1]
    fc40:	eb03 2309 	add.w	r3, r3, r9, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
    fc44:	b29b      	uxth	r3, r3
    fc46:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    fc48:	1a69      	subs	r1, r5, r1
    fc4a:	fa43 f101 	asr.w	r1, r3, r1
    fc4e:	4031      	ands	r1, r6
    fc50:	fa5f f981 	uxtb.w	r9, r1
    fc54:	e7e4      	b.n	fc20 <lv_font_get_bitmap_fmt_txt+0x7c4>
        rle_cnt--;
    fc56:	1e7b      	subs	r3, r7, #1
        if(rle_cnt == 0) {
    fc58:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
    fc5c:	d148      	bne.n	fcf0 <lv_font_get_bitmap_fmt_txt+0x894>
    switch(len) {
    fc5e:	9b05      	ldr	r3, [sp, #20]
    fc60:	461a      	mov	r2, r3
    fc62:	2a07      	cmp	r2, #7
    fc64:	d80d      	bhi.n	fc82 <lv_font_get_bitmap_fmt_txt+0x826>
    fc66:	e8df f002 	tbb	[pc, r2]
    fc6a:	040e      	.short	0x040e
    fc6c:	0c0c0806 	.word	0x0c0c0806
    fc70:	0a0c      	.short	0x0a0c
            bit_mask = 0x3;
    fc72:	2103      	movs	r1, #3
    fc74:	e008      	b.n	fc88 <lv_font_get_bitmap_fmt_txt+0x82c>
            bit_mask = 0x7;
    fc76:	2107      	movs	r1, #7
    fc78:	e006      	b.n	fc88 <lv_font_get_bitmap_fmt_txt+0x82c>
            bit_mask = 0xF;
    fc7a:	210f      	movs	r1, #15
    fc7c:	e004      	b.n	fc88 <lv_font_get_bitmap_fmt_txt+0x82c>
            bit_mask = 0xFF;
    fc7e:	4661      	mov	r1, ip
    fc80:	e002      	b.n	fc88 <lv_font_get_bitmap_fmt_txt+0x82c>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    fc82:	990f      	ldr	r1, [sp, #60]	; 0x3c
    fc84:	e000      	b.n	fc88 <lv_font_get_bitmap_fmt_txt+0x82c>
            bit_mask = 0x1;
    fc86:	9902      	ldr	r1, [sp, #8]
    uint32_t byte_pos = bit_pos >> 3;
    fc88:	08f3      	lsrs	r3, r6, #3
    bit_pos = bit_pos & 0x7;
    fc8a:	f006 0207 	and.w	r2, r6, #7
    if(bit_pos + len >= 8) {
    fc8e:	eb02 090a 	add.w	r9, r2, sl
    fc92:	f1b9 0f07 	cmp.w	r9, #7
    fc96:	d813      	bhi.n	fcc0 <lv_font_get_bitmap_fmt_txt+0x864>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
    fc98:	f818 3003 	ldrb.w	r3, [r8, r3]
    fc9c:	9d09      	ldr	r5, [sp, #36]	; 0x24
    fc9e:	1aaa      	subs	r2, r5, r2
    fca0:	fa43 f202 	asr.w	r2, r3, r2
    fca4:	400a      	ands	r2, r1
    fca6:	fa5f f982 	uxtb.w	r9, r2
            rle_rdp += rle_bpp;
    fcaa:	4456      	add	r6, sl
            rle_prev_v = ret;
    fcac:	f8cd 9004 	str.w	r9, [sp, #4]
            rle_rdp += rle_bpp;
    fcb0:	9b02      	ldr	r3, [sp, #8]
    fcb2:	9308      	str	r3, [sp, #32]
    fcb4:	9b03      	ldr	r3, [sp, #12]
    fcb6:	930a      	str	r3, [sp, #40]	; 0x28
            rle_state = RLE_STATE_SINGLE;
    fcb8:	4671      	mov	r1, lr
            rle_rdp += rle_bpp;
    fcba:	9304      	str	r3, [sp, #16]
    fcbc:	9306      	str	r3, [sp, #24]
    fcbe:	e6ba      	b.n	fa36 <lv_font_get_bitmap_fmt_txt+0x5da>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
    fcc0:	f818 9003 	ldrb.w	r9, [r8, r3]
    fcc4:	4443      	add	r3, r8
    fcc6:	785b      	ldrb	r3, [r3, #1]
    fcc8:	eb03 2309 	add.w	r3, r3, r9, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
    fccc:	b29b      	uxth	r3, r3
    fcce:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    fcd0:	1aaa      	subs	r2, r5, r2
    fcd2:	fa43 f202 	asr.w	r2, r3, r2
    fcd6:	400a      	ands	r2, r1
    fcd8:	fa5f f982 	uxtb.w	r9, r2
    fcdc:	e7e5      	b.n	fcaa <lv_font_get_bitmap_fmt_txt+0x84e>
            ret = rle_prev_v;
    fcde:	f8dd 9004 	ldr.w	r9, [sp, #4]
                if(rle_cnt != 0) {
    fce2:	9b02      	ldr	r3, [sp, #8]
    fce4:	9308      	str	r3, [sp, #32]
    fce6:	9b03      	ldr	r3, [sp, #12]
    fce8:	930a      	str	r3, [sp, #40]	; 0x28
                    rle_state = RLE_STATE_COUNTER;
    fcea:	2102      	movs	r1, #2
                if(rle_cnt != 0) {
    fcec:	9304      	str	r3, [sp, #16]
    fcee:	e6a2      	b.n	fa36 <lv_font_get_bitmap_fmt_txt+0x5da>
        ret = rle_prev_v;
    fcf0:	f8dd 9004 	ldr.w	r9, [sp, #4]
        if(rle_cnt == 0) {
    fcf4:	9b02      	ldr	r3, [sp, #8]
    fcf6:	9308      	str	r3, [sp, #32]
    fcf8:	e69d      	b.n	fa36 <lv_font_get_bitmap_fmt_txt+0x5da>
    fcfa:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
    fcfe:	9705      	str	r7, [sp, #20]
    fd00:	9f12      	ldr	r7, [sp, #72]	; 0x48
    fd02:	9b14      	ldr	r3, [sp, #80]	; 0x50
    fd04:	f103 3eff 	add.w	lr, r3, #4294967295
    for(i = 0; i < w; i++) {
    fd08:	9d0c      	ldr	r5, [sp, #48]	; 0x30
                val = 2;
    fd0a:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
    fd0e:	960f      	str	r6, [sp, #60]	; 0x3c
    fd10:	9111      	str	r1, [sp, #68]	; 0x44
    fd12:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
    fd16:	e021      	b.n	fd5c <lv_font_get_bitmap_fmt_txt+0x900>
        switch(val) {
    fd18:	2a07      	cmp	r2, #7
    fd1a:	d840      	bhi.n	fd9e <lv_font_get_bitmap_fmt_txt+0x942>
    fd1c:	e8df f002 	tbb	[pc, r2]
    fd20:	302d2a04 	.word	0x302d2a04
    fd24:	3c393633 	.word	0x3c393633
        len = 4;
    fd28:	2304      	movs	r3, #4
                val = 0;
    fd2a:	2200      	movs	r2, #0
    bit_pos = bit_pos & 0x7;
    fd2c:	f005 0107 	and.w	r1, r5, #7
    fd30:	f1c1 0108 	rsb	r1, r1, #8
    bit_pos = 8 - bit_pos - len;
    fd34:	1ac9      	subs	r1, r1, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
    fd36:	f3c5 00cf 	ubfx	r0, r5, #3, #16
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    fd3a:	2601      	movs	r6, #1
    fd3c:	fa06 f303 	lsl.w	r3, r6, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
    fd40:	425b      	negs	r3, r3
    fd42:	f063 03ff 	orn	r3, r3, #255	; 0xff
    fd46:	408b      	lsls	r3, r1
    fd48:	f819 6000 	ldrb.w	r6, [r9, r0]
    fd4c:	4033      	ands	r3, r6
    out[byte_pos] |= (val << bit_pos);
    fd4e:	408a      	lsls	r2, r1
    fd50:	4313      	orrs	r3, r2
    fd52:	f809 3000 	strb.w	r3, [r9, r0]
    fd56:	445d      	add	r5, fp
        for(x = 0; x < w; x++) {
    fd58:	42bc      	cmp	r4, r7
    fd5a:	d022      	beq.n	fda2 <lv_font_get_bitmap_fmt_txt+0x946>
            line_buf1[x] = line_buf2[x] ^ line_buf1[x];
    fd5c:	f817 2f01 	ldrb.w	r2, [r7, #1]!
    fd60:	f89e 3001 	ldrb.w	r3, [lr, #1]
    fd64:	405a      	eors	r2, r3
    fd66:	f80e 2f01 	strb.w	r2, [lr, #1]!
    if(len == 3) {
    fd6a:	f1bc 0f03 	cmp.w	ip, #3
    fd6e:	d0d3      	beq.n	fd18 <lv_font_get_bitmap_fmt_txt+0x8bc>
    fd70:	9b07      	ldr	r3, [sp, #28]
    fd72:	e7db      	b.n	fd2c <lv_font_get_bitmap_fmt_txt+0x8d0>
        len = 4;
    fd74:	2304      	movs	r3, #4
                val = 2;
    fd76:	2202      	movs	r2, #2
    fd78:	e7d8      	b.n	fd2c <lv_font_get_bitmap_fmt_txt+0x8d0>
        len = 4;
    fd7a:	2304      	movs	r3, #4
                val = 4;
    fd7c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    fd7e:	e7d5      	b.n	fd2c <lv_font_get_bitmap_fmt_txt+0x8d0>
        len = 4;
    fd80:	2304      	movs	r3, #4
                val = 6;
    fd82:	2206      	movs	r2, #6
    fd84:	e7d2      	b.n	fd2c <lv_font_get_bitmap_fmt_txt+0x8d0>
        len = 4;
    fd86:	2304      	movs	r3, #4
                val = 9;
    fd88:	2209      	movs	r2, #9
    fd8a:	e7cf      	b.n	fd2c <lv_font_get_bitmap_fmt_txt+0x8d0>
        len = 4;
    fd8c:	2304      	movs	r3, #4
                val = 11;
    fd8e:	220b      	movs	r2, #11
    fd90:	e7cc      	b.n	fd2c <lv_font_get_bitmap_fmt_txt+0x8d0>
        len = 4;
    fd92:	2304      	movs	r3, #4
                val = 13;
    fd94:	220d      	movs	r2, #13
    fd96:	e7c9      	b.n	fd2c <lv_font_get_bitmap_fmt_txt+0x8d0>
        len = 4;
    fd98:	2304      	movs	r3, #4
                val = 15;
    fd9a:	220f      	movs	r2, #15
    fd9c:	e7c6      	b.n	fd2c <lv_font_get_bitmap_fmt_txt+0x8d0>
        len = 4;
    fd9e:	2304      	movs	r3, #4
    fda0:	e7c4      	b.n	fd2c <lv_font_get_bitmap_fmt_txt+0x8d0>
    fda2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    fda4:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
    fda8:	9b18      	ldr	r3, [sp, #96]	; 0x60
    fdaa:	9a10      	ldr	r2, [sp, #64]	; 0x40
    fdac:	4413      	add	r3, r2
    fdae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    fdb0:	441a      	add	r2, r3
    fdb2:	920c      	str	r2, [sp, #48]	; 0x30
    fdb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fdb6:	3301      	adds	r3, #1
    fdb8:	b21b      	sxth	r3, r3
    fdba:	930e      	str	r3, [sp, #56]	; 0x38
    for(y = 1; y < h; y++) {
    fdbc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    fdbe:	429a      	cmp	r2, r3
    fdc0:	d015      	beq.n	fdee <lv_font_get_bitmap_fmt_txt+0x992>
    for(i = 0; i < w; i++) {
    fdc2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    fdc4:	2b00      	cmp	r3, #0
    fdc6:	d0f5      	beq.n	fdb4 <lv_font_get_bitmap_fmt_txt+0x958>
    fdc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    fdca:	1e5f      	subs	r7, r3, #1
    fdcc:	463c      	mov	r4, r7
    uint8_t ret = 0;
    fdce:	f04f 0e00 	mov.w	lr, #0
    switch(len) {
    fdd2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    fdd4:	1e5d      	subs	r5, r3, #1
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    fdd6:	9b19      	ldr	r3, [sp, #100]	; 0x64
    fdd8:	930f      	str	r3, [sp, #60]	; 0x3c
            bit_mask = 0xFF;
    fdda:	f04f 0cff 	mov.w	ip, #255	; 0xff
    fdde:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
    fde2:	4659      	mov	r1, fp
    fde4:	9712      	str	r7, [sp, #72]	; 0x48
    fde6:	9f05      	ldr	r7, [sp, #20]
    fde8:	9505      	str	r5, [sp, #20]
    fdea:	981a      	ldr	r0, [sp, #104]	; 0x68
    fdec:	e628      	b.n	fa40 <lv_font_get_bitmap_fmt_txt+0x5e4>
    fdee:	46b4      	mov	ip, r6
    fdf0:	9b06      	ldr	r3, [sp, #24]
    fdf2:	b9c3      	cbnz	r3, fe26 <lv_font_get_bitmap_fmt_txt+0x9ca>
    fdf4:	9b04      	ldr	r3, [sp, #16]
    fdf6:	b113      	cbz	r3, fdfe <lv_font_get_bitmap_fmt_txt+0x9a2>
    fdf8:	4b13      	ldr	r3, [pc, #76]	; (fe48 <lv_font_get_bitmap_fmt_txt+0x9ec>)
    fdfa:	f8c3 c00c 	str.w	ip, [r3, #12]
    fdfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fe00:	b113      	cbz	r3, fe08 <lv_font_get_bitmap_fmt_txt+0x9ac>
    fe02:	4b11      	ldr	r3, [pc, #68]	; (fe48 <lv_font_get_bitmap_fmt_txt+0x9ec>)
    fe04:	f883 b009 	strb.w	fp, [r3, #9]
    fe08:	9b08      	ldr	r3, [sp, #32]
    fe0a:	b11b      	cbz	r3, fe14 <lv_font_get_bitmap_fmt_txt+0x9b8>
    fe0c:	4b0e      	ldr	r3, [pc, #56]	; (fe48 <lv_font_get_bitmap_fmt_txt+0x9ec>)
    fe0e:	f89d 2014 	ldrb.w	r2, [sp, #20]
    fe12:	745a      	strb	r2, [r3, #17]
    _lv_mem_buf_release(line_buf1);
    fe14:	9814      	ldr	r0, [sp, #80]	; 0x50
    fe16:	4c0d      	ldr	r4, [pc, #52]	; (fe4c <lv_font_get_bitmap_fmt_txt+0x9f0>)
    fe18:	47a0      	blx	r4
    _lv_mem_buf_release(line_buf2);
    fe1a:	9815      	ldr	r0, [sp, #84]	; 0x54
    fe1c:	47a0      	blx	r4
        return decompr_buf;
    fe1e:	4b0a      	ldr	r3, [pc, #40]	; (fe48 <lv_font_get_bitmap_fmt_txt+0x9ec>)
    fe20:	6818      	ldr	r0, [r3, #0]
    fe22:	f7ff bb38 	b.w	f496 <lv_font_get_bitmap_fmt_txt+0x3a>
    fe26:	4b08      	ldr	r3, [pc, #32]	; (fe48 <lv_font_get_bitmap_fmt_txt+0x9ec>)
    fe28:	f89d 2004 	ldrb.w	r2, [sp, #4]
    fe2c:	741a      	strb	r2, [r3, #16]
    fe2e:	e7e1      	b.n	fdf4 <lv_font_get_bitmap_fmt_txt+0x998>
    if(!gid) return NULL;
    fe30:	2000      	movs	r0, #0
    fe32:	f7ff bb30 	b.w	f496 <lv_font_get_bitmap_fmt_txt+0x3a>
    return NULL;
    fe36:	2000      	movs	r0, #0
    fe38:	f7ff bb2d 	b.w	f496 <lv_font_get_bitmap_fmt_txt+0x3a>
        if(gsize == 0) return NULL;
    fe3c:	2000      	movs	r0, #0
    fe3e:	f7ff bb2a 	b.w	f496 <lv_font_get_bitmap_fmt_txt+0x3a>
            if(decompr_buf == NULL) return NULL;
    fe42:	2000      	movs	r0, #0
    fe44:	f7ff bb27 	b.w	f496 <lv_font_get_bitmap_fmt_txt+0x3a>
    fe48:	20002b5c 	.word	0x20002b5c
    fe4c:	000116e5 	.word	0x000116e5

0000fe50 <lv_font_get_glyph_dsc_fmt_txt>:
{
    fe50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fe54:	b084      	sub	sp, #16
    fe56:	4607      	mov	r7, r0
    fe58:	460c      	mov	r4, r1
    fe5a:	4699      	mov	r9, r3
    if(unicode_letter == '\t') {
    fe5c:	2a09      	cmp	r2, #9
        is_tab = true;
    fe5e:	bf06      	itte	eq
    fe60:	2501      	moveq	r5, #1
        unicode_letter = ' ';
    fe62:	2220      	moveq	r2, #32
    bool is_tab = false;
    fe64:	2500      	movne	r5, #0
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
    fe66:	6906      	ldr	r6, [r0, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
    fe68:	4611      	mov	r1, r2
    fe6a:	4b49      	ldr	r3, [pc, #292]	; (ff90 <lv_font_get_glyph_dsc_fmt_txt+0x140>)
    fe6c:	4798      	blx	r3
    if(!gid) return false;
    fe6e:	4680      	mov	r8, r0
    fe70:	2800      	cmp	r0, #0
    fe72:	f000 8086 	beq.w	ff82 <lv_font_get_glyph_dsc_fmt_txt+0x132>
    if(fdsc->kern_dsc) {
    fe76:	68f3      	ldr	r3, [r6, #12]
    fe78:	2b00      	cmp	r3, #0
    fe7a:	d07c      	beq.n	ff76 <lv_font_get_glyph_dsc_fmt_txt+0x126>
        uint32_t gid_next = get_glyph_dsc_id(font, unicode_letter_next);
    fe7c:	4649      	mov	r1, r9
    fe7e:	4638      	mov	r0, r7
    fe80:	4b43      	ldr	r3, [pc, #268]	; (ff90 <lv_font_get_glyph_dsc_fmt_txt+0x140>)
    fe82:	4798      	blx	r3
        if(gid_next) {
    fe84:	4603      	mov	r3, r0
    fe86:	bb18      	cbnz	r0, fed0 <lv_font_get_glyph_dsc_fmt_txt+0x80>
    int8_t kvalue = 0;
    fe88:	2300      	movs	r3, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
    fe8a:	6870      	ldr	r0, [r6, #4]
    fe8c:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
    fe90:	8a32      	ldrh	r2, [r6, #16]
    fe92:	fb03 f302 	mul.w	r3, r3, r2
    fe96:	111b      	asrs	r3, r3, #4
    uint32_t adv_w = gdsc->adv_w;
    fe98:	8842      	ldrh	r2, [r0, #2]
    fe9a:	f3c2 120b 	ubfx	r2, r2, #4, #12
    if(is_tab) adv_w *= 2;
    fe9e:	b105      	cbz	r5, fea2 <lv_font_get_glyph_dsc_fmt_txt+0x52>
    fea0:	0052      	lsls	r2, r2, #1
    adv_w  = (adv_w + (1 << 3)) >> 4;
    fea2:	3308      	adds	r3, #8
    fea4:	4413      	add	r3, r2
    fea6:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
    fea8:	8023      	strh	r3, [r4, #0]
    dsc_out->box_h = gdsc->box_h;
    feaa:	7943      	ldrb	r3, [r0, #5]
    feac:	80a3      	strh	r3, [r4, #4]
    dsc_out->box_w = gdsc->box_w;
    feae:	7902      	ldrb	r2, [r0, #4]
    feb0:	8062      	strh	r2, [r4, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
    feb2:	f990 3006 	ldrsb.w	r3, [r0, #6]
    feb6:	80e3      	strh	r3, [r4, #6]
    dsc_out->ofs_y = gdsc->ofs_y;
    feb8:	f990 3007 	ldrsb.w	r3, [r0, #7]
    febc:	8123      	strh	r3, [r4, #8]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
    febe:	7cf3      	ldrb	r3, [r6, #19]
    fec0:	f3c3 0383 	ubfx	r3, r3, #2, #4
    fec4:	72a3      	strb	r3, [r4, #10]
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
    fec6:	2d00      	cmp	r5, #0
    fec8:	d060      	beq.n	ff8c <lv_font_get_glyph_dsc_fmt_txt+0x13c>
    feca:	0052      	lsls	r2, r2, #1
    fecc:	8062      	strh	r2, [r4, #2]
    fece:	e059      	b.n	ff84 <lv_font_get_glyph_dsc_fmt_txt+0x134>
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
    fed0:	693a      	ldr	r2, [r7, #16]
    if(fdsc->kern_classes == 0) {
    fed2:	7cd1      	ldrb	r1, [r2, #19]
    fed4:	f011 0f40 	tst.w	r1, #64	; 0x40
    fed8:	d13c      	bne.n	ff54 <lv_font_get_glyph_dsc_fmt_txt+0x104>
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
    feda:	68d7      	ldr	r7, [r2, #12]
        if(kdsc->glyph_ids_size == 0) {
    fedc:	7afa      	ldrb	r2, [r7, #11]
    fede:	f012 0203 	ands.w	r2, r2, #3
    fee2:	d003      	beq.n	feec <lv_font_get_glyph_dsc_fmt_txt+0x9c>
        else if(kdsc->glyph_ids_size == 1) {
    fee4:	2a01      	cmp	r2, #1
    fee6:	d01b      	beq.n	ff20 <lv_font_get_glyph_dsc_fmt_txt+0xd0>
    int8_t value = 0;
    fee8:	2300      	movs	r3, #0
    feea:	e7ce      	b.n	fe8a <lv_font_get_glyph_dsc_fmt_txt+0x3a>
            const uint8_t * g_ids = kdsc->glyph_ids;
    feec:	f8d7 9000 	ldr.w	r9, [r7]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
    fef0:	eb08 2300 	add.w	r3, r8, r0, lsl #8
    fef4:	a804      	add	r0, sp, #16
    fef6:	f820 3d04 	strh.w	r3, [r0, #-4]!
            uint8_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
    fefa:	68ba      	ldr	r2, [r7, #8]
    fefc:	4b25      	ldr	r3, [pc, #148]	; (ff94 <lv_font_get_glyph_dsc_fmt_txt+0x144>)
    fefe:	9300      	str	r3, [sp, #0]
    ff00:	2302      	movs	r3, #2
    ff02:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    ff06:	4649      	mov	r1, r9
    ff08:	f8df a090 	ldr.w	sl, [pc, #144]	; ff9c <lv_font_get_glyph_dsc_fmt_txt+0x14c>
    ff0c:	47d0      	blx	sl
            if(kid_p) {
    ff0e:	b128      	cbz	r0, ff1c <lv_font_get_glyph_dsc_fmt_txt+0xcc>
                lv_uintptr_t ofs = (lv_uintptr_t)(kid_p - g_ids);
    ff10:	eba0 0309 	sub.w	r3, r0, r9
                ofs = ofs >> 1;     /*ofs is for pair, divide by 2 to refer as a single value*/
    ff14:	085b      	lsrs	r3, r3, #1
                value = kdsc->values[ofs];
    ff16:	687a      	ldr	r2, [r7, #4]
    ff18:	56d3      	ldrsb	r3, [r2, r3]
    ff1a:	e7b6      	b.n	fe8a <lv_font_get_glyph_dsc_fmt_txt+0x3a>
    int8_t value = 0;
    ff1c:	2300      	movs	r3, #0
    ff1e:	e7b4      	b.n	fe8a <lv_font_get_glyph_dsc_fmt_txt+0x3a>
            const uint16_t * g_ids = kdsc->glyph_ids;
    ff20:	f8d7 9000 	ldr.w	r9, [r7]
            lv_uintptr_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
    ff24:	eb08 2300 	add.w	r3, r8, r0, lsl #8
    ff28:	a804      	add	r0, sp, #16
    ff2a:	f840 3d04 	str.w	r3, [r0, #-4]!
            uint8_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
    ff2e:	68ba      	ldr	r2, [r7, #8]
    ff30:	4b19      	ldr	r3, [pc, #100]	; (ff98 <lv_font_get_glyph_dsc_fmt_txt+0x148>)
    ff32:	9300      	str	r3, [sp, #0]
    ff34:	2304      	movs	r3, #4
    ff36:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    ff3a:	4649      	mov	r1, r9
    ff3c:	f8df a05c 	ldr.w	sl, [pc, #92]	; ff9c <lv_font_get_glyph_dsc_fmt_txt+0x14c>
    ff40:	47d0      	blx	sl
            if(kid_p) {
    ff42:	b128      	cbz	r0, ff50 <lv_font_get_glyph_dsc_fmt_txt+0x100>
                lv_uintptr_t ofs = (lv_uintptr_t)(kid_p - (const uint8_t *)g_ids);
    ff44:	eba0 0309 	sub.w	r3, r0, r9
                ofs = ofs >> 4;     /*ofs is 4 byte pairs, divide by 4 to refer as a single value*/
    ff48:	091b      	lsrs	r3, r3, #4
                value = kdsc->values[ofs];
    ff4a:	687a      	ldr	r2, [r7, #4]
    ff4c:	56d3      	ldrsb	r3, [r2, r3]
    ff4e:	e79c      	b.n	fe8a <lv_font_get_glyph_dsc_fmt_txt+0x3a>
    int8_t value = 0;
    ff50:	2300      	movs	r3, #0
    ff52:	e79a      	b.n	fe8a <lv_font_get_glyph_dsc_fmt_txt+0x3a>
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
    ff54:	68d1      	ldr	r1, [r2, #12]
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
    ff56:	684a      	ldr	r2, [r1, #4]
    ff58:	f812 2008 	ldrb.w	r2, [r2, r8]
        if(left_class > 0 && right_class > 0) {
    ff5c:	b16a      	cbz	r2, ff7a <lv_font_get_glyph_dsc_fmt_txt+0x12a>
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
    ff5e:	6888      	ldr	r0, [r1, #8]
    ff60:	5cc3      	ldrb	r3, [r0, r3]
        if(left_class > 0 && right_class > 0) {
    ff62:	b163      	cbz	r3, ff7e <lv_font_get_glyph_dsc_fmt_txt+0x12e>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
    ff64:	3a01      	subs	r2, #1
    ff66:	7b48      	ldrb	r0, [r1, #13]
    ff68:	6809      	ldr	r1, [r1, #0]
    ff6a:	440b      	add	r3, r1
    ff6c:	fb00 3202 	mla	r2, r0, r2, r3
    ff70:	f912 3c01 	ldrsb.w	r3, [r2, #-1]
    ff74:	e789      	b.n	fe8a <lv_font_get_glyph_dsc_fmt_txt+0x3a>
    int8_t kvalue = 0;
    ff76:	2300      	movs	r3, #0
    ff78:	e787      	b.n	fe8a <lv_font_get_glyph_dsc_fmt_txt+0x3a>
    int8_t value = 0;
    ff7a:	2300      	movs	r3, #0
    ff7c:	e785      	b.n	fe8a <lv_font_get_glyph_dsc_fmt_txt+0x3a>
    ff7e:	2300      	movs	r3, #0
    ff80:	e783      	b.n	fe8a <lv_font_get_glyph_dsc_fmt_txt+0x3a>
    if(!gid) return false;
    ff82:	2500      	movs	r5, #0
}
    ff84:	4628      	mov	r0, r5
    ff86:	b004      	add	sp, #16
    ff88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return true;
    ff8c:	2501      	movs	r5, #1
    ff8e:	e7f9      	b.n	ff84 <lv_font_get_glyph_dsc_fmt_txt+0x134>
    ff90:	0000f371 	.word	0x0000f371
    ff94:	0000f345 	.word	0x0000f345
    ff98:	0000f357 	.word	0x0000f357
    ff9c:	000128a5 	.word	0x000128a5

0000ffa0 <_lv_font_clean_up_fmt_txt>:
{
    ffa0:	b508      	push	{r3, lr}
    if(decompr_buf) {
    ffa2:	4b04      	ldr	r3, [pc, #16]	; (ffb4 <_lv_font_clean_up_fmt_txt+0x14>)
    ffa4:	6818      	ldr	r0, [r3, #0]
    ffa6:	b120      	cbz	r0, ffb2 <_lv_font_clean_up_fmt_txt+0x12>
        lv_mem_free(decompr_buf);
    ffa8:	4b03      	ldr	r3, [pc, #12]	; (ffb8 <_lv_font_clean_up_fmt_txt+0x18>)
    ffaa:	4798      	blx	r3
        decompr_buf = NULL;
    ffac:	2200      	movs	r2, #0
    ffae:	4b01      	ldr	r3, [pc, #4]	; (ffb4 <_lv_font_clean_up_fmt_txt+0x14>)
    ffb0:	601a      	str	r2, [r3, #0]
    ffb2:	bd08      	pop	{r3, pc}
    ffb4:	20002b5c 	.word	0x20002b5c
    ffb8:	00011639 	.word	0x00011639

0000ffbc <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
    ffbc:	b510      	push	{r4, lr}
    ffbe:	4604      	mov	r4, r0
    _lv_memset_00(driver, sizeof(lv_disp_drv_t));
    ffc0:	212c      	movs	r1, #44	; 0x2c
    ffc2:	4b15      	ldr	r3, [pc, #84]	; (10018 <STACK_SIZE+0x18>)
    ffc4:	4798      	blx	r3

    driver->flush_cb         = NULL;
    ffc6:	2300      	movs	r3, #0
    ffc8:	60e3      	str	r3, [r4, #12]
    driver->hor_res          = LV_HOR_RES_MAX;
    ffca:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    ffce:	8022      	strh	r2, [r4, #0]
    driver->ver_res          = LV_VER_RES_MAX;
    ffd0:	f44f 7288 	mov.w	r2, #272	; 0x110
    ffd4:	8062      	strh	r2, [r4, #2]
    driver->buffer           = NULL;
    ffd6:	6063      	str	r3, [r4, #4]
    driver->rotated          = 0;
    ffd8:	7a22      	ldrb	r2, [r4, #8]
    ffda:	f363 0241 	bfi	r2, r3, #1, #1
    ffde:	7222      	strb	r2, [r4, #8]
    driver->color_chroma_key = LV_COLOR_TRANSP;
    ffe0:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    ffe4:	f363 0204 	bfi	r2, r3, #0, #5
    ffe8:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    ffec:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    ffee:	f442 62fc 	orr.w	r2, r2, #2016	; 0x7e0
    fff2:	8522      	strh	r2, [r4, #40]	; 0x28
    fff4:	0a12      	lsrs	r2, r2, #8
    fff6:	f363 02c7 	bfi	r2, r3, #3, #5
    fffa:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
    driver->dpi = LV_DPI;
    fffe:	8922      	ldrh	r2, [r4, #8]
   10000:	2182      	movs	r1, #130	; 0x82
   10002:	f361 028b 	bfi	r2, r1, #2, #10
   10006:	8122      	strh	r2, [r4, #8]

#if LV_ANTIALIAS
    driver->antialiasing = true;
   10008:	f042 0201 	orr.w	r2, r2, #1
   1000c:	7222      	strb	r2, [r4, #8]
#if LV_COLOR_SCREEN_TRANSP
    driver->screen_transp = 1;
#endif

#if LV_USE_GPU
    driver->gpu_blend_cb = NULL;
   1000e:	6223      	str	r3, [r4, #32]
    driver->gpu_fill_cb  = NULL;
   10010:	6263      	str	r3, [r4, #36]	; 0x24

#if LV_USE_USER_DATA
    driver->user_data = NULL;
#endif

    driver->set_px_cb = NULL;
   10012:	6163      	str	r3, [r4, #20]
   10014:	bd10      	pop	{r4, pc}
   10016:	bf00      	nop
   10018:	00011c17 	.word	0x00011c17

0001001c <lv_disp_buf_init>:
 *             It lets LVGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
   1001c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1001e:	4604      	mov	r4, r0
   10020:	460d      	mov	r5, r1
   10022:	4617      	mov	r7, r2
   10024:	461e      	mov	r6, r3
    _lv_memset_00(disp_buf, sizeof(lv_disp_buf_t));
   10026:	2124      	movs	r1, #36	; 0x24
   10028:	4b03      	ldr	r3, [pc, #12]	; (10038 <lv_disp_buf_init+0x1c>)
   1002a:	4798      	blx	r3

    disp_buf->buf1    = buf1;
   1002c:	6025      	str	r5, [r4, #0]
    disp_buf->buf2    = buf2;
   1002e:	6067      	str	r7, [r4, #4]
    disp_buf->buf_act = disp_buf->buf1;
   10030:	60a5      	str	r5, [r4, #8]
    disp_buf->size    = size_in_px_cnt;
   10032:	60e6      	str	r6, [r4, #12]
   10034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10036:	bf00      	nop
   10038:	00011c17 	.word	0x00011c17

0001003c <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable (can be local variable)
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
   1003c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1003e:	4605      	mov	r5, r0
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
   10040:	4837      	ldr	r0, [pc, #220]	; (10120 <lv_disp_drv_register+0xe4>)
   10042:	4b38      	ldr	r3, [pc, #224]	; (10124 <lv_disp_drv_register+0xe8>)
   10044:	4798      	blx	r3
    if(!disp) {
   10046:	4604      	mov	r4, r0
   10048:	2800      	cmp	r0, #0
   1004a:	d053      	beq.n	100f4 <lv_disp_drv_register+0xb8>
        LV_ASSERT_MEM(disp);
        return NULL;
    }

    _lv_memset_00(disp, sizeof(lv_disp_t));
   1004c:	f44f 71b8 	mov.w	r1, #368	; 0x170
   10050:	4b35      	ldr	r3, [pc, #212]	; (10128 <lv_disp_drv_register+0xec>)
   10052:	4798      	blx	r3
    _lv_memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
   10054:	222c      	movs	r2, #44	; 0x2c
   10056:	4629      	mov	r1, r5
   10058:	4620      	mov	r0, r4
   1005a:	4b34      	ldr	r3, [pc, #208]	; (1012c <lv_disp_drv_register+0xf0>)
   1005c:	4798      	blx	r3

    _lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
   1005e:	214c      	movs	r1, #76	; 0x4c
   10060:	f104 0030 	add.w	r0, r4, #48	; 0x30
   10064:	4b32      	ldr	r3, [pc, #200]	; (10130 <lv_disp_drv_register+0xf4>)
   10066:	4798      	blx	r3
    disp->last_activity_time = 0;
   10068:	2300      	movs	r3, #0
   1006a:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c

    if(disp_def == NULL) disp_def = disp;
   1006e:	4b31      	ldr	r3, [pc, #196]	; (10134 <lv_disp_drv_register+0xf8>)
   10070:	681b      	ldr	r3, [r3, #0]
   10072:	2b00      	cmp	r3, #0
   10074:	d048      	beq.n	10108 <lv_disp_drv_register+0xcc>

    lv_disp_t * disp_def_tmp = disp_def;
   10076:	4b2f      	ldr	r3, [pc, #188]	; (10134 <lv_disp_drv_register+0xf8>)
   10078:	681f      	ldr	r7, [r3, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
   1007a:	601c      	str	r4, [r3, #0]
                                        new display*/
    /*Create a refresh task*/
    disp->refr_task = lv_task_create(_lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_REFR_TASK_PRIO, disp);
   1007c:	4623      	mov	r3, r4
   1007e:	2203      	movs	r2, #3
   10080:	211e      	movs	r1, #30
   10082:	482d      	ldr	r0, [pc, #180]	; (10138 <lv_disp_drv_register+0xfc>)
   10084:	4d2d      	ldr	r5, [pc, #180]	; (1013c <lv_disp_drv_register+0x100>)
   10086:	47a8      	blx	r5
   10088:	62e0      	str	r0, [r4, #44]	; 0x2c
    LV_ASSERT_MEM(disp->refr_task);
   1008a:	4b2d      	ldr	r3, [pc, #180]	; (10140 <lv_disp_drv_register+0x104>)
   1008c:	4798      	blx	r3
   1008e:	2800      	cmp	r0, #0
   10090:	d03d      	beq.n	1010e <lv_disp_drv_register+0xd2>
    if(disp->refr_task == NULL) return NULL;
   10092:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   10094:	2b00      	cmp	r3, #0
   10096:	d040      	beq.n	1011a <lv_disp_drv_register+0xde>

    disp->inv_p = 0;
   10098:	f8b4 3168 	ldrh.w	r3, [r4, #360]	; 0x168
   1009c:	f36f 0309 	bfc	r3, #0, #10
   100a0:	f8a4 3168 	strh.w	r3, [r4, #360]	; 0x168
    disp->last_activity_time = 0;
   100a4:	2500      	movs	r5, #0
   100a6:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c

    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
   100aa:	4629      	mov	r1, r5
   100ac:	4628      	mov	r0, r5
   100ae:	4e25      	ldr	r6, [pc, #148]	; (10144 <lv_disp_drv_register+0x108>)
   100b0:	47b0      	blx	r6
   100b2:	63e0      	str	r0, [r4, #60]	; 0x3c
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
   100b4:	4629      	mov	r1, r5
   100b6:	4628      	mov	r0, r5
   100b8:	47b0      	blx	r6
   100ba:	6420      	str	r0, [r4, #64]	; 0x40
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
   100bc:	4629      	mov	r1, r5
   100be:	4628      	mov	r0, r5
   100c0:	47b0      	blx	r6
   100c2:	6460      	str	r0, [r4, #68]	; 0x44
    lv_obj_reset_style_list(disp->top_layer, LV_OBJ_PART_MAIN);
   100c4:	4629      	mov	r1, r5
   100c6:	6c20      	ldr	r0, [r4, #64]	; 0x40
   100c8:	4e1f      	ldr	r6, [pc, #124]	; (10148 <lv_disp_drv_register+0x10c>)
   100ca:	47b0      	blx	r6
    lv_obj_reset_style_list(disp->sys_layer, LV_OBJ_PART_MAIN);
   100cc:	4629      	mov	r1, r5
   100ce:	6c60      	ldr	r0, [r4, #68]	; 0x44
   100d0:	47b0      	blx	r6
    lv_obj_set_click(disp->top_layer, false);
   100d2:	4629      	mov	r1, r5
   100d4:	6c20      	ldr	r0, [r4, #64]	; 0x40
   100d6:	4e1d      	ldr	r6, [pc, #116]	; (1014c <lv_disp_drv_register+0x110>)
   100d8:	47b0      	blx	r6
    lv_obj_set_click(disp->sys_layer, false);
   100da:	4629      	mov	r1, r5
   100dc:	6c60      	ldr	r0, [r4, #68]	; 0x44
   100de:	47b0      	blx	r6

    lv_obj_invalidate(disp->act_scr);
   100e0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   100e2:	4b1b      	ldr	r3, [pc, #108]	; (10150 <lv_disp_drv_register+0x114>)
   100e4:	4798      	blx	r3

    disp_def = disp_def_tmp; /*Revert the default display*/
   100e6:	4b13      	ldr	r3, [pc, #76]	; (10134 <lv_disp_drv_register+0xf8>)
   100e8:	601f      	str	r7, [r3, #0]

    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
   100ea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   100ec:	4b19      	ldr	r3, [pc, #100]	; (10154 <lv_disp_drv_register+0x118>)
   100ee:	4798      	blx	r3

    return disp;
}
   100f0:	4620      	mov	r0, r4
   100f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        LV_ASSERT_MEM(disp);
   100f4:	4b12      	ldr	r3, [pc, #72]	; (10140 <lv_disp_drv_register+0x104>)
   100f6:	4798      	blx	r3
   100f8:	2800      	cmp	r0, #0
   100fa:	d1f9      	bne.n	100f0 <lv_disp_drv_register+0xb4>
   100fc:	2200      	movs	r2, #0
   100fe:	2300      	movs	r3, #0
   10100:	4815      	ldr	r0, [pc, #84]	; (10158 <lv_disp_drv_register+0x11c>)
   10102:	4916      	ldr	r1, [pc, #88]	; (1015c <lv_disp_drv_register+0x120>)
   10104:	4788      	blx	r1
   10106:	e7fe      	b.n	10106 <lv_disp_drv_register+0xca>
    if(disp_def == NULL) disp_def = disp;
   10108:	4b0a      	ldr	r3, [pc, #40]	; (10134 <lv_disp_drv_register+0xf8>)
   1010a:	601c      	str	r4, [r3, #0]
   1010c:	e7b3      	b.n	10076 <lv_disp_drv_register+0x3a>
    LV_ASSERT_MEM(disp->refr_task);
   1010e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   10110:	2300      	movs	r3, #0
   10112:	4811      	ldr	r0, [pc, #68]	; (10158 <lv_disp_drv_register+0x11c>)
   10114:	4911      	ldr	r1, [pc, #68]	; (1015c <lv_disp_drv_register+0x120>)
   10116:	4788      	blx	r1
   10118:	e7fe      	b.n	10118 <lv_disp_drv_register+0xdc>
    if(disp->refr_task == NULL) return NULL;
   1011a:	2400      	movs	r4, #0
   1011c:	e7e8      	b.n	100f0 <lv_disp_drv_register+0xb4>
   1011e:	bf00      	nop
   10120:	2000acac 	.word	0x2000acac
   10124:	000110f1 	.word	0x000110f1
   10128:	00011c17 	.word	0x00011c17
   1012c:	000117a5 	.word	0x000117a5
   10130:	000110d9 	.word	0x000110d9
   10134:	20002b70 	.word	0x20002b70
   10138:	00005795 	.word	0x00005795
   1013c:	00012149 	.word	0x00012149
   10140:	0000295d 	.word	0x0000295d
   10144:	00003d61 	.word	0x00003d61
   10148:	00003af9 	.word	0x00003af9
   1014c:	00002dc9 	.word	0x00002dc9
   10150:	00003445 	.word	0x00003445
   10154:	00012199 	.word	0x00012199
   10158:	0001786c 	.word	0x0001786c
   1015c:	00002965 	.word	0x00002965

00010160 <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
   10160:	4b01      	ldr	r3, [pc, #4]	; (10168 <lv_disp_get_default+0x8>)
   10162:	6818      	ldr	r0, [r3, #0]
   10164:	4770      	bx	lr
   10166:	bf00      	nop
   10168:	20002b70 	.word	0x20002b70

0001016c <lv_disp_get_hor_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
   1016c:	4603      	mov	r3, r0
   1016e:	b140      	cbz	r0, 10182 <lv_disp_get_hor_res+0x16>

    if(disp == NULL)
        return LV_HOR_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
   10170:	7a1a      	ldrb	r2, [r3, #8]
   10172:	f012 0f02 	tst.w	r2, #2
   10176:	bf0c      	ite	eq
   10178:	f9b3 0000 	ldrsheq.w	r0, [r3]
   1017c:	f9b3 0002 	ldrshne.w	r0, [r3, #2]
   10180:	4770      	bx	lr
    return disp_def;
   10182:	4b03      	ldr	r3, [pc, #12]	; (10190 <lv_disp_get_hor_res+0x24>)
   10184:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL)
   10186:	2b00      	cmp	r3, #0
   10188:	d1f2      	bne.n	10170 <lv_disp_get_hor_res+0x4>
        return LV_HOR_RES_MAX;
   1018a:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
}
   1018e:	4770      	bx	lr
   10190:	20002b70 	.word	0x20002b70

00010194 <lv_disp_get_ver_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
   10194:	4603      	mov	r3, r0
   10196:	b140      	cbz	r0, 101aa <lv_disp_get_ver_res+0x16>

    if(disp == NULL)
        return LV_VER_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
   10198:	7a1a      	ldrb	r2, [r3, #8]
   1019a:	f012 0f02 	tst.w	r2, #2
   1019e:	bf0c      	ite	eq
   101a0:	f9b3 0002 	ldrsheq.w	r0, [r3, #2]
   101a4:	f9b3 0000 	ldrshne.w	r0, [r3]
   101a8:	4770      	bx	lr
    return disp_def;
   101aa:	4b03      	ldr	r3, [pc, #12]	; (101b8 <lv_disp_get_ver_res+0x24>)
   101ac:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL)
   101ae:	2b00      	cmp	r3, #0
   101b0:	d1f2      	bne.n	10198 <lv_disp_get_ver_res+0x4>
        return LV_VER_RES_MAX;
   101b2:	f44f 7088 	mov.w	r0, #272	; 0x110
}
   101b6:	4770      	bx	lr
   101b8:	20002b70 	.word	0x20002b70

000101bc <lv_disp_get_dpi>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
uint32_t lv_disp_get_dpi(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
   101bc:	4603      	mov	r3, r0
   101be:	b118      	cbz	r0, 101c8 <lv_disp_get_dpi+0xc>
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
    return disp->driver.dpi;
   101c0:	8918      	ldrh	r0, [r3, #8]
   101c2:	f3c0 0089 	ubfx	r0, r0, #2, #10
   101c6:	4770      	bx	lr
    return disp_def;
   101c8:	4b02      	ldr	r3, [pc, #8]	; (101d4 <lv_disp_get_dpi+0x18>)
   101ca:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
   101cc:	2b00      	cmp	r3, #0
   101ce:	d1f7      	bne.n	101c0 <lv_disp_get_dpi+0x4>
   101d0:	2082      	movs	r0, #130	; 0x82
}
   101d2:	4770      	bx	lr
   101d4:	20002b70 	.word	0x20002b70

000101d8 <lv_disp_get_size_category>:
 * Get the size category of the display based on it's hor. res. and dpi.
 * @param disp pointer to a display (NULL to use the default display)
 * @return LV_DISP_SIZE_SMALL/MEDIUM/LARGE/EXTRA_LARGE
 */
lv_disp_size_t lv_disp_get_size_category(lv_disp_t * disp)
{
   101d8:	b538      	push	{r3, r4, r5, lr}
    if(disp == NULL) disp = lv_disp_get_default();
   101da:	4605      	mov	r5, r0
   101dc:	b1a0      	cbz	r0, 10208 <lv_disp_get_size_category+0x30>

    uint32_t w;
    if(disp == NULL) w = LV_HOR_RES_MAX;
    else w = lv_disp_get_hor_res(disp);
   101de:	4628      	mov	r0, r5
   101e0:	4b0f      	ldr	r3, [pc, #60]	; (10220 <lv_disp_get_size_category+0x48>)
   101e2:	4798      	blx	r3
   101e4:	4604      	mov	r4, r0

    uint32_t dpi = lv_disp_get_dpi(disp);
   101e6:	4628      	mov	r0, r5
   101e8:	4b0e      	ldr	r3, [pc, #56]	; (10224 <lv_disp_get_size_category+0x4c>)
   101ea:	4798      	blx	r3

    w = w * 10 / dpi;
   101ec:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   101f0:	0064      	lsls	r4, r4, #1
   101f2:	fbb4 f0f0 	udiv	r0, r4, r0

    if(w < LV_DISP_SMALL_LIMIT) return LV_DISP_SIZE_SMALL;
   101f6:	281d      	cmp	r0, #29
   101f8:	d90d      	bls.n	10216 <lv_disp_get_size_category+0x3e>
    if(w < LV_DISP_MEDIUM_LIMIT) return LV_DISP_SIZE_MEDIUM;
   101fa:	2831      	cmp	r0, #49	; 0x31
   101fc:	d90d      	bls.n	1021a <lv_disp_get_size_category+0x42>
    if(w < LV_DISP_LARGE_LIMIT) return LV_DISP_SIZE_LARGE;
    else return LV_DISP_SIZE_EXTRA_LARGE;
   101fe:	2846      	cmp	r0, #70	; 0x46
   10200:	bf34      	ite	cc
   10202:	2002      	movcc	r0, #2
   10204:	2003      	movcs	r0, #3
   10206:	bd38      	pop	{r3, r4, r5, pc}
    return disp_def;
   10208:	4b07      	ldr	r3, [pc, #28]	; (10228 <lv_disp_get_size_category+0x50>)
   1020a:	681d      	ldr	r5, [r3, #0]
   1020c:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
    if(disp == NULL) w = LV_HOR_RES_MAX;
   10210:	2d00      	cmp	r5, #0
   10212:	d0e8      	beq.n	101e6 <lv_disp_get_size_category+0xe>
   10214:	e7e3      	b.n	101de <lv_disp_get_size_category+0x6>
    if(w < LV_DISP_SMALL_LIMIT) return LV_DISP_SIZE_SMALL;
   10216:	2000      	movs	r0, #0
   10218:	bd38      	pop	{r3, r4, r5, pc}
    if(w < LV_DISP_MEDIUM_LIMIT) return LV_DISP_SIZE_MEDIUM;
   1021a:	2001      	movs	r0, #1
}
   1021c:	bd38      	pop	{r3, r4, r5, pc}
   1021e:	bf00      	nop
   10220:	0001016d 	.word	0x0001016d
   10224:	000101bd 	.word	0x000101bd
   10228:	20002b70 	.word	0x20002b70

0001022c <lv_disp_flush_ready>:
    if(disp_drv->screen_transp) {
        _lv_memset_00(disp_drv->buffer->buf_act, disp_drv->buffer->size * sizeof(lv_color32_t));
    }
#endif

    disp_drv->buffer->flushing = 0;
   1022c:	6842      	ldr	r2, [r0, #4]
   1022e:	2300      	movs	r3, #0
   10230:	6193      	str	r3, [r2, #24]
    disp_drv->buffer->flushing_last = 0;
   10232:	6842      	ldr	r2, [r0, #4]
   10234:	61d3      	str	r3, [r2, #28]
   10236:	4770      	bx	lr

00010238 <lv_disp_get_next>:
 * Get the next display.
 * @param disp pointer to the current display. NULL to initialize.
 * @return the next display or NULL if no more. Give the first display when the parameter is NULL
 */
lv_disp_t * lv_disp_get_next(lv_disp_t * disp)
{
   10238:	b508      	push	{r3, lr}
    if(disp == NULL)
   1023a:	b120      	cbz	r0, 10246 <lv_disp_get_next+0xe>
   1023c:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_disp_ll), disp);
   1023e:	4804      	ldr	r0, [pc, #16]	; (10250 <lv_disp_get_next+0x18>)
   10240:	4b04      	ldr	r3, [pc, #16]	; (10254 <lv_disp_get_next+0x1c>)
   10242:	4798      	blx	r3
}
   10244:	bd08      	pop	{r3, pc}
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
   10246:	4802      	ldr	r0, [pc, #8]	; (10250 <lv_disp_get_next+0x18>)
   10248:	4b03      	ldr	r3, [pc, #12]	; (10258 <lv_disp_get_next+0x20>)
   1024a:	4798      	blx	r3
   1024c:	bd08      	pop	{r3, pc}
   1024e:	bf00      	nop
   10250:	2000acac 	.word	0x2000acac
   10254:	0001119d 	.word	0x0001119d
   10258:	00011189 	.word	0x00011189

0001025c <lv_disp_get_buf>:
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
    return disp->driver.buffer;
}
   1025c:	6840      	ldr	r0, [r0, #4]
   1025e:	4770      	bx	lr

00010260 <lv_disp_is_double_buf>:
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
   10260:	6843      	ldr	r3, [r0, #4]
   10262:	681a      	ldr	r2, [r3, #0]
   10264:	b122      	cbz	r2, 10270 <lv_disp_is_double_buf+0x10>
   10266:	6858      	ldr	r0, [r3, #4]
   10268:	3000      	adds	r0, #0
   1026a:	bf18      	it	ne
   1026c:	2001      	movne	r0, #1
   1026e:	4770      	bx	lr
        return true;
    else
        return false;
   10270:	2000      	movs	r0, #0
}
   10272:	4770      	bx	lr

00010274 <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
   10274:	b510      	push	{r4, lr}
   10276:	4604      	mov	r4, r0
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
   10278:	4b08      	ldr	r3, [pc, #32]	; (1029c <lv_disp_is_true_double_buf+0x28>)
   1027a:	4798      	blx	r3
   1027c:	4603      	mov	r3, r0
   1027e:	b158      	cbz	r0, 10298 <lv_disp_is_true_double_buf+0x24>
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
   10280:	f9b4 2000 	ldrsh.w	r2, [r4]
   10284:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   10288:	fb03 f302 	mul.w	r3, r3, r2
    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
   1028c:	6862      	ldr	r2, [r4, #4]
   1028e:	68d2      	ldr	r2, [r2, #12]
   10290:	4293      	cmp	r3, r2
   10292:	bf14      	ite	ne
   10294:	2300      	movne	r3, #0
   10296:	2301      	moveq	r3, #1
        return true;
    }
    else {
        return false;
    }
}
   10298:	4618      	mov	r0, r3
   1029a:	bd10      	pop	{r4, pc}
   1029c:	00010261 	.word	0x00010261

000102a0 <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
   102a0:	b508      	push	{r3, lr}
    if(indev == NULL)
   102a2:	b120      	cbz	r0, 102ae <lv_indev_get_next+0xe>
   102a4:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
   102a6:	4804      	ldr	r0, [pc, #16]	; (102b8 <lv_indev_get_next+0x18>)
   102a8:	4b04      	ldr	r3, [pc, #16]	; (102bc <lv_indev_get_next+0x1c>)
   102aa:	4798      	blx	r3
}
   102ac:	bd08      	pop	{r3, pc}
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
   102ae:	4802      	ldr	r0, [pc, #8]	; (102b8 <lv_indev_get_next+0x18>)
   102b0:	4b03      	ldr	r3, [pc, #12]	; (102c0 <lv_indev_get_next+0x20>)
   102b2:	4798      	blx	r3
   102b4:	bd08      	pop	{r3, pc}
   102b6:	bf00      	nop
   102b8:	2000aca0 	.word	0x2000aca0
   102bc:	0001119d 	.word	0x0001119d
   102c0:	00011189 	.word	0x00011189

000102c4 <lv_tick_inc>:
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
    tick_irq_flag = 0;
   102c4:	4b03      	ldr	r3, [pc, #12]	; (102d4 <lv_tick_inc+0x10>)
   102c6:	2200      	movs	r2, #0
   102c8:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
   102ca:	685a      	ldr	r2, [r3, #4]
   102cc:	4410      	add	r0, r2
   102ce:	6058      	str	r0, [r3, #4]
   102d0:	4770      	bx	lr
   102d2:	bf00      	nop
   102d4:	20002b74 	.word	0x20002b74

000102d8 <lv_tick_get>:
uint32_t lv_tick_get(void)
{
#if LV_TICK_CUSTOM == 0
    uint32_t result;
    do {
        tick_irq_flag = 1;
   102d8:	4b04      	ldr	r3, [pc, #16]	; (102ec <lv_tick_get+0x14>)
   102da:	f04f 0101 	mov.w	r1, #1
   102de:	7019      	strb	r1, [r3, #0]
        result        = sys_time;
    } while(!tick_irq_flag); /*'lv_tick_inc()' clears this flag which can be in an interrupt.
   102e0:	781a      	ldrb	r2, [r3, #0]
   102e2:	2a00      	cmp	r2, #0
   102e4:	d0fb      	beq.n	102de <lv_tick_get+0x6>

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
   102e6:	4b01      	ldr	r3, [pc, #4]	; (102ec <lv_tick_get+0x14>)
   102e8:	6858      	ldr	r0, [r3, #4]
   102ea:	4770      	bx	lr
   102ec:	20002b74 	.word	0x20002b74

000102f0 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of systick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
   102f0:	b510      	push	{r4, lr}
   102f2:	4604      	mov	r4, r0
    uint32_t act_time = lv_tick_get();
   102f4:	4b01      	ldr	r3, [pc, #4]	; (102fc <lv_tick_elaps+0xc>)
   102f6:	4798      	blx	r3
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
   102f8:	1b00      	subs	r0, r0, r4
   102fa:	bd10      	pop	{r4, pc}
   102fc:	000102d9 	.word	0x000102d9

00010300 <lv_anim_path_linear>:
 */
lv_anim_value_t lv_anim_path_linear(const lv_anim_path_t * path, const lv_anim_t * a)
{
    /*Calculate the current step*/
    uint32_t step;
    if(a->time == a->act_time) {
   10300:	6a0a      	ldr	r2, [r1, #32]
   10302:	6a48      	ldr	r0, [r1, #36]	; 0x24
   10304:	4282      	cmp	r2, r0
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
    }
    else {
        step = ((int32_t)a->act_time * LV_ANIM_RESOLUTION) / a->time;
   10306:	bf1a      	itte	ne
   10308:	0280      	lslne	r0, r0, #10
   1030a:	fbb0 f0f2 	udivne	r0, r0, r2
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
   1030e:	f44f 6080 	moveq.w	r0, #1024	; 0x400
    }

    /* Get the new value which will be proportional to `step`
     * and the `start` and `end` values*/
    int32_t new_value;
    new_value = (int32_t)step * (a->end - a->start);
   10312:	698a      	ldr	r2, [r1, #24]
   10314:	69cb      	ldr	r3, [r1, #28]
   10316:	1a9b      	subs	r3, r3, r2
   10318:	fb00 f003 	mul.w	r0, r0, r3
    new_value = new_value >> LV_ANIM_RES_SHIFT;
    new_value += a->start;
   1031c:	eb02 20a0 	add.w	r0, r2, r0, asr #10

    return (lv_anim_value_t)new_value;
}
   10320:	b200      	sxth	r0, r0
   10322:	4770      	bx	lr

00010324 <anim_mark_list_change>:
    }

    return anim_list_changed;
}
static void anim_mark_list_change(void)
{
   10324:	b508      	push	{r3, lr}
    anim_list_changed = true;
   10326:	2201      	movs	r2, #1
   10328:	4b08      	ldr	r3, [pc, #32]	; (1034c <anim_mark_list_change+0x28>)
   1032a:	701a      	strb	r2, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
   1032c:	4808      	ldr	r0, [pc, #32]	; (10350 <anim_mark_list_change+0x2c>)
   1032e:	4b09      	ldr	r3, [pc, #36]	; (10354 <anim_mark_list_change+0x30>)
   10330:	4798      	blx	r3
   10332:	b128      	cbz	r0, 10340 <anim_mark_list_change+0x1c>
        lv_task_set_prio(_lv_anim_task, LV_TASK_PRIO_OFF);
    else
        lv_task_set_prio(_lv_anim_task, LV_ANIM_TASK_PRIO);
   10334:	2104      	movs	r1, #4
   10336:	4b05      	ldr	r3, [pc, #20]	; (1034c <anim_mark_list_change+0x28>)
   10338:	6858      	ldr	r0, [r3, #4]
   1033a:	4b07      	ldr	r3, [pc, #28]	; (10358 <anim_mark_list_change+0x34>)
   1033c:	4798      	blx	r3
   1033e:	bd08      	pop	{r3, pc}
        lv_task_set_prio(_lv_anim_task, LV_TASK_PRIO_OFF);
   10340:	2100      	movs	r1, #0
   10342:	4b02      	ldr	r3, [pc, #8]	; (1034c <anim_mark_list_change+0x28>)
   10344:	6858      	ldr	r0, [r3, #4]
   10346:	4b04      	ldr	r3, [pc, #16]	; (10358 <anim_mark_list_change+0x34>)
   10348:	4798      	blx	r3
   1034a:	bd08      	pop	{r3, pc}
   1034c:	20002b7c 	.word	0x20002b7c
   10350:	2000ad68 	.word	0x2000ad68
   10354:	00011189 	.word	0x00011189
   10358:	000120bd 	.word	0x000120bd

0001035c <anim_task>:
{
   1035c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10360:	b091      	sub	sp, #68	; 0x44
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
   10362:	4863      	ldr	r0, [pc, #396]	; (104f0 <anim_task+0x194>)
   10364:	4b63      	ldr	r3, [pc, #396]	; (104f4 <anim_task+0x198>)
   10366:	4798      	blx	r3
   10368:	b168      	cbz	r0, 10386 <anim_task+0x2a>
   1036a:	4601      	mov	r1, r0
   1036c:	4d60      	ldr	r5, [pc, #384]	; (104f0 <anim_task+0x194>)
   1036e:	4c62      	ldr	r4, [pc, #392]	; (104f8 <anim_task+0x19c>)
        a->has_run = 0;
   10370:	f891 303c 	ldrb.w	r3, [r1, #60]	; 0x3c
   10374:	f36f 0341 	bfc	r3, #1, #1
   10378:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
   1037c:	4628      	mov	r0, r5
   1037e:	47a0      	blx	r4
   10380:	4601      	mov	r1, r0
   10382:	2800      	cmp	r0, #0
   10384:	d1f4      	bne.n	10370 <anim_task+0x14>
    uint32_t elaps = lv_tick_elaps(last_task_run);
   10386:	4b5d      	ldr	r3, [pc, #372]	; (104fc <anim_task+0x1a0>)
   10388:	6898      	ldr	r0, [r3, #8]
   1038a:	4b5d      	ldr	r3, [pc, #372]	; (10500 <anim_task+0x1a4>)
   1038c:	4798      	blx	r3
   1038e:	4680      	mov	r8, r0
    a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
   10390:	4857      	ldr	r0, [pc, #348]	; (104f0 <anim_task+0x194>)
   10392:	4b58      	ldr	r3, [pc, #352]	; (104f4 <anim_task+0x198>)
   10394:	4798      	blx	r3
    while(a != NULL) {
   10396:	4604      	mov	r4, r0
   10398:	2800      	cmp	r0, #0
   1039a:	f000 8089 	beq.w	104b0 <anim_task+0x154>
        anim_list_changed = false;
   1039e:	4d57      	ldr	r5, [pc, #348]	; (104fc <anim_task+0x1a0>)
   103a0:	f04f 0700 	mov.w	r7, #0
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
   103a4:	4e52      	ldr	r6, [pc, #328]	; (104f0 <anim_task+0x194>)
   103a6:	f8df 914c 	ldr.w	r9, [pc, #332]	; 104f4 <anim_task+0x198>
   103aa:	e01c      	b.n	103e6 <anim_task+0x8a>
            int32_t new_act_time = a->act_time + elaps;
   103ac:	4443      	add	r3, r8
            if(a->act_time <= 0 && new_act_time >= 0) {
   103ae:	2b00      	cmp	r3, #0
   103b0:	f2c0 8085 	blt.w	104be <anim_task+0x162>
                if(a->start_cb) a->start_cb(a);
   103b4:	68a2      	ldr	r2, [r4, #8]
   103b6:	2a00      	cmp	r2, #0
   103b8:	f000 8088 	beq.w	104cc <anim_task+0x170>
   103bc:	4620      	mov	r0, r4
   103be:	4790      	blx	r2
   103c0:	e01e      	b.n	10400 <anim_task+0xa4>
                else new_value = lv_anim_path_linear(&a->path, a);
   103c2:	4621      	mov	r1, r4
   103c4:	f104 0010 	add.w	r0, r4, #16
   103c8:	4b4e      	ldr	r3, [pc, #312]	; (10504 <anim_task+0x1a8>)
   103ca:	4798      	blx	r3
   103cc:	e028      	b.n	10420 <anim_task+0xc4>
                if(a->act_time >= a->time) {
   103ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
   103d0:	6a23      	ldr	r3, [r4, #32]
   103d2:	429a      	cmp	r2, r3
   103d4:	d22b      	bcs.n	1042e <anim_task+0xd2>
        if(anim_list_changed)
   103d6:	782b      	ldrb	r3, [r5, #0]
   103d8:	2b00      	cmp	r3, #0
   103da:	d071      	beq.n	104c0 <anim_task+0x164>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
   103dc:	4630      	mov	r0, r6
   103de:	47c8      	blx	r9
   103e0:	4604      	mov	r4, r0
    while(a != NULL) {
   103e2:	2c00      	cmp	r4, #0
   103e4:	d064      	beq.n	104b0 <anim_task+0x154>
        anim_list_changed = false;
   103e6:	702f      	strb	r7, [r5, #0]
        if(!a->has_run) {
   103e8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   103ec:	f013 0f02 	tst.w	r3, #2
   103f0:	d166      	bne.n	104c0 <anim_task+0x164>
            a->has_run = 1; /*The list readying might be reseted so need to know which anim has run already*/
   103f2:	f043 0302 	orr.w	r3, r3, #2
   103f6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
            int32_t new_act_time = a->act_time + elaps;
   103fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
            if(a->act_time <= 0 && new_act_time >= 0) {
   103fc:	2b00      	cmp	r3, #0
   103fe:	ddd5      	ble.n	103ac <anim_task+0x50>
            a->act_time += elaps;
   10400:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10402:	4443      	add	r3, r8
   10404:	6263      	str	r3, [r4, #36]	; 0x24
            if(a->act_time >= 0) {
   10406:	2b00      	cmp	r3, #0
   10408:	dbe5      	blt.n	103d6 <anim_task+0x7a>
                if(a->act_time > a->time) a->act_time = a->time;
   1040a:	6a22      	ldr	r2, [r4, #32]
   1040c:	429a      	cmp	r2, r3
   1040e:	bf38      	it	cc
   10410:	6262      	strcc	r2, [r4, #36]	; 0x24
                if(a->path.cb) new_value = a->path.cb(&a->path, a);
   10412:	6923      	ldr	r3, [r4, #16]
   10414:	2b00      	cmp	r3, #0
   10416:	d0d4      	beq.n	103c2 <anim_task+0x66>
   10418:	4621      	mov	r1, r4
   1041a:	f104 0010 	add.w	r0, r4, #16
   1041e:	4798      	blx	r3
                if(a->exec_cb) a->exec_cb(a->var, new_value);
   10420:	6863      	ldr	r3, [r4, #4]
   10422:	2b00      	cmp	r3, #0
   10424:	d0d3      	beq.n	103ce <anim_task+0x72>
   10426:	b201      	sxth	r1, r0
   10428:	6820      	ldr	r0, [r4, #0]
   1042a:	4798      	blx	r3
   1042c:	e7cf      	b.n	103ce <anim_task+0x72>
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
   1042e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   10432:	f013 0301 	ands.w	r3, r3, #1
   10436:	d108      	bne.n	1044a <anim_task+0xee>
   10438:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   1043a:	2a00      	cmp	r2, #0
   1043c:	d048      	beq.n	104d0 <anim_task+0x174>
   1043e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10442:	428a      	cmp	r2, r1
   10444:	d04b      	beq.n	104de <anim_task+0x182>
        a->repeat_cnt--;
   10446:	3a01      	subs	r2, #1
   10448:	86a2      	strh	r2, [r4, #52]	; 0x34
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
   1044a:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   1044c:	b1ca      	cbz	r2, 10482 <anim_task+0x126>
        a->act_time = -a->repeat_delay; /*Restart the animation*/
   1044e:	6b22      	ldr	r2, [r4, #48]	; 0x30
   10450:	4252      	negs	r2, r2
   10452:	6262      	str	r2, [r4, #36]	; 0x24
        if(a->playback_time != 0) {
   10454:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   10456:	2a00      	cmp	r2, #0
   10458:	d0bd      	beq.n	103d6 <anim_task+0x7a>
            if(a->playback_now == 0) a->act_time = -a->playback_delay;
   1045a:	2b00      	cmp	r3, #0
   1045c:	d03b      	beq.n	104d6 <anim_task+0x17a>
            a->playback_now = a->playback_now == 0 ? 1 : 0;
   1045e:	f083 0301 	eor.w	r3, r3, #1
   10462:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
   10466:	f363 0100 	bfi	r1, r3, #0, #1
   1046a:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
            tmp      = a->start;
   1046e:	69a3      	ldr	r3, [r4, #24]
            a->start = a->end;
   10470:	69e0      	ldr	r0, [r4, #28]
   10472:	61a0      	str	r0, [r4, #24]
            a->end   = tmp;
   10474:	61e3      	str	r3, [r4, #28]
            a->time = a->playback_now == 0 ? a->time_orig : a->playback_time;
   10476:	f011 0f01 	tst.w	r1, #1
   1047a:	bf08      	it	eq
   1047c:	6ba2      	ldreq	r2, [r4, #56]	; 0x38
   1047e:	6222      	str	r2, [r4, #32]
   10480:	e7a9      	b.n	103d6 <anim_task+0x7a>
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
   10482:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   10484:	b102      	cbz	r2, 10488 <anim_task+0x12c>
   10486:	b333      	cbz	r3, 104d6 <anim_task+0x17a>
        _lv_memcpy(&a_tmp, a, sizeof(lv_anim_t));
   10488:	2240      	movs	r2, #64	; 0x40
   1048a:	4621      	mov	r1, r4
   1048c:	4668      	mov	r0, sp
   1048e:	4b1e      	ldr	r3, [pc, #120]	; (10508 <anim_task+0x1ac>)
   10490:	4798      	blx	r3
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
   10492:	4621      	mov	r1, r4
   10494:	4630      	mov	r0, r6
   10496:	4b1d      	ldr	r3, [pc, #116]	; (1050c <anim_task+0x1b0>)
   10498:	4798      	blx	r3
        lv_mem_free(a);
   1049a:	4620      	mov	r0, r4
   1049c:	4b1c      	ldr	r3, [pc, #112]	; (10510 <anim_task+0x1b4>)
   1049e:	4798      	blx	r3
        anim_mark_list_change();
   104a0:	4b1c      	ldr	r3, [pc, #112]	; (10514 <anim_task+0x1b8>)
   104a2:	4798      	blx	r3
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
   104a4:	9b03      	ldr	r3, [sp, #12]
   104a6:	2b00      	cmp	r3, #0
   104a8:	d095      	beq.n	103d6 <anim_task+0x7a>
   104aa:	4668      	mov	r0, sp
   104ac:	4798      	blx	r3
   104ae:	e792      	b.n	103d6 <anim_task+0x7a>
    last_task_run = lv_tick_get();
   104b0:	4b19      	ldr	r3, [pc, #100]	; (10518 <anim_task+0x1bc>)
   104b2:	4798      	blx	r3
   104b4:	4b11      	ldr	r3, [pc, #68]	; (104fc <anim_task+0x1a0>)
   104b6:	6098      	str	r0, [r3, #8]
}
   104b8:	b011      	add	sp, #68	; 0x44
   104ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            a->act_time += elaps;
   104be:	6263      	str	r3, [r4, #36]	; 0x24
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
   104c0:	4621      	mov	r1, r4
   104c2:	4630      	mov	r0, r6
   104c4:	4b0c      	ldr	r3, [pc, #48]	; (104f8 <anim_task+0x19c>)
   104c6:	4798      	blx	r3
   104c8:	4604      	mov	r4, r0
   104ca:	e78a      	b.n	103e2 <anim_task+0x86>
            a->act_time += elaps;
   104cc:	6263      	str	r3, [r4, #36]	; 0x24
   104ce:	e79c      	b.n	1040a <anim_task+0xae>
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
   104d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   104d2:	2a00      	cmp	r2, #0
   104d4:	d0d8      	beq.n	10488 <anim_task+0x12c>
            if(a->playback_now == 0) a->act_time = -a->playback_delay;
   104d6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   104d8:	4249      	negs	r1, r1
   104da:	6261      	str	r1, [r4, #36]	; 0x24
   104dc:	e7bf      	b.n	1045e <anim_task+0x102>
        a->act_time = -a->repeat_delay; /*Restart the animation*/
   104de:	6b22      	ldr	r2, [r4, #48]	; 0x30
   104e0:	4252      	negs	r2, r2
   104e2:	6262      	str	r2, [r4, #36]	; 0x24
        if(a->playback_time != 0) {
   104e4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   104e6:	2a00      	cmp	r2, #0
   104e8:	f43f af75 	beq.w	103d6 <anim_task+0x7a>
   104ec:	e7f3      	b.n	104d6 <anim_task+0x17a>
   104ee:	bf00      	nop
   104f0:	2000ad68 	.word	0x2000ad68
   104f4:	00011189 	.word	0x00011189
   104f8:	0001119d 	.word	0x0001119d
   104fc:	20002b7c 	.word	0x20002b7c
   10500:	000102f1 	.word	0x000102f1
   10504:	00010301 	.word	0x00010301
   10508:	000117a5 	.word	0x000117a5
   1050c:	00011275 	.word	0x00011275
   10510:	00011639 	.word	0x00011639
   10514:	00010325 	.word	0x00010325
   10518:	000102d9 	.word	0x000102d9

0001051c <_lv_anim_core_init>:
{
   1051c:	b538      	push	{r3, r4, r5, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
   1051e:	2140      	movs	r1, #64	; 0x40
   10520:	4809      	ldr	r0, [pc, #36]	; (10548 <_lv_anim_core_init+0x2c>)
   10522:	4b0a      	ldr	r3, [pc, #40]	; (1054c <_lv_anim_core_init+0x30>)
   10524:	4798      	blx	r3
    last_task_run = lv_tick_get();
   10526:	4b0a      	ldr	r3, [pc, #40]	; (10550 <_lv_anim_core_init+0x34>)
   10528:	4798      	blx	r3
   1052a:	4c0a      	ldr	r4, [pc, #40]	; (10554 <_lv_anim_core_init+0x38>)
   1052c:	60a0      	str	r0, [r4, #8]
    _lv_anim_task = lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_ANIM_TASK_PRIO, NULL);
   1052e:	2300      	movs	r3, #0
   10530:	2204      	movs	r2, #4
   10532:	211e      	movs	r1, #30
   10534:	4808      	ldr	r0, [pc, #32]	; (10558 <_lv_anim_core_init+0x3c>)
   10536:	4d09      	ldr	r5, [pc, #36]	; (1055c <_lv_anim_core_init+0x40>)
   10538:	47a8      	blx	r5
   1053a:	6060      	str	r0, [r4, #4]
    anim_mark_list_change(); /*Turn off the animation task*/
   1053c:	4b08      	ldr	r3, [pc, #32]	; (10560 <_lv_anim_core_init+0x44>)
   1053e:	4798      	blx	r3
    anim_list_changed = false; /*The list has not actaully changed*/
   10540:	2300      	movs	r3, #0
   10542:	7023      	strb	r3, [r4, #0]
   10544:	bd38      	pop	{r3, r4, r5, pc}
   10546:	bf00      	nop
   10548:	2000ad68 	.word	0x2000ad68
   1054c:	000110d9 	.word	0x000110d9
   10550:	000102d9 	.word	0x000102d9
   10554:	20002b7c 	.word	0x20002b7c
   10558:	0001035d 	.word	0x0001035d
   1055c:	00012149 	.word	0x00012149
   10560:	00010325 	.word	0x00010325

00010564 <lv_anim_init>:
{
   10564:	b510      	push	{r4, lr}
   10566:	4604      	mov	r4, r0
    _lv_memset_00(a, sizeof(lv_anim_t));
   10568:	2140      	movs	r1, #64	; 0x40
   1056a:	4b0d      	ldr	r3, [pc, #52]	; (105a0 <lv_anim_init+0x3c>)
   1056c:	4798      	blx	r3
    a->time    = 500;
   1056e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   10572:	6223      	str	r3, [r4, #32]
    a->start   = 0;
   10574:	2300      	movs	r3, #0
   10576:	61a3      	str	r3, [r4, #24]
    a->end     = 100;
   10578:	2364      	movs	r3, #100	; 0x64
   1057a:	61e3      	str	r3, [r4, #28]
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
   1057c:	4b09      	ldr	r3, [pc, #36]	; (105a4 <lv_anim_init+0x40>)
   1057e:	781a      	ldrb	r2, [r3, #0]
   10580:	7422      	strb	r2, [r4, #16]
   10582:	785a      	ldrb	r2, [r3, #1]
   10584:	7462      	strb	r2, [r4, #17]
   10586:	789a      	ldrb	r2, [r3, #2]
   10588:	74a2      	strb	r2, [r4, #18]
   1058a:	78db      	ldrb	r3, [r3, #3]
   1058c:	74e3      	strb	r3, [r4, #19]
    a->repeat_cnt = 1;
   1058e:	2301      	movs	r3, #1
   10590:	86a3      	strh	r3, [r4, #52]	; 0x34
    a->early_apply = 1;
   10592:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   10596:	f043 0301 	orr.w	r3, r3, #1
   1059a:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   1059e:	bd10      	pop	{r4, pc}
   105a0:	00011c17 	.word	0x00011c17
   105a4:	0001b6b8 	.word	0x0001b6b8

000105a8 <lv_anim_del>:
{
   105a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   105ac:	4607      	mov	r7, r0
   105ae:	4689      	mov	r9, r1
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
   105b0:	4815      	ldr	r0, [pc, #84]	; (10608 <lv_anim_del+0x60>)
   105b2:	4b16      	ldr	r3, [pc, #88]	; (1060c <lv_anim_del+0x64>)
   105b4:	4798      	blx	r3
    while(a != NULL) {
   105b6:	b310      	cbz	r0, 105fe <lv_anim_del+0x56>
   105b8:	4604      	mov	r4, r0
   105ba:	f04f 0a00 	mov.w	sl, #0
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
   105be:	f8df 8048 	ldr.w	r8, [pc, #72]	; 10608 <lv_anim_del+0x60>
   105c2:	4e13      	ldr	r6, [pc, #76]	; (10610 <lv_anim_del+0x68>)
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
   105c4:	f8df b054 	ldr.w	fp, [pc, #84]	; 1061c <lv_anim_del+0x74>
   105c8:	e00b      	b.n	105e2 <lv_anim_del+0x3a>
   105ca:	4621      	mov	r1, r4
   105cc:	4640      	mov	r0, r8
   105ce:	47d8      	blx	fp
            lv_mem_free(a);
   105d0:	4620      	mov	r0, r4
   105d2:	4b10      	ldr	r3, [pc, #64]	; (10614 <lv_anim_del+0x6c>)
   105d4:	4798      	blx	r3
            anim_mark_list_change(); /*Read by `anim_task`. It need to know if a delete occurred in
   105d6:	4b10      	ldr	r3, [pc, #64]	; (10618 <lv_anim_del+0x70>)
   105d8:	4798      	blx	r3
            del = true;
   105da:	f04f 0a01 	mov.w	sl, #1
   105de:	462c      	mov	r4, r5
    while(a != NULL) {
   105e0:	b17d      	cbz	r5, 10602 <lv_anim_del+0x5a>
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
   105e2:	4621      	mov	r1, r4
   105e4:	4640      	mov	r0, r8
   105e6:	47b0      	blx	r6
   105e8:	4605      	mov	r5, r0
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
   105ea:	6823      	ldr	r3, [r4, #0]
   105ec:	42bb      	cmp	r3, r7
   105ee:	d1f6      	bne.n	105de <lv_anim_del+0x36>
   105f0:	6863      	ldr	r3, [r4, #4]
   105f2:	454b      	cmp	r3, r9
   105f4:	d0e9      	beq.n	105ca <lv_anim_del+0x22>
   105f6:	f1b9 0f00 	cmp.w	r9, #0
   105fa:	d1f0      	bne.n	105de <lv_anim_del+0x36>
   105fc:	e7e5      	b.n	105ca <lv_anim_del+0x22>
    bool del = false;
   105fe:	f04f 0a00 	mov.w	sl, #0
}
   10602:	4650      	mov	r0, sl
   10604:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10608:	2000ad68 	.word	0x2000ad68
   1060c:	00011189 	.word	0x00011189
   10610:	0001119d 	.word	0x0001119d
   10614:	00011639 	.word	0x00011639
   10618:	00010325 	.word	0x00010325
   1061c:	00011275 	.word	0x00011275

00010620 <lv_anim_start>:
{
   10620:	b538      	push	{r3, r4, r5, lr}
   10622:	4605      	mov	r5, r0
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
   10624:	6841      	ldr	r1, [r0, #4]
   10626:	b111      	cbz	r1, 1062e <lv_anim_start+0xe>
   10628:	6800      	ldr	r0, [r0, #0]
   1062a:	4b18      	ldr	r3, [pc, #96]	; (1068c <lv_anim_start+0x6c>)
   1062c:	4798      	blx	r3
    if(_lv_ll_is_empty(&LV_GC_ROOT(_lv_anim_ll))) {
   1062e:	4818      	ldr	r0, [pc, #96]	; (10690 <lv_anim_start+0x70>)
   10630:	4b18      	ldr	r3, [pc, #96]	; (10694 <lv_anim_start+0x74>)
   10632:	4798      	blx	r3
   10634:	b9e8      	cbnz	r0, 10672 <lv_anim_start+0x52>
    lv_anim_t * new_anim = _lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
   10636:	4816      	ldr	r0, [pc, #88]	; (10690 <lv_anim_start+0x70>)
   10638:	4b17      	ldr	r3, [pc, #92]	; (10698 <lv_anim_start+0x78>)
   1063a:	4798      	blx	r3
   1063c:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_anim);
   1063e:	4b17      	ldr	r3, [pc, #92]	; (1069c <lv_anim_start+0x7c>)
   10640:	4798      	blx	r3
   10642:	b1e0      	cbz	r0, 1067e <lv_anim_start+0x5e>
    if(new_anim == NULL) return;
   10644:	b1a4      	cbz	r4, 10670 <lv_anim_start+0x50>
    a->time_orig = a->time;
   10646:	6a2b      	ldr	r3, [r5, #32]
   10648:	63ab      	str	r3, [r5, #56]	; 0x38
    _lv_memcpy(new_anim, a, sizeof(lv_anim_t));
   1064a:	2240      	movs	r2, #64	; 0x40
   1064c:	4629      	mov	r1, r5
   1064e:	4620      	mov	r0, r4
   10650:	4b13      	ldr	r3, [pc, #76]	; (106a0 <lv_anim_start+0x80>)
   10652:	4798      	blx	r3
    if(new_anim->early_apply) {
   10654:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   10658:	f013 0f01 	tst.w	r3, #1
   1065c:	d006      	beq.n	1066c <lv_anim_start+0x4c>
        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start);
   1065e:	6863      	ldr	r3, [r4, #4]
   10660:	b123      	cbz	r3, 1066c <lv_anim_start+0x4c>
   10662:	6820      	ldr	r0, [r4, #0]
   10664:	b110      	cbz	r0, 1066c <lv_anim_start+0x4c>
   10666:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
   1066a:	4798      	blx	r3
    anim_mark_list_change();
   1066c:	4b0d      	ldr	r3, [pc, #52]	; (106a4 <lv_anim_start+0x84>)
   1066e:	4798      	blx	r3
   10670:	bd38      	pop	{r3, r4, r5, pc}
        last_task_run = lv_tick_get() - 1;
   10672:	4b0d      	ldr	r3, [pc, #52]	; (106a8 <lv_anim_start+0x88>)
   10674:	4798      	blx	r3
   10676:	3801      	subs	r0, #1
   10678:	4b0c      	ldr	r3, [pc, #48]	; (106ac <lv_anim_start+0x8c>)
   1067a:	6098      	str	r0, [r3, #8]
   1067c:	e7db      	b.n	10636 <lv_anim_start+0x16>
    LV_ASSERT_MEM(new_anim);
   1067e:	4622      	mov	r2, r4
   10680:	2300      	movs	r3, #0
   10682:	480b      	ldr	r0, [pc, #44]	; (106b0 <lv_anim_start+0x90>)
   10684:	490b      	ldr	r1, [pc, #44]	; (106b4 <lv_anim_start+0x94>)
   10686:	4788      	blx	r1
   10688:	e7fe      	b.n	10688 <lv_anim_start+0x68>
   1068a:	bf00      	nop
   1068c:	000105a9 	.word	0x000105a9
   10690:	2000ad68 	.word	0x2000ad68
   10694:	00011425 	.word	0x00011425
   10698:	000110f1 	.word	0x000110f1
   1069c:	0000295d 	.word	0x0000295d
   106a0:	000117a5 	.word	0x000117a5
   106a4:	00010325 	.word	0x00010325
   106a8:	000102d9 	.word	0x000102d9
   106ac:	20002b7c 	.word	0x20002b7c
   106b0:	0001786c 	.word	0x0001786c
   106b4:	00002965 	.word	0x00002965

000106b8 <lv_point_within_circle>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
{
   106b8:	b430      	push	{r4, r5}
    lv_coord_t r = (area->x2 - area->x1) / 2;
   106ba:	f9b0 5000 	ldrsh.w	r5, [r0]
   106be:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   106c2:	1b5b      	subs	r3, r3, r5
   106c4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   106c8:	105b      	asrs	r3, r3, #1

    /* Circle center */
    lv_coord_t cx = area->x1 + r;
   106ca:	b29c      	uxth	r4, r3
    lv_coord_t cy = area->y1 + r;

    /*Simplify the code by moving everything to (0, 0) */
    lv_coord_t px = p->x - cx;
   106cc:	880a      	ldrh	r2, [r1, #0]
   106ce:	1b52      	subs	r2, r2, r5
   106d0:	1b12      	subs	r2, r2, r4
    lv_coord_t py = p->y - cy;
   106d2:	8849      	ldrh	r1, [r1, #2]
   106d4:	8840      	ldrh	r0, [r0, #2]
   106d6:	1a08      	subs	r0, r1, r0
   106d8:	1b00      	subs	r0, r0, r4

    int32_t r_sqrd = r * r;
   106da:	fb13 f303 	smulbb	r3, r3, r3
    int32_t dist = (px * px) + (py * py);
   106de:	fb10 f000 	smulbb	r0, r0, r0
   106e2:	fb12 0202 	smlabb	r2, r2, r2, r0

    if(dist <= r_sqrd)
        return true;
    else
        return false;
}
   106e6:	4293      	cmp	r3, r2
   106e8:	bfb4      	ite	lt
   106ea:	2000      	movlt	r0, #0
   106ec:	2001      	movge	r0, #1
   106ee:	bc30      	pop	{r4, r5}
   106f0:	4770      	bx	lr

000106f2 <lv_area_set_height>:
    area_p->y2 = area_p->y1 + h - 1;
   106f2:	3901      	subs	r1, #1
   106f4:	8843      	ldrh	r3, [r0, #2]
   106f6:	4419      	add	r1, r3
   106f8:	80c1      	strh	r1, [r0, #6]
   106fa:	4770      	bx	lr

000106fc <lv_area_get_size>:
    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
   106fc:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   10700:	f9b0 3000 	ldrsh.w	r3, [r0]
   10704:	1ad2      	subs	r2, r2, r3
   10706:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   1070a:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
   1070e:	1a18      	subs	r0, r3, r0
   10710:	3001      	adds	r0, #1
}
   10712:	fb02 0000 	mla	r0, r2, r0, r0
   10716:	4770      	bx	lr

00010718 <_lv_area_intersect>:
{
   10718:	b470      	push	{r4, r5, r6}
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
   1071a:	f9b2 5000 	ldrsh.w	r5, [r2]
   1071e:	f9b1 3000 	ldrsh.w	r3, [r1]
   10722:	429d      	cmp	r5, r3
   10724:	bfb8      	it	lt
   10726:	461d      	movlt	r5, r3
   10728:	8005      	strh	r5, [r0, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
   1072a:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
   1072e:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
   10732:	42a3      	cmp	r3, r4
   10734:	bfb8      	it	lt
   10736:	4623      	movlt	r3, r4
   10738:	8043      	strh	r3, [r0, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
   1073a:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
   1073e:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
   10742:	42b4      	cmp	r4, r6
   10744:	bfa8      	it	ge
   10746:	4634      	movge	r4, r6
   10748:	8084      	strh	r4, [r0, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
   1074a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
   1074e:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
   10752:	428a      	cmp	r2, r1
   10754:	bfa8      	it	ge
   10756:	460a      	movge	r2, r1
   10758:	80c2      	strh	r2, [r0, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
   1075a:	42a5      	cmp	r5, r4
   1075c:	dc05      	bgt.n	1076a <_lv_area_intersect+0x52>
   1075e:	4293      	cmp	r3, r2
   10760:	bfcc      	ite	gt
   10762:	2000      	movgt	r0, #0
   10764:	2001      	movle	r0, #1
}
   10766:	bc70      	pop	{r4, r5, r6}
   10768:	4770      	bx	lr
        union_ok = false;
   1076a:	2000      	movs	r0, #0
   1076c:	e7fb      	b.n	10766 <_lv_area_intersect+0x4e>

0001076e <_lv_area_join>:
{
   1076e:	b410      	push	{r4}
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
   10770:	f9b2 3000 	ldrsh.w	r3, [r2]
   10774:	f9b1 4000 	ldrsh.w	r4, [r1]
   10778:	42a3      	cmp	r3, r4
   1077a:	bfa8      	it	ge
   1077c:	4623      	movge	r3, r4
   1077e:	8003      	strh	r3, [r0, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
   10780:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
   10784:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
   10788:	42a3      	cmp	r3, r4
   1078a:	bfa8      	it	ge
   1078c:	4623      	movge	r3, r4
   1078e:	8043      	strh	r3, [r0, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
   10790:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
   10794:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   10798:	42a3      	cmp	r3, r4
   1079a:	bfb8      	it	lt
   1079c:	4623      	movlt	r3, r4
   1079e:	8083      	strh	r3, [r0, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
   107a0:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
   107a4:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
   107a8:	4293      	cmp	r3, r2
   107aa:	bfb8      	it	lt
   107ac:	4613      	movlt	r3, r2
   107ae:	80c3      	strh	r3, [r0, #6]
}
   107b0:	f85d 4b04 	ldr.w	r4, [sp], #4
   107b4:	4770      	bx	lr
	...

000107b8 <_lv_area_is_point_on>:
{
   107b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   107bc:	b085      	sub	sp, #20
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
   107be:	f9b1 5000 	ldrsh.w	r5, [r1]
   107c2:	f9b0 e000 	ldrsh.w	lr, [r0]
   107c6:	4575      	cmp	r5, lr
   107c8:	f2c0 809d 	blt.w	10906 <_lv_area_is_point_on+0x14e>
   107cc:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
   107d0:	4545      	cmp	r5, r8
   107d2:	f300 809c 	bgt.w	1090e <_lv_area_is_point_on+0x156>
   107d6:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
   107da:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
   107de:	4553      	cmp	r3, sl
   107e0:	f2c0 8097 	blt.w	10912 <_lv_area_is_point_on+0x15a>
   107e4:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
   107e8:	9001      	str	r0, [sp, #4]
    if(!is_on_rect)
   107ea:	4283      	cmp	r3, r0
   107ec:	f300 8093 	bgt.w	10916 <_lv_area_is_point_on+0x15e>
    if(radius <= 0) {
   107f0:	2a00      	cmp	r2, #0
   107f2:	f340 8092 	ble.w	1091a <_lv_area_is_point_on+0x162>
   107f6:	468c      	mov	ip, r1
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   107f8:	fa1f f988 	uxth.w	r9, r8
   107fc:	fa1f f68e 	uxth.w	r6, lr
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   10800:	b287      	uxth	r7, r0
   10802:	fa1f f58a 	uxth.w	r5, sl
    corner_area.x1 = a_p->x1;
   10806:	f8ad e008 	strh.w	lr, [sp, #8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1080a:	f109 0301 	add.w	r3, r9, #1
   1080e:	1b9b      	subs	r3, r3, r6
    lv_coord_t w = lv_area_get_width(a_p) / 2;
   10810:	b21b      	sxth	r3, r3
   10812:	eb03 74d3 	add.w	r4, r3, r3, lsr #31
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   10816:	1c7b      	adds	r3, r7, #1
   10818:	1b5b      	subs	r3, r3, r5
    lv_coord_t h = lv_area_get_height(a_p) / 2;
   1081a:	b21b      	sxth	r3, r3
   1081c:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
    lv_coord_t max_radius = LV_MATH_MIN(w, h);
   10820:	1064      	asrs	r4, r4, #1
   10822:	104b      	asrs	r3, r1, #1
    corner_area.x2 = a_p->x1 + radius;
   10824:	42a3      	cmp	r3, r4
   10826:	bfa8      	it	ge
   10828:	4623      	movge	r3, r4
   1082a:	4293      	cmp	r3, r2
   1082c:	bfa8      	it	ge
   1082e:	4613      	movge	r3, r2
   10830:	b29c      	uxth	r4, r3
   10832:	4426      	add	r6, r4
   10834:	b2b6      	uxth	r6, r6
   10836:	f8ad 600c 	strh.w	r6, [sp, #12]
    corner_area.y1 = a_p->y1;
   1083a:	f8ad a00a 	strh.w	sl, [sp, #10]
    corner_area.y2 = a_p->y1 + radius;
   1083e:	4425      	add	r5, r4
   10840:	b2ad      	uxth	r5, r5
   10842:	fa0f fb85 	sxth.w	fp, r5
   10846:	f8ad b00e 	strh.w	fp, [sp, #14]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   1084a:	2200      	movs	r2, #0
   1084c:	f8cd c000 	str.w	ip, [sp]
   10850:	4661      	mov	r1, ip
   10852:	a802      	add	r0, sp, #8
   10854:	f7ff ffb0 	bl	107b8 <_lv_area_is_point_on>
   10858:	b150      	cbz	r0, 10870 <_lv_area_is_point_on+0xb8>
        corner_area.x2 += radius;
   1085a:	4426      	add	r6, r4
   1085c:	f8ad 600c 	strh.w	r6, [sp, #12]
        corner_area.y2 += radius;
   10860:	442c      	add	r4, r5
   10862:	f8ad 400e 	strh.w	r4, [sp, #14]
        return lv_point_within_circle(&corner_area, p_p);
   10866:	9900      	ldr	r1, [sp, #0]
   10868:	a802      	add	r0, sp, #8
   1086a:	4b2e      	ldr	r3, [pc, #184]	; (10924 <_lv_area_is_point_on+0x16c>)
   1086c:	4798      	blx	r3
   1086e:	e04b      	b.n	10908 <_lv_area_is_point_on+0x150>
    corner_area.y1 = a_p->y2 - radius;
   10870:	1b3f      	subs	r7, r7, r4
   10872:	b2bf      	uxth	r7, r7
   10874:	f8ad 700a 	strh.w	r7, [sp, #10]
    corner_area.y2 = a_p->y2;
   10878:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1087c:	f8ad 300e 	strh.w	r3, [sp, #14]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   10880:	2200      	movs	r2, #0
   10882:	9900      	ldr	r1, [sp, #0]
   10884:	a802      	add	r0, sp, #8
   10886:	f7ff ff97 	bl	107b8 <_lv_area_is_point_on>
   1088a:	b150      	cbz	r0, 108a2 <_lv_area_is_point_on+0xea>
        corner_area.x2 += radius;
   1088c:	4426      	add	r6, r4
   1088e:	f8ad 600c 	strh.w	r6, [sp, #12]
        corner_area.y1 -= radius;
   10892:	1b3c      	subs	r4, r7, r4
   10894:	f8ad 400a 	strh.w	r4, [sp, #10]
        return lv_point_within_circle(&corner_area, p_p);
   10898:	9900      	ldr	r1, [sp, #0]
   1089a:	a802      	add	r0, sp, #8
   1089c:	4b21      	ldr	r3, [pc, #132]	; (10924 <_lv_area_is_point_on+0x16c>)
   1089e:	4798      	blx	r3
   108a0:	e032      	b.n	10908 <_lv_area_is_point_on+0x150>
    corner_area.x1 = a_p->x2 - radius;
   108a2:	eba9 0904 	sub.w	r9, r9, r4
   108a6:	fa1f f989 	uxth.w	r9, r9
   108aa:	f8ad 9008 	strh.w	r9, [sp, #8]
    corner_area.x2 = a_p->x2;
   108ae:	f8ad 800c 	strh.w	r8, [sp, #12]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   108b2:	2200      	movs	r2, #0
   108b4:	9e00      	ldr	r6, [sp, #0]
   108b6:	4631      	mov	r1, r6
   108b8:	a802      	add	r0, sp, #8
   108ba:	f7ff ff7d 	bl	107b8 <_lv_area_is_point_on>
   108be:	b158      	cbz	r0, 108d8 <_lv_area_is_point_on+0x120>
        corner_area.x1 -= radius;
   108c0:	eba9 0904 	sub.w	r9, r9, r4
   108c4:	f8ad 9008 	strh.w	r9, [sp, #8]
        corner_area.y1 -= radius;
   108c8:	1b3c      	subs	r4, r7, r4
   108ca:	f8ad 400a 	strh.w	r4, [sp, #10]
        return lv_point_within_circle(&corner_area, p_p);
   108ce:	4631      	mov	r1, r6
   108d0:	a802      	add	r0, sp, #8
   108d2:	4b14      	ldr	r3, [pc, #80]	; (10924 <_lv_area_is_point_on+0x16c>)
   108d4:	4798      	blx	r3
   108d6:	e017      	b.n	10908 <_lv_area_is_point_on+0x150>
    corner_area.y1 = a_p->y1;
   108d8:	f8ad a00a 	strh.w	sl, [sp, #10]
    corner_area.y2 = a_p->y1 + radius;
   108dc:	f8ad b00e 	strh.w	fp, [sp, #14]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   108e0:	2200      	movs	r2, #0
   108e2:	9e00      	ldr	r6, [sp, #0]
   108e4:	4631      	mov	r1, r6
   108e6:	a802      	add	r0, sp, #8
   108e8:	f7ff ff66 	bl	107b8 <_lv_area_is_point_on>
   108ec:	b1b8      	cbz	r0, 1091e <_lv_area_is_point_on+0x166>
        corner_area.x1 -= radius;
   108ee:	eba9 0904 	sub.w	r9, r9, r4
   108f2:	f8ad 9008 	strh.w	r9, [sp, #8]
        corner_area.y2 += radius;
   108f6:	442c      	add	r4, r5
   108f8:	f8ad 400e 	strh.w	r4, [sp, #14]
        return lv_point_within_circle(&corner_area, p_p);
   108fc:	4631      	mov	r1, r6
   108fe:	a802      	add	r0, sp, #8
   10900:	4b08      	ldr	r3, [pc, #32]	; (10924 <_lv_area_is_point_on+0x16c>)
   10902:	4798      	blx	r3
   10904:	e000      	b.n	10908 <_lv_area_is_point_on+0x150>
        return false;
   10906:	2000      	movs	r0, #0
}
   10908:	b005      	add	sp, #20
   1090a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return false;
   1090e:	2000      	movs	r0, #0
   10910:	e7fa      	b.n	10908 <_lv_area_is_point_on+0x150>
   10912:	2000      	movs	r0, #0
   10914:	e7f8      	b.n	10908 <_lv_area_is_point_on+0x150>
   10916:	2000      	movs	r0, #0
   10918:	e7f6      	b.n	10908 <_lv_area_is_point_on+0x150>
        return true;
   1091a:	2001      	movs	r0, #1
   1091c:	e7f4      	b.n	10908 <_lv_area_is_point_on+0x150>
    return true;
   1091e:	2001      	movs	r0, #1
   10920:	e7f2      	b.n	10908 <_lv_area_is_point_on+0x150>
   10922:	bf00      	nop
   10924:	000106b9 	.word	0x000106b9

00010928 <_lv_area_is_on>:
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
   10928:	f9b0 2000 	ldrsh.w	r2, [r0]
   1092c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   10930:	429a      	cmp	r2, r3
   10932:	dc14      	bgt.n	1095e <_lv_area_is_on+0x36>
   10934:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   10938:	f9b1 3000 	ldrsh.w	r3, [r1]
   1093c:	429a      	cmp	r2, r3
   1093e:	db10      	blt.n	10962 <_lv_area_is_on+0x3a>
   10940:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   10944:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
   10948:	429a      	cmp	r2, r3
   1094a:	dc0c      	bgt.n	10966 <_lv_area_is_on+0x3e>
   1094c:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
   10950:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
   10954:	4298      	cmp	r0, r3
   10956:	bfb4      	ite	lt
   10958:	2000      	movlt	r0, #0
   1095a:	2001      	movge	r0, #1
   1095c:	4770      	bx	lr
        return false;
   1095e:	2000      	movs	r0, #0
   10960:	4770      	bx	lr
   10962:	2000      	movs	r0, #0
   10964:	4770      	bx	lr
   10966:	2000      	movs	r0, #0
}
   10968:	4770      	bx	lr
	...

0001096c <_lv_area_is_in>:
{
   1096c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10970:	b082      	sub	sp, #8
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
   10972:	f9b0 5000 	ldrsh.w	r5, [r0]
   10976:	f9b1 3000 	ldrsh.w	r3, [r1]
   1097a:	42ab      	cmp	r3, r5
   1097c:	dc14      	bgt.n	109a8 <_lv_area_is_in+0x3c>
   1097e:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
   10982:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
   10986:	429c      	cmp	r4, r3
   10988:	db14      	blt.n	109b4 <_lv_area_is_in+0x48>
   1098a:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
   1098e:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   10992:	429c      	cmp	r4, r3
   10994:	dc10      	bgt.n	109b8 <_lv_area_is_in+0x4c>
   10996:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   1099a:	f9b1 4006 	ldrsh.w	r4, [r1, #6]
   1099e:	42a3      	cmp	r3, r4
   109a0:	bfcc      	ite	gt
   109a2:	2300      	movgt	r3, #0
   109a4:	2301      	movle	r3, #1
   109a6:	e000      	b.n	109aa <_lv_area_is_in+0x3e>
    bool is_in = false;
   109a8:	2300      	movs	r3, #0
    if(radius == 0) return is_in;
   109aa:	b93a      	cbnz	r2, 109bc <_lv_area_is_in+0x50>
}
   109ac:	4618      	mov	r0, r3
   109ae:	b002      	add	sp, #8
   109b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool is_in = false;
   109b4:	2300      	movs	r3, #0
   109b6:	e7f8      	b.n	109aa <_lv_area_is_in+0x3e>
   109b8:	2300      	movs	r3, #0
   109ba:	e7f6      	b.n	109aa <_lv_area_is_in+0x3e>
   109bc:	4617      	mov	r7, r2
   109be:	460c      	mov	r4, r1
   109c0:	4606      	mov	r6, r0
    p.x = ain_p->x1;
   109c2:	f8ad 5004 	strh.w	r5, [sp, #4]
    p.y = ain_p->y1;
   109c6:	8843      	ldrh	r3, [r0, #2]
   109c8:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   109cc:	a901      	add	r1, sp, #4
   109ce:	4620      	mov	r0, r4
   109d0:	4b13      	ldr	r3, [pc, #76]	; (10a20 <_lv_area_is_in+0xb4>)
   109d2:	4798      	blx	r3
   109d4:	4603      	mov	r3, r0
   109d6:	2800      	cmp	r0, #0
   109d8:	d0e8      	beq.n	109ac <_lv_area_is_in+0x40>
    p.x = ain_p->x2;
   109da:	f9b6 8004 	ldrsh.w	r8, [r6, #4]
   109de:	a902      	add	r1, sp, #8
   109e0:	f821 8d04 	strh.w	r8, [r1, #-4]!
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   109e4:	463a      	mov	r2, r7
   109e6:	4620      	mov	r0, r4
   109e8:	4b0d      	ldr	r3, [pc, #52]	; (10a20 <_lv_area_is_in+0xb4>)
   109ea:	4798      	blx	r3
   109ec:	4603      	mov	r3, r0
   109ee:	2800      	cmp	r0, #0
   109f0:	d0dc      	beq.n	109ac <_lv_area_is_in+0x40>
    p.x = ain_p->x1;
   109f2:	f8ad 5004 	strh.w	r5, [sp, #4]
    p.y = ain_p->y2;
   109f6:	88f3      	ldrh	r3, [r6, #6]
   109f8:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   109fc:	463a      	mov	r2, r7
   109fe:	a901      	add	r1, sp, #4
   10a00:	4620      	mov	r0, r4
   10a02:	4b07      	ldr	r3, [pc, #28]	; (10a20 <_lv_area_is_in+0xb4>)
   10a04:	4798      	blx	r3
   10a06:	4603      	mov	r3, r0
   10a08:	2800      	cmp	r0, #0
   10a0a:	d0cf      	beq.n	109ac <_lv_area_is_in+0x40>
    p.x = ain_p->x2;
   10a0c:	a902      	add	r1, sp, #8
   10a0e:	f821 8d04 	strh.w	r8, [r1, #-4]!
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   10a12:	463a      	mov	r2, r7
   10a14:	4620      	mov	r0, r4
   10a16:	4b02      	ldr	r3, [pc, #8]	; (10a20 <_lv_area_is_in+0xb4>)
   10a18:	4798      	blx	r3
   10a1a:	4603      	mov	r3, r0
   10a1c:	e7c6      	b.n	109ac <_lv_area_is_in+0x40>
   10a1e:	bf00      	nop
   10a20:	000107b9 	.word	0x000107b9

00010a24 <_lv_area_align>:
{
   10a24:	b430      	push	{r4, r5}
    switch(align) {
   10a26:	2a14      	cmp	r2, #20
   10a28:	d83a      	bhi.n	10aa0 <_lv_area_align+0x7c>
   10a2a:	e8df f012 	tbh	[pc, r2, lsl #1]
   10a2e:	0015      	.short	0x0015
   10a30:	00470043 	.word	0x00470043
   10a34:	0067005c 	.word	0x0067005c
   10a38:	008d0072 	.word	0x008d0072
   10a3c:	00b3009e 	.word	0x00b3009e
   10a40:	00d600ce 	.word	0x00d600ce
   10a44:	00fc00ee 	.word	0x00fc00ee
   10a48:	011c0104 	.word	0x011c0104
   10a4c:	0132012a 	.word	0x0132012a
   10a50:	0158014a 	.word	0x0158014a
   10a54:	01780160 	.word	0x01780160
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   10a58:	8882      	ldrh	r2, [r0, #4]
   10a5a:	3201      	adds	r2, #1
   10a5c:	8804      	ldrh	r4, [r0, #0]
   10a5e:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   10a60:	b212      	sxth	r2, r2
   10a62:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   10a66:	888a      	ldrh	r2, [r1, #4]
   10a68:	3201      	adds	r2, #1
   10a6a:	880d      	ldrh	r5, [r1, #0]
   10a6c:	1b52      	subs	r2, r2, r5
   10a6e:	b212      	sxth	r2, r2
   10a70:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   10a74:	1052      	asrs	r2, r2, #1
   10a76:	ebc2 0264 	rsb	r2, r2, r4, asr #1
   10a7a:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   10a7c:	88c2      	ldrh	r2, [r0, #6]
   10a7e:	3201      	adds	r2, #1
   10a80:	8844      	ldrh	r4, [r0, #2]
   10a82:	1b12      	subs	r2, r2, r4
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
   10a84:	b212      	sxth	r2, r2
   10a86:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   10a8a:	88ca      	ldrh	r2, [r1, #6]
   10a8c:	3201      	adds	r2, #1
   10a8e:	8849      	ldrh	r1, [r1, #2]
   10a90:	1a52      	subs	r2, r2, r1
   10a92:	b212      	sxth	r2, r2
   10a94:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   10a98:	1052      	asrs	r2, r2, #1
   10a9a:	ebc2 0264 	rsb	r2, r2, r4, asr #1
   10a9e:	805a      	strh	r2, [r3, #2]
    res->x += base->x1;
   10aa0:	881a      	ldrh	r2, [r3, #0]
   10aa2:	8801      	ldrh	r1, [r0, #0]
   10aa4:	440a      	add	r2, r1
   10aa6:	801a      	strh	r2, [r3, #0]
    res->y += base->y1;
   10aa8:	885a      	ldrh	r2, [r3, #2]
   10aaa:	8841      	ldrh	r1, [r0, #2]
   10aac:	440a      	add	r2, r1
   10aae:	805a      	strh	r2, [r3, #2]
}
   10ab0:	bc30      	pop	{r4, r5}
   10ab2:	4770      	bx	lr
            res->x = 0;
   10ab4:	2200      	movs	r2, #0
   10ab6:	801a      	strh	r2, [r3, #0]
            res->y = 0;
   10ab8:	805a      	strh	r2, [r3, #2]
            break;
   10aba:	e7f1      	b.n	10aa0 <_lv_area_align+0x7c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   10abc:	8882      	ldrh	r2, [r0, #4]
   10abe:	3201      	adds	r2, #1
   10ac0:	8804      	ldrh	r4, [r0, #0]
   10ac2:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   10ac4:	b212      	sxth	r2, r2
   10ac6:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   10aca:	888a      	ldrh	r2, [r1, #4]
   10acc:	3201      	adds	r2, #1
   10ace:	8809      	ldrh	r1, [r1, #0]
   10ad0:	1a52      	subs	r2, r2, r1
   10ad2:	b212      	sxth	r2, r2
   10ad4:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   10ad8:	1052      	asrs	r2, r2, #1
   10ada:	ebc2 0264 	rsb	r2, r2, r4, asr #1
   10ade:	801a      	strh	r2, [r3, #0]
            res->y = 0;
   10ae0:	2200      	movs	r2, #0
   10ae2:	805a      	strh	r2, [r3, #2]
            break;
   10ae4:	e7dc      	b.n	10aa0 <_lv_area_align+0x7c>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   10ae6:	8882      	ldrh	r2, [r0, #4]
   10ae8:	888c      	ldrh	r4, [r1, #4]
   10aea:	1b12      	subs	r2, r2, r4
   10aec:	8804      	ldrh	r4, [r0, #0]
   10aee:	1b12      	subs	r2, r2, r4
   10af0:	8809      	ldrh	r1, [r1, #0]
   10af2:	440a      	add	r2, r1
   10af4:	801a      	strh	r2, [r3, #0]
            res->y = 0;
   10af6:	2200      	movs	r2, #0
   10af8:	805a      	strh	r2, [r3, #2]
            break;
   10afa:	e7d1      	b.n	10aa0 <_lv_area_align+0x7c>
            res->x = 0;
   10afc:	2200      	movs	r2, #0
   10afe:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
   10b00:	88c2      	ldrh	r2, [r0, #6]
   10b02:	88cc      	ldrh	r4, [r1, #6]
   10b04:	1b12      	subs	r2, r2, r4
   10b06:	8844      	ldrh	r4, [r0, #2]
   10b08:	1b12      	subs	r2, r2, r4
   10b0a:	8849      	ldrh	r1, [r1, #2]
   10b0c:	440a      	add	r2, r1
   10b0e:	805a      	strh	r2, [r3, #2]
            break;
   10b10:	e7c6      	b.n	10aa0 <_lv_area_align+0x7c>
   10b12:	8882      	ldrh	r2, [r0, #4]
   10b14:	3201      	adds	r2, #1
   10b16:	8804      	ldrh	r4, [r0, #0]
   10b18:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   10b1a:	b212      	sxth	r2, r2
   10b1c:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   10b20:	888a      	ldrh	r2, [r1, #4]
   10b22:	3201      	adds	r2, #1
   10b24:	880d      	ldrh	r5, [r1, #0]
   10b26:	1b52      	subs	r2, r2, r5
   10b28:	b212      	sxth	r2, r2
   10b2a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   10b2e:	1052      	asrs	r2, r2, #1
   10b30:	ebc2 0264 	rsb	r2, r2, r4, asr #1
   10b34:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
   10b36:	88c2      	ldrh	r2, [r0, #6]
   10b38:	88cc      	ldrh	r4, [r1, #6]
   10b3a:	1b12      	subs	r2, r2, r4
   10b3c:	8844      	ldrh	r4, [r0, #2]
   10b3e:	1b12      	subs	r2, r2, r4
   10b40:	8849      	ldrh	r1, [r1, #2]
   10b42:	440a      	add	r2, r1
   10b44:	805a      	strh	r2, [r3, #2]
            break;
   10b46:	e7ab      	b.n	10aa0 <_lv_area_align+0x7c>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   10b48:	8882      	ldrh	r2, [r0, #4]
   10b4a:	888c      	ldrh	r4, [r1, #4]
   10b4c:	1b12      	subs	r2, r2, r4
   10b4e:	8804      	ldrh	r4, [r0, #0]
   10b50:	1b12      	subs	r2, r2, r4
   10b52:	880c      	ldrh	r4, [r1, #0]
   10b54:	4422      	add	r2, r4
   10b56:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
   10b58:	88c2      	ldrh	r2, [r0, #6]
   10b5a:	88cc      	ldrh	r4, [r1, #6]
   10b5c:	1b12      	subs	r2, r2, r4
   10b5e:	8844      	ldrh	r4, [r0, #2]
   10b60:	1b12      	subs	r2, r2, r4
   10b62:	8849      	ldrh	r1, [r1, #2]
   10b64:	440a      	add	r2, r1
   10b66:	805a      	strh	r2, [r3, #2]
            break;
   10b68:	e79a      	b.n	10aa0 <_lv_area_align+0x7c>
            res->x = 0;
   10b6a:	2200      	movs	r2, #0
   10b6c:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   10b6e:	88c2      	ldrh	r2, [r0, #6]
   10b70:	3201      	adds	r2, #1
   10b72:	8844      	ldrh	r4, [r0, #2]
   10b74:	1b12      	subs	r2, r2, r4
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
   10b76:	b212      	sxth	r2, r2
   10b78:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   10b7c:	88ca      	ldrh	r2, [r1, #6]
   10b7e:	3201      	adds	r2, #1
   10b80:	8849      	ldrh	r1, [r1, #2]
   10b82:	1a52      	subs	r2, r2, r1
   10b84:	b212      	sxth	r2, r2
   10b86:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   10b8a:	1052      	asrs	r2, r2, #1
   10b8c:	ebc2 0264 	rsb	r2, r2, r4, asr #1
   10b90:	805a      	strh	r2, [r3, #2]
            break;
   10b92:	e785      	b.n	10aa0 <_lv_area_align+0x7c>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   10b94:	8882      	ldrh	r2, [r0, #4]
   10b96:	888c      	ldrh	r4, [r1, #4]
   10b98:	1b12      	subs	r2, r2, r4
   10b9a:	8804      	ldrh	r4, [r0, #0]
   10b9c:	1b12      	subs	r2, r2, r4
   10b9e:	880c      	ldrh	r4, [r1, #0]
   10ba0:	4422      	add	r2, r4
   10ba2:	801a      	strh	r2, [r3, #0]
   10ba4:	88c2      	ldrh	r2, [r0, #6]
   10ba6:	3201      	adds	r2, #1
   10ba8:	8844      	ldrh	r4, [r0, #2]
   10baa:	1b12      	subs	r2, r2, r4
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
   10bac:	b212      	sxth	r2, r2
   10bae:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   10bb2:	88ca      	ldrh	r2, [r1, #6]
   10bb4:	3201      	adds	r2, #1
   10bb6:	8849      	ldrh	r1, [r1, #2]
   10bb8:	1a52      	subs	r2, r2, r1
   10bba:	b212      	sxth	r2, r2
   10bbc:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   10bc0:	1052      	asrs	r2, r2, #1
   10bc2:	ebc2 0264 	rsb	r2, r2, r4, asr #1
   10bc6:	805a      	strh	r2, [r3, #2]
            break;
   10bc8:	e76a      	b.n	10aa0 <_lv_area_align+0x7c>
            res->x = 0;
   10bca:	2200      	movs	r2, #0
   10bcc:	801a      	strh	r2, [r3, #0]
   10bce:	88ca      	ldrh	r2, [r1, #6]
   10bd0:	8849      	ldrh	r1, [r1, #2]
   10bd2:	1a52      	subs	r2, r2, r1
            res->y = -lv_area_get_height(to_align);
   10bd4:	43d2      	mvns	r2, r2
   10bd6:	805a      	strh	r2, [r3, #2]
            break;
   10bd8:	e762      	b.n	10aa0 <_lv_area_align+0x7c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   10bda:	8882      	ldrh	r2, [r0, #4]
   10bdc:	3201      	adds	r2, #1
   10bde:	8804      	ldrh	r4, [r0, #0]
   10be0:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   10be2:	b212      	sxth	r2, r2
   10be4:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   10be8:	888a      	ldrh	r2, [r1, #4]
   10bea:	3201      	adds	r2, #1
   10bec:	880d      	ldrh	r5, [r1, #0]
   10bee:	1b52      	subs	r2, r2, r5
   10bf0:	b212      	sxth	r2, r2
   10bf2:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   10bf6:	1052      	asrs	r2, r2, #1
   10bf8:	ebc2 0264 	rsb	r2, r2, r4, asr #1
   10bfc:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   10bfe:	88ca      	ldrh	r2, [r1, #6]
   10c00:	8849      	ldrh	r1, [r1, #2]
   10c02:	1a52      	subs	r2, r2, r1
            res->y = -lv_area_get_height(to_align);
   10c04:	43d2      	mvns	r2, r2
   10c06:	805a      	strh	r2, [r3, #2]
            break;
   10c08:	e74a      	b.n	10aa0 <_lv_area_align+0x7c>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   10c0a:	8882      	ldrh	r2, [r0, #4]
   10c0c:	888c      	ldrh	r4, [r1, #4]
   10c0e:	1b12      	subs	r2, r2, r4
   10c10:	8804      	ldrh	r4, [r0, #0]
   10c12:	1b12      	subs	r2, r2, r4
   10c14:	880c      	ldrh	r4, [r1, #0]
   10c16:	4422      	add	r2, r4
   10c18:	801a      	strh	r2, [r3, #0]
   10c1a:	88ca      	ldrh	r2, [r1, #6]
   10c1c:	8849      	ldrh	r1, [r1, #2]
   10c1e:	1a52      	subs	r2, r2, r1
            res->y = -lv_area_get_height(to_align);
   10c20:	43d2      	mvns	r2, r2
   10c22:	805a      	strh	r2, [r3, #2]
            break;
   10c24:	e73c      	b.n	10aa0 <_lv_area_align+0x7c>
            res->x = 0;
   10c26:	2200      	movs	r2, #0
   10c28:	801a      	strh	r2, [r3, #0]
   10c2a:	88c2      	ldrh	r2, [r0, #6]
   10c2c:	3201      	adds	r2, #1
   10c2e:	8841      	ldrh	r1, [r0, #2]
   10c30:	1a52      	subs	r2, r2, r1
            res->y = lv_area_get_height(base);
   10c32:	805a      	strh	r2, [r3, #2]
            break;
   10c34:	e734      	b.n	10aa0 <_lv_area_align+0x7c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   10c36:	8882      	ldrh	r2, [r0, #4]
   10c38:	3201      	adds	r2, #1
   10c3a:	8804      	ldrh	r4, [r0, #0]
   10c3c:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   10c3e:	b212      	sxth	r2, r2
   10c40:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   10c44:	888a      	ldrh	r2, [r1, #4]
   10c46:	3201      	adds	r2, #1
   10c48:	8809      	ldrh	r1, [r1, #0]
   10c4a:	1a52      	subs	r2, r2, r1
   10c4c:	b212      	sxth	r2, r2
   10c4e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   10c52:	1052      	asrs	r2, r2, #1
   10c54:	ebc2 0264 	rsb	r2, r2, r4, asr #1
   10c58:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   10c5a:	88c2      	ldrh	r2, [r0, #6]
   10c5c:	3201      	adds	r2, #1
   10c5e:	8841      	ldrh	r1, [r0, #2]
   10c60:	1a52      	subs	r2, r2, r1
            res->y = lv_area_get_height(base);
   10c62:	805a      	strh	r2, [r3, #2]
            break;
   10c64:	e71c      	b.n	10aa0 <_lv_area_align+0x7c>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   10c66:	8882      	ldrh	r2, [r0, #4]
   10c68:	888c      	ldrh	r4, [r1, #4]
   10c6a:	1b12      	subs	r2, r2, r4
   10c6c:	8804      	ldrh	r4, [r0, #0]
   10c6e:	1b12      	subs	r2, r2, r4
   10c70:	8809      	ldrh	r1, [r1, #0]
   10c72:	440a      	add	r2, r1
   10c74:	801a      	strh	r2, [r3, #0]
   10c76:	88c2      	ldrh	r2, [r0, #6]
   10c78:	3201      	adds	r2, #1
   10c7a:	8841      	ldrh	r1, [r0, #2]
   10c7c:	1a52      	subs	r2, r2, r1
            res->y = lv_area_get_height(base);
   10c7e:	805a      	strh	r2, [r3, #2]
            break;
   10c80:	e70e      	b.n	10aa0 <_lv_area_align+0x7c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   10c82:	888a      	ldrh	r2, [r1, #4]
   10c84:	8809      	ldrh	r1, [r1, #0]
   10c86:	1a52      	subs	r2, r2, r1
            res->x = -lv_area_get_width(to_align);
   10c88:	43d2      	mvns	r2, r2
   10c8a:	801a      	strh	r2, [r3, #0]
            res->y = 0;
   10c8c:	2200      	movs	r2, #0
   10c8e:	805a      	strh	r2, [r3, #2]
            break;
   10c90:	e706      	b.n	10aa0 <_lv_area_align+0x7c>
   10c92:	888a      	ldrh	r2, [r1, #4]
   10c94:	880c      	ldrh	r4, [r1, #0]
   10c96:	1b12      	subs	r2, r2, r4
            res->x = -lv_area_get_width(to_align);
   10c98:	43d2      	mvns	r2, r2
   10c9a:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   10c9c:	88c2      	ldrh	r2, [r0, #6]
   10c9e:	3201      	adds	r2, #1
   10ca0:	8844      	ldrh	r4, [r0, #2]
   10ca2:	1b12      	subs	r2, r2, r4
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
   10ca4:	b212      	sxth	r2, r2
   10ca6:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   10caa:	88ca      	ldrh	r2, [r1, #6]
   10cac:	3201      	adds	r2, #1
   10cae:	8849      	ldrh	r1, [r1, #2]
   10cb0:	1a52      	subs	r2, r2, r1
   10cb2:	b212      	sxth	r2, r2
   10cb4:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   10cb8:	1052      	asrs	r2, r2, #1
   10cba:	ebc2 0264 	rsb	r2, r2, r4, asr #1
   10cbe:	805a      	strh	r2, [r3, #2]
            break;
   10cc0:	e6ee      	b.n	10aa0 <_lv_area_align+0x7c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   10cc2:	888a      	ldrh	r2, [r1, #4]
   10cc4:	880c      	ldrh	r4, [r1, #0]
   10cc6:	1b12      	subs	r2, r2, r4
            res->x = -lv_area_get_width(to_align);
   10cc8:	43d2      	mvns	r2, r2
   10cca:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
   10ccc:	88c2      	ldrh	r2, [r0, #6]
   10cce:	88cc      	ldrh	r4, [r1, #6]
   10cd0:	1b12      	subs	r2, r2, r4
   10cd2:	8844      	ldrh	r4, [r0, #2]
   10cd4:	1b12      	subs	r2, r2, r4
   10cd6:	8849      	ldrh	r1, [r1, #2]
   10cd8:	440a      	add	r2, r1
   10cda:	805a      	strh	r2, [r3, #2]
            break;
   10cdc:	e6e0      	b.n	10aa0 <_lv_area_align+0x7c>
   10cde:	8882      	ldrh	r2, [r0, #4]
   10ce0:	3201      	adds	r2, #1
   10ce2:	8801      	ldrh	r1, [r0, #0]
   10ce4:	1a52      	subs	r2, r2, r1
            res->x = lv_area_get_width(base);
   10ce6:	801a      	strh	r2, [r3, #0]
            res->y = 0;
   10ce8:	2200      	movs	r2, #0
   10cea:	805a      	strh	r2, [r3, #2]
            break;
   10cec:	e6d8      	b.n	10aa0 <_lv_area_align+0x7c>
   10cee:	8882      	ldrh	r2, [r0, #4]
   10cf0:	3201      	adds	r2, #1
   10cf2:	8804      	ldrh	r4, [r0, #0]
   10cf4:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base);
   10cf6:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   10cf8:	88c2      	ldrh	r2, [r0, #6]
   10cfa:	3201      	adds	r2, #1
   10cfc:	8844      	ldrh	r4, [r0, #2]
   10cfe:	1b12      	subs	r2, r2, r4
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
   10d00:	b212      	sxth	r2, r2
   10d02:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   10d06:	88ca      	ldrh	r2, [r1, #6]
   10d08:	3201      	adds	r2, #1
   10d0a:	8849      	ldrh	r1, [r1, #2]
   10d0c:	1a52      	subs	r2, r2, r1
   10d0e:	b212      	sxth	r2, r2
   10d10:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   10d14:	1052      	asrs	r2, r2, #1
   10d16:	ebc2 0264 	rsb	r2, r2, r4, asr #1
   10d1a:	805a      	strh	r2, [r3, #2]
            break;
   10d1c:	e6c0      	b.n	10aa0 <_lv_area_align+0x7c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   10d1e:	8882      	ldrh	r2, [r0, #4]
   10d20:	3201      	adds	r2, #1
   10d22:	8804      	ldrh	r4, [r0, #0]
   10d24:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base);
   10d26:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
   10d28:	88c2      	ldrh	r2, [r0, #6]
   10d2a:	88cc      	ldrh	r4, [r1, #6]
   10d2c:	1b12      	subs	r2, r2, r4
   10d2e:	8844      	ldrh	r4, [r0, #2]
   10d30:	1b12      	subs	r2, r2, r4
   10d32:	8849      	ldrh	r1, [r1, #2]
   10d34:	440a      	add	r2, r1
   10d36:	805a      	strh	r2, [r3, #2]
            break;
   10d38:	e6b2      	b.n	10aa0 <_lv_area_align+0x7c>

00010d3a <lv_color_fill>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
{
   10d3a:	b430      	push	{r4, r5}
   10d3c:	b28d      	uxth	r5, r1
#if LV_COLOR_DEPTH == 16
    uintptr_t buf_int = (uintptr_t) buf;
    if(buf_int & 0x3) {
   10d3e:	f010 0f03 	tst.w	r0, #3
        *buf = color;
   10d42:	bf1c      	itt	ne
   10d44:	f820 1b02 	strhne.w	r1, [r0], #2
        buf++;
        px_num--;
   10d48:	f102 32ff 	addne.w	r2, r2, #4294967295
    }

    uint32_t c32 = color.full + (color.full << 16);
   10d4c:	eb05 4105 	add.w	r1, r5, r5, lsl #16
    uint32_t * buf32 = (uint32_t *)buf;

    while(px_num > 16) {
   10d50:	2a10      	cmp	r2, #16
   10d52:	d921      	bls.n	10d98 <lv_color_fill+0x5e>
   10d54:	f100 0320 	add.w	r3, r0, #32
   10d58:	4614      	mov	r4, r2
        *buf32 = c32;
   10d5a:	f843 1c20 	str.w	r1, [r3, #-32]
        buf32++;
        *buf32 = c32;
   10d5e:	f843 1c1c 	str.w	r1, [r3, #-28]
        buf32++;
        *buf32 = c32;
   10d62:	f843 1c18 	str.w	r1, [r3, #-24]
        buf32++;
        *buf32 = c32;
   10d66:	f843 1c14 	str.w	r1, [r3, #-20]
        buf32++;

        *buf32 = c32;
   10d6a:	f843 1c10 	str.w	r1, [r3, #-16]
        buf32++;
        *buf32 = c32;
   10d6e:	f843 1c0c 	str.w	r1, [r3, #-12]
        buf32++;
        *buf32 = c32;
   10d72:	f843 1c08 	str.w	r1, [r3, #-8]
        buf32++;
        *buf32 = c32;
   10d76:	f843 1c04 	str.w	r1, [r3, #-4]
        buf32++;

        px_num -= 16;
   10d7a:	3c10      	subs	r4, #16
   10d7c:	3320      	adds	r3, #32
    while(px_num > 16) {
   10d7e:	2c10      	cmp	r4, #16
   10d80:	d8eb      	bhi.n	10d5a <lv_color_fill+0x20>
   10d82:	f1a2 0311 	sub.w	r3, r2, #17
   10d86:	091b      	lsrs	r3, r3, #4
   10d88:	1c59      	adds	r1, r3, #1
   10d8a:	3a10      	subs	r2, #16
   10d8c:	ebc3 7303 	rsb	r3, r3, r3, lsl #28
   10d90:	eb02 1203 	add.w	r2, r2, r3, lsl #4
        buf32++;
   10d94:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    }

    buf = (lv_color_t *)buf32;

    while(px_num) {
   10d98:	b11a      	cbz	r2, 10da2 <lv_color_fill+0x68>
        *buf = color;
   10d9a:	f820 5b02 	strh.w	r5, [r0], #2
    while(px_num) {
   10d9e:	3a01      	subs	r2, #1
   10da0:	d1fb      	bne.n	10d9a <lv_color_fill+0x60>
        *buf = color;
        buf++;
        px_num --;
    }
#endif
}
   10da2:	bc30      	pop	{r4, r5}
   10da4:	4770      	bx	lr

00010da6 <lv_color_lighten>:


lv_color_t lv_color_lighten(lv_color_t c, lv_opa_t lvl)
{
   10da6:	b430      	push	{r4, r5}
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
   10da8:	ebc1 1541 	rsb	r5, r1, r1, lsl #5
   10dac:	f1c1 04ff 	rsb	r4, r1, #255	; 0xff
   10db0:	f3c0 23c4 	ubfx	r3, r0, #11, #5
   10db4:	fb04 5303 	mla	r3, r4, r3, r5
   10db8:	eb03 2203 	add.w	r2, r3, r3, lsl #8
   10dbc:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
   10dc0:	f3c3 52c4 	ubfx	r2, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
   10dc4:	f3c0 1345 	ubfx	r3, r0, #5, #6
   10dc8:	ebc1 1181 	rsb	r1, r1, r1, lsl #6
   10dcc:	fb04 1103 	mla	r1, r4, r3, r1
   10dd0:	eb01 2301 	add.w	r3, r1, r1, lsl #8
   10dd4:	eb01 11c3 	add.w	r1, r1, r3, lsl #7
   10dd8:	f3c1 51c5 	ubfx	r1, r1, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
   10ddc:	f000 001f 	and.w	r0, r0, #31
   10de0:	fb04 5000 	mla	r0, r4, r0, r5
   10de4:	eb00 2300 	add.w	r3, r0, r0, lsl #8
   10de8:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
   10dec:	0dc3      	lsrs	r3, r0, #23
   10dee:	f04f 0000 	mov.w	r0, #0
   10df2:	f363 0004 	bfi	r0, r3, #0, #5
   10df6:	f361 104a 	bfi	r0, r1, #5, #6
   10dfa:	f362 20cf 	bfi	r0, r2, #11, #5
    return lv_color_mix(LV_COLOR_WHITE, c, lvl);
}
   10dfe:	bc30      	pop	{r4, r5}
   10e00:	4770      	bx	lr

00010e02 <lv_color_darken>:


lv_color_t lv_color_darken(lv_color_t c, lv_opa_t lvl)
{
   10e02:	b410      	push	{r4}
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
   10e04:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
   10e08:	f3c0 23c4 	ubfx	r3, r0, #11, #5
   10e0c:	fb01 f303 	mul.w	r3, r1, r3
   10e10:	eb03 2203 	add.w	r2, r3, r3, lsl #8
   10e14:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
   10e18:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
   10e1c:	f3c0 1245 	ubfx	r2, r0, #5, #6
   10e20:	fb01 f202 	mul.w	r2, r1, r2
   10e24:	eb02 2402 	add.w	r4, r2, r2, lsl #8
   10e28:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
   10e2c:	f3c2 52c5 	ubfx	r2, r2, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
   10e30:	f000 001f 	and.w	r0, r0, #31
   10e34:	fb01 f100 	mul.w	r1, r1, r0
   10e38:	eb01 2001 	add.w	r0, r1, r1, lsl #8
   10e3c:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
   10e40:	0dc9      	lsrs	r1, r1, #23
   10e42:	f04f 0000 	mov.w	r0, #0
   10e46:	f361 0004 	bfi	r0, r1, #0, #5
   10e4a:	f362 104a 	bfi	r0, r2, #5, #6
   10e4e:	f363 20cf 	bfi	r0, r3, #11, #5
    return lv_color_mix(LV_COLOR_BLACK, c, lvl);
}
   10e52:	f85d 4b04 	ldr.w	r4, [sp], #4
   10e56:	4770      	bx	lr

00010e58 <lv_fs_get_real_path>:
static const char * lv_fs_get_real_path(const char * path)
{
    /* Example path: "S:/folder/file.txt"
     * Leave the letter and the : / \ characters*/

    path++; /*Ignore the driver letter*/
   10e58:	1c42      	adds	r2, r0, #1

    while(*path != '\0') {
   10e5a:	7843      	ldrb	r3, [r0, #1]
   10e5c:	b91b      	cbnz	r3, 10e66 <lv_fs_get_real_path+0xe>
   10e5e:	e008      	b.n	10e72 <lv_fs_get_real_path+0x1a>
   10e60:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   10e64:	b12b      	cbz	r3, 10e72 <lv_fs_get_real_path+0x1a>
        if(*path == ':' || *path == '\\' || *path == '/') {
   10e66:	2b3a      	cmp	r3, #58	; 0x3a
   10e68:	d0fa      	beq.n	10e60 <lv_fs_get_real_path+0x8>
   10e6a:	2b5c      	cmp	r3, #92	; 0x5c
   10e6c:	d0f8      	beq.n	10e60 <lv_fs_get_real_path+0x8>
   10e6e:	2b2f      	cmp	r3, #47	; 0x2f
   10e70:	d0f6      	beq.n	10e60 <lv_fs_get_real_path+0x8>
            break;
        }
    }

    return path;
}
   10e72:	4610      	mov	r0, r2
   10e74:	4770      	bx	lr
	...

00010e78 <_lv_fs_init>:
{
   10e78:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_drv_ll), sizeof(lv_fs_drv_t));
   10e7a:	2144      	movs	r1, #68	; 0x44
   10e7c:	4801      	ldr	r0, [pc, #4]	; (10e84 <_lv_fs_init+0xc>)
   10e7e:	4b02      	ldr	r3, [pc, #8]	; (10e88 <_lv_fs_init+0x10>)
   10e80:	4798      	blx	r3
   10e82:	bd08      	pop	{r3, pc}
   10e84:	2000ad44 	.word	0x2000ad44
   10e88:	000110d9 	.word	0x000110d9

00010e8c <lv_fs_close>:
{
   10e8c:	b538      	push	{r3, r4, r5, lr}
    if(file_p->drv == NULL) {
   10e8e:	6843      	ldr	r3, [r0, #4]
   10e90:	b173      	cbz	r3, 10eb0 <lv_fs_close+0x24>
    if(file_p->drv->close_cb == NULL) {
   10e92:	691a      	ldr	r2, [r3, #16]
   10e94:	b172      	cbz	r2, 10eb4 <lv_fs_close+0x28>
   10e96:	4604      	mov	r4, r0
    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
   10e98:	6801      	ldr	r1, [r0, #0]
   10e9a:	4618      	mov	r0, r3
   10e9c:	4790      	blx	r2
   10e9e:	4605      	mov	r5, r0
    lv_mem_free(file_p->file_d); /*Clean up*/
   10ea0:	6820      	ldr	r0, [r4, #0]
   10ea2:	4b05      	ldr	r3, [pc, #20]	; (10eb8 <lv_fs_close+0x2c>)
   10ea4:	4798      	blx	r3
    file_p->file_d = NULL;
   10ea6:	2300      	movs	r3, #0
   10ea8:	6023      	str	r3, [r4, #0]
    file_p->drv    = NULL;
   10eaa:	6063      	str	r3, [r4, #4]
}
   10eac:	4628      	mov	r0, r5
   10eae:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
   10eb0:	250b      	movs	r5, #11
   10eb2:	e7fb      	b.n	10eac <lv_fs_close+0x20>
        return LV_FS_RES_NOT_IMP;
   10eb4:	2509      	movs	r5, #9
   10eb6:	e7f9      	b.n	10eac <lv_fs_close+0x20>
   10eb8:	00011639 	.word	0x00011639

00010ebc <lv_fs_read>:
{
   10ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
   10ebe:	b085      	sub	sp, #20
    if(br != NULL) *br = 0;
   10ec0:	461e      	mov	r6, r3
   10ec2:	b10b      	cbz	r3, 10ec8 <lv_fs_read+0xc>
   10ec4:	2300      	movs	r3, #0
   10ec6:	6033      	str	r3, [r6, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
   10ec8:	6845      	ldr	r5, [r0, #4]
   10eca:	b18d      	cbz	r5, 10ef0 <lv_fs_read+0x34>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
   10ecc:	69af      	ldr	r7, [r5, #24]
   10ece:	b18f      	cbz	r7, 10ef4 <lv_fs_read+0x38>
   10ed0:	4613      	mov	r3, r2
   10ed2:	460a      	mov	r2, r1
   10ed4:	4604      	mov	r4, r0
    uint32_t br_tmp = 0;
   10ed6:	a804      	add	r0, sp, #16
   10ed8:	2100      	movs	r1, #0
   10eda:	f840 1d04 	str.w	r1, [r0, #-4]!
    lv_fs_res_t res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
   10ede:	6821      	ldr	r1, [r4, #0]
   10ee0:	9000      	str	r0, [sp, #0]
   10ee2:	4628      	mov	r0, r5
   10ee4:	47b8      	blx	r7
    if(br != NULL) *br = br_tmp;
   10ee6:	b10e      	cbz	r6, 10eec <lv_fs_read+0x30>
   10ee8:	9b03      	ldr	r3, [sp, #12]
   10eea:	6033      	str	r3, [r6, #0]
}
   10eec:	b005      	add	sp, #20
   10eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
   10ef0:	200b      	movs	r0, #11
   10ef2:	e7fb      	b.n	10eec <lv_fs_read+0x30>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
   10ef4:	2009      	movs	r0, #9
   10ef6:	e7f9      	b.n	10eec <lv_fs_read+0x30>

00010ef8 <lv_fs_seek>:
{
   10ef8:	b538      	push	{r3, r4, r5, lr}
    if(file_p->drv == NULL) {
   10efa:	6844      	ldr	r4, [r0, #4]
   10efc:	b134      	cbz	r4, 10f0c <lv_fs_seek+0x14>
    if(file_p->drv->seek_cb == NULL) {
   10efe:	6a25      	ldr	r5, [r4, #32]
   10f00:	b135      	cbz	r5, 10f10 <lv_fs_seek+0x18>
   10f02:	460a      	mov	r2, r1
    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
   10f04:	6801      	ldr	r1, [r0, #0]
   10f06:	4620      	mov	r0, r4
   10f08:	47a8      	blx	r5
    return res;
   10f0a:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
   10f0c:	200b      	movs	r0, #11
   10f0e:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_NOT_IMP;
   10f10:	2009      	movs	r0, #9
}
   10f12:	bd38      	pop	{r3, r4, r5, pc}

00010f14 <lv_fs_get_drv>:
{
   10f14:	b570      	push	{r4, r5, r6, lr}
   10f16:	4604      	mov	r4, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
   10f18:	4809      	ldr	r0, [pc, #36]	; (10f40 <lv_fs_get_drv+0x2c>)
   10f1a:	4b0a      	ldr	r3, [pc, #40]	; (10f44 <lv_fs_get_drv+0x30>)
   10f1c:	4798      	blx	r3
   10f1e:	4601      	mov	r1, r0
   10f20:	b158      	cbz	r0, 10f3a <lv_fs_get_drv+0x26>
        if(drv->letter == letter) {
   10f22:	7803      	ldrb	r3, [r0, #0]
   10f24:	42a3      	cmp	r3, r4
   10f26:	d008      	beq.n	10f3a <lv_fs_get_drv+0x26>
    _LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
   10f28:	4e05      	ldr	r6, [pc, #20]	; (10f40 <lv_fs_get_drv+0x2c>)
   10f2a:	4d07      	ldr	r5, [pc, #28]	; (10f48 <lv_fs_get_drv+0x34>)
   10f2c:	4630      	mov	r0, r6
   10f2e:	47a8      	blx	r5
   10f30:	4601      	mov	r1, r0
   10f32:	b110      	cbz	r0, 10f3a <lv_fs_get_drv+0x26>
        if(drv->letter == letter) {
   10f34:	780b      	ldrb	r3, [r1, #0]
   10f36:	42a3      	cmp	r3, r4
   10f38:	d1f8      	bne.n	10f2c <lv_fs_get_drv+0x18>
}
   10f3a:	4608      	mov	r0, r1
   10f3c:	bd70      	pop	{r4, r5, r6, pc}
   10f3e:	bf00      	nop
   10f40:	2000ad44 	.word	0x2000ad44
   10f44:	00011189 	.word	0x00011189
   10f48:	0001119d 	.word	0x0001119d

00010f4c <lv_fs_open>:
{
   10f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    file_p->drv    = NULL;
   10f50:	2300      	movs	r3, #0
   10f52:	6043      	str	r3, [r0, #4]
    file_p->file_d = NULL;
   10f54:	6003      	str	r3, [r0, #0]
    if(path == NULL) return LV_FS_RES_INV_PARAM;
   10f56:	2900      	cmp	r1, #0
   10f58:	d03e      	beq.n	10fd8 <lv_fs_open+0x8c>
   10f5a:	460d      	mov	r5, r1
   10f5c:	4691      	mov	r9, r2
   10f5e:	4604      	mov	r4, r0
    file_p->drv = lv_fs_get_drv(letter);
   10f60:	7808      	ldrb	r0, [r1, #0]
   10f62:	4b20      	ldr	r3, [pc, #128]	; (10fe4 <lv_fs_open+0x98>)
   10f64:	4798      	blx	r3
   10f66:	6060      	str	r0, [r4, #4]
    if(file_p->drv == NULL) {
   10f68:	b140      	cbz	r0, 10f7c <lv_fs_open+0x30>
    if(file_p->drv->ready_cb != NULL) {
   10f6a:	6883      	ldr	r3, [r0, #8]
   10f6c:	b153      	cbz	r3, 10f84 <lv_fs_open+0x38>
        if(file_p->drv->ready_cb(file_p->drv) == false) {
   10f6e:	4798      	blx	r3
   10f70:	b940      	cbnz	r0, 10f84 <lv_fs_open+0x38>
            file_p->drv    = NULL;
   10f72:	2300      	movs	r3, #0
   10f74:	6063      	str	r3, [r4, #4]
            file_p->file_d = NULL;
   10f76:	6023      	str	r3, [r4, #0]
            return LV_FS_RES_HW_ERR;
   10f78:	2501      	movs	r5, #1
   10f7a:	e02e      	b.n	10fda <lv_fs_open+0x8e>
        file_p->file_d = NULL;
   10f7c:	2300      	movs	r3, #0
   10f7e:	6023      	str	r3, [r4, #0]
        return LV_FS_RES_NOT_EX;
   10f80:	2503      	movs	r5, #3
   10f82:	e02a      	b.n	10fda <lv_fs_open+0x8e>
    file_p->file_d = lv_mem_alloc(file_p->drv->file_size);
   10f84:	6863      	ldr	r3, [r4, #4]
   10f86:	8858      	ldrh	r0, [r3, #2]
   10f88:	4b17      	ldr	r3, [pc, #92]	; (10fe8 <lv_fs_open+0x9c>)
   10f8a:	4798      	blx	r3
   10f8c:	6020      	str	r0, [r4, #0]
    LV_ASSERT_MEM(file_p->file_d);
   10f8e:	4b17      	ldr	r3, [pc, #92]	; (10fec <lv_fs_open+0xa0>)
   10f90:	4798      	blx	r3
   10f92:	b128      	cbz	r0, 10fa0 <lv_fs_open+0x54>
    if(file_p->file_d == NULL) {
   10f94:	6826      	ldr	r6, [r4, #0]
   10f96:	b94e      	cbnz	r6, 10fac <lv_fs_open+0x60>
        file_p->drv = NULL;
   10f98:	2300      	movs	r3, #0
   10f9a:	6063      	str	r3, [r4, #4]
        return LV_FS_RES_OUT_OF_MEM; /* Out of memory */
   10f9c:	250a      	movs	r5, #10
   10f9e:	e01c      	b.n	10fda <lv_fs_open+0x8e>
    LV_ASSERT_MEM(file_p->file_d);
   10fa0:	6822      	ldr	r2, [r4, #0]
   10fa2:	2300      	movs	r3, #0
   10fa4:	4812      	ldr	r0, [pc, #72]	; (10ff0 <lv_fs_open+0xa4>)
   10fa6:	4913      	ldr	r1, [pc, #76]	; (10ff4 <lv_fs_open+0xa8>)
   10fa8:	4788      	blx	r1
   10faa:	e7fe      	b.n	10faa <lv_fs_open+0x5e>
    if(file_p->drv->open_cb == NULL) {
   10fac:	f8d4 8004 	ldr.w	r8, [r4, #4]
   10fb0:	f8d8 700c 	ldr.w	r7, [r8, #12]
   10fb4:	b1a7      	cbz	r7, 10fe0 <lv_fs_open+0x94>
    const char * real_path = lv_fs_get_real_path(path);
   10fb6:	4628      	mov	r0, r5
   10fb8:	4b0f      	ldr	r3, [pc, #60]	; (10ff8 <lv_fs_open+0xac>)
   10fba:	4798      	blx	r3
    lv_fs_res_t res        = file_p->drv->open_cb(file_p->drv, file_p->file_d, real_path, mode);
   10fbc:	464b      	mov	r3, r9
   10fbe:	4602      	mov	r2, r0
   10fc0:	4631      	mov	r1, r6
   10fc2:	4640      	mov	r0, r8
   10fc4:	47b8      	blx	r7
    if(res != LV_FS_RES_OK) {
   10fc6:	4605      	mov	r5, r0
   10fc8:	b138      	cbz	r0, 10fda <lv_fs_open+0x8e>
        lv_mem_free(file_p->file_d);
   10fca:	6820      	ldr	r0, [r4, #0]
   10fcc:	4b0b      	ldr	r3, [pc, #44]	; (10ffc <lv_fs_open+0xb0>)
   10fce:	4798      	blx	r3
        file_p->file_d = NULL;
   10fd0:	2300      	movs	r3, #0
   10fd2:	6023      	str	r3, [r4, #0]
        file_p->drv    = NULL;
   10fd4:	6063      	str	r3, [r4, #4]
   10fd6:	e000      	b.n	10fda <lv_fs_open+0x8e>
    if(path == NULL) return LV_FS_RES_INV_PARAM;
   10fd8:	250b      	movs	r5, #11
}
   10fda:	4628      	mov	r0, r5
   10fdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return LV_FS_RES_NOT_IMP;
   10fe0:	2509      	movs	r5, #9
   10fe2:	e7fa      	b.n	10fda <lv_fs_open+0x8e>
   10fe4:	00010f15 	.word	0x00010f15
   10fe8:	00011575 	.word	0x00011575
   10fec:	0000295d 	.word	0x0000295d
   10ff0:	0001786c 	.word	0x0001786c
   10ff4:	00002965 	.word	0x00002965
   10ff8:	00010e59 	.word	0x00010e59
   10ffc:	00011639 	.word	0x00011639

00011000 <lv_fs_get_ext>:
{
   11000:	b510      	push	{r4, lr}
   11002:	4604      	mov	r4, r0
    for(i = strlen(fn); i > 0; i--) {
   11004:	4b12      	ldr	r3, [pc, #72]	; (11050 <lv_fs_get_ext+0x50>)
   11006:	4798      	blx	r3
   11008:	b1c8      	cbz	r0, 1103e <lv_fs_get_ext+0x3e>
   1100a:	4602      	mov	r2, r0
        if(fn[i] == '.') {
   1100c:	1821      	adds	r1, r4, r0
   1100e:	5c23      	ldrb	r3, [r4, r0]
   11010:	2b2e      	cmp	r3, #46	; 0x2e
   11012:	d00f      	beq.n	11034 <lv_fs_get_ext+0x34>
        else if(fn[i] == '/' || fn[i] == '\\') {
   11014:	2b2f      	cmp	r3, #47	; 0x2f
   11016:	d014      	beq.n	11042 <lv_fs_get_ext+0x42>
   11018:	2b5c      	cmp	r3, #92	; 0x5c
   1101a:	d014      	beq.n	11046 <lv_fs_get_ext+0x46>
    for(i = strlen(fn); i > 0; i--) {
   1101c:	3a01      	subs	r2, #1
   1101e:	d00c      	beq.n	1103a <lv_fs_get_ext+0x3a>
        if(fn[i] == '.') {
   11020:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   11024:	2b2e      	cmp	r3, #46	; 0x2e
   11026:	d005      	beq.n	11034 <lv_fs_get_ext+0x34>
        else if(fn[i] == '/' || fn[i] == '\\') {
   11028:	2b2f      	cmp	r3, #47	; 0x2f
   1102a:	d00e      	beq.n	1104a <lv_fs_get_ext+0x4a>
   1102c:	2b5c      	cmp	r3, #92	; 0x5c
   1102e:	d1f5      	bne.n	1101c <lv_fs_get_ext+0x1c>
            return ""; /*No extension if a '\' or '/' found*/
   11030:	4808      	ldr	r0, [pc, #32]	; (11054 <lv_fs_get_ext+0x54>)
}
   11032:	bd10      	pop	{r4, pc}
            return &fn[i + 1];
   11034:	3201      	adds	r2, #1
   11036:	18a0      	adds	r0, r4, r2
   11038:	bd10      	pop	{r4, pc}
    return ""; /*Empty string if no '.' in the file name. */
   1103a:	4806      	ldr	r0, [pc, #24]	; (11054 <lv_fs_get_ext+0x54>)
   1103c:	bd10      	pop	{r4, pc}
   1103e:	4805      	ldr	r0, [pc, #20]	; (11054 <lv_fs_get_ext+0x54>)
   11040:	bd10      	pop	{r4, pc}
            return ""; /*No extension if a '\' or '/' found*/
   11042:	4804      	ldr	r0, [pc, #16]	; (11054 <lv_fs_get_ext+0x54>)
   11044:	bd10      	pop	{r4, pc}
   11046:	4803      	ldr	r0, [pc, #12]	; (11054 <lv_fs_get_ext+0x54>)
   11048:	bd10      	pop	{r4, pc}
   1104a:	4802      	ldr	r0, [pc, #8]	; (11054 <lv_fs_get_ext+0x54>)
   1104c:	bd10      	pop	{r4, pc}
   1104e:	bf00      	nop
   11050:	000176f7 	.word	0x000176f7
   11054:	00017788 	.word	0x00017788

00011058 <node_set_next>:
 * @param ll_p pointer to linked list
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
   11058:	b510      	push	{r4, lr}
   1105a:	b082      	sub	sp, #8
   1105c:	9201      	str	r2, [sp, #4]
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
   1105e:	b181      	cbz	r1, 11082 <node_set_next+0x2a>
   11060:	460c      	mov	r4, r1

    uint32_t node_p_size = sizeof(lv_ll_node_t *);
    if(next)
   11062:	b182      	cbz	r2, 11086 <node_set_next+0x2e>
        _lv_memcpy_small(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
   11064:	6803      	ldr	r3, [r0, #0]
   11066:	3304      	adds	r3, #4
   11068:	18ca      	adds	r2, r1, r3
   1106a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   1106e:	54e1      	strb	r1, [r4, r3]
   11070:	f89d 3005 	ldrb.w	r3, [sp, #5]
   11074:	7053      	strb	r3, [r2, #1]
   11076:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1107a:	7093      	strb	r3, [r2, #2]
   1107c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11080:	70d3      	strb	r3, [r2, #3]
    else
        _lv_memset_00(act + LL_NEXT_P_OFFSET(ll_p), node_p_size);
}
   11082:	b002      	add	sp, #8
   11084:	bd10      	pop	{r4, pc}
        _lv_memset_00(act + LL_NEXT_P_OFFSET(ll_p), node_p_size);
   11086:	6800      	ldr	r0, [r0, #0]
   11088:	3004      	adds	r0, #4
   1108a:	2104      	movs	r1, #4
   1108c:	4420      	add	r0, r4
   1108e:	4b01      	ldr	r3, [pc, #4]	; (11094 <node_set_next+0x3c>)
   11090:	4798      	blx	r3
   11092:	e7f6      	b.n	11082 <node_set_next+0x2a>
   11094:	00011c17 	.word	0x00011c17

00011098 <node_set_prev>:
{
   11098:	b500      	push	{lr}
   1109a:	b083      	sub	sp, #12
   1109c:	9201      	str	r2, [sp, #4]
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
   1109e:	b181      	cbz	r1, 110c2 <node_set_prev+0x2a>
   110a0:	460a      	mov	r2, r1
    if(prev)
   110a2:	9b01      	ldr	r3, [sp, #4]
   110a4:	b183      	cbz	r3, 110c8 <node_set_prev+0x30>
        _lv_memcpy_small(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
   110a6:	6801      	ldr	r1, [r0, #0]
   110a8:	1853      	adds	r3, r2, r1
   110aa:	f89d 0004 	ldrb.w	r0, [sp, #4]
   110ae:	5450      	strb	r0, [r2, r1]
   110b0:	f89d 2005 	ldrb.w	r2, [sp, #5]
   110b4:	705a      	strb	r2, [r3, #1]
   110b6:	f89d 2006 	ldrb.w	r2, [sp, #6]
   110ba:	709a      	strb	r2, [r3, #2]
   110bc:	f89d 2007 	ldrb.w	r2, [sp, #7]
   110c0:	70da      	strb	r2, [r3, #3]
}
   110c2:	b003      	add	sp, #12
   110c4:	f85d fb04 	ldr.w	pc, [sp], #4
        _lv_memset_00(act + LL_PREV_P_OFFSET(ll_p), node_p_size);
   110c8:	6800      	ldr	r0, [r0, #0]
   110ca:	2104      	movs	r1, #4
   110cc:	4410      	add	r0, r2
   110ce:	4b01      	ldr	r3, [pc, #4]	; (110d4 <node_set_prev+0x3c>)
   110d0:	4798      	blx	r3
   110d2:	e7f6      	b.n	110c2 <node_set_prev+0x2a>
   110d4:	00011c17 	.word	0x00011c17

000110d8 <_lv_ll_init>:
    ll_p->head = NULL;
   110d8:	2300      	movs	r3, #0
   110da:	6043      	str	r3, [r0, #4]
    ll_p->tail = NULL;
   110dc:	6083      	str	r3, [r0, #8]
    if(node_size & 0x3) {
   110de:	f011 0f03 	tst.w	r1, #3
        node_size = node_size & (~0x3);
   110e2:	bf1c      	itt	ne
   110e4:	f021 0103 	bicne.w	r1, r1, #3
        node_size += 4;
   110e8:	3104      	addne	r1, #4
    ll_p->n_size = node_size;
   110ea:	6001      	str	r1, [r0, #0]
   110ec:	4770      	bx	lr
	...

000110f0 <_lv_ll_ins_head>:
{
   110f0:	b538      	push	{r3, r4, r5, lr}
   110f2:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
   110f4:	6800      	ldr	r0, [r0, #0]
   110f6:	3008      	adds	r0, #8
   110f8:	4b0d      	ldr	r3, [pc, #52]	; (11130 <_lv_ll_ins_head+0x40>)
   110fa:	4798      	blx	r3
    if(n_new != NULL) {
   110fc:	4605      	mov	r5, r0
   110fe:	b190      	cbz	r0, 11126 <_lv_ll_ins_head+0x36>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
   11100:	2200      	movs	r2, #0
   11102:	4601      	mov	r1, r0
   11104:	4620      	mov	r0, r4
   11106:	4b0b      	ldr	r3, [pc, #44]	; (11134 <_lv_ll_ins_head+0x44>)
   11108:	4798      	blx	r3
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
   1110a:	6862      	ldr	r2, [r4, #4]
   1110c:	4629      	mov	r1, r5
   1110e:	4620      	mov	r0, r4
   11110:	4b09      	ldr	r3, [pc, #36]	; (11138 <_lv_ll_ins_head+0x48>)
   11112:	4798      	blx	r3
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
   11114:	6861      	ldr	r1, [r4, #4]
   11116:	b119      	cbz	r1, 11120 <_lv_ll_ins_head+0x30>
            node_set_prev(ll_p, ll_p->head, n_new);
   11118:	462a      	mov	r2, r5
   1111a:	4620      	mov	r0, r4
   1111c:	4b05      	ldr	r3, [pc, #20]	; (11134 <_lv_ll_ins_head+0x44>)
   1111e:	4798      	blx	r3
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
   11120:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
   11122:	68a3      	ldr	r3, [r4, #8]
   11124:	b10b      	cbz	r3, 1112a <_lv_ll_ins_head+0x3a>
}
   11126:	4628      	mov	r0, r5
   11128:	bd38      	pop	{r3, r4, r5, pc}
            ll_p->tail = n_new;
   1112a:	60a5      	str	r5, [r4, #8]
   1112c:	e7fb      	b.n	11126 <_lv_ll_ins_head+0x36>
   1112e:	bf00      	nop
   11130:	00011575 	.word	0x00011575
   11134:	00011099 	.word	0x00011099
   11138:	00011059 	.word	0x00011059

0001113c <_lv_ll_ins_tail>:
{
   1113c:	b538      	push	{r3, r4, r5, lr}
   1113e:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
   11140:	6800      	ldr	r0, [r0, #0]
   11142:	3008      	adds	r0, #8
   11144:	4b0d      	ldr	r3, [pc, #52]	; (1117c <_lv_ll_ins_tail+0x40>)
   11146:	4798      	blx	r3
    if(n_new != NULL) {
   11148:	4605      	mov	r5, r0
   1114a:	b190      	cbz	r0, 11172 <_lv_ll_ins_tail+0x36>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
   1114c:	2200      	movs	r2, #0
   1114e:	4601      	mov	r1, r0
   11150:	4620      	mov	r0, r4
   11152:	4b0b      	ldr	r3, [pc, #44]	; (11180 <_lv_ll_ins_tail+0x44>)
   11154:	4798      	blx	r3
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is tho old tail*/
   11156:	68a2      	ldr	r2, [r4, #8]
   11158:	4629      	mov	r1, r5
   1115a:	4620      	mov	r0, r4
   1115c:	4b09      	ldr	r3, [pc, #36]	; (11184 <_lv_ll_ins_tail+0x48>)
   1115e:	4798      	blx	r3
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
   11160:	68a1      	ldr	r1, [r4, #8]
   11162:	b119      	cbz	r1, 1116c <_lv_ll_ins_tail+0x30>
            node_set_next(ll_p, ll_p->tail, n_new);
   11164:	462a      	mov	r2, r5
   11166:	4620      	mov	r0, r4
   11168:	4b05      	ldr	r3, [pc, #20]	; (11180 <_lv_ll_ins_tail+0x44>)
   1116a:	4798      	blx	r3
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
   1116c:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
   1116e:	6863      	ldr	r3, [r4, #4]
   11170:	b10b      	cbz	r3, 11176 <_lv_ll_ins_tail+0x3a>
}
   11172:	4628      	mov	r0, r5
   11174:	bd38      	pop	{r3, r4, r5, pc}
            ll_p->head = n_new;
   11176:	6065      	str	r5, [r4, #4]
   11178:	e7fb      	b.n	11172 <_lv_ll_ins_tail+0x36>
   1117a:	bf00      	nop
   1117c:	00011575 	.word	0x00011575
   11180:	00011059 	.word	0x00011059
   11184:	00011099 	.word	0x00011099

00011188 <_lv_ll_get_head>:
    if(ll_p != NULL) {
   11188:	b108      	cbz	r0, 1118e <_lv_ll_get_head+0x6>
        head = ll_p->head;
   1118a:	6840      	ldr	r0, [r0, #4]
   1118c:	4770      	bx	lr
    void * head = NULL;
   1118e:	2000      	movs	r0, #0
}
   11190:	4770      	bx	lr

00011192 <_lv_ll_get_tail>:
    if(ll_p != NULL) {
   11192:	b108      	cbz	r0, 11198 <_lv_ll_get_tail+0x6>
        tail = ll_p->tail;
   11194:	6880      	ldr	r0, [r0, #8]
   11196:	4770      	bx	lr
    void * tail = NULL;
   11198:	2000      	movs	r0, #0
}
   1119a:	4770      	bx	lr

0001119c <_lv_ll_get_next>:
{
   1119c:	b082      	sub	sp, #8
    void * next = NULL;
   1119e:	2300      	movs	r3, #0
   111a0:	9301      	str	r3, [sp, #4]
    if(ll_p != NULL) {
   111a2:	b170      	cbz	r0, 111c2 <_lv_ll_get_next+0x26>
        _lv_memcpy_small(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
   111a4:	6803      	ldr	r3, [r0, #0]
   111a6:	3304      	adds	r3, #4
   111a8:	18ca      	adds	r2, r1, r3
   111aa:	5ccb      	ldrb	r3, [r1, r3]
   111ac:	f88d 3004 	strb.w	r3, [sp, #4]
   111b0:	7853      	ldrb	r3, [r2, #1]
   111b2:	f88d 3005 	strb.w	r3, [sp, #5]
   111b6:	7893      	ldrb	r3, [r2, #2]
   111b8:	f88d 3006 	strb.w	r3, [sp, #6]
   111bc:	78d3      	ldrb	r3, [r2, #3]
   111be:	f88d 3007 	strb.w	r3, [sp, #7]
}
   111c2:	9801      	ldr	r0, [sp, #4]
   111c4:	b002      	add	sp, #8
   111c6:	4770      	bx	lr

000111c8 <_lv_ll_get_prev>:
{
   111c8:	b082      	sub	sp, #8
    void * prev = NULL;
   111ca:	2300      	movs	r3, #0
   111cc:	9301      	str	r3, [sp, #4]
    if(ll_p != NULL) {
   111ce:	b168      	cbz	r0, 111ec <_lv_ll_get_prev+0x24>
        _lv_memcpy_small(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
   111d0:	6802      	ldr	r2, [r0, #0]
   111d2:	188b      	adds	r3, r1, r2
   111d4:	5c8a      	ldrb	r2, [r1, r2]
   111d6:	f88d 2004 	strb.w	r2, [sp, #4]
   111da:	785a      	ldrb	r2, [r3, #1]
   111dc:	f88d 2005 	strb.w	r2, [sp, #5]
   111e0:	789a      	ldrb	r2, [r3, #2]
   111e2:	f88d 2006 	strb.w	r2, [sp, #6]
   111e6:	78db      	ldrb	r3, [r3, #3]
   111e8:	f88d 3007 	strb.w	r3, [sp, #7]
}
   111ec:	9801      	ldr	r0, [sp, #4]
   111ee:	b002      	add	sp, #8
   111f0:	4770      	bx	lr
	...

000111f4 <_lv_ll_ins_prev>:
    if(NULL == ll_p || NULL == n_act) return NULL;
   111f4:	b360      	cbz	r0, 11250 <_lv_ll_ins_prev+0x5c>
{
   111f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   111fa:	4604      	mov	r4, r0
    if(NULL == ll_p || NULL == n_act) return NULL;
   111fc:	b351      	cbz	r1, 11254 <_lv_ll_ins_prev+0x60>
   111fe:	460d      	mov	r5, r1
    if(_lv_ll_get_head(ll_p) == n_act) {
   11200:	6843      	ldr	r3, [r0, #4]
   11202:	4299      	cmp	r1, r3
   11204:	d020      	beq.n	11248 <_lv_ll_ins_prev+0x54>
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
   11206:	6800      	ldr	r0, [r0, #0]
   11208:	3008      	adds	r0, #8
   1120a:	4b15      	ldr	r3, [pc, #84]	; (11260 <_lv_ll_ins_prev+0x6c>)
   1120c:	4798      	blx	r3
        if(n_new == NULL) return NULL;
   1120e:	4606      	mov	r6, r0
   11210:	b318      	cbz	r0, 1125a <_lv_ll_ins_prev+0x66>
        n_prev = _lv_ll_get_prev(ll_p, n_act);
   11212:	4629      	mov	r1, r5
   11214:	4620      	mov	r0, r4
   11216:	4b13      	ldr	r3, [pc, #76]	; (11264 <_lv_ll_ins_prev+0x70>)
   11218:	4798      	blx	r3
   1121a:	4680      	mov	r8, r0
        node_set_next(ll_p, n_prev, n_new);
   1121c:	4632      	mov	r2, r6
   1121e:	4601      	mov	r1, r0
   11220:	4620      	mov	r0, r4
   11222:	4f11      	ldr	r7, [pc, #68]	; (11268 <_lv_ll_ins_prev+0x74>)
   11224:	47b8      	blx	r7
        node_set_prev(ll_p, n_new, n_prev);
   11226:	4642      	mov	r2, r8
   11228:	4631      	mov	r1, r6
   1122a:	4620      	mov	r0, r4
   1122c:	f8df 8040 	ldr.w	r8, [pc, #64]	; 11270 <_lv_ll_ins_prev+0x7c>
   11230:	47c0      	blx	r8
        node_set_prev(ll_p, n_act, n_new);
   11232:	4632      	mov	r2, r6
   11234:	4629      	mov	r1, r5
   11236:	4620      	mov	r0, r4
   11238:	47c0      	blx	r8
        node_set_next(ll_p, n_new, n_act);
   1123a:	462a      	mov	r2, r5
   1123c:	4631      	mov	r1, r6
   1123e:	4620      	mov	r0, r4
   11240:	47b8      	blx	r7
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
   11242:	4630      	mov	r0, r6
   11244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        n_new = _lv_ll_ins_head(ll_p);
   11248:	4b08      	ldr	r3, [pc, #32]	; (1126c <_lv_ll_ins_prev+0x78>)
   1124a:	4798      	blx	r3
   1124c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(NULL == ll_p || NULL == n_act) return NULL;
   11250:	2000      	movs	r0, #0
   11252:	4770      	bx	lr
   11254:	4608      	mov	r0, r1
   11256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
}
   1125a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1125e:	bf00      	nop
   11260:	00011575 	.word	0x00011575
   11264:	000111c9 	.word	0x000111c9
   11268:	00011059 	.word	0x00011059
   1126c:	000110f1 	.word	0x000110f1
   11270:	00011099 	.word	0x00011099

00011274 <_lv_ll_remove>:
{
   11274:	b570      	push	{r4, r5, r6, lr}
   11276:	460d      	mov	r5, r1
    if(ll_p != NULL) {
   11278:	4604      	mov	r4, r0
   1127a:	b350      	cbz	r0, 112d2 <_lv_ll_remove+0x5e>
    if(_lv_ll_get_head(ll_p) == node_p) {
   1127c:	6843      	ldr	r3, [r0, #4]
   1127e:	4299      	cmp	r1, r3
   11280:	d029      	beq.n	112d6 <_lv_ll_remove+0x62>
    else if(_lv_ll_get_tail(ll_p) == node_p) {
   11282:	6883      	ldr	r3, [r0, #8]
   11284:	4299      	cmp	r1, r3
   11286:	d017      	beq.n	112b8 <_lv_ll_remove+0x44>
        lv_ll_node_t * n_prev = _lv_ll_get_prev(ll_p, node_p);
   11288:	4629      	mov	r1, r5
   1128a:	4620      	mov	r0, r4
   1128c:	4b18      	ldr	r3, [pc, #96]	; (112f0 <_lv_ll_remove+0x7c>)
   1128e:	4798      	blx	r3
   11290:	4606      	mov	r6, r0
        lv_ll_node_t * n_next = _lv_ll_get_next(ll_p, node_p);
   11292:	4629      	mov	r1, r5
   11294:	4620      	mov	r0, r4
   11296:	4b17      	ldr	r3, [pc, #92]	; (112f4 <_lv_ll_remove+0x80>)
   11298:	4798      	blx	r3
   1129a:	4605      	mov	r5, r0
        node_set_next(ll_p, n_prev, n_next);
   1129c:	4602      	mov	r2, r0
   1129e:	4631      	mov	r1, r6
   112a0:	4620      	mov	r0, r4
   112a2:	4b15      	ldr	r3, [pc, #84]	; (112f8 <_lv_ll_remove+0x84>)
   112a4:	4798      	blx	r3
        node_set_prev(ll_p, n_next, n_prev);
   112a6:	4632      	mov	r2, r6
   112a8:	4629      	mov	r1, r5
   112aa:	4620      	mov	r0, r4
   112ac:	4b13      	ldr	r3, [pc, #76]	; (112fc <_lv_ll_remove+0x88>)
   112ae:	4798      	blx	r3
}
   112b0:	bd70      	pop	{r4, r5, r6, pc}
            ll_p->tail = NULL;
   112b2:	2300      	movs	r3, #0
   112b4:	60a3      	str	r3, [r4, #8]
   112b6:	bd70      	pop	{r4, r5, r6, pc}
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
   112b8:	4b0d      	ldr	r3, [pc, #52]	; (112f0 <_lv_ll_remove+0x7c>)
   112ba:	4798      	blx	r3
   112bc:	60a0      	str	r0, [r4, #8]
        if(ll_p->tail == NULL) {
   112be:	b128      	cbz	r0, 112cc <_lv_ll_remove+0x58>
            node_set_next(ll_p, ll_p->tail, NULL);
   112c0:	2200      	movs	r2, #0
   112c2:	4601      	mov	r1, r0
   112c4:	4620      	mov	r0, r4
   112c6:	4b0c      	ldr	r3, [pc, #48]	; (112f8 <_lv_ll_remove+0x84>)
   112c8:	4798      	blx	r3
   112ca:	bd70      	pop	{r4, r5, r6, pc}
            ll_p->head = NULL;
   112cc:	2300      	movs	r3, #0
   112ce:	6063      	str	r3, [r4, #4]
   112d0:	bd70      	pop	{r4, r5, r6, pc}
    if(_lv_ll_get_head(ll_p) == node_p) {
   112d2:	2900      	cmp	r1, #0
   112d4:	d1d8      	bne.n	11288 <_lv_ll_remove+0x14>
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
   112d6:	4629      	mov	r1, r5
   112d8:	4620      	mov	r0, r4
   112da:	4b06      	ldr	r3, [pc, #24]	; (112f4 <_lv_ll_remove+0x80>)
   112dc:	4798      	blx	r3
   112de:	6060      	str	r0, [r4, #4]
        if(ll_p->head == NULL) {
   112e0:	2800      	cmp	r0, #0
   112e2:	d0e6      	beq.n	112b2 <_lv_ll_remove+0x3e>
            node_set_prev(ll_p, ll_p->head, NULL);
   112e4:	2200      	movs	r2, #0
   112e6:	4601      	mov	r1, r0
   112e8:	4620      	mov	r0, r4
   112ea:	4b04      	ldr	r3, [pc, #16]	; (112fc <_lv_ll_remove+0x88>)
   112ec:	4798      	blx	r3
   112ee:	bd70      	pop	{r4, r5, r6, pc}
   112f0:	000111c9 	.word	0x000111c9
   112f4:	0001119d 	.word	0x0001119d
   112f8:	00011059 	.word	0x00011059
   112fc:	00011099 	.word	0x00011099

00011300 <_lv_ll_chg_list>:
{
   11300:	b570      	push	{r4, r5, r6, lr}
   11302:	460c      	mov	r4, r1
   11304:	4615      	mov	r5, r2
   11306:	461e      	mov	r6, r3
    _lv_ll_remove(ll_ori_p, node);
   11308:	4611      	mov	r1, r2
   1130a:	4b17      	ldr	r3, [pc, #92]	; (11368 <_lv_ll_chg_list+0x68>)
   1130c:	4798      	blx	r3
    if(head) {
   1130e:	b1ae      	cbz	r6, 1133c <_lv_ll_chg_list+0x3c>
        node_set_prev(ll_new_p, node, NULL);
   11310:	2200      	movs	r2, #0
   11312:	4629      	mov	r1, r5
   11314:	4620      	mov	r0, r4
   11316:	4b15      	ldr	r3, [pc, #84]	; (1136c <_lv_ll_chg_list+0x6c>)
   11318:	4798      	blx	r3
        node_set_next(ll_new_p, node, ll_new_p->head);
   1131a:	6862      	ldr	r2, [r4, #4]
   1131c:	4629      	mov	r1, r5
   1131e:	4620      	mov	r0, r4
   11320:	4b13      	ldr	r3, [pc, #76]	; (11370 <_lv_ll_chg_list+0x70>)
   11322:	4798      	blx	r3
        if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
   11324:	6861      	ldr	r1, [r4, #4]
   11326:	b119      	cbz	r1, 11330 <_lv_ll_chg_list+0x30>
            node_set_prev(ll_new_p, ll_new_p->head, node);
   11328:	462a      	mov	r2, r5
   1132a:	4620      	mov	r0, r4
   1132c:	4b0f      	ldr	r3, [pc, #60]	; (1136c <_lv_ll_chg_list+0x6c>)
   1132e:	4798      	blx	r3
        ll_new_p->head = node;       /*Set the new head in the dsc.*/
   11330:	6065      	str	r5, [r4, #4]
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
   11332:	68a3      	ldr	r3, [r4, #8]
   11334:	b103      	cbz	r3, 11338 <_lv_ll_chg_list+0x38>
   11336:	bd70      	pop	{r4, r5, r6, pc}
            ll_new_p->tail = node;
   11338:	60a5      	str	r5, [r4, #8]
   1133a:	bd70      	pop	{r4, r5, r6, pc}
        node_set_prev(ll_new_p, node, ll_new_p->tail);
   1133c:	68a2      	ldr	r2, [r4, #8]
   1133e:	4629      	mov	r1, r5
   11340:	4620      	mov	r0, r4
   11342:	4b0a      	ldr	r3, [pc, #40]	; (1136c <_lv_ll_chg_list+0x6c>)
   11344:	4798      	blx	r3
        node_set_next(ll_new_p, node, NULL);
   11346:	2200      	movs	r2, #0
   11348:	4629      	mov	r1, r5
   1134a:	4620      	mov	r0, r4
   1134c:	4b08      	ldr	r3, [pc, #32]	; (11370 <_lv_ll_chg_list+0x70>)
   1134e:	4798      	blx	r3
        if(ll_new_p->tail != NULL) { /*If there is old tail then after it goes the new*/
   11350:	68a1      	ldr	r1, [r4, #8]
   11352:	b119      	cbz	r1, 1135c <_lv_ll_chg_list+0x5c>
            node_set_next(ll_new_p, ll_new_p->tail, node);
   11354:	462a      	mov	r2, r5
   11356:	4620      	mov	r0, r4
   11358:	4b05      	ldr	r3, [pc, #20]	; (11370 <_lv_ll_chg_list+0x70>)
   1135a:	4798      	blx	r3
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
   1135c:	60a5      	str	r5, [r4, #8]
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
   1135e:	6863      	ldr	r3, [r4, #4]
   11360:	2b00      	cmp	r3, #0
   11362:	d1e8      	bne.n	11336 <_lv_ll_chg_list+0x36>
            ll_new_p->head = node;
   11364:	6065      	str	r5, [r4, #4]
}
   11366:	e7e6      	b.n	11336 <_lv_ll_chg_list+0x36>
   11368:	00011275 	.word	0x00011275
   1136c:	00011099 	.word	0x00011099
   11370:	00011059 	.word	0x00011059

00011374 <_lv_ll_move_before>:
    if(n_act == n_after) return; /*Can't move before itself*/
   11374:	4291      	cmp	r1, r2
   11376:	d04c      	beq.n	11412 <_lv_ll_move_before+0x9e>
{
   11378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1137c:	4617      	mov	r7, r2
   1137e:	460c      	mov	r4, r1
   11380:	4605      	mov	r5, r0
    if(n_after != NULL)
   11382:	b312      	cbz	r2, 113ca <_lv_ll_move_before+0x56>
        n_before = _lv_ll_get_prev(ll_p, n_after);
   11384:	4611      	mov	r1, r2
   11386:	4b23      	ldr	r3, [pc, #140]	; (11414 <_lv_ll_move_before+0xa0>)
   11388:	4798      	blx	r3
   1138a:	4606      	mov	r6, r0
    if(n_act == n_before) return; /*Already before `n_after`*/
   1138c:	4284      	cmp	r4, r0
   1138e:	d01a      	beq.n	113c6 <_lv_ll_move_before+0x52>
    _lv_ll_remove(ll_p, n_act);
   11390:	4621      	mov	r1, r4
   11392:	4628      	mov	r0, r5
   11394:	4b20      	ldr	r3, [pc, #128]	; (11418 <_lv_ll_move_before+0xa4>)
   11396:	4798      	blx	r3
    node_set_next(ll_p, n_before, n_act);
   11398:	4622      	mov	r2, r4
   1139a:	4631      	mov	r1, r6
   1139c:	4628      	mov	r0, r5
   1139e:	f8df 807c 	ldr.w	r8, [pc, #124]	; 1141c <_lv_ll_move_before+0xa8>
   113a2:	47c0      	blx	r8
    node_set_prev(ll_p, n_act, n_before);
   113a4:	4632      	mov	r2, r6
   113a6:	4621      	mov	r1, r4
   113a8:	4628      	mov	r0, r5
   113aa:	f8df 9074 	ldr.w	r9, [pc, #116]	; 11420 <_lv_ll_move_before+0xac>
   113ae:	47c8      	blx	r9
    node_set_prev(ll_p, n_after, n_act);
   113b0:	4622      	mov	r2, r4
   113b2:	4639      	mov	r1, r7
   113b4:	4628      	mov	r0, r5
   113b6:	47c8      	blx	r9
    node_set_next(ll_p, n_act, n_after);
   113b8:	463a      	mov	r2, r7
   113ba:	4621      	mov	r1, r4
   113bc:	4628      	mov	r0, r5
   113be:	47c0      	blx	r8
    if(n_before == NULL) ll_p->head = n_act;
   113c0:	b306      	cbz	r6, 11404 <_lv_ll_move_before+0x90>
   113c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   113c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(ll_p != NULL) {
   113ca:	b1f0      	cbz	r0, 1140a <_lv_ll_move_before+0x96>
        tail = ll_p->tail;
   113cc:	6886      	ldr	r6, [r0, #8]
    if(n_act == n_before) return; /*Already before `n_after`*/
   113ce:	42b4      	cmp	r4, r6
   113d0:	d01d      	beq.n	1140e <_lv_ll_move_before+0x9a>
    _lv_ll_remove(ll_p, n_act);
   113d2:	4621      	mov	r1, r4
   113d4:	4628      	mov	r0, r5
   113d6:	4b10      	ldr	r3, [pc, #64]	; (11418 <_lv_ll_move_before+0xa4>)
   113d8:	4798      	blx	r3
    node_set_next(ll_p, n_before, n_act);
   113da:	4622      	mov	r2, r4
   113dc:	4631      	mov	r1, r6
   113de:	4628      	mov	r0, r5
   113e0:	4f0e      	ldr	r7, [pc, #56]	; (1141c <_lv_ll_move_before+0xa8>)
   113e2:	47b8      	blx	r7
    node_set_prev(ll_p, n_act, n_before);
   113e4:	4632      	mov	r2, r6
   113e6:	4621      	mov	r1, r4
   113e8:	4628      	mov	r0, r5
   113ea:	f8df 8034 	ldr.w	r8, [pc, #52]	; 11420 <_lv_ll_move_before+0xac>
   113ee:	47c0      	blx	r8
    node_set_prev(ll_p, n_after, n_act);
   113f0:	4622      	mov	r2, r4
   113f2:	2100      	movs	r1, #0
   113f4:	4628      	mov	r0, r5
   113f6:	47c0      	blx	r8
    node_set_next(ll_p, n_act, n_after);
   113f8:	2200      	movs	r2, #0
   113fa:	4621      	mov	r1, r4
   113fc:	4628      	mov	r0, r5
   113fe:	47b8      	blx	r7
    if(n_after == NULL) ll_p->tail = n_act;
   11400:	60ac      	str	r4, [r5, #8]
   11402:	e7dd      	b.n	113c0 <_lv_ll_move_before+0x4c>
    if(n_before == NULL) ll_p->head = n_act;
   11404:	606c      	str	r4, [r5, #4]
   11406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    void * tail = NULL;
   1140a:	4616      	mov	r6, r2
   1140c:	e7df      	b.n	113ce <_lv_ll_move_before+0x5a>
   1140e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11412:	4770      	bx	lr
   11414:	000111c9 	.word	0x000111c9
   11418:	00011275 	.word	0x00011275
   1141c:	00011059 	.word	0x00011059
   11420:	00011099 	.word	0x00011099

00011424 <_lv_ll_is_empty>:
    if(ll_p == NULL) return true;
   11424:	b140      	cbz	r0, 11438 <_lv_ll_is_empty+0x14>
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
   11426:	6842      	ldr	r2, [r0, #4]
   11428:	b10a      	cbz	r2, 1142e <_lv_ll_is_empty+0xa>
    return false;
   1142a:	2000      	movs	r0, #0
}
   1142c:	4770      	bx	lr
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
   1142e:	6880      	ldr	r0, [r0, #8]
   11430:	fab0 f080 	clz	r0, r0
   11434:	0940      	lsrs	r0, r0, #5
   11436:	4770      	bx	lr
    if(ll_p == NULL) return true;
   11438:	2001      	movs	r0, #1
   1143a:	4770      	bx	lr

0001143c <_lv_trigo_sin>:
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
LV_ATTRIBUTE_FAST_MEM int16_t _lv_trigo_sin(int16_t angle)
{
    int16_t ret = 0;
    angle       = angle % 360;
   1143c:	4b1b      	ldr	r3, [pc, #108]	; (114ac <_lv_trigo_sin+0x70>)
   1143e:	fb83 2300 	smull	r2, r3, r3, r0
   11442:	181a      	adds	r2, r3, r0
   11444:	17c3      	asrs	r3, r0, #31
   11446:	ebc3 2322 	rsb	r3, r3, r2, asr #8
   1144a:	f44f 72b4 	mov.w	r2, #360	; 0x168
   1144e:	fb02 0013 	mls	r0, r2, r3, r0
   11452:	b200      	sxth	r0, r0

    if(angle < 0) angle = 360 + angle;
   11454:	2800      	cmp	r0, #0
   11456:	bfbc      	itt	lt
   11458:	1880      	addlt	r0, r0, r2
   1145a:	b200      	sxthlt	r0, r0

    if(angle < 90) {
   1145c:	2859      	cmp	r0, #89	; 0x59
   1145e:	dd13      	ble.n	11488 <_lv_trigo_sin+0x4c>
        ret = sin0_90_table[angle];
    }
    else if(angle >= 90 && angle < 180) {
   11460:	b280      	uxth	r0, r0
   11462:	f1a0 035a 	sub.w	r3, r0, #90	; 0x5a
   11466:	b29b      	uxth	r3, r3
   11468:	2b59      	cmp	r3, #89	; 0x59
   1146a:	d911      	bls.n	11490 <_lv_trigo_sin+0x54>
        angle = 180 - angle;
        ret   = sin0_90_table[angle];
    }
    else if(angle >= 180 && angle < 270) {
   1146c:	f1a0 03b4 	sub.w	r3, r0, #180	; 0xb4
   11470:	b29b      	uxth	r3, r3
   11472:	2b59      	cmp	r3, #89	; 0x59
   11474:	d913      	bls.n	1149e <_lv_trigo_sin+0x62>
        angle = angle - 180;
        ret   = -sin0_90_table[angle];
    }
    else {   /*angle >=270*/
        angle = 360 - angle;
   11476:	f5c0 70b4 	rsb	r0, r0, #360	; 0x168
        ret   = -sin0_90_table[angle];
   1147a:	b200      	sxth	r0, r0
   1147c:	4b0c      	ldr	r3, [pc, #48]	; (114b0 <_lv_trigo_sin+0x74>)
   1147e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   11482:	4240      	negs	r0, r0
   11484:	b200      	sxth	r0, r0
    }

    return ret;
}
   11486:	4770      	bx	lr
        ret = sin0_90_table[angle];
   11488:	4b09      	ldr	r3, [pc, #36]	; (114b0 <_lv_trigo_sin+0x74>)
   1148a:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
   1148e:	4770      	bx	lr
        angle = 180 - angle;
   11490:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
        ret   = sin0_90_table[angle];
   11494:	b200      	sxth	r0, r0
   11496:	4b06      	ldr	r3, [pc, #24]	; (114b0 <_lv_trigo_sin+0x74>)
   11498:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
   1149c:	4770      	bx	lr
        ret   = -sin0_90_table[angle];
   1149e:	b21b      	sxth	r3, r3
   114a0:	4a03      	ldr	r2, [pc, #12]	; (114b0 <_lv_trigo_sin+0x74>)
   114a2:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
   114a6:	4240      	negs	r0, r0
   114a8:	b200      	sxth	r0, r0
   114aa:	4770      	bx	lr
   114ac:	b60b60b7 	.word	0xb60b60b7
   114b0:	0001b6c0 	.word	0x0001b6c0

000114b4 <_lv_sqrt>:
 * If root < 16: mask = 0x80
 * If root < 256: mask = 0x800
 * Else: mask = 0x8000
 */
LV_ATTRIBUTE_FAST_MEM void _lv_sqrt(uint32_t x, lv_sqrt_res_t * q, uint32_t mask)
{
   114b4:	b430      	push	{r4, r5}
    x = x << 8; /*To get 4 bit precision. (sqrt(256) = 16 = 4 bit)*/
   114b6:	0200      	lsls	r0, r0, #8

    uint32_t root = 0;
   114b8:	2400      	movs	r4, #0
    uint32_t trial;
    // http://ww1.microchip.com/...en/AppNotes/91040a.pdf
    do {
        trial = root + mask;
   114ba:	1913      	adds	r3, r2, r4
        if((uint32_t)trial * trial <= x) root = trial;
   114bc:	fb03 f503 	mul.w	r5, r3, r3
   114c0:	42a8      	cmp	r0, r5
   114c2:	bf28      	it	cs
   114c4:	461c      	movcs	r4, r3
        mask = mask >> 1;
    } while(mask);
   114c6:	0852      	lsrs	r2, r2, #1
   114c8:	d1f7      	bne.n	114ba <_lv_sqrt+0x6>

    q->i = (uint32_t) root >> 4;
   114ca:	0923      	lsrs	r3, r4, #4
   114cc:	800b      	strh	r3, [r1, #0]
    q->f = (uint32_t)(root & 0xf) << 4;
   114ce:	0124      	lsls	r4, r4, #4
   114d0:	b2e4      	uxtb	r4, r4
   114d2:	804c      	strh	r4, [r1, #2]
}
   114d4:	bc30      	pop	{r4, r5}
   114d6:	4770      	bx	lr

000114d8 <ent_get_next>:
 */
static lv_mem_ent_t * ent_get_next(lv_mem_ent_t * act_e)
{
    lv_mem_ent_t * next_e = NULL;

    if(act_e == NULL) { /*NULL means: get the first entry*/
   114d8:	4603      	mov	r3, r0
   114da:	b160      	cbz	r0, 114f6 <ent_get_next+0x1e>
        next_e = (lv_mem_ent_t *)work_mem;
    }
    else {   /*Get the next entry */
        uint8_t * data = &act_e->first_data;
   114dc:	3004      	adds	r0, #4
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
   114de:	681b      	ldr	r3, [r3, #0]
   114e0:	eb00 0053 	add.w	r0, r0, r3, lsr #1

        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
   114e4:	1d02      	adds	r2, r0, #4
   114e6:	4b05      	ldr	r3, [pc, #20]	; (114fc <ent_get_next+0x24>)
   114e8:	681b      	ldr	r3, [r3, #0]
   114ea:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   114ee:	429a      	cmp	r2, r3
   114f0:	bf28      	it	cs
   114f2:	2000      	movcs	r0, #0
    }

    return next_e;
}
   114f4:	4770      	bx	lr
        next_e = (lv_mem_ent_t *)work_mem;
   114f6:	4b01      	ldr	r3, [pc, #4]	; (114fc <ent_get_next+0x24>)
   114f8:	6818      	ldr	r0, [r3, #0]
   114fa:	4770      	bx	lr
   114fc:	20002b88 	.word	0x20002b88

00011500 <ent_trunc>:
        size = size & (~0x7);
        size += 8;
    }
#else
    /*Round the size up to 4*/
    if(size & 0x3) {
   11500:	f011 0f03 	tst.w	r1, #3
        size = size & (~0x3);
   11504:	bf1c      	itt	ne
   11506:	f021 0103 	bicne.w	r1, r1, #3
        size += 4;
   1150a:	3104      	addne	r1, #4
    }
#endif

    /*Don't let empty space only for a header without data*/
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
   1150c:	6803      	ldr	r3, [r0, #0]
   1150e:	f3c3 035e 	ubfx	r3, r3, #1, #31
   11512:	1d0a      	adds	r2, r1, #4
   11514:	4293      	cmp	r3, r2
   11516:	d017      	beq.n	11548 <ent_trunc+0x48>
        size = e->header.s.d_size;
    }

    /* Create the new entry after the current if there is space for it */
    if(e->header.s.d_size != size) {
   11518:	4299      	cmp	r1, r3
   1151a:	d016      	beq.n	1154a <ent_trunc+0x4a>
{
   1151c:	b410      	push	{r4}
        uint8_t * e_data             = &e->first_data;
   1151e:	1d02      	adds	r2, r0, #4
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
        after_new_e->header.s.used   = 0;
   11520:	5c53      	ldrb	r3, [r2, r1]
   11522:	f36f 0300 	bfc	r3, #0, #1
   11526:	5453      	strb	r3, [r2, r1]
        after_new_e->header.s.d_size = (uint32_t)e->header.s.d_size - size - sizeof(lv_mem_header_t);
   11528:	6803      	ldr	r3, [r0, #0]
   1152a:	f3c3 035e 	ubfx	r3, r3, #1, #31
   1152e:	3b04      	subs	r3, #4
   11530:	1a5b      	subs	r3, r3, r1
   11532:	5854      	ldr	r4, [r2, r1]
   11534:	f363 045f 	bfi	r4, r3, #1, #31
   11538:	5054      	str	r4, [r2, r1]
    }

    /* Set the new size for the original entry */
    e->header.s.d_size = (uint32_t)size;
   1153a:	6803      	ldr	r3, [r0, #0]
   1153c:	f361 035f 	bfi	r3, r1, #1, #31
   11540:	6003      	str	r3, [r0, #0]
}
   11542:	f85d 4b04 	ldr.w	r4, [sp], #4
   11546:	4770      	bx	lr
        size = e->header.s.d_size;
   11548:	4611      	mov	r1, r2
    e->header.s.d_size = (uint32_t)size;
   1154a:	6803      	ldr	r3, [r0, #0]
   1154c:	f361 035f 	bfi	r3, r1, #1, #31
   11550:	6003      	str	r3, [r0, #0]
   11552:	4770      	bx	lr

00011554 <_lv_mem_init>:
    work_mem = (uint8_t *)work_mem_int;
   11554:	4b06      	ldr	r3, [pc, #24]	; (11570 <_lv_mem_init+0x1c>)
   11556:	1d1a      	adds	r2, r3, #4
   11558:	601a      	str	r2, [r3, #0]
    full->header.s.used = 0;
   1155a:	791a      	ldrb	r2, [r3, #4]
   1155c:	f36f 0200 	bfc	r2, #0, #1
   11560:	711a      	strb	r2, [r3, #4]
    full->header.s.d_size = LV_MEM_SIZE - sizeof(lv_mem_header_t);
   11562:	685a      	ldr	r2, [r3, #4]
   11564:	f647 71fc 	movw	r1, #32764	; 0x7ffc
   11568:	f361 025f 	bfi	r2, r1, #1, #31
   1156c:	605a      	str	r2, [r3, #4]
   1156e:	4770      	bx	lr
   11570:	20002b88 	.word	0x20002b88

00011574 <lv_mem_alloc>:
    if(size == 0) {
   11574:	b318      	cbz	r0, 115be <lv_mem_alloc+0x4a>
{
   11576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11578:	4605      	mov	r5, r0
    if(size & 0x3) {
   1157a:	f010 0f03 	tst.w	r0, #3
        size = size & (~0x3);
   1157e:	bf1c      	itt	ne
   11580:	f020 0503 	bicne.w	r5, r0, #3
        size += 4;
   11584:	3504      	addne	r5, #4
    lv_mem_ent_t * e = NULL;
   11586:	2400      	movs	r4, #0
        e = ent_get_next(e);
   11588:	4e0f      	ldr	r6, [pc, #60]	; (115c8 <lv_mem_alloc+0x54>)
        ent_trunc(e, size);
   1158a:	4f10      	ldr	r7, [pc, #64]	; (115cc <lv_mem_alloc+0x58>)
   1158c:	e008      	b.n	115a0 <lv_mem_alloc+0x2c>
   1158e:	4629      	mov	r1, r5
   11590:	47b8      	blx	r7
        e->header.s.used = 1;
   11592:	7823      	ldrb	r3, [r4, #0]
   11594:	f043 0301 	orr.w	r3, r3, #1
   11598:	4620      	mov	r0, r4
   1159a:	f800 3b04 	strb.w	r3, [r0], #4
    } while(e != NULL && alloc == NULL);
   1159e:	b968      	cbnz	r0, 115bc <lv_mem_alloc+0x48>
        e = ent_get_next(e);
   115a0:	4620      	mov	r0, r4
   115a2:	47b0      	blx	r6
        if(e != NULL) {
   115a4:	4604      	mov	r4, r0
   115a6:	b160      	cbz	r0, 115c2 <lv_mem_alloc+0x4e>
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
   115a8:	7803      	ldrb	r3, [r0, #0]
   115aa:	f013 0f01 	tst.w	r3, #1
   115ae:	d1f7      	bne.n	115a0 <lv_mem_alloc+0x2c>
   115b0:	6803      	ldr	r3, [r0, #0]
   115b2:	f3c3 035e 	ubfx	r3, r3, #1, #31
   115b6:	429d      	cmp	r5, r3
   115b8:	d9e9      	bls.n	1158e <lv_mem_alloc+0x1a>
   115ba:	e7f1      	b.n	115a0 <lv_mem_alloc+0x2c>
   115bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return &zero_mem;
   115be:	4804      	ldr	r0, [pc, #16]	; (115d0 <lv_mem_alloc+0x5c>)
   115c0:	4770      	bx	lr
   115c2:	2000      	movs	r0, #0
}
   115c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   115c6:	bf00      	nop
   115c8:	000114d9 	.word	0x000114d9
   115cc:	00011501 	.word	0x00011501
   115d0:	2000ab8c 	.word	0x2000ab8c

000115d4 <lv_mem_defrag>:
{
   115d4:	b538      	push	{r3, r4, r5, lr}
    e_free = ent_get_next(NULL);
   115d6:	2000      	movs	r0, #0
   115d8:	4b16      	ldr	r3, [pc, #88]	; (11634 <lv_mem_defrag+0x60>)
   115da:	4798      	blx	r3
   115dc:	4604      	mov	r4, r0
        e_next = ent_get_next(e_free);
   115de:	4d15      	ldr	r5, [pc, #84]	; (11634 <lv_mem_defrag+0x60>)
   115e0:	e01b      	b.n	1161a <lv_mem_defrag+0x46>
   115e2:	bd38      	pop	{r3, r4, r5, pc}
   115e4:	4620      	mov	r0, r4
   115e6:	47a8      	blx	r5
        while(e_next != NULL) {
   115e8:	4601      	mov	r1, r0
   115ea:	b308      	cbz	r0, 11630 <lv_mem_defrag+0x5c>
            if(e_next->header.s.used == 0) {
   115ec:	7803      	ldrb	r3, [r0, #0]
   115ee:	f013 0f01 	tst.w	r3, #1
   115f2:	d111      	bne.n	11618 <lv_mem_defrag+0x44>
                e_free->header.s.d_size += e_next->header.s.d_size + sizeof(e_next->header);
   115f4:	6823      	ldr	r3, [r4, #0]
   115f6:	f3c3 025e 	ubfx	r2, r3, #1, #31
   115fa:	3204      	adds	r2, #4
   115fc:	6808      	ldr	r0, [r1, #0]
   115fe:	eb02 0250 	add.w	r2, r2, r0, lsr #1
   11602:	f362 035f 	bfi	r3, r2, #1, #31
   11606:	6023      	str	r3, [r4, #0]
            e_next = ent_get_next(e_next);
   11608:	4608      	mov	r0, r1
   1160a:	47a8      	blx	r5
        while(e_next != NULL) {
   1160c:	4601      	mov	r1, r0
   1160e:	b170      	cbz	r0, 1162e <lv_mem_defrag+0x5a>
            if(e_next->header.s.used == 0) {
   11610:	780b      	ldrb	r3, [r1, #0]
   11612:	f013 0f01 	tst.w	r3, #1
   11616:	d0ed      	beq.n	115f4 <lv_mem_defrag+0x20>
{
   11618:	460c      	mov	r4, r1
        while(e_free != NULL) {
   1161a:	2c00      	cmp	r4, #0
   1161c:	d0e1      	beq.n	115e2 <lv_mem_defrag+0xe>
            if(e_free->header.s.used != 0) {
   1161e:	7823      	ldrb	r3, [r4, #0]
   11620:	f013 0f01 	tst.w	r3, #1
   11624:	d0de      	beq.n	115e4 <lv_mem_defrag+0x10>
                e_free = ent_get_next(e_free);
   11626:	4620      	mov	r0, r4
   11628:	47a8      	blx	r5
   1162a:	4604      	mov	r4, r0
   1162c:	e7f5      	b.n	1161a <lv_mem_defrag+0x46>
   1162e:	bd38      	pop	{r3, r4, r5, pc}
   11630:	bd38      	pop	{r3, r4, r5, pc}
   11632:	bf00      	nop
   11634:	000114d9 	.word	0x000114d9

00011638 <lv_mem_free>:
{
   11638:	b538      	push	{r3, r4, r5, lr}
    if(data == &zero_mem) return;
   1163a:	4b1e      	ldr	r3, [pc, #120]	; (116b4 <lv_mem_free+0x7c>)
   1163c:	4298      	cmp	r0, r3
   1163e:	d038      	beq.n	116b2 <lv_mem_free+0x7a>
    if(data == NULL) return;
   11640:	2800      	cmp	r0, #0
   11642:	d036      	beq.n	116b2 <lv_mem_free+0x7a>
   11644:	4604      	mov	r4, r0
    e->header.s.used = 0;
   11646:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   1164a:	f36f 0300 	bfc	r3, #0, #1
   1164e:	f800 3c04 	strb.w	r3, [r0, #-4]
    full_defrag_cnt++;
   11652:	4a19      	ldr	r2, [pc, #100]	; (116b8 <lv_mem_free+0x80>)
   11654:	f8b2 3940 	ldrh.w	r3, [r2, #2368]	; 0x940
   11658:	3301      	adds	r3, #1
   1165a:	b29b      	uxth	r3, r3
   1165c:	f8a2 3940 	strh.w	r3, [r2, #2368]	; 0x940
    if(full_defrag_cnt < LV_MEM_FULL_DEFRAG_CNT) {
   11660:	2b0f      	cmp	r3, #15
   11662:	d820      	bhi.n	116a6 <lv_mem_free+0x6e>
        e_next = ent_get_next(e);
   11664:	3804      	subs	r0, #4
   11666:	4b15      	ldr	r3, [pc, #84]	; (116bc <lv_mem_free+0x84>)
   11668:	4798      	blx	r3
        while(e_next != NULL) {
   1166a:	4601      	mov	r1, r0
   1166c:	b308      	cbz	r0, 116b2 <lv_mem_free+0x7a>
            if(e_next->header.s.used == 0) {
   1166e:	7803      	ldrb	r3, [r0, #0]
   11670:	f013 0f01 	tst.w	r3, #1
   11674:	d115      	bne.n	116a2 <lv_mem_free+0x6a>
            e_next = ent_get_next(e_next);
   11676:	4d11      	ldr	r5, [pc, #68]	; (116bc <lv_mem_free+0x84>)
                e->header.s.d_size += e_next->header.s.d_size + sizeof(e->header);
   11678:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1167c:	f3c3 025e 	ubfx	r2, r3, #1, #31
   11680:	3204      	adds	r2, #4
   11682:	6808      	ldr	r0, [r1, #0]
   11684:	eb02 0250 	add.w	r2, r2, r0, lsr #1
   11688:	f362 035f 	bfi	r3, r2, #1, #31
   1168c:	f844 3c04 	str.w	r3, [r4, #-4]
            e_next = ent_get_next(e_next);
   11690:	4608      	mov	r0, r1
   11692:	47a8      	blx	r5
        while(e_next != NULL) {
   11694:	4601      	mov	r1, r0
   11696:	b128      	cbz	r0, 116a4 <lv_mem_free+0x6c>
            if(e_next->header.s.used == 0) {
   11698:	780b      	ldrb	r3, [r1, #0]
   1169a:	f013 0f01 	tst.w	r3, #1
   1169e:	d0eb      	beq.n	11678 <lv_mem_free+0x40>
   116a0:	bd38      	pop	{r3, r4, r5, pc}
   116a2:	bd38      	pop	{r3, r4, r5, pc}
   116a4:	bd38      	pop	{r3, r4, r5, pc}
        full_defrag_cnt = 0;
   116a6:	2200      	movs	r2, #0
   116a8:	4b03      	ldr	r3, [pc, #12]	; (116b8 <lv_mem_free+0x80>)
   116aa:	f8a3 2940 	strh.w	r2, [r3, #2368]	; 0x940
        lv_mem_defrag();
   116ae:	4b04      	ldr	r3, [pc, #16]	; (116c0 <lv_mem_free+0x88>)
   116b0:	4798      	blx	r3
   116b2:	bd38      	pop	{r3, r4, r5, pc}
   116b4:	2000ab8c 	.word	0x2000ab8c
   116b8:	2000a250 	.word	0x2000a250
   116bc:	000114d9 	.word	0x000114d9
   116c0:	000115d5 	.word	0x000115d5

000116c4 <_lv_mem_get_size>:
    if(data == NULL) return 0;
   116c4:	b138      	cbz	r0, 116d6 <_lv_mem_get_size+0x12>
    if(data == &zero_mem) return 0;
   116c6:	4a06      	ldr	r2, [pc, #24]	; (116e0 <_lv_mem_get_size+0x1c>)
   116c8:	4290      	cmp	r0, r2
   116ca:	d006      	beq.n	116da <_lv_mem_get_size+0x16>
    return e->header.s.d_size;
   116cc:	f850 0c04 	ldr.w	r0, [r0, #-4]
   116d0:	f3c0 005e 	ubfx	r0, r0, #1, #31
   116d4:	4770      	bx	lr
    if(data == NULL) return 0;
   116d6:	2000      	movs	r0, #0
   116d8:	4770      	bx	lr
    if(data == &zero_mem) return 0;
   116da:	2000      	movs	r0, #0
}
   116dc:	4770      	bx	lr
   116de:	bf00      	nop
   116e0:	2000ab8c 	.word	0x2000ab8c

000116e4 <_lv_mem_buf_release>:
        if(mem_buf_small[i].p == p) {
   116e4:	4b16      	ldr	r3, [pc, #88]	; (11740 <_lv_mem_buf_release+0x5c>)
   116e6:	681b      	ldr	r3, [r3, #0]
   116e8:	4298      	cmp	r0, r3
   116ea:	d017      	beq.n	1171c <_lv_mem_buf_release+0x38>
   116ec:	4b14      	ldr	r3, [pc, #80]	; (11740 <_lv_mem_buf_release+0x5c>)
   116ee:	689b      	ldr	r3, [r3, #8]
   116f0:	4283      	cmp	r3, r0
   116f2:	bf08      	it	eq
   116f4:	2201      	moveq	r2, #1
   116f6:	d012      	beq.n	1171e <_lv_mem_buf_release+0x3a>
{
   116f8:	b410      	push	{r4}
        if(LV_GC_ROOT(_lv_mem_buf[i]).p == p) {
   116fa:	4b12      	ldr	r3, [pc, #72]	; (11744 <_lv_mem_buf_release+0x60>)
   116fc:	681b      	ldr	r3, [r3, #0]
   116fe:	4298      	cmp	r0, r3
   11700:	d015      	beq.n	1172e <_lv_mem_buf_release+0x4a>
   11702:	2301      	movs	r3, #1
   11704:	490f      	ldr	r1, [pc, #60]	; (11744 <_lv_mem_buf_release+0x60>)
   11706:	461c      	mov	r4, r3
   11708:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
   1170c:	4290      	cmp	r0, r2
   1170e:	d00f      	beq.n	11730 <_lv_mem_buf_release+0x4c>
   11710:	3301      	adds	r3, #1
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
   11712:	2b10      	cmp	r3, #16
   11714:	d1f7      	bne.n	11706 <_lv_mem_buf_release+0x22>
}
   11716:	f85d 4b04 	ldr.w	r4, [sp], #4
   1171a:	4770      	bx	lr
        if(mem_buf_small[i].p == p) {
   1171c:	2200      	movs	r2, #0
            mem_buf_small[i].used = 0;
   1171e:	4b08      	ldr	r3, [pc, #32]	; (11740 <_lv_mem_buf_release+0x5c>)
   11720:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   11724:	799a      	ldrb	r2, [r3, #6]
   11726:	f36f 0200 	bfc	r2, #0, #1
   1172a:	719a      	strb	r2, [r3, #6]
            return;
   1172c:	4770      	bx	lr
        if(LV_GC_ROOT(_lv_mem_buf[i]).p == p) {
   1172e:	2400      	movs	r4, #0
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
   11730:	4b04      	ldr	r3, [pc, #16]	; (11744 <_lv_mem_buf_release+0x60>)
   11732:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   11736:	79a3      	ldrb	r3, [r4, #6]
   11738:	f36f 0300 	bfc	r3, #0, #1
   1173c:	71a3      	strb	r3, [r4, #6]
            return;
   1173e:	e7ea      	b.n	11716 <_lv_mem_buf_release+0x32>
   11740:	20000044 	.word	0x20000044
   11744:	2000acc4 	.word	0x2000acc4

00011748 <_lv_mem_buf_free_all>:
{
   11748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        mem_buf_small[i].used = 0;
   1174c:	4b12      	ldr	r3, [pc, #72]	; (11798 <_lv_mem_buf_free_all+0x50>)
   1174e:	799a      	ldrb	r2, [r3, #6]
   11750:	f36f 0200 	bfc	r2, #0, #1
   11754:	719a      	strb	r2, [r3, #6]
   11756:	7b9a      	ldrb	r2, [r3, #14]
   11758:	f36f 0200 	bfc	r2, #0, #1
   1175c:	739a      	strb	r2, [r3, #14]
   1175e:	4c0f      	ldr	r4, [pc, #60]	; (1179c <_lv_mem_buf_free_all+0x54>)
   11760:	2500      	movs	r5, #0
            lv_mem_free(LV_GC_ROOT(_lv_mem_buf[i]).p);
   11762:	f8df 803c 	ldr.w	r8, [pc, #60]	; 117a0 <_lv_mem_buf_free_all+0x58>
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
   11766:	462e      	mov	r6, r5
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
   11768:	1f27      	subs	r7, r4, #4
   1176a:	e003      	b.n	11774 <_lv_mem_buf_free_all+0x2c>
   1176c:	3501      	adds	r5, #1
   1176e:	3408      	adds	r4, #8
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
   11770:	2d10      	cmp	r5, #16
   11772:	d00e      	beq.n	11792 <_lv_mem_buf_free_all+0x4a>
        if(LV_GC_ROOT(_lv_mem_buf[i]).p) {
   11774:	f854 0c04 	ldr.w	r0, [r4, #-4]
   11778:	2800      	cmp	r0, #0
   1177a:	d0f7      	beq.n	1176c <_lv_mem_buf_free_all+0x24>
            lv_mem_free(LV_GC_ROOT(_lv_mem_buf[i]).p);
   1177c:	47c0      	blx	r8
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
   1177e:	f844 6c04 	str.w	r6, [r4, #-4]
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
   11782:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
   11786:	799a      	ldrb	r2, [r3, #6]
   11788:	f366 0200 	bfi	r2, r6, #0, #1
   1178c:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = 0;
   1178e:	8026      	strh	r6, [r4, #0]
   11790:	e7ec      	b.n	1176c <_lv_mem_buf_free_all+0x24>
}
   11792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11796:	bf00      	nop
   11798:	20000044 	.word	0x20000044
   1179c:	2000acc8 	.word	0x2000acc8
   117a0:	00011639 	.word	0x00011639

000117a4 <_lv_memcpy>:
{
   117a4:	b4f0      	push	{r4, r5, r6, r7}
    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
   117a6:	f000 0303 	and.w	r3, r0, #3
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
   117aa:	f001 0403 	and.w	r4, r1, #3
    if(s_align != d_align) {
   117ae:	42a3      	cmp	r3, r4
   117b0:	f000 80a6 	beq.w	11900 <_lv_memcpy+0x15c>
        while(len > 32) {
   117b4:	2a20      	cmp	r2, #32
   117b6:	f240 80a1 	bls.w	118fc <_lv_memcpy+0x158>
   117ba:	f100 0420 	add.w	r4, r0, #32
   117be:	f101 0320 	add.w	r3, r1, #32
   117c2:	4615      	mov	r5, r2
            REPEAT8(COPY8);
   117c4:	f813 6c20 	ldrb.w	r6, [r3, #-32]
   117c8:	f804 6c20 	strb.w	r6, [r4, #-32]
   117cc:	f813 6c1f 	ldrb.w	r6, [r3, #-31]
   117d0:	f804 6c1f 	strb.w	r6, [r4, #-31]
   117d4:	f813 6c1e 	ldrb.w	r6, [r3, #-30]
   117d8:	f804 6c1e 	strb.w	r6, [r4, #-30]
   117dc:	f813 6c1d 	ldrb.w	r6, [r3, #-29]
   117e0:	f804 6c1d 	strb.w	r6, [r4, #-29]
   117e4:	f813 6c1c 	ldrb.w	r6, [r3, #-28]
   117e8:	f804 6c1c 	strb.w	r6, [r4, #-28]
   117ec:	f813 6c1b 	ldrb.w	r6, [r3, #-27]
   117f0:	f804 6c1b 	strb.w	r6, [r4, #-27]
   117f4:	f813 6c1a 	ldrb.w	r6, [r3, #-26]
   117f8:	f804 6c1a 	strb.w	r6, [r4, #-26]
   117fc:	f813 6c19 	ldrb.w	r6, [r3, #-25]
   11800:	f804 6c19 	strb.w	r6, [r4, #-25]
            REPEAT8(COPY8);
   11804:	f813 6c18 	ldrb.w	r6, [r3, #-24]
   11808:	f804 6c18 	strb.w	r6, [r4, #-24]
   1180c:	f813 6c17 	ldrb.w	r6, [r3, #-23]
   11810:	f804 6c17 	strb.w	r6, [r4, #-23]
   11814:	f813 6c16 	ldrb.w	r6, [r3, #-22]
   11818:	f804 6c16 	strb.w	r6, [r4, #-22]
   1181c:	f813 6c15 	ldrb.w	r6, [r3, #-21]
   11820:	f804 6c15 	strb.w	r6, [r4, #-21]
   11824:	f813 6c14 	ldrb.w	r6, [r3, #-20]
   11828:	f804 6c14 	strb.w	r6, [r4, #-20]
   1182c:	f813 6c13 	ldrb.w	r6, [r3, #-19]
   11830:	f804 6c13 	strb.w	r6, [r4, #-19]
   11834:	f813 6c12 	ldrb.w	r6, [r3, #-18]
   11838:	f804 6c12 	strb.w	r6, [r4, #-18]
   1183c:	f813 6c11 	ldrb.w	r6, [r3, #-17]
   11840:	f804 6c11 	strb.w	r6, [r4, #-17]
            REPEAT8(COPY8);
   11844:	f813 6c10 	ldrb.w	r6, [r3, #-16]
   11848:	f804 6c10 	strb.w	r6, [r4, #-16]
   1184c:	f813 6c0f 	ldrb.w	r6, [r3, #-15]
   11850:	f804 6c0f 	strb.w	r6, [r4, #-15]
   11854:	f813 6c0e 	ldrb.w	r6, [r3, #-14]
   11858:	f804 6c0e 	strb.w	r6, [r4, #-14]
   1185c:	f813 6c0d 	ldrb.w	r6, [r3, #-13]
   11860:	f804 6c0d 	strb.w	r6, [r4, #-13]
   11864:	f813 6c0c 	ldrb.w	r6, [r3, #-12]
   11868:	f804 6c0c 	strb.w	r6, [r4, #-12]
   1186c:	f813 6c0b 	ldrb.w	r6, [r3, #-11]
   11870:	f804 6c0b 	strb.w	r6, [r4, #-11]
   11874:	f813 6c0a 	ldrb.w	r6, [r3, #-10]
   11878:	f804 6c0a 	strb.w	r6, [r4, #-10]
   1187c:	f813 6c09 	ldrb.w	r6, [r3, #-9]
   11880:	f804 6c09 	strb.w	r6, [r4, #-9]
            REPEAT8(COPY8);
   11884:	f813 6c08 	ldrb.w	r6, [r3, #-8]
   11888:	f804 6c08 	strb.w	r6, [r4, #-8]
   1188c:	f813 6c07 	ldrb.w	r6, [r3, #-7]
   11890:	f804 6c07 	strb.w	r6, [r4, #-7]
   11894:	f813 6c06 	ldrb.w	r6, [r3, #-6]
   11898:	f804 6c06 	strb.w	r6, [r4, #-6]
   1189c:	f813 6c05 	ldrb.w	r6, [r3, #-5]
   118a0:	f804 6c05 	strb.w	r6, [r4, #-5]
   118a4:	f813 6c04 	ldrb.w	r6, [r3, #-4]
   118a8:	f804 6c04 	strb.w	r6, [r4, #-4]
   118ac:	f813 6c03 	ldrb.w	r6, [r3, #-3]
   118b0:	f804 6c03 	strb.w	r6, [r4, #-3]
   118b4:	f813 6c02 	ldrb.w	r6, [r3, #-2]
   118b8:	f804 6c02 	strb.w	r6, [r4, #-2]
   118bc:	f813 6c01 	ldrb.w	r6, [r3, #-1]
   118c0:	f804 6c01 	strb.w	r6, [r4, #-1]
            len -= 32;
   118c4:	3d20      	subs	r5, #32
   118c6:	3420      	adds	r4, #32
   118c8:	3320      	adds	r3, #32
        while(len > 32) {
   118ca:	2d20      	cmp	r5, #32
   118cc:	f63f af7a 	bhi.w	117c4 <_lv_memcpy+0x20>
   118d0:	f1a2 0521 	sub.w	r5, r2, #33	; 0x21
   118d4:	f025 041f 	bic.w	r4, r5, #31
   118d8:	3420      	adds	r4, #32
   118da:	1903      	adds	r3, r0, r4
   118dc:	4421      	add	r1, r4
   118de:	3a20      	subs	r2, #32
   118e0:	f025 051f 	bic.w	r5, r5, #31
   118e4:	1b52      	subs	r2, r2, r5
        while(len) {
   118e6:	b13a      	cbz	r2, 118f8 <_lv_memcpy+0x154>
   118e8:	3901      	subs	r1, #1
   118ea:	441a      	add	r2, r3
            COPY8
   118ec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   118f0:	f803 4b01 	strb.w	r4, [r3], #1
        while(len) {
   118f4:	429a      	cmp	r2, r3
   118f6:	d1f9      	bne.n	118ec <_lv_memcpy+0x148>
}
   118f8:	bcf0      	pop	{r4, r5, r6, r7}
   118fa:	4770      	bx	lr
        while(len > 32) {
   118fc:	4603      	mov	r3, r0
   118fe:	e7f2      	b.n	118e6 <_lv_memcpy+0x142>
    if(d_align) {
   11900:	2b00      	cmp	r3, #0
   11902:	d15b      	bne.n	119bc <_lv_memcpy+0x218>
    uint8_t * d8 = dst;
   11904:	4605      	mov	r5, r0
    while(len > 32) {
   11906:	2a20      	cmp	r2, #32
   11908:	d934      	bls.n	11974 <_lv_memcpy+0x1d0>
   1190a:	f105 0420 	add.w	r4, r5, #32
   1190e:	f101 0320 	add.w	r3, r1, #32
   11912:	4616      	mov	r6, r2
        REPEAT8(COPY32)
   11914:	f853 7c20 	ldr.w	r7, [r3, #-32]
   11918:	f844 7c20 	str.w	r7, [r4, #-32]
   1191c:	f853 7c1c 	ldr.w	r7, [r3, #-28]
   11920:	f844 7c1c 	str.w	r7, [r4, #-28]
   11924:	f853 7c18 	ldr.w	r7, [r3, #-24]
   11928:	f844 7c18 	str.w	r7, [r4, #-24]
   1192c:	f853 7c14 	ldr.w	r7, [r3, #-20]
   11930:	f844 7c14 	str.w	r7, [r4, #-20]
   11934:	f853 7c10 	ldr.w	r7, [r3, #-16]
   11938:	f844 7c10 	str.w	r7, [r4, #-16]
   1193c:	f853 7c0c 	ldr.w	r7, [r3, #-12]
   11940:	f844 7c0c 	str.w	r7, [r4, #-12]
   11944:	f853 7c08 	ldr.w	r7, [r3, #-8]
   11948:	f844 7c08 	str.w	r7, [r4, #-8]
   1194c:	f853 7c04 	ldr.w	r7, [r3, #-4]
   11950:	f844 7c04 	str.w	r7, [r4, #-4]
        len -= 32;
   11954:	3e20      	subs	r6, #32
   11956:	3420      	adds	r4, #32
   11958:	3320      	adds	r3, #32
    while(len > 32) {
   1195a:	2e20      	cmp	r6, #32
   1195c:	d8da      	bhi.n	11914 <_lv_memcpy+0x170>
   1195e:	f1a2 0321 	sub.w	r3, r2, #33	; 0x21
   11962:	f023 041f 	bic.w	r4, r3, #31
   11966:	3420      	adds	r4, #32
   11968:	4425      	add	r5, r4
   1196a:	4421      	add	r1, r4
   1196c:	3a20      	subs	r2, #32
   1196e:	f023 031f 	bic.w	r3, r3, #31
   11972:	1ad2      	subs	r2, r2, r3
    while(len > 4) {
   11974:	2a04      	cmp	r2, #4
   11976:	d932      	bls.n	119de <_lv_memcpy+0x23a>
   11978:	1f0e      	subs	r6, r1, #4
   1197a:	462c      	mov	r4, r5
   1197c:	4613      	mov	r3, r2
        COPY32;
   1197e:	f856 7f04 	ldr.w	r7, [r6, #4]!
   11982:	f844 7b04 	str.w	r7, [r4], #4
        len -= 4;
   11986:	3b04      	subs	r3, #4
    while(len > 4) {
   11988:	2b04      	cmp	r3, #4
   1198a:	d8f8      	bhi.n	1197e <_lv_memcpy+0x1da>
   1198c:	1f54      	subs	r4, r2, #5
   1198e:	f024 0303 	bic.w	r3, r4, #3
   11992:	3304      	adds	r3, #4
   11994:	3a04      	subs	r2, #4
   11996:	f024 0403 	bic.w	r4, r4, #3
   1199a:	1b12      	subs	r2, r2, r4
        COPY32;
   1199c:	4419      	add	r1, r3
   1199e:	442b      	add	r3, r5
    while(len) {
   119a0:	2a00      	cmp	r2, #0
   119a2:	d0a9      	beq.n	118f8 <_lv_memcpy+0x154>
   119a4:	3901      	subs	r1, #1
   119a6:	441a      	add	r2, r3
        COPY8
   119a8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   119ac:	f803 4b01 	strb.w	r4, [r3], #1
    while(len) {
   119b0:	4293      	cmp	r3, r2
   119b2:	d1f9      	bne.n	119a8 <_lv_memcpy+0x204>
   119b4:	e7a0      	b.n	118f8 <_lv_memcpy+0x154>
            COPY8;
   119b6:	4629      	mov	r1, r5
   119b8:	461d      	mov	r5, r3
   119ba:	e7a4      	b.n	11906 <_lv_memcpy+0x162>
        while(d_align && len) {
   119bc:	f1c3 0304 	rsb	r3, r3, #4
   119c0:	b17a      	cbz	r2, 119e2 <_lv_memcpy+0x23e>
   119c2:	18c4      	adds	r4, r0, r3
   119c4:	4603      	mov	r3, r0
            COPY8;
   119c6:	f811 5b01 	ldrb.w	r5, [r1], #1
   119ca:	f803 5b01 	strb.w	r5, [r3], #1
   119ce:	460d      	mov	r5, r1
            len--;
   119d0:	3a01      	subs	r2, #1
        while(d_align && len) {
   119d2:	42a3      	cmp	r3, r4
   119d4:	d0ef      	beq.n	119b6 <_lv_memcpy+0x212>
   119d6:	2a00      	cmp	r2, #0
   119d8:	d1f5      	bne.n	119c6 <_lv_memcpy+0x222>
    while(len > 4) {
   119da:	2200      	movs	r2, #0
   119dc:	e7e0      	b.n	119a0 <_lv_memcpy+0x1fc>
   119de:	462b      	mov	r3, r5
   119e0:	e7de      	b.n	119a0 <_lv_memcpy+0x1fc>
    uint8_t * d8 = dst;
   119e2:	4603      	mov	r3, r0
   119e4:	e7f9      	b.n	119da <_lv_memcpy+0x236>
	...

000119e8 <lv_mem_realloc>:
{
   119e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   119ea:	4604      	mov	r4, r0
   119ec:	460d      	mov	r5, r1
    if(new_size & 0x3) {
   119ee:	f011 0f03 	tst.w	r1, #3
        new_size = new_size & (~0x3);
   119f2:	bf1c      	itt	ne
   119f4:	f021 0503 	bicne.w	r5, r1, #3
        new_size += 4;
   119f8:	3504      	addne	r5, #4
    if(data_p != NULL) {
   119fa:	b138      	cbz	r0, 11a0c <lv_mem_realloc+0x24>
        if(e->header.s.used == 0) {
   119fc:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   11a00:	f003 0301 	and.w	r3, r3, #1
            data_p = NULL;
   11a04:	2b00      	cmp	r3, #0
   11a06:	bf14      	ite	ne
   11a08:	4604      	movne	r4, r0
   11a0a:	2400      	moveq	r4, #0
    uint32_t old_size = _lv_mem_get_size(data_p);
   11a0c:	4620      	mov	r0, r4
   11a0e:	4b10      	ldr	r3, [pc, #64]	; (11a50 <lv_mem_realloc+0x68>)
   11a10:	4798      	blx	r3
   11a12:	4606      	mov	r6, r0
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
   11a14:	4285      	cmp	r5, r0
   11a16:	d019      	beq.n	11a4c <lv_mem_realloc+0x64>
    if(new_size < old_size) {
   11a18:	d311      	bcc.n	11a3e <lv_mem_realloc+0x56>
    new_p = lv_mem_alloc(new_size);
   11a1a:	4628      	mov	r0, r5
   11a1c:	4b0d      	ldr	r3, [pc, #52]	; (11a54 <lv_mem_realloc+0x6c>)
   11a1e:	4798      	blx	r3
    if(new_p == NULL) {
   11a20:	4607      	mov	r7, r0
   11a22:	b188      	cbz	r0, 11a48 <lv_mem_realloc+0x60>
    if(data_p != NULL) {
   11a24:	b184      	cbz	r4, 11a48 <lv_mem_realloc+0x60>
        if(old_size != 0) {
   11a26:	b17e      	cbz	r6, 11a48 <lv_mem_realloc+0x60>
            _lv_memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
   11a28:	462a      	mov	r2, r5
   11a2a:	42b5      	cmp	r5, r6
   11a2c:	bf28      	it	cs
   11a2e:	4632      	movcs	r2, r6
   11a30:	4621      	mov	r1, r4
   11a32:	4b09      	ldr	r3, [pc, #36]	; (11a58 <lv_mem_realloc+0x70>)
   11a34:	4798      	blx	r3
            lv_mem_free(data_p);
   11a36:	4620      	mov	r0, r4
   11a38:	4b08      	ldr	r3, [pc, #32]	; (11a5c <lv_mem_realloc+0x74>)
   11a3a:	4798      	blx	r3
   11a3c:	e004      	b.n	11a48 <lv_mem_realloc+0x60>
        ent_trunc(e, new_size);
   11a3e:	4629      	mov	r1, r5
   11a40:	1f20      	subs	r0, r4, #4
   11a42:	4b07      	ldr	r3, [pc, #28]	; (11a60 <lv_mem_realloc+0x78>)
   11a44:	4798      	blx	r3
        return &e->first_data;
   11a46:	4627      	mov	r7, r4
}
   11a48:	4638      	mov	r0, r7
   11a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
   11a4c:	4627      	mov	r7, r4
   11a4e:	e7fb      	b.n	11a48 <lv_mem_realloc+0x60>
   11a50:	000116c5 	.word	0x000116c5
   11a54:	00011575 	.word	0x00011575
   11a58:	000117a5 	.word	0x000117a5
   11a5c:	00011639 	.word	0x00011639
   11a60:	00011501 	.word	0x00011501

00011a64 <_lv_mem_buf_get>:
    if(size == 0) return NULL;
   11a64:	2800      	cmp	r0, #0
   11a66:	d073      	beq.n	11b50 <_lv_mem_buf_get+0xec>
   11a68:	4601      	mov	r1, r0
    if(size <= MEM_BUF_SMALL_SIZE) {
   11a6a:	2810      	cmp	r0, #16
   11a6c:	d80b      	bhi.n	11a86 <_lv_mem_buf_get+0x22>
            if(mem_buf_small[i].used == 0) {
   11a6e:	4b39      	ldr	r3, [pc, #228]	; (11b54 <_lv_mem_buf_get+0xf0>)
   11a70:	799b      	ldrb	r3, [r3, #6]
   11a72:	f013 0f01 	tst.w	r3, #1
   11a76:	d00d      	beq.n	11a94 <_lv_mem_buf_get+0x30>
   11a78:	4b36      	ldr	r3, [pc, #216]	; (11b54 <_lv_mem_buf_get+0xf0>)
   11a7a:	7b9b      	ldrb	r3, [r3, #14]
   11a7c:	f013 0f01 	tst.w	r3, #1
   11a80:	bf08      	it	eq
   11a82:	2001      	moveq	r0, #1
   11a84:	d007      	beq.n	11a96 <_lv_mem_buf_get+0x32>
{
   11a86:	b570      	push	{r4, r5, r6, lr}
   11a88:	4a33      	ldr	r2, [pc, #204]	; (11b58 <_lv_mem_buf_get+0xf4>)
            if(mem_buf_small[i].used == 0) {
   11a8a:	2300      	movs	r3, #0
   11a8c:	f04f 36ff 	mov.w	r6, #4294967295
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0 && LV_GC_ROOT(_lv_mem_buf[i]).size >= size) {
   11a90:	4614      	mov	r4, r2
   11a92:	e019      	b.n	11ac8 <_lv_mem_buf_get+0x64>
            if(mem_buf_small[i].used == 0) {
   11a94:	2000      	movs	r0, #0
                mem_buf_small[i].used = 1;
   11a96:	4a2f      	ldr	r2, [pc, #188]	; (11b54 <_lv_mem_buf_get+0xf0>)
   11a98:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
   11a9c:	798b      	ldrb	r3, [r1, #6]
   11a9e:	f043 0301 	orr.w	r3, r3, #1
   11aa2:	718b      	strb	r3, [r1, #6]
                return mem_buf_small[i].p;
   11aa4:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
   11aa8:	4770      	bx	lr
                LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
   11aaa:	4a2b      	ldr	r2, [pc, #172]	; (11b58 <_lv_mem_buf_get+0xf4>)
   11aac:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
   11ab0:	798b      	ldrb	r3, [r1, #6]
   11ab2:	f043 0301 	orr.w	r3, r3, #1
   11ab6:	718b      	strb	r3, [r1, #6]
                return LV_GC_ROOT(_lv_mem_buf[i]).p;
   11ab8:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
   11abc:	bd70      	pop	{r4, r5, r6, pc}
                i_guess = i;
   11abe:	b25e      	sxtb	r6, r3
   11ac0:	3301      	adds	r3, #1
   11ac2:	3208      	adds	r2, #8
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
   11ac4:	2b10      	cmp	r3, #16
   11ac6:	d013      	beq.n	11af0 <_lv_mem_buf_get+0x8c>
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0 && LV_GC_ROOT(_lv_mem_buf[i]).size >= size) {
   11ac8:	461d      	mov	r5, r3
   11aca:	eb04 00c3 	add.w	r0, r4, r3, lsl #3
   11ace:	7980      	ldrb	r0, [r0, #6]
   11ad0:	f010 0f01 	tst.w	r0, #1
   11ad4:	d1f4      	bne.n	11ac0 <_lv_mem_buf_get+0x5c>
   11ad6:	8890      	ldrh	r0, [r2, #4]
   11ad8:	4281      	cmp	r1, r0
   11ada:	d8f1      	bhi.n	11ac0 <_lv_mem_buf_get+0x5c>
            if(LV_GC_ROOT(_lv_mem_buf[i]).size == size) {
   11adc:	d0e5      	beq.n	11aaa <_lv_mem_buf_get+0x46>
            else if(i_guess < 0) {
   11ade:	2e00      	cmp	r6, #0
   11ae0:	dbed      	blt.n	11abe <_lv_mem_buf_get+0x5a>
            else if(LV_GC_ROOT(_lv_mem_buf[i]).size < LV_GC_ROOT(_lv_mem_buf[i_guess]).size) {
   11ae2:	eb04 05c6 	add.w	r5, r4, r6, lsl #3
   11ae6:	88ad      	ldrh	r5, [r5, #4]
   11ae8:	4285      	cmp	r5, r0
                i_guess = i;
   11aea:	bf88      	it	hi
   11aec:	b25e      	sxtbhi	r6, r3
   11aee:	e7e7      	b.n	11ac0 <_lv_mem_buf_get+0x5c>
    if(i_guess >= 0) {
   11af0:	2e00      	cmp	r6, #0
   11af2:	db09      	blt.n	11b08 <_lv_mem_buf_get+0xa4>
        LV_GC_ROOT(_lv_mem_buf[i_guess]).used = 1;
   11af4:	4a18      	ldr	r2, [pc, #96]	; (11b58 <_lv_mem_buf_get+0xf4>)
   11af6:	eb02 01c6 	add.w	r1, r2, r6, lsl #3
   11afa:	798b      	ldrb	r3, [r1, #6]
   11afc:	f043 0301 	orr.w	r3, r3, #1
   11b00:	718b      	strb	r3, [r1, #6]
        return LV_GC_ROOT(_lv_mem_buf[i_guess]).p;
   11b02:	f852 0036 	ldr.w	r0, [r2, r6, lsl #3]
   11b06:	bd70      	pop	{r4, r5, r6, pc}
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0) {
   11b08:	4b13      	ldr	r3, [pc, #76]	; (11b58 <_lv_mem_buf_get+0xf4>)
   11b0a:	799b      	ldrb	r3, [r3, #6]
   11b0c:	f013 0f01 	tst.w	r3, #1
   11b10:	bf08      	it	eq
   11b12:	2400      	moveq	r4, #0
   11b14:	d00d      	beq.n	11b32 <_lv_mem_buf_get+0xce>
   11b16:	2301      	movs	r3, #1
   11b18:	480f      	ldr	r0, [pc, #60]	; (11b58 <_lv_mem_buf_get+0xf4>)
   11b1a:	461c      	mov	r4, r3
   11b1c:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
   11b20:	7992      	ldrb	r2, [r2, #6]
   11b22:	f012 0f01 	tst.w	r2, #1
   11b26:	d004      	beq.n	11b32 <_lv_mem_buf_get+0xce>
   11b28:	3301      	adds	r3, #1
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
   11b2a:	2b10      	cmp	r3, #16
   11b2c:	d1f5      	bne.n	11b1a <_lv_mem_buf_get+0xb6>
    return NULL;
   11b2e:	2000      	movs	r0, #0
   11b30:	bd70      	pop	{r4, r5, r6, pc}
            LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
   11b32:	4d09      	ldr	r5, [pc, #36]	; (11b58 <_lv_mem_buf_get+0xf4>)
   11b34:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
   11b38:	799a      	ldrb	r2, [r3, #6]
   11b3a:	f042 0201 	orr.w	r2, r2, #1
   11b3e:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = size;
   11b40:	8099      	strh	r1, [r3, #4]
            LV_GC_ROOT(_lv_mem_buf[i]).p = lv_mem_realloc(LV_GC_ROOT(_lv_mem_buf[i]).p, size);
   11b42:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   11b46:	4b05      	ldr	r3, [pc, #20]	; (11b5c <_lv_mem_buf_get+0xf8>)
   11b48:	4798      	blx	r3
   11b4a:	f845 0034 	str.w	r0, [r5, r4, lsl #3]
            return  LV_GC_ROOT(_lv_mem_buf[i]).p;
   11b4e:	bd70      	pop	{r4, r5, r6, pc}
    if(size == 0) return NULL;
   11b50:	2000      	movs	r0, #0
   11b52:	4770      	bx	lr
   11b54:	20000044 	.word	0x20000044
   11b58:	2000acc4 	.word	0x2000acc4
   11b5c:	000119e9 	.word	0x000119e9

00011b60 <_lv_memset>:
    if(d_align) {
   11b60:	f010 0303 	ands.w	r3, r0, #3
   11b64:	d013      	beq.n	11b8e <_lv_memset+0x2e>
        while(d_align && len) {
   11b66:	f1c3 0304 	rsb	r3, r3, #4
   11b6a:	b13a      	cbz	r2, 11b7c <_lv_memset+0x1c>
   11b6c:	4403      	add	r3, r0
            *d8 = v;
   11b6e:	f800 1b01 	strb.w	r1, [r0], #1
            len--;
   11b72:	3a01      	subs	r2, #1
        while(d_align && len) {
   11b74:	4298      	cmp	r0, r3
   11b76:	d00a      	beq.n	11b8e <_lv_memset+0x2e>
   11b78:	2a00      	cmp	r2, #0
   11b7a:	d1f8      	bne.n	11b6e <_lv_memset+0xe>
    while(len > 4) {
   11b7c:	2200      	movs	r2, #0
    while(len) {
   11b7e:	2a00      	cmp	r2, #0
   11b80:	d048      	beq.n	11c14 <_lv_memset+0xb4>
   11b82:	4402      	add	r2, r0
        *d8 = v;
   11b84:	f800 1b01 	strb.w	r1, [r0], #1
    while(len) {
   11b88:	4290      	cmp	r0, r2
   11b8a:	d1fb      	bne.n	11b84 <_lv_memset+0x24>
   11b8c:	4770      	bx	lr
{
   11b8e:	b430      	push	{r4, r5}
    uint32_t v32 = v + (v << 8) + (v << 16) + (v << 24);
   11b90:	eb01 2401 	add.w	r4, r1, r1, lsl #8
   11b94:	eb04 4401 	add.w	r4, r4, r1, lsl #16
   11b98:	eb04 6401 	add.w	r4, r4, r1, lsl #24
    while(len > 32) {
   11b9c:	2a20      	cmp	r2, #32
   11b9e:	d920      	bls.n	11be2 <_lv_memset+0x82>
   11ba0:	f100 0320 	add.w	r3, r0, #32
   11ba4:	4615      	mov	r5, r2
        SET32(v32);
   11ba6:	f843 4c20 	str.w	r4, [r3, #-32]
        SET32(v32);
   11baa:	f843 4c1c 	str.w	r4, [r3, #-28]
        SET32(v32);
   11bae:	f843 4c18 	str.w	r4, [r3, #-24]
        SET32(v32);
   11bb2:	f843 4c14 	str.w	r4, [r3, #-20]
        SET32(v32);
   11bb6:	f843 4c10 	str.w	r4, [r3, #-16]
        SET32(v32);
   11bba:	f843 4c0c 	str.w	r4, [r3, #-12]
        SET32(v32);
   11bbe:	f843 4c08 	str.w	r4, [r3, #-8]
        SET32(v32);
   11bc2:	f843 4c04 	str.w	r4, [r3, #-4]
        len -= 32;
   11bc6:	3d20      	subs	r5, #32
   11bc8:	3320      	adds	r3, #32
    while(len > 32) {
   11bca:	2d20      	cmp	r5, #32
   11bcc:	d8eb      	bhi.n	11ba6 <_lv_memset+0x46>
   11bce:	f1a2 0321 	sub.w	r3, r2, #33	; 0x21
   11bd2:	f023 051f 	bic.w	r5, r3, #31
   11bd6:	3520      	adds	r5, #32
   11bd8:	4428      	add	r0, r5
   11bda:	3a20      	subs	r2, #32
   11bdc:	f023 031f 	bic.w	r3, r3, #31
   11be0:	1ad2      	subs	r2, r2, r3
    while(len > 4) {
   11be2:	2a04      	cmp	r2, #4
   11be4:	d90f      	bls.n	11c06 <_lv_memset+0xa6>
   11be6:	4605      	mov	r5, r0
   11be8:	4613      	mov	r3, r2
        SET32(v32);
   11bea:	f845 4b04 	str.w	r4, [r5], #4
        len -= 4;
   11bee:	3b04      	subs	r3, #4
    while(len > 4) {
   11bf0:	2b04      	cmp	r3, #4
   11bf2:	d8fa      	bhi.n	11bea <_lv_memset+0x8a>
   11bf4:	1f53      	subs	r3, r2, #5
   11bf6:	f023 0403 	bic.w	r4, r3, #3
   11bfa:	3404      	adds	r4, #4
   11bfc:	3a04      	subs	r2, #4
   11bfe:	f023 0303 	bic.w	r3, r3, #3
   11c02:	1ad2      	subs	r2, r2, r3
        SET32(v32);
   11c04:	4420      	add	r0, r4
    while(len) {
   11c06:	b122      	cbz	r2, 11c12 <_lv_memset+0xb2>
   11c08:	4402      	add	r2, r0
        *d8 = v;
   11c0a:	f800 1b01 	strb.w	r1, [r0], #1
    while(len) {
   11c0e:	4290      	cmp	r0, r2
   11c10:	d1fb      	bne.n	11c0a <_lv_memset+0xaa>
}
   11c12:	bc30      	pop	{r4, r5}
   11c14:	4770      	bx	lr

00011c16 <_lv_memset_00>:
    if(d_align) {
   11c16:	f010 0303 	ands.w	r3, r0, #3
   11c1a:	d141      	bne.n	11ca0 <_lv_memset_00+0x8a>
{
   11c1c:	b410      	push	{r4}
    while(len > 32) {
   11c1e:	2920      	cmp	r1, #32
   11c20:	d921      	bls.n	11c66 <_lv_memset_00+0x50>
   11c22:	f100 0320 	add.w	r3, r0, #32
   11c26:	460c      	mov	r4, r1
        SET32(0);
   11c28:	2200      	movs	r2, #0
   11c2a:	f843 2c20 	str.w	r2, [r3, #-32]
        SET32(0);
   11c2e:	f843 2c1c 	str.w	r2, [r3, #-28]
        SET32(0);
   11c32:	f843 2c18 	str.w	r2, [r3, #-24]
        SET32(0);
   11c36:	f843 2c14 	str.w	r2, [r3, #-20]
        SET32(0);
   11c3a:	f843 2c10 	str.w	r2, [r3, #-16]
        SET32(0);
   11c3e:	f843 2c0c 	str.w	r2, [r3, #-12]
        SET32(0);
   11c42:	f843 2c08 	str.w	r2, [r3, #-8]
        SET32(0);
   11c46:	f843 2c04 	str.w	r2, [r3, #-4]
        len -= 32;
   11c4a:	3c20      	subs	r4, #32
   11c4c:	3320      	adds	r3, #32
    while(len > 32) {
   11c4e:	2c20      	cmp	r4, #32
   11c50:	d8eb      	bhi.n	11c2a <_lv_memset_00+0x14>
   11c52:	f1a1 0321 	sub.w	r3, r1, #33	; 0x21
   11c56:	f023 021f 	bic.w	r2, r3, #31
   11c5a:	3220      	adds	r2, #32
   11c5c:	4410      	add	r0, r2
   11c5e:	3920      	subs	r1, #32
   11c60:	f023 031f 	bic.w	r3, r3, #31
   11c64:	1ac9      	subs	r1, r1, r3
    while(len > 4) {
   11c66:	2904      	cmp	r1, #4
   11c68:	d910      	bls.n	11c8c <_lv_memset_00+0x76>
   11c6a:	4602      	mov	r2, r0
   11c6c:	460b      	mov	r3, r1
        SET32(0);
   11c6e:	2400      	movs	r4, #0
   11c70:	f842 4b04 	str.w	r4, [r2], #4
        len -= 4;
   11c74:	3b04      	subs	r3, #4
    while(len > 4) {
   11c76:	2b04      	cmp	r3, #4
   11c78:	d8fa      	bhi.n	11c70 <_lv_memset_00+0x5a>
   11c7a:	1f4b      	subs	r3, r1, #5
   11c7c:	f023 0203 	bic.w	r2, r3, #3
   11c80:	3204      	adds	r2, #4
   11c82:	3904      	subs	r1, #4
   11c84:	f023 0303 	bic.w	r3, r3, #3
   11c88:	1ac9      	subs	r1, r1, r3
        SET32(0);
   11c8a:	4410      	add	r0, r2
    while(len) {
   11c8c:	b129      	cbz	r1, 11c9a <_lv_memset_00+0x84>
   11c8e:	4401      	add	r1, r0
        *d8 = 0;
   11c90:	2300      	movs	r3, #0
   11c92:	f800 3b01 	strb.w	r3, [r0], #1
    while(len) {
   11c96:	4288      	cmp	r0, r1
   11c98:	d1fb      	bne.n	11c92 <_lv_memset_00+0x7c>
}
   11c9a:	f85d 4b04 	ldr.w	r4, [sp], #4
   11c9e:	4770      	bx	lr
        while(d_align && len) {
   11ca0:	f1c3 0304 	rsb	r3, r3, #4
   11ca4:	b141      	cbz	r1, 11cb8 <_lv_memset_00+0xa2>
   11ca6:	4403      	add	r3, r0
            *d8 = 0x00;
   11ca8:	2200      	movs	r2, #0
   11caa:	f800 2b01 	strb.w	r2, [r0], #1
            len--;
   11cae:	3901      	subs	r1, #1
        while(d_align && len) {
   11cb0:	4298      	cmp	r0, r3
   11cb2:	d0b3      	beq.n	11c1c <_lv_memset_00+0x6>
   11cb4:	2900      	cmp	r1, #0
   11cb6:	d1f8      	bne.n	11caa <_lv_memset_00+0x94>
    while(len > 4) {
   11cb8:	2100      	movs	r1, #0
    while(len) {
   11cba:	2900      	cmp	r1, #0
   11cbc:	d0ef      	beq.n	11c9e <_lv_memset_00+0x88>
   11cbe:	4401      	add	r1, r0
        *d8 = 0;
   11cc0:	2300      	movs	r3, #0
   11cc2:	f800 3b01 	strb.w	r3, [r0], #1
    while(len) {
   11cc6:	4288      	cmp	r0, r1
   11cc8:	d1fb      	bne.n	11cc2 <_lv_memset_00+0xac>
   11cca:	4770      	bx	lr

00011ccc <_lv_memset_ff>:
    if(d_align) {
   11ccc:	f010 0303 	ands.w	r3, r0, #3
   11cd0:	d143      	bne.n	11d5a <_lv_memset_ff+0x8e>
{
   11cd2:	b410      	push	{r4}
    while(len > 32) {
   11cd4:	2920      	cmp	r1, #32
   11cd6:	d922      	bls.n	11d1e <_lv_memset_ff+0x52>
   11cd8:	f100 0320 	add.w	r3, r0, #32
   11cdc:	460c      	mov	r4, r1
        SET32(0xFFFFFFFF);
   11cde:	f04f 32ff 	mov.w	r2, #4294967295
   11ce2:	f843 2c20 	str.w	r2, [r3, #-32]
        SET32(0xFFFFFFFF);
   11ce6:	f843 2c1c 	str.w	r2, [r3, #-28]
        SET32(0xFFFFFFFF);
   11cea:	f843 2c18 	str.w	r2, [r3, #-24]
        SET32(0xFFFFFFFF);
   11cee:	f843 2c14 	str.w	r2, [r3, #-20]
        SET32(0xFFFFFFFF);
   11cf2:	f843 2c10 	str.w	r2, [r3, #-16]
        SET32(0xFFFFFFFF);
   11cf6:	f843 2c0c 	str.w	r2, [r3, #-12]
        SET32(0xFFFFFFFF);
   11cfa:	f843 2c08 	str.w	r2, [r3, #-8]
        SET32(0xFFFFFFFF);
   11cfe:	f843 2c04 	str.w	r2, [r3, #-4]
        len -= 32;
   11d02:	3c20      	subs	r4, #32
   11d04:	3320      	adds	r3, #32
    while(len > 32) {
   11d06:	2c20      	cmp	r4, #32
   11d08:	d8eb      	bhi.n	11ce2 <_lv_memset_ff+0x16>
   11d0a:	f1a1 0321 	sub.w	r3, r1, #33	; 0x21
   11d0e:	f023 021f 	bic.w	r2, r3, #31
   11d12:	3220      	adds	r2, #32
   11d14:	4410      	add	r0, r2
   11d16:	3920      	subs	r1, #32
   11d18:	f023 031f 	bic.w	r3, r3, #31
   11d1c:	1ac9      	subs	r1, r1, r3
    while(len > 4) {
   11d1e:	2904      	cmp	r1, #4
   11d20:	d911      	bls.n	11d46 <_lv_memset_ff+0x7a>
   11d22:	4602      	mov	r2, r0
   11d24:	460b      	mov	r3, r1
        SET32(0xFFFFFFFF);
   11d26:	f04f 34ff 	mov.w	r4, #4294967295
   11d2a:	f842 4b04 	str.w	r4, [r2], #4
        len -= 4;
   11d2e:	3b04      	subs	r3, #4
    while(len > 4) {
   11d30:	2b04      	cmp	r3, #4
   11d32:	d8fa      	bhi.n	11d2a <_lv_memset_ff+0x5e>
   11d34:	1f4b      	subs	r3, r1, #5
   11d36:	f023 0203 	bic.w	r2, r3, #3
   11d3a:	3204      	adds	r2, #4
   11d3c:	3904      	subs	r1, #4
   11d3e:	f023 0303 	bic.w	r3, r3, #3
   11d42:	1ac9      	subs	r1, r1, r3
        SET32(0xFFFFFFFF);
   11d44:	4410      	add	r0, r2
    while(len) {
   11d46:	b129      	cbz	r1, 11d54 <_lv_memset_ff+0x88>
   11d48:	4401      	add	r1, r0
        *d8 = 0xFF;
   11d4a:	23ff      	movs	r3, #255	; 0xff
   11d4c:	f800 3b01 	strb.w	r3, [r0], #1
    while(len) {
   11d50:	4288      	cmp	r0, r1
   11d52:	d1fb      	bne.n	11d4c <_lv_memset_ff+0x80>
}
   11d54:	f85d 4b04 	ldr.w	r4, [sp], #4
   11d58:	4770      	bx	lr
        while(d_align && len) {
   11d5a:	f1c3 0304 	rsb	r3, r3, #4
   11d5e:	b141      	cbz	r1, 11d72 <_lv_memset_ff+0xa6>
   11d60:	4403      	add	r3, r0
            *d8 = 0xFF;
   11d62:	22ff      	movs	r2, #255	; 0xff
   11d64:	f800 2b01 	strb.w	r2, [r0], #1
            len--;
   11d68:	3901      	subs	r1, #1
        while(d_align && len) {
   11d6a:	4298      	cmp	r0, r3
   11d6c:	d0b1      	beq.n	11cd2 <_lv_memset_ff+0x6>
   11d6e:	2900      	cmp	r1, #0
   11d70:	d1f8      	bne.n	11d64 <_lv_memset_ff+0x98>
    while(len > 4) {
   11d72:	2100      	movs	r1, #0
    while(len) {
   11d74:	2900      	cmp	r1, #0
   11d76:	d0ef      	beq.n	11d58 <_lv_memset_ff+0x8c>
   11d78:	4401      	add	r1, r0
        *d8 = 0xFF;
   11d7a:	23ff      	movs	r3, #255	; 0xff
   11d7c:	f800 3b01 	strb.w	r3, [r0], #1
    while(len) {
   11d80:	4288      	cmp	r0, r1
   11d82:	d1fb      	bne.n	11d7c <_lv_memset_ff+0xb0>
   11d84:	4770      	bx	lr
	...

00011d88 <_lv_task_core_init>:

/**
 * Init the lv_task module
 */
void _lv_task_core_init(void)
{
   11d88:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
   11d8a:	2118      	movs	r1, #24
   11d8c:	4804      	ldr	r0, [pc, #16]	; (11da0 <_lv_task_core_init+0x18>)
   11d8e:	4b05      	ldr	r3, [pc, #20]	; (11da4 <_lv_task_core_init+0x1c>)
   11d90:	4798      	blx	r3

    task_list_changed = false;
   11d92:	4b05      	ldr	r3, [pc, #20]	; (11da8 <_lv_task_core_init+0x20>)
   11d94:	2200      	movs	r2, #0
   11d96:	701a      	strb	r2, [r3, #0]
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
    lv_task_run = en;
   11d98:	2201      	movs	r2, #1
   11d9a:	705a      	strb	r2, [r3, #1]
   11d9c:	bd08      	pop	{r3, pc}
   11d9e:	bf00      	nop
   11da0:	2000ac94 	.word	0x2000ac94
   11da4:	000110d9 	.word	0x000110d9
   11da8:	2000abb4 	.word	0x2000abb4

00011dac <lv_task_create_basic>:
{
   11dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tmp = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   11dae:	482d      	ldr	r0, [pc, #180]	; (11e64 <lv_task_create_basic+0xb8>)
   11db0:	4b2d      	ldr	r3, [pc, #180]	; (11e68 <lv_task_create_basic+0xbc>)
   11db2:	4798      	blx	r3
    if(NULL == tmp) {
   11db4:	b1d8      	cbz	r0, 11dee <lv_task_create_basic+0x42>
   11db6:	4604      	mov	r4, r0
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
   11db8:	4e2a      	ldr	r6, [pc, #168]	; (11e64 <lv_task_create_basic+0xb8>)
   11dba:	4d2c      	ldr	r5, [pc, #176]	; (11e6c <lv_task_create_basic+0xc0>)
            if(tmp->prio <= DEF_PRIO) {
   11dbc:	7d23      	ldrb	r3, [r4, #20]
   11dbe:	f003 0307 	and.w	r3, r3, #7
   11dc2:	2b03      	cmp	r3, #3
   11dc4:	dd22      	ble.n	11e0c <lv_task_create_basic+0x60>
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
   11dc6:	4621      	mov	r1, r4
   11dc8:	4630      	mov	r0, r6
   11dca:	47a8      	blx	r5
        } while(tmp != NULL);
   11dcc:	4604      	mov	r4, r0
   11dce:	2800      	cmp	r0, #0
   11dd0:	d1f4      	bne.n	11dbc <lv_task_create_basic+0x10>
            new_task = _lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
   11dd2:	4824      	ldr	r0, [pc, #144]	; (11e64 <lv_task_create_basic+0xb8>)
   11dd4:	4b26      	ldr	r3, [pc, #152]	; (11e70 <lv_task_create_basic+0xc4>)
   11dd6:	4798      	blx	r3
   11dd8:	4605      	mov	r5, r0
            LV_ASSERT_MEM(new_task);
   11dda:	4b26      	ldr	r3, [pc, #152]	; (11e74 <lv_task_create_basic+0xc8>)
   11ddc:	4798      	blx	r3
   11dde:	2800      	cmp	r0, #0
   11de0:	d13c      	bne.n	11e5c <lv_task_create_basic+0xb0>
   11de2:	462a      	mov	r2, r5
   11de4:	2300      	movs	r3, #0
   11de6:	4824      	ldr	r0, [pc, #144]	; (11e78 <lv_task_create_basic+0xcc>)
   11de8:	4924      	ldr	r1, [pc, #144]	; (11e7c <lv_task_create_basic+0xd0>)
   11dea:	4788      	blx	r1
   11dec:	e7fe      	b.n	11dec <lv_task_create_basic+0x40>
        new_task = _lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
   11dee:	481d      	ldr	r0, [pc, #116]	; (11e64 <lv_task_create_basic+0xb8>)
   11df0:	4b23      	ldr	r3, [pc, #140]	; (11e80 <lv_task_create_basic+0xd4>)
   11df2:	4798      	blx	r3
   11df4:	4605      	mov	r5, r0
        LV_ASSERT_MEM(new_task);
   11df6:	4b1f      	ldr	r3, [pc, #124]	; (11e74 <lv_task_create_basic+0xc8>)
   11df8:	4798      	blx	r3
   11dfa:	b928      	cbnz	r0, 11e08 <lv_task_create_basic+0x5c>
   11dfc:	462a      	mov	r2, r5
   11dfe:	2300      	movs	r3, #0
   11e00:	481d      	ldr	r0, [pc, #116]	; (11e78 <lv_task_create_basic+0xcc>)
   11e02:	491e      	ldr	r1, [pc, #120]	; (11e7c <lv_task_create_basic+0xd0>)
   11e04:	4788      	blx	r1
   11e06:	e7fe      	b.n	11e06 <lv_task_create_basic+0x5a>
        if(new_task == NULL) return NULL;
   11e08:	b95d      	cbnz	r5, 11e22 <lv_task_create_basic+0x76>
   11e0a:	e01f      	b.n	11e4c <lv_task_create_basic+0xa0>
                new_task = _lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
   11e0c:	4621      	mov	r1, r4
   11e0e:	4815      	ldr	r0, [pc, #84]	; (11e64 <lv_task_create_basic+0xb8>)
   11e10:	4b1c      	ldr	r3, [pc, #112]	; (11e84 <lv_task_create_basic+0xd8>)
   11e12:	4798      	blx	r3
   11e14:	4605      	mov	r5, r0
                LV_ASSERT_MEM(new_task);
   11e16:	4b17      	ldr	r3, [pc, #92]	; (11e74 <lv_task_create_basic+0xc8>)
   11e18:	4798      	blx	r3
   11e1a:	b1c8      	cbz	r0, 11e50 <lv_task_create_basic+0xa4>
                if(new_task == NULL) return NULL;
   11e1c:	b1b5      	cbz	r5, 11e4c <lv_task_create_basic+0xa0>
        if(tmp == NULL) {
   11e1e:	2c00      	cmp	r4, #0
   11e20:	d0d7      	beq.n	11dd2 <lv_task_create_basic+0x26>
    task_list_changed = true;
   11e22:	4c19      	ldr	r4, [pc, #100]	; (11e88 <lv_task_create_basic+0xdc>)
   11e24:	2601      	movs	r6, #1
   11e26:	7026      	strb	r6, [r4, #0]
    new_task->period  = DEF_PERIOD;
   11e28:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   11e2c:	602b      	str	r3, [r5, #0]
    new_task->task_cb = NULL;
   11e2e:	2700      	movs	r7, #0
   11e30:	60af      	str	r7, [r5, #8]
    new_task->prio    = DEF_PRIO;
   11e32:	7d2b      	ldrb	r3, [r5, #20]
   11e34:	2203      	movs	r2, #3
   11e36:	f362 0302 	bfi	r3, r2, #0, #3
   11e3a:	752b      	strb	r3, [r5, #20]
    new_task->repeat_count = -1;
   11e3c:	f04f 33ff 	mov.w	r3, #4294967295
   11e40:	612b      	str	r3, [r5, #16]
    new_task->last_run = lv_tick_get();
   11e42:	4b12      	ldr	r3, [pc, #72]	; (11e8c <lv_task_create_basic+0xe0>)
   11e44:	4798      	blx	r3
   11e46:	6068      	str	r0, [r5, #4]
    new_task->user_data = NULL;
   11e48:	60ef      	str	r7, [r5, #12]
    task_created = true;
   11e4a:	70a6      	strb	r6, [r4, #2]
}
   11e4c:	4628      	mov	r0, r5
   11e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                LV_ASSERT_MEM(new_task);
   11e50:	462a      	mov	r2, r5
   11e52:	2300      	movs	r3, #0
   11e54:	4808      	ldr	r0, [pc, #32]	; (11e78 <lv_task_create_basic+0xcc>)
   11e56:	4909      	ldr	r1, [pc, #36]	; (11e7c <lv_task_create_basic+0xd0>)
   11e58:	4788      	blx	r1
   11e5a:	e7fe      	b.n	11e5a <lv_task_create_basic+0xae>
            if(new_task == NULL) return NULL;
   11e5c:	2d00      	cmp	r5, #0
   11e5e:	d1e0      	bne.n	11e22 <lv_task_create_basic+0x76>
   11e60:	e7f4      	b.n	11e4c <lv_task_create_basic+0xa0>
   11e62:	bf00      	nop
   11e64:	2000ac94 	.word	0x2000ac94
   11e68:	00011189 	.word	0x00011189
   11e6c:	0001119d 	.word	0x0001119d
   11e70:	0001113d 	.word	0x0001113d
   11e74:	0000295d 	.word	0x0000295d
   11e78:	0001786c 	.word	0x0001786c
   11e7c:	00002965 	.word	0x00002965
   11e80:	000110f1 	.word	0x000110f1
   11e84:	000111f5 	.word	0x000111f5
   11e88:	2000abb4 	.word	0x2000abb4
   11e8c:	000102d9 	.word	0x000102d9

00011e90 <lv_task_del>:
{
   11e90:	b510      	push	{r4, lr}
   11e92:	4604      	mov	r4, r0
    _lv_ll_remove(&LV_GC_ROOT(_lv_task_ll), task);
   11e94:	4601      	mov	r1, r0
   11e96:	4809      	ldr	r0, [pc, #36]	; (11ebc <lv_task_del+0x2c>)
   11e98:	4b09      	ldr	r3, [pc, #36]	; (11ec0 <lv_task_del+0x30>)
   11e9a:	4798      	blx	r3
    task_list_changed = true;
   11e9c:	2201      	movs	r2, #1
   11e9e:	4b09      	ldr	r3, [pc, #36]	; (11ec4 <lv_task_del+0x34>)
   11ea0:	701a      	strb	r2, [r3, #0]
    lv_mem_free(task);
   11ea2:	4620      	mov	r0, r4
   11ea4:	4b08      	ldr	r3, [pc, #32]	; (11ec8 <lv_task_del+0x38>)
   11ea6:	4798      	blx	r3
    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
   11ea8:	4b08      	ldr	r3, [pc, #32]	; (11ecc <lv_task_del+0x3c>)
   11eaa:	681b      	ldr	r3, [r3, #0]
   11eac:	429c      	cmp	r4, r3
   11eae:	d000      	beq.n	11eb2 <lv_task_del+0x22>
   11eb0:	bd10      	pop	{r4, pc}
   11eb2:	2201      	movs	r2, #1
   11eb4:	4b03      	ldr	r3, [pc, #12]	; (11ec4 <lv_task_del+0x34>)
   11eb6:	70da      	strb	r2, [r3, #3]
}
   11eb8:	e7fa      	b.n	11eb0 <lv_task_del+0x20>
   11eba:	bf00      	nop
   11ebc:	2000ac94 	.word	0x2000ac94
   11ec0:	00011275 	.word	0x00011275
   11ec4:	2000abb4 	.word	0x2000abb4
   11ec8:	00011639 	.word	0x00011639
   11ecc:	2000ad60 	.word	0x2000ad60

00011ed0 <lv_task_exec>:
 * Execute task if its the priority is appropriate
 * @param task pointer to lv_task
 * @return true: execute, false: not executed
 */
static bool lv_task_exec(lv_task_t * task)
{
   11ed0:	b510      	push	{r4, lr}
   11ed2:	4604      	mov	r4, r0
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_task_time_remaining(lv_task_t * task)
{
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
   11ed4:	6840      	ldr	r0, [r0, #4]
   11ed6:	4b12      	ldr	r3, [pc, #72]	; (11f20 <lv_task_exec+0x50>)
   11ed8:	4798      	blx	r3
    if(elp >= task->period)
   11eda:	6823      	ldr	r3, [r4, #0]
   11edc:	4298      	cmp	r0, r3
   11ede:	d201      	bcs.n	11ee4 <lv_task_exec+0x14>
    bool exec = false;
   11ee0:	2000      	movs	r0, #0
   11ee2:	bd10      	pop	{r4, pc}
        task->last_run = lv_tick_get();
   11ee4:	4b0f      	ldr	r3, [pc, #60]	; (11f24 <lv_task_exec+0x54>)
   11ee6:	4798      	blx	r3
   11ee8:	6060      	str	r0, [r4, #4]
        task_deleted   = false;
   11eea:	4b0f      	ldr	r3, [pc, #60]	; (11f28 <lv_task_exec+0x58>)
   11eec:	2200      	movs	r2, #0
   11eee:	70da      	strb	r2, [r3, #3]
        task_created   = false;
   11ef0:	709a      	strb	r2, [r3, #2]
        if(task->task_cb) task->task_cb(task);
   11ef2:	68a3      	ldr	r3, [r4, #8]
   11ef4:	b12b      	cbz	r3, 11f02 <lv_task_exec+0x32>
   11ef6:	4620      	mov	r0, r4
   11ef8:	4798      	blx	r3
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
   11efa:	4b0b      	ldr	r3, [pc, #44]	; (11f28 <lv_task_exec+0x58>)
   11efc:	78d8      	ldrb	r0, [r3, #3]
   11efe:	b100      	cbz	r0, 11f02 <lv_task_exec+0x32>
}
   11f00:	bd10      	pop	{r4, pc}
            if(task->repeat_count > 0) {
   11f02:	6923      	ldr	r3, [r4, #16]
   11f04:	2b00      	cmp	r3, #0
                task->repeat_count--;
   11f06:	bfc4      	itt	gt
   11f08:	f103 33ff 	addgt.w	r3, r3, #4294967295
   11f0c:	6123      	strgt	r3, [r4, #16]
            if(task->repeat_count == 0) {
   11f0e:	6923      	ldr	r3, [r4, #16]
   11f10:	b10b      	cbz	r3, 11f16 <lv_task_exec+0x46>
        exec = true;
   11f12:	2001      	movs	r0, #1
   11f14:	e7f4      	b.n	11f00 <lv_task_exec+0x30>
                lv_task_del(task);
   11f16:	4620      	mov	r0, r4
   11f18:	4b04      	ldr	r3, [pc, #16]	; (11f2c <lv_task_exec+0x5c>)
   11f1a:	4798      	blx	r3
        exec = true;
   11f1c:	2001      	movs	r0, #1
   11f1e:	bd10      	pop	{r4, pc}
   11f20:	000102f1 	.word	0x000102f1
   11f24:	000102d9 	.word	0x000102d9
   11f28:	2000abb4 	.word	0x2000abb4
   11f2c:	00011e91 	.word	0x00011e91

00011f30 <lv_task_handler>:
{
   11f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(already_running) return 1;
   11f34:	4b58      	ldr	r3, [pc, #352]	; (12098 <lv_task_handler+0x168>)
   11f36:	791b      	ldrb	r3, [r3, #4]
   11f38:	2b00      	cmp	r3, #0
   11f3a:	f040 80a9 	bne.w	12090 <lv_task_handler+0x160>
    already_running = true;
   11f3e:	4b56      	ldr	r3, [pc, #344]	; (12098 <lv_task_handler+0x168>)
   11f40:	2201      	movs	r2, #1
   11f42:	711a      	strb	r2, [r3, #4]
    if(lv_task_run == false) {
   11f44:	785b      	ldrb	r3, [r3, #1]
   11f46:	b92b      	cbnz	r3, 11f54 <lv_task_handler+0x24>
        already_running = false; /*Release mutex*/
   11f48:	2200      	movs	r2, #0
   11f4a:	4b53      	ldr	r3, [pc, #332]	; (12098 <lv_task_handler+0x168>)
   11f4c:	711a      	strb	r2, [r3, #4]
        return 1;
   11f4e:	2001      	movs	r0, #1
   11f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    handler_start = lv_tick_get();
   11f54:	4b51      	ldr	r3, [pc, #324]	; (1209c <lv_task_handler+0x16c>)
   11f56:	4798      	blx	r3
   11f58:	4b4f      	ldr	r3, [pc, #316]	; (12098 <lv_task_handler+0x168>)
   11f5a:	6098      	str	r0, [r3, #8]
    lv_task_t * task_interrupter = NULL;
   11f5c:	2600      	movs	r6, #0
        task_deleted             = false;
   11f5e:	461d      	mov	r5, r3
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   11f60:	f8df 814c 	ldr.w	r8, [pc, #332]	; 120b0 <lv_task_handler+0x180>
   11f64:	4c4e      	ldr	r4, [pc, #312]	; (120a0 <lv_task_handler+0x170>)
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
   11f66:	f8df 9150 	ldr.w	r9, [pc, #336]	; 120b8 <lv_task_handler+0x188>
   11f6a:	e06d      	b.n	12048 <lv_task_handler+0x118>
                LV_GC_ROOT(_lv_task_act) = next;
   11f6c:	6027      	str	r7, [r4, #0]
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
   11f6e:	2600      	movs	r6, #0
                continue; /*Load the next task*/
   11f70:	e009      	b.n	11f86 <lv_task_handler+0x56>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
   11f72:	4b4c      	ldr	r3, [pc, #304]	; (120a4 <lv_task_handler+0x174>)
   11f74:	4798      	blx	r3
            if(task_created || task_deleted) {
   11f76:	78ab      	ldrb	r3, [r5, #2]
   11f78:	bb33      	cbnz	r3, 11fc8 <lv_task_handler+0x98>
   11f7a:	78eb      	ldrb	r3, [r5, #3]
   11f7c:	bb23      	cbnz	r3, 11fc8 <lv_task_handler+0x98>
            if(task_list_changed) {
   11f7e:	782b      	ldrb	r3, [r5, #0]
   11f80:	2b00      	cmp	r3, #0
   11f82:	d15f      	bne.n	12044 <lv_task_handler+0x114>
            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
   11f84:	6027      	str	r7, [r4, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
   11f86:	6821      	ldr	r1, [r4, #0]
   11f88:	b1f1      	cbz	r1, 11fc8 <lv_task_handler+0x98>
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
   11f8a:	4640      	mov	r0, r8
   11f8c:	47c8      	blx	r9
   11f8e:	4607      	mov	r7, r0
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_OFF) {
   11f90:	6820      	ldr	r0, [r4, #0]
   11f92:	7d03      	ldrb	r3, [r0, #20]
   11f94:	f013 0307 	ands.w	r3, r3, #7
   11f98:	d016      	beq.n	11fc8 <lv_task_handler+0x98>
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
   11f9a:	4286      	cmp	r6, r0
   11f9c:	d0e6      	beq.n	11f6c <lv_task_handler+0x3c>
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_HIGHEST) {
   11f9e:	2b05      	cmp	r3, #5
   11fa0:	d0e7      	beq.n	11f72 <lv_task_handler+0x42>
            else if(task_interrupter) {
   11fa2:	2e00      	cmp	r6, #0
   11fa4:	d042      	beq.n	1202c <lv_task_handler+0xfc>
                if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio > task_interrupter->prio) {
   11fa6:	7d02      	ldrb	r2, [r0, #20]
   11fa8:	f002 0207 	and.w	r2, r2, #7
   11fac:	7d33      	ldrb	r3, [r6, #20]
   11fae:	f003 0307 	and.w	r3, r3, #7
   11fb2:	429a      	cmp	r2, r3
   11fb4:	dddf      	ble.n	11f76 <lv_task_handler+0x46>
                    if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
   11fb6:	4b3b      	ldr	r3, [pc, #236]	; (120a4 <lv_task_handler+0x174>)
   11fb8:	4798      	blx	r3
   11fba:	2800      	cmp	r0, #0
   11fbc:	d0db      	beq.n	11f76 <lv_task_handler+0x46>
                        if(!task_created && !task_deleted) {
   11fbe:	78ab      	ldrb	r3, [r5, #2]
   11fc0:	b913      	cbnz	r3, 11fc8 <lv_task_handler+0x98>
   11fc2:	78eb      	ldrb	r3, [r5, #3]
   11fc4:	2b00      	cmp	r3, #0
   11fc6:	d02f      	beq.n	12028 <lv_task_handler+0xf8>
    busy_time += lv_tick_elaps(handler_start);
   11fc8:	4c33      	ldr	r4, [pc, #204]	; (12098 <lv_task_handler+0x168>)
   11fca:	68a0      	ldr	r0, [r4, #8]
   11fcc:	4d36      	ldr	r5, [pc, #216]	; (120a8 <lv_task_handler+0x178>)
   11fce:	47a8      	blx	r5
   11fd0:	68e3      	ldr	r3, [r4, #12]
   11fd2:	4403      	add	r3, r0
   11fd4:	60e3      	str	r3, [r4, #12]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
   11fd6:	6920      	ldr	r0, [r4, #16]
   11fd8:	47a8      	blx	r5
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
   11fda:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   11fde:	d315      	bcc.n	1200c <lv_task_handler+0xdc>
        idle_last         = (uint32_t)((uint32_t)busy_time * 100) / IDLE_MEAS_PERIOD; /*Calculate the busy percentage*/
   11fe0:	68e2      	ldr	r2, [r4, #12]
   11fe2:	2364      	movs	r3, #100	; 0x64
   11fe4:	fb03 f302 	mul.w	r3, r3, r2
   11fe8:	4a30      	ldr	r2, [pc, #192]	; (120ac <lv_task_handler+0x17c>)
   11fea:	fba2 2303 	umull	r2, r3, r2, r3
   11fee:	f3c3 1347 	ubfx	r3, r3, #5, #8
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last;                    /*But we need idle time*/
   11ff2:	2b64      	cmp	r3, #100	; 0x64
   11ff4:	bf9a      	itte	ls
   11ff6:	f1c3 0364 	rsbls	r3, r3, #100	; 0x64
   11ffa:	b2db      	uxtbls	r3, r3
   11ffc:	2300      	movhi	r3, #0
   11ffe:	4c26      	ldr	r4, [pc, #152]	; (12098 <lv_task_handler+0x168>)
   12000:	7523      	strb	r3, [r4, #20]
        busy_time         = 0;
   12002:	2300      	movs	r3, #0
   12004:	60e3      	str	r3, [r4, #12]
        idle_period_start = lv_tick_get();
   12006:	4b25      	ldr	r3, [pc, #148]	; (1209c <lv_task_handler+0x16c>)
   12008:	4798      	blx	r3
   1200a:	6120      	str	r0, [r4, #16]
    time_till_next = LV_NO_TASK_READY;
   1200c:	f04f 32ff 	mov.w	r2, #4294967295
   12010:	4b21      	ldr	r3, [pc, #132]	; (12098 <lv_task_handler+0x168>)
   12012:	619a      	str	r2, [r3, #24]
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   12014:	4826      	ldr	r0, [pc, #152]	; (120b0 <lv_task_handler+0x180>)
   12016:	4b27      	ldr	r3, [pc, #156]	; (120b4 <lv_task_handler+0x184>)
   12018:	4798      	blx	r3
    while(next) {
   1201a:	4604      	mov	r4, r0
   1201c:	2800      	cmp	r0, #0
   1201e:	d031      	beq.n	12084 <lv_task_handler+0x154>
    uint32_t elp = lv_tick_elaps(task->last_run);
   12020:	4f21      	ldr	r7, [pc, #132]	; (120a8 <lv_task_handler+0x178>)
            if(delay < time_till_next)
   12022:	4e1d      	ldr	r6, [pc, #116]	; (12098 <lv_task_handler+0x168>)
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), next); /*Find the next task*/
   12024:	4d22      	ldr	r5, [pc, #136]	; (120b0 <lv_task_handler+0x180>)
   12026:	e01d      	b.n	12064 <lv_task_handler+0x134>
                            task_interrupter = LV_GC_ROOT(_lv_task_act);
   12028:	6826      	ldr	r6, [r4, #0]
                            break;
   1202a:	e00d      	b.n	12048 <lv_task_handler+0x118>
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
   1202c:	4b1d      	ldr	r3, [pc, #116]	; (120a4 <lv_task_handler+0x174>)
   1202e:	4798      	blx	r3
   12030:	2800      	cmp	r0, #0
   12032:	d0a0      	beq.n	11f76 <lv_task_handler+0x46>
                    if(!task_created && !task_deleted) {
   12034:	78ab      	ldrb	r3, [r5, #2]
   12036:	2b00      	cmp	r3, #0
   12038:	d1c6      	bne.n	11fc8 <lv_task_handler+0x98>
   1203a:	78eb      	ldrb	r3, [r5, #3]
   1203c:	2b00      	cmp	r3, #0
   1203e:	d1c3      	bne.n	11fc8 <lv_task_handler+0x98>
                        task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
   12040:	6826      	ldr	r6, [r4, #0]
                        break;
   12042:	e001      	b.n	12048 <lv_task_handler+0x118>
                task_list_changed = false;
   12044:	2600      	movs	r6, #0
   12046:	702e      	strb	r6, [r5, #0]
        task_deleted             = false;
   12048:	2300      	movs	r3, #0
   1204a:	70eb      	strb	r3, [r5, #3]
        task_created             = false;
   1204c:	70ab      	strb	r3, [r5, #2]
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   1204e:	4640      	mov	r0, r8
   12050:	4b18      	ldr	r3, [pc, #96]	; (120b4 <lv_task_handler+0x184>)
   12052:	4798      	blx	r3
   12054:	6020      	str	r0, [r4, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
   12056:	e796      	b.n	11f86 <lv_task_handler+0x56>
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), next); /*Find the next task*/
   12058:	4621      	mov	r1, r4
   1205a:	4628      	mov	r0, r5
   1205c:	4b16      	ldr	r3, [pc, #88]	; (120b8 <lv_task_handler+0x188>)
   1205e:	4798      	blx	r3
    while(next) {
   12060:	4604      	mov	r4, r0
   12062:	b178      	cbz	r0, 12084 <lv_task_handler+0x154>
        if(next->prio != LV_TASK_PRIO_OFF) {
   12064:	7d23      	ldrb	r3, [r4, #20]
   12066:	f013 0f07 	tst.w	r3, #7
   1206a:	d0f5      	beq.n	12058 <lv_task_handler+0x128>
    uint32_t elp = lv_tick_elaps(task->last_run);
   1206c:	6860      	ldr	r0, [r4, #4]
   1206e:	47b8      	blx	r7
    if(elp >= task->period)
   12070:	6823      	ldr	r3, [r4, #0]
   12072:	4298      	cmp	r0, r3
        return 0;
    return task->period - elp;
   12074:	bf34      	ite	cc
   12076:	1a1b      	subcc	r3, r3, r0
        return 0;
   12078:	2300      	movcs	r3, #0
            if(delay < time_till_next)
   1207a:	69b2      	ldr	r2, [r6, #24]
   1207c:	429a      	cmp	r2, r3
                time_till_next = delay;
   1207e:	bf88      	it	hi
   12080:	61b3      	strhi	r3, [r6, #24]
   12082:	e7e9      	b.n	12058 <lv_task_handler+0x128>
    already_running = false; /*Release the mutex*/
   12084:	4b04      	ldr	r3, [pc, #16]	; (12098 <lv_task_handler+0x168>)
   12086:	2200      	movs	r2, #0
   12088:	711a      	strb	r2, [r3, #4]
    return time_till_next;
   1208a:	6998      	ldr	r0, [r3, #24]
   1208c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(already_running) return 1;
   12090:	2001      	movs	r0, #1
}
   12092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12096:	bf00      	nop
   12098:	2000abb4 	.word	0x2000abb4
   1209c:	000102d9 	.word	0x000102d9
   120a0:	2000ad60 	.word	0x2000ad60
   120a4:	00011ed1 	.word	0x00011ed1
   120a8:	000102f1 	.word	0x000102f1
   120ac:	10624dd3 	.word	0x10624dd3
   120b0:	2000ac94 	.word	0x2000ac94
   120b4:	00011189 	.word	0x00011189
   120b8:	0001119d 	.word	0x0001119d

000120bc <lv_task_set_prio>:
{
   120bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(task->prio == prio) return;
   120c0:	7d03      	ldrb	r3, [r0, #20]
   120c2:	f003 0307 	and.w	r3, r3, #7
   120c6:	428b      	cmp	r3, r1
   120c8:	d031      	beq.n	1212e <lv_task_set_prio+0x72>
   120ca:	460d      	mov	r5, r1
   120cc:	4688      	mov	r8, r1
   120ce:	4681      	mov	r9, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
   120d0:	4818      	ldr	r0, [pc, #96]	; (12134 <lv_task_set_prio+0x78>)
   120d2:	4b19      	ldr	r3, [pc, #100]	; (12138 <lv_task_set_prio+0x7c>)
   120d4:	4798      	blx	r3
   120d6:	4604      	mov	r4, r0
   120d8:	b318      	cbz	r0, 12122 <lv_task_set_prio+0x66>
        if(i->prio <= prio) {
   120da:	7d03      	ldrb	r3, [r0, #20]
   120dc:	f003 0307 	and.w	r3, r3, #7
   120e0:	429d      	cmp	r5, r3
   120e2:	da0b      	bge.n	120fc <lv_task_set_prio+0x40>
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
   120e4:	4f13      	ldr	r7, [pc, #76]	; (12134 <lv_task_set_prio+0x78>)
   120e6:	4e15      	ldr	r6, [pc, #84]	; (1213c <lv_task_set_prio+0x80>)
   120e8:	4621      	mov	r1, r4
   120ea:	4638      	mov	r0, r7
   120ec:	47b0      	blx	r6
   120ee:	4604      	mov	r4, r0
   120f0:	b1b8      	cbz	r0, 12122 <lv_task_set_prio+0x66>
        if(i->prio <= prio) {
   120f2:	7d23      	ldrb	r3, [r4, #20]
   120f4:	f003 0307 	and.w	r3, r3, #7
   120f8:	429d      	cmp	r5, r3
   120fa:	dbf5      	blt.n	120e8 <lv_task_set_prio+0x2c>
            if(i != task) _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
   120fc:	45a1      	cmp	r9, r4
   120fe:	d005      	beq.n	1210c <lv_task_set_prio+0x50>
   12100:	4622      	mov	r2, r4
   12102:	4649      	mov	r1, r9
   12104:	480b      	ldr	r0, [pc, #44]	; (12134 <lv_task_set_prio+0x78>)
   12106:	4b0e      	ldr	r3, [pc, #56]	; (12140 <lv_task_set_prio+0x84>)
   12108:	4798      	blx	r3
    if(i == NULL) {
   1210a:	b154      	cbz	r4, 12122 <lv_task_set_prio+0x66>
    task_list_changed = true;
   1210c:	2201      	movs	r2, #1
   1210e:	4b0d      	ldr	r3, [pc, #52]	; (12144 <lv_task_set_prio+0x88>)
   12110:	701a      	strb	r2, [r3, #0]
    task->prio = prio;
   12112:	f899 3014 	ldrb.w	r3, [r9, #20]
   12116:	f368 0302 	bfi	r3, r8, #0, #3
   1211a:	f889 3014 	strb.w	r3, [r9, #20]
   1211e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
   12122:	2200      	movs	r2, #0
   12124:	4649      	mov	r1, r9
   12126:	4803      	ldr	r0, [pc, #12]	; (12134 <lv_task_set_prio+0x78>)
   12128:	4b05      	ldr	r3, [pc, #20]	; (12140 <lv_task_set_prio+0x84>)
   1212a:	4798      	blx	r3
   1212c:	e7ee      	b.n	1210c <lv_task_set_prio+0x50>
   1212e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12132:	bf00      	nop
   12134:	2000ac94 	.word	0x2000ac94
   12138:	00011189 	.word	0x00011189
   1213c:	0001119d 	.word	0x0001119d
   12140:	00011375 	.word	0x00011375
   12144:	2000abb4 	.word	0x2000abb4

00012148 <lv_task_create>:
{
   12148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1214c:	4680      	mov	r8, r0
   1214e:	460f      	mov	r7, r1
   12150:	4616      	mov	r6, r2
   12152:	461d      	mov	r5, r3
    lv_task_t * new_task = lv_task_create_basic();
   12154:	4b0b      	ldr	r3, [pc, #44]	; (12184 <lv_task_create+0x3c>)
   12156:	4798      	blx	r3
   12158:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_task);
   1215a:	4b0b      	ldr	r3, [pc, #44]	; (12188 <lv_task_create+0x40>)
   1215c:	4798      	blx	r3
   1215e:	b158      	cbz	r0, 12178 <lv_task_create+0x30>
    if(new_task == NULL) return NULL;
   12160:	b13c      	cbz	r4, 12172 <lv_task_create+0x2a>
    task->task_cb = task_cb;
   12162:	f8c4 8008 	str.w	r8, [r4, #8]
    task->period = period;
   12166:	6027      	str	r7, [r4, #0]
    lv_task_set_prio(new_task, prio);
   12168:	4631      	mov	r1, r6
   1216a:	4620      	mov	r0, r4
   1216c:	4b07      	ldr	r3, [pc, #28]	; (1218c <lv_task_create+0x44>)
   1216e:	4798      	blx	r3
    new_task->user_data = user_data;
   12170:	60e5      	str	r5, [r4, #12]
}
   12172:	4620      	mov	r0, r4
   12174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LV_ASSERT_MEM(new_task);
   12178:	4622      	mov	r2, r4
   1217a:	2300      	movs	r3, #0
   1217c:	4804      	ldr	r0, [pc, #16]	; (12190 <lv_task_create+0x48>)
   1217e:	4905      	ldr	r1, [pc, #20]	; (12194 <lv_task_create+0x4c>)
   12180:	4788      	blx	r1
   12182:	e7fe      	b.n	12182 <lv_task_create+0x3a>
   12184:	00011dad 	.word	0x00011dad
   12188:	0000295d 	.word	0x0000295d
   1218c:	000120bd 	.word	0x000120bd
   12190:	0001786c 	.word	0x0001786c
   12194:	00002965 	.word	0x00002965

00012198 <lv_task_ready>:
{
   12198:	b510      	push	{r4, lr}
   1219a:	4604      	mov	r4, r0
    task->last_run = lv_tick_get() - task->period - 1;
   1219c:	4b03      	ldr	r3, [pc, #12]	; (121ac <lv_task_ready+0x14>)
   1219e:	4798      	blx	r3
   121a0:	6823      	ldr	r3, [r4, #0]
   121a2:	43db      	mvns	r3, r3
   121a4:	4403      	add	r3, r0
   121a6:	6063      	str	r3, [r4, #4]
   121a8:	bd10      	pop	{r4, pc}
   121aa:	bf00      	nop
   121ac:	000102d9 	.word	0x000102d9

000121b0 <lv_txt_utf8_size>:
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4). O on invalid code
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
    if((str[0] & 0x80) == 0)
   121b0:	7803      	ldrb	r3, [r0, #0]
   121b2:	f013 0f80 	tst.w	r3, #128	; 0x80
   121b6:	d101      	bne.n	121bc <lv_txt_utf8_size+0xc>
        return 1;
   121b8:	2001      	movs	r0, #1
   121ba:	4770      	bx	lr
    else if((str[0] & 0xE0) == 0xC0)
   121bc:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
   121c0:	2ac0      	cmp	r2, #192	; 0xc0
   121c2:	d00a      	beq.n	121da <lv_txt_utf8_size+0x2a>
        return 2;
    else if((str[0] & 0xF0) == 0xE0)
   121c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
   121c8:	2ae0      	cmp	r2, #224	; 0xe0
   121ca:	d008      	beq.n	121de <lv_txt_utf8_size+0x2e>
        return 3;
    else if((str[0] & 0xF8) == 0xF0)
   121cc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
        return 4;
    return 0; /*If the char was invalid tell it's 1 byte long*/
   121d0:	2bf0      	cmp	r3, #240	; 0xf0
   121d2:	bf0c      	ite	eq
   121d4:	2004      	moveq	r0, #4
   121d6:	2000      	movne	r0, #0
   121d8:	4770      	bx	lr
        return 2;
   121da:	2002      	movs	r0, #2
   121dc:	4770      	bx	lr
        return 3;
   121de:	2003      	movs	r0, #3
}
   121e0:	4770      	bx	lr

000121e2 <lv_txt_unicode_to_utf8>:
 * @param letter_uni an Unicode letter
 * @return UTF-8 coded character in Little Endian to be compatible with C chars (e.g. 'Á', 'Ű')
 */
static uint32_t lv_txt_unicode_to_utf8(uint32_t letter_uni)
{
    if(letter_uni < 128) return letter_uni;
   121e2:	287f      	cmp	r0, #127	; 0x7f
   121e4:	d916      	bls.n	12214 <lv_txt_unicode_to_utf8+0x32>
{
   121e6:	b082      	sub	sp, #8
    uint8_t bytes[4];

    if(letter_uni < 0x0800) {
   121e8:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   121ec:	d213      	bcs.n	12216 <lv_txt_unicode_to_utf8+0x34>
        bytes[0] = ((letter_uni >> 6) & 0x1F) | 0xC0;
   121ee:	f3c0 1384 	ubfx	r3, r0, #6, #5
   121f2:	f063 033f 	orn	r3, r3, #63	; 0x3f
   121f6:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 0) & 0x3F) | 0x80;
   121fa:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   121fe:	f060 007f 	orn	r0, r0, #127	; 0x7f
   12202:	f88d 0005 	strb.w	r0, [sp, #5]
        bytes[2] = 0;
   12206:	2300      	movs	r3, #0
   12208:	f88d 3006 	strb.w	r3, [sp, #6]
        bytes[3] = 0;
   1220c:	f88d 3007 	strb.w	r3, [sp, #7]
        bytes[2] = ((letter_uni >> 6) & 0x3F) | 0x80;
        bytes[3] = ((letter_uni >> 0) & 0x3F) | 0x80;
    }

    uint32_t * res_p = (uint32_t *)bytes;
    return *res_p;
   12210:	9801      	ldr	r0, [sp, #4]
}
   12212:	b002      	add	sp, #8
   12214:	4770      	bx	lr
    else if(letter_uni < 0x010000) {
   12216:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   1221a:	d215      	bcs.n	12248 <lv_txt_unicode_to_utf8+0x66>
        bytes[0] = ((letter_uni >> 12) & 0x0F) | 0xE0;
   1221c:	f3c0 3303 	ubfx	r3, r0, #12, #4
   12220:	f063 031f 	orn	r3, r3, #31
   12224:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 6) & 0x3F) | 0x80;
   12228:	f3c0 1385 	ubfx	r3, r0, #6, #6
   1222c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   12230:	f88d 3005 	strb.w	r3, [sp, #5]
        bytes[2] = ((letter_uni >> 0) & 0x3F) | 0x80;
   12234:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   12238:	f060 007f 	orn	r0, r0, #127	; 0x7f
   1223c:	f88d 0006 	strb.w	r0, [sp, #6]
        bytes[3] = 0;
   12240:	2300      	movs	r3, #0
   12242:	f88d 3007 	strb.w	r3, [sp, #7]
   12246:	e7e3      	b.n	12210 <lv_txt_unicode_to_utf8+0x2e>
    else if(letter_uni < 0x110000) {
   12248:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   1224c:	d2e0      	bcs.n	12210 <lv_txt_unicode_to_utf8+0x2e>
        bytes[0] = ((letter_uni >> 18) & 0x07) | 0xF0;
   1224e:	f3c0 4382 	ubfx	r3, r0, #18, #3
   12252:	f063 030f 	orn	r3, r3, #15
   12256:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 12) & 0x3F) | 0x80;
   1225a:	f3c0 3305 	ubfx	r3, r0, #12, #6
   1225e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   12262:	f88d 3005 	strb.w	r3, [sp, #5]
        bytes[2] = ((letter_uni >> 6) & 0x3F) | 0x80;
   12266:	f3c0 1385 	ubfx	r3, r0, #6, #6
   1226a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1226e:	f88d 3006 	strb.w	r3, [sp, #6]
        bytes[3] = ((letter_uni >> 0) & 0x3F) | 0x80;
   12272:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   12276:	f060 007f 	orn	r0, r0, #127	; 0x7f
   1227a:	f88d 0007 	strb.w	r0, [sp, #7]
   1227e:	e7c7      	b.n	12210 <lv_txt_unicode_to_utf8+0x2e>

00012280 <lv_txt_utf8_conv_wc>:
 * Convert a wide character, e.g. 'Á' little endian to be UTF-8 compatible
 * @param c a wide character or a  Little endian number
 * @return `c` in big endian
 */
static uint32_t lv_txt_utf8_conv_wc(uint32_t c)
{
   12280:	b082      	sub	sp, #8
   12282:	9001      	str	r0, [sp, #4]
    /*Swap the bytes (UTF-8 is big endian, but the MCUs are little endian)*/
    if((c & 0x80) != 0) {
   12284:	f010 0f80 	tst.w	r0, #128	; 0x80
   12288:	d017      	beq.n	122ba <lv_txt_utf8_conv_wc+0x3a>
        uint32_t swapped;
        uint8_t c8[4];
        _lv_memcpy_small(c8, &c, 4);
        swapped = (c8[0] << 24) + (c8[1] << 16) + (c8[2] << 8) + (c8[3]);
   1228a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1228e:	f89d 2005 	ldrb.w	r2, [sp, #5]
   12292:	0412      	lsls	r2, r2, #16
   12294:	eb02 6203 	add.w	r2, r2, r3, lsl #24
   12298:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1229c:	eb02 2203 	add.w	r2, r2, r3, lsl #8
   122a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   122a4:	441a      	add	r2, r3
   122a6:	2304      	movs	r3, #4
        uint8_t i;
        for(i = 0; i < 4; i++) {
            if((swapped & 0xFF) == 0)
   122a8:	f012 0fff 	tst.w	r2, #255	; 0xff
                swapped = (swapped >> 8); /*Ignore leading zeros (they were in the end originally)*/
   122ac:	bf08      	it	eq
   122ae:	0a12      	lsreq	r2, r2, #8
   122b0:	3b01      	subs	r3, #1
        for(i = 0; i < 4; i++) {
   122b2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   122b6:	d1f7      	bne.n	122a8 <lv_txt_utf8_conv_wc+0x28>
        }
        c = swapped;
   122b8:	9201      	str	r2, [sp, #4]
    }

    return c;
}
   122ba:	9801      	ldr	r0, [sp, #4]
   122bc:	b002      	add	sp, #8
   122be:	4770      	bx	lr

000122c0 <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
   122c0:	b470      	push	{r4, r5, r6}
   122c2:	b083      	sub	sp, #12
     * */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
   122c4:	2300      	movs	r3, #0
   122c6:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
   122c8:	460c      	mov	r4, r1
   122ca:	b151      	cbz	r1, 122e2 <lv_txt_utf8_next+0x22>

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
   122cc:	6822      	ldr	r2, [r4, #0]
   122ce:	5c83      	ldrb	r3, [r0, r2]
   122d0:	f013 0f80 	tst.w	r3, #128	; 0x80
   122d4:	d107      	bne.n	122e6 <lv_txt_utf8_next+0x26>
        result = txt[*i];
   122d6:	4618      	mov	r0, r3
        (*i)++;
   122d8:	3201      	adds	r2, #1
   122da:	6022      	str	r2, [r4, #0]
        else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
   122dc:	b003      	add	sp, #12
   122de:	bc70      	pop	{r4, r5, r6}
   122e0:	4770      	bx	lr
    if(i == NULL) i = &i_tmp;
   122e2:	ac01      	add	r4, sp, #4
   122e4:	e7f2      	b.n	122cc <lv_txt_utf8_next+0xc>
        if((txt[*i] & 0xE0) == 0xC0) {
   122e6:	f003 01e0 	and.w	r1, r3, #224	; 0xe0
   122ea:	29c0      	cmp	r1, #192	; 0xc0
   122ec:	d00b      	beq.n	12306 <lv_txt_utf8_next+0x46>
        else if((txt[*i] & 0xF0) == 0xE0) {
   122ee:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
   122f2:	29e0      	cmp	r1, #224	; 0xe0
   122f4:	d019      	beq.n	1232a <lv_txt_utf8_next+0x6a>
        else if((txt[*i] & 0xF8) == 0xF0) {
   122f6:	f003 01f8 	and.w	r1, r3, #248	; 0xf8
   122fa:	29f0      	cmp	r1, #240	; 0xf0
   122fc:	d033      	beq.n	12366 <lv_txt_utf8_next+0xa6>
            (*i)++; /*Not UTF-8 char. Go the next.*/
   122fe:	3201      	adds	r2, #1
   12300:	6022      	str	r2, [r4, #0]
    uint32_t result = 0;
   12302:	2000      	movs	r0, #0
   12304:	e7ea      	b.n	122dc <lv_txt_utf8_next+0x1c>
            (*i)++;
   12306:	1c51      	adds	r1, r2, #1
   12308:	6021      	str	r1, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   1230a:	5c40      	ldrb	r0, [r0, r1]
   1230c:	f000 01c0 	and.w	r1, r0, #192	; 0xc0
   12310:	2980      	cmp	r1, #128	; 0x80
   12312:	d001      	beq.n	12318 <lv_txt_utf8_next+0x58>
   12314:	2000      	movs	r0, #0
   12316:	e7e1      	b.n	122dc <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
   12318:	019b      	lsls	r3, r3, #6
   1231a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
            result += (txt[*i] & 0x3F);
   1231e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   12322:	4418      	add	r0, r3
            (*i)++;
   12324:	3202      	adds	r2, #2
   12326:	6022      	str	r2, [r4, #0]
   12328:	e7d8      	b.n	122dc <lv_txt_utf8_next+0x1c>
            (*i)++;
   1232a:	1c51      	adds	r1, r2, #1
   1232c:	6021      	str	r1, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   1232e:	5c41      	ldrb	r1, [r0, r1]
   12330:	f001 05c0 	and.w	r5, r1, #192	; 0xc0
   12334:	2d80      	cmp	r5, #128	; 0x80
   12336:	d001      	beq.n	1233c <lv_txt_utf8_next+0x7c>
   12338:	2000      	movs	r0, #0
   1233a:	e7cf      	b.n	122dc <lv_txt_utf8_next+0x1c>
            (*i)++;
   1233c:	1c95      	adds	r5, r2, #2
   1233e:	6025      	str	r5, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   12340:	5d40      	ldrb	r0, [r0, r5]
   12342:	f000 05c0 	and.w	r5, r0, #192	; 0xc0
   12346:	2d80      	cmp	r5, #128	; 0x80
   12348:	d001      	beq.n	1234e <lv_txt_utf8_next+0x8e>
   1234a:	2000      	movs	r0, #0
   1234c:	e7c6      	b.n	122dc <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
   1234e:	031b      	lsls	r3, r3, #12
   12350:	b29b      	uxth	r3, r3
            result += (txt[*i] & 0x3F);
   12352:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   12356:	4403      	add	r3, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
   12358:	0188      	lsls	r0, r1, #6
   1235a:	f400 607c 	and.w	r0, r0, #4032	; 0xfc0
            result += (txt[*i] & 0x3F);
   1235e:	4418      	add	r0, r3
            (*i)++;
   12360:	3203      	adds	r2, #3
   12362:	6022      	str	r2, [r4, #0]
   12364:	e7ba      	b.n	122dc <lv_txt_utf8_next+0x1c>
            (*i)++;
   12366:	1c51      	adds	r1, r2, #1
   12368:	6021      	str	r1, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   1236a:	5c41      	ldrb	r1, [r0, r1]
   1236c:	f001 05c0 	and.w	r5, r1, #192	; 0xc0
   12370:	2d80      	cmp	r5, #128	; 0x80
   12372:	d001      	beq.n	12378 <lv_txt_utf8_next+0xb8>
   12374:	2000      	movs	r0, #0
   12376:	e7b1      	b.n	122dc <lv_txt_utf8_next+0x1c>
            (*i)++;
   12378:	1c95      	adds	r5, r2, #2
   1237a:	6025      	str	r5, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   1237c:	5d45      	ldrb	r5, [r0, r5]
   1237e:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
   12382:	2e80      	cmp	r6, #128	; 0x80
   12384:	d001      	beq.n	1238a <lv_txt_utf8_next+0xca>
   12386:	2000      	movs	r0, #0
   12388:	e7a8      	b.n	122dc <lv_txt_utf8_next+0x1c>
            (*i)++;
   1238a:	1cd6      	adds	r6, r2, #3
   1238c:	6026      	str	r6, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   1238e:	5d86      	ldrb	r6, [r0, r6]
   12390:	f006 00c0 	and.w	r0, r6, #192	; 0xc0
   12394:	2880      	cmp	r0, #128	; 0x80
   12396:	d001      	beq.n	1239c <lv_txt_utf8_next+0xdc>
   12398:	2000      	movs	r0, #0
   1239a:	e79f      	b.n	122dc <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
   1239c:	049b      	lsls	r3, r3, #18
   1239e:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
   123a2:	0309      	lsls	r1, r1, #12
   123a4:	f401 307c 	and.w	r0, r1, #258048	; 0x3f000
   123a8:	4303      	orrs	r3, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
   123aa:	01a8      	lsls	r0, r5, #6
   123ac:	f400 607c 	and.w	r0, r0, #4032	; 0xfc0
            result += txt[*i] & 0x3F;
   123b0:	f006 063f 	and.w	r6, r6, #63	; 0x3f
   123b4:	4430      	add	r0, r6
   123b6:	4418      	add	r0, r3
            (*i)++;
   123b8:	3204      	adds	r2, #4
   123ba:	6022      	str	r2, [r4, #0]
   123bc:	e78e      	b.n	122dc <lv_txt_utf8_next+0x1c>
	...

000123c0 <lv_txt_utf8_prev>:
 * @param i start byte index in 'txt' where to start. After the call it will point to the previous
 * UTF-8 char in 'txt'.
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_prev(const char * txt, uint32_t * i)
{
   123c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   123c2:	b083      	sub	sp, #12
   123c4:	4606      	mov	r6, r0
   123c6:	460d      	mov	r5, r1
    uint8_t c_size;
    uint8_t cnt = 0;

    /*Try to find a !0 long UTF-8 char by stepping one character back*/
    (*i)--;
   123c8:	680b      	ldr	r3, [r1, #0]
   123ca:	3b01      	subs	r3, #1
   123cc:	600b      	str	r3, [r1, #0]
   123ce:	2404      	movs	r4, #4
    do {
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/

        c_size = _lv_txt_encoded_size(&txt[*i]);
   123d0:	4f0e      	ldr	r7, [pc, #56]	; (1240c <lv_txt_utf8_prev+0x4c>)
   123d2:	e005      	b.n	123e0 <lv_txt_utf8_prev+0x20>
        if(c_size == 0) {
            if(*i != 0)
                (*i)--;
   123d4:	3801      	subs	r0, #1
   123d6:	6028      	str	r0, [r5, #0]
   123d8:	1e63      	subs	r3, r4, #1
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
   123da:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
   123de:	d008      	beq.n	123f2 <lv_txt_utf8_prev+0x32>
        c_size = _lv_txt_encoded_size(&txt[*i]);
   123e0:	6828      	ldr	r0, [r5, #0]
   123e2:	4430      	add	r0, r6
   123e4:	683b      	ldr	r3, [r7, #0]
   123e6:	4798      	blx	r3
        if(c_size == 0) {
   123e8:	b928      	cbnz	r0, 123f6 <lv_txt_utf8_prev+0x36>
            if(*i != 0)
   123ea:	6828      	ldr	r0, [r5, #0]
   123ec:	2800      	cmp	r0, #0
   123ee:	d1f1      	bne.n	123d4 <lv_txt_utf8_prev+0x14>
   123f0:	e009      	b.n	12406 <lv_txt_utf8_prev+0x46>
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
   123f2:	2000      	movs	r0, #0
   123f4:	e007      	b.n	12406 <lv_txt_utf8_prev+0x46>
                return 0;
        }
        cnt++;
    } while(c_size == 0);

    uint32_t i_tmp  = *i;
   123f6:	682b      	ldr	r3, [r5, #0]
   123f8:	a902      	add	r1, sp, #8
   123fa:	f841 3d04 	str.w	r3, [r1, #-4]!
    uint32_t letter = _lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
   123fe:	4b03      	ldr	r3, [pc, #12]	; (1240c <lv_txt_utf8_prev+0x4c>)
   12400:	685b      	ldr	r3, [r3, #4]
   12402:	4630      	mov	r0, r6
   12404:	4798      	blx	r3

    return letter;
}
   12406:	b003      	add	sp, #12
   12408:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1240a:	bf00      	nop
   1240c:	20000054 	.word	0x20000054

00012410 <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
   12410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t i;
    uint32_t byte_cnt = 0;
    for(i = 0; i < utf8_id; i++) {
   12414:	460e      	mov	r6, r1
   12416:	b191      	cbz	r1, 1243e <lv_txt_utf8_get_byte_id+0x2e>
   12418:	4607      	mov	r7, r0
   1241a:	2400      	movs	r4, #0
   1241c:	4625      	mov	r5, r4
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
   1241e:	f8df 8024 	ldr.w	r8, [pc, #36]	; 12444 <lv_txt_utf8_get_byte_id+0x34>
   12422:	1938      	adds	r0, r7, r4
   12424:	f8d8 3000 	ldr.w	r3, [r8]
   12428:	4798      	blx	r3
        byte_cnt += c_size > 0 ? c_size : 1;
   1242a:	2800      	cmp	r0, #0
   1242c:	bf08      	it	eq
   1242e:	2001      	moveq	r0, #1
   12430:	4404      	add	r4, r0
    for(i = 0; i < utf8_id; i++) {
   12432:	3501      	adds	r5, #1
   12434:	42ae      	cmp	r6, r5
   12436:	d1f4      	bne.n	12422 <lv_txt_utf8_get_byte_id+0x12>
    }

    return byte_cnt;
}
   12438:	4620      	mov	r0, r4
   1243a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t byte_cnt = 0;
   1243e:	460c      	mov	r4, r1
    return byte_cnt;
   12440:	e7fa      	b.n	12438 <lv_txt_utf8_get_byte_id+0x28>
   12442:	bf00      	nop
   12444:	20000054 	.word	0x20000054

00012448 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
   12448:	b5f0      	push	{r4, r5, r6, r7, lr}
   1244a:	b083      	sub	sp, #12
    uint32_t i        = 0;
   1244c:	2300      	movs	r3, #0
   1244e:	9301      	str	r3, [sp, #4]
    uint32_t char_cnt = 0;

    while(i < byte_id) {
   12450:	460d      	mov	r5, r1
   12452:	b169      	cbz	r1, 12470 <lv_txt_utf8_get_char_id+0x28>
   12454:	4606      	mov	r6, r0
   12456:	461c      	mov	r4, r3
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
   12458:	4f06      	ldr	r7, [pc, #24]	; (12474 <lv_txt_utf8_get_char_id+0x2c>)
   1245a:	a901      	add	r1, sp, #4
   1245c:	4630      	mov	r0, r6
   1245e:	687b      	ldr	r3, [r7, #4]
   12460:	4798      	blx	r3
        char_cnt++;
   12462:	3401      	adds	r4, #1
    while(i < byte_id) {
   12464:	9b01      	ldr	r3, [sp, #4]
   12466:	42ab      	cmp	r3, r5
   12468:	d3f7      	bcc.n	1245a <lv_txt_utf8_get_char_id+0x12>
    }

    return char_cnt;
}
   1246a:	4620      	mov	r0, r4
   1246c:	b003      	add	sp, #12
   1246e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t char_cnt = 0;
   12470:	460c      	mov	r4, r1
    return char_cnt;
   12472:	e7fa      	b.n	1246a <lv_txt_utf8_get_char_id+0x22>
   12474:	20000054 	.word	0x20000054

00012478 <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
   12478:	b570      	push	{r4, r5, r6, lr}
   1247a:	b082      	sub	sp, #8
    uint32_t len = 0;
    uint32_t i   = 0;
   1247c:	2300      	movs	r3, #0
   1247e:	9301      	str	r3, [sp, #4]

    while(txt[i] != '\0') {
   12480:	7803      	ldrb	r3, [r0, #0]
   12482:	b173      	cbz	r3, 124a2 <lv_txt_utf8_get_length+0x2a>
   12484:	4604      	mov	r4, r0
   12486:	2500      	movs	r5, #0
        _lv_txt_encoded_next(txt, &i);
   12488:	4e07      	ldr	r6, [pc, #28]	; (124a8 <lv_txt_utf8_get_length+0x30>)
   1248a:	a901      	add	r1, sp, #4
   1248c:	4620      	mov	r0, r4
   1248e:	6873      	ldr	r3, [r6, #4]
   12490:	4798      	blx	r3
        len++;
   12492:	3501      	adds	r5, #1
    while(txt[i] != '\0') {
   12494:	9b01      	ldr	r3, [sp, #4]
   12496:	5ce3      	ldrb	r3, [r4, r3]
   12498:	2b00      	cmp	r3, #0
   1249a:	d1f6      	bne.n	1248a <lv_txt_utf8_get_length+0x12>
    }

    return len;
}
   1249c:	4628      	mov	r0, r5
   1249e:	b002      	add	sp, #8
   124a0:	bd70      	pop	{r4, r5, r6, pc}
    uint32_t len = 0;
   124a2:	2500      	movs	r5, #0
    return len;
   124a4:	e7fa      	b.n	1249c <lv_txt_utf8_get_length+0x24>
   124a6:	bf00      	nop
   124a8:	20000054 	.word	0x20000054

000124ac <_lv_txt_is_cmd>:
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
   124ac:	2923      	cmp	r1, #35	; 0x23
   124ae:	d004      	beq.n	124ba <_lv_txt_is_cmd+0xe>
    if(*state == LV_TXT_CMD_STATE_PAR) {
   124b0:	7803      	ldrb	r3, [r0, #0]
   124b2:	2b01      	cmp	r3, #1
   124b4:	d015      	beq.n	124e2 <_lv_txt_is_cmd+0x36>
    bool ret = false;
   124b6:	2000      	movs	r0, #0
   124b8:	4770      	bx	lr
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
   124ba:	7803      	ldrb	r3, [r0, #0]
   124bc:	b91b      	cbnz	r3, 124c6 <_lv_txt_is_cmd+0x1a>
            *state = LV_TXT_CMD_STATE_PAR;
   124be:	2301      	movs	r3, #1
   124c0:	7003      	strb	r3, [r0, #0]
        ret = true;
   124c2:	4618      	mov	r0, r3
   124c4:	4770      	bx	lr
        else if(*state == LV_TXT_CMD_STATE_PAR) {
   124c6:	2b01      	cmp	r3, #1
   124c8:	d003      	beq.n	124d2 <_lv_txt_is_cmd+0x26>
        else if(*state == LV_TXT_CMD_STATE_IN) {
   124ca:	2b02      	cmp	r3, #2
   124cc:	d005      	beq.n	124da <_lv_txt_is_cmd+0x2e>
    bool ret = false;
   124ce:	2000      	movs	r0, #0
}
   124d0:	4770      	bx	lr
            *state = LV_TXT_CMD_STATE_WAIT;
   124d2:	2300      	movs	r3, #0
   124d4:	7003      	strb	r3, [r0, #0]
    bool ret = false;
   124d6:	4618      	mov	r0, r3
   124d8:	4770      	bx	lr
            *state = LV_TXT_CMD_STATE_WAIT;
   124da:	2300      	movs	r3, #0
   124dc:	7003      	strb	r3, [r0, #0]
            ret    = true;
   124de:	2001      	movs	r0, #1
   124e0:	4770      	bx	lr
        if(c == ' ') {
   124e2:	2920      	cmp	r1, #32
   124e4:	d103      	bne.n	124ee <_lv_txt_is_cmd+0x42>
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
   124e6:	2302      	movs	r3, #2
   124e8:	7003      	strb	r3, [r0, #0]
        ret = true;
   124ea:	2001      	movs	r0, #1
   124ec:	4770      	bx	lr
   124ee:	2001      	movs	r0, #1
   124f0:	4770      	bx	lr
	...

000124f4 <_lv_txt_get_next_line>:
{
   124f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124f8:	b091      	sub	sp, #68	; 0x44
   124fa:	9105      	str	r1, [sp, #20]
   124fc:	9206      	str	r2, [sp, #24]
   124fe:	9307      	str	r3, [sp, #28]
   12500:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
   12504:	9304      	str	r3, [sp, #16]
    if(txt == NULL) return 0;
   12506:	9008      	str	r0, [sp, #32]
   12508:	2800      	cmp	r0, #0
   1250a:	f000 80f0 	beq.w	126ee <_lv_txt_get_next_line+0x1fa>
    if(font == NULL) return 0;
   1250e:	2900      	cmp	r1, #0
   12510:	f000 80ef 	beq.w	126f2 <_lv_txt_get_next_line+0x1fe>
    if((flag & LV_TXT_FLAG_EXPAND) || (flag & LV_TXT_FLAG_FIT)) {
   12514:	f013 0f12 	tst.w	r3, #18
   12518:	d017      	beq.n	1254a <_lv_txt_get_next_line+0x56>
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
   1251a:	7803      	ldrb	r3, [r0, #0]
   1251c:	2b0a      	cmp	r3, #10
   1251e:	f000 80ea 	beq.w	126f6 <_lv_txt_get_next_line+0x202>
   12522:	2b0d      	cmp	r3, #13
   12524:	f000 80ed 	beq.w	12702 <_lv_txt_get_next_line+0x20e>
   12528:	2b00      	cmp	r3, #0
   1252a:	f000 80ec 	beq.w	12706 <_lv_txt_get_next_line+0x212>
   1252e:	4601      	mov	r1, r0
   12530:	2200      	movs	r2, #0
   12532:	3201      	adds	r2, #1
   12534:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   12538:	2b0a      	cmp	r3, #10
   1253a:	f000 80dd 	beq.w	126f8 <_lv_txt_get_next_line+0x204>
   1253e:	2b0d      	cmp	r3, #13
   12540:	f000 80da 	beq.w	126f8 <_lv_txt_get_next_line+0x204>
   12544:	2b00      	cmp	r3, #0
   12546:	d1f4      	bne.n	12532 <_lv_txt_get_next_line+0x3e>
   12548:	e0d7      	b.n	126fa <_lv_txt_get_next_line+0x206>
   1254a:	9b04      	ldr	r3, [sp, #16]
   1254c:	f003 0302 	and.w	r3, r3, #2
   12550:	461a      	mov	r2, r3
   12552:	930b      	str	r3, [sp, #44]	; 0x2c
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   12554:	f647 4318 	movw	r3, #31768	; 0x7c18
   12558:	9907      	ldr	r1, [sp, #28]
   1255a:	2a00      	cmp	r2, #0
   1255c:	bf18      	it	ne
   1255e:	4619      	movne	r1, r3
   12560:	9107      	str	r1, [sp, #28]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
   12562:	2300      	movs	r3, #0
   12564:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
    uint32_t i = 0;                                        /* Iterating index into txt */
   12568:	930e      	str	r3, [sp, #56]	; 0x38
    letter = _lv_txt_encoded_next(txt, &i_next);
   1256a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 12718 <_lv_txt_get_next_line+0x224>
{
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
   1256e:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 1271c <_lv_txt_get_next_line+0x228>
    while(txt[i] != '\0' && max_width > 0) {
   12572:	e078      	b.n	12666 <_lv_txt_get_next_line+0x172>
        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
   12574:	9a01      	ldr	r2, [sp, #4]
   12576:	4621      	mov	r1, r4
   12578:	9805      	ldr	r0, [sp, #20]
   1257a:	4b64      	ldr	r3, [pc, #400]	; (1270c <_lv_txt_get_next_line+0x218>)
   1257c:	4798      	blx	r3
        cur_w += letter_w;
   1257e:	4405      	add	r5, r0
   12580:	b2ad      	uxth	r5, r5
        if(letter_w > 0) {
   12582:	b200      	sxth	r0, r0
   12584:	2800      	cmp	r0, #0
   12586:	dd02      	ble.n	1258e <_lv_txt_get_next_line+0x9a>
            cur_w += letter_space;
   12588:	9b06      	ldr	r3, [sp, #24]
   1258a:	441d      	add	r5, r3
   1258c:	b2ad      	uxth	r5, r5
   1258e:	b22d      	sxth	r5, r5
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
   12590:	f1b7 3fff 	cmp.w	r7, #4294967295
   12594:	d038      	beq.n	12608 <_lv_txt_get_next_line+0x114>
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
   12596:	f1a4 020a 	sub.w	r2, r4, #10
   1259a:	2a16      	cmp	r2, #22
   1259c:	d83b      	bhi.n	12616 <_lv_txt_get_next_line+0x122>
   1259e:	4b5c      	ldr	r3, [pc, #368]	; (12710 <_lv_txt_get_next_line+0x21c>)
   125a0:	40d3      	lsrs	r3, r2
   125a2:	f013 0f01 	tst.w	r3, #1
   125a6:	d139      	bne.n	1261c <_lv_txt_get_next_line+0x128>
   125a8:	2301      	movs	r3, #1
   125aa:	222c      	movs	r2, #44	; 0x2c
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
   125ac:	4294      	cmp	r4, r2
   125ae:	d035      	beq.n	1261c <_lv_txt_get_next_line+0x128>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
   125b0:	3301      	adds	r3, #1
   125b2:	b2db      	uxtb	r3, r3
   125b4:	f81a 2003 	ldrb.w	r2, [sl, r3]
   125b8:	2a00      	cmp	r2, #0
   125ba:	d1f7      	bne.n	125ac <_lv_txt_get_next_line+0xb8>
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
   125bc:	f1b7 3fff 	cmp.w	r7, #4294967295
   125c0:	bf08      	it	eq
   125c2:	46ab      	moveq	fp, r5
        i = i_next;
   125c4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
        i_next = i_next_next;
   125c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   125c8:	930c      	str	r3, [sp, #48]	; 0x30
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
   125ca:	9b03      	ldr	r3, [sp, #12]
   125cc:	9302      	str	r3, [sp, #8]
   125ce:	9c01      	ldr	r4, [sp, #4]
    while(txt[i] != '\0') {
   125d0:	f818 3006 	ldrb.w	r3, [r8, r6]
   125d4:	2b00      	cmp	r3, #0
   125d6:	d06e      	beq.n	126b6 <_lv_txt_get_next_line+0x1c2>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
   125d8:	f8d9 3004 	ldr.w	r3, [r9, #4]
   125dc:	a90d      	add	r1, sp, #52	; 0x34
   125de:	4640      	mov	r0, r8
   125e0:	4798      	blx	r3
   125e2:	9001      	str	r0, [sp, #4]
        word_len++;
   125e4:	9b02      	ldr	r3, [sp, #8]
   125e6:	3301      	adds	r3, #1
   125e8:	9303      	str	r3, [sp, #12]
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   125ea:	9b04      	ldr	r3, [sp, #16]
   125ec:	f013 0f01 	tst.w	r3, #1
   125f0:	d0c0      	beq.n	12574 <_lv_txt_get_next_line+0x80>
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
   125f2:	4621      	mov	r1, r4
   125f4:	f10d 003f 	add.w	r0, sp, #63	; 0x3f
   125f8:	4b46      	ldr	r3, [pc, #280]	; (12714 <_lv_txt_get_next_line+0x220>)
   125fa:	4798      	blx	r3
   125fc:	2800      	cmp	r0, #0
   125fe:	d0b9      	beq.n	12574 <_lv_txt_get_next_line+0x80>
                i = i_next;
   12600:	9e0c      	ldr	r6, [sp, #48]	; 0x30
                i_next = i_next_next;
   12602:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12604:	930c      	str	r3, [sp, #48]	; 0x30
   12606:	e7e0      	b.n	125ca <_lv_txt_get_next_line+0xd6>
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
   12608:	9b06      	ldr	r3, [sp, #24]
   1260a:	1aeb      	subs	r3, r5, r3
   1260c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1260e:	4293      	cmp	r3, r2
   12610:	bfc8      	it	gt
   12612:	4637      	movgt	r7, r6
   12614:	e7bf      	b.n	12596 <_lv_txt_get_next_line+0xa2>
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
   12616:	2301      	movs	r3, #1
   12618:	222c      	movs	r2, #44	; 0x2c
   1261a:	e7c7      	b.n	125ac <_lv_txt_get_next_line+0xb8>
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
   1261c:	2e00      	cmp	r6, #0
   1261e:	d14a      	bne.n	126b6 <_lv_txt_get_next_line+0x1c2>
   12620:	f1b7 3fff 	cmp.w	r7, #4294967295
   12624:	d14a      	bne.n	126bc <_lv_txt_get_next_line+0x1c8>
   12626:	46ab      	mov	fp, r5
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
   12628:	9b02      	ldr	r3, [sp, #8]
   1262a:	b123      	cbz	r3, 12636 <_lv_txt_get_next_line+0x142>
   1262c:	2c0d      	cmp	r4, #13
   1262e:	d103      	bne.n	12638 <_lv_txt_get_next_line+0x144>
   12630:	9b01      	ldr	r3, [sp, #4]
   12632:	2b0a      	cmp	r3, #10
   12634:	d100      	bne.n	12638 <_lv_txt_get_next_line+0x144>
   12636:	9e0c      	ldr	r6, [sp, #48]	; 0x30
        return i;
   12638:	b2b6      	uxth	r6, r6
        max_width -= word_w;
   1263a:	9b07      	ldr	r3, [sp, #28]
   1263c:	eba3 0b0b 	sub.w	fp, r3, fp
   12640:	fa0f f38b 	sxth.w	r3, fp
   12644:	9307      	str	r3, [sp, #28]
        if(advance == 0) {
   12646:	2e00      	cmp	r6, #0
   12648:	d03a      	beq.n	126c0 <_lv_txt_get_next_line+0x1cc>
        i += advance;
   1264a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1264c:	443e      	add	r6, r7
   1264e:	960e      	str	r6, [sp, #56]	; 0x38
        if(txt[0] == '\n' || txt[0] == '\r') break;
   12650:	9a08      	ldr	r2, [sp, #32]
   12652:	7813      	ldrb	r3, [r2, #0]
   12654:	2b0a      	cmp	r3, #10
   12656:	d03f      	beq.n	126d8 <_lv_txt_get_next_line+0x1e4>
   12658:	2b0d      	cmp	r3, #13
   1265a:	d03d      	beq.n	126d8 <_lv_txt_get_next_line+0x1e4>
        if(txt[i] == '\n' || txt[i] == '\r') {
   1265c:	5d93      	ldrb	r3, [r2, r6]
   1265e:	2b0a      	cmp	r3, #10
   12660:	d038      	beq.n	126d4 <_lv_txt_get_next_line+0x1e0>
   12662:	2b0d      	cmp	r3, #13
   12664:	d036      	beq.n	126d4 <_lv_txt_get_next_line+0x1e0>
    while(txt[i] != '\0' && max_width > 0) {
   12666:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12668:	930a      	str	r3, [sp, #40]	; 0x28
   1266a:	9908      	ldr	r1, [sp, #32]
   1266c:	eb01 0803 	add.w	r8, r1, r3
   12670:	5ccb      	ldrb	r3, [r1, r3]
   12672:	2b00      	cmp	r3, #0
   12674:	d030      	beq.n	126d8 <_lv_txt_get_next_line+0x1e4>
   12676:	9b07      	ldr	r3, [sp, #28]
   12678:	2b00      	cmp	r3, #0
   1267a:	dd2d      	ble.n	126d8 <_lv_txt_get_next_line+0x1e4>
    if(txt == NULL || txt[0] == '\0') return 0;
   1267c:	f1b8 0f00 	cmp.w	r8, #0
   12680:	d01e      	beq.n	126c0 <_lv_txt_get_next_line+0x1cc>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   12682:	f647 4318 	movw	r3, #31768	; 0x7c18
   12686:	9a07      	ldr	r2, [sp, #28]
   12688:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1268a:	2900      	cmp	r1, #0
   1268c:	bf08      	it	eq
   1268e:	4613      	moveq	r3, r2
   12690:	9309      	str	r3, [sp, #36]	; 0x24
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
   12692:	2600      	movs	r6, #0
   12694:	960c      	str	r6, [sp, #48]	; 0x30
   12696:	960d      	str	r6, [sp, #52]	; 0x34
    letter = _lv_txt_encoded_next(txt, &i_next);
   12698:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1269c:	a90c      	add	r1, sp, #48	; 0x30
   1269e:	4640      	mov	r0, r8
   126a0:	4798      	blx	r3
   126a2:	4604      	mov	r4, r0
    i_next_next = i_next;
   126a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   126a6:	930d      	str	r3, [sp, #52]	; 0x34
        uint32_t word_w = 0;
   126a8:	46b3      	mov	fp, r6
    uint32_t break_index = NO_BREAK_FOUND; /* only used for "long" words */
   126aa:	f04f 37ff 	mov.w	r7, #4294967295
    uint32_t word_len = 0;   /* Number of characters in the transversed word */
   126ae:	9602      	str	r6, [sp, #8]
    lv_coord_t cur_w = 0;  /* Pixel Width of transversed string */
   126b0:	4635      	mov	r5, r6
    uint32_t letter_next = 0; /* Letter at i_next */
   126b2:	9601      	str	r6, [sp, #4]
   126b4:	e78c      	b.n	125d0 <_lv_txt_get_next_line+0xdc>
    if(break_index == NO_BREAK_FOUND) {
   126b6:	f1b7 3fff 	cmp.w	r7, #4294967295
   126ba:	d0b5      	beq.n	12628 <_lv_txt_get_next_line+0x134>
    if(force) return break_index;
   126bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   126be:	b13b      	cbz	r3, 126d0 <_lv_txt_get_next_line+0x1dc>
            if(i == 0) _lv_txt_encoded_next(txt, &i); // prevent inf loops
   126c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   126c2:	b95b      	cbnz	r3, 126dc <_lv_txt_get_next_line+0x1e8>
   126c4:	4b14      	ldr	r3, [pc, #80]	; (12718 <_lv_txt_get_next_line+0x224>)
   126c6:	685b      	ldr	r3, [r3, #4]
   126c8:	a90e      	add	r1, sp, #56	; 0x38
   126ca:	9808      	ldr	r0, [sp, #32]
   126cc:	4798      	blx	r3
   126ce:	e003      	b.n	126d8 <_lv_txt_get_next_line+0x1e4>
    if(force) return break_index;
   126d0:	b2be      	uxth	r6, r7
   126d2:	e7b2      	b.n	1263a <_lv_txt_get_next_line+0x146>
            i++;  /* Include the following newline in the current line */
   126d4:	3601      	adds	r6, #1
   126d6:	960e      	str	r6, [sp, #56]	; 0x38
    if(i == 0) {
   126d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   126da:	b113      	cbz	r3, 126e2 <_lv_txt_get_next_line+0x1ee>
    return i;
   126dc:	f8bd 0038 	ldrh.w	r0, [sp, #56]	; 0x38
   126e0:	e00c      	b.n	126fc <_lv_txt_get_next_line+0x208>
        _lv_txt_encoded_next(txt, &i);
   126e2:	4b0d      	ldr	r3, [pc, #52]	; (12718 <_lv_txt_get_next_line+0x224>)
   126e4:	685b      	ldr	r3, [r3, #4]
   126e6:	a90e      	add	r1, sp, #56	; 0x38
   126e8:	9808      	ldr	r0, [sp, #32]
   126ea:	4798      	blx	r3
   126ec:	e7f6      	b.n	126dc <_lv_txt_get_next_line+0x1e8>
    if(txt == NULL) return 0;
   126ee:	2000      	movs	r0, #0
   126f0:	e004      	b.n	126fc <_lv_txt_get_next_line+0x208>
    if(font == NULL) return 0;
   126f2:	2000      	movs	r0, #0
   126f4:	e002      	b.n	126fc <_lv_txt_get_next_line+0x208>
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
   126f6:	2200      	movs	r2, #0
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
   126f8:	3201      	adds	r2, #1
        return i;
   126fa:	b290      	uxth	r0, r2
}
   126fc:	b011      	add	sp, #68	; 0x44
   126fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
   12702:	2200      	movs	r2, #0
   12704:	e7f8      	b.n	126f8 <_lv_txt_get_next_line+0x204>
   12706:	2200      	movs	r2, #0
   12708:	e7f7      	b.n	126fa <_lv_txt_get_next_line+0x206>
   1270a:	bf00      	nop
   1270c:	0000f325 	.word	0x0000f325
   12710:	00400009 	.word	0x00400009
   12714:	000124ad 	.word	0x000124ad
   12718:	20000054 	.word	0x20000054
   1271c:	0001b778 	.word	0x0001b778

00012720 <_lv_txt_get_width>:
{
   12720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12724:	b085      	sub	sp, #20
    if(txt == NULL) return 0;
   12726:	2800      	cmp	r0, #0
   12728:	d040      	beq.n	127ac <_lv_txt_get_width+0x8c>
   1272a:	4605      	mov	r5, r0
    if(font == NULL) return 0;
   1272c:	2a00      	cmp	r2, #0
   1272e:	d03f      	beq.n	127b0 <_lv_txt_get_width+0x90>
    uint32_t i                   = 0;
   12730:	2000      	movs	r0, #0
   12732:	9003      	str	r0, [sp, #12]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
   12734:	f88d 000b 	strb.w	r0, [sp, #11]
    if(length != 0) {
   12738:	b149      	cbz	r1, 1274e <_lv_txt_get_width+0x2e>
   1273a:	469b      	mov	fp, r3
   1273c:	9201      	str	r2, [sp, #4]
   1273e:	4689      	mov	r9, r1
   12740:	2400      	movs	r4, #0
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
   12742:	4f1c      	ldr	r7, [pc, #112]	; (127b4 <_lv_txt_get_width+0x94>)
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   12744:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   12748:	f00a 0a01 	and.w	sl, sl, #1
   1274c:	e00c      	b.n	12768 <_lv_txt_get_width+0x48>
    lv_coord_t width             = 0;
   1274e:	4604      	mov	r4, r0
   12750:	e028      	b.n	127a4 <_lv_txt_get_width+0x84>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
   12752:	4642      	mov	r2, r8
   12754:	4631      	mov	r1, r6
   12756:	9801      	ldr	r0, [sp, #4]
   12758:	4b17      	ldr	r3, [pc, #92]	; (127b8 <_lv_txt_get_width+0x98>)
   1275a:	4798      	blx	r3
            if(char_width > 0) {
   1275c:	b203      	sxth	r3, r0
   1275e:	2b00      	cmp	r3, #0
   12760:	dd02      	ble.n	12768 <_lv_txt_get_width+0x48>
                width += letter_space;
   12762:	445c      	add	r4, fp
   12764:	4404      	add	r4, r0
   12766:	b224      	sxth	r4, r4
        while(i < length) {
   12768:	9b03      	ldr	r3, [sp, #12]
   1276a:	4599      	cmp	r9, r3
   1276c:	d915      	bls.n	1279a <_lv_txt_get_width+0x7a>
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
   1276e:	687b      	ldr	r3, [r7, #4]
   12770:	a903      	add	r1, sp, #12
   12772:	4628      	mov	r0, r5
   12774:	4798      	blx	r3
   12776:	4606      	mov	r6, r0
            uint32_t letter_next = _lv_txt_encoded_next(&txt[i], NULL);
   12778:	687b      	ldr	r3, [r7, #4]
   1277a:	2100      	movs	r1, #0
   1277c:	9803      	ldr	r0, [sp, #12]
   1277e:	4428      	add	r0, r5
   12780:	4798      	blx	r3
   12782:	4680      	mov	r8, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   12784:	f1ba 0f00 	cmp.w	sl, #0
   12788:	d0e3      	beq.n	12752 <_lv_txt_get_width+0x32>
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
   1278a:	4631      	mov	r1, r6
   1278c:	f10d 000b 	add.w	r0, sp, #11
   12790:	4b0a      	ldr	r3, [pc, #40]	; (127bc <_lv_txt_get_width+0x9c>)
   12792:	4798      	blx	r3
   12794:	2800      	cmp	r0, #0
   12796:	d1e7      	bne.n	12768 <_lv_txt_get_width+0x48>
   12798:	e7db      	b.n	12752 <_lv_txt_get_width+0x32>
        if(width > 0) {
   1279a:	2c00      	cmp	r4, #0
   1279c:	dd02      	ble.n	127a4 <_lv_txt_get_width+0x84>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
   1279e:	eba4 040b 	sub.w	r4, r4, fp
   127a2:	b224      	sxth	r4, r4
}
   127a4:	4620      	mov	r0, r4
   127a6:	b005      	add	sp, #20
   127a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(txt == NULL) return 0;
   127ac:	2400      	movs	r4, #0
   127ae:	e7f9      	b.n	127a4 <_lv_txt_get_width+0x84>
    if(font == NULL) return 0;
   127b0:	2400      	movs	r4, #0
   127b2:	e7f7      	b.n	127a4 <_lv_txt_get_width+0x84>
   127b4:	20000054 	.word	0x20000054
   127b8:	0000f325 	.word	0x0000f325
   127bc:	000124ad 	.word	0x000124ad

000127c0 <_lv_txt_get_size>:
{
   127c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127c4:	b089      	sub	sp, #36	; 0x24
   127c6:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	; 0x48
   127ca:	9406      	str	r4, [sp, #24]
   127cc:	f9bd 504c 	ldrsh.w	r5, [sp, #76]	; 0x4c
   127d0:	f89d 8050 	ldrb.w	r8, [sp, #80]	; 0x50
    size_res->x = 0;
   127d4:	2400      	movs	r4, #0
   127d6:	8004      	strh	r4, [r0, #0]
    size_res->y = 0;
   127d8:	8044      	strh	r4, [r0, #2]
    if(text == NULL) return;
   127da:	2900      	cmp	r1, #0
   127dc:	d052      	beq.n	12884 <_lv_txt_get_size+0xc4>
   127de:	460f      	mov	r7, r1
    if(font == NULL) return;
   127e0:	2a00      	cmp	r2, #0
   127e2:	d04f      	beq.n	12884 <_lv_txt_get_size+0xc4>
   127e4:	9303      	str	r3, [sp, #12]
   127e6:	4611      	mov	r1, r2
   127e8:	9202      	str	r2, [sp, #8]
   127ea:	4604      	mov	r4, r0
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   127ec:	f008 0302 	and.w	r3, r8, #2
   127f0:	f647 4218 	movw	r2, #31768	; 0x7c18
   127f4:	2b00      	cmp	r3, #0
   127f6:	bf18      	it	ne
   127f8:	4615      	movne	r5, r2
   127fa:	9504      	str	r5, [sp, #16]
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
   127fc:	f9b1 2008 	ldrsh.w	r2, [r1, #8]
   12800:	9207      	str	r2, [sp, #28]
    uint16_t letter_height = lv_font_get_line_height(font);
   12802:	fa1f fa82 	uxth.w	sl, r2
    while(text[line_start] != '\0') {
   12806:	783b      	ldrb	r3, [r7, #0]
   12808:	2b00      	cmp	r3, #0
   1280a:	d043      	beq.n	12894 <_lv_txt_get_size+0xd4>
   1280c:	463e      	mov	r6, r7
   1280e:	2500      	movs	r5, #0
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
   12810:	f8df b08c 	ldr.w	fp, [pc, #140]	; 128a0 <_lv_txt_get_size+0xe0>
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
   12814:	9b06      	ldr	r3, [sp, #24]
   12816:	449a      	add	sl, r3
   12818:	fa1f f98a 	uxth.w	r9, sl
   1281c:	4647      	mov	r7, r8
   1281e:	46b0      	mov	r8, r6
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
   12820:	9700      	str	r7, [sp, #0]
   12822:	9b04      	ldr	r3, [sp, #16]
   12824:	9a03      	ldr	r2, [sp, #12]
   12826:	9902      	ldr	r1, [sp, #8]
   12828:	4630      	mov	r0, r6
   1282a:	47d8      	blx	fp
   1282c:	4405      	add	r5, r0
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
   1282e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   12832:	eb0a 0203 	add.w	r2, sl, r3
   12836:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1283a:	d223      	bcs.n	12884 <_lv_txt_get_size+0xc4>
   1283c:	f8cd 9014 	str.w	r9, [sp, #20]
            size_res->y += line_space;
   12840:	444b      	add	r3, r9
   12842:	8063      	strh	r3, [r4, #2]
        lv_coord_t act_line_length = _lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
   12844:	9700      	str	r7, [sp, #0]
   12846:	9b03      	ldr	r3, [sp, #12]
   12848:	9a02      	ldr	r2, [sp, #8]
   1284a:	4601      	mov	r1, r0
   1284c:	4630      	mov	r0, r6
   1284e:	4e13      	ldr	r6, [pc, #76]	; (1289c <_lv_txt_get_size+0xdc>)
   12850:	47b0      	blx	r6
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
   12852:	f9b4 3000 	ldrsh.w	r3, [r4]
   12856:	4298      	cmp	r0, r3
   12858:	bfb8      	it	lt
   1285a:	4618      	movlt	r0, r3
   1285c:	8020      	strh	r0, [r4, #0]
    while(text[line_start] != '\0') {
   1285e:	eb08 0605 	add.w	r6, r8, r5
   12862:	f818 3005 	ldrb.w	r3, [r8, r5]
   12866:	2b00      	cmp	r3, #0
   12868:	d1da      	bne.n	12820 <_lv_txt_get_size+0x60>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
   1286a:	b12d      	cbz	r5, 12878 <_lv_txt_get_size+0xb8>
   1286c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   12870:	2b0a      	cmp	r3, #10
   12872:	d00a      	beq.n	1288a <_lv_txt_get_size+0xca>
   12874:	2b0d      	cmp	r3, #13
   12876:	d008      	beq.n	1288a <_lv_txt_get_size+0xca>
    if(size_res->y == 0)
   12878:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   1287c:	b153      	cbz	r3, 12894 <_lv_txt_get_size+0xd4>
        size_res->y -= line_space;
   1287e:	9a06      	ldr	r2, [sp, #24]
   12880:	1a9b      	subs	r3, r3, r2
   12882:	8063      	strh	r3, [r4, #2]
}
   12884:	b009      	add	sp, #36	; 0x24
   12886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        size_res->y += letter_height + line_space;
   1288a:	8863      	ldrh	r3, [r4, #2]
   1288c:	9a05      	ldr	r2, [sp, #20]
   1288e:	441a      	add	r2, r3
   12890:	8062      	strh	r2, [r4, #2]
   12892:	e7f1      	b.n	12878 <_lv_txt_get_size+0xb8>
        size_res->y = letter_height;
   12894:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   12898:	8063      	strh	r3, [r4, #2]
   1289a:	e7f3      	b.n	12884 <_lv_txt_get_size+0xc4>
   1289c:	00012721 	.word	0x00012721
   128a0:	000124f5 	.word	0x000124f5

000128a4 <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
   128a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   128a8:	4681      	mov	r9, r0
   128aa:	468a      	mov	sl, r1
   128ac:	461f      	mov	r7, r3
   128ae:	f8dd 8020 	ldr.w	r8, [sp, #32]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
   128b2:	4614      	mov	r4, r2
   128b4:	b932      	cbnz	r2, 128c4 <_lv_utils_bsearch+0x20>
        }
        else {
            return (char *)middle;
        }
    }
    return NULL;
   128b6:	2000      	movs	r0, #0
   128b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if(c < 0) {
   128bc:	2800      	cmp	r0, #0
   128be:	da14      	bge.n	128ea <_lv_utils_bsearch+0x46>
            n /= 2;
   128c0:	462c      	mov	r4, r5
    for(middle = base; n != 0;) {
   128c2:	b17c      	cbz	r4, 128e4 <_lv_utils_bsearch+0x40>
        middle += (n / 2) * size;
   128c4:	0865      	lsrs	r5, r4, #1
   128c6:	fb07 a605 	mla	r6, r7, r5, sl
        if((c = (*cmp)(key, middle)) > 0) {
   128ca:	4631      	mov	r1, r6
   128cc:	4648      	mov	r0, r9
   128ce:	47c0      	blx	r8
   128d0:	2800      	cmp	r0, #0
   128d2:	ddf3      	ble.n	128bc <_lv_utils_bsearch+0x18>
            n    = (n / 2) - ((n & 1) == 0);
   128d4:	f084 0401 	eor.w	r4, r4, #1
   128d8:	f004 0401 	and.w	r4, r4, #1
   128dc:	1b2c      	subs	r4, r5, r4
            base = (middle += size);
   128de:	eb06 0a07 	add.w	sl, r6, r7
   128e2:	e7ee      	b.n	128c2 <_lv_utils_bsearch+0x1e>
    return NULL;
   128e4:	2000      	movs	r0, #0
   128e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        middle += (n / 2) * size;
   128ea:	4630      	mov	r0, r6
}
   128ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000128f0 <lv_theme_set_act>:
 * From now, all the created objects will use styles from this theme by default
 * @param th pointer to theme (return value of: 'lv_theme_init_xxx()')
 */
void lv_theme_set_act(lv_theme_t * th)
{
    act_theme = th;
   128f0:	4b01      	ldr	r3, [pc, #4]	; (128f8 <lv_theme_set_act+0x8>)
   128f2:	6018      	str	r0, [r3, #0]
   128f4:	4770      	bx	lr
   128f6:	bf00      	nop
   128f8:	2000abd0 	.word	0x2000abd0

000128fc <lv_theme_get_font_normal>:
 * Get the normal font of the theme
 * @return pointer to the font
 */
const lv_font_t * lv_theme_get_font_normal(void)
{
    return act_theme->font_normal;
   128fc:	4b01      	ldr	r3, [pc, #4]	; (12904 <lv_theme_get_font_normal+0x8>)
   128fe:	681b      	ldr	r3, [r3, #0]
}
   12900:	68d8      	ldr	r0, [r3, #12]
   12902:	4770      	bx	lr
   12904:	2000abd0 	.word	0x2000abd0

00012908 <lv_theme_apply>:
{
    return act_theme->flags;
}

void lv_theme_apply(lv_obj_t * obj, lv_theme_style_t name)
{
   12908:	b508      	push	{r3, lr}
    act_theme->apply_xcb(obj, name);
   1290a:	4b02      	ldr	r3, [pc, #8]	; (12914 <lv_theme_apply+0xc>)
   1290c:	681b      	ldr	r3, [r3, #0]
   1290e:	681b      	ldr	r3, [r3, #0]
   12910:	4798      	blx	r3
   12912:	bd08      	pop	{r3, pc}
   12914:	2000abd0 	.word	0x2000abd0

00012918 <theme_apply>:
    return &theme;
}


static void theme_apply(lv_obj_t * obj, lv_theme_style_t name)
{
   12918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1291c:	4604      	mov	r4, r0
    lv_style_list_t * list;

    switch(name) {
   1291e:	3901      	subs	r1, #1
   12920:	2927      	cmp	r1, #39	; 0x27
   12922:	d834      	bhi.n	1298e <theme_apply+0x76>
   12924:	e8df f011 	tbh	[pc, r1, lsl #1]
   12928:	00390028 	.word	0x00390028
   1292c:	00a100ec 	.word	0x00a100ec
   12930:	00600053 	.word	0x00600053
   12934:	00d803a3 	.word	0x00d803a3
   12938:	02b20144 	.word	0x02b20144
   1293c:	03cc0046 	.word	0x03cc0046
   12940:	03fe0273 	.word	0x03fe0273
   12944:	00e000dc 	.word	0x00e000dc
   12948:	00e40081 	.word	0x00e40081
   1294c:	00e80193 	.word	0x00e80193
   12950:	02660247 	.word	0x02660247
   12954:	016a03e3 	.word	0x016a03e3
   12958:	023f017c 	.word	0x023f017c
   1295c:	022301a0 	.word	0x022301a0
   12960:	0375011f 	.word	0x0375011f
   12964:	01080391 	.word	0x01080391
   12968:	02e000b8 	.word	0x02e000b8
   1296c:	01f401c9 	.word	0x01f401c9
   12970:	02040347 	.word	0x02040347
   12974:	033a0312 	.word	0x033a0312
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
   12978:	2100      	movs	r1, #0
   1297a:	4b9b      	ldr	r3, [pc, #620]	; (12be8 <theme_apply+0x2d0>)
   1297c:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
   1297e:	2100      	movs	r1, #0
   12980:	4620      	mov	r0, r4
   12982:	4b9a      	ldr	r3, [pc, #616]	; (12bec <theme_apply+0x2d4>)
   12984:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->scr);
   12986:	4b9a      	ldr	r3, [pc, #616]	; (12bf0 <theme_apply+0x2d8>)
   12988:	6819      	ldr	r1, [r3, #0]
   1298a:	4b9a      	ldr	r3, [pc, #616]	; (12bf4 <theme_apply+0x2dc>)
   1298c:	4798      	blx	r3
#endif
        default:
            break;
    }

    lv_obj_refresh_style(obj, LV_STYLE_PROP_ALL);
   1298e:	21ff      	movs	r1, #255	; 0xff
   12990:	4620      	mov	r0, r4
   12992:	4b99      	ldr	r3, [pc, #612]	; (12bf8 <theme_apply+0x2e0>)
   12994:	4798      	blx	r3
   12996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
   1299a:	2100      	movs	r1, #0
   1299c:	4b92      	ldr	r3, [pc, #584]	; (12be8 <theme_apply+0x2d0>)
   1299e:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
   129a0:	2100      	movs	r1, #0
   129a2:	4620      	mov	r0, r4
   129a4:	4b91      	ldr	r3, [pc, #580]	; (12bec <theme_apply+0x2d4>)
   129a6:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->bg);
   129a8:	4b91      	ldr	r3, [pc, #580]	; (12bf0 <theme_apply+0x2d8>)
   129aa:	6819      	ldr	r1, [r3, #0]
   129ac:	3104      	adds	r1, #4
   129ae:	4b91      	ldr	r3, [pc, #580]	; (12bf4 <theme_apply+0x2dc>)
   129b0:	4798      	blx	r3
            break;
   129b2:	e7ec      	b.n	1298e <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
   129b4:	2100      	movs	r1, #0
   129b6:	4b8c      	ldr	r3, [pc, #560]	; (12be8 <theme_apply+0x2d0>)
   129b8:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_CONT_PART_MAIN);
   129ba:	2100      	movs	r1, #0
   129bc:	4620      	mov	r0, r4
   129be:	4b8b      	ldr	r3, [pc, #556]	; (12bec <theme_apply+0x2d4>)
   129c0:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->bg);
   129c2:	4b8b      	ldr	r3, [pc, #556]	; (12bf0 <theme_apply+0x2d8>)
   129c4:	6819      	ldr	r1, [r3, #0]
   129c6:	3104      	adds	r1, #4
   129c8:	4b8a      	ldr	r3, [pc, #552]	; (12bf4 <theme_apply+0x2dc>)
   129ca:	4798      	blx	r3
            break;
   129cc:	e7df      	b.n	1298e <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
   129ce:	2100      	movs	r1, #0
   129d0:	4b85      	ldr	r3, [pc, #532]	; (12be8 <theme_apply+0x2d0>)
   129d2:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
   129d4:	2100      	movs	r1, #0
   129d6:	4620      	mov	r0, r4
   129d8:	4b84      	ldr	r3, [pc, #528]	; (12bec <theme_apply+0x2d4>)
   129da:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->btn);
   129dc:	4b84      	ldr	r3, [pc, #528]	; (12bf0 <theme_apply+0x2d8>)
   129de:	6819      	ldr	r1, [r3, #0]
   129e0:	3110      	adds	r1, #16
   129e2:	4b84      	ldr	r3, [pc, #528]	; (12bf4 <theme_apply+0x2dc>)
   129e4:	4798      	blx	r3
            break;
   129e6:	e7d2      	b.n	1298e <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_BTNMATRIX_PART_BG);
   129e8:	2100      	movs	r1, #0
   129ea:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 12be8 <theme_apply+0x2d0>
   129ee:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BG);
   129f0:	2100      	movs	r1, #0
   129f2:	4620      	mov	r0, r4
   129f4:	4f7d      	ldr	r7, [pc, #500]	; (12bec <theme_apply+0x2d4>)
   129f6:	47b8      	blx	r7
   129f8:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bg);
   129fa:	4e7d      	ldr	r6, [pc, #500]	; (12bf0 <theme_apply+0x2d8>)
   129fc:	6831      	ldr	r1, [r6, #0]
   129fe:	3104      	adds	r1, #4
   12a00:	4d7c      	ldr	r5, [pc, #496]	; (12bf4 <theme_apply+0x2dc>)
   12a02:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
   12a04:	6831      	ldr	r1, [r6, #0]
   12a06:	3118      	adds	r1, #24
   12a08:	4648      	mov	r0, r9
   12a0a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_BTNMATRIX_PART_BTN);
   12a0c:	2101      	movs	r1, #1
   12a0e:	4620      	mov	r0, r4
   12a10:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BTN);
   12a12:	2101      	movs	r1, #1
   12a14:	4620      	mov	r0, r4
   12a16:	47b8      	blx	r7
   12a18:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
   12a1a:	6831      	ldr	r1, [r6, #0]
   12a1c:	3104      	adds	r1, #4
   12a1e:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
   12a20:	6831      	ldr	r1, [r6, #0]
   12a22:	3108      	adds	r1, #8
   12a24:	4638      	mov	r0, r7
   12a26:	47a8      	blx	r5
            break;
   12a28:	e7b1      	b.n	1298e <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_KEYBOARD_PART_BG);
   12a2a:	2100      	movs	r1, #0
   12a2c:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 12be8 <theme_apply+0x2d0>
   12a30:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_KEYBOARD_PART_BG);
   12a32:	2100      	movs	r1, #0
   12a34:	4620      	mov	r0, r4
   12a36:	4f6d      	ldr	r7, [pc, #436]	; (12bec <theme_apply+0x2d4>)
   12a38:	47b8      	blx	r7
   12a3a:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->scr);
   12a3c:	4e6c      	ldr	r6, [pc, #432]	; (12bf0 <theme_apply+0x2d8>)
   12a3e:	6831      	ldr	r1, [r6, #0]
   12a40:	4d6c      	ldr	r5, [pc, #432]	; (12bf4 <theme_apply+0x2dc>)
   12a42:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->kb_bg);
   12a44:	6831      	ldr	r1, [r6, #0]
   12a46:	3168      	adds	r1, #104	; 0x68
   12a48:	4648      	mov	r0, r9
   12a4a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_KEYBOARD_PART_BTN);
   12a4c:	2101      	movs	r1, #1
   12a4e:	4620      	mov	r0, r4
   12a50:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_KEYBOARD_PART_BTN);
   12a52:	2101      	movs	r1, #1
   12a54:	4620      	mov	r0, r4
   12a56:	47b8      	blx	r7
   12a58:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
   12a5a:	6831      	ldr	r1, [r6, #0]
   12a5c:	3104      	adds	r1, #4
   12a5e:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
   12a60:	6831      	ldr	r1, [r6, #0]
   12a62:	3108      	adds	r1, #8
   12a64:	4638      	mov	r0, r7
   12a66:	47a8      	blx	r5
            break;
   12a68:	e791      	b.n	1298e <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_BAR_PART_BG);
   12a6a:	2100      	movs	r1, #0
   12a6c:	f8df 8178 	ldr.w	r8, [pc, #376]	; 12be8 <theme_apply+0x2d0>
   12a70:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_BAR_PART_BG);
   12a72:	2100      	movs	r1, #0
   12a74:	4620      	mov	r0, r4
   12a76:	4f5d      	ldr	r7, [pc, #372]	; (12bec <theme_apply+0x2d4>)
   12a78:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_bg);
   12a7a:	4e5d      	ldr	r6, [pc, #372]	; (12bf0 <theme_apply+0x2d8>)
   12a7c:	6831      	ldr	r1, [r6, #0]
   12a7e:	3124      	adds	r1, #36	; 0x24
   12a80:	4d5c      	ldr	r5, [pc, #368]	; (12bf4 <theme_apply+0x2dc>)
   12a82:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_BAR_PART_INDIC);
   12a84:	2101      	movs	r1, #1
   12a86:	4620      	mov	r0, r4
   12a88:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_BAR_PART_INDIC);
   12a8a:	2101      	movs	r1, #1
   12a8c:	4620      	mov	r0, r4
   12a8e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_indic);
   12a90:	6831      	ldr	r1, [r6, #0]
   12a92:	3128      	adds	r1, #40	; 0x28
   12a94:	47a8      	blx	r5
            break;
   12a96:	e77a      	b.n	1298e <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_BG);
   12a98:	2100      	movs	r1, #0
   12a9a:	f8df 814c 	ldr.w	r8, [pc, #332]	; 12be8 <theme_apply+0x2d0>
   12a9e:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_BG);
   12aa0:	2100      	movs	r1, #0
   12aa2:	4620      	mov	r0, r4
   12aa4:	4f51      	ldr	r7, [pc, #324]	; (12bec <theme_apply+0x2d4>)
   12aa6:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_bg);
   12aa8:	4e51      	ldr	r6, [pc, #324]	; (12bf0 <theme_apply+0x2d8>)
   12aaa:	6831      	ldr	r1, [r6, #0]
   12aac:	3124      	adds	r1, #36	; 0x24
   12aae:	4d51      	ldr	r5, [pc, #324]	; (12bf4 <theme_apply+0x2dc>)
   12ab0:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_INDIC);
   12ab2:	2101      	movs	r1, #1
   12ab4:	4620      	mov	r0, r4
   12ab6:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_INDIC);
   12ab8:	2101      	movs	r1, #1
   12aba:	4620      	mov	r0, r4
   12abc:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_indic);
   12abe:	6831      	ldr	r1, [r6, #0]
   12ac0:	3128      	adds	r1, #40	; 0x28
   12ac2:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_KNOB);
   12ac4:	2102      	movs	r1, #2
   12ac6:	4620      	mov	r0, r4
   12ac8:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_KNOB);
   12aca:	2102      	movs	r1, #2
   12acc:	4620      	mov	r0, r4
   12ace:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sw_knob);
   12ad0:	6831      	ldr	r1, [r6, #0]
   12ad2:	319c      	adds	r1, #156	; 0x9c
   12ad4:	47a8      	blx	r5
            break;
   12ad6:	e75a      	b.n	1298e <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_CANVAS_PART_MAIN);
   12ad8:	2100      	movs	r1, #0
   12ada:	4b43      	ldr	r3, [pc, #268]	; (12be8 <theme_apply+0x2d0>)
   12adc:	4798      	blx	r3
            break;
   12ade:	e756      	b.n	1298e <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_IMG_PART_MAIN);
   12ae0:	2100      	movs	r1, #0
   12ae2:	4b41      	ldr	r3, [pc, #260]	; (12be8 <theme_apply+0x2d0>)
   12ae4:	4798      	blx	r3
            break;
   12ae6:	e752      	b.n	1298e <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_IMG_PART_MAIN);
   12ae8:	2100      	movs	r1, #0
   12aea:	4b3f      	ldr	r3, [pc, #252]	; (12be8 <theme_apply+0x2d0>)
   12aec:	4798      	blx	r3
            break;
   12aee:	e74e      	b.n	1298e <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_LABEL_PART_MAIN);
   12af0:	2100      	movs	r1, #0
   12af2:	4b3d      	ldr	r3, [pc, #244]	; (12be8 <theme_apply+0x2d0>)
   12af4:	4798      	blx	r3
            break;
   12af6:	e74a      	b.n	1298e <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_LABEL_PART_MAIN);
   12af8:	2100      	movs	r1, #0
   12afa:	4b3b      	ldr	r3, [pc, #236]	; (12be8 <theme_apply+0x2d0>)
   12afc:	4798      	blx	r3
            break;
   12afe:	e746      	b.n	1298e <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_ARC_PART_BG);
   12b00:	2100      	movs	r1, #0
   12b02:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 12be8 <theme_apply+0x2d0>
   12b06:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_ARC_PART_BG);
   12b08:	2100      	movs	r1, #0
   12b0a:	4620      	mov	r0, r4
   12b0c:	4f37      	ldr	r7, [pc, #220]	; (12bec <theme_apply+0x2d4>)
   12b0e:	47b8      	blx	r7
   12b10:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bg);
   12b12:	4e37      	ldr	r6, [pc, #220]	; (12bf0 <theme_apply+0x2d8>)
   12b14:	6831      	ldr	r1, [r6, #0]
   12b16:	3104      	adds	r1, #4
   12b18:	4d36      	ldr	r5, [pc, #216]	; (12bf4 <theme_apply+0x2dc>)
   12b1a:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->arc_bg);
   12b1c:	6831      	ldr	r1, [r6, #0]
   12b1e:	3120      	adds	r1, #32
   12b20:	4648      	mov	r0, r9
   12b22:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_ARC_PART_INDIC);
   12b24:	2101      	movs	r1, #1
   12b26:	4620      	mov	r0, r4
   12b28:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_ARC_PART_INDIC);
   12b2a:	2101      	movs	r1, #1
   12b2c:	4620      	mov	r0, r4
   12b2e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->arc_indic);
   12b30:	6831      	ldr	r1, [r6, #0]
   12b32:	311c      	adds	r1, #28
   12b34:	47a8      	blx	r5
            break;
   12b36:	e72a      	b.n	1298e <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_SPINNER_PART_BG);
   12b38:	2100      	movs	r1, #0
   12b3a:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 12be8 <theme_apply+0x2d0>
   12b3e:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SPINNER_PART_BG);
   12b40:	2100      	movs	r1, #0
   12b42:	4620      	mov	r0, r4
   12b44:	4f29      	ldr	r7, [pc, #164]	; (12bec <theme_apply+0x2d4>)
   12b46:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->arc_bg);
   12b48:	4e29      	ldr	r6, [pc, #164]	; (12bf0 <theme_apply+0x2d8>)
   12b4a:	6831      	ldr	r1, [r6, #0]
   12b4c:	3120      	adds	r1, #32
   12b4e:	4d29      	ldr	r5, [pc, #164]	; (12bf4 <theme_apply+0x2dc>)
   12b50:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SPINNER_PART_INDIC);
   12b52:	2101      	movs	r1, #1
   12b54:	4620      	mov	r0, r4
   12b56:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SPINNER_PART_INDIC);
   12b58:	2101      	movs	r1, #1
   12b5a:	4620      	mov	r0, r4
   12b5c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->arc_indic);
   12b5e:	6831      	ldr	r1, [r6, #0]
   12b60:	311c      	adds	r1, #28
   12b62:	47a8      	blx	r5
            break;
   12b64:	e713      	b.n	1298e <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_BG);
   12b66:	2100      	movs	r1, #0
   12b68:	f8df 807c 	ldr.w	r8, [pc, #124]	; 12be8 <theme_apply+0x2d0>
   12b6c:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_BG);
   12b6e:	2100      	movs	r1, #0
   12b70:	4620      	mov	r0, r4
   12b72:	4f1e      	ldr	r7, [pc, #120]	; (12bec <theme_apply+0x2d4>)
   12b74:	47b8      	blx	r7
   12b76:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bar_bg);
   12b78:	4e1d      	ldr	r6, [pc, #116]	; (12bf0 <theme_apply+0x2d8>)
   12b7a:	6831      	ldr	r1, [r6, #0]
   12b7c:	3124      	adds	r1, #36	; 0x24
   12b7e:	4d1d      	ldr	r5, [pc, #116]	; (12bf4 <theme_apply+0x2dc>)
   12b80:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->slider_bg);
   12b82:	6831      	ldr	r1, [r6, #0]
   12b84:	3194      	adds	r1, #148	; 0x94
   12b86:	4648      	mov	r0, r9
   12b88:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_INDIC);
   12b8a:	2101      	movs	r1, #1
   12b8c:	4620      	mov	r0, r4
   12b8e:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_INDIC);
   12b90:	2101      	movs	r1, #1
   12b92:	4620      	mov	r0, r4
   12b94:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_indic);
   12b96:	6831      	ldr	r1, [r6, #0]
   12b98:	3128      	adds	r1, #40	; 0x28
   12b9a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_KNOB);
   12b9c:	2102      	movs	r1, #2
   12b9e:	4620      	mov	r0, r4
   12ba0:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_KNOB);
   12ba2:	2102      	movs	r1, #2
   12ba4:	4620      	mov	r0, r4
   12ba6:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->slider_knob);
   12ba8:	6831      	ldr	r1, [r6, #0]
   12baa:	3190      	adds	r1, #144	; 0x90
   12bac:	47a8      	blx	r5
            break;
   12bae:	e6ee      	b.n	1298e <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_CHECKBOX_PART_BG);
   12bb0:	2100      	movs	r1, #0
   12bb2:	f8df 8034 	ldr.w	r8, [pc, #52]	; 12be8 <theme_apply+0x2d0>
   12bb6:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BG);
   12bb8:	2100      	movs	r1, #0
   12bba:	4620      	mov	r0, r4
   12bbc:	4f0b      	ldr	r7, [pc, #44]	; (12bec <theme_apply+0x2d4>)
   12bbe:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->cb_bg);
   12bc0:	4e0b      	ldr	r6, [pc, #44]	; (12bf0 <theme_apply+0x2d8>)
   12bc2:	6831      	ldr	r1, [r6, #0]
   12bc4:	314c      	adds	r1, #76	; 0x4c
   12bc6:	4d0b      	ldr	r5, [pc, #44]	; (12bf4 <theme_apply+0x2dc>)
   12bc8:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CHECKBOX_PART_BULLET);
   12bca:	2140      	movs	r1, #64	; 0x40
   12bcc:	4620      	mov	r0, r4
   12bce:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BULLET);
   12bd0:	2140      	movs	r1, #64	; 0x40
   12bd2:	4620      	mov	r0, r4
   12bd4:	47b8      	blx	r7
   12bd6:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->btn);
   12bd8:	6831      	ldr	r1, [r6, #0]
   12bda:	3110      	adds	r1, #16
   12bdc:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->cb_bullet);
   12bde:	6831      	ldr	r1, [r6, #0]
   12be0:	3150      	adds	r1, #80	; 0x50
   12be2:	4638      	mov	r0, r7
   12be4:	47a8      	blx	r5
            break;
   12be6:	e6d2      	b.n	1298e <theme_apply+0x76>
   12be8:	00003255 	.word	0x00003255
   12bec:	00003185 	.word	0x00003185
   12bf0:	2000abd4 	.word	0x2000abd4
   12bf4:	00005da1 	.word	0x00005da1
   12bf8:	00003a15 	.word	0x00003a15
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BG);
   12bfc:	2100      	movs	r1, #0
   12bfe:	4b9f      	ldr	r3, [pc, #636]	; (12e7c <theme_apply+0x564>)
   12c00:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BG);
   12c02:	2100      	movs	r1, #0
   12c04:	4620      	mov	r0, r4
   12c06:	4b9e      	ldr	r3, [pc, #632]	; (12e80 <theme_apply+0x568>)
   12c08:	4798      	blx	r3
   12c0a:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
   12c0c:	4e9d      	ldr	r6, [pc, #628]	; (12e84 <theme_apply+0x56c>)
   12c0e:	6831      	ldr	r1, [r6, #0]
   12c10:	3104      	adds	r1, #4
   12c12:	4d9d      	ldr	r5, [pc, #628]	; (12e88 <theme_apply+0x570>)
   12c14:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->mbox_bg);
   12c16:	6831      	ldr	r1, [r6, #0]
   12c18:	317c      	adds	r1, #124	; 0x7c
   12c1a:	4638      	mov	r0, r7
   12c1c:	47a8      	blx	r5
            break;
   12c1e:	e6b6      	b.n	1298e <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BTN_BG);
   12c20:	2140      	movs	r1, #64	; 0x40
   12c22:	f8df 8258 	ldr.w	r8, [pc, #600]	; 12e7c <theme_apply+0x564>
   12c26:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BTN_BG);
   12c28:	2140      	movs	r1, #64	; 0x40
   12c2a:	4620      	mov	r0, r4
   12c2c:	4f94      	ldr	r7, [pc, #592]	; (12e80 <theme_apply+0x568>)
   12c2e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->pad_small);
   12c30:	4e94      	ldr	r6, [pc, #592]	; (12e84 <theme_apply+0x56c>)
   12c32:	6831      	ldr	r1, [r6, #0]
   12c34:	3118      	adds	r1, #24
   12c36:	4d94      	ldr	r5, [pc, #592]	; (12e88 <theme_apply+0x570>)
   12c38:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BTN);
   12c3a:	2141      	movs	r1, #65	; 0x41
   12c3c:	4620      	mov	r0, r4
   12c3e:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BTN);
   12c40:	2141      	movs	r1, #65	; 0x41
   12c42:	4620      	mov	r0, r4
   12c44:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->btn);
   12c46:	6831      	ldr	r1, [r6, #0]
   12c48:	3110      	adds	r1, #16
   12c4a:	47a8      	blx	r5
            break;
   12c4c:	e69f      	b.n	1298e <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_LED_PART_MAIN);
   12c4e:	2100      	movs	r1, #0
   12c50:	4b8a      	ldr	r3, [pc, #552]	; (12e7c <theme_apply+0x564>)
   12c52:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_LED_PART_MAIN);
   12c54:	2100      	movs	r1, #0
   12c56:	4620      	mov	r0, r4
   12c58:	4b89      	ldr	r3, [pc, #548]	; (12e80 <theme_apply+0x568>)
   12c5a:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->led);
   12c5c:	4b89      	ldr	r3, [pc, #548]	; (12e84 <theme_apply+0x56c>)
   12c5e:	6819      	ldr	r1, [r3, #0]
   12c60:	316c      	adds	r1, #108	; 0x6c
   12c62:	4b89      	ldr	r3, [pc, #548]	; (12e88 <theme_apply+0x570>)
   12c64:	4798      	blx	r3
            break;
   12c66:	e692      	b.n	1298e <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_PAGE_PART_BG);
   12c68:	2100      	movs	r1, #0
   12c6a:	f8df 8210 	ldr.w	r8, [pc, #528]	; 12e7c <theme_apply+0x564>
   12c6e:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_BG);
   12c70:	2100      	movs	r1, #0
   12c72:	4620      	mov	r0, r4
   12c74:	4f82      	ldr	r7, [pc, #520]	; (12e80 <theme_apply+0x568>)
   12c76:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bg);
   12c78:	4e82      	ldr	r6, [pc, #520]	; (12e84 <theme_apply+0x56c>)
   12c7a:	6831      	ldr	r1, [r6, #0]
   12c7c:	3104      	adds	r1, #4
   12c7e:	4d82      	ldr	r5, [pc, #520]	; (12e88 <theme_apply+0x570>)
   12c80:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLABLE);
   12c82:	2140      	movs	r1, #64	; 0x40
   12c84:	4620      	mov	r0, r4
   12c86:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLABLE);
   12c88:	2140      	movs	r1, #64	; 0x40
   12c8a:	4620      	mov	r0, r4
   12c8c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->pad_inner);
   12c8e:	6831      	ldr	r1, [r6, #0]
   12c90:	3114      	adds	r1, #20
   12c92:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLBAR);
   12c94:	2101      	movs	r1, #1
   12c96:	4620      	mov	r0, r4
   12c98:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLBAR);
   12c9a:	2101      	movs	r1, #1
   12c9c:	4620      	mov	r0, r4
   12c9e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
   12ca0:	6831      	ldr	r1, [r6, #0]
   12ca2:	3180      	adds	r1, #128	; 0x80
   12ca4:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_PAGE_PART_EDGE_FLASH);
   12ca6:	2102      	movs	r1, #2
   12ca8:	4620      	mov	r0, r4
   12caa:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_EDGE_FLASH);
   12cac:	2102      	movs	r1, #2
   12cae:	4620      	mov	r0, r4
   12cb0:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->edge_flash);
   12cb2:	6831      	ldr	r1, [r6, #0]
   12cb4:	3184      	adds	r1, #132	; 0x84
   12cb6:	47a8      	blx	r5
            break;
   12cb8:	e669      	b.n	1298e <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_BG);
   12cba:	2100      	movs	r1, #0
   12cbc:	4d6f      	ldr	r5, [pc, #444]	; (12e7c <theme_apply+0x564>)
   12cbe:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_BG);
   12cc0:	2100      	movs	r1, #0
   12cc2:	4620      	mov	r0, r4
   12cc4:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 12e80 <theme_apply+0x568>
   12cc8:	47c0      	blx	r8
            _lv_style_list_add_style(list, &styles->scr);
   12cca:	4f6e      	ldr	r7, [pc, #440]	; (12e84 <theme_apply+0x56c>)
   12ccc:	6839      	ldr	r1, [r7, #0]
   12cce:	4e6e      	ldr	r6, [pc, #440]	; (12e88 <theme_apply+0x570>)
   12cd0:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_BG_SCRLLABLE);
   12cd2:	2140      	movs	r1, #64	; 0x40
   12cd4:	4620      	mov	r0, r4
   12cd6:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_TAB_BG);
   12cd8:	2141      	movs	r1, #65	; 0x41
   12cda:	4620      	mov	r0, r4
   12cdc:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_TAB_BG);
   12cde:	2141      	movs	r1, #65	; 0x41
   12ce0:	4620      	mov	r0, r4
   12ce2:	47c0      	blx	r8
            _lv_style_list_add_style(list, &styles->tabview_btns_bg);
   12ce4:	6839      	ldr	r1, [r7, #0]
   12ce6:	31a8      	adds	r1, #168	; 0xa8
   12ce8:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_INDIC);
   12cea:	2143      	movs	r1, #67	; 0x43
   12cec:	4620      	mov	r0, r4
   12cee:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_INDIC);
   12cf0:	2143      	movs	r1, #67	; 0x43
   12cf2:	4620      	mov	r0, r4
   12cf4:	47c0      	blx	r8
            _lv_style_list_add_style(list, &styles->tabview_indic);
   12cf6:	6839      	ldr	r1, [r7, #0]
   12cf8:	31ac      	adds	r1, #172	; 0xac
   12cfa:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_TAB_BTN);
   12cfc:	2142      	movs	r1, #66	; 0x42
   12cfe:	4620      	mov	r0, r4
   12d00:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_TAB_BTN);
   12d02:	2142      	movs	r1, #66	; 0x42
   12d04:	4620      	mov	r0, r4
   12d06:	47c0      	blx	r8
            _lv_style_list_add_style(list, &styles->tabview_btns);
   12d08:	6839      	ldr	r1, [r7, #0]
   12d0a:	31a4      	adds	r1, #164	; 0xa4
   12d0c:	47b0      	blx	r6
            break;
   12d0e:	e63e      	b.n	1298e <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_PAGE_PART_BG);
   12d10:	2100      	movs	r1, #0
   12d12:	4d5a      	ldr	r5, [pc, #360]	; (12e7c <theme_apply+0x564>)
   12d14:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLABLE);
   12d16:	2140      	movs	r1, #64	; 0x40
   12d18:	4620      	mov	r0, r4
   12d1a:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLABLE);
   12d1c:	2140      	movs	r1, #64	; 0x40
   12d1e:	4620      	mov	r0, r4
   12d20:	4b57      	ldr	r3, [pc, #348]	; (12e80 <theme_apply+0x568>)
   12d22:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->tabview_page_scrl);
   12d24:	4b57      	ldr	r3, [pc, #348]	; (12e84 <theme_apply+0x56c>)
   12d26:	6819      	ldr	r1, [r3, #0]
   12d28:	31b0      	adds	r1, #176	; 0xb0
   12d2a:	4b57      	ldr	r3, [pc, #348]	; (12e88 <theme_apply+0x570>)
   12d2c:	4798      	blx	r3
            break;
   12d2e:	e62e      	b.n	1298e <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_BG);
   12d30:	2100      	movs	r1, #0
   12d32:	f8df 8148 	ldr.w	r8, [pc, #328]	; 12e7c <theme_apply+0x564>
   12d36:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_BG);
   12d38:	2100      	movs	r1, #0
   12d3a:	4620      	mov	r0, r4
   12d3c:	4f50      	ldr	r7, [pc, #320]	; (12e80 <theme_apply+0x568>)
   12d3e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->scr);
   12d40:	4e50      	ldr	r6, [pc, #320]	; (12e84 <theme_apply+0x56c>)
   12d42:	6831      	ldr	r1, [r6, #0]
   12d44:	4d50      	ldr	r5, [pc, #320]	; (12e88 <theme_apply+0x570>)
   12d46:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_SCROLLBAR);
   12d48:	2101      	movs	r1, #1
   12d4a:	4620      	mov	r0, r4
   12d4c:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_SCROLLBAR);
   12d4e:	2101      	movs	r1, #1
   12d50:	4620      	mov	r0, r4
   12d52:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
   12d54:	6831      	ldr	r1, [r6, #0]
   12d56:	3180      	adds	r1, #128	; 0x80
   12d58:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_EDGE_FLASH);
   12d5a:	2102      	movs	r1, #2
   12d5c:	4620      	mov	r0, r4
   12d5e:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_EDGE_FLASH);
   12d60:	2102      	movs	r1, #2
   12d62:	4620      	mov	r0, r4
   12d64:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->edge_flash);
   12d66:	6831      	ldr	r1, [r6, #0]
   12d68:	3184      	adds	r1, #132	; 0x84
   12d6a:	47a8      	blx	r5
            break;
   12d6c:	e60f      	b.n	1298e <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_ROLLER_PART_BG);
   12d6e:	2100      	movs	r1, #0
   12d70:	f8df 8108 	ldr.w	r8, [pc, #264]	; 12e7c <theme_apply+0x564>
   12d74:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_ROLLER_PART_BG);
   12d76:	2100      	movs	r1, #0
   12d78:	4620      	mov	r0, r4
   12d7a:	4f41      	ldr	r7, [pc, #260]	; (12e80 <theme_apply+0x568>)
   12d7c:	47b8      	blx	r7
   12d7e:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bg);
   12d80:	4e40      	ldr	r6, [pc, #256]	; (12e84 <theme_apply+0x56c>)
   12d82:	6831      	ldr	r1, [r6, #0]
   12d84:	3104      	adds	r1, #4
   12d86:	4d40      	ldr	r5, [pc, #256]	; (12e88 <theme_apply+0x570>)
   12d88:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->roller_bg);
   12d8a:	6831      	ldr	r1, [r6, #0]
   12d8c:	3188      	adds	r1, #136	; 0x88
   12d8e:	4648      	mov	r0, r9
   12d90:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_ROLLER_PART_SELECTED);
   12d92:	2103      	movs	r1, #3
   12d94:	4620      	mov	r0, r4
   12d96:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_ROLLER_PART_SELECTED);
   12d98:	2103      	movs	r1, #3
   12d9a:	4620      	mov	r0, r4
   12d9c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->roller_sel);
   12d9e:	6831      	ldr	r1, [r6, #0]
   12da0:	318c      	adds	r1, #140	; 0x8c
   12da2:	47a8      	blx	r5
            break;
   12da4:	e5f3      	b.n	1298e <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_OBJMASK_PART_MAIN);
   12da6:	2100      	movs	r1, #0
   12da8:	4b34      	ldr	r3, [pc, #208]	; (12e7c <theme_apply+0x564>)
   12daa:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_OBJMASK_PART_MAIN);
   12dac:	2100      	movs	r1, #0
   12dae:	4620      	mov	r0, r4
   12db0:	4b33      	ldr	r3, [pc, #204]	; (12e80 <theme_apply+0x568>)
   12db2:	4798      	blx	r3
            break;
   12db4:	e5eb      	b.n	1298e <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_LIST_PART_BG);
   12db6:	2100      	movs	r1, #0
   12db8:	4f30      	ldr	r7, [pc, #192]	; (12e7c <theme_apply+0x564>)
   12dba:	47b8      	blx	r7
            list = lv_obj_get_style_list(obj, LV_LIST_PART_BG);
   12dbc:	2100      	movs	r1, #0
   12dbe:	4620      	mov	r0, r4
   12dc0:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 12e80 <theme_apply+0x568>
   12dc4:	47c0      	blx	r8
   12dc6:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bg);
   12dc8:	4e2e      	ldr	r6, [pc, #184]	; (12e84 <theme_apply+0x56c>)
   12dca:	6831      	ldr	r1, [r6, #0]
   12dcc:	3104      	adds	r1, #4
   12dce:	4d2e      	ldr	r5, [pc, #184]	; (12e88 <theme_apply+0x570>)
   12dd0:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->list_bg);
   12dd2:	6831      	ldr	r1, [r6, #0]
   12dd4:	3174      	adds	r1, #116	; 0x74
   12dd6:	4648      	mov	r0, r9
   12dd8:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_LIST_PART_SCROLLABLE);
   12dda:	2140      	movs	r1, #64	; 0x40
   12ddc:	4620      	mov	r0, r4
   12dde:	47b8      	blx	r7
            lv_obj_clean_style_list(obj, LV_LIST_PART_SCROLLBAR);
   12de0:	2101      	movs	r1, #1
   12de2:	4620      	mov	r0, r4
   12de4:	47b8      	blx	r7
            list = lv_obj_get_style_list(obj, LV_LIST_PART_SCROLLBAR);
   12de6:	2101      	movs	r1, #1
   12de8:	4620      	mov	r0, r4
   12dea:	47c0      	blx	r8
            _lv_style_list_add_style(list, &styles->sb);
   12dec:	6831      	ldr	r1, [r6, #0]
   12dee:	3180      	adds	r1, #128	; 0x80
   12df0:	47a8      	blx	r5
            break;
   12df2:	e5cc      	b.n	1298e <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
   12df4:	2100      	movs	r1, #0
   12df6:	4b21      	ldr	r3, [pc, #132]	; (12e7c <theme_apply+0x564>)
   12df8:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
   12dfa:	2100      	movs	r1, #0
   12dfc:	4620      	mov	r0, r4
   12dfe:	4b20      	ldr	r3, [pc, #128]	; (12e80 <theme_apply+0x568>)
   12e00:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->list_btn);
   12e02:	4b20      	ldr	r3, [pc, #128]	; (12e84 <theme_apply+0x56c>)
   12e04:	6819      	ldr	r1, [r3, #0]
   12e06:	3178      	adds	r1, #120	; 0x78
   12e08:	4b1f      	ldr	r3, [pc, #124]	; (12e88 <theme_apply+0x570>)
   12e0a:	4798      	blx	r3
            break;
   12e0c:	e5bf      	b.n	1298e <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_MAIN);
   12e0e:	2100      	movs	r1, #0
   12e10:	f8df 8068 	ldr.w	r8, [pc, #104]	; 12e7c <theme_apply+0x564>
   12e14:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_MAIN);
   12e16:	2100      	movs	r1, #0
   12e18:	4620      	mov	r0, r4
   12e1a:	4f19      	ldr	r7, [pc, #100]	; (12e80 <theme_apply+0x568>)
   12e1c:	47b8      	blx	r7
   12e1e:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bg);
   12e20:	4e18      	ldr	r6, [pc, #96]	; (12e84 <theme_apply+0x56c>)
   12e22:	6831      	ldr	r1, [r6, #0]
   12e24:	3104      	adds	r1, #4
   12e26:	4d18      	ldr	r5, [pc, #96]	; (12e88 <theme_apply+0x570>)
   12e28:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
   12e2a:	6831      	ldr	r1, [r6, #0]
   12e2c:	3108      	adds	r1, #8
   12e2e:	4648      	mov	r0, r9
   12e30:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
   12e32:	6831      	ldr	r1, [r6, #0]
   12e34:	3118      	adds	r1, #24
   12e36:	4648      	mov	r0, r9
   12e38:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_LIST);
   12e3a:	2140      	movs	r1, #64	; 0x40
   12e3c:	4620      	mov	r0, r4
   12e3e:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_LIST);
   12e40:	2140      	movs	r1, #64	; 0x40
   12e42:	4620      	mov	r0, r4
   12e44:	47b8      	blx	r7
   12e46:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bg);
   12e48:	6831      	ldr	r1, [r6, #0]
   12e4a:	3104      	adds	r1, #4
   12e4c:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->ddlist_page);
   12e4e:	6831      	ldr	r1, [r6, #0]
   12e50:	3154      	adds	r1, #84	; 0x54
   12e52:	4648      	mov	r0, r9
   12e54:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_SCROLLBAR);
   12e56:	2141      	movs	r1, #65	; 0x41
   12e58:	4620      	mov	r0, r4
   12e5a:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_SCROLLBAR);
   12e5c:	2141      	movs	r1, #65	; 0x41
   12e5e:	4620      	mov	r0, r4
   12e60:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
   12e62:	6831      	ldr	r1, [r6, #0]
   12e64:	3180      	adds	r1, #128	; 0x80
   12e66:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_SELECTED);
   12e68:	2142      	movs	r1, #66	; 0x42
   12e6a:	4620      	mov	r0, r4
   12e6c:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_SELECTED);
   12e6e:	2142      	movs	r1, #66	; 0x42
   12e70:	4620      	mov	r0, r4
   12e72:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->ddlist_sel);
   12e74:	6831      	ldr	r1, [r6, #0]
   12e76:	3158      	adds	r1, #88	; 0x58
   12e78:	47a8      	blx	r5
            break;
   12e7a:	e588      	b.n	1298e <theme_apply+0x76>
   12e7c:	00003255 	.word	0x00003255
   12e80:	00003185 	.word	0x00003185
   12e84:	2000abd4 	.word	0x2000abd4
   12e88:	00005da1 	.word	0x00005da1
            lv_obj_clean_style_list(obj, LV_CHART_PART_BG);
   12e8c:	2100      	movs	r1, #0
   12e8e:	f8df 8290 	ldr.w	r8, [pc, #656]	; 13120 <theme_apply+0x808>
   12e92:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CHART_PART_BG);
   12e94:	2100      	movs	r1, #0
   12e96:	4620      	mov	r0, r4
   12e98:	4f9e      	ldr	r7, [pc, #632]	; (13114 <theme_apply+0x7fc>)
   12e9a:	47b8      	blx	r7
   12e9c:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bg);
   12e9e:	4e9e      	ldr	r6, [pc, #632]	; (13118 <theme_apply+0x800>)
   12ea0:	6831      	ldr	r1, [r6, #0]
   12ea2:	3104      	adds	r1, #4
   12ea4:	4d9d      	ldr	r5, [pc, #628]	; (1311c <theme_apply+0x804>)
   12ea6:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->chart_bg);
   12ea8:	6831      	ldr	r1, [r6, #0]
   12eaa:	3140      	adds	r1, #64	; 0x40
   12eac:	4648      	mov	r0, r9
   12eae:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
   12eb0:	6831      	ldr	r1, [r6, #0]
   12eb2:	3118      	adds	r1, #24
   12eb4:	4648      	mov	r0, r9
   12eb6:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CHART_PART_SERIES_BG);
   12eb8:	2101      	movs	r1, #1
   12eba:	4620      	mov	r0, r4
   12ebc:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES_BG);
   12ebe:	2101      	movs	r1, #1
   12ec0:	4620      	mov	r0, r4
   12ec2:	47b8      	blx	r7
   12ec4:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->pad_small);
   12ec6:	6831      	ldr	r1, [r6, #0]
   12ec8:	3118      	adds	r1, #24
   12eca:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->chart_series_bg);
   12ecc:	6831      	ldr	r1, [r6, #0]
   12ece:	3144      	adds	r1, #68	; 0x44
   12ed0:	4648      	mov	r0, r9
   12ed2:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CHART_PART_SERIES);
   12ed4:	2102      	movs	r1, #2
   12ed6:	4620      	mov	r0, r4
   12ed8:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES);
   12eda:	2102      	movs	r1, #2
   12edc:	4620      	mov	r0, r4
   12ede:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->chart_series);
   12ee0:	6831      	ldr	r1, [r6, #0]
   12ee2:	3148      	adds	r1, #72	; 0x48
   12ee4:	47a8      	blx	r5
            break;
   12ee6:	e552      	b.n	1298e <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_TABLE_PART_BG);
   12ee8:	2100      	movs	r1, #0
   12eea:	f8df 8234 	ldr.w	r8, [pc, #564]	; 13120 <theme_apply+0x808>
   12eee:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TABLE_PART_BG);
   12ef0:	2100      	movs	r1, #0
   12ef2:	4620      	mov	r0, r4
   12ef4:	4f87      	ldr	r7, [pc, #540]	; (13114 <theme_apply+0x7fc>)
   12ef6:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bg);
   12ef8:	4e87      	ldr	r6, [pc, #540]	; (13118 <theme_apply+0x800>)
   12efa:	6831      	ldr	r1, [r6, #0]
   12efc:	3104      	adds	r1, #4
   12efe:	4d87      	ldr	r5, [pc, #540]	; (1311c <theme_apply+0x804>)
   12f00:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL1);
   12f02:	2101      	movs	r1, #1
   12f04:	4620      	mov	r0, r4
   12f06:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TABLE_PART_CELL1);
   12f08:	2101      	movs	r1, #1
   12f0a:	4620      	mov	r0, r4
   12f0c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->table_cell);
   12f0e:	6831      	ldr	r1, [r6, #0]
   12f10:	31a0      	adds	r1, #160	; 0xa0
   12f12:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL2);
   12f14:	2102      	movs	r1, #2
   12f16:	4620      	mov	r0, r4
   12f18:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TABLE_PART_CELL2);
   12f1a:	2102      	movs	r1, #2
   12f1c:	4620      	mov	r0, r4
   12f1e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->table_cell);
   12f20:	6831      	ldr	r1, [r6, #0]
   12f22:	31a0      	adds	r1, #160	; 0xa0
   12f24:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL3);
   12f26:	2103      	movs	r1, #3
   12f28:	4620      	mov	r0, r4
   12f2a:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TABLE_PART_CELL3);
   12f2c:	2103      	movs	r1, #3
   12f2e:	4620      	mov	r0, r4
   12f30:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->table_cell);
   12f32:	6831      	ldr	r1, [r6, #0]
   12f34:	31a0      	adds	r1, #160	; 0xa0
   12f36:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL4);
   12f38:	2104      	movs	r1, #4
   12f3a:	4620      	mov	r0, r4
   12f3c:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TABLE_PART_CELL4);
   12f3e:	2104      	movs	r1, #4
   12f40:	4620      	mov	r0, r4
   12f42:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->table_cell);
   12f44:	6831      	ldr	r1, [r6, #0]
   12f46:	31a0      	adds	r1, #160	; 0xa0
   12f48:	47a8      	blx	r5
            break;
   12f4a:	e520      	b.n	1298e <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_WIN_PART_BG);
   12f4c:	2100      	movs	r1, #0
   12f4e:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 13120 <theme_apply+0x808>
   12f52:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_WIN_PART_BG);
   12f54:	2100      	movs	r1, #0
   12f56:	4620      	mov	r0, r4
   12f58:	4f6e      	ldr	r7, [pc, #440]	; (13114 <theme_apply+0x7fc>)
   12f5a:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->scr);
   12f5c:	4e6e      	ldr	r6, [pc, #440]	; (13118 <theme_apply+0x800>)
   12f5e:	6831      	ldr	r1, [r6, #0]
   12f60:	4d6e      	ldr	r5, [pc, #440]	; (1311c <theme_apply+0x804>)
   12f62:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_WIN_PART_SCROLLBAR);
   12f64:	2142      	movs	r1, #66	; 0x42
   12f66:	4620      	mov	r0, r4
   12f68:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_WIN_PART_SCROLLBAR);
   12f6a:	2142      	movs	r1, #66	; 0x42
   12f6c:	4620      	mov	r0, r4
   12f6e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
   12f70:	6831      	ldr	r1, [r6, #0]
   12f72:	3180      	adds	r1, #128	; 0x80
   12f74:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
   12f76:	2141      	movs	r1, #65	; 0x41
   12f78:	4620      	mov	r0, r4
   12f7a:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
   12f7c:	2141      	movs	r1, #65	; 0x41
   12f7e:	4620      	mov	r0, r4
   12f80:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_page_scrl);
   12f82:	6831      	ldr	r1, [r6, #0]
   12f84:	31b0      	adds	r1, #176	; 0xb0
   12f86:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_WIN_PART_HEADER);
   12f88:	2140      	movs	r1, #64	; 0x40
   12f8a:	4620      	mov	r0, r4
   12f8c:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_WIN_PART_HEADER);
   12f8e:	2140      	movs	r1, #64	; 0x40
   12f90:	4620      	mov	r0, r4
   12f92:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_btns_bg);
   12f94:	6831      	ldr	r1, [r6, #0]
   12f96:	31a8      	adds	r1, #168	; 0xa8
   12f98:	47a8      	blx	r5
            break;
   12f9a:	e4f8      	b.n	1298e <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
   12f9c:	2100      	movs	r1, #0
   12f9e:	4b60      	ldr	r3, [pc, #384]	; (13120 <theme_apply+0x808>)
   12fa0:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
   12fa2:	2100      	movs	r1, #0
   12fa4:	4620      	mov	r0, r4
   12fa6:	4b5b      	ldr	r3, [pc, #364]	; (13114 <theme_apply+0x7fc>)
   12fa8:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->tabview_btns);
   12faa:	4b5b      	ldr	r3, [pc, #364]	; (13118 <theme_apply+0x800>)
   12fac:	6819      	ldr	r1, [r3, #0]
   12fae:	31a4      	adds	r1, #164	; 0xa4
   12fb0:	4b5a      	ldr	r3, [pc, #360]	; (1311c <theme_apply+0x804>)
   12fb2:	4798      	blx	r3
            break;
   12fb4:	e4eb      	b.n	1298e <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_BG);
   12fb6:	2100      	movs	r1, #0
   12fb8:	f8df 8164 	ldr.w	r8, [pc, #356]	; 13120 <theme_apply+0x808>
   12fbc:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_BG);
   12fbe:	2100      	movs	r1, #0
   12fc0:	4620      	mov	r0, r4
   12fc2:	4f54      	ldr	r7, [pc, #336]	; (13114 <theme_apply+0x7fc>)
   12fc4:	47b8      	blx	r7
   12fc6:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bg);
   12fc8:	4e53      	ldr	r6, [pc, #332]	; (13118 <theme_apply+0x800>)
   12fca:	6831      	ldr	r1, [r6, #0]
   12fcc:	3104      	adds	r1, #4
   12fce:	4d53      	ldr	r5, [pc, #332]	; (1311c <theme_apply+0x804>)
   12fd0:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
   12fd2:	6831      	ldr	r1, [r6, #0]
   12fd4:	3118      	adds	r1, #24
   12fd6:	4648      	mov	r0, r9
   12fd8:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_PLACEHOLDER);
   12fda:	2104      	movs	r1, #4
   12fdc:	4620      	mov	r0, r4
   12fde:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_PLACEHOLDER);
   12fe0:	2104      	movs	r1, #4
   12fe2:	4620      	mov	r0, r4
   12fe4:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->ta_placeholder);
   12fe6:	6831      	ldr	r1, [r6, #0]
   12fe8:	31b8      	adds	r1, #184	; 0xb8
   12fea:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_CURSOR);
   12fec:	2103      	movs	r1, #3
   12fee:	4620      	mov	r0, r4
   12ff0:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_CURSOR);
   12ff2:	2103      	movs	r1, #3
   12ff4:	4620      	mov	r0, r4
   12ff6:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->ta_cursor);
   12ff8:	6831      	ldr	r1, [r6, #0]
   12ffa:	31b4      	adds	r1, #180	; 0xb4
   12ffc:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_SCROLLBAR);
   12ffe:	2101      	movs	r1, #1
   13000:	4620      	mov	r0, r4
   13002:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_SCROLLBAR);
   13004:	2101      	movs	r1, #1
   13006:	4620      	mov	r0, r4
   13008:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
   1300a:	6831      	ldr	r1, [r6, #0]
   1300c:	3180      	adds	r1, #128	; 0x80
   1300e:	47a8      	blx	r5
            break;
   13010:	e4bd      	b.n	1298e <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_SPINBOX_PART_BG);
   13012:	2100      	movs	r1, #0
   13014:	f8df 8108 	ldr.w	r8, [pc, #264]	; 13120 <theme_apply+0x808>
   13018:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SPINBOX_PART_BG);
   1301a:	2100      	movs	r1, #0
   1301c:	4620      	mov	r0, r4
   1301e:	4f3d      	ldr	r7, [pc, #244]	; (13114 <theme_apply+0x7fc>)
   13020:	47b8      	blx	r7
   13022:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bg);
   13024:	4e3c      	ldr	r6, [pc, #240]	; (13118 <theme_apply+0x800>)
   13026:	6831      	ldr	r1, [r6, #0]
   13028:	3104      	adds	r1, #4
   1302a:	4d3c      	ldr	r5, [pc, #240]	; (1311c <theme_apply+0x804>)
   1302c:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
   1302e:	6831      	ldr	r1, [r6, #0]
   13030:	3118      	adds	r1, #24
   13032:	4648      	mov	r0, r9
   13034:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SPINBOX_PART_CURSOR);
   13036:	2103      	movs	r1, #3
   13038:	4620      	mov	r0, r4
   1303a:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SPINBOX_PART_CURSOR);
   1303c:	2103      	movs	r1, #3
   1303e:	4620      	mov	r0, r4
   13040:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->spinbox_cursor);
   13042:	6831      	ldr	r1, [r6, #0]
   13044:	3198      	adds	r1, #152	; 0x98
   13046:	47a8      	blx	r5
            break;
   13048:	e4a1      	b.n	1298e <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
   1304a:	2100      	movs	r1, #0
   1304c:	4b34      	ldr	r3, [pc, #208]	; (13120 <theme_apply+0x808>)
   1304e:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
   13050:	2100      	movs	r1, #0
   13052:	4620      	mov	r0, r4
   13054:	4b2f      	ldr	r3, [pc, #188]	; (13114 <theme_apply+0x7fc>)
   13056:	4798      	blx	r3
   13058:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
   1305a:	4e2f      	ldr	r6, [pc, #188]	; (13118 <theme_apply+0x800>)
   1305c:	6831      	ldr	r1, [r6, #0]
   1305e:	3104      	adds	r1, #4
   13060:	4d2e      	ldr	r5, [pc, #184]	; (1311c <theme_apply+0x804>)
   13062:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
   13064:	6831      	ldr	r1, [r6, #0]
   13066:	3108      	adds	r1, #8
   13068:	4638      	mov	r0, r7
   1306a:	47a8      	blx	r5
            break;
   1306c:	e48f      	b.n	1298e <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_BG);
   1306e:	2100      	movs	r1, #0
   13070:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 13120 <theme_apply+0x808>
   13074:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_BG);
   13076:	2100      	movs	r1, #0
   13078:	4620      	mov	r0, r4
   1307a:	4f26      	ldr	r7, [pc, #152]	; (13114 <theme_apply+0x7fc>)
   1307c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bg);
   1307e:	4e26      	ldr	r6, [pc, #152]	; (13118 <theme_apply+0x800>)
   13080:	6831      	ldr	r1, [r6, #0]
   13082:	3104      	adds	r1, #4
   13084:	4d25      	ldr	r5, [pc, #148]	; (1311c <theme_apply+0x804>)
   13086:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_DATE);
   13088:	2103      	movs	r1, #3
   1308a:	4620      	mov	r0, r4
   1308c:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_DATE);
   1308e:	2103      	movs	r1, #3
   13090:	4620      	mov	r0, r4
   13092:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->calendar_date_nums);
   13094:	6831      	ldr	r1, [r6, #0]
   13096:	312c      	adds	r1, #44	; 0x2c
   13098:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_HEADER);
   1309a:	2101      	movs	r1, #1
   1309c:	4620      	mov	r0, r4
   1309e:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_HEADER);
   130a0:	2101      	movs	r1, #1
   130a2:	4620      	mov	r0, r4
   130a4:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->calendar_header);
   130a6:	6831      	ldr	r1, [r6, #0]
   130a8:	3130      	adds	r1, #48	; 0x30
   130aa:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_DAY_NAMES);
   130ac:	2102      	movs	r1, #2
   130ae:	4620      	mov	r0, r4
   130b0:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_DAY_NAMES);
   130b2:	2102      	movs	r1, #2
   130b4:	4620      	mov	r0, r4
   130b6:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->calendar_daynames);
   130b8:	6831      	ldr	r1, [r6, #0]
   130ba:	3134      	adds	r1, #52	; 0x34
   130bc:	47a8      	blx	r5
            break;
   130be:	e466      	b.n	1298e <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_CPICKER_PART_MAIN);
   130c0:	2100      	movs	r1, #0
   130c2:	f8df 805c 	ldr.w	r8, [pc, #92]	; 13120 <theme_apply+0x808>
   130c6:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_MAIN);
   130c8:	2100      	movs	r1, #0
   130ca:	4620      	mov	r0, r4
   130cc:	4f11      	ldr	r7, [pc, #68]	; (13114 <theme_apply+0x7fc>)
   130ce:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->cpicker_bg);
   130d0:	4e11      	ldr	r6, [pc, #68]	; (13118 <theme_apply+0x800>)
   130d2:	6831      	ldr	r1, [r6, #0]
   130d4:	3138      	adds	r1, #56	; 0x38
   130d6:	4d11      	ldr	r5, [pc, #68]	; (1311c <theme_apply+0x804>)
   130d8:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CPICKER_PART_KNOB);
   130da:	2101      	movs	r1, #1
   130dc:	4620      	mov	r0, r4
   130de:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_KNOB);
   130e0:	2101      	movs	r1, #1
   130e2:	4620      	mov	r0, r4
   130e4:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->cpicker_indic);
   130e6:	6831      	ldr	r1, [r6, #0]
   130e8:	313c      	adds	r1, #60	; 0x3c
   130ea:	47a8      	blx	r5
            break;
   130ec:	e44f      	b.n	1298e <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_LINEMETER_PART_MAIN);
   130ee:	2100      	movs	r1, #0
   130f0:	4b0b      	ldr	r3, [pc, #44]	; (13120 <theme_apply+0x808>)
   130f2:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_LINEMETER_PART_MAIN);
   130f4:	2100      	movs	r1, #0
   130f6:	4620      	mov	r0, r4
   130f8:	4b06      	ldr	r3, [pc, #24]	; (13114 <theme_apply+0x7fc>)
   130fa:	4798      	blx	r3
   130fc:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
   130fe:	4e06      	ldr	r6, [pc, #24]	; (13118 <theme_apply+0x800>)
   13100:	6831      	ldr	r1, [r6, #0]
   13102:	3104      	adds	r1, #4
   13104:	4d05      	ldr	r5, [pc, #20]	; (1311c <theme_apply+0x804>)
   13106:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->lmeter);
   13108:	6831      	ldr	r1, [r6, #0]
   1310a:	3170      	adds	r1, #112	; 0x70
   1310c:	4638      	mov	r0, r7
   1310e:	47a8      	blx	r5
            break;
   13110:	e43d      	b.n	1298e <theme_apply+0x76>
   13112:	bf00      	nop
   13114:	00003185 	.word	0x00003185
   13118:	2000abd4 	.word	0x2000abd4
   1311c:	00005da1 	.word	0x00005da1
   13120:	00003255 	.word	0x00003255
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_MAIN);
   13124:	2100      	movs	r1, #0
   13126:	f8df 8054 	ldr.w	r8, [pc, #84]	; 1317c <theme_apply+0x864>
   1312a:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_MAIN);
   1312c:	2100      	movs	r1, #0
   1312e:	4620      	mov	r0, r4
   13130:	4f0f      	ldr	r7, [pc, #60]	; (13170 <theme_apply+0x858>)
   13132:	47b8      	blx	r7
   13134:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bg);
   13136:	4e0f      	ldr	r6, [pc, #60]	; (13174 <theme_apply+0x85c>)
   13138:	6831      	ldr	r1, [r6, #0]
   1313a:	3104      	adds	r1, #4
   1313c:	4d0e      	ldr	r5, [pc, #56]	; (13178 <theme_apply+0x860>)
   1313e:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->gauge_main);
   13140:	6831      	ldr	r1, [r6, #0]
   13142:	315c      	adds	r1, #92	; 0x5c
   13144:	4648      	mov	r0, r9
   13146:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_MAJOR);
   13148:	2101      	movs	r1, #1
   1314a:	4620      	mov	r0, r4
   1314c:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_MAJOR);
   1314e:	2101      	movs	r1, #1
   13150:	4620      	mov	r0, r4
   13152:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->gauge_strong);
   13154:	6831      	ldr	r1, [r6, #0]
   13156:	3160      	adds	r1, #96	; 0x60
   13158:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_NEEDLE);
   1315a:	2102      	movs	r1, #2
   1315c:	4620      	mov	r0, r4
   1315e:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_NEEDLE);
   13160:	2102      	movs	r1, #2
   13162:	4620      	mov	r0, r4
   13164:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->gauge_needle);
   13166:	6831      	ldr	r1, [r6, #0]
   13168:	3164      	adds	r1, #100	; 0x64
   1316a:	47a8      	blx	r5
            break;
   1316c:	e40f      	b.n	1298e <theme_apply+0x76>
   1316e:	bf00      	nop
   13170:	00003185 	.word	0x00003185
   13174:	2000abd4 	.word	0x2000abd4
   13178:	00005da1 	.word	0x00005da1
   1317c:	00003255 	.word	0x00003255

00013180 <style_init_reset>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void style_init_reset(lv_style_t * style)
{
   13180:	b508      	push	{r3, lr}
    if(inited) lv_style_reset(style);
   13182:	4b04      	ldr	r3, [pc, #16]	; (13194 <style_init_reset+0x14>)
   13184:	791b      	ldrb	r3, [r3, #4]
   13186:	b913      	cbnz	r3, 1318e <style_init_reset+0xe>
    else lv_style_init(style);
   13188:	4b03      	ldr	r3, [pc, #12]	; (13198 <style_init_reset+0x18>)
   1318a:	4798      	blx	r3
   1318c:	bd08      	pop	{r3, pc}
    if(inited) lv_style_reset(style);
   1318e:	4b03      	ldr	r3, [pc, #12]	; (1319c <style_init_reset+0x1c>)
   13190:	4798      	blx	r3
   13192:	bd08      	pop	{r3, pc}
   13194:	2000abd4 	.word	0x2000abd4
   13198:	00005cd9 	.word	0x00005cd9
   1319c:	00005ebd 	.word	0x00005ebd

000131a0 <basic_init>:
{
   131a0:	b570      	push	{r4, r5, r6, lr}
    style_init_reset(&styles->scr);
   131a2:	4cb3      	ldr	r4, [pc, #716]	; (13470 <basic_init+0x2d0>)
   131a4:	6820      	ldr	r0, [r4, #0]
   131a6:	4bb3      	ldr	r3, [pc, #716]	; (13474 <basic_init+0x2d4>)
   131a8:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   131aa:	22ff      	movs	r2, #255	; 0xff
   131ac:	212c      	movs	r1, #44	; 0x2c
   131ae:	6820      	ldr	r0, [r4, #0]
   131b0:	4bb1      	ldr	r3, [pc, #708]	; (13478 <basic_init+0x2d8>)
   131b2:	4798      	blx	r3
    lv_style_set_bg_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR);
   131b4:	6a23      	ldr	r3, [r4, #32]
   131b6:	f013 0302 	ands.w	r3, r3, #2
   131ba:	bf14      	ite	ne
   131bc:	211d      	movne	r1, #29
   131be:	2108      	moveq	r1, #8
   131c0:	2b00      	cmp	r3, #0
   131c2:	bf15      	itete	ne
   131c4:	203b      	movne	r0, #59	; 0x3b
   131c6:	2012      	moveq	r0, #18
   131c8:	231e      	movne	r3, #30
   131ca:	230b      	moveq	r3, #11
   131cc:	f04f 0200 	mov.w	r2, #0
   131d0:	f363 0204 	bfi	r2, r3, #0, #5
   131d4:	f360 124a 	bfi	r2, r0, #5, #6
   131d8:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   131dc:	2129      	movs	r1, #41	; 0x29
   131de:	6820      	ldr	r0, [r4, #0]
   131e0:	4ba6      	ldr	r3, [pc, #664]	; (1347c <basic_init+0x2dc>)
   131e2:	4798      	blx	r3
    lv_style_set_text_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
   131e4:	4620      	mov	r0, r4
   131e6:	6a23      	ldr	r3, [r4, #32]
   131e8:	f013 0302 	ands.w	r3, r3, #2
   131ec:	bf14      	ite	ne
   131ee:	2107      	movne	r1, #7
   131f0:	211c      	moveq	r1, #28
   131f2:	2b00      	cmp	r3, #0
   131f4:	bf15      	itete	ne
   131f6:	240f      	movne	r4, #15
   131f8:	243a      	moveq	r4, #58	; 0x3a
   131fa:	2308      	movne	r3, #8
   131fc:	231d      	moveq	r3, #29
   131fe:	f04f 0200 	mov.w	r2, #0
   13202:	f363 0204 	bfi	r2, r3, #0, #5
   13206:	f364 124a 	bfi	r2, r4, #5, #6
   1320a:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   1320e:	f248 0189 	movw	r1, #32905	; 0x8089
   13212:	6800      	ldr	r0, [r0, #0]
   13214:	4b99      	ldr	r3, [pc, #612]	; (1347c <basic_init+0x2dc>)
   13216:	4798      	blx	r3
    lv_style_set_value_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
   13218:	4895      	ldr	r0, [pc, #596]	; (13470 <basic_init+0x2d0>)
   1321a:	6a03      	ldr	r3, [r0, #32]
   1321c:	f013 0302 	ands.w	r3, r3, #2
   13220:	bf14      	ite	ne
   13222:	2107      	movne	r1, #7
   13224:	211c      	moveq	r1, #28
   13226:	2b00      	cmp	r3, #0
   13228:	bf15      	itete	ne
   1322a:	240f      	movne	r4, #15
   1322c:	243a      	moveq	r4, #58	; 0x3a
   1322e:	2308      	movne	r3, #8
   13230:	231d      	moveq	r3, #29
   13232:	f04f 0200 	mov.w	r2, #0
   13236:	f363 0204 	bfi	r2, r3, #0, #5
   1323a:	f364 124a 	bfi	r2, r4, #5, #6
   1323e:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   13242:	2179      	movs	r1, #121	; 0x79
   13244:	6800      	ldr	r0, [r0, #0]
   13246:	4b8d      	ldr	r3, [pc, #564]	; (1347c <basic_init+0x2dc>)
   13248:	4798      	blx	r3
    lv_style_set_text_font(&styles->scr, LV_STATE_DEFAULT, theme.font_normal);
   1324a:	4c89      	ldr	r4, [pc, #548]	; (13470 <basic_init+0x2d0>)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   1324c:	6962      	ldr	r2, [r4, #20]
   1324e:	f248 018e 	movw	r1, #32910	; 0x808e
   13252:	6820      	ldr	r0, [r4, #0]
   13254:	4d8a      	ldr	r5, [pc, #552]	; (13480 <basic_init+0x2e0>)
   13256:	47a8      	blx	r5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
   13258:	6962      	ldr	r2, [r4, #20]
   1325a:	217e      	movs	r1, #126	; 0x7e
   1325c:	6820      	ldr	r0, [r4, #0]
   1325e:	47a8      	blx	r5
    style_init_reset(&styles->bg);
   13260:	6820      	ldr	r0, [r4, #0]
   13262:	3004      	adds	r0, #4
   13264:	4b83      	ldr	r3, [pc, #524]	; (13474 <basic_init+0x2d4>)
   13266:	4798      	blx	r3
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, LV_DPX(8));
   13268:	6824      	ldr	r4, [r4, #0]
   1326a:	3404      	adds	r4, #4
   1326c:	2000      	movs	r0, #0
   1326e:	4b85      	ldr	r3, [pc, #532]	; (13484 <basic_init+0x2e4>)
   13270:	4798      	blx	r3
   13272:	300a      	adds	r0, #10
   13274:	00c0      	lsls	r0, r0, #3
   13276:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1327a:	f080 8646 	bcs.w	13f0a <basic_init+0xd6a>
   1327e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   13280:	2101      	movs	r1, #1
   13282:	4620      	mov	r0, r4
   13284:	4b80      	ldr	r3, [pc, #512]	; (13488 <basic_init+0x2e8>)
   13286:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->bg, LV_STATE_DEFAULT, LV_OPA_COVER);
   13288:	4c79      	ldr	r4, [pc, #484]	; (13470 <basic_init+0x2d0>)
   1328a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   1328c:	22ff      	movs	r2, #255	; 0xff
   1328e:	212c      	movs	r1, #44	; 0x2c
   13290:	3004      	adds	r0, #4
   13292:	4b79      	ldr	r3, [pc, #484]	; (13478 <basic_init+0x2d8>)
   13294:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG);
   13296:	6820      	ldr	r0, [r4, #0]
   13298:	3004      	adds	r0, #4
   1329a:	6a23      	ldr	r3, [r4, #32]
   1329c:	f013 0f02 	tst.w	r3, #2
   132a0:	f040 8640 	bne.w	13f24 <basic_init+0xd84>
   132a4:	230b      	movs	r3, #11
   132a6:	2118      	movs	r1, #24
   132a8:	240e      	movs	r4, #14
   132aa:	f04f 0200 	mov.w	r2, #0
   132ae:	f364 0204 	bfi	r2, r4, #0, #5
   132b2:	f361 124a 	bfi	r2, r1, #5, #6
   132b6:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   132ba:	2129      	movs	r1, #41	; 0x29
   132bc:	4b6f      	ldr	r3, [pc, #444]	; (1347c <basic_init+0x2dc>)
   132be:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
   132c0:	4b6b      	ldr	r3, [pc, #428]	; (13470 <basic_init+0x2d0>)
   132c2:	6818      	ldr	r0, [r3, #0]
   132c4:	6a1b      	ldr	r3, [r3, #32]
   132c6:	f013 0302 	ands.w	r3, r3, #2
   132ca:	bf14      	ite	ne
   132cc:	211a      	movne	r1, #26
   132ce:	2110      	moveq	r1, #16
   132d0:	2b00      	cmp	r3, #0
   132d2:	bf15      	itete	ne
   132d4:	2437      	movne	r4, #55	; 0x37
   132d6:	2422      	moveq	r4, #34	; 0x22
   132d8:	231c      	movne	r3, #28
   132da:	2312      	moveq	r3, #18
   132dc:	f04f 0200 	mov.w	r2, #0
   132e0:	f363 0204 	bfi	r2, r3, #0, #5
   132e4:	f364 124a 	bfi	r2, r4, #5, #6
   132e8:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   132ec:	2139      	movs	r1, #57	; 0x39
   132ee:	3004      	adds	r0, #4
   132f0:	4d62      	ldr	r5, [pc, #392]	; (1347c <basic_init+0x2dc>)
   132f2:	47a8      	blx	r5
    lv_style_set_border_color(&styles->bg, LV_STATE_FOCUSED, theme.color_primary);
   132f4:	4c5e      	ldr	r4, [pc, #376]	; (13470 <basic_init+0x2d0>)
   132f6:	6820      	ldr	r0, [r4, #0]
   132f8:	89a2      	ldrh	r2, [r4, #12]
   132fa:	f240 2139 	movw	r1, #569	; 0x239
   132fe:	3004      	adds	r0, #4
   13300:	47a8      	blx	r5
    lv_style_set_border_color(&styles->bg, LV_STATE_EDITED, theme.color_secondary);
   13302:	6820      	ldr	r0, [r4, #0]
   13304:	89e2      	ldrh	r2, [r4, #14]
   13306:	f240 4139 	movw	r1, #1081	; 0x439
   1330a:	3004      	adds	r0, #4
   1330c:	47a8      	blx	r5
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
   1330e:	6824      	ldr	r4, [r4, #0]
   13310:	3404      	adds	r4, #4
   13312:	2000      	movs	r0, #0
   13314:	4b5b      	ldr	r3, [pc, #364]	; (13484 <basic_init+0x2e4>)
   13316:	4798      	blx	r3
   13318:	3028      	adds	r0, #40	; 0x28
   1331a:	0040      	lsls	r0, r0, #1
   1331c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   13320:	f080 8605 	bcs.w	13f2e <basic_init+0xd8e>
   13324:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   13326:	2130      	movs	r1, #48	; 0x30
   13328:	4620      	mov	r0, r4
   1332a:	4d57      	ldr	r5, [pc, #348]	; (13488 <basic_init+0x2e8>)
   1332c:	47a8      	blx	r5
    lv_style_set_border_post(&styles->bg, LV_STATE_DEFAULT, true);
   1332e:	4c50      	ldr	r4, [pc, #320]	; (13470 <basic_init+0x2d0>)
   13330:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
   13332:	2201      	movs	r2, #1
   13334:	2133      	movs	r1, #51	; 0x33
   13336:	3004      	adds	r0, #4
   13338:	47a8      	blx	r5
    lv_style_set_text_font(&styles->bg, LV_STATE_DEFAULT, theme.font_normal);
   1333a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   1333c:	6962      	ldr	r2, [r4, #20]
   1333e:	f248 018e 	movw	r1, #32910	; 0x808e
   13342:	3004      	adds	r0, #4
   13344:	4b4e      	ldr	r3, [pc, #312]	; (13480 <basic_init+0x2e0>)
   13346:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   13348:	6820      	ldr	r0, [r4, #0]
   1334a:	3004      	adds	r0, #4
   1334c:	6a23      	ldr	r3, [r4, #32]
   1334e:	f013 0f02 	tst.w	r3, #2
   13352:	f040 85f9 	bne.w	13f48 <basic_init+0xda8>
   13356:	231f      	movs	r3, #31
   13358:	213f      	movs	r1, #63	; 0x3f
   1335a:	461c      	mov	r4, r3
   1335c:	f04f 0200 	mov.w	r2, #0
   13360:	f364 0204 	bfi	r2, r4, #0, #5
   13364:	f361 124a 	bfi	r2, r1, #5, #6
   13368:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   1336c:	f248 0189 	movw	r1, #32905	; 0x8089
   13370:	4b42      	ldr	r3, [pc, #264]	; (1347c <basic_init+0x2dc>)
   13372:	4798      	blx	r3
    lv_style_set_value_font(&styles->bg, LV_STATE_DEFAULT, theme.font_normal);
   13374:	4c3e      	ldr	r4, [pc, #248]	; (13470 <basic_init+0x2d0>)
   13376:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
   13378:	6962      	ldr	r2, [r4, #20]
   1337a:	217e      	movs	r1, #126	; 0x7e
   1337c:	3004      	adds	r0, #4
   1337e:	4b40      	ldr	r3, [pc, #256]	; (13480 <basic_init+0x2e0>)
   13380:	4798      	blx	r3
    lv_style_set_value_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   13382:	6820      	ldr	r0, [r4, #0]
   13384:	3004      	adds	r0, #4
   13386:	6a23      	ldr	r3, [r4, #32]
   13388:	f013 0f02 	tst.w	r3, #2
   1338c:	f040 85e1 	bne.w	13f52 <basic_init+0xdb2>
   13390:	231f      	movs	r3, #31
   13392:	213f      	movs	r1, #63	; 0x3f
   13394:	461c      	mov	r4, r3
   13396:	f04f 0200 	mov.w	r2, #0
   1339a:	f364 0204 	bfi	r2, r4, #0, #5
   1339e:	f361 124a 	bfi	r2, r1, #5, #6
   133a2:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   133a6:	2179      	movs	r1, #121	; 0x79
   133a8:	4b34      	ldr	r3, [pc, #208]	; (1347c <basic_init+0x2dc>)
   133aa:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   133ac:	4b30      	ldr	r3, [pc, #192]	; (13470 <basic_init+0x2d0>)
   133ae:	6818      	ldr	r0, [r3, #0]
   133b0:	3004      	adds	r0, #4
   133b2:	6a1b      	ldr	r3, [r3, #32]
   133b4:	f013 0f02 	tst.w	r3, #2
   133b8:	f040 85d0 	bne.w	13f5c <basic_init+0xdbc>
   133bc:	231f      	movs	r3, #31
   133be:	213f      	movs	r1, #63	; 0x3f
   133c0:	461c      	mov	r4, r3
   133c2:	f04f 0200 	mov.w	r2, #0
   133c6:	f364 0204 	bfi	r2, r4, #0, #5
   133ca:	f361 124a 	bfi	r2, r1, #5, #6
   133ce:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   133d2:	f248 01a9 	movw	r1, #32937	; 0x80a9
   133d6:	4b29      	ldr	r3, [pc, #164]	; (1347c <basic_init+0x2dc>)
   133d8:	4798      	blx	r3
    lv_style_set_line_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   133da:	4b25      	ldr	r3, [pc, #148]	; (13470 <basic_init+0x2d0>)
   133dc:	6818      	ldr	r0, [r3, #0]
   133de:	3004      	adds	r0, #4
   133e0:	6a1b      	ldr	r3, [r3, #32]
   133e2:	f013 0f02 	tst.w	r3, #2
   133e6:	f040 85be 	bne.w	13f66 <basic_init+0xdc6>
   133ea:	231f      	movs	r3, #31
   133ec:	213f      	movs	r1, #63	; 0x3f
   133ee:	461c      	mov	r4, r3
   133f0:	f04f 0200 	mov.w	r2, #0
   133f4:	f364 0204 	bfi	r2, r4, #0, #5
   133f8:	f361 124a 	bfi	r2, r1, #5, #6
   133fc:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   13400:	2199      	movs	r1, #153	; 0x99
   13402:	4b1e      	ldr	r3, [pc, #120]	; (1347c <basic_init+0x2dc>)
   13404:	4798      	blx	r3
    lv_style_set_line_width(&styles->bg, LV_STATE_DEFAULT, 1);
   13406:	4c1a      	ldr	r4, [pc, #104]	; (13470 <basic_init+0x2d0>)
   13408:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   1340a:	2201      	movs	r2, #1
   1340c:	2190      	movs	r1, #144	; 0x90
   1340e:	3004      	adds	r0, #4
   13410:	4b1d      	ldr	r3, [pc, #116]	; (13488 <basic_init+0x2e8>)
   13412:	4798      	blx	r3
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   13414:	6825      	ldr	r5, [r4, #0]
   13416:	3504      	adds	r5, #4
   13418:	2000      	movs	r0, #0
   1341a:	4b1c      	ldr	r3, [pc, #112]	; (1348c <basic_init+0x2ec>)
   1341c:	4798      	blx	r3
   1341e:	2801      	cmp	r0, #1
   13420:	f240 85a6 	bls.w	13f70 <basic_init+0xdd0>
   13424:	2000      	movs	r0, #0
   13426:	4b17      	ldr	r3, [pc, #92]	; (13484 <basic_init+0x2e4>)
   13428:	4798      	blx	r3
   1342a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1342e:	0040      	lsls	r0, r0, #1
   13430:	3050      	adds	r0, #80	; 0x50
   13432:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   13436:	f080 85b5 	bcs.w	13fa4 <basic_init+0xe04>
   1343a:	2401      	movs	r4, #1
   1343c:	2000      	movs	r0, #0
   1343e:	4b11      	ldr	r3, [pc, #68]	; (13484 <basic_init+0x2e4>)
   13440:	4798      	blx	r3
   13442:	3028      	adds	r0, #40	; 0x28
   13444:	0040      	lsls	r0, r0, #1
   13446:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1344a:	f080 85b9 	bcs.w	13fc0 <basic_init+0xe20>
   1344e:	2201      	movs	r2, #1
   13450:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   13452:	b212      	sxth	r2, r2
   13454:	2112      	movs	r1, #18
   13456:	4628      	mov	r0, r5
   13458:	4b0b      	ldr	r3, [pc, #44]	; (13488 <basic_init+0x2e8>)
   1345a:	4798      	blx	r3
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   1345c:	4b04      	ldr	r3, [pc, #16]	; (13470 <basic_init+0x2d0>)
   1345e:	681d      	ldr	r5, [r3, #0]
   13460:	3504      	adds	r5, #4
   13462:	2000      	movs	r0, #0
   13464:	4b09      	ldr	r3, [pc, #36]	; (1348c <basic_init+0x2ec>)
   13466:	4798      	blx	r3
   13468:	2801      	cmp	r0, #1
   1346a:	f240 85b6 	bls.w	13fda <basic_init+0xe3a>
   1346e:	e00f      	b.n	13490 <basic_init+0x2f0>
   13470:	2000abd4 	.word	0x2000abd4
   13474:	00013181 	.word	0x00013181
   13478:	00006289 	.word	0x00006289
   1347c:	00006161 	.word	0x00006161
   13480:	0000639d 	.word	0x0000639d
   13484:	000101bd 	.word	0x000101bd
   13488:	00006039 	.word	0x00006039
   1348c:	000101d9 	.word	0x000101d9
   13490:	2000      	movs	r0, #0
   13492:	4bb1      	ldr	r3, [pc, #708]	; (13758 <basic_init+0x5b8>)
   13494:	4798      	blx	r3
   13496:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1349a:	0040      	lsls	r0, r0, #1
   1349c:	3050      	adds	r0, #80	; 0x50
   1349e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   134a2:	f080 85b4 	bcs.w	1400e <basic_init+0xe6e>
   134a6:	2401      	movs	r4, #1
   134a8:	2000      	movs	r0, #0
   134aa:	4bab      	ldr	r3, [pc, #684]	; (13758 <basic_init+0x5b8>)
   134ac:	4798      	blx	r3
   134ae:	3028      	adds	r0, #40	; 0x28
   134b0:	0040      	lsls	r0, r0, #1
   134b2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   134b6:	f080 85b8 	bcs.w	1402a <basic_init+0xe8a>
   134ba:	2201      	movs	r2, #1
   134bc:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   134be:	b212      	sxth	r2, r2
   134c0:	2113      	movs	r1, #19
   134c2:	4628      	mov	r0, r5
   134c4:	4ba5      	ldr	r3, [pc, #660]	; (1375c <basic_init+0x5bc>)
   134c6:	4798      	blx	r3
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   134c8:	4ba5      	ldr	r3, [pc, #660]	; (13760 <basic_init+0x5c0>)
   134ca:	681d      	ldr	r5, [r3, #0]
   134cc:	3504      	adds	r5, #4
   134ce:	2000      	movs	r0, #0
   134d0:	4ba4      	ldr	r3, [pc, #656]	; (13764 <basic_init+0x5c4>)
   134d2:	4798      	blx	r3
   134d4:	2801      	cmp	r0, #1
   134d6:	f240 85b5 	bls.w	14044 <basic_init+0xea4>
   134da:	2000      	movs	r0, #0
   134dc:	4b9e      	ldr	r3, [pc, #632]	; (13758 <basic_init+0x5b8>)
   134de:	4798      	blx	r3
   134e0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   134e4:	0040      	lsls	r0, r0, #1
   134e6:	3050      	adds	r0, #80	; 0x50
   134e8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   134ec:	f080 85c4 	bcs.w	14078 <basic_init+0xed8>
   134f0:	2401      	movs	r4, #1
   134f2:	2000      	movs	r0, #0
   134f4:	4b98      	ldr	r3, [pc, #608]	; (13758 <basic_init+0x5b8>)
   134f6:	4798      	blx	r3
   134f8:	3028      	adds	r0, #40	; 0x28
   134fa:	0040      	lsls	r0, r0, #1
   134fc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   13500:	f080 85c8 	bcs.w	14094 <basic_init+0xef4>
   13504:	2201      	movs	r2, #1
   13506:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   13508:	b212      	sxth	r2, r2
   1350a:	2110      	movs	r1, #16
   1350c:	4628      	mov	r0, r5
   1350e:	4b93      	ldr	r3, [pc, #588]	; (1375c <basic_init+0x5bc>)
   13510:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   13512:	4b93      	ldr	r3, [pc, #588]	; (13760 <basic_init+0x5c0>)
   13514:	681d      	ldr	r5, [r3, #0]
   13516:	3504      	adds	r5, #4
   13518:	2000      	movs	r0, #0
   1351a:	4b92      	ldr	r3, [pc, #584]	; (13764 <basic_init+0x5c4>)
   1351c:	4798      	blx	r3
   1351e:	2801      	cmp	r0, #1
   13520:	f240 85c5 	bls.w	140ae <basic_init+0xf0e>
   13524:	2000      	movs	r0, #0
   13526:	4b8c      	ldr	r3, [pc, #560]	; (13758 <basic_init+0x5b8>)
   13528:	4798      	blx	r3
   1352a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1352e:	0040      	lsls	r0, r0, #1
   13530:	3050      	adds	r0, #80	; 0x50
   13532:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   13536:	f080 85d4 	bcs.w	140e2 <basic_init+0xf42>
   1353a:	2401      	movs	r4, #1
   1353c:	2000      	movs	r0, #0
   1353e:	4b86      	ldr	r3, [pc, #536]	; (13758 <basic_init+0x5b8>)
   13540:	4798      	blx	r3
   13542:	3028      	adds	r0, #40	; 0x28
   13544:	0040      	lsls	r0, r0, #1
   13546:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1354a:	f080 85e9 	bcs.w	14120 <basic_init+0xf80>
   1354e:	2201      	movs	r2, #1
   13550:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   13552:	b212      	sxth	r2, r2
   13554:	2111      	movs	r1, #17
   13556:	4628      	mov	r0, r5
   13558:	4b80      	ldr	r3, [pc, #512]	; (1375c <basic_init+0x5bc>)
   1355a:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
   1355c:	4b80      	ldr	r3, [pc, #512]	; (13760 <basic_init+0x5c0>)
   1355e:	681c      	ldr	r4, [r3, #0]
   13560:	3404      	adds	r4, #4
   13562:	2000      	movs	r0, #0
   13564:	4b7f      	ldr	r3, [pc, #508]	; (13764 <basic_init+0x5c4>)
   13566:	4798      	blx	r3
   13568:	2801      	cmp	r0, #1
   1356a:	f240 85e6 	bls.w	1413a <basic_init+0xf9a>
   1356e:	2000      	movs	r0, #0
   13570:	4b79      	ldr	r3, [pc, #484]	; (13758 <basic_init+0x5b8>)
   13572:	4798      	blx	r3
   13574:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   13578:	0040      	lsls	r0, r0, #1
   1357a:	3050      	adds	r0, #80	; 0x50
   1357c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   13580:	f080 85f5 	bcs.w	1416e <basic_init+0xfce>
   13584:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   13586:	2114      	movs	r1, #20
   13588:	4620      	mov	r0, r4
   1358a:	4d74      	ldr	r5, [pc, #464]	; (1375c <basic_init+0x5bc>)
   1358c:	47a8      	blx	r5
    lv_style_set_transition_time(&styles->bg, LV_STATE_DEFAULT, TRANSITION_TIME);
   1358e:	4c74      	ldr	r4, [pc, #464]	; (13760 <basic_init+0x5c0>)
   13590:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
   13592:	2296      	movs	r2, #150	; 0x96
   13594:	21b0      	movs	r1, #176	; 0xb0
   13596:	3004      	adds	r0, #4
   13598:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->bg, LV_STATE_DEFAULT, LV_STYLE_BORDER_COLOR);
   1359a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_2, transition_prop_2, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
   1359c:	2239      	movs	r2, #57	; 0x39
   1359e:	21b7      	movs	r1, #183	; 0xb7
   135a0:	3004      	adds	r0, #4
   135a2:	47a8      	blx	r5
    style_init_reset(&styles->bg_sec);
   135a4:	6820      	ldr	r0, [r4, #0]
   135a6:	300c      	adds	r0, #12
   135a8:	4b6f      	ldr	r3, [pc, #444]	; (13768 <basic_init+0x5c8>)
   135aa:	4798      	blx	r3
    lv_style_copy(&styles->bg_sec, &styles->bg);
   135ac:	6820      	ldr	r0, [r4, #0]
   135ae:	1d01      	adds	r1, r0, #4
   135b0:	300c      	adds	r0, #12
   135b2:	4b6e      	ldr	r3, [pc, #440]	; (1376c <basic_init+0x5cc>)
   135b4:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC);
   135b6:	6820      	ldr	r0, [r4, #0]
   135b8:	6a23      	ldr	r3, [r4, #32]
   135ba:	f013 0302 	ands.w	r3, r3, #2
   135be:	bf14      	ite	ne
   135c0:	211a      	movne	r1, #26
   135c2:	2108      	moveq	r1, #8
   135c4:	2b00      	cmp	r3, #0
   135c6:	bf15      	itete	ne
   135c8:	2435      	movne	r4, #53	; 0x35
   135ca:	2412      	moveq	r4, #18
   135cc:	231b      	movne	r3, #27
   135ce:	2309      	moveq	r3, #9
   135d0:	f04f 0200 	mov.w	r2, #0
   135d4:	f363 0204 	bfi	r2, r3, #0, #5
   135d8:	f364 124a 	bfi	r2, r4, #5, #6
   135dc:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   135e0:	2129      	movs	r1, #41	; 0x29
   135e2:	300c      	adds	r0, #12
   135e4:	4b62      	ldr	r3, [pc, #392]	; (13770 <basic_init+0x5d0>)
   135e6:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_BORDER);
   135e8:	4b5d      	ldr	r3, [pc, #372]	; (13760 <basic_init+0x5c0>)
   135ea:	6818      	ldr	r0, [r3, #0]
   135ec:	300c      	adds	r0, #12
   135ee:	6a1b      	ldr	r3, [r3, #32]
   135f0:	f013 0f02 	tst.w	r3, #2
   135f4:	f040 85c9 	bne.w	1418a <basic_init+0xfea>
   135f8:	2308      	movs	r3, #8
   135fa:	2110      	movs	r1, #16
   135fc:	461c      	mov	r4, r3
   135fe:	f04f 0200 	mov.w	r2, #0
   13602:	f364 0204 	bfi	r2, r4, #0, #5
   13606:	f361 124a 	bfi	r2, r1, #5, #6
   1360a:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   1360e:	2139      	movs	r1, #57	; 0x39
   13610:	4b57      	ldr	r3, [pc, #348]	; (13770 <basic_init+0x5d0>)
   13612:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
   13614:	4b52      	ldr	r3, [pc, #328]	; (13760 <basic_init+0x5c0>)
   13616:	6818      	ldr	r0, [r3, #0]
   13618:	6a1b      	ldr	r3, [r3, #32]
   1361a:	f013 0302 	ands.w	r3, r3, #2
   1361e:	bf14      	ite	ne
   13620:	2106      	movne	r1, #6
   13622:	2114      	moveq	r1, #20
   13624:	2b00      	cmp	r3, #0
   13626:	bf15      	itete	ne
   13628:	2410      	movne	r4, #16
   1362a:	242a      	moveq	r4, #42	; 0x2a
   1362c:	2309      	movne	r3, #9
   1362e:	2315      	moveq	r3, #21
   13630:	f04f 0200 	mov.w	r2, #0
   13634:	f363 0204 	bfi	r2, r3, #0, #5
   13638:	f364 124a 	bfi	r2, r4, #5, #6
   1363c:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   13640:	f248 0189 	movw	r1, #32905	; 0x8089
   13644:	300c      	adds	r0, #12
   13646:	4b4a      	ldr	r3, [pc, #296]	; (13770 <basic_init+0x5d0>)
   13648:	4798      	blx	r3
    lv_style_set_value_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
   1364a:	4b45      	ldr	r3, [pc, #276]	; (13760 <basic_init+0x5c0>)
   1364c:	6818      	ldr	r0, [r3, #0]
   1364e:	6a1b      	ldr	r3, [r3, #32]
   13650:	f013 0302 	ands.w	r3, r3, #2
   13654:	bf14      	ite	ne
   13656:	2106      	movne	r1, #6
   13658:	2114      	moveq	r1, #20
   1365a:	2b00      	cmp	r3, #0
   1365c:	bf15      	itete	ne
   1365e:	2410      	movne	r4, #16
   13660:	242a      	moveq	r4, #42	; 0x2a
   13662:	2309      	movne	r3, #9
   13664:	2315      	moveq	r3, #21
   13666:	f04f 0200 	mov.w	r2, #0
   1366a:	f363 0204 	bfi	r2, r3, #0, #5
   1366e:	f364 124a 	bfi	r2, r4, #5, #6
   13672:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   13676:	2179      	movs	r1, #121	; 0x79
   13678:	300c      	adds	r0, #12
   1367a:	4b3d      	ldr	r3, [pc, #244]	; (13770 <basic_init+0x5d0>)
   1367c:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
   1367e:	4b38      	ldr	r3, [pc, #224]	; (13760 <basic_init+0x5c0>)
   13680:	6818      	ldr	r0, [r3, #0]
   13682:	6a1b      	ldr	r3, [r3, #32]
   13684:	f013 0302 	ands.w	r3, r3, #2
   13688:	bf14      	ite	ne
   1368a:	2106      	movne	r1, #6
   1368c:	2114      	moveq	r1, #20
   1368e:	2b00      	cmp	r3, #0
   13690:	bf15      	itete	ne
   13692:	2410      	movne	r4, #16
   13694:	242a      	moveq	r4, #42	; 0x2a
   13696:	2309      	movne	r3, #9
   13698:	2315      	moveq	r3, #21
   1369a:	f04f 0200 	mov.w	r2, #0
   1369e:	f363 0204 	bfi	r2, r3, #0, #5
   136a2:	f364 124a 	bfi	r2, r4, #5, #6
   136a6:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   136aa:	f248 01a9 	movw	r1, #32937	; 0x80a9
   136ae:	300c      	adds	r0, #12
   136b0:	4b2f      	ldr	r3, [pc, #188]	; (13770 <basic_init+0x5d0>)
   136b2:	4798      	blx	r3
    lv_style_set_line_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
   136b4:	4b2a      	ldr	r3, [pc, #168]	; (13760 <basic_init+0x5c0>)
   136b6:	6818      	ldr	r0, [r3, #0]
   136b8:	6a1b      	ldr	r3, [r3, #32]
   136ba:	f013 0302 	ands.w	r3, r3, #2
   136be:	bf14      	ite	ne
   136c0:	2106      	movne	r1, #6
   136c2:	2114      	moveq	r1, #20
   136c4:	2b00      	cmp	r3, #0
   136c6:	bf15      	itete	ne
   136c8:	2410      	movne	r4, #16
   136ca:	242a      	moveq	r4, #42	; 0x2a
   136cc:	2309      	movne	r3, #9
   136ce:	2315      	moveq	r3, #21
   136d0:	f04f 0200 	mov.w	r2, #0
   136d4:	f363 0204 	bfi	r2, r3, #0, #5
   136d8:	f364 124a 	bfi	r2, r4, #5, #6
   136dc:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   136e0:	2199      	movs	r1, #153	; 0x99
   136e2:	300c      	adds	r0, #12
   136e4:	4b22      	ldr	r3, [pc, #136]	; (13770 <basic_init+0x5d0>)
   136e6:	4798      	blx	r3
    style_init_reset(&styles->bg_click);
   136e8:	4c1d      	ldr	r4, [pc, #116]	; (13760 <basic_init+0x5c0>)
   136ea:	6820      	ldr	r0, [r4, #0]
   136ec:	3008      	adds	r0, #8
   136ee:	4b1e      	ldr	r3, [pc, #120]	; (13768 <basic_init+0x5c8>)
   136f0:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_PR);
   136f2:	6820      	ldr	r0, [r4, #0]
   136f4:	3008      	adds	r0, #8
   136f6:	6a23      	ldr	r3, [r4, #32]
   136f8:	f013 0f02 	tst.w	r3, #2
   136fc:	f040 854a 	bne.w	14194 <basic_init+0xff4>
   13700:	2309      	movs	r3, #9
   13702:	2113      	movs	r1, #19
   13704:	240a      	movs	r4, #10
   13706:	f04f 0200 	mov.w	r2, #0
   1370a:	f364 0204 	bfi	r2, r4, #0, #5
   1370e:	f361 124a 	bfi	r2, r1, #5, #6
   13712:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   13716:	f241 0129 	movw	r1, #4137	; 0x1029
   1371a:	4d15      	ldr	r5, [pc, #84]	; (13770 <basic_init+0x5d0>)
   1371c:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_CHK);
   1371e:	4c10      	ldr	r4, [pc, #64]	; (13760 <basic_init+0x5c0>)
   13720:	6820      	ldr	r0, [r4, #0]
   13722:	89a2      	ldrh	r2, [r4, #12]
   13724:	f240 1129 	movw	r1, #297	; 0x129
   13728:	3008      	adds	r0, #8
   1372a:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_PR_CHK);
   1372c:	6826      	ldr	r6, [r4, #0]
   1372e:	3608      	adds	r6, #8
   13730:	2133      	movs	r1, #51	; 0x33
   13732:	89a0      	ldrh	r0, [r4, #12]
   13734:	4b0f      	ldr	r3, [pc, #60]	; (13774 <basic_init+0x5d4>)
   13736:	4798      	blx	r3
   13738:	4602      	mov	r2, r0
   1373a:	f241 1129 	movw	r1, #4393	; 0x1129
   1373e:	4630      	mov	r0, r6
   13740:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_DIS);
   13742:	6820      	ldr	r0, [r4, #0]
   13744:	3008      	adds	r0, #8
   13746:	6a23      	ldr	r3, [r4, #32]
   13748:	f013 0f02 	tst.w	r3, #2
   1374c:	f040 8527 	bne.w	1419e <basic_init+0xffe>
   13750:	230b      	movs	r3, #11
   13752:	2118      	movs	r1, #24
   13754:	240e      	movs	r4, #14
   13756:	e00f      	b.n	13778 <basic_init+0x5d8>
   13758:	000101bd 	.word	0x000101bd
   1375c:	00006039 	.word	0x00006039
   13760:	2000abd4 	.word	0x2000abd4
   13764:	000101d9 	.word	0x000101d9
   13768:	00013181 	.word	0x00013181
   1376c:	00005f11 	.word	0x00005f11
   13770:	00006161 	.word	0x00006161
   13774:	00010e03 	.word	0x00010e03
   13778:	f04f 0200 	mov.w	r2, #0
   1377c:	f364 0204 	bfi	r2, r4, #0, #5
   13780:	f361 124a 	bfi	r2, r1, #5, #6
   13784:	f363 22cf 	bfi	r2, r3, #11, #5
   13788:	f242 0129 	movw	r1, #8233	; 0x2029
   1378c:	4ebb      	ldr	r6, [pc, #748]	; (13a7c <basic_init+0x8dc>)
   1378e:	47b0      	blx	r6
    lv_style_set_border_width(&styles->bg_click, LV_STATE_CHECKED, 0);
   13790:	4dbb      	ldr	r5, [pc, #748]	; (13a80 <basic_init+0x8e0>)
   13792:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   13794:	2200      	movs	r2, #0
   13796:	f44f 7198 	mov.w	r1, #304	; 0x130
   1379a:	3008      	adds	r0, #8
   1379c:	4bb9      	ldr	r3, [pc, #740]	; (13a84 <basic_init+0x8e4>)
   1379e:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_FOCUSED | LV_STATE_PRESSED, lv_color_darken(theme.color_primary,
   137a0:	682c      	ldr	r4, [r5, #0]
   137a2:	3408      	adds	r4, #8
   137a4:	2133      	movs	r1, #51	; 0x33
   137a6:	89a8      	ldrh	r0, [r5, #12]
   137a8:	4bb7      	ldr	r3, [pc, #732]	; (13a88 <basic_init+0x8e8>)
   137aa:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   137ac:	4602      	mov	r2, r0
   137ae:	f241 2139 	movw	r1, #4665	; 0x1239
   137b2:	4620      	mov	r0, r4
   137b4:	47b0      	blx	r6
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_BORDER_PR);
   137b6:	6828      	ldr	r0, [r5, #0]
   137b8:	3008      	adds	r0, #8
   137ba:	6a2b      	ldr	r3, [r5, #32]
   137bc:	f013 0f02 	tst.w	r3, #2
   137c0:	f040 84f2 	bne.w	141a8 <basic_init+0x1008>
   137c4:	230b      	movs	r3, #11
   137c6:	2119      	movs	r1, #25
   137c8:	240d      	movs	r4, #13
   137ca:	f04f 0200 	mov.w	r2, #0
   137ce:	f364 0204 	bfi	r2, r4, #0, #5
   137d2:	f361 124a 	bfi	r2, r1, #5, #6
   137d6:	f363 22cf 	bfi	r2, r3, #11, #5
   137da:	f241 0139 	movw	r1, #4153	; 0x1039
   137de:	4ba7      	ldr	r3, [pc, #668]	; (13a7c <basic_init+0x8dc>)
   137e0:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_BORDER_CHK);
   137e2:	4ba7      	ldr	r3, [pc, #668]	; (13a80 <basic_init+0x8e0>)
   137e4:	6818      	ldr	r0, [r3, #0]
   137e6:	6a1b      	ldr	r3, [r3, #32]
   137e8:	f013 0302 	ands.w	r3, r3, #2
   137ec:	bf14      	ite	ne
   137ee:	2107      	movne	r1, #7
   137f0:	210b      	moveq	r1, #11
   137f2:	2b00      	cmp	r3, #0
   137f4:	bf15      	itete	ne
   137f6:	240f      	movne	r4, #15
   137f8:	2419      	moveq	r4, #25
   137fa:	2308      	movne	r3, #8
   137fc:	230d      	moveq	r3, #13
   137fe:	f04f 0200 	mov.w	r2, #0
   13802:	f363 0204 	bfi	r2, r3, #0, #5
   13806:	f364 124a 	bfi	r2, r4, #5, #6
   1380a:	f361 22cf 	bfi	r2, r1, #11, #5
   1380e:	f240 1139 	movw	r1, #313	; 0x139
   13812:	3008      	adds	r0, #8
   13814:	4b99      	ldr	r3, [pc, #612]	; (13a7c <basic_init+0x8dc>)
   13816:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_BORDER_CHK_PR);
   13818:	4b99      	ldr	r3, [pc, #612]	; (13a80 <basic_init+0x8e0>)
   1381a:	6818      	ldr	r0, [r3, #0]
   1381c:	6a1b      	ldr	r3, [r3, #32]
   1381e:	f013 0302 	ands.w	r3, r3, #2
   13822:	bf14      	ite	ne
   13824:	2107      	movne	r1, #7
   13826:	210b      	moveq	r1, #11
   13828:	2b00      	cmp	r3, #0
   1382a:	bf15      	itete	ne
   1382c:	240f      	movne	r4, #15
   1382e:	2419      	moveq	r4, #25
   13830:	2308      	movne	r3, #8
   13832:	230d      	moveq	r3, #13
   13834:	f04f 0200 	mov.w	r2, #0
   13838:	f363 0204 	bfi	r2, r3, #0, #5
   1383c:	f364 124a 	bfi	r2, r4, #5, #6
   13840:	f361 22cf 	bfi	r2, r1, #11, #5
   13844:	f241 1139 	movw	r1, #4409	; 0x1139
   13848:	3008      	adds	r0, #8
   1384a:	4b8c      	ldr	r3, [pc, #560]	; (13a7c <basic_init+0x8dc>)
   1384c:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_BORDER_DIS);
   1384e:	4b8c      	ldr	r3, [pc, #560]	; (13a80 <basic_init+0x8e0>)
   13850:	6818      	ldr	r0, [r3, #0]
   13852:	6a1b      	ldr	r3, [r3, #32]
   13854:	f013 0302 	ands.w	r3, r3, #2
   13858:	bf14      	ite	ne
   1385a:	211a      	movne	r1, #26
   1385c:	210b      	moveq	r1, #11
   1385e:	2b00      	cmp	r3, #0
   13860:	bf15      	itete	ne
   13862:	2437      	movne	r4, #55	; 0x37
   13864:	2419      	moveq	r4, #25
   13866:	231c      	movne	r3, #28
   13868:	230d      	moveq	r3, #13
   1386a:	f04f 0200 	mov.w	r2, #0
   1386e:	f363 0204 	bfi	r2, r3, #0, #5
   13872:	f364 124a 	bfi	r2, r4, #5, #6
   13876:	f361 22cf 	bfi	r2, r1, #11, #5
   1387a:	f242 0139 	movw	r1, #8249	; 0x2039
   1387e:	3008      	adds	r0, #8
   13880:	4b7e      	ldr	r3, [pc, #504]	; (13a7c <basic_init+0x8dc>)
   13882:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
   13884:	4b7e      	ldr	r3, [pc, #504]	; (13a80 <basic_init+0x8e0>)
   13886:	6818      	ldr	r0, [r3, #0]
   13888:	3008      	adds	r0, #8
   1388a:	6a1b      	ldr	r3, [r3, #32]
   1388c:	f013 0f02 	tst.w	r3, #2
   13890:	f040 848f 	bne.w	141b2 <basic_init+0x1012>
   13894:	231f      	movs	r3, #31
   13896:	213f      	movs	r1, #63	; 0x3f
   13898:	461c      	mov	r4, r3
   1389a:	f04f 0200 	mov.w	r2, #0
   1389e:	f364 0204 	bfi	r2, r4, #0, #5
   138a2:	f361 124a 	bfi	r2, r1, #5, #6
   138a6:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   138aa:	f249 0189 	movw	r1, #37001	; 0x9089
   138ae:	4d73      	ldr	r5, [pc, #460]	; (13a7c <basic_init+0x8dc>)
   138b0:	47a8      	blx	r5
    lv_style_set_text_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
   138b2:	4c73      	ldr	r4, [pc, #460]	; (13a80 <basic_init+0x8e0>)
   138b4:	6820      	ldr	r0, [r4, #0]
   138b6:	f04f 32ff 	mov.w	r2, #4294967295
   138ba:	f248 1189 	movw	r1, #33161	; 0x8189
   138be:	3008      	adds	r0, #8
   138c0:	47a8      	blx	r5
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
   138c2:	6820      	ldr	r0, [r4, #0]
   138c4:	f04f 32ff 	mov.w	r2, #4294967295
   138c8:	f249 1189 	movw	r1, #37257	; 0x9189
   138cc:	3008      	adds	r0, #8
   138ce:	47a8      	blx	r5
    lv_style_set_text_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
   138d0:	6820      	ldr	r0, [r4, #0]
   138d2:	6a23      	ldr	r3, [r4, #32]
   138d4:	f013 0302 	ands.w	r3, r3, #2
   138d8:	bf14      	ite	ne
   138da:	212a      	movne	r1, #42	; 0x2a
   138dc:	2126      	moveq	r1, #38	; 0x26
   138de:	2b00      	cmp	r3, #0
   138e0:	bf14      	ite	ne
   138e2:	2315      	movne	r3, #21
   138e4:	2313      	moveq	r3, #19
   138e6:	f04f 0200 	mov.w	r2, #0
   138ea:	f363 0204 	bfi	r2, r3, #0, #5
   138ee:	f361 124a 	bfi	r2, r1, #5, #6
   138f2:	f363 22cf 	bfi	r2, r3, #11, #5
   138f6:	f24a 0189 	movw	r1, #41097	; 0xa089
   138fa:	3008      	adds	r0, #8
   138fc:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
   138fe:	6820      	ldr	r0, [r4, #0]
   13900:	3008      	adds	r0, #8
   13902:	6a23      	ldr	r3, [r4, #32]
   13904:	f013 0f02 	tst.w	r3, #2
   13908:	f040 8458 	bne.w	141bc <basic_init+0x101c>
   1390c:	231f      	movs	r3, #31
   1390e:	213f      	movs	r1, #63	; 0x3f
   13910:	461c      	mov	r4, r3
   13912:	f04f 0200 	mov.w	r2, #0
   13916:	f364 0204 	bfi	r2, r4, #0, #5
   1391a:	f361 124a 	bfi	r2, r1, #5, #6
   1391e:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   13922:	f249 01a9 	movw	r1, #37033	; 0x90a9
   13926:	4d55      	ldr	r5, [pc, #340]	; (13a7c <basic_init+0x8dc>)
   13928:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
   1392a:	4c55      	ldr	r4, [pc, #340]	; (13a80 <basic_init+0x8e0>)
   1392c:	6820      	ldr	r0, [r4, #0]
   1392e:	f04f 32ff 	mov.w	r2, #4294967295
   13932:	f248 11a9 	movw	r1, #33193	; 0x81a9
   13936:	3008      	adds	r0, #8
   13938:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
   1393a:	6820      	ldr	r0, [r4, #0]
   1393c:	f04f 32ff 	mov.w	r2, #4294967295
   13940:	f249 11a9 	movw	r1, #37289	; 0x91a9
   13944:	3008      	adds	r0, #8
   13946:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
   13948:	6820      	ldr	r0, [r4, #0]
   1394a:	6a23      	ldr	r3, [r4, #32]
   1394c:	f013 0302 	ands.w	r3, r3, #2
   13950:	bf14      	ite	ne
   13952:	212a      	movne	r1, #42	; 0x2a
   13954:	2126      	moveq	r1, #38	; 0x26
   13956:	2b00      	cmp	r3, #0
   13958:	bf14      	ite	ne
   1395a:	2315      	movne	r3, #21
   1395c:	2313      	moveq	r3, #19
   1395e:	f04f 0200 	mov.w	r2, #0
   13962:	f363 0204 	bfi	r2, r3, #0, #5
   13966:	f361 124a 	bfi	r2, r1, #5, #6
   1396a:	f363 22cf 	bfi	r2, r3, #11, #5
   1396e:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
   13972:	3008      	adds	r0, #8
   13974:	47a8      	blx	r5
    lv_style_set_transition_prop_5(&styles->bg_click, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
   13976:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
   13978:	2229      	movs	r2, #41	; 0x29
   1397a:	21b6      	movs	r1, #182	; 0xb6
   1397c:	3008      	adds	r0, #8
   1397e:	4d41      	ldr	r5, [pc, #260]	; (13a84 <basic_init+0x8e4>)
   13980:	47a8      	blx	r5
    style_init_reset(&styles->btn);
   13982:	6820      	ldr	r0, [r4, #0]
   13984:	3010      	adds	r0, #16
   13986:	4b41      	ldr	r3, [pc, #260]	; (13a8c <basic_init+0x8ec>)
   13988:	4798      	blx	r3
    lv_style_set_radius(&styles->btn, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   1398a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   1398c:	f647 72ff 	movw	r2, #32767	; 0x7fff
   13990:	2101      	movs	r1, #1
   13992:	3010      	adds	r0, #16
   13994:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_COVER);
   13996:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   13998:	22ff      	movs	r2, #255	; 0xff
   1399a:	212c      	movs	r1, #44	; 0x2c
   1399c:	3010      	adds	r0, #16
   1399e:	4b3c      	ldr	r3, [pc, #240]	; (13a90 <basic_init+0x8f0>)
   139a0:	4798      	blx	r3
    lv_style_set_bg_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN);
   139a2:	6820      	ldr	r0, [r4, #0]
   139a4:	3010      	adds	r0, #16
   139a6:	6a23      	ldr	r3, [r4, #32]
   139a8:	f013 0f02 	tst.w	r3, #2
   139ac:	f040 840b 	bne.w	141c6 <basic_init+0x1026>
   139b0:	230b      	movs	r3, #11
   139b2:	2118      	movs	r1, #24
   139b4:	240e      	movs	r4, #14
   139b6:	f04f 0200 	mov.w	r2, #0
   139ba:	f364 0204 	bfi	r2, r4, #0, #5
   139be:	f361 124a 	bfi	r2, r1, #5, #6
   139c2:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   139c6:	2129      	movs	r1, #41	; 0x29
   139c8:	4b2c      	ldr	r3, [pc, #176]	; (13a7c <basic_init+0x8dc>)
   139ca:	4798      	blx	r3
    lv_style_set_bg_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_PR);
   139cc:	4b2c      	ldr	r3, [pc, #176]	; (13a80 <basic_init+0x8e0>)
   139ce:	6818      	ldr	r0, [r3, #0]
   139d0:	3010      	adds	r0, #16
   139d2:	6a1b      	ldr	r3, [r3, #32]
   139d4:	f013 0f02 	tst.w	r3, #2
   139d8:	f000 83fa 	beq.w	141d0 <basic_init+0x1030>
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
   139dc:	4928      	ldr	r1, [pc, #160]	; (13a80 <basic_init+0x8e0>)
   139de:	7b4b      	ldrb	r3, [r1, #13]
   139e0:	08db      	lsrs	r3, r3, #3
   139e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   139e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   139ea:	f641 35da 	movw	r5, #7130	; 0x1bda
   139ee:	442b      	add	r3, r5
   139f0:	eb03 2203 	add.w	r2, r3, r3, lsl #8
   139f4:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
   139f8:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
   139fc:	898a      	ldrh	r2, [r1, #12]
   139fe:	f3c2 1245 	ubfx	r2, r2, #5, #6
   13a02:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   13a06:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   13a0a:	f502 5262 	add.w	r2, r2, #14464	; 0x3880
   13a0e:	321a      	adds	r2, #26
   13a10:	eb02 2402 	add.w	r4, r2, r2, lsl #8
   13a14:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
   13a18:	f3c2 54c5 	ubfx	r4, r2, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
   13a1c:	7b09      	ldrb	r1, [r1, #12]
   13a1e:	f001 011f 	and.w	r1, r1, #31
   13a22:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   13a26:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   13a2a:	4429      	add	r1, r5
   13a2c:	eb01 2201 	add.w	r2, r1, r1, lsl #8
   13a30:	eb01 11c2 	add.w	r1, r1, r2, lsl #7
   13a34:	f3c1 51c4 	ubfx	r1, r1, #23, #5
   13a38:	f04f 0200 	mov.w	r2, #0
   13a3c:	f361 0204 	bfi	r2, r1, #0, #5
   13a40:	f364 124a 	bfi	r2, r4, #5, #6
   13a44:	f363 22cf 	bfi	r2, r3, #11, #5
   13a48:	f241 0129 	movw	r1, #4137	; 0x1029
   13a4c:	4d0b      	ldr	r5, [pc, #44]	; (13a7c <basic_init+0x8dc>)
   13a4e:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED, COLOR_BTN_CHK);
   13a50:	4c0b      	ldr	r4, [pc, #44]	; (13a80 <basic_init+0x8e0>)
   13a52:	6820      	ldr	r0, [r4, #0]
   13a54:	89a2      	ldrh	r2, [r4, #12]
   13a56:	f240 1129 	movw	r1, #297	; 0x129
   13a5a:	3010      	adds	r0, #16
   13a5c:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, COLOR_BTN_CHK_PR);
   13a5e:	6826      	ldr	r6, [r4, #0]
   13a60:	3610      	adds	r6, #16
   13a62:	214c      	movs	r1, #76	; 0x4c
   13a64:	89a0      	ldrh	r0, [r4, #12]
   13a66:	4b08      	ldr	r3, [pc, #32]	; (13a88 <basic_init+0x8e8>)
   13a68:	4798      	blx	r3
   13a6a:	4602      	mov	r2, r0
   13a6c:	f241 1129 	movw	r1, #4393	; 0x1129
   13a70:	4630      	mov	r0, r6
   13a72:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN);
   13a74:	6820      	ldr	r0, [r4, #0]
   13a76:	3010      	adds	r0, #16
   13a78:	6a23      	ldr	r3, [r4, #32]
   13a7a:	e00b      	b.n	13a94 <basic_init+0x8f4>
   13a7c:	00006161 	.word	0x00006161
   13a80:	2000abd4 	.word	0x2000abd4
   13a84:	00006039 	.word	0x00006039
   13a88:	00010e03 	.word	0x00010e03
   13a8c:	00013181 	.word	0x00013181
   13a90:	00006289 	.word	0x00006289
   13a94:	f013 0f02 	tst.w	r3, #2
   13a98:	f040 83c3 	bne.w	14222 <basic_init+0x1082>
   13a9c:	230b      	movs	r3, #11
   13a9e:	2118      	movs	r1, #24
   13aa0:	240e      	movs	r4, #14
   13aa2:	f04f 0200 	mov.w	r2, #0
   13aa6:	f364 0204 	bfi	r2, r4, #0, #5
   13aaa:	f361 124a 	bfi	r2, r1, #5, #6
   13aae:	f363 22cf 	bfi	r2, r3, #11, #5
   13ab2:	f242 0129 	movw	r1, #8233	; 0x2029
   13ab6:	4bc6      	ldr	r3, [pc, #792]	; (13dd0 <basic_init+0xc30>)
   13ab8:	4798      	blx	r3
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED | LV_STATE_CHECKED, COLOR_BTN_DIS);
   13aba:	4bc6      	ldr	r3, [pc, #792]	; (13dd4 <basic_init+0xc34>)
   13abc:	6818      	ldr	r0, [r3, #0]
   13abe:	6a1b      	ldr	r3, [r3, #32]
   13ac0:	f013 0302 	ands.w	r3, r3, #2
   13ac4:	bf14      	ite	ne
   13ac6:	2133      	movne	r1, #51	; 0x33
   13ac8:	2122      	moveq	r1, #34	; 0x22
   13aca:	2b00      	cmp	r3, #0
   13acc:	bf14      	ite	ne
   13ace:	2319      	movne	r3, #25
   13ad0:	2311      	moveq	r3, #17
   13ad2:	f04f 0200 	mov.w	r2, #0
   13ad6:	f363 0204 	bfi	r2, r3, #0, #5
   13ada:	f361 124a 	bfi	r2, r1, #5, #6
   13ade:	f363 22cf 	bfi	r2, r3, #11, #5
   13ae2:	f242 1129 	movw	r1, #8489	; 0x2129
   13ae6:	3010      	adds	r0, #16
   13ae8:	4db9      	ldr	r5, [pc, #740]	; (13dd0 <basic_init+0xc30>)
   13aea:	47a8      	blx	r5
    lv_style_set_border_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN_BORDER);
   13aec:	4cb9      	ldr	r4, [pc, #740]	; (13dd4 <basic_init+0xc34>)
   13aee:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   13af0:	89a2      	ldrh	r2, [r4, #12]
   13af2:	2139      	movs	r1, #57	; 0x39
   13af4:	3010      	adds	r0, #16
   13af6:	47a8      	blx	r5
    lv_style_set_border_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_BORDER_PR);
   13af8:	6820      	ldr	r0, [r4, #0]
   13afa:	89a2      	ldrh	r2, [r4, #12]
   13afc:	f241 0139 	movw	r1, #4153	; 0x1039
   13b00:	3010      	adds	r0, #16
   13b02:	47a8      	blx	r5
    lv_style_set_border_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN_BORDER_INA);
   13b04:	6820      	ldr	r0, [r4, #0]
   13b06:	6a23      	ldr	r3, [r4, #32]
   13b08:	f013 0302 	ands.w	r3, r3, #2
   13b0c:	bf14      	ite	ne
   13b0e:	2122      	movne	r1, #34	; 0x22
   13b10:	2110      	moveq	r1, #16
   13b12:	2b00      	cmp	r3, #0
   13b14:	bf14      	ite	ne
   13b16:	2311      	movne	r3, #17
   13b18:	2308      	moveq	r3, #8
   13b1a:	f04f 0200 	mov.w	r2, #0
   13b1e:	f363 0204 	bfi	r2, r3, #0, #5
   13b22:	f361 124a 	bfi	r2, r1, #5, #6
   13b26:	f363 22cf 	bfi	r2, r3, #11, #5
   13b2a:	f242 0139 	movw	r1, #8249	; 0x2039
   13b2e:	3010      	adds	r0, #16
   13b30:	47a8      	blx	r5
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
   13b32:	6824      	ldr	r4, [r4, #0]
   13b34:	3410      	adds	r4, #16
   13b36:	2000      	movs	r0, #0
   13b38:	4ba7      	ldr	r3, [pc, #668]	; (13dd8 <basic_init+0xc38>)
   13b3a:	4798      	blx	r3
   13b3c:	3028      	adds	r0, #40	; 0x28
   13b3e:	0040      	lsls	r0, r0, #1
   13b40:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   13b44:	f080 8371 	bcs.w	1422a <basic_init+0x108a>
   13b48:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   13b4a:	2130      	movs	r1, #48	; 0x30
   13b4c:	4620      	mov	r0, r4
   13b4e:	4ba3      	ldr	r3, [pc, #652]	; (13ddc <basic_init+0xc3c>)
   13b50:	4798      	blx	r3
    lv_style_set_border_opa(&styles->btn, LV_STATE_CHECKED, LV_OPA_TRANSP);
   13b52:	4ca0      	ldr	r4, [pc, #640]	; (13dd4 <basic_init+0xc34>)
   13b54:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
   13b56:	2200      	movs	r2, #0
   13b58:	f44f 719e 	mov.w	r1, #316	; 0x13c
   13b5c:	3010      	adds	r0, #16
   13b5e:	4ba0      	ldr	r3, [pc, #640]	; (13de0 <basic_init+0xc40>)
   13b60:	4798      	blx	r3
    lv_style_set_text_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
   13b62:	6820      	ldr	r0, [r4, #0]
   13b64:	3010      	adds	r0, #16
   13b66:	6a23      	ldr	r3, [r4, #32]
   13b68:	f013 0f02 	tst.w	r3, #2
   13b6c:	f040 8369 	bne.w	14242 <basic_init+0x10a2>
   13b70:	231f      	movs	r3, #31
   13b72:	213f      	movs	r1, #63	; 0x3f
   13b74:	461c      	mov	r4, r3
   13b76:	f04f 0200 	mov.w	r2, #0
   13b7a:	f364 0204 	bfi	r2, r4, #0, #5
   13b7e:	f361 124a 	bfi	r2, r1, #5, #6
   13b82:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   13b86:	f248 0189 	movw	r1, #32905	; 0x8089
   13b8a:	4b91      	ldr	r3, [pc, #580]	; (13dd0 <basic_init+0xc30>)
   13b8c:	4798      	blx	r3
    lv_style_set_text_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
   13b8e:	4b91      	ldr	r3, [pc, #580]	; (13dd4 <basic_init+0xc34>)
   13b90:	6818      	ldr	r0, [r3, #0]
   13b92:	3010      	adds	r0, #16
   13b94:	6a1b      	ldr	r3, [r3, #32]
   13b96:	f013 0f02 	tst.w	r3, #2
   13b9a:	f040 8356 	bne.w	1424a <basic_init+0x10aa>
   13b9e:	231f      	movs	r3, #31
   13ba0:	213f      	movs	r1, #63	; 0x3f
   13ba2:	461c      	mov	r4, r3
   13ba4:	f04f 0200 	mov.w	r2, #0
   13ba8:	f364 0204 	bfi	r2, r4, #0, #5
   13bac:	f361 124a 	bfi	r2, r1, #5, #6
   13bb0:	f363 22cf 	bfi	r2, r3, #11, #5
   13bb4:	f249 0189 	movw	r1, #37001	; 0x9089
   13bb8:	4c85      	ldr	r4, [pc, #532]	; (13dd0 <basic_init+0xc30>)
   13bba:	47a0      	blx	r4
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
   13bbc:	4d85      	ldr	r5, [pc, #532]	; (13dd4 <basic_init+0xc34>)
   13bbe:	6828      	ldr	r0, [r5, #0]
   13bc0:	f04f 32ff 	mov.w	r2, #4294967295
   13bc4:	f248 1189 	movw	r1, #33161	; 0x8189
   13bc8:	3010      	adds	r0, #16
   13bca:	47a0      	blx	r4
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
   13bcc:	6828      	ldr	r0, [r5, #0]
   13bce:	f04f 32ff 	mov.w	r2, #4294967295
   13bd2:	f249 1189 	movw	r1, #37257	; 0x9189
   13bd6:	3010      	adds	r0, #16
   13bd8:	47a0      	blx	r4
    lv_style_set_text_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
   13bda:	6828      	ldr	r0, [r5, #0]
   13bdc:	2311      	movs	r3, #17
   13bde:	f04f 0200 	mov.w	r2, #0
   13be2:	f363 0204 	bfi	r2, r3, #0, #5
   13be6:	2122      	movs	r1, #34	; 0x22
   13be8:	f361 124a 	bfi	r2, r1, #5, #6
   13bec:	f363 22cf 	bfi	r2, r3, #11, #5
   13bf0:	f24a 0189 	movw	r1, #41097	; 0xa089
   13bf4:	3010      	adds	r0, #16
   13bf6:	47a0      	blx	r4
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
   13bf8:	6828      	ldr	r0, [r5, #0]
   13bfa:	3010      	adds	r0, #16
   13bfc:	6a2b      	ldr	r3, [r5, #32]
   13bfe:	f013 0f02 	tst.w	r3, #2
   13c02:	f040 8326 	bne.w	14252 <basic_init+0x10b2>
   13c06:	231f      	movs	r3, #31
   13c08:	213f      	movs	r1, #63	; 0x3f
   13c0a:	461c      	mov	r4, r3
   13c0c:	f04f 0200 	mov.w	r2, #0
   13c10:	f364 0204 	bfi	r2, r4, #0, #5
   13c14:	f361 124a 	bfi	r2, r1, #5, #6
   13c18:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   13c1c:	f248 01a9 	movw	r1, #32937	; 0x80a9
   13c20:	4b6b      	ldr	r3, [pc, #428]	; (13dd0 <basic_init+0xc30>)
   13c22:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
   13c24:	4b6b      	ldr	r3, [pc, #428]	; (13dd4 <basic_init+0xc34>)
   13c26:	6818      	ldr	r0, [r3, #0]
   13c28:	3010      	adds	r0, #16
   13c2a:	6a1b      	ldr	r3, [r3, #32]
   13c2c:	f013 0f02 	tst.w	r3, #2
   13c30:	f040 8313 	bne.w	1425a <basic_init+0x10ba>
   13c34:	231f      	movs	r3, #31
   13c36:	213f      	movs	r1, #63	; 0x3f
   13c38:	461c      	mov	r4, r3
   13c3a:	f04f 0200 	mov.w	r2, #0
   13c3e:	f364 0204 	bfi	r2, r4, #0, #5
   13c42:	f361 124a 	bfi	r2, r1, #5, #6
   13c46:	f363 22cf 	bfi	r2, r3, #11, #5
   13c4a:	f249 01a9 	movw	r1, #37033	; 0x90a9
   13c4e:	4c60      	ldr	r4, [pc, #384]	; (13dd0 <basic_init+0xc30>)
   13c50:	47a0      	blx	r4
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, lv_color_hex(0xffffff));
   13c52:	4d60      	ldr	r5, [pc, #384]	; (13dd4 <basic_init+0xc34>)
   13c54:	6828      	ldr	r0, [r5, #0]
   13c56:	f04f 32ff 	mov.w	r2, #4294967295
   13c5a:	f249 01a9 	movw	r1, #37033	; 0x90a9
   13c5e:	3010      	adds	r0, #16
   13c60:	47a0      	blx	r4
    lv_style_set_image_recolor(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
   13c62:	6828      	ldr	r0, [r5, #0]
   13c64:	f04f 32ff 	mov.w	r2, #4294967295
   13c68:	f249 11a9 	movw	r1, #37289	; 0x91a9
   13c6c:	3010      	adds	r0, #16
   13c6e:	47a0      	blx	r4
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
   13c70:	6828      	ldr	r0, [r5, #0]
   13c72:	2311      	movs	r3, #17
   13c74:	f04f 0200 	mov.w	r2, #0
   13c78:	f363 0204 	bfi	r2, r3, #0, #5
   13c7c:	2122      	movs	r1, #34	; 0x22
   13c7e:	f361 124a 	bfi	r2, r1, #5, #6
   13c82:	f363 22cf 	bfi	r2, r3, #11, #5
   13c86:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
   13c8a:	3010      	adds	r0, #16
   13c8c:	47a0      	blx	r4
    lv_style_set_value_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
   13c8e:	6828      	ldr	r0, [r5, #0]
   13c90:	3010      	adds	r0, #16
   13c92:	6a2b      	ldr	r3, [r5, #32]
   13c94:	f013 0f02 	tst.w	r3, #2
   13c98:	f040 82e3 	bne.w	14262 <basic_init+0x10c2>
   13c9c:	231f      	movs	r3, #31
   13c9e:	213f      	movs	r1, #63	; 0x3f
   13ca0:	461c      	mov	r4, r3
   13ca2:	f04f 0200 	mov.w	r2, #0
   13ca6:	f364 0204 	bfi	r2, r4, #0, #5
   13caa:	f361 124a 	bfi	r2, r1, #5, #6
   13cae:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   13cb2:	2179      	movs	r1, #121	; 0x79
   13cb4:	4b46      	ldr	r3, [pc, #280]	; (13dd0 <basic_init+0xc30>)
   13cb6:	4798      	blx	r3
    lv_style_set_value_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
   13cb8:	4b46      	ldr	r3, [pc, #280]	; (13dd4 <basic_init+0xc34>)
   13cba:	6818      	ldr	r0, [r3, #0]
   13cbc:	3010      	adds	r0, #16
   13cbe:	6a1b      	ldr	r3, [r3, #32]
   13cc0:	f013 0f02 	tst.w	r3, #2
   13cc4:	f040 82d1 	bne.w	1426a <basic_init+0x10ca>
   13cc8:	231f      	movs	r3, #31
   13cca:	213f      	movs	r1, #63	; 0x3f
   13ccc:	461c      	mov	r4, r3
   13cce:	f04f 0200 	mov.w	r2, #0
   13cd2:	f364 0204 	bfi	r2, r4, #0, #5
   13cd6:	f361 124a 	bfi	r2, r1, #5, #6
   13cda:	f363 22cf 	bfi	r2, r3, #11, #5
   13cde:	f241 0179 	movw	r1, #4217	; 0x1079
   13ce2:	4d3b      	ldr	r5, [pc, #236]	; (13dd0 <basic_init+0xc30>)
   13ce4:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
   13ce6:	4c3b      	ldr	r4, [pc, #236]	; (13dd4 <basic_init+0xc34>)
   13ce8:	6820      	ldr	r0, [r4, #0]
   13cea:	f04f 32ff 	mov.w	r2, #4294967295
   13cee:	f240 1179 	movw	r1, #377	; 0x179
   13cf2:	3010      	adds	r0, #16
   13cf4:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
   13cf6:	6820      	ldr	r0, [r4, #0]
   13cf8:	f04f 32ff 	mov.w	r2, #4294967295
   13cfc:	f241 1179 	movw	r1, #4473	; 0x1179
   13d00:	3010      	adds	r0, #16
   13d02:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
   13d04:	6820      	ldr	r0, [r4, #0]
   13d06:	2311      	movs	r3, #17
   13d08:	f04f 0200 	mov.w	r2, #0
   13d0c:	f363 0204 	bfi	r2, r3, #0, #5
   13d10:	2122      	movs	r1, #34	; 0x22
   13d12:	f361 124a 	bfi	r2, r1, #5, #6
   13d16:	f363 22cf 	bfi	r2, r3, #11, #5
   13d1a:	f242 0179 	movw	r1, #8313	; 0x2079
   13d1e:	3010      	adds	r0, #16
   13d20:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
   13d22:	6824      	ldr	r4, [r4, #0]
   13d24:	3410      	adds	r4, #16
   13d26:	2000      	movs	r0, #0
   13d28:	4b2b      	ldr	r3, [pc, #172]	; (13dd8 <basic_init+0xc38>)
   13d2a:	4798      	blx	r3
   13d2c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   13d30:	00c0      	lsls	r0, r0, #3
   13d32:	3050      	adds	r0, #80	; 0x50
   13d34:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   13d38:	f080 829b 	bcs.w	14272 <basic_init+0x10d2>
   13d3c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   13d3e:	2112      	movs	r1, #18
   13d40:	4620      	mov	r0, r4
   13d42:	4b26      	ldr	r3, [pc, #152]	; (13ddc <basic_init+0xc3c>)
   13d44:	4798      	blx	r3
    lv_style_set_pad_right(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
   13d46:	4b23      	ldr	r3, [pc, #140]	; (13dd4 <basic_init+0xc34>)
   13d48:	681c      	ldr	r4, [r3, #0]
   13d4a:	3410      	adds	r4, #16
   13d4c:	2000      	movs	r0, #0
   13d4e:	4b22      	ldr	r3, [pc, #136]	; (13dd8 <basic_init+0xc38>)
   13d50:	4798      	blx	r3
   13d52:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   13d56:	00c0      	lsls	r0, r0, #3
   13d58:	3050      	adds	r0, #80	; 0x50
   13d5a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   13d5e:	f080 8295 	bcs.w	1428c <basic_init+0x10ec>
   13d62:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   13d64:	2113      	movs	r1, #19
   13d66:	4620      	mov	r0, r4
   13d68:	4b1c      	ldr	r3, [pc, #112]	; (13ddc <basic_init+0xc3c>)
   13d6a:	4798      	blx	r3
    lv_style_set_pad_top(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
   13d6c:	4b19      	ldr	r3, [pc, #100]	; (13dd4 <basic_init+0xc34>)
   13d6e:	681c      	ldr	r4, [r3, #0]
   13d70:	3410      	adds	r4, #16
   13d72:	2000      	movs	r0, #0
   13d74:	4b18      	ldr	r3, [pc, #96]	; (13dd8 <basic_init+0xc38>)
   13d76:	4798      	blx	r3
   13d78:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   13d7c:	3050      	adds	r0, #80	; 0x50
   13d7e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   13d82:	f080 8290 	bcs.w	142a6 <basic_init+0x1106>
   13d86:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   13d88:	2110      	movs	r1, #16
   13d8a:	4620      	mov	r0, r4
   13d8c:	4b13      	ldr	r3, [pc, #76]	; (13ddc <basic_init+0xc3c>)
   13d8e:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
   13d90:	4b10      	ldr	r3, [pc, #64]	; (13dd4 <basic_init+0xc34>)
   13d92:	681c      	ldr	r4, [r3, #0]
   13d94:	3410      	adds	r4, #16
   13d96:	2000      	movs	r0, #0
   13d98:	4b0f      	ldr	r3, [pc, #60]	; (13dd8 <basic_init+0xc38>)
   13d9a:	4798      	blx	r3
   13d9c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   13da0:	3050      	adds	r0, #80	; 0x50
   13da2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   13da6:	f080 828b 	bcs.w	142c0 <basic_init+0x1120>
   13daa:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   13dac:	2111      	movs	r1, #17
   13dae:	4620      	mov	r0, r4
   13db0:	4b0a      	ldr	r3, [pc, #40]	; (13ddc <basic_init+0xc3c>)
   13db2:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->btn, LV_STATE_DEFAULT, LV_DPX(20));
   13db4:	4b07      	ldr	r3, [pc, #28]	; (13dd4 <basic_init+0xc34>)
   13db6:	681c      	ldr	r4, [r3, #0]
   13db8:	3410      	adds	r4, #16
   13dba:	2000      	movs	r0, #0
   13dbc:	4b06      	ldr	r3, [pc, #24]	; (13dd8 <basic_init+0xc38>)
   13dbe:	4798      	blx	r3
   13dc0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   13dc4:	0080      	lsls	r0, r0, #2
   13dc6:	3050      	adds	r0, #80	; 0x50
   13dc8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   13dcc:	e00a      	b.n	13de4 <basic_init+0xc44>
   13dce:	bf00      	nop
   13dd0:	00006161 	.word	0x00006161
   13dd4:	2000abd4 	.word	0x2000abd4
   13dd8:	000101bd 	.word	0x000101bd
   13ddc:	00006039 	.word	0x00006039
   13de0:	00006289 	.word	0x00006289
   13de4:	f080 8279 	bcs.w	142da <basic_init+0x113a>
   13de8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   13dea:	2114      	movs	r1, #20
   13dec:	4620      	mov	r0, r4
   13dee:	4dc4      	ldr	r5, [pc, #784]	; (14100 <basic_init+0xf60>)
   13df0:	47a8      	blx	r5
    lv_style_set_outline_width(&styles->btn, LV_STATE_DEFAULT, 3);
   13df2:	4cc4      	ldr	r4, [pc, #784]	; (14104 <basic_init+0xf64>)
   13df4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
   13df6:	2203      	movs	r2, #3
   13df8:	2140      	movs	r1, #64	; 0x40
   13dfa:	3010      	adds	r0, #16
   13dfc:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_0);
   13dfe:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
   13e00:	2200      	movs	r2, #0
   13e02:	214c      	movs	r1, #76	; 0x4c
   13e04:	3010      	adds	r0, #16
   13e06:	4ec0      	ldr	r6, [pc, #768]	; (14108 <basic_init+0xf68>)
   13e08:	47b0      	blx	r6
    lv_style_set_outline_opa(&styles->btn, LV_STATE_FOCUSED, LV_OPA_50);
   13e0a:	6820      	ldr	r0, [r4, #0]
   13e0c:	227f      	movs	r2, #127	; 0x7f
   13e0e:	f44f 7113 	mov.w	r1, #588	; 0x24c
   13e12:	3010      	adds	r0, #16
   13e14:	47b0      	blx	r6
    lv_style_set_outline_color(&styles->btn, LV_STATE_DEFAULT, theme.color_primary);
   13e16:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
   13e18:	89a2      	ldrh	r2, [r4, #12]
   13e1a:	2149      	movs	r1, #73	; 0x49
   13e1c:	3010      	adds	r0, #16
   13e1e:	4ebb      	ldr	r6, [pc, #748]	; (1410c <basic_init+0xf6c>)
   13e20:	47b0      	blx	r6
    lv_style_set_outline_color(&styles->btn, LV_STATE_EDITED, theme.color_secondary);
   13e22:	6820      	ldr	r0, [r4, #0]
   13e24:	89e2      	ldrh	r2, [r4, #14]
   13e26:	f240 4149 	movw	r1, #1097	; 0x449
   13e2a:	3010      	adds	r0, #16
   13e2c:	47b0      	blx	r6
    lv_style_set_transition_time(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
   13e2e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
   13e30:	2296      	movs	r2, #150	; 0x96
   13e32:	21b0      	movs	r1, #176	; 0xb0
   13e34:	3010      	adds	r0, #16
   13e36:	47a8      	blx	r5
    lv_style_set_transition_prop_4(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BORDER_OPA);
   13e38:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
   13e3a:	223c      	movs	r2, #60	; 0x3c
   13e3c:	21b5      	movs	r1, #181	; 0xb5
   13e3e:	3010      	adds	r0, #16
   13e40:	47a8      	blx	r5
    lv_style_set_transition_prop_5(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
   13e42:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
   13e44:	2229      	movs	r2, #41	; 0x29
   13e46:	21b6      	movs	r1, #182	; 0xb6
   13e48:	3010      	adds	r0, #16
   13e4a:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
   13e4c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
   13e4e:	224c      	movs	r2, #76	; 0x4c
   13e50:	21b7      	movs	r1, #183	; 0xb7
   13e52:	3010      	adds	r0, #16
   13e54:	47a8      	blx	r5
    lv_style_set_transition_delay(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
   13e56:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
   13e58:	2296      	movs	r2, #150	; 0x96
   13e5a:	21b1      	movs	r1, #177	; 0xb1
   13e5c:	3010      	adds	r0, #16
   13e5e:	47a8      	blx	r5
    lv_style_set_transition_delay(&styles->btn, LV_STATE_PRESSED, 0);
   13e60:	6820      	ldr	r0, [r4, #0]
   13e62:	2200      	movs	r2, #0
   13e64:	f241 01b1 	movw	r1, #4273	; 0x10b1
   13e68:	3010      	adds	r0, #16
   13e6a:	47a8      	blx	r5
    style_init_reset(&styles->pad_inner);
   13e6c:	6820      	ldr	r0, [r4, #0]
   13e6e:	3014      	adds	r0, #20
   13e70:	4ba7      	ldr	r3, [pc, #668]	; (14110 <basic_init+0xf70>)
   13e72:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
   13e74:	6824      	ldr	r4, [r4, #0]
   13e76:	3414      	adds	r4, #20
                           lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(20) : LV_DPX(40));
   13e78:	2000      	movs	r0, #0
   13e7a:	4ba6      	ldr	r3, [pc, #664]	; (14114 <basic_init+0xf74>)
   13e7c:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
   13e7e:	2832      	cmp	r0, #50	; 0x32
   13e80:	f200 8245 	bhi.w	1430e <basic_init+0x116e>
                           lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(20) : LV_DPX(40));
   13e84:	2000      	movs	r0, #0
   13e86:	4ba4      	ldr	r3, [pc, #656]	; (14118 <basic_init+0xf78>)
   13e88:	4798      	blx	r3
   13e8a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   13e8e:	0080      	lsls	r0, r0, #2
   13e90:	3050      	adds	r0, #80	; 0x50
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
   13e92:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   13e96:	f080 822d 	bcs.w	142f4 <basic_init+0x1154>
   13e9a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   13e9c:	2114      	movs	r1, #20
   13e9e:	4620      	mov	r0, r4
   13ea0:	4b97      	ldr	r3, [pc, #604]	; (14100 <basic_init+0xf60>)
   13ea2:	4798      	blx	r3
    style_init_reset(&styles->pad_small);
   13ea4:	4b97      	ldr	r3, [pc, #604]	; (14104 <basic_init+0xf64>)
   13ea6:	6818      	ldr	r0, [r3, #0]
   13ea8:	3018      	adds	r0, #24
   13eaa:	4b99      	ldr	r3, [pc, #612]	; (14110 <basic_init+0xf70>)
   13eac:	4798      	blx	r3
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(10) : LV_DPX(20);
   13eae:	2000      	movs	r0, #0
   13eb0:	4b98      	ldr	r3, [pc, #608]	; (14114 <basic_init+0xf74>)
   13eb2:	4798      	blx	r3
   13eb4:	2832      	cmp	r0, #50	; 0x32
   13eb6:	f200 8250 	bhi.w	1435a <basic_init+0x11ba>
   13eba:	2000      	movs	r0, #0
   13ebc:	4b96      	ldr	r3, [pc, #600]	; (14118 <basic_init+0xf78>)
   13ebe:	4798      	blx	r3
   13ec0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   13ec4:	0040      	lsls	r0, r0, #1
   13ec6:	3050      	adds	r0, #80	; 0x50
   13ec8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   13ecc:	f080 8238 	bcs.w	14340 <basic_init+0x11a0>
   13ed0:	2401      	movs	r4, #1
    lv_style_set_pad_left(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
   13ed2:	4e8c      	ldr	r6, [pc, #560]	; (14104 <basic_init+0xf64>)
   13ed4:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   13ed6:	4622      	mov	r2, r4
   13ed8:	2112      	movs	r1, #18
   13eda:	3018      	adds	r0, #24
   13edc:	4d88      	ldr	r5, [pc, #544]	; (14100 <basic_init+0xf60>)
   13ede:	47a8      	blx	r5
    lv_style_set_pad_right(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
   13ee0:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   13ee2:	4622      	mov	r2, r4
   13ee4:	2113      	movs	r1, #19
   13ee6:	3018      	adds	r0, #24
   13ee8:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
   13eea:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   13eec:	4622      	mov	r2, r4
   13eee:	2110      	movs	r1, #16
   13ef0:	3018      	adds	r0, #24
   13ef2:	47a8      	blx	r5
    lv_style_set_pad_bottom(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
   13ef4:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   13ef6:	4622      	mov	r2, r4
   13ef8:	2111      	movs	r1, #17
   13efa:	3018      	adds	r0, #24
   13efc:	47a8      	blx	r5
    lv_style_set_pad_inner(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
   13efe:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   13f00:	4622      	mov	r2, r4
   13f02:	2114      	movs	r1, #20
   13f04:	3018      	adds	r0, #24
   13f06:	47a8      	blx	r5
   13f08:	bd70      	pop	{r4, r5, r6, pc}
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, LV_DPX(8));
   13f0a:	2000      	movs	r0, #0
   13f0c:	4b82      	ldr	r3, [pc, #520]	; (14118 <basic_init+0xf78>)
   13f0e:	4798      	blx	r3
   13f10:	f100 020a 	add.w	r2, r0, #10
   13f14:	00d2      	lsls	r2, r2, #3
   13f16:	4881      	ldr	r0, [pc, #516]	; (1411c <basic_init+0xf7c>)
   13f18:	fba0 3202 	umull	r3, r2, r0, r2
   13f1c:	f342 12cf 	sbfx	r2, r2, #7, #16
   13f20:	f7ff b9ae 	b.w	13280 <basic_init+0xe0>
   13f24:	231f      	movs	r3, #31
   13f26:	213f      	movs	r1, #63	; 0x3f
   13f28:	461c      	mov	r4, r3
   13f2a:	f7ff b9be 	b.w	132aa <basic_init+0x10a>
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
   13f2e:	2000      	movs	r0, #0
   13f30:	4b79      	ldr	r3, [pc, #484]	; (14118 <basic_init+0xf78>)
   13f32:	4798      	blx	r3
   13f34:	f100 0228 	add.w	r2, r0, #40	; 0x28
   13f38:	0052      	lsls	r2, r2, #1
   13f3a:	4878      	ldr	r0, [pc, #480]	; (1411c <basic_init+0xf7c>)
   13f3c:	fba0 3202 	umull	r3, r2, r0, r2
   13f40:	f342 12cf 	sbfx	r2, r2, #7, #16
   13f44:	f7ff b9ef 	b.w	13326 <basic_init+0x186>
   13f48:	2307      	movs	r3, #7
   13f4a:	210f      	movs	r1, #15
   13f4c:	2408      	movs	r4, #8
   13f4e:	f7ff ba05 	b.w	1335c <basic_init+0x1bc>
   13f52:	2307      	movs	r3, #7
   13f54:	210f      	movs	r1, #15
   13f56:	2408      	movs	r4, #8
   13f58:	f7ff ba1d 	b.w	13396 <basic_init+0x1f6>
   13f5c:	2307      	movs	r3, #7
   13f5e:	210f      	movs	r1, #15
   13f60:	2408      	movs	r4, #8
   13f62:	f7ff ba2e 	b.w	133c2 <basic_init+0x222>
   13f66:	2307      	movs	r3, #7
   13f68:	210f      	movs	r1, #15
   13f6a:	2408      	movs	r4, #8
   13f6c:	f7ff ba40 	b.w	133f0 <basic_init+0x250>
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   13f70:	2000      	movs	r0, #0
   13f72:	4b69      	ldr	r3, [pc, #420]	; (14118 <basic_init+0xf78>)
   13f74:	4798      	blx	r3
   13f76:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   13f7a:	3050      	adds	r0, #80	; 0x50
   13f7c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   13f80:	d202      	bcs.n	13f88 <basic_init+0xde8>
   13f82:	2401      	movs	r4, #1
   13f84:	f7ff ba5a 	b.w	1343c <basic_init+0x29c>
   13f88:	2000      	movs	r0, #0
   13f8a:	4b63      	ldr	r3, [pc, #396]	; (14118 <basic_init+0xf78>)
   13f8c:	4798      	blx	r3
   13f8e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   13f92:	f100 0250 	add.w	r2, r0, #80	; 0x50
   13f96:	4c61      	ldr	r4, [pc, #388]	; (1411c <basic_init+0xf7c>)
   13f98:	fba4 3202 	umull	r3, r2, r4, r2
   13f9c:	f3c2 14cf 	ubfx	r4, r2, #7, #16
   13fa0:	f7ff ba4c 	b.w	1343c <basic_init+0x29c>
   13fa4:	2000      	movs	r0, #0
   13fa6:	4b5c      	ldr	r3, [pc, #368]	; (14118 <basic_init+0xf78>)
   13fa8:	4798      	blx	r3
   13faa:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   13fae:	0042      	lsls	r2, r0, #1
   13fb0:	3250      	adds	r2, #80	; 0x50
   13fb2:	4c5a      	ldr	r4, [pc, #360]	; (1411c <basic_init+0xf7c>)
   13fb4:	fba4 3202 	umull	r3, r2, r4, r2
   13fb8:	f3c2 14cf 	ubfx	r4, r2, #7, #16
   13fbc:	f7ff ba3e 	b.w	1343c <basic_init+0x29c>
   13fc0:	2000      	movs	r0, #0
   13fc2:	4b55      	ldr	r3, [pc, #340]	; (14118 <basic_init+0xf78>)
   13fc4:	4798      	blx	r3
   13fc6:	f100 0228 	add.w	r2, r0, #40	; 0x28
   13fca:	0052      	lsls	r2, r2, #1
   13fcc:	4853      	ldr	r0, [pc, #332]	; (1411c <basic_init+0xf7c>)
   13fce:	fba0 3202 	umull	r3, r2, r0, r2
   13fd2:	f3c2 12cf 	ubfx	r2, r2, #7, #16
   13fd6:	f7ff ba3b 	b.w	13450 <basic_init+0x2b0>
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   13fda:	2000      	movs	r0, #0
   13fdc:	4b4e      	ldr	r3, [pc, #312]	; (14118 <basic_init+0xf78>)
   13fde:	4798      	blx	r3
   13fe0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   13fe4:	3050      	adds	r0, #80	; 0x50
   13fe6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   13fea:	d202      	bcs.n	13ff2 <basic_init+0xe52>
   13fec:	2401      	movs	r4, #1
   13fee:	f7ff ba5b 	b.w	134a8 <basic_init+0x308>
   13ff2:	2000      	movs	r0, #0
   13ff4:	4b48      	ldr	r3, [pc, #288]	; (14118 <basic_init+0xf78>)
   13ff6:	4798      	blx	r3
   13ff8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   13ffc:	f100 0250 	add.w	r2, r0, #80	; 0x50
   14000:	4c46      	ldr	r4, [pc, #280]	; (1411c <basic_init+0xf7c>)
   14002:	fba4 3202 	umull	r3, r2, r4, r2
   14006:	f3c2 14cf 	ubfx	r4, r2, #7, #16
   1400a:	f7ff ba4d 	b.w	134a8 <basic_init+0x308>
   1400e:	2000      	movs	r0, #0
   14010:	4b41      	ldr	r3, [pc, #260]	; (14118 <basic_init+0xf78>)
   14012:	4798      	blx	r3
   14014:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   14018:	0042      	lsls	r2, r0, #1
   1401a:	3250      	adds	r2, #80	; 0x50
   1401c:	4c3f      	ldr	r4, [pc, #252]	; (1411c <basic_init+0xf7c>)
   1401e:	fba4 3202 	umull	r3, r2, r4, r2
   14022:	f3c2 14cf 	ubfx	r4, r2, #7, #16
   14026:	f7ff ba3f 	b.w	134a8 <basic_init+0x308>
   1402a:	2000      	movs	r0, #0
   1402c:	4b3a      	ldr	r3, [pc, #232]	; (14118 <basic_init+0xf78>)
   1402e:	4798      	blx	r3
   14030:	f100 0228 	add.w	r2, r0, #40	; 0x28
   14034:	0052      	lsls	r2, r2, #1
   14036:	4839      	ldr	r0, [pc, #228]	; (1411c <basic_init+0xf7c>)
   14038:	fba0 3202 	umull	r3, r2, r0, r2
   1403c:	f3c2 12cf 	ubfx	r2, r2, #7, #16
   14040:	f7ff ba3c 	b.w	134bc <basic_init+0x31c>
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   14044:	2000      	movs	r0, #0
   14046:	4b34      	ldr	r3, [pc, #208]	; (14118 <basic_init+0xf78>)
   14048:	4798      	blx	r3
   1404a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1404e:	3050      	adds	r0, #80	; 0x50
   14050:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14054:	d202      	bcs.n	1405c <basic_init+0xebc>
   14056:	2401      	movs	r4, #1
   14058:	f7ff ba4b 	b.w	134f2 <basic_init+0x352>
   1405c:	2000      	movs	r0, #0
   1405e:	4b2e      	ldr	r3, [pc, #184]	; (14118 <basic_init+0xf78>)
   14060:	4798      	blx	r3
   14062:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   14066:	f100 0250 	add.w	r2, r0, #80	; 0x50
   1406a:	4c2c      	ldr	r4, [pc, #176]	; (1411c <basic_init+0xf7c>)
   1406c:	fba4 3202 	umull	r3, r2, r4, r2
   14070:	f3c2 14cf 	ubfx	r4, r2, #7, #16
   14074:	f7ff ba3d 	b.w	134f2 <basic_init+0x352>
   14078:	2000      	movs	r0, #0
   1407a:	4b27      	ldr	r3, [pc, #156]	; (14118 <basic_init+0xf78>)
   1407c:	4798      	blx	r3
   1407e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   14082:	0042      	lsls	r2, r0, #1
   14084:	3250      	adds	r2, #80	; 0x50
   14086:	4c25      	ldr	r4, [pc, #148]	; (1411c <basic_init+0xf7c>)
   14088:	fba4 3202 	umull	r3, r2, r4, r2
   1408c:	f3c2 14cf 	ubfx	r4, r2, #7, #16
   14090:	f7ff ba2f 	b.w	134f2 <basic_init+0x352>
   14094:	2000      	movs	r0, #0
   14096:	4b20      	ldr	r3, [pc, #128]	; (14118 <basic_init+0xf78>)
   14098:	4798      	blx	r3
   1409a:	f100 0228 	add.w	r2, r0, #40	; 0x28
   1409e:	0052      	lsls	r2, r2, #1
   140a0:	481e      	ldr	r0, [pc, #120]	; (1411c <basic_init+0xf7c>)
   140a2:	fba0 3202 	umull	r3, r2, r0, r2
   140a6:	f3c2 12cf 	ubfx	r2, r2, #7, #16
   140aa:	f7ff ba2c 	b.w	13506 <basic_init+0x366>
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   140ae:	2000      	movs	r0, #0
   140b0:	4b19      	ldr	r3, [pc, #100]	; (14118 <basic_init+0xf78>)
   140b2:	4798      	blx	r3
   140b4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   140b8:	3050      	adds	r0, #80	; 0x50
   140ba:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   140be:	d202      	bcs.n	140c6 <basic_init+0xf26>
   140c0:	2401      	movs	r4, #1
   140c2:	f7ff ba3b 	b.w	1353c <basic_init+0x39c>
   140c6:	2000      	movs	r0, #0
   140c8:	4b13      	ldr	r3, [pc, #76]	; (14118 <basic_init+0xf78>)
   140ca:	4798      	blx	r3
   140cc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   140d0:	f100 0250 	add.w	r2, r0, #80	; 0x50
   140d4:	4c11      	ldr	r4, [pc, #68]	; (1411c <basic_init+0xf7c>)
   140d6:	fba4 3202 	umull	r3, r2, r4, r2
   140da:	f3c2 14cf 	ubfx	r4, r2, #7, #16
   140de:	f7ff ba2d 	b.w	1353c <basic_init+0x39c>
   140e2:	2000      	movs	r0, #0
   140e4:	4b0c      	ldr	r3, [pc, #48]	; (14118 <basic_init+0xf78>)
   140e6:	4798      	blx	r3
   140e8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   140ec:	0042      	lsls	r2, r0, #1
   140ee:	3250      	adds	r2, #80	; 0x50
   140f0:	4c0a      	ldr	r4, [pc, #40]	; (1411c <basic_init+0xf7c>)
   140f2:	fba4 3202 	umull	r3, r2, r4, r2
   140f6:	f3c2 14cf 	ubfx	r4, r2, #7, #16
   140fa:	f7ff ba1f 	b.w	1353c <basic_init+0x39c>
   140fe:	bf00      	nop
   14100:	00006039 	.word	0x00006039
   14104:	2000abd4 	.word	0x2000abd4
   14108:	00006289 	.word	0x00006289
   1410c:	00006161 	.word	0x00006161
   14110:	00013181 	.word	0x00013181
   14114:	000101d9 	.word	0x000101d9
   14118:	000101bd 	.word	0x000101bd
   1411c:	cccccccd 	.word	0xcccccccd
   14120:	2000      	movs	r0, #0
   14122:	4b9a      	ldr	r3, [pc, #616]	; (1438c <basic_init+0x11ec>)
   14124:	4798      	blx	r3
   14126:	f100 0228 	add.w	r2, r0, #40	; 0x28
   1412a:	0052      	lsls	r2, r2, #1
   1412c:	4898      	ldr	r0, [pc, #608]	; (14390 <basic_init+0x11f0>)
   1412e:	fba0 3202 	umull	r3, r2, r0, r2
   14132:	f3c2 12cf 	ubfx	r2, r2, #7, #16
   14136:	f7ff ba0b 	b.w	13550 <basic_init+0x3b0>
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
   1413a:	2000      	movs	r0, #0
   1413c:	4b93      	ldr	r3, [pc, #588]	; (1438c <basic_init+0x11ec>)
   1413e:	4798      	blx	r3
   14140:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   14144:	3050      	adds	r0, #80	; 0x50
   14146:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1414a:	d202      	bcs.n	14152 <basic_init+0xfb2>
   1414c:	2201      	movs	r2, #1
   1414e:	f7ff ba1a 	b.w	13586 <basic_init+0x3e6>
   14152:	2000      	movs	r0, #0
   14154:	4b8d      	ldr	r3, [pc, #564]	; (1438c <basic_init+0x11ec>)
   14156:	4798      	blx	r3
   14158:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1415c:	f100 0250 	add.w	r2, r0, #80	; 0x50
   14160:	488b      	ldr	r0, [pc, #556]	; (14390 <basic_init+0x11f0>)
   14162:	fba0 3202 	umull	r3, r2, r0, r2
   14166:	f342 12cf 	sbfx	r2, r2, #7, #16
   1416a:	f7ff ba0c 	b.w	13586 <basic_init+0x3e6>
   1416e:	2000      	movs	r0, #0
   14170:	4b86      	ldr	r3, [pc, #536]	; (1438c <basic_init+0x11ec>)
   14172:	4798      	blx	r3
   14174:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   14178:	0042      	lsls	r2, r0, #1
   1417a:	3250      	adds	r2, #80	; 0x50
   1417c:	4b84      	ldr	r3, [pc, #528]	; (14390 <basic_init+0x11f0>)
   1417e:	fba3 3202 	umull	r3, r2, r3, r2
   14182:	f342 12cf 	sbfx	r2, r2, #7, #16
   14186:	f7ff b9fe 	b.w	13586 <basic_init+0x3e6>
   1418a:	231b      	movs	r3, #27
   1418c:	2139      	movs	r1, #57	; 0x39
   1418e:	241d      	movs	r4, #29
   14190:	f7ff ba35 	b.w	135fe <basic_init+0x45e>
   14194:	231d      	movs	r3, #29
   14196:	213b      	movs	r1, #59	; 0x3b
   14198:	461c      	mov	r4, r3
   1419a:	f7ff bab4 	b.w	13706 <basic_init+0x566>
   1419e:	231f      	movs	r3, #31
   141a0:	213f      	movs	r1, #63	; 0x3f
   141a2:	461c      	mov	r4, r3
   141a4:	f7ff bae8 	b.w	13778 <basic_init+0x5d8>
   141a8:	2319      	movs	r3, #25
   141aa:	2133      	movs	r1, #51	; 0x33
   141ac:	461c      	mov	r4, r3
   141ae:	f7ff bb0c 	b.w	137ca <basic_init+0x62a>
   141b2:	2307      	movs	r3, #7
   141b4:	210f      	movs	r1, #15
   141b6:	2408      	movs	r4, #8
   141b8:	f7ff bb6f 	b.w	1389a <basic_init+0x6fa>
   141bc:	2307      	movs	r3, #7
   141be:	210f      	movs	r1, #15
   141c0:	2408      	movs	r4, #8
   141c2:	f7ff bba6 	b.w	13912 <basic_init+0x772>
   141c6:	231f      	movs	r3, #31
   141c8:	213f      	movs	r1, #63	; 0x3f
   141ca:	461c      	mov	r4, r3
   141cc:	f7ff bbf3 	b.w	139b6 <basic_init+0x816>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
   141d0:	4d70      	ldr	r5, [pc, #448]	; (14394 <basic_init+0x11f4>)
   141d2:	7b6b      	ldrb	r3, [r5, #13]
   141d4:	08db      	lsrs	r3, r3, #3
   141d6:	214c      	movs	r1, #76	; 0x4c
   141d8:	fb01 f303 	mul.w	r3, r1, r3
   141dc:	f203 73b1 	addw	r3, r3, #1969	; 0x7b1
   141e0:	eb03 2203 	add.w	r2, r3, r3, lsl #8
   141e4:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
   141e8:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
   141ec:	89ac      	ldrh	r4, [r5, #12]
   141ee:	f3c4 1445 	ubfx	r4, r4, #5, #6
   141f2:	f241 02c8 	movw	r2, #4296	; 0x10c8
   141f6:	fb01 2404 	mla	r4, r1, r4, r2
   141fa:	eb04 2204 	add.w	r2, r4, r4, lsl #8
   141fe:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
   14202:	f3c4 54c5 	ubfx	r4, r4, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
   14206:	7b2a      	ldrb	r2, [r5, #12]
   14208:	f002 021f 	and.w	r2, r2, #31
   1420c:	fb01 f102 	mul.w	r1, r1, r2
   14210:	f601 11ca 	addw	r1, r1, #2506	; 0x9ca
   14214:	eb01 2201 	add.w	r2, r1, r1, lsl #8
   14218:	eb01 11c2 	add.w	r1, r1, r2, lsl #7
   1421c:	f3c1 51c4 	ubfx	r1, r1, #23, #5
   14220:	e40a      	b.n	13a38 <basic_init+0x898>
   14222:	231f      	movs	r3, #31
   14224:	213f      	movs	r1, #63	; 0x3f
   14226:	461c      	mov	r4, r3
   14228:	e43b      	b.n	13aa2 <basic_init+0x902>
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
   1422a:	2000      	movs	r0, #0
   1422c:	4b57      	ldr	r3, [pc, #348]	; (1438c <basic_init+0x11ec>)
   1422e:	4798      	blx	r3
   14230:	f100 0228 	add.w	r2, r0, #40	; 0x28
   14234:	0052      	lsls	r2, r2, #1
   14236:	4856      	ldr	r0, [pc, #344]	; (14390 <basic_init+0x11f0>)
   14238:	fba0 3202 	umull	r3, r2, r0, r2
   1423c:	f342 12cf 	sbfx	r2, r2, #7, #16
   14240:	e483      	b.n	13b4a <basic_init+0x9aa>
   14242:	2306      	movs	r3, #6
   14244:	2110      	movs	r1, #16
   14246:	2409      	movs	r4, #9
   14248:	e495      	b.n	13b76 <basic_init+0x9d6>
   1424a:	2306      	movs	r3, #6
   1424c:	2110      	movs	r1, #16
   1424e:	2409      	movs	r4, #9
   14250:	e4a8      	b.n	13ba4 <basic_init+0xa04>
   14252:	2306      	movs	r3, #6
   14254:	2110      	movs	r1, #16
   14256:	2409      	movs	r4, #9
   14258:	e4d8      	b.n	13c0c <basic_init+0xa6c>
   1425a:	2306      	movs	r3, #6
   1425c:	2110      	movs	r1, #16
   1425e:	2409      	movs	r4, #9
   14260:	e4eb      	b.n	13c3a <basic_init+0xa9a>
   14262:	2306      	movs	r3, #6
   14264:	2110      	movs	r1, #16
   14266:	2409      	movs	r4, #9
   14268:	e51b      	b.n	13ca2 <basic_init+0xb02>
   1426a:	2306      	movs	r3, #6
   1426c:	2110      	movs	r1, #16
   1426e:	2409      	movs	r4, #9
   14270:	e52d      	b.n	13cce <basic_init+0xb2e>
    lv_style_set_pad_left(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
   14272:	2000      	movs	r0, #0
   14274:	4b45      	ldr	r3, [pc, #276]	; (1438c <basic_init+0x11ec>)
   14276:	4798      	blx	r3
   14278:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1427c:	00c2      	lsls	r2, r0, #3
   1427e:	3250      	adds	r2, #80	; 0x50
   14280:	4843      	ldr	r0, [pc, #268]	; (14390 <basic_init+0x11f0>)
   14282:	fba0 3202 	umull	r3, r2, r0, r2
   14286:	f342 12cf 	sbfx	r2, r2, #7, #16
   1428a:	e558      	b.n	13d3e <basic_init+0xb9e>
    lv_style_set_pad_right(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
   1428c:	2000      	movs	r0, #0
   1428e:	4b3f      	ldr	r3, [pc, #252]	; (1438c <basic_init+0x11ec>)
   14290:	4798      	blx	r3
   14292:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14296:	00c2      	lsls	r2, r0, #3
   14298:	3250      	adds	r2, #80	; 0x50
   1429a:	483d      	ldr	r0, [pc, #244]	; (14390 <basic_init+0x11f0>)
   1429c:	fba0 3202 	umull	r3, r2, r0, r2
   142a0:	f342 12cf 	sbfx	r2, r2, #7, #16
   142a4:	e55e      	b.n	13d64 <basic_init+0xbc4>
    lv_style_set_pad_top(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
   142a6:	2000      	movs	r0, #0
   142a8:	4b38      	ldr	r3, [pc, #224]	; (1438c <basic_init+0x11ec>)
   142aa:	4798      	blx	r3
   142ac:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   142b0:	f100 0250 	add.w	r2, r0, #80	; 0x50
   142b4:	4836      	ldr	r0, [pc, #216]	; (14390 <basic_init+0x11f0>)
   142b6:	fba0 3202 	umull	r3, r2, r0, r2
   142ba:	f342 12cf 	sbfx	r2, r2, #7, #16
   142be:	e563      	b.n	13d88 <basic_init+0xbe8>
    lv_style_set_pad_bottom(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
   142c0:	2000      	movs	r0, #0
   142c2:	4b32      	ldr	r3, [pc, #200]	; (1438c <basic_init+0x11ec>)
   142c4:	4798      	blx	r3
   142c6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   142ca:	f100 0250 	add.w	r2, r0, #80	; 0x50
   142ce:	4830      	ldr	r0, [pc, #192]	; (14390 <basic_init+0x11f0>)
   142d0:	fba0 3202 	umull	r3, r2, r0, r2
   142d4:	f342 12cf 	sbfx	r2, r2, #7, #16
   142d8:	e568      	b.n	13dac <basic_init+0xc0c>
    lv_style_set_pad_inner(&styles->btn, LV_STATE_DEFAULT, LV_DPX(20));
   142da:	2000      	movs	r0, #0
   142dc:	4b2b      	ldr	r3, [pc, #172]	; (1438c <basic_init+0x11ec>)
   142de:	4798      	blx	r3
   142e0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   142e4:	0082      	lsls	r2, r0, #2
   142e6:	3250      	adds	r2, #80	; 0x50
   142e8:	4829      	ldr	r0, [pc, #164]	; (14390 <basic_init+0x11f0>)
   142ea:	fba0 3202 	umull	r3, r2, r0, r2
   142ee:	f342 12cf 	sbfx	r2, r2, #7, #16
   142f2:	e57a      	b.n	13dea <basic_init+0xc4a>
                           lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(20) : LV_DPX(40));
   142f4:	2000      	movs	r0, #0
   142f6:	4b25      	ldr	r3, [pc, #148]	; (1438c <basic_init+0x11ec>)
   142f8:	4798      	blx	r3
   142fa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   142fe:	0082      	lsls	r2, r0, #2
   14300:	3250      	adds	r2, #80	; 0x50
   14302:	4b23      	ldr	r3, [pc, #140]	; (14390 <basic_init+0x11f0>)
   14304:	fba3 3202 	umull	r3, r2, r3, r2
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
   14308:	f342 12cf 	sbfx	r2, r2, #7, #16
   1430c:	e5c6      	b.n	13e9c <basic_init+0xcfc>
                           lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(20) : LV_DPX(40));
   1430e:	2000      	movs	r0, #0
   14310:	4b1e      	ldr	r3, [pc, #120]	; (1438c <basic_init+0x11ec>)
   14312:	4798      	blx	r3
   14314:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14318:	00c0      	lsls	r0, r0, #3
   1431a:	3050      	adds	r0, #80	; 0x50
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
   1431c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14320:	d201      	bcs.n	14326 <basic_init+0x1186>
   14322:	2201      	movs	r2, #1
   14324:	e5ba      	b.n	13e9c <basic_init+0xcfc>
                           lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(20) : LV_DPX(40));
   14326:	2000      	movs	r0, #0
   14328:	4b18      	ldr	r3, [pc, #96]	; (1438c <basic_init+0x11ec>)
   1432a:	4798      	blx	r3
   1432c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14330:	00c2      	lsls	r2, r0, #3
   14332:	3250      	adds	r2, #80	; 0x50
   14334:	4b16      	ldr	r3, [pc, #88]	; (14390 <basic_init+0x11f0>)
   14336:	fba3 3202 	umull	r3, r2, r3, r2
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
   1433a:	f342 12cf 	sbfx	r2, r2, #7, #16
   1433e:	e5ad      	b.n	13e9c <basic_init+0xcfc>
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(10) : LV_DPX(20);
   14340:	2000      	movs	r0, #0
   14342:	4b12      	ldr	r3, [pc, #72]	; (1438c <basic_init+0x11ec>)
   14344:	4798      	blx	r3
   14346:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1434a:	0044      	lsls	r4, r0, #1
   1434c:	3450      	adds	r4, #80	; 0x50
   1434e:	4b10      	ldr	r3, [pc, #64]	; (14390 <basic_init+0x11f0>)
   14350:	fba3 3404 	umull	r3, r4, r3, r4
   14354:	f344 14cf 	sbfx	r4, r4, #7, #16
   14358:	e5bb      	b.n	13ed2 <basic_init+0xd32>
   1435a:	2000      	movs	r0, #0
   1435c:	4b0b      	ldr	r3, [pc, #44]	; (1438c <basic_init+0x11ec>)
   1435e:	4798      	blx	r3
   14360:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14364:	0080      	lsls	r0, r0, #2
   14366:	3050      	adds	r0, #80	; 0x50
   14368:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1436c:	d201      	bcs.n	14372 <basic_init+0x11d2>
   1436e:	2401      	movs	r4, #1
   14370:	e5af      	b.n	13ed2 <basic_init+0xd32>
   14372:	2000      	movs	r0, #0
   14374:	4b05      	ldr	r3, [pc, #20]	; (1438c <basic_init+0x11ec>)
   14376:	4798      	blx	r3
   14378:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1437c:	0084      	lsls	r4, r0, #2
   1437e:	3450      	adds	r4, #80	; 0x50
   14380:	4b03      	ldr	r3, [pc, #12]	; (14390 <basic_init+0x11f0>)
   14382:	fba3 3404 	umull	r3, r4, r3, r4
   14386:	f344 14cf 	sbfx	r4, r4, #7, #16
   1438a:	e5a2      	b.n	13ed2 <basic_init+0xd32>
   1438c:	000101bd 	.word	0x000101bd
   14390:	cccccccd 	.word	0xcccccccd
   14394:	2000abd4 	.word	0x2000abd4

00014398 <bar_init>:
{
   14398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->bar_bg);
   1439a:	4c54      	ldr	r4, [pc, #336]	; (144ec <bar_init+0x154>)
   1439c:	6820      	ldr	r0, [r4, #0]
   1439e:	3024      	adds	r0, #36	; 0x24
   143a0:	4b53      	ldr	r3, [pc, #332]	; (144f0 <bar_init+0x158>)
   143a2:	4798      	blx	r3
    lv_style_set_radius(&styles->bar_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   143a4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   143a6:	f647 72ff 	movw	r2, #32767	; 0x7fff
   143aa:	2101      	movs	r1, #1
   143ac:	3024      	adds	r0, #36	; 0x24
   143ae:	4b51      	ldr	r3, [pc, #324]	; (144f4 <bar_init+0x15c>)
   143b0:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
   143b2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   143b4:	22ff      	movs	r2, #255	; 0xff
   143b6:	212c      	movs	r1, #44	; 0x2c
   143b8:	3024      	adds	r0, #36	; 0x24
   143ba:	4b4f      	ldr	r3, [pc, #316]	; (144f8 <bar_init+0x160>)
   143bc:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bar_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
   143be:	6820      	ldr	r0, [r4, #0]
   143c0:	6a23      	ldr	r3, [r4, #32]
   143c2:	f013 0302 	ands.w	r3, r3, #2
   143c6:	bf14      	ite	ne
   143c8:	211a      	movne	r1, #26
   143ca:	2108      	moveq	r1, #8
   143cc:	2b00      	cmp	r3, #0
   143ce:	bf15      	itete	ne
   143d0:	2435      	movne	r4, #53	; 0x35
   143d2:	2412      	moveq	r4, #18
   143d4:	231b      	movne	r3, #27
   143d6:	2309      	moveq	r3, #9
   143d8:	f04f 0200 	mov.w	r2, #0
   143dc:	f363 0204 	bfi	r2, r3, #0, #5
   143e0:	f364 124a 	bfi	r2, r4, #5, #6
   143e4:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   143e8:	2129      	movs	r1, #41	; 0x29
   143ea:	3024      	adds	r0, #36	; 0x24
   143ec:	4b43      	ldr	r3, [pc, #268]	; (144fc <bar_init+0x164>)
   143ee:	4798      	blx	r3
    lv_style_set_value_color(&styles->bar_bg, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
   143f0:	4b3e      	ldr	r3, [pc, #248]	; (144ec <bar_init+0x154>)
   143f2:	6818      	ldr	r0, [r3, #0]
   143f4:	3024      	adds	r0, #36	; 0x24
   143f6:	6a1b      	ldr	r3, [r3, #32]
   143f8:	f013 0f02 	tst.w	r3, #2
   143fc:	d16d      	bne.n	144da <bar_init+0x142>
   143fe:	231f      	movs	r3, #31
   14400:	213f      	movs	r1, #63	; 0x3f
   14402:	461c      	mov	r4, r3
   14404:	f04f 0200 	mov.w	r2, #0
   14408:	f364 0204 	bfi	r2, r4, #0, #5
   1440c:	f361 124a 	bfi	r2, r1, #5, #6
   14410:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   14414:	2179      	movs	r1, #121	; 0x79
   14416:	4d39      	ldr	r5, [pc, #228]	; (144fc <bar_init+0x164>)
   14418:	47a8      	blx	r5
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_DEFAULT, theme.color_primary);
   1441a:	4c34      	ldr	r4, [pc, #208]	; (144ec <bar_init+0x154>)
   1441c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
   1441e:	89a2      	ldrh	r2, [r4, #12]
   14420:	2149      	movs	r1, #73	; 0x49
   14422:	3024      	adds	r0, #36	; 0x24
   14424:	47a8      	blx	r5
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_EDITED, theme.color_secondary);
   14426:	6820      	ldr	r0, [r4, #0]
   14428:	89e2      	ldrh	r2, [r4, #14]
   1442a:	f240 4149 	movw	r1, #1097	; 0x449
   1442e:	3024      	adds	r0, #36	; 0x24
   14430:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
   14432:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
   14434:	2200      	movs	r2, #0
   14436:	214c      	movs	r1, #76	; 0x4c
   14438:	3024      	adds	r0, #36	; 0x24
   1443a:	4f2f      	ldr	r7, [pc, #188]	; (144f8 <bar_init+0x160>)
   1443c:	47b8      	blx	r7
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_FOCUSED, LV_OPA_50);
   1443e:	6820      	ldr	r0, [r4, #0]
   14440:	227f      	movs	r2, #127	; 0x7f
   14442:	f44f 7113 	mov.w	r1, #588	; 0x24c
   14446:	3024      	adds	r0, #36	; 0x24
   14448:	47b8      	blx	r7
    lv_style_set_outline_width(&styles->bar_bg, LV_STATE_DEFAULT, 3);
   1444a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
   1444c:	2203      	movs	r2, #3
   1444e:	2140      	movs	r1, #64	; 0x40
   14450:	3024      	adds	r0, #36	; 0x24
   14452:	4e28      	ldr	r6, [pc, #160]	; (144f4 <bar_init+0x15c>)
   14454:	47b0      	blx	r6
    lv_style_set_transition_time(&styles->bar_bg, LV_STATE_DEFAULT, TRANSITION_TIME);
   14456:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
   14458:	2296      	movs	r2, #150	; 0x96
   1445a:	21b0      	movs	r1, #176	; 0xb0
   1445c:	3024      	adds	r0, #36	; 0x24
   1445e:	47b0      	blx	r6
    lv_style_set_transition_prop_6(&styles->bar_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
   14460:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
   14462:	224c      	movs	r2, #76	; 0x4c
   14464:	21b7      	movs	r1, #183	; 0xb7
   14466:	3024      	adds	r0, #36	; 0x24
   14468:	47b0      	blx	r6
    style_init_reset(&styles->bar_indic);
   1446a:	6820      	ldr	r0, [r4, #0]
   1446c:	3028      	adds	r0, #40	; 0x28
   1446e:	4b20      	ldr	r3, [pc, #128]	; (144f0 <bar_init+0x158>)
   14470:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->bar_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
   14472:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   14474:	22ff      	movs	r2, #255	; 0xff
   14476:	212c      	movs	r1, #44	; 0x2c
   14478:	3028      	adds	r0, #40	; 0x28
   1447a:	47b8      	blx	r7
    lv_style_set_radius(&styles->bar_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   1447c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   1447e:	f647 72ff 	movw	r2, #32767	; 0x7fff
   14482:	2101      	movs	r1, #1
   14484:	3028      	adds	r0, #40	; 0x28
   14486:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DEFAULT, theme.color_primary);
   14488:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   1448a:	89a2      	ldrh	r2, [r4, #12]
   1448c:	2129      	movs	r1, #41	; 0x29
   1448e:	3028      	adds	r0, #40	; 0x28
   14490:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DISABLED, lv_color_hex3(0x888));
   14492:	6820      	ldr	r0, [r4, #0]
   14494:	2311      	movs	r3, #17
   14496:	f04f 0200 	mov.w	r2, #0
   1449a:	f363 0204 	bfi	r2, r3, #0, #5
   1449e:	2122      	movs	r1, #34	; 0x22
   144a0:	f361 124a 	bfi	r2, r1, #5, #6
   144a4:	f363 22cf 	bfi	r2, r3, #11, #5
   144a8:	f242 0129 	movw	r1, #8233	; 0x2029
   144ac:	3028      	adds	r0, #40	; 0x28
   144ae:	47a8      	blx	r5
    lv_style_set_value_color(&styles->bar_indic, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x41404f) : LV_COLOR_WHITE);
   144b0:	6820      	ldr	r0, [r4, #0]
   144b2:	3028      	adds	r0, #40	; 0x28
   144b4:	6a23      	ldr	r3, [r4, #32]
   144b6:	f013 0f02 	tst.w	r3, #2
   144ba:	d112      	bne.n	144e2 <bar_init+0x14a>
   144bc:	231f      	movs	r3, #31
   144be:	213f      	movs	r1, #63	; 0x3f
   144c0:	461c      	mov	r4, r3
   144c2:	f04f 0200 	mov.w	r2, #0
   144c6:	f364 0204 	bfi	r2, r4, #0, #5
   144ca:	f361 124a 	bfi	r2, r1, #5, #6
   144ce:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   144d2:	2179      	movs	r1, #121	; 0x79
   144d4:	4b09      	ldr	r3, [pc, #36]	; (144fc <bar_init+0x164>)
   144d6:	4798      	blx	r3
   144d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   144da:	2306      	movs	r3, #6
   144dc:	2110      	movs	r1, #16
   144de:	2409      	movs	r4, #9
   144e0:	e790      	b.n	14404 <bar_init+0x6c>
   144e2:	2308      	movs	r3, #8
   144e4:	2110      	movs	r1, #16
   144e6:	2409      	movs	r4, #9
   144e8:	e7eb      	b.n	144c2 <bar_init+0x12a>
   144ea:	bf00      	nop
   144ec:	2000abd4 	.word	0x2000abd4
   144f0:	00013181 	.word	0x00013181
   144f4:	00006039 	.word	0x00006039
   144f8:	00006289 	.word	0x00006289
   144fc:	00006161 	.word	0x00006161

00014500 <slider_init>:
{
   14500:	b510      	push	{r4, lr}
    style_init_reset(&styles->slider_knob);
   14502:	4c9a      	ldr	r4, [pc, #616]	; (1476c <slider_init+0x26c>)
   14504:	6820      	ldr	r0, [r4, #0]
   14506:	3090      	adds	r0, #144	; 0x90
   14508:	4b99      	ldr	r3, [pc, #612]	; (14770 <slider_init+0x270>)
   1450a:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->slider_knob, LV_STATE_DEFAULT, LV_OPA_COVER);
   1450c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   1450e:	22ff      	movs	r2, #255	; 0xff
   14510:	212c      	movs	r1, #44	; 0x2c
   14512:	3090      	adds	r0, #144	; 0x90
   14514:	4b97      	ldr	r3, [pc, #604]	; (14774 <slider_init+0x274>)
   14516:	4798      	blx	r3
    lv_style_set_bg_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? theme.color_primary : LV_COLOR_WHITE);
   14518:	6820      	ldr	r0, [r4, #0]
   1451a:	3090      	adds	r0, #144	; 0x90
   1451c:	6a23      	ldr	r3, [r4, #32]
   1451e:	f013 0f02 	tst.w	r3, #2
   14522:	bf19      	ittee	ne
   14524:	4623      	movne	r3, r4
   14526:	899a      	ldrhne	r2, [r3, #12]
   14528:	4b93      	ldreq	r3, [pc, #588]	; (14778 <slider_init+0x278>)
   1452a:	881a      	ldrheq	r2, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   1452c:	2129      	movs	r1, #41	; 0x29
   1452e:	4b93      	ldr	r3, [pc, #588]	; (1477c <slider_init+0x27c>)
   14530:	4798      	blx	r3
    lv_style_set_value_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
   14532:	4b8e      	ldr	r3, [pc, #568]	; (1476c <slider_init+0x26c>)
   14534:	6818      	ldr	r0, [r3, #0]
   14536:	3090      	adds	r0, #144	; 0x90
   14538:	6a1b      	ldr	r3, [r3, #32]
   1453a:	f013 0f02 	tst.w	r3, #2
   1453e:	f040 80a9 	bne.w	14694 <slider_init+0x194>
   14542:	231f      	movs	r3, #31
   14544:	213f      	movs	r1, #63	; 0x3f
   14546:	461c      	mov	r4, r3
   14548:	f04f 0200 	mov.w	r2, #0
   1454c:	f364 0204 	bfi	r2, r4, #0, #5
   14550:	f361 124a 	bfi	r2, r1, #5, #6
   14554:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   14558:	2179      	movs	r1, #121	; 0x79
   1455a:	4b88      	ldr	r3, [pc, #544]	; (1477c <slider_init+0x27c>)
   1455c:	4798      	blx	r3
    lv_style_set_radius(&styles->slider_knob, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   1455e:	4c83      	ldr	r4, [pc, #524]	; (1476c <slider_init+0x26c>)
   14560:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   14562:	f647 72ff 	movw	r2, #32767	; 0x7fff
   14566:	2101      	movs	r1, #1
   14568:	3090      	adds	r0, #144	; 0x90
   1456a:	4b85      	ldr	r3, [pc, #532]	; (14780 <slider_init+0x280>)
   1456c:	4798      	blx	r3
    lv_style_set_pad_left(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
   1456e:	6824      	ldr	r4, [r4, #0]
   14570:	3490      	adds	r4, #144	; 0x90
   14572:	2000      	movs	r0, #0
   14574:	4b83      	ldr	r3, [pc, #524]	; (14784 <slider_init+0x284>)
   14576:	4798      	blx	r3
   14578:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1457c:	3050      	adds	r0, #80	; 0x50
   1457e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14582:	f080 808b 	bcs.w	1469c <slider_init+0x19c>
   14586:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   14588:	2112      	movs	r1, #18
   1458a:	4620      	mov	r0, r4
   1458c:	4b7c      	ldr	r3, [pc, #496]	; (14780 <slider_init+0x280>)
   1458e:	4798      	blx	r3
    lv_style_set_pad_right(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
   14590:	4b76      	ldr	r3, [pc, #472]	; (1476c <slider_init+0x26c>)
   14592:	681c      	ldr	r4, [r3, #0]
   14594:	3490      	adds	r4, #144	; 0x90
   14596:	2000      	movs	r0, #0
   14598:	4b7a      	ldr	r3, [pc, #488]	; (14784 <slider_init+0x284>)
   1459a:	4798      	blx	r3
   1459c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   145a0:	3050      	adds	r0, #80	; 0x50
   145a2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   145a6:	f080 8086 	bcs.w	146b6 <slider_init+0x1b6>
   145aa:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   145ac:	2113      	movs	r1, #19
   145ae:	4620      	mov	r0, r4
   145b0:	4b73      	ldr	r3, [pc, #460]	; (14780 <slider_init+0x280>)
   145b2:	4798      	blx	r3
    lv_style_set_pad_top(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
   145b4:	4b6d      	ldr	r3, [pc, #436]	; (1476c <slider_init+0x26c>)
   145b6:	681c      	ldr	r4, [r3, #0]
   145b8:	3490      	adds	r4, #144	; 0x90
   145ba:	2000      	movs	r0, #0
   145bc:	4b71      	ldr	r3, [pc, #452]	; (14784 <slider_init+0x284>)
   145be:	4798      	blx	r3
   145c0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   145c4:	3050      	adds	r0, #80	; 0x50
   145c6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   145ca:	f080 8081 	bcs.w	146d0 <slider_init+0x1d0>
   145ce:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   145d0:	2110      	movs	r1, #16
   145d2:	4620      	mov	r0, r4
   145d4:	4b6a      	ldr	r3, [pc, #424]	; (14780 <slider_init+0x280>)
   145d6:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
   145d8:	4b64      	ldr	r3, [pc, #400]	; (1476c <slider_init+0x26c>)
   145da:	681c      	ldr	r4, [r3, #0]
   145dc:	3490      	adds	r4, #144	; 0x90
   145de:	2000      	movs	r0, #0
   145e0:	4b68      	ldr	r3, [pc, #416]	; (14784 <slider_init+0x284>)
   145e2:	4798      	blx	r3
   145e4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   145e8:	3050      	adds	r0, #80	; 0x50
   145ea:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   145ee:	d27c      	bcs.n	146ea <slider_init+0x1ea>
   145f0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   145f2:	2111      	movs	r1, #17
   145f4:	4620      	mov	r0, r4
   145f6:	4b62      	ldr	r3, [pc, #392]	; (14780 <slider_init+0x280>)
   145f8:	4798      	blx	r3
    style_init_reset(&styles->slider_bg);
   145fa:	4c5c      	ldr	r4, [pc, #368]	; (1476c <slider_init+0x26c>)
   145fc:	6820      	ldr	r0, [r4, #0]
   145fe:	3094      	adds	r0, #148	; 0x94
   14600:	4b5b      	ldr	r3, [pc, #364]	; (14770 <slider_init+0x270>)
   14602:	4798      	blx	r3
    lv_style_set_margin_left(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
   14604:	6824      	ldr	r4, [r4, #0]
   14606:	3494      	adds	r4, #148	; 0x94
   14608:	2000      	movs	r0, #0
   1460a:	4b5e      	ldr	r3, [pc, #376]	; (14784 <slider_init+0x284>)
   1460c:	4798      	blx	r3
   1460e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14612:	0040      	lsls	r0, r0, #1
   14614:	3050      	adds	r0, #80	; 0x50
   14616:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1461a:	d273      	bcs.n	14704 <slider_init+0x204>
   1461c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
   1461e:	2117      	movs	r1, #23
   14620:	4620      	mov	r0, r4
   14622:	4b57      	ldr	r3, [pc, #348]	; (14780 <slider_init+0x280>)
   14624:	4798      	blx	r3
    lv_style_set_margin_right(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
   14626:	4b51      	ldr	r3, [pc, #324]	; (1476c <slider_init+0x26c>)
   14628:	681c      	ldr	r4, [r3, #0]
   1462a:	3494      	adds	r4, #148	; 0x94
   1462c:	2000      	movs	r0, #0
   1462e:	4b55      	ldr	r3, [pc, #340]	; (14784 <slider_init+0x284>)
   14630:	4798      	blx	r3
   14632:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14636:	0040      	lsls	r0, r0, #1
   14638:	3050      	adds	r0, #80	; 0x50
   1463a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1463e:	d26e      	bcs.n	1471e <slider_init+0x21e>
   14640:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
   14642:	2118      	movs	r1, #24
   14644:	4620      	mov	r0, r4
   14646:	4b4e      	ldr	r3, [pc, #312]	; (14780 <slider_init+0x280>)
   14648:	4798      	blx	r3
    lv_style_set_margin_top(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
   1464a:	4b48      	ldr	r3, [pc, #288]	; (1476c <slider_init+0x26c>)
   1464c:	681c      	ldr	r4, [r3, #0]
   1464e:	3494      	adds	r4, #148	; 0x94
   14650:	2000      	movs	r0, #0
   14652:	4b4c      	ldr	r3, [pc, #304]	; (14784 <slider_init+0x284>)
   14654:	4798      	blx	r3
   14656:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1465a:	0040      	lsls	r0, r0, #1
   1465c:	3050      	adds	r0, #80	; 0x50
   1465e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14662:	d269      	bcs.n	14738 <slider_init+0x238>
   14664:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
   14666:	2115      	movs	r1, #21
   14668:	4620      	mov	r0, r4
   1466a:	4b45      	ldr	r3, [pc, #276]	; (14780 <slider_init+0x280>)
   1466c:	4798      	blx	r3
    lv_style_set_margin_bottom(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
   1466e:	4b3f      	ldr	r3, [pc, #252]	; (1476c <slider_init+0x26c>)
   14670:	681c      	ldr	r4, [r3, #0]
   14672:	3494      	adds	r4, #148	; 0x94
   14674:	2000      	movs	r0, #0
   14676:	4b43      	ldr	r3, [pc, #268]	; (14784 <slider_init+0x284>)
   14678:	4798      	blx	r3
   1467a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1467e:	0040      	lsls	r0, r0, #1
   14680:	3050      	adds	r0, #80	; 0x50
   14682:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14686:	d264      	bcs.n	14752 <slider_init+0x252>
   14688:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
   1468a:	2116      	movs	r1, #22
   1468c:	4620      	mov	r0, r4
   1468e:	4b3c      	ldr	r3, [pc, #240]	; (14780 <slider_init+0x280>)
   14690:	4798      	blx	r3
   14692:	bd10      	pop	{r4, pc}
   14694:	2306      	movs	r3, #6
   14696:	2110      	movs	r1, #16
   14698:	2409      	movs	r4, #9
   1469a:	e755      	b.n	14548 <slider_init+0x48>
    lv_style_set_pad_left(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
   1469c:	2000      	movs	r0, #0
   1469e:	4b39      	ldr	r3, [pc, #228]	; (14784 <slider_init+0x284>)
   146a0:	4798      	blx	r3
   146a2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   146a6:	f100 0250 	add.w	r2, r0, #80	; 0x50
   146aa:	4837      	ldr	r0, [pc, #220]	; (14788 <slider_init+0x288>)
   146ac:	fba0 3202 	umull	r3, r2, r0, r2
   146b0:	f342 12cf 	sbfx	r2, r2, #7, #16
   146b4:	e768      	b.n	14588 <slider_init+0x88>
    lv_style_set_pad_right(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
   146b6:	2000      	movs	r0, #0
   146b8:	4b32      	ldr	r3, [pc, #200]	; (14784 <slider_init+0x284>)
   146ba:	4798      	blx	r3
   146bc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   146c0:	f100 0250 	add.w	r2, r0, #80	; 0x50
   146c4:	4830      	ldr	r0, [pc, #192]	; (14788 <slider_init+0x288>)
   146c6:	fba0 3202 	umull	r3, r2, r0, r2
   146ca:	f342 12cf 	sbfx	r2, r2, #7, #16
   146ce:	e76d      	b.n	145ac <slider_init+0xac>
    lv_style_set_pad_top(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
   146d0:	2000      	movs	r0, #0
   146d2:	4b2c      	ldr	r3, [pc, #176]	; (14784 <slider_init+0x284>)
   146d4:	4798      	blx	r3
   146d6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   146da:	f100 0250 	add.w	r2, r0, #80	; 0x50
   146de:	482a      	ldr	r0, [pc, #168]	; (14788 <slider_init+0x288>)
   146e0:	fba0 3202 	umull	r3, r2, r0, r2
   146e4:	f342 12cf 	sbfx	r2, r2, #7, #16
   146e8:	e772      	b.n	145d0 <slider_init+0xd0>
    lv_style_set_pad_bottom(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
   146ea:	2000      	movs	r0, #0
   146ec:	4b25      	ldr	r3, [pc, #148]	; (14784 <slider_init+0x284>)
   146ee:	4798      	blx	r3
   146f0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   146f4:	f100 0250 	add.w	r2, r0, #80	; 0x50
   146f8:	4823      	ldr	r0, [pc, #140]	; (14788 <slider_init+0x288>)
   146fa:	fba0 3202 	umull	r3, r2, r0, r2
   146fe:	f342 12cf 	sbfx	r2, r2, #7, #16
   14702:	e776      	b.n	145f2 <slider_init+0xf2>
    lv_style_set_margin_left(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
   14704:	2000      	movs	r0, #0
   14706:	4b1f      	ldr	r3, [pc, #124]	; (14784 <slider_init+0x284>)
   14708:	4798      	blx	r3
   1470a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1470e:	0042      	lsls	r2, r0, #1
   14710:	3250      	adds	r2, #80	; 0x50
   14712:	481d      	ldr	r0, [pc, #116]	; (14788 <slider_init+0x288>)
   14714:	fba0 3202 	umull	r3, r2, r0, r2
   14718:	f342 12cf 	sbfx	r2, r2, #7, #16
   1471c:	e77f      	b.n	1461e <slider_init+0x11e>
    lv_style_set_margin_right(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
   1471e:	2000      	movs	r0, #0
   14720:	4b18      	ldr	r3, [pc, #96]	; (14784 <slider_init+0x284>)
   14722:	4798      	blx	r3
   14724:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14728:	0042      	lsls	r2, r0, #1
   1472a:	3250      	adds	r2, #80	; 0x50
   1472c:	4816      	ldr	r0, [pc, #88]	; (14788 <slider_init+0x288>)
   1472e:	fba0 3202 	umull	r3, r2, r0, r2
   14732:	f342 12cf 	sbfx	r2, r2, #7, #16
   14736:	e784      	b.n	14642 <slider_init+0x142>
    lv_style_set_margin_top(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
   14738:	2000      	movs	r0, #0
   1473a:	4b12      	ldr	r3, [pc, #72]	; (14784 <slider_init+0x284>)
   1473c:	4798      	blx	r3
   1473e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14742:	0042      	lsls	r2, r0, #1
   14744:	3250      	adds	r2, #80	; 0x50
   14746:	4810      	ldr	r0, [pc, #64]	; (14788 <slider_init+0x288>)
   14748:	fba0 3202 	umull	r3, r2, r0, r2
   1474c:	f342 12cf 	sbfx	r2, r2, #7, #16
   14750:	e789      	b.n	14666 <slider_init+0x166>
    lv_style_set_margin_bottom(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
   14752:	2000      	movs	r0, #0
   14754:	4b0b      	ldr	r3, [pc, #44]	; (14784 <slider_init+0x284>)
   14756:	4798      	blx	r3
   14758:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1475c:	0042      	lsls	r2, r0, #1
   1475e:	3250      	adds	r2, #80	; 0x50
   14760:	4809      	ldr	r0, [pc, #36]	; (14788 <slider_init+0x288>)
   14762:	fba0 3202 	umull	r3, r2, r0, r2
   14766:	f342 12cf 	sbfx	r2, r2, #7, #16
   1476a:	e78e      	b.n	1468a <slider_init+0x18a>
   1476c:	2000abd4 	.word	0x2000abd4
   14770:	00013181 	.word	0x00013181
   14774:	00006289 	.word	0x00006289
   14778:	0001b780 	.word	0x0001b780
   1477c:	00006161 	.word	0x00006161
   14780:	00006039 	.word	0x00006039
   14784:	000101bd 	.word	0x000101bd
   14788:	cccccccd 	.word	0xcccccccd

0001478c <switch_init>:
{
   1478c:	b510      	push	{r4, lr}
    style_init_reset(&styles->sw_knob);
   1478e:	4c48      	ldr	r4, [pc, #288]	; (148b0 <switch_init+0x124>)
   14790:	6820      	ldr	r0, [r4, #0]
   14792:	309c      	adds	r0, #156	; 0x9c
   14794:	4b47      	ldr	r3, [pc, #284]	; (148b4 <switch_init+0x128>)
   14796:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->sw_knob, LV_STATE_DEFAULT, LV_OPA_COVER);
   14798:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   1479a:	22ff      	movs	r2, #255	; 0xff
   1479c:	212c      	movs	r1, #44	; 0x2c
   1479e:	309c      	adds	r0, #156	; 0x9c
   147a0:	4b45      	ldr	r3, [pc, #276]	; (148b8 <switch_init+0x12c>)
   147a2:	4798      	blx	r3
    lv_style_set_bg_color(&styles->sw_knob, LV_STATE_DEFAULT, LV_COLOR_WHITE);
   147a4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   147a6:	4b45      	ldr	r3, [pc, #276]	; (148bc <switch_init+0x130>)
   147a8:	881a      	ldrh	r2, [r3, #0]
   147aa:	2129      	movs	r1, #41	; 0x29
   147ac:	309c      	adds	r0, #156	; 0x9c
   147ae:	4b44      	ldr	r3, [pc, #272]	; (148c0 <switch_init+0x134>)
   147b0:	4798      	blx	r3
    lv_style_set_radius(&styles->sw_knob, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   147b2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   147b4:	f647 72ff 	movw	r2, #32767	; 0x7fff
   147b8:	2101      	movs	r1, #1
   147ba:	309c      	adds	r0, #156	; 0x9c
   147bc:	4b41      	ldr	r3, [pc, #260]	; (148c4 <switch_init+0x138>)
   147be:	4798      	blx	r3
    lv_style_set_pad_top(&styles->sw_knob, LV_STATE_DEFAULT,    - LV_DPX(4));
   147c0:	6824      	ldr	r4, [r4, #0]
   147c2:	349c      	adds	r4, #156	; 0x9c
   147c4:	2000      	movs	r0, #0
   147c6:	4b40      	ldr	r3, [pc, #256]	; (148c8 <switch_init+0x13c>)
   147c8:	4798      	blx	r3
   147ca:	3014      	adds	r0, #20
   147cc:	0080      	lsls	r0, r0, #2
   147ce:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   147d2:	d239      	bcs.n	14848 <switch_init+0xbc>
   147d4:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   147d8:	2110      	movs	r1, #16
   147da:	4620      	mov	r0, r4
   147dc:	4b39      	ldr	r3, [pc, #228]	; (148c4 <switch_init+0x138>)
   147de:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->sw_knob, LV_STATE_DEFAULT, - LV_DPX(4));
   147e0:	4b33      	ldr	r3, [pc, #204]	; (148b0 <switch_init+0x124>)
   147e2:	681c      	ldr	r4, [r3, #0]
   147e4:	349c      	adds	r4, #156	; 0x9c
   147e6:	2000      	movs	r0, #0
   147e8:	4b37      	ldr	r3, [pc, #220]	; (148c8 <switch_init+0x13c>)
   147ea:	4798      	blx	r3
   147ec:	3014      	adds	r0, #20
   147ee:	0080      	lsls	r0, r0, #2
   147f0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   147f4:	d235      	bcs.n	14862 <switch_init+0xd6>
   147f6:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   147fa:	2111      	movs	r1, #17
   147fc:	4620      	mov	r0, r4
   147fe:	4b31      	ldr	r3, [pc, #196]	; (148c4 <switch_init+0x138>)
   14800:	4798      	blx	r3
    lv_style_set_pad_left(&styles->sw_knob, LV_STATE_DEFAULT,   - LV_DPX(4));
   14802:	4b2b      	ldr	r3, [pc, #172]	; (148b0 <switch_init+0x124>)
   14804:	681c      	ldr	r4, [r3, #0]
   14806:	349c      	adds	r4, #156	; 0x9c
   14808:	2000      	movs	r0, #0
   1480a:	4b2f      	ldr	r3, [pc, #188]	; (148c8 <switch_init+0x13c>)
   1480c:	4798      	blx	r3
   1480e:	3014      	adds	r0, #20
   14810:	0080      	lsls	r0, r0, #2
   14812:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14816:	d231      	bcs.n	1487c <switch_init+0xf0>
   14818:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   1481c:	2112      	movs	r1, #18
   1481e:	4620      	mov	r0, r4
   14820:	4b28      	ldr	r3, [pc, #160]	; (148c4 <switch_init+0x138>)
   14822:	4798      	blx	r3
    lv_style_set_pad_right(&styles->sw_knob, LV_STATE_DEFAULT,  - LV_DPX(4));
   14824:	4b22      	ldr	r3, [pc, #136]	; (148b0 <switch_init+0x124>)
   14826:	681c      	ldr	r4, [r3, #0]
   14828:	349c      	adds	r4, #156	; 0x9c
   1482a:	2000      	movs	r0, #0
   1482c:	4b26      	ldr	r3, [pc, #152]	; (148c8 <switch_init+0x13c>)
   1482e:	4798      	blx	r3
   14830:	3014      	adds	r0, #20
   14832:	0080      	lsls	r0, r0, #2
   14834:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14838:	d22d      	bcs.n	14896 <switch_init+0x10a>
   1483a:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   1483e:	2113      	movs	r1, #19
   14840:	4620      	mov	r0, r4
   14842:	4b20      	ldr	r3, [pc, #128]	; (148c4 <switch_init+0x138>)
   14844:	4798      	blx	r3
   14846:	bd10      	pop	{r4, pc}
    lv_style_set_pad_top(&styles->sw_knob, LV_STATE_DEFAULT,    - LV_DPX(4));
   14848:	2000      	movs	r0, #0
   1484a:	4b1f      	ldr	r3, [pc, #124]	; (148c8 <switch_init+0x13c>)
   1484c:	4798      	blx	r3
   1484e:	f100 0214 	add.w	r2, r0, #20
   14852:	0092      	lsls	r2, r2, #2
   14854:	481d      	ldr	r0, [pc, #116]	; (148cc <switch_init+0x140>)
   14856:	fba0 3202 	umull	r3, r2, r0, r2
   1485a:	09d2      	lsrs	r2, r2, #7
   1485c:	4252      	negs	r2, r2
   1485e:	b212      	sxth	r2, r2
   14860:	e7ba      	b.n	147d8 <switch_init+0x4c>
    lv_style_set_pad_bottom(&styles->sw_knob, LV_STATE_DEFAULT, - LV_DPX(4));
   14862:	2000      	movs	r0, #0
   14864:	4b18      	ldr	r3, [pc, #96]	; (148c8 <switch_init+0x13c>)
   14866:	4798      	blx	r3
   14868:	f100 0214 	add.w	r2, r0, #20
   1486c:	0092      	lsls	r2, r2, #2
   1486e:	4817      	ldr	r0, [pc, #92]	; (148cc <switch_init+0x140>)
   14870:	fba0 3202 	umull	r3, r2, r0, r2
   14874:	09d2      	lsrs	r2, r2, #7
   14876:	4252      	negs	r2, r2
   14878:	b212      	sxth	r2, r2
   1487a:	e7be      	b.n	147fa <switch_init+0x6e>
    lv_style_set_pad_left(&styles->sw_knob, LV_STATE_DEFAULT,   - LV_DPX(4));
   1487c:	2000      	movs	r0, #0
   1487e:	4b12      	ldr	r3, [pc, #72]	; (148c8 <switch_init+0x13c>)
   14880:	4798      	blx	r3
   14882:	f100 0214 	add.w	r2, r0, #20
   14886:	0092      	lsls	r2, r2, #2
   14888:	4810      	ldr	r0, [pc, #64]	; (148cc <switch_init+0x140>)
   1488a:	fba0 3202 	umull	r3, r2, r0, r2
   1488e:	09d2      	lsrs	r2, r2, #7
   14890:	4252      	negs	r2, r2
   14892:	b212      	sxth	r2, r2
   14894:	e7c2      	b.n	1481c <switch_init+0x90>
    lv_style_set_pad_right(&styles->sw_knob, LV_STATE_DEFAULT,  - LV_DPX(4));
   14896:	2000      	movs	r0, #0
   14898:	4b0b      	ldr	r3, [pc, #44]	; (148c8 <switch_init+0x13c>)
   1489a:	4798      	blx	r3
   1489c:	f100 0214 	add.w	r2, r0, #20
   148a0:	0092      	lsls	r2, r2, #2
   148a2:	480a      	ldr	r0, [pc, #40]	; (148cc <switch_init+0x140>)
   148a4:	fba0 3202 	umull	r3, r2, r0, r2
   148a8:	09d2      	lsrs	r2, r2, #7
   148aa:	4252      	negs	r2, r2
   148ac:	b212      	sxth	r2, r2
   148ae:	e7c6      	b.n	1483e <switch_init+0xb2>
   148b0:	2000abd4 	.word	0x2000abd4
   148b4:	00013181 	.word	0x00013181
   148b8:	00006289 	.word	0x00006289
   148bc:	0001b780 	.word	0x0001b780
   148c0:	00006161 	.word	0x00006161
   148c4:	00006039 	.word	0x00006039
   148c8:	000101bd 	.word	0x000101bd
   148cc:	cccccccd 	.word	0xcccccccd

000148d0 <linemeter_init>:
{
   148d0:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->lmeter);
   148d2:	4c81      	ldr	r4, [pc, #516]	; (14ad8 <linemeter_init+0x208>)
   148d4:	6820      	ldr	r0, [r4, #0]
   148d6:	3070      	adds	r0, #112	; 0x70
   148d8:	4b80      	ldr	r3, [pc, #512]	; (14adc <linemeter_init+0x20c>)
   148da:	4798      	blx	r3
    lv_style_set_radius(&styles->lmeter, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   148dc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   148de:	f647 72ff 	movw	r2, #32767	; 0x7fff
   148e2:	2101      	movs	r1, #1
   148e4:	3070      	adds	r0, #112	; 0x70
   148e6:	4b7e      	ldr	r3, [pc, #504]	; (14ae0 <linemeter_init+0x210>)
   148e8:	4798      	blx	r3
    lv_style_set_pad_left(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
   148ea:	6824      	ldr	r4, [r4, #0]
   148ec:	3470      	adds	r4, #112	; 0x70
   148ee:	2000      	movs	r0, #0
   148f0:	4b7c      	ldr	r3, [pc, #496]	; (14ae4 <linemeter_init+0x214>)
   148f2:	4798      	blx	r3
   148f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   148f8:	0080      	lsls	r0, r0, #2
   148fa:	3050      	adds	r0, #80	; 0x50
   148fc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14900:	f080 808d 	bcs.w	14a1e <linemeter_init+0x14e>
   14904:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   14906:	2112      	movs	r1, #18
   14908:	4620      	mov	r0, r4
   1490a:	4b75      	ldr	r3, [pc, #468]	; (14ae0 <linemeter_init+0x210>)
   1490c:	4798      	blx	r3
    lv_style_set_pad_right(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
   1490e:	4b72      	ldr	r3, [pc, #456]	; (14ad8 <linemeter_init+0x208>)
   14910:	681c      	ldr	r4, [r3, #0]
   14912:	3470      	adds	r4, #112	; 0x70
   14914:	2000      	movs	r0, #0
   14916:	4b73      	ldr	r3, [pc, #460]	; (14ae4 <linemeter_init+0x214>)
   14918:	4798      	blx	r3
   1491a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1491e:	0080      	lsls	r0, r0, #2
   14920:	3050      	adds	r0, #80	; 0x50
   14922:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14926:	f080 8087 	bcs.w	14a38 <linemeter_init+0x168>
   1492a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   1492c:	2113      	movs	r1, #19
   1492e:	4620      	mov	r0, r4
   14930:	4b6b      	ldr	r3, [pc, #428]	; (14ae0 <linemeter_init+0x210>)
   14932:	4798      	blx	r3
    lv_style_set_pad_top(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
   14934:	4b68      	ldr	r3, [pc, #416]	; (14ad8 <linemeter_init+0x208>)
   14936:	681c      	ldr	r4, [r3, #0]
   14938:	3470      	adds	r4, #112	; 0x70
   1493a:	2000      	movs	r0, #0
   1493c:	4b69      	ldr	r3, [pc, #420]	; (14ae4 <linemeter_init+0x214>)
   1493e:	4798      	blx	r3
   14940:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14944:	0080      	lsls	r0, r0, #2
   14946:	3050      	adds	r0, #80	; 0x50
   14948:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1494c:	f080 8081 	bcs.w	14a52 <linemeter_init+0x182>
   14950:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   14952:	2110      	movs	r1, #16
   14954:	4620      	mov	r0, r4
   14956:	4b62      	ldr	r3, [pc, #392]	; (14ae0 <linemeter_init+0x210>)
   14958:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(30));
   1495a:	4b5f      	ldr	r3, [pc, #380]	; (14ad8 <linemeter_init+0x208>)
   1495c:	681c      	ldr	r4, [r3, #0]
   1495e:	3470      	adds	r4, #112	; 0x70
   14960:	2000      	movs	r0, #0
   14962:	4b60      	ldr	r3, [pc, #384]	; (14ae4 <linemeter_init+0x214>)
   14964:	4798      	blx	r3
   14966:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1496a:	0040      	lsls	r0, r0, #1
   1496c:	3050      	adds	r0, #80	; 0x50
   1496e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14972:	d27b      	bcs.n	14a6c <linemeter_init+0x19c>
   14974:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   14976:	2114      	movs	r1, #20
   14978:	4620      	mov	r0, r4
   1497a:	4b59      	ldr	r3, [pc, #356]	; (14ae0 <linemeter_init+0x210>)
   1497c:	4798      	blx	r3
    lv_style_set_scale_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(25));
   1497e:	4b56      	ldr	r3, [pc, #344]	; (14ad8 <linemeter_init+0x208>)
   14980:	681c      	ldr	r4, [r3, #0]
   14982:	3470      	adds	r4, #112	; 0x70
   14984:	2000      	movs	r0, #0
   14986:	4b57      	ldr	r3, [pc, #348]	; (14ae4 <linemeter_init+0x214>)
   14988:	4798      	blx	r3
   1498a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1498e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14992:	3050      	adds	r0, #80	; 0x50
   14994:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14998:	d275      	bcs.n	14a86 <linemeter_init+0x1b6>
   1499a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr, scalar)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
   1499c:	21c0      	movs	r1, #192	; 0xc0
   1499e:	4620      	mov	r0, r4
   149a0:	4b4f      	ldr	r3, [pc, #316]	; (14ae0 <linemeter_init+0x210>)
   149a2:	4798      	blx	r3
    lv_style_set_line_color(&styles->lmeter, LV_STATE_DEFAULT, theme.color_primary);
   149a4:	4c4c      	ldr	r4, [pc, #304]	; (14ad8 <linemeter_init+0x208>)
   149a6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   149a8:	89a2      	ldrh	r2, [r4, #12]
   149aa:	2199      	movs	r1, #153	; 0x99
   149ac:	3070      	adds	r0, #112	; 0x70
   149ae:	4d4e      	ldr	r5, [pc, #312]	; (14ae8 <linemeter_init+0x218>)
   149b0:	47a8      	blx	r5
    lv_style_set_scale_grad_color(&styles->lmeter, LV_STATE_DEFAULT, theme.color_primary);
   149b2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
   149b4:	89a2      	ldrh	r2, [r4, #12]
   149b6:	21c9      	movs	r1, #201	; 0xc9
   149b8:	3070      	adds	r0, #112	; 0x70
   149ba:	47a8      	blx	r5
    lv_style_set_scale_end_color(&styles->lmeter, LV_STATE_DEFAULT, lv_color_hex3(0x888));
   149bc:	6820      	ldr	r0, [r4, #0]
   149be:	2311      	movs	r3, #17
   149c0:	f04f 0200 	mov.w	r2, #0
   149c4:	f363 0204 	bfi	r2, r3, #0, #5
   149c8:	2122      	movs	r1, #34	; 0x22
   149ca:	f361 124a 	bfi	r2, r1, #5, #6
   149ce:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
   149d2:	21ca      	movs	r1, #202	; 0xca
   149d4:	3070      	adds	r0, #112	; 0x70
   149d6:	47a8      	blx	r5
    lv_style_set_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(10));
   149d8:	6824      	ldr	r4, [r4, #0]
   149da:	3470      	adds	r4, #112	; 0x70
   149dc:	2000      	movs	r0, #0
   149de:	4b41      	ldr	r3, [pc, #260]	; (14ae4 <linemeter_init+0x214>)
   149e0:	4798      	blx	r3
   149e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   149e6:	0040      	lsls	r0, r0, #1
   149e8:	3050      	adds	r0, #80	; 0x50
   149ea:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   149ee:	d259      	bcs.n	14aa4 <linemeter_init+0x1d4>
   149f0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   149f2:	2190      	movs	r1, #144	; 0x90
   149f4:	4620      	mov	r0, r4
   149f6:	4b3a      	ldr	r3, [pc, #232]	; (14ae0 <linemeter_init+0x210>)
   149f8:	4798      	blx	r3
    lv_style_set_scale_end_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(7));
   149fa:	4b37      	ldr	r3, [pc, #220]	; (14ad8 <linemeter_init+0x208>)
   149fc:	681c      	ldr	r4, [r3, #0]
   149fe:	3470      	adds	r4, #112	; 0x70
   14a00:	2000      	movs	r0, #0
   14a02:	4b38      	ldr	r3, [pc, #224]	; (14ae4 <linemeter_init+0x214>)
   14a04:	4798      	blx	r3
   14a06:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   14a0a:	3050      	adds	r0, #80	; 0x50
   14a0c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14a10:	d255      	bcs.n	14abe <linemeter_init+0x1ee>
   14a12:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
   14a14:	21c3      	movs	r1, #195	; 0xc3
   14a16:	4620      	mov	r0, r4
   14a18:	4b31      	ldr	r3, [pc, #196]	; (14ae0 <linemeter_init+0x210>)
   14a1a:	4798      	blx	r3
   14a1c:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_pad_left(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
   14a1e:	2000      	movs	r0, #0
   14a20:	4b30      	ldr	r3, [pc, #192]	; (14ae4 <linemeter_init+0x214>)
   14a22:	4798      	blx	r3
   14a24:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14a28:	0082      	lsls	r2, r0, #2
   14a2a:	3250      	adds	r2, #80	; 0x50
   14a2c:	482f      	ldr	r0, [pc, #188]	; (14aec <linemeter_init+0x21c>)
   14a2e:	fba0 3202 	umull	r3, r2, r0, r2
   14a32:	f342 12cf 	sbfx	r2, r2, #7, #16
   14a36:	e766      	b.n	14906 <linemeter_init+0x36>
    lv_style_set_pad_right(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
   14a38:	2000      	movs	r0, #0
   14a3a:	4b2a      	ldr	r3, [pc, #168]	; (14ae4 <linemeter_init+0x214>)
   14a3c:	4798      	blx	r3
   14a3e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14a42:	0082      	lsls	r2, r0, #2
   14a44:	3250      	adds	r2, #80	; 0x50
   14a46:	4829      	ldr	r0, [pc, #164]	; (14aec <linemeter_init+0x21c>)
   14a48:	fba0 3202 	umull	r3, r2, r0, r2
   14a4c:	f342 12cf 	sbfx	r2, r2, #7, #16
   14a50:	e76c      	b.n	1492c <linemeter_init+0x5c>
    lv_style_set_pad_top(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
   14a52:	2000      	movs	r0, #0
   14a54:	4b23      	ldr	r3, [pc, #140]	; (14ae4 <linemeter_init+0x214>)
   14a56:	4798      	blx	r3
   14a58:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14a5c:	0082      	lsls	r2, r0, #2
   14a5e:	3250      	adds	r2, #80	; 0x50
   14a60:	4822      	ldr	r0, [pc, #136]	; (14aec <linemeter_init+0x21c>)
   14a62:	fba0 3202 	umull	r3, r2, r0, r2
   14a66:	f342 12cf 	sbfx	r2, r2, #7, #16
   14a6a:	e772      	b.n	14952 <linemeter_init+0x82>
    lv_style_set_pad_inner(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(30));
   14a6c:	2000      	movs	r0, #0
   14a6e:	4b1d      	ldr	r3, [pc, #116]	; (14ae4 <linemeter_init+0x214>)
   14a70:	4798      	blx	r3
   14a72:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   14a76:	0042      	lsls	r2, r0, #1
   14a78:	3250      	adds	r2, #80	; 0x50
   14a7a:	481c      	ldr	r0, [pc, #112]	; (14aec <linemeter_init+0x21c>)
   14a7c:	fba0 3202 	umull	r3, r2, r0, r2
   14a80:	f342 12cf 	sbfx	r2, r2, #7, #16
   14a84:	e777      	b.n	14976 <linemeter_init+0xa6>
    lv_style_set_scale_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(25));
   14a86:	2000      	movs	r0, #0
   14a88:	4b16      	ldr	r3, [pc, #88]	; (14ae4 <linemeter_init+0x214>)
   14a8a:	4798      	blx	r3
   14a8c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14a90:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14a94:	f100 0250 	add.w	r2, r0, #80	; 0x50
   14a98:	4814      	ldr	r0, [pc, #80]	; (14aec <linemeter_init+0x21c>)
   14a9a:	fba0 3202 	umull	r3, r2, r0, r2
   14a9e:	f342 12cf 	sbfx	r2, r2, #7, #16
   14aa2:	e77b      	b.n	1499c <linemeter_init+0xcc>
    lv_style_set_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(10));
   14aa4:	2000      	movs	r0, #0
   14aa6:	4b0f      	ldr	r3, [pc, #60]	; (14ae4 <linemeter_init+0x214>)
   14aa8:	4798      	blx	r3
   14aaa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14aae:	0042      	lsls	r2, r0, #1
   14ab0:	3250      	adds	r2, #80	; 0x50
   14ab2:	480e      	ldr	r0, [pc, #56]	; (14aec <linemeter_init+0x21c>)
   14ab4:	fba0 3202 	umull	r3, r2, r0, r2
   14ab8:	f342 12cf 	sbfx	r2, r2, #7, #16
   14abc:	e799      	b.n	149f2 <linemeter_init+0x122>
    lv_style_set_scale_end_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(7));
   14abe:	2000      	movs	r0, #0
   14ac0:	4b08      	ldr	r3, [pc, #32]	; (14ae4 <linemeter_init+0x214>)
   14ac2:	4798      	blx	r3
   14ac4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   14ac8:	f100 0250 	add.w	r2, r0, #80	; 0x50
   14acc:	4807      	ldr	r0, [pc, #28]	; (14aec <linemeter_init+0x21c>)
   14ace:	fba0 3202 	umull	r3, r2, r0, r2
   14ad2:	f342 12cf 	sbfx	r2, r2, #7, #16
   14ad6:	e79d      	b.n	14a14 <linemeter_init+0x144>
   14ad8:	2000abd4 	.word	0x2000abd4
   14adc:	00013181 	.word	0x00013181
   14ae0:	00006039 	.word	0x00006039
   14ae4:	000101bd 	.word	0x000101bd
   14ae8:	00006161 	.word	0x00006161
   14aec:	cccccccd 	.word	0xcccccccd

00014af0 <gauge_init>:
{
   14af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->gauge_main);
   14af2:	4cc0      	ldr	r4, [pc, #768]	; (14df4 <gauge_init+0x304>)
   14af4:	6820      	ldr	r0, [r4, #0]
   14af6:	305c      	adds	r0, #92	; 0x5c
   14af8:	4bbf      	ldr	r3, [pc, #764]	; (14df8 <gauge_init+0x308>)
   14afa:	4798      	blx	r3
    lv_style_set_line_color(&styles->gauge_main, LV_STATE_DEFAULT, lv_color_hex3(0x888));
   14afc:	6820      	ldr	r0, [r4, #0]
   14afe:	2511      	movs	r5, #17
   14b00:	f04f 0200 	mov.w	r2, #0
   14b04:	f365 0204 	bfi	r2, r5, #0, #5
   14b08:	2722      	movs	r7, #34	; 0x22
   14b0a:	f367 124a 	bfi	r2, r7, #5, #6
   14b0e:	f365 22cf 	bfi	r2, r5, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   14b12:	2199      	movs	r1, #153	; 0x99
   14b14:	305c      	adds	r0, #92	; 0x5c
   14b16:	4eb9      	ldr	r6, [pc, #740]	; (14dfc <gauge_init+0x30c>)
   14b18:	47b0      	blx	r6
    lv_style_set_scale_grad_color(&styles->gauge_main, LV_STATE_DEFAULT, lv_color_hex3(0x888));
   14b1a:	6820      	ldr	r0, [r4, #0]
   14b1c:	f04f 0200 	mov.w	r2, #0
   14b20:	f365 0204 	bfi	r2, r5, #0, #5
   14b24:	f367 124a 	bfi	r2, r7, #5, #6
   14b28:	f365 22cf 	bfi	r2, r5, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
   14b2c:	21c9      	movs	r1, #201	; 0xc9
   14b2e:	305c      	adds	r0, #92	; 0x5c
   14b30:	47b0      	blx	r6
    lv_style_set_scale_end_color(&styles->gauge_main, LV_STATE_DEFAULT, theme.color_primary);
   14b32:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
   14b34:	89a2      	ldrh	r2, [r4, #12]
   14b36:	21ca      	movs	r1, #202	; 0xca
   14b38:	305c      	adds	r0, #92	; 0x5c
   14b3a:	47b0      	blx	r6
    lv_style_set_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(5));
   14b3c:	6824      	ldr	r4, [r4, #0]
   14b3e:	345c      	adds	r4, #92	; 0x5c
   14b40:	2000      	movs	r0, #0
   14b42:	4baf      	ldr	r3, [pc, #700]	; (14e00 <gauge_init+0x310>)
   14b44:	4798      	blx	r3
   14b46:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14b4a:	3050      	adds	r0, #80	; 0x50
   14b4c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14b50:	f080 8168 	bcs.w	14e24 <gauge_init+0x334>
   14b54:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   14b56:	2190      	movs	r1, #144	; 0x90
   14b58:	4620      	mov	r0, r4
   14b5a:	4baa      	ldr	r3, [pc, #680]	; (14e04 <gauge_init+0x314>)
   14b5c:	4798      	blx	r3
    lv_style_set_scale_end_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(4));
   14b5e:	4ba5      	ldr	r3, [pc, #660]	; (14df4 <gauge_init+0x304>)
   14b60:	681c      	ldr	r4, [r3, #0]
   14b62:	345c      	adds	r4, #92	; 0x5c
   14b64:	2000      	movs	r0, #0
   14b66:	4ba6      	ldr	r3, [pc, #664]	; (14e00 <gauge_init+0x310>)
   14b68:	4798      	blx	r3
   14b6a:	3014      	adds	r0, #20
   14b6c:	0080      	lsls	r0, r0, #2
   14b6e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14b72:	f080 8164 	bcs.w	14e3e <gauge_init+0x34e>
   14b76:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
   14b78:	21c3      	movs	r1, #195	; 0xc3
   14b7a:	4620      	mov	r0, r4
   14b7c:	4ba1      	ldr	r3, [pc, #644]	; (14e04 <gauge_init+0x314>)
   14b7e:	4798      	blx	r3
    lv_style_set_scale_end_border_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(8));
   14b80:	4b9c      	ldr	r3, [pc, #624]	; (14df4 <gauge_init+0x304>)
   14b82:	681c      	ldr	r4, [r3, #0]
   14b84:	345c      	adds	r4, #92	; 0x5c
   14b86:	2000      	movs	r0, #0
   14b88:	4b9d      	ldr	r3, [pc, #628]	; (14e00 <gauge_init+0x310>)
   14b8a:	4798      	blx	r3
   14b8c:	300a      	adds	r0, #10
   14b8e:	00c0      	lsls	r0, r0, #3
   14b90:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14b94:	f080 815f 	bcs.w	14e56 <gauge_init+0x366>
   14b98:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
   14b9a:	21c2      	movs	r1, #194	; 0xc2
   14b9c:	4620      	mov	r0, r4
   14b9e:	4b99      	ldr	r3, [pc, #612]	; (14e04 <gauge_init+0x314>)
   14ba0:	4798      	blx	r3
    lv_style_set_pad_left(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
   14ba2:	4b94      	ldr	r3, [pc, #592]	; (14df4 <gauge_init+0x304>)
   14ba4:	681c      	ldr	r4, [r3, #0]
   14ba6:	345c      	adds	r4, #92	; 0x5c
   14ba8:	2000      	movs	r0, #0
   14baa:	4b95      	ldr	r3, [pc, #596]	; (14e00 <gauge_init+0x310>)
   14bac:	4798      	blx	r3
   14bae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14bb2:	0080      	lsls	r0, r0, #2
   14bb4:	3050      	adds	r0, #80	; 0x50
   14bb6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14bba:	f080 8158 	bcs.w	14e6e <gauge_init+0x37e>
   14bbe:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   14bc0:	2112      	movs	r1, #18
   14bc2:	4620      	mov	r0, r4
   14bc4:	4b8f      	ldr	r3, [pc, #572]	; (14e04 <gauge_init+0x314>)
   14bc6:	4798      	blx	r3
    lv_style_set_pad_right(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
   14bc8:	4b8a      	ldr	r3, [pc, #552]	; (14df4 <gauge_init+0x304>)
   14bca:	681c      	ldr	r4, [r3, #0]
   14bcc:	345c      	adds	r4, #92	; 0x5c
   14bce:	2000      	movs	r0, #0
   14bd0:	4b8b      	ldr	r3, [pc, #556]	; (14e00 <gauge_init+0x310>)
   14bd2:	4798      	blx	r3
   14bd4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14bd8:	0080      	lsls	r0, r0, #2
   14bda:	3050      	adds	r0, #80	; 0x50
   14bdc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14be0:	f080 8152 	bcs.w	14e88 <gauge_init+0x398>
   14be4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   14be6:	2113      	movs	r1, #19
   14be8:	4620      	mov	r0, r4
   14bea:	4b86      	ldr	r3, [pc, #536]	; (14e04 <gauge_init+0x314>)
   14bec:	4798      	blx	r3
    lv_style_set_pad_top(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
   14bee:	4b81      	ldr	r3, [pc, #516]	; (14df4 <gauge_init+0x304>)
   14bf0:	681c      	ldr	r4, [r3, #0]
   14bf2:	345c      	adds	r4, #92	; 0x5c
   14bf4:	2000      	movs	r0, #0
   14bf6:	4b82      	ldr	r3, [pc, #520]	; (14e00 <gauge_init+0x310>)
   14bf8:	4798      	blx	r3
   14bfa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14bfe:	0080      	lsls	r0, r0, #2
   14c00:	3050      	adds	r0, #80	; 0x50
   14c02:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14c06:	f080 814c 	bcs.w	14ea2 <gauge_init+0x3b2>
   14c0a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   14c0c:	2110      	movs	r1, #16
   14c0e:	4620      	mov	r0, r4
   14c10:	4b7c      	ldr	r3, [pc, #496]	; (14e04 <gauge_init+0x314>)
   14c12:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
   14c14:	4b77      	ldr	r3, [pc, #476]	; (14df4 <gauge_init+0x304>)
   14c16:	681c      	ldr	r4, [r3, #0]
   14c18:	345c      	adds	r4, #92	; 0x5c
   14c1a:	2000      	movs	r0, #0
   14c1c:	4b78      	ldr	r3, [pc, #480]	; (14e00 <gauge_init+0x310>)
   14c1e:	4798      	blx	r3
   14c20:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14c24:	0080      	lsls	r0, r0, #2
   14c26:	3050      	adds	r0, #80	; 0x50
   14c28:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14c2c:	f080 8146 	bcs.w	14ebc <gauge_init+0x3cc>
   14c30:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   14c32:	2114      	movs	r1, #20
   14c34:	4620      	mov	r0, r4
   14c36:	4b73      	ldr	r3, [pc, #460]	; (14e04 <gauge_init+0x314>)
   14c38:	4798      	blx	r3
    lv_style_set_scale_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(15));
   14c3a:	4b6e      	ldr	r3, [pc, #440]	; (14df4 <gauge_init+0x304>)
   14c3c:	681c      	ldr	r4, [r3, #0]
   14c3e:	345c      	adds	r4, #92	; 0x5c
   14c40:	2000      	movs	r0, #0
   14c42:	4b6f      	ldr	r3, [pc, #444]	; (14e00 <gauge_init+0x310>)
   14c44:	4798      	blx	r3
   14c46:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   14c4a:	3050      	adds	r0, #80	; 0x50
   14c4c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14c50:	f080 8141 	bcs.w	14ed6 <gauge_init+0x3e6>
   14c54:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
   14c56:	21c0      	movs	r1, #192	; 0xc0
   14c58:	4620      	mov	r0, r4
   14c5a:	4d6a      	ldr	r5, [pc, #424]	; (14e04 <gauge_init+0x314>)
   14c5c:	47a8      	blx	r5
    lv_style_set_radius(&styles->gauge_main, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   14c5e:	4c65      	ldr	r4, [pc, #404]	; (14df4 <gauge_init+0x304>)
   14c60:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   14c62:	f647 72ff 	movw	r2, #32767	; 0x7fff
   14c66:	2101      	movs	r1, #1
   14c68:	305c      	adds	r0, #92	; 0x5c
   14c6a:	47a8      	blx	r5
    style_init_reset(&styles->gauge_strong);
   14c6c:	6820      	ldr	r0, [r4, #0]
   14c6e:	3060      	adds	r0, #96	; 0x60
   14c70:	4b61      	ldr	r3, [pc, #388]	; (14df8 <gauge_init+0x308>)
   14c72:	4798      	blx	r3
    lv_style_set_line_color(&styles->gauge_strong, LV_STATE_DEFAULT, lv_color_hex3(0x888));
   14c74:	6820      	ldr	r0, [r4, #0]
   14c76:	2511      	movs	r5, #17
   14c78:	f04f 0200 	mov.w	r2, #0
   14c7c:	f365 0204 	bfi	r2, r5, #0, #5
   14c80:	2722      	movs	r7, #34	; 0x22
   14c82:	f367 124a 	bfi	r2, r7, #5, #6
   14c86:	f365 22cf 	bfi	r2, r5, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   14c8a:	2199      	movs	r1, #153	; 0x99
   14c8c:	3060      	adds	r0, #96	; 0x60
   14c8e:	4e5b      	ldr	r6, [pc, #364]	; (14dfc <gauge_init+0x30c>)
   14c90:	47b0      	blx	r6
    lv_style_set_scale_grad_color(&styles->gauge_strong, LV_STATE_DEFAULT, lv_color_hex3(0x888));
   14c92:	6820      	ldr	r0, [r4, #0]
   14c94:	f04f 0200 	mov.w	r2, #0
   14c98:	f365 0204 	bfi	r2, r5, #0, #5
   14c9c:	f367 124a 	bfi	r2, r7, #5, #6
   14ca0:	f365 22cf 	bfi	r2, r5, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
   14ca4:	21c9      	movs	r1, #201	; 0xc9
   14ca6:	3060      	adds	r0, #96	; 0x60
   14ca8:	47b0      	blx	r6
    lv_style_set_scale_end_color(&styles->gauge_strong, LV_STATE_DEFAULT, theme.color_primary);
   14caa:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
   14cac:	89a2      	ldrh	r2, [r4, #12]
   14cae:	21ca      	movs	r1, #202	; 0xca
   14cb0:	3060      	adds	r0, #96	; 0x60
   14cb2:	47b0      	blx	r6
    lv_style_set_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
   14cb4:	6824      	ldr	r4, [r4, #0]
   14cb6:	3460      	adds	r4, #96	; 0x60
   14cb8:	2000      	movs	r0, #0
   14cba:	4b51      	ldr	r3, [pc, #324]	; (14e00 <gauge_init+0x310>)
   14cbc:	4798      	blx	r3
   14cbe:	300a      	adds	r0, #10
   14cc0:	00c0      	lsls	r0, r0, #3
   14cc2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14cc6:	f080 8113 	bcs.w	14ef0 <gauge_init+0x400>
   14cca:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   14ccc:	2190      	movs	r1, #144	; 0x90
   14cce:	4620      	mov	r0, r4
   14cd0:	4b4c      	ldr	r3, [pc, #304]	; (14e04 <gauge_init+0x314>)
   14cd2:	4798      	blx	r3
    lv_style_set_scale_end_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
   14cd4:	4b47      	ldr	r3, [pc, #284]	; (14df4 <gauge_init+0x304>)
   14cd6:	681c      	ldr	r4, [r3, #0]
   14cd8:	3460      	adds	r4, #96	; 0x60
   14cda:	2000      	movs	r0, #0
   14cdc:	4b48      	ldr	r3, [pc, #288]	; (14e00 <gauge_init+0x310>)
   14cde:	4798      	blx	r3
   14ce0:	300a      	adds	r0, #10
   14ce2:	00c0      	lsls	r0, r0, #3
   14ce4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14ce8:	f080 810e 	bcs.w	14f08 <gauge_init+0x418>
   14cec:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
   14cee:	21c3      	movs	r1, #195	; 0xc3
   14cf0:	4620      	mov	r0, r4
   14cf2:	4b44      	ldr	r3, [pc, #272]	; (14e04 <gauge_init+0x314>)
   14cf4:	4798      	blx	r3
    lv_style_set_scale_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(25));
   14cf6:	4b3f      	ldr	r3, [pc, #252]	; (14df4 <gauge_init+0x304>)
   14cf8:	681c      	ldr	r4, [r3, #0]
   14cfa:	3460      	adds	r4, #96	; 0x60
   14cfc:	2000      	movs	r0, #0
   14cfe:	4b40      	ldr	r3, [pc, #256]	; (14e00 <gauge_init+0x310>)
   14d00:	4798      	blx	r3
   14d02:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14d06:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14d0a:	3050      	adds	r0, #80	; 0x50
   14d0c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14d10:	f080 8106 	bcs.w	14f20 <gauge_init+0x430>
   14d14:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
   14d16:	21c0      	movs	r1, #192	; 0xc0
   14d18:	4620      	mov	r0, r4
   14d1a:	4b3a      	ldr	r3, [pc, #232]	; (14e04 <gauge_init+0x314>)
   14d1c:	4798      	blx	r3
    style_init_reset(&styles->gauge_needle);
   14d1e:	4c35      	ldr	r4, [pc, #212]	; (14df4 <gauge_init+0x304>)
   14d20:	6820      	ldr	r0, [r4, #0]
   14d22:	3064      	adds	r0, #100	; 0x64
   14d24:	4b34      	ldr	r3, [pc, #208]	; (14df8 <gauge_init+0x308>)
   14d26:	4798      	blx	r3
    lv_style_set_line_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
   14d28:	6820      	ldr	r0, [r4, #0]
   14d2a:	3064      	adds	r0, #100	; 0x64
   14d2c:	6a23      	ldr	r3, [r4, #32]
   14d2e:	f013 0f02 	tst.w	r3, #2
   14d32:	f040 8104 	bne.w	14f3e <gauge_init+0x44e>
   14d36:	231f      	movs	r3, #31
   14d38:	213f      	movs	r1, #63	; 0x3f
   14d3a:	461c      	mov	r4, r3
   14d3c:	f04f 0200 	mov.w	r2, #0
   14d40:	f364 0204 	bfi	r2, r4, #0, #5
   14d44:	f361 124a 	bfi	r2, r1, #5, #6
   14d48:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   14d4c:	2199      	movs	r1, #153	; 0x99
   14d4e:	4b2b      	ldr	r3, [pc, #172]	; (14dfc <gauge_init+0x30c>)
   14d50:	4798      	blx	r3
    lv_style_set_line_width(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(8));
   14d52:	4b28      	ldr	r3, [pc, #160]	; (14df4 <gauge_init+0x304>)
   14d54:	681c      	ldr	r4, [r3, #0]
   14d56:	3464      	adds	r4, #100	; 0x64
   14d58:	2000      	movs	r0, #0
   14d5a:	4b29      	ldr	r3, [pc, #164]	; (14e00 <gauge_init+0x310>)
   14d5c:	4798      	blx	r3
   14d5e:	300a      	adds	r0, #10
   14d60:	00c0      	lsls	r0, r0, #3
   14d62:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14d66:	f080 80ee 	bcs.w	14f46 <gauge_init+0x456>
   14d6a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   14d6c:	2190      	movs	r1, #144	; 0x90
   14d6e:	4620      	mov	r0, r4
   14d70:	4b24      	ldr	r3, [pc, #144]	; (14e04 <gauge_init+0x314>)
   14d72:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->gauge_needle, LV_STATE_DEFAULT, LV_OPA_COVER);
   14d74:	4c1f      	ldr	r4, [pc, #124]	; (14df4 <gauge_init+0x304>)
   14d76:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   14d78:	22ff      	movs	r2, #255	; 0xff
   14d7a:	212c      	movs	r1, #44	; 0x2c
   14d7c:	3064      	adds	r0, #100	; 0x64
   14d7e:	4b22      	ldr	r3, [pc, #136]	; (14e08 <gauge_init+0x318>)
   14d80:	4798      	blx	r3
    lv_style_set_bg_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
   14d82:	6820      	ldr	r0, [r4, #0]
   14d84:	3064      	adds	r0, #100	; 0x64
   14d86:	6a23      	ldr	r3, [r4, #32]
   14d88:	f013 0f02 	tst.w	r3, #2
   14d8c:	f040 80e7 	bne.w	14f5e <gauge_init+0x46e>
   14d90:	231f      	movs	r3, #31
   14d92:	213f      	movs	r1, #63	; 0x3f
   14d94:	461c      	mov	r4, r3
   14d96:	f04f 0200 	mov.w	r2, #0
   14d9a:	f364 0204 	bfi	r2, r4, #0, #5
   14d9e:	f361 124a 	bfi	r2, r1, #5, #6
   14da2:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   14da6:	2129      	movs	r1, #41	; 0x29
   14da8:	4b14      	ldr	r3, [pc, #80]	; (14dfc <gauge_init+0x30c>)
   14daa:	4798      	blx	r3
    lv_style_set_radius(&styles->gauge_needle, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   14dac:	4c11      	ldr	r4, [pc, #68]	; (14df4 <gauge_init+0x304>)
   14dae:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   14db0:	f647 72ff 	movw	r2, #32767	; 0x7fff
   14db4:	2101      	movs	r1, #1
   14db6:	3064      	adds	r0, #100	; 0x64
   14db8:	4b12      	ldr	r3, [pc, #72]	; (14e04 <gauge_init+0x314>)
   14dba:	4798      	blx	r3
    lv_style_set_size(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(30));
   14dbc:	6824      	ldr	r4, [r4, #0]
   14dbe:	3464      	adds	r4, #100	; 0x64
   14dc0:	2000      	movs	r0, #0
   14dc2:	4b0f      	ldr	r3, [pc, #60]	; (14e00 <gauge_init+0x310>)
   14dc4:	4798      	blx	r3
   14dc6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   14dca:	0040      	lsls	r0, r0, #1
   14dcc:	3050      	adds	r0, #80	; 0x50
   14dce:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14dd2:	f080 80c8 	bcs.w	14f66 <gauge_init+0x476>
   14dd6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
   14dd8:	2103      	movs	r1, #3
   14dda:	4620      	mov	r0, r4
   14ddc:	4b09      	ldr	r3, [pc, #36]	; (14e04 <gauge_init+0x314>)
   14dde:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(10));
   14de0:	4b04      	ldr	r3, [pc, #16]	; (14df4 <gauge_init+0x304>)
   14de2:	681c      	ldr	r4, [r3, #0]
   14de4:	3464      	adds	r4, #100	; 0x64
   14de6:	2000      	movs	r0, #0
   14de8:	4b05      	ldr	r3, [pc, #20]	; (14e00 <gauge_init+0x310>)
   14dea:	4798      	blx	r3
   14dec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14df0:	e00c      	b.n	14e0c <gauge_init+0x31c>
   14df2:	bf00      	nop
   14df4:	2000abd4 	.word	0x2000abd4
   14df8:	00013181 	.word	0x00013181
   14dfc:	00006161 	.word	0x00006161
   14e00:	000101bd 	.word	0x000101bd
   14e04:	00006039 	.word	0x00006039
   14e08:	00006289 	.word	0x00006289
   14e0c:	0040      	lsls	r0, r0, #1
   14e0e:	3050      	adds	r0, #80	; 0x50
   14e10:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14e14:	f080 80b4 	bcs.w	14f80 <gauge_init+0x490>
   14e18:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   14e1a:	2114      	movs	r1, #20
   14e1c:	4620      	mov	r0, r4
   14e1e:	4b5f      	ldr	r3, [pc, #380]	; (14f9c <gauge_init+0x4ac>)
   14e20:	4798      	blx	r3
   14e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_set_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(5));
   14e24:	2000      	movs	r0, #0
   14e26:	4b5e      	ldr	r3, [pc, #376]	; (14fa0 <gauge_init+0x4b0>)
   14e28:	4798      	blx	r3
   14e2a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14e2e:	f100 0250 	add.w	r2, r0, #80	; 0x50
   14e32:	485c      	ldr	r0, [pc, #368]	; (14fa4 <gauge_init+0x4b4>)
   14e34:	fba0 3202 	umull	r3, r2, r0, r2
   14e38:	f342 12cf 	sbfx	r2, r2, #7, #16
   14e3c:	e68b      	b.n	14b56 <gauge_init+0x66>
    lv_style_set_scale_end_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(4));
   14e3e:	2000      	movs	r0, #0
   14e40:	4b57      	ldr	r3, [pc, #348]	; (14fa0 <gauge_init+0x4b0>)
   14e42:	4798      	blx	r3
   14e44:	f100 0214 	add.w	r2, r0, #20
   14e48:	0092      	lsls	r2, r2, #2
   14e4a:	4856      	ldr	r0, [pc, #344]	; (14fa4 <gauge_init+0x4b4>)
   14e4c:	fba0 3202 	umull	r3, r2, r0, r2
   14e50:	f342 12cf 	sbfx	r2, r2, #7, #16
   14e54:	e690      	b.n	14b78 <gauge_init+0x88>
    lv_style_set_scale_end_border_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(8));
   14e56:	2000      	movs	r0, #0
   14e58:	4b51      	ldr	r3, [pc, #324]	; (14fa0 <gauge_init+0x4b0>)
   14e5a:	4798      	blx	r3
   14e5c:	f100 020a 	add.w	r2, r0, #10
   14e60:	00d2      	lsls	r2, r2, #3
   14e62:	4850      	ldr	r0, [pc, #320]	; (14fa4 <gauge_init+0x4b4>)
   14e64:	fba0 3202 	umull	r3, r2, r0, r2
   14e68:	f342 12cf 	sbfx	r2, r2, #7, #16
   14e6c:	e695      	b.n	14b9a <gauge_init+0xaa>
    lv_style_set_pad_left(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
   14e6e:	2000      	movs	r0, #0
   14e70:	4b4b      	ldr	r3, [pc, #300]	; (14fa0 <gauge_init+0x4b0>)
   14e72:	4798      	blx	r3
   14e74:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14e78:	0082      	lsls	r2, r0, #2
   14e7a:	3250      	adds	r2, #80	; 0x50
   14e7c:	4849      	ldr	r0, [pc, #292]	; (14fa4 <gauge_init+0x4b4>)
   14e7e:	fba0 3202 	umull	r3, r2, r0, r2
   14e82:	f342 12cf 	sbfx	r2, r2, #7, #16
   14e86:	e69b      	b.n	14bc0 <gauge_init+0xd0>
    lv_style_set_pad_right(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
   14e88:	2000      	movs	r0, #0
   14e8a:	4b45      	ldr	r3, [pc, #276]	; (14fa0 <gauge_init+0x4b0>)
   14e8c:	4798      	blx	r3
   14e8e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14e92:	0082      	lsls	r2, r0, #2
   14e94:	3250      	adds	r2, #80	; 0x50
   14e96:	4843      	ldr	r0, [pc, #268]	; (14fa4 <gauge_init+0x4b4>)
   14e98:	fba0 3202 	umull	r3, r2, r0, r2
   14e9c:	f342 12cf 	sbfx	r2, r2, #7, #16
   14ea0:	e6a1      	b.n	14be6 <gauge_init+0xf6>
    lv_style_set_pad_top(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
   14ea2:	2000      	movs	r0, #0
   14ea4:	4b3e      	ldr	r3, [pc, #248]	; (14fa0 <gauge_init+0x4b0>)
   14ea6:	4798      	blx	r3
   14ea8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14eac:	0082      	lsls	r2, r0, #2
   14eae:	3250      	adds	r2, #80	; 0x50
   14eb0:	483c      	ldr	r0, [pc, #240]	; (14fa4 <gauge_init+0x4b4>)
   14eb2:	fba0 3202 	umull	r3, r2, r0, r2
   14eb6:	f342 12cf 	sbfx	r2, r2, #7, #16
   14eba:	e6a7      	b.n	14c0c <gauge_init+0x11c>
    lv_style_set_pad_inner(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
   14ebc:	2000      	movs	r0, #0
   14ebe:	4b38      	ldr	r3, [pc, #224]	; (14fa0 <gauge_init+0x4b0>)
   14ec0:	4798      	blx	r3
   14ec2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14ec6:	0082      	lsls	r2, r0, #2
   14ec8:	3250      	adds	r2, #80	; 0x50
   14eca:	4836      	ldr	r0, [pc, #216]	; (14fa4 <gauge_init+0x4b4>)
   14ecc:	fba0 3202 	umull	r3, r2, r0, r2
   14ed0:	f342 12cf 	sbfx	r2, r2, #7, #16
   14ed4:	e6ad      	b.n	14c32 <gauge_init+0x142>
    lv_style_set_scale_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(15));
   14ed6:	2000      	movs	r0, #0
   14ed8:	4b31      	ldr	r3, [pc, #196]	; (14fa0 <gauge_init+0x4b0>)
   14eda:	4798      	blx	r3
   14edc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   14ee0:	f100 0250 	add.w	r2, r0, #80	; 0x50
   14ee4:	482f      	ldr	r0, [pc, #188]	; (14fa4 <gauge_init+0x4b4>)
   14ee6:	fba0 3202 	umull	r3, r2, r0, r2
   14eea:	f342 12cf 	sbfx	r2, r2, #7, #16
   14eee:	e6b2      	b.n	14c56 <gauge_init+0x166>
    lv_style_set_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
   14ef0:	2000      	movs	r0, #0
   14ef2:	4b2b      	ldr	r3, [pc, #172]	; (14fa0 <gauge_init+0x4b0>)
   14ef4:	4798      	blx	r3
   14ef6:	f100 020a 	add.w	r2, r0, #10
   14efa:	00d2      	lsls	r2, r2, #3
   14efc:	4829      	ldr	r0, [pc, #164]	; (14fa4 <gauge_init+0x4b4>)
   14efe:	fba0 3202 	umull	r3, r2, r0, r2
   14f02:	f342 12cf 	sbfx	r2, r2, #7, #16
   14f06:	e6e1      	b.n	14ccc <gauge_init+0x1dc>
    lv_style_set_scale_end_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
   14f08:	2000      	movs	r0, #0
   14f0a:	4b25      	ldr	r3, [pc, #148]	; (14fa0 <gauge_init+0x4b0>)
   14f0c:	4798      	blx	r3
   14f0e:	f100 020a 	add.w	r2, r0, #10
   14f12:	00d2      	lsls	r2, r2, #3
   14f14:	4823      	ldr	r0, [pc, #140]	; (14fa4 <gauge_init+0x4b4>)
   14f16:	fba0 3202 	umull	r3, r2, r0, r2
   14f1a:	f342 12cf 	sbfx	r2, r2, #7, #16
   14f1e:	e6e6      	b.n	14cee <gauge_init+0x1fe>
    lv_style_set_scale_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(25));
   14f20:	2000      	movs	r0, #0
   14f22:	4b1f      	ldr	r3, [pc, #124]	; (14fa0 <gauge_init+0x4b0>)
   14f24:	4798      	blx	r3
   14f26:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14f2a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14f2e:	f100 0250 	add.w	r2, r0, #80	; 0x50
   14f32:	481c      	ldr	r0, [pc, #112]	; (14fa4 <gauge_init+0x4b4>)
   14f34:	fba0 3202 	umull	r3, r2, r0, r2
   14f38:	f342 12cf 	sbfx	r2, r2, #7, #16
   14f3c:	e6eb      	b.n	14d16 <gauge_init+0x226>
   14f3e:	2308      	movs	r3, #8
   14f40:	2112      	movs	r1, #18
   14f42:	240b      	movs	r4, #11
   14f44:	e6fa      	b.n	14d3c <gauge_init+0x24c>
    lv_style_set_line_width(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(8));
   14f46:	2000      	movs	r0, #0
   14f48:	4b15      	ldr	r3, [pc, #84]	; (14fa0 <gauge_init+0x4b0>)
   14f4a:	4798      	blx	r3
   14f4c:	f100 020a 	add.w	r2, r0, #10
   14f50:	00d2      	lsls	r2, r2, #3
   14f52:	4814      	ldr	r0, [pc, #80]	; (14fa4 <gauge_init+0x4b4>)
   14f54:	fba0 3202 	umull	r3, r2, r0, r2
   14f58:	f342 12cf 	sbfx	r2, r2, #7, #16
   14f5c:	e706      	b.n	14d6c <gauge_init+0x27c>
   14f5e:	2308      	movs	r3, #8
   14f60:	2112      	movs	r1, #18
   14f62:	240b      	movs	r4, #11
   14f64:	e717      	b.n	14d96 <gauge_init+0x2a6>
    lv_style_set_size(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(30));
   14f66:	2000      	movs	r0, #0
   14f68:	4b0d      	ldr	r3, [pc, #52]	; (14fa0 <gauge_init+0x4b0>)
   14f6a:	4798      	blx	r3
   14f6c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   14f70:	0042      	lsls	r2, r0, #1
   14f72:	3250      	adds	r2, #80	; 0x50
   14f74:	480b      	ldr	r0, [pc, #44]	; (14fa4 <gauge_init+0x4b4>)
   14f76:	fba0 3202 	umull	r3, r2, r0, r2
   14f7a:	f342 12cf 	sbfx	r2, r2, #7, #16
   14f7e:	e72b      	b.n	14dd8 <gauge_init+0x2e8>
    lv_style_set_pad_inner(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(10));
   14f80:	2000      	movs	r0, #0
   14f82:	4b07      	ldr	r3, [pc, #28]	; (14fa0 <gauge_init+0x4b0>)
   14f84:	4798      	blx	r3
   14f86:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14f8a:	0042      	lsls	r2, r0, #1
   14f8c:	3250      	adds	r2, #80	; 0x50
   14f8e:	4805      	ldr	r0, [pc, #20]	; (14fa4 <gauge_init+0x4b4>)
   14f90:	fba0 3202 	umull	r3, r2, r0, r2
   14f94:	f342 12cf 	sbfx	r2, r2, #7, #16
   14f98:	e73f      	b.n	14e1a <gauge_init+0x32a>
   14f9a:	bf00      	nop
   14f9c:	00006039 	.word	0x00006039
   14fa0:	000101bd 	.word	0x000101bd
   14fa4:	cccccccd 	.word	0xcccccccd

00014fa8 <arc_init>:
{
   14fa8:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->arc_indic);
   14faa:	4c3c      	ldr	r4, [pc, #240]	; (1509c <arc_init+0xf4>)
   14fac:	6820      	ldr	r0, [r4, #0]
   14fae:	301c      	adds	r0, #28
   14fb0:	4b3b      	ldr	r3, [pc, #236]	; (150a0 <arc_init+0xf8>)
   14fb2:	4798      	blx	r3
    lv_style_set_line_color(&styles->arc_indic, LV_STATE_DEFAULT, theme.color_primary);
   14fb4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   14fb6:	89a2      	ldrh	r2, [r4, #12]
   14fb8:	2199      	movs	r1, #153	; 0x99
   14fba:	301c      	adds	r0, #28
   14fbc:	4b39      	ldr	r3, [pc, #228]	; (150a4 <arc_init+0xfc>)
   14fbe:	4798      	blx	r3
    lv_style_set_line_width(&styles->arc_indic, LV_STATE_DEFAULT, LV_DPX(25));
   14fc0:	6824      	ldr	r4, [r4, #0]
   14fc2:	341c      	adds	r4, #28
   14fc4:	2000      	movs	r0, #0
   14fc6:	4b38      	ldr	r3, [pc, #224]	; (150a8 <arc_init+0x100>)
   14fc8:	4798      	blx	r3
   14fca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14fce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14fd2:	3050      	adds	r0, #80	; 0x50
   14fd4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14fd8:	d241      	bcs.n	1505e <arc_init+0xb6>
   14fda:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   14fdc:	2190      	movs	r1, #144	; 0x90
   14fde:	4620      	mov	r0, r4
   14fe0:	4d32      	ldr	r5, [pc, #200]	; (150ac <arc_init+0x104>)
   14fe2:	47a8      	blx	r5
    lv_style_set_line_rounded(&styles->arc_indic, LV_STATE_DEFAULT, true);
   14fe4:	4c2d      	ldr	r4, [pc, #180]	; (1509c <arc_init+0xf4>)
   14fe6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
   14fe8:	2201      	movs	r2, #1
   14fea:	2194      	movs	r1, #148	; 0x94
   14fec:	301c      	adds	r0, #28
   14fee:	47a8      	blx	r5
    style_init_reset(&styles->arc_bg);
   14ff0:	6820      	ldr	r0, [r4, #0]
   14ff2:	3020      	adds	r0, #32
   14ff4:	4b2a      	ldr	r3, [pc, #168]	; (150a0 <arc_init+0xf8>)
   14ff6:	4798      	blx	r3
    lv_style_set_line_color(&styles->arc_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
   14ff8:	6820      	ldr	r0, [r4, #0]
   14ffa:	6a23      	ldr	r3, [r4, #32]
   14ffc:	f013 0302 	ands.w	r3, r3, #2
   15000:	bf14      	ite	ne
   15002:	211a      	movne	r1, #26
   15004:	2108      	moveq	r1, #8
   15006:	2b00      	cmp	r3, #0
   15008:	bf15      	itete	ne
   1500a:	2435      	movne	r4, #53	; 0x35
   1500c:	2412      	moveq	r4, #18
   1500e:	231b      	movne	r3, #27
   15010:	2309      	moveq	r3, #9
   15012:	f04f 0200 	mov.w	r2, #0
   15016:	f363 0204 	bfi	r2, r3, #0, #5
   1501a:	f364 124a 	bfi	r2, r4, #5, #6
   1501e:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   15022:	2199      	movs	r1, #153	; 0x99
   15024:	3020      	adds	r0, #32
   15026:	4b1f      	ldr	r3, [pc, #124]	; (150a4 <arc_init+0xfc>)
   15028:	4798      	blx	r3
    lv_style_set_line_width(&styles->arc_bg, LV_STATE_DEFAULT, LV_DPX(25));
   1502a:	4b1c      	ldr	r3, [pc, #112]	; (1509c <arc_init+0xf4>)
   1502c:	681c      	ldr	r4, [r3, #0]
   1502e:	3420      	adds	r4, #32
   15030:	2000      	movs	r0, #0
   15032:	4b1d      	ldr	r3, [pc, #116]	; (150a8 <arc_init+0x100>)
   15034:	4798      	blx	r3
   15036:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1503a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1503e:	3050      	adds	r0, #80	; 0x50
   15040:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15044:	d21a      	bcs.n	1507c <arc_init+0xd4>
   15046:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   15048:	2190      	movs	r1, #144	; 0x90
   1504a:	4620      	mov	r0, r4
   1504c:	4c17      	ldr	r4, [pc, #92]	; (150ac <arc_init+0x104>)
   1504e:	47a0      	blx	r4
    lv_style_set_line_rounded(&styles->arc_bg, LV_STATE_DEFAULT, true);
   15050:	4b12      	ldr	r3, [pc, #72]	; (1509c <arc_init+0xf4>)
   15052:	6818      	ldr	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
   15054:	2201      	movs	r2, #1
   15056:	2194      	movs	r1, #148	; 0x94
   15058:	3020      	adds	r0, #32
   1505a:	47a0      	blx	r4
   1505c:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_line_width(&styles->arc_indic, LV_STATE_DEFAULT, LV_DPX(25));
   1505e:	2000      	movs	r0, #0
   15060:	4b11      	ldr	r3, [pc, #68]	; (150a8 <arc_init+0x100>)
   15062:	4798      	blx	r3
   15064:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15068:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1506c:	f100 0250 	add.w	r2, r0, #80	; 0x50
   15070:	480f      	ldr	r0, [pc, #60]	; (150b0 <arc_init+0x108>)
   15072:	fba0 3202 	umull	r3, r2, r0, r2
   15076:	f342 12cf 	sbfx	r2, r2, #7, #16
   1507a:	e7af      	b.n	14fdc <arc_init+0x34>
    lv_style_set_line_width(&styles->arc_bg, LV_STATE_DEFAULT, LV_DPX(25));
   1507c:	2000      	movs	r0, #0
   1507e:	4b0a      	ldr	r3, [pc, #40]	; (150a8 <arc_init+0x100>)
   15080:	4798      	blx	r3
   15082:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15086:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1508a:	f100 0250 	add.w	r2, r0, #80	; 0x50
   1508e:	4808      	ldr	r0, [pc, #32]	; (150b0 <arc_init+0x108>)
   15090:	fba0 3202 	umull	r3, r2, r0, r2
   15094:	f342 12cf 	sbfx	r2, r2, #7, #16
   15098:	e7d6      	b.n	15048 <arc_init+0xa0>
   1509a:	bf00      	nop
   1509c:	2000abd4 	.word	0x2000abd4
   150a0:	00013181 	.word	0x00013181
   150a4:	00006161 	.word	0x00006161
   150a8:	000101bd 	.word	0x000101bd
   150ac:	00006039 	.word	0x00006039
   150b0:	cccccccd 	.word	0xcccccccd

000150b4 <led_init>:
{
   150b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->led);
   150b6:	4c37      	ldr	r4, [pc, #220]	; (15194 <led_init+0xe0>)
   150b8:	6820      	ldr	r0, [r4, #0]
   150ba:	306c      	adds	r0, #108	; 0x6c
   150bc:	4b36      	ldr	r3, [pc, #216]	; (15198 <led_init+0xe4>)
   150be:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->led, LV_STATE_DEFAULT, LV_OPA_COVER);
   150c0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   150c2:	22ff      	movs	r2, #255	; 0xff
   150c4:	212c      	movs	r1, #44	; 0x2c
   150c6:	306c      	adds	r0, #108	; 0x6c
   150c8:	4d34      	ldr	r5, [pc, #208]	; (1519c <led_init+0xe8>)
   150ca:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->led, LV_STATE_DEFAULT, theme.color_primary);
   150cc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   150ce:	89a2      	ldrh	r2, [r4, #12]
   150d0:	2129      	movs	r1, #41	; 0x29
   150d2:	306c      	adds	r0, #108	; 0x6c
   150d4:	4f32      	ldr	r7, [pc, #200]	; (151a0 <led_init+0xec>)
   150d6:	47b8      	blx	r7
    lv_style_set_border_width(&styles->led, LV_STATE_DEFAULT, 2);
   150d8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   150da:	2202      	movs	r2, #2
   150dc:	2130      	movs	r1, #48	; 0x30
   150de:	306c      	adds	r0, #108	; 0x6c
   150e0:	4e30      	ldr	r6, [pc, #192]	; (151a4 <led_init+0xf0>)
   150e2:	47b0      	blx	r6
    lv_style_set_border_opa(&styles->led, LV_STATE_DEFAULT, LV_OPA_50);
   150e4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
   150e6:	227f      	movs	r2, #127	; 0x7f
   150e8:	213c      	movs	r1, #60	; 0x3c
   150ea:	306c      	adds	r0, #108	; 0x6c
   150ec:	47a8      	blx	r5
    lv_style_set_border_color(&styles->led, LV_STATE_DEFAULT, lv_color_lighten(theme.color_primary, LV_OPA_30));
   150ee:	6825      	ldr	r5, [r4, #0]
   150f0:	356c      	adds	r5, #108	; 0x6c
   150f2:	214c      	movs	r1, #76	; 0x4c
   150f4:	89a0      	ldrh	r0, [r4, #12]
   150f6:	4b2c      	ldr	r3, [pc, #176]	; (151a8 <led_init+0xf4>)
   150f8:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   150fa:	4602      	mov	r2, r0
   150fc:	2139      	movs	r1, #57	; 0x39
   150fe:	4628      	mov	r0, r5
   15100:	47b8      	blx	r7
    lv_style_set_radius(&styles->led, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   15102:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   15104:	f647 72ff 	movw	r2, #32767	; 0x7fff
   15108:	2101      	movs	r1, #1
   1510a:	306c      	adds	r0, #108	; 0x6c
   1510c:	47b0      	blx	r6
    lv_style_set_shadow_width(&styles->led, LV_STATE_DEFAULT, LV_DPX(15));
   1510e:	6824      	ldr	r4, [r4, #0]
   15110:	346c      	adds	r4, #108	; 0x6c
   15112:	2000      	movs	r0, #0
   15114:	4b25      	ldr	r3, [pc, #148]	; (151ac <led_init+0xf8>)
   15116:	4798      	blx	r3
   15118:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1511c:	3050      	adds	r0, #80	; 0x50
   1511e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15122:	d21c      	bcs.n	1515e <led_init+0xaa>
   15124:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
   15126:	2150      	movs	r1, #80	; 0x50
   15128:	4620      	mov	r0, r4
   1512a:	4b1e      	ldr	r3, [pc, #120]	; (151a4 <led_init+0xf0>)
   1512c:	4798      	blx	r3
    lv_style_set_shadow_color(&styles->led, LV_STATE_DEFAULT, theme.color_primary);
   1512e:	4c19      	ldr	r4, [pc, #100]	; (15194 <led_init+0xe0>)
   15130:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
   15132:	89a2      	ldrh	r2, [r4, #12]
   15134:	2159      	movs	r1, #89	; 0x59
   15136:	306c      	adds	r0, #108	; 0x6c
   15138:	4b19      	ldr	r3, [pc, #100]	; (151a0 <led_init+0xec>)
   1513a:	4798      	blx	r3
    lv_style_set_shadow_spread(&styles->led, LV_STATE_DEFAULT, LV_DPX(5));
   1513c:	6824      	ldr	r4, [r4, #0]
   1513e:	346c      	adds	r4, #108	; 0x6c
   15140:	2000      	movs	r0, #0
   15142:	4b1a      	ldr	r3, [pc, #104]	; (151ac <led_init+0xf8>)
   15144:	4798      	blx	r3
   15146:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1514a:	3050      	adds	r0, #80	; 0x50
   1514c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15150:	d212      	bcs.n	15178 <led_init+0xc4>
   15152:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
   15154:	2153      	movs	r1, #83	; 0x53
   15156:	4620      	mov	r0, r4
   15158:	4b12      	ldr	r3, [pc, #72]	; (151a4 <led_init+0xf0>)
   1515a:	4798      	blx	r3
   1515c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_set_shadow_width(&styles->led, LV_STATE_DEFAULT, LV_DPX(15));
   1515e:	2000      	movs	r0, #0
   15160:	4b12      	ldr	r3, [pc, #72]	; (151ac <led_init+0xf8>)
   15162:	4798      	blx	r3
   15164:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15168:	f100 0250 	add.w	r2, r0, #80	; 0x50
   1516c:	4810      	ldr	r0, [pc, #64]	; (151b0 <led_init+0xfc>)
   1516e:	fba0 3202 	umull	r3, r2, r0, r2
   15172:	f342 12cf 	sbfx	r2, r2, #7, #16
   15176:	e7d6      	b.n	15126 <led_init+0x72>
    lv_style_set_shadow_spread(&styles->led, LV_STATE_DEFAULT, LV_DPX(5));
   15178:	2000      	movs	r0, #0
   1517a:	4b0c      	ldr	r3, [pc, #48]	; (151ac <led_init+0xf8>)
   1517c:	4798      	blx	r3
   1517e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15182:	f100 0250 	add.w	r2, r0, #80	; 0x50
   15186:	480a      	ldr	r0, [pc, #40]	; (151b0 <led_init+0xfc>)
   15188:	fba0 3202 	umull	r3, r2, r0, r2
   1518c:	f342 12cf 	sbfx	r2, r2, #7, #16
   15190:	e7e0      	b.n	15154 <led_init+0xa0>
   15192:	bf00      	nop
   15194:	2000abd4 	.word	0x2000abd4
   15198:	00013181 	.word	0x00013181
   1519c:	00006289 	.word	0x00006289
   151a0:	00006161 	.word	0x00006161
   151a4:	00006039 	.word	0x00006039
   151a8:	00010da7 	.word	0x00010da7
   151ac:	000101bd 	.word	0x000101bd
   151b0:	cccccccd 	.word	0xcccccccd

000151b4 <lv_theme_material_init>:
{
   151b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   151b8:	4680      	mov	r8, r0
   151ba:	460f      	mov	r7, r1
   151bc:	4615      	mov	r5, r2
   151be:	461e      	mov	r6, r3
    if(!inited) {
   151c0:	4bb2      	ldr	r3, [pc, #712]	; (1548c <lv_theme_material_init+0x2d8>)
   151c2:	791b      	ldrb	r3, [r3, #4]
   151c4:	2b00      	cmp	r3, #0
   151c6:	f001 8369 	beq.w	1689c <lv_theme_material_init+0x16e8>
    theme.color_primary = color_primary;
   151ca:	4cb0      	ldr	r4, [pc, #704]	; (1548c <lv_theme_material_init+0x2d8>)
   151cc:	f8a4 800c 	strh.w	r8, [r4, #12]
    theme.color_secondary = color_secondary;
   151d0:	81e7      	strh	r7, [r4, #14]
    theme.font_small = font_small;
   151d2:	6126      	str	r6, [r4, #16]
    theme.font_normal = font_normal;
   151d4:	9b06      	ldr	r3, [sp, #24]
   151d6:	6163      	str	r3, [r4, #20]
    theme.font_subtitle = font_subtitle;
   151d8:	9b07      	ldr	r3, [sp, #28]
   151da:	61a3      	str	r3, [r4, #24]
    theme.font_title = font_title;
   151dc:	9b08      	ldr	r3, [sp, #32]
   151de:	61e3      	str	r3, [r4, #28]
    theme.flags = flags;
   151e0:	6225      	str	r5, [r4, #32]
    basic_init();
   151e2:	4bab      	ldr	r3, [pc, #684]	; (15490 <lv_theme_material_init+0x2dc>)
   151e4:	4798      	blx	r3
    bar_init();
   151e6:	4bab      	ldr	r3, [pc, #684]	; (15494 <lv_theme_material_init+0x2e0>)
   151e8:	4798      	blx	r3
    led_init();
   151ea:	4bab      	ldr	r3, [pc, #684]	; (15498 <lv_theme_material_init+0x2e4>)
   151ec:	4798      	blx	r3
    slider_init();
   151ee:	4bab      	ldr	r3, [pc, #684]	; (1549c <lv_theme_material_init+0x2e8>)
   151f0:	4798      	blx	r3
    switch_init();
   151f2:	4bab      	ldr	r3, [pc, #684]	; (154a0 <lv_theme_material_init+0x2ec>)
   151f4:	4798      	blx	r3
    linemeter_init();
   151f6:	4bab      	ldr	r3, [pc, #684]	; (154a4 <lv_theme_material_init+0x2f0>)
   151f8:	4798      	blx	r3
    gauge_init();
   151fa:	4bab      	ldr	r3, [pc, #684]	; (154a8 <lv_theme_material_init+0x2f4>)
   151fc:	4798      	blx	r3
    arc_init();
   151fe:	4bab      	ldr	r3, [pc, #684]	; (154ac <lv_theme_material_init+0x2f8>)
   15200:	4798      	blx	r3
    style_init_reset(&styles->chart_bg);
   15202:	6820      	ldr	r0, [r4, #0]
   15204:	3040      	adds	r0, #64	; 0x40
   15206:	4baa      	ldr	r3, [pc, #680]	; (154b0 <lv_theme_material_init+0x2fc>)
   15208:	4798      	blx	r3
    lv_style_set_text_color(&styles->chart_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
   1520a:	6820      	ldr	r0, [r4, #0]
   1520c:	3040      	adds	r0, #64	; 0x40
   1520e:	6a23      	ldr	r3, [r4, #32]
   15210:	f013 0f02 	tst.w	r3, #2
   15214:	f041 834b 	bne.w	168ae <lv_theme_material_init+0x16fa>
   15218:	2314      	movs	r3, #20
   1521a:	212b      	movs	r1, #43	; 0x2b
   1521c:	2417      	movs	r4, #23
   1521e:	f04f 0200 	mov.w	r2, #0
   15222:	f364 0204 	bfi	r2, r4, #0, #5
   15226:	f361 124a 	bfi	r2, r1, #5, #6
   1522a:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   1522e:	f248 0189 	movw	r1, #32905	; 0x8089
   15232:	4ba0      	ldr	r3, [pc, #640]	; (154b4 <lv_theme_material_init+0x300>)
   15234:	4798      	blx	r3
    style_init_reset(&styles->chart_series_bg);
   15236:	4c95      	ldr	r4, [pc, #596]	; (1548c <lv_theme_material_init+0x2d8>)
   15238:	6820      	ldr	r0, [r4, #0]
   1523a:	3044      	adds	r0, #68	; 0x44
   1523c:	4b9c      	ldr	r3, [pc, #624]	; (154b0 <lv_theme_material_init+0x2fc>)
   1523e:	4798      	blx	r3
    lv_style_set_line_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(1));
   15240:	6824      	ldr	r4, [r4, #0]
   15242:	3444      	adds	r4, #68	; 0x44
   15244:	2000      	movs	r0, #0
   15246:	4b9c      	ldr	r3, [pc, #624]	; (154b8 <lv_theme_material_init+0x304>)
   15248:	4798      	blx	r3
   1524a:	3050      	adds	r0, #80	; 0x50
   1524c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15250:	f081 8332 	bcs.w	168b8 <lv_theme_material_init+0x1704>
   15254:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   15256:	2190      	movs	r1, #144	; 0x90
   15258:	4620      	mov	r0, r4
   1525a:	4b98      	ldr	r3, [pc, #608]	; (154bc <lv_theme_material_init+0x308>)
   1525c:	4798      	blx	r3
    lv_style_set_line_dash_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
   1525e:	4b8b      	ldr	r3, [pc, #556]	; (1548c <lv_theme_material_init+0x2d8>)
   15260:	681c      	ldr	r4, [r3, #0]
   15262:	3444      	adds	r4, #68	; 0x44
   15264:	2000      	movs	r0, #0
   15266:	4b94      	ldr	r3, [pc, #592]	; (154b8 <lv_theme_material_init+0x304>)
   15268:	4798      	blx	r3
   1526a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1526e:	0040      	lsls	r0, r0, #1
   15270:	3050      	adds	r0, #80	; 0x50
   15272:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15276:	f081 832b 	bcs.w	168d0 <lv_theme_material_init+0x171c>
   1527a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_WIDTH, line_dash_width, lv_style_int_t, _int, scalar)
   1527c:	2192      	movs	r1, #146	; 0x92
   1527e:	4620      	mov	r0, r4
   15280:	4b8e      	ldr	r3, [pc, #568]	; (154bc <lv_theme_material_init+0x308>)
   15282:	4798      	blx	r3
    lv_style_set_line_dash_gap(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
   15284:	4b81      	ldr	r3, [pc, #516]	; (1548c <lv_theme_material_init+0x2d8>)
   15286:	681c      	ldr	r4, [r3, #0]
   15288:	3444      	adds	r4, #68	; 0x44
   1528a:	2000      	movs	r0, #0
   1528c:	4b8a      	ldr	r3, [pc, #552]	; (154b8 <lv_theme_material_init+0x304>)
   1528e:	4798      	blx	r3
   15290:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15294:	0040      	lsls	r0, r0, #1
   15296:	3050      	adds	r0, #80	; 0x50
   15298:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1529c:	f081 8326 	bcs.w	168ec <lv_theme_material_init+0x1738>
   152a0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
   152a2:	2193      	movs	r1, #147	; 0x93
   152a4:	4620      	mov	r0, r4
   152a6:	4b85      	ldr	r3, [pc, #532]	; (154bc <lv_theme_material_init+0x308>)
   152a8:	4798      	blx	r3
    lv_style_set_line_color(&styles->chart_series_bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
   152aa:	4b78      	ldr	r3, [pc, #480]	; (1548c <lv_theme_material_init+0x2d8>)
   152ac:	6818      	ldr	r0, [r3, #0]
   152ae:	6a1b      	ldr	r3, [r3, #32]
   152b0:	f013 0302 	ands.w	r3, r3, #2
   152b4:	bf14      	ite	ne
   152b6:	211a      	movne	r1, #26
   152b8:	2110      	moveq	r1, #16
   152ba:	2b00      	cmp	r3, #0
   152bc:	bf15      	itete	ne
   152be:	2437      	movne	r4, #55	; 0x37
   152c0:	2422      	moveq	r4, #34	; 0x22
   152c2:	231c      	movne	r3, #28
   152c4:	2312      	moveq	r3, #18
   152c6:	f04f 0200 	mov.w	r2, #0
   152ca:	f363 0204 	bfi	r2, r3, #0, #5
   152ce:	f364 124a 	bfi	r2, r4, #5, #6
   152d2:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   152d6:	2199      	movs	r1, #153	; 0x99
   152d8:	3044      	adds	r0, #68	; 0x44
   152da:	4b76      	ldr	r3, [pc, #472]	; (154b4 <lv_theme_material_init+0x300>)
   152dc:	4798      	blx	r3
    style_init_reset(&styles->chart_series);
   152de:	4c6b      	ldr	r4, [pc, #428]	; (1548c <lv_theme_material_init+0x2d8>)
   152e0:	6820      	ldr	r0, [r4, #0]
   152e2:	3048      	adds	r0, #72	; 0x48
   152e4:	4b72      	ldr	r3, [pc, #456]	; (154b0 <lv_theme_material_init+0x2fc>)
   152e6:	4798      	blx	r3
    lv_style_set_line_width(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(3));
   152e8:	6824      	ldr	r4, [r4, #0]
   152ea:	3448      	adds	r4, #72	; 0x48
   152ec:	2000      	movs	r0, #0
   152ee:	4b72      	ldr	r3, [pc, #456]	; (154b8 <lv_theme_material_init+0x304>)
   152f0:	4798      	blx	r3
   152f2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   152f6:	3050      	adds	r0, #80	; 0x50
   152f8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   152fc:	f081 8304 	bcs.w	16908 <lv_theme_material_init+0x1754>
   15300:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   15302:	2190      	movs	r1, #144	; 0x90
   15304:	4620      	mov	r0, r4
   15306:	4b6d      	ldr	r3, [pc, #436]	; (154bc <lv_theme_material_init+0x308>)
   15308:	4798      	blx	r3
    lv_style_set_size(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(4));
   1530a:	4b60      	ldr	r3, [pc, #384]	; (1548c <lv_theme_material_init+0x2d8>)
   1530c:	681c      	ldr	r4, [r3, #0]
   1530e:	3448      	adds	r4, #72	; 0x48
   15310:	2000      	movs	r0, #0
   15312:	4b69      	ldr	r3, [pc, #420]	; (154b8 <lv_theme_material_init+0x304>)
   15314:	4798      	blx	r3
   15316:	3014      	adds	r0, #20
   15318:	0080      	lsls	r0, r0, #2
   1531a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1531e:	f081 8301 	bcs.w	16924 <lv_theme_material_init+0x1770>
   15322:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
   15324:	2103      	movs	r1, #3
   15326:	4620      	mov	r0, r4
   15328:	4b64      	ldr	r3, [pc, #400]	; (154bc <lv_theme_material_init+0x308>)
   1532a:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(2));     /*Space between columns*/
   1532c:	4b57      	ldr	r3, [pc, #348]	; (1548c <lv_theme_material_init+0x2d8>)
   1532e:	681c      	ldr	r4, [r3, #0]
   15330:	3448      	adds	r4, #72	; 0x48
   15332:	2000      	movs	r0, #0
   15334:	4b60      	ldr	r3, [pc, #384]	; (154b8 <lv_theme_material_init+0x304>)
   15336:	4798      	blx	r3
   15338:	3028      	adds	r0, #40	; 0x28
   1533a:	0040      	lsls	r0, r0, #1
   1533c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15340:	f081 82fd 	bcs.w	1693e <lv_theme_material_init+0x178a>
   15344:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   15346:	2114      	movs	r1, #20
   15348:	4620      	mov	r0, r4
   1534a:	4b5c      	ldr	r3, [pc, #368]	; (154bc <lv_theme_material_init+0x308>)
   1534c:	4798      	blx	r3
    lv_style_set_radius(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(1));
   1534e:	4b4f      	ldr	r3, [pc, #316]	; (1548c <lv_theme_material_init+0x2d8>)
   15350:	681c      	ldr	r4, [r3, #0]
   15352:	3448      	adds	r4, #72	; 0x48
   15354:	2000      	movs	r0, #0
   15356:	4b58      	ldr	r3, [pc, #352]	; (154b8 <lv_theme_material_init+0x304>)
   15358:	4798      	blx	r3
   1535a:	3050      	adds	r0, #80	; 0x50
   1535c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15360:	f081 82fa 	bcs.w	16958 <lv_theme_material_init+0x17a4>
   15364:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   15366:	2101      	movs	r1, #1
   15368:	4620      	mov	r0, r4
   1536a:	4b54      	ldr	r3, [pc, #336]	; (154bc <lv_theme_material_init+0x308>)
   1536c:	4798      	blx	r3
    style_init_reset(&styles->calendar_header);
   1536e:	4c47      	ldr	r4, [pc, #284]	; (1548c <lv_theme_material_init+0x2d8>)
   15370:	6820      	ldr	r0, [r4, #0]
   15372:	3030      	adds	r0, #48	; 0x30
   15374:	4b4e      	ldr	r3, [pc, #312]	; (154b0 <lv_theme_material_init+0x2fc>)
   15376:	4798      	blx	r3
    lv_style_set_pad_top(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
   15378:	6824      	ldr	r4, [r4, #0]
   1537a:	3430      	adds	r4, #48	; 0x30
   1537c:	2000      	movs	r0, #0
   1537e:	4b50      	ldr	r3, [pc, #320]	; (154c0 <lv_theme_material_init+0x30c>)
   15380:	4798      	blx	r3
   15382:	2801      	cmp	r0, #1
   15384:	f241 82f4 	bls.w	16970 <lv_theme_material_init+0x17bc>
   15388:	2000      	movs	r0, #0
   1538a:	4b4b      	ldr	r3, [pc, #300]	; (154b8 <lv_theme_material_init+0x304>)
   1538c:	4798      	blx	r3
   1538e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15392:	0040      	lsls	r0, r0, #1
   15394:	3050      	adds	r0, #80	; 0x50
   15396:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1539a:	f081 8303 	bcs.w	169a4 <lv_theme_material_init+0x17f0>
   1539e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   153a0:	2110      	movs	r1, #16
   153a2:	4620      	mov	r0, r4
   153a4:	4b45      	ldr	r3, [pc, #276]	; (154bc <lv_theme_material_init+0x308>)
   153a6:	4798      	blx	r3
    lv_style_set_pad_left(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
   153a8:	4b38      	ldr	r3, [pc, #224]	; (1548c <lv_theme_material_init+0x2d8>)
   153aa:	681c      	ldr	r4, [r3, #0]
   153ac:	3430      	adds	r4, #48	; 0x30
   153ae:	2000      	movs	r0, #0
   153b0:	4b43      	ldr	r3, [pc, #268]	; (154c0 <lv_theme_material_init+0x30c>)
   153b2:	4798      	blx	r3
   153b4:	2801      	cmp	r0, #1
   153b6:	f241 8303 	bls.w	169c0 <lv_theme_material_init+0x180c>
   153ba:	2000      	movs	r0, #0
   153bc:	4b3e      	ldr	r3, [pc, #248]	; (154b8 <lv_theme_material_init+0x304>)
   153be:	4798      	blx	r3
   153c0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   153c4:	0040      	lsls	r0, r0, #1
   153c6:	3050      	adds	r0, #80	; 0x50
   153c8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   153cc:	f081 8312 	bcs.w	169f4 <lv_theme_material_init+0x1840>
   153d0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   153d2:	2112      	movs	r1, #18
   153d4:	4620      	mov	r0, r4
   153d6:	4b39      	ldr	r3, [pc, #228]	; (154bc <lv_theme_material_init+0x308>)
   153d8:	4798      	blx	r3
    lv_style_set_pad_right(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
   153da:	4b2c      	ldr	r3, [pc, #176]	; (1548c <lv_theme_material_init+0x2d8>)
   153dc:	681c      	ldr	r4, [r3, #0]
   153de:	3430      	adds	r4, #48	; 0x30
   153e0:	2000      	movs	r0, #0
   153e2:	4b37      	ldr	r3, [pc, #220]	; (154c0 <lv_theme_material_init+0x30c>)
   153e4:	4798      	blx	r3
   153e6:	2801      	cmp	r0, #1
   153e8:	f241 8328 	bls.w	16a3c <lv_theme_material_init+0x1888>
   153ec:	2000      	movs	r0, #0
   153ee:	4b32      	ldr	r3, [pc, #200]	; (154b8 <lv_theme_material_init+0x304>)
   153f0:	4798      	blx	r3
   153f2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   153f6:	0040      	lsls	r0, r0, #1
   153f8:	3050      	adds	r0, #80	; 0x50
   153fa:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   153fe:	f081 8337 	bcs.w	16a70 <lv_theme_material_init+0x18bc>
   15402:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   15404:	2113      	movs	r1, #19
   15406:	4620      	mov	r0, r4
   15408:	4b2c      	ldr	r3, [pc, #176]	; (154bc <lv_theme_material_init+0x308>)
   1540a:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
   1540c:	4b1f      	ldr	r3, [pc, #124]	; (1548c <lv_theme_material_init+0x2d8>)
   1540e:	681c      	ldr	r4, [r3, #0]
   15410:	3430      	adds	r4, #48	; 0x30
   15412:	2000      	movs	r0, #0
   15414:	4b2a      	ldr	r3, [pc, #168]	; (154c0 <lv_theme_material_init+0x30c>)
   15416:	4798      	blx	r3
   15418:	2801      	cmp	r0, #1
   1541a:	f241 8337 	bls.w	16a8c <lv_theme_material_init+0x18d8>
   1541e:	2000      	movs	r0, #0
   15420:	4b25      	ldr	r3, [pc, #148]	; (154b8 <lv_theme_material_init+0x304>)
   15422:	4798      	blx	r3
   15424:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15428:	0040      	lsls	r0, r0, #1
   1542a:	3050      	adds	r0, #80	; 0x50
   1542c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15430:	f081 8346 	bcs.w	16ac0 <lv_theme_material_init+0x190c>
   15434:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   15436:	2111      	movs	r1, #17
   15438:	4620      	mov	r0, r4
   1543a:	4b20      	ldr	r3, [pc, #128]	; (154bc <lv_theme_material_init+0x308>)
   1543c:	4798      	blx	r3
    lv_style_set_text_color(&styles->calendar_header, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x888888) : LV_COLOR_WHITE);
   1543e:	4b13      	ldr	r3, [pc, #76]	; (1548c <lv_theme_material_init+0x2d8>)
   15440:	6818      	ldr	r0, [r3, #0]
   15442:	6a1b      	ldr	r3, [r3, #32]
   15444:	f013 0302 	ands.w	r3, r3, #2
   15448:	bf14      	ite	ne
   1544a:	2122      	movne	r1, #34	; 0x22
   1544c:	213f      	moveq	r1, #63	; 0x3f
   1544e:	2b00      	cmp	r3, #0
   15450:	bf14      	ite	ne
   15452:	2311      	movne	r3, #17
   15454:	231f      	moveq	r3, #31
   15456:	f04f 0200 	mov.w	r2, #0
   1545a:	f363 0204 	bfi	r2, r3, #0, #5
   1545e:	f361 124a 	bfi	r2, r1, #5, #6
   15462:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   15466:	f249 0189 	movw	r1, #37001	; 0x9089
   1546a:	3030      	adds	r0, #48	; 0x30
   1546c:	4b11      	ldr	r3, [pc, #68]	; (154b4 <lv_theme_material_init+0x300>)
   1546e:	4798      	blx	r3
    style_init_reset(&styles->calendar_daynames);
   15470:	4c06      	ldr	r4, [pc, #24]	; (1548c <lv_theme_material_init+0x2d8>)
   15472:	6820      	ldr	r0, [r4, #0]
   15474:	3034      	adds	r0, #52	; 0x34
   15476:	4b0e      	ldr	r3, [pc, #56]	; (154b0 <lv_theme_material_init+0x2fc>)
   15478:	4798      	blx	r3
    lv_style_set_text_color(&styles->calendar_daynames, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex3(0xeee));
   1547a:	6820      	ldr	r0, [r4, #0]
   1547c:	3034      	adds	r0, #52	; 0x34
   1547e:	6a23      	ldr	r3, [r4, #32]
   15480:	f013 0f02 	tst.w	r3, #2
   15484:	f041 832a 	bne.w	16adc <lv_theme_material_init+0x1928>
   15488:	e01c      	b.n	154c4 <lv_theme_material_init+0x310>
   1548a:	bf00      	nop
   1548c:	2000abd4 	.word	0x2000abd4
   15490:	000131a1 	.word	0x000131a1
   15494:	00014399 	.word	0x00014399
   15498:	000150b5 	.word	0x000150b5
   1549c:	00014501 	.word	0x00014501
   154a0:	0001478d 	.word	0x0001478d
   154a4:	000148d1 	.word	0x000148d1
   154a8:	00014af1 	.word	0x00014af1
   154ac:	00014fa9 	.word	0x00014fa9
   154b0:	00013181 	.word	0x00013181
   154b4:	00006161 	.word	0x00006161
   154b8:	000101bd 	.word	0x000101bd
   154bc:	00006039 	.word	0x00006039
   154c0:	000101d9 	.word	0x000101d9
   154c4:	231d      	movs	r3, #29
   154c6:	213b      	movs	r1, #59	; 0x3b
   154c8:	461c      	mov	r4, r3
   154ca:	f04f 0200 	mov.w	r2, #0
   154ce:	f364 0204 	bfi	r2, r4, #0, #5
   154d2:	f361 124a 	bfi	r2, r1, #5, #6
   154d6:	f363 22cf 	bfi	r2, r3, #11, #5
   154da:	f248 0189 	movw	r1, #32905	; 0x8089
   154de:	4bb8      	ldr	r3, [pc, #736]	; (157c0 <lv_theme_material_init+0x60c>)
   154e0:	4798      	blx	r3
    lv_style_set_pad_left(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
   154e2:	4bb8      	ldr	r3, [pc, #736]	; (157c4 <lv_theme_material_init+0x610>)
   154e4:	681c      	ldr	r4, [r3, #0]
   154e6:	3434      	adds	r4, #52	; 0x34
   154e8:	2000      	movs	r0, #0
   154ea:	4bb7      	ldr	r3, [pc, #732]	; (157c8 <lv_theme_material_init+0x614>)
   154ec:	4798      	blx	r3
   154ee:	2801      	cmp	r0, #1
   154f0:	f241 82f9 	bls.w	16ae6 <lv_theme_material_init+0x1932>
   154f4:	2000      	movs	r0, #0
   154f6:	4bb5      	ldr	r3, [pc, #724]	; (157cc <lv_theme_material_init+0x618>)
   154f8:	4798      	blx	r3
   154fa:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   154fe:	0040      	lsls	r0, r0, #1
   15500:	3050      	adds	r0, #80	; 0x50
   15502:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15506:	f081 8308 	bcs.w	16b1a <lv_theme_material_init+0x1966>
   1550a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   1550c:	2112      	movs	r1, #18
   1550e:	4620      	mov	r0, r4
   15510:	4baf      	ldr	r3, [pc, #700]	; (157d0 <lv_theme_material_init+0x61c>)
   15512:	4798      	blx	r3
    lv_style_set_pad_right(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
   15514:	4bab      	ldr	r3, [pc, #684]	; (157c4 <lv_theme_material_init+0x610>)
   15516:	681c      	ldr	r4, [r3, #0]
   15518:	3434      	adds	r4, #52	; 0x34
   1551a:	2000      	movs	r0, #0
   1551c:	4baa      	ldr	r3, [pc, #680]	; (157c8 <lv_theme_material_init+0x614>)
   1551e:	4798      	blx	r3
   15520:	2801      	cmp	r0, #1
   15522:	f241 8308 	bls.w	16b36 <lv_theme_material_init+0x1982>
   15526:	2000      	movs	r0, #0
   15528:	4ba8      	ldr	r3, [pc, #672]	; (157cc <lv_theme_material_init+0x618>)
   1552a:	4798      	blx	r3
   1552c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15530:	0040      	lsls	r0, r0, #1
   15532:	3050      	adds	r0, #80	; 0x50
   15534:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15538:	f081 8317 	bcs.w	16b6a <lv_theme_material_init+0x19b6>
   1553c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   1553e:	2113      	movs	r1, #19
   15540:	4620      	mov	r0, r4
   15542:	4ba3      	ldr	r3, [pc, #652]	; (157d0 <lv_theme_material_init+0x61c>)
   15544:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
   15546:	4b9f      	ldr	r3, [pc, #636]	; (157c4 <lv_theme_material_init+0x610>)
   15548:	681c      	ldr	r4, [r3, #0]
   1554a:	3434      	adds	r4, #52	; 0x34
   1554c:	2000      	movs	r0, #0
   1554e:	4b9e      	ldr	r3, [pc, #632]	; (157c8 <lv_theme_material_init+0x614>)
   15550:	4798      	blx	r3
   15552:	2801      	cmp	r0, #1
   15554:	f241 8317 	bls.w	16b86 <lv_theme_material_init+0x19d2>
   15558:	2000      	movs	r0, #0
   1555a:	4b9c      	ldr	r3, [pc, #624]	; (157cc <lv_theme_material_init+0x618>)
   1555c:	4798      	blx	r3
   1555e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15562:	0040      	lsls	r0, r0, #1
   15564:	3050      	adds	r0, #80	; 0x50
   15566:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1556a:	f081 8326 	bcs.w	16bba <lv_theme_material_init+0x1a06>
   1556e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   15570:	2111      	movs	r1, #17
   15572:	4620      	mov	r0, r4
   15574:	4b96      	ldr	r3, [pc, #600]	; (157d0 <lv_theme_material_init+0x61c>)
   15576:	4798      	blx	r3
    style_init_reset(&styles->calendar_date_nums);
   15578:	4c92      	ldr	r4, [pc, #584]	; (157c4 <lv_theme_material_init+0x610>)
   1557a:	6820      	ldr	r0, [r4, #0]
   1557c:	302c      	adds	r0, #44	; 0x2c
   1557e:	4b95      	ldr	r3, [pc, #596]	; (157d4 <lv_theme_material_init+0x620>)
   15580:	4798      	blx	r3
    lv_style_set_radius(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(4));
   15582:	6824      	ldr	r4, [r4, #0]
   15584:	342c      	adds	r4, #44	; 0x2c
   15586:	2000      	movs	r0, #0
   15588:	4b90      	ldr	r3, [pc, #576]	; (157cc <lv_theme_material_init+0x618>)
   1558a:	4798      	blx	r3
   1558c:	3014      	adds	r0, #20
   1558e:	0080      	lsls	r0, r0, #2
   15590:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15594:	f081 831f 	bcs.w	16bd6 <lv_theme_material_init+0x1a22>
   15598:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   1559a:	2101      	movs	r1, #1
   1559c:	4620      	mov	r0, r4
   1559e:	4b8c      	ldr	r3, [pc, #560]	; (157d0 <lv_theme_material_init+0x61c>)
   155a0:	4798      	blx	r3
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
   155a2:	4b88      	ldr	r3, [pc, #544]	; (157c4 <lv_theme_material_init+0x610>)
   155a4:	6818      	ldr	r0, [r3, #0]
   155a6:	302c      	adds	r0, #44	; 0x2c
   155a8:	6a1b      	ldr	r3, [r3, #32]
   155aa:	f013 0f02 	tst.w	r3, #2
   155ae:	f041 831f 	bne.w	16bf0 <lv_theme_material_init+0x1a3c>
   155b2:	231f      	movs	r3, #31
   155b4:	213f      	movs	r1, #63	; 0x3f
   155b6:	461c      	mov	r4, r3
   155b8:	f04f 0200 	mov.w	r2, #0
   155bc:	f364 0204 	bfi	r2, r4, #0, #5
   155c0:	f361 124a 	bfi	r2, r1, #5, #6
   155c4:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   155c8:	f248 1189 	movw	r1, #33161	; 0x8189
   155cc:	4b7c      	ldr	r3, [pc, #496]	; (157c0 <lv_theme_material_init+0x60c>)
   155ce:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_CHECKED, IS_LIGHT ? LV_OPA_20 : LV_OPA_40);
   155d0:	4b7c      	ldr	r3, [pc, #496]	; (157c4 <lv_theme_material_init+0x610>)
   155d2:	6818      	ldr	r0, [r3, #0]
   155d4:	6a1b      	ldr	r3, [r3, #32]
   155d6:	f013 0f02 	tst.w	r3, #2
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   155da:	bf14      	ite	ne
   155dc:	2233      	movne	r2, #51	; 0x33
   155de:	2266      	moveq	r2, #102	; 0x66
   155e0:	f44f 7196 	mov.w	r1, #300	; 0x12c
   155e4:	302c      	adds	r0, #44	; 0x2c
   155e6:	4d7c      	ldr	r5, [pc, #496]	; (157d8 <lv_theme_material_init+0x624>)
   155e8:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_PRESSED, LV_OPA_20);
   155ea:	4c76      	ldr	r4, [pc, #472]	; (157c4 <lv_theme_material_init+0x610>)
   155ec:	6820      	ldr	r0, [r4, #0]
   155ee:	2233      	movs	r2, #51	; 0x33
   155f0:	f241 012c 	movw	r1, #4140	; 0x102c
   155f4:	302c      	adds	r0, #44	; 0x2c
   155f6:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_FOCUSED, LV_OPA_COVER);
   155f8:	6820      	ldr	r0, [r4, #0]
   155fa:	22ff      	movs	r2, #255	; 0xff
   155fc:	f44f 710b 	mov.w	r1, #556	; 0x22c
   15600:	302c      	adds	r0, #44	; 0x2c
   15602:	47a8      	blx	r5
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_FOCUSED, LV_COLOR_WHITE);
   15604:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   15606:	4b75      	ldr	r3, [pc, #468]	; (157dc <lv_theme_material_init+0x628>)
   15608:	881a      	ldrh	r2, [r3, #0]
   1560a:	f248 2189 	movw	r1, #33417	; 0x8289
   1560e:	302c      	adds	r0, #44	; 0x2c
   15610:	4d6b      	ldr	r5, [pc, #428]	; (157c0 <lv_theme_material_init+0x60c>)
   15612:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_FOCUSED, theme.color_primary);
   15614:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   15616:	89a2      	ldrh	r2, [r4, #12]
   15618:	f240 2129 	movw	r1, #553	; 0x229
   1561c:	302c      	adds	r0, #44	; 0x2c
   1561e:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x666666) : LV_COLOR_WHITE);
   15620:	6820      	ldr	r0, [r4, #0]
   15622:	6a23      	ldr	r3, [r4, #32]
   15624:	f013 0302 	ands.w	r3, r3, #2
   15628:	bf14      	ite	ne
   1562a:	2119      	movne	r1, #25
   1562c:	213f      	moveq	r1, #63	; 0x3f
   1562e:	2b00      	cmp	r3, #0
   15630:	bf14      	ite	ne
   15632:	230c      	movne	r3, #12
   15634:	231f      	moveq	r3, #31
   15636:	f04f 0200 	mov.w	r2, #0
   1563a:	f363 0204 	bfi	r2, r3, #0, #5
   1563e:	f361 124a 	bfi	r2, r1, #5, #6
   15642:	f363 22cf 	bfi	r2, r3, #11, #5
   15646:	2129      	movs	r1, #41	; 0x29
   15648:	302c      	adds	r0, #44	; 0x2c
   1564a:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_CHECKED, theme.color_primary);
   1564c:	6820      	ldr	r0, [r4, #0]
   1564e:	89a2      	ldrh	r2, [r4, #12]
   15650:	f240 1129 	movw	r1, #297	; 0x129
   15654:	302c      	adds	r0, #44	; 0x2c
   15656:	47a8      	blx	r5
    lv_style_set_border_width(&styles->calendar_date_nums, LV_STATE_CHECKED, 2);
   15658:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   1565a:	2202      	movs	r2, #2
   1565c:	f44f 7198 	mov.w	r1, #304	; 0x130
   15660:	302c      	adds	r0, #44	; 0x2c
   15662:	4e5b      	ldr	r6, [pc, #364]	; (157d0 <lv_theme_material_init+0x61c>)
   15664:	47b0      	blx	r6
    lv_style_set_border_side(&styles->calendar_date_nums, LV_STATE_CHECKED, LV_BORDER_SIDE_LEFT);
   15666:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
   15668:	2204      	movs	r2, #4
   1566a:	f240 1131 	movw	r1, #305	; 0x131
   1566e:	302c      	adds	r0, #44	; 0x2c
   15670:	47b0      	blx	r6
    lv_style_set_border_color(&styles->calendar_date_nums, LV_STATE_CHECKED, theme.color_primary);
   15672:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   15674:	89a2      	ldrh	r2, [r4, #12]
   15676:	f240 1139 	movw	r1, #313	; 0x139
   1567a:	302c      	adds	r0, #44	; 0x2c
   1567c:	47a8      	blx	r5
    lv_style_set_pad_inner(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(3));
   1567e:	6824      	ldr	r4, [r4, #0]
   15680:	342c      	adds	r4, #44	; 0x2c
   15682:	2000      	movs	r0, #0
   15684:	4b51      	ldr	r3, [pc, #324]	; (157cc <lv_theme_material_init+0x618>)
   15686:	4798      	blx	r3
   15688:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1568c:	3050      	adds	r0, #80	; 0x50
   1568e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15692:	f081 82b2 	bcs.w	16bfa <lv_theme_material_init+0x1a46>
   15696:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   15698:	2114      	movs	r1, #20
   1569a:	4620      	mov	r0, r4
   1569c:	4b4c      	ldr	r3, [pc, #304]	; (157d0 <lv_theme_material_init+0x61c>)
   1569e:	4798      	blx	r3
    lv_style_set_pad_left(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
   156a0:	4b48      	ldr	r3, [pc, #288]	; (157c4 <lv_theme_material_init+0x610>)
   156a2:	681c      	ldr	r4, [r3, #0]
   156a4:	342c      	adds	r4, #44	; 0x2c
   156a6:	2000      	movs	r0, #0
   156a8:	4b47      	ldr	r3, [pc, #284]	; (157c8 <lv_theme_material_init+0x614>)
   156aa:	4798      	blx	r3
   156ac:	2801      	cmp	r0, #1
   156ae:	f241 82b2 	bls.w	16c16 <lv_theme_material_init+0x1a62>
   156b2:	2000      	movs	r0, #0
   156b4:	4b45      	ldr	r3, [pc, #276]	; (157cc <lv_theme_material_init+0x618>)
   156b6:	4798      	blx	r3
   156b8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   156bc:	0040      	lsls	r0, r0, #1
   156be:	3050      	adds	r0, #80	; 0x50
   156c0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   156c4:	f081 82c1 	bcs.w	16c4a <lv_theme_material_init+0x1a96>
   156c8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   156ca:	2112      	movs	r1, #18
   156cc:	4620      	mov	r0, r4
   156ce:	4b40      	ldr	r3, [pc, #256]	; (157d0 <lv_theme_material_init+0x61c>)
   156d0:	4798      	blx	r3
    lv_style_set_pad_right(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
   156d2:	4b3c      	ldr	r3, [pc, #240]	; (157c4 <lv_theme_material_init+0x610>)
   156d4:	681c      	ldr	r4, [r3, #0]
   156d6:	342c      	adds	r4, #44	; 0x2c
   156d8:	2000      	movs	r0, #0
   156da:	4b3b      	ldr	r3, [pc, #236]	; (157c8 <lv_theme_material_init+0x614>)
   156dc:	4798      	blx	r3
   156de:	2801      	cmp	r0, #1
   156e0:	f241 82c1 	bls.w	16c66 <lv_theme_material_init+0x1ab2>
   156e4:	2000      	movs	r0, #0
   156e6:	4b39      	ldr	r3, [pc, #228]	; (157cc <lv_theme_material_init+0x618>)
   156e8:	4798      	blx	r3
   156ea:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   156ee:	0040      	lsls	r0, r0, #1
   156f0:	3050      	adds	r0, #80	; 0x50
   156f2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   156f6:	f081 82d0 	bcs.w	16c9a <lv_theme_material_init+0x1ae6>
   156fa:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   156fc:	2113      	movs	r1, #19
   156fe:	4620      	mov	r0, r4
   15700:	4b33      	ldr	r3, [pc, #204]	; (157d0 <lv_theme_material_init+0x61c>)
   15702:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
   15704:	4b2f      	ldr	r3, [pc, #188]	; (157c4 <lv_theme_material_init+0x610>)
   15706:	681c      	ldr	r4, [r3, #0]
   15708:	342c      	adds	r4, #44	; 0x2c
   1570a:	2000      	movs	r0, #0
   1570c:	4b2e      	ldr	r3, [pc, #184]	; (157c8 <lv_theme_material_init+0x614>)
   1570e:	4798      	blx	r3
   15710:	2801      	cmp	r0, #1
   15712:	f241 82d0 	bls.w	16cb6 <lv_theme_material_init+0x1b02>
   15716:	2000      	movs	r0, #0
   15718:	4b2c      	ldr	r3, [pc, #176]	; (157cc <lv_theme_material_init+0x618>)
   1571a:	4798      	blx	r3
   1571c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15720:	0040      	lsls	r0, r0, #1
   15722:	3050      	adds	r0, #80	; 0x50
   15724:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15728:	f081 82df 	bcs.w	16cea <lv_theme_material_init+0x1b36>
   1572c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   1572e:	2111      	movs	r1, #17
   15730:	4620      	mov	r0, r4
   15732:	4b27      	ldr	r3, [pc, #156]	; (157d0 <lv_theme_material_init+0x61c>)
   15734:	4798      	blx	r3
    style_init_reset(&styles->cpicker_bg);
   15736:	4c23      	ldr	r4, [pc, #140]	; (157c4 <lv_theme_material_init+0x610>)
   15738:	6820      	ldr	r0, [r4, #0]
   1573a:	3038      	adds	r0, #56	; 0x38
   1573c:	4b25      	ldr	r3, [pc, #148]	; (157d4 <lv_theme_material_init+0x620>)
   1573e:	4798      	blx	r3
    lv_style_set_scale_width(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(30));
   15740:	6824      	ldr	r4, [r4, #0]
   15742:	3438      	adds	r4, #56	; 0x38
   15744:	2000      	movs	r0, #0
   15746:	4b21      	ldr	r3, [pc, #132]	; (157cc <lv_theme_material_init+0x618>)
   15748:	4798      	blx	r3
   1574a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1574e:	0040      	lsls	r0, r0, #1
   15750:	3050      	adds	r0, #80	; 0x50
   15752:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15756:	f081 82d6 	bcs.w	16d06 <lv_theme_material_init+0x1b52>
   1575a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
   1575c:	21c0      	movs	r1, #192	; 0xc0
   1575e:	4620      	mov	r0, r4
   15760:	4b1b      	ldr	r3, [pc, #108]	; (157d0 <lv_theme_material_init+0x61c>)
   15762:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
   15764:	4c17      	ldr	r4, [pc, #92]	; (157c4 <lv_theme_material_init+0x610>)
   15766:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   15768:	22ff      	movs	r2, #255	; 0xff
   1576a:	212c      	movs	r1, #44	; 0x2c
   1576c:	3038      	adds	r0, #56	; 0x38
   1576e:	4b1a      	ldr	r3, [pc, #104]	; (157d8 <lv_theme_material_init+0x624>)
   15770:	4798      	blx	r3
    lv_style_set_bg_color(&styles->cpicker_bg, LV_STATE_DEFAULT, COLOR_SCR);
   15772:	6820      	ldr	r0, [r4, #0]
   15774:	6a23      	ldr	r3, [r4, #32]
   15776:	f013 0302 	ands.w	r3, r3, #2
   1577a:	bf14      	ite	ne
   1577c:	211d      	movne	r1, #29
   1577e:	2108      	moveq	r1, #8
   15780:	2b00      	cmp	r3, #0
   15782:	bf15      	itete	ne
   15784:	243b      	movne	r4, #59	; 0x3b
   15786:	2412      	moveq	r4, #18
   15788:	231e      	movne	r3, #30
   1578a:	230b      	moveq	r3, #11
   1578c:	f04f 0200 	mov.w	r2, #0
   15790:	f363 0204 	bfi	r2, r3, #0, #5
   15794:	f364 124a 	bfi	r2, r4, #5, #6
   15798:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   1579c:	2129      	movs	r1, #41	; 0x29
   1579e:	3038      	adds	r0, #56	; 0x38
   157a0:	4b07      	ldr	r3, [pc, #28]	; (157c0 <lv_theme_material_init+0x60c>)
   157a2:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(20));
   157a4:	4b07      	ldr	r3, [pc, #28]	; (157c4 <lv_theme_material_init+0x610>)
   157a6:	681c      	ldr	r4, [r3, #0]
   157a8:	3438      	adds	r4, #56	; 0x38
   157aa:	2000      	movs	r0, #0
   157ac:	4b07      	ldr	r3, [pc, #28]	; (157cc <lv_theme_material_init+0x618>)
   157ae:	4798      	blx	r3
   157b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   157b4:	0080      	lsls	r0, r0, #2
   157b6:	3050      	adds	r0, #80	; 0x50
   157b8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   157bc:	e010      	b.n	157e0 <lv_theme_material_init+0x62c>
   157be:	bf00      	nop
   157c0:	00006161 	.word	0x00006161
   157c4:	2000abd4 	.word	0x2000abd4
   157c8:	000101d9 	.word	0x000101d9
   157cc:	000101bd 	.word	0x000101bd
   157d0:	00006039 	.word	0x00006039
   157d4:	00013181 	.word	0x00013181
   157d8:	00006289 	.word	0x00006289
   157dc:	0001b780 	.word	0x0001b780
   157e0:	f081 829f 	bcs.w	16d22 <lv_theme_material_init+0x1b6e>
   157e4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   157e6:	2114      	movs	r1, #20
   157e8:	4620      	mov	r0, r4
   157ea:	4eb6      	ldr	r6, [pc, #728]	; (15ac4 <lv_theme_material_init+0x910>)
   157ec:	47b0      	blx	r6
    lv_style_set_radius(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   157ee:	4cb6      	ldr	r4, [pc, #728]	; (15ac8 <lv_theme_material_init+0x914>)
   157f0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   157f2:	f647 72ff 	movw	r2, #32767	; 0x7fff
   157f6:	2101      	movs	r1, #1
   157f8:	3038      	adds	r0, #56	; 0x38
   157fa:	47b0      	blx	r6
    style_init_reset(&styles->cpicker_indic);
   157fc:	6820      	ldr	r0, [r4, #0]
   157fe:	303c      	adds	r0, #60	; 0x3c
   15800:	4bb2      	ldr	r3, [pc, #712]	; (15acc <lv_theme_material_init+0x918>)
   15802:	4798      	blx	r3
    lv_style_set_radius(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   15804:	6820      	ldr	r0, [r4, #0]
   15806:	f647 72ff 	movw	r2, #32767	; 0x7fff
   1580a:	2101      	movs	r1, #1
   1580c:	303c      	adds	r0, #60	; 0x3c
   1580e:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_COLOR_WHITE);
   15810:	6820      	ldr	r0, [r4, #0]
   15812:	4faf      	ldr	r7, [pc, #700]	; (15ad0 <lv_theme_material_init+0x91c>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   15814:	883a      	ldrh	r2, [r7, #0]
   15816:	2129      	movs	r1, #41	; 0x29
   15818:	303c      	adds	r0, #60	; 0x3c
   1581a:	4dae      	ldr	r5, [pc, #696]	; (15ad4 <lv_theme_material_init+0x920>)
   1581c:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
   1581e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   15820:	22ff      	movs	r2, #255	; 0xff
   15822:	212c      	movs	r1, #44	; 0x2c
   15824:	303c      	adds	r0, #60	; 0x3c
   15826:	4bac      	ldr	r3, [pc, #688]	; (15ad8 <lv_theme_material_init+0x924>)
   15828:	4798      	blx	r3
    lv_style_set_border_width(&styles->cpicker_indic, LV_STATE_DEFAULT, 2);
   1582a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   1582c:	2202      	movs	r2, #2
   1582e:	2130      	movs	r1, #48	; 0x30
   15830:	303c      	adds	r0, #60	; 0x3c
   15832:	47b0      	blx	r6
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_COLOR_GRAY);
   15834:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   15836:	88ba      	ldrh	r2, [r7, #4]
   15838:	2139      	movs	r1, #57	; 0x39
   1583a:	303c      	adds	r0, #60	; 0x3c
   1583c:	47a8      	blx	r5
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_FOCUSED, theme.color_primary);
   1583e:	6820      	ldr	r0, [r4, #0]
   15840:	89a2      	ldrh	r2, [r4, #12]
   15842:	f240 2139 	movw	r1, #569	; 0x239
   15846:	303c      	adds	r0, #60	; 0x3c
   15848:	47a8      	blx	r5
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_EDITED, theme.color_secondary);
   1584a:	6820      	ldr	r0, [r4, #0]
   1584c:	89e2      	ldrh	r2, [r4, #14]
   1584e:	f240 4139 	movw	r1, #1081	; 0x439
   15852:	303c      	adds	r0, #60	; 0x3c
   15854:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
   15856:	6824      	ldr	r4, [r4, #0]
   15858:	343c      	adds	r4, #60	; 0x3c
   1585a:	2000      	movs	r0, #0
   1585c:	4b9f      	ldr	r3, [pc, #636]	; (15adc <lv_theme_material_init+0x928>)
   1585e:	4798      	blx	r3
   15860:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   15864:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   15868:	3050      	adds	r0, #80	; 0x50
   1586a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1586e:	f081 8266 	bcs.w	16d3e <lv_theme_material_init+0x1b8a>
   15872:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   15874:	2112      	movs	r1, #18
   15876:	4620      	mov	r0, r4
   15878:	4b92      	ldr	r3, [pc, #584]	; (15ac4 <lv_theme_material_init+0x910>)
   1587a:	4798      	blx	r3
    lv_style_set_pad_right(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
   1587c:	4b92      	ldr	r3, [pc, #584]	; (15ac8 <lv_theme_material_init+0x914>)
   1587e:	681c      	ldr	r4, [r3, #0]
   15880:	343c      	adds	r4, #60	; 0x3c
   15882:	2000      	movs	r0, #0
   15884:	4b95      	ldr	r3, [pc, #596]	; (15adc <lv_theme_material_init+0x928>)
   15886:	4798      	blx	r3
   15888:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1588c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   15890:	3050      	adds	r0, #80	; 0x50
   15892:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15896:	f081 8261 	bcs.w	16d5c <lv_theme_material_init+0x1ba8>
   1589a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   1589c:	2113      	movs	r1, #19
   1589e:	4620      	mov	r0, r4
   158a0:	4b88      	ldr	r3, [pc, #544]	; (15ac4 <lv_theme_material_init+0x910>)
   158a2:	4798      	blx	r3
    lv_style_set_pad_top(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
   158a4:	4b88      	ldr	r3, [pc, #544]	; (15ac8 <lv_theme_material_init+0x914>)
   158a6:	681c      	ldr	r4, [r3, #0]
   158a8:	343c      	adds	r4, #60	; 0x3c
   158aa:	2000      	movs	r0, #0
   158ac:	4b8b      	ldr	r3, [pc, #556]	; (15adc <lv_theme_material_init+0x928>)
   158ae:	4798      	blx	r3
   158b0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   158b4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   158b8:	3050      	adds	r0, #80	; 0x50
   158ba:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   158be:	f081 8261 	bcs.w	16d84 <lv_theme_material_init+0x1bd0>
   158c2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   158c4:	2110      	movs	r1, #16
   158c6:	4620      	mov	r0, r4
   158c8:	4b7e      	ldr	r3, [pc, #504]	; (15ac4 <lv_theme_material_init+0x910>)
   158ca:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
   158cc:	4b7e      	ldr	r3, [pc, #504]	; (15ac8 <lv_theme_material_init+0x914>)
   158ce:	681c      	ldr	r4, [r3, #0]
   158d0:	343c      	adds	r4, #60	; 0x3c
   158d2:	2000      	movs	r0, #0
   158d4:	4b81      	ldr	r3, [pc, #516]	; (15adc <lv_theme_material_init+0x928>)
   158d6:	4798      	blx	r3
   158d8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   158dc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   158e0:	3050      	adds	r0, #80	; 0x50
   158e2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   158e6:	f081 825c 	bcs.w	16da2 <lv_theme_material_init+0x1bee>
   158ea:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   158ec:	2111      	movs	r1, #17
   158ee:	4620      	mov	r0, r4
   158f0:	4b74      	ldr	r3, [pc, #464]	; (15ac4 <lv_theme_material_init+0x910>)
   158f2:	4798      	blx	r3
    style_init_reset(&styles->cb_bg);
   158f4:	4c74      	ldr	r4, [pc, #464]	; (15ac8 <lv_theme_material_init+0x914>)
   158f6:	6820      	ldr	r0, [r4, #0]
   158f8:	304c      	adds	r0, #76	; 0x4c
   158fa:	4b74      	ldr	r3, [pc, #464]	; (15acc <lv_theme_material_init+0x918>)
   158fc:	4798      	blx	r3
    lv_style_set_radius(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(4));
   158fe:	6824      	ldr	r4, [r4, #0]
   15900:	344c      	adds	r4, #76	; 0x4c
   15902:	2000      	movs	r0, #0
   15904:	4b75      	ldr	r3, [pc, #468]	; (15adc <lv_theme_material_init+0x928>)
   15906:	4798      	blx	r3
   15908:	3014      	adds	r0, #20
   1590a:	0080      	lsls	r0, r0, #2
   1590c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15910:	f081 8256 	bcs.w	16dc0 <lv_theme_material_init+0x1c0c>
   15914:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   15916:	2101      	movs	r1, #1
   15918:	4620      	mov	r0, r4
   1591a:	4b6a      	ldr	r3, [pc, #424]	; (15ac4 <lv_theme_material_init+0x910>)
   1591c:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
   1591e:	4b6a      	ldr	r3, [pc, #424]	; (15ac8 <lv_theme_material_init+0x914>)
   15920:	681c      	ldr	r4, [r3, #0]
   15922:	344c      	adds	r4, #76	; 0x4c
   15924:	2000      	movs	r0, #0
   15926:	4b6d      	ldr	r3, [pc, #436]	; (15adc <lv_theme_material_init+0x928>)
   15928:	4798      	blx	r3
   1592a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1592e:	0040      	lsls	r0, r0, #1
   15930:	3050      	adds	r0, #80	; 0x50
   15932:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15936:	f081 8250 	bcs.w	16dda <lv_theme_material_init+0x1c26>
   1593a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   1593c:	2114      	movs	r1, #20
   1593e:	4620      	mov	r0, r4
   15940:	4b60      	ldr	r3, [pc, #384]	; (15ac4 <lv_theme_material_init+0x910>)
   15942:	4798      	blx	r3
    lv_style_set_outline_color(&styles->cb_bg, LV_STATE_DEFAULT, theme.color_primary);
   15944:	4c60      	ldr	r4, [pc, #384]	; (15ac8 <lv_theme_material_init+0x914>)
   15946:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
   15948:	89a2      	ldrh	r2, [r4, #12]
   1594a:	2149      	movs	r1, #73	; 0x49
   1594c:	304c      	adds	r0, #76	; 0x4c
   1594e:	4b61      	ldr	r3, [pc, #388]	; (15ad4 <lv_theme_material_init+0x920>)
   15950:	4798      	blx	r3
    lv_style_set_outline_opa(&styles->cb_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
   15952:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
   15954:	2200      	movs	r2, #0
   15956:	214c      	movs	r1, #76	; 0x4c
   15958:	4408      	add	r0, r1
   1595a:	4d5f      	ldr	r5, [pc, #380]	; (15ad8 <lv_theme_material_init+0x924>)
   1595c:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->cb_bg, LV_STATE_FOCUSED, LV_OPA_50);
   1595e:	6820      	ldr	r0, [r4, #0]
   15960:	227f      	movs	r2, #127	; 0x7f
   15962:	f44f 7113 	mov.w	r1, #588	; 0x24c
   15966:	304c      	adds	r0, #76	; 0x4c
   15968:	47a8      	blx	r5
    lv_style_set_outline_width(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(3));
   1596a:	6824      	ldr	r4, [r4, #0]
   1596c:	344c      	adds	r4, #76	; 0x4c
   1596e:	2000      	movs	r0, #0
   15970:	4b5a      	ldr	r3, [pc, #360]	; (15adc <lv_theme_material_init+0x928>)
   15972:	4798      	blx	r3
   15974:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   15978:	3050      	adds	r0, #80	; 0x50
   1597a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1597e:	f081 823a 	bcs.w	16df6 <lv_theme_material_init+0x1c42>
   15982:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
   15984:	2140      	movs	r1, #64	; 0x40
   15986:	4620      	mov	r0, r4
   15988:	4b4e      	ldr	r3, [pc, #312]	; (15ac4 <lv_theme_material_init+0x910>)
   1598a:	4798      	blx	r3
    lv_style_set_outline_pad(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
   1598c:	4b4e      	ldr	r3, [pc, #312]	; (15ac8 <lv_theme_material_init+0x914>)
   1598e:	681c      	ldr	r4, [r3, #0]
   15990:	344c      	adds	r4, #76	; 0x4c
   15992:	2000      	movs	r0, #0
   15994:	4b51      	ldr	r3, [pc, #324]	; (15adc <lv_theme_material_init+0x928>)
   15996:	4798      	blx	r3
   15998:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1599c:	0040      	lsls	r0, r0, #1
   1599e:	3050      	adds	r0, #80	; 0x50
   159a0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   159a4:	f081 8235 	bcs.w	16e12 <lv_theme_material_init+0x1c5e>
   159a8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
   159aa:	2141      	movs	r1, #65	; 0x41
   159ac:	4620      	mov	r0, r4
   159ae:	4d45      	ldr	r5, [pc, #276]	; (15ac4 <lv_theme_material_init+0x910>)
   159b0:	47a8      	blx	r5
    lv_style_set_transition_time(&styles->cb_bg, LV_STATE_DEFAULT, TRANSITION_TIME);
   159b2:	4c45      	ldr	r4, [pc, #276]	; (15ac8 <lv_theme_material_init+0x914>)
   159b4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
   159b6:	2296      	movs	r2, #150	; 0x96
   159b8:	21b0      	movs	r1, #176	; 0xb0
   159ba:	304c      	adds	r0, #76	; 0x4c
   159bc:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->cb_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
   159be:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
   159c0:	224c      	movs	r2, #76	; 0x4c
   159c2:	21b7      	movs	r1, #183	; 0xb7
   159c4:	4410      	add	r0, r2
   159c6:	47a8      	blx	r5
    style_init_reset(&styles->cb_bullet);
   159c8:	6820      	ldr	r0, [r4, #0]
   159ca:	3050      	adds	r0, #80	; 0x50
   159cc:	4b3f      	ldr	r3, [pc, #252]	; (15acc <lv_theme_material_init+0x918>)
   159ce:	4798      	blx	r3
    lv_style_set_outline_opa(&styles->cb_bullet, LV_STATE_FOCUSED, LV_OPA_TRANSP);
   159d0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
   159d2:	2200      	movs	r2, #0
   159d4:	f44f 7113 	mov.w	r1, #588	; 0x24c
   159d8:	3050      	adds	r0, #80	; 0x50
   159da:	4b3f      	ldr	r3, [pc, #252]	; (15ad8 <lv_theme_material_init+0x924>)
   159dc:	4798      	blx	r3
    lv_style_set_radius(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(4));
   159de:	6824      	ldr	r4, [r4, #0]
   159e0:	3450      	adds	r4, #80	; 0x50
   159e2:	2000      	movs	r0, #0
   159e4:	4b3d      	ldr	r3, [pc, #244]	; (15adc <lv_theme_material_init+0x928>)
   159e6:	4798      	blx	r3
   159e8:	3014      	adds	r0, #20
   159ea:	0080      	lsls	r0, r0, #2
   159ec:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   159f0:	f081 821d 	bcs.w	16e2e <lv_theme_material_init+0x1c7a>
   159f4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   159f6:	2101      	movs	r1, #1
   159f8:	4620      	mov	r0, r4
   159fa:	4b32      	ldr	r3, [pc, #200]	; (15ac4 <lv_theme_material_init+0x910>)
   159fc:	4798      	blx	r3
    lv_style_set_pattern_image(&styles->cb_bullet, LV_STATE_CHECKED, LV_SYMBOL_OK);
   159fe:	4c32      	ldr	r4, [pc, #200]	; (15ac8 <lv_theme_material_init+0x914>)
   15a00:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
   15a02:	4a37      	ldr	r2, [pc, #220]	; (15ae0 <lv_theme_material_init+0x92c>)
   15a04:	f44f 71b7 	mov.w	r1, #366	; 0x16e
   15a08:	3050      	adds	r0, #80	; 0x50
   15a0a:	4d36      	ldr	r5, [pc, #216]	; (15ae4 <lv_theme_material_init+0x930>)
   15a0c:	47a8      	blx	r5
    lv_style_set_pattern_recolor(&styles->cb_bullet, LV_STATE_CHECKED, LV_COLOR_WHITE);
   15a0e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
   15a10:	4b2f      	ldr	r3, [pc, #188]	; (15ad0 <lv_theme_material_init+0x91c>)
   15a12:	881a      	ldrh	r2, [r3, #0]
   15a14:	f240 1169 	movw	r1, #361	; 0x169
   15a18:	3050      	adds	r0, #80	; 0x50
   15a1a:	4b2e      	ldr	r3, [pc, #184]	; (15ad4 <lv_theme_material_init+0x920>)
   15a1c:	4798      	blx	r3
    lv_style_set_text_font(&styles->cb_bullet, LV_STATE_CHECKED, theme.font_small);
   15a1e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   15a20:	6922      	ldr	r2, [r4, #16]
   15a22:	f248 118e 	movw	r1, #33166	; 0x818e
   15a26:	3050      	adds	r0, #80	; 0x50
   15a28:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   15a2a:	6824      	ldr	r4, [r4, #0]
   15a2c:	3450      	adds	r4, #80	; 0x50
   15a2e:	2000      	movs	r0, #0
   15a30:	4b2a      	ldr	r3, [pc, #168]	; (15adc <lv_theme_material_init+0x928>)
   15a32:	4798      	blx	r3
   15a34:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   15a38:	3050      	adds	r0, #80	; 0x50
   15a3a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15a3e:	f081 8203 	bcs.w	16e48 <lv_theme_material_init+0x1c94>
   15a42:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   15a44:	2112      	movs	r1, #18
   15a46:	4620      	mov	r0, r4
   15a48:	4b1e      	ldr	r3, [pc, #120]	; (15ac4 <lv_theme_material_init+0x910>)
   15a4a:	4798      	blx	r3
    lv_style_set_pad_right(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   15a4c:	4b1e      	ldr	r3, [pc, #120]	; (15ac8 <lv_theme_material_init+0x914>)
   15a4e:	681c      	ldr	r4, [r3, #0]
   15a50:	3450      	adds	r4, #80	; 0x50
   15a52:	2000      	movs	r0, #0
   15a54:	4b21      	ldr	r3, [pc, #132]	; (15adc <lv_theme_material_init+0x928>)
   15a56:	4798      	blx	r3
   15a58:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   15a5c:	3050      	adds	r0, #80	; 0x50
   15a5e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15a62:	f081 81ff 	bcs.w	16e64 <lv_theme_material_init+0x1cb0>
   15a66:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   15a68:	2113      	movs	r1, #19
   15a6a:	4620      	mov	r0, r4
   15a6c:	4b15      	ldr	r3, [pc, #84]	; (15ac4 <lv_theme_material_init+0x910>)
   15a6e:	4798      	blx	r3
    lv_style_set_pad_top(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   15a70:	4b15      	ldr	r3, [pc, #84]	; (15ac8 <lv_theme_material_init+0x914>)
   15a72:	681c      	ldr	r4, [r3, #0]
   15a74:	3450      	adds	r4, #80	; 0x50
   15a76:	2000      	movs	r0, #0
   15a78:	4b18      	ldr	r3, [pc, #96]	; (15adc <lv_theme_material_init+0x928>)
   15a7a:	4798      	blx	r3
   15a7c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   15a80:	3050      	adds	r0, #80	; 0x50
   15a82:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15a86:	f081 81fb 	bcs.w	16e80 <lv_theme_material_init+0x1ccc>
   15a8a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   15a8c:	2110      	movs	r1, #16
   15a8e:	4620      	mov	r0, r4
   15a90:	4b0c      	ldr	r3, [pc, #48]	; (15ac4 <lv_theme_material_init+0x910>)
   15a92:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   15a94:	4b0c      	ldr	r3, [pc, #48]	; (15ac8 <lv_theme_material_init+0x914>)
   15a96:	681c      	ldr	r4, [r3, #0]
   15a98:	3450      	adds	r4, #80	; 0x50
   15a9a:	2000      	movs	r0, #0
   15a9c:	4b0f      	ldr	r3, [pc, #60]	; (15adc <lv_theme_material_init+0x928>)
   15a9e:	4798      	blx	r3
   15aa0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   15aa4:	3050      	adds	r0, #80	; 0x50
   15aa6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15aaa:	f081 81f7 	bcs.w	16e9c <lv_theme_material_init+0x1ce8>
   15aae:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   15ab0:	2111      	movs	r1, #17
   15ab2:	4620      	mov	r0, r4
   15ab4:	4d03      	ldr	r5, [pc, #12]	; (15ac4 <lv_theme_material_init+0x910>)
   15ab6:	47a8      	blx	r5
    style_init_reset(&styles->kb_bg);
   15ab8:	4c03      	ldr	r4, [pc, #12]	; (15ac8 <lv_theme_material_init+0x914>)
   15aba:	6820      	ldr	r0, [r4, #0]
   15abc:	3068      	adds	r0, #104	; 0x68
   15abe:	4b03      	ldr	r3, [pc, #12]	; (15acc <lv_theme_material_init+0x918>)
   15ac0:	4798      	blx	r3
   15ac2:	e011      	b.n	15ae8 <lv_theme_material_init+0x934>
   15ac4:	00006039 	.word	0x00006039
   15ac8:	2000abd4 	.word	0x2000abd4
   15acc:	00013181 	.word	0x00013181
   15ad0:	0001b780 	.word	0x0001b780
   15ad4:	00006161 	.word	0x00006161
   15ad8:	00006289 	.word	0x00006289
   15adc:	000101bd 	.word	0x000101bd
   15ae0:	0001b788 	.word	0x0001b788
   15ae4:	0000639d 	.word	0x0000639d
    lv_style_set_radius(&styles->kb_bg, LV_STATE_DEFAULT, 0);
   15ae8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   15aea:	2200      	movs	r2, #0
   15aec:	2101      	movs	r1, #1
   15aee:	3068      	adds	r0, #104	; 0x68
   15af0:	47a8      	blx	r5
    lv_style_set_border_width(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(4));
   15af2:	6824      	ldr	r4, [r4, #0]
   15af4:	3468      	adds	r4, #104	; 0x68
   15af6:	2000      	movs	r0, #0
   15af8:	4bb5      	ldr	r3, [pc, #724]	; (15dd0 <lv_theme_material_init+0xc1c>)
   15afa:	4798      	blx	r3
   15afc:	3014      	adds	r0, #20
   15afe:	0080      	lsls	r0, r0, #2
   15b00:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15b04:	f081 81d8 	bcs.w	16eb8 <lv_theme_material_init+0x1d04>
   15b08:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   15b0a:	2130      	movs	r1, #48	; 0x30
   15b0c:	4620      	mov	r0, r4
   15b0e:	4db1      	ldr	r5, [pc, #708]	; (15dd4 <lv_theme_material_init+0xc20>)
   15b10:	47a8      	blx	r5
    lv_style_set_border_side(&styles->kb_bg, LV_STATE_DEFAULT, LV_BORDER_SIDE_TOP);
   15b12:	4cb1      	ldr	r4, [pc, #708]	; (15dd8 <lv_theme_material_init+0xc24>)
   15b14:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
   15b16:	2202      	movs	r2, #2
   15b18:	2131      	movs	r1, #49	; 0x31
   15b1a:	3068      	adds	r0, #104	; 0x68
   15b1c:	47a8      	blx	r5
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT : LV_COLOR_BLACK);
   15b1e:	6820      	ldr	r0, [r4, #0]
   15b20:	3068      	adds	r0, #104	; 0x68
   15b22:	6a23      	ldr	r3, [r4, #32]
   15b24:	f013 0f02 	tst.w	r3, #2
   15b28:	f041 81d3 	bne.w	16ed2 <lv_theme_material_init+0x1d1e>
   15b2c:	2300      	movs	r3, #0
   15b2e:	4619      	mov	r1, r3
   15b30:	461c      	mov	r4, r3
   15b32:	f04f 0200 	mov.w	r2, #0
   15b36:	f364 0204 	bfi	r2, r4, #0, #5
   15b3a:	f361 124a 	bfi	r2, r1, #5, #6
   15b3e:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   15b42:	2139      	movs	r1, #57	; 0x39
   15b44:	4da5      	ldr	r5, [pc, #660]	; (15ddc <lv_theme_material_init+0xc28>)
   15b46:	47a8      	blx	r5
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_EDITED, theme.color_secondary);
   15b48:	4ca3      	ldr	r4, [pc, #652]	; (15dd8 <lv_theme_material_init+0xc24>)
   15b4a:	6820      	ldr	r0, [r4, #0]
   15b4c:	89e2      	ldrh	r2, [r4, #14]
   15b4e:	f240 4139 	movw	r1, #1081	; 0x439
   15b52:	3068      	adds	r0, #104	; 0x68
   15b54:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
   15b56:	6824      	ldr	r4, [r4, #0]
   15b58:	3468      	adds	r4, #104	; 0x68
   15b5a:	2000      	movs	r0, #0
   15b5c:	4b9c      	ldr	r3, [pc, #624]	; (15dd0 <lv_theme_material_init+0xc1c>)
   15b5e:	4798      	blx	r3
   15b60:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15b64:	3050      	adds	r0, #80	; 0x50
   15b66:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15b6a:	f081 81b7 	bcs.w	16edc <lv_theme_material_init+0x1d28>
   15b6e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   15b70:	2112      	movs	r1, #18
   15b72:	4620      	mov	r0, r4
   15b74:	4b97      	ldr	r3, [pc, #604]	; (15dd4 <lv_theme_material_init+0xc20>)
   15b76:	4798      	blx	r3
    lv_style_set_pad_right(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
   15b78:	4b97      	ldr	r3, [pc, #604]	; (15dd8 <lv_theme_material_init+0xc24>)
   15b7a:	681c      	ldr	r4, [r3, #0]
   15b7c:	3468      	adds	r4, #104	; 0x68
   15b7e:	2000      	movs	r0, #0
   15b80:	4b93      	ldr	r3, [pc, #588]	; (15dd0 <lv_theme_material_init+0xc1c>)
   15b82:	4798      	blx	r3
   15b84:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15b88:	3050      	adds	r0, #80	; 0x50
   15b8a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15b8e:	f081 81b3 	bcs.w	16ef8 <lv_theme_material_init+0x1d44>
   15b92:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   15b94:	2113      	movs	r1, #19
   15b96:	4620      	mov	r0, r4
   15b98:	4b8e      	ldr	r3, [pc, #568]	; (15dd4 <lv_theme_material_init+0xc20>)
   15b9a:	4798      	blx	r3
    lv_style_set_pad_top(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
   15b9c:	4b8e      	ldr	r3, [pc, #568]	; (15dd8 <lv_theme_material_init+0xc24>)
   15b9e:	681c      	ldr	r4, [r3, #0]
   15ba0:	3468      	adds	r4, #104	; 0x68
   15ba2:	2000      	movs	r0, #0
   15ba4:	4b8a      	ldr	r3, [pc, #552]	; (15dd0 <lv_theme_material_init+0xc1c>)
   15ba6:	4798      	blx	r3
   15ba8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15bac:	3050      	adds	r0, #80	; 0x50
   15bae:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15bb2:	f081 81af 	bcs.w	16f14 <lv_theme_material_init+0x1d60>
   15bb6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   15bb8:	2110      	movs	r1, #16
   15bba:	4620      	mov	r0, r4
   15bbc:	4b85      	ldr	r3, [pc, #532]	; (15dd4 <lv_theme_material_init+0xc20>)
   15bbe:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
   15bc0:	4b85      	ldr	r3, [pc, #532]	; (15dd8 <lv_theme_material_init+0xc24>)
   15bc2:	681c      	ldr	r4, [r3, #0]
   15bc4:	3468      	adds	r4, #104	; 0x68
   15bc6:	2000      	movs	r0, #0
   15bc8:	4b81      	ldr	r3, [pc, #516]	; (15dd0 <lv_theme_material_init+0xc1c>)
   15bca:	4798      	blx	r3
   15bcc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15bd0:	3050      	adds	r0, #80	; 0x50
   15bd2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15bd6:	f081 81ab 	bcs.w	16f30 <lv_theme_material_init+0x1d7c>
   15bda:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   15bdc:	2111      	movs	r1, #17
   15bde:	4620      	mov	r0, r4
   15be0:	4b7c      	ldr	r3, [pc, #496]	; (15dd4 <lv_theme_material_init+0xc20>)
   15be2:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(3));
   15be4:	4b7c      	ldr	r3, [pc, #496]	; (15dd8 <lv_theme_material_init+0xc24>)
   15be6:	681c      	ldr	r4, [r3, #0]
   15be8:	3468      	adds	r4, #104	; 0x68
   15bea:	2000      	movs	r0, #0
   15bec:	4b78      	ldr	r3, [pc, #480]	; (15dd0 <lv_theme_material_init+0xc1c>)
   15bee:	4798      	blx	r3
   15bf0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   15bf4:	3050      	adds	r0, #80	; 0x50
   15bf6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15bfa:	f081 81a7 	bcs.w	16f4c <lv_theme_material_init+0x1d98>
   15bfe:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   15c00:	2114      	movs	r1, #20
   15c02:	4620      	mov	r0, r4
   15c04:	4b73      	ldr	r3, [pc, #460]	; (15dd4 <lv_theme_material_init+0xc20>)
   15c06:	4798      	blx	r3
    style_init_reset(&styles->mbox_bg);
   15c08:	4c73      	ldr	r4, [pc, #460]	; (15dd8 <lv_theme_material_init+0xc24>)
   15c0a:	6820      	ldr	r0, [r4, #0]
   15c0c:	307c      	adds	r0, #124	; 0x7c
   15c0e:	4b74      	ldr	r3, [pc, #464]	; (15de0 <lv_theme_material_init+0xc2c>)
   15c10:	4798      	blx	r3
    lv_style_set_shadow_width(&styles->mbox_bg, LV_STATE_DEFAULT, LV_DPX(50));
   15c12:	6824      	ldr	r4, [r4, #0]
   15c14:	347c      	adds	r4, #124	; 0x7c
   15c16:	2000      	movs	r0, #0
   15c18:	4b6d      	ldr	r3, [pc, #436]	; (15dd0 <lv_theme_material_init+0xc1c>)
   15c1a:	4798      	blx	r3
   15c1c:	2332      	movs	r3, #50	; 0x32
   15c1e:	fb03 f000 	mul.w	r0, r3, r0
   15c22:	3050      	adds	r0, #80	; 0x50
   15c24:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15c28:	f081 819e 	bcs.w	16f68 <lv_theme_material_init+0x1db4>
   15c2c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
   15c2e:	2150      	movs	r1, #80	; 0x50
   15c30:	4620      	mov	r0, r4
   15c32:	4b68      	ldr	r3, [pc, #416]	; (15dd4 <lv_theme_material_init+0xc20>)
   15c34:	4798      	blx	r3
    lv_style_set_shadow_color(&styles->mbox_bg, LV_STATE_DEFAULT, IS_LIGHT ? LV_COLOR_SILVER : lv_color_hex3(0x999));
   15c36:	4b68      	ldr	r3, [pc, #416]	; (15dd8 <lv_theme_material_init+0xc24>)
   15c38:	6818      	ldr	r0, [r3, #0]
   15c3a:	6a1b      	ldr	r3, [r3, #32]
   15c3c:	f013 0302 	ands.w	r3, r3, #2
   15c40:	bf0c      	ite	eq
   15c42:	2126      	moveq	r1, #38	; 0x26
   15c44:	2130      	movne	r1, #48	; 0x30
   15c46:	2b00      	cmp	r3, #0
   15c48:	bf0c      	ite	eq
   15c4a:	2313      	moveq	r3, #19
   15c4c:	2318      	movne	r3, #24
   15c4e:	f04f 0200 	mov.w	r2, #0
   15c52:	f363 0204 	bfi	r2, r3, #0, #5
   15c56:	f361 124a 	bfi	r2, r1, #5, #6
   15c5a:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
   15c5e:	2159      	movs	r1, #89	; 0x59
   15c60:	307c      	adds	r0, #124	; 0x7c
   15c62:	4b5e      	ldr	r3, [pc, #376]	; (15ddc <lv_theme_material_init+0xc28>)
   15c64:	4798      	blx	r3
    style_init_reset(&styles->sb);
   15c66:	4c5c      	ldr	r4, [pc, #368]	; (15dd8 <lv_theme_material_init+0xc24>)
   15c68:	6820      	ldr	r0, [r4, #0]
   15c6a:	3080      	adds	r0, #128	; 0x80
   15c6c:	4b5c      	ldr	r3, [pc, #368]	; (15de0 <lv_theme_material_init+0xc2c>)
   15c6e:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->sb, LV_STATE_DEFAULT, LV_OPA_COVER);
   15c70:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   15c72:	22ff      	movs	r2, #255	; 0xff
   15c74:	212c      	movs	r1, #44	; 0x2c
   15c76:	3080      	adds	r0, #128	; 0x80
   15c78:	4b5a      	ldr	r3, [pc, #360]	; (15de4 <lv_theme_material_init+0xc30>)
   15c7a:	4798      	blx	r3
    lv_style_set_bg_color(&styles->sb, LV_STATE_DEFAULT, (IS_LIGHT ? lv_color_hex(0xcccfd1) : lv_color_hex(0x777f85)));
   15c7c:	6820      	ldr	r0, [r4, #0]
   15c7e:	6a23      	ldr	r3, [r4, #32]
   15c80:	f013 0302 	ands.w	r3, r3, #2
   15c84:	bf14      	ite	ne
   15c86:	2119      	movne	r1, #25
   15c88:	210e      	moveq	r1, #14
   15c8a:	2b00      	cmp	r3, #0
   15c8c:	bf15      	itete	ne
   15c8e:	2433      	movne	r4, #51	; 0x33
   15c90:	241f      	moveq	r4, #31
   15c92:	231a      	movne	r3, #26
   15c94:	2310      	moveq	r3, #16
   15c96:	f04f 0200 	mov.w	r2, #0
   15c9a:	f363 0204 	bfi	r2, r3, #0, #5
   15c9e:	f364 124a 	bfi	r2, r4, #5, #6
   15ca2:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   15ca6:	2129      	movs	r1, #41	; 0x29
   15ca8:	3080      	adds	r0, #128	; 0x80
   15caa:	4b4c      	ldr	r3, [pc, #304]	; (15ddc <lv_theme_material_init+0xc28>)
   15cac:	4798      	blx	r3
    lv_style_set_radius(&styles->sb, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   15cae:	4c4a      	ldr	r4, [pc, #296]	; (15dd8 <lv_theme_material_init+0xc24>)
   15cb0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   15cb2:	f647 72ff 	movw	r2, #32767	; 0x7fff
   15cb6:	2101      	movs	r1, #1
   15cb8:	3080      	adds	r0, #128	; 0x80
   15cba:	4b46      	ldr	r3, [pc, #280]	; (15dd4 <lv_theme_material_init+0xc20>)
   15cbc:	4798      	blx	r3
    lv_style_set_size(&styles->sb, LV_STATE_DEFAULT, LV_DPX(7));
   15cbe:	6824      	ldr	r4, [r4, #0]
   15cc0:	3480      	adds	r4, #128	; 0x80
   15cc2:	2000      	movs	r0, #0
   15cc4:	4b42      	ldr	r3, [pc, #264]	; (15dd0 <lv_theme_material_init+0xc1c>)
   15cc6:	4798      	blx	r3
   15cc8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   15ccc:	3050      	adds	r0, #80	; 0x50
   15cce:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15cd2:	f081 8157 	bcs.w	16f84 <lv_theme_material_init+0x1dd0>
   15cd6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
   15cd8:	2103      	movs	r1, #3
   15cda:	4620      	mov	r0, r4
   15cdc:	4b3d      	ldr	r3, [pc, #244]	; (15dd4 <lv_theme_material_init+0xc20>)
   15cde:	4798      	blx	r3
    lv_style_set_pad_right(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
   15ce0:	4b3d      	ldr	r3, [pc, #244]	; (15dd8 <lv_theme_material_init+0xc24>)
   15ce2:	681c      	ldr	r4, [r3, #0]
   15ce4:	3480      	adds	r4, #128	; 0x80
   15ce6:	2000      	movs	r0, #0
   15ce8:	4b39      	ldr	r3, [pc, #228]	; (15dd0 <lv_theme_material_init+0xc1c>)
   15cea:	4798      	blx	r3
   15cec:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   15cf0:	3050      	adds	r0, #80	; 0x50
   15cf2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15cf6:	f081 8153 	bcs.w	16fa0 <lv_theme_material_init+0x1dec>
   15cfa:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   15cfc:	2113      	movs	r1, #19
   15cfe:	4620      	mov	r0, r4
   15d00:	4b34      	ldr	r3, [pc, #208]	; (15dd4 <lv_theme_material_init+0xc20>)
   15d02:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
   15d04:	4b34      	ldr	r3, [pc, #208]	; (15dd8 <lv_theme_material_init+0xc24>)
   15d06:	681c      	ldr	r4, [r3, #0]
   15d08:	3480      	adds	r4, #128	; 0x80
   15d0a:	2000      	movs	r0, #0
   15d0c:	4b30      	ldr	r3, [pc, #192]	; (15dd0 <lv_theme_material_init+0xc1c>)
   15d0e:	4798      	blx	r3
   15d10:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   15d14:	3050      	adds	r0, #80	; 0x50
   15d16:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15d1a:	f081 814f 	bcs.w	16fbc <lv_theme_material_init+0x1e08>
   15d1e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   15d20:	2111      	movs	r1, #17
   15d22:	4620      	mov	r0, r4
   15d24:	4b2b      	ldr	r3, [pc, #172]	; (15dd4 <lv_theme_material_init+0xc20>)
   15d26:	4798      	blx	r3
    style_init_reset(&styles->edge_flash);
   15d28:	4c2b      	ldr	r4, [pc, #172]	; (15dd8 <lv_theme_material_init+0xc24>)
   15d2a:	6820      	ldr	r0, [r4, #0]
   15d2c:	3084      	adds	r0, #132	; 0x84
   15d2e:	4d2c      	ldr	r5, [pc, #176]	; (15de0 <lv_theme_material_init+0xc2c>)
   15d30:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->edge_flash, LV_STATE_DEFAULT, LV_OPA_COVER);
   15d32:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   15d34:	22ff      	movs	r2, #255	; 0xff
   15d36:	212c      	movs	r1, #44	; 0x2c
   15d38:	3084      	adds	r0, #132	; 0x84
   15d3a:	4b2a      	ldr	r3, [pc, #168]	; (15de4 <lv_theme_material_init+0xc30>)
   15d3c:	4798      	blx	r3
    lv_style_set_bg_color(&styles->edge_flash, LV_STATE_DEFAULT,  lv_color_hex3(0x888));
   15d3e:	6820      	ldr	r0, [r4, #0]
   15d40:	2311      	movs	r3, #17
   15d42:	f04f 0200 	mov.w	r2, #0
   15d46:	f363 0204 	bfi	r2, r3, #0, #5
   15d4a:	2122      	movs	r1, #34	; 0x22
   15d4c:	f361 124a 	bfi	r2, r1, #5, #6
   15d50:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   15d54:	2129      	movs	r1, #41	; 0x29
   15d56:	3084      	adds	r0, #132	; 0x84
   15d58:	4b20      	ldr	r3, [pc, #128]	; (15ddc <lv_theme_material_init+0xc28>)
   15d5a:	4798      	blx	r3
    style_init_reset(&styles->ta_cursor);
   15d5c:	6820      	ldr	r0, [r4, #0]
   15d5e:	30b4      	adds	r0, #180	; 0xb4
   15d60:	47a8      	blx	r5
    lv_style_set_border_color(&styles->ta_cursor, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
   15d62:	6820      	ldr	r0, [r4, #0]
   15d64:	6a23      	ldr	r3, [r4, #32]
   15d66:	f013 0302 	ands.w	r3, r3, #2
   15d6a:	bf14      	ite	ne
   15d6c:	2106      	movne	r1, #6
   15d6e:	2114      	moveq	r1, #20
   15d70:	2b00      	cmp	r3, #0
   15d72:	bf15      	itete	ne
   15d74:	2410      	movne	r4, #16
   15d76:	242a      	moveq	r4, #42	; 0x2a
   15d78:	2309      	movne	r3, #9
   15d7a:	2315      	moveq	r3, #21
   15d7c:	f04f 0200 	mov.w	r2, #0
   15d80:	f363 0204 	bfi	r2, r3, #0, #5
   15d84:	f364 124a 	bfi	r2, r4, #5, #6
   15d88:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   15d8c:	2139      	movs	r1, #57	; 0x39
   15d8e:	30b4      	adds	r0, #180	; 0xb4
   15d90:	4b12      	ldr	r3, [pc, #72]	; (15ddc <lv_theme_material_init+0xc28>)
   15d92:	4798      	blx	r3
    lv_style_set_border_width(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(2));
   15d94:	4b10      	ldr	r3, [pc, #64]	; (15dd8 <lv_theme_material_init+0xc24>)
   15d96:	681c      	ldr	r4, [r3, #0]
   15d98:	34b4      	adds	r4, #180	; 0xb4
   15d9a:	2000      	movs	r0, #0
   15d9c:	4b0c      	ldr	r3, [pc, #48]	; (15dd0 <lv_theme_material_init+0xc1c>)
   15d9e:	4798      	blx	r3
   15da0:	3028      	adds	r0, #40	; 0x28
   15da2:	0040      	lsls	r0, r0, #1
   15da4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15da8:	f081 8116 	bcs.w	16fd8 <lv_theme_material_init+0x1e24>
   15dac:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   15dae:	2130      	movs	r1, #48	; 0x30
   15db0:	4620      	mov	r0, r4
   15db2:	4b08      	ldr	r3, [pc, #32]	; (15dd4 <lv_theme_material_init+0xc20>)
   15db4:	4798      	blx	r3
    lv_style_set_pad_left(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(1));
   15db6:	4b08      	ldr	r3, [pc, #32]	; (15dd8 <lv_theme_material_init+0xc24>)
   15db8:	681c      	ldr	r4, [r3, #0]
   15dba:	34b4      	adds	r4, #180	; 0xb4
   15dbc:	2000      	movs	r0, #0
   15dbe:	4b04      	ldr	r3, [pc, #16]	; (15dd0 <lv_theme_material_init+0xc1c>)
   15dc0:	4798      	blx	r3
   15dc2:	3050      	adds	r0, #80	; 0x50
   15dc4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15dc8:	f081 8113 	bcs.w	16ff2 <lv_theme_material_init+0x1e3e>
   15dcc:	2201      	movs	r2, #1
   15dce:	e00b      	b.n	15de8 <lv_theme_material_init+0xc34>
   15dd0:	000101bd 	.word	0x000101bd
   15dd4:	00006039 	.word	0x00006039
   15dd8:	2000abd4 	.word	0x2000abd4
   15ddc:	00006161 	.word	0x00006161
   15de0:	00013181 	.word	0x00013181
   15de4:	00006289 	.word	0x00006289
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   15de8:	2112      	movs	r1, #18
   15dea:	4620      	mov	r0, r4
   15dec:	4dba      	ldr	r5, [pc, #744]	; (160d8 <lv_theme_material_init+0xf24>)
   15dee:	47a8      	blx	r5
    lv_style_set_border_side(&styles->ta_cursor, LV_STATE_DEFAULT, LV_BORDER_SIDE_LEFT);
   15df0:	4cba      	ldr	r4, [pc, #744]	; (160dc <lv_theme_material_init+0xf28>)
   15df2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
   15df4:	2204      	movs	r2, #4
   15df6:	2131      	movs	r1, #49	; 0x31
   15df8:	30b4      	adds	r0, #180	; 0xb4
   15dfa:	47a8      	blx	r5
    style_init_reset(&styles->ta_placeholder);
   15dfc:	6820      	ldr	r0, [r4, #0]
   15dfe:	30b8      	adds	r0, #184	; 0xb8
   15e00:	4bb7      	ldr	r3, [pc, #732]	; (160e0 <lv_theme_material_init+0xf2c>)
   15e02:	4798      	blx	r3
    lv_style_set_text_color(&styles->ta_placeholder, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
   15e04:	6820      	ldr	r0, [r4, #0]
   15e06:	30b8      	adds	r0, #184	; 0xb8
   15e08:	6a23      	ldr	r3, [r4, #32]
   15e0a:	f013 0f02 	tst.w	r3, #2
   15e0e:	f041 80fc 	bne.w	1700a <lv_theme_material_init+0x1e56>
   15e12:	2314      	movs	r3, #20
   15e14:	212b      	movs	r1, #43	; 0x2b
   15e16:	2417      	movs	r4, #23
   15e18:	f04f 0200 	mov.w	r2, #0
   15e1c:	f364 0204 	bfi	r2, r4, #0, #5
   15e20:	f361 124a 	bfi	r2, r1, #5, #6
   15e24:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   15e28:	f248 0189 	movw	r1, #32905	; 0x8089
   15e2c:	4dad      	ldr	r5, [pc, #692]	; (160e4 <lv_theme_material_init+0xf30>)
   15e2e:	47a8      	blx	r5
    style_init_reset(&styles->spinbox_cursor);
   15e30:	4caa      	ldr	r4, [pc, #680]	; (160dc <lv_theme_material_init+0xf28>)
   15e32:	6820      	ldr	r0, [r4, #0]
   15e34:	3098      	adds	r0, #152	; 0x98
   15e36:	4baa      	ldr	r3, [pc, #680]	; (160e0 <lv_theme_material_init+0xf2c>)
   15e38:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_OPA_COVER);
   15e3a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   15e3c:	22ff      	movs	r2, #255	; 0xff
   15e3e:	212c      	movs	r1, #44	; 0x2c
   15e40:	3098      	adds	r0, #152	; 0x98
   15e42:	4ba9      	ldr	r3, [pc, #676]	; (160e8 <lv_theme_material_init+0xf34>)
   15e44:	4798      	blx	r3
    lv_style_set_bg_color(&styles->spinbox_cursor, LV_STATE_DEFAULT, theme.color_primary);
   15e46:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   15e48:	89a2      	ldrh	r2, [r4, #12]
   15e4a:	2129      	movs	r1, #41	; 0x29
   15e4c:	3098      	adds	r0, #152	; 0x98
   15e4e:	47a8      	blx	r5
    lv_style_set_text_color(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_COLOR_WHITE);
   15e50:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   15e52:	4ba6      	ldr	r3, [pc, #664]	; (160ec <lv_theme_material_init+0xf38>)
   15e54:	881a      	ldrh	r2, [r3, #0]
   15e56:	f248 0189 	movw	r1, #32905	; 0x8089
   15e5a:	3098      	adds	r0, #152	; 0x98
   15e5c:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
   15e5e:	6824      	ldr	r4, [r4, #0]
   15e60:	3498      	adds	r4, #152	; 0x98
   15e62:	2000      	movs	r0, #0
   15e64:	4ba2      	ldr	r3, [pc, #648]	; (160f0 <lv_theme_material_init+0xf3c>)
   15e66:	4798      	blx	r3
   15e68:	2364      	movs	r3, #100	; 0x64
   15e6a:	fb03 f000 	mul.w	r0, r3, r0
   15e6e:	3050      	adds	r0, #80	; 0x50
   15e70:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15e74:	f081 80ce 	bcs.w	17014 <lv_theme_material_init+0x1e60>
   15e78:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   15e7a:	2110      	movs	r1, #16
   15e7c:	4620      	mov	r0, r4
   15e7e:	4b96      	ldr	r3, [pc, #600]	; (160d8 <lv_theme_material_init+0xf24>)
   15e80:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
   15e82:	4b96      	ldr	r3, [pc, #600]	; (160dc <lv_theme_material_init+0xf28>)
   15e84:	681c      	ldr	r4, [r3, #0]
   15e86:	3498      	adds	r4, #152	; 0x98
   15e88:	2000      	movs	r0, #0
   15e8a:	4b99      	ldr	r3, [pc, #612]	; (160f0 <lv_theme_material_init+0xf3c>)
   15e8c:	4798      	blx	r3
   15e8e:	2364      	movs	r3, #100	; 0x64
   15e90:	fb03 f000 	mul.w	r0, r3, r0
   15e94:	3050      	adds	r0, #80	; 0x50
   15e96:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15e9a:	f081 80c9 	bcs.w	17030 <lv_theme_material_init+0x1e7c>
   15e9e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   15ea0:	2111      	movs	r1, #17
   15ea2:	4620      	mov	r0, r4
   15ea4:	4d8c      	ldr	r5, [pc, #560]	; (160d8 <lv_theme_material_init+0xf24>)
   15ea6:	47a8      	blx	r5
    style_init_reset(&styles->list_bg);
   15ea8:	4c8c      	ldr	r4, [pc, #560]	; (160dc <lv_theme_material_init+0xf28>)
   15eaa:	6820      	ldr	r0, [r4, #0]
   15eac:	3074      	adds	r0, #116	; 0x74
   15eae:	4e8c      	ldr	r6, [pc, #560]	; (160e0 <lv_theme_material_init+0xf2c>)
   15eb0:	47b0      	blx	r6
    lv_style_set_clip_corner(&styles->list_bg, LV_STATE_DEFAULT, true);
   15eb2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
   15eb4:	2201      	movs	r2, #1
   15eb6:	2102      	movs	r1, #2
   15eb8:	3074      	adds	r0, #116	; 0x74
   15eba:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->list_bg, LV_STATE_DEFAULT, 0);
   15ebc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   15ebe:	2200      	movs	r2, #0
   15ec0:	2112      	movs	r1, #18
   15ec2:	3074      	adds	r0, #116	; 0x74
   15ec4:	47a8      	blx	r5
    lv_style_set_pad_right(&styles->list_bg, LV_STATE_DEFAULT, 0);
   15ec6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   15ec8:	2200      	movs	r2, #0
   15eca:	2113      	movs	r1, #19
   15ecc:	3074      	adds	r0, #116	; 0x74
   15ece:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->list_bg, LV_STATE_DEFAULT, 0);
   15ed0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   15ed2:	2200      	movs	r2, #0
   15ed4:	2110      	movs	r1, #16
   15ed6:	3074      	adds	r0, #116	; 0x74
   15ed8:	47a8      	blx	r5
    lv_style_set_pad_bottom(&styles->list_bg, LV_STATE_DEFAULT, 0);
   15eda:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   15edc:	2200      	movs	r2, #0
   15ede:	2111      	movs	r1, #17
   15ee0:	3074      	adds	r0, #116	; 0x74
   15ee2:	47a8      	blx	r5
    lv_style_set_pad_inner(&styles->list_bg, LV_STATE_DEFAULT, 0);
   15ee4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   15ee6:	2200      	movs	r2, #0
   15ee8:	2114      	movs	r1, #20
   15eea:	3074      	adds	r0, #116	; 0x74
   15eec:	47a8      	blx	r5
    style_init_reset(&styles->list_btn);
   15eee:	6820      	ldr	r0, [r4, #0]
   15ef0:	3078      	adds	r0, #120	; 0x78
   15ef2:	47b0      	blx	r6
    lv_style_set_bg_opa(&styles->list_btn, LV_STATE_DEFAULT, LV_OPA_COVER);
   15ef4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   15ef6:	22ff      	movs	r2, #255	; 0xff
   15ef8:	212c      	movs	r1, #44	; 0x2c
   15efa:	3078      	adds	r0, #120	; 0x78
   15efc:	4b7a      	ldr	r3, [pc, #488]	; (160e8 <lv_theme_material_init+0xf34>)
   15efe:	4798      	blx	r3
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG);
   15f00:	6820      	ldr	r0, [r4, #0]
   15f02:	3078      	adds	r0, #120	; 0x78
   15f04:	6a23      	ldr	r3, [r4, #32]
   15f06:	f013 0f02 	tst.w	r3, #2
   15f0a:	f041 809f 	bne.w	1704c <lv_theme_material_init+0x1e98>
   15f0e:	230b      	movs	r3, #11
   15f10:	2118      	movs	r1, #24
   15f12:	240e      	movs	r4, #14
   15f14:	f04f 0200 	mov.w	r2, #0
   15f18:	f364 0204 	bfi	r2, r4, #0, #5
   15f1c:	f361 124a 	bfi	r2, r1, #5, #6
   15f20:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   15f24:	2129      	movs	r1, #41	; 0x29
   15f26:	4b6f      	ldr	r3, [pc, #444]	; (160e4 <lv_theme_material_init+0xf30>)
   15f28:	4798      	blx	r3
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_PRESSED, COLOR_BG_PR);
   15f2a:	4b6c      	ldr	r3, [pc, #432]	; (160dc <lv_theme_material_init+0xf28>)
   15f2c:	6818      	ldr	r0, [r3, #0]
   15f2e:	3078      	adds	r0, #120	; 0x78
   15f30:	6a1b      	ldr	r3, [r3, #32]
   15f32:	f013 0f02 	tst.w	r3, #2
   15f36:	f041 808e 	bne.w	17056 <lv_theme_material_init+0x1ea2>
   15f3a:	2309      	movs	r3, #9
   15f3c:	2113      	movs	r1, #19
   15f3e:	240a      	movs	r4, #10
   15f40:	f04f 0200 	mov.w	r2, #0
   15f44:	f364 0204 	bfi	r2, r4, #0, #5
   15f48:	f361 124a 	bfi	r2, r1, #5, #6
   15f4c:	f363 22cf 	bfi	r2, r3, #11, #5
   15f50:	f241 0129 	movw	r1, #4137	; 0x1029
   15f54:	4b63      	ldr	r3, [pc, #396]	; (160e4 <lv_theme_material_init+0xf30>)
   15f56:	4798      	blx	r3
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_DIS);
   15f58:	4b60      	ldr	r3, [pc, #384]	; (160dc <lv_theme_material_init+0xf28>)
   15f5a:	6818      	ldr	r0, [r3, #0]
   15f5c:	3078      	adds	r0, #120	; 0x78
   15f5e:	6a1b      	ldr	r3, [r3, #32]
   15f60:	f013 0f02 	tst.w	r3, #2
   15f64:	f041 807c 	bne.w	17060 <lv_theme_material_init+0x1eac>
   15f68:	230b      	movs	r3, #11
   15f6a:	2118      	movs	r1, #24
   15f6c:	240e      	movs	r4, #14
   15f6e:	f04f 0200 	mov.w	r2, #0
   15f72:	f364 0204 	bfi	r2, r4, #0, #5
   15f76:	f361 124a 	bfi	r2, r1, #5, #6
   15f7a:	f363 22cf 	bfi	r2, r3, #11, #5
   15f7e:	f242 0129 	movw	r1, #8233	; 0x2029
   15f82:	4d58      	ldr	r5, [pc, #352]	; (160e4 <lv_theme_material_init+0xf30>)
   15f84:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_CHK);
   15f86:	4c55      	ldr	r4, [pc, #340]	; (160dc <lv_theme_material_init+0xf28>)
   15f88:	6820      	ldr	r0, [r4, #0]
   15f8a:	89a2      	ldrh	r2, [r4, #12]
   15f8c:	f240 1129 	movw	r1, #297	; 0x129
   15f90:	3078      	adds	r0, #120	; 0x78
   15f92:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_CHECKED | LV_STATE_PRESSED, COLOR_BG_PR_CHK);
   15f94:	6826      	ldr	r6, [r4, #0]
   15f96:	3678      	adds	r6, #120	; 0x78
   15f98:	2133      	movs	r1, #51	; 0x33
   15f9a:	89a0      	ldrh	r0, [r4, #12]
   15f9c:	4b55      	ldr	r3, [pc, #340]	; (160f4 <lv_theme_material_init+0xf40>)
   15f9e:	4798      	blx	r3
   15fa0:	4602      	mov	r2, r0
   15fa2:	f241 1129 	movw	r1, #4393	; 0x1129
   15fa6:	4630      	mov	r0, r6
   15fa8:	47a8      	blx	r5
    lv_style_set_text_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   15faa:	6820      	ldr	r0, [r4, #0]
   15fac:	3078      	adds	r0, #120	; 0x78
   15fae:	6a23      	ldr	r3, [r4, #32]
   15fb0:	f013 0f02 	tst.w	r3, #2
   15fb4:	f041 8059 	bne.w	1706a <lv_theme_material_init+0x1eb6>
   15fb8:	231f      	movs	r3, #31
   15fba:	213f      	movs	r1, #63	; 0x3f
   15fbc:	461c      	mov	r4, r3
   15fbe:	f04f 0200 	mov.w	r2, #0
   15fc2:	f364 0204 	bfi	r2, r4, #0, #5
   15fc6:	f361 124a 	bfi	r2, r1, #5, #6
   15fca:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   15fce:	f248 0189 	movw	r1, #32905	; 0x8089
   15fd2:	4d44      	ldr	r5, [pc, #272]	; (160e4 <lv_theme_material_init+0xf30>)
   15fd4:	47a8      	blx	r5
    lv_style_set_text_color(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
   15fd6:	4c41      	ldr	r4, [pc, #260]	; (160dc <lv_theme_material_init+0xf28>)
   15fd8:	6820      	ldr	r0, [r4, #0]
   15fda:	f04f 32ff 	mov.w	r2, #4294967295
   15fde:	f248 1189 	movw	r1, #33161	; 0x8189
   15fe2:	3078      	adds	r0, #120	; 0x78
   15fe4:	47a8      	blx	r5
    lv_style_set_text_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
   15fe6:	6820      	ldr	r0, [r4, #0]
   15fe8:	6a23      	ldr	r3, [r4, #32]
   15fea:	f013 0302 	ands.w	r3, r3, #2
   15fee:	bf14      	ite	ne
   15ff0:	212a      	movne	r1, #42	; 0x2a
   15ff2:	2126      	moveq	r1, #38	; 0x26
   15ff4:	2b00      	cmp	r3, #0
   15ff6:	bf14      	ite	ne
   15ff8:	2315      	movne	r3, #21
   15ffa:	2313      	moveq	r3, #19
   15ffc:	f04f 0200 	mov.w	r2, #0
   16000:	f363 0204 	bfi	r2, r3, #0, #5
   16004:	f361 124a 	bfi	r2, r1, #5, #6
   16008:	f363 22cf 	bfi	r2, r3, #11, #5
   1600c:	f24a 0189 	movw	r1, #41097	; 0xa089
   16010:	3078      	adds	r0, #120	; 0x78
   16012:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   16014:	6820      	ldr	r0, [r4, #0]
   16016:	3078      	adds	r0, #120	; 0x78
   16018:	6a23      	ldr	r3, [r4, #32]
   1601a:	f013 0f02 	tst.w	r3, #2
   1601e:	f041 8029 	bne.w	17074 <lv_theme_material_init+0x1ec0>
   16022:	231f      	movs	r3, #31
   16024:	213f      	movs	r1, #63	; 0x3f
   16026:	461c      	mov	r4, r3
   16028:	f04f 0200 	mov.w	r2, #0
   1602c:	f364 0204 	bfi	r2, r4, #0, #5
   16030:	f361 124a 	bfi	r2, r1, #5, #6
   16034:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   16038:	f248 01a9 	movw	r1, #32937	; 0x80a9
   1603c:	4d29      	ldr	r5, [pc, #164]	; (160e4 <lv_theme_material_init+0xf30>)
   1603e:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
   16040:	4c26      	ldr	r4, [pc, #152]	; (160dc <lv_theme_material_init+0xf28>)
   16042:	6820      	ldr	r0, [r4, #0]
   16044:	f04f 32ff 	mov.w	r2, #4294967295
   16048:	f248 11a9 	movw	r1, #33193	; 0x81a9
   1604c:	3078      	adds	r0, #120	; 0x78
   1604e:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
   16050:	6820      	ldr	r0, [r4, #0]
   16052:	6a23      	ldr	r3, [r4, #32]
   16054:	f013 0302 	ands.w	r3, r3, #2
   16058:	bf14      	ite	ne
   1605a:	212a      	movne	r1, #42	; 0x2a
   1605c:	2126      	moveq	r1, #38	; 0x26
   1605e:	2b00      	cmp	r3, #0
   16060:	bf14      	ite	ne
   16062:	2315      	movne	r3, #21
   16064:	2313      	moveq	r3, #19
   16066:	f04f 0200 	mov.w	r2, #0
   1606a:	f363 0204 	bfi	r2, r3, #0, #5
   1606e:	f361 124a 	bfi	r2, r1, #5, #6
   16072:	f363 22cf 	bfi	r2, r3, #11, #5
   16076:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
   1607a:	3078      	adds	r0, #120	; 0x78
   1607c:	47a8      	blx	r5
    lv_style_set_border_side(&styles->list_btn, LV_STATE_DEFAULT, LV_BORDER_SIDE_BOTTOM);
   1607e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
   16080:	2201      	movs	r2, #1
   16082:	2131      	movs	r1, #49	; 0x31
   16084:	3078      	adds	r0, #120	; 0x78
   16086:	4b14      	ldr	r3, [pc, #80]	; (160d8 <lv_theme_material_init+0xf24>)
   16088:	4798      	blx	r3
    lv_style_set_border_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_BORDER);
   1608a:	6820      	ldr	r0, [r4, #0]
   1608c:	6a23      	ldr	r3, [r4, #32]
   1608e:	f013 0302 	ands.w	r3, r3, #2
   16092:	bf14      	ite	ne
   16094:	211a      	movne	r1, #26
   16096:	2110      	moveq	r1, #16
   16098:	2b00      	cmp	r3, #0
   1609a:	bf15      	itete	ne
   1609c:	2437      	movne	r4, #55	; 0x37
   1609e:	2422      	moveq	r4, #34	; 0x22
   160a0:	231c      	movne	r3, #28
   160a2:	2312      	moveq	r3, #18
   160a4:	f04f 0200 	mov.w	r2, #0
   160a8:	f363 0204 	bfi	r2, r3, #0, #5
   160ac:	f364 124a 	bfi	r2, r4, #5, #6
   160b0:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   160b4:	2139      	movs	r1, #57	; 0x39
   160b6:	3078      	adds	r0, #120	; 0x78
   160b8:	47a8      	blx	r5
    lv_style_set_border_color(&styles->list_btn, LV_STATE_FOCUSED, theme.color_primary);
   160ba:	4c08      	ldr	r4, [pc, #32]	; (160dc <lv_theme_material_init+0xf28>)
   160bc:	6820      	ldr	r0, [r4, #0]
   160be:	89a2      	ldrh	r2, [r4, #12]
   160c0:	f240 2139 	movw	r1, #569	; 0x239
   160c4:	3078      	adds	r0, #120	; 0x78
   160c6:	47a8      	blx	r5
    lv_style_set_border_width(&styles->list_btn, LV_STATE_DEFAULT, 1);
   160c8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   160ca:	2201      	movs	r2, #1
   160cc:	2130      	movs	r1, #48	; 0x30
   160ce:	3078      	adds	r0, #120	; 0x78
   160d0:	4b01      	ldr	r3, [pc, #4]	; (160d8 <lv_theme_material_init+0xf24>)
   160d2:	4798      	blx	r3
   160d4:	e010      	b.n	160f8 <lv_theme_material_init+0xf44>
   160d6:	bf00      	nop
   160d8:	00006039 	.word	0x00006039
   160dc:	2000abd4 	.word	0x2000abd4
   160e0:	00013181 	.word	0x00013181
   160e4:	00006161 	.word	0x00006161
   160e8:	00006289 	.word	0x00006289
   160ec:	0001b780 	.word	0x0001b780
   160f0:	000101bd 	.word	0x000101bd
   160f4:	00010e03 	.word	0x00010e03
    lv_style_set_pad_left(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   160f8:	6824      	ldr	r4, [r4, #0]
   160fa:	3478      	adds	r4, #120	; 0x78
   160fc:	2000      	movs	r0, #0
   160fe:	4bba      	ldr	r3, [pc, #744]	; (163e8 <lv_theme_material_init+0x1234>)
   16100:	4798      	blx	r3
   16102:	2801      	cmp	r0, #1
   16104:	f240 87bb 	bls.w	1707e <lv_theme_material_init+0x1eca>
   16108:	2000      	movs	r0, #0
   1610a:	4bb8      	ldr	r3, [pc, #736]	; (163ec <lv_theme_material_init+0x1238>)
   1610c:	4798      	blx	r3
   1610e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16112:	0040      	lsls	r0, r0, #1
   16114:	3050      	adds	r0, #80	; 0x50
   16116:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1611a:	f080 87ca 	bcs.w	170b2 <lv_theme_material_init+0x1efe>
   1611e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   16120:	2112      	movs	r1, #18
   16122:	4620      	mov	r0, r4
   16124:	4bb2      	ldr	r3, [pc, #712]	; (163f0 <lv_theme_material_init+0x123c>)
   16126:	4798      	blx	r3
    lv_style_set_pad_right(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   16128:	4bb2      	ldr	r3, [pc, #712]	; (163f4 <lv_theme_material_init+0x1240>)
   1612a:	681c      	ldr	r4, [r3, #0]
   1612c:	3478      	adds	r4, #120	; 0x78
   1612e:	2000      	movs	r0, #0
   16130:	4bad      	ldr	r3, [pc, #692]	; (163e8 <lv_theme_material_init+0x1234>)
   16132:	4798      	blx	r3
   16134:	2801      	cmp	r0, #1
   16136:	f240 87cf 	bls.w	170d8 <lv_theme_material_init+0x1f24>
   1613a:	2000      	movs	r0, #0
   1613c:	4bab      	ldr	r3, [pc, #684]	; (163ec <lv_theme_material_init+0x1238>)
   1613e:	4798      	blx	r3
   16140:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16144:	0040      	lsls	r0, r0, #1
   16146:	3050      	adds	r0, #80	; 0x50
   16148:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1614c:	f080 87de 	bcs.w	1710c <lv_theme_material_init+0x1f58>
   16150:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   16152:	2113      	movs	r1, #19
   16154:	4620      	mov	r0, r4
   16156:	4ba6      	ldr	r3, [pc, #664]	; (163f0 <lv_theme_material_init+0x123c>)
   16158:	4798      	blx	r3
    lv_style_set_pad_top(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   1615a:	4ba6      	ldr	r3, [pc, #664]	; (163f4 <lv_theme_material_init+0x1240>)
   1615c:	681c      	ldr	r4, [r3, #0]
   1615e:	3478      	adds	r4, #120	; 0x78
   16160:	2000      	movs	r0, #0
   16162:	4ba1      	ldr	r3, [pc, #644]	; (163e8 <lv_theme_material_init+0x1234>)
   16164:	4798      	blx	r3
   16166:	2801      	cmp	r0, #1
   16168:	f240 87de 	bls.w	17128 <lv_theme_material_init+0x1f74>
   1616c:	2000      	movs	r0, #0
   1616e:	4b9f      	ldr	r3, [pc, #636]	; (163ec <lv_theme_material_init+0x1238>)
   16170:	4798      	blx	r3
   16172:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16176:	0040      	lsls	r0, r0, #1
   16178:	3050      	adds	r0, #80	; 0x50
   1617a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1617e:	f080 87ed 	bcs.w	1715c <lv_theme_material_init+0x1fa8>
   16182:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   16184:	2110      	movs	r1, #16
   16186:	4620      	mov	r0, r4
   16188:	4b99      	ldr	r3, [pc, #612]	; (163f0 <lv_theme_material_init+0x123c>)
   1618a:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   1618c:	4b99      	ldr	r3, [pc, #612]	; (163f4 <lv_theme_material_init+0x1240>)
   1618e:	681c      	ldr	r4, [r3, #0]
   16190:	3478      	adds	r4, #120	; 0x78
   16192:	2000      	movs	r0, #0
   16194:	4b94      	ldr	r3, [pc, #592]	; (163e8 <lv_theme_material_init+0x1234>)
   16196:	4798      	blx	r3
   16198:	2801      	cmp	r0, #1
   1619a:	f240 87ed 	bls.w	17178 <lv_theme_material_init+0x1fc4>
   1619e:	2000      	movs	r0, #0
   161a0:	4b92      	ldr	r3, [pc, #584]	; (163ec <lv_theme_material_init+0x1238>)
   161a2:	4798      	blx	r3
   161a4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   161a8:	0040      	lsls	r0, r0, #1
   161aa:	3050      	adds	r0, #80	; 0x50
   161ac:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   161b0:	f080 87fc 	bcs.w	171ac <lv_theme_material_init+0x1ff8>
   161b4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   161b6:	2111      	movs	r1, #17
   161b8:	4620      	mov	r0, r4
   161ba:	4b8d      	ldr	r3, [pc, #564]	; (163f0 <lv_theme_material_init+0x123c>)
   161bc:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   161be:	4b8d      	ldr	r3, [pc, #564]	; (163f4 <lv_theme_material_init+0x1240>)
   161c0:	681c      	ldr	r4, [r3, #0]
   161c2:	3478      	adds	r4, #120	; 0x78
   161c4:	2000      	movs	r0, #0
   161c6:	4b88      	ldr	r3, [pc, #544]	; (163e8 <lv_theme_material_init+0x1234>)
   161c8:	4798      	blx	r3
   161ca:	2801      	cmp	r0, #1
   161cc:	f240 87fc 	bls.w	171c8 <lv_theme_material_init+0x2014>
   161d0:	2000      	movs	r0, #0
   161d2:	4b86      	ldr	r3, [pc, #536]	; (163ec <lv_theme_material_init+0x1238>)
   161d4:	4798      	blx	r3
   161d6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   161da:	0040      	lsls	r0, r0, #1
   161dc:	3050      	adds	r0, #80	; 0x50
   161de:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   161e2:	f081 800b 	bcs.w	171fc <lv_theme_material_init+0x2048>
   161e6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   161e8:	2114      	movs	r1, #20
   161ea:	4620      	mov	r0, r4
   161ec:	4b80      	ldr	r3, [pc, #512]	; (163f0 <lv_theme_material_init+0x123c>)
   161ee:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DEFAULT, - PAD_DEF);
   161f0:	4b80      	ldr	r3, [pc, #512]	; (163f4 <lv_theme_material_init+0x1240>)
   161f2:	681c      	ldr	r4, [r3, #0]
   161f4:	3478      	adds	r4, #120	; 0x78
   161f6:	2000      	movs	r0, #0
   161f8:	4b7b      	ldr	r3, [pc, #492]	; (163e8 <lv_theme_material_init+0x1234>)
   161fa:	4798      	blx	r3
   161fc:	2801      	cmp	r0, #1
   161fe:	f241 800b 	bls.w	17218 <lv_theme_material_init+0x2064>
   16202:	2000      	movs	r0, #0
   16204:	4b79      	ldr	r3, [pc, #484]	; (163ec <lv_theme_material_init+0x1238>)
   16206:	4798      	blx	r3
   16208:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1620c:	0040      	lsls	r0, r0, #1
   1620e:	3050      	adds	r0, #80	; 0x50
   16210:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16214:	f081 801c 	bcs.w	17250 <lv_theme_material_init+0x209c>
   16218:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   1621c:	2104      	movs	r1, #4
   1621e:	4620      	mov	r0, r4
   16220:	4d73      	ldr	r5, [pc, #460]	; (163f0 <lv_theme_material_init+0x123c>)
   16222:	47a8      	blx	r5
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_PRESSED, 0);
   16224:	4c73      	ldr	r4, [pc, #460]	; (163f4 <lv_theme_material_init+0x1240>)
   16226:	6820      	ldr	r0, [r4, #0]
   16228:	2200      	movs	r2, #0
   1622a:	f241 0104 	movw	r1, #4100	; 0x1004
   1622e:	3078      	adds	r0, #120	; 0x78
   16230:	47a8      	blx	r5
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_CHECKED, 0);
   16232:	6820      	ldr	r0, [r4, #0]
   16234:	2200      	movs	r2, #0
   16236:	f44f 7182 	mov.w	r1, #260	; 0x104
   1623a:	3078      	adds	r0, #120	; 0x78
   1623c:	47a8      	blx	r5
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DISABLED, 0);
   1623e:	6820      	ldr	r0, [r4, #0]
   16240:	2200      	movs	r2, #0
   16242:	f242 0104 	movw	r1, #8196	; 0x2004
   16246:	3078      	adds	r0, #120	; 0x78
   16248:	47a8      	blx	r5
    lv_style_set_transition_time(&styles->list_btn, LV_STATE_DEFAULT, TRANSITION_TIME);
   1624a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
   1624c:	2296      	movs	r2, #150	; 0x96
   1624e:	21b0      	movs	r1, #176	; 0xb0
   16250:	3078      	adds	r0, #120	; 0x78
   16252:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->list_btn, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
   16254:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
   16256:	2229      	movs	r2, #41	; 0x29
   16258:	21b7      	movs	r1, #183	; 0xb7
   1625a:	3078      	adds	r0, #120	; 0x78
   1625c:	47a8      	blx	r5
    lv_style_set_transition_prop_5(&styles->list_btn, LV_STATE_DEFAULT, LV_STYLE_TRANSFORM_WIDTH);
   1625e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
   16260:	2204      	movs	r2, #4
   16262:	21b6      	movs	r1, #182	; 0xb6
   16264:	3078      	adds	r0, #120	; 0x78
   16266:	47a8      	blx	r5
    style_init_reset(&styles->ddlist_page);
   16268:	6820      	ldr	r0, [r4, #0]
   1626a:	3054      	adds	r0, #84	; 0x54
   1626c:	4b62      	ldr	r3, [pc, #392]	; (163f8 <lv_theme_material_init+0x1244>)
   1626e:	4798      	blx	r3
    lv_style_set_text_line_space(&styles->ddlist_page, LV_STATE_DEFAULT, LV_DPX(20));
   16270:	6824      	ldr	r4, [r4, #0]
   16272:	3454      	adds	r4, #84	; 0x54
   16274:	2000      	movs	r0, #0
   16276:	4b5d      	ldr	r3, [pc, #372]	; (163ec <lv_theme_material_init+0x1238>)
   16278:	4798      	blx	r3
   1627a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1627e:	0080      	lsls	r0, r0, #2
   16280:	3050      	adds	r0, #80	; 0x50
   16282:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16286:	f080 87f2 	bcs.w	1726e <lv_theme_material_init+0x20ba>
   1628a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   1628c:	f248 0181 	movw	r1, #32897	; 0x8081
   16290:	4620      	mov	r0, r4
   16292:	4d57      	ldr	r5, [pc, #348]	; (163f0 <lv_theme_material_init+0x123c>)
   16294:	47a8      	blx	r5
    lv_style_set_clip_corner(&styles->ddlist_page, LV_STATE_DEFAULT, true);
   16296:	4c57      	ldr	r4, [pc, #348]	; (163f4 <lv_theme_material_init+0x1240>)
   16298:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
   1629a:	2201      	movs	r2, #1
   1629c:	2102      	movs	r1, #2
   1629e:	3054      	adds	r0, #84	; 0x54
   162a0:	47a8      	blx	r5
    style_init_reset(&styles->ddlist_sel);
   162a2:	6820      	ldr	r0, [r4, #0]
   162a4:	3058      	adds	r0, #88	; 0x58
   162a6:	4b54      	ldr	r3, [pc, #336]	; (163f8 <lv_theme_material_init+0x1244>)
   162a8:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->ddlist_sel, LV_STATE_DEFAULT, LV_OPA_COVER);
   162aa:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   162ac:	22ff      	movs	r2, #255	; 0xff
   162ae:	212c      	movs	r1, #44	; 0x2c
   162b0:	3058      	adds	r0, #88	; 0x58
   162b2:	4b52      	ldr	r3, [pc, #328]	; (163fc <lv_theme_material_init+0x1248>)
   162b4:	4798      	blx	r3
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_DEFAULT, theme.color_primary);
   162b6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   162b8:	89a2      	ldrh	r2, [r4, #12]
   162ba:	2129      	movs	r1, #41	; 0x29
   162bc:	3058      	adds	r0, #88	; 0x58
   162be:	4d50      	ldr	r5, [pc, #320]	; (16400 <lv_theme_material_init+0x124c>)
   162c0:	47a8      	blx	r5
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex3(0xfff) : lv_color_hex3(0xfff));
   162c2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   162c4:	f04f 32ff 	mov.w	r2, #4294967295
   162c8:	f248 0189 	movw	r1, #32905	; 0x8089
   162cc:	3058      	adds	r0, #88	; 0x58
   162ce:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_PR);
   162d0:	6820      	ldr	r0, [r4, #0]
   162d2:	3058      	adds	r0, #88	; 0x58
   162d4:	6a23      	ldr	r3, [r4, #32]
   162d6:	f013 0f02 	tst.w	r3, #2
   162da:	f040 87d6 	bne.w	1728a <lv_theme_material_init+0x20d6>
   162de:	2309      	movs	r3, #9
   162e0:	2113      	movs	r1, #19
   162e2:	240a      	movs	r4, #10
   162e4:	f04f 0200 	mov.w	r2, #0
   162e8:	f364 0204 	bfi	r2, r4, #0, #5
   162ec:	f361 124a 	bfi	r2, r1, #5, #6
   162f0:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   162f4:	f241 0129 	movw	r1, #4137	; 0x1029
   162f8:	4b41      	ldr	r3, [pc, #260]	; (16400 <lv_theme_material_init+0x124c>)
   162fa:	4798      	blx	r3
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
   162fc:	4b3d      	ldr	r3, [pc, #244]	; (163f4 <lv_theme_material_init+0x1240>)
   162fe:	6818      	ldr	r0, [r3, #0]
   16300:	3058      	adds	r0, #88	; 0x58
   16302:	6a1b      	ldr	r3, [r3, #32]
   16304:	f013 0f02 	tst.w	r3, #2
   16308:	f040 87c4 	bne.w	17294 <lv_theme_material_init+0x20e0>
   1630c:	231f      	movs	r3, #31
   1630e:	213f      	movs	r1, #63	; 0x3f
   16310:	461c      	mov	r4, r3
   16312:	f04f 0200 	mov.w	r2, #0
   16316:	f364 0204 	bfi	r2, r4, #0, #5
   1631a:	f361 124a 	bfi	r2, r1, #5, #6
   1631e:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   16322:	f249 0189 	movw	r1, #37001	; 0x9089
   16326:	4b36      	ldr	r3, [pc, #216]	; (16400 <lv_theme_material_init+0x124c>)
   16328:	4798      	blx	r3
    style_init_reset(&styles->roller_bg);
   1632a:	4c32      	ldr	r4, [pc, #200]	; (163f4 <lv_theme_material_init+0x1240>)
   1632c:	6820      	ldr	r0, [r4, #0]
   1632e:	3088      	adds	r0, #136	; 0x88
   16330:	4b31      	ldr	r3, [pc, #196]	; (163f8 <lv_theme_material_init+0x1244>)
   16332:	4798      	blx	r3
    lv_style_set_text_line_space(&styles->roller_bg, LV_STATE_DEFAULT, LV_DPX(25));
   16334:	6824      	ldr	r4, [r4, #0]
   16336:	3488      	adds	r4, #136	; 0x88
   16338:	2000      	movs	r0, #0
   1633a:	4b2c      	ldr	r3, [pc, #176]	; (163ec <lv_theme_material_init+0x1238>)
   1633c:	4798      	blx	r3
   1633e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16342:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16346:	3050      	adds	r0, #80	; 0x50
   16348:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1634c:	f080 87a7 	bcs.w	1729e <lv_theme_material_init+0x20ea>
   16350:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   16352:	f248 0181 	movw	r1, #32897	; 0x8081
   16356:	4620      	mov	r0, r4
   16358:	4b25      	ldr	r3, [pc, #148]	; (163f0 <lv_theme_material_init+0x123c>)
   1635a:	4798      	blx	r3
    style_init_reset(&styles->roller_sel);
   1635c:	4c25      	ldr	r4, [pc, #148]	; (163f4 <lv_theme_material_init+0x1240>)
   1635e:	6820      	ldr	r0, [r4, #0]
   16360:	308c      	adds	r0, #140	; 0x8c
   16362:	4f25      	ldr	r7, [pc, #148]	; (163f8 <lv_theme_material_init+0x1244>)
   16364:	47b8      	blx	r7
    lv_style_set_bg_opa(&styles->roller_sel, LV_STATE_DEFAULT, LV_OPA_COVER);
   16366:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   16368:	22ff      	movs	r2, #255	; 0xff
   1636a:	212c      	movs	r1, #44	; 0x2c
   1636c:	308c      	adds	r0, #140	; 0x8c
   1636e:	4e23      	ldr	r6, [pc, #140]	; (163fc <lv_theme_material_init+0x1248>)
   16370:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->roller_sel, LV_STATE_DEFAULT, theme.color_primary);
   16372:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   16374:	89a2      	ldrh	r2, [r4, #12]
   16376:	2129      	movs	r1, #41	; 0x29
   16378:	308c      	adds	r0, #140	; 0x8c
   1637a:	4d21      	ldr	r5, [pc, #132]	; (16400 <lv_theme_material_init+0x124c>)
   1637c:	47a8      	blx	r5
    lv_style_set_text_color(&styles->roller_sel, LV_STATE_DEFAULT, LV_COLOR_WHITE);
   1637e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   16380:	4b20      	ldr	r3, [pc, #128]	; (16404 <lv_theme_material_init+0x1250>)
   16382:	881a      	ldrh	r2, [r3, #0]
   16384:	f248 0189 	movw	r1, #32905	; 0x8089
   16388:	308c      	adds	r0, #140	; 0x8c
   1638a:	47a8      	blx	r5
    style_init_reset(&styles->tabview_btns_bg);
   1638c:	6820      	ldr	r0, [r4, #0]
   1638e:	30a8      	adds	r0, #168	; 0xa8
   16390:	47b8      	blx	r7
    lv_style_set_bg_opa(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
   16392:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   16394:	22ff      	movs	r2, #255	; 0xff
   16396:	212c      	movs	r1, #44	; 0x2c
   16398:	30a8      	adds	r0, #168	; 0xa8
   1639a:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_BG);
   1639c:	6820      	ldr	r0, [r4, #0]
   1639e:	30a8      	adds	r0, #168	; 0xa8
   163a0:	6a23      	ldr	r3, [r4, #32]
   163a2:	f013 0f02 	tst.w	r3, #2
   163a6:	f040 878a 	bne.w	172be <lv_theme_material_init+0x210a>
   163aa:	230b      	movs	r3, #11
   163ac:	2118      	movs	r1, #24
   163ae:	240e      	movs	r4, #14
   163b0:	f04f 0200 	mov.w	r2, #0
   163b4:	f364 0204 	bfi	r2, r4, #0, #5
   163b8:	f361 124a 	bfi	r2, r1, #5, #6
   163bc:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   163c0:	2129      	movs	r1, #41	; 0x29
   163c2:	4b0f      	ldr	r3, [pc, #60]	; (16400 <lv_theme_material_init+0x124c>)
   163c4:	4798      	blx	r3
    lv_style_set_border_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT,
   163c6:	4b0b      	ldr	r3, [pc, #44]	; (163f4 <lv_theme_material_init+0x1240>)
   163c8:	6818      	ldr	r0, [r3, #0]
                              IS_LIGHT ? lv_color_hex(0xe4eaf0) : lv_color_hex(0x3b3e42));
   163ca:	6a1b      	ldr	r3, [r3, #32]
    lv_style_set_border_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT,
   163cc:	f013 0302 	ands.w	r3, r3, #2
   163d0:	bf14      	ite	ne
   163d2:	211c      	movne	r1, #28
   163d4:	2107      	moveq	r1, #7
   163d6:	2b00      	cmp	r3, #0
   163d8:	bf15      	itete	ne
   163da:	243a      	movne	r4, #58	; 0x3a
   163dc:	240f      	moveq	r4, #15
   163de:	231e      	movne	r3, #30
   163e0:	2308      	moveq	r3, #8
   163e2:	f04f 0200 	mov.w	r2, #0
   163e6:	e00f      	b.n	16408 <lv_theme_material_init+0x1254>
   163e8:	000101d9 	.word	0x000101d9
   163ec:	000101bd 	.word	0x000101bd
   163f0:	00006039 	.word	0x00006039
   163f4:	2000abd4 	.word	0x2000abd4
   163f8:	00013181 	.word	0x00013181
   163fc:	00006289 	.word	0x00006289
   16400:	00006161 	.word	0x00006161
   16404:	0001b780 	.word	0x0001b780
   16408:	f363 0204 	bfi	r2, r3, #0, #5
   1640c:	f364 124a 	bfi	r2, r4, #5, #6
   16410:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   16414:	2139      	movs	r1, #57	; 0x39
   16416:	30a8      	adds	r0, #168	; 0xa8
   16418:	4bb6      	ldr	r3, [pc, #728]	; (166f4 <lv_theme_material_init+0x1540>)
   1641a:	4798      	blx	r3
    lv_style_set_border_width(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(5));
   1641c:	4bb6      	ldr	r3, [pc, #728]	; (166f8 <lv_theme_material_init+0x1544>)
   1641e:	681c      	ldr	r4, [r3, #0]
   16420:	34a8      	adds	r4, #168	; 0xa8
   16422:	2000      	movs	r0, #0
   16424:	4bb5      	ldr	r3, [pc, #724]	; (166fc <lv_theme_material_init+0x1548>)
   16426:	4798      	blx	r3
   16428:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1642c:	3050      	adds	r0, #80	; 0x50
   1642e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16432:	f080 8749 	bcs.w	172c8 <lv_theme_material_init+0x2114>
   16436:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   16438:	2130      	movs	r1, #48	; 0x30
   1643a:	4620      	mov	r0, r4
   1643c:	4db0      	ldr	r5, [pc, #704]	; (16700 <lv_theme_material_init+0x154c>)
   1643e:	47a8      	blx	r5
    lv_style_set_border_side(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_BORDER_SIDE_BOTTOM);
   16440:	4cad      	ldr	r4, [pc, #692]	; (166f8 <lv_theme_material_init+0x1544>)
   16442:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
   16444:	2201      	movs	r2, #1
   16446:	2131      	movs	r1, #49	; 0x31
   16448:	30a8      	adds	r0, #168	; 0xa8
   1644a:	47a8      	blx	r5
    lv_style_set_text_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
   1644c:	6820      	ldr	r0, [r4, #0]
   1644e:	6a23      	ldr	r3, [r4, #32]
   16450:	f013 0302 	ands.w	r3, r3, #2
   16454:	bf14      	ite	ne
   16456:	2107      	movne	r1, #7
   16458:	211c      	moveq	r1, #28
   1645a:	2b00      	cmp	r3, #0
   1645c:	bf15      	itete	ne
   1645e:	240f      	movne	r4, #15
   16460:	243a      	moveq	r4, #58	; 0x3a
   16462:	2308      	movne	r3, #8
   16464:	231d      	moveq	r3, #29
   16466:	f04f 0200 	mov.w	r2, #0
   1646a:	f363 0204 	bfi	r2, r3, #0, #5
   1646e:	f364 124a 	bfi	r2, r4, #5, #6
   16472:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   16476:	f248 0189 	movw	r1, #32905	; 0x8089
   1647a:	30a8      	adds	r0, #168	; 0xa8
   1647c:	4d9d      	ldr	r5, [pc, #628]	; (166f4 <lv_theme_material_init+0x1540>)
   1647e:	47a8      	blx	r5
    lv_style_set_text_font(&styles->tabview_btns_bg, LV_STATE_DEFAULT, theme.font_normal);
   16480:	4c9d      	ldr	r4, [pc, #628]	; (166f8 <lv_theme_material_init+0x1544>)
   16482:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   16484:	6962      	ldr	r2, [r4, #20]
   16486:	f248 018e 	movw	r1, #32910	; 0x808e
   1648a:	30a8      	adds	r0, #168	; 0xa8
   1648c:	4b9d      	ldr	r3, [pc, #628]	; (16704 <lv_theme_material_init+0x1550>)
   1648e:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->tabview_btns_bg, LV_STATE_DEFAULT, lv_color_hex(0x979a9f));
   16490:	6820      	ldr	r0, [r4, #0]
   16492:	f04f 0200 	mov.w	r2, #0
   16496:	2313      	movs	r3, #19
   16498:	f363 0204 	bfi	r2, r3, #0, #5
   1649c:	2326      	movs	r3, #38	; 0x26
   1649e:	f363 124a 	bfi	r2, r3, #5, #6
   164a2:	2312      	movs	r3, #18
   164a4:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   164a8:	f248 01a9 	movw	r1, #32937	; 0x80a9
   164ac:	30a8      	adds	r0, #168	; 0xa8
   164ae:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
   164b0:	6824      	ldr	r4, [r4, #0]
   164b2:	34a8      	adds	r4, #168	; 0xa8
   164b4:	2000      	movs	r0, #0
   164b6:	4b91      	ldr	r3, [pc, #580]	; (166fc <lv_theme_material_init+0x1548>)
   164b8:	4798      	blx	r3
   164ba:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   164be:	3050      	adds	r0, #80	; 0x50
   164c0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   164c4:	f080 870e 	bcs.w	172e4 <lv_theme_material_init+0x2130>
   164c8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   164ca:	2110      	movs	r1, #16
   164cc:	4620      	mov	r0, r4
   164ce:	4b8c      	ldr	r3, [pc, #560]	; (16700 <lv_theme_material_init+0x154c>)
   164d0:	4798      	blx	r3
    lv_style_set_pad_left(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
   164d2:	4b89      	ldr	r3, [pc, #548]	; (166f8 <lv_theme_material_init+0x1544>)
   164d4:	681c      	ldr	r4, [r3, #0]
   164d6:	34a8      	adds	r4, #168	; 0xa8
   164d8:	2000      	movs	r0, #0
   164da:	4b88      	ldr	r3, [pc, #544]	; (166fc <lv_theme_material_init+0x1548>)
   164dc:	4798      	blx	r3
   164de:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   164e2:	3050      	adds	r0, #80	; 0x50
   164e4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   164e8:	f080 870a 	bcs.w	17300 <lv_theme_material_init+0x214c>
   164ec:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   164ee:	2112      	movs	r1, #18
   164f0:	4620      	mov	r0, r4
   164f2:	4b83      	ldr	r3, [pc, #524]	; (16700 <lv_theme_material_init+0x154c>)
   164f4:	4798      	blx	r3
    lv_style_set_pad_right(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
   164f6:	4b80      	ldr	r3, [pc, #512]	; (166f8 <lv_theme_material_init+0x1544>)
   164f8:	681c      	ldr	r4, [r3, #0]
   164fa:	34a8      	adds	r4, #168	; 0xa8
   164fc:	2000      	movs	r0, #0
   164fe:	4b7f      	ldr	r3, [pc, #508]	; (166fc <lv_theme_material_init+0x1548>)
   16500:	4798      	blx	r3
   16502:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   16506:	3050      	adds	r0, #80	; 0x50
   16508:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1650c:	f080 8706 	bcs.w	1731c <lv_theme_material_init+0x2168>
   16510:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   16512:	2113      	movs	r1, #19
   16514:	4620      	mov	r0, r4
   16516:	4b7a      	ldr	r3, [pc, #488]	; (16700 <lv_theme_material_init+0x154c>)
   16518:	4798      	blx	r3
    style_init_reset(&styles->tabview_btns);
   1651a:	4c77      	ldr	r4, [pc, #476]	; (166f8 <lv_theme_material_init+0x1544>)
   1651c:	6820      	ldr	r0, [r4, #0]
   1651e:	30a4      	adds	r0, #164	; 0xa4
   16520:	4b79      	ldr	r3, [pc, #484]	; (16708 <lv_theme_material_init+0x1554>)
   16522:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->tabview_btns, LV_STATE_PRESSED, LV_OPA_50);
   16524:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   16526:	227f      	movs	r2, #127	; 0x7f
   16528:	f241 012c 	movw	r1, #4140	; 0x102c
   1652c:	30a4      	adds	r0, #164	; 0xa4
   1652e:	4b77      	ldr	r3, [pc, #476]	; (1670c <lv_theme_material_init+0x1558>)
   16530:	4798      	blx	r3
    lv_style_set_bg_color(&styles->tabview_btns, LV_STATE_PRESSED, lv_color_hex3(0x888));
   16532:	6820      	ldr	r0, [r4, #0]
   16534:	2311      	movs	r3, #17
   16536:	f04f 0200 	mov.w	r2, #0
   1653a:	f363 0204 	bfi	r2, r3, #0, #5
   1653e:	2122      	movs	r1, #34	; 0x22
   16540:	f361 124a 	bfi	r2, r1, #5, #6
   16544:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   16548:	f241 0129 	movw	r1, #4137	; 0x1029
   1654c:	30a4      	adds	r0, #164	; 0xa4
   1654e:	4b69      	ldr	r3, [pc, #420]	; (166f4 <lv_theme_material_init+0x1540>)
   16550:	4798      	blx	r3
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_CHECKED, COLOR_SCR_TEXT);
   16552:	6820      	ldr	r0, [r4, #0]
   16554:	6a23      	ldr	r3, [r4, #32]
   16556:	f013 0302 	ands.w	r3, r3, #2
   1655a:	bf14      	ite	ne
   1655c:	2107      	movne	r1, #7
   1655e:	211c      	moveq	r1, #28
   16560:	2b00      	cmp	r3, #0
   16562:	bf15      	itete	ne
   16564:	240f      	movne	r4, #15
   16566:	243a      	moveq	r4, #58	; 0x3a
   16568:	2308      	movne	r3, #8
   1656a:	231d      	moveq	r3, #29
   1656c:	f04f 0200 	mov.w	r2, #0
   16570:	f363 0204 	bfi	r2, r3, #0, #5
   16574:	f364 124a 	bfi	r2, r4, #5, #6
   16578:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   1657c:	f248 1189 	movw	r1, #33161	; 0x8189
   16580:	30a4      	adds	r0, #164	; 0xa4
   16582:	4b5c      	ldr	r3, [pc, #368]	; (166f4 <lv_theme_material_init+0x1540>)
   16584:	4798      	blx	r3
    lv_style_set_pad_top(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
   16586:	4b5c      	ldr	r3, [pc, #368]	; (166f8 <lv_theme_material_init+0x1544>)
   16588:	681c      	ldr	r4, [r3, #0]
   1658a:	34a4      	adds	r4, #164	; 0xa4
   1658c:	2000      	movs	r0, #0
   1658e:	4b5b      	ldr	r3, [pc, #364]	; (166fc <lv_theme_material_init+0x1548>)
   16590:	4798      	blx	r3
   16592:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16596:	0080      	lsls	r0, r0, #2
   16598:	3050      	adds	r0, #80	; 0x50
   1659a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1659e:	f080 86cb 	bcs.w	17338 <lv_theme_material_init+0x2184>
   165a2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   165a4:	2110      	movs	r1, #16
   165a6:	4620      	mov	r0, r4
   165a8:	4b55      	ldr	r3, [pc, #340]	; (16700 <lv_theme_material_init+0x154c>)
   165aa:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
   165ac:	4b52      	ldr	r3, [pc, #328]	; (166f8 <lv_theme_material_init+0x1544>)
   165ae:	681c      	ldr	r4, [r3, #0]
   165b0:	34a4      	adds	r4, #164	; 0xa4
   165b2:	2000      	movs	r0, #0
   165b4:	4b51      	ldr	r3, [pc, #324]	; (166fc <lv_theme_material_init+0x1548>)
   165b6:	4798      	blx	r3
   165b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   165bc:	0080      	lsls	r0, r0, #2
   165be:	3050      	adds	r0, #80	; 0x50
   165c0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   165c4:	f080 86c6 	bcs.w	17354 <lv_theme_material_init+0x21a0>
   165c8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   165ca:	2111      	movs	r1, #17
   165cc:	4620      	mov	r0, r4
   165ce:	4b4c      	ldr	r3, [pc, #304]	; (16700 <lv_theme_material_init+0x154c>)
   165d0:	4798      	blx	r3
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_FOCUSED, theme.color_primary);
   165d2:	4c49      	ldr	r4, [pc, #292]	; (166f8 <lv_theme_material_init+0x1544>)
   165d4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   165d6:	89a2      	ldrh	r2, [r4, #12]
   165d8:	f248 2189 	movw	r1, #33417	; 0x8289
   165dc:	30a4      	adds	r0, #164	; 0xa4
   165de:	4d45      	ldr	r5, [pc, #276]	; (166f4 <lv_theme_material_init+0x1540>)
   165e0:	47a8      	blx	r5
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_EDITED, theme.color_secondary);
   165e2:	6820      	ldr	r0, [r4, #0]
   165e4:	89e2      	ldrh	r2, [r4, #14]
   165e6:	f248 4189 	movw	r1, #33929	; 0x8489
   165ea:	30a4      	adds	r0, #164	; 0xa4
   165ec:	47a8      	blx	r5
    style_init_reset(&styles->tabview_indic);
   165ee:	6820      	ldr	r0, [r4, #0]
   165f0:	30ac      	adds	r0, #172	; 0xac
   165f2:	4b45      	ldr	r3, [pc, #276]	; (16708 <lv_theme_material_init+0x1554>)
   165f4:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->tabview_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
   165f6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   165f8:	22ff      	movs	r2, #255	; 0xff
   165fa:	212c      	movs	r1, #44	; 0x2c
   165fc:	30ac      	adds	r0, #172	; 0xac
   165fe:	4b43      	ldr	r3, [pc, #268]	; (1670c <lv_theme_material_init+0x1558>)
   16600:	4798      	blx	r3
    lv_style_set_bg_color(&styles->tabview_indic, LV_STATE_DEFAULT, theme.color_primary);
   16602:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   16604:	89a2      	ldrh	r2, [r4, #12]
   16606:	2129      	movs	r1, #41	; 0x29
   16608:	30ac      	adds	r0, #172	; 0xac
   1660a:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->tabview_indic, LV_STATE_EDITED, theme.color_secondary);
   1660c:	6820      	ldr	r0, [r4, #0]
   1660e:	89e2      	ldrh	r2, [r4, #14]
   16610:	f240 4129 	movw	r1, #1065	; 0x429
   16614:	30ac      	adds	r0, #172	; 0xac
   16616:	47a8      	blx	r5
    lv_style_set_size(&styles->tabview_indic, LV_STATE_DEFAULT, LV_DPX(5));
   16618:	6824      	ldr	r4, [r4, #0]
   1661a:	34ac      	adds	r4, #172	; 0xac
   1661c:	2000      	movs	r0, #0
   1661e:	4b37      	ldr	r3, [pc, #220]	; (166fc <lv_theme_material_init+0x1548>)
   16620:	4798      	blx	r3
   16622:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16626:	3050      	adds	r0, #80	; 0x50
   16628:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1662c:	f080 86a0 	bcs.w	17370 <lv_theme_material_init+0x21bc>
   16630:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
   16632:	2103      	movs	r1, #3
   16634:	4620      	mov	r0, r4
   16636:	4d32      	ldr	r5, [pc, #200]	; (16700 <lv_theme_material_init+0x154c>)
   16638:	47a8      	blx	r5
    lv_style_set_radius(&styles->tabview_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   1663a:	4c2f      	ldr	r4, [pc, #188]	; (166f8 <lv_theme_material_init+0x1544>)
   1663c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   1663e:	f647 72ff 	movw	r2, #32767	; 0x7fff
   16642:	2101      	movs	r1, #1
   16644:	30ac      	adds	r0, #172	; 0xac
   16646:	47a8      	blx	r5
    style_init_reset(&styles->tabview_page_scrl);
   16648:	6820      	ldr	r0, [r4, #0]
   1664a:	30b0      	adds	r0, #176	; 0xb0
   1664c:	4b2e      	ldr	r3, [pc, #184]	; (16708 <lv_theme_material_init+0x1554>)
   1664e:	4798      	blx	r3
    lv_style_set_pad_top(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   16650:	6824      	ldr	r4, [r4, #0]
   16652:	34b0      	adds	r4, #176	; 0xb0
   16654:	2000      	movs	r0, #0
   16656:	4b2e      	ldr	r3, [pc, #184]	; (16710 <lv_theme_material_init+0x155c>)
   16658:	4798      	blx	r3
   1665a:	2801      	cmp	r0, #1
   1665c:	f240 8696 	bls.w	1738c <lv_theme_material_init+0x21d8>
   16660:	2000      	movs	r0, #0
   16662:	4b26      	ldr	r3, [pc, #152]	; (166fc <lv_theme_material_init+0x1548>)
   16664:	4798      	blx	r3
   16666:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1666a:	0040      	lsls	r0, r0, #1
   1666c:	3050      	adds	r0, #80	; 0x50
   1666e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16672:	f080 86a5 	bcs.w	173c0 <lv_theme_material_init+0x220c>
   16676:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   16678:	2110      	movs	r1, #16
   1667a:	4620      	mov	r0, r4
   1667c:	4b20      	ldr	r3, [pc, #128]	; (16700 <lv_theme_material_init+0x154c>)
   1667e:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   16680:	4b1d      	ldr	r3, [pc, #116]	; (166f8 <lv_theme_material_init+0x1544>)
   16682:	681c      	ldr	r4, [r3, #0]
   16684:	34b0      	adds	r4, #176	; 0xb0
   16686:	2000      	movs	r0, #0
   16688:	4b21      	ldr	r3, [pc, #132]	; (16710 <lv_theme_material_init+0x155c>)
   1668a:	4798      	blx	r3
   1668c:	2801      	cmp	r0, #1
   1668e:	f240 86a5 	bls.w	173dc <lv_theme_material_init+0x2228>
   16692:	2000      	movs	r0, #0
   16694:	4b19      	ldr	r3, [pc, #100]	; (166fc <lv_theme_material_init+0x1548>)
   16696:	4798      	blx	r3
   16698:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1669c:	0040      	lsls	r0, r0, #1
   1669e:	3050      	adds	r0, #80	; 0x50
   166a0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   166a4:	f080 86b8 	bcs.w	17418 <lv_theme_material_init+0x2264>
   166a8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   166aa:	2111      	movs	r1, #17
   166ac:	4620      	mov	r0, r4
   166ae:	4b14      	ldr	r3, [pc, #80]	; (16700 <lv_theme_material_init+0x154c>)
   166b0:	4798      	blx	r3
    lv_style_set_pad_left(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   166b2:	4b11      	ldr	r3, [pc, #68]	; (166f8 <lv_theme_material_init+0x1544>)
   166b4:	681c      	ldr	r4, [r3, #0]
   166b6:	34b0      	adds	r4, #176	; 0xb0
   166b8:	2000      	movs	r0, #0
   166ba:	4b15      	ldr	r3, [pc, #84]	; (16710 <lv_theme_material_init+0x155c>)
   166bc:	4798      	blx	r3
   166be:	2801      	cmp	r0, #1
   166c0:	f240 86b8 	bls.w	17434 <lv_theme_material_init+0x2280>
   166c4:	2000      	movs	r0, #0
   166c6:	4b0d      	ldr	r3, [pc, #52]	; (166fc <lv_theme_material_init+0x1548>)
   166c8:	4798      	blx	r3
   166ca:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   166ce:	0040      	lsls	r0, r0, #1
   166d0:	3050      	adds	r0, #80	; 0x50
   166d2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   166d6:	f080 86c7 	bcs.w	17468 <lv_theme_material_init+0x22b4>
   166da:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   166dc:	2112      	movs	r1, #18
   166de:	4620      	mov	r0, r4
   166e0:	4b07      	ldr	r3, [pc, #28]	; (16700 <lv_theme_material_init+0x154c>)
   166e2:	4798      	blx	r3
    lv_style_set_pad_right(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   166e4:	4b04      	ldr	r3, [pc, #16]	; (166f8 <lv_theme_material_init+0x1544>)
   166e6:	681c      	ldr	r4, [r3, #0]
   166e8:	34b0      	adds	r4, #176	; 0xb0
   166ea:	2000      	movs	r0, #0
   166ec:	4b08      	ldr	r3, [pc, #32]	; (16710 <lv_theme_material_init+0x155c>)
   166ee:	4798      	blx	r3
   166f0:	2801      	cmp	r0, #1
   166f2:	e00f      	b.n	16714 <lv_theme_material_init+0x1560>
   166f4:	00006161 	.word	0x00006161
   166f8:	2000abd4 	.word	0x2000abd4
   166fc:	000101bd 	.word	0x000101bd
   16700:	00006039 	.word	0x00006039
   16704:	0000639d 	.word	0x0000639d
   16708:	00013181 	.word	0x00013181
   1670c:	00006289 	.word	0x00006289
   16710:	000101d9 	.word	0x000101d9
   16714:	f240 86b6 	bls.w	17484 <lv_theme_material_init+0x22d0>
   16718:	2000      	movs	r0, #0
   1671a:	4bbd      	ldr	r3, [pc, #756]	; (16a10 <lv_theme_material_init+0x185c>)
   1671c:	4798      	blx	r3
   1671e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16722:	0040      	lsls	r0, r0, #1
   16724:	3050      	adds	r0, #80	; 0x50
   16726:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1672a:	f080 86c5 	bcs.w	174b8 <lv_theme_material_init+0x2304>
   1672e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   16730:	2113      	movs	r1, #19
   16732:	4620      	mov	r0, r4
   16734:	4bb7      	ldr	r3, [pc, #732]	; (16a14 <lv_theme_material_init+0x1860>)
   16736:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   16738:	4bb7      	ldr	r3, [pc, #732]	; (16a18 <lv_theme_material_init+0x1864>)
   1673a:	681c      	ldr	r4, [r3, #0]
   1673c:	34b0      	adds	r4, #176	; 0xb0
   1673e:	2000      	movs	r0, #0
   16740:	4bb6      	ldr	r3, [pc, #728]	; (16a1c <lv_theme_material_init+0x1868>)
   16742:	4798      	blx	r3
   16744:	2801      	cmp	r0, #1
   16746:	f240 86c5 	bls.w	174d4 <lv_theme_material_init+0x2320>
   1674a:	2000      	movs	r0, #0
   1674c:	4bb0      	ldr	r3, [pc, #704]	; (16a10 <lv_theme_material_init+0x185c>)
   1674e:	4798      	blx	r3
   16750:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16754:	0040      	lsls	r0, r0, #1
   16756:	3050      	adds	r0, #80	; 0x50
   16758:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1675c:	f080 86d4 	bcs.w	17508 <lv_theme_material_init+0x2354>
   16760:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   16762:	2114      	movs	r1, #20
   16764:	4620      	mov	r0, r4
   16766:	4bab      	ldr	r3, [pc, #684]	; (16a14 <lv_theme_material_init+0x1860>)
   16768:	4798      	blx	r3
    style_init_reset(&styles->table_cell);
   1676a:	4cab      	ldr	r4, [pc, #684]	; (16a18 <lv_theme_material_init+0x1864>)
   1676c:	6820      	ldr	r0, [r4, #0]
   1676e:	30a0      	adds	r0, #160	; 0xa0
   16770:	4bab      	ldr	r3, [pc, #684]	; (16a20 <lv_theme_material_init+0x186c>)
   16772:	4798      	blx	r3
    lv_style_set_border_color(&styles->table_cell, LV_STATE_DEFAULT, COLOR_BG_BORDER);
   16774:	6820      	ldr	r0, [r4, #0]
   16776:	6a23      	ldr	r3, [r4, #32]
   16778:	f013 0302 	ands.w	r3, r3, #2
   1677c:	bf14      	ite	ne
   1677e:	211a      	movne	r1, #26
   16780:	2110      	moveq	r1, #16
   16782:	2b00      	cmp	r3, #0
   16784:	bf15      	itete	ne
   16786:	2437      	movne	r4, #55	; 0x37
   16788:	2422      	moveq	r4, #34	; 0x22
   1678a:	231c      	movne	r3, #28
   1678c:	2312      	moveq	r3, #18
   1678e:	f04f 0200 	mov.w	r2, #0
   16792:	f363 0204 	bfi	r2, r3, #0, #5
   16796:	f364 124a 	bfi	r2, r4, #5, #6
   1679a:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   1679e:	2139      	movs	r1, #57	; 0x39
   167a0:	30a0      	adds	r0, #160	; 0xa0
   167a2:	4ba0      	ldr	r3, [pc, #640]	; (16a24 <lv_theme_material_init+0x1870>)
   167a4:	4798      	blx	r3
    lv_style_set_border_width(&styles->table_cell, LV_STATE_DEFAULT, 1);
   167a6:	4c9c      	ldr	r4, [pc, #624]	; (16a18 <lv_theme_material_init+0x1864>)
   167a8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   167aa:	2201      	movs	r2, #1
   167ac:	2130      	movs	r1, #48	; 0x30
   167ae:	30a0      	adds	r0, #160	; 0xa0
   167b0:	4d98      	ldr	r5, [pc, #608]	; (16a14 <lv_theme_material_init+0x1860>)
   167b2:	47a8      	blx	r5
    lv_style_set_border_side(&styles->table_cell, LV_STATE_DEFAULT, LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM);
   167b4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
   167b6:	2203      	movs	r2, #3
   167b8:	2131      	movs	r1, #49	; 0x31
   167ba:	30a0      	adds	r0, #160	; 0xa0
   167bc:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
   167be:	6824      	ldr	r4, [r4, #0]
   167c0:	34a0      	adds	r4, #160	; 0xa0
   167c2:	2000      	movs	r0, #0
   167c4:	4b95      	ldr	r3, [pc, #596]	; (16a1c <lv_theme_material_init+0x1868>)
   167c6:	4798      	blx	r3
   167c8:	2801      	cmp	r0, #1
   167ca:	f240 86ab 	bls.w	17524 <lv_theme_material_init+0x2370>
   167ce:	2000      	movs	r0, #0
   167d0:	4b8f      	ldr	r3, [pc, #572]	; (16a10 <lv_theme_material_init+0x185c>)
   167d2:	4798      	blx	r3
   167d4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   167d8:	0040      	lsls	r0, r0, #1
   167da:	3050      	adds	r0, #80	; 0x50
   167dc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   167e0:	f080 86ba 	bcs.w	17558 <lv_theme_material_init+0x23a4>
   167e4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   167e6:	2112      	movs	r1, #18
   167e8:	4620      	mov	r0, r4
   167ea:	4b8a      	ldr	r3, [pc, #552]	; (16a14 <lv_theme_material_init+0x1860>)
   167ec:	4798      	blx	r3
    lv_style_set_pad_right(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
   167ee:	4b8a      	ldr	r3, [pc, #552]	; (16a18 <lv_theme_material_init+0x1864>)
   167f0:	681c      	ldr	r4, [r3, #0]
   167f2:	34a0      	adds	r4, #160	; 0xa0
   167f4:	2000      	movs	r0, #0
   167f6:	4b89      	ldr	r3, [pc, #548]	; (16a1c <lv_theme_material_init+0x1868>)
   167f8:	4798      	blx	r3
   167fa:	2801      	cmp	r0, #1
   167fc:	f240 86ba 	bls.w	17574 <lv_theme_material_init+0x23c0>
   16800:	2000      	movs	r0, #0
   16802:	4b83      	ldr	r3, [pc, #524]	; (16a10 <lv_theme_material_init+0x185c>)
   16804:	4798      	blx	r3
   16806:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1680a:	0040      	lsls	r0, r0, #1
   1680c:	3050      	adds	r0, #80	; 0x50
   1680e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16812:	f080 86c9 	bcs.w	175a8 <lv_theme_material_init+0x23f4>
   16816:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   16818:	2113      	movs	r1, #19
   1681a:	4620      	mov	r0, r4
   1681c:	4b7d      	ldr	r3, [pc, #500]	; (16a14 <lv_theme_material_init+0x1860>)
   1681e:	4798      	blx	r3
    lv_style_set_pad_top(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
   16820:	4b7d      	ldr	r3, [pc, #500]	; (16a18 <lv_theme_material_init+0x1864>)
   16822:	681c      	ldr	r4, [r3, #0]
   16824:	34a0      	adds	r4, #160	; 0xa0
   16826:	2000      	movs	r0, #0
   16828:	4b7c      	ldr	r3, [pc, #496]	; (16a1c <lv_theme_material_init+0x1868>)
   1682a:	4798      	blx	r3
   1682c:	2801      	cmp	r0, #1
   1682e:	f240 86c9 	bls.w	175c4 <lv_theme_material_init+0x2410>
   16832:	2000      	movs	r0, #0
   16834:	4b76      	ldr	r3, [pc, #472]	; (16a10 <lv_theme_material_init+0x185c>)
   16836:	4798      	blx	r3
   16838:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1683c:	0040      	lsls	r0, r0, #1
   1683e:	3050      	adds	r0, #80	; 0x50
   16840:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16844:	f080 86d8 	bcs.w	175f8 <lv_theme_material_init+0x2444>
   16848:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   1684a:	2110      	movs	r1, #16
   1684c:	4620      	mov	r0, r4
   1684e:	4b71      	ldr	r3, [pc, #452]	; (16a14 <lv_theme_material_init+0x1860>)
   16850:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
   16852:	4b71      	ldr	r3, [pc, #452]	; (16a18 <lv_theme_material_init+0x1864>)
   16854:	681c      	ldr	r4, [r3, #0]
   16856:	34a0      	adds	r4, #160	; 0xa0
   16858:	2000      	movs	r0, #0
   1685a:	4b70      	ldr	r3, [pc, #448]	; (16a1c <lv_theme_material_init+0x1868>)
   1685c:	4798      	blx	r3
   1685e:	2801      	cmp	r0, #1
   16860:	f240 86d8 	bls.w	17614 <lv_theme_material_init+0x2460>
   16864:	2000      	movs	r0, #0
   16866:	4b6a      	ldr	r3, [pc, #424]	; (16a10 <lv_theme_material_init+0x185c>)
   16868:	4798      	blx	r3
   1686a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1686e:	0040      	lsls	r0, r0, #1
   16870:	3050      	adds	r0, #80	; 0x50
   16872:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16876:	f080 86e7 	bcs.w	17648 <lv_theme_material_init+0x2494>
   1687a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   1687c:	2111      	movs	r1, #17
   1687e:	4620      	mov	r0, r4
   16880:	4b64      	ldr	r3, [pc, #400]	; (16a14 <lv_theme_material_init+0x1860>)
   16882:	4798      	blx	r3
    theme.apply_xcb = theme_apply;
   16884:	4c64      	ldr	r4, [pc, #400]	; (16a18 <lv_theme_material_init+0x1864>)
   16886:	4b68      	ldr	r3, [pc, #416]	; (16a28 <lv_theme_material_init+0x1874>)
   16888:	60a3      	str	r3, [r4, #8]
    inited = true;
   1688a:	2301      	movs	r3, #1
   1688c:	7123      	strb	r3, [r4, #4]
    lv_obj_report_style_mod(NULL);
   1688e:	2000      	movs	r0, #0
   16890:	4b66      	ldr	r3, [pc, #408]	; (16a2c <lv_theme_material_init+0x1878>)
   16892:	4798      	blx	r3
}
   16894:	f104 0008 	add.w	r0, r4, #8
   16898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        LV_GC_ROOT(_lv_theme_material_styles) = lv_mem_alloc(sizeof(theme_styles_t));
   1689c:	20bc      	movs	r0, #188	; 0xbc
   1689e:	4b64      	ldr	r3, [pc, #400]	; (16a30 <lv_theme_material_init+0x187c>)
   168a0:	4798      	blx	r3
   168a2:	4b64      	ldr	r3, [pc, #400]	; (16a34 <lv_theme_material_init+0x1880>)
   168a4:	6018      	str	r0, [r3, #0]
        styles = (theme_styles_t *)LV_GC_ROOT(_lv_theme_material_styles);
   168a6:	4b5c      	ldr	r3, [pc, #368]	; (16a18 <lv_theme_material_init+0x1864>)
   168a8:	6018      	str	r0, [r3, #0]
   168aa:	f7fe bc8e 	b.w	151ca <lv_theme_material_init+0x16>
    lv_style_set_text_color(&styles->chart_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
   168ae:	2315      	movs	r3, #21
   168b0:	212a      	movs	r1, #42	; 0x2a
   168b2:	461c      	mov	r4, r3
   168b4:	f7fe bcb3 	b.w	1521e <lv_theme_material_init+0x6a>
    lv_style_set_line_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(1));
   168b8:	2000      	movs	r0, #0
   168ba:	4b55      	ldr	r3, [pc, #340]	; (16a10 <lv_theme_material_init+0x185c>)
   168bc:	4798      	blx	r3
   168be:	f100 0250 	add.w	r2, r0, #80	; 0x50
   168c2:	485d      	ldr	r0, [pc, #372]	; (16a38 <lv_theme_material_init+0x1884>)
   168c4:	fba0 3202 	umull	r3, r2, r0, r2
   168c8:	f342 12cf 	sbfx	r2, r2, #7, #16
   168cc:	f7fe bcc3 	b.w	15256 <lv_theme_material_init+0xa2>
    lv_style_set_line_dash_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
   168d0:	2000      	movs	r0, #0
   168d2:	4b4f      	ldr	r3, [pc, #316]	; (16a10 <lv_theme_material_init+0x185c>)
   168d4:	4798      	blx	r3
   168d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   168da:	0042      	lsls	r2, r0, #1
   168dc:	3250      	adds	r2, #80	; 0x50
   168de:	4856      	ldr	r0, [pc, #344]	; (16a38 <lv_theme_material_init+0x1884>)
   168e0:	fba0 3202 	umull	r3, r2, r0, r2
   168e4:	f342 12cf 	sbfx	r2, r2, #7, #16
   168e8:	f7fe bcc8 	b.w	1527c <lv_theme_material_init+0xc8>
    lv_style_set_line_dash_gap(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
   168ec:	2000      	movs	r0, #0
   168ee:	4b48      	ldr	r3, [pc, #288]	; (16a10 <lv_theme_material_init+0x185c>)
   168f0:	4798      	blx	r3
   168f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   168f6:	0042      	lsls	r2, r0, #1
   168f8:	3250      	adds	r2, #80	; 0x50
   168fa:	484f      	ldr	r0, [pc, #316]	; (16a38 <lv_theme_material_init+0x1884>)
   168fc:	fba0 3202 	umull	r3, r2, r0, r2
   16900:	f342 12cf 	sbfx	r2, r2, #7, #16
   16904:	f7fe bccd 	b.w	152a2 <lv_theme_material_init+0xee>
    lv_style_set_line_width(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(3));
   16908:	2000      	movs	r0, #0
   1690a:	4b41      	ldr	r3, [pc, #260]	; (16a10 <lv_theme_material_init+0x185c>)
   1690c:	4798      	blx	r3
   1690e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16912:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16916:	4848      	ldr	r0, [pc, #288]	; (16a38 <lv_theme_material_init+0x1884>)
   16918:	fba0 3202 	umull	r3, r2, r0, r2
   1691c:	f342 12cf 	sbfx	r2, r2, #7, #16
   16920:	f7fe bcef 	b.w	15302 <lv_theme_material_init+0x14e>
    lv_style_set_size(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(4));
   16924:	2000      	movs	r0, #0
   16926:	4b3a      	ldr	r3, [pc, #232]	; (16a10 <lv_theme_material_init+0x185c>)
   16928:	4798      	blx	r3
   1692a:	f100 0214 	add.w	r2, r0, #20
   1692e:	0092      	lsls	r2, r2, #2
   16930:	4841      	ldr	r0, [pc, #260]	; (16a38 <lv_theme_material_init+0x1884>)
   16932:	fba0 3202 	umull	r3, r2, r0, r2
   16936:	f342 12cf 	sbfx	r2, r2, #7, #16
   1693a:	f7fe bcf3 	b.w	15324 <lv_theme_material_init+0x170>
    lv_style_set_pad_inner(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(2));     /*Space between columns*/
   1693e:	2000      	movs	r0, #0
   16940:	4b33      	ldr	r3, [pc, #204]	; (16a10 <lv_theme_material_init+0x185c>)
   16942:	4798      	blx	r3
   16944:	f100 0228 	add.w	r2, r0, #40	; 0x28
   16948:	0052      	lsls	r2, r2, #1
   1694a:	483b      	ldr	r0, [pc, #236]	; (16a38 <lv_theme_material_init+0x1884>)
   1694c:	fba0 3202 	umull	r3, r2, r0, r2
   16950:	f342 12cf 	sbfx	r2, r2, #7, #16
   16954:	f7fe bcf7 	b.w	15346 <lv_theme_material_init+0x192>
    lv_style_set_radius(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(1));
   16958:	2000      	movs	r0, #0
   1695a:	4b2d      	ldr	r3, [pc, #180]	; (16a10 <lv_theme_material_init+0x185c>)
   1695c:	4798      	blx	r3
   1695e:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16962:	4835      	ldr	r0, [pc, #212]	; (16a38 <lv_theme_material_init+0x1884>)
   16964:	fba0 3202 	umull	r3, r2, r0, r2
   16968:	f342 12cf 	sbfx	r2, r2, #7, #16
   1696c:	f7fe bcfb 	b.w	15366 <lv_theme_material_init+0x1b2>
    lv_style_set_pad_top(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
   16970:	2000      	movs	r0, #0
   16972:	4b27      	ldr	r3, [pc, #156]	; (16a10 <lv_theme_material_init+0x185c>)
   16974:	4798      	blx	r3
   16976:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1697a:	3050      	adds	r0, #80	; 0x50
   1697c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16980:	d202      	bcs.n	16988 <lv_theme_material_init+0x17d4>
   16982:	2201      	movs	r2, #1
   16984:	f7fe bd0c 	b.w	153a0 <lv_theme_material_init+0x1ec>
   16988:	2000      	movs	r0, #0
   1698a:	4b21      	ldr	r3, [pc, #132]	; (16a10 <lv_theme_material_init+0x185c>)
   1698c:	4798      	blx	r3
   1698e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16992:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16996:	4828      	ldr	r0, [pc, #160]	; (16a38 <lv_theme_material_init+0x1884>)
   16998:	fba0 3202 	umull	r3, r2, r0, r2
   1699c:	f342 12cf 	sbfx	r2, r2, #7, #16
   169a0:	f7fe bcfe 	b.w	153a0 <lv_theme_material_init+0x1ec>
   169a4:	2000      	movs	r0, #0
   169a6:	4b1a      	ldr	r3, [pc, #104]	; (16a10 <lv_theme_material_init+0x185c>)
   169a8:	4798      	blx	r3
   169aa:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   169ae:	0042      	lsls	r2, r0, #1
   169b0:	3250      	adds	r2, #80	; 0x50
   169b2:	4b21      	ldr	r3, [pc, #132]	; (16a38 <lv_theme_material_init+0x1884>)
   169b4:	fba3 3202 	umull	r3, r2, r3, r2
   169b8:	f342 12cf 	sbfx	r2, r2, #7, #16
   169bc:	f7fe bcf0 	b.w	153a0 <lv_theme_material_init+0x1ec>
    lv_style_set_pad_left(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
   169c0:	2000      	movs	r0, #0
   169c2:	4b13      	ldr	r3, [pc, #76]	; (16a10 <lv_theme_material_init+0x185c>)
   169c4:	4798      	blx	r3
   169c6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   169ca:	3050      	adds	r0, #80	; 0x50
   169cc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   169d0:	d202      	bcs.n	169d8 <lv_theme_material_init+0x1824>
   169d2:	2201      	movs	r2, #1
   169d4:	f7fe bcfd 	b.w	153d2 <lv_theme_material_init+0x21e>
   169d8:	2000      	movs	r0, #0
   169da:	4b0d      	ldr	r3, [pc, #52]	; (16a10 <lv_theme_material_init+0x185c>)
   169dc:	4798      	blx	r3
   169de:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   169e2:	f100 0250 	add.w	r2, r0, #80	; 0x50
   169e6:	4814      	ldr	r0, [pc, #80]	; (16a38 <lv_theme_material_init+0x1884>)
   169e8:	fba0 3202 	umull	r3, r2, r0, r2
   169ec:	f342 12cf 	sbfx	r2, r2, #7, #16
   169f0:	f7fe bcef 	b.w	153d2 <lv_theme_material_init+0x21e>
   169f4:	2000      	movs	r0, #0
   169f6:	4b06      	ldr	r3, [pc, #24]	; (16a10 <lv_theme_material_init+0x185c>)
   169f8:	4798      	blx	r3
   169fa:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   169fe:	0042      	lsls	r2, r0, #1
   16a00:	3250      	adds	r2, #80	; 0x50
   16a02:	4b0d      	ldr	r3, [pc, #52]	; (16a38 <lv_theme_material_init+0x1884>)
   16a04:	fba3 3202 	umull	r3, r2, r3, r2
   16a08:	f342 12cf 	sbfx	r2, r2, #7, #16
   16a0c:	f7fe bce1 	b.w	153d2 <lv_theme_material_init+0x21e>
   16a10:	000101bd 	.word	0x000101bd
   16a14:	00006039 	.word	0x00006039
   16a18:	2000abd4 	.word	0x2000abd4
   16a1c:	000101d9 	.word	0x000101d9
   16a20:	00013181 	.word	0x00013181
   16a24:	00006161 	.word	0x00006161
   16a28:	00012919 	.word	0x00012919
   16a2c:	00003bb1 	.word	0x00003bb1
   16a30:	00011575 	.word	0x00011575
   16a34:	2000ad5c 	.word	0x2000ad5c
   16a38:	cccccccd 	.word	0xcccccccd
    lv_style_set_pad_right(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
   16a3c:	2000      	movs	r0, #0
   16a3e:	4bcf      	ldr	r3, [pc, #828]	; (16d7c <lv_theme_material_init+0x1bc8>)
   16a40:	4798      	blx	r3
   16a42:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16a46:	3050      	adds	r0, #80	; 0x50
   16a48:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16a4c:	d202      	bcs.n	16a54 <lv_theme_material_init+0x18a0>
   16a4e:	2201      	movs	r2, #1
   16a50:	f7fe bcd8 	b.w	15404 <lv_theme_material_init+0x250>
   16a54:	2000      	movs	r0, #0
   16a56:	4bc9      	ldr	r3, [pc, #804]	; (16d7c <lv_theme_material_init+0x1bc8>)
   16a58:	4798      	blx	r3
   16a5a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16a5e:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16a62:	48c7      	ldr	r0, [pc, #796]	; (16d80 <lv_theme_material_init+0x1bcc>)
   16a64:	fba0 3202 	umull	r3, r2, r0, r2
   16a68:	f342 12cf 	sbfx	r2, r2, #7, #16
   16a6c:	f7fe bcca 	b.w	15404 <lv_theme_material_init+0x250>
   16a70:	2000      	movs	r0, #0
   16a72:	4bc2      	ldr	r3, [pc, #776]	; (16d7c <lv_theme_material_init+0x1bc8>)
   16a74:	4798      	blx	r3
   16a76:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16a7a:	0042      	lsls	r2, r0, #1
   16a7c:	3250      	adds	r2, #80	; 0x50
   16a7e:	4bc0      	ldr	r3, [pc, #768]	; (16d80 <lv_theme_material_init+0x1bcc>)
   16a80:	fba3 3202 	umull	r3, r2, r3, r2
   16a84:	f342 12cf 	sbfx	r2, r2, #7, #16
   16a88:	f7fe bcbc 	b.w	15404 <lv_theme_material_init+0x250>
    lv_style_set_pad_bottom(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
   16a8c:	2000      	movs	r0, #0
   16a8e:	4bbb      	ldr	r3, [pc, #748]	; (16d7c <lv_theme_material_init+0x1bc8>)
   16a90:	4798      	blx	r3
   16a92:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16a96:	3050      	adds	r0, #80	; 0x50
   16a98:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16a9c:	d202      	bcs.n	16aa4 <lv_theme_material_init+0x18f0>
   16a9e:	2201      	movs	r2, #1
   16aa0:	f7fe bcc9 	b.w	15436 <lv_theme_material_init+0x282>
   16aa4:	2000      	movs	r0, #0
   16aa6:	4bb5      	ldr	r3, [pc, #724]	; (16d7c <lv_theme_material_init+0x1bc8>)
   16aa8:	4798      	blx	r3
   16aaa:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16aae:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16ab2:	48b3      	ldr	r0, [pc, #716]	; (16d80 <lv_theme_material_init+0x1bcc>)
   16ab4:	fba0 3202 	umull	r3, r2, r0, r2
   16ab8:	f342 12cf 	sbfx	r2, r2, #7, #16
   16abc:	f7fe bcbb 	b.w	15436 <lv_theme_material_init+0x282>
   16ac0:	2000      	movs	r0, #0
   16ac2:	4bae      	ldr	r3, [pc, #696]	; (16d7c <lv_theme_material_init+0x1bc8>)
   16ac4:	4798      	blx	r3
   16ac6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16aca:	0042      	lsls	r2, r0, #1
   16acc:	3250      	adds	r2, #80	; 0x50
   16ace:	4bac      	ldr	r3, [pc, #688]	; (16d80 <lv_theme_material_init+0x1bcc>)
   16ad0:	fba3 3202 	umull	r3, r2, r3, r2
   16ad4:	f342 12cf 	sbfx	r2, r2, #7, #16
   16ad8:	f7fe bcad 	b.w	15436 <lv_theme_material_init+0x282>
    lv_style_set_text_color(&styles->calendar_daynames, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex3(0xeee));
   16adc:	2306      	movs	r3, #6
   16ade:	2110      	movs	r1, #16
   16ae0:	2409      	movs	r4, #9
   16ae2:	f7fe bcf2 	b.w	154ca <lv_theme_material_init+0x316>
    lv_style_set_pad_left(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
   16ae6:	2000      	movs	r0, #0
   16ae8:	4ba4      	ldr	r3, [pc, #656]	; (16d7c <lv_theme_material_init+0x1bc8>)
   16aea:	4798      	blx	r3
   16aec:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16af0:	3050      	adds	r0, #80	; 0x50
   16af2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16af6:	d202      	bcs.n	16afe <lv_theme_material_init+0x194a>
   16af8:	2201      	movs	r2, #1
   16afa:	f7fe bd07 	b.w	1550c <lv_theme_material_init+0x358>
   16afe:	2000      	movs	r0, #0
   16b00:	4b9e      	ldr	r3, [pc, #632]	; (16d7c <lv_theme_material_init+0x1bc8>)
   16b02:	4798      	blx	r3
   16b04:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16b08:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16b0c:	489c      	ldr	r0, [pc, #624]	; (16d80 <lv_theme_material_init+0x1bcc>)
   16b0e:	fba0 3202 	umull	r3, r2, r0, r2
   16b12:	f342 12cf 	sbfx	r2, r2, #7, #16
   16b16:	f7fe bcf9 	b.w	1550c <lv_theme_material_init+0x358>
   16b1a:	2000      	movs	r0, #0
   16b1c:	4b97      	ldr	r3, [pc, #604]	; (16d7c <lv_theme_material_init+0x1bc8>)
   16b1e:	4798      	blx	r3
   16b20:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16b24:	0042      	lsls	r2, r0, #1
   16b26:	3250      	adds	r2, #80	; 0x50
   16b28:	4b95      	ldr	r3, [pc, #596]	; (16d80 <lv_theme_material_init+0x1bcc>)
   16b2a:	fba3 3202 	umull	r3, r2, r3, r2
   16b2e:	f342 12cf 	sbfx	r2, r2, #7, #16
   16b32:	f7fe bceb 	b.w	1550c <lv_theme_material_init+0x358>
    lv_style_set_pad_right(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
   16b36:	2000      	movs	r0, #0
   16b38:	4b90      	ldr	r3, [pc, #576]	; (16d7c <lv_theme_material_init+0x1bc8>)
   16b3a:	4798      	blx	r3
   16b3c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16b40:	3050      	adds	r0, #80	; 0x50
   16b42:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16b46:	d202      	bcs.n	16b4e <lv_theme_material_init+0x199a>
   16b48:	2201      	movs	r2, #1
   16b4a:	f7fe bcf8 	b.w	1553e <lv_theme_material_init+0x38a>
   16b4e:	2000      	movs	r0, #0
   16b50:	4b8a      	ldr	r3, [pc, #552]	; (16d7c <lv_theme_material_init+0x1bc8>)
   16b52:	4798      	blx	r3
   16b54:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16b58:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16b5c:	4888      	ldr	r0, [pc, #544]	; (16d80 <lv_theme_material_init+0x1bcc>)
   16b5e:	fba0 3202 	umull	r3, r2, r0, r2
   16b62:	f342 12cf 	sbfx	r2, r2, #7, #16
   16b66:	f7fe bcea 	b.w	1553e <lv_theme_material_init+0x38a>
   16b6a:	2000      	movs	r0, #0
   16b6c:	4b83      	ldr	r3, [pc, #524]	; (16d7c <lv_theme_material_init+0x1bc8>)
   16b6e:	4798      	blx	r3
   16b70:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16b74:	0042      	lsls	r2, r0, #1
   16b76:	3250      	adds	r2, #80	; 0x50
   16b78:	4b81      	ldr	r3, [pc, #516]	; (16d80 <lv_theme_material_init+0x1bcc>)
   16b7a:	fba3 3202 	umull	r3, r2, r3, r2
   16b7e:	f342 12cf 	sbfx	r2, r2, #7, #16
   16b82:	f7fe bcdc 	b.w	1553e <lv_theme_material_init+0x38a>
    lv_style_set_pad_bottom(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
   16b86:	2000      	movs	r0, #0
   16b88:	4b7c      	ldr	r3, [pc, #496]	; (16d7c <lv_theme_material_init+0x1bc8>)
   16b8a:	4798      	blx	r3
   16b8c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16b90:	3050      	adds	r0, #80	; 0x50
   16b92:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16b96:	d202      	bcs.n	16b9e <lv_theme_material_init+0x19ea>
   16b98:	2201      	movs	r2, #1
   16b9a:	f7fe bce9 	b.w	15570 <lv_theme_material_init+0x3bc>
   16b9e:	2000      	movs	r0, #0
   16ba0:	4b76      	ldr	r3, [pc, #472]	; (16d7c <lv_theme_material_init+0x1bc8>)
   16ba2:	4798      	blx	r3
   16ba4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16ba8:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16bac:	4874      	ldr	r0, [pc, #464]	; (16d80 <lv_theme_material_init+0x1bcc>)
   16bae:	fba0 3202 	umull	r3, r2, r0, r2
   16bb2:	f342 12cf 	sbfx	r2, r2, #7, #16
   16bb6:	f7fe bcdb 	b.w	15570 <lv_theme_material_init+0x3bc>
   16bba:	2000      	movs	r0, #0
   16bbc:	4b6f      	ldr	r3, [pc, #444]	; (16d7c <lv_theme_material_init+0x1bc8>)
   16bbe:	4798      	blx	r3
   16bc0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16bc4:	0042      	lsls	r2, r0, #1
   16bc6:	3250      	adds	r2, #80	; 0x50
   16bc8:	4b6d      	ldr	r3, [pc, #436]	; (16d80 <lv_theme_material_init+0x1bcc>)
   16bca:	fba3 3202 	umull	r3, r2, r3, r2
   16bce:	f342 12cf 	sbfx	r2, r2, #7, #16
   16bd2:	f7fe bccd 	b.w	15570 <lv_theme_material_init+0x3bc>
    lv_style_set_radius(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(4));
   16bd6:	2000      	movs	r0, #0
   16bd8:	4b68      	ldr	r3, [pc, #416]	; (16d7c <lv_theme_material_init+0x1bc8>)
   16bda:	4798      	blx	r3
   16bdc:	f100 0214 	add.w	r2, r0, #20
   16be0:	0092      	lsls	r2, r2, #2
   16be2:	4867      	ldr	r0, [pc, #412]	; (16d80 <lv_theme_material_init+0x1bcc>)
   16be4:	fba0 3202 	umull	r3, r2, r0, r2
   16be8:	f342 12cf 	sbfx	r2, r2, #7, #16
   16bec:	f7fe bcd5 	b.w	1559a <lv_theme_material_init+0x3e6>
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
   16bf0:	2306      	movs	r3, #6
   16bf2:	2110      	movs	r1, #16
   16bf4:	2409      	movs	r4, #9
   16bf6:	f7fe bcdf 	b.w	155b8 <lv_theme_material_init+0x404>
    lv_style_set_pad_inner(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(3));
   16bfa:	2000      	movs	r0, #0
   16bfc:	4b5f      	ldr	r3, [pc, #380]	; (16d7c <lv_theme_material_init+0x1bc8>)
   16bfe:	4798      	blx	r3
   16c00:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16c04:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16c08:	485d      	ldr	r0, [pc, #372]	; (16d80 <lv_theme_material_init+0x1bcc>)
   16c0a:	fba0 3202 	umull	r3, r2, r0, r2
   16c0e:	f342 12cf 	sbfx	r2, r2, #7, #16
   16c12:	f7fe bd41 	b.w	15698 <lv_theme_material_init+0x4e4>
    lv_style_set_pad_left(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
   16c16:	2000      	movs	r0, #0
   16c18:	4b58      	ldr	r3, [pc, #352]	; (16d7c <lv_theme_material_init+0x1bc8>)
   16c1a:	4798      	blx	r3
   16c1c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16c20:	3050      	adds	r0, #80	; 0x50
   16c22:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16c26:	d202      	bcs.n	16c2e <lv_theme_material_init+0x1a7a>
   16c28:	2201      	movs	r2, #1
   16c2a:	f7fe bd4e 	b.w	156ca <lv_theme_material_init+0x516>
   16c2e:	2000      	movs	r0, #0
   16c30:	4b52      	ldr	r3, [pc, #328]	; (16d7c <lv_theme_material_init+0x1bc8>)
   16c32:	4798      	blx	r3
   16c34:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16c38:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16c3c:	4850      	ldr	r0, [pc, #320]	; (16d80 <lv_theme_material_init+0x1bcc>)
   16c3e:	fba0 3202 	umull	r3, r2, r0, r2
   16c42:	f342 12cf 	sbfx	r2, r2, #7, #16
   16c46:	f7fe bd40 	b.w	156ca <lv_theme_material_init+0x516>
   16c4a:	2000      	movs	r0, #0
   16c4c:	4b4b      	ldr	r3, [pc, #300]	; (16d7c <lv_theme_material_init+0x1bc8>)
   16c4e:	4798      	blx	r3
   16c50:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16c54:	0042      	lsls	r2, r0, #1
   16c56:	3250      	adds	r2, #80	; 0x50
   16c58:	4b49      	ldr	r3, [pc, #292]	; (16d80 <lv_theme_material_init+0x1bcc>)
   16c5a:	fba3 3202 	umull	r3, r2, r3, r2
   16c5e:	f342 12cf 	sbfx	r2, r2, #7, #16
   16c62:	f7fe bd32 	b.w	156ca <lv_theme_material_init+0x516>
    lv_style_set_pad_right(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
   16c66:	2000      	movs	r0, #0
   16c68:	4b44      	ldr	r3, [pc, #272]	; (16d7c <lv_theme_material_init+0x1bc8>)
   16c6a:	4798      	blx	r3
   16c6c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16c70:	3050      	adds	r0, #80	; 0x50
   16c72:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16c76:	d202      	bcs.n	16c7e <lv_theme_material_init+0x1aca>
   16c78:	2201      	movs	r2, #1
   16c7a:	f7fe bd3f 	b.w	156fc <lv_theme_material_init+0x548>
   16c7e:	2000      	movs	r0, #0
   16c80:	4b3e      	ldr	r3, [pc, #248]	; (16d7c <lv_theme_material_init+0x1bc8>)
   16c82:	4798      	blx	r3
   16c84:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16c88:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16c8c:	483c      	ldr	r0, [pc, #240]	; (16d80 <lv_theme_material_init+0x1bcc>)
   16c8e:	fba0 3202 	umull	r3, r2, r0, r2
   16c92:	f342 12cf 	sbfx	r2, r2, #7, #16
   16c96:	f7fe bd31 	b.w	156fc <lv_theme_material_init+0x548>
   16c9a:	2000      	movs	r0, #0
   16c9c:	4b37      	ldr	r3, [pc, #220]	; (16d7c <lv_theme_material_init+0x1bc8>)
   16c9e:	4798      	blx	r3
   16ca0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16ca4:	0042      	lsls	r2, r0, #1
   16ca6:	3250      	adds	r2, #80	; 0x50
   16ca8:	4b35      	ldr	r3, [pc, #212]	; (16d80 <lv_theme_material_init+0x1bcc>)
   16caa:	fba3 3202 	umull	r3, r2, r3, r2
   16cae:	f342 12cf 	sbfx	r2, r2, #7, #16
   16cb2:	f7fe bd23 	b.w	156fc <lv_theme_material_init+0x548>
    lv_style_set_pad_bottom(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
   16cb6:	2000      	movs	r0, #0
   16cb8:	4b30      	ldr	r3, [pc, #192]	; (16d7c <lv_theme_material_init+0x1bc8>)
   16cba:	4798      	blx	r3
   16cbc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16cc0:	3050      	adds	r0, #80	; 0x50
   16cc2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16cc6:	d202      	bcs.n	16cce <lv_theme_material_init+0x1b1a>
   16cc8:	2201      	movs	r2, #1
   16cca:	f7fe bd30 	b.w	1572e <lv_theme_material_init+0x57a>
   16cce:	2000      	movs	r0, #0
   16cd0:	4b2a      	ldr	r3, [pc, #168]	; (16d7c <lv_theme_material_init+0x1bc8>)
   16cd2:	4798      	blx	r3
   16cd4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16cd8:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16cdc:	4828      	ldr	r0, [pc, #160]	; (16d80 <lv_theme_material_init+0x1bcc>)
   16cde:	fba0 3202 	umull	r3, r2, r0, r2
   16ce2:	f342 12cf 	sbfx	r2, r2, #7, #16
   16ce6:	f7fe bd22 	b.w	1572e <lv_theme_material_init+0x57a>
   16cea:	2000      	movs	r0, #0
   16cec:	4b23      	ldr	r3, [pc, #140]	; (16d7c <lv_theme_material_init+0x1bc8>)
   16cee:	4798      	blx	r3
   16cf0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16cf4:	0042      	lsls	r2, r0, #1
   16cf6:	3250      	adds	r2, #80	; 0x50
   16cf8:	4821      	ldr	r0, [pc, #132]	; (16d80 <lv_theme_material_init+0x1bcc>)
   16cfa:	fba0 3202 	umull	r3, r2, r0, r2
   16cfe:	f342 12cf 	sbfx	r2, r2, #7, #16
   16d02:	f7fe bd14 	b.w	1572e <lv_theme_material_init+0x57a>
    lv_style_set_scale_width(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(30));
   16d06:	2000      	movs	r0, #0
   16d08:	4b1c      	ldr	r3, [pc, #112]	; (16d7c <lv_theme_material_init+0x1bc8>)
   16d0a:	4798      	blx	r3
   16d0c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16d10:	0042      	lsls	r2, r0, #1
   16d12:	3250      	adds	r2, #80	; 0x50
   16d14:	481a      	ldr	r0, [pc, #104]	; (16d80 <lv_theme_material_init+0x1bcc>)
   16d16:	fba0 3202 	umull	r3, r2, r0, r2
   16d1a:	f342 12cf 	sbfx	r2, r2, #7, #16
   16d1e:	f7fe bd1d 	b.w	1575c <lv_theme_material_init+0x5a8>
    lv_style_set_pad_inner(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(20));
   16d22:	2000      	movs	r0, #0
   16d24:	4b15      	ldr	r3, [pc, #84]	; (16d7c <lv_theme_material_init+0x1bc8>)
   16d26:	4798      	blx	r3
   16d28:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16d2c:	0082      	lsls	r2, r0, #2
   16d2e:	3250      	adds	r2, #80	; 0x50
   16d30:	4813      	ldr	r0, [pc, #76]	; (16d80 <lv_theme_material_init+0x1bcc>)
   16d32:	fba0 3202 	umull	r3, r2, r0, r2
   16d36:	f342 12cf 	sbfx	r2, r2, #7, #16
   16d3a:	f7fe bd54 	b.w	157e6 <lv_theme_material_init+0x632>
    lv_style_set_pad_left(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
   16d3e:	2000      	movs	r0, #0
   16d40:	4b0e      	ldr	r3, [pc, #56]	; (16d7c <lv_theme_material_init+0x1bc8>)
   16d42:	4798      	blx	r3
   16d44:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   16d48:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   16d4c:	3250      	adds	r2, #80	; 0x50
   16d4e:	480c      	ldr	r0, [pc, #48]	; (16d80 <lv_theme_material_init+0x1bcc>)
   16d50:	fba0 3202 	umull	r3, r2, r0, r2
   16d54:	f342 12cf 	sbfx	r2, r2, #7, #16
   16d58:	f7fe bd8c 	b.w	15874 <lv_theme_material_init+0x6c0>
    lv_style_set_pad_right(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
   16d5c:	2000      	movs	r0, #0
   16d5e:	4b07      	ldr	r3, [pc, #28]	; (16d7c <lv_theme_material_init+0x1bc8>)
   16d60:	4798      	blx	r3
   16d62:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   16d66:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   16d6a:	3250      	adds	r2, #80	; 0x50
   16d6c:	4804      	ldr	r0, [pc, #16]	; (16d80 <lv_theme_material_init+0x1bcc>)
   16d6e:	fba0 3202 	umull	r3, r2, r0, r2
   16d72:	f342 12cf 	sbfx	r2, r2, #7, #16
   16d76:	f7fe bd91 	b.w	1589c <lv_theme_material_init+0x6e8>
   16d7a:	bf00      	nop
   16d7c:	000101bd 	.word	0x000101bd
   16d80:	cccccccd 	.word	0xcccccccd
    lv_style_set_pad_top(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
   16d84:	2000      	movs	r0, #0
   16d86:	4bd2      	ldr	r3, [pc, #840]	; (170d0 <lv_theme_material_init+0x1f1c>)
   16d88:	4798      	blx	r3
   16d8a:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   16d8e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   16d92:	3250      	adds	r2, #80	; 0x50
   16d94:	48cf      	ldr	r0, [pc, #828]	; (170d4 <lv_theme_material_init+0x1f20>)
   16d96:	fba0 3202 	umull	r3, r2, r0, r2
   16d9a:	f342 12cf 	sbfx	r2, r2, #7, #16
   16d9e:	f7fe bd91 	b.w	158c4 <lv_theme_material_init+0x710>
    lv_style_set_pad_bottom(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
   16da2:	2000      	movs	r0, #0
   16da4:	4bca      	ldr	r3, [pc, #808]	; (170d0 <lv_theme_material_init+0x1f1c>)
   16da6:	4798      	blx	r3
   16da8:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   16dac:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   16db0:	3250      	adds	r2, #80	; 0x50
   16db2:	48c8      	ldr	r0, [pc, #800]	; (170d4 <lv_theme_material_init+0x1f20>)
   16db4:	fba0 3202 	umull	r3, r2, r0, r2
   16db8:	f342 12cf 	sbfx	r2, r2, #7, #16
   16dbc:	f7fe bd96 	b.w	158ec <lv_theme_material_init+0x738>
    lv_style_set_radius(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(4));
   16dc0:	2000      	movs	r0, #0
   16dc2:	4bc3      	ldr	r3, [pc, #780]	; (170d0 <lv_theme_material_init+0x1f1c>)
   16dc4:	4798      	blx	r3
   16dc6:	f100 0214 	add.w	r2, r0, #20
   16dca:	0092      	lsls	r2, r2, #2
   16dcc:	48c1      	ldr	r0, [pc, #772]	; (170d4 <lv_theme_material_init+0x1f20>)
   16dce:	fba0 3202 	umull	r3, r2, r0, r2
   16dd2:	f342 12cf 	sbfx	r2, r2, #7, #16
   16dd6:	f7fe bd9e 	b.w	15916 <lv_theme_material_init+0x762>
    lv_style_set_pad_inner(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
   16dda:	2000      	movs	r0, #0
   16ddc:	4bbc      	ldr	r3, [pc, #752]	; (170d0 <lv_theme_material_init+0x1f1c>)
   16dde:	4798      	blx	r3
   16de0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16de4:	0042      	lsls	r2, r0, #1
   16de6:	3250      	adds	r2, #80	; 0x50
   16de8:	48ba      	ldr	r0, [pc, #744]	; (170d4 <lv_theme_material_init+0x1f20>)
   16dea:	fba0 3202 	umull	r3, r2, r0, r2
   16dee:	f342 12cf 	sbfx	r2, r2, #7, #16
   16df2:	f7fe bda3 	b.w	1593c <lv_theme_material_init+0x788>
    lv_style_set_outline_width(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(3));
   16df6:	2000      	movs	r0, #0
   16df8:	4bb5      	ldr	r3, [pc, #724]	; (170d0 <lv_theme_material_init+0x1f1c>)
   16dfa:	4798      	blx	r3
   16dfc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16e00:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16e04:	48b3      	ldr	r0, [pc, #716]	; (170d4 <lv_theme_material_init+0x1f20>)
   16e06:	fba0 3202 	umull	r3, r2, r0, r2
   16e0a:	f342 12cf 	sbfx	r2, r2, #7, #16
   16e0e:	f7fe bdb9 	b.w	15984 <lv_theme_material_init+0x7d0>
    lv_style_set_outline_pad(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
   16e12:	2000      	movs	r0, #0
   16e14:	4bae      	ldr	r3, [pc, #696]	; (170d0 <lv_theme_material_init+0x1f1c>)
   16e16:	4798      	blx	r3
   16e18:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16e1c:	0042      	lsls	r2, r0, #1
   16e1e:	3250      	adds	r2, #80	; 0x50
   16e20:	48ac      	ldr	r0, [pc, #688]	; (170d4 <lv_theme_material_init+0x1f20>)
   16e22:	fba0 3202 	umull	r3, r2, r0, r2
   16e26:	f342 12cf 	sbfx	r2, r2, #7, #16
   16e2a:	f7fe bdbe 	b.w	159aa <lv_theme_material_init+0x7f6>
    lv_style_set_radius(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(4));
   16e2e:	2000      	movs	r0, #0
   16e30:	4ba7      	ldr	r3, [pc, #668]	; (170d0 <lv_theme_material_init+0x1f1c>)
   16e32:	4798      	blx	r3
   16e34:	f100 0214 	add.w	r2, r0, #20
   16e38:	0092      	lsls	r2, r2, #2
   16e3a:	48a6      	ldr	r0, [pc, #664]	; (170d4 <lv_theme_material_init+0x1f20>)
   16e3c:	fba0 3202 	umull	r3, r2, r0, r2
   16e40:	f342 12cf 	sbfx	r2, r2, #7, #16
   16e44:	f7fe bdd7 	b.w	159f6 <lv_theme_material_init+0x842>
    lv_style_set_pad_left(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   16e48:	2000      	movs	r0, #0
   16e4a:	4ba1      	ldr	r3, [pc, #644]	; (170d0 <lv_theme_material_init+0x1f1c>)
   16e4c:	4798      	blx	r3
   16e4e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16e52:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16e56:	489f      	ldr	r0, [pc, #636]	; (170d4 <lv_theme_material_init+0x1f20>)
   16e58:	fba0 3202 	umull	r3, r2, r0, r2
   16e5c:	f342 12cf 	sbfx	r2, r2, #7, #16
   16e60:	f7fe bdf0 	b.w	15a44 <lv_theme_material_init+0x890>
    lv_style_set_pad_right(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   16e64:	2000      	movs	r0, #0
   16e66:	4b9a      	ldr	r3, [pc, #616]	; (170d0 <lv_theme_material_init+0x1f1c>)
   16e68:	4798      	blx	r3
   16e6a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16e6e:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16e72:	4898      	ldr	r0, [pc, #608]	; (170d4 <lv_theme_material_init+0x1f20>)
   16e74:	fba0 3202 	umull	r3, r2, r0, r2
   16e78:	f342 12cf 	sbfx	r2, r2, #7, #16
   16e7c:	f7fe bdf4 	b.w	15a68 <lv_theme_material_init+0x8b4>
    lv_style_set_pad_top(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   16e80:	2000      	movs	r0, #0
   16e82:	4b93      	ldr	r3, [pc, #588]	; (170d0 <lv_theme_material_init+0x1f1c>)
   16e84:	4798      	blx	r3
   16e86:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16e8a:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16e8e:	4891      	ldr	r0, [pc, #580]	; (170d4 <lv_theme_material_init+0x1f20>)
   16e90:	fba0 3202 	umull	r3, r2, r0, r2
   16e94:	f342 12cf 	sbfx	r2, r2, #7, #16
   16e98:	f7fe bdf8 	b.w	15a8c <lv_theme_material_init+0x8d8>
    lv_style_set_pad_bottom(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   16e9c:	2000      	movs	r0, #0
   16e9e:	4b8c      	ldr	r3, [pc, #560]	; (170d0 <lv_theme_material_init+0x1f1c>)
   16ea0:	4798      	blx	r3
   16ea2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16ea6:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16eaa:	488a      	ldr	r0, [pc, #552]	; (170d4 <lv_theme_material_init+0x1f20>)
   16eac:	fba0 3202 	umull	r3, r2, r0, r2
   16eb0:	f342 12cf 	sbfx	r2, r2, #7, #16
   16eb4:	f7fe bdfc 	b.w	15ab0 <lv_theme_material_init+0x8fc>
    lv_style_set_border_width(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(4));
   16eb8:	2000      	movs	r0, #0
   16eba:	4b85      	ldr	r3, [pc, #532]	; (170d0 <lv_theme_material_init+0x1f1c>)
   16ebc:	4798      	blx	r3
   16ebe:	f100 0214 	add.w	r2, r0, #20
   16ec2:	0092      	lsls	r2, r2, #2
   16ec4:	4883      	ldr	r0, [pc, #524]	; (170d4 <lv_theme_material_init+0x1f20>)
   16ec6:	fba0 3202 	umull	r3, r2, r0, r2
   16eca:	f342 12cf 	sbfx	r2, r2, #7, #16
   16ece:	f7fe be1c 	b.w	15b0a <lv_theme_material_init+0x956>
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT : LV_COLOR_BLACK);
   16ed2:	2307      	movs	r3, #7
   16ed4:	210f      	movs	r1, #15
   16ed6:	2408      	movs	r4, #8
   16ed8:	f7fe be2b 	b.w	15b32 <lv_theme_material_init+0x97e>
    lv_style_set_pad_left(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
   16edc:	2000      	movs	r0, #0
   16ede:	4b7c      	ldr	r3, [pc, #496]	; (170d0 <lv_theme_material_init+0x1f1c>)
   16ee0:	4798      	blx	r3
   16ee2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16ee6:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16eea:	487a      	ldr	r0, [pc, #488]	; (170d4 <lv_theme_material_init+0x1f20>)
   16eec:	fba0 3202 	umull	r3, r2, r0, r2
   16ef0:	f342 12cf 	sbfx	r2, r2, #7, #16
   16ef4:	f7fe be3c 	b.w	15b70 <lv_theme_material_init+0x9bc>
    lv_style_set_pad_right(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
   16ef8:	2000      	movs	r0, #0
   16efa:	4b75      	ldr	r3, [pc, #468]	; (170d0 <lv_theme_material_init+0x1f1c>)
   16efc:	4798      	blx	r3
   16efe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16f02:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16f06:	4873      	ldr	r0, [pc, #460]	; (170d4 <lv_theme_material_init+0x1f20>)
   16f08:	fba0 3202 	umull	r3, r2, r0, r2
   16f0c:	f342 12cf 	sbfx	r2, r2, #7, #16
   16f10:	f7fe be40 	b.w	15b94 <lv_theme_material_init+0x9e0>
    lv_style_set_pad_top(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
   16f14:	2000      	movs	r0, #0
   16f16:	4b6e      	ldr	r3, [pc, #440]	; (170d0 <lv_theme_material_init+0x1f1c>)
   16f18:	4798      	blx	r3
   16f1a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16f1e:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16f22:	486c      	ldr	r0, [pc, #432]	; (170d4 <lv_theme_material_init+0x1f20>)
   16f24:	fba0 3202 	umull	r3, r2, r0, r2
   16f28:	f342 12cf 	sbfx	r2, r2, #7, #16
   16f2c:	f7fe be44 	b.w	15bb8 <lv_theme_material_init+0xa04>
    lv_style_set_pad_bottom(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
   16f30:	2000      	movs	r0, #0
   16f32:	4b67      	ldr	r3, [pc, #412]	; (170d0 <lv_theme_material_init+0x1f1c>)
   16f34:	4798      	blx	r3
   16f36:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16f3a:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16f3e:	4865      	ldr	r0, [pc, #404]	; (170d4 <lv_theme_material_init+0x1f20>)
   16f40:	fba0 3202 	umull	r3, r2, r0, r2
   16f44:	f342 12cf 	sbfx	r2, r2, #7, #16
   16f48:	f7fe be48 	b.w	15bdc <lv_theme_material_init+0xa28>
    lv_style_set_pad_inner(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(3));
   16f4c:	2000      	movs	r0, #0
   16f4e:	4b60      	ldr	r3, [pc, #384]	; (170d0 <lv_theme_material_init+0x1f1c>)
   16f50:	4798      	blx	r3
   16f52:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16f56:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16f5a:	485e      	ldr	r0, [pc, #376]	; (170d4 <lv_theme_material_init+0x1f20>)
   16f5c:	fba0 3202 	umull	r3, r2, r0, r2
   16f60:	f342 12cf 	sbfx	r2, r2, #7, #16
   16f64:	f7fe be4c 	b.w	15c00 <lv_theme_material_init+0xa4c>
    lv_style_set_shadow_width(&styles->mbox_bg, LV_STATE_DEFAULT, LV_DPX(50));
   16f68:	2000      	movs	r0, #0
   16f6a:	4b59      	ldr	r3, [pc, #356]	; (170d0 <lv_theme_material_init+0x1f1c>)
   16f6c:	4798      	blx	r3
   16f6e:	2232      	movs	r2, #50	; 0x32
   16f70:	fb02 f200 	mul.w	r2, r2, r0
   16f74:	3250      	adds	r2, #80	; 0x50
   16f76:	4857      	ldr	r0, [pc, #348]	; (170d4 <lv_theme_material_init+0x1f20>)
   16f78:	fba0 3202 	umull	r3, r2, r0, r2
   16f7c:	f342 12cf 	sbfx	r2, r2, #7, #16
   16f80:	f7fe be55 	b.w	15c2e <lv_theme_material_init+0xa7a>
    lv_style_set_size(&styles->sb, LV_STATE_DEFAULT, LV_DPX(7));
   16f84:	2000      	movs	r0, #0
   16f86:	4b52      	ldr	r3, [pc, #328]	; (170d0 <lv_theme_material_init+0x1f1c>)
   16f88:	4798      	blx	r3
   16f8a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   16f8e:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16f92:	4850      	ldr	r0, [pc, #320]	; (170d4 <lv_theme_material_init+0x1f20>)
   16f94:	fba0 3202 	umull	r3, r2, r0, r2
   16f98:	f342 12cf 	sbfx	r2, r2, #7, #16
   16f9c:	f7fe be9c 	b.w	15cd8 <lv_theme_material_init+0xb24>
    lv_style_set_pad_right(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
   16fa0:	2000      	movs	r0, #0
   16fa2:	4b4b      	ldr	r3, [pc, #300]	; (170d0 <lv_theme_material_init+0x1f1c>)
   16fa4:	4798      	blx	r3
   16fa6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   16faa:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16fae:	4849      	ldr	r0, [pc, #292]	; (170d4 <lv_theme_material_init+0x1f20>)
   16fb0:	fba0 3202 	umull	r3, r2, r0, r2
   16fb4:	f342 12cf 	sbfx	r2, r2, #7, #16
   16fb8:	f7fe bea0 	b.w	15cfc <lv_theme_material_init+0xb48>
    lv_style_set_pad_bottom(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
   16fbc:	2000      	movs	r0, #0
   16fbe:	4b44      	ldr	r3, [pc, #272]	; (170d0 <lv_theme_material_init+0x1f1c>)
   16fc0:	4798      	blx	r3
   16fc2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   16fc6:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16fca:	4842      	ldr	r0, [pc, #264]	; (170d4 <lv_theme_material_init+0x1f20>)
   16fcc:	fba0 3202 	umull	r3, r2, r0, r2
   16fd0:	f342 12cf 	sbfx	r2, r2, #7, #16
   16fd4:	f7fe bea4 	b.w	15d20 <lv_theme_material_init+0xb6c>
    lv_style_set_border_width(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(2));
   16fd8:	2000      	movs	r0, #0
   16fda:	4b3d      	ldr	r3, [pc, #244]	; (170d0 <lv_theme_material_init+0x1f1c>)
   16fdc:	4798      	blx	r3
   16fde:	f100 0228 	add.w	r2, r0, #40	; 0x28
   16fe2:	0052      	lsls	r2, r2, #1
   16fe4:	483b      	ldr	r0, [pc, #236]	; (170d4 <lv_theme_material_init+0x1f20>)
   16fe6:	fba0 3202 	umull	r3, r2, r0, r2
   16fea:	f342 12cf 	sbfx	r2, r2, #7, #16
   16fee:	f7fe bede 	b.w	15dae <lv_theme_material_init+0xbfa>
    lv_style_set_pad_left(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(1));
   16ff2:	2000      	movs	r0, #0
   16ff4:	4b36      	ldr	r3, [pc, #216]	; (170d0 <lv_theme_material_init+0x1f1c>)
   16ff6:	4798      	blx	r3
   16ff8:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16ffc:	4835      	ldr	r0, [pc, #212]	; (170d4 <lv_theme_material_init+0x1f20>)
   16ffe:	fba0 3202 	umull	r3, r2, r0, r2
   17002:	f342 12cf 	sbfx	r2, r2, #7, #16
   17006:	f7fe beef 	b.w	15de8 <lv_theme_material_init+0xc34>
    lv_style_set_text_color(&styles->ta_placeholder, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
   1700a:	2315      	movs	r3, #21
   1700c:	212a      	movs	r1, #42	; 0x2a
   1700e:	461c      	mov	r4, r3
   17010:	f7fe bf02 	b.w	15e18 <lv_theme_material_init+0xc64>
    lv_style_set_pad_top(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
   17014:	2000      	movs	r0, #0
   17016:	4b2e      	ldr	r3, [pc, #184]	; (170d0 <lv_theme_material_init+0x1f1c>)
   17018:	4798      	blx	r3
   1701a:	2264      	movs	r2, #100	; 0x64
   1701c:	fb02 f200 	mul.w	r2, r2, r0
   17020:	3250      	adds	r2, #80	; 0x50
   17022:	482c      	ldr	r0, [pc, #176]	; (170d4 <lv_theme_material_init+0x1f20>)
   17024:	fba0 3202 	umull	r3, r2, r0, r2
   17028:	f342 12cf 	sbfx	r2, r2, #7, #16
   1702c:	f7fe bf25 	b.w	15e7a <lv_theme_material_init+0xcc6>
    lv_style_set_pad_bottom(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
   17030:	2000      	movs	r0, #0
   17032:	4b27      	ldr	r3, [pc, #156]	; (170d0 <lv_theme_material_init+0x1f1c>)
   17034:	4798      	blx	r3
   17036:	2264      	movs	r2, #100	; 0x64
   17038:	fb02 f200 	mul.w	r2, r2, r0
   1703c:	3250      	adds	r2, #80	; 0x50
   1703e:	4825      	ldr	r0, [pc, #148]	; (170d4 <lv_theme_material_init+0x1f20>)
   17040:	fba0 3202 	umull	r3, r2, r0, r2
   17044:	f342 12cf 	sbfx	r2, r2, #7, #16
   17048:	f7fe bf2a 	b.w	15ea0 <lv_theme_material_init+0xcec>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG);
   1704c:	231f      	movs	r3, #31
   1704e:	213f      	movs	r1, #63	; 0x3f
   17050:	461c      	mov	r4, r3
   17052:	f7fe bf5f 	b.w	15f14 <lv_theme_material_init+0xd60>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_PRESSED, COLOR_BG_PR);
   17056:	231d      	movs	r3, #29
   17058:	213b      	movs	r1, #59	; 0x3b
   1705a:	461c      	mov	r4, r3
   1705c:	f7fe bf70 	b.w	15f40 <lv_theme_material_init+0xd8c>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_DIS);
   17060:	231f      	movs	r3, #31
   17062:	213f      	movs	r1, #63	; 0x3f
   17064:	461c      	mov	r4, r3
   17066:	f7fe bf82 	b.w	15f6e <lv_theme_material_init+0xdba>
    lv_style_set_text_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   1706a:	2307      	movs	r3, #7
   1706c:	210f      	movs	r1, #15
   1706e:	2408      	movs	r4, #8
   17070:	f7fe bfa5 	b.w	15fbe <lv_theme_material_init+0xe0a>
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   17074:	2307      	movs	r3, #7
   17076:	210f      	movs	r1, #15
   17078:	2408      	movs	r4, #8
   1707a:	f7fe bfd5 	b.w	16028 <lv_theme_material_init+0xe74>
    lv_style_set_pad_left(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   1707e:	2000      	movs	r0, #0
   17080:	4b13      	ldr	r3, [pc, #76]	; (170d0 <lv_theme_material_init+0x1f1c>)
   17082:	4798      	blx	r3
   17084:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   17088:	3050      	adds	r0, #80	; 0x50
   1708a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1708e:	d202      	bcs.n	17096 <lv_theme_material_init+0x1ee2>
   17090:	2201      	movs	r2, #1
   17092:	f7ff b845 	b.w	16120 <lv_theme_material_init+0xf6c>
   17096:	2000      	movs	r0, #0
   17098:	4b0d      	ldr	r3, [pc, #52]	; (170d0 <lv_theme_material_init+0x1f1c>)
   1709a:	4798      	blx	r3
   1709c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   170a0:	f100 0250 	add.w	r2, r0, #80	; 0x50
   170a4:	480b      	ldr	r0, [pc, #44]	; (170d4 <lv_theme_material_init+0x1f20>)
   170a6:	fba0 3202 	umull	r3, r2, r0, r2
   170aa:	f342 12cf 	sbfx	r2, r2, #7, #16
   170ae:	f7ff b837 	b.w	16120 <lv_theme_material_init+0xf6c>
   170b2:	2000      	movs	r0, #0
   170b4:	4b06      	ldr	r3, [pc, #24]	; (170d0 <lv_theme_material_init+0x1f1c>)
   170b6:	4798      	blx	r3
   170b8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   170bc:	0042      	lsls	r2, r0, #1
   170be:	3250      	adds	r2, #80	; 0x50
   170c0:	4b04      	ldr	r3, [pc, #16]	; (170d4 <lv_theme_material_init+0x1f20>)
   170c2:	fba3 3202 	umull	r3, r2, r3, r2
   170c6:	f342 12cf 	sbfx	r2, r2, #7, #16
   170ca:	f7ff b829 	b.w	16120 <lv_theme_material_init+0xf6c>
   170ce:	bf00      	nop
   170d0:	000101bd 	.word	0x000101bd
   170d4:	cccccccd 	.word	0xcccccccd
    lv_style_set_pad_right(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   170d8:	2000      	movs	r0, #0
   170da:	4bcd      	ldr	r3, [pc, #820]	; (17410 <lv_theme_material_init+0x225c>)
   170dc:	4798      	blx	r3
   170de:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   170e2:	3050      	adds	r0, #80	; 0x50
   170e4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   170e8:	d202      	bcs.n	170f0 <lv_theme_material_init+0x1f3c>
   170ea:	2201      	movs	r2, #1
   170ec:	f7ff b831 	b.w	16152 <lv_theme_material_init+0xf9e>
   170f0:	2000      	movs	r0, #0
   170f2:	4bc7      	ldr	r3, [pc, #796]	; (17410 <lv_theme_material_init+0x225c>)
   170f4:	4798      	blx	r3
   170f6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   170fa:	f100 0250 	add.w	r2, r0, #80	; 0x50
   170fe:	48c5      	ldr	r0, [pc, #788]	; (17414 <lv_theme_material_init+0x2260>)
   17100:	fba0 3202 	umull	r3, r2, r0, r2
   17104:	f342 12cf 	sbfx	r2, r2, #7, #16
   17108:	f7ff b823 	b.w	16152 <lv_theme_material_init+0xf9e>
   1710c:	2000      	movs	r0, #0
   1710e:	4bc0      	ldr	r3, [pc, #768]	; (17410 <lv_theme_material_init+0x225c>)
   17110:	4798      	blx	r3
   17112:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   17116:	0042      	lsls	r2, r0, #1
   17118:	3250      	adds	r2, #80	; 0x50
   1711a:	4bbe      	ldr	r3, [pc, #760]	; (17414 <lv_theme_material_init+0x2260>)
   1711c:	fba3 3202 	umull	r3, r2, r3, r2
   17120:	f342 12cf 	sbfx	r2, r2, #7, #16
   17124:	f7ff b815 	b.w	16152 <lv_theme_material_init+0xf9e>
    lv_style_set_pad_top(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   17128:	2000      	movs	r0, #0
   1712a:	4bb9      	ldr	r3, [pc, #740]	; (17410 <lv_theme_material_init+0x225c>)
   1712c:	4798      	blx	r3
   1712e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   17132:	3050      	adds	r0, #80	; 0x50
   17134:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17138:	d202      	bcs.n	17140 <lv_theme_material_init+0x1f8c>
   1713a:	2201      	movs	r2, #1
   1713c:	f7ff b822 	b.w	16184 <lv_theme_material_init+0xfd0>
   17140:	2000      	movs	r0, #0
   17142:	4bb3      	ldr	r3, [pc, #716]	; (17410 <lv_theme_material_init+0x225c>)
   17144:	4798      	blx	r3
   17146:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1714a:	f100 0250 	add.w	r2, r0, #80	; 0x50
   1714e:	48b1      	ldr	r0, [pc, #708]	; (17414 <lv_theme_material_init+0x2260>)
   17150:	fba0 3202 	umull	r3, r2, r0, r2
   17154:	f342 12cf 	sbfx	r2, r2, #7, #16
   17158:	f7ff b814 	b.w	16184 <lv_theme_material_init+0xfd0>
   1715c:	2000      	movs	r0, #0
   1715e:	4bac      	ldr	r3, [pc, #688]	; (17410 <lv_theme_material_init+0x225c>)
   17160:	4798      	blx	r3
   17162:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   17166:	0042      	lsls	r2, r0, #1
   17168:	3250      	adds	r2, #80	; 0x50
   1716a:	4baa      	ldr	r3, [pc, #680]	; (17414 <lv_theme_material_init+0x2260>)
   1716c:	fba3 3202 	umull	r3, r2, r3, r2
   17170:	f342 12cf 	sbfx	r2, r2, #7, #16
   17174:	f7ff b806 	b.w	16184 <lv_theme_material_init+0xfd0>
    lv_style_set_pad_bottom(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   17178:	2000      	movs	r0, #0
   1717a:	4ba5      	ldr	r3, [pc, #660]	; (17410 <lv_theme_material_init+0x225c>)
   1717c:	4798      	blx	r3
   1717e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   17182:	3050      	adds	r0, #80	; 0x50
   17184:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17188:	d202      	bcs.n	17190 <lv_theme_material_init+0x1fdc>
   1718a:	2201      	movs	r2, #1
   1718c:	f7ff b813 	b.w	161b6 <lv_theme_material_init+0x1002>
   17190:	2000      	movs	r0, #0
   17192:	4b9f      	ldr	r3, [pc, #636]	; (17410 <lv_theme_material_init+0x225c>)
   17194:	4798      	blx	r3
   17196:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1719a:	f100 0250 	add.w	r2, r0, #80	; 0x50
   1719e:	489d      	ldr	r0, [pc, #628]	; (17414 <lv_theme_material_init+0x2260>)
   171a0:	fba0 3202 	umull	r3, r2, r0, r2
   171a4:	f342 12cf 	sbfx	r2, r2, #7, #16
   171a8:	f7ff b805 	b.w	161b6 <lv_theme_material_init+0x1002>
   171ac:	2000      	movs	r0, #0
   171ae:	4b98      	ldr	r3, [pc, #608]	; (17410 <lv_theme_material_init+0x225c>)
   171b0:	4798      	blx	r3
   171b2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   171b6:	0042      	lsls	r2, r0, #1
   171b8:	3250      	adds	r2, #80	; 0x50
   171ba:	4b96      	ldr	r3, [pc, #600]	; (17414 <lv_theme_material_init+0x2260>)
   171bc:	fba3 3202 	umull	r3, r2, r3, r2
   171c0:	f342 12cf 	sbfx	r2, r2, #7, #16
   171c4:	f7fe bff7 	b.w	161b6 <lv_theme_material_init+0x1002>
    lv_style_set_pad_inner(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   171c8:	2000      	movs	r0, #0
   171ca:	4b91      	ldr	r3, [pc, #580]	; (17410 <lv_theme_material_init+0x225c>)
   171cc:	4798      	blx	r3
   171ce:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   171d2:	3050      	adds	r0, #80	; 0x50
   171d4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   171d8:	d202      	bcs.n	171e0 <lv_theme_material_init+0x202c>
   171da:	2201      	movs	r2, #1
   171dc:	f7ff b804 	b.w	161e8 <lv_theme_material_init+0x1034>
   171e0:	2000      	movs	r0, #0
   171e2:	4b8b      	ldr	r3, [pc, #556]	; (17410 <lv_theme_material_init+0x225c>)
   171e4:	4798      	blx	r3
   171e6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   171ea:	f100 0250 	add.w	r2, r0, #80	; 0x50
   171ee:	4889      	ldr	r0, [pc, #548]	; (17414 <lv_theme_material_init+0x2260>)
   171f0:	fba0 3202 	umull	r3, r2, r0, r2
   171f4:	f342 12cf 	sbfx	r2, r2, #7, #16
   171f8:	f7fe bff6 	b.w	161e8 <lv_theme_material_init+0x1034>
   171fc:	2000      	movs	r0, #0
   171fe:	4b84      	ldr	r3, [pc, #528]	; (17410 <lv_theme_material_init+0x225c>)
   17200:	4798      	blx	r3
   17202:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   17206:	0042      	lsls	r2, r0, #1
   17208:	3250      	adds	r2, #80	; 0x50
   1720a:	4b82      	ldr	r3, [pc, #520]	; (17414 <lv_theme_material_init+0x2260>)
   1720c:	fba3 3202 	umull	r3, r2, r3, r2
   17210:	f342 12cf 	sbfx	r2, r2, #7, #16
   17214:	f7fe bfe8 	b.w	161e8 <lv_theme_material_init+0x1034>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DEFAULT, - PAD_DEF);
   17218:	2000      	movs	r0, #0
   1721a:	4b7d      	ldr	r3, [pc, #500]	; (17410 <lv_theme_material_init+0x225c>)
   1721c:	4798      	blx	r3
   1721e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   17222:	3050      	adds	r0, #80	; 0x50
   17224:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17228:	d203      	bcs.n	17232 <lv_theme_material_init+0x207e>
   1722a:	f04f 32ff 	mov.w	r2, #4294967295
   1722e:	f7fe bff5 	b.w	1621c <lv_theme_material_init+0x1068>
   17232:	2000      	movs	r0, #0
   17234:	4b76      	ldr	r3, [pc, #472]	; (17410 <lv_theme_material_init+0x225c>)
   17236:	4798      	blx	r3
   17238:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1723c:	f100 0250 	add.w	r2, r0, #80	; 0x50
   17240:	4874      	ldr	r0, [pc, #464]	; (17414 <lv_theme_material_init+0x2260>)
   17242:	fba0 3202 	umull	r3, r2, r0, r2
   17246:	09d2      	lsrs	r2, r2, #7
   17248:	4252      	negs	r2, r2
   1724a:	b212      	sxth	r2, r2
   1724c:	f7fe bfe6 	b.w	1621c <lv_theme_material_init+0x1068>
   17250:	2000      	movs	r0, #0
   17252:	4b6f      	ldr	r3, [pc, #444]	; (17410 <lv_theme_material_init+0x225c>)
   17254:	4798      	blx	r3
   17256:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1725a:	0042      	lsls	r2, r0, #1
   1725c:	3250      	adds	r2, #80	; 0x50
   1725e:	486d      	ldr	r0, [pc, #436]	; (17414 <lv_theme_material_init+0x2260>)
   17260:	fba0 3202 	umull	r3, r2, r0, r2
   17264:	09d2      	lsrs	r2, r2, #7
   17266:	4252      	negs	r2, r2
   17268:	b212      	sxth	r2, r2
   1726a:	f7fe bfd7 	b.w	1621c <lv_theme_material_init+0x1068>
    lv_style_set_text_line_space(&styles->ddlist_page, LV_STATE_DEFAULT, LV_DPX(20));
   1726e:	2000      	movs	r0, #0
   17270:	4b67      	ldr	r3, [pc, #412]	; (17410 <lv_theme_material_init+0x225c>)
   17272:	4798      	blx	r3
   17274:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   17278:	0082      	lsls	r2, r0, #2
   1727a:	3250      	adds	r2, #80	; 0x50
   1727c:	4865      	ldr	r0, [pc, #404]	; (17414 <lv_theme_material_init+0x2260>)
   1727e:	fba0 3202 	umull	r3, r2, r0, r2
   17282:	f342 12cf 	sbfx	r2, r2, #7, #16
   17286:	f7ff b801 	b.w	1628c <lv_theme_material_init+0x10d8>
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_PR);
   1728a:	231d      	movs	r3, #29
   1728c:	213b      	movs	r1, #59	; 0x3b
   1728e:	461c      	mov	r4, r3
   17290:	f7ff b828 	b.w	162e4 <lv_theme_material_init+0x1130>
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
   17294:	2307      	movs	r3, #7
   17296:	210f      	movs	r1, #15
   17298:	2408      	movs	r4, #8
   1729a:	f7ff b83a 	b.w	16312 <lv_theme_material_init+0x115e>
    lv_style_set_text_line_space(&styles->roller_bg, LV_STATE_DEFAULT, LV_DPX(25));
   1729e:	2000      	movs	r0, #0
   172a0:	4b5b      	ldr	r3, [pc, #364]	; (17410 <lv_theme_material_init+0x225c>)
   172a2:	4798      	blx	r3
   172a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   172a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   172ac:	f100 0250 	add.w	r2, r0, #80	; 0x50
   172b0:	4858      	ldr	r0, [pc, #352]	; (17414 <lv_theme_material_init+0x2260>)
   172b2:	fba0 3202 	umull	r3, r2, r0, r2
   172b6:	f342 12cf 	sbfx	r2, r2, #7, #16
   172ba:	f7ff b84a 	b.w	16352 <lv_theme_material_init+0x119e>
    lv_style_set_bg_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_BG);
   172be:	231f      	movs	r3, #31
   172c0:	213f      	movs	r1, #63	; 0x3f
   172c2:	461c      	mov	r4, r3
   172c4:	f7ff b874 	b.w	163b0 <lv_theme_material_init+0x11fc>
    lv_style_set_border_width(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(5));
   172c8:	2000      	movs	r0, #0
   172ca:	4b51      	ldr	r3, [pc, #324]	; (17410 <lv_theme_material_init+0x225c>)
   172cc:	4798      	blx	r3
   172ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   172d2:	f100 0250 	add.w	r2, r0, #80	; 0x50
   172d6:	484f      	ldr	r0, [pc, #316]	; (17414 <lv_theme_material_init+0x2260>)
   172d8:	fba0 3202 	umull	r3, r2, r0, r2
   172dc:	f342 12cf 	sbfx	r2, r2, #7, #16
   172e0:	f7ff b8aa 	b.w	16438 <lv_theme_material_init+0x1284>
    lv_style_set_pad_top(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
   172e4:	2000      	movs	r0, #0
   172e6:	4b4a      	ldr	r3, [pc, #296]	; (17410 <lv_theme_material_init+0x225c>)
   172e8:	4798      	blx	r3
   172ea:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   172ee:	f100 0250 	add.w	r2, r0, #80	; 0x50
   172f2:	4848      	ldr	r0, [pc, #288]	; (17414 <lv_theme_material_init+0x2260>)
   172f4:	fba0 3202 	umull	r3, r2, r0, r2
   172f8:	f342 12cf 	sbfx	r2, r2, #7, #16
   172fc:	f7ff b8e5 	b.w	164ca <lv_theme_material_init+0x1316>
    lv_style_set_pad_left(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
   17300:	2000      	movs	r0, #0
   17302:	4b43      	ldr	r3, [pc, #268]	; (17410 <lv_theme_material_init+0x225c>)
   17304:	4798      	blx	r3
   17306:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1730a:	f100 0250 	add.w	r2, r0, #80	; 0x50
   1730e:	4841      	ldr	r0, [pc, #260]	; (17414 <lv_theme_material_init+0x2260>)
   17310:	fba0 3202 	umull	r3, r2, r0, r2
   17314:	f342 12cf 	sbfx	r2, r2, #7, #16
   17318:	f7ff b8e9 	b.w	164ee <lv_theme_material_init+0x133a>
    lv_style_set_pad_right(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
   1731c:	2000      	movs	r0, #0
   1731e:	4b3c      	ldr	r3, [pc, #240]	; (17410 <lv_theme_material_init+0x225c>)
   17320:	4798      	blx	r3
   17322:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   17326:	f100 0250 	add.w	r2, r0, #80	; 0x50
   1732a:	483a      	ldr	r0, [pc, #232]	; (17414 <lv_theme_material_init+0x2260>)
   1732c:	fba0 3202 	umull	r3, r2, r0, r2
   17330:	f342 12cf 	sbfx	r2, r2, #7, #16
   17334:	f7ff b8ed 	b.w	16512 <lv_theme_material_init+0x135e>
    lv_style_set_pad_top(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
   17338:	2000      	movs	r0, #0
   1733a:	4b35      	ldr	r3, [pc, #212]	; (17410 <lv_theme_material_init+0x225c>)
   1733c:	4798      	blx	r3
   1733e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   17342:	0082      	lsls	r2, r0, #2
   17344:	3250      	adds	r2, #80	; 0x50
   17346:	4833      	ldr	r0, [pc, #204]	; (17414 <lv_theme_material_init+0x2260>)
   17348:	fba0 3202 	umull	r3, r2, r0, r2
   1734c:	f342 12cf 	sbfx	r2, r2, #7, #16
   17350:	f7ff b928 	b.w	165a4 <lv_theme_material_init+0x13f0>
    lv_style_set_pad_bottom(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
   17354:	2000      	movs	r0, #0
   17356:	4b2e      	ldr	r3, [pc, #184]	; (17410 <lv_theme_material_init+0x225c>)
   17358:	4798      	blx	r3
   1735a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1735e:	0082      	lsls	r2, r0, #2
   17360:	3250      	adds	r2, #80	; 0x50
   17362:	482c      	ldr	r0, [pc, #176]	; (17414 <lv_theme_material_init+0x2260>)
   17364:	fba0 3202 	umull	r3, r2, r0, r2
   17368:	f342 12cf 	sbfx	r2, r2, #7, #16
   1736c:	f7ff b92d 	b.w	165ca <lv_theme_material_init+0x1416>
    lv_style_set_size(&styles->tabview_indic, LV_STATE_DEFAULT, LV_DPX(5));
   17370:	2000      	movs	r0, #0
   17372:	4b27      	ldr	r3, [pc, #156]	; (17410 <lv_theme_material_init+0x225c>)
   17374:	4798      	blx	r3
   17376:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1737a:	f100 0250 	add.w	r2, r0, #80	; 0x50
   1737e:	4825      	ldr	r0, [pc, #148]	; (17414 <lv_theme_material_init+0x2260>)
   17380:	fba0 3202 	umull	r3, r2, r0, r2
   17384:	f342 12cf 	sbfx	r2, r2, #7, #16
   17388:	f7ff b953 	b.w	16632 <lv_theme_material_init+0x147e>
    lv_style_set_pad_top(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   1738c:	2000      	movs	r0, #0
   1738e:	4b20      	ldr	r3, [pc, #128]	; (17410 <lv_theme_material_init+0x225c>)
   17390:	4798      	blx	r3
   17392:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   17396:	3050      	adds	r0, #80	; 0x50
   17398:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1739c:	d202      	bcs.n	173a4 <lv_theme_material_init+0x21f0>
   1739e:	2201      	movs	r2, #1
   173a0:	f7ff b96a 	b.w	16678 <lv_theme_material_init+0x14c4>
   173a4:	2000      	movs	r0, #0
   173a6:	4b1a      	ldr	r3, [pc, #104]	; (17410 <lv_theme_material_init+0x225c>)
   173a8:	4798      	blx	r3
   173aa:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   173ae:	f100 0250 	add.w	r2, r0, #80	; 0x50
   173b2:	4818      	ldr	r0, [pc, #96]	; (17414 <lv_theme_material_init+0x2260>)
   173b4:	fba0 3202 	umull	r3, r2, r0, r2
   173b8:	f342 12cf 	sbfx	r2, r2, #7, #16
   173bc:	f7ff b95c 	b.w	16678 <lv_theme_material_init+0x14c4>
   173c0:	2000      	movs	r0, #0
   173c2:	4b13      	ldr	r3, [pc, #76]	; (17410 <lv_theme_material_init+0x225c>)
   173c4:	4798      	blx	r3
   173c6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   173ca:	0042      	lsls	r2, r0, #1
   173cc:	3250      	adds	r2, #80	; 0x50
   173ce:	4b11      	ldr	r3, [pc, #68]	; (17414 <lv_theme_material_init+0x2260>)
   173d0:	fba3 3202 	umull	r3, r2, r3, r2
   173d4:	f342 12cf 	sbfx	r2, r2, #7, #16
   173d8:	f7ff b94e 	b.w	16678 <lv_theme_material_init+0x14c4>
    lv_style_set_pad_bottom(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   173dc:	2000      	movs	r0, #0
   173de:	4b0c      	ldr	r3, [pc, #48]	; (17410 <lv_theme_material_init+0x225c>)
   173e0:	4798      	blx	r3
   173e2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   173e6:	3050      	adds	r0, #80	; 0x50
   173e8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   173ec:	d202      	bcs.n	173f4 <lv_theme_material_init+0x2240>
   173ee:	2201      	movs	r2, #1
   173f0:	f7ff b95b 	b.w	166aa <lv_theme_material_init+0x14f6>
   173f4:	2000      	movs	r0, #0
   173f6:	4b06      	ldr	r3, [pc, #24]	; (17410 <lv_theme_material_init+0x225c>)
   173f8:	4798      	blx	r3
   173fa:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   173fe:	f100 0250 	add.w	r2, r0, #80	; 0x50
   17402:	4804      	ldr	r0, [pc, #16]	; (17414 <lv_theme_material_init+0x2260>)
   17404:	fba0 3202 	umull	r3, r2, r0, r2
   17408:	f342 12cf 	sbfx	r2, r2, #7, #16
   1740c:	f7ff b94d 	b.w	166aa <lv_theme_material_init+0x14f6>
   17410:	000101bd 	.word	0x000101bd
   17414:	cccccccd 	.word	0xcccccccd
   17418:	2000      	movs	r0, #0
   1741a:	4b92      	ldr	r3, [pc, #584]	; (17664 <lv_theme_material_init+0x24b0>)
   1741c:	4798      	blx	r3
   1741e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   17422:	0042      	lsls	r2, r0, #1
   17424:	3250      	adds	r2, #80	; 0x50
   17426:	4b90      	ldr	r3, [pc, #576]	; (17668 <lv_theme_material_init+0x24b4>)
   17428:	fba3 3202 	umull	r3, r2, r3, r2
   1742c:	f342 12cf 	sbfx	r2, r2, #7, #16
   17430:	f7ff b93b 	b.w	166aa <lv_theme_material_init+0x14f6>
    lv_style_set_pad_left(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   17434:	2000      	movs	r0, #0
   17436:	4b8b      	ldr	r3, [pc, #556]	; (17664 <lv_theme_material_init+0x24b0>)
   17438:	4798      	blx	r3
   1743a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1743e:	3050      	adds	r0, #80	; 0x50
   17440:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17444:	d202      	bcs.n	1744c <lv_theme_material_init+0x2298>
   17446:	2201      	movs	r2, #1
   17448:	f7ff b948 	b.w	166dc <lv_theme_material_init+0x1528>
   1744c:	2000      	movs	r0, #0
   1744e:	4b85      	ldr	r3, [pc, #532]	; (17664 <lv_theme_material_init+0x24b0>)
   17450:	4798      	blx	r3
   17452:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   17456:	f100 0250 	add.w	r2, r0, #80	; 0x50
   1745a:	4883      	ldr	r0, [pc, #524]	; (17668 <lv_theme_material_init+0x24b4>)
   1745c:	fba0 3202 	umull	r3, r2, r0, r2
   17460:	f342 12cf 	sbfx	r2, r2, #7, #16
   17464:	f7ff b93a 	b.w	166dc <lv_theme_material_init+0x1528>
   17468:	2000      	movs	r0, #0
   1746a:	4b7e      	ldr	r3, [pc, #504]	; (17664 <lv_theme_material_init+0x24b0>)
   1746c:	4798      	blx	r3
   1746e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   17472:	0042      	lsls	r2, r0, #1
   17474:	3250      	adds	r2, #80	; 0x50
   17476:	4b7c      	ldr	r3, [pc, #496]	; (17668 <lv_theme_material_init+0x24b4>)
   17478:	fba3 3202 	umull	r3, r2, r3, r2
   1747c:	f342 12cf 	sbfx	r2, r2, #7, #16
   17480:	f7ff b92c 	b.w	166dc <lv_theme_material_init+0x1528>
    lv_style_set_pad_right(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   17484:	2000      	movs	r0, #0
   17486:	4b77      	ldr	r3, [pc, #476]	; (17664 <lv_theme_material_init+0x24b0>)
   17488:	4798      	blx	r3
   1748a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1748e:	3050      	adds	r0, #80	; 0x50
   17490:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17494:	d202      	bcs.n	1749c <lv_theme_material_init+0x22e8>
   17496:	2201      	movs	r2, #1
   17498:	f7ff b94a 	b.w	16730 <lv_theme_material_init+0x157c>
   1749c:	2000      	movs	r0, #0
   1749e:	4b71      	ldr	r3, [pc, #452]	; (17664 <lv_theme_material_init+0x24b0>)
   174a0:	4798      	blx	r3
   174a2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   174a6:	f100 0250 	add.w	r2, r0, #80	; 0x50
   174aa:	486f      	ldr	r0, [pc, #444]	; (17668 <lv_theme_material_init+0x24b4>)
   174ac:	fba0 3202 	umull	r3, r2, r0, r2
   174b0:	f342 12cf 	sbfx	r2, r2, #7, #16
   174b4:	f7ff b93c 	b.w	16730 <lv_theme_material_init+0x157c>
   174b8:	2000      	movs	r0, #0
   174ba:	4b6a      	ldr	r3, [pc, #424]	; (17664 <lv_theme_material_init+0x24b0>)
   174bc:	4798      	blx	r3
   174be:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   174c2:	0042      	lsls	r2, r0, #1
   174c4:	3250      	adds	r2, #80	; 0x50
   174c6:	4b68      	ldr	r3, [pc, #416]	; (17668 <lv_theme_material_init+0x24b4>)
   174c8:	fba3 3202 	umull	r3, r2, r3, r2
   174cc:	f342 12cf 	sbfx	r2, r2, #7, #16
   174d0:	f7ff b92e 	b.w	16730 <lv_theme_material_init+0x157c>
    lv_style_set_pad_inner(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   174d4:	2000      	movs	r0, #0
   174d6:	4b63      	ldr	r3, [pc, #396]	; (17664 <lv_theme_material_init+0x24b0>)
   174d8:	4798      	blx	r3
   174da:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   174de:	3050      	adds	r0, #80	; 0x50
   174e0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   174e4:	d202      	bcs.n	174ec <lv_theme_material_init+0x2338>
   174e6:	2201      	movs	r2, #1
   174e8:	f7ff b93b 	b.w	16762 <lv_theme_material_init+0x15ae>
   174ec:	2000      	movs	r0, #0
   174ee:	4b5d      	ldr	r3, [pc, #372]	; (17664 <lv_theme_material_init+0x24b0>)
   174f0:	4798      	blx	r3
   174f2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   174f6:	f100 0250 	add.w	r2, r0, #80	; 0x50
   174fa:	485b      	ldr	r0, [pc, #364]	; (17668 <lv_theme_material_init+0x24b4>)
   174fc:	fba0 3202 	umull	r3, r2, r0, r2
   17500:	f342 12cf 	sbfx	r2, r2, #7, #16
   17504:	f7ff b92d 	b.w	16762 <lv_theme_material_init+0x15ae>
   17508:	2000      	movs	r0, #0
   1750a:	4b56      	ldr	r3, [pc, #344]	; (17664 <lv_theme_material_init+0x24b0>)
   1750c:	4798      	blx	r3
   1750e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   17512:	0042      	lsls	r2, r0, #1
   17514:	3250      	adds	r2, #80	; 0x50
   17516:	4854      	ldr	r0, [pc, #336]	; (17668 <lv_theme_material_init+0x24b4>)
   17518:	fba0 3202 	umull	r3, r2, r0, r2
   1751c:	f342 12cf 	sbfx	r2, r2, #7, #16
   17520:	f7ff b91f 	b.w	16762 <lv_theme_material_init+0x15ae>
    lv_style_set_pad_left(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
   17524:	2000      	movs	r0, #0
   17526:	4b4f      	ldr	r3, [pc, #316]	; (17664 <lv_theme_material_init+0x24b0>)
   17528:	4798      	blx	r3
   1752a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1752e:	3050      	adds	r0, #80	; 0x50
   17530:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17534:	d202      	bcs.n	1753c <lv_theme_material_init+0x2388>
   17536:	2201      	movs	r2, #1
   17538:	f7ff b955 	b.w	167e6 <lv_theme_material_init+0x1632>
   1753c:	2000      	movs	r0, #0
   1753e:	4b49      	ldr	r3, [pc, #292]	; (17664 <lv_theme_material_init+0x24b0>)
   17540:	4798      	blx	r3
   17542:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   17546:	f100 0250 	add.w	r2, r0, #80	; 0x50
   1754a:	4847      	ldr	r0, [pc, #284]	; (17668 <lv_theme_material_init+0x24b4>)
   1754c:	fba0 3202 	umull	r3, r2, r0, r2
   17550:	f342 12cf 	sbfx	r2, r2, #7, #16
   17554:	f7ff b947 	b.w	167e6 <lv_theme_material_init+0x1632>
   17558:	2000      	movs	r0, #0
   1755a:	4b42      	ldr	r3, [pc, #264]	; (17664 <lv_theme_material_init+0x24b0>)
   1755c:	4798      	blx	r3
   1755e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   17562:	0042      	lsls	r2, r0, #1
   17564:	3250      	adds	r2, #80	; 0x50
   17566:	4b40      	ldr	r3, [pc, #256]	; (17668 <lv_theme_material_init+0x24b4>)
   17568:	fba3 3202 	umull	r3, r2, r3, r2
   1756c:	f342 12cf 	sbfx	r2, r2, #7, #16
   17570:	f7ff b939 	b.w	167e6 <lv_theme_material_init+0x1632>
    lv_style_set_pad_right(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
   17574:	2000      	movs	r0, #0
   17576:	4b3b      	ldr	r3, [pc, #236]	; (17664 <lv_theme_material_init+0x24b0>)
   17578:	4798      	blx	r3
   1757a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1757e:	3050      	adds	r0, #80	; 0x50
   17580:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17584:	d202      	bcs.n	1758c <lv_theme_material_init+0x23d8>
   17586:	2201      	movs	r2, #1
   17588:	f7ff b946 	b.w	16818 <lv_theme_material_init+0x1664>
   1758c:	2000      	movs	r0, #0
   1758e:	4b35      	ldr	r3, [pc, #212]	; (17664 <lv_theme_material_init+0x24b0>)
   17590:	4798      	blx	r3
   17592:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   17596:	f100 0250 	add.w	r2, r0, #80	; 0x50
   1759a:	4833      	ldr	r0, [pc, #204]	; (17668 <lv_theme_material_init+0x24b4>)
   1759c:	fba0 3202 	umull	r3, r2, r0, r2
   175a0:	f342 12cf 	sbfx	r2, r2, #7, #16
   175a4:	f7ff b938 	b.w	16818 <lv_theme_material_init+0x1664>
   175a8:	2000      	movs	r0, #0
   175aa:	4b2e      	ldr	r3, [pc, #184]	; (17664 <lv_theme_material_init+0x24b0>)
   175ac:	4798      	blx	r3
   175ae:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   175b2:	0042      	lsls	r2, r0, #1
   175b4:	3250      	adds	r2, #80	; 0x50
   175b6:	4b2c      	ldr	r3, [pc, #176]	; (17668 <lv_theme_material_init+0x24b4>)
   175b8:	fba3 3202 	umull	r3, r2, r3, r2
   175bc:	f342 12cf 	sbfx	r2, r2, #7, #16
   175c0:	f7ff b92a 	b.w	16818 <lv_theme_material_init+0x1664>
    lv_style_set_pad_top(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
   175c4:	2000      	movs	r0, #0
   175c6:	4b27      	ldr	r3, [pc, #156]	; (17664 <lv_theme_material_init+0x24b0>)
   175c8:	4798      	blx	r3
   175ca:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   175ce:	3050      	adds	r0, #80	; 0x50
   175d0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   175d4:	d202      	bcs.n	175dc <lv_theme_material_init+0x2428>
   175d6:	2201      	movs	r2, #1
   175d8:	f7ff b937 	b.w	1684a <lv_theme_material_init+0x1696>
   175dc:	2000      	movs	r0, #0
   175de:	4b21      	ldr	r3, [pc, #132]	; (17664 <lv_theme_material_init+0x24b0>)
   175e0:	4798      	blx	r3
   175e2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   175e6:	f100 0250 	add.w	r2, r0, #80	; 0x50
   175ea:	481f      	ldr	r0, [pc, #124]	; (17668 <lv_theme_material_init+0x24b4>)
   175ec:	fba0 3202 	umull	r3, r2, r0, r2
   175f0:	f342 12cf 	sbfx	r2, r2, #7, #16
   175f4:	f7ff b929 	b.w	1684a <lv_theme_material_init+0x1696>
   175f8:	2000      	movs	r0, #0
   175fa:	4b1a      	ldr	r3, [pc, #104]	; (17664 <lv_theme_material_init+0x24b0>)
   175fc:	4798      	blx	r3
   175fe:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   17602:	0042      	lsls	r2, r0, #1
   17604:	3250      	adds	r2, #80	; 0x50
   17606:	4b18      	ldr	r3, [pc, #96]	; (17668 <lv_theme_material_init+0x24b4>)
   17608:	fba3 3202 	umull	r3, r2, r3, r2
   1760c:	f342 12cf 	sbfx	r2, r2, #7, #16
   17610:	f7ff b91b 	b.w	1684a <lv_theme_material_init+0x1696>
    lv_style_set_pad_bottom(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
   17614:	2000      	movs	r0, #0
   17616:	4b13      	ldr	r3, [pc, #76]	; (17664 <lv_theme_material_init+0x24b0>)
   17618:	4798      	blx	r3
   1761a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1761e:	3050      	adds	r0, #80	; 0x50
   17620:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17624:	d202      	bcs.n	1762c <lv_theme_material_init+0x2478>
   17626:	2201      	movs	r2, #1
   17628:	f7ff b928 	b.w	1687c <lv_theme_material_init+0x16c8>
   1762c:	2000      	movs	r0, #0
   1762e:	4b0d      	ldr	r3, [pc, #52]	; (17664 <lv_theme_material_init+0x24b0>)
   17630:	4798      	blx	r3
   17632:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   17636:	f100 0250 	add.w	r2, r0, #80	; 0x50
   1763a:	480b      	ldr	r0, [pc, #44]	; (17668 <lv_theme_material_init+0x24b4>)
   1763c:	fba0 3202 	umull	r3, r2, r0, r2
   17640:	f342 12cf 	sbfx	r2, r2, #7, #16
   17644:	f7ff b91a 	b.w	1687c <lv_theme_material_init+0x16c8>
   17648:	2000      	movs	r0, #0
   1764a:	4b06      	ldr	r3, [pc, #24]	; (17664 <lv_theme_material_init+0x24b0>)
   1764c:	4798      	blx	r3
   1764e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   17652:	0042      	lsls	r2, r0, #1
   17654:	3250      	adds	r2, #80	; 0x50
   17656:	4804      	ldr	r0, [pc, #16]	; (17668 <lv_theme_material_init+0x24b4>)
   17658:	fba0 3202 	umull	r3, r2, r0, r2
   1765c:	f342 12cf 	sbfx	r2, r2, #7, #16
   17660:	f7ff b90c 	b.w	1687c <lv_theme_material_init+0x16c8>
   17664:	000101bd 	.word	0x000101bd
   17668:	cccccccd 	.word	0xcccccccd

0001766c <__libc_init_array>:
   1766c:	b570      	push	{r4, r5, r6, lr}
   1766e:	4e0d      	ldr	r6, [pc, #52]	; (176a4 <__libc_init_array+0x38>)
   17670:	4c0d      	ldr	r4, [pc, #52]	; (176a8 <__libc_init_array+0x3c>)
   17672:	1ba4      	subs	r4, r4, r6
   17674:	10a4      	asrs	r4, r4, #2
   17676:	2500      	movs	r5, #0
   17678:	42a5      	cmp	r5, r4
   1767a:	d109      	bne.n	17690 <__libc_init_array+0x24>
   1767c:	4e0b      	ldr	r6, [pc, #44]	; (176ac <__libc_init_array+0x40>)
   1767e:	4c0c      	ldr	r4, [pc, #48]	; (176b0 <__libc_init_array+0x44>)
   17680:	f004 f884 	bl	1b78c <_init>
   17684:	1ba4      	subs	r4, r4, r6
   17686:	10a4      	asrs	r4, r4, #2
   17688:	2500      	movs	r5, #0
   1768a:	42a5      	cmp	r5, r4
   1768c:	d105      	bne.n	1769a <__libc_init_array+0x2e>
   1768e:	bd70      	pop	{r4, r5, r6, pc}
   17690:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   17694:	4798      	blx	r3
   17696:	3501      	adds	r5, #1
   17698:	e7ee      	b.n	17678 <__libc_init_array+0xc>
   1769a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   1769e:	4798      	blx	r3
   176a0:	3501      	adds	r5, #1
   176a2:	e7f2      	b.n	1768a <__libc_init_array+0x1e>
   176a4:	0001b798 	.word	0x0001b798
   176a8:	0001b798 	.word	0x0001b798
   176ac:	0001b798 	.word	0x0001b798
   176b0:	0001b79c 	.word	0x0001b79c

000176b4 <memcmp>:
   176b4:	b510      	push	{r4, lr}
   176b6:	3901      	subs	r1, #1
   176b8:	4402      	add	r2, r0
   176ba:	4290      	cmp	r0, r2
   176bc:	d101      	bne.n	176c2 <memcmp+0xe>
   176be:	2000      	movs	r0, #0
   176c0:	bd10      	pop	{r4, pc}
   176c2:	f810 3b01 	ldrb.w	r3, [r0], #1
   176c6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   176ca:	42a3      	cmp	r3, r4
   176cc:	d0f5      	beq.n	176ba <memcmp+0x6>
   176ce:	1b18      	subs	r0, r3, r4
   176d0:	bd10      	pop	{r4, pc}

000176d2 <strcmp>:
   176d2:	f810 2b01 	ldrb.w	r2, [r0], #1
   176d6:	f811 3b01 	ldrb.w	r3, [r1], #1
   176da:	2a01      	cmp	r2, #1
   176dc:	bf28      	it	cs
   176de:	429a      	cmpcs	r2, r3
   176e0:	d0f7      	beq.n	176d2 <strcmp>
   176e2:	1ad0      	subs	r0, r2, r3
   176e4:	4770      	bx	lr

000176e6 <strcpy>:
   176e6:	4603      	mov	r3, r0
   176e8:	f811 2b01 	ldrb.w	r2, [r1], #1
   176ec:	f803 2b01 	strb.w	r2, [r3], #1
   176f0:	2a00      	cmp	r2, #0
   176f2:	d1f9      	bne.n	176e8 <strcpy+0x2>
   176f4:	4770      	bx	lr

000176f6 <strlen>:
   176f6:	4603      	mov	r3, r0
   176f8:	f813 2b01 	ldrb.w	r2, [r3], #1
   176fc:	2a00      	cmp	r2, #0
   176fe:	d1fb      	bne.n	176f8 <strlen+0x2>
   17700:	1a18      	subs	r0, r3, r0
   17702:	3801      	subs	r0, #1
   17704:	4770      	bx	lr
   17706:	0000      	movs	r0, r0
   17708:	682f2e2e 	.word	0x682f2e2e
   1770c:	702f6c70 	.word	0x702f6c70
   17710:	2f74726f 	.word	0x2f74726f
   17714:	5f6c7068 	.word	0x5f6c7068
   17718:	6f697067 	.word	0x6f697067
   1771c:	7361625f 	.word	0x7361625f
   17720:	00682e65 	.word	0x00682e65
   17724:	682f2e2e 	.word	0x682f2e2e
   17728:	732f6c61 	.word	0x732f6c61
   1772c:	682f6372 	.word	0x682f6372
   17730:	695f6c61 	.word	0x695f6c61
   17734:	6d5f6332 	.word	0x6d5f6332
   17738:	6e79735f 	.word	0x6e79735f
   1773c:	00632e63 	.word	0x00632e63
   17740:	682f2e2e 	.word	0x682f2e2e
   17744:	732f6c61 	.word	0x732f6c61
   17748:	682f6372 	.word	0x682f6372
   1774c:	695f6c61 	.word	0x695f6c61
   17750:	00632e6f 	.word	0x00632e6f
   17754:	682f2e2e 	.word	0x682f2e2e
   17758:	732f6c61 	.word	0x732f6c61
   1775c:	682f6372 	.word	0x682f6372
   17760:	745f6c61 	.word	0x745f6c61
   17764:	72656d69 	.word	0x72656d69
   17768:	0000632e 	.word	0x0000632e
   1776c:	682f2e2e 	.word	0x682f2e2e
   17770:	732f6c61 	.word	0x732f6c61
   17774:	682f6372 	.word	0x682f6372
   17778:	755f6c61 	.word	0x755f6c61
   1777c:	74726173 	.word	0x74726173
   17780:	7973615f 	.word	0x7973615f
   17784:	632e636e 	.word	0x632e636e
   17788:	00000000 	.word	0x00000000
   1778c:	682f2e2e 	.word	0x682f2e2e
   17790:	752f6c61 	.word	0x752f6c61
   17794:	736c6974 	.word	0x736c6974
   17798:	6372732f 	.word	0x6372732f
   1779c:	6974752f 	.word	0x6974752f
   177a0:	6c5f736c 	.word	0x6c5f736c
   177a4:	2e747369 	.word	0x2e747369
   177a8:	00000063 	.word	0x00000063
   177ac:	682f2e2e 	.word	0x682f2e2e
   177b0:	752f6c61 	.word	0x752f6c61
   177b4:	736c6974 	.word	0x736c6974
   177b8:	6372732f 	.word	0x6372732f
   177bc:	6974752f 	.word	0x6974752f
   177c0:	725f736c 	.word	0x725f736c
   177c4:	62676e69 	.word	0x62676e69
   177c8:	65666675 	.word	0x65666675
   177cc:	00632e72 	.word	0x00632e72
   177d0:	40003000 	.word	0x40003000
   177d4:	40003400 	.word	0x40003400
   177d8:	41012000 	.word	0x41012000
   177dc:	41014000 	.word	0x41014000
   177e0:	43000000 	.word	0x43000000
   177e4:	43000400 	.word	0x43000400
   177e8:	43000800 	.word	0x43000800
   177ec:	43000c00 	.word	0x43000c00

000177f0 <_i2cms>:
   177f0:	00000003 00200014 00000100 000000ff     ...... .........
   17800:	00d70000 07270400 682f2e2e 732f6c70     ......'.../hpl/s
   17810:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
   17820:	0000632e 40003800 40003c00 4101a000     .c...8.@.<.@...A
   17830:	4101c000 42001400 42001800 43001400     ...A...B...B...C
   17840:	43001800                                ...C

00017844 <_tcs>:
   17844:	006b0000 00000308 00000000 00003a97     ..k..........:..
   17854:	00000000 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
   17864:	63745f6c 0000632e 2074754f 6d20666f     l_tc.c..Out of m
   17874:	726f6d65 00000079 0000ffff 4c4c554e     emory.......NULL
   17884:	696f7020 7265746e 00000000 6f5f766c      pointer....lv_o
   17894:	00006a62 0000ffff 640a6f4e 00617461     bj......No.data.

000178a4 <_lv_bpp1_opa_table>:
   178a4:	0000ff00                                ....

000178a8 <_lv_bpp2_opa_table>:
   178a8:	ffaa5500                                .U..

000178ac <_lv_bpp4_opa_table>:
   178ac:	33221100 77665544 bbaa9988 ffeeddcc     .."3DUfw........

000178bc <_lv_bpp8_opa_table>:
   178bc:	03020100 07060504 0b0a0908 0f0e0d0c     ................
   178cc:	13121110 17161514 1b1a1918 1f1e1d1c     ................
   178dc:	23222120 27262524 2b2a2928 2f2e2d2c      !"#$%&'()*+,-./
   178ec:	33323130 37363534 3b3a3938 3f3e3d3c     0123456789:;<=>?
   178fc:	43424140 47464544 4b4a4948 4f4e4d4c     @ABCDEFGHIJKLMNO
   1790c:	53525150 57565554 5b5a5958 5f5e5d5c     PQRSTUVWXYZ[\]^_
   1791c:	63626160 67666564 6b6a6968 6f6e6d6c     `abcdefghijklmno
   1792c:	73727170 77767574 7b7a7978 7f7e7d7c     pqrstuvwxyz{|}~.
   1793c:	83828180 87868584 8b8a8988 8f8e8d8c     ................
   1794c:	93929190 97969594 9b9a9998 9f9e9d9c     ................
   1795c:	a3a2a1a0 a7a6a5a4 abaaa9a8 afaeadac     ................
   1796c:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
   1797c:	c3c2c1c0 c7c6c5c4 cbcac9c8 cfcecdcc     ................
   1798c:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
   1799c:	e3e2e1e0 e7e6e5e4 ebeae9e8 efeeedec     ................
   179ac:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

000179bc <_lv_bpp3_opa_table>:
   179bc:	6d492400 ffdbb692                       .$Im....

000179c4 <wcorr.10355>:
   179c4:	81808080 83828281 87868584 8d8c8a89     ................
   179d4:	9593918f 9e9b9997 a7a5a2a0 b2afadaa     ................
   179e4:	000000b5 0000ffff 33221100 77665544     .........."3DUfw
   179f4:	bbaa9988 ffeeddcc 33221100 77665544     .........."3DUfw
   17a04:	bbaa9988 ffeeddcc 006e6962              ........bin.

00017a10 <kern_classes>:
   17a10:	00017a20 0001866c 000185d0 0000313d      z..l.......=1..

00017a20 <kern_class_values>:
   17a20:	00000100 00000000 00000100 00000003     ................
   17a30:	00000200 00000000 00000000 00000000     ................
   17a40:	00010000 00000000 00000000 00000000     ................
   17a50:	000c0100 0000fa07 f1f20000 04060c02     ................
   17a60:	010d02f6 0008030b 00000000 00000000     ................
   17a70:	020f0000 000000fe 00000000 00000000     ................
   17a80:	f8000500 00000000 0504fb00 00fd0000     ................
   17a90:	fd0003fe fbfffd00 00000000 fd0000fd     ................
   17aa0:	fd0000fc 0000fb00 00000000 fd000000     ................
   17ab0:	00fc00fd 00e100f9 0500fb00 fb000008     ................
   17ac0:	05080303 000005fc 000000f1 00000000     ................
   17ad0:	00000000 000000f7 00000000 00000000     ................
   17ae0:	f9000000 f600f3fd 000000fe 000a0100     ................
   17af0:	01fffef8 0000fc00 0000edfe 00000000     ................
   17b00:	00000000 0afeec00 00000000 00000000     ................
   17b10:	00000000 000000f6 00000000 08000000     ................
   17b20:	00000300 000000fb 00000000 00000000     ................
   17b30:	00000000 020a0000 00000001 00000000     ................
	...
   17b60:	000000f7 00000000 00000000 00000000     ................
   17b70:	00000000 02000000 fd080305 fd050000     ................
   17b80:	0702ddf8 00fd0105 00080009 00e80008     ................
   17b90:	080008fd 000305fd 00fd0100 0014fc00     ................
   17ba0:	00080014 0804030b f7000000 00000000     ................
   17bb0:	0200fe01 02fbfdfb 0000fd00 0000f600     ................
	...
   17bc8:	0000ef00 00000000 00000000 00000000     ................
   17bd8:	00f20100 000000f0 1900fe00 0303fdfd     ................
   17be8:	03fd00fe 00f20000 00000000 00000000     ................
   17bf8:	00e70000 00000003 00000000 00000000     ................
   17c08:	0f00f000 00f70000 e7ef0008 0008fbef     ................
   17c18:	0300ef00 00fc00fa 00000000 00000000     ................
   17c28:	07000000 0000e108 00000000 00000000     ................
   17c38:	000c0000 00000002 02020000 ff00fbfd     ................
   17c48:	0000fdff 000000fe 00fe00fb fa00fbfa     ................
   17c58:	00fbf8f8 00fb00fb fe000000 00030000     ................
   17c68:	0100fd02 03000000 000000fe ff0303fe     ................
   17c78:	fb000000 0000ff00 01000000 00fe0300     ................
   17c88:	00fc00fd 0800fe00 00fd0000 00000000     ................
   17c98:	fefe01ff 00fd0000 000000fd 00000000     ................
   17ca8:	ffff0000 00fdfd00 00000000 fe000001     ................
   17cb8:	fdfdfd00 00000000 00000000 0000fe00     ................
   17cc8:	fdfe0000 f800fc00 0005f8fe 0503fb00     ................
   17cd8:	fffa0007 f4ff00fd f202fe03 01000003     ................
   17ce8:	fef200f3 f300feea 00070500 00000003     ................
   17cf8:	fb000100 00f800fd 00fd0000 00fd0000     ................
   17d08:	00000000 ff00ffff 000000fd 00000000     ................
   17d18:	fe00fdfd 0000fefd 000000fd 00000000     ................
   17d28:	00000000 fd00fefe fb00fe00 fd000003     ................
   17d38:	00030301 00000000 0000fe00 02000000     ................
   17d48:	00fd0000 00fdfefd 00000000 00020000     ................
   17d58:	000000fe 00fcfd00 fe0800fb 0000f801     ................
   17d68:	f5f3f307 fe0003fb fb00fbef fb04fb00     ................
   17d78:	00f900f0 02ff0100 000300fe f300f6f8     ................
   17d88:	f8fafbfa fbfff9fd 010002f9 0000fd00     ................
   17d98:	03000200 00000000 00000000 fd000000     ................
   17da8:	ff00ff00 fafc00fd f800fffa 00000000     ................
   17db8:	00fe0000 01000000 000000fe 00000003     ................
   17dc8:	00000000 00000c00 00000000 00000002     ................
   17dd8:	000000fd 00000000 00000000 000300fb     ................
	...
   17df4:	000000fe 000000fb 00f8f300 f3fc0000     ................
   17e04:	03fd0000 0000f900 00000000 00000000     ................
   17e14:	fb0000fc 00000000 00000000 00000000     ................
   17e24:	00fb0003 03000000 fbfb0200 fdfdfd00     ................
   17e34:	00000000 00f80000 fdfc00fd f8fafa00     ................
   17e44:	00fb00fe 000000f8 00001400 fd000001     ................
   17e54:	f5000300 00000000 08fbe800 00f5fe08     ................
   17e64:	f300fc03 ee03fdff 040003fd f8f7fcf7     ................
   17e74:	f10000f5 00000f00 000000ff f9fdffff     ................
   17e84:	00e8fff8 00000000 00000000 00000001     ................
	...
   17ea0:	ff00fd00 0000fcfd 00fd00fb 00000000     ................
	...
   17eb8:	00ff0000 050000fb fa0003ff f9fffe03     ................
   17ec8:	fdfd00fd fcfc00fe fffe0000 00fdfcfe     ................
   17ed8:	0300fd00 00fa00fe 00fb0000 fcfc00fc     ................
   17ee8:	00000003 00000000 0003fb00 fdfe00fc     ................
   17ef8:	fefefef8 fffdfeff 00000000 fefefd00     ................
   17f08:	00000000 fe00fe03 fe000000 fdfefefd     ................
   17f18:	0a0200fe 00f900ff fd0005fe 0004fdf5     ................
   17f28:	03fcf400 fe0002fc fc00f8fe fc000001     ................
   17f38:	03000000 00fbfb03 fdfcfdfc 01fc00fd     ................
   17f48:	0008fcfb 00000000 00000000 00000003     ................
	...
   17f6c:	000000fc 00000000 00000000 00000000     ................
	...
   17f98:	000000fe 00000000 00000000 00000000     ................
	...
   17fb4:	fdfe0000 00000000 00000000 00000000     ................
   17fc4:	fd0000fc fdfd0000 00000000 000000fd     ................
   17fd4:	0000ff00 fe000000 00000000 00fb00fc     ................
   17fe4:	00f80000 0105fa02 0000f4fe f600fdfa     ................
   17ff4:	0000f9fa f6f6fdf5 00f900f4 00fd1102     ................
   18004:	fdfffdfa f7fbf9fc 00fdfaf6 0100fe00     ................
   18014:	feee0000 f7fa0608 00f80100 05fdfef3     ................
   18024:	0001fde8 f3fdef00 0000edfd 010f00ee     ................
   18034:	0000fe00 feff0000 ef00fef6 00000000     ................
   18044:	00fe00f8 00f4f9ff f8fcff00 00fe00fd     ................
   18054:	f4000000 fef8f8fd fcfdfafc f8fefb00     ................
   18064:	fbfd00fc 0100fbfd 00f8fe00 00fb0005     ................
   18074:	03000000 0afb0200 fdfdfd00 00000000     ................
   18084:	00f80000 fdfc00fd f8fafa00 02fb00fe     ................
   18094:	0000000a 00001400 fd000001 00000300     ................
   180a4:	00000000 00ff0000 00000000 0000fbfe     ................
   180b4:	ff000000 fd000000 fb0000fd fb0000fd     ................
   180c4:	00ff0400 00000000 00000100 05040000     ................
   180d4:	f800fe02 f80800fc 0afbfbf8 feea0305     ................
   180e4:	fd00fd05 00f7fd03 fefd03fd 0000fef8     ................
   180f4:	f9000508 07fdf200 fd01f6fd 0afdf8f8     ................
   18104:	00fc0003 080200f9 faf6f7fa ed010008     ................
   18114:	fefc03fe f7fa00fa 00fefcfc fdfbfa00     ................
   18124:	fd060800 fcf200f2 fff1f700 f9f8fcf8     ................
   18134:	fd000007 00fefb00 0400fbfd 000003f8     ................
   18144:	fafd00f2 faf8fefc f800faf8 f8fbfafd     ................
   18154:	010000fd f800fc0c fbfd00fd f6f9f9fa     ................
   18164:	0005fbfd fdf300fc f7f80502 fd08f8fb     ................
   18174:	05fbe801 00f7fcfa fdfdf5f8 f8fbfdfe     ................
   18184:	080000ff 00effe07 f606faf1 f5f7fbef     ................
   18194:	0005f8f3 fd000000 fd030000 05fb0205     ................
   181a4:	fff80000 0100ff00 0000fe01 00000000     ................
   181b4:	000000fd 01080200 0000fd00 fefe0000     ................
   181c4:	000000fd 00000201 00020000 000a00fe     ................
   181d4:	fd010105 00000500 00000200 00000000     ................
   181e4:	00000000 07000800 00000000 00000000     ................
   181f4:	00000000 00f10000 080004fd 03190000     ................
   18204:	0303fbfb 00f301fe 00f10c00 00000000     ................
   18214:	00000000 0aef0000 00000024 00000000     ........$.......
   18224:	00000000 0000f100 00000000 00000000     ................
	...
   18244:	fb0000fc 000000fe 00000000 00000000     ................
	...
   1825c:	00f900fe 00000100 fefb2103 03f90708     .........!......
   1826c:	03030000 000000fd 00000000 00000000     ................
   1827c:	000007df 00000000 00000000 00000000     ................
   1828c:	f9000000 f9000000 00000000 0000fffa     ................
   1829c:	fd00fa00 0000f400 00000000 00000000     ................
   182ac:	0000ef00 00010000 00000000 0000fd00     ................
   182bc:	00fc00fb 000000f9 00fd03fc fafdf900     ................
   182cc:	00f90000 00f400fd eb0000fd f7fdf6fb     ................
   182dc:	00ef0000 0000fff9 00000000 fbfc0000     ................
   182ec:	0000fcfe 00fa0000 05fd03fa fefafe00     ................
   182fc:	fd00fbfc f902feff 000000ff 00fcfee9     ................
   1830c:	f4fe00fa fe0000fe 000000fe fe000200     ................
   1831c:	0004fefc 00000000 00000000 00000000     ................
	...
   18348:	00030000 00000000 fe00fa00 fb000000     ................
   18358:	00000003 00fbfdf9 fd00f900 0000f400     ................
   18368:	00e70000 00f3f7fb fe00ef00 000000fc     ................
   18378:	00000000 fffcfd00 000001fc 0800fd04     ................
   18388:	f8fdfd0d 06040d03 030b03f9 00070607     ................
	...
   183a0:	0c100000 fe00fdfb 00140b14 00030000     ................
   183b0:	00000900 000000fc 00000000 00fe0000     ................
   183c0:	00000000 04000000 00000000 f6fefdea     ................
   183d0:	ef0000f3 00000000 00000000 00000000     ................
   183e0:	00000000 0000fc00 00000000 fe000000     ................
	...
   183f8:	00000004 fefdea00 0000f3f6 000000f6     ................
	...
   18418:	000000fe fd0003fa f8030502 03feff00     ................
   18428:	00000200 00fa0000 00fbfefe 1000f6fe     ................
   18438:	fefa00fd 00fcfe00 fdfbf9fd fc000000     ................
	...
   18450:	0000fe00 00000000 00040000 ea000000     ................
   18460:	f3f6fefd 00ef0000 00000000 00000d00     ................
	...
   18478:	fdf800fc fdfe08fe 01fe01f6 0601f9fe     ................
   18488:	02010201 00fdf6fa f5f9fbf6 fbfc00f6     ................
   18498:	fefefdfd fe00fefd 040004ff 000800fe     ................
	...
   184b0:	fe000000 0000fdfd 00ff00f9 000000fc     ................
	...
   184c8:	000000f1 00000000 00000000 fd00fdfd     ................
   184d8:	00000000 fc0000fe fc0003fd f900fefb     ................
   184e8:	fdfefafe 0000fc00 00000000 00000000     ................
   184f8:	0800ef00 00fb0000 fd000000 0000fd00     ................
   18508:	fe0000ff 0000fa00 f8f8fd0b ff030302     ................
   18518:	020402f9 fe080208 f60000f9 f9f80000     ................
   18528:	00fb0000 fc00fcfd fe00fc00 f8fe0004     ................
   18538:	000009fd 00fb00fe 00fa0300 0002fd03     ................
   18548:	fe00f800 03fd00ff 000000fe 00fafdf6     ................
   18558:	f40000f8 00fd0900 000200fb f8fd00fd     ................
   18568:	0003fd00 fe000000 fd030000 fd000001     ................
   18578:	00fd00fe 00000000 00000000 00000000     ................
   18588:	00000000 000600f0 0000fe00 00010000     ................
   18598:	0000fdfd 06000500 00000000 01f1f000     ................
   185a8:	f604080b 09000b02 00000500 00000000     ................
   185b8:	00000000 00000e00 00000000 00000000     ................
	...

000185d0 <kern_right_class_mapping>:
   185d0:	02010000 05040300 08070602 0a090a09     ................
   185e0:	0e0d0c0b 0c11100f 15141312 00000015     ................
   185f0:	19181716 19191917 1a191917 19191919     ................
   18600:	19171917 1d1c1b03 201f1e1d 00232221     ........... !"#.
   18610:	26250024 00272727 29282627 2a2a2626     $.%&'''.'&()&&**
   18620:	2a272a27 2e2d2c2b 302e2f2e 09230000     '*'*+,-../.0..#.
   18630:	00000931 00000000 00000000 00000000     1...............
	...

0001866c <kern_left_class_mapping>:
   1866c:	02010000 05040300 08070602 0a090a09     ................
   1867c:	0d000c0b 11100f0e 140c1312 00000014     ................
   1868c:	18171615 1b1a1619 1e1d1d1c 1d1d201f     ............. ..
   1869c:	23222116 251e2403 28272625 002b2a29     .!"#.$.%%&'()*+.
   186ac:	2e2d002c 3231302f 34342d33 2d2d3035     ,.-./0123-4450--
   186bc:	37362e2e 3a333938 3c3a3b3a 09000029     ..67893::;:<)...
   186cc:	0000093d 00000000 00000000 00000000     =...............
	...

00018708 <cmaps>:
   18708:	00000020 0001005f 00000000 00000000      ..._...........
   18718:	00000000 000000b0 0060f7f3 00018730     ..........`.0...
   18728:	00000000 0002003b                       ....;...

00018730 <unicode_list_1>:
   18730:	1f720000 ef58ef51 ef5cef5b ef61ef5d     ..r.Q.X.[.\.].a.
   18740:	ef65ef63 ef6cef69 ef76ef71 ef78ef77     c.e.i.l.q.v.w.x.
   18750:	ef98ef8e ef9cef9b efa1ef9d efa3efa2     ................
   18760:	efb7efa4 efbeefb8 efc1efc0 efc7efc4     ................
   18770:	efc9efc8 efe3efcb f014efe5 f017f015     ................
   18780:	f03af037 f06cf043 f0abf074 f190f13b     7.:.C.l.t...;...
   18790:	f192f191 f194f193 f1e3f1d7 f254f23d     ............=.T.
   187a0:	f712f4aa 0000f7f2                       ........

000187a8 <glyph_dsc>:
	...
   187b0:	04500000 00000000 04500000 00010c03     ..P.......P.....
   187c0:	06400012 07010505 0b40001f 00000c0b     ..@.......@.....
   187d0:	09f00061 fe00100a 0d8000b1 00000c0d     a...............
   187e0:	0b0000ff ff000d0b 03600147 07010502     ........G.`.....
   187f0:	0560014c fd010f04 0570016a fd000f04     L.`.....j.p.....
   18800:	06600188 05000707 095001a1 02010808     ..`.......P.....
   18810:	03a001c1 fe000503 062001c9 03000306     .......... .....
   18820:	03a001d2 00000303 05a001d7 feff1008     ................
   18830:	0ab00217 00000c0a 05f00253 00000c05     ........S.......
   18840:	09300271 00000c09 092002a7 00000c09     q.0....... .....
   18850:	0ab002dd 00000c0b 0930031f 00000c09     ..........0.....
   18860:	09e00355 00000c0a 09900391 00000c09     U...............
   18870:	0a5003c7 00000c0a 09e00403 00000c0a     ..P.............
   18880:	03a0043f 00000903 03a0044d fd000c03     ?.......M.......
   18890:	0950045f 02010808 0950047f 03010608     _.P.......P.....
   188a0:	09500497 02010808 093004b7 00000c09     ..P.......0.....
   188b0:	109004ed fd000f10 0bb00565 00ff0c0d     ........e.......
   188c0:	0c2005b3 00010c0b 0b9005f5 00000c0b     .. .............
   188d0:	0d300637 00010c0c 0ac0067f 00010c09     7.0.............
   188e0:	0a3006b5 00010c09 0c6006eb 00000c0c     ..0.......`.....
   188f0:	0d000733 00010c0b 04f00775 00010c03     3.......u.......
   18900:	08300787 00ff0c08 0b8007b7 00010c0b     ..0.............
   18910:	098007f9 00010c09 0f40082f 00010c0d     ......../.@.....
   18920:	0d00087d 00010c0b 0d7008bf 00000c0d     }.........p.....
   18930:	0b90090d 00010c0a 0d700949 fd000f0e     ........I.p.....
   18940:	0ba009b2 00010c0a 09f009ee 00000c0a     ................
   18950:	09600a2a 00000c0a 0ca00a66 00010c0b     *.`.....f.......
   18960:	0b600aa8 00ff0c0d 12000af6 00000c12     ..`.............
   18970:	0ac00b62 00000c0b 0a600ba4 00ff0c0c     b.........`.....
   18980:	0a800bec 00000c0b 05500c2e fd010f05     ..........P.....
   18990:	05a00c54 feff1008 05500c94 fd000f04     T.........P.....
   189a0:	09500cb2 02010708 08000cce fe000208     ..P.............
   189b0:	09a00cd6 0a010205 09900cdb 00000909     ................
   189c0:	0af00d04 00010c0a 09200d40 00000909     ........@. .....
   189d0:	0af00d69 00000c0a 09d00da5 0000090a     i...............
   189e0:	05a00dd2 00000c07 0b100dfc fd000c0a     ................
   189f0:	0ae00e38 00010c09 04700e6e 00010c03     8.......n.p.....
   18a00:	04900e80 fdfe0f06 09e00ead 00010c09     ................
   18a10:	04700ee3 00010c02 10f00eef 0001090f     ..p.............
   18a20:	0ae00f33 00010909 0a300f5c 0000090a     3.......\.0.....
   18a30:	0af00f89 fd010c0a 0af00fc5 fd000c0a     ................
   18a40:	06901001 00010906 0800101c 00000908     ................
   18a50:	06a01040 00000b07 0ad01067 00010909     @.......g.......
   18a60:	08f01090 00ff090a 0e6010bd 0000090f     ..........`.....
   18a70:	08d01101 00000909 08f0112a fdff0c0a     ........*.......
   18a80:	08501166 00000908 05a0118a fd000f06     f.P.............
   18a90:	04d011b7 fd010f03 05a011ce fd000f05     ................
   18aa0:	095011f4 04000509 06b0120b 06000606     ..P.............
   18ab0:	0500121d 03010403 10001223 fe001110     ........#.......
   18ac0:	100012ab 00000c10 1000130b ff000e10     ................
   18ad0:	1000137b 00000c10 0b0013db 00000c0b     {...............
   18ae0:	1000141d fe001010 1000149d fe001010     ................
   18af0:	1200151d ff000e12 1000159b fe001010     ................
   18b00:	1200161b 00000c12 10001687 fe001010     ................
   18b10:	08001707 ff000e08 0c00173f ff000e0c     ........?.......
   18b20:	12001793 fe001012 10001823 00000c10     ........#.......
   18b30:	0e001883 fe02100a 0e0018d3 fd00120e     ................
   18b40:	0e001951 ff000f0e 0e0019ba ff000e0e     Q...............
   18b50:	0e001a1c fe02100a 0e001a6c ffff0e10     ........l.......
   18b60:	0a001adc ff000e0a 0a001b22 ff000e0a     ........".......
   18b70:	0e001b68 ff000e0e 0e001bca 0400040e     h...............
   18b80:	12001be6 00000c12 14001c52 fe001014     ........R.......
   18b90:	12001cf2 feff1014 10001d92 fe001010     ................
   18ba0:	0e001e12 01000a0e 0e001e58 01000a0e     ........X.......
   18bb0:	14001e9e ff000e14 10001f2a 00000c10     ........*.......
   18bc0:	10001f8a fe001010 1000200a feff1111     ......... ......
   18bd0:	0e00209b ff000e0f 0e002104 fe00100e     . .......!......
   18be0:	0e002174 ff000e0e 0a0021d6 feff100c     t!.......!......
   18bf0:	0e002236 fe00100e 0e0022a6 fe00100e     6"......."......
   18c00:	12002316 00000c12 10002382 fdff1212     .#.......#......
   18c10:	0c002424 fe00100c 14002484 ff000f14     $$.......$......
   18c20:	1400251a 01000a14 1400257e 01000a14     .%......~%......
   18c30:	140025e2 01000a14 14002646 01000a14     .%......F&......
   18c40:	140026aa 01000a14 1400270e ff000e15     .&.......'......
   18c50:	0e0027a1 fe01100c 0e002801 fe00100e     .'.......(......
   18c60:	10002871 fdff1111 14002902 00000c14     q(.......)......
   18c70:	0c00297a fe00100c 102029da 01000b11     z).......) .....

00018c80 <gylph_bitmap>:
   18c80:	aff00bbf 089ee00a c0078cd0 bf100000     ................
   18c90:	1ff5e01a e4f3513f f2403e0f 00100872     ....?Q...>@.r...
   18ca0:	e003c005 007a0000 0900005c 01a00780     ......z.\.......
   18cb0:	ffffffff 733e03fd 0030833c 00c500f2     ......>s<.0.....
   18cc0:	0e100f00 f0020030 9f00f200 ffffffff     ....0...........
   18cd0:	36c33841 890030e3 00005c00 a007700a     A8.6.0...\...p..
   18ce0:	79000000 00000000 00000079 20e9ff5c     ...y....y...\.. 
   18cf0:	9ebcfc06 79b00e90 800f1000 0d000079     .......y....y...
   18d00:	000079f5 50fdef03 cf060000 000040fe     .y.....P.....@..
   18d10:	00f15e79 f3057900 07790007 bce92ff1     y^...y....y../..
   18d20:	ae03a0af 0000d7ff 00007900 00790000     .........y....y.
   18d30:	80de0300 00d00500 01500ce4 004c00e3     ..........P...L.
   18d40:	00a9005a c004a006 4c00004e 500d5a00     Z.......N..L.Z.P
   18d50:	1ce40000 0000a058 e173ce03 0000e93c     ....X.....s.<...
   18d60:	400ed600 7c0000a8 d003c003 3c202e00     ...@...|...... <
   18d70:	0b003d00 09e20070 00d00680 00a0dd04     .=..p...........
   18d80:	00b1ef09 3ce40900 d90000a0 00007d00     .......<.....}..
   18d90:	a01cc00c ae3f0000 010000c1 0000c0df     ......?.........
   18da0:	708feb03 00db0018 3ff0657f ea8f0040     ...p.....e.?@...
   18db0:	0000f703 f90b70cf 40bfcf66 30eadf08     .....p..f..@...0
   18dc0:	000000a5 f5000000 72e4e4f5 f205da00     ...........r....
   18dd0:	700fc00b 205f403f 007f106f 205f106f     ...p?@_ o...o._ 
   18de0:	700f403f f205c00b 303fda00 f106b00c     ?@.p......?0....
   18df0:	e900f601 ad00bc00 ad00ae00 e900bc00     ................
   18e00:	f106f601 303fb00c 06004a00 2ba0a474     ......?0.J..t..+
   18e10:	7f00e5ff 6b7b20fb a004008d 00130000     ..... {k........
   18e20:	10050000 500f0000 500f0000 511f0100     .......P...P...Q
   18e30:	ffffef10 744f34f3 500f0040 500f0000     .....4Ot@..P...P
   18e40:	fd520900 0fc5a00b 10110100 04f3ff1f     ..R.............
   18e50:	12034044 00901efc 00f10500 00b00a00     D@..............
   18e60:	00600f00 00105f00 0000ab00 0000f600     ..`.._..........
   18e70:	0000f105 0000b00a 0000600f 0000104f     .........`..O...
   18e80:	000000ac 040000f6 0a0000f1 0e0000c0     ................
   18e90:	4f000060 00000010 00c5ef08 cfa8cf00     `..O............
   18ea0:	00f50770 c00df20a 1ff80100 dc000080     p...............
   18eb0:	0000603f 00603fbd 801fbd00 0ddc0000     ?`...?`.........
   18ec0:	f80100c0 0a00f507 a8cf00f2 080070cf     .............p..
   18ed0:	ef00c5ef f37a36ff 05305f00 305f00f3     .....6z.._0..._0
   18ee0:	5f00f305 00f30530 f305305f 05305f00     ..._0..._0..._0.
   18ef0:	fdbe04f3 98fd0770 002890cf 0000bf00     ....p.....(.....
   18f00:	00f20700 00af0000 804f0000 c03f0000     ..........O...?.
   18f10:	c13e0000 c12e0000 d12e0000 f82e0000     ..>.............
   18f20:	ff467777 6ffaffff 02ffffff b09f7777     wwF....o....ww..
   18f30:	e10c0000 f3090000 f6050000 df000000     ................
   18f40:	040010e9 0000fd59 00f40600 643f0000     ....Y.........?d
   18f50:	f3080040 fb8cc9bf d7ff7c00 01000000     @........|......
   18f60:	000000eb 0010be00 506f0000 2f000000     ..........oP.../
   18f70:	00000090 0000d00c 01f30800 f80300d5     ................
   18f80:	00602f00 f72322ed ffff6f21 5581ffff     ./`.."#.!o.....U
   18f90:	52f95655 2f000000 00000060 0500f602     UV.R.../`.......
   18fa0:	00ffffff 7077777f 0000e008 0000ad00     .....wwp........
   18fb0:	10c20b00 ffdf0000 550430fb 0020ff68     .........0.Uh. .
   18fc0:	00f80400 920f0000 f6050050 fd8ad98f     ........P.......
   18fd0:	e9ef5b10 ce050010 9f0060fc 05708bc8     .[.......`....p.
   18fe0:	000000f8 0000d00c 00801f00 682f0000     ............../h
   18ff0:	3f10faef d08f64ee 0600f12f 00c00ef4     ...?.d../.......
   19000:	f109f602 01f30600 b09f86de d8ef1900     ................
   19010:	ffff8f00 77f7e8ff 008ffc77 90554f00     .......ww....OU.
   19020:	00e00b00 00f80200 109f0000 b00f0000     ................
   19030:	f4060000 dd000000 3f000000 0a000070     ...........?p...
   19040:	010000f1 000000f9 00d7ff5c af76fc06     ........\.....v.
   19050:	00d00ca0 c00df109 07f20700 c05e11f7     ..............^.
   19060:	feffbf00 54f90910 802fd07e 4ff60400     .......T~./....O
   19070:	f8000050 0500a01f 76fb09f6 6c00d0af     P..........v...l
   19080:	0010d8ff 0080fd8e fc68f80c 00505f00     ..........h.._P.
   19090:	008f703f 7fc00e00 f01f0030 cf13d41f     ?p......0.......
   190a0:	ffef04f1 0200f0a9 00f00a31 a00e0000     ........1.......
   190b0:	9f000000 8da70930 df0700f7 1e0040eb     ....0........@..
   190c0:	1003fc92 00000000 1efc1203 fc921e90     ................
   190d0:	00001003 01000000 a8d01fe9 00a0300e     .............0..
   190e0:	00420000 03f37d01 bf10e89f ee0000b5     ..B..}..........
   190f0:	17000081 0000b4df 00d2af04 ef820100     ................
   19100:	45f3ffff 00515555 01000000 ef101111     ...EUUQ.........
   19110:	34f3ffff 50404444 ef000000 06000092     ...4DD@P........
   19120:	0000b5cf 00e29f03 02f36c00 bf20e99e     .........l.... .
   19130:	930000c6 04000000 0770fdbe a0bf77fc     ..........p..w..
   19140:	cf000027 09000000 010000f0 010000ea     '...............
   19150:	000010dd 000010ce 0000603f 00003001     ........?`...0..
   19160:	00000100 00f50600 405f0000 17000000     .........._@....
   19170:	00b5fdce fb050000 c27d2353 406e0000     ........S#}...n@
   19180:	8e000000 01f40210 493ffaae 1e900ab0     ..........?I....
   19190:	40ef5be6 8f300fe3 40af0010 d9001f98     .[.@..0....@....
   191a0:	403f0000 e8003f6a 401f0000 d9001f5c     ..?@j?.....@\...
   191b0:	403f0000 8f300f6a 40af0010 1e900a98     ..?@j.0....@....
   191c0:	a6de5ad6 01f303f2 ee16faaf 406e0050     .Z..........P.n@
   191d0:	00000000 fb060000 00752353 17000000     ........S#u.....
   191e0:	00a3fdce 02000000 000000fd f49f0000     ................
   191f0:	00000000 00b09e0f f2060000 0000207f     ............. ..
   19200:	f801dc00 4f000000 00e00b60 00f00b00     .......O`.......
   19210:	0100604f ed1111fa ff8f0000 00f3ffff     O`..............
   19220:	4444c40e f406a04f af000000 0000cd10     ..DDO...........
   19230:	5ff80200 40ebffff 5755f805 405f40df     ..._...@..UW.@_@
   19240:	05fa0100 0f0000f4 11515fa0 ff05f43a     ........._Q.:...
   19250:	00faffff 5944745f 00f405fa 5ff20800     ...._tDY......._
   19260:	5f000040 0000f445 855ff209 05fb6a55     @.._E....._.Uj..
   19270:	d7ffffff 8d020000 0400b4fe f99db8ff     ................
   19280:	0020fd02 20bf5008 0f000000 000000a0     .. ..P. ........
   19290:	0000f602 602f0000 00000000 000000fa     ....../`........
   192a0:	00f20b00 2f000000 850000d2 89fb5f00     ......./....._..
   192b0:	290080df 5f40ebdf 30eaffff 77975f00     ...)..@_...0._.w
   192c0:	5f00f89e af000040 00405f60 5fe00d00     ..._@...`_@...._
   192d0:	06000040 00405ff4 5ff60300 03000040     @...._@...._@...
   192e0:	00405ff6 5ff40600 0d000040 00405fe0     ._@...._@...._@.
   192f0:	5f60af00 f89e7797 ffff5f00 5f0030ea     ..`_.w..._...0._
   19300:	95ffffff 747777f9 0000405f 0000f405     .....wwt_@......
   19310:	11515f00 ffff0511 745fe0ff f4054444     ._Q......._tDD..
   19320:	5f000000 05000040 000000f4 7777975f     ..._@......._.ww
   19330:	ffffff65 ffff5ffd 77f995ff 405f7477     e...._.....wwt_@
   19340:	f4050000 5f000000 05000040 102222f5     ......._@...."".
   19350:	feffff5f 5555f805 00405f40 00f40500     _.....UU@_@.....
   19360:	405f0000 f4050000 00000000 b5fe8d01     .._@............
   19370:	fb4f0000 02b0df89 060020fd 00f20b60     ..O...... ..`...
   19380:	0f000000 000000a0 00602f00 2f000000     ........./`..../
   19390:	09000060 00a00ff0 0bf00900 090000f2     `...............
   193a0:	20fd02f0 00f00a00 df89fb4f 8d0200c0     ... ....O.......
   193b0:	5f00c6fe 4f000040 0000f455 405ff504     ..._@..OU....._@
   193c0:	554f0000 040000f4 22525ff5 ff555f22     ..OU....._R""_U.
   193d0:	f5ffffff 5555855f 00f4558f 5ff50400     ...._.UU.U....._
   193e0:	4f000040 0000f455 405ff504 554f0000     @..OU....._@..OU
   193f0:	040000f4 f4455ff5 5ff4455f 455ff445     ....._E._E._E._E
   19400:	f4455ff4 00f4455f 00faffff 00fa7777     ._E._E......ww..
   19410:	00fa0000 00fa0000 00fa0000 00fa0000     ................
   19420:	00fa0000 00fa0000 07f90000 0df60320     ............ ...
   19430:	01f18ee9 5f30fbae eb020040 0100f405     ......0_@.......
   19440:	405f00ec 0510de01 20ce00f4 bf405f00     .._@....... ._@.
   19450:	f4050030 0000909f 40efcf5f 91ff0500     0......._..@....
   19460:	5f0010ee 00fc03a0 0600f405 405f00f8     ..._.........._@
   19470:	05f50900 0c0000f4 00405ff2 00f40500     ........._@.....
   19480:	405f0000 f4050000 5f000000 05000040     .._@......._@...
   19490:	000000f4 0000405f 0000f405 00405f00     ...._@......._@.
   194a0:	00f40500 975f0000 ff257777 5ff5ffff     ......_.ww%...._
   194b0:	00000040 00fc951e f9080000 0000f55f     @..........._...
   194c0:	fd95ff02 ae0000e0 705f5ff9 955f3f00     .........__p.?_.
   194d0:	0b108ff3 315ff9c0 0ff304e9 f207f395     ......_1........
   194e0:	5ff900db 20ef0d30 00f3950f f900905f     ..._0.. ...._...
   194f0:	7100305f f3950f00 00000000 00505ff9     _0.q........._P.
   19500:	ff554f00 f5040020 0000fd5f f9fa554f     .OU. ..._...OU..
   19510:	5ff50400 4f00f54a f20df455 405ff504     ..._J..OU....._@
   19520:	554fd02f 946f00f4 00405ff5 f455afaf     /.OU..o.._@...U.
   19530:	f5df0000 0200405f 00f455ff 00f50600     ...._@...U......
   19540:	b5fe8d01 ff040000 00fa9eb8 0020fd02     .............. .
   19550:	bf00f908 0a000020 00a00ff2 723f0000     .... .........?r
   19560:	000000f6 602ff900 0f000000 0000fa90     ....../`........
   19570:	0bf70300 000000f2 d22f20af 908f0000     ......... /.....
   19580:	89fb4f00 0000a0ef 50ebdf28 ffff5f00     .O......(..P._..
   19590:	975f00d7 5fc0bf78 f6070040 0000405f     .._.x.._@..._@..
   195a0:	00405ffa 405ffa00 5ff80300 f16e2362     ._@..._@..._b#n.
   195b0:	fdffff5f 54855f30 405f0020 5f000000     _...0_.T ._@..._
   195c0:	00000040 0000405f 8d010000 0000b5fe     @..._@..........
   195d0:	89fb4e00 0200a0ef 080020fd f20a00f9     .N....... ......
   195e0:	af000000 00a00f20 703f0000 0000602f     .... .....?p/`..
   195f0:	2f900f00 00000060 901f900f 2f000000     .../`........../
   19600:	00f10b70 20af0000 0010fc03 0000f907     p...... ........
   19610:	df78fa6f 030000b0 00c5ffae 00000000     o.x.............
   19620:	b015d43e 02000000 0080ffbf 01000000     >...............
   19630:	ff5f0031 5f00d7ff c0bf7897 0700405f     1._...._.x.._@..
   19640:	00405ff6 405ffa00 5ffa0000 f8030040     ._@..._@..._@...
   19650:	6e23525f ffff5fe1 855f30fc 5f00f955     _R#n._...0_.U.._
   19660:	407f0040 0c00405f 00405fe0 5c00f902     @..@_@..._@....\
   19670:	0720d9ef 90af87fc 0100c00e 00800f10     .. .............
   19680:	f50d0000 03000000 0050eaef feae0500     ..........P.....
   19690:	00000040 0000f14e 08f30500 f2080000     @...N...........
   196a0:	bf77fa2f ff9d02a0 ffff00c7 67f5ffff     /.w............g
   196b0:	7277fb78 00f70100 f7010000 01000000     x.wr............
   196c0:	000000f7 0000f701 00f70100 f7010000     ................
   196d0:	01000000 000000f7 0000f701 00f70100     ................
   196e0:	f7010000 306f0000 168f0000 080000f3     ......o0........
   196f0:	00306ff1 f3168f00 f1080000 0000306f     .o0.........o0..
   19700:	00f3168f 6ff10800 8f000030 0000f405     .......o0.......
   19710:	703ff009 00cd0000 5f0020de a8ff0480     ..?p..... ._....
   19720:	0300d0bf 0081fdbe 0000e00c 6f306f00     .............o0o
   19730:	0c000050 00fb00c0 00f60300 0000f209     P...............
   19740:	2f0000ae 901f0080 00ce0000 0000f207     .../............
   19750:	db00f605 0e000000 00504fc0 3b8f0000     .........OP....;
   19760:	000000e0 00f8fb02 0b000000 000010ff     ................
   19770:	b04f0000 405f0000 00df0000 0ff50200     ..O..._@........
   19780:	ff020090 f0070040 0700e00b 0c0090fe     ....@...........
   19790:	00f306b0 00e0aa0c f801601f f3541f00     .........`....T.
   197a0:	00106f00 107f00cd 00cc00f8 cb207f00     .o............ .
   197b0:	f701ad00 712f0000 265f00f6 0d0000f2     ....../q.._&....
   197c0:	0f00f1c6 0000d07b 00c0fd08 0080df0b     ....{...........
   197d0:	70ff0300 30ff0600 ef000000 fe010020     ...p...0.... ...
   197e0:	903f0000 00cd0000 7f00408f 10de0030     ..?......@..0...
   197f0:	0300802f 00d00cfa f3fb0700 0c000000     /...............
   19800:	000000f8 00c0ef01 7fbf0000 6f000070     ............p..o
   19810:	0020af60 ed01b02f 00f10c00 f607f804     `. ./...........
   19820:	f3090000 0000e00c f703f207 901f0000     ................
   19830:	0010af00 1f00109e 00f602a0 0bf30800     ................
   19840:	000000d0 00404fec fb5f0000 00000000     .....O@..._.....
   19850:	0000f20c f0090000 00000000 0000f009     ................
   19860:	f0090000 00000000 0000f009 ffffff3f     ............?...
   19870:	777701fd 0090bf77 c01e0000 0c000000     ..www...........
   19880:	000000f2 0000f508 00f90400 ec010000     ................
   19890:	00000000 000020cf 00508f00 904f0000     ..... ....P...O.
   198a0:	1e000000 777777f8 ffffff05 ff5ff0ff     .....www......_.
   198b0:	5f50f705 00f30530 f305305f 05305f00     ..P_0..._0..._0.
   198c0:	305f00f3 5f00f305 00f30530 f705305f     .._0..._0..._0..
   198d0:	00ff5f50 0000007e 0000401f 0000900c     P_..~....@......
   198e0:	0000e007 0000f402 0000c900 00007e00     .............~..
   198f0:	00402f00 00900c00 00e00700 00f30200     ./@.............
   19900:	00d90000 007e0000 302f0000 900d0000     ......~.../0....
   19910:	e0070000 ea35fabf ea00ea00 ea00ea00     ......5.........
   19920:	ea00ea00 ea00ea00 ea00ea00 ea35ea00     ..............5.
   19930:	2f00fabf 9d000080 f30000e0 d00600d5     .../............
   19940:	600c007b 103f201f 009a800b ffffe004     {..`. ?.........
   19950:	1111ffff f6071111 01e70300 0080fd9e     ................
   19960:	90af87ce af000002 06000000 ffbe02f2     ................
   19970:	42ec20ff 502ff227 ec207f00 02f27f42     . .B'./P.. .B...
   19980:	206ffbbf 0000008f 00008f00 008f0000     ..o ............
   19990:	8f000000 00b3fe2b ef78ec8f 00a08f30     ....+.....x.0...
   199a0:	208fc01e 8ff10700 f3050000 0700208f     ... ......... ..
   199b0:	00a08ff1 ec8fd01e 8e30ef78 00b3fe2b     ........x.0.+...
   199c0:	c4ef3a00 7cd84f00 00d00df4 00f61307     .:...O.|........
   199d0:	304f0000 f6030000 0d000000 100600d0     ..O0............
   199e0:	f47cd74f c4ef3a00 00000000 0000f701     O.|..:..........
   199f0:	00f70100 f7010000 a3ff3b00 87fd04f7     .........;......
   19a00:	d00ef7ce 3ff70b00 f7030060 0100304f     .......?`...O0..
   19a10:	00503ff7 c00ef703 04f70a00 f7be65fc     .?P..........e..
   19a20:	b2ff3b00 fe3b00f7 fc0400a2 0e20ee67     .;....;.....g. .
   19a30:	a01e00c0 0700503f ffff4ff0 723ff1ff     ....?P...O....?r
   19a40:	0e202222 000200c0 af87fd04 ef3a0050     "" .........P.:.
   19a50:	5d0000d6 b52f00fc 00f30470 a0ffff0c     ...]../.p.......
   19a60:	0053f748 0500305f 5f0000f3 f3050030     H.S._0....._0...
   19a70:	305f0000 00f30500 00305f00 b2ff3b00     .._0....._0..;..
   19a80:	87fe04e9 d10ef9cf 3ff90a00 f9010060     ...........?`...
   19a90:	0000404f 00603ff9 d00ef901 04f90900     O@...?`.........
   19aa0:	f8cf87fd b3ff3b00 000000f7 e909f405     .....;..........
   19ab0:	01b0af77 00d8ff7c 0000008f 0000f008     w...|...........
   19ac0:	00008f00 bff20800 fb8f10ea f808fd89     ................
   19ad0:	8ff40600 781f0010 f80000f0 0f00008f     .......x........
   19ae0:	0000f088 00008ff8 00f0880f 1a9ef800     ................
   19af0:	f00800f2 8ff0088f 088ff008 f0088ff0     ................
   19b00:	00e20700 0000f309 f1070000 00f10700     ................
   19b10:	0700f107 f10700f1 00f10700 0700f107     ................
   19b20:	f10700f1 18f00800 fc3ec06e 00008f20     ........n.>. ...
   19b30:	00f00800 008f0000 f0080000 8fd11d00     ................
   19b40:	08e21d00 00e21df0 00f32d8f 70fffe08     .........-.....p
   19b50:	bfe28f00 01f20830 008f10ee f008fb03     ....0...........
   19b60:	8ff70700 8f8f8f8f 8f8f8f8f 8e8f8f8f     ................
   19b70:	3b91fe3c ff08a2fe c6cf9f96 708fd08f     <..;...........p
   19b80:	00c09f00 00f1585f 0100f605 00008ff7     ...._X..........
   19b90:	0f00404f 0400f088 f80000f4 4f00008f     O@.............O
   19ba0:	880f0040 f40400f0 8ff80000 404f0000     @.............O@
   19bb0:	8e800f00 08a1fe3b d08fa6ff 6f00808f     ....;..........o
   19bc0:	0100f148 00008ff7 00f0880f 008ff800     H...............
   19bd0:	f0880f00 8ff80000 800f0000 c4ef3b00     .............;..
   19be0:	87fd0400 d00e60cf 3ff10b00 f5030060     .....`.....?`...
   19bf0:	0100304f 00603ff7 d00ef503 04f10b00     O0...?`.........
   19c00:	60cf77fd c4ef3b00 fe3b8e00 fb8f00b3     .w.`.;....;.....
   19c10:	8f30df57 c00d0090 0700108f 00008ff1     W.0.............
   19c20:	208ff305 8ff10700 d01e00a0 ef78ec8f     ... ..........x.
   19c30:	fe2b8f30 008f00b3 8f000000 00000000     0.+.............
   19c40:	0000008f ff3b0000 fd04f7a2 0ef7de87     ......;.........
   19c50:	f70b00d0 0300603f 00304ff7 603ff701     ....?`...O0...?`
   19c60:	0ef70300 f70b00d0 ce77fd04 ff3b00f7     ..........w...;.
   19c70:	0000f7a3 00f70100 f7010000 01000000     ................
   19c80:	f02b8ef7 8f90ed8f 208f00a0 00008f00     ..+........ ....
   19c90:	8f00008f 008f0000 00008f00 91fdae02     ................
   19ca0:	d069d71e 0000304f 0010b42f 60fdef06     ..i.O0../......`
   19cb0:	f55b0100 f7000001 f36ba75f 40ecdf19     ..[....._.k....@
   19cc0:	0000f305 cf00305f 8f04faff f3053075     ...._0......u0..
   19cd0:	305f0000 00f30500 00305f00 0000f404     .._0....._0.....
   19ce0:	0080c61f ae10fc5d 5a2f0000 f50200e0     ....]...../Z....
   19cf0:	2f0000ae 0200e05a 0000aef5 00f0592f     .../Z......./Y..
   19d00:	306ff504 ee51af00 02f5bf76 503ffbbe     ..o0..Q.v.....?P
   19d10:	0000c00d 00f206cb f900f502 00e00900     ................
   19d20:	800f009e 6f602f00 c00c0010 050000cb     ...../`o........
   19d30:	0000f4f6 00d0ef00 708f0000 0000bb00     ...........p....
   19d40:	4f00109f 0e00f116 c00900f6 fc05600f     ...O.........`..
   19d50:	00f600b0 5fab00ac 05105f10 f7500ff1     ......._._....P.
   19d60:	0f00b00a c009f076 ac0000f5 8f4f00ba     ....v.........O.
   19d70:	ff040000 a0ef0040 e00e0000 00f40800     ....@...........
   19d80:	00704f00 308f209f cd00505f 0200902e     .Op.. .0_P......
   19d90:	0000d0ff 0000f60a 00e1fd04 c00deb01     ................
   19da0:	3f10be00 00406f80 c00d407f 06cb0000     ...?.o@..@......
   19db0:	f40200f3 0900ea00 108f00d0 1f00701f     .............p..
   19dc0:	00107f70 00d9e00a f2f90300 cf000000     p...............
   19dd0:	000000b0 0000406f 0000ad00 00f5791c     ....o@.......y..
   19de0:	70ee1a00 ff4f0000 5515f9ff 0000f45b     ...p..O....U[...
   19df0:	0100804f 0b0000ec 8f0000e1 f7040040     O...........@...
   19e00:	e51e0000 ff5f5355 2c00fcff 61af00f5     ....US_....,...a
   19e10:	0000cc00 db0000db 00db0000 1f00ea02     ................
   19e20:	fa0500f4 00db0000 0000db00 cc0000db     ................
   19e30:	61af0000 5ff52c00 155ff115 f1155ff1     ...a.,._.._.._..
   19e40:	5ff1155f 155ff115 f1155ff1 80be105f     _.._.._.._.._...
   19e50:	0140af03 701f00f6 1f00f701 00f90070     ..@....p....p...
   19e60:	fb00fb0a 01701f20 701f00f7 af03f601     .... .p....p....
   19e70:	0090be40 00000000 00e43d00 f5860cb5     @........=......
   19e80:	03f0201e 000290ef 02001000 400d90ce     . .............@
   19e90:	0e003b89 0d0e003b ce028940 f8080090     .;..;...@.......
   19ea0:	00f7e7ef 00000000 00000000 00000000     ................
   19eb0:	00dc4900 16000000 00ffffbf ff8d0300     .I..............
   19ec0:	00ffffff ffffcf00 00ffffff ffffff00     ................
   19ed0:	00ffc7ff eaffff00 00ff0051 0083ff00     ........Q.......
   19ee0:	00ff0000 0000ff00 00ff0000 0000ff00     ................
   19ef0:	00ff0000 0000ff00 00ff0000 0000ff00     ................
   19f00:	00ffff2b 0000ff00 2bffffdf 0000ffff     +..........+....
   19f10:	dffdffdf 0000ffff dfb2ff2b 0000fdff     ........+.......
   19f20:	2b000000 0000b2ff d0000000 ffffff0f     ...+............
   19f30:	ff0df0ff 8888c8ff f0ffff8c 0000800f     ................
   19f40:	f00ff008 0000800f ff0ff008 000080ff     ................
   19f50:	f0ffff08 ccccec0f f00ff0ce ccccec0f     ................
   19f60:	ff0ff0ce 000080ff f0ffff08 0000800f     ................
   19f70:	f00ff008 0000800f ff0ff008 8888c8ff     ................
   19f80:	d0ffff8c ffffff0f df0df0ff ffff73ff     .............s..
   19f90:	fffdffff ffffa5ff ffffffff ffffa5ff     ................
   19fa0:	dfffffff ffff73ff 00fdffff 00000000     .....s..........
   19fb0:	df000000 ffff73ff fffdffff ffffa5ff     .....s..........
   19fc0:	ffffffff ffffa5ff dfffffff ffff73ff     .............s..
   19fd0:	00fdffff 00000000 df000000 ffff73ff     .............s..
   19fe0:	fffdffff ffffa5ff ffffffff ffffa5ff     ................
   19ff0:	dfffffff ffff73ff 00fdffff 00000000     .....s..........
   1a000:	00b10a00 00000000 00fcbf00 00000000     ................
   1a010:	00fbff0b 00000000 1bc0ffbf 0b0000a0     ................
   1a020:	cf00fcff bf0000fb bf00c0ff ff0bb0ff     ................
   1a030:	0c0000fc ffbffbff 000000c0 fbffffcf     ................
   1a040:	00000000 b0ffff0c 00000000 00fbbf00     ................
   1a050:	00000000 00b00b00 03000000 03000000     ................
   1a060:	0010fc08 fcfff81c f5ff1c10 ff2cfcff     ..............,.
   1a070:	ffff05f5 0500f5ff 00f5ffff fdff1d00     ................
   1a080:	ff1c0010 1c10fcff fcfff9ff 05f5ff1c     ................
   1a090:	f5dffcff d1ff0500 040000a4 000000a1     ................
   1a0a0:	0000e04f 10020000 1003f16f d05f0000     O.......o....._.
   1a0b0:	d13ff16f f1ff0300 fd5ff16f 40ff0d00     o.?.....o._....@
   1a0c0:	ff09f16f 00f74f70 cf00f16f 00f09fe0     o...pO..o.......
   1a0d0:	5f00f16f 00c0bff3 2f00f16f 00c0bff5     o.._....o../....
   1a0e0:	1f00e04f 00e0aff6 4f000000 00f46ff4     O..........O.o..
   1a0f0:	af000000 10fe0ff0 ff050000 d3ff06a0     ................
   1a100:	ff7f0000 ff9f0020 f4ffbeda ff060000     .... ...........
   1a110:	30fdffff 17000000 0050cabd 00000000     ...0......P.....
   1a120:	0000b88b 00000000 0000ffff 06300000     ..............0.
   1a130:	0360ffff dffd0400 effdffff ffff0d40     ..`.........@...
   1a140:	ffffffff ffff4fd0 ffff9ff9 ffff08f4     .....O..........
   1a150:	ffff0220 f9ff0080 ff9f0000 f9ff0000      ...............
   1a160:	ff9f0000 ffff0800 ffff0220 ffff4f80     ........ ....O..
   1a170:	ffff9ff9 ffff0df4 ffffffff dffe04d0     ................
   1a180:	dffdffff 06300040 0360ffff 00000000     ....@.0...`.....
   1a190:	0000ffff 00000000 0000b88b 00000000     ................
   1a1a0:	3f30dd03 000000f3 f5ff6f00 0000f44f     ..0?.....o..O...
   1a1b0:	99ff0900 00f4bfff f6bf0100 f4ff6f22     ............"o..
   1a1c0:	fe2d0000 ef53ff35 ff0400f4 f8ff8fc1     ..-.5.S.........
   1a1d0:	7f40fe2d ffff1afa f7afa1ff ffdf82cf     -.@.............
   1a1e0:	28fdffff ff0e14fc ffffffff 0f0041e0     ...(.........A..
   1a1f0:	ffffffff 0000f0ff 00f9ff0f 00f0ff8f     ................
   1a200:	f8ff0f00 f0ff8f00 ff0f0000 ff8f00f8     ................
   1a210:	0e0000f0 6f00f6ff 0000e0ff fddf0000     .......o........
   1a220:	00000000 ffff0000 00000000 ffff0000     ................
   1a230:	00000000 ffff0000 00000000 ffff0000     ................
   1a240:	00000000 ffff0000 00000000 ffffff4f     ............O...
   1a250:	0000f4ff ffffff0b 0000b0ff ffffbf00     ................
   1a260:	000000fb ffff0b00 000000b0 fbbf0000     ................
   1a270:	df000000 b11bfcff fffdffcf 2cc2ffff     ...............,
   1a280:	ffffffff ffffffff ffffffff ffffffff     ................
   1a290:	dfffe0f0 ffffffff 00fdffff ffffef04     ................
   1a2a0:	0040feff ffff1e00 e1ffffff b0af0000     ..@.............
   1a2b0:	0b000000 ff0500fa 00000010 1e50ff01     ..............P.
   1a2c0:	000000f6 e16f0000 0000b0af 0b000000     ......o.........
   1a2d0:	fffffffa ff080080 ffffffff 1f00f1ff     ................
   1a2e0:	ffffffff ffffffff ffffffff ffffffff     ................
   1a2f0:	ffffffff ffffffff ffffffff ff8fffff     ................
   1a300:	ffffffff 00f8ffff dabd0600 00ff0250     ............P...
   1a310:	ffffef05 00ff42fe 7ba7ff7f 05fff9ff     .....B.....{....
   1a320:	0000c1ff 0effff2c 020000fc 5fffdf22     ....,.......".._
   1a330:	0f0000f2 8fffffff 0f0000b0 00ffffff     ................
	...
   1a34c:	ff000000 00f0ffff fff80b00 00f0ffff     ................
   1a35c:	fff42f00 002022fd ffe0cf00 0000c2ff     ./..." .........
   1a36c:	ff40ff2c 6ab7ff9f ff00f7ff ffffdf24     ,.@....j....$...
   1a37c:	ff0050fe dbac0520 00000060 00000000     .P.. ...`.......
   1a38c:	008d0000 00ff0800 dfff8f00 ffffffff     ................
   1a39c:	ffffffff ffffffff ffffffff dfffffff     ................
   1a3ac:	00ffffff 00ff8f00 00ff0800 008d0000     ................
	...
   1a3c8:	0000008d 00ff0800 8f000000 cf0000ff     ................
   1a3d8:	01ffffff ffffff50 fff706ff 00ffffff     ....P...........
   1a3e8:	ffffffbe ffae00ff 05ffffff ffffdff8     ................
   1a3f8:	006002ff 00ff9f00 09000000 000000ff     ..`.............
   1a408:	009e0000 00000000 00000000 00000000     ................
   1a418:	00100600 00000000 d21f0000 00000000     ................
   1a428:	0300008d 000010ee 0a00ff08 00b02fb1     ............./..
   1a438:	00ff8f00 f407fc05 ffffffdf 605f5002     .............P_`
   1a448:	fffffff9 0df706ff ffffbdc0 ae00ffff     ................
   1a458:	ff9ff009 00ffffff 8ff009ae ffffffff     ................
   1a468:	c00df706 ffffdfad 5f5002ff 0000e960     ..........P_`...
   1a478:	0500ff8f 00f406fc 00ff0800 b02fb10a     ............../.
   1a488:	8d000000 ee020000 00000010 1f000000     ................
   1a498:	000000d2 00000000 8f001006 ffffffff     ................
   1a4a8:	fff8ffff fffffffc ffffffff ffff2f20     ............ /..
   1a4b8:	fcffffff ffff0c00 ffffffee feff2f20     ............ /..
   1a4c8:	ffffef22 e2fffffc ffff2e00 20fe4efe     "............N. 
   1a4d8:	ffff0200 00c202e2 ffff0000 00000020     ............ ...
   1a4e8:	ffff0000 00000000 ffff0000 ffffffff     ................
   1a4f8:	8fffffff ffffffff 00f8ffff 00000000     ................
   1a508:	010030ff 0040ffcc 40ffff2d ffffef03     .0....@.-..@....
   1a518:	ffff3f40 ffff44ff ff9fffff ffffffff     @?...D..........
   1a528:	ffffffff ffffffff ffffafff ff45ffff     ..............E.
   1a538:	40ffffff ffffff4f ffef0340 2e0040ff     ...@O...@....@..
   1a548:	0030ffff 0000cc01 00000000 00000000     ..0.............
   1a558:	918f0000 00000000 70ffff00 00000000     ...........p....
   1a568:	40fdffff ff000000 10faffff ffff0000     ...@............
   1a578:	00f7ffff ffffff00 00d5ffff ffffffff     ................
   1a588:	ffb2ffff ffffffff fffffdff ffffffff     ................
   1a598:	fffffffd b2ffffff ffffffff ff00d5ff     ................
   1a5a8:	f7ffffff ffff0000 0010faff fdffff00     ................
   1a5b8:	00000040 0070ffff 8e000000 000000a1     @.....p.........
	...
   1a5d8:	00f8ff8f fff8ff8f ff00ffff ffffffff     ................
   1a5e8:	ffff00ff ffffffff ffffff00 00ffffff     ................
   1a5f8:	ffffffff ff00ffff ffffffff ffff00ff     ................
   1a608:	ffffffff ffffff00 00ffffff ffffffff     ................
   1a618:	ff00ffff ffffffff ffff00ff ffffffff     ................
   1a628:	ffffff00 00ffffff 7fffffff 7f00f7ff     ................
   1a638:	ff8ff7ff ffffffff fffffff8 ffffffff     ................
   1a648:	ffffffff ffffffff ffffffff ffffffff     ................
   1a658:	ffffffff ffffffff ffffffff ffffffff     ................
   1a668:	ffffffff ffffffff ffffffff ffffffff     ................
   1a678:	ffffffff ffffffff ffffffff ffffffff     ................
   1a688:	ffffffff ffffffff ffffffff ffff8fff     ................
   1a698:	f8ffffff 00000000 0010cc00 d2ffff03     ................
   1a6a8:	ffff0400 ff0430fe 04f4ffff ffffffff     .....0..........
   1a6b8:	ffffff54 fffff9ff ffffffff ffffffff     T...............
   1a6c8:	ffffffff fffffff9 ffff44ff ff04f3ff     .........D......
   1a6d8:	0430feff 00d2ffff 10ccff04 00ff0300     ..0.............
   1a6e8:	00000000 2d000000 000000d2 ef010000     .......-........
   1a6f8:	000010fe ff1d0000 0000d1ff ffcf0000     ................
   1a708:	0000fcff ffff0b00 00b0ffff ffffaf00     ................
   1a718:	00faffff ffffff09 90ffffff ffffff0f     ................
   1a728:	f0ffffff ffffff08 80ffffff 00000000     ................
   1a738:	00000000 ffffff0c c0ffffff ffffff0f     ................
   1a748:	f0ffffff ffffff0f f0ffffff ffffff0c     ................
   1a758:	c0ffffff 1a000000 01000040 0000f0df     ........@.......
   1a768:	00a0ff1d 00fadf01 a0ff1d00 fadf0100     ................
   1a778:	ff0c0000 0d0000a0 000080ff 00f8df01     ................
   1a788:	ff1d0000 01000080 0000f8df 80ff1d00     ................
   1a798:	df010000 000000f0 a104501b 0f000000     .........P......
   1a7a8:	000010fd 00d1ff0a fdaf0000 0a000010     ................
   1a7b8:	0000d1ff 10fdaf00 ff0a0000 080000c0     ................
   1a7c8:	0000d0ff 0010fd8f 00d1ff08 10fd8f00     ................
   1a7d8:	d1ff0800 fd0f0000 05000010 000000b1     ................
   1a7e8:	ff040000 00000040 80ff0800 00000000     ....@...........
   1a7f8:	0080ff08 08000000 000080ff ff080000     ................
   1a808:	48000080 c8ff8c88 ffff8488 ffffffff     ...H............
   1a818:	ffffffff ffffffff ff8c8848 008488c8     ........H.......
   1a828:	80ff0800 00000000 0080ff08 08000000     ................
   1a838:	000080ff ff080000 00000080 40ff0400     ...............@
   1a848:	44140000 44444444 ffffef41 feffffff     ...DDDDDA.......
   1a858:	ffffffff 7bffffff bbbbbbbb 0000b7bb     .......{........
   1a868:	daffad05 00000050 88fcdf04 0040fdcf     ....P.........@.
   1a878:	40fe7f00 f7ef0400 f4ff0700 4f809e00     ...@...........O
   1a888:	ff4f70ff f8af00c0 dff4ff0c ff9a80ff     .pO.............
   1a898:	fdff08fe ef80ffdf ff08feff c0ff4ffd     .............O..
   1a8a8:	0cf8ff8f ff07f4ff 80ee08f4 0070ff4f     ............O.p.
   1a8b8:	0040fe7f 00f8ef04 fcdf0400 40fdcf88     ..@............@
   1a8c8:	05000000 50daffad 208c0000 00000000     .......P... ....
   1a8d8:	00000000 0000e4df 00000000 ff1b0000     ................
   1a8e8:	fddf4980 000000a5 ffff7f00 d4ff8cd8     .I..............
   1a8f8:	04000000 0000f8ef 0070ff4e ff1c0000     ........N.p.....
   1a908:	ff04e869 e30400f7 fffe9f00 40ffcf80     i..............@
   1a918:	0570ff0d 8fe0ffff ff0dd0ff ff2d00f7     ..p...........-.
   1a928:	d0ff8fe0 00fcff04 cff8af00 7f0030ff     .............0..
   1a938:	060040ff 00f7ffff f4ff0800 ff3e0000     .@............>.
   1a948:	000000a0 82c8ff4d 00f7bf01 5a000000     ....M..........Z
   1a958:	0810fcdf 0000a0ff 00000000 fd4e0000     ..............N.
	...
   1a970:	0000c802 d22d0000 00000000 00000000     ......-.........
   1a980:	0000fbbf 00000000 ffff0500 00000050     ............P...
   1a990:	0d000000 00d0ffff 00000000 ffff7f00     ................
   1a9a0:	000000f7 ff010000 10ff8dd8 00000000     ................
   1a9b0:	0aa0ff0a 0000a0ff ff3f0000 f3ff0bb0     ..........?.....
   1a9c0:	00000000 0cc0ffcf 0000fcff ffff0500     ................
   1a9d0:	ffff0dd0 0e000050 9ff9ffff 00e0ffff     ....P...........
   1a9e0:	ffff8f00 ffff2ee2 ff0200f8 0990ffff     ................
   1a9f0:	10ffffff ffffff0a ffff3ee3 ff0fa0ff     .........>......
   1aa00:	ffffffff f0ffffff ffffff08 ffffffff     ................
   1aa10:	000080ff 00000000 00000000 00000000     ................
   1aa20:	000000d8 00000000 ffff80ff ff070070     ............p...
   1aa30:	fffff8ff ff6f00f6 8e78fdff e8ff15ff     ......o...x.....
   1aa40:	0200e2ff 20fe4fe5 000020fe 00f3ff13     .....O. . ......
   1aa50:	00000052 0031ff3f 02000052 205ef4ef     R...?.1.R.....^ 
   1aa60:	8e7820fe e8ff51ff ffffe2ff ff6f00f6     . x..Q........o.
   1aa70:	fffffdff ff070070 0000f8ff 00000000     ....p...........
   1aa80:	000080ff 00000000 000000d8 00000000     ................
	...
   1aa98:	01000000 000010dd ff1d0000 000000d1     ................
   1aaa8:	fdffdf01 1d000010 d1ff99ff f9df0100     ................
   1aab8:	10fd9f00 0090ff1d bfd1ff09 000000f9     ................
   1aac8:	905ffb9f 09000000 000000f5 00000000     .._.............
   1aad8:	00000000 5f000000 00000090 f9bff509     ......._........
   1aae8:	9f000000 90ff1dfb d1ff0900 00f9df01     ................
   1aaf8:	0010fd9f ff99ff1d 010000d1 10fdffdf     ................
   1ab08:	1d000000 0000d1ff dd010000 00000010     ................
	...
   1ab28:	00d11d00 00000000 df010000 ffef10fd     ................
   1ab38:	00d0ffff d1ffff1d ffffffaf cfcf00f0     ................
   1ab48:	0000fcfc 00f00f00 b6f11f6b 0f000000     ........k.......
   1ab58:	0f0000f0 000000f0 00f00f00 00f00f00     ................
   1ab68:	0f000000 0f0000f0 000000f0 b6f11f6b     ............k...
   1ab78:	00f00f00 cfcf0000 0f00fcfc faffffff     ................
   1ab88:	d1ffff1d ffff0d00 df01feff 000010fd     ................
   1ab98:	00000000 00d11d00 00000000 00000000     ................
   1aba8:	ff8f0000 0000e2ff ffff0000 0020feff     .............. .
   1abb8:	ffff0000 ffffffff fffff8ff ffffffff     ................
   1abc8:	ffffffff ffffffff ffffffff ffffffff     ................
   1abd8:	ffffffff ffffffff ffffffff ffffffff     ................
   1abe8:	ffffffff ffffffff ffffffff ffffffff     ................
   1abf8:	ffffffff ffffffff ff8fffff ffffffff     ................
   1ac08:	0000f8ff 00b00b00 00000000 00fbbf00     ................
   1ac18:	00000000 b0ffff0b 00000000 fbffffbf     ................
   1ac28:	0b000000 ffffffff 4f0000b0 ffffffff     ...........O....
   1ac38:	000000f4 00ffff00 00000000 00ffff00     ................
   1ac48:	00000000 00ffff00 00000000 00ffff00     ................
   1ac58:	00000000 00ffff00 ffdf0000 0ffddff0     ................
   1ac68:	fffffdff 9f0000f9 ffffffff ffffffff     ................
   1ac78:	ffffffff f0ffffff ffdfffe0 ffffffff     ................
   1ac88:	0000fdff 00000000 00000000 00000000     ................
   1ac98:	0062ea0a 00000000 f0ffff02 00000000     ..b.............
   1aca8:	ffff9f00 00000000 ffff0f00 000000d0     ................
   1acb8:	ffff0200 000000fb ef030000 000070ff     .............p..
   1acc8:	04000000 0000f2ff 00000000 0000fbbf     ................
   1acd8:	00000000 0030ff6f 00000200 0090ff4f     ....o.0.....O...
   1ace8:	00f38f02 00d0ff6f e4ffff0a 00d1ffbf     ....o...........
   1acf8:	ffffef00 00d1ffff ffff0a00 0090ffff     ................
   1ad08:	ff6f0000 0030fbff ff020000 000072db     ..o...0......r..
   1ad18:	08000000 000080ee ff086106 2d0080ff     .........a.....-
   1ad28:	33efd0ff ff2e00fe 3ff30ef3 f3ff2ee0     ...3.......?....
   1ad38:	ffff8f00 00f3ff6e ffff8e00 0000f3ff     ....n...........
   1ad48:	ffef0200 000000f3 ffff2e00 08000030     ............0...
   1ad58:	ffffffef ff080030 ffeff6ff 33ef0030     ....0.......0..3
   1ad68:	ffef02fe 3ff30e30 ffef02e0 f8ff8f30     ....0..?....0...
   1ad78:	fddf0200 00e88e00 10660000 ffdf0000     ..........f.....
   1ad88:	00200dff ffffff00 0000e20f 0fffffff     .. .............
   1ad98:	fff0dffd 0020ffff fffff0ff ffffffff     ...... .........
   1ada8:	fffffff0 f0ffffff ffffffff fff0ffff     ................
   1adb8:	ffffffff fffff0ff ffffffff fffffff0     ................
   1adc8:	f0ffffff ffffffff fff0ffff ffffffff     ................
   1add8:	ffdff0ff fffdffff 000000f9 ffff0000     ................
   1ade8:	00ffffff ffffdf00 0000fdff ffffff8f     ................
   1adf8:	ff00c2ff ffffffff 00ff20fe ff010000     ......... ......
   1ae08:	0000ffe2 fcff0000 000000ff ffffff00     ................
   1ae18:	00000000 ffffffff ffffffff ffffffff     ................
   1ae28:	ffffffff 11fbffff ffffffbf 1f00f1ff     ................
   1ae38:	ffffffff ff1f00f1 fbffffff ffffbf11     ................
   1ae48:	ffffffff 8fffffff ffffffff df00f8ff     ................
   1ae58:	0000fdff fcffff01 ff030000 0000f7ff     ................
   1ae68:	f2ffff06 ff080000 0000d0ff ffffff0a     ................
   1ae78:	ff0cd0ff a0ffffff ffffff0e ff0d20ff     ............. ..
   1ae88:	00f8ffff ff0a0000 000000e0 0050ff0e     ..............P.
   1ae98:	fc2f0000 00000000 0000f35f a09f0000     ../....._.......
   1aea8:	00000000 000010df 00d70000 04000000     ................
   1aeb8:	000040ee 99ffdf00 0000fdff ff99ffff     .@..............
   1aec8:	ff0000ff ffffffff ffff0000 00000090     ................
   1aed8:	0dffff00 200dffff ff0fffff ffe20fff     ....... ........
   1aee8:	ffff0fff fffffd0f 20ffff0f 0fffff00     ........... ....
   1aef8:	ffffffff ff0fffff ffffffff ffff0fff     ................
   1af08:	ffdfffff ffffff0f 0f0000ff ffffffff     ................
   1af18:	ff0f0000 00ffffff ffff0d00 0000fdff     ................
   1af28:	0000cc00 02000000 000030ff ffbf0100     .........0......
   1af38:	000020fc ffffff1e 9f0000e1 f8ffffff     . ..............
   1af48:	ffef0000 00fdffff ffffff00 0100ffff     ................
   1af58:	ffffffff ff0300ff ffffffff ffff0830     ............0...
   1af68:	80ffffff ffffff1e cfe1ffff ffffffff     ................
   1af78:	ffcffcff ffffffff 000000fc 00000000     ................
   1af88:	ff0e0000 000000e0 40ee0400 ff8f0000     ...........@....
   1af98:	ffffffff fff8ffff ffffffff ffffffff     ................
   1afa8:	0ff000ff 000ff000 f000ffff 0ff0000f     ................
   1afb8:	ffffff00 ffffffff ffffffff 888008f8     ................
   1afc8:	ff8f8008 8008f8ff 8f800888 ffffffff     ................
   1afd8:	ffffffff 00ffffff 000000f0 ffff000f     ................
   1afe8:	0000f000 ff000f00 ffffffff ffffffff     ................
   1aff8:	ffff8fff ffffffff 0000f8ff 00000000     ................
	...
   1b010:	70af0300 00000000 ffcf0400 000000f0     ...p............
   1b020:	ffdf0600 0000a0ff ffef1700 0030ffff     ..............0.
   1b030:	ffff1800 00fcffff ffff2a00 f4ffffff     .........*......
   1b040:	ffff0800 ffffffff ff0f00d0 ffffffff     ................
   1b050:	080060ff ffffffff 0000feff 00000000     .`..............
   1b060:	00f7ffff 00000000 f1ffff00 00000000     ................
   1b070:	ffff0000 00000080 ff000000 000010ff     ................
   1b080:	00000000 0000faff 00000000 00f2ff00     ................
   1b090:	00000000 808f0000 00000000 00000000     ................
   1b0a0:	00000000 f0ffffdf ffff00d2 20fef0ff     ............... 
   1b0b0:	f0ffffff ffffe2ff fdfff0ff f2ffffff     ................
   1b0c0:	ffff0000 ffffffff ffffffff ffffffff     ................
   1b0d0:	ffffffff ffffffff ffffffff ffffffff     ................
   1b0e0:	ffffffff ffffffff ffffffff ffffffff     ................
   1b0f0:	ffffffff ffffffff ffffffff ffdfffff     ................
   1b100:	fdffffff 00000000 00000000 00000000     ................
   1b110:	feef9c04 000040c9 ffef0700 feffffff     .....@..........
   1b120:	df040070 8aa8fcff 40fdffcf 00d5ff6f     p..........@o...
   1b130:	5d000000 f6cff6ff 00000000 fc6f0000     ...]..........o.
   1b140:	5a00301a 00a5fddf 0000a103 ffffff4d     .0.Z........M...
   1b150:	0000d4ff feff0500 ffef8aa8 01000050     ............P...
   1b160:	000070df 0010fd07 00120000 21000000     .p.............!
   1b170:	00000000 e44e0000 00000000 00000000     ......N.........
   1b180:	0000feef 00000000 feef0000 00000000     ................
   1b190:	00000000 0000e44e ff8f0000 ffffffff     ....N...........
   1b1a0:	80ffffff ffffffff ffffffff 00fff0ff     ................
   1b1b0:	00000000 fd0f0000 ffff0fff ffffffff     ................
   1b1c0:	0fffff0f ffffffff ff00ffff ffff0fff     ................
   1b1d0:	ffffffff 0fffff00 ffffffff ff0fffff     ................
   1b1e0:	000000ff 00000000 fffffd0f ffffffff     ................
   1b1f0:	f0ffffff ffffff8f ffffffff ff8f80ff     ................
   1b200:	ffffffff 80ffffff ffffffff ffffffff     ................
   1b210:	00fff0ff 00000000 fd0f0000 ffff0fff     ................
   1b220:	00f0ffff 0fffff0f ffffffff ff0000f0     ................
   1b230:	ffff0fff 00f0ffff 0fffff00 ffffffff     ................
   1b240:	ff0f00f0 000000ff 00000000 fffffd0f     ................
   1b250:	ffffffff f0ffffff ffffff8f ffffffff     ................
   1b260:	ff8f80ff ffffffff 80ffffff ffffffff     ................
   1b270:	ffffffff 00fff0ff 00000000 fd0f0000     ................
   1b280:	ffff0fff 000000ff 0fffff0f 00ffffff     ................
   1b290:	ff000000 ffff0fff 000000ff 0fffff00     ................
   1b2a0:	00ffffff ff0f0000 000000ff 00000000     ................
   1b2b0:	fffffd0f ffffffff f0ffffff ffffff8f     ................
   1b2c0:	ffffffff ff8f80ff ffffffff 80ffffff     ................
   1b2d0:	ffffffff ffffffff 00fff0ff 00000000     ................
   1b2e0:	fd0f0000 f0ff0fff 00000000 0fffff0f     ................
   1b2f0:	0000f0ff ff000000 f0ff0fff 00000000     ................
   1b300:	0fffff00 0000f0ff ff0f0000 000000ff     ................
   1b310:	00000000 fffffd0f ffffffff f0ffffff     ................
   1b320:	ffffff8f ffffffff ff8f80ff ffffffff     ................
   1b330:	80ffffff ffffffff ffffffff 00fff0ff     ................
   1b340:	00000000 fd0f0000 000000ff 00000000     ................
   1b350:	00ffff0f 00000000 ff000000 000000ff     ................
   1b360:	00000000 00ffff00 00000000 ff0f0000     ................
   1b370:	000000ff 00000000 fffffd0f ffffffff     ................
   1b380:	f0ffffff ffffff8f ffffffff 000080ff     ................
   1b390:	01000000 00000000 00000000 10fd0700     ................
   1b3a0:	00000000 cf010000 0000f5ff 00000000     ................
   1b3b0:	fe29b900 00000010 3f000000 00000210     ..)........?....
   1b3c0:	df030000 00900a80 70030000 77ffdf00     ...........p...w
   1b3d0:	555555f7 0fd38f55 dfccfdff cdccccdc     .UUUU...........
   1b3e0:	fe8fb0ff 00aa0010 404d0000 00104600     ..........M@.F..
   1b3f0:	3302f201 00000010 09000000 00f9cfb1     ...3............
   1b400:	00000000 ff0a0000 000090ff 00000000     ................
   1b410:	f9bf0000 00000000 00000000 00002201     ............."..
   1b420:	df180000 020092fd ffeffbef faff0d30     ............0...
   1b430:	4fe0ff2e ff03faff fafa9ff5 cffa4f35     ...O........5O..
   1b440:	0b3d8ac0 03fbeffd fffe8f12 ff06b0ff     ..=.............
   1b450:	d1ffffff efffff08 9f1011fd 59d1dfff     ...............Y
   1b460:	affd0b3b 1d38fad7 faff5ffb 0df7df01     ;.....8.._......
   1b470:	ff1dfaff fcef03f1 0050ffdf a3fedf18     ..........P.....
   1b480:	7f000000 0000f7ff ffffffef effeffff     ................
   1b490:	ffffffff 0000feff 00000000 ffff0f00     ................
   1b4a0:	f0ffffff ffffff0f 0ff0ffff f9999ff9     ................
   1b4b0:	f80ff09f 8ff8888f 8ff80ff0 f08ff888     ................
   1b4c0:	888ff80f 0ff08ff8 f8888ff8 f80ff08f     ................
   1b4d0:	8ff8888f 8ff80ff0 f08ff888 999ff90f     ................
   1b4e0:	0ff09ff9 ffffffff ff08f0ff ffffffff     ................
   1b4f0:	00000080 7f000000 000000a0 8f000000     ................
   1b500:	0000b0ff 0d000000 00a0ffff 8a000000     ................
   1b510:	00ffff1d 8f000000 70ff1dfa 8f000000     ...........p....
   1b520:	801dfaff 8f000000 00faffff 8f000000     ................
   1b530:	80ffffff 8f000000 80ffffff 8f000000     ................
   1b540:	80ffffff 8f000000 80ffffff 6f000000     ...............o
   1b550:	80ffffff 0b000000 80ffffff 00000000     ................
   1b560:	80ffffdf 00000000 80ffff0e 00000000     ................
   1b570:	60dbde00 00000000 00000000 00000000     ...`............
   1b580:	00000000 ffffff1b e4ffffff ffdf0100     ................
   1b590:	ffffffff 1d00feff effaffff ffffaffe     ................
   1b5a0:	ffffdf01 0ae22ea0 ff1dffff 02e2ffff     ................
   1b5b0:	ffff2e20 ffffffcf ef0220fe ffcfffff      ........ ......
   1b5c0:	20feffff ffffef02 ffffff1d 2e2002e2     ... .......... .
   1b5d0:	df01ffff 2ea0ffff ffff0ae2 ffff1d00     ................
   1b5e0:	affeeffa 0100ffff ffffffdf feffffff     ................
   1b5f0:	ff1b0000 ffffffff 0800e4ff e4ffffff     ................
   1b600:	ffff8f00 f808feff ff400b0f 0b0ff88f     ..........@.....
   1b610:	f8ffff40 ff400b0f ffffffff ffffffff     @.....@.........
   1b620:	ffffffff ffffffff ffffffff ffffffff     ................
   1b630:	ffffffff ffffffff ffffffff ffffffff     ................
   1b640:	ffffffff ffffffff ffffffff ffefffff     ................
   1b650:	feffffff ffffff4e 0000e4ff 00000000     ....N...........
   1b660:	00000100 00000000 00e00300 00001000     ................
   1b670:	10ef0200 0000bf00 f17f0000 00f1cf00     ................
   1b680:	ff070000 77ffcf11 bf777777 ffffcff1     .......wwww.....
   1b690:	ffffffff ffff17ff ffffffff ff07e0ff     ................
   1b6a0:	000000f1 06000000 000010ff 00000000     ................
   1b6b0:	0000a005 00000000                       ........

0001b6b8 <lv_anim_path_def>:
   1b6b8:	00010301 00000000                       ........

0001b6c0 <sin0_90_table>:
   1b6c0:	023c0000 06b30478 0b2808ee 0f990d61     ..<.x.....(.a...
   1b6d0:	140611d0 186c163a 1ccb1a9d 21211ef7     ....:.l.......!!
   1b6e0:	256c2348 29ac278e 2ddf2bc7 32032ff3     H#l%.'.).+.-./.2
   1b6f0:	36183410 3a1c381c 3e0e3c17 41ec3fff     .4.6.8.:.<.>.?.A
   1b700:	45b643d4 496a4793 4d084b3c 508d4ecd     .C.E.GjI<K.M.N.P
   1b710:	53f95246 574b55a5 5a8258ea 5d9c5c13     FR.S.UKW.X.Z.\.]
   1b720:	609a5f1f 6379620d 663964dd 68d9678d     ._.`.byc.d9f.g.h
   1b730:	6b596a1d 6db76c8c 6ff36ed9 720c7104     .jYk.l.m.n.o.q.r
   1b740:	7401730b 75d274ee 777f76ad 79067847     .s.t.t.u.v.wGx.y
   1b750:	7a6779bb 7ba27b0a 7cb77c32 7da57d33     .ygz.{.{2|.|3}.}
   1b760:	7e6c7e0d 7f0b7ec0 7f827f4b 7fd27faf     .~l~.~..K.......
   1b770:	7ffa7feb 00007fff 3b2e2c20 005f2d3a     ........ ,.;:-_.
   1b780:	0000ffff 00008410 008c80ef              ............

0001b78c <_init>:
   1b78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b78e:	bf00      	nop
   1b790:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1b792:	bc08      	pop	{r3}
   1b794:	469e      	mov	lr, r3
   1b796:	4770      	bx	lr

0001b798 <__init_array_start>:
   1b798:	00000289 	.word	0x00000289

0001b79c <_fini>:
   1b79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b79e:	bf00      	nop
   1b7a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1b7a2:	bc08      	pop	{r3}
   1b7a4:	469e      	mov	lr, r3
   1b7a6:	4770      	bx	lr

0001b7a8 <__fini_array_start>:
   1b7a8:	00000265 	.word	0x00000265
